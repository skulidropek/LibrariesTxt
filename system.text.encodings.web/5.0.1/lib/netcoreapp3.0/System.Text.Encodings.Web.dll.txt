internal static class FxResources.System.Text.Encodings.Web.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.HexConverter : object {
    public static ReadOnlySpan`1<byte> CharToHexLookup { get; }
    public static void ToBytesBuffer(byte value, Span`1<byte> buffer, int startingIndex, Casing casing);
    public static void ToCharsBuffer(byte value, Span`1<char> buffer, int startingIndex, Casing casing);
    public static void EncodeToUtf16(ReadOnlySpan`1<byte> bytes, Span`1<char> chars, Casing casing);
    public static string ToString(ReadOnlySpan`1<byte> bytes, Casing casing);
    public static char ToCharUpper(int value);
    public static char ToCharLower(int value);
    public static bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes);
    public static bool TryDecodeFromUtf16(ReadOnlySpan`1<char> chars, Span`1<byte> bytes, Int32& charsProcessed);
    public static int FromChar(int c);
    public static int FromUpperChar(int c);
    public static int FromLowerChar(int c);
    public static bool IsHexChar(int c);
    public static bool IsHexUpperChar(int c);
    public static bool IsHexLowerChar(int c);
    public static ReadOnlySpan`1<byte> get_CharToHexLookup();
}
[ExtensionAttribute]
internal static class System.IO.TextWriterExtensions : object {
    [ExtensionAttribute]
public static void WritePartialString(TextWriter writer, string value, int offset, int count);
}
[AttributeUsageAttribute("364")]
internal class System.Runtime.CompilerServices.IntrinsicAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CLSCompliantAttribute("False")]
internal abstract class System.Runtime.Intrinsics.Arm.AdvSimd : ArmBase {
    public static bool IsSupported { get; }
    [IntrinsicAttribute]
public static bool get_IsSupported();
    public static Vector64`1<ushort> Abs(Vector64`1<short> value);
    public static Vector64`1<UInt32> Abs(Vector64`1<int> value);
    public static Vector64`1<byte> Abs(Vector64`1<sbyte> value);
    public static Vector64`1<float> Abs(Vector64`1<float> value);
    public static Vector128`1<ushort> Abs(Vector128`1<short> value);
    public static Vector128`1<UInt32> Abs(Vector128`1<int> value);
    public static Vector128`1<byte> Abs(Vector128`1<sbyte> value);
    public static Vector128`1<float> Abs(Vector128`1<float> value);
    public static Vector64`1<short> AbsSaturate(Vector64`1<short> value);
    public static Vector64`1<int> AbsSaturate(Vector64`1<int> value);
    public static Vector64`1<sbyte> AbsSaturate(Vector64`1<sbyte> value);
    public static Vector128`1<short> AbsSaturate(Vector128`1<short> value);
    public static Vector128`1<int> AbsSaturate(Vector128`1<int> value);
    public static Vector128`1<sbyte> AbsSaturate(Vector128`1<sbyte> value);
    public static Vector64`1<double> AbsScalar(Vector64`1<double> value);
    public static Vector64`1<float> AbsScalar(Vector64`1<float> value);
    public static Vector64`1<float> AbsoluteCompareGreaterThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> AbsoluteCompareGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> AbsoluteCompareGreaterThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> AbsoluteCompareGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> AbsoluteCompareLessThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> AbsoluteCompareLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> AbsoluteCompareLessThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> AbsoluteCompareLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<byte> AbsoluteDifference(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<ushort> AbsoluteDifference(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<UInt32> AbsoluteDifference(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<byte> AbsoluteDifference(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> AbsoluteDifference(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> AbsoluteDifference(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AbsoluteDifference(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> AbsoluteDifference(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<ushort> AbsoluteDifference(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<UInt32> AbsoluteDifference(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<byte> AbsoluteDifference(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> AbsoluteDifference(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> AbsoluteDifference(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AbsoluteDifference(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> AbsoluteDifferenceAdd(Vector64`1<byte> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> AbsoluteDifferenceAdd(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> AbsoluteDifferenceAdd(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> AbsoluteDifferenceAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> AbsoluteDifferenceAdd(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AbsoluteDifferenceAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> AbsoluteDifferenceAdd(Vector128`1<byte> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> AbsoluteDifferenceAdd(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> AbsoluteDifferenceAdd(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> AbsoluteDifferenceAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AbsoluteDifferenceAdd(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<ushort> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<short> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ushort> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<ushort> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<short> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<short> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> AbsoluteDifferenceWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> Add(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Add(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Add(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Add(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Add(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Add(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Add(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Add(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Add(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Add(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Add(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Add(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Add(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Add(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Add(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Add(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> AddHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<short> AddHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> AddHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<sbyte> AddHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<ushort> AddHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> AddHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> AddHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> AddHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> AddHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> AddHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> AddHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> AddHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> AddPairwise(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> AddPairwise(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> AddPairwise(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> AddPairwise(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> AddPairwise(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> AddPairwise(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AddPairwise(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ushort> AddPairwiseWidening(Vector64`1<byte> value);
    public static Vector64`1<int> AddPairwiseWidening(Vector64`1<short> value);
    public static Vector64`1<short> AddPairwiseWidening(Vector64`1<sbyte> value);
    public static Vector64`1<UInt32> AddPairwiseWidening(Vector64`1<ushort> value);
    public static Vector128`1<ushort> AddPairwiseWidening(Vector128`1<byte> value);
    public static Vector128`1<int> AddPairwiseWidening(Vector128`1<short> value);
    public static Vector128`1<long> AddPairwiseWidening(Vector128`1<int> value);
    public static Vector128`1<short> AddPairwiseWidening(Vector128`1<sbyte> value);
    public static Vector128`1<UInt32> AddPairwiseWidening(Vector128`1<ushort> value);
    public static Vector128`1<ulong> AddPairwiseWidening(Vector128`1<UInt32> value);
    public static Vector64`1<ushort> AddPairwiseWideningAndAdd(Vector64`1<ushort> addend, Vector64`1<byte> value);
    public static Vector64`1<int> AddPairwiseWideningAndAdd(Vector64`1<int> addend, Vector64`1<short> value);
    public static Vector64`1<short> AddPairwiseWideningAndAdd(Vector64`1<short> addend, Vector64`1<sbyte> value);
    public static Vector64`1<UInt32> AddPairwiseWideningAndAdd(Vector64`1<UInt32> addend, Vector64`1<ushort> value);
    public static Vector128`1<ushort> AddPairwiseWideningAndAdd(Vector128`1<ushort> addend, Vector128`1<byte> value);
    public static Vector128`1<int> AddPairwiseWideningAndAdd(Vector128`1<int> addend, Vector128`1<short> value);
    public static Vector128`1<long> AddPairwiseWideningAndAdd(Vector128`1<long> addend, Vector128`1<int> value);
    public static Vector128`1<short> AddPairwiseWideningAndAdd(Vector128`1<short> addend, Vector128`1<sbyte> value);
    public static Vector128`1<UInt32> AddPairwiseWideningAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> value);
    public static Vector128`1<ulong> AddPairwiseWideningAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> value);
    public static Vector64`1<long> AddPairwiseWideningAndAddScalar(Vector64`1<long> addend, Vector64`1<int> value);
    public static Vector64`1<ulong> AddPairwiseWideningAndAddScalar(Vector64`1<ulong> addend, Vector64`1<UInt32> value);
    public static Vector64`1<long> AddPairwiseWideningScalar(Vector64`1<int> value);
    public static Vector64`1<ulong> AddPairwiseWideningScalar(Vector64`1<UInt32> value);
    public static Vector64`1<byte> AddRoundedHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<short> AddRoundedHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> AddRoundedHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<sbyte> AddRoundedHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<ushort> AddRoundedHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> AddRoundedHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> AddRoundedHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> AddRoundedHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> AddRoundedHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> AddRoundedHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> AddRoundedHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> AddRoundedHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> AddSaturate(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> AddSaturate(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> AddSaturate(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> AddSaturate(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> AddSaturate(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> AddSaturate(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> AddSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> AddSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> AddSaturate(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> AddSaturate(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> AddSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AddSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AddSaturate(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> AddSaturate(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<long> AddSaturateScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<ulong> AddSaturateScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector64`1<double> AddScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<long> AddScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<float> AddScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ulong> AddScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<ushort> AddWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> AddWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> AddWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> AddWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> AddWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AddWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> AddWideningLower(Vector128`1<short> left, Vector64`1<sbyte> right);
    public static Vector128`1<int> AddWideningLower(Vector128`1<int> left, Vector64`1<short> right);
    public static Vector128`1<long> AddWideningLower(Vector128`1<long> left, Vector64`1<int> right);
    public static Vector128`1<ushort> AddWideningLower(Vector128`1<ushort> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> AddWideningLower(Vector128`1<UInt32> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> AddWideningLower(Vector128`1<ulong> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> AddWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> AddWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> AddWideningUpper(Vector128`1<short> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> AddWideningUpper(Vector128`1<int> left, Vector128`1<short> right);
    public static Vector128`1<long> AddWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> AddWideningUpper(Vector128`1<long> left, Vector128`1<int> right);
    public static Vector128`1<short> AddWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> AddWideningUpper(Vector128`1<ushort> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> AddWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> AddWideningUpper(Vector128`1<UInt32> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> AddWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> AddWideningUpper(Vector128`1<ulong> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> And(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> And(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> And(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> And(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> And(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> And(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> And(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> And(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> And(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> And(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> And(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> And(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> And(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> And(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> And(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> And(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> And(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> And(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> And(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> And(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> BitwiseClear(Vector64`1<byte> value, Vector64`1<byte> mask);
    public static Vector64`1<double> BitwiseClear(Vector64`1<double> value, Vector64`1<double> mask);
    public static Vector64`1<short> BitwiseClear(Vector64`1<short> value, Vector64`1<short> mask);
    public static Vector64`1<int> BitwiseClear(Vector64`1<int> value, Vector64`1<int> mask);
    public static Vector64`1<long> BitwiseClear(Vector64`1<long> value, Vector64`1<long> mask);
    public static Vector64`1<sbyte> BitwiseClear(Vector64`1<sbyte> value, Vector64`1<sbyte> mask);
    public static Vector64`1<float> BitwiseClear(Vector64`1<float> value, Vector64`1<float> mask);
    public static Vector64`1<ushort> BitwiseClear(Vector64`1<ushort> value, Vector64`1<ushort> mask);
    public static Vector64`1<UInt32> BitwiseClear(Vector64`1<UInt32> value, Vector64`1<UInt32> mask);
    public static Vector64`1<ulong> BitwiseClear(Vector64`1<ulong> value, Vector64`1<ulong> mask);
    public static Vector128`1<byte> BitwiseClear(Vector128`1<byte> value, Vector128`1<byte> mask);
    public static Vector128`1<double> BitwiseClear(Vector128`1<double> value, Vector128`1<double> mask);
    public static Vector128`1<short> BitwiseClear(Vector128`1<short> value, Vector128`1<short> mask);
    public static Vector128`1<int> BitwiseClear(Vector128`1<int> value, Vector128`1<int> mask);
    public static Vector128`1<long> BitwiseClear(Vector128`1<long> value, Vector128`1<long> mask);
    public static Vector128`1<sbyte> BitwiseClear(Vector128`1<sbyte> value, Vector128`1<sbyte> mask);
    public static Vector128`1<float> BitwiseClear(Vector128`1<float> value, Vector128`1<float> mask);
    public static Vector128`1<ushort> BitwiseClear(Vector128`1<ushort> value, Vector128`1<ushort> mask);
    public static Vector128`1<UInt32> BitwiseClear(Vector128`1<UInt32> value, Vector128`1<UInt32> mask);
    public static Vector128`1<ulong> BitwiseClear(Vector128`1<ulong> value, Vector128`1<ulong> mask);
    public static Vector64`1<byte> BitwiseSelect(Vector64`1<byte> select, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> BitwiseSelect(Vector64`1<double> select, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> BitwiseSelect(Vector64`1<short> select, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> BitwiseSelect(Vector64`1<int> select, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> BitwiseSelect(Vector64`1<long> select, Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> BitwiseSelect(Vector64`1<sbyte> select, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> BitwiseSelect(Vector64`1<float> select, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> BitwiseSelect(Vector64`1<ushort> select, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> BitwiseSelect(Vector64`1<UInt32> select, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> BitwiseSelect(Vector64`1<ulong> select, Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> BitwiseSelect(Vector128`1<byte> select, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> BitwiseSelect(Vector128`1<double> select, Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> BitwiseSelect(Vector128`1<short> select, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> BitwiseSelect(Vector128`1<int> select, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> BitwiseSelect(Vector128`1<long> select, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> BitwiseSelect(Vector128`1<sbyte> select, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> BitwiseSelect(Vector128`1<float> select, Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> BitwiseSelect(Vector128`1<ushort> select, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> BitwiseSelect(Vector128`1<UInt32> select, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> BitwiseSelect(Vector128`1<ulong> select, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<float> Ceiling(Vector64`1<float> value);
    public static Vector128`1<float> Ceiling(Vector128`1<float> value);
    public static Vector64`1<double> CeilingScalar(Vector64`1<double> value);
    public static Vector64`1<float> CeilingScalar(Vector64`1<float> value);
    public static Vector64`1<byte> CompareEqual(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareEqual(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareEqual(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareEqual(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareEqual(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareEqual(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareGreaterThan(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareGreaterThan(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareGreaterThan(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareGreaterThan(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareGreaterThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareGreaterThan(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareGreaterThan(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareGreaterThan(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareGreaterThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareGreaterThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareGreaterThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareGreaterThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareGreaterThan(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareGreaterThan(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareGreaterThanOrEqual(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareGreaterThanOrEqual(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareGreaterThanOrEqual(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareGreaterThanOrEqual(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareGreaterThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareGreaterThanOrEqual(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareGreaterThanOrEqual(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareGreaterThanOrEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareGreaterThanOrEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareGreaterThanOrEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareGreaterThanOrEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareGreaterThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareGreaterThanOrEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareGreaterThanOrEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareLessThan(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareLessThan(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareLessThan(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareLessThan(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareLessThan(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareLessThan(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareLessThan(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareLessThan(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareLessThan(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareLessThan(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareLessThan(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareLessThan(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareLessThan(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareLessThan(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareLessThanOrEqual(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareLessThanOrEqual(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareLessThanOrEqual(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareLessThanOrEqual(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareLessThanOrEqual(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareLessThanOrEqual(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareLessThanOrEqual(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareLessThanOrEqual(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareLessThanOrEqual(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareLessThanOrEqual(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareLessThanOrEqual(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareLessThanOrEqual(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareLessThanOrEqual(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareLessThanOrEqual(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> CompareTest(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> CompareTest(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> CompareTest(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> CompareTest(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> CompareTest(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> CompareTest(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> CompareTest(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> CompareTest(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> CompareTest(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> CompareTest(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> CompareTest(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> CompareTest(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> CompareTest(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> CompareTest(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<int> ConvertToInt32RoundAwayFromZero(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundAwayFromZero(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundAwayFromZeroScalar(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToEven(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToEven(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToEvenScalar(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToNegativeInfinity(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToNegativeInfinity(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToNegativeInfinityScalar(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToPositiveInfinity(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToPositiveInfinity(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToPositiveInfinityScalar(Vector64`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToZero(Vector64`1<float> value);
    public static Vector128`1<int> ConvertToInt32RoundToZero(Vector128`1<float> value);
    public static Vector64`1<int> ConvertToInt32RoundToZeroScalar(Vector64`1<float> value);
    public static Vector64`1<float> ConvertToSingle(Vector64`1<int> value);
    public static Vector64`1<float> ConvertToSingle(Vector64`1<UInt32> value);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<int> value);
    public static Vector128`1<float> ConvertToSingle(Vector128`1<UInt32> value);
    public static Vector64`1<float> ConvertToSingleScalar(Vector64`1<int> value);
    public static Vector64`1<float> ConvertToSingleScalar(Vector64`1<UInt32> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundAwayFromZero(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundAwayFromZero(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundAwayFromZeroScalar(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToEven(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToEven(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToEvenScalar(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToNegativeInfinity(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToNegativeInfinity(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToNegativeInfinityScalar(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToPositiveInfinity(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToPositiveInfinity(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToPositiveInfinityScalar(Vector64`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToZero(Vector64`1<float> value);
    public static Vector128`1<UInt32> ConvertToUInt32RoundToZero(Vector128`1<float> value);
    public static Vector64`1<UInt32> ConvertToUInt32RoundToZeroScalar(Vector64`1<float> value);
    public static Vector64`1<double> DivideScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> DivideScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<byte> DuplicateSelectedScalarToVector64(Vector64`1<byte> value, byte index);
    public static Vector64`1<short> DuplicateSelectedScalarToVector64(Vector64`1<short> value, byte index);
    public static Vector64`1<int> DuplicateSelectedScalarToVector64(Vector64`1<int> value, byte index);
    public static Vector64`1<float> DuplicateSelectedScalarToVector64(Vector64`1<float> value, byte index);
    public static Vector64`1<sbyte> DuplicateSelectedScalarToVector64(Vector64`1<sbyte> value, byte index);
    public static Vector64`1<ushort> DuplicateSelectedScalarToVector64(Vector64`1<ushort> value, byte index);
    public static Vector64`1<UInt32> DuplicateSelectedScalarToVector64(Vector64`1<UInt32> value, byte index);
    public static Vector64`1<byte> DuplicateSelectedScalarToVector64(Vector128`1<byte> value, byte index);
    public static Vector64`1<short> DuplicateSelectedScalarToVector64(Vector128`1<short> value, byte index);
    public static Vector64`1<int> DuplicateSelectedScalarToVector64(Vector128`1<int> value, byte index);
    public static Vector64`1<float> DuplicateSelectedScalarToVector64(Vector128`1<float> value, byte index);
    public static Vector64`1<sbyte> DuplicateSelectedScalarToVector64(Vector128`1<sbyte> value, byte index);
    public static Vector64`1<ushort> DuplicateSelectedScalarToVector64(Vector128`1<ushort> value, byte index);
    public static Vector64`1<UInt32> DuplicateSelectedScalarToVector64(Vector128`1<UInt32> value, byte index);
    public static Vector128`1<byte> DuplicateSelectedScalarToVector128(Vector64`1<byte> value, byte index);
    public static Vector128`1<short> DuplicateSelectedScalarToVector128(Vector64`1<short> value, byte index);
    public static Vector128`1<int> DuplicateSelectedScalarToVector128(Vector64`1<int> value, byte index);
    public static Vector128`1<float> DuplicateSelectedScalarToVector128(Vector64`1<float> value, byte index);
    public static Vector128`1<sbyte> DuplicateSelectedScalarToVector128(Vector64`1<sbyte> value, byte index);
    public static Vector128`1<ushort> DuplicateSelectedScalarToVector128(Vector64`1<ushort> value, byte index);
    public static Vector128`1<UInt32> DuplicateSelectedScalarToVector128(Vector64`1<UInt32> value, byte index);
    public static Vector128`1<byte> DuplicateSelectedScalarToVector128(Vector128`1<byte> value, byte index);
    public static Vector128`1<short> DuplicateSelectedScalarToVector128(Vector128`1<short> value, byte index);
    public static Vector128`1<int> DuplicateSelectedScalarToVector128(Vector128`1<int> value, byte index);
    public static Vector128`1<float> DuplicateSelectedScalarToVector128(Vector128`1<float> value, byte index);
    public static Vector128`1<sbyte> DuplicateSelectedScalarToVector128(Vector128`1<sbyte> value, byte index);
    public static Vector128`1<ushort> DuplicateSelectedScalarToVector128(Vector128`1<ushort> value, byte index);
    public static Vector128`1<UInt32> DuplicateSelectedScalarToVector128(Vector128`1<UInt32> value, byte index);
    public static Vector64`1<byte> DuplicateToVector64(byte value);
    public static Vector64`1<short> DuplicateToVector64(short value);
    public static Vector64`1<int> DuplicateToVector64(int value);
    public static Vector64`1<sbyte> DuplicateToVector64(sbyte value);
    public static Vector64`1<float> DuplicateToVector64(float value);
    public static Vector64`1<ushort> DuplicateToVector64(ushort value);
    public static Vector64`1<UInt32> DuplicateToVector64(UInt32 value);
    public static Vector128`1<byte> DuplicateToVector128(byte value);
    public static Vector128`1<short> DuplicateToVector128(short value);
    public static Vector128`1<int> DuplicateToVector128(int value);
    public static Vector128`1<sbyte> DuplicateToVector128(sbyte value);
    public static Vector128`1<float> DuplicateToVector128(float value);
    public static Vector128`1<ushort> DuplicateToVector128(ushort value);
    public static Vector128`1<UInt32> DuplicateToVector128(UInt32 value);
    public static byte Extract(Vector64`1<byte> vector, byte index);
    public static short Extract(Vector64`1<short> vector, byte index);
    public static int Extract(Vector64`1<int> vector, byte index);
    public static sbyte Extract(Vector64`1<sbyte> vector, byte index);
    public static float Extract(Vector64`1<float> vector, byte index);
    public static ushort Extract(Vector64`1<ushort> vector, byte index);
    public static UInt32 Extract(Vector64`1<UInt32> vector, byte index);
    public static byte Extract(Vector128`1<byte> vector, byte index);
    public static double Extract(Vector128`1<double> vector, byte index);
    public static short Extract(Vector128`1<short> vector, byte index);
    public static int Extract(Vector128`1<int> vector, byte index);
    public static long Extract(Vector128`1<long> vector, byte index);
    public static sbyte Extract(Vector128`1<sbyte> vector, byte index);
    public static float Extract(Vector128`1<float> vector, byte index);
    public static ushort Extract(Vector128`1<ushort> vector, byte index);
    public static UInt32 Extract(Vector128`1<UInt32> vector, byte index);
    public static ulong Extract(Vector128`1<ulong> vector, byte index);
    public static Vector64`1<byte> ExtractNarrowingLower(Vector128`1<ushort> value);
    public static Vector64`1<short> ExtractNarrowingLower(Vector128`1<int> value);
    public static Vector64`1<int> ExtractNarrowingLower(Vector128`1<long> value);
    public static Vector64`1<sbyte> ExtractNarrowingLower(Vector128`1<short> value);
    public static Vector64`1<ushort> ExtractNarrowingLower(Vector128`1<UInt32> value);
    public static Vector64`1<UInt32> ExtractNarrowingLower(Vector128`1<ulong> value);
    public static Vector64`1<byte> ExtractNarrowingSaturateLower(Vector128`1<ushort> value);
    public static Vector64`1<short> ExtractNarrowingSaturateLower(Vector128`1<int> value);
    public static Vector64`1<int> ExtractNarrowingSaturateLower(Vector128`1<long> value);
    public static Vector64`1<sbyte> ExtractNarrowingSaturateLower(Vector128`1<short> value);
    public static Vector64`1<ushort> ExtractNarrowingSaturateLower(Vector128`1<UInt32> value);
    public static Vector64`1<UInt32> ExtractNarrowingSaturateLower(Vector128`1<ulong> value);
    public static Vector64`1<byte> ExtractNarrowingSaturateUnsignedLower(Vector128`1<short> value);
    public static Vector64`1<ushort> ExtractNarrowingSaturateUnsignedLower(Vector128`1<int> value);
    public static Vector64`1<UInt32> ExtractNarrowingSaturateUnsignedLower(Vector128`1<long> value);
    public static Vector128`1<byte> ExtractNarrowingSaturateUnsignedUpper(Vector64`1<byte> lower, Vector128`1<short> value);
    public static Vector128`1<ushort> ExtractNarrowingSaturateUnsignedUpper(Vector64`1<ushort> lower, Vector128`1<int> value);
    public static Vector128`1<UInt32> ExtractNarrowingSaturateUnsignedUpper(Vector64`1<UInt32> lower, Vector128`1<long> value);
    public static Vector128`1<byte> ExtractNarrowingSaturateUpper(Vector64`1<byte> lower, Vector128`1<ushort> value);
    public static Vector128`1<short> ExtractNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value);
    public static Vector128`1<int> ExtractNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value);
    public static Vector128`1<sbyte> ExtractNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value);
    public static Vector128`1<ushort> ExtractNarrowingSaturateUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value);
    public static Vector128`1<UInt32> ExtractNarrowingSaturateUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value);
    public static Vector128`1<byte> ExtractNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> value);
    public static Vector128`1<short> ExtractNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> value);
    public static Vector128`1<int> ExtractNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> value);
    public static Vector128`1<sbyte> ExtractNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> value);
    public static Vector128`1<ushort> ExtractNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value);
    public static Vector128`1<UInt32> ExtractNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value);
    public static Vector64`1<byte> ExtractVector64(Vector64`1<byte> upper, Vector64`1<byte> lower, byte index);
    public static Vector64`1<short> ExtractVector64(Vector64`1<short> upper, Vector64`1<short> lower, byte index);
    public static Vector64`1<int> ExtractVector64(Vector64`1<int> upper, Vector64`1<int> lower, byte index);
    public static Vector64`1<sbyte> ExtractVector64(Vector64`1<sbyte> upper, Vector64`1<sbyte> lower, byte index);
    public static Vector64`1<float> ExtractVector64(Vector64`1<float> upper, Vector64`1<float> lower, byte index);
    public static Vector64`1<ushort> ExtractVector64(Vector64`1<ushort> upper, Vector64`1<ushort> lower, byte index);
    public static Vector64`1<UInt32> ExtractVector64(Vector64`1<UInt32> upper, Vector64`1<UInt32> lower, byte index);
    public static Vector128`1<byte> ExtractVector128(Vector128`1<byte> upper, Vector128`1<byte> lower, byte index);
    public static Vector128`1<double> ExtractVector128(Vector128`1<double> upper, Vector128`1<double> lower, byte index);
    public static Vector128`1<short> ExtractVector128(Vector128`1<short> upper, Vector128`1<short> lower, byte index);
    public static Vector128`1<int> ExtractVector128(Vector128`1<int> upper, Vector128`1<int> lower, byte index);
    public static Vector128`1<long> ExtractVector128(Vector128`1<long> upper, Vector128`1<long> lower, byte index);
    public static Vector128`1<sbyte> ExtractVector128(Vector128`1<sbyte> upper, Vector128`1<sbyte> lower, byte index);
    public static Vector128`1<float> ExtractVector128(Vector128`1<float> upper, Vector128`1<float> lower, byte index);
    public static Vector128`1<ushort> ExtractVector128(Vector128`1<ushort> upper, Vector128`1<ushort> lower, byte index);
    public static Vector128`1<UInt32> ExtractVector128(Vector128`1<UInt32> upper, Vector128`1<UInt32> lower, byte index);
    public static Vector128`1<ulong> ExtractVector128(Vector128`1<ulong> upper, Vector128`1<ulong> lower, byte index);
    public static Vector64`1<float> Floor(Vector64`1<float> value);
    public static Vector128`1<float> Floor(Vector128`1<float> value);
    public static Vector64`1<double> FloorScalar(Vector64`1<double> value);
    public static Vector64`1<float> FloorScalar(Vector64`1<float> value);
    public static Vector64`1<byte> FusedAddHalving(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> FusedAddHalving(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> FusedAddHalving(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> FusedAddHalving(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> FusedAddHalving(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> FusedAddHalving(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> FusedAddHalving(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> FusedAddHalving(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> FusedAddHalving(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> FusedAddHalving(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> FusedAddHalving(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> FusedAddHalving(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> FusedAddRoundedHalving(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> FusedAddRoundedHalving(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> FusedAddRoundedHalving(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> FusedAddRoundedHalving(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> FusedAddRoundedHalving(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> FusedAddRoundedHalving(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> FusedAddRoundedHalving(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> FusedAddRoundedHalving(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> FusedAddRoundedHalving(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> FusedAddRoundedHalving(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> FusedAddRoundedHalving(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> FusedAddRoundedHalving(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<float> FusedMultiplyAdd(Vector64`1<float> addend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> FusedMultiplyAdd(Vector128`1<float> addend, Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<double> FusedMultiplyAddNegatedScalar(Vector64`1<double> addend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplyAddNegatedScalar(Vector64`1<float> addend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> FusedMultiplyAddScalar(Vector64`1<double> addend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplyAddScalar(Vector64`1<float> addend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<float> FusedMultiplySubtract(Vector64`1<float> minuend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> FusedMultiplySubtract(Vector128`1<float> minuend, Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<double> FusedMultiplySubtractNegatedScalar(Vector64`1<double> minuend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplySubtractNegatedScalar(Vector64`1<float> minuend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<double> FusedMultiplySubtractScalar(Vector64`1<double> minuend, Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> FusedMultiplySubtractScalar(Vector64`1<float> minuend, Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<byte> FusedSubtractHalving(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> FusedSubtractHalving(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> FusedSubtractHalving(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> FusedSubtractHalving(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> FusedSubtractHalving(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> FusedSubtractHalving(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> FusedSubtractHalving(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> FusedSubtractHalving(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> FusedSubtractHalving(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> FusedSubtractHalving(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> FusedSubtractHalving(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> FusedSubtractHalving(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> Insert(Vector64`1<byte> vector, byte index, byte data);
    public static Vector64`1<short> Insert(Vector64`1<short> vector, byte index, short data);
    public static Vector64`1<int> Insert(Vector64`1<int> vector, byte index, int data);
    public static Vector64`1<sbyte> Insert(Vector64`1<sbyte> vector, byte index, sbyte data);
    public static Vector64`1<float> Insert(Vector64`1<float> vector, byte index, float data);
    public static Vector64`1<ushort> Insert(Vector64`1<ushort> vector, byte index, ushort data);
    public static Vector64`1<UInt32> Insert(Vector64`1<UInt32> vector, byte index, UInt32 data);
    public static Vector128`1<byte> Insert(Vector128`1<byte> vector, byte index, byte data);
    public static Vector128`1<double> Insert(Vector128`1<double> vector, byte index, double data);
    public static Vector128`1<short> Insert(Vector128`1<short> vector, byte index, short data);
    public static Vector128`1<int> Insert(Vector128`1<int> vector, byte index, int data);
    public static Vector128`1<long> Insert(Vector128`1<long> vector, byte index, long data);
    public static Vector128`1<sbyte> Insert(Vector128`1<sbyte> vector, byte index, sbyte data);
    public static Vector128`1<float> Insert(Vector128`1<float> vector, byte index, float data);
    public static Vector128`1<ushort> Insert(Vector128`1<ushort> vector, byte index, ushort data);
    public static Vector128`1<UInt32> Insert(Vector128`1<UInt32> vector, byte index, UInt32 data);
    public static Vector128`1<ulong> Insert(Vector128`1<ulong> vector, byte index, ulong data);
    public static Vector128`1<double> InsertScalar(Vector128`1<double> result, byte resultIndex, Vector64`1<double> value);
    public static Vector128`1<long> InsertScalar(Vector128`1<long> result, byte resultIndex, Vector64`1<long> value);
    public static Vector128`1<ulong> InsertScalar(Vector128`1<ulong> result, byte resultIndex, Vector64`1<ulong> value);
    public static Vector64`1<short> LeadingSignCount(Vector64`1<short> value);
    public static Vector64`1<int> LeadingSignCount(Vector64`1<int> value);
    public static Vector64`1<sbyte> LeadingSignCount(Vector64`1<sbyte> value);
    public static Vector128`1<short> LeadingSignCount(Vector128`1<short> value);
    public static Vector128`1<int> LeadingSignCount(Vector128`1<int> value);
    public static Vector128`1<sbyte> LeadingSignCount(Vector128`1<sbyte> value);
    public static Vector64`1<byte> LeadingZeroCount(Vector64`1<byte> value);
    public static Vector64`1<short> LeadingZeroCount(Vector64`1<short> value);
    public static Vector64`1<int> LeadingZeroCount(Vector64`1<int> value);
    public static Vector64`1<sbyte> LeadingZeroCount(Vector64`1<sbyte> value);
    public static Vector64`1<ushort> LeadingZeroCount(Vector64`1<ushort> value);
    public static Vector64`1<UInt32> LeadingZeroCount(Vector64`1<UInt32> value);
    public static Vector128`1<byte> LeadingZeroCount(Vector128`1<byte> value);
    public static Vector128`1<short> LeadingZeroCount(Vector128`1<short> value);
    public static Vector128`1<int> LeadingZeroCount(Vector128`1<int> value);
    public static Vector128`1<sbyte> LeadingZeroCount(Vector128`1<sbyte> value);
    public static Vector128`1<ushort> LeadingZeroCount(Vector128`1<ushort> value);
    public static Vector128`1<UInt32> LeadingZeroCount(Vector128`1<UInt32> value);
    public static Vector64`1<byte> LoadAndInsertScalar(Vector64`1<byte> value, byte index, Byte* address);
    public static Vector64`1<short> LoadAndInsertScalar(Vector64`1<short> value, byte index, Int16* address);
    public static Vector64`1<int> LoadAndInsertScalar(Vector64`1<int> value, byte index, Int32* address);
    public static Vector64`1<sbyte> LoadAndInsertScalar(Vector64`1<sbyte> value, byte index, SByte* address);
    public static Vector64`1<float> LoadAndInsertScalar(Vector64`1<float> value, byte index, Single* address);
    public static Vector64`1<ushort> LoadAndInsertScalar(Vector64`1<ushort> value, byte index, UInt16* address);
    public static Vector64`1<UInt32> LoadAndInsertScalar(Vector64`1<UInt32> value, byte index, UInt32* address);
    public static Vector128`1<byte> LoadAndInsertScalar(Vector128`1<byte> value, byte index, Byte* address);
    public static Vector128`1<double> LoadAndInsertScalar(Vector128`1<double> value, byte index, Double* address);
    public static Vector128`1<short> LoadAndInsertScalar(Vector128`1<short> value, byte index, Int16* address);
    public static Vector128`1<int> LoadAndInsertScalar(Vector128`1<int> value, byte index, Int32* address);
    public static Vector128`1<long> LoadAndInsertScalar(Vector128`1<long> value, byte index, Int64* address);
    public static Vector128`1<sbyte> LoadAndInsertScalar(Vector128`1<sbyte> value, byte index, SByte* address);
    public static Vector128`1<float> LoadAndInsertScalar(Vector128`1<float> value, byte index, Single* address);
    public static Vector128`1<ushort> LoadAndInsertScalar(Vector128`1<ushort> value, byte index, UInt16* address);
    public static Vector128`1<UInt32> LoadAndInsertScalar(Vector128`1<UInt32> value, byte index, UInt32* address);
    public static Vector128`1<ulong> LoadAndInsertScalar(Vector128`1<ulong> value, byte index, UInt64* address);
    public static Vector64`1<byte> LoadAndReplicateToVector64(Byte* address);
    public static Vector64`1<short> LoadAndReplicateToVector64(Int16* address);
    public static Vector64`1<int> LoadAndReplicateToVector64(Int32* address);
    public static Vector64`1<sbyte> LoadAndReplicateToVector64(SByte* address);
    public static Vector64`1<float> LoadAndReplicateToVector64(Single* address);
    public static Vector64`1<ushort> LoadAndReplicateToVector64(UInt16* address);
    public static Vector64`1<UInt32> LoadAndReplicateToVector64(UInt32* address);
    public static Vector128`1<byte> LoadAndReplicateToVector128(Byte* address);
    public static Vector128`1<short> LoadAndReplicateToVector128(Int16* address);
    public static Vector128`1<int> LoadAndReplicateToVector128(Int32* address);
    public static Vector128`1<sbyte> LoadAndReplicateToVector128(SByte* address);
    public static Vector128`1<float> LoadAndReplicateToVector128(Single* address);
    public static Vector128`1<ushort> LoadAndReplicateToVector128(UInt16* address);
    public static Vector128`1<UInt32> LoadAndReplicateToVector128(UInt32* address);
    public static Vector64`1<byte> LoadVector64(Byte* address);
    public static Vector64`1<double> LoadVector64(Double* address);
    public static Vector64`1<short> LoadVector64(Int16* address);
    public static Vector64`1<int> LoadVector64(Int32* address);
    public static Vector64`1<long> LoadVector64(Int64* address);
    public static Vector64`1<sbyte> LoadVector64(SByte* address);
    public static Vector64`1<float> LoadVector64(Single* address);
    public static Vector64`1<ushort> LoadVector64(UInt16* address);
    public static Vector64`1<UInt32> LoadVector64(UInt32* address);
    public static Vector64`1<ulong> LoadVector64(UInt64* address);
    public static Vector128`1<byte> LoadVector128(Byte* address);
    public static Vector128`1<double> LoadVector128(Double* address);
    public static Vector128`1<short> LoadVector128(Int16* address);
    public static Vector128`1<int> LoadVector128(Int32* address);
    public static Vector128`1<long> LoadVector128(Int64* address);
    public static Vector128`1<sbyte> LoadVector128(SByte* address);
    public static Vector128`1<float> LoadVector128(Single* address);
    public static Vector128`1<ushort> LoadVector128(UInt16* address);
    public static Vector128`1<UInt32> LoadVector128(UInt32* address);
    public static Vector128`1<ulong> LoadVector128(UInt64* address);
    public static Vector64`1<byte> Max(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Max(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Max(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Max(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Max(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Max(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Max(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Max(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Max(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Max(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Max(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Max(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Max(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Max(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<float> MaxNumber(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> MaxNumber(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<double> MaxNumberScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> MaxNumberScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<byte> MaxPairwise(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MaxPairwise(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MaxPairwise(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MaxPairwise(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> MaxPairwise(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> MaxPairwise(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MaxPairwise(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<byte> Min(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Min(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Min(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Min(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Min(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Min(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Min(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Min(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Min(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Min(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Min(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Min(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Min(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Min(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<float> MinNumber(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> MinNumber(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<double> MinNumberScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> MinNumberScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<byte> MinPairwise(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MinPairwise(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MinPairwise(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MinPairwise(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> MinPairwise(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> MinPairwise(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MinPairwise(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<byte> Multiply(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Multiply(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Multiply(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Multiply(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Multiply(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Multiply(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Multiply(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Multiply(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Multiply(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Multiply(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> Multiply(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Multiply(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Multiply(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Multiply(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> MultiplyAdd(Vector64`1<byte> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MultiplyAdd(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyAdd(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MultiplyAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> MultiplyAdd(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplyAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> MultiplyAdd(Vector128`1<byte> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> MultiplyAdd(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyAdd(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> MultiplyAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> MultiplyAdd(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> MultiplyAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<short> MultiplyAddByScalar(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyAddByScalar(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<ushort> MultiplyAddByScalar(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplyAddByScalar(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplyAddByScalar(Vector128`1<short> addend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyAddByScalar(Vector128`1<int> addend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> MultiplyAddByScalar(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<UInt32> MultiplyAddByScalar(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<short> MultiplyAddBySelectedScalar(Vector64`1<short> addend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyAddBySelectedScalar(Vector64`1<short> addend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyAddBySelectedScalar(Vector64`1<int> addend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyAddBySelectedScalar(Vector64`1<int> addend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyAddBySelectedScalar(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyAddBySelectedScalar(Vector64`1<ushort> addend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyAddBySelectedScalar(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyAddBySelectedScalar(Vector64`1<UInt32> addend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<short> MultiplyAddBySelectedScalar(Vector128`1<short> addend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyAddBySelectedScalar(Vector128`1<short> addend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyAddBySelectedScalar(Vector128`1<int> addend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyAddBySelectedScalar(Vector128`1<int> addend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyAddBySelectedScalar(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyAddBySelectedScalar(Vector128`1<ushort> addend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyAddBySelectedScalar(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyAddBySelectedScalar(Vector128`1<UInt32> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector64`1<short> MultiplyByScalar(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyByScalar(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<float> MultiplyByScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> MultiplyByScalar(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplyByScalar(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplyByScalar(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyByScalar(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<float> MultiplyByScalar(Vector128`1<float> left, Vector64`1<float> right);
    public static Vector128`1<ushort> MultiplyByScalar(Vector128`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<UInt32> MultiplyByScalar(Vector128`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<short> MultiplyBySelectedScalar(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyBySelectedScalar(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyBySelectedScalar(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyBySelectedScalar(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<float> MultiplyBySelectedScalar(Vector64`1<float> left, Vector64`1<float> right, byte rightIndex);
    public static Vector64`1<float> MultiplyBySelectedScalar(Vector64`1<float> left, Vector128`1<float> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyBySelectedScalar(Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplyBySelectedScalar(Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyBySelectedScalar(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplyBySelectedScalar(Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<short> MultiplyBySelectedScalar(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyBySelectedScalar(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalar(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalar(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<float> MultiplyBySelectedScalar(Vector128`1<float> left, Vector64`1<float> right, byte rightIndex);
    public static Vector128`1<float> MultiplyBySelectedScalar(Vector128`1<float> left, Vector128`1<float> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyBySelectedScalar(Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyBySelectedScalar(Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalar(Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalar(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLower(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLower(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLower(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLower(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLower(Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLower(Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<int> minuend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<long> minuend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<UInt32> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<UInt32> minuend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<ulong> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningLowerAndSubtract(Vector128`1<ulong> minuend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpper(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpper(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpper(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpper(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpper(Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpper(Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<int> minuend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<long> minuend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<UInt32> minuend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<UInt32> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<ulong> minuend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ulong> MultiplyBySelectedScalarWideningUpperAndSubtract(Vector128`1<ulong> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector64`1<short> MultiplyDoublingByScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyDoublingByScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyDoublingByScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyDoublingByScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector64`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<short> MultiplyDoublingSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyDoublingSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyDoublingSaturateHigh(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyDoublingSaturateHigh(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerByScalarAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerByScalarAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningLowerByScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningLowerBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLowerByScalar(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLowerByScalar(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateLowerBySelectedScalar(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpperByScalar(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpperByScalar(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningSaturateUpperBySelectedScalar(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperByScalarAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperByScalarAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyDoublingWideningUpperByScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndAddSaturate(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<long> MultiplyDoublingWideningUpperBySelectedScalarAndSubtractSaturate(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingByScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyRoundedDoublingByScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyRoundedDoublingByScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplyRoundedDoublingByScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplyRoundedDoublingBySelectedScalarSaturateHigh(Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<short> MultiplyRoundedDoublingSaturateHigh(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplyRoundedDoublingSaturateHigh(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyRoundedDoublingSaturateHigh(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplyRoundedDoublingSaturateHigh(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<double> MultiplyScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<float> MultiplyScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<float> MultiplyScalarBySelectedScalar(Vector64`1<float> left, Vector64`1<float> right, byte rightIndex);
    public static Vector64`1<float> MultiplyScalarBySelectedScalar(Vector64`1<float> left, Vector128`1<float> right, byte rightIndex);
    public static Vector64`1<byte> MultiplySubtract(Vector64`1<byte> minuend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> MultiplySubtract(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplySubtract(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> MultiplySubtract(Vector64`1<sbyte> minuend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> MultiplySubtract(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplySubtract(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> MultiplySubtract(Vector128`1<byte> minuend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> MultiplySubtract(Vector128`1<short> minuend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> MultiplySubtract(Vector128`1<int> minuend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<sbyte> MultiplySubtract(Vector128`1<sbyte> minuend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> MultiplySubtract(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> MultiplySubtract(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<short> MultiplySubtractByScalar(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> MultiplySubtractByScalar(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<ushort> MultiplySubtractByScalar(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> MultiplySubtractByScalar(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> MultiplySubtractByScalar(Vector128`1<short> minuend, Vector128`1<short> left, Vector64`1<short> right);
    public static Vector128`1<int> MultiplySubtractByScalar(Vector128`1<int> minuend, Vector128`1<int> left, Vector64`1<int> right);
    public static Vector128`1<ushort> MultiplySubtractByScalar(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<UInt32> MultiplySubtractByScalar(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<short> MultiplySubtractBySelectedScalar(Vector64`1<short> minuend, Vector64`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector64`1<short> MultiplySubtractBySelectedScalar(Vector64`1<short> minuend, Vector64`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector64`1<int> MultiplySubtractBySelectedScalar(Vector64`1<int> minuend, Vector64`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector64`1<int> MultiplySubtractBySelectedScalar(Vector64`1<int> minuend, Vector64`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplySubtractBySelectedScalar(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector64`1<ushort> MultiplySubtractBySelectedScalar(Vector64`1<ushort> minuend, Vector64`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplySubtractBySelectedScalar(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector64`1<UInt32> MultiplySubtractBySelectedScalar(Vector64`1<UInt32> minuend, Vector64`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<short> MultiplySubtractBySelectedScalar(Vector128`1<short> minuend, Vector128`1<short> left, Vector64`1<short> right, byte rightIndex);
    public static Vector128`1<short> MultiplySubtractBySelectedScalar(Vector128`1<short> minuend, Vector128`1<short> left, Vector128`1<short> right, byte rightIndex);
    public static Vector128`1<int> MultiplySubtractBySelectedScalar(Vector128`1<int> minuend, Vector128`1<int> left, Vector64`1<int> right, byte rightIndex);
    public static Vector128`1<int> MultiplySubtractBySelectedScalar(Vector128`1<int> minuend, Vector128`1<int> left, Vector128`1<int> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplySubtractBySelectedScalar(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector64`1<ushort> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplySubtractBySelectedScalar(Vector128`1<ushort> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplySubtractBySelectedScalar(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector64`1<UInt32> right, byte rightIndex);
    public static Vector128`1<UInt32> MultiplySubtractBySelectedScalar(Vector128`1<UInt32> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte rightIndex);
    public static Vector128`1<ushort> MultiplyWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> MultiplyWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> MultiplyWideningLowerAndAdd(Vector128`1<ushort> addend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> MultiplyWideningLowerAndAdd(Vector128`1<int> addend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyWideningLowerAndAdd(Vector128`1<long> addend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyWideningLowerAndAdd(Vector128`1<short> addend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningLowerAndAdd(Vector128`1<UInt32> addend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningLowerAndAdd(Vector128`1<ulong> addend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> MultiplyWideningLowerAndSubtract(Vector128`1<ushort> minuend, Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> MultiplyWideningLowerAndSubtract(Vector128`1<int> minuend, Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> MultiplyWideningLowerAndSubtract(Vector128`1<long> minuend, Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> MultiplyWideningLowerAndSubtract(Vector128`1<short> minuend, Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningLowerAndSubtract(Vector128`1<UInt32> minuend, Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningLowerAndSubtract(Vector128`1<ulong> minuend, Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> MultiplyWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> MultiplyWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<short> MultiplyWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ushort> MultiplyWideningUpperAndAdd(Vector128`1<ushort> addend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> MultiplyWideningUpperAndAdd(Vector128`1<int> addend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyWideningUpperAndAdd(Vector128`1<long> addend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<short> MultiplyWideningUpperAndAdd(Vector128`1<short> addend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningUpperAndAdd(Vector128`1<UInt32> addend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningUpperAndAdd(Vector128`1<ulong> addend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ushort> MultiplyWideningUpperAndSubtract(Vector128`1<ushort> minuend, Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> MultiplyWideningUpperAndSubtract(Vector128`1<int> minuend, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<long> MultiplyWideningUpperAndSubtract(Vector128`1<long> minuend, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<short> MultiplyWideningUpperAndSubtract(Vector128`1<short> minuend, Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<UInt32> MultiplyWideningUpperAndSubtract(Vector128`1<UInt32> minuend, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> MultiplyWideningUpperAndSubtract(Vector128`1<ulong> minuend, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<short> Negate(Vector64`1<short> value);
    public static Vector64`1<int> Negate(Vector64`1<int> value);
    public static Vector64`1<sbyte> Negate(Vector64`1<sbyte> value);
    public static Vector64`1<float> Negate(Vector64`1<float> value);
    public static Vector128`1<short> Negate(Vector128`1<short> value);
    public static Vector128`1<int> Negate(Vector128`1<int> value);
    public static Vector128`1<sbyte> Negate(Vector128`1<sbyte> value);
    public static Vector128`1<float> Negate(Vector128`1<float> value);
    public static Vector64`1<short> NegateSaturate(Vector64`1<short> value);
    public static Vector64`1<int> NegateSaturate(Vector64`1<int> value);
    public static Vector64`1<sbyte> NegateSaturate(Vector64`1<sbyte> value);
    public static Vector128`1<short> NegateSaturate(Vector128`1<short> value);
    public static Vector128`1<int> NegateSaturate(Vector128`1<int> value);
    public static Vector128`1<sbyte> NegateSaturate(Vector128`1<sbyte> value);
    public static Vector64`1<double> NegateScalar(Vector64`1<double> value);
    public static Vector64`1<float> NegateScalar(Vector64`1<float> value);
    public static Vector64`1<byte> Not(Vector64`1<byte> value);
    public static Vector64`1<double> Not(Vector64`1<double> value);
    public static Vector64`1<short> Not(Vector64`1<short> value);
    public static Vector64`1<int> Not(Vector64`1<int> value);
    public static Vector64`1<long> Not(Vector64`1<long> value);
    public static Vector64`1<sbyte> Not(Vector64`1<sbyte> value);
    public static Vector64`1<float> Not(Vector64`1<float> value);
    public static Vector64`1<ushort> Not(Vector64`1<ushort> value);
    public static Vector64`1<UInt32> Not(Vector64`1<UInt32> value);
    public static Vector64`1<ulong> Not(Vector64`1<ulong> value);
    public static Vector128`1<byte> Not(Vector128`1<byte> value);
    public static Vector128`1<double> Not(Vector128`1<double> value);
    public static Vector128`1<short> Not(Vector128`1<short> value);
    public static Vector128`1<int> Not(Vector128`1<int> value);
    public static Vector128`1<long> Not(Vector128`1<long> value);
    public static Vector128`1<sbyte> Not(Vector128`1<sbyte> value);
    public static Vector128`1<float> Not(Vector128`1<float> value);
    public static Vector128`1<ushort> Not(Vector128`1<ushort> value);
    public static Vector128`1<UInt32> Not(Vector128`1<UInt32> value);
    public static Vector128`1<ulong> Not(Vector128`1<ulong> value);
    public static Vector64`1<byte> Or(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> Or(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> Or(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Or(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> Or(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> Or(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Or(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Or(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Or(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> Or(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> Or(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Or(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Or(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Or(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Or(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Or(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Or(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Or(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Or(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Or(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> OrNot(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> OrNot(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> OrNot(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> OrNot(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> OrNot(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> OrNot(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> OrNot(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> OrNot(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> OrNot(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> OrNot(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> OrNot(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> OrNot(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> OrNot(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> OrNot(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> OrNot(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> OrNot(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> OrNot(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> OrNot(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> OrNot(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> OrNot(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> PolynomialMultiply(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<sbyte> PolynomialMultiply(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<byte> PolynomialMultiply(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<sbyte> PolynomialMultiply(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> PolynomialMultiplyWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<short> PolynomialMultiplyWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<ushort> PolynomialMultiplyWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> PolynomialMultiplyWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector64`1<byte> PopCount(Vector64`1<byte> value);
    public static Vector64`1<sbyte> PopCount(Vector64`1<sbyte> value);
    public static Vector128`1<byte> PopCount(Vector128`1<byte> value);
    public static Vector128`1<sbyte> PopCount(Vector128`1<sbyte> value);
    public static Vector64`1<float> ReciprocalEstimate(Vector64`1<float> value);
    public static Vector64`1<UInt32> ReciprocalEstimate(Vector64`1<UInt32> value);
    public static Vector128`1<float> ReciprocalEstimate(Vector128`1<float> value);
    public static Vector128`1<UInt32> ReciprocalEstimate(Vector128`1<UInt32> value);
    public static Vector64`1<float> ReciprocalSquareRootEstimate(Vector64`1<float> value);
    public static Vector64`1<UInt32> ReciprocalSquareRootEstimate(Vector64`1<UInt32> value);
    public static Vector128`1<float> ReciprocalSquareRootEstimate(Vector128`1<float> value);
    public static Vector128`1<UInt32> ReciprocalSquareRootEstimate(Vector128`1<UInt32> value);
    public static Vector64`1<float> ReciprocalSquareRootStep(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> ReciprocalSquareRootStep(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<float> ReciprocalStep(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector128`1<float> ReciprocalStep(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector64`1<int> ReverseElement16(Vector64`1<int> value);
    public static Vector64`1<long> ReverseElement16(Vector64`1<long> value);
    public static Vector64`1<UInt32> ReverseElement16(Vector64`1<UInt32> value);
    public static Vector64`1<ulong> ReverseElement16(Vector64`1<ulong> value);
    public static Vector128`1<int> ReverseElement16(Vector128`1<int> value);
    public static Vector128`1<long> ReverseElement16(Vector128`1<long> value);
    public static Vector128`1<UInt32> ReverseElement16(Vector128`1<UInt32> value);
    public static Vector128`1<ulong> ReverseElement16(Vector128`1<ulong> value);
    public static Vector64`1<long> ReverseElement32(Vector64`1<long> value);
    public static Vector64`1<ulong> ReverseElement32(Vector64`1<ulong> value);
    public static Vector128`1<long> ReverseElement32(Vector128`1<long> value);
    public static Vector128`1<ulong> ReverseElement32(Vector128`1<ulong> value);
    public static Vector64`1<short> ReverseElement8(Vector64`1<short> value);
    public static Vector64`1<int> ReverseElement8(Vector64`1<int> value);
    public static Vector64`1<long> ReverseElement8(Vector64`1<long> value);
    public static Vector64`1<ushort> ReverseElement8(Vector64`1<ushort> value);
    public static Vector64`1<UInt32> ReverseElement8(Vector64`1<UInt32> value);
    public static Vector64`1<ulong> ReverseElement8(Vector64`1<ulong> value);
    public static Vector128`1<short> ReverseElement8(Vector128`1<short> value);
    public static Vector128`1<int> ReverseElement8(Vector128`1<int> value);
    public static Vector128`1<long> ReverseElement8(Vector128`1<long> value);
    public static Vector128`1<ushort> ReverseElement8(Vector128`1<ushort> value);
    public static Vector128`1<UInt32> ReverseElement8(Vector128`1<UInt32> value);
    public static Vector128`1<ulong> ReverseElement8(Vector128`1<ulong> value);
    public static Vector64`1<float> RoundAwayFromZero(Vector64`1<float> value);
    public static Vector128`1<float> RoundAwayFromZero(Vector128`1<float> value);
    public static Vector64`1<double> RoundAwayFromZeroScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundAwayFromZeroScalar(Vector64`1<float> value);
    public static Vector64`1<float> RoundToNearest(Vector64`1<float> value);
    public static Vector128`1<float> RoundToNearest(Vector128`1<float> value);
    public static Vector64`1<double> RoundToNearestScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToNearestScalar(Vector64`1<float> value);
    public static Vector64`1<float> RoundToNegativeInfinity(Vector64`1<float> value);
    public static Vector128`1<float> RoundToNegativeInfinity(Vector128`1<float> value);
    public static Vector64`1<double> RoundToNegativeInfinityScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToNegativeInfinityScalar(Vector64`1<float> value);
    public static Vector64`1<float> RoundToPositiveInfinity(Vector64`1<float> value);
    public static Vector128`1<float> RoundToPositiveInfinity(Vector128`1<float> value);
    public static Vector64`1<double> RoundToPositiveInfinityScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToPositiveInfinityScalar(Vector64`1<float> value);
    public static Vector64`1<float> RoundToZero(Vector64`1<float> value);
    public static Vector128`1<float> RoundToZero(Vector128`1<float> value);
    public static Vector64`1<double> RoundToZeroScalar(Vector64`1<double> value);
    public static Vector64`1<float> RoundToZeroScalar(Vector64`1<float> value);
    public static Vector64`1<short> ShiftArithmetic(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmetic(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmetic(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector128`1<short> ShiftArithmetic(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmetic(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmetic(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmetic(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<short> ShiftArithmeticRounded(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmeticRounded(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmeticRounded(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector128`1<short> ShiftArithmeticRounded(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmeticRounded(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmeticRounded(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmeticRounded(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<short> ShiftArithmeticRoundedSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmeticRoundedSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmeticRoundedSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector128`1<short> ShiftArithmeticRoundedSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmeticRoundedSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmeticRoundedSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmeticRoundedSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<long> ShiftArithmeticRoundedSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftArithmeticRoundedScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<short> ShiftArithmeticSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftArithmeticSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftArithmeticSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector128`1<short> ShiftArithmeticSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftArithmeticSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftArithmeticSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftArithmeticSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector64`1<long> ShiftArithmeticSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftArithmeticScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<byte> ShiftLeftAndInsert(Vector64`1<byte> left, Vector64`1<byte> right, byte shift);
    public static Vector64`1<short> ShiftLeftAndInsert(Vector64`1<short> left, Vector64`1<short> right, byte shift);
    public static Vector64`1<int> ShiftLeftAndInsert(Vector64`1<int> left, Vector64`1<int> right, byte shift);
    public static Vector64`1<sbyte> ShiftLeftAndInsert(Vector64`1<sbyte> left, Vector64`1<sbyte> right, byte shift);
    public static Vector64`1<ushort> ShiftLeftAndInsert(Vector64`1<ushort> left, Vector64`1<ushort> right, byte shift);
    public static Vector64`1<UInt32> ShiftLeftAndInsert(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte shift);
    public static Vector128`1<byte> ShiftLeftAndInsert(Vector128`1<byte> left, Vector128`1<byte> right, byte shift);
    public static Vector128`1<short> ShiftLeftAndInsert(Vector128`1<short> left, Vector128`1<short> right, byte shift);
    public static Vector128`1<int> ShiftLeftAndInsert(Vector128`1<int> left, Vector128`1<int> right, byte shift);
    public static Vector128`1<long> ShiftLeftAndInsert(Vector128`1<long> left, Vector128`1<long> right, byte shift);
    public static Vector128`1<sbyte> ShiftLeftAndInsert(Vector128`1<sbyte> left, Vector128`1<sbyte> right, byte shift);
    public static Vector128`1<ushort> ShiftLeftAndInsert(Vector128`1<ushort> left, Vector128`1<ushort> right, byte shift);
    public static Vector128`1<UInt32> ShiftLeftAndInsert(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte shift);
    public static Vector128`1<ulong> ShiftLeftAndInsert(Vector128`1<ulong> left, Vector128`1<ulong> right, byte shift);
    public static Vector64`1<long> ShiftLeftAndInsertScalar(Vector64`1<long> left, Vector64`1<long> right, byte shift);
    public static Vector64`1<ulong> ShiftLeftAndInsertScalar(Vector64`1<ulong> left, Vector64`1<ulong> right, byte shift);
    public static Vector64`1<byte> ShiftLeftLogical(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftLeftLogical(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftLeftLogical(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftLeftLogical(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftLeftLogical(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftLeftLogical(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftLeftLogical(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftLeftLogical(Vector128`1<short> value, byte count);
    public static Vector128`1<long> ShiftLeftLogical(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftLeftLogical(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogical(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogical(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogical(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftLeftLogicalSaturate(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftLeftLogicalSaturate(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftLeftLogicalSaturate(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftLeftLogicalSaturate(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftLeftLogicalSaturate(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftLeftLogicalSaturate(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftLeftLogicalSaturate(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftLeftLogicalSaturate(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftLeftLogicalSaturate(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftLeftLogicalSaturate(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftLeftLogicalSaturate(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalSaturate(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalSaturate(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalSaturate(Vector128`1<ulong> value, byte count);
    public static Vector64`1<long> ShiftLeftLogicalSaturateScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftLeftLogicalSaturateScalar(Vector64`1<ulong> value, byte count);
    public static Vector64`1<ushort> ShiftLeftLogicalSaturateUnsigned(Vector64`1<short> value, byte count);
    public static Vector64`1<UInt32> ShiftLeftLogicalSaturateUnsigned(Vector64`1<int> value, byte count);
    public static Vector64`1<byte> ShiftLeftLogicalSaturateUnsigned(Vector64`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalSaturateUnsigned(Vector128`1<short> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalSaturateUnsigned(Vector128`1<int> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalSaturateUnsigned(Vector128`1<long> value, byte count);
    public static Vector128`1<byte> ShiftLeftLogicalSaturateUnsigned(Vector128`1<sbyte> value, byte count);
    public static Vector64`1<ulong> ShiftLeftLogicalSaturateUnsignedScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<long> ShiftLeftLogicalScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftLeftLogicalScalar(Vector64`1<ulong> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalWideningLower(Vector64`1<byte> value, byte count);
    public static Vector128`1<int> ShiftLeftLogicalWideningLower(Vector64`1<short> value, byte count);
    public static Vector128`1<long> ShiftLeftLogicalWideningLower(Vector64`1<int> value, byte count);
    public static Vector128`1<short> ShiftLeftLogicalWideningLower(Vector64`1<sbyte> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalWideningLower(Vector64`1<ushort> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalWideningLower(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<ushort> ShiftLeftLogicalWideningUpper(Vector128`1<byte> value, byte count);
    public static Vector128`1<int> ShiftLeftLogicalWideningUpper(Vector128`1<short> value, byte count);
    public static Vector128`1<long> ShiftLeftLogicalWideningUpper(Vector128`1<int> value, byte count);
    public static Vector128`1<short> ShiftLeftLogicalWideningUpper(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<UInt32> ShiftLeftLogicalWideningUpper(Vector128`1<ushort> value, byte count);
    public static Vector128`1<ulong> ShiftLeftLogicalWideningUpper(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<byte> ShiftLogical(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogical(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogical(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogical(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogical(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogical(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector128`1<byte> ShiftLogical(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogical(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogical(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogical(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogical(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogical(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogical(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogical(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<byte> ShiftLogicalRounded(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogicalRounded(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogicalRounded(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogicalRounded(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogicalRounded(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogicalRounded(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector128`1<byte> ShiftLogicalRounded(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogicalRounded(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogicalRounded(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogicalRounded(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogicalRounded(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogicalRounded(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogicalRounded(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogicalRounded(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<byte> ShiftLogicalRoundedSaturate(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogicalRoundedSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogicalRoundedSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogicalRoundedSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogicalRoundedSaturate(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogicalRoundedSaturate(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector128`1<byte> ShiftLogicalRoundedSaturate(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogicalRoundedSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogicalRoundedSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogicalRoundedSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogicalRoundedSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogicalRoundedSaturate(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogicalRoundedSaturate(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogicalRoundedSaturate(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<long> ShiftLogicalRoundedSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalRoundedSaturateScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftLogicalRoundedScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalRoundedScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector64`1<byte> ShiftLogicalSaturate(Vector64`1<byte> value, Vector64`1<sbyte> count);
    public static Vector64`1<short> ShiftLogicalSaturate(Vector64`1<short> value, Vector64`1<short> count);
    public static Vector64`1<int> ShiftLogicalSaturate(Vector64`1<int> value, Vector64`1<int> count);
    public static Vector64`1<sbyte> ShiftLogicalSaturate(Vector64`1<sbyte> value, Vector64`1<sbyte> count);
    public static Vector64`1<ushort> ShiftLogicalSaturate(Vector64`1<ushort> value, Vector64`1<short> count);
    public static Vector64`1<UInt32> ShiftLogicalSaturate(Vector64`1<UInt32> value, Vector64`1<int> count);
    public static Vector128`1<byte> ShiftLogicalSaturate(Vector128`1<byte> value, Vector128`1<sbyte> count);
    public static Vector128`1<short> ShiftLogicalSaturate(Vector128`1<short> value, Vector128`1<short> count);
    public static Vector128`1<int> ShiftLogicalSaturate(Vector128`1<int> value, Vector128`1<int> count);
    public static Vector128`1<long> ShiftLogicalSaturate(Vector128`1<long> value, Vector128`1<long> count);
    public static Vector128`1<sbyte> ShiftLogicalSaturate(Vector128`1<sbyte> value, Vector128`1<sbyte> count);
    public static Vector128`1<ushort> ShiftLogicalSaturate(Vector128`1<ushort> value, Vector128`1<short> count);
    public static Vector128`1<UInt32> ShiftLogicalSaturate(Vector128`1<UInt32> value, Vector128`1<int> count);
    public static Vector128`1<ulong> ShiftLogicalSaturate(Vector128`1<ulong> value, Vector128`1<long> count);
    public static Vector64`1<long> ShiftLogicalSaturateScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalSaturateScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector64`1<long> ShiftLogicalScalar(Vector64`1<long> value, Vector64`1<long> count);
    public static Vector64`1<ulong> ShiftLogicalScalar(Vector64`1<ulong> value, Vector64`1<long> count);
    public static Vector64`1<byte> ShiftRightAndInsert(Vector64`1<byte> left, Vector64`1<byte> right, byte shift);
    public static Vector64`1<short> ShiftRightAndInsert(Vector64`1<short> left, Vector64`1<short> right, byte shift);
    public static Vector64`1<int> ShiftRightAndInsert(Vector64`1<int> left, Vector64`1<int> right, byte shift);
    public static Vector64`1<sbyte> ShiftRightAndInsert(Vector64`1<sbyte> left, Vector64`1<sbyte> right, byte shift);
    public static Vector64`1<ushort> ShiftRightAndInsert(Vector64`1<ushort> left, Vector64`1<ushort> right, byte shift);
    public static Vector64`1<UInt32> ShiftRightAndInsert(Vector64`1<UInt32> left, Vector64`1<UInt32> right, byte shift);
    public static Vector128`1<byte> ShiftRightAndInsert(Vector128`1<byte> left, Vector128`1<byte> right, byte shift);
    public static Vector128`1<short> ShiftRightAndInsert(Vector128`1<short> left, Vector128`1<short> right, byte shift);
    public static Vector128`1<int> ShiftRightAndInsert(Vector128`1<int> left, Vector128`1<int> right, byte shift);
    public static Vector128`1<long> ShiftRightAndInsert(Vector128`1<long> left, Vector128`1<long> right, byte shift);
    public static Vector128`1<sbyte> ShiftRightAndInsert(Vector128`1<sbyte> left, Vector128`1<sbyte> right, byte shift);
    public static Vector128`1<ushort> ShiftRightAndInsert(Vector128`1<ushort> left, Vector128`1<ushort> right, byte shift);
    public static Vector128`1<UInt32> ShiftRightAndInsert(Vector128`1<UInt32> left, Vector128`1<UInt32> right, byte shift);
    public static Vector128`1<ulong> ShiftRightAndInsert(Vector128`1<ulong> left, Vector128`1<ulong> right, byte shift);
    public static Vector64`1<long> ShiftRightAndInsertScalar(Vector64`1<long> left, Vector64`1<long> right, byte shift);
    public static Vector64`1<ulong> ShiftRightAndInsertScalar(Vector64`1<ulong> left, Vector64`1<ulong> right, byte shift);
    public static Vector64`1<short> ShiftRightArithmetic(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmetic(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmetic(Vector64`1<sbyte> value, byte count);
    public static Vector128`1<short> ShiftRightArithmetic(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmetic(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmetic(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmetic(Vector128`1<sbyte> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmeticAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<byte> ShiftRightArithmeticNarrowingSaturateUnsignedLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightArithmeticNarrowingSaturateUnsignedLower(Vector128`1<int> value, byte count);
    public static Vector64`1<UInt32> ShiftRightArithmeticNarrowingSaturateUnsignedLower(Vector128`1<long> value, byte count);
    public static Vector128`1<byte> ShiftRightArithmeticNarrowingSaturateUnsignedUpper(Vector64`1<byte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightArithmeticNarrowingSaturateUnsignedUpper(Vector64`1<ushort> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<UInt32> ShiftRightArithmeticNarrowingSaturateUnsignedUpper(Vector64`1<UInt32> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticRounded(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticRounded(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticRounded(Vector64`1<sbyte> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticRounded(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticRounded(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmeticRounded(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticRounded(Vector128`1<sbyte> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticRoundedAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticRoundedAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticRoundedAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticRoundedAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticRoundedAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightArithmeticRoundedAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticRoundedAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticRoundedAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<short> ShiftRightArithmeticRoundedNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightArithmeticRoundedNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightArithmeticRoundedNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<byte> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(Vector128`1<int> value, byte count);
    public static Vector64`1<UInt32> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedLower(Vector128`1<long> value, byte count);
    public static Vector128`1<byte> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(Vector64`1<byte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(Vector64`1<ushort> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<UInt32> ShiftRightArithmeticRoundedNarrowingSaturateUnsignedUpper(Vector64`1<UInt32> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<short> ShiftRightArithmeticRoundedNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightArithmeticRoundedNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightArithmeticRoundedNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticRoundedScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<long> ShiftRightArithmeticScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<byte> ShiftRightLogical(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogical(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogical(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogical(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogical(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogical(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftRightLogical(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogical(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogical(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogical(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogical(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogical(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogical(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogical(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalAdd(Vector64`1<byte> addend, Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalAdd(Vector64`1<ushort> addend, Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalAdd(Vector128`1<byte> addend, Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogicalAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalAdd(Vector128`1<ushort> addend, Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogicalAdd(Vector128`1<ulong> addend, Vector128`1<ulong> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalAddScalar(Vector64`1<ulong> addend, Vector64`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalNarrowingLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalNarrowingLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalNarrowingLower(Vector128`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalNarrowingLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalNarrowingLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalNarrowingLower(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalNarrowingSaturateLower(Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalNarrowingSaturateUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRounded(Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRounded(Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRounded(Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRounded(Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRounded(Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRounded(Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRounded(Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRounded(Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRounded(Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogicalRounded(Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRounded(Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRounded(Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRounded(Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogicalRounded(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRoundedAdd(Vector64`1<byte> addend, Vector64`1<byte> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRoundedAdd(Vector64`1<short> addend, Vector64`1<short> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRoundedAdd(Vector64`1<int> addend, Vector64`1<int> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRoundedAdd(Vector64`1<sbyte> addend, Vector64`1<sbyte> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRoundedAdd(Vector64`1<ushort> addend, Vector64`1<ushort> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRoundedAdd(Vector64`1<UInt32> addend, Vector64`1<UInt32> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRoundedAdd(Vector128`1<byte> addend, Vector128`1<byte> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRoundedAdd(Vector128`1<short> addend, Vector128`1<short> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRoundedAdd(Vector128`1<int> addend, Vector128`1<int> value, byte count);
    public static Vector128`1<long> ShiftRightLogicalRoundedAdd(Vector128`1<long> addend, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRoundedAdd(Vector128`1<sbyte> addend, Vector128`1<sbyte> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRoundedAdd(Vector128`1<ushort> addend, Vector128`1<ushort> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRoundedAdd(Vector128`1<UInt32> addend, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<ulong> ShiftRightLogicalRoundedAdd(Vector128`1<ulong> addend, Vector128`1<ulong> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalRoundedAddScalar(Vector64`1<long> addend, Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalRoundedAddScalar(Vector64`1<ulong> addend, Vector64`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRoundedNarrowingLower(Vector128`1<ulong> value, byte count);
    public static Vector64`1<byte> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<ushort> value, byte count);
    public static Vector64`1<short> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<int> value, byte count);
    public static Vector64`1<int> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<long> value, byte count);
    public static Vector64`1<sbyte> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<short> value, byte count);
    public static Vector64`1<ushort> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<UInt32> value, byte count);
    public static Vector64`1<UInt32> ShiftRightLogicalRoundedNarrowingSaturateLower(Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRoundedNarrowingSaturateUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector128`1<byte> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> value, byte count);
    public static Vector128`1<short> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> value, byte count);
    public static Vector128`1<int> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> value, byte count);
    public static Vector128`1<sbyte> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> value, byte count);
    public static Vector128`1<ushort> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> value, byte count);
    public static Vector128`1<UInt32> ShiftRightLogicalRoundedNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalRoundedScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalRoundedScalar(Vector64`1<ulong> value, byte count);
    public static Vector64`1<long> ShiftRightLogicalScalar(Vector64`1<long> value, byte count);
    public static Vector64`1<ulong> ShiftRightLogicalScalar(Vector64`1<ulong> value, byte count);
    public static Vector128`1<int> SignExtendWideningLower(Vector64`1<short> value);
    public static Vector128`1<long> SignExtendWideningLower(Vector64`1<int> value);
    public static Vector128`1<short> SignExtendWideningLower(Vector64`1<sbyte> value);
    public static Vector128`1<int> SignExtendWideningUpper(Vector128`1<short> value);
    public static Vector128`1<long> SignExtendWideningUpper(Vector128`1<int> value);
    public static Vector128`1<short> SignExtendWideningUpper(Vector128`1<sbyte> value);
    public static Vector64`1<double> SqrtScalar(Vector64`1<double> value);
    public static Vector64`1<float> SqrtScalar(Vector64`1<float> value);
    public static void Store(Byte* address, Vector64`1<byte> source);
    public static void Store(Double* address, Vector64`1<double> source);
    public static void Store(Int16* address, Vector64`1<short> source);
    public static void Store(Int32* address, Vector64`1<int> source);
    public static void Store(Int64* address, Vector64`1<long> source);
    public static void Store(SByte* address, Vector64`1<sbyte> source);
    public static void Store(Single* address, Vector64`1<float> source);
    public static void Store(UInt16* address, Vector64`1<ushort> source);
    public static void Store(UInt32* address, Vector64`1<UInt32> source);
    public static void Store(UInt64* address, Vector64`1<ulong> source);
    public static void Store(Byte* address, Vector128`1<byte> source);
    public static void Store(Double* address, Vector128`1<double> source);
    public static void Store(Int16* address, Vector128`1<short> source);
    public static void Store(Int32* address, Vector128`1<int> source);
    public static void Store(Int64* address, Vector128`1<long> source);
    public static void Store(SByte* address, Vector128`1<sbyte> source);
    public static void Store(Single* address, Vector128`1<float> source);
    public static void Store(UInt16* address, Vector128`1<ushort> source);
    public static void Store(UInt32* address, Vector128`1<UInt32> source);
    public static void Store(UInt64* address, Vector128`1<ulong> source);
    public static void StoreSelectedScalar(Byte* address, Vector64`1<byte> value, byte index);
    public static void StoreSelectedScalar(Int16* address, Vector64`1<short> value, byte index);
    public static void StoreSelectedScalar(Int32* address, Vector64`1<int> value, byte index);
    public static void StoreSelectedScalar(SByte* address, Vector64`1<sbyte> value, byte index);
    public static void StoreSelectedScalar(Single* address, Vector64`1<float> value, byte index);
    public static void StoreSelectedScalar(UInt16* address, Vector64`1<ushort> value, byte index);
    public static void StoreSelectedScalar(UInt32* address, Vector64`1<UInt32> value, byte index);
    public static void StoreSelectedScalar(Byte* address, Vector128`1<byte> value, byte index);
    public static void StoreSelectedScalar(Double* address, Vector128`1<double> value, byte index);
    public static void StoreSelectedScalar(Int16* address, Vector128`1<short> value, byte index);
    public static void StoreSelectedScalar(Int32* address, Vector128`1<int> value, byte index);
    public static void StoreSelectedScalar(Int64* address, Vector128`1<long> value, byte index);
    public static void StoreSelectedScalar(SByte* address, Vector128`1<sbyte> value, byte index);
    public static void StoreSelectedScalar(Single* address, Vector128`1<float> value, byte index);
    public static void StoreSelectedScalar(UInt16* address, Vector128`1<ushort> value, byte index);
    public static void StoreSelectedScalar(UInt32* address, Vector128`1<UInt32> value, byte index);
    public static void StoreSelectedScalar(UInt64* address, Vector128`1<ulong> value, byte index);
    public static Vector64`1<byte> Subtract(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> Subtract(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Subtract(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> Subtract(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Subtract(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Subtract(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Subtract(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> Subtract(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> Subtract(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Subtract(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Subtract(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Subtract(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Subtract(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Subtract(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Subtract(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Subtract(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> SubtractHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<short> SubtractHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> SubtractHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<sbyte> SubtractHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<ushort> SubtractHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> SubtractHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> SubtractHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> SubtractHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> SubtractHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> SubtractHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> SubtractHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> SubtractHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> SubtractRoundedHighNarrowingLower(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector64`1<short> SubtractRoundedHighNarrowingLower(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector64`1<int> SubtractRoundedHighNarrowingLower(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector64`1<sbyte> SubtractRoundedHighNarrowingLower(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector64`1<ushort> SubtractRoundedHighNarrowingLower(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector64`1<UInt32> SubtractRoundedHighNarrowingLower(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<byte> SubtractRoundedHighNarrowingUpper(Vector64`1<byte> lower, Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<short> SubtractRoundedHighNarrowingUpper(Vector64`1<short> lower, Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<int> SubtractRoundedHighNarrowingUpper(Vector64`1<int> lower, Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> SubtractRoundedHighNarrowingUpper(Vector64`1<sbyte> lower, Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<ushort> SubtractRoundedHighNarrowingUpper(Vector64`1<ushort> lower, Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<UInt32> SubtractRoundedHighNarrowingUpper(Vector64`1<UInt32> lower, Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<byte> SubtractSaturate(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<short> SubtractSaturate(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> SubtractSaturate(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<sbyte> SubtractSaturate(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<ushort> SubtractSaturate(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> SubtractSaturate(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<byte> SubtractSaturate(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<short> SubtractSaturate(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> SubtractSaturate(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> SubtractSaturate(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> SubtractSaturate(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> SubtractSaturate(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> SubtractSaturate(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> SubtractSaturate(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector64`1<long> SubtractSaturateScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<ulong> SubtractSaturateScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector64`1<double> SubtractScalar(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<long> SubtractScalar(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<float> SubtractScalar(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ulong> SubtractScalar(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<ushort> SubtractWideningLower(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector128`1<int> SubtractWideningLower(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector128`1<long> SubtractWideningLower(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector128`1<short> SubtractWideningLower(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector128`1<UInt32> SubtractWideningLower(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> SubtractWideningLower(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector128`1<short> SubtractWideningLower(Vector128`1<short> left, Vector64`1<sbyte> right);
    public static Vector128`1<int> SubtractWideningLower(Vector128`1<int> left, Vector64`1<short> right);
    public static Vector128`1<long> SubtractWideningLower(Vector128`1<long> left, Vector64`1<int> right);
    public static Vector128`1<ushort> SubtractWideningLower(Vector128`1<ushort> left, Vector64`1<byte> right);
    public static Vector128`1<UInt32> SubtractWideningLower(Vector128`1<UInt32> left, Vector64`1<ushort> right);
    public static Vector128`1<ulong> SubtractWideningLower(Vector128`1<ulong> left, Vector64`1<UInt32> right);
    public static Vector128`1<ushort> SubtractWideningUpper(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<int> SubtractWideningUpper(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<short> SubtractWideningUpper(Vector128`1<short> left, Vector128`1<sbyte> right);
    public static Vector128`1<int> SubtractWideningUpper(Vector128`1<int> left, Vector128`1<short> right);
    public static Vector128`1<long> SubtractWideningUpper(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> SubtractWideningUpper(Vector128`1<long> left, Vector128`1<int> right);
    public static Vector128`1<short> SubtractWideningUpper(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<ushort> SubtractWideningUpper(Vector128`1<ushort> left, Vector128`1<byte> right);
    public static Vector128`1<UInt32> SubtractWideningUpper(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> SubtractWideningUpper(Vector128`1<UInt32> left, Vector128`1<ushort> right);
    public static Vector128`1<ulong> SubtractWideningUpper(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> SubtractWideningUpper(Vector128`1<ulong> left, Vector128`1<UInt32> right);
    public static Vector64`1<byte> VectorTableLookup(Vector128`1<byte> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookup(Vector128`1<sbyte> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> VectorTableLookupExtension(Vector64`1<byte> defaultValues, Vector128`1<byte> table, Vector64`1<byte> byteIndexes);
    public static Vector64`1<sbyte> VectorTableLookupExtension(Vector64`1<sbyte> defaultValues, Vector128`1<sbyte> table, Vector64`1<sbyte> byteIndexes);
    public static Vector64`1<byte> Xor(Vector64`1<byte> left, Vector64`1<byte> right);
    public static Vector64`1<double> Xor(Vector64`1<double> left, Vector64`1<double> right);
    public static Vector64`1<short> Xor(Vector64`1<short> left, Vector64`1<short> right);
    public static Vector64`1<int> Xor(Vector64`1<int> left, Vector64`1<int> right);
    public static Vector64`1<long> Xor(Vector64`1<long> left, Vector64`1<long> right);
    public static Vector64`1<sbyte> Xor(Vector64`1<sbyte> left, Vector64`1<sbyte> right);
    public static Vector64`1<float> Xor(Vector64`1<float> left, Vector64`1<float> right);
    public static Vector64`1<ushort> Xor(Vector64`1<ushort> left, Vector64`1<ushort> right);
    public static Vector64`1<UInt32> Xor(Vector64`1<UInt32> left, Vector64`1<UInt32> right);
    public static Vector64`1<ulong> Xor(Vector64`1<ulong> left, Vector64`1<ulong> right);
    public static Vector128`1<byte> Xor(Vector128`1<byte> left, Vector128`1<byte> right);
    public static Vector128`1<double> Xor(Vector128`1<double> left, Vector128`1<double> right);
    public static Vector128`1<short> Xor(Vector128`1<short> left, Vector128`1<short> right);
    public static Vector128`1<int> Xor(Vector128`1<int> left, Vector128`1<int> right);
    public static Vector128`1<long> Xor(Vector128`1<long> left, Vector128`1<long> right);
    public static Vector128`1<sbyte> Xor(Vector128`1<sbyte> left, Vector128`1<sbyte> right);
    public static Vector128`1<float> Xor(Vector128`1<float> left, Vector128`1<float> right);
    public static Vector128`1<ushort> Xor(Vector128`1<ushort> left, Vector128`1<ushort> right);
    public static Vector128`1<UInt32> Xor(Vector128`1<UInt32> left, Vector128`1<UInt32> right);
    public static Vector128`1<ulong> Xor(Vector128`1<ulong> left, Vector128`1<ulong> right);
    public static Vector128`1<ushort> ZeroExtendWideningLower(Vector64`1<byte> value);
    public static Vector128`1<int> ZeroExtendWideningLower(Vector64`1<short> value);
    public static Vector128`1<long> ZeroExtendWideningLower(Vector64`1<int> value);
    public static Vector128`1<short> ZeroExtendWideningLower(Vector64`1<sbyte> value);
    public static Vector128`1<UInt32> ZeroExtendWideningLower(Vector64`1<ushort> value);
    public static Vector128`1<ulong> ZeroExtendWideningLower(Vector64`1<UInt32> value);
    public static Vector128`1<ushort> ZeroExtendWideningUpper(Vector128`1<byte> value);
    public static Vector128`1<int> ZeroExtendWideningUpper(Vector128`1<short> value);
    public static Vector128`1<long> ZeroExtendWideningUpper(Vector128`1<int> value);
    public static Vector128`1<short> ZeroExtendWideningUpper(Vector128`1<sbyte> value);
    public static Vector128`1<UInt32> ZeroExtendWideningUpper(Vector128`1<ushort> value);
    public static Vector128`1<ulong> ZeroExtendWideningUpper(Vector128`1<UInt32> value);
}
[CLSCompliantAttribute("False")]
internal abstract class System.Runtime.Intrinsics.Arm.ArmBase : object {
    public static bool IsSupported { get; }
    [IntrinsicAttribute]
public static bool get_IsSupported();
    public static int LeadingZeroCount(int value);
    public static int LeadingZeroCount(UInt32 value);
    public static int ReverseElementBits(int value);
    public static UInt32 ReverseElementBits(UInt32 value);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string TextEncoderDoesNotImplementMaxOutputCharsPerInputChar { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_TextEncoderDoesNotImplementMaxOutputCharsPerInputChar();
}
internal static class System.Text.Encodings.Web.AdvSimdHelper : object {
    private static Vector128`1<short> s_nullMaskInt16;
    private static Vector128`1<short> s_spaceMaskInt16;
    private static Vector128`1<short> s_quotationMarkMaskInt16;
    private static Vector128`1<short> s_reverseSolidusMaskInt16;
    private static Vector128`1<short> s_tildeMaskInt16;
    private static Vector128`1<short> s_maxAsciiCharacterMaskInt16;
    private static Vector128`1<sbyte> s_spaceMaskSByte;
    private static Vector128`1<sbyte> s_quotationMarkMaskSByte;
    private static Vector128`1<sbyte> s_ampersandMaskSByte;
    private static Vector128`1<sbyte> s_apostropheMaskSByte;
    private static Vector128`1<sbyte> s_plusSignMaskSByte;
    private static Vector128`1<sbyte> s_lessThanSignMaskSByte;
    private static Vector128`1<sbyte> s_greaterThanSignMaskSByte;
    private static Vector128`1<sbyte> s_reverseSolidusMaskSByte;
    private static Vector128`1<sbyte> s_graveAccentMaskSByte;
    private static Vector128`1<sbyte> s_tildeMaskSByte;
    private static Vector128`1<byte> s_bitmask;
    private static AdvSimdHelper();
    public static Vector128`1<short> CreateEscapingMask_UnsafeRelaxedJavaScriptEncoder(Vector128`1<short> sourceValue);
    public static Vector128`1<sbyte> CreateEscapingMask_UnsafeRelaxedJavaScriptEncoder(Vector128`1<sbyte> sourceValue);
    public static Vector128`1<sbyte> CreateEscapingMask_DefaultJavaScriptEncoderBasicLatin(Vector128`1<sbyte> sourceValue);
    public static Vector128`1<short> CreateAsciiMask(Vector128`1<short> sourceValue);
    public static bool ContainsNonAsciiByte(Vector128`1<sbyte> value);
    public static int GetIndexOfFirstNonAsciiByte(Vector128`1<byte> value);
}
internal class System.Text.Encodings.Web.DefaultHtmlEncoder : HtmlEncoder {
    private AllowedCharactersBitmap _allowedCharacters;
    internal static DefaultHtmlEncoder Singleton;
    private static Char[] s_quote;
    private static Char[] s_ampersand;
    private static Char[] s_lessthan;
    private static Char[] s_greaterthan;
    public int MaxOutputCharactersPerInputCharacter { get; }
    public DefaultHtmlEncoder(TextEncoderSettings settings);
    public DefaultHtmlEncoder(UnicodeRange[] allowedRanges);
    private static DefaultHtmlEncoder();
    internal static void ForbidHtmlCharacters(AllowedCharactersBitmap allowedCharacters);
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
    private static bool TryWriteEncodedScalarAsNumericEntity(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
}
internal class System.Text.Encodings.Web.DefaultJavaScriptEncoder : JavaScriptEncoder {
    private AllowedCharactersBitmap _allowedCharacters;
    private Int32[] _asciiNeedsEscaping;
    private static Char[] s_b;
    private static Char[] s_t;
    private static Char[] s_n;
    private static Char[] s_f;
    private static Char[] s_r;
    private static Char[] s_back;
    public int MaxOutputCharactersPerInputCharacter { get; }
    public DefaultJavaScriptEncoder(TextEncoderSettings filter);
    public DefaultJavaScriptEncoder(UnicodeRange[] allowedRanges);
    private static DefaultJavaScriptEncoder();
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual int FindFirstCharacterToEncodeUtf8(ReadOnlySpan`1<byte> utf8Text);
    private int DoesAsciiNeedEncoding(byte value);
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
}
internal class System.Text.Encodings.Web.DefaultJavaScriptEncoderBasicLatin : JavaScriptEncoder {
    internal static DefaultJavaScriptEncoderBasicLatin s_singleton;
    private static Char[] s_b;
    private static Char[] s_t;
    private static Char[] s_n;
    private static Char[] s_f;
    private static Char[] s_r;
    private static Char[] s_back;
    public static int LastAsciiCharacter;
    public int MaxOutputCharactersPerInputCharacter { get; }
    private static ReadOnlySpan`1<byte> AllowList { get; }
    private static DefaultJavaScriptEncoderBasicLatin();
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual int FindFirstCharacterToEncodeUtf8(ReadOnlySpan`1<byte> utf8Text);
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
    private static ReadOnlySpan`1<byte> get_AllowList();
    private static bool NeedsEscaping(byte value);
    private static bool NeedsEscaping(char value);
    private static int NeedsEscaping(Vector128`1<sbyte> sourceValue);
    [CompilerGeneratedAttribute]
internal static int <FindFirstCharacterToEncode>g__CalculateIndex|3_0(Int16* ptr, Char* text);
    [CompilerGeneratedAttribute]
internal static int <FindFirstCharacterToEncodeUtf8>g__CalculateIndex|4_0(Byte* ptr, Byte* pValue);
}
internal class System.Text.Encodings.Web.DefaultUrlEncoder : UrlEncoder {
    private AllowedCharactersBitmap _allowedCharacters;
    internal static DefaultUrlEncoder Singleton;
    public int MaxOutputCharactersPerInputCharacter { get; }
    public DefaultUrlEncoder(TextEncoderSettings filter);
    public DefaultUrlEncoder(UnicodeRange[] allowedRanges);
    private static DefaultUrlEncoder();
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Text.Encodings.Web.HtmlEncoder : TextEncoder {
    public static HtmlEncoder Default { get; }
    public static HtmlEncoder get_Default();
    public static HtmlEncoder Create(TextEncoderSettings settings);
    public static HtmlEncoder Create(UnicodeRange[] allowedRanges);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Text.Encodings.Web.JavaScriptEncoder : TextEncoder {
    public static JavaScriptEncoder Default { get; }
    public static JavaScriptEncoder UnsafeRelaxedJsonEscaping { get; }
    public static JavaScriptEncoder get_Default();
    public static JavaScriptEncoder get_UnsafeRelaxedJsonEscaping();
    public static JavaScriptEncoder Create(TextEncoderSettings settings);
    public static JavaScriptEncoder Create(UnicodeRange[] allowedRanges);
}
internal static class System.Text.Encodings.Web.JavaScriptEncoderHelper : object {
    public static bool TryWriteEncodedScalarAsNumericEntity(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten);
    private static bool TryWriteEncodedSingleCharacter(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten);
}
internal static class System.Text.Encodings.Web.Sse2Helper : object {
    private static Vector128`1<short> s_nullMaskInt16;
    private static Vector128`1<short> s_spaceMaskInt16;
    private static Vector128`1<short> s_quotationMarkMaskInt16;
    private static Vector128`1<short> s_reverseSolidusMaskInt16;
    private static Vector128`1<short> s_tildeMaskInt16;
    private static Vector128`1<short> s_maxAsciiCharacterMaskInt16;
    private static Vector128`1<sbyte> s_spaceMaskSByte;
    private static Vector128`1<sbyte> s_quotationMarkMaskSByte;
    private static Vector128`1<sbyte> s_ampersandMaskSByte;
    private static Vector128`1<sbyte> s_apostropheMaskSByte;
    private static Vector128`1<sbyte> s_plusSignMaskSByte;
    private static Vector128`1<sbyte> s_lessThanSignMaskSByte;
    private static Vector128`1<sbyte> s_greaterThanSignMaskSByte;
    private static Vector128`1<sbyte> s_reverseSolidusMaskSByte;
    private static Vector128`1<sbyte> s_graveAccentMaskSByte;
    private static Vector128`1<sbyte> s_tildeMaskSByte;
    private static Sse2Helper();
    public static Vector128`1<short> CreateEscapingMask_UnsafeRelaxedJavaScriptEncoder(Vector128`1<short> sourceValue);
    public static Vector128`1<sbyte> CreateEscapingMask_UnsafeRelaxedJavaScriptEncoder(Vector128`1<sbyte> sourceValue);
    public static Vector128`1<sbyte> CreateEscapingMask_DefaultJavaScriptEncoderBasicLatin(Vector128`1<sbyte> sourceValue);
    public static Vector128`1<short> CreateAsciiMask(Vector128`1<short> sourceValue);
    public static bool ContainsNonAsciiByte(Vector128`1<sbyte> value);
    public static int GetIndexOfFirstNonAsciiByte(Vector128`1<byte> value);
}
internal static class System.Text.Encodings.Web.Ssse3Helper : object {
    internal static Vector128`1<sbyte> s_nibbleMaskSByte;
    internal static Vector128`1<sbyte> s_nullMaskSByte;
    private static Vector128`1<sbyte> s_bitMaskLookupBasicLatin;
    internal static Vector128`1<sbyte> s_bitPosLookup;
    private static Ssse3Helper();
    public static Vector128`1<sbyte> CreateEscapingMask_DefaultJavaScriptEncoderBasicLatin(Vector128`1<sbyte> sourceValue);
    public static Vector128`1<sbyte> CreateEscapingMask(Vector128`1<sbyte> sourceValue, Vector128`1<sbyte> bitMaskLookup, Vector128`1<sbyte> bitPosLookup, Vector128`1<sbyte> nibbleMaskSByte, Vector128`1<sbyte> nullMaskSByte);
}
public abstract class System.Text.Encodings.Web.TextEncoder : object {
    private static int EncodeStartingOutputBufferSize;
    private Byte[][] _asciiEscape;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isAsciiCacheInitialized;
    private AsciiNeedsEscapingData _asciiNeedsEscaping;
    private Vector128`1<sbyte> _bitMaskLookupAsciiNeedsEscaping;
    private static Byte[] s_noEscape;
    [EditorBrowsableAttribute("1")]
public int MaxOutputCharactersPerInputCharacter { get; }
    private static TextEncoder();
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    [EditorBrowsableAttribute("1")]
public abstract virtual bool WillEncode(int unicodeScalar);
    public abstract virtual int get_MaxOutputCharactersPerInputCharacter();
    [NullableContextAttribute("1")]
public virtual string Encode(string value);
    [NullableContextAttribute("1")]
public void Encode(TextWriter output, string value);
    [NullableContextAttribute("1")]
public virtual void Encode(TextWriter output, string value, int startIndex, int characterCount);
    [NullableContextAttribute("1")]
public virtual void Encode(TextWriter output, Char[] value, int startIndex, int characterCount);
    public virtual OperationStatus EncodeUtf8(ReadOnlySpan`1<byte> utf8Source, Span`1<byte> utf8Destination, Int32& bytesConsumed, Int32& bytesWritten, bool isFinalBlock);
    public virtual OperationStatus Encode(ReadOnlySpan`1<char> source, Span`1<char> destination, Int32& charsConsumed, Int32& charsWritten, bool isFinalBlock);
    private void Encode(TextWriter output, ReadOnlySpan`1<char> value);
    private int FindFirstCharacterToEncode(ReadOnlySpan`1<char> text);
    [EditorBrowsableAttribute("1")]
public virtual int FindFirstCharacterToEncodeUtf8(ReadOnlySpan`1<byte> utf8Text);
    internal static bool TryCopyCharacters(Char[] source, Char* destination, int destinationLength, Int32& numberOfCharactersWritten);
    internal static bool TryWriteScalarAsChar(int unicodeScalar, Char* destination, int destinationLength, Int32& numberOfCharactersWritten);
    private static void ValidateRanges(int startIndex, int characterCount, int actualInputLength);
    private Byte[] GetAsciiEncoding(byte value);
    private void InitializeAsciiCache();
    private bool DoesAsciiNeedEncoding(UInt32 value);
    private static void ThrowArgumentException_MaxOutputCharsPerInputChar();
    [CompilerGeneratedAttribute]
private OperationStatus <Encode>g__EncodeCore|16_0(ReadOnlySpan`1<char> source, Span`1<char> destination, Int32& charsConsumed, Int32& charsWritten, bool isFinalBlock);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Text.Encodings.Web.TextEncoderSettings : object {
    private AllowedCharactersBitmap _allowedCharactersBitmap;
    public TextEncoderSettings(TextEncoderSettings other);
    public TextEncoderSettings(UnicodeRange[] allowedRanges);
    public virtual void AllowCharacter(char character);
    public virtual void AllowCharacters(Char[] characters);
    public virtual void AllowCodePoints(IEnumerable`1<int> codePoints);
    public virtual void AllowRange(UnicodeRange range);
    public virtual void AllowRanges(UnicodeRange[] ranges);
    public virtual void Clear();
    public virtual void ForbidCharacter(char character);
    public virtual void ForbidCharacters(Char[] characters);
    public virtual void ForbidRange(UnicodeRange range);
    public virtual void ForbidRanges(UnicodeRange[] ranges);
    internal AllowedCharactersBitmap GetAllowedCharacters();
    [IteratorStateMachineAttribute("System.Text.Encodings.Web.TextEncoderSettings/<GetAllowedCodePoints>d__15")]
public virtual IEnumerable`1<int> GetAllowedCodePoints();
}
internal class System.Text.Encodings.Web.UnsafeRelaxedJavaScriptEncoder : JavaScriptEncoder {
    private AllowedCharactersBitmap _allowedCharacters;
    internal static UnsafeRelaxedJavaScriptEncoder s_singleton;
    private static Char[] s_b;
    private static Char[] s_t;
    private static Char[] s_n;
    private static Char[] s_f;
    private static Char[] s_r;
    private static Char[] s_back;
    private static Char[] s_doubleQuote;
    public int MaxOutputCharactersPerInputCharacter { get; }
    private static UnsafeRelaxedJavaScriptEncoder();
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual int FindFirstCharacterToEncodeUtf8(ReadOnlySpan`1<byte> utf8Text);
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Text.Encodings.Web.UrlEncoder : TextEncoder {
    public static UrlEncoder Default { get; }
    public static UrlEncoder get_Default();
    public static UrlEncoder Create(TextEncoderSettings settings);
    public static UrlEncoder Create(UnicodeRange[] allowedRanges);
}
[IsReadOnlyAttribute]
internal class System.Text.Internal.AllowedCharactersBitmap : ValueType {
    private static int ALLOWED_CHARS_BITMAP_LENGTH;
    private UInt32[] _allowedCharacters;
    private AllowedCharactersBitmap(UInt32[] allowedCharacters);
    public static AllowedCharactersBitmap CreateNew();
    public void AllowCharacter(char character);
    public void ForbidCharacter(char character);
    public void ForbidUndefinedCharacters();
    public void Clear();
    public AllowedCharactersBitmap Clone();
    public bool IsCharacterAllowed(char character);
    public bool IsUnicodeScalarAllowed(int unicodeScalar);
    public int FindFirstCharacterToEncode(Char* text, int textLength);
}
internal static class System.Text.Unicode.UnicodeHelpers : object {
    internal static int UNICODE_LAST_CODEPOINT;
    private static UInt32[] _definedCharacterBitmapBigEndian;
    private static ReadOnlySpan`1<byte> DefinedCharsBitmapSpan { get; }
    private static UnicodeHelpers();
    private static UInt32[] CreateDefinedCharacterBitmapMachineEndian();
    public static OperationStatus DecodeScalarValueFromUtf8(ReadOnlySpan`1<byte> source, UInt32& result, Int32& bytesConsumed);
    internal static ReadOnlySpan`1<UInt32> GetDefinedCharacterBitmap();
    internal static void GetUtf16SurrogatePairFromAstralScalarValue(int scalar, Char& highSurrogate, Char& lowSurrogate);
    internal static int GetUtf8RepresentationForScalarValue(UInt32 scalar);
    internal static bool IsSupplementaryCodePoint(int scalar);
    private static ReadOnlySpan`1<byte> get_DefinedCharsBitmapSpan();
}
public class System.Text.Unicode.UnicodeRange : object {
    [CompilerGeneratedAttribute]
private int <FirstCodePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int FirstCodePoint { get; private set; }
    public int Length { get; private set; }
    public UnicodeRange(int firstCodePoint, int length);
    [CompilerGeneratedAttribute]
public int get_FirstCodePoint();
    [CompilerGeneratedAttribute]
private void set_FirstCodePoint(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    [NullableContextAttribute("1")]
public static UnicodeRange Create(char firstCharacter, char lastCharacter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Text.Unicode.UnicodeRanges : object {
    private static UnicodeRange _none;
    private static UnicodeRange _all;
    private static UnicodeRange _u0000;
    private static UnicodeRange _u0080;
    private static UnicodeRange _u0100;
    private static UnicodeRange _u0180;
    private static UnicodeRange _u0250;
    private static UnicodeRange _u02B0;
    private static UnicodeRange _u0300;
    private static UnicodeRange _u0370;
    private static UnicodeRange _u0400;
    private static UnicodeRange _u0500;
    private static UnicodeRange _u0530;
    private static UnicodeRange _u0590;
    private static UnicodeRange _u0600;
    private static UnicodeRange _u0700;
    private static UnicodeRange _u0750;
    private static UnicodeRange _u0780;
    private static UnicodeRange _u07C0;
    private static UnicodeRange _u0800;
    private static UnicodeRange _u0840;
    private static UnicodeRange _u0860;
    private static UnicodeRange _u08A0;
    private static UnicodeRange _u0900;
    private static UnicodeRange _u0980;
    private static UnicodeRange _u0A00;
    private static UnicodeRange _u0A80;
    private static UnicodeRange _u0B00;
    private static UnicodeRange _u0B80;
    private static UnicodeRange _u0C00;
    private static UnicodeRange _u0C80;
    private static UnicodeRange _u0D00;
    private static UnicodeRange _u0D80;
    private static UnicodeRange _u0E00;
    private static UnicodeRange _u0E80;
    private static UnicodeRange _u0F00;
    private static UnicodeRange _u1000;
    private static UnicodeRange _u10A0;
    private static UnicodeRange _u1100;
    private static UnicodeRange _u1200;
    private static UnicodeRange _u1380;
    private static UnicodeRange _u13A0;
    private static UnicodeRange _u1400;
    private static UnicodeRange _u1680;
    private static UnicodeRange _u16A0;
    private static UnicodeRange _u1700;
    private static UnicodeRange _u1720;
    private static UnicodeRange _u1740;
    private static UnicodeRange _u1760;
    private static UnicodeRange _u1780;
    private static UnicodeRange _u1800;
    private static UnicodeRange _u18B0;
    private static UnicodeRange _u1900;
    private static UnicodeRange _u1950;
    private static UnicodeRange _u1980;
    private static UnicodeRange _u19E0;
    private static UnicodeRange _u1A00;
    private static UnicodeRange _u1A20;
    private static UnicodeRange _u1AB0;
    private static UnicodeRange _u1B00;
    private static UnicodeRange _u1B80;
    private static UnicodeRange _u1BC0;
    private static UnicodeRange _u1C00;
    private static UnicodeRange _u1C50;
    private static UnicodeRange _u1C80;
    private static UnicodeRange _u1C90;
    private static UnicodeRange _u1CC0;
    private static UnicodeRange _u1CD0;
    private static UnicodeRange _u1D00;
    private static UnicodeRange _u1D80;
    private static UnicodeRange _u1DC0;
    private static UnicodeRange _u1E00;
    private static UnicodeRange _u1F00;
    private static UnicodeRange _u2000;
    private static UnicodeRange _u2070;
    private static UnicodeRange _u20A0;
    private static UnicodeRange _u20D0;
    private static UnicodeRange _u2100;
    private static UnicodeRange _u2150;
    private static UnicodeRange _u2190;
    private static UnicodeRange _u2200;
    private static UnicodeRange _u2300;
    private static UnicodeRange _u2400;
    private static UnicodeRange _u2440;
    private static UnicodeRange _u2460;
    private static UnicodeRange _u2500;
    private static UnicodeRange _u2580;
    private static UnicodeRange _u25A0;
    private static UnicodeRange _u2600;
    private static UnicodeRange _u2700;
    private static UnicodeRange _u27C0;
    private static UnicodeRange _u27F0;
    private static UnicodeRange _u2800;
    private static UnicodeRange _u2900;
    private static UnicodeRange _u2980;
    private static UnicodeRange _u2A00;
    private static UnicodeRange _u2B00;
    private static UnicodeRange _u2C00;
    private static UnicodeRange _u2C60;
    private static UnicodeRange _u2C80;
    private static UnicodeRange _u2D00;
    private static UnicodeRange _u2D30;
    private static UnicodeRange _u2D80;
    private static UnicodeRange _u2DE0;
    private static UnicodeRange _u2E00;
    private static UnicodeRange _u2E80;
    private static UnicodeRange _u2F00;
    private static UnicodeRange _u2FF0;
    private static UnicodeRange _u3000;
    private static UnicodeRange _u3040;
    private static UnicodeRange _u30A0;
    private static UnicodeRange _u3100;
    private static UnicodeRange _u3130;
    private static UnicodeRange _u3190;
    private static UnicodeRange _u31A0;
    private static UnicodeRange _u31C0;
    private static UnicodeRange _u31F0;
    private static UnicodeRange _u3200;
    private static UnicodeRange _u3300;
    private static UnicodeRange _u3400;
    private static UnicodeRange _u4DC0;
    private static UnicodeRange _u4E00;
    private static UnicodeRange _uA000;
    private static UnicodeRange _uA490;
    private static UnicodeRange _uA4D0;
    private static UnicodeRange _uA500;
    private static UnicodeRange _uA640;
    private static UnicodeRange _uA6A0;
    private static UnicodeRange _uA700;
    private static UnicodeRange _uA720;
    private static UnicodeRange _uA800;
    private static UnicodeRange _uA830;
    private static UnicodeRange _uA840;
    private static UnicodeRange _uA880;
    private static UnicodeRange _uA8E0;
    private static UnicodeRange _uA900;
    private static UnicodeRange _uA930;
    private static UnicodeRange _uA960;
    private static UnicodeRange _uA980;
    private static UnicodeRange _uA9E0;
    private static UnicodeRange _uAA00;
    private static UnicodeRange _uAA60;
    private static UnicodeRange _uAA80;
    private static UnicodeRange _uAAE0;
    private static UnicodeRange _uAB00;
    private static UnicodeRange _uAB30;
    private static UnicodeRange _uAB70;
    private static UnicodeRange _uABC0;
    private static UnicodeRange _uAC00;
    private static UnicodeRange _uD7B0;
    private static UnicodeRange _uF900;
    private static UnicodeRange _uFB00;
    private static UnicodeRange _uFB50;
    private static UnicodeRange _uFE00;
    private static UnicodeRange _uFE10;
    private static UnicodeRange _uFE20;
    private static UnicodeRange _uFE30;
    private static UnicodeRange _uFE50;
    private static UnicodeRange _uFE70;
    private static UnicodeRange _uFF00;
    private static UnicodeRange _uFFF0;
    public static UnicodeRange None { get; }
    public static UnicodeRange All { get; }
    public static UnicodeRange BasicLatin { get; }
    public static UnicodeRange Latin1Supplement { get; }
    public static UnicodeRange LatinExtendedA { get; }
    public static UnicodeRange LatinExtendedB { get; }
    public static UnicodeRange IpaExtensions { get; }
    public static UnicodeRange SpacingModifierLetters { get; }
    public static UnicodeRange CombiningDiacriticalMarks { get; }
    public static UnicodeRange GreekandCoptic { get; }
    public static UnicodeRange Cyrillic { get; }
    public static UnicodeRange CyrillicSupplement { get; }
    public static UnicodeRange Armenian { get; }
    public static UnicodeRange Hebrew { get; }
    public static UnicodeRange Arabic { get; }
    public static UnicodeRange Syriac { get; }
    public static UnicodeRange ArabicSupplement { get; }
    public static UnicodeRange Thaana { get; }
    public static UnicodeRange NKo { get; }
    public static UnicodeRange Samaritan { get; }
    public static UnicodeRange Mandaic { get; }
    public static UnicodeRange SyriacSupplement { get; }
    public static UnicodeRange ArabicExtendedA { get; }
    public static UnicodeRange Devanagari { get; }
    public static UnicodeRange Bengali { get; }
    public static UnicodeRange Gurmukhi { get; }
    public static UnicodeRange Gujarati { get; }
    public static UnicodeRange Oriya { get; }
    public static UnicodeRange Tamil { get; }
    public static UnicodeRange Telugu { get; }
    public static UnicodeRange Kannada { get; }
    public static UnicodeRange Malayalam { get; }
    public static UnicodeRange Sinhala { get; }
    public static UnicodeRange Thai { get; }
    public static UnicodeRange Lao { get; }
    public static UnicodeRange Tibetan { get; }
    public static UnicodeRange Myanmar { get; }
    public static UnicodeRange Georgian { get; }
    public static UnicodeRange HangulJamo { get; }
    public static UnicodeRange Ethiopic { get; }
    public static UnicodeRange EthiopicSupplement { get; }
    public static UnicodeRange Cherokee { get; }
    public static UnicodeRange UnifiedCanadianAboriginalSyllabics { get; }
    public static UnicodeRange Ogham { get; }
    public static UnicodeRange Runic { get; }
    public static UnicodeRange Tagalog { get; }
    public static UnicodeRange Hanunoo { get; }
    public static UnicodeRange Buhid { get; }
    public static UnicodeRange Tagbanwa { get; }
    public static UnicodeRange Khmer { get; }
    public static UnicodeRange Mongolian { get; }
    public static UnicodeRange UnifiedCanadianAboriginalSyllabicsExtended { get; }
    public static UnicodeRange Limbu { get; }
    public static UnicodeRange TaiLe { get; }
    public static UnicodeRange NewTaiLue { get; }
    public static UnicodeRange KhmerSymbols { get; }
    public static UnicodeRange Buginese { get; }
    public static UnicodeRange TaiTham { get; }
    public static UnicodeRange CombiningDiacriticalMarksExtended { get; }
    public static UnicodeRange Balinese { get; }
    public static UnicodeRange Sundanese { get; }
    public static UnicodeRange Batak { get; }
    public static UnicodeRange Lepcha { get; }
    public static UnicodeRange OlChiki { get; }
    public static UnicodeRange CyrillicExtendedC { get; }
    public static UnicodeRange GeorgianExtended { get; }
    public static UnicodeRange SundaneseSupplement { get; }
    public static UnicodeRange VedicExtensions { get; }
    public static UnicodeRange PhoneticExtensions { get; }
    public static UnicodeRange PhoneticExtensionsSupplement { get; }
    public static UnicodeRange CombiningDiacriticalMarksSupplement { get; }
    public static UnicodeRange LatinExtendedAdditional { get; }
    public static UnicodeRange GreekExtended { get; }
    public static UnicodeRange GeneralPunctuation { get; }
    public static UnicodeRange SuperscriptsandSubscripts { get; }
    public static UnicodeRange CurrencySymbols { get; }
    public static UnicodeRange CombiningDiacriticalMarksforSymbols { get; }
    public static UnicodeRange LetterlikeSymbols { get; }
    public static UnicodeRange NumberForms { get; }
    public static UnicodeRange Arrows { get; }
    public static UnicodeRange MathematicalOperators { get; }
    public static UnicodeRange MiscellaneousTechnical { get; }
    public static UnicodeRange ControlPictures { get; }
    public static UnicodeRange OpticalCharacterRecognition { get; }
    public static UnicodeRange EnclosedAlphanumerics { get; }
    public static UnicodeRange BoxDrawing { get; }
    public static UnicodeRange BlockElements { get; }
    public static UnicodeRange GeometricShapes { get; }
    public static UnicodeRange MiscellaneousSymbols { get; }
    public static UnicodeRange Dingbats { get; }
    public static UnicodeRange MiscellaneousMathematicalSymbolsA { get; }
    public static UnicodeRange SupplementalArrowsA { get; }
    public static UnicodeRange BraillePatterns { get; }
    public static UnicodeRange SupplementalArrowsB { get; }
    public static UnicodeRange MiscellaneousMathematicalSymbolsB { get; }
    public static UnicodeRange SupplementalMathematicalOperators { get; }
    public static UnicodeRange MiscellaneousSymbolsandArrows { get; }
    public static UnicodeRange Glagolitic { get; }
    public static UnicodeRange LatinExtendedC { get; }
    public static UnicodeRange Coptic { get; }
    public static UnicodeRange GeorgianSupplement { get; }
    public static UnicodeRange Tifinagh { get; }
    public static UnicodeRange EthiopicExtended { get; }
    public static UnicodeRange CyrillicExtendedA { get; }
    public static UnicodeRange SupplementalPunctuation { get; }
    public static UnicodeRange CjkRadicalsSupplement { get; }
    public static UnicodeRange KangxiRadicals { get; }
    public static UnicodeRange IdeographicDescriptionCharacters { get; }
    public static UnicodeRange CjkSymbolsandPunctuation { get; }
    public static UnicodeRange Hiragana { get; }
    public static UnicodeRange Katakana { get; }
    public static UnicodeRange Bopomofo { get; }
    public static UnicodeRange HangulCompatibilityJamo { get; }
    public static UnicodeRange Kanbun { get; }
    public static UnicodeRange BopomofoExtended { get; }
    public static UnicodeRange CjkStrokes { get; }
    public static UnicodeRange KatakanaPhoneticExtensions { get; }
    public static UnicodeRange EnclosedCjkLettersandMonths { get; }
    public static UnicodeRange CjkCompatibility { get; }
    public static UnicodeRange CjkUnifiedIdeographsExtensionA { get; }
    public static UnicodeRange YijingHexagramSymbols { get; }
    public static UnicodeRange CjkUnifiedIdeographs { get; }
    public static UnicodeRange YiSyllables { get; }
    public static UnicodeRange YiRadicals { get; }
    public static UnicodeRange Lisu { get; }
    public static UnicodeRange Vai { get; }
    public static UnicodeRange CyrillicExtendedB { get; }
    public static UnicodeRange Bamum { get; }
    public static UnicodeRange ModifierToneLetters { get; }
    public static UnicodeRange LatinExtendedD { get; }
    public static UnicodeRange SylotiNagri { get; }
    public static UnicodeRange CommonIndicNumberForms { get; }
    public static UnicodeRange Phagspa { get; }
    public static UnicodeRange Saurashtra { get; }
    public static UnicodeRange DevanagariExtended { get; }
    public static UnicodeRange KayahLi { get; }
    public static UnicodeRange Rejang { get; }
    public static UnicodeRange HangulJamoExtendedA { get; }
    public static UnicodeRange Javanese { get; }
    public static UnicodeRange MyanmarExtendedB { get; }
    public static UnicodeRange Cham { get; }
    public static UnicodeRange MyanmarExtendedA { get; }
    public static UnicodeRange TaiViet { get; }
    public static UnicodeRange MeeteiMayekExtensions { get; }
    public static UnicodeRange EthiopicExtendedA { get; }
    public static UnicodeRange LatinExtendedE { get; }
    public static UnicodeRange CherokeeSupplement { get; }
    public static UnicodeRange MeeteiMayek { get; }
    public static UnicodeRange HangulSyllables { get; }
    public static UnicodeRange HangulJamoExtendedB { get; }
    public static UnicodeRange CjkCompatibilityIdeographs { get; }
    public static UnicodeRange AlphabeticPresentationForms { get; }
    public static UnicodeRange ArabicPresentationFormsA { get; }
    public static UnicodeRange VariationSelectors { get; }
    public static UnicodeRange VerticalForms { get; }
    public static UnicodeRange CombiningHalfMarks { get; }
    public static UnicodeRange CjkCompatibilityForms { get; }
    public static UnicodeRange SmallFormVariants { get; }
    public static UnicodeRange ArabicPresentationFormsB { get; }
    public static UnicodeRange HalfwidthandFullwidthForms { get; }
    public static UnicodeRange Specials { get; }
    public static UnicodeRange get_None();
    public static UnicodeRange get_All();
    private static UnicodeRange CreateEmptyRange(UnicodeRange& range);
    private static UnicodeRange CreateRange(UnicodeRange& range, char first, char last);
    public static UnicodeRange get_BasicLatin();
    public static UnicodeRange get_Latin1Supplement();
    public static UnicodeRange get_LatinExtendedA();
    public static UnicodeRange get_LatinExtendedB();
    public static UnicodeRange get_IpaExtensions();
    public static UnicodeRange get_SpacingModifierLetters();
    public static UnicodeRange get_CombiningDiacriticalMarks();
    public static UnicodeRange get_GreekandCoptic();
    public static UnicodeRange get_Cyrillic();
    public static UnicodeRange get_CyrillicSupplement();
    public static UnicodeRange get_Armenian();
    public static UnicodeRange get_Hebrew();
    public static UnicodeRange get_Arabic();
    public static UnicodeRange get_Syriac();
    public static UnicodeRange get_ArabicSupplement();
    public static UnicodeRange get_Thaana();
    public static UnicodeRange get_NKo();
    public static UnicodeRange get_Samaritan();
    public static UnicodeRange get_Mandaic();
    public static UnicodeRange get_SyriacSupplement();
    public static UnicodeRange get_ArabicExtendedA();
    public static UnicodeRange get_Devanagari();
    public static UnicodeRange get_Bengali();
    public static UnicodeRange get_Gurmukhi();
    public static UnicodeRange get_Gujarati();
    public static UnicodeRange get_Oriya();
    public static UnicodeRange get_Tamil();
    public static UnicodeRange get_Telugu();
    public static UnicodeRange get_Kannada();
    public static UnicodeRange get_Malayalam();
    public static UnicodeRange get_Sinhala();
    public static UnicodeRange get_Thai();
    public static UnicodeRange get_Lao();
    public static UnicodeRange get_Tibetan();
    public static UnicodeRange get_Myanmar();
    public static UnicodeRange get_Georgian();
    public static UnicodeRange get_HangulJamo();
    public static UnicodeRange get_Ethiopic();
    public static UnicodeRange get_EthiopicSupplement();
    public static UnicodeRange get_Cherokee();
    public static UnicodeRange get_UnifiedCanadianAboriginalSyllabics();
    public static UnicodeRange get_Ogham();
    public static UnicodeRange get_Runic();
    public static UnicodeRange get_Tagalog();
    public static UnicodeRange get_Hanunoo();
    public static UnicodeRange get_Buhid();
    public static UnicodeRange get_Tagbanwa();
    public static UnicodeRange get_Khmer();
    public static UnicodeRange get_Mongolian();
    public static UnicodeRange get_UnifiedCanadianAboriginalSyllabicsExtended();
    public static UnicodeRange get_Limbu();
    public static UnicodeRange get_TaiLe();
    public static UnicodeRange get_NewTaiLue();
    public static UnicodeRange get_KhmerSymbols();
    public static UnicodeRange get_Buginese();
    public static UnicodeRange get_TaiTham();
    public static UnicodeRange get_CombiningDiacriticalMarksExtended();
    public static UnicodeRange get_Balinese();
    public static UnicodeRange get_Sundanese();
    public static UnicodeRange get_Batak();
    public static UnicodeRange get_Lepcha();
    public static UnicodeRange get_OlChiki();
    public static UnicodeRange get_CyrillicExtendedC();
    public static UnicodeRange get_GeorgianExtended();
    public static UnicodeRange get_SundaneseSupplement();
    public static UnicodeRange get_VedicExtensions();
    public static UnicodeRange get_PhoneticExtensions();
    public static UnicodeRange get_PhoneticExtensionsSupplement();
    public static UnicodeRange get_CombiningDiacriticalMarksSupplement();
    public static UnicodeRange get_LatinExtendedAdditional();
    public static UnicodeRange get_GreekExtended();
    public static UnicodeRange get_GeneralPunctuation();
    public static UnicodeRange get_SuperscriptsandSubscripts();
    public static UnicodeRange get_CurrencySymbols();
    public static UnicodeRange get_CombiningDiacriticalMarksforSymbols();
    public static UnicodeRange get_LetterlikeSymbols();
    public static UnicodeRange get_NumberForms();
    public static UnicodeRange get_Arrows();
    public static UnicodeRange get_MathematicalOperators();
    public static UnicodeRange get_MiscellaneousTechnical();
    public static UnicodeRange get_ControlPictures();
    public static UnicodeRange get_OpticalCharacterRecognition();
    public static UnicodeRange get_EnclosedAlphanumerics();
    public static UnicodeRange get_BoxDrawing();
    public static UnicodeRange get_BlockElements();
    public static UnicodeRange get_GeometricShapes();
    public static UnicodeRange get_MiscellaneousSymbols();
    public static UnicodeRange get_Dingbats();
    public static UnicodeRange get_MiscellaneousMathematicalSymbolsA();
    public static UnicodeRange get_SupplementalArrowsA();
    public static UnicodeRange get_BraillePatterns();
    public static UnicodeRange get_SupplementalArrowsB();
    public static UnicodeRange get_MiscellaneousMathematicalSymbolsB();
    public static UnicodeRange get_SupplementalMathematicalOperators();
    public static UnicodeRange get_MiscellaneousSymbolsandArrows();
    public static UnicodeRange get_Glagolitic();
    public static UnicodeRange get_LatinExtendedC();
    public static UnicodeRange get_Coptic();
    public static UnicodeRange get_GeorgianSupplement();
    public static UnicodeRange get_Tifinagh();
    public static UnicodeRange get_EthiopicExtended();
    public static UnicodeRange get_CyrillicExtendedA();
    public static UnicodeRange get_SupplementalPunctuation();
    public static UnicodeRange get_CjkRadicalsSupplement();
    public static UnicodeRange get_KangxiRadicals();
    public static UnicodeRange get_IdeographicDescriptionCharacters();
    public static UnicodeRange get_CjkSymbolsandPunctuation();
    public static UnicodeRange get_Hiragana();
    public static UnicodeRange get_Katakana();
    public static UnicodeRange get_Bopomofo();
    public static UnicodeRange get_HangulCompatibilityJamo();
    public static UnicodeRange get_Kanbun();
    public static UnicodeRange get_BopomofoExtended();
    public static UnicodeRange get_CjkStrokes();
    public static UnicodeRange get_KatakanaPhoneticExtensions();
    public static UnicodeRange get_EnclosedCjkLettersandMonths();
    public static UnicodeRange get_CjkCompatibility();
    public static UnicodeRange get_CjkUnifiedIdeographsExtensionA();
    public static UnicodeRange get_YijingHexagramSymbols();
    public static UnicodeRange get_CjkUnifiedIdeographs();
    public static UnicodeRange get_YiSyllables();
    public static UnicodeRange get_YiRadicals();
    public static UnicodeRange get_Lisu();
    public static UnicodeRange get_Vai();
    public static UnicodeRange get_CyrillicExtendedB();
    public static UnicodeRange get_Bamum();
    public static UnicodeRange get_ModifierToneLetters();
    public static UnicodeRange get_LatinExtendedD();
    public static UnicodeRange get_SylotiNagri();
    public static UnicodeRange get_CommonIndicNumberForms();
    public static UnicodeRange get_Phagspa();
    public static UnicodeRange get_Saurashtra();
    public static UnicodeRange get_DevanagariExtended();
    public static UnicodeRange get_KayahLi();
    public static UnicodeRange get_Rejang();
    public static UnicodeRange get_HangulJamoExtendedA();
    public static UnicodeRange get_Javanese();
    public static UnicodeRange get_MyanmarExtendedB();
    public static UnicodeRange get_Cham();
    public static UnicodeRange get_MyanmarExtendedA();
    public static UnicodeRange get_TaiViet();
    public static UnicodeRange get_MeeteiMayekExtensions();
    public static UnicodeRange get_EthiopicExtendedA();
    public static UnicodeRange get_LatinExtendedE();
    public static UnicodeRange get_CherokeeSupplement();
    public static UnicodeRange get_MeeteiMayek();
    public static UnicodeRange get_HangulSyllables();
    public static UnicodeRange get_HangulJamoExtendedB();
    public static UnicodeRange get_CjkCompatibilityIdeographs();
    public static UnicodeRange get_AlphabeticPresentationForms();
    public static UnicodeRange get_ArabicPresentationFormsA();
    public static UnicodeRange get_VariationSelectors();
    public static UnicodeRange get_VerticalForms();
    public static UnicodeRange get_CombiningHalfMarks();
    public static UnicodeRange get_CjkCompatibilityForms();
    public static UnicodeRange get_SmallFormVariants();
    public static UnicodeRange get_ArabicPresentationFormsB();
    public static UnicodeRange get_HalfwidthandFullwidthForms();
    public static UnicodeRange get_Specials();
}
internal static class System.Text.UnicodeDebug : object {
    [ConditionalAttribute("DEBUG")]
internal static void AssertIsHighSurrogateCodePoint(UInt32 codePoint);
    [ConditionalAttribute("DEBUG")]
internal static void AssertIsLowSurrogateCodePoint(UInt32 codePoint);
    [ConditionalAttribute("DEBUG")]
internal static void AssertIsValidCodePoint(UInt32 codePoint);
    [ConditionalAttribute("DEBUG")]
internal static void AssertIsValidScalar(UInt32 scalarValue);
    [ConditionalAttribute("DEBUG")]
internal static void AssertIsValidSupplementaryPlaneScalar(UInt32 scalarValue);
    private static string ToHexString(UInt32 codePoint);
}
internal static class System.Text.UnicodeUtility : object {
    public static UInt32 ReplacementChar;
    public static int GetPlane(UInt32 codePoint);
    public static UInt32 GetScalarFromUtf16SurrogatePair(UInt32 highSurrogateCodePoint, UInt32 lowSurrogateCodePoint);
    public static int GetUtf16SequenceLength(UInt32 value);
    public static void GetUtf16SurrogatesFromSupplementaryPlaneScalar(UInt32 value, Char& highSurrogateCodePoint, Char& lowSurrogateCodePoint);
    public static int GetUtf8SequenceLength(UInt32 value);
    public static bool IsAsciiCodePoint(UInt32 value);
    public static bool IsBmpCodePoint(UInt32 value);
    public static bool IsHighSurrogateCodePoint(UInt32 value);
    public static bool IsInRangeInclusive(UInt32 value, UInt32 lowerBound, UInt32 upperBound);
    public static bool IsLowSurrogateCodePoint(UInt32 value);
    public static bool IsSurrogateCodePoint(UInt32 value);
    public static bool IsValidCodePoint(UInt32 codePoint);
    public static bool IsValidUnicodeScalar(UInt32 value);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public int Capacity { get; }
    public Char& Item { get; }
    public Span`1<char> RawChars { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public int get_Capacity();
    public void EnsureCapacity(int capacity);
    public Char& GetPinnableReference();
    public Char& GetPinnableReference(bool terminate);
    public Char& get_Item(int index);
    public virtual string ToString();
    public Span`1<char> get_RawChars();
    public ReadOnlySpan`1<char> AsSpan(bool terminate);
    public ReadOnlySpan`1<char> AsSpan();
    public ReadOnlySpan`1<char> AsSpan(int start);
    public ReadOnlySpan`1<char> AsSpan(int start, int length);
    public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten);
    public void Insert(int index, char value, int count);
    public void Insert(int index, string s);
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    public void Append(Char* value, int length);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
