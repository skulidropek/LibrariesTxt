[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.BufferInternal : object {
    private static void Memmove(Byte* dest, Byte* src, UInt32 len);
    private static void SlowCopyBackwards(Byte* dest, Byte* src, UInt32 len);
    private static bool AreOverlapping(Byte* dest, Byte* src, UInt32 len);
    public static void MemoryCopy(Void* source, Void* destination, int destinationSizeInBytes, int sourceBytesToCopy);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
internal class System.Text.Encodings.Web.DefaultHtmlEncoder : HtmlEncoder {
    private AllowedCharactersBitmap _allowedCharacters;
    internal static DefaultHtmlEncoder Singleton;
    private static Char[] s_quote;
    private static Char[] s_ampersand;
    private static Char[] s_lessthan;
    private static Char[] s_greaterthan;
    public int MaxOutputCharactersPerInputCharacter { get; }
    public DefaultHtmlEncoder(TextEncoderSettings settings);
    public DefaultHtmlEncoder(UnicodeRange[] allowedRanges);
    private static DefaultHtmlEncoder();
    internal static void ForbidHtmlCharacters(AllowedCharactersBitmap allowedCharacters);
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
    private static bool TryWriteEncodedScalarAsNumericEntity(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
}
internal class System.Text.Encodings.Web.DefaultJavaScriptEncoder : JavaScriptEncoder {
    private AllowedCharactersBitmap _allowedCharacters;
    internal static DefaultJavaScriptEncoder Singleton;
    private static Char[] s_b;
    private static Char[] s_t;
    private static Char[] s_n;
    private static Char[] s_f;
    private static Char[] s_r;
    private static Char[] s_forward;
    private static Char[] s_back;
    public int MaxOutputCharactersPerInputCharacter { get; }
    public DefaultJavaScriptEncoder(TextEncoderSettings filter);
    public DefaultJavaScriptEncoder(UnicodeRange[] allowedRanges);
    private static DefaultJavaScriptEncoder();
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
    private static bool TryWriteEncodedScalarAsNumericEntity(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten);
    private static bool TryWriteEncodedSingleCharacter(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten);
}
internal class System.Text.Encodings.Web.DefaultUrlEncoder : UrlEncoder {
    private AllowedCharactersBitmap _allowedCharacters;
    internal static DefaultUrlEncoder Singleton;
    public int MaxOutputCharactersPerInputCharacter { get; }
    public DefaultUrlEncoder(TextEncoderSettings filter);
    public DefaultUrlEncoder(UnicodeRange[] allowedRanges);
    private static DefaultUrlEncoder();
    public virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual bool WillEncode(int unicodeScalar);
    public virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    public virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
}
internal static class System.Text.Encodings.Web.HexUtil : object {
    internal static char UInt32LsbToHexDigit(UInt32 value);
    internal static char Int32LsbToHexDigit(int value);
    internal static void ByteToHexDigits(byte value, Char& firstHexChar, Char& secondHexChar);
}
public abstract class System.Text.Encodings.Web.HtmlEncoder : TextEncoder {
    public static HtmlEncoder Default { get; }
    public static HtmlEncoder get_Default();
    public static HtmlEncoder Create(TextEncoderSettings settings);
    public static HtmlEncoder Create(UnicodeRange[] allowedRanges);
}
public abstract class System.Text.Encodings.Web.JavaScriptEncoder : TextEncoder {
    public static JavaScriptEncoder Default { get; }
    public static JavaScriptEncoder get_Default();
    public static JavaScriptEncoder Create(TextEncoderSettings settings);
    public static JavaScriptEncoder Create(UnicodeRange[] allowedRanges);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class System.Text.Encodings.Web.PinnedCharBuffer : ValueType {
    private Char* _ptr;
    private int _length;
    internal int Length { get; }
    internal Char* Pointer { get; }
    internal char Item { get; }
    internal PinnedCharBuffer(Char* pinnedValue, string value, int offset, int count);
    internal PinnedCharBuffer(Char* pinnedValue, Char[] value, int offset, int count);
    private PinnedCharBuffer(Char* ptr, int length);
    internal int get_Length();
    internal Char* get_Pointer();
    internal char get_Item(int index);
    internal PinnedCharBuffer Slice(int offset);
    internal PinnedCharBuffer Slice(int offset, int count);
    private static void ThrowArgumentOutOfRangeException();
}
public abstract class System.Text.Encodings.Web.TextEncoder : object {
    [EditorBrowsableAttribute("1")]
public int MaxOutputCharactersPerInputCharacter { get; }
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract virtual bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten);
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("1")]
public abstract virtual int FindFirstCharacterToEncode(Char* text, int textLength);
    private int FindFirstCharacterToEncode(PinnedCharBuffer charBuffer);
    [EditorBrowsableAttribute("1")]
public abstract virtual bool WillEncode(int unicodeScalar);
    public abstract virtual int get_MaxOutputCharactersPerInputCharacter();
    public virtual string Encode(string value);
    public void Encode(TextWriter output, string value);
    public virtual void Encode(TextWriter output, string value, int startIndex, int characterCount);
    public virtual void Encode(TextWriter output, Char[] value, int startIndex, int characterCount);
    private void Encode(TextWriter output, PinnedCharBuffer source);
    internal static bool TryCopyCharacters(Char[] source, Char* destination, int destinationLength, Int32& numberOfCharactersWritten);
    internal static bool TryWriteScalarAsChar(int unicodeScalar, Char* destination, int destinationLength, Int32& numberOfCharactersWritten);
    private static void ValidateRanges(int startIndex, int characterCount, int actualInputLength);
    private static void ThrowArgumentException_MaxOutputCharsPerInputChar();
}
public class System.Text.Encodings.Web.TextEncoderSettings : object {
    private AllowedCharactersBitmap _allowedCharactersBitmap;
    public TextEncoderSettings(TextEncoderSettings other);
    public TextEncoderSettings(UnicodeRange[] allowedRanges);
    public virtual void AllowCharacter(char character);
    public virtual void AllowCharacters(Char[] characters);
    public virtual void AllowCodePoints(IEnumerable`1<int> codePoints);
    public virtual void AllowRange(UnicodeRange range);
    public virtual void AllowRanges(UnicodeRange[] ranges);
    public virtual void Clear();
    public virtual void ForbidCharacter(char character);
    public virtual void ForbidCharacters(Char[] characters);
    public virtual void ForbidRange(UnicodeRange range);
    public virtual void ForbidRanges(UnicodeRange[] ranges);
    internal AllowedCharactersBitmap GetAllowedCharacters();
    [IteratorStateMachineAttribute("System.Text.Encodings.Web.TextEncoderSettings/<GetAllowedCodePoints>d__15")]
public virtual IEnumerable`1<int> GetAllowedCodePoints();
}
public abstract class System.Text.Encodings.Web.UrlEncoder : TextEncoder {
    public static UrlEncoder Default { get; }
    public static UrlEncoder get_Default();
    public static UrlEncoder Create(TextEncoderSettings settings);
    public static UrlEncoder Create(UnicodeRange[] allowedRanges);
}
[IsReadOnlyAttribute]
internal class System.Text.Internal.AllowedCharactersBitmap : ValueType {
    private static int ALLOWED_CHARS_BITMAP_LENGTH;
    private UInt32[] _allowedCharacters;
    private AllowedCharactersBitmap(UInt32[] allowedCharacters);
    public static AllowedCharactersBitmap CreateNew();
    public void AllowCharacter(char character);
    public void ForbidCharacter(char character);
    public void ForbidUndefinedCharacters();
    public void Clear();
    public AllowedCharactersBitmap Clone();
    public bool IsCharacterAllowed(char character);
    public bool IsUnicodeScalarAllowed(int unicodeScalar);
    public int FindFirstCharacterToEncode(Char* text, int textLength);
}
internal static class System.Text.Unicode.UnicodeHelpers : object {
    private static char UNICODE_REPLACEMENT_CHAR;
    internal static int UNICODE_LAST_CODEPOINT;
    private static UInt32[] _definedCharacterBitmap;
    private static UInt32[] CreateDefinedCharacterBitmap();
    internal static UInt32[] GetDefinedCharacterBitmap();
    internal static int GetScalarValueFromUtf16(char first, Nullable`1<char> second, Boolean& wasSurrogatePair);
    private static int GetScalarValueFromUtf16Slow(char first, Nullable`1<char> second, Boolean& wasSurrogatePair);
    internal static int GetScalarValueFromUtf16(Char* pChar, bool endOfString);
    private static int GetScalarValueFromUtf16Slow(Char* pChar, bool endOfString);
    private static int GetScalarValueFromUtf16SurrogatePair(char highSurrogate, char lowSurrogate);
    internal static void GetUtf16SurrogatePairFromAstralScalarValue(int scalar, Char& highSurrogate, Char& lowSurrogate);
    internal static int GetUtf8RepresentationForScalarValue(UInt32 scalar);
    internal static bool IsCharacterDefined(char c);
    internal static bool IsSupplementaryCodePoint(int scalar);
}
public class System.Text.Unicode.UnicodeRange : object {
    [CompilerGeneratedAttribute]
private int <FirstCodePoint>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int FirstCodePoint { get; private set; }
    public int Length { get; private set; }
    public UnicodeRange(int firstCodePoint, int length);
    [CompilerGeneratedAttribute]
public int get_FirstCodePoint();
    [CompilerGeneratedAttribute]
private void set_FirstCodePoint(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
    public static UnicodeRange Create(char firstCharacter, char lastCharacter);
}
public static class System.Text.Unicode.UnicodeRanges : object {
    private static UnicodeRange _none;
    private static UnicodeRange _all;
    private static UnicodeRange _basicLatin;
    private static UnicodeRange _latin1Supplement;
    private static UnicodeRange _latinExtendedA;
    private static UnicodeRange _latinExtendedB;
    private static UnicodeRange _ipaExtensions;
    private static UnicodeRange _spacingModifierLetters;
    private static UnicodeRange _combiningDiacriticalMarks;
    private static UnicodeRange _greekandCoptic;
    private static UnicodeRange _cyrillic;
    private static UnicodeRange _cyrillicSupplement;
    private static UnicodeRange _armenian;
    private static UnicodeRange _hebrew;
    private static UnicodeRange _arabic;
    private static UnicodeRange _syriac;
    private static UnicodeRange _arabicSupplement;
    private static UnicodeRange _thaana;
    private static UnicodeRange _nKo;
    private static UnicodeRange _samaritan;
    private static UnicodeRange _mandaic;
    private static UnicodeRange _arabicExtendedA;
    private static UnicodeRange _devanagari;
    private static UnicodeRange _bengali;
    private static UnicodeRange _gurmukhi;
    private static UnicodeRange _gujarati;
    private static UnicodeRange _oriya;
    private static UnicodeRange _tamil;
    private static UnicodeRange _telugu;
    private static UnicodeRange _kannada;
    private static UnicodeRange _malayalam;
    private static UnicodeRange _sinhala;
    private static UnicodeRange _thai;
    private static UnicodeRange _lao;
    private static UnicodeRange _tibetan;
    private static UnicodeRange _myanmar;
    private static UnicodeRange _georgian;
    private static UnicodeRange _hangulJamo;
    private static UnicodeRange _ethiopic;
    private static UnicodeRange _ethiopicSupplement;
    private static UnicodeRange _cherokee;
    private static UnicodeRange _unifiedCanadianAboriginalSyllabics;
    private static UnicodeRange _ogham;
    private static UnicodeRange _runic;
    private static UnicodeRange _tagalog;
    private static UnicodeRange _hanunoo;
    private static UnicodeRange _buhid;
    private static UnicodeRange _tagbanwa;
    private static UnicodeRange _khmer;
    private static UnicodeRange _mongolian;
    private static UnicodeRange _unifiedCanadianAboriginalSyllabicsExtended;
    private static UnicodeRange _limbu;
    private static UnicodeRange _taiLe;
    private static UnicodeRange _newTaiLue;
    private static UnicodeRange _khmerSymbols;
    private static UnicodeRange _buginese;
    private static UnicodeRange _taiTham;
    private static UnicodeRange _combiningDiacriticalMarksExtended;
    private static UnicodeRange _balinese;
    private static UnicodeRange _sundanese;
    private static UnicodeRange _batak;
    private static UnicodeRange _lepcha;
    private static UnicodeRange _olChiki;
    private static UnicodeRange _sundaneseSupplement;
    private static UnicodeRange _vedicExtensions;
    private static UnicodeRange _phoneticExtensions;
    private static UnicodeRange _phoneticExtensionsSupplement;
    private static UnicodeRange _combiningDiacriticalMarksSupplement;
    private static UnicodeRange _latinExtendedAdditional;
    private static UnicodeRange _greekExtended;
    private static UnicodeRange _generalPunctuation;
    private static UnicodeRange _superscriptsandSubscripts;
    private static UnicodeRange _currencySymbols;
    private static UnicodeRange _combiningDiacriticalMarksforSymbols;
    private static UnicodeRange _letterlikeSymbols;
    private static UnicodeRange _numberForms;
    private static UnicodeRange _arrows;
    private static UnicodeRange _mathematicalOperators;
    private static UnicodeRange _miscellaneousTechnical;
    private static UnicodeRange _controlPictures;
    private static UnicodeRange _opticalCharacterRecognition;
    private static UnicodeRange _enclosedAlphanumerics;
    private static UnicodeRange _boxDrawing;
    private static UnicodeRange _blockElements;
    private static UnicodeRange _geometricShapes;
    private static UnicodeRange _miscellaneousSymbols;
    private static UnicodeRange _dingbats;
    private static UnicodeRange _miscellaneousMathematicalSymbolsA;
    private static UnicodeRange _supplementalArrowsA;
    private static UnicodeRange _braillePatterns;
    private static UnicodeRange _supplementalArrowsB;
    private static UnicodeRange _miscellaneousMathematicalSymbolsB;
    private static UnicodeRange _supplementalMathematicalOperators;
    private static UnicodeRange _miscellaneousSymbolsandArrows;
    private static UnicodeRange _glagolitic;
    private static UnicodeRange _latinExtendedC;
    private static UnicodeRange _coptic;
    private static UnicodeRange _georgianSupplement;
    private static UnicodeRange _tifinagh;
    private static UnicodeRange _ethiopicExtended;
    private static UnicodeRange _cyrillicExtendedA;
    private static UnicodeRange _supplementalPunctuation;
    private static UnicodeRange _cjkRadicalsSupplement;
    private static UnicodeRange _kangxiRadicals;
    private static UnicodeRange _ideographicDescriptionCharacters;
    private static UnicodeRange _cjkSymbolsandPunctuation;
    private static UnicodeRange _hiragana;
    private static UnicodeRange _katakana;
    private static UnicodeRange _bopomofo;
    private static UnicodeRange _hangulCompatibilityJamo;
    private static UnicodeRange _kanbun;
    private static UnicodeRange _bopomofoExtended;
    private static UnicodeRange _cjkStrokes;
    private static UnicodeRange _katakanaPhoneticExtensions;
    private static UnicodeRange _enclosedCjkLettersandMonths;
    private static UnicodeRange _cjkCompatibility;
    private static UnicodeRange _cjkUnifiedIdeographsExtensionA;
    private static UnicodeRange _yijingHexagramSymbols;
    private static UnicodeRange _cjkUnifiedIdeographs;
    private static UnicodeRange _yiSyllables;
    private static UnicodeRange _yiRadicals;
    private static UnicodeRange _lisu;
    private static UnicodeRange _vai;
    private static UnicodeRange _cyrillicExtendedB;
    private static UnicodeRange _bamum;
    private static UnicodeRange _modifierToneLetters;
    private static UnicodeRange _latinExtendedD;
    private static UnicodeRange _sylotiNagri;
    private static UnicodeRange _commonIndicNumberForms;
    private static UnicodeRange _phagspa;
    private static UnicodeRange _saurashtra;
    private static UnicodeRange _devanagariExtended;
    private static UnicodeRange _kayahLi;
    private static UnicodeRange _rejang;
    private static UnicodeRange _hangulJamoExtendedA;
    private static UnicodeRange _javanese;
    private static UnicodeRange _myanmarExtendedB;
    private static UnicodeRange _cham;
    private static UnicodeRange _myanmarExtendedA;
    private static UnicodeRange _taiViet;
    private static UnicodeRange _meeteiMayekExtensions;
    private static UnicodeRange _ethiopicExtendedA;
    private static UnicodeRange _latinExtendedE;
    private static UnicodeRange _cherokeeSupplement;
    private static UnicodeRange _meeteiMayek;
    private static UnicodeRange _hangulSyllables;
    private static UnicodeRange _hangulJamoExtendedB;
    private static UnicodeRange _cjkCompatibilityIdeographs;
    private static UnicodeRange _alphabeticPresentationForms;
    private static UnicodeRange _arabicPresentationFormsA;
    private static UnicodeRange _variationSelectors;
    private static UnicodeRange _verticalForms;
    private static UnicodeRange _combiningHalfMarks;
    private static UnicodeRange _cjkCompatibilityForms;
    private static UnicodeRange _smallFormVariants;
    private static UnicodeRange _arabicPresentationFormsB;
    private static UnicodeRange _halfwidthandFullwidthForms;
    private static UnicodeRange _specials;
    public static UnicodeRange None { get; }
    public static UnicodeRange All { get; }
    public static UnicodeRange BasicLatin { get; }
    public static UnicodeRange Latin1Supplement { get; }
    public static UnicodeRange LatinExtendedA { get; }
    public static UnicodeRange LatinExtendedB { get; }
    public static UnicodeRange IpaExtensions { get; }
    public static UnicodeRange SpacingModifierLetters { get; }
    public static UnicodeRange CombiningDiacriticalMarks { get; }
    public static UnicodeRange GreekandCoptic { get; }
    public static UnicodeRange Cyrillic { get; }
    public static UnicodeRange CyrillicSupplement { get; }
    public static UnicodeRange Armenian { get; }
    public static UnicodeRange Hebrew { get; }
    public static UnicodeRange Arabic { get; }
    public static UnicodeRange Syriac { get; }
    public static UnicodeRange ArabicSupplement { get; }
    public static UnicodeRange Thaana { get; }
    public static UnicodeRange NKo { get; }
    public static UnicodeRange Samaritan { get; }
    public static UnicodeRange Mandaic { get; }
    public static UnicodeRange ArabicExtendedA { get; }
    public static UnicodeRange Devanagari { get; }
    public static UnicodeRange Bengali { get; }
    public static UnicodeRange Gurmukhi { get; }
    public static UnicodeRange Gujarati { get; }
    public static UnicodeRange Oriya { get; }
    public static UnicodeRange Tamil { get; }
    public static UnicodeRange Telugu { get; }
    public static UnicodeRange Kannada { get; }
    public static UnicodeRange Malayalam { get; }
    public static UnicodeRange Sinhala { get; }
    public static UnicodeRange Thai { get; }
    public static UnicodeRange Lao { get; }
    public static UnicodeRange Tibetan { get; }
    public static UnicodeRange Myanmar { get; }
    public static UnicodeRange Georgian { get; }
    public static UnicodeRange HangulJamo { get; }
    public static UnicodeRange Ethiopic { get; }
    public static UnicodeRange EthiopicSupplement { get; }
    public static UnicodeRange Cherokee { get; }
    public static UnicodeRange UnifiedCanadianAboriginalSyllabics { get; }
    public static UnicodeRange Ogham { get; }
    public static UnicodeRange Runic { get; }
    public static UnicodeRange Tagalog { get; }
    public static UnicodeRange Hanunoo { get; }
    public static UnicodeRange Buhid { get; }
    public static UnicodeRange Tagbanwa { get; }
    public static UnicodeRange Khmer { get; }
    public static UnicodeRange Mongolian { get; }
    public static UnicodeRange UnifiedCanadianAboriginalSyllabicsExtended { get; }
    public static UnicodeRange Limbu { get; }
    public static UnicodeRange TaiLe { get; }
    public static UnicodeRange NewTaiLue { get; }
    public static UnicodeRange KhmerSymbols { get; }
    public static UnicodeRange Buginese { get; }
    public static UnicodeRange TaiTham { get; }
    public static UnicodeRange CombiningDiacriticalMarksExtended { get; }
    public static UnicodeRange Balinese { get; }
    public static UnicodeRange Sundanese { get; }
    public static UnicodeRange Batak { get; }
    public static UnicodeRange Lepcha { get; }
    public static UnicodeRange OlChiki { get; }
    public static UnicodeRange SundaneseSupplement { get; }
    public static UnicodeRange VedicExtensions { get; }
    public static UnicodeRange PhoneticExtensions { get; }
    public static UnicodeRange PhoneticExtensionsSupplement { get; }
    public static UnicodeRange CombiningDiacriticalMarksSupplement { get; }
    public static UnicodeRange LatinExtendedAdditional { get; }
    public static UnicodeRange GreekExtended { get; }
    public static UnicodeRange GeneralPunctuation { get; }
    public static UnicodeRange SuperscriptsandSubscripts { get; }
    public static UnicodeRange CurrencySymbols { get; }
    public static UnicodeRange CombiningDiacriticalMarksforSymbols { get; }
    public static UnicodeRange LetterlikeSymbols { get; }
    public static UnicodeRange NumberForms { get; }
    public static UnicodeRange Arrows { get; }
    public static UnicodeRange MathematicalOperators { get; }
    public static UnicodeRange MiscellaneousTechnical { get; }
    public static UnicodeRange ControlPictures { get; }
    public static UnicodeRange OpticalCharacterRecognition { get; }
    public static UnicodeRange EnclosedAlphanumerics { get; }
    public static UnicodeRange BoxDrawing { get; }
    public static UnicodeRange BlockElements { get; }
    public static UnicodeRange GeometricShapes { get; }
    public static UnicodeRange MiscellaneousSymbols { get; }
    public static UnicodeRange Dingbats { get; }
    public static UnicodeRange MiscellaneousMathematicalSymbolsA { get; }
    public static UnicodeRange SupplementalArrowsA { get; }
    public static UnicodeRange BraillePatterns { get; }
    public static UnicodeRange SupplementalArrowsB { get; }
    public static UnicodeRange MiscellaneousMathematicalSymbolsB { get; }
    public static UnicodeRange SupplementalMathematicalOperators { get; }
    public static UnicodeRange MiscellaneousSymbolsandArrows { get; }
    public static UnicodeRange Glagolitic { get; }
    public static UnicodeRange LatinExtendedC { get; }
    public static UnicodeRange Coptic { get; }
    public static UnicodeRange GeorgianSupplement { get; }
    public static UnicodeRange Tifinagh { get; }
    public static UnicodeRange EthiopicExtended { get; }
    public static UnicodeRange CyrillicExtendedA { get; }
    public static UnicodeRange SupplementalPunctuation { get; }
    public static UnicodeRange CjkRadicalsSupplement { get; }
    public static UnicodeRange KangxiRadicals { get; }
    public static UnicodeRange IdeographicDescriptionCharacters { get; }
    public static UnicodeRange CjkSymbolsandPunctuation { get; }
    public static UnicodeRange Hiragana { get; }
    public static UnicodeRange Katakana { get; }
    public static UnicodeRange Bopomofo { get; }
    public static UnicodeRange HangulCompatibilityJamo { get; }
    public static UnicodeRange Kanbun { get; }
    public static UnicodeRange BopomofoExtended { get; }
    public static UnicodeRange CjkStrokes { get; }
    public static UnicodeRange KatakanaPhoneticExtensions { get; }
    public static UnicodeRange EnclosedCjkLettersandMonths { get; }
    public static UnicodeRange CjkCompatibility { get; }
    public static UnicodeRange CjkUnifiedIdeographsExtensionA { get; }
    public static UnicodeRange YijingHexagramSymbols { get; }
    public static UnicodeRange CjkUnifiedIdeographs { get; }
    public static UnicodeRange YiSyllables { get; }
    public static UnicodeRange YiRadicals { get; }
    public static UnicodeRange Lisu { get; }
    public static UnicodeRange Vai { get; }
    public static UnicodeRange CyrillicExtendedB { get; }
    public static UnicodeRange Bamum { get; }
    public static UnicodeRange ModifierToneLetters { get; }
    public static UnicodeRange LatinExtendedD { get; }
    public static UnicodeRange SylotiNagri { get; }
    public static UnicodeRange CommonIndicNumberForms { get; }
    public static UnicodeRange Phagspa { get; }
    public static UnicodeRange Saurashtra { get; }
    public static UnicodeRange DevanagariExtended { get; }
    public static UnicodeRange KayahLi { get; }
    public static UnicodeRange Rejang { get; }
    public static UnicodeRange HangulJamoExtendedA { get; }
    public static UnicodeRange Javanese { get; }
    public static UnicodeRange MyanmarExtendedB { get; }
    public static UnicodeRange Cham { get; }
    public static UnicodeRange MyanmarExtendedA { get; }
    public static UnicodeRange TaiViet { get; }
    public static UnicodeRange MeeteiMayekExtensions { get; }
    public static UnicodeRange EthiopicExtendedA { get; }
    public static UnicodeRange LatinExtendedE { get; }
    public static UnicodeRange CherokeeSupplement { get; }
    public static UnicodeRange MeeteiMayek { get; }
    public static UnicodeRange HangulSyllables { get; }
    public static UnicodeRange HangulJamoExtendedB { get; }
    public static UnicodeRange CjkCompatibilityIdeographs { get; }
    public static UnicodeRange AlphabeticPresentationForms { get; }
    public static UnicodeRange ArabicPresentationFormsA { get; }
    public static UnicodeRange VariationSelectors { get; }
    public static UnicodeRange VerticalForms { get; }
    public static UnicodeRange CombiningHalfMarks { get; }
    public static UnicodeRange CjkCompatibilityForms { get; }
    public static UnicodeRange SmallFormVariants { get; }
    public static UnicodeRange ArabicPresentationFormsB { get; }
    public static UnicodeRange HalfwidthandFullwidthForms { get; }
    public static UnicodeRange Specials { get; }
    public static UnicodeRange get_None();
    public static UnicodeRange get_All();
    private static UnicodeRange CreateEmptyRange(UnicodeRange& range);
    private static UnicodeRange CreateRange(UnicodeRange& range, char first, char last);
    public static UnicodeRange get_BasicLatin();
    public static UnicodeRange get_Latin1Supplement();
    public static UnicodeRange get_LatinExtendedA();
    public static UnicodeRange get_LatinExtendedB();
    public static UnicodeRange get_IpaExtensions();
    public static UnicodeRange get_SpacingModifierLetters();
    public static UnicodeRange get_CombiningDiacriticalMarks();
    public static UnicodeRange get_GreekandCoptic();
    public static UnicodeRange get_Cyrillic();
    public static UnicodeRange get_CyrillicSupplement();
    public static UnicodeRange get_Armenian();
    public static UnicodeRange get_Hebrew();
    public static UnicodeRange get_Arabic();
    public static UnicodeRange get_Syriac();
    public static UnicodeRange get_ArabicSupplement();
    public static UnicodeRange get_Thaana();
    public static UnicodeRange get_NKo();
    public static UnicodeRange get_Samaritan();
    public static UnicodeRange get_Mandaic();
    public static UnicodeRange get_ArabicExtendedA();
    public static UnicodeRange get_Devanagari();
    public static UnicodeRange get_Bengali();
    public static UnicodeRange get_Gurmukhi();
    public static UnicodeRange get_Gujarati();
    public static UnicodeRange get_Oriya();
    public static UnicodeRange get_Tamil();
    public static UnicodeRange get_Telugu();
    public static UnicodeRange get_Kannada();
    public static UnicodeRange get_Malayalam();
    public static UnicodeRange get_Sinhala();
    public static UnicodeRange get_Thai();
    public static UnicodeRange get_Lao();
    public static UnicodeRange get_Tibetan();
    public static UnicodeRange get_Myanmar();
    public static UnicodeRange get_Georgian();
    public static UnicodeRange get_HangulJamo();
    public static UnicodeRange get_Ethiopic();
    public static UnicodeRange get_EthiopicSupplement();
    public static UnicodeRange get_Cherokee();
    public static UnicodeRange get_UnifiedCanadianAboriginalSyllabics();
    public static UnicodeRange get_Ogham();
    public static UnicodeRange get_Runic();
    public static UnicodeRange get_Tagalog();
    public static UnicodeRange get_Hanunoo();
    public static UnicodeRange get_Buhid();
    public static UnicodeRange get_Tagbanwa();
    public static UnicodeRange get_Khmer();
    public static UnicodeRange get_Mongolian();
    public static UnicodeRange get_UnifiedCanadianAboriginalSyllabicsExtended();
    public static UnicodeRange get_Limbu();
    public static UnicodeRange get_TaiLe();
    public static UnicodeRange get_NewTaiLue();
    public static UnicodeRange get_KhmerSymbols();
    public static UnicodeRange get_Buginese();
    public static UnicodeRange get_TaiTham();
    public static UnicodeRange get_CombiningDiacriticalMarksExtended();
    public static UnicodeRange get_Balinese();
    public static UnicodeRange get_Sundanese();
    public static UnicodeRange get_Batak();
    public static UnicodeRange get_Lepcha();
    public static UnicodeRange get_OlChiki();
    public static UnicodeRange get_SundaneseSupplement();
    public static UnicodeRange get_VedicExtensions();
    public static UnicodeRange get_PhoneticExtensions();
    public static UnicodeRange get_PhoneticExtensionsSupplement();
    public static UnicodeRange get_CombiningDiacriticalMarksSupplement();
    public static UnicodeRange get_LatinExtendedAdditional();
    public static UnicodeRange get_GreekExtended();
    public static UnicodeRange get_GeneralPunctuation();
    public static UnicodeRange get_SuperscriptsandSubscripts();
    public static UnicodeRange get_CurrencySymbols();
    public static UnicodeRange get_CombiningDiacriticalMarksforSymbols();
    public static UnicodeRange get_LetterlikeSymbols();
    public static UnicodeRange get_NumberForms();
    public static UnicodeRange get_Arrows();
    public static UnicodeRange get_MathematicalOperators();
    public static UnicodeRange get_MiscellaneousTechnical();
    public static UnicodeRange get_ControlPictures();
    public static UnicodeRange get_OpticalCharacterRecognition();
    public static UnicodeRange get_EnclosedAlphanumerics();
    public static UnicodeRange get_BoxDrawing();
    public static UnicodeRange get_BlockElements();
    public static UnicodeRange get_GeometricShapes();
    public static UnicodeRange get_MiscellaneousSymbols();
    public static UnicodeRange get_Dingbats();
    public static UnicodeRange get_MiscellaneousMathematicalSymbolsA();
    public static UnicodeRange get_SupplementalArrowsA();
    public static UnicodeRange get_BraillePatterns();
    public static UnicodeRange get_SupplementalArrowsB();
    public static UnicodeRange get_MiscellaneousMathematicalSymbolsB();
    public static UnicodeRange get_SupplementalMathematicalOperators();
    public static UnicodeRange get_MiscellaneousSymbolsandArrows();
    public static UnicodeRange get_Glagolitic();
    public static UnicodeRange get_LatinExtendedC();
    public static UnicodeRange get_Coptic();
    public static UnicodeRange get_GeorgianSupplement();
    public static UnicodeRange get_Tifinagh();
    public static UnicodeRange get_EthiopicExtended();
    public static UnicodeRange get_CyrillicExtendedA();
    public static UnicodeRange get_SupplementalPunctuation();
    public static UnicodeRange get_CjkRadicalsSupplement();
    public static UnicodeRange get_KangxiRadicals();
    public static UnicodeRange get_IdeographicDescriptionCharacters();
    public static UnicodeRange get_CjkSymbolsandPunctuation();
    public static UnicodeRange get_Hiragana();
    public static UnicodeRange get_Katakana();
    public static UnicodeRange get_Bopomofo();
    public static UnicodeRange get_HangulCompatibilityJamo();
    public static UnicodeRange get_Kanbun();
    public static UnicodeRange get_BopomofoExtended();
    public static UnicodeRange get_CjkStrokes();
    public static UnicodeRange get_KatakanaPhoneticExtensions();
    public static UnicodeRange get_EnclosedCjkLettersandMonths();
    public static UnicodeRange get_CjkCompatibility();
    public static UnicodeRange get_CjkUnifiedIdeographsExtensionA();
    public static UnicodeRange get_YijingHexagramSymbols();
    public static UnicodeRange get_CjkUnifiedIdeographs();
    public static UnicodeRange get_YiSyllables();
    public static UnicodeRange get_YiRadicals();
    public static UnicodeRange get_Lisu();
    public static UnicodeRange get_Vai();
    public static UnicodeRange get_CyrillicExtendedB();
    public static UnicodeRange get_Bamum();
    public static UnicodeRange get_ModifierToneLetters();
    public static UnicodeRange get_LatinExtendedD();
    public static UnicodeRange get_SylotiNagri();
    public static UnicodeRange get_CommonIndicNumberForms();
    public static UnicodeRange get_Phagspa();
    public static UnicodeRange get_Saurashtra();
    public static UnicodeRange get_DevanagariExtended();
    public static UnicodeRange get_KayahLi();
    public static UnicodeRange get_Rejang();
    public static UnicodeRange get_HangulJamoExtendedA();
    public static UnicodeRange get_Javanese();
    public static UnicodeRange get_MyanmarExtendedB();
    public static UnicodeRange get_Cham();
    public static UnicodeRange get_MyanmarExtendedA();
    public static UnicodeRange get_TaiViet();
    public static UnicodeRange get_MeeteiMayekExtensions();
    public static UnicodeRange get_EthiopicExtendedA();
    public static UnicodeRange get_LatinExtendedE();
    public static UnicodeRange get_CherokeeSupplement();
    public static UnicodeRange get_MeeteiMayek();
    public static UnicodeRange get_HangulSyllables();
    public static UnicodeRange get_HangulJamoExtendedB();
    public static UnicodeRange get_CjkCompatibilityIdeographs();
    public static UnicodeRange get_AlphabeticPresentationForms();
    public static UnicodeRange get_ArabicPresentationFormsA();
    public static UnicodeRange get_VariationSelectors();
    public static UnicodeRange get_VerticalForms();
    public static UnicodeRange get_CombiningHalfMarks();
    public static UnicodeRange get_CjkCompatibilityForms();
    public static UnicodeRange get_SmallFormVariants();
    public static UnicodeRange get_ArabicPresentationFormsB();
    public static UnicodeRange get_HalfwidthandFullwidthForms();
    public static UnicodeRange get_Specials();
}
