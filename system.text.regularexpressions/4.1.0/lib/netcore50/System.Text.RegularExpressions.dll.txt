internal static class FxResources.System.Text.RegularExpressions.SR : object {
}
internal class Internal.Reflection.ExplicitScopeAttribute : Attribute {
    public ExplicitScopeAttribute(string p0);
}
internal static class System.IO.StringBuilderCache : object {
    private static int MAX_BUILDER_SIZE;
    private static int DEFAULT_CAPACITY;
    [ThreadStaticAttribute]
private static StringBuilder t_cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static StringBuilder Acquire(string value);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
internal class System.Runtime.CompilerServices.__BlockReflectionActivateAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
internal class System.Runtime.CompilerServices.__BlockReflectionInvokeAttribute : Attribute {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string AlternationCantCapture { get; }
    internal static string AlternationCantHaveComment { get; }
    internal static string BadClassInCharRange { get; }
    internal static string BeginIndexNotNegative { get; }
    internal static string CaptureGroupOutOfRange { get; }
    internal static string CapnumNotZero { get; }
    internal static string CountTooSmall { get; }
    internal static string EnumNotStarted { get; }
    internal static string IllegalCondition { get; }
    internal static string IllegalEndEscape { get; }
    internal static string IllegalRange { get; }
    internal static string IncompleteSlashP { get; }
    internal static string InternalError { get; }
    internal static string InvalidGroupName { get; }
    internal static string LengthNotNegative { get; }
    internal static string MalformedNameRef { get; }
    internal static string MalformedReference { get; }
    internal static string MalformedSlashP { get; }
    internal static string MakeException { get; }
    internal static string MissingControl { get; }
    internal static string NestedQuantify { get; }
    internal static string NoResultOnFailed { get; }
    internal static string NotEnoughParens { get; }
    internal static string OnlyAllowedOnce { get; }
    internal static string QuantifyAfterNothing { get; }
    internal static string RegexMatchTimeoutException_Occurred { get; }
    internal static string ReplacementError { get; }
    internal static string ReversedCharRange { get; }
    internal static string SubtractionMustBeLast { get; }
    internal static string TooFewHex { get; }
    internal static string TooManyAlternates { get; }
    internal static string TooManyParens { get; }
    internal static string UndefinedBackref { get; }
    internal static string UndefinedNameRef { get; }
    internal static string UndefinedReference { get; }
    internal static string UnexpectedOpcode { get; }
    internal static string UnimplementedState { get; }
    internal static string UnknownProperty { get; }
    internal static string UnrecognizedControl { get; }
    internal static string UnrecognizedEscape { get; }
    internal static string UnrecognizedGrouping { get; }
    internal static string UnterminatedBracket { get; }
    internal static string UnterminatedComment { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_AlternationCantCapture();
    internal static string get_AlternationCantHaveComment();
    internal static string get_BadClassInCharRange();
    internal static string get_BeginIndexNotNegative();
    internal static string get_CaptureGroupOutOfRange();
    internal static string get_CapnumNotZero();
    internal static string get_CountTooSmall();
    internal static string get_EnumNotStarted();
    internal static string get_IllegalCondition();
    internal static string get_IllegalEndEscape();
    internal static string get_IllegalRange();
    internal static string get_IncompleteSlashP();
    internal static string get_InternalError();
    internal static string get_InvalidGroupName();
    internal static string get_LengthNotNegative();
    internal static string get_MalformedNameRef();
    internal static string get_MalformedReference();
    internal static string get_MalformedSlashP();
    internal static string get_MakeException();
    internal static string get_MissingControl();
    internal static string get_NestedQuantify();
    internal static string get_NoResultOnFailed();
    internal static string get_NotEnoughParens();
    internal static string get_OnlyAllowedOnce();
    internal static string get_QuantifyAfterNothing();
    internal static string get_RegexMatchTimeoutException_Occurred();
    internal static string get_ReplacementError();
    internal static string get_ReversedCharRange();
    internal static string get_SubtractionMustBeLast();
    internal static string get_TooFewHex();
    internal static string get_TooManyAlternates();
    internal static string get_TooManyParens();
    internal static string get_UndefinedBackref();
    internal static string get_UndefinedNameRef();
    internal static string get_UndefinedReference();
    internal static string get_UnexpectedOpcode();
    internal static string get_UnimplementedState();
    internal static string get_UnknownProperty();
    internal static string get_UnrecognizedControl();
    internal static string get_UnrecognizedEscape();
    internal static string get_UnrecognizedGrouping();
    internal static string get_UnterminatedBracket();
    internal static string get_UnterminatedComment();
    internal static Type get_ResourceType();
}
internal class System.Text.RegularExpressions.CachedCodeEntry : object {
    internal CachedCodeEntryKey _key;
    internal RegexCode _code;
    internal Dictionary`2<int, int> _caps;
    internal Dictionary`2<string, int> _capnames;
    internal String[] _capslist;
    internal int _capsize;
    internal ExclusiveReference _runnerref;
    internal SharedReference _replref;
    internal CachedCodeEntry(CachedCodeEntryKey key, Dictionary`2<string, int> capnames, String[] capslist, RegexCode code, Dictionary`2<int, int> caps, int capsize, ExclusiveReference runner, SharedReference repl);
}
internal class System.Text.RegularExpressions.CachedCodeEntryKey : ValueType {
    private RegexOptions _options;
    private string _cultureKey;
    private string _pattern;
    internal CachedCodeEntryKey(RegexOptions options, string cultureKey, string pattern);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(CachedCodeEntryKey other);
    public static bool op_Equality(CachedCodeEntryKey left, CachedCodeEntryKey right);
    public static bool op_Inequality(CachedCodeEntryKey left, CachedCodeEntryKey right);
    public virtual int GetHashCode();
}
public class System.Text.RegularExpressions.Capture : object {
    internal string _text;
    internal int _index;
    internal int _length;
    public int Index { get; }
    public int Length { get; }
    public string Value { get; }
    internal Capture(string text, int i, int l);
    public int get_Index();
    public int get_Length();
    public string get_Value();
    public virtual string ToString();
    internal string GetOriginalString();
    internal string GetLeftSubstring();
    internal string GetRightSubstring();
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.CaptureCollection : object {
    private Group _group;
    private int _capcount;
    private Capture[] _captures;
    public int Count { get; }
    public Capture Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal CaptureCollection(Group group);
    public sealed virtual int get_Count();
    public Capture get_Item(int i);
    public sealed virtual IEnumerator GetEnumerator();
    private Capture GetCapture(int i);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
}
internal class System.Text.RegularExpressions.ExclusiveReference : object {
    private RegexRunner _ref;
    private object _obj;
    private int _locked;
    internal object Get();
    internal void Release(object obj);
}
public class System.Text.RegularExpressions.Group : Capture {
    internal static Group _emptygroup;
    internal Int32[] _caps;
    internal int _capcount;
    internal CaptureCollection _capcoll;
    public bool Success { get; }
    public CaptureCollection Captures { get; }
    internal Group(string text, Int32[] caps, int capcount);
    private static Group();
    public bool get_Success();
    public CaptureCollection get_Captures();
    internal static Group Synchronized(Group inner);
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.GroupCollection : object {
    private Match _match;
    private Dictionary`2<int, int> _captureMap;
    private Group[] _groups;
    public int Count { get; }
    public Group Item { get; }
    public Group Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal GroupCollection(Match match, Dictionary`2<int, int> caps);
    public sealed virtual int get_Count();
    public Group get_Item(int groupnum);
    public Group get_Item(string groupname);
    public sealed virtual IEnumerator GetEnumerator();
    private Group GetGroup(int groupnum);
    private Group GetGroupImpl(int groupnum);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
}
public class System.Text.RegularExpressions.Match : Group {
    internal static Match s_empty;
    internal GroupCollection _groupcoll;
    internal Regex _regex;
    internal int _textbeg;
    internal int _textpos;
    internal int _textend;
    internal int _textstart;
    internal Int32[][] _matches;
    internal Int32[] _matchcount;
    internal bool _balancing;
    public static Match Empty { get; }
    public GroupCollection Groups { get; }
    internal Match(Regex regex, int capcount, string text, int begpos, int len, int startpos);
    private static Match();
    public static Match get_Empty();
    internal virtual void Reset(Regex regex, string text, int textbeg, int textend, int textstart);
    public virtual GroupCollection get_Groups();
    public Match NextMatch();
    public virtual string Result(string replacement);
    internal virtual string GroupToStringImpl(int groupnum);
    internal string LastGroupToStringImpl();
    internal static Match Synchronized(Match inner);
    internal virtual void AddMatch(int cap, int start, int len);
    internal virtual void BalanceMatch(int cap);
    internal virtual void RemoveMatch(int cap);
    internal virtual bool IsMatched(int cap);
    internal virtual int MatchIndex(int cap);
    internal virtual int MatchLength(int cap);
    internal virtual void Tidy(int textpos);
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.MatchCollection : object {
    private Regex _regex;
    private List`1<Match> _matches;
    private bool _done;
    private string _input;
    private int _beginning;
    private int _length;
    private int _startat;
    private int _prevlen;
    public int Count { get; }
    public Match Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal MatchCollection(Regex regex, string input, int beginning, int length, int startat);
    public sealed virtual int get_Count();
    public virtual Match get_Item(int i);
    public sealed virtual IEnumerator GetEnumerator();
    private Match GetMatch(int i);
    private void EnsureInitialized();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
}
public class System.Text.RegularExpressions.MatchEvaluator : MulticastDelegate {
    public MatchEvaluator(object object, IntPtr method);
    public virtual string Invoke(Match match);
    public virtual IAsyncResult BeginInvoke(Match match, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
internal class System.Text.RegularExpressions.MatchSparse : Match {
    internal Dictionary`2<int, int> _caps;
    public GroupCollection Groups { get; }
    internal MatchSparse(Regex regex, Dictionary`2<int, int> caps, int capcount, string text, int begpos, int len, int startpos);
    public virtual GroupCollection get_Groups();
}
public class System.Text.RegularExpressions.Regex : object {
    internal string _pattern;
    internal RegexOptions _roptions;
    private static TimeSpan MaximumMatchTimeout;
    public static TimeSpan InfiniteMatchTimeout;
    internal TimeSpan _internalMatchTimeout;
    internal static TimeSpan DefaultMatchTimeout;
    internal Dictionary`2<int, int> _caps;
    internal Dictionary`2<string, int> _capnames;
    internal String[] _capslist;
    internal int _capsize;
    internal ExclusiveReference _runnerref;
    internal SharedReference _replref;
    internal RegexCode _code;
    internal bool _refsInitialized;
    internal static LinkedList`1<CachedCodeEntry> s_livecode;
    internal static int s_cacheSize;
    internal static int MaxOptionShift;
    public static int CacheSize { get; public set; }
    public RegexOptions Options { get; }
    public TimeSpan MatchTimeout { get; }
    public bool RightToLeft { get; }
    public Regex(string pattern);
    public Regex(string pattern, RegexOptions options);
    public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout);
    private Regex(string pattern, RegexOptions options, TimeSpan matchTimeout, bool useCache);
    private static Regex();
    internal static void ValidateMatchTimeout(TimeSpan matchTimeout);
    public static string Escape(string str);
    public static string Unescape(string str);
    public static int get_CacheSize();
    public static void set_CacheSize(int value);
    public RegexOptions get_Options();
    public TimeSpan get_MatchTimeout();
    public bool get_RightToLeft();
    public virtual string ToString();
    public String[] GetGroupNames();
    public Int32[] GetGroupNumbers();
    public string GroupNameFromNumber(int i);
    public int GroupNumberFromName(string name);
    public static bool IsMatch(string input, string pattern);
    public static bool IsMatch(string input, string pattern, RegexOptions options);
    public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public bool IsMatch(string input);
    public bool IsMatch(string input, int startat);
    public static Match Match(string input, string pattern);
    public static Match Match(string input, string pattern, RegexOptions options);
    public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public Match Match(string input);
    public Match Match(string input, int startat);
    public Match Match(string input, int beginning, int length);
    public static MatchCollection Matches(string input, string pattern);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public MatchCollection Matches(string input);
    public MatchCollection Matches(string input, int startat);
    public static string Replace(string input, string pattern, string replacement);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, string replacement);
    public string Replace(string input, string replacement, int count);
    public string Replace(string input, string replacement, int count, int startat);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, MatchEvaluator evaluator);
    public string Replace(string input, MatchEvaluator evaluator, int count);
    public string Replace(string input, MatchEvaluator evaluator, int count, int startat);
    public static String[] Split(string input, string pattern);
    public static String[] Split(string input, string pattern, RegexOptions options);
    public static String[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public String[] Split(string input);
    public String[] Split(string input, int count);
    public String[] Split(string input, int count, int startat);
    internal void InitializeReferences();
    internal Match Run(bool quick, int prevlen, string input, int beginning, int length, int startat);
    private static CachedCodeEntry LookupCachedAndUpdate(CachedCodeEntryKey key);
    private CachedCodeEntry CacheCode(CachedCodeEntryKey key);
    internal bool UseOptionR();
    internal bool UseOptionInvariant();
}
internal class System.Text.RegularExpressions.RegexBoyerMoore : object {
    private Int32[] _positive;
    private Int32[] _negativeASCII;
    private Int32[][] _negativeUnicode;
    private string _pattern;
    private int _lowASCII;
    private int _highASCII;
    private bool _rightToLeft;
    private bool _caseInsensitive;
    private CultureInfo _culture;
    internal RegexBoyerMoore(string pattern, bool caseInsensitive, bool rightToLeft, CultureInfo culture);
    private bool MatchPattern(string text, int index);
    internal bool IsMatch(string text, int index, int beglimit, int endlimit);
    internal int Scan(string text, int index, int beglimit, int endlimit);
    public virtual string ToString();
}
internal class System.Text.RegularExpressions.RegexCharClass : object {
    private List`1<SingleRange> _rangelist;
    private StringBuilder _categories;
    private bool _canonical;
    private bool _negate;
    private RegexCharClass _subtractor;
    private static int FLAGS;
    private static int SETLENGTH;
    private static int CATEGORYLENGTH;
    private static int SETSTART;
    private static string NullCharString;
    private static char NullChar;
    private static char LastChar;
    private static char GroupChar;
    private static short SpaceConst;
    private static short NotSpaceConst;
    private static char ZeroWidthJoiner;
    private static char ZeroWidthNonJoiner;
    private static string s_internalRegexIgnoreCase;
    private static string s_space;
    private static string s_notSpace;
    private static string s_word;
    private static string s_notWord;
    internal static string SpaceClass;
    internal static string NotSpaceClass;
    internal static string WordClass;
    internal static string NotWordClass;
    internal static string DigitClass;
    internal static string NotDigitClass;
    private static string ECMASpaceSet;
    private static string NotECMASpaceSet;
    private static string ECMAWordSet;
    private static string NotECMAWordSet;
    private static string ECMADigitSet;
    private static string NotECMADigitSet;
    internal static string ECMASpaceClass;
    internal static string NotECMASpaceClass;
    internal static string ECMAWordClass;
    internal static string NotECMAWordClass;
    internal static string ECMADigitClass;
    internal static string NotECMADigitClass;
    internal static string AnyClass;
    internal static string EmptyClass;
    private static int DefinedCategoriesCapacity;
    private static Dictionary`2<string, string> s_definedCategories;
    private static String[][] s_propTable;
    private static int LowercaseSet;
    private static int LowercaseAdd;
    private static int LowercaseBor;
    private static int LowercaseBad;
    private static LowerCaseMapping[] s_lcTable;
    internal bool CanMerge { get; }
    unknown bool Negate {internal set; }
    private RegexCharClass(bool negate, List`1<SingleRange> ranges, StringBuilder categories, RegexCharClass subtraction);
    private static RegexCharClass();
    internal bool get_CanMerge();
    internal void set_Negate(bool value);
    internal void AddChar(char c);
    internal void AddCharClass(RegexCharClass cc);
    private void AddSet(string set);
    internal void AddSubtraction(RegexCharClass sub);
    internal void AddRange(char first, char last);
    internal void AddCategoryFromName(string categoryName, bool invert, bool caseInsensitive, string pattern);
    private void AddCategory(string category);
    internal void AddLowercase(CultureInfo culture);
    private void AddLowercaseRange(char chMin, char chMax, CultureInfo culture);
    internal void AddWord(bool ecma, bool negate);
    internal void AddSpace(bool ecma, bool negate);
    internal void AddDigit(bool ecma, bool negate, string pattern);
    internal static string ConvertOldStringsToClass(string set, string category);
    internal static char SingletonChar(string set);
    internal static bool IsMergeable(string charClass);
    internal static bool IsEmpty(string charClass);
    internal static bool IsSingleton(string set);
    internal static bool IsSingletonInverse(string set);
    private static bool IsSubtraction(string charClass);
    internal static bool IsNegated(string set);
    internal static bool IsECMAWordChar(char ch);
    internal static bool IsWordChar(char ch);
    internal static bool CharInClass(char ch, string set);
    internal static bool CharInClassRecursive(char ch, string set, int start);
    private static bool CharInClassInternal(char ch, string set, int start, int mySetLength, int myCategoryLength);
    private static bool CharInCategory(char ch, string set, int start, int mySetLength, int myCategoryLength);
    private static bool CharInCategoryGroup(char ch, UnicodeCategory chcategory, string category, Int32& i);
    private static string NegateCategory(string category);
    internal static RegexCharClass Parse(string charClass);
    private static RegexCharClass ParseRecursive(string charClass, int start);
    private int RangeCount();
    internal string ToStringClass();
    private SingleRange GetRangeAt(int i);
    private void Canonicalize();
    private static string SetFromProperty(string capname, bool invert, string pattern);
}
internal class System.Text.RegularExpressions.RegexCode : object {
    internal static int Onerep;
    internal static int Notonerep;
    internal static int Setrep;
    internal static int Oneloop;
    internal static int Notoneloop;
    internal static int Setloop;
    internal static int Onelazy;
    internal static int Notonelazy;
    internal static int Setlazy;
    internal static int One;
    internal static int Notone;
    internal static int Set;
    internal static int Multi;
    internal static int Ref;
    internal static int Bol;
    internal static int Eol;
    internal static int Boundary;
    internal static int Nonboundary;
    internal static int Beginning;
    internal static int Start;
    internal static int EndZ;
    internal static int End;
    internal static int Nothing;
    internal static int Lazybranch;
    internal static int Branchmark;
    internal static int Lazybranchmark;
    internal static int Nullcount;
    internal static int Setcount;
    internal static int Branchcount;
    internal static int Lazybranchcount;
    internal static int Nullmark;
    internal static int Setmark;
    internal static int Capturemark;
    internal static int Getmark;
    internal static int Setjump;
    internal static int Backjump;
    internal static int Forejump;
    internal static int Testref;
    internal static int Goto;
    internal static int Prune;
    internal static int Stop;
    internal static int ECMABoundary;
    internal static int NonECMABoundary;
    internal static int Mask;
    internal static int Rtl;
    internal static int Back;
    internal static int Back2;
    internal static int Ci;
    internal Int32[] _codes;
    internal String[] _strings;
    internal int _trackcount;
    internal Dictionary`2<int, int> _caps;
    internal int _capsize;
    internal RegexPrefix _fcPrefix;
    internal RegexBoyerMoore _bmPrefix;
    internal int _anchors;
    internal bool _rightToLeft;
    internal RegexCode(Int32[] codes, List`1<string> stringlist, int trackcount, Dictionary`2<int, int> caps, int capsize, RegexBoyerMoore bmPrefix, RegexPrefix fcPrefix, int anchors, bool rightToLeft);
    internal static bool OpcodeBacktracks(int Op);
}
internal class System.Text.RegularExpressions.RegexFC : object {
    internal RegexCharClass _cc;
    internal bool _nullable;
    internal bool _caseInsensitive;
    internal RegexFC(bool nullable);
    internal RegexFC(char ch, bool not, bool nullable, bool caseInsensitive);
    internal RegexFC(string charClass, bool nullable, bool caseInsensitive);
    internal bool AddFC(RegexFC fc, bool concatenate);
    internal string GetFirstChars(CultureInfo culture);
    internal bool IsCaseInsensitive();
}
internal class System.Text.RegularExpressions.RegexFCD : object {
    private Int32[] _intStack;
    private int _intDepth;
    private RegexFC[] _fcStack;
    private int _fcDepth;
    private bool _skipAllChildren;
    private bool _skipchild;
    private bool _failed;
    private static int BeforeChild;
    private static int AfterChild;
    internal static int Beginning;
    internal static int Bol;
    internal static int Start;
    internal static int Eol;
    internal static int EndZ;
    internal static int End;
    internal static int Boundary;
    internal static int ECMABoundary;
    internal static RegexPrefix FirstChars(RegexTree t);
    internal static RegexPrefix Prefix(RegexTree tree);
    internal static int Anchors(RegexTree tree);
    private static int AnchorFromType(int type);
    private void PushInt(int I);
    private bool IntIsEmpty();
    private int PopInt();
    private void PushFC(RegexFC fc);
    private bool FCIsEmpty();
    private RegexFC PopFC();
    private RegexFC TopFC();
    private RegexFC RegexFCFromRegexTree(RegexTree tree);
    private void SkipChild();
    private void CalculateFC(int NodeType, RegexNode node, int CurIndex);
}
internal class System.Text.RegularExpressions.RegexInterpreter : RegexRunner {
    private RegexCode _code;
    private CultureInfo _culture;
    private int _operator;
    private int _codepos;
    private bool _rightToLeft;
    private bool _caseInsensitive;
    internal RegexInterpreter(RegexCode code, CultureInfo culture);
    protected virtual void InitTrackCount();
    private void Advance();
    private void Advance(int i);
    private void Goto(int newpos);
    private void Textto(int newpos);
    private void Trackto(int newpos);
    private int Textstart();
    private int Textpos();
    private int Trackpos();
    private void TrackPush();
    private void TrackPush(int I1);
    private void TrackPush(int I1, int I2);
    private void TrackPush(int I1, int I2, int I3);
    private void TrackPush2(int I1);
    private void TrackPush2(int I1, int I2);
    private void Backtrack();
    private void SetOperator(int op);
    private void TrackPop();
    private void TrackPop(int framesize);
    private int TrackPeek();
    private int TrackPeek(int i);
    private void StackPush(int I1);
    private void StackPush(int I1, int I2);
    private void StackPop();
    private void StackPop(int framesize);
    private int StackPeek();
    private int StackPeek(int i);
    private int Operator();
    private int Operand(int i);
    private int Leftchars();
    private int Rightchars();
    private int Bump();
    private int Forwardchars();
    private char Forwardcharnext();
    private bool Stringmatch(string str);
    private bool Refmatch(int index, int len);
    private void Backwardnext();
    private char CharAt(int j);
    protected virtual bool FindFirstChar();
    protected virtual void Go();
}
public class System.Text.RegularExpressions.RegexMatchTimeoutException : TimeoutException {
    private string _regexInput;
    private string _regexPattern;
    private TimeSpan _matchTimeout;
    public string Pattern { get; }
    public string Input { get; }
    public TimeSpan MatchTimeout { get; }
    public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout);
    public RegexMatchTimeoutException(string message);
    public RegexMatchTimeoutException(string message, Exception inner);
    private void Init();
    private void Init(string input, string pattern, TimeSpan timeout);
    [SecurityCriticalAttribute]
public string get_Pattern();
    [SecurityCriticalAttribute]
public string get_Input();
    [SecurityCriticalAttribute]
public TimeSpan get_MatchTimeout();
}
internal class System.Text.RegularExpressions.RegexNode : object {
    internal static int Oneloop;
    internal static int Notoneloop;
    internal static int Setloop;
    internal static int Onelazy;
    internal static int Notonelazy;
    internal static int Setlazy;
    internal static int One;
    internal static int Notone;
    internal static int Set;
    internal static int Multi;
    internal static int Ref;
    internal static int Bol;
    internal static int Eol;
    internal static int Boundary;
    internal static int Nonboundary;
    internal static int ECMABoundary;
    internal static int NonECMABoundary;
    internal static int Beginning;
    internal static int Start;
    internal static int EndZ;
    internal static int End;
    internal static int Nothing;
    internal static int Empty;
    internal static int Alternate;
    internal static int Concatenate;
    internal static int Loop;
    internal static int Lazyloop;
    internal static int Capture;
    internal static int Group;
    internal static int Require;
    internal static int Prevent;
    internal static int Greedy;
    internal static int Testref;
    internal static int Testgroup;
    internal int _type;
    internal List`1<RegexNode> _children;
    internal string _str;
    internal char _ch;
    internal int _m;
    internal int _n;
    internal RegexOptions _options;
    internal RegexNode _next;
    internal RegexNode(int type, RegexOptions options);
    internal RegexNode(int type, RegexOptions options, char ch);
    internal RegexNode(int type, RegexOptions options, string str);
    internal RegexNode(int type, RegexOptions options, int m);
    internal RegexNode(int type, RegexOptions options, int m, int n);
    internal bool UseOptionR();
    internal RegexNode ReverseLeft();
    internal void MakeRep(int type, int min, int max);
    internal RegexNode Reduce();
    internal RegexNode StripEnation(int emptyType);
    internal RegexNode ReduceGroup();
    internal RegexNode ReduceRep();
    internal RegexNode ReduceSet();
    internal RegexNode ReduceAlternation();
    internal RegexNode ReduceConcatenation();
    internal RegexNode MakeQuantifier(bool lazy, int min, int max);
    internal void AddChild(RegexNode newChild);
    internal RegexNode Child(int i);
    internal int ChildCount();
    internal int Type();
}
[FlagsAttribute]
public enum System.Text.RegularExpressions.RegexOptions : Enum {
    public int value__;
    public static RegexOptions None;
    public static RegexOptions IgnoreCase;
    public static RegexOptions Multiline;
    public static RegexOptions ExplicitCapture;
    public static RegexOptions Compiled;
    public static RegexOptions Singleline;
    public static RegexOptions IgnorePatternWhitespace;
    public static RegexOptions RightToLeft;
    public static RegexOptions ECMAScript;
    public static RegexOptions CultureInvariant;
}
internal class System.Text.RegularExpressions.RegexParser : object {
    internal RegexNode _stack;
    internal RegexNode _group;
    internal RegexNode _alternation;
    internal RegexNode _concatenation;
    internal RegexNode _unit;
    internal string _pattern;
    internal int _currentPos;
    internal CultureInfo _culture;
    internal int _autocap;
    internal int _capcount;
    internal int _captop;
    internal int _capsize;
    internal Dictionary`2<int, int> _caps;
    internal Dictionary`2<string, int> _capnames;
    internal Int32[] _capnumlist;
    internal List`1<string> _capnamelist;
    internal RegexOptions _options;
    internal List`1<RegexOptions> _optionsStack;
    internal bool _ignoreNextParen;
    internal static int MaxValueDiv10;
    internal static int MaxValueMod10;
    internal static byte Q;
    internal static byte S;
    internal static byte Z;
    internal static byte X;
    internal static byte E;
    internal static Byte[] _category;
    private RegexParser(CultureInfo culture);
    private static RegexParser();
    internal static RegexTree Parse(string re, RegexOptions op);
    internal static RegexReplacement ParseReplacement(string rep, Dictionary`2<int, int> caps, int capsize, Dictionary`2<string, int> capnames, RegexOptions op);
    internal static string Escape(string input);
    internal static string Unescape(string input);
    internal void SetPattern(string Re);
    internal void Reset(RegexOptions topopts);
    internal RegexNode ScanRegex();
    internal RegexNode ScanReplacement();
    internal RegexCharClass ScanCharClass(bool caseInsensitive);
    internal RegexCharClass ScanCharClass(bool caseInsensitive, bool scanOnly);
    internal RegexNode ScanGroupOpen();
    internal void ScanBlank();
    internal RegexNode ScanBackslash();
    internal RegexNode ScanBasicBackslash();
    internal RegexNode ScanDollar();
    internal string ScanCapname();
    internal char ScanOctal();
    internal int ScanDecimal();
    internal char ScanHex(int c);
    internal static int HexDigit(char ch);
    internal char ScanControl();
    internal bool IsOnlyTopOption(RegexOptions option);
    internal void ScanOptions();
    internal char ScanCharEscape();
    internal string ParseProperty();
    internal int TypeFromCode(char ch);
    internal static RegexOptions OptionFromCode(char ch);
    internal void CountCaptures();
    internal void NoteCaptureSlot(int i, int pos);
    internal void NoteCaptureName(string name, int pos);
    internal void NoteCaptures(Dictionary`2<int, int> caps, int capsize, Dictionary`2<string, int> capnames);
    internal void AssignNameSlots();
    internal int CaptureSlotFromName(string capname);
    internal bool IsCaptureSlot(int i);
    internal bool IsCaptureName(string capname);
    internal bool UseOptionN();
    internal bool UseOptionI();
    internal bool UseOptionM();
    internal bool UseOptionS();
    internal bool UseOptionX();
    internal bool UseOptionE();
    internal static bool IsSpecial(char ch);
    internal static bool IsStopperX(char ch);
    internal static bool IsQuantifier(char ch);
    internal bool IsTrueQuantifier();
    internal static bool IsSpace(char ch);
    internal static bool IsMetachar(char ch);
    internal void AddConcatenate(int pos, int cch, bool isReplacement);
    internal void PushGroup();
    internal void PopGroup();
    internal bool EmptyStack();
    internal void StartGroup(RegexNode openGroup);
    internal void AddAlternate();
    internal void AddConcatenate();
    internal void AddConcatenate(bool lazy, int min, int max);
    internal RegexNode Unit();
    internal void AddUnitOne(char ch);
    internal void AddUnitNotone(char ch);
    internal void AddUnitSet(string cc);
    internal void AddUnitNode(RegexNode node);
    internal void AddUnitType(int type);
    internal void AddGroup();
    internal void PushOptions();
    internal void PopOptions();
    internal bool EmptyOptionsStack();
    internal void PopKeepOptions();
    internal ArgumentException MakeException(string message);
    internal int Textpos();
    internal void Textto(int pos);
    internal char MoveRightGetChar();
    internal void MoveRight();
    internal void MoveRight(int i);
    internal void MoveLeft();
    internal char CharAt(int i);
    internal char RightChar();
    internal char RightChar(int i);
    internal int CharsRight();
}
internal class System.Text.RegularExpressions.RegexPrefix : object {
    internal string _prefix;
    internal bool _caseInsensitive;
    internal static RegexPrefix _empty;
    internal string Prefix { get; }
    internal bool CaseInsensitive { get; }
    internal static RegexPrefix Empty { get; }
    internal RegexPrefix(string prefix, bool ci);
    private static RegexPrefix();
    internal string get_Prefix();
    internal bool get_CaseInsensitive();
    internal static RegexPrefix get_Empty();
}
internal class System.Text.RegularExpressions.RegexReplacement : object {
    internal static int Specials;
    internal static int LeftPortion;
    internal static int RightPortion;
    internal static int LastGroup;
    internal static int WholeString;
    private string _rep;
    private List`1<string> _strings;
    private List`1<int> _rules;
    internal string Pattern { get; }
    internal RegexReplacement(string rep, RegexNode concat, Dictionary`2<int, int> _caps);
    private void ReplacementImpl(StringBuilder sb, Match match);
    private void ReplacementImplRTL(List`1<string> al, Match match);
    internal string get_Pattern();
    internal string Replacement(Match match);
    internal string Replace(Regex regex, string input, int count, int startat);
    internal static string Replace(MatchEvaluator evaluator, Regex regex, string input, int count, int startat);
    internal static String[] Split(Regex regex, string input, int count, int startat);
}
internal abstract class System.Text.RegularExpressions.RegexRunner : object {
    protected int _runtextbeg;
    protected int _runtextend;
    protected int _runtextstart;
    protected string _runtext;
    protected int _runtextpos;
    protected Int32[] _runtrack;
    protected int _runtrackpos;
    protected Int32[] _runstack;
    protected int _runstackpos;
    protected Int32[] _runcrawl;
    protected int _runcrawlpos;
    protected int _runtrackcount;
    protected Match _runmatch;
    protected Regex _runregex;
    private int _timeout;
    private bool _ignoreTimeout;
    private int _timeoutOccursAt;
    private static int TimeoutCheckFrequency;
    private int _timeoutChecksToSkip;
    protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick);
    internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout);
    private void StartTimeoutWatch();
    internal void CheckTimeout();
    private void DoCheckTimeout();
    protected abstract virtual void Go();
    protected abstract virtual bool FindFirstChar();
    protected abstract virtual void InitTrackCount();
    private void InitMatch();
    private Match TidyMatch(bool quick);
    protected void EnsureStorage();
    protected bool IsBoundary(int index, int startpos, int endpos);
    protected bool IsECMABoundary(int index, int startpos, int endpos);
    protected static bool CharInSet(char ch, string set, string category);
    protected static bool CharInClass(char ch, string charClass);
    protected void DoubleTrack();
    protected void DoubleStack();
    protected void DoubleCrawl();
    protected void Crawl(int i);
    protected int Popcrawl();
    protected int Crawlpos();
    protected void Capture(int capnum, int start, int end);
    protected void TransferCapture(int capnum, int uncapnum, int start, int end);
    protected void Uncapture();
    protected bool IsMatched(int cap);
    protected int MatchIndex(int cap);
    protected int MatchLength(int cap);
}
internal class System.Text.RegularExpressions.RegexTree : object {
    internal RegexNode _root;
    internal Dictionary`2<int, int> _caps;
    internal Int32[] _capnumlist;
    internal Dictionary`2<string, int> _capnames;
    internal String[] _capslist;
    internal RegexOptions _options;
    internal int _captop;
    internal RegexTree(RegexNode root, Dictionary`2<int, int> caps, Int32[] capnumlist, int captop, Dictionary`2<string, int> capnames, String[] capslist, RegexOptions opts);
}
internal class System.Text.RegularExpressions.RegexWriter : object {
    private Int32[] _intStack;
    private int _depth;
    private Int32[] _emitted;
    private int _curpos;
    private Dictionary`2<string, int> _stringhash;
    private List`1<string> _stringtable;
    private bool _counting;
    private int _count;
    private int _trackcount;
    private Dictionary`2<int, int> _caps;
    private static int BeforeChild;
    private static int AfterChild;
    internal static RegexCode Write(RegexTree t);
    private void PushInt(int i);
    private bool EmptyStack();
    private int PopInt();
    private int CurPos();
    private void PatchJump(int offset, int jumpDest);
    private void Emit(int op);
    private void Emit(int op, int opd1);
    private void Emit(int op, int opd1, int opd2);
    private int StringCode(string str);
    private int MapCapnum(int capnum);
    private RegexCode RegexCodeFromRegexTree(RegexTree tree);
    private void EmitFragment(int nodetype, RegexNode node, int curIndex);
}
internal class System.Text.RegularExpressions.SharedReference : object {
    private WeakReference _ref;
    private int _locked;
    internal object Get();
    internal void Cache(object obj);
}
