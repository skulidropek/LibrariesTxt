public class System.Text.RegularExpressions.Capture : object {
    public int Index { get; }
    public int Length { get; }
    public string Value { get; }
    public int get_Index();
    public int get_Length();
    public string get_Value();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.CaptureCollection : object {
    public int Count { get; }
    public Capture Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public Capture get_Item(int i);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
}
public class System.Text.RegularExpressions.Group : Capture {
    public CaptureCollection Captures { get; }
    public bool Success { get; }
    public CaptureCollection get_Captures();
    public bool get_Success();
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.GroupCollection : object {
    public int Count { get; }
    public Group Item { get; }
    public Group Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public Group get_Item(int groupnum);
    public Group get_Item(string groupname);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
}
public class System.Text.RegularExpressions.Match : Group {
    public static Match Empty { get; }
    public GroupCollection Groups { get; }
    public static Match get_Empty();
    public virtual GroupCollection get_Groups();
    public Match NextMatch();
    public virtual string Result(string replacement);
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.MatchCollection : object {
    public int Count { get; }
    public Match Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public virtual Match get_Item(int i);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
}
public class System.Text.RegularExpressions.MatchEvaluator : MulticastDelegate {
    public MatchEvaluator(object object, IntPtr method);
    public virtual string Invoke(Match match);
    public virtual IAsyncResult BeginInvoke(Match match, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class System.Text.RegularExpressions.Regex : object {
    public static TimeSpan InfiniteMatchTimeout;
    public TimeSpan MatchTimeout { get; }
    public RegexOptions Options { get; }
    public bool RightToLeft { get; }
    public Regex(string pattern);
    public Regex(string pattern, RegexOptions options);
    public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout);
    public TimeSpan get_MatchTimeout();
    public RegexOptions get_Options();
    public bool get_RightToLeft();
    public static string Escape(string str);
    public String[] GetGroupNames();
    public Int32[] GetGroupNumbers();
    public string GroupNameFromNumber(int i);
    public int GroupNumberFromName(string name);
    public bool IsMatch(string input);
    public bool IsMatch(string input, int startat);
    public static bool IsMatch(string input, string pattern);
    public static bool IsMatch(string input, string pattern, RegexOptions options);
    public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public Match Match(string input);
    public Match Match(string input, int startat);
    public Match Match(string input, int beginning, int length);
    public static Match Match(string input, string pattern);
    public static Match Match(string input, string pattern, RegexOptions options);
    public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public MatchCollection Matches(string input);
    public MatchCollection Matches(string input, int startat);
    public static MatchCollection Matches(string input, string pattern);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, string replacement);
    public string Replace(string input, string replacement, int count);
    public string Replace(string input, string replacement, int count, int startat);
    public static string Replace(string input, string pattern, string replacement);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, MatchEvaluator evaluator);
    public string Replace(string input, MatchEvaluator evaluator, int count);
    public string Replace(string input, MatchEvaluator evaluator, int count, int startat);
    public String[] Split(string input);
    public String[] Split(string input, int count);
    public String[] Split(string input, int count, int startat);
    public static String[] Split(string input, string pattern);
    public static String[] Split(string input, string pattern, RegexOptions options);
    public static String[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public virtual string ToString();
    public static string Unescape(string str);
}
public class System.Text.RegularExpressions.RegexMatchTimeoutException : TimeoutException {
    public string Input { get; }
    public TimeSpan MatchTimeout { get; }
    public string Pattern { get; }
    public RegexMatchTimeoutException(string message);
    public RegexMatchTimeoutException(string message, Exception inner);
    public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout);
    public string get_Input();
    public TimeSpan get_MatchTimeout();
    public string get_Pattern();
}
[FlagsAttribute]
public enum System.Text.RegularExpressions.RegexOptions : Enum {
    public int value__;
    public static RegexOptions CultureInvariant;
    public static RegexOptions ECMAScript;
    public static RegexOptions ExplicitCapture;
    public static RegexOptions IgnoreCase;
    public static RegexOptions IgnorePatternWhitespace;
    public static RegexOptions Multiline;
    public static RegexOptions None;
    public static RegexOptions RightToLeft;
    public static RegexOptions Singleline;
}
