[CLSCompliantAttribute("False")]
[SecurityCriticalAttribute]
public class System.Threading.IOCompletionCallback : MulticastDelegate {
    public IOCompletionCallback(object object, IntPtr method);
    public virtual void Invoke(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP);
    public virtual IAsyncResult BeginInvoke(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.NativeOverlapped : ValueType {
    public IntPtr EventHandle;
    public IntPtr InternalHigh;
    public IntPtr InternalLow;
    public int OffsetHigh;
    public int OffsetLow;
}
public class System.Threading.PreAllocatedOverlapped : object {
    [CLSCompliantAttribute("False")]
public PreAllocatedOverlapped(IOCompletionCallback callback, object state, object pinData);
    public sealed virtual void Dispose();
}
public class System.Threading.ThreadPoolBoundHandle : object {
    public SafeHandle Handle { get; }
    public SafeHandle get_Handle();
    [CLSCompliantAttribute("False")]
public NativeOverlapped* AllocateNativeOverlapped(IOCompletionCallback callback, object state, object pinData);
    [CLSCompliantAttribute("False")]
public NativeOverlapped* AllocateNativeOverlapped(PreAllocatedOverlapped preAllocated);
    public static ThreadPoolBoundHandle BindHandle(SafeHandle handle);
    public sealed virtual void Dispose();
    [CLSCompliantAttribute("False")]
public void FreeNativeOverlapped(NativeOverlapped* overlapped);
    [CLSCompliantAttribute("False")]
public static object GetNativeOverlappedState(NativeOverlapped* overlapped);
}
