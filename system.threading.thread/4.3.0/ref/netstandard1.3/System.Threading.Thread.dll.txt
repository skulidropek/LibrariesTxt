[ComVisibleAttribute("False")]
public class System.Threading.ParameterizedThreadStart : MulticastDelegate {
    public ParameterizedThreadStart(object object, IntPtr method);
    public virtual void Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Threading.Thread : object {
    public static Thread CurrentThread { get; }
    public bool IsAlive { get; }
    public bool IsBackground { get; public set; }
    public int ManagedThreadId { get; }
    public string Name { get; public set; }
    public ThreadState ThreadState { get; }
    public Thread(ParameterizedThreadStart start);
    public Thread(ThreadStart start);
    public static Thread get_CurrentThread();
    public bool get_IsAlive();
    public bool get_IsBackground();
    public void set_IsBackground(bool value);
    public int get_ManagedThreadId();
    public string get_Name();
    public void set_Name(string value);
    public ThreadState get_ThreadState();
    public void Join();
    public bool Join(int millisecondsTimeout);
    public static void Sleep(int millisecondsTimeout);
    public static void Sleep(TimeSpan timeout);
    public void Start();
    public void Start(object parameter);
}
[ComVisibleAttribute("True")]
public class System.Threading.ThreadStart : MulticastDelegate {
    public ThreadStart(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.ThreadStartException : Exception {
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
public enum System.Threading.ThreadState : Enum {
    public int value__;
    public static ThreadState Aborted;
    public static ThreadState AbortRequested;
    public static ThreadState Background;
    public static ThreadState Running;
    public static ThreadState Stopped;
    public static ThreadState StopRequested;
    public static ThreadState Suspended;
    public static ThreadState SuspendRequested;
    public static ThreadState Unstarted;
    public static ThreadState WaitSleepJoin;
}
[ComVisibleAttribute("True")]
public class System.Threading.ThreadStateException : Exception {
    public ThreadStateException(string message);
    public ThreadStateException(string message, Exception innerException);
}
