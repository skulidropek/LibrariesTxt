internal static class FxResources.System.Threading.SR : object {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string CountdownEvent_Increment_AlreadyZero { get; }
    internal static string CountdownEvent_Increment_AlreadyMax { get; }
    internal static string CountdownEvent_Decrement_BelowZero { get; }
    internal static string Common_OperationCanceled { get; }
    internal static string Barrier_Dispose { get; }
    internal static string Barrier_SignalAndWait_InvalidOperation_ZeroTotal { get; }
    internal static string Barrier_SignalAndWait_ArgumentOutOfRange { get; }
    internal static string Barrier_RemoveParticipants_InvalidOperation { get; }
    internal static string Barrier_RemoveParticipants_ArgumentOutOfRange { get; }
    internal static string Barrier_RemoveParticipants_NonPositive_ArgumentOutOfRange { get; }
    internal static string Barrier_InvalidOperation_CalledFromPHA { get; }
    internal static string Barrier_AddParticipants_NonPositive_ArgumentOutOfRange { get; }
    internal static string Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded { get; }
    internal static string BarrierPostPhaseException { get; }
    internal static string Barrier_ctor_ArgumentOutOfRange { get; }
    internal static string Barrier_AddParticipants_Overflow_ArgumentOutOfRange { get; }
    internal static string SynchronizationLockException_IncorrectDispose { get; }
    internal static string SynchronizationLockException_MisMatchedWrite { get; }
    internal static string LockRecursionException_UpgradeAfterReadNotAllowed { get; }
    internal static string LockRecursionException_UpgradeAfterWriteNotAllowed { get; }
    internal static string SynchronizationLockException_MisMatchedUpgrade { get; }
    internal static string SynchronizationLockException_MisMatchedRead { get; }
    internal static string LockRecursionException_WriteAfterReadNotAllowed { get; }
    internal static string LockRecursionException_RecursiveWriteNotAllowed { get; }
    internal static string LockRecursionException_ReadAfterWriteNotAllowed { get; }
    internal static string LockRecursionException_RecursiveUpgradeNotAllowed { get; }
    internal static string LockRecursionException_RecursiveReadNotAllowed { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_CountdownEvent_Increment_AlreadyZero();
    internal static string get_CountdownEvent_Increment_AlreadyMax();
    internal static string get_CountdownEvent_Decrement_BelowZero();
    internal static string get_Common_OperationCanceled();
    internal static string get_Barrier_Dispose();
    internal static string get_Barrier_SignalAndWait_InvalidOperation_ZeroTotal();
    internal static string get_Barrier_SignalAndWait_ArgumentOutOfRange();
    internal static string get_Barrier_RemoveParticipants_InvalidOperation();
    internal static string get_Barrier_RemoveParticipants_ArgumentOutOfRange();
    internal static string get_Barrier_RemoveParticipants_NonPositive_ArgumentOutOfRange();
    internal static string get_Barrier_InvalidOperation_CalledFromPHA();
    internal static string get_Barrier_AddParticipants_NonPositive_ArgumentOutOfRange();
    internal static string get_Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded();
    internal static string get_BarrierPostPhaseException();
    internal static string get_Barrier_ctor_ArgumentOutOfRange();
    internal static string get_Barrier_AddParticipants_Overflow_ArgumentOutOfRange();
    internal static string get_SynchronizationLockException_IncorrectDispose();
    internal static string get_SynchronizationLockException_MisMatchedWrite();
    internal static string get_LockRecursionException_UpgradeAfterReadNotAllowed();
    internal static string get_LockRecursionException_UpgradeAfterWriteNotAllowed();
    internal static string get_SynchronizationLockException_MisMatchedUpgrade();
    internal static string get_SynchronizationLockException_MisMatchedRead();
    internal static string get_LockRecursionException_WriteAfterReadNotAllowed();
    internal static string get_LockRecursionException_RecursiveWriteNotAllowed();
    internal static string get_LockRecursionException_ReadAfterWriteNotAllowed();
    internal static string get_LockRecursionException_RecursiveUpgradeNotAllowed();
    internal static string get_LockRecursionException_RecursiveReadNotAllowed();
    internal static Type get_ResourceType();
}
[DebuggerDisplayAttribute("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")]
public class System.Threading.Barrier : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _currentTotalCount;
    private static int CURRENT_MASK;
    private static int TOTAL_MASK;
    private static int SENSE_MASK;
    private static int MAX_PARTICIPANTS;
    private long _currentPhase;
    private bool _disposed;
    private ManualResetEventSlim _oddEvent;
    private ManualResetEventSlim _evenEvent;
    private ExecutionContext _ownerThreadContext;
    [SecurityCriticalAttribute]
private static ContextCallback s_invokePostPhaseAction;
    private Action`1<Barrier> _postPhaseAction;
    private Exception _exception;
    private int _actionCallerID;
    public int ParticipantsRemaining { get; }
    public int ParticipantCount { get; }
    public long CurrentPhaseNumber { get; internal set; }
    public Barrier(int participantCount);
    public Barrier(int participantCount, Action`1<Barrier> postPhaseAction);
    public int get_ParticipantsRemaining();
    public int get_ParticipantCount();
    public long get_CurrentPhaseNumber();
    internal void set_CurrentPhaseNumber(long value);
    private void GetCurrentTotal(int currentTotal, Int32& current, Int32& total, Boolean& sense);
    private bool SetCurrentTotal(int currentTotal, int current, int total, bool sense);
    public long AddParticipant();
    public long AddParticipants(int participantCount);
    public void RemoveParticipant();
    public void RemoveParticipants(int participantCount);
    public void SignalAndWait();
    public void SignalAndWait(CancellationToken cancellationToken);
    public bool SignalAndWait(TimeSpan timeout);
    public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken);
    public bool SignalAndWait(int millisecondsTimeout);
    public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken);
    [SecuritySafeCriticalAttribute]
private void FinishPhase(bool observedSense);
    [SecurityCriticalAttribute]
private static void InvokePostPhaseAction(object obj);
    private void SetResetEvents(bool observedSense);
    private void WaitCurrentPhase(ManualResetEventSlim currentPhaseEvent, long observedPhase);
    private bool DiscontinuousWait(ManualResetEventSlim currentPhaseEvent, int totalTimeout, CancellationToken token, long observedPhase);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfDisposed();
}
public class System.Threading.BarrierPostPhaseException : Exception {
    public BarrierPostPhaseException(Exception innerException);
    public BarrierPostPhaseException(string message);
    public BarrierPostPhaseException(string message, Exception innerException);
}
[EventSourceAttribute]
internal class System.Threading.CdsSyncEtwBCLProvider : EventSource {
    public static CdsSyncEtwBCLProvider Log;
    private static EventKeywords ALL_KEYWORDS;
    private static int SPINLOCK_FASTPATHFAILED_ID;
    private static int SPINWAIT_NEXTSPINWILLYIELD_ID;
    private static int BARRIER_PHASEFINISHED_ID;
    private static CdsSyncEtwBCLProvider();
    [EventAttribute("1")]
public void SpinLock_FastPathFailed(int ownerID);
    [EventAttribute("2")]
public void SpinWait_NextSpinWillYield();
    [SecuritySafeCriticalAttribute]
[EventAttribute("3")]
public void Barrier_PhaseFinished(bool currentSense, long phaseNum);
}
[DebuggerDisplayAttribute("Initial Count={InitialCount}, Current Count={CurrentCount}")]
public class System.Threading.CountdownEvent : object {
    private int _initialCount;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _currentCount;
    private ManualResetEventSlim _event;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    public int CurrentCount { get; }
    public int InitialCount { get; }
    public bool IsSet { get; }
    public WaitHandle WaitHandle { get; }
    public CountdownEvent(int initialCount);
    public int get_CurrentCount();
    public int get_InitialCount();
    public bool get_IsSet();
    public WaitHandle get_WaitHandle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool Signal();
    public bool Signal(int signalCount);
    public void AddCount();
    public bool TryAddCount();
    public void AddCount(int signalCount);
    public bool TryAddCount(int signalCount);
    public void Reset();
    public void Reset(int count);
    public void Wait();
    public void Wait(CancellationToken cancellationToken);
    public bool Wait(TimeSpan timeout);
    public bool Wait(TimeSpan timeout, CancellationToken cancellationToken);
    public bool Wait(int millisecondsTimeout);
    public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken);
    private void ThrowIfDisposed();
}
internal static class System.Threading.Helpers : object {
    internal static void Sleep(int milliseconds);
    internal static void Spin(int iterations);
}
public enum System.Threading.LockRecursionPolicy : Enum {
    public int value__;
    public static LockRecursionPolicy NoRecursion;
    public static LockRecursionPolicy SupportsRecursion;
}
internal class System.Threading.ReaderWriterCount : object {
    public long lockID;
    public int readercount;
    public int writercount;
    public int upgradecount;
    public ReaderWriterCount next;
}
public class System.Threading.ReaderWriterLockSlim : object {
    private bool _fIsReentrant;
    private int _myLock;
    private static int LockSpinCycles;
    private static int LockSpinCount;
    private static int LockSleep0Count;
    private UInt32 _numWriteWaiters;
    private UInt32 _numReadWaiters;
    private UInt32 _numWriteUpgradeWaiters;
    private UInt32 _numUpgradeWaiters;
    private bool _fNoWaiters;
    private int _upgradeLockOwnerId;
    private int _writeLockOwnerId;
    private EventWaitHandle _writeEvent;
    private EventWaitHandle _readEvent;
    private EventWaitHandle _upgradeEvent;
    private EventWaitHandle _waitUpgradeEvent;
    private static long s_nextLockID;
    private long _lockID;
    [ThreadStaticAttribute]
private static ReaderWriterCount t_rwc;
    private bool _fUpgradeThreadHoldingRead;
    private static int MaxSpinCount;
    private UInt32 _owners;
    private static UInt32 WRITER_HELD;
    private static UInt32 WAITING_WRITERS;
    private static UInt32 WAITING_UPGRADER;
    private static UInt32 MAX_READER;
    private static UInt32 READER_MASK;
    private bool _fDisposed;
    public bool IsReadLockHeld { get; }
    public bool IsUpgradeableReadLockHeld { get; }
    public bool IsWriteLockHeld { get; }
    public LockRecursionPolicy RecursionPolicy { get; }
    public int CurrentReadCount { get; }
    public int RecursiveReadCount { get; }
    public int RecursiveUpgradeCount { get; }
    public int RecursiveWriteCount { get; }
    public int WaitingReadCount { get; }
    public int WaitingUpgradeCount { get; }
    public int WaitingWriteCount { get; }
    public ReaderWriterLockSlim(LockRecursionPolicy recursionPolicy);
    private void InitializeThreadCounts();
    private static bool IsRWEntryEmpty(ReaderWriterCount rwc);
    private bool IsRwHashEntryChanged(ReaderWriterCount lrwc);
    private ReaderWriterCount GetThreadRWCount(bool dontAllocate);
    public void EnterReadLock();
    public bool TryEnterReadLock(TimeSpan timeout);
    public bool TryEnterReadLock(int millisecondsTimeout);
    private bool TryEnterReadLock(TimeoutTracker timeout);
    private bool TryEnterReadLockCore(TimeoutTracker timeout);
    public void EnterWriteLock();
    public bool TryEnterWriteLock(TimeSpan timeout);
    public bool TryEnterWriteLock(int millisecondsTimeout);
    private bool TryEnterWriteLock(TimeoutTracker timeout);
    private bool TryEnterWriteLockCore(TimeoutTracker timeout);
    public void EnterUpgradeableReadLock();
    public bool TryEnterUpgradeableReadLock(TimeSpan timeout);
    public bool TryEnterUpgradeableReadLock(int millisecondsTimeout);
    private bool TryEnterUpgradeableReadLock(TimeoutTracker timeout);
    private bool TryEnterUpgradeableReadLockCore(TimeoutTracker timeout);
    public void ExitReadLock();
    public void ExitWriteLock();
    public void ExitUpgradeableReadLock();
    private void LazyCreateEvent(EventWaitHandle& waitEvent, bool makeAutoResetEvent);
    private bool WaitOnEvent(EventWaitHandle waitEvent, UInt32& numWaiters, TimeoutTracker timeout, bool isWriteWaiter);
    private void ExitAndWakeUpAppropriateWaiters();
    private void ExitAndWakeUpAppropriateWaitersPreferringWriters();
    private void ExitAndWakeUpAppropriateReadWaiters();
    private bool IsWriterAcquired();
    private void SetWriterAcquired();
    private void ClearWriterAcquired();
    private void SetWritersWaiting();
    private void ClearWritersWaiting();
    private void SetUpgraderWaiting();
    private void ClearUpgraderWaiting();
    private UInt32 GetNumReaders();
    private void EnterMyLock();
    private void EnterMyLockSpin();
    private void ExitMyLock();
    private static void SpinWait(int SpinCount);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    public bool get_IsReadLockHeld();
    public bool get_IsUpgradeableReadLockHeld();
    public bool get_IsWriteLockHeld();
    public LockRecursionPolicy get_RecursionPolicy();
    public int get_CurrentReadCount();
    public int get_RecursiveReadCount();
    public int get_RecursiveUpgradeCount();
    public int get_RecursiveWriteCount();
    public int get_WaitingReadCount();
    public int get_WaitingUpgradeCount();
    public int get_WaitingWriteCount();
}
