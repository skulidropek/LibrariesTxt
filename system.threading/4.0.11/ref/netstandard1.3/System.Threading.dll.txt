public class System.Threading.AbandonedMutexException : Exception {
    public Mutex Mutex { get; }
    public int MutexIndex { get; }
    public AbandonedMutexException(int location, WaitHandle handle);
    public AbandonedMutexException(string message);
    public AbandonedMutexException(string message, Exception inner);
    public AbandonedMutexException(string message, Exception inner, int location, WaitHandle handle);
    public AbandonedMutexException(string message, int location, WaitHandle handle);
    public Mutex get_Mutex();
    public int get_MutexIndex();
}
public class System.Threading.AsyncLocal`1 : object {
    public T Value { get; public set; }
    [SecurityCriticalAttribute]
public AsyncLocal`1(Action`1<AsyncLocalValueChangedArgs`1<T>> valueChangedHandler);
    public T get_Value();
    public void set_Value(T value);
}
public class System.Threading.AsyncLocalValueChangedArgs`1 : ValueType {
    public T CurrentValue { get; }
    public T PreviousValue { get; }
    public bool ThreadContextChanged { get; }
    public T get_CurrentValue();
    public T get_PreviousValue();
    public bool get_ThreadContextChanged();
}
public class System.Threading.AutoResetEvent : EventWaitHandle {
    public AutoResetEvent(bool initialState);
}
public class System.Threading.Barrier : object {
    public long CurrentPhaseNumber { get; }
    public int ParticipantCount { get; }
    public int ParticipantsRemaining { get; }
    public Barrier(int participantCount);
    public Barrier(int participantCount, Action`1<Barrier> postPhaseAction);
    public long get_CurrentPhaseNumber();
    public int get_ParticipantCount();
    public int get_ParticipantsRemaining();
    public long AddParticipant();
    public long AddParticipants(int participantCount);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void RemoveParticipant();
    public void RemoveParticipants(int participantCount);
    public void SignalAndWait();
    public bool SignalAndWait(int millisecondsTimeout);
    public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken);
    public void SignalAndWait(CancellationToken cancellationToken);
    public bool SignalAndWait(TimeSpan timeout);
    public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken);
}
public class System.Threading.BarrierPostPhaseException : Exception {
    public BarrierPostPhaseException(Exception innerException);
    public BarrierPostPhaseException(string message);
    public BarrierPostPhaseException(string message, Exception innerException);
}
public class System.Threading.ContextCallback : MulticastDelegate {
    public ContextCallback(object object, IntPtr method);
    public virtual void Invoke(object state);
    public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.CountdownEvent : object {
    public int CurrentCount { get; }
    public int InitialCount { get; }
    public bool IsSet { get; }
    public WaitHandle WaitHandle { get; }
    public CountdownEvent(int initialCount);
    public int get_CurrentCount();
    public int get_InitialCount();
    public bool get_IsSet();
    public WaitHandle get_WaitHandle();
    public void AddCount();
    public void AddCount(int signalCount);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Reset();
    public void Reset(int count);
    public bool Signal();
    public bool Signal(int signalCount);
    public bool TryAddCount();
    public bool TryAddCount(int signalCount);
    public void Wait();
    public bool Wait(int millisecondsTimeout);
    public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken);
    public void Wait(CancellationToken cancellationToken);
    public bool Wait(TimeSpan timeout);
    public bool Wait(TimeSpan timeout, CancellationToken cancellationToken);
}
public enum System.Threading.EventResetMode : Enum {
    public int value__;
    public static EventResetMode AutoReset;
    public static EventResetMode ManualReset;
}
public class System.Threading.EventWaitHandle : WaitHandle {
    public EventWaitHandle(bool initialState, EventResetMode mode);
    [SecurityCriticalAttribute]
public EventWaitHandle(bool initialState, EventResetMode mode, string name);
    [SecurityCriticalAttribute]
public EventWaitHandle(bool initialState, EventResetMode mode, string name, Boolean& createdNew);
    [SecurityCriticalAttribute]
public static EventWaitHandle OpenExisting(string name);
    public bool Reset();
    public bool Set();
    [SecurityCriticalAttribute]
public static bool TryOpenExisting(string name, EventWaitHandle& result);
}
public class System.Threading.ExecutionContext : object {
    public static ExecutionContext Capture();
    [SecurityCriticalAttribute]
public static void Run(ExecutionContext executionContext, ContextCallback callback, object state);
}
public static class System.Threading.Interlocked : object {
    public static int Add(Int32& location1, int value);
    public static long Add(Int64& location1, long value);
    public static double CompareExchange(Double& location1, double value, double comparand);
    public static int CompareExchange(Int32& location1, int value, int comparand);
    public static long CompareExchange(Int64& location1, long value, long comparand);
    public static IntPtr CompareExchange(IntPtr& location1, IntPtr value, IntPtr comparand);
    public static object CompareExchange(Object& location1, object value, object comparand);
    public static float CompareExchange(Single& location1, float value, float comparand);
    public static T CompareExchange(T& location1, T value, T comparand);
    public static int Decrement(Int32& location);
    public static long Decrement(Int64& location);
    public static double Exchange(Double& location1, double value);
    public static int Exchange(Int32& location1, int value);
    public static long Exchange(Int64& location1, long value);
    public static IntPtr Exchange(IntPtr& location1, IntPtr value);
    public static object Exchange(Object& location1, object value);
    public static float Exchange(Single& location1, float value);
    public static T Exchange(T& location1, T value);
    public static int Increment(Int32& location);
    public static long Increment(Int64& location);
    public static void MemoryBarrier();
    public static long Read(Int64& location);
}
public static class System.Threading.LazyInitializer : object {
    public static T EnsureInitialized(T& target);
    public static T EnsureInitialized(T& target, Boolean& initialized, Object& syncLock);
    public static T EnsureInitialized(T& target, Boolean& initialized, Object& syncLock, Func`1<T> valueFactory);
    public static T EnsureInitialized(T& target, Func`1<T> valueFactory);
}
public class System.Threading.LockRecursionException : Exception {
    public LockRecursionException(string message);
    public LockRecursionException(string message, Exception innerException);
}
public enum System.Threading.LockRecursionPolicy : Enum {
    public int value__;
    public static LockRecursionPolicy NoRecursion;
    public static LockRecursionPolicy SupportsRecursion;
}
public class System.Threading.ManualResetEvent : EventWaitHandle {
    public ManualResetEvent(bool initialState);
}
public class System.Threading.ManualResetEventSlim : object {
    public bool IsSet { get; }
    public int SpinCount { get; }
    public WaitHandle WaitHandle { get; }
    public ManualResetEventSlim(bool initialState);
    public ManualResetEventSlim(bool initialState, int spinCount);
    public bool get_IsSet();
    public int get_SpinCount();
    public WaitHandle get_WaitHandle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void Reset();
    public void Set();
    public void Wait();
    public bool Wait(int millisecondsTimeout);
    public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken);
    public void Wait(CancellationToken cancellationToken);
    public bool Wait(TimeSpan timeout);
    public bool Wait(TimeSpan timeout, CancellationToken cancellationToken);
}
public static class System.Threading.Monitor : object {
    public static void Enter(object obj);
    public static void Enter(object obj, Boolean& lockTaken);
    public static void Exit(object obj);
    public static bool IsEntered(object obj);
    public static void Pulse(object obj);
    public static void PulseAll(object obj);
    public static bool TryEnter(object obj);
    public static void TryEnter(object obj, Boolean& lockTaken);
    public static bool TryEnter(object obj, int millisecondsTimeout);
    public static void TryEnter(object obj, int millisecondsTimeout, Boolean& lockTaken);
    public static bool TryEnter(object obj, TimeSpan timeout);
    public static void TryEnter(object obj, TimeSpan timeout, Boolean& lockTaken);
    public static bool Wait(object obj);
    public static bool Wait(object obj, int millisecondsTimeout);
    public static bool Wait(object obj, TimeSpan timeout);
}
public class System.Threading.Mutex : WaitHandle {
    public Mutex(bool initiallyOwned);
    [SecurityCriticalAttribute]
public Mutex(bool initiallyOwned, string name);
    [SecurityCriticalAttribute]
public Mutex(bool initiallyOwned, string name, Boolean& createdNew);
    [SecurityCriticalAttribute]
public static Mutex OpenExisting(string name);
    public void ReleaseMutex();
    [SecurityCriticalAttribute]
public static bool TryOpenExisting(string name, Mutex& result);
}
public class System.Threading.ReaderWriterLockSlim : object {
    public int CurrentReadCount { get; }
    public bool IsReadLockHeld { get; }
    public bool IsUpgradeableReadLockHeld { get; }
    public bool IsWriteLockHeld { get; }
    public LockRecursionPolicy RecursionPolicy { get; }
    public int RecursiveReadCount { get; }
    public int RecursiveUpgradeCount { get; }
    public int RecursiveWriteCount { get; }
    public int WaitingReadCount { get; }
    public int WaitingUpgradeCount { get; }
    public int WaitingWriteCount { get; }
    public ReaderWriterLockSlim(LockRecursionPolicy recursionPolicy);
    public int get_CurrentReadCount();
    public bool get_IsReadLockHeld();
    public bool get_IsUpgradeableReadLockHeld();
    public bool get_IsWriteLockHeld();
    public LockRecursionPolicy get_RecursionPolicy();
    public int get_RecursiveReadCount();
    public int get_RecursiveUpgradeCount();
    public int get_RecursiveWriteCount();
    public int get_WaitingReadCount();
    public int get_WaitingUpgradeCount();
    public int get_WaitingWriteCount();
    public sealed virtual void Dispose();
    public void EnterReadLock();
    public void EnterUpgradeableReadLock();
    public void EnterWriteLock();
    public void ExitReadLock();
    public void ExitUpgradeableReadLock();
    public void ExitWriteLock();
    public bool TryEnterReadLock(int millisecondsTimeout);
    public bool TryEnterReadLock(TimeSpan timeout);
    public bool TryEnterUpgradeableReadLock(int millisecondsTimeout);
    public bool TryEnterUpgradeableReadLock(TimeSpan timeout);
    public bool TryEnterWriteLock(int millisecondsTimeout);
    public bool TryEnterWriteLock(TimeSpan timeout);
}
public class System.Threading.Semaphore : WaitHandle {
    public Semaphore(int initialCount, int maximumCount);
    public Semaphore(int initialCount, int maximumCount, string name);
    public Semaphore(int initialCount, int maximumCount, string name, Boolean& createdNew);
    public static Semaphore OpenExisting(string name);
    public int Release();
    public int Release(int releaseCount);
    public static bool TryOpenExisting(string name, Semaphore& result);
}
public class System.Threading.SemaphoreFullException : Exception {
    public SemaphoreFullException(string message);
    public SemaphoreFullException(string message, Exception innerException);
}
public class System.Threading.SemaphoreSlim : object {
    public WaitHandle AvailableWaitHandle { get; }
    public int CurrentCount { get; }
    public SemaphoreSlim(int initialCount);
    public SemaphoreSlim(int initialCount, int maxCount);
    public WaitHandle get_AvailableWaitHandle();
    public int get_CurrentCount();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public int Release();
    public int Release(int releaseCount);
    public void Wait();
    public bool Wait(int millisecondsTimeout);
    public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken);
    public void Wait(CancellationToken cancellationToken);
    public bool Wait(TimeSpan timeout);
    public bool Wait(TimeSpan timeout, CancellationToken cancellationToken);
    public Task WaitAsync();
    public Task`1<bool> WaitAsync(int millisecondsTimeout);
    public Task`1<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken);
    public Task WaitAsync(CancellationToken cancellationToken);
    public Task`1<bool> WaitAsync(TimeSpan timeout);
    public Task`1<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken);
}
public class System.Threading.SendOrPostCallback : MulticastDelegate {
    public SendOrPostCallback(object object, IntPtr method);
    public virtual void Invoke(object state);
    public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.SpinLock : ValueType {
    public bool IsHeld { get; }
    public bool IsHeldByCurrentThread { get; }
    public bool IsThreadOwnerTrackingEnabled { get; }
    public SpinLock(bool enableThreadOwnerTracking);
    public bool get_IsHeld();
    public bool get_IsHeldByCurrentThread();
    public bool get_IsThreadOwnerTrackingEnabled();
    public void Enter(Boolean& lockTaken);
    public void Exit();
    public void Exit(bool useMemoryBarrier);
    public void TryEnter(Boolean& lockTaken);
    public void TryEnter(int millisecondsTimeout, Boolean& lockTaken);
    public void TryEnter(TimeSpan timeout, Boolean& lockTaken);
}
public class System.Threading.SpinWait : ValueType {
    public int Count { get; }
    public bool NextSpinWillYield { get; }
    public int get_Count();
    public bool get_NextSpinWillYield();
    public void Reset();
    public void SpinOnce();
    public static void SpinUntil(Func`1<bool> condition);
    public static bool SpinUntil(Func`1<bool> condition, int millisecondsTimeout);
    public static bool SpinUntil(Func`1<bool> condition, TimeSpan timeout);
}
public class System.Threading.SynchronizationContext : object {
    public static SynchronizationContext Current { get; }
    public static SynchronizationContext get_Current();
    public virtual SynchronizationContext CreateCopy();
    public virtual void OperationCompleted();
    public virtual void OperationStarted();
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    [SecurityCriticalAttribute]
public static void SetSynchronizationContext(SynchronizationContext syncContext);
}
public class System.Threading.SynchronizationLockException : Exception {
    public SynchronizationLockException(string message);
    public SynchronizationLockException(string message, Exception innerException);
}
public class System.Threading.ThreadLocal`1 : object {
    public bool IsValueCreated { get; }
    public T Value { get; public set; }
    public IList`1<T> Values { get; }
    public ThreadLocal`1(bool trackAllValues);
    public ThreadLocal`1(Func`1<T> valueFactory);
    public ThreadLocal`1(Func`1<T> valueFactory, bool trackAllValues);
    public bool get_IsValueCreated();
    public T get_Value();
    public void set_Value(T value);
    public IList`1<T> get_Values();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public virtual string ToString();
}
public static class System.Threading.Volatile : object {
    public static bool Read(Boolean& location);
    public static byte Read(Byte& location);
    public static double Read(Double& location);
    public static short Read(Int16& location);
    public static int Read(Int32& location);
    public static long Read(Int64& location);
    public static IntPtr Read(IntPtr& location);
    [CLSCompliantAttribute("False")]
public static sbyte Read(SByte& location);
    public static float Read(Single& location);
    [CLSCompliantAttribute("False")]
public static ushort Read(UInt16& location);
    [CLSCompliantAttribute("False")]
public static UInt32 Read(UInt32& location);
    [CLSCompliantAttribute("False")]
public static ulong Read(UInt64& location);
    [CLSCompliantAttribute("False")]
public static UIntPtr Read(UIntPtr& location);
    public static T Read(T& location);
    public static void Write(Boolean& location, bool value);
    public static void Write(Byte& location, byte value);
    public static void Write(Double& location, double value);
    public static void Write(Int16& location, short value);
    public static void Write(Int32& location, int value);
    public static void Write(Int64& location, long value);
    public static void Write(IntPtr& location, IntPtr value);
    [CLSCompliantAttribute("False")]
public static void Write(SByte& location, sbyte value);
    public static void Write(Single& location, float value);
    [CLSCompliantAttribute("False")]
public static void Write(UInt16& location, ushort value);
    [CLSCompliantAttribute("False")]
public static void Write(UInt32& location, UInt32 value);
    [CLSCompliantAttribute("False")]
public static void Write(UInt64& location, ulong value);
    [CLSCompliantAttribute("False")]
public static void Write(UIntPtr& location, UIntPtr value);
    public static void Write(T& location, T value);
}
public class System.Threading.WaitHandleCannotBeOpenedException : Exception {
    public WaitHandleCannotBeOpenedException(string message);
    public WaitHandleCannotBeOpenedException(string message, Exception innerException);
}
