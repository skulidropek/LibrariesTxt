[ToolboxItemAttribute("False")]
public class System.Media.SoundPlayer : Component {
    public bool IsLoadCompleted { get; }
    public int LoadTimeout { get; public set; }
    public string SoundLocation { get; public set; }
    public Stream Stream { get; public set; }
    public object Tag { get; public set; }
    public SoundPlayer(Stream stream);
    protected SoundPlayer(SerializationInfo serializationInfo, StreamingContext context);
    public SoundPlayer(string soundLocation);
    public bool get_IsLoadCompleted();
    public int get_LoadTimeout();
    public void set_LoadTimeout(int value);
    public string get_SoundLocation();
    public void set_SoundLocation(string value);
    public Stream get_Stream();
    public void set_Stream(Stream value);
    public object get_Tag();
    public void set_Tag(object value);
    public void add_LoadCompleted(AsyncCompletedEventHandler value);
    public void remove_LoadCompleted(AsyncCompletedEventHandler value);
    public void add_SoundLocationChanged(EventHandler value);
    public void remove_SoundLocationChanged(EventHandler value);
    public void add_StreamChanged(EventHandler value);
    public void remove_StreamChanged(EventHandler value);
    public void Load();
    public void LoadAsync();
    protected virtual void OnLoadCompleted(AsyncCompletedEventArgs e);
    protected virtual void OnSoundLocationChanged(EventArgs e);
    protected virtual void OnStreamChanged(EventArgs e);
    public void Play();
    public void PlayLooping();
    public void PlaySync();
    public void Stop();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Media.SystemSound : object {
    public void Play();
}
public static class System.Media.SystemSounds : object {
    public static SystemSound Asterisk { get; }
    public static SystemSound Beep { get; }
    public static SystemSound Exclamation { get; }
    public static SystemSound Hand { get; }
    public static SystemSound Question { get; }
    public static SystemSound get_Asterisk();
    public static SystemSound get_Beep();
    public static SystemSound get_Exclamation();
    public static SystemSound get_Hand();
    public static SystemSound get_Question();
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("1023")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformAttribute(string platformName);
}
public class System.Security.Cryptography.X509Certificates.X509Certificate2UI : object {
    public static void DisplayCertificate(X509Certificate2 certificate);
    public static void DisplayCertificate(X509Certificate2 certificate, IntPtr hwndParent);
    public static X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag);
    public static X509Certificate2Collection SelectFromCollection(X509Certificate2Collection certificates, string title, string message, X509SelectionFlag selectionFlag, IntPtr hwndParent);
}
public enum System.Security.Cryptography.X509Certificates.X509SelectionFlag : Enum {
    public int value__;
    public static X509SelectionFlag SingleSelection;
    public static X509SelectionFlag MultiSelection;
}
public class System.Xaml.Permissions.XamlAccessLevel : object {
    public AssemblyName AssemblyAccessToAssemblyName { get; }
    public string PrivateAccessToTypeName { get; }
    public AssemblyName get_AssemblyAccessToAssemblyName();
    public string get_PrivateAccessToTypeName();
    public static XamlAccessLevel AssemblyAccessTo(Assembly assembly);
    public static XamlAccessLevel AssemblyAccessTo(AssemblyName assemblyName);
    public static XamlAccessLevel PrivateAccessTo(string assemblyQualifiedTypeName);
    public static XamlAccessLevel PrivateAccessTo(Type type);
}
