public enum System.Xml.ConformanceLevel : Enum {
    public int value__;
    public static ConformanceLevel Auto;
    public static ConformanceLevel Document;
    public static ConformanceLevel Fragment;
}
public enum System.Xml.DtdProcessing : Enum {
    public int value__;
    public static DtdProcessing Ignore;
    public static DtdProcessing Prohibit;
}
public interface System.Xml.IXmlLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
    public abstract virtual bool HasLineInfo();
}
public interface System.Xml.IXmlNamespaceResolver {
    public abstract virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public abstract virtual string LookupNamespace(string prefix);
    public abstract virtual string LookupPrefix(string namespaceName);
}
[FlagsAttribute]
public enum System.Xml.NamespaceHandling : Enum {
    public int value__;
    public static NamespaceHandling Default;
    public static NamespaceHandling OmitDuplicates;
}
public class System.Xml.NameTable : XmlNameTable {
    public virtual string Add(Char[] key, int start, int len);
    public virtual string Add(string key);
    public virtual string Get(Char[] key, int start, int len);
    public virtual string Get(string value);
}
public enum System.Xml.NewLineHandling : Enum {
    public int value__;
    public static NewLineHandling Entitize;
    public static NewLineHandling None;
    public static NewLineHandling Replace;
}
public enum System.Xml.ReadState : Enum {
    public int value__;
    public static ReadState Closed;
    public static ReadState EndOfFile;
    public static ReadState Error;
    public static ReadState Initial;
    public static ReadState Interactive;
}
[EditorBrowsableAttribute("1")]
public class System.Xml.Schema.XmlSchema : object {
}
public enum System.Xml.Schema.XmlSchemaForm : Enum {
    public int value__;
    public static XmlSchemaForm None;
    public static XmlSchemaForm Qualified;
    public static XmlSchemaForm Unqualified;
}
public interface System.Xml.Serialization.IXmlSerializable {
    [EditorBrowsableAttribute("1")]
public abstract virtual XmlSchema GetSchema();
    public abstract virtual void ReadXml(XmlReader reader);
    public abstract virtual void WriteXml(XmlWriter writer);
}
[AttributeUsageAttribute("1036")]
public class System.Xml.Serialization.XmlSchemaProviderAttribute : Attribute {
    public bool IsAny { get; public set; }
    public string MethodName { get; }
    public XmlSchemaProviderAttribute(string methodName);
    public bool get_IsAny();
    public void set_IsAny(bool value);
    public string get_MethodName();
}
public enum System.Xml.WriteState : Enum {
    public int value__;
    public static WriteState Attribute;
    public static WriteState Closed;
    public static WriteState Content;
    public static WriteState Element;
    public static WriteState Error;
    public static WriteState Prolog;
    public static WriteState Start;
}
public static class System.Xml.XmlConvert : object {
    public static string DecodeName(string name);
    public static string EncodeLocalName(string name);
    public static string EncodeName(string name);
    public static string EncodeNmToken(string name);
    public static bool ToBoolean(string s);
    public static byte ToByte(string s);
    public static char ToChar(string s);
    public static DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption);
    public static DateTimeOffset ToDateTimeOffset(string s);
    public static DateTimeOffset ToDateTimeOffset(string s, string format);
    public static DateTimeOffset ToDateTimeOffset(string s, String[] formats);
    public static decimal ToDecimal(string s);
    public static double ToDouble(string s);
    public static Guid ToGuid(string s);
    public static short ToInt16(string s);
    public static int ToInt32(string s);
    public static long ToInt64(string s);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string s);
    public static float ToSingle(string s);
    public static string ToString(bool value);
    public static string ToString(byte value);
    public static string ToString(char value);
    public static string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, string format);
    public static string ToString(decimal value);
    public static string ToString(double value);
    public static string ToString(Guid value);
    public static string ToString(short value);
    public static string ToString(int value);
    public static string ToString(long value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(float value);
    public static string ToString(TimeSpan value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static TimeSpan ToTimeSpan(string s);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(string s);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(string s);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(string s);
    public static string VerifyName(string name);
    public static string VerifyNCName(string name);
    public static string VerifyNMTOKEN(string name);
    public static string VerifyPublicId(string publicId);
    public static string VerifyWhitespace(string content);
    public static string VerifyXmlChars(string content);
}
public enum System.Xml.XmlDateTimeSerializationMode : Enum {
    public int value__;
    public static XmlDateTimeSerializationMode Local;
    public static XmlDateTimeSerializationMode RoundtripKind;
    public static XmlDateTimeSerializationMode Unspecified;
    public static XmlDateTimeSerializationMode Utc;
}
public class System.Xml.XmlException : Exception {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Message { get; }
    public XmlException(string message);
    public XmlException(string message, Exception innerException);
    public XmlException(string message, Exception innerException, int lineNumber, int linePosition);
    public int get_LineNumber();
    public int get_LinePosition();
    public virtual string get_Message();
}
public class System.Xml.XmlNamespaceManager : object {
    public string DefaultNamespace { get; }
    public XmlNameTable NameTable { get; }
    public XmlNamespaceManager(XmlNameTable nameTable);
    public virtual string get_DefaultNamespace();
    public virtual XmlNameTable get_NameTable();
    public virtual void AddNamespace(string prefix, string uri);
    public virtual IEnumerator GetEnumerator();
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual bool HasNamespace(string prefix);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string uri);
    public virtual bool PopScope();
    public virtual void PushScope();
    public virtual void RemoveNamespace(string prefix, string uri);
}
public enum System.Xml.XmlNamespaceScope : Enum {
    public int value__;
    public static XmlNamespaceScope All;
    public static XmlNamespaceScope ExcludeXml;
    public static XmlNamespaceScope Local;
}
public abstract class System.Xml.XmlNameTable : object {
    public abstract virtual string Add(Char[] array, int offset, int length);
    public abstract virtual string Add(string array);
    public abstract virtual string Get(Char[] array, int offset, int length);
    public abstract virtual string Get(string array);
}
public enum System.Xml.XmlNodeType : Enum {
    public int value__;
    public static XmlNodeType Attribute;
    public static XmlNodeType CDATA;
    public static XmlNodeType Comment;
    public static XmlNodeType Document;
    public static XmlNodeType DocumentFragment;
    public static XmlNodeType DocumentType;
    public static XmlNodeType Element;
    public static XmlNodeType EndElement;
    public static XmlNodeType EndEntity;
    public static XmlNodeType Entity;
    public static XmlNodeType EntityReference;
    public static XmlNodeType None;
    public static XmlNodeType Notation;
    public static XmlNodeType ProcessingInstruction;
    public static XmlNodeType SignificantWhitespace;
    public static XmlNodeType Text;
    public static XmlNodeType Whitespace;
    public static XmlNodeType XmlDeclaration;
}
public class System.Xml.XmlParserContext : object {
    public string BaseURI { get; public set; }
    public string DocTypeName { get; public set; }
    public Encoding Encoding { get; public set; }
    public string InternalSubset { get; public set; }
    public XmlNamespaceManager NamespaceManager { get; public set; }
    public XmlNameTable NameTable { get; public set; }
    public string PublicId { get; public set; }
    public string SystemId { get; public set; }
    public string XmlLang { get; public set; }
    public XmlSpace XmlSpace { get; public set; }
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public string get_BaseURI();
    public void set_BaseURI(string value);
    public string get_DocTypeName();
    public void set_DocTypeName(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_InternalSubset();
    public void set_InternalSubset(string value);
    public XmlNamespaceManager get_NamespaceManager();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    public string get_PublicId();
    public void set_PublicId(string value);
    public string get_SystemId();
    public void set_SystemId(string value);
    public string get_XmlLang();
    public void set_XmlLang(string value);
    public XmlSpace get_XmlSpace();
    public void set_XmlSpace(XmlSpace value);
}
public class System.Xml.XmlQualifiedName : object {
    public static XmlQualifiedName Empty;
    public bool IsEmpty { get; }
    public string Name { get; }
    public string Namespace { get; }
    public XmlQualifiedName(string name);
    public XmlQualifiedName(string name, string ns);
    public bool get_IsEmpty();
    public string get_Name();
    public string get_Namespace();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(XmlQualifiedName a, XmlQualifiedName b);
    public static bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b);
    public virtual string ToString();
    public static string ToString(string name, string ns);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Xml.XmlReader : object {
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool CanResolveEntity { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasAttributes { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public ReadState ReadState { get; }
    public XmlReaderSettings Settings { get; }
    public string Value { get; }
    public Type ValueType { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public abstract virtual int get_AttributeCount();
    public abstract virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_CanResolveEntity();
    public abstract virtual int get_Depth();
    public abstract virtual bool get_EOF();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public abstract virtual bool get_IsEmptyElement();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public abstract virtual string get_LocalName();
    public virtual string get_Name();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string get_Prefix();
    public abstract virtual ReadState get_ReadState();
    public virtual XmlReaderSettings get_Settings();
    public abstract virtual string get_Value();
    public virtual Type get_ValueType();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public static XmlReader Create(Stream input);
    public static XmlReader Create(Stream input, XmlReaderSettings settings);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(TextReader input);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(string inputUri);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings);
    public static XmlReader Create(XmlReader reader, XmlReaderSettings settings);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual string GetAttribute(int i);
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetAttribute(string name, string namespaceURI);
    public virtual Task`1<string> GetValueAsync();
    public static bool IsName(string str);
    public static bool IsNameToken(string str);
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public abstract virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public abstract virtual bool MoveToAttribute(string name);
    public abstract virtual bool MoveToAttribute(string name, string ns);
    public virtual XmlNodeType MoveToContent();
    public virtual Task`1<XmlNodeType> MoveToContentAsync();
    public abstract virtual bool MoveToElement();
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public abstract virtual bool Read();
    public virtual Task`1<bool> ReadAsync();
    public abstract virtual bool ReadAttributeValue();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual bool ReadContentAsBoolean();
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual decimal ReadContentAsDecimal();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual object ReadContentAsObject();
    public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual string ReadContentAsString();
    public virtual Task`1<string> ReadContentAsStringAsync();
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual Task`1<object> ReadElementContentAsObjectAsync();
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual Task`1<string> ReadElementContentAsStringAsync();
    public virtual void ReadEndElement();
    public virtual string ReadInnerXml();
    public virtual Task`1<string> ReadInnerXmlAsync();
    public virtual string ReadOuterXml();
    public virtual Task`1<string> ReadOuterXmlAsync();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual XmlReader ReadSubtree();
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    public abstract virtual void ResolveEntity();
    public virtual void Skip();
    public virtual Task SkipAsync();
}
public class System.Xml.XmlReaderSettings : object {
    public bool Async { get; public set; }
    public bool CheckCharacters { get; public set; }
    public bool CloseInput { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public DtdProcessing DtdProcessing { get; public set; }
    public bool IgnoreComments { get; public set; }
    public bool IgnoreProcessingInstructions { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public int LineNumberOffset { get; public set; }
    public int LinePositionOffset { get; public set; }
    public long MaxCharactersFromEntities { get; public set; }
    public long MaxCharactersInDocument { get; public set; }
    public XmlNameTable NameTable { get; public set; }
    public bool get_Async();
    public void set_Async(bool value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public bool get_CloseInput();
    public void set_CloseInput(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public bool get_IgnoreComments();
    public void set_IgnoreComments(bool value);
    public bool get_IgnoreProcessingInstructions();
    public void set_IgnoreProcessingInstructions(bool value);
    public bool get_IgnoreWhitespace();
    public void set_IgnoreWhitespace(bool value);
    public int get_LineNumberOffset();
    public void set_LineNumberOffset(int value);
    public int get_LinePositionOffset();
    public void set_LinePositionOffset(int value);
    public long get_MaxCharactersFromEntities();
    public void set_MaxCharactersFromEntities(long value);
    public long get_MaxCharactersInDocument();
    public void set_MaxCharactersInDocument(long value);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    public XmlReaderSettings Clone();
    public void Reset();
}
public enum System.Xml.XmlSpace : Enum {
    public int value__;
    public static XmlSpace Default;
    public static XmlSpace None;
    public static XmlSpace Preserve;
}
public abstract class System.Xml.XmlWriter : object {
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public virtual XmlWriterSettings get_Settings();
    public abstract virtual WriteState get_WriteState();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public static XmlWriter Create(Stream output);
    public static XmlWriter Create(Stream output, XmlWriterSettings settings);
    public static XmlWriter Create(TextWriter output);
    public static XmlWriter Create(TextWriter output, XmlWriterSettings settings);
    public static XmlWriter Create(StringBuilder output);
    public static XmlWriter Create(StringBuilder output, XmlWriterSettings settings);
    public static XmlWriter Create(XmlWriter output);
    public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Flush();
    public virtual Task FlushAsync();
    public abstract virtual string LookupPrefix(string ns);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public void WriteAttributeString(string localName, string value);
    public void WriteAttributeString(string localName, string ns, string value);
    public void WriteAttributeString(string prefix, string localName, string ns, string value);
    public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value);
    public abstract virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public abstract virtual void WriteCData(string text);
    public virtual Task WriteCDataAsync(string text);
    public abstract virtual void WriteCharEntity(char ch);
    public virtual Task WriteCharEntityAsync(char ch);
    public abstract virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public abstract virtual void WriteComment(string text);
    public virtual Task WriteCommentAsync(string text);
    public abstract virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public void WriteElementString(string localName, string value);
    public void WriteElementString(string localName, string ns, string value);
    public void WriteElementString(string prefix, string localName, string ns, string value);
    public Task WriteElementStringAsync(string prefix, string localName, string ns, string value);
    public abstract virtual void WriteEndAttribute();
    protected internal virtual Task WriteEndAttributeAsync();
    public abstract virtual void WriteEndDocument();
    public virtual Task WriteEndDocumentAsync();
    public abstract virtual void WriteEndElement();
    public virtual Task WriteEndElementAsync();
    public abstract virtual void WriteEntityRef(string name);
    public virtual Task WriteEntityRefAsync(string name);
    public abstract virtual void WriteFullEndElement();
    public virtual Task WriteFullEndElementAsync();
    public virtual void WriteName(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual void WriteNmToken(string name);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    public abstract virtual void WriteProcessingInstruction(string name, string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public abstract virtual void WriteRaw(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(string data);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public void WriteStartAttribute(string localName);
    public void WriteStartAttribute(string localName, string ns);
    public abstract virtual void WriteStartAttribute(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public abstract virtual void WriteStartDocument();
    public abstract virtual void WriteStartDocument(bool standalone);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public void WriteStartElement(string localName);
    public void WriteStartElement(string localName, string ns);
    public abstract virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public abstract virtual void WriteString(string text);
    public virtual Task WriteStringAsync(string text);
    public abstract virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(string value);
    public abstract virtual void WriteWhitespace(string ws);
    public virtual Task WriteWhitespaceAsync(string ws);
}
public class System.Xml.XmlWriterSettings : object {
    public bool Async { get; public set; }
    public bool CheckCharacters { get; public set; }
    public bool CloseOutput { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public NamespaceHandling NamespaceHandling { get; public set; }
    public string NewLineChars { get; public set; }
    public NewLineHandling NewLineHandling { get; public set; }
    public bool NewLineOnAttributes { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public bool WriteEndDocumentOnClose { get; public set; }
    public bool get_Async();
    public void set_Async(bool value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public bool get_CloseOutput();
    public void set_CloseOutput(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public string get_IndentChars();
    public void set_IndentChars(string value);
    public NamespaceHandling get_NamespaceHandling();
    public void set_NamespaceHandling(NamespaceHandling value);
    public string get_NewLineChars();
    public void set_NewLineChars(string value);
    public NewLineHandling get_NewLineHandling();
    public void set_NewLineHandling(NewLineHandling value);
    public bool get_NewLineOnAttributes();
    public void set_NewLineOnAttributes(bool value);
    public bool get_OmitXmlDeclaration();
    public void set_OmitXmlDeclaration(bool value);
    public bool get_WriteEndDocumentOnClose();
    public void set_WriteEndDocumentOnClose(bool value);
    public XmlWriterSettings Clone();
    public void Reset();
}
