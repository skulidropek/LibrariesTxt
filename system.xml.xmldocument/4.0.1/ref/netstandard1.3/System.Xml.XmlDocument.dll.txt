public class System.Xml.XmlAttribute : XmlNode {
    public string BaseURI { get; }
    unknown string InnerText {public set; }
    unknown string InnerXml {public set; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlElement OwnerElement { get; }
    public XmlNode ParentNode { get; }
    public string Prefix { get; public set; }
    public bool Specified { get; }
    public string Value { get; public set; }
    protected internal XmlAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual string get_BaseURI();
    public virtual void set_InnerText(string value);
    public virtual void set_InnerXml(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlElement get_OwnerElement();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual bool get_Specified();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Xml.XmlAttributeCollection : XmlNamedNodeMap {
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public XmlAttribute get_ItemOf(int i);
    public XmlAttribute get_ItemOf(string name);
    public XmlAttribute get_ItemOf(string localName, string namespaceURI);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public XmlAttribute Append(XmlAttribute node);
    public void CopyTo(XmlAttribute[] array, int index);
    public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute Prepend(XmlAttribute node);
    public XmlAttribute Remove(XmlAttribute node);
    public void RemoveAll();
    public XmlAttribute RemoveAt(int i);
    public virtual XmlNode SetNamedItem(XmlNode node);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public class System.Xml.XmlCDataSection : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlCDataSection(string data, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public abstract class System.Xml.XmlCharacterData : XmlLinkedNode {
    public string Data { get; public set; }
    public int Length { get; }
    public string Value { get; public set; }
    protected internal XmlCharacterData(string data, XmlDocument doc);
    public virtual string get_Data();
    public virtual void set_Data(string value);
    public virtual int get_Length();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void AppendData(string strData);
    public virtual void DeleteData(int offset, int count);
    public virtual void InsertData(int offset, string strData);
    public virtual void ReplaceData(int offset, int count, string strData);
    public virtual string Substring(int offset, int count);
}
public class System.Xml.XmlComment : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    protected internal XmlComment(string comment, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlDeclaration : XmlLinkedNode {
    public string Encoding { get; public set; }
    public string InnerText { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public string Standalone { get; public set; }
    public string Value { get; public set; }
    public string Version { get; }
    protected internal XmlDeclaration(string version, string encoding, string standalone, XmlDocument doc);
    public string get_Encoding();
    public void set_Encoding(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public string get_Standalone();
    public void set_Standalone(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public string get_Version();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlDocument : XmlNode {
    public string BaseURI { get; }
    public XmlElement DocumentElement { get; }
    public XmlImplementation Implementation { get; }
    unknown string InnerText {public set; }
    public string InnerXml { get; public set; }
    public bool IsReadOnly { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    public bool PreserveWhitespace { get; public set; }
    protected internal XmlDocument(XmlImplementation imp);
    public XmlDocument(XmlNameTable nt);
    public virtual string get_BaseURI();
    public XmlElement get_DocumentElement();
    public XmlImplementation get_Implementation();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual bool get_IsReadOnly();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public bool get_PreserveWhitespace();
    public void set_PreserveWhitespace(bool value);
    public void add_NodeChanged(XmlNodeChangedEventHandler value);
    public void remove_NodeChanged(XmlNodeChangedEventHandler value);
    public void add_NodeChanging(XmlNodeChangedEventHandler value);
    public void remove_NodeChanging(XmlNodeChangedEventHandler value);
    public void add_NodeInserted(XmlNodeChangedEventHandler value);
    public void remove_NodeInserted(XmlNodeChangedEventHandler value);
    public void add_NodeInserting(XmlNodeChangedEventHandler value);
    public void remove_NodeInserting(XmlNodeChangedEventHandler value);
    public void add_NodeRemoved(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoved(XmlNodeChangedEventHandler value);
    public void add_NodeRemoving(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoving(XmlNodeChangedEventHandler value);
    public virtual XmlNode CloneNode(bool deep);
    public XmlAttribute CreateAttribute(string name);
    public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    public virtual XmlDocumentFragment CreateDocumentFragment();
    public XmlElement CreateElement(string name);
    public XmlElement CreateElement(string qualifiedName, string namespaceURI);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI);
    public virtual XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI);
    public virtual XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI);
    public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlWhitespace CreateWhitespace(string text);
    public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual XmlNode ImportNode(XmlNode node, bool deep);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    public virtual void LoadXml(string xml);
    public virtual XmlNode ReadNode(XmlReader reader);
    public virtual void Save(Stream outStream);
    public virtual void Save(TextWriter writer);
    public virtual void Save(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter xw);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlDocumentFragment : XmlNode {
    public string InnerXml { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    protected internal XmlDocumentFragment(XmlDocument ownerDocument);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlElement : XmlLinkedNode {
    public XmlAttributeCollection Attributes { get; }
    public bool HasAttributes { get; }
    public string InnerText { get; public set; }
    public string InnerXml { get; public set; }
    public bool IsEmpty { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNode NextSibling { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    public string Prefix { get; public set; }
    protected internal XmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNode get_NextSibling();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual XmlAttribute GetAttributeNode(string name);
    public virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual bool HasAttribute(string name);
    public virtual bool HasAttribute(string localName, string namespaceURI);
    public virtual void RemoveAll();
    public virtual void RemoveAllAttributes();
    public virtual void RemoveAttribute(string name);
    public virtual void RemoveAttribute(string localName, string namespaceURI);
    public virtual XmlNode RemoveAttributeAt(int i);
    public virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr);
    public virtual void SetAttribute(string name, string value);
    public virtual string SetAttribute(string localName, string namespaceURI, string value);
    public virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlImplementation : object {
    public XmlImplementation(XmlNameTable nt);
    public virtual XmlDocument CreateDocument();
    public bool HasFeature(string strFeature, string strVersion);
}
public abstract class System.Xml.XmlLinkedNode : XmlNode {
    public XmlNode NextSibling { get; }
    public XmlNode PreviousSibling { get; }
    public virtual XmlNode get_NextSibling();
    public virtual XmlNode get_PreviousSibling();
}
public class System.Xml.XmlNamedNodeMap : object {
    public int Count { get; }
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual XmlNode GetNamedItem(string name);
    public virtual XmlNode GetNamedItem(string localName, string namespaceURI);
    public virtual XmlNode Item(int index);
    public virtual XmlNode RemoveNamedItem(string name);
    public virtual XmlNode RemoveNamedItem(string localName, string namespaceURI);
    public virtual XmlNode SetNamedItem(XmlNode node);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Xml.XmlNode : object {
    public XmlAttributeCollection Attributes { get; }
    public string BaseURI { get; }
    public XmlNodeList ChildNodes { get; }
    public XmlNode FirstChild { get; }
    public bool HasChildNodes { get; }
    public string InnerText { get; public set; }
    public string InnerXml { get; public set; }
    public bool IsReadOnly { get; }
    public XmlElement Item { get; }
    public XmlElement Item { get; }
    public XmlNode LastChild { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNode NextSibling { get; }
    public XmlNodeType NodeType { get; }
    public string OuterXml { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    public string Prefix { get; public set; }
    public XmlNode PreviousSibling { get; }
    public XmlNode PreviousText { get; }
    public string Value { get; public set; }
    public virtual XmlAttributeCollection get_Attributes();
    public virtual string get_BaseURI();
    public virtual XmlNodeList get_ChildNodes();
    public virtual XmlNode get_FirstChild();
    public virtual bool get_HasChildNodes();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual bool get_IsReadOnly();
    public virtual XmlElement get_Item(string name);
    public virtual XmlElement get_Item(string localname, string ns);
    public virtual XmlNode get_LastChild();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNode get_NextSibling();
    public abstract virtual XmlNodeType get_NodeType();
    public virtual string get_OuterXml();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_PreviousText();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public abstract virtual XmlNode CloneNode(bool deep);
    public IEnumerator GetEnumerator();
    public virtual string GetNamespaceOfPrefix(string prefix);
    public virtual string GetPrefixOfNamespace(string namespaceURI);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual void Normalize();
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual void RemoveAll();
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual bool Supports(string feature, string version);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public abstract virtual void WriteContentTo(XmlWriter w);
    public abstract virtual void WriteTo(XmlWriter w);
}
public enum System.Xml.XmlNodeChangedAction : Enum {
    public int value__;
    public static XmlNodeChangedAction Change;
    public static XmlNodeChangedAction Insert;
    public static XmlNodeChangedAction Remove;
}
public class System.Xml.XmlNodeChangedEventArgs : EventArgs {
    public XmlNodeChangedAction Action { get; }
    public XmlNode NewParent { get; }
    public string NewValue { get; }
    public XmlNode Node { get; }
    public XmlNode OldParent { get; }
    public string OldValue { get; }
    public XmlNodeChangedEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    public XmlNodeChangedAction get_Action();
    public XmlNode get_NewParent();
    public string get_NewValue();
    public XmlNode get_Node();
    public XmlNode get_OldParent();
    public string get_OldValue();
}
public class System.Xml.XmlNodeChangedEventHandler : MulticastDelegate {
    public XmlNodeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("ItemOf")]
public abstract class System.Xml.XmlNodeList : object {
    public int Count { get; }
    public XmlNode ItemOf { get; }
    public abstract virtual int get_Count();
    public virtual XmlNode get_ItemOf(int i);
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual XmlNode Item(int index);
    protected virtual void PrivateDisposeNodeList();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Xml.XmlProcessingInstruction : XmlLinkedNode {
    public string Data { get; public set; }
    public string InnerText { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public string Target { get; }
    public string Value { get; public set; }
    protected internal XmlProcessingInstruction(string target, string data, XmlDocument doc);
    public string get_Data();
    public void set_Data(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public string get_Target();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlSignificantWhitespace : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    public string Value { get; public set; }
    protected internal XmlSignificantWhitespace(string strData, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlText : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    public string Value { get; public set; }
    protected internal XmlText(string strData, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlText SplitText(int offset);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlWhitespace : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    public string Value { get; public set; }
    protected internal XmlWhitespace(string strData, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
