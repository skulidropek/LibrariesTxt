internal static class FxResources.System.Xml.XPath.XDocument.SR : object {
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Argument_CreateNavigator { get; }
    internal static string InvalidOperation_BadNodeType { get; }
    internal static string InvalidOperation_UnexpectedEvaluation { get; }
    internal static string NotSupported_MoveToId { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Argument_CreateNavigator();
    internal static string get_InvalidOperation_BadNodeType();
    internal static string get_InvalidOperation_UnexpectedEvaluation();
    internal static string get_NotSupported_MoveToId();
    internal static Type get_ResourceType();
}
[ExtensionAttribute]
public static class System.Xml.XPath.Extensions : object {
    [ExtensionAttribute]
public static XPathNavigator CreateNavigator(XNode node);
    [ExtensionAttribute]
public static XPathNavigator CreateNavigator(XNode node, XmlNameTable nameTable);
    [ExtensionAttribute]
public static object XPathEvaluate(XNode node, string expression);
    [ExtensionAttribute]
public static object XPathEvaluate(XNode node, string expression, IXmlNamespaceResolver resolver);
    [ExtensionAttribute]
public static XElement XPathSelectElement(XNode node, string expression);
    [ExtensionAttribute]
public static XElement XPathSelectElement(XNode node, string expression, IXmlNamespaceResolver resolver);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPathSelectElements(XNode node, string expression);
    [ExtensionAttribute]
public static IEnumerable`1<XElement> XPathSelectElements(XNode node, string expression, IXmlNamespaceResolver resolver);
    private static XText CalibrateText(XText n);
}
[ExtensionAttribute]
internal static class System.Xml.XPath.XAttributeExtensions : object {
    [ExtensionAttribute]
public static string GetPrefixOfNamespace(XAttribute attribute, XNamespace ns);
}
[ExtensionAttribute]
public static class System.Xml.XPath.XDocumentExtensions : object {
    [ExtensionAttribute]
public static IXPathNavigable ToXPathNavigable(XNode node);
}
internal class System.Xml.XPath.XNodeNavigator : XPathNavigator {
    internal static string xmlPrefixNamespace;
    internal static string xmlnsPrefixNamespace;
    private static int DocumentContentMask;
    private static Int32[] s_ElementContentMasks;
    private static int TextMask;
    private static XAttribute s_XmlNamespaceDeclaration;
    private XObject _source;
    private XElement _parent;
    private XmlNameTable _nameTable;
    public string BaseURI { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public object UnderlyingObject { get; }
    public string Value { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    public XNodeNavigator(XNode node, XmlNameTable nameTable);
    public XNodeNavigator(XNodeNavigator other);
    private static XNodeNavigator();
    public virtual string get_BaseURI();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    private string GetLocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    private string GetNamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_Prefix();
    private string GetPrefix();
    public virtual object get_UnderlyingObject();
    public virtual string get_Value();
    public virtual XPathNavigator Clone();
    public virtual bool IsSamePosition(XPathNavigator navigator);
    public virtual bool MoveTo(XPathNavigator navigator);
    public virtual bool MoveToAttribute(string localName, string namespaceName);
    public virtual bool MoveToChild(string localName, string namespaceName);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToNamespace(string localName);
    public virtual bool MoveToNext();
    public virtual bool MoveToNext(string localName, string namespaceName);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToParent();
    public virtual bool MoveToPrevious();
    public virtual XmlReader ReadSubtree();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    private static string CollectText(XText n);
    private static XmlNameTable CreateNameTable();
    private static bool IsContent(XContainer c, XNode n);
    private static bool IsSamePosition(XNodeNavigator n1, XNodeNavigator n2);
    private static bool IsXmlNamespaceDeclaration(XAttribute a);
    private static int GetElementContentMask(XPathNodeType type);
    private static XAttribute GetFirstNamespaceDeclarationGlobal(XElement e);
    private static XAttribute GetFirstNamespaceDeclarationLocal(XElement e);
    private static XAttribute GetNextNamespaceDeclarationGlobal(XAttribute a);
    private static XAttribute GetNextNamespaceDeclarationLocal(XAttribute a);
    private static XAttribute GetXmlNamespaceDeclaration();
    private static bool HasNamespaceDeclarationInScope(XAttribute a, XElement e);
}
[ExtensionAttribute]
internal static class System.Xml.XPath.XObjectExtensions : object {
    [ExtensionAttribute]
public static XContainer GetParent(XObject obj);
}
internal class System.Xml.XPath.XPathEvaluator : ValueType {
    public object Evaluate(XNode node, string expression, IXmlNamespaceResolver resolver);
    [IteratorStateMachineAttribute("System.Xml.XPath.XPathEvaluator/<EvaluateIterator>d__1`1")]
private IEnumerable`1<T> EvaluateIterator(XPathNodeIterator result);
}
