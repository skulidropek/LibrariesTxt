internal static class FxResources.System.Xml.XPath.XmlDocument.SR : object {
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Xml_InvalidOperation { get; }
    internal static string Xml_BadStartNameChar { get; }
    internal static string Xml_BadNameChar { get; }
    internal static string XmlConvert_BadUri { get; }
    internal static string XmlConvert_BadFormat { get; }
    internal static string XmlConvert_Overflow { get; }
    internal static string XmlConvert_TypeBadMapping { get; }
    internal static string XmlConvert_TypeBadMapping2 { get; }
    internal static string XmlConvert_TypeListBadMapping { get; }
    internal static string XmlConvert_TypeListBadMapping2 { get; }
    internal static string XmlConvert_TypeToString { get; }
    internal static string XmlConvert_TypeFromString { get; }
    internal static string XmlConvert_TypeNoPrefix { get; }
    internal static string XmlConvert_TypeNoNamespace { get; }
    internal static string XmlConvert_NotOneCharString { get; }
    internal static string Xml_ErrorPosition { get; }
    internal static string Xml_InvalidReadContentAs { get; }
    internal static string Xml_InvalidReadElementContentAs { get; }
    internal static string Xdom_Node_Modify_ReadOnly { get; }
    internal static string Xpn_MissingParent { get; }
    internal static string Xpn_BadPosition { get; }
    internal static string Xml_EmptyName { get; }
    internal static string Xpn_NoContent { get; }
    internal static string Xml_ClosedOrError { get; }
    internal static string Xml_InvalidSurrogatePairWithArgs { get; }
    internal static string Xml_InvalidSurrogateHighChar { get; }
    internal static string Xml_InvalidSurrogateMissingLowChar { get; }
    internal static string Xml_InvalidCharacter { get; }
    internal static string Xml_DupAttributeName { get; }
    internal static string Xml_NoRoot { get; }
    internal static string Xml_DtdNotAllowedInFragment { get; }
    internal static string Xml_DtdAlreadyWritten { get; }
    internal static string Xml_EmptyLocalName { get; }
    internal static string Xml_PrefixForEmptyNs { get; }
    internal static string Xml_NoStartTag { get; }
    internal static string Xml_XmlnsPrefix { get; }
    internal static string Xml_XmlPrefix { get; }
    internal static string Xml_CanNotBindToReservedNamespace { get; }
    internal static string Xml_InvalidXmlSpace { get; }
    internal static string Xml_DupXmlDecl { get; }
    internal static string Xml_CannotWriteXmlDecl { get; }
    internal static string Xml_NonWhitespace { get; }
    internal static string Xml_UndefNamespace { get; }
    internal static string Xml_CannotStartDocumentOnFragment { get; }
    internal static string Xml_RedefinePrefix { get; }
    internal static string Xml_NamespaceDeclXmlXmlns { get; }
    internal static string Xml_WrongToken { get; }
    internal static string Xml_InvalidNameCharsDetail { get; }
    internal static string Xml_ConformanceLevelFragment { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Xml_InvalidOperation();
    internal static string get_Xml_BadStartNameChar();
    internal static string get_Xml_BadNameChar();
    internal static string get_XmlConvert_BadUri();
    internal static string get_XmlConvert_BadFormat();
    internal static string get_XmlConvert_Overflow();
    internal static string get_XmlConvert_TypeBadMapping();
    internal static string get_XmlConvert_TypeBadMapping2();
    internal static string get_XmlConvert_TypeListBadMapping();
    internal static string get_XmlConvert_TypeListBadMapping2();
    internal static string get_XmlConvert_TypeToString();
    internal static string get_XmlConvert_TypeFromString();
    internal static string get_XmlConvert_TypeNoPrefix();
    internal static string get_XmlConvert_TypeNoNamespace();
    internal static string get_XmlConvert_NotOneCharString();
    internal static string get_Xml_ErrorPosition();
    internal static string get_Xml_InvalidReadContentAs();
    internal static string get_Xml_InvalidReadElementContentAs();
    internal static string get_Xdom_Node_Modify_ReadOnly();
    internal static string get_Xpn_MissingParent();
    internal static string get_Xpn_BadPosition();
    internal static string get_Xml_EmptyName();
    internal static string get_Xpn_NoContent();
    internal static string get_Xml_ClosedOrError();
    internal static string get_Xml_InvalidSurrogatePairWithArgs();
    internal static string get_Xml_InvalidSurrogateHighChar();
    internal static string get_Xml_InvalidSurrogateMissingLowChar();
    internal static string get_Xml_InvalidCharacter();
    internal static string get_Xml_DupAttributeName();
    internal static string get_Xml_NoRoot();
    internal static string get_Xml_DtdNotAllowedInFragment();
    internal static string get_Xml_DtdAlreadyWritten();
    internal static string get_Xml_EmptyLocalName();
    internal static string get_Xml_PrefixForEmptyNs();
    internal static string get_Xml_NoStartTag();
    internal static string get_Xml_XmlnsPrefix();
    internal static string get_Xml_XmlPrefix();
    internal static string get_Xml_CanNotBindToReservedNamespace();
    internal static string get_Xml_InvalidXmlSpace();
    internal static string get_Xml_DupXmlDecl();
    internal static string get_Xml_CannotWriteXmlDecl();
    internal static string get_Xml_NonWhitespace();
    internal static string get_Xml_UndefNamespace();
    internal static string get_Xml_CannotStartDocumentOnFragment();
    internal static string get_Xml_RedefinePrefix();
    internal static string get_Xml_NamespaceDeclXmlXmlns();
    internal static string get_Xml_WrongToken();
    internal static string get_Xml_InvalidNameCharsDetail();
    internal static string get_Xml_ConformanceLevelFragment();
    internal static Type get_ResourceType();
}
internal abstract class System.Xml.Base64Encoder : object {
    private Byte[] leftOverBytes;
    private int leftOverBytesCount;
    private Char[] charsLine;
    internal static int Base64LineSize;
    internal static int LineSizeInBytes;
    internal abstract virtual void WriteChars(Char[] chars, int index, int count);
    internal void Encode(Byte[] buffer, int index, int count);
    internal void Flush();
}
internal static class System.Xml.Bits : object {
    private static UInt32 MASK_0101010101010101;
    private static UInt32 MASK_0011001100110011;
    private static UInt32 MASK_0000111100001111;
    private static UInt32 MASK_0000000011111111;
    private static UInt32 MASK_1111111111111111;
    public static int Count(UInt32 num);
    public static bool ExactlyOne(UInt32 num);
    public static int LeastPosition(UInt32 num);
}
internal class System.Xml.DocumentXmlWriter : XmlRawWriter {
    private DocumentXmlWriterType _type;
    private XmlNode _start;
    private XmlDocument _document;
    private XmlNamespaceManager _namespaceManager;
    private State _state;
    private XmlNode _write;
    private List`1<XmlNode> _fragment;
    private XmlWriterSettings _settings;
    private DocumentXPathNavigator _navigator;
    private XmlNode _end;
    private static State[] s_changeState;
    unknown XmlNamespaceManager NamespaceManager {public set; }
    public XmlWriterSettings Settings { get; }
    unknown DocumentXPathNavigator Navigator {public set; }
    unknown XmlNode EndNode {public set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public DocumentXmlWriter(DocumentXmlWriterType type, XmlNode start, XmlDocument document);
    private static DocumentXmlWriter();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public virtual XmlWriterSettings get_Settings();
    internal void SetSettings(XmlWriterSettings value);
    public void set_Navigator(DocumentXPathNavigator value);
    public void set_EndNode(XmlNode value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteFullEndElement();
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string text);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowCh, char highCh);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    internal virtual void Close(WriteState currentState);
    private void CloseWithAppendAttribute();
    private void CloseWithReplaceToFollowingSibling();
    public virtual void Flush();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private void AddAttribute(XmlAttribute attr, XmlNode parent);
    private void AddChild(XmlNode node, XmlNode parent);
    private State StartState();
    private void VerifyState(Method method);
}
internal enum System.Xml.DocumentXmlWriterType : Enum {
    public int value__;
    public static DocumentXmlWriterType InsertSiblingAfter;
    public static DocumentXmlWriterType InsertSiblingBefore;
    public static DocumentXmlWriterType PrependChild;
    public static DocumentXmlWriterType AppendChild;
    public static DocumentXmlWriterType AppendAttribute;
    public static DocumentXmlWriterType ReplaceToFollowingSibling;
}
internal class System.Xml.DocumentXPathNavigator : XPathNavigator {
    private XmlDocument _document;
    private XmlNode _source;
    private int _attributeIndex;
    private XmlElement _namespaceParent;
    public XmlNameTable NameTable { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string Value { get; }
    private string ValueDocument { get; }
    private string ValueText { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public object UnderlyingObject { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public bool CanEdit { get; }
    public DocumentXPathNavigator(XmlDocument document, XmlNode node);
    public DocumentXPathNavigator(DocumentXPathNavigator other);
    public virtual XPathNavigator Clone();
    public virtual void SetValue(string value);
    public virtual XmlNameTable get_NameTable();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_Value();
    private string get_ValueDocument();
    private string get_ValueText();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual object get_UnderlyingObject();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    private static bool MoveToFirstNamespaceLocal(XmlAttributeCollection attributes, Int32& index);
    private static bool MoveToFirstNamespaceGlobal(XmlAttributeCollection& attributes, Int32& index, XmlNode attributesParent);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    private static bool MoveToNextNamespaceLocal(XmlAttributeCollection attributes, Int32& index);
    private static bool MoveToNextNamespaceGlobal(XmlAttributeCollection& attributes, Int32& index, XmlNode attributesParent);
    private bool PathHasDuplicateNamespace(XmlElement top, XmlElement bottom, string localName);
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToChild(string localName, string namespaceUri);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceUri, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual bool MoveToNext(string localName, string namespaceUri);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool get_HasChildren();
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator other);
    private static XmlNode OwnerNode(XmlNode node);
    private static int GetDepth(XmlNode node);
    private XmlNodeOrder Compare(XmlNode node1, XmlNode node2);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    internal XmlNode GetNode();
    public virtual XPathNodeIterator SelectDescendants(string localName, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType nt, bool includeSelf);
    public virtual bool get_CanEdit();
    public virtual XmlWriter PrependChild();
    public virtual XmlWriter AppendChild();
    public virtual XmlWriter InsertAfter();
    public virtual XmlWriter InsertBefore();
    public virtual XmlWriter CreateAttributes();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    private static void DeleteAttribute(XmlAttribute attribute, int index);
    internal static void DeleteToFollowingSibling(XmlNode node, XmlNode end);
    private static XmlNamespaceManager GetNamespaceManager(XmlNode node, XmlDocument document);
    internal void ResetPosition(XmlNode node);
    private static bool ResetAttributePosition(XmlAttribute attribute, XmlAttributeCollection attributes, Int32& index);
    private static bool CheckAttributePosition(XmlAttribute attribute, XmlAttributeCollection& attributes, int index);
    private void CalibrateText();
    private XmlNode ParentNode(XmlNode node);
    private XmlNode ParentNodeTail(XmlNode parent);
    private XmlNode FirstChild(XmlNode node);
    private XmlNode FirstChildTail(XmlNode child);
    private XmlNode NextSibling(XmlNode node);
    private XmlNode NextSiblingTail(XmlNode node, XmlNode sibling);
    private XmlNode PreviousSibling(XmlNode node);
    private XmlNode PreviousSiblingTail(XmlNode node, XmlNode sibling);
    private XmlNode PreviousText(XmlNode node);
    private XmlNode PreviousTextTail(XmlNode node, XmlNode text);
    internal static bool IsFollowingSibling(XmlNode left, XmlNode right);
    private static bool IsDescendant(XmlNode top, XmlNode bottom);
    private static bool IsValidChild(XmlNode parent, XmlNode child);
    private XmlNode TextStart(XmlNode node);
    private XmlNode TextEnd(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_AllElemChildren : DocumentXPathNodeIterator_ElemDescendants {
    internal DocumentXPathNodeIterator_AllElemChildren(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_AllElemChildren(DocumentXPathNodeIterator_AllElemChildren other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf : DocumentXPathNodeIterator_AllElemChildren {
    internal DocumentXPathNodeIterator_AllElemChildren_AndSelf(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_AllElemChildren_AndSelf(DocumentXPathNodeIterator_AllElemChildren_AndSelf other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren : DocumentXPathNodeIterator_ElemDescendants {
    protected string localNameAtom;
    protected string nsAtom;
    internal DocumentXPathNodeIterator_ElemChildren(DocumentXPathNavigator nav, string localNameAtom, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren(DocumentXPathNodeIterator_ElemChildren other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf : DocumentXPathNodeIterator_ElemChildren {
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf(DocumentXPathNavigator nav, string localNameAtom, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf(DocumentXPathNodeIterator_ElemChildren_AndSelf other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName : DocumentXPathNodeIterator_ElemChildren_NoLocalName {
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName(DocumentXPathNavigator nav, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName(DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName : DocumentXPathNodeIterator_ElemDescendants {
    private string _nsAtom;
    internal DocumentXPathNodeIterator_ElemChildren_NoLocalName(DocumentXPathNavigator nav, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_NoLocalName(DocumentXPathNodeIterator_ElemChildren_NoLocalName other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal abstract class System.Xml.DocumentXPathNodeIterator_ElemDescendants : XPathNodeIterator {
    private DocumentXPathNavigator _nav;
    private int _level;
    private int _position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal DocumentXPathNodeIterator_ElemDescendants(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_ElemDescendants(DocumentXPathNodeIterator_ElemDescendants other);
    protected abstract virtual bool Match(XmlNode node);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    protected void SetPosition(int pos);
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_Empty : XPathNodeIterator {
    private XPathNavigator _nav;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    internal DocumentXPathNodeIterator_Empty(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_Empty(DocumentXPathNodeIterator_Empty other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
}
internal enum System.Xml.ExceptionType : Enum {
    public int value__;
    public static ExceptionType ArgumentException;
    public static ExceptionType XmlException;
}
internal static class System.Xml.Ref : object {
    public static bool Equal(string strA, string strB);
    public static void Equals(object objA, object objB);
}
internal static class System.Xml.Schema.XmlUntypedConverter : object {
    private static Type DecimalType;
    private static Type Int32Type;
    private static Type Int64Type;
    private static Type StringType;
    private static Type ByteType;
    private static Type Int16Type;
    private static Type SByteType;
    private static Type UInt16Type;
    private static Type UInt32Type;
    private static Type UInt64Type;
    private static Type DoubleType;
    private static Type SingleType;
    private static Type DateTimeType;
    private static Type DateTimeOffsetType;
    private static Type BooleanType;
    private static Type ByteArrayType;
    private static Type XmlQualifiedNameType;
    private static Type UriType;
    private static Type TimeSpanType;
    private static XmlUntypedConverter();
    public static bool ToBoolean(string value);
    private static DateTime UntypedAtomicToDateTime(string value);
    public static DateTime ToDateTime(string value);
    public static double ToDouble(string value);
    public static int ToInt32(string value);
    public static long ToInt64(string value);
    private static string Base64BinaryToString(Byte[] value);
    private static string DateTimeToString(DateTime value);
    private static string DateTimeOffsetToString(DateTimeOffset value);
    private static string QNameToString(XmlQualifiedName qname, IXmlNamespaceResolver nsResolver);
    private static string AnyUriToString(Uri value);
    public static string ToString(object value, IXmlNamespaceResolver nsResolver);
    private static Byte[] StringToBase64Binary(string value);
    private static short Int32ToInt16(int value);
    private static byte Int32ToByte(int value);
    private static ulong DecimalToUInt64(decimal value);
    private static sbyte Int32ToSByte(int value);
    private static DateTimeOffset UntypedAtomicToDateTimeOffset(string value);
    private static XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver);
    private static ushort Int32ToUInt16(int value);
    private static UInt32 Int64ToUInt32(long value);
    public static object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XsdDateTime : ValueType {
    private DateTime dt;
    private UInt32 extra;
    private static UInt32 TypeMask;
    private static UInt32 KindMask;
    private static UInt32 ZoneHourMask;
    private static UInt32 ZoneMinuteMask;
    private static int TypeShift;
    private static int KindShift;
    private static int ZoneHourShift;
    private static short maxFractionDigits;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static int Lz_zz_;
    private static int Lz_zz_zz;
    private static int Lz__;
    private static int Lz__mm;
    private static int Lz__mm_;
    private static int Lz__mm__;
    private static int Lz__mm_dd;
    private static int Lz___;
    private static int Lz___dd;
    private DateTimeTypeCode InternalTypeCode { get; }
    private XsdDateTimeKind InternalKind { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Fraction { get; }
    public int ZoneHour { get; }
    public int ZoneMinute { get; }
    public XsdDateTime(string text, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTime dateTime, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTimeOffset dateTimeOffset, XsdDateTimeFlags kinds);
    private static XsdDateTime();
    private void InitiateXsdDateTime(Parser parser);
    private DateTimeTypeCode get_InternalTypeCode();
    private XsdDateTimeKind get_InternalKind();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Fraction();
    public int get_ZoneHour();
    public int get_ZoneMinute();
    public static DateTime op_Implicit(XsdDateTime xdt);
    public static DateTimeOffset op_Implicit(XsdDateTime xdt);
    public virtual string ToString();
    private void PrintDate(StringBuilder sb);
    private void PrintTime(StringBuilder sb);
    private void PrintZone(StringBuilder sb);
    private static void IntToCharArray(Char[] text, int start, int value, int digits);
    private static void ShortToCharArray(Char[] text, int start, int value);
}
[FlagsAttribute]
internal enum System.Xml.Schema.XsdDateTimeFlags : Enum {
    public int value__;
    public static XsdDateTimeFlags DateTime;
    public static XsdDateTimeFlags Time;
    public static XsdDateTimeFlags Date;
    public static XsdDateTimeFlags GYearMonth;
    public static XsdDateTimeFlags GYear;
    public static XsdDateTimeFlags GMonthDay;
    public static XsdDateTimeFlags GDay;
    public static XsdDateTimeFlags GMonth;
    public static XsdDateTimeFlags XdrDateTimeNoTz;
    public static XsdDateTimeFlags XdrDateTime;
    public static XsdDateTimeFlags XdrTimeNoTz;
    public static XsdDateTimeFlags AllXsd;
}
internal class System.Xml.SecureStringHasher : object {
    private int hashCodeRandomizer;
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string key);
}
internal static class System.Xml.ValidateNames : object {
    private static XmlCharType xmlCharType;
    private static ValidateNames();
    internal static int ParseNmtoken(string s, int offset);
    internal static int ParseNmtokenNoNamespaces(string s, int offset);
    internal static bool IsNmtokenNoNamespaces(string s);
    internal static int ParseNameNoNamespaces(string s, int offset);
    internal static bool IsNameNoNamespaces(string s);
    internal static int ParseNCName(string s, int offset);
    internal static int ParseNCName(string s);
    internal static int ParseQName(string s, int offset, Int32& colonOffset);
    internal static void ParseQNameThrow(string s, String& prefix, String& localName);
    internal static void ThrowInvalidName(string s, int offsetStartChar, int offsetBadChar);
    internal static void SplitQName(string name, String& prefix, String& lname);
}
[ExtensionAttribute]
internal static class System.Xml.XmlAttributeCollectionEx : object {
    [ExtensionAttribute]
public static int FindNodeOffsetNS(XmlAttributeCollection collection, XmlAttribute node);
}
[ExtensionAttribute]
internal static class System.Xml.XmlAttributeEx : object {
    [ExtensionAttribute]
public static bool IsNamespace(XmlAttribute attribute);
}
internal class System.Xml.XmlCharType : ValueType {
    internal static int SurHighStart;
    internal static int SurHighEnd;
    internal static int SurLowStart;
    internal static int SurLowEnd;
    internal static int SurMask;
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    private static string s_PublicIdBitmap;
    private static UInt32 CharPropertiesSize;
    internal static string s_Whitespace;
    private static string s_NCStartName;
    private static string s_NCName;
    private static string s_CharData;
    private static string s_PublicID;
    private static string s_Text;
    private static string s_AttrValue;
    private static string s_LetterXml4e;
    private static string s_NCNameXml4e;
    private static object s_Lock;
    private static Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) s_CharProperties;
    internal Byte[] charProperties;
    private static object StaticLock { get; }
    public static XmlCharType Instance { get; }
    private XmlCharType(Byte[] charProperties);
    private static object get_StaticLock();
    private static void InitInstance();
    private static void SetProperties(Byte[] chProps, string ranges, byte value);
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsNCNameSingleChar(char ch);
    public bool IsStartNCNameSingleChar(char ch);
    public bool IsNameSingleChar(char ch);
    public bool IsStartNameSingleChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsLetter(char ch);
    public bool IsNCNameCharXml4e(char ch);
    public bool IsStartNCNameCharXml4e(char ch);
    public bool IsNameCharXml4e(char ch);
    public bool IsStartNameCharXml4e(char ch);
    public static bool IsDigit(char ch);
    internal static bool IsHighSurrogate(int ch);
    internal static bool IsLowSurrogate(int ch);
    internal static bool IsSurrogate(int ch);
    internal static int CombineSurrogateChar(int lowChar, int highChar);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal int IsOnlyCharData(string str);
    internal static bool IsOnlyDigits(string str, int startPos, int len);
    internal int IsPublicId(string str);
    private static bool InRange(int value, int start, int end);
}
internal static class System.Xml.XmlConst : object {
    internal static string ReservedNsXml;
    internal static string ReservedNsXmlNs;
    internal static string ReservedNsDataType;
    internal static string ReservedNsDataTypeAlias;
    internal static string ReservedNsDataTypeOld;
    internal static string ReservedNsMsxsl;
    internal static string ReservedNsXdr;
    internal static string ReservedNsXslDebug;
    internal static string ReservedNsXdrAlias;
    internal static string ReservedNsWdXsl;
    internal static string ReservedNsXs;
    internal static string ReservedNsXsd;
    internal static string ReservedNsXsi;
    internal static string ReservedNsXslt;
    internal static string ReservedNsExsltCommon;
    internal static string ReservedNsExsltDates;
    internal static string ReservedNsExsltMath;
    internal static string ReservedNsExsltRegExps;
    internal static string ReservedNsExsltSets;
    internal static string ReservedNsExsltStrings;
    internal static string ReservedNsXQueryFunc;
    internal static string ReservedNsXQueryDataType;
    internal static string ReservedNsCollationBase;
    internal static string ReservedNsCollCodePoint;
    internal static string ReservedNsXsltInternal;
    public static string NsXml;
    public static string NsXmlNs;
    public static string AttrLang;
    public static string AttrSpace;
    public static string AttrSpaceValueDefault;
    public static string AttrSpaceValuePreserve;
    public static string AttrXmlLang;
    public static string XmlDeclarationTag;
}
internal static class System.Xml.XmlConvertEx : object {
    private static XmlCharType xmlCharType;
    private static Char[] WhitespaceChars;
    private static XmlConvertEx();
    public static double ToXPathDouble(object o);
    public static double XPathRound(double value);
    public static string TrimString(string value);
    public static String[] SplitString(string value);
    public static Uri ToUri(string s);
    public static string EscapeValueForDebuggerDisplay(string value);
    public static Exception CreateInvalidSurrogatePairException(char low, char hi);
    private static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType);
    private static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, String[] args, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, string arg, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, ExceptionType exceptionType, int lineNo, int linePos);
    public static Exception CreateInvalidCharException(string data, int invCharPos, ExceptionType exceptionType);
    public static Exception CreateInvalidHighSurrogateCharException(char hi);
    private static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType);
    private static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType, int lineNo, int linePos);
    public static void VerifyCharData(string data, ExceptionType exceptionType);
    public static void VerifyCharData(string data, ExceptionType invCharExceptionType, ExceptionType invSurrogateExceptionType);
    public static string VerifyQName(string name, ExceptionType exceptionType);
    public static string TrimStringStart(string value);
    public static string TrimStringEnd(string value);
}
[ExtensionAttribute]
internal static class System.Xml.XmlDocumentEx : object {
    [ExtensionAttribute]
public static XmlAttribute GetNamespaceXml(XmlDocument xmlDocument);
}
[ExtensionAttribute]
public static class System.Xml.XmlDocumentXPathExtensions : object {
    [ExtensionAttribute]
public static XmlNodeList SelectNodes(XmlNode node, string xpath);
    [ExtensionAttribute]
public static XmlNodeList SelectNodes(XmlNode node, string xpath, XmlNamespaceManager nsmgr);
    [ExtensionAttribute]
public static XmlNode SelectSingleNode(XmlNode node, string xpath);
    [ExtensionAttribute]
public static XmlNode SelectSingleNode(XmlNode node, string xpath, XmlNamespaceManager nsmgr);
    [ExtensionAttribute]
public static XPathNavigator CreateNavigator(XmlNode node);
    [ExtensionAttribute]
public static IXPathNavigable ToXPathNavigable(XmlNode node);
    [ExtensionAttribute]
public static XPathNavigator CreateNavigator(XmlDocument document);
    [ExtensionAttribute]
public static XPathNavigator CreateNavigator(XmlDocument document, XmlNode node);
    private static XmlNode NormalizeText(XmlNode n);
}
internal class System.Xml.XmlExceptionHelper : object {
    internal static String[] BuildCharExceptionArgs(string data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int length, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(char invChar, char nextChar);
}
[ExtensionAttribute]
internal static class System.Xml.XmlNodeEx : object {
    [ExtensionAttribute]
public static string GetXmlLang(XmlNode xmlNode);
    [ExtensionAttribute]
public static bool IsText(XmlNode xmlNode);
    private static bool IsTextNode(XmlNodeType nt);
    [ExtensionAttribute]
public static bool DecideXPNodeTypeForTextNodes(XmlNode thisObj, XmlNode node, XPathNodeType& xnt);
    [ExtensionAttribute]
public static XPathNodeType GetXPNodeType(XmlNode node);
}
internal class System.Xml.XmlNodeListEnumerator : object {
    private XPathNodeList _list;
    private int _index;
    private bool _valid;
    public object Current { get; }
    public XmlNodeListEnumerator(XPathNodeList list);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
}
internal static class System.Xml.XmlParsingHelper : object {
    public static void ParseXmlDeclarationValue(string strValue, String& version, String& encoding, String& standalone);
}
internal abstract class System.Xml.XmlRawWriter : XmlWriter {
    protected XmlRawWriterBase64Encoder base64Encoder;
    protected IXmlNamespaceResolver resolver;
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual string LookupPrefix(string ns);
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal abstract virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel conformanceLevel);
    internal abstract virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteQualifiedName(string prefix, string localName, string ns);
    internal abstract virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    internal virtual void WriteEndBase64();
    internal virtual void Close(WriteState currentState);
}
internal class System.Xml.XmlRawWriterBase64Encoder : Base64Encoder {
    private XmlRawWriter rawWriter;
    internal XmlRawWriterBase64Encoder(XmlRawWriter rawWriter);
    internal virtual void WriteChars(Char[] chars, int index, int count);
}
internal enum System.Xml.XmlStandalone : Enum {
    public int value__;
    public static XmlStandalone Omit;
    public static XmlStandalone Yes;
    public static XmlStandalone No;
}
internal class System.Xml.XmlWellFormedWriter : XmlWriter {
    private XmlWriter _writer;
    private XmlRawWriter _rawWriter;
    private IXmlNamespaceResolver _predefinedNamespaces;
    private Namespace[] _nsStack;
    private int _nsTop;
    private Dictionary`2<string, int> _nsHashtable;
    private bool _useNsHashtable;
    private ElementScope[] _elemScopeStack;
    private int _elemTop;
    private AttrName[] _attrStack;
    private int _attrCount;
    private Dictionary`2<string, int> _attrHashTable;
    private SpecialAttribute _specAttr;
    private AttributeValueCache _attrValueCache;
    private string _curDeclPrefix;
    private State[] _stateTable;
    private State _currentState;
    private bool _checkCharacters;
    private bool _omitDuplNamespaces;
    private bool _writeEndDocumentOnClose;
    private ConformanceLevel _conformanceLevel;
    private bool _dtdWritten;
    private bool _xmlDeclFollows;
    private XmlCharType _xmlCharType;
    private SecureStringHasher _hasher;
    private static int ElementStackInitialSize;
    private static int NamespaceStackInitialSize;
    private static int AttributeArrayInitialSize;
    private static int MaxAttrDuplWalkCount;
    private static int MaxNamespacesWalkCount;
    internal static String[] stateName;
    internal static String[] tokenName;
    private static WriteState[] s_state2WriteState;
    private static State[] s_StateTableDocument;
    private static State[] s_StateTableAuto;
    public WriteState WriteState { get; }
    public XmlWriterSettings Settings { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal XmlWriter InnerWriter { get; }
    internal XmlRawWriter RawWriter { get; }
    private bool SaveAttrValue { get; }
    private bool InBase64 { get; }
    private bool IsClosedOrErrorState { get; }
    internal XmlWellFormedWriter(XmlWriter writer, XmlWriterSettings settings);
    private static XmlWellFormedWriter();
    public virtual WriteState get_WriteState();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceName);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(object value);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    internal XmlWriter get_InnerWriter();
    internal XmlRawWriter get_RawWriter();
    private bool get_SaveAttrValue();
    private bool get_InBase64();
    private void SetSpecialAttribute(SpecialAttribute special);
    private void WriteStartDocumentImpl(XmlStandalone standalone);
    private void StartFragment();
    private void PushNamespaceImplicit(string prefix, string ns);
    private bool PushNamespaceExplicit(string prefix, string ns);
    private void AddNamespace(string prefix, string ns, NamespaceKind kind);
    private void AddToNamespaceHashtable(int namespaceIndex);
    private int LookupNamespaceIndex(string prefix);
    private void PopNamespaces(int indexFrom, int indexTo);
    private static XmlException DupAttrException(string prefix, string localName);
    private void AdvanceState(Token token);
    private void StartElementContent();
    private static string GetStateName(State state);
    internal string LookupNamespace(string prefix);
    private string LookupLocalNamespace(string prefix);
    private string GeneratePrefix();
    private void CheckNCName(string ncname);
    private static Exception InvalidCharsException(string name, int badCharIndex);
    private void ThrowInvalidStateTransition(Token token, State currentState);
    private bool get_IsClosedOrErrorState();
    private void AddAttribute(string prefix, string localName, string namespaceName);
    private void AddToAttrHashTable(int attributeIndex);
}
[ExtensionAttribute]
internal static class System.Xml.XPath.XPathNavigatorEx : object {
    private static int AllMask;
    private static int NoAttrNmspMask;
    private static int TextMask;
    private static Int32[] ContentKindMasks;
    private static XPathNavigatorEx();
    public static int GetContentKindMask(XPathNodeType type);
    public static int GetKindMask(XPathNodeType type);
    [ExtensionAttribute]
public static bool MoveToNonDescendant(XPathNavigator xpNavigator);
}
internal class System.Xml.XPathNodeList : XmlNodeList {
    private List`1<XmlNode> _list;
    private XPathNodeIterator _nodeIterator;
    private bool _done;
    public int Count { get; }
    public XPathNodeList(XPathNodeIterator nodeIterator);
    public virtual int get_Count();
    private XmlNode GetNode(XPathNavigator n);
    internal int ReadUntil(int index);
    public virtual XmlNode Item(int index);
    public virtual IEnumerator GetEnumerator();
}
