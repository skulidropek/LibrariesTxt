internal static class FxResources.System.Xml.XPath.SR : object {
}
internal enum MS.Internal.Xml.Cache.TextBlockType : Enum {
    public int value__;
    public static TextBlockType None;
    public static TextBlockType Text;
    public static TextBlockType SignificantWhitespace;
    public static TextBlockType Whitespace;
}
internal abstract class MS.Internal.Xml.Cache.XPathDocumentBaseIterator : XPathNodeIterator {
    protected XPathDocumentNavigator ctxt;
    protected int pos;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected XPathDocumentBaseIterator(XPathDocumentNavigator ctxt);
    protected XPathDocumentBaseIterator(XPathDocumentBaseIterator iter);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
}
internal class MS.Internal.Xml.Cache.XPathDocumentBuilder : XmlRawWriter {
    private NodePageFactory _nodePageFact;
    private NodePageFactory _nmspPageFact;
    private TextBlockBuilder _textBldr;
    private Stack`1<XPathNodeRef> _stkNmsp;
    private XPathNodeInfoTable _infoTable;
    private XPathDocument _doc;
    private IXmlLineInfo _lineInfo;
    private XmlNameTable _nameTable;
    private bool _atomizeNames;
    private XPathNode[] _pageNmsp;
    private int _idxNmsp;
    private XPathNode[] _pageParent;
    private int _idxParent;
    private XPathNode[] _pageSibling;
    private int _idxSibling;
    private int _lineNumBase;
    private int _linePosBase;
    private XPathNodeRef[] _elemNameIndex;
    private static int ElementIndexSize;
    public XPathDocumentBuilder(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags);
    public void Initialize(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public void WriteStartElement(string prefix, string localName, string ns, string baseUri);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    internal virtual void WriteEndElement(string prefix, string localName, string namespaceName);
    internal virtual void WriteFullEndElement(string prefix, string localName, string namespaceName);
    public void WriteEndElement(bool allowShortcutTag);
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceName);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public void WriteProcessingInstruction(string name, string text, string baseUri);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public void WriteString(string text, TextBlockType textType);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    internal void CloseWithoutDisposing();
    public virtual void Flush();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    private XPathNodeRef LinkSimilarElements(XPathNode[] pagePrev, int idxPrev, XPathNode[] pageNext, int idxNext);
    private int NewNamespaceNode(XPathNode[]& page, string prefix, string namespaceUri, XPathNode[] pageElem, int idxElem);
    private int NewNode(XPathNode[]& page, XPathNodeType xptyp, string localName, string namespaceUri, string prefix, string baseUri);
    private void ComputeLineInfo(bool isTextNode, Int32& lineNumOffset, Int32& linePosOffset);
    private void AddSibling(XPathNodeType xptyp, string localName, string namespaceUri, string prefix, string baseUri);
    private void CachedTextNode();
}
internal class MS.Internal.Xml.Cache.XPathDocumentElementChildIterator : XPathDocumentBaseIterator {
    private string _localName;
    private string _namespaceUri;
    public XPathDocumentElementChildIterator(XPathDocumentNavigator parent, string name, string namespaceURI);
    public XPathDocumentElementChildIterator(XPathDocumentElementChildIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator : XPathDocumentBaseIterator {
    private XPathDocumentNavigator _end;
    private string _localName;
    private string _namespaceUri;
    private bool _matchSelf;
    public XPathDocumentElementDescendantIterator(XPathDocumentNavigator root, string name, string namespaceURI, bool matchSelf);
    public XPathDocumentElementDescendantIterator(XPathDocumentElementDescendantIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentKindChildIterator : XPathDocumentBaseIterator {
    private XPathNodeType _typ;
    public XPathDocumentKindChildIterator(XPathDocumentNavigator parent, XPathNodeType typ);
    public XPathDocumentKindChildIterator(XPathDocumentKindChildIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator : XPathDocumentBaseIterator {
    private XPathDocumentNavigator _end;
    private XPathNodeType _typ;
    private bool _matchSelf;
    public XPathDocumentKindDescendantIterator(XPathDocumentNavigator root, XPathNodeType typ, bool matchSelf);
    public XPathDocumentKindDescendantIterator(XPathDocumentKindDescendantIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentNavigator : XPathNavigator {
    private XPathNode[] _pageCurrent;
    private XPathNode[] _pageParent;
    private int _idxCurrent;
    private int _idxParent;
    private string _atomizedLocalName;
    public string Value { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlNameTable NameTable { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    internal string UniqueId { get; }
    public object UnderlyingObject { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XPathDocumentNavigator(XPathNode[] pageCurrent, int idxCurrent, XPathNode[] pageParent, int idxParent);
    public XPathDocumentNavigator(XPathDocumentNavigator nav);
    public virtual string get_Value();
    public virtual XPathNavigator Clone();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlNameTable get_NameTable();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool get_HasAttributes();
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool get_HasChildren();
    public virtual void MoveToRoot();
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator other);
    private int GetPrimaryLocation();
    private int GetSecondaryLocation();
    internal virtual string get_UniqueId();
    public virtual object get_UnderlyingObject();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public int GetPositionHashCode();
    public bool IsElementMatch(string localName, string namespaceURI);
    public bool IsKindMatch(XPathNodeType typ);
    private int GetFollowingEnd(XPathDocumentNavigator end, bool useParentOfVirtual, XPathNode[]& pageEnd);
}
internal class MS.Internal.Xml.Cache.XPathNode : ValueType {
    private XPathNodeInfoAtom _info;
    private ushort _idxSibling;
    private ushort _idxParent;
    private ushort _idxSimilar;
    private ushort _posOffset;
    private UInt32 _props;
    private string _value;
    private static UInt32 NodeTypeMask;
    private static UInt32 HasAttributeBit;
    private static UInt32 HasContentChildBit;
    private static UInt32 HasElementChildBit;
    private static UInt32 HasCollapsedTextBit;
    private static UInt32 AllowShortcutTagBit;
    private static UInt32 HasNmspDeclsBit;
    private static UInt32 LineNumberMask;
    private static int LineNumberShift;
    private static int CollapsedPositionShift;
    public static int MaxLineNumberOffset;
    public static int MaxLinePositionOffset;
    public static int MaxCollapsedPositionOffset;
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceUri { get; }
    public XPathDocument Document { get; }
    public string BaseUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public int CollapsedLinePosition { get; }
    public XPathNodePageInfo PageInfo { get; }
    public bool IsXmlNamespaceNode { get; }
    public bool HasSibling { get; }
    public bool HasCollapsedText { get; }
    public bool HasAttribute { get; }
    public bool HasContentChild { get; }
    public bool HasElementChild { get; }
    public bool IsAttrNmsp { get; }
    public bool IsText { get; }
    public bool HasNamespaceDecls { get; public set; }
    public bool AllowShortcutTag { get; }
    public int LocalNameHashCode { get; }
    public string Value { get; }
    public XPathNodeType get_NodeType();
    public string get_Prefix();
    public string get_LocalName();
    public string get_Name();
    public string get_NamespaceUri();
    public XPathDocument get_Document();
    public string get_BaseUri();
    public int get_LineNumber();
    public int get_LinePosition();
    public int get_CollapsedLinePosition();
    public XPathNodePageInfo get_PageInfo();
    public int GetRoot(XPathNode[]& pageNode);
    public int GetParent(XPathNode[]& pageNode);
    public int GetSibling(XPathNode[]& pageNode);
    public int GetSimilarElement(XPathNode[]& pageNode);
    public bool NameMatch(string localName, string namespaceName);
    public bool ElementMatch(string localName, string namespaceName);
    public bool get_IsXmlNamespaceNode();
    public bool get_HasSibling();
    public bool get_HasCollapsedText();
    public bool get_HasAttribute();
    public bool get_HasContentChild();
    public bool get_HasElementChild();
    public bool get_IsAttrNmsp();
    public bool get_IsText();
    public bool get_HasNamespaceDecls();
    public void set_HasNamespaceDecls(bool value);
    public bool get_AllowShortcutTag();
    public int get_LocalNameHashCode();
    public string get_Value();
    public void Create(XPathNodePageInfo pageInfo);
    public void Create(XPathNodeInfoAtom info, XPathNodeType xptyp, int idxParent);
    public void SetLineInfoOffsets(int lineNumOffset, int linePosOffset);
    public void SetCollapsedLineInfoOffset(int posOffset);
    public void SetValue(string value);
    public void SetEmptyValue(bool allowShortcutTag);
    public void SetCollapsedValue(string value);
    public void SetParentProperties(XPathNodeType xptyp);
    public void SetSibling(XPathNodeInfoTable infoTable, XPathNode[] pageSibling, int idxSibling);
    public void SetSimilarElement(XPathNodeInfoTable infoTable, XPathNode[] pageSimilar, int idxSimilar);
}
internal abstract class MS.Internal.Xml.Cache.XPathNodeHelper : object {
    public static int GetLocalNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    public static int GetInScopeNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    public static bool GetFirstAttribute(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetNextAttribute(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetParent(XPathNode[]& pageNode, Int32& idxNode);
    public static int GetLocation(XPathNode[] pageNode, int idxNode);
    public static bool GetElementChild(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetElementSibling(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ);
    public static bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ);
    public static bool GetPreviousContentSibling(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetAttribute(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetElementFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, string localName, string namespaceName);
    public static bool GetContentFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, XPathNodeType typ);
    public static bool GetTextFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd);
    public static bool GetNonDescendant(XPathNode[]& pageNode, Int32& idxNode);
    private static void GetChild(XPathNode[]& pageNode, Int32& idxNode);
}
internal class MS.Internal.Xml.Cache.XPathNodeInfoAtom : object {
    private string _localName;
    private string _namespaceUri;
    private string _prefix;
    private string _baseUri;
    private XPathNode[] _pageParent;
    private XPathNode[] _pageSibling;
    private XPathNode[] _pageSimilar;
    private XPathDocument _doc;
    private int _lineNumBase;
    private int _linePosBase;
    private int _hashCode;
    private int _localNameHash;
    private XPathNodeInfoAtom _next;
    private XPathNodePageInfo _pageInfo;
    public XPathNodePageInfo PageInfo { get; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public string Prefix { get; }
    public string BaseUri { get; }
    public XPathNode[] SiblingPage { get; }
    public XPathNode[] SimilarElementPage { get; }
    public XPathNode[] ParentPage { get; }
    public XPathDocument Document { get; }
    public int LineNumberBase { get; }
    public int LinePositionBase { get; }
    public int LocalNameHashCode { get; }
    public XPathNodeInfoAtom Next { get; public set; }
    public XPathNodeInfoAtom(XPathNodePageInfo pageInfo);
    public XPathNodeInfoAtom(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    public void Init(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    public XPathNodePageInfo get_PageInfo();
    public string get_LocalName();
    public string get_NamespaceUri();
    public string get_Prefix();
    public string get_BaseUri();
    public XPathNode[] get_SiblingPage();
    public XPathNode[] get_SimilarElementPage();
    public XPathNode[] get_ParentPage();
    public XPathDocument get_Document();
    public int get_LineNumberBase();
    public int get_LinePositionBase();
    public int get_LocalNameHashCode();
    public XPathNodeInfoAtom get_Next();
    public void set_Next(XPathNodeInfoAtom value);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public sealed virtual bool Equals(XPathNodeInfoAtom other);
    public virtual string ToString();
}
internal class MS.Internal.Xml.Cache.XPathNodeInfoTable : object {
    private XPathNodeInfoAtom[] _hashTable;
    private int _sizeTable;
    private XPathNodeInfoAtom _infoCached;
    private static int DefaultTableSize;
    public XPathNodeInfoAtom Create(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    private XPathNodeInfoAtom Atomize(XPathNodeInfoAtom info);
    private void AddInfo(XPathNodeInfoAtom info);
    public virtual string ToString();
}
internal class MS.Internal.Xml.Cache.XPathNodePageInfo : object {
    private int _pageNum;
    private int _nodeCount;
    private XPathNode[] _pagePrev;
    private XPathNode[] _pageNext;
    public int PageNumber { get; }
    public int NodeCount { get; public set; }
    public XPathNode[] PreviousPage { get; }
    public XPathNode[] NextPage { get; public set; }
    public XPathNodePageInfo(XPathNode[] pagePrev, int pageNum);
    public int get_PageNumber();
    public int get_NodeCount();
    public void set_NodeCount(int value);
    public XPathNode[] get_PreviousPage();
    public XPathNode[] get_NextPage();
    public void set_NextPage(XPathNode[] value);
}
internal class MS.Internal.Xml.Cache.XPathNodeRef : ValueType {
    private XPathNode[] _page;
    private int _idx;
    public XPathNode[] Page { get; }
    public int Index { get; }
    public XPathNodeRef(XPathNode[] page, int idx);
    public XPathNode[] get_Page();
    public int get_Index();
    public virtual int GetHashCode();
}
internal class MS.Internal.Xml.XPath.AbsoluteQuery : ContextQuery {
    private AbsoluteQuery(AbsoluteQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal abstract class MS.Internal.Xml.XPath.AstNode : object {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual AstType get_Type();
    public abstract virtual XPathResultType get_ReturnType();
}
internal class MS.Internal.Xml.XPath.AttributeQuery : BaseAxisQuery {
    private bool _onAttribute;
    public AttributeQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type);
    private AttributeQuery(AttributeQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Axis : AstNode {
    private AxisType _axisType;
    private AstNode _input;
    private string _prefix;
    private string _name;
    private XPathNodeType _nodeType;
    protected bool abbrAxis;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode Input { get; }
    public string Prefix { get; }
    public string Name { get; }
    public XPathNodeType NodeType { get; }
    public AxisType TypeOfAxis { get; }
    public bool AbbrAxis { get; }
    public Axis(AxisType axisType, AstNode input, string prefix, string name, XPathNodeType nodetype);
    public Axis(AxisType axisType, AstNode input);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_Input();
    public string get_Prefix();
    public string get_Name();
    public XPathNodeType get_NodeType();
    public AxisType get_TypeOfAxis();
    public bool get_AbbrAxis();
}
internal abstract class MS.Internal.Xml.XPath.BaseAxisQuery : Query {
    internal Query qyInput;
    private bool _nameTest;
    private string _name;
    private string _prefix;
    private string _nsUri;
    private XPathNodeType _typeTest;
    protected XPathNavigator currentNode;
    protected int position;
    protected string Name { get; }
    protected string Prefix { get; }
    protected string Namespace { get; }
    protected bool NameTest { get; }
    protected XPathNodeType TypeTest { get; }
    public int CurrentPosition { get; }
    public XPathNavigator Current { get; }
    public double XsltDefaultPriority { get; }
    public XPathResultType StaticType { get; }
    protected BaseAxisQuery(Query qyInput);
    protected BaseAxisQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected BaseAxisQuery(BaseAxisQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext context);
    protected string get_Name();
    protected string get_Prefix();
    protected string get_Namespace();
    protected bool get_NameTest();
    protected XPathNodeType get_TypeTest();
    public virtual int get_CurrentPosition();
    public virtual XPathNavigator get_Current();
    public virtual bool matches(XPathNavigator e);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual double get_XsltDefaultPriority();
    public virtual XPathResultType get_StaticType();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.BooleanExpr : ValueQuery {
    private Query _opnd1;
    private Query _opnd2;
    private bool _isOr;
    public XPathResultType StaticType { get; }
    public BooleanExpr(Op op, Query opnd1, Query opnd2);
    private BooleanExpr(BooleanExpr other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.BooleanFunctions : ValueQuery {
    private Query _arg;
    private FunctionType _funcType;
    public XPathResultType StaticType { get; }
    public BooleanFunctions(FunctionType funcType, Query arg);
    private BooleanFunctions(BooleanFunctions other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    internal static bool toBoolean(double number);
    internal static bool toBoolean(string str);
    internal bool toBoolean(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    private bool Not(XPathNodeIterator nodeIterator);
    private bool Lang(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal abstract class MS.Internal.Xml.XPath.CacheAxisQuery : BaseAxisQuery {
    protected List`1<XPathNavigator> outputBuffer;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public CacheAxisQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected CacheAxisQuery(CacheAxisQuery other);
    public virtual void Reset();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.CacheChildrenQuery : ChildrenQuery {
    private XPathNavigator _nextInput;
    private ClonableStack`1<XPathNavigator> _elementStk;
    private ClonableStack`1<int> _positionStk;
    private bool _needInput;
    public CacheChildrenQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    private CacheChildrenQuery(CacheChildrenQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    private bool DecideNextNode();
    private XPathNavigator GetNextInput();
    public virtual XPathNodeIterator Clone();
}
internal abstract class MS.Internal.Xml.XPath.CacheOutputQuery : Query {
    internal Query input;
    protected List`1<XPathNavigator> outputBuffer;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public CacheOutputQuery(Query input);
    protected CacheOutputQuery(CacheOutputQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.ChildrenQuery : BaseAxisQuery {
    private XPathNodeIterator _iterator;
    public ChildrenQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    protected ChildrenQuery(ChildrenQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public sealed virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.ClonableStack`1 : List`1<T> {
    public ClonableStack`1(int capacity);
    private ClonableStack`1(IEnumerable`1<T> collection);
    public void Push(T value);
    public T Pop();
    public T Peek();
    public ClonableStack`1<T> Clone();
}
internal class MS.Internal.Xml.XPath.CompiledXpathExpr : XPathExpression {
    private Query _query;
    private string _expr;
    private bool _needContext;
    internal Query QueryTree { get; }
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    internal CompiledXpathExpr(Query query, string expression, bool needContext);
    internal Query get_QueryTree();
    public virtual string get_Expression();
    public virtual void CheckErrors();
    public virtual void AddSort(object expr, IComparer comparer);
    public virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public virtual XPathExpression Clone();
    public virtual void SetContext(XmlNamespaceManager nsManager);
    public virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public virtual XPathResultType get_ReturnType();
}
internal class MS.Internal.Xml.XPath.ContextQuery : Query {
    protected XPathNavigator contextNode;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    protected ContextQuery(ContextQuery other);
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal abstract class MS.Internal.Xml.XPath.DescendantBaseQuery : BaseAxisQuery {
    protected bool matchSelf;
    protected bool abbrAxis;
    public DescendantBaseQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis);
    public DescendantBaseQuery(DescendantBaseQuery other);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.DescendantOverDescendantQuery : DescendantBaseQuery {
    private int _level;
    public DescendantOverDescendantQuery(Query qyParent, bool matchSelf, string name, string prefix, XPathNodeType typeTest, bool abbrAxis);
    private DescendantOverDescendantQuery(DescendantOverDescendantQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    private bool MoveToFirstChild();
    private bool MoveUpUntilNext();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.DescendantQuery : DescendantBaseQuery {
    private XPathNodeIterator _nodeIterator;
    internal DescendantQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis);
    public DescendantQuery(DescendantQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.DocumentOrderQuery : CacheOutputQuery {
    public DocumentOrderQuery(Query qyParent);
    private DocumentOrderQuery(DocumentOrderQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.EmptyQuery : Query {
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public XPathResultType StaticType { get; }
    public XPathNavigator Current { get; }
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
    public virtual XPathResultType get_StaticType();
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
}
internal abstract class MS.Internal.Xml.XPath.ExtensionQuery : Query {
    protected string prefix;
    protected string name;
    protected XsltContext xsltContext;
    private ResetableIterator _queryIterator;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected string QName { get; }
    public int Count { get; }
    public XPathResultType StaticType { get; }
    public ExtensionQuery(string prefix, string name);
    protected ExtensionQuery(ExtensionQuery other);
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
    public virtual XPathNavigator Advance();
    public virtual int get_CurrentPosition();
    protected object ProcessResult(object value);
    protected string get_QName();
    public virtual int get_Count();
    public virtual XPathResultType get_StaticType();
}
internal class MS.Internal.Xml.XPath.Filter : AstNode {
    private AstNode _input;
    private AstNode _condition;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode Input { get; }
    public AstNode Condition { get; }
    public Filter(AstNode input, AstNode condition);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_Input();
    public AstNode get_Condition();
}
internal class MS.Internal.Xml.XPath.FilterQuery : BaseAxisQuery {
    private Query _cond;
    private bool _noPosition;
    public Query Condition { get; }
    public QueryProps Properties { get; }
    public FilterQuery(Query qyParent, Query cond, bool noPosition);
    private FilterQuery(FilterQuery other);
    public virtual void Reset();
    public Query get_Condition();
    public virtual void SetXsltContext(XsltContext input);
    public virtual XPathNavigator Advance();
    internal bool EvaluatePredicate();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual QueryProps get_Properties();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.FollowingQuery : BaseAxisQuery {
    private XPathNavigator _input;
    private XPathNodeIterator _iterator;
    public FollowingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    private FollowingQuery(FollowingQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.FollSiblingQuery : BaseAxisQuery {
    private ClonableStack`1<XPathNavigator> _elementStk;
    private List`1<XPathNavigator> _parentStk;
    private XPathNavigator _nextInput;
    public FollSiblingQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    private FollSiblingQuery(FollSiblingQuery other);
    public virtual void Reset();
    private bool Visited(XPathNavigator nav);
    private XPathNavigator FetchInput();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.ForwardPositionQuery : CacheOutputQuery {
    public ForwardPositionQuery(Query input);
    protected ForwardPositionQuery(ForwardPositionQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Function : AstNode {
    private FunctionType _functionType;
    private List`1<AstNode> _argumentList;
    private string _name;
    private string _prefix;
    internal static XPathResultType[] ReturnTypes;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public FunctionType TypeOfFunction { get; }
    public List`1<AstNode> ArgumentList { get; }
    public string Prefix { get; }
    public string Name { get; }
    public Function(FunctionType ftype, List`1<AstNode> argumentList);
    public Function(string prefix, string name, List`1<AstNode> argumentList);
    public Function(FunctionType ftype, AstNode arg);
    private static Function();
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public FunctionType get_TypeOfFunction();
    public List`1<AstNode> get_ArgumentList();
    public string get_Prefix();
    public string get_Name();
}
internal class MS.Internal.Xml.XPath.FunctionQuery : ExtensionQuery {
    private IList`1<Query> _args;
    private IXsltContextFunction _function;
    public XPathResultType StaticType { get; }
    public FunctionQuery(string prefix, string name, List`1<Query> args);
    private FunctionQuery(FunctionQuery other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNavigator MatchNode(XPathNavigator navigator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.Group : AstNode {
    private AstNode _groupNode;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode GroupNode { get; }
    public Group(AstNode groupNode);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_GroupNode();
}
internal class MS.Internal.Xml.XPath.GroupQuery : BaseAxisQuery {
    public XPathResultType StaticType { get; }
    public QueryProps Properties { get; }
    public GroupQuery(Query qy);
    private GroupQuery(GroupQuery other);
    public virtual XPathNavigator Advance();
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.IDQuery : CacheOutputQuery {
    public IDQuery(Query arg);
    private IDQuery(IDQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    private void ProcessIds(XPathNavigator contextNode, string val);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.IteratorFilter : XPathNodeIterator {
    private XPathNodeIterator _innerIterator;
    private string _name;
    private int _position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal IteratorFilter(XPathNodeIterator innerIterator, string name);
    private IteratorFilter(IteratorFilter it);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.LogicalExpr : ValueQuery {
    private Op _op;
    private Query _opnd1;
    private Query _opnd2;
    private static cmpXslt[][] s_CompXsltE;
    private static cmpXslt[][] s_CompXsltO;
    public XPathResultType StaticType { get; }
    public LogicalExpr(Op op, Query opnd1, Query opnd2);
    private LogicalExpr(LogicalExpr other);
    private static LogicalExpr();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    private static bool cmpQueryQueryE(Op op, object val1, object val2);
    private static bool cmpQueryQueryO(Op op, object val1, object val2);
    private static bool cmpQueryNumber(Op op, object val1, object val2);
    private static bool cmpQueryStringE(Op op, object val1, object val2);
    private static bool cmpQueryStringO(Op op, object val1, object val2);
    private static bool cmpRtfQueryE(Op op, object val1, object val2);
    private static bool cmpRtfQueryO(Op op, object val1, object val2);
    private static bool cmpQueryBoolE(Op op, object val1, object val2);
    private static bool cmpQueryBoolO(Op op, object val1, object val2);
    private static bool cmpBoolBoolE(Op op, bool n1, bool n2);
    private static bool cmpBoolBoolE(Op op, object val1, object val2);
    private static bool cmpBoolBoolO(Op op, object val1, object val2);
    private static bool cmpBoolNumberE(Op op, object val1, object val2);
    private static bool cmpBoolNumberO(Op op, object val1, object val2);
    private static bool cmpBoolStringE(Op op, object val1, object val2);
    private static bool cmpRtfBoolE(Op op, object val1, object val2);
    private static bool cmpBoolStringO(Op op, object val1, object val2);
    private static bool cmpRtfBoolO(Op op, object val1, object val2);
    private static bool cmpNumberNumber(Op op, double n1, double n2);
    private static bool cmpNumberNumberO(Op op, double n1, double n2);
    private static bool cmpNumberNumber(Op op, object val1, object val2);
    private static bool cmpStringNumber(Op op, object val1, object val2);
    private static bool cmpRtfNumber(Op op, object val1, object val2);
    private static bool cmpStringStringE(Op op, string n1, string n2);
    private static bool cmpStringStringE(Op op, object val1, object val2);
    private static bool cmpRtfStringE(Op op, object val1, object val2);
    private static bool cmpRtfRtfE(Op op, object val1, object val2);
    private static bool cmpStringStringO(Op op, object val1, object val2);
    private static bool cmpRtfStringO(Op op, object val1, object val2);
    private static bool cmpRtfRtfO(Op op, object val1, object val2);
    public virtual XPathNodeIterator Clone();
    private static string Rtf(object o);
    public virtual XPathResultType get_StaticType();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.MergeFilterQuery : CacheOutputQuery {
    private Query _child;
    public MergeFilterQuery(Query input, Query child);
    private MergeFilterQuery(MergeFilterQuery other);
    public virtual void SetXsltContext(XsltContext xsltContext);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.NamespaceQuery : BaseAxisQuery {
    private bool _onNamespace;
    public NamespaceQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type);
    private NamespaceQuery(NamespaceQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual bool matches(XPathNavigator e);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.NodeFunctions : ValueQuery {
    private Query _arg;
    private FunctionType _funcType;
    private XsltContext _xsltContext;
    public XPathResultType StaticType { get; }
    public NodeFunctions(FunctionType funcType, Query arg);
    public virtual void SetXsltContext(XsltContext context);
    private XPathNavigator EvaluateArg(XPathNodeIterator context);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.NumberFunctions : ValueQuery {
    private Query _arg;
    private FunctionType _ftype;
    public XPathResultType StaticType { get; }
    public NumberFunctions(FunctionType ftype, Query arg);
    private NumberFunctions(NumberFunctions other);
    public virtual void SetXsltContext(XsltContext context);
    internal static double Number(bool arg);
    internal static double Number(string arg);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    private double Number(XPathNodeIterator nodeIterator);
    private double Sum(XPathNodeIterator nodeIterator);
    private double Floor(XPathNodeIterator nodeIterator);
    private double Ceiling(XPathNodeIterator nodeIterator);
    private double Round(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.NumericExpr : ValueQuery {
    private Op _op;
    private Query _opnd1;
    private Query _opnd2;
    public XPathResultType StaticType { get; }
    public NumericExpr(Op op, Query opnd1, Query opnd2);
    private NumericExpr(NumericExpr other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    private static double GetValue(Op op, double n1, double n2);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.Operand : AstNode {
    private XPathResultType _type;
    private object _val;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public object OperandValue { get; }
    public Operand(string val);
    public Operand(double val);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public object get_OperandValue();
}
internal class MS.Internal.Xml.XPath.OperandQuery : ValueQuery {
    internal object val;
    public XPathResultType StaticType { get; }
    public OperandQuery(object val);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.Operator : AstNode {
    private static Op[] s_invertOp;
    private Op _opType;
    private AstNode _opnd1;
    private AstNode _opnd2;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public Op OperatorType { get; }
    public AstNode Operand1 { get; }
    public AstNode Operand2 { get; }
    public Operator(Op op, AstNode opnd1, AstNode opnd2);
    private static Operator();
    public static Op InvertOperator(Op op);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public Op get_OperatorType();
    public AstNode get_Operand1();
    public AstNode get_Operand2();
}
internal class MS.Internal.Xml.XPath.ParentQuery : CacheAxisQuery {
    public ParentQuery(Query qyInput, string Name, string Prefix, XPathNodeType Type);
    private ParentQuery(ParentQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.PrecedingQuery : BaseAxisQuery {
    private XPathNodeIterator _workIterator;
    private ClonableStack`1<XPathNavigator> _ancestorStk;
    public QueryProps Properties { get; }
    public PrecedingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    private PrecedingQuery(PrecedingQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.PreSiblingQuery : CacheAxisQuery {
    public QueryProps Properties { get; }
    public PreSiblingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected PreSiblingQuery(PreSiblingQuery other);
    private static bool NotVisited(XPathNavigator nav, List`1<XPathNavigator> parentStk);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
    public virtual QueryProps get_Properties();
}
[DebuggerDisplayAttribute("{ToString()}")]
internal abstract class MS.Internal.Xml.XPath.Query : ResetableIterator {
    public static XPathResultType XPathResultType_Navigator;
    public int Count { get; }
    public double XsltDefaultPriority { get; }
    public XPathResultType StaticType { get; }
    public QueryProps Properties { get; }
    protected Query(Query other);
    public virtual bool MoveNext();
    public virtual int get_Count();
    public virtual void SetXsltContext(XsltContext context);
    public abstract virtual object Evaluate(XPathNodeIterator nodeIterator);
    public abstract virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual double get_XsltDefaultPriority();
    public abstract virtual XPathResultType get_StaticType();
    public virtual QueryProps get_Properties();
    public static Query Clone(Query input);
    protected static XPathNodeIterator Clone(XPathNodeIterator input);
    protected static XPathNavigator Clone(XPathNavigator input);
    public static bool Insert(List`1<XPathNavigator> buffer, XPathNavigator nav);
    private static int GetMedian(int l, int r);
    public static XmlNodeOrder CompareNodes(XPathNavigator l, XPathNavigator r);
    protected XPathResultType GetXPathType(object value);
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.QueryBuilder : object {
    private string _query;
    private bool _allowVar;
    private bool _allowKey;
    private bool _allowCurrent;
    private bool _needContext;
    private BaseAxisQuery _firstInput;
    private int _parseDepth;
    private static int MaxParseDepth;
    private void Reset();
    private Query ProcessAxis(Axis root, Flags flags, Props& props);
    private static bool CanBeNumber(Query q);
    private Query ProcessFilter(Filter root, Flags flags, Props& props);
    private Query ProcessOperator(Operator root, Props& props);
    private Query ProcessVariable(Variable root);
    private Query ProcessFunction(Function root, Props& props);
    private List`1<Query> ProcessArguments(List`1<AstNode> args, Props& props);
    private Query ProcessNode(AstNode root, Flags flags, Props& props);
    private Query Build(AstNode root, string query);
    internal Query Build(string query, bool allowVar, bool allowKey);
    internal Query Build(string query, Boolean& needContext);
    internal Query BuildPatternQuery(string query, bool allowVar, bool allowKey);
    internal Query BuildPatternQuery(string query, Boolean& needContext);
}
internal enum MS.Internal.Xml.XPath.QueryProps : Enum {
    public int value__;
    public static QueryProps None;
    public static QueryProps Position;
    public static QueryProps Count;
    public static QueryProps Cached;
    public static QueryProps Reverse;
    public static QueryProps Merge;
}
internal abstract class MS.Internal.Xml.XPath.ResetableIterator : XPathNodeIterator {
    public int CurrentPosition { get; }
    protected ResetableIterator(ResetableIterator other);
    protected void ResetCount();
    public abstract virtual void Reset();
    public virtual bool MoveToPosition(int pos);
    public abstract virtual int get_CurrentPosition();
}
internal class MS.Internal.Xml.XPath.ReversePositionQuery : ForwardPositionQuery {
    public int CurrentPosition { get; }
    public QueryProps Properties { get; }
    public ReversePositionQuery(Query input);
    private ReversePositionQuery(ReversePositionQuery other);
    public virtual XPathNodeIterator Clone();
    public virtual int get_CurrentPosition();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.Root : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Xml.XPath.SortKey : object {
    private int _numKeys;
    private Object[] _keys;
    private int _originalPosition;
    private XPathNavigator _node;
    public object Item { get; public set; }
    public int NumKeys { get; }
    public int OriginalPosition { get; }
    public XPathNavigator Node { get; }
    public SortKey(int numKeys, int originalPosition, XPathNavigator node);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int get_NumKeys();
    public int get_OriginalPosition();
    public XPathNavigator get_Node();
}
internal class MS.Internal.Xml.XPath.SortQuery : Query {
    private List`1<SortKey> _results;
    private XPathSortComparer _comparer;
    private Query _qyInput;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public SortQuery(Query qyInput);
    private SortQuery(SortQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext xsltContext);
    private void BuildResultsList();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    internal void AddSort(Query evalQuery, IComparer comparer);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.StringFunctions : ValueQuery {
    private FunctionType _funcType;
    private IList`1<Query> _argList;
    private static CompareInfo s_compareInfo;
    public XPathResultType StaticType { get; }
    public StringFunctions(FunctionType funcType, IList`1<Query> argList);
    private StringFunctions(StringFunctions other);
    private static StringFunctions();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    internal static string toString(double num);
    internal static string toString(bool b);
    private string toString(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    private string Concat(XPathNodeIterator nodeIterator);
    private bool StartsWith(XPathNodeIterator nodeIterator);
    private bool Contains(XPathNodeIterator nodeIterator);
    private string SubstringBefore(XPathNodeIterator nodeIterator);
    private string SubstringAfter(XPathNodeIterator nodeIterator);
    private string Substring(XPathNodeIterator nodeIterator);
    private double StringLength(XPathNodeIterator nodeIterator);
    private string Normalize(XPathNodeIterator nodeIterator);
    private string Translate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.UnionExpr : Query {
    internal Query qy1;
    internal Query qy2;
    private bool _advance1;
    private bool _advance2;
    private XPathNavigator _currentNode;
    private XPathNavigator _nextNode;
    public XPathResultType StaticType { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public UnionExpr(Query query1, Query query2);
    private UnionExpr(UnionExpr other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext xsltContext);
    public virtual object Evaluate(XPathNodeIterator context);
    private XPathNavigator ProcessSamePosition(XPathNavigator result);
    private XPathNavigator ProcessBeforePosition(XPathNavigator res1, XPathNavigator res2);
    private XPathNavigator ProcessAfterPosition(XPathNavigator res1, XPathNavigator res2);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator xsltContext);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual void PrintQuery(XmlWriter w);
}
internal abstract class MS.Internal.Xml.XPath.ValueQuery : Query {
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    protected ValueQuery(ValueQuery other);
    public sealed virtual void Reset();
    public sealed virtual XPathNavigator get_Current();
    public sealed virtual int get_CurrentPosition();
    public sealed virtual int get_Count();
    public sealed virtual XPathNavigator Advance();
}
internal class MS.Internal.Xml.XPath.Variable : AstNode {
    private string _localname;
    private string _prefix;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public string Localname { get; }
    public string Prefix { get; }
    public Variable(string name, string prefix);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public string get_Localname();
    public string get_Prefix();
}
internal class MS.Internal.Xml.XPath.VariableQuery : ExtensionQuery {
    private IXsltContextVariable _variable;
    public XPathResultType StaticType { get; }
    public VariableQuery(string name, string prefix);
    private VariableQuery(VariableQuery other);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.XPathAncestorIterator : XPathAxisIterator {
    public XPathAncestorIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathAncestorIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathAncestorIterator(XPathAncestorIterator other);
    public virtual bool MoveNext();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathAncestorQuery : CacheAxisQuery {
    private bool _matchSelf;
    public int CurrentPosition { get; }
    public QueryProps Properties { get; }
    public XPathAncestorQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest, bool matchSelf);
    private XPathAncestorQuery(XPathAncestorQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
    public virtual int get_CurrentPosition();
    public virtual QueryProps get_Properties();
    public virtual void PrintQuery(XmlWriter w);
}
[DebuggerDisplayAttribute("Position={CurrentPosition}, Current={debuggerDisplayProxy, nq}")]
internal class MS.Internal.Xml.XPath.XPathArrayIterator : ResetableIterator {
    protected IList list;
    protected int index;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private object debuggerDisplayProxy { get; }
    public XPathArrayIterator(XPathArrayIterator it);
    public XPathArrayIterator(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
    public virtual IEnumerator GetEnumerator();
    private object get_debuggerDisplayProxy();
}
internal abstract class MS.Internal.Xml.XPath.XPathAxisIterator : XPathNodeIterator {
    internal XPathNavigator nav;
    internal XPathNodeType type;
    internal string name;
    internal string uri;
    internal int position;
    internal bool matchSelf;
    internal bool first;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected bool Matches { get; }
    public XPathAxisIterator(XPathNavigator nav, bool matchSelf);
    public XPathAxisIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathAxisIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathAxisIterator(XPathAxisIterator it);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    protected virtual bool get_Matches();
}
internal class MS.Internal.Xml.XPath.XPathChildIterator : XPathAxisIterator {
    public XPathChildIterator(XPathNavigator nav, XPathNodeType type);
    public XPathChildIterator(XPathNavigator nav, string name, string namespaceURI);
    public XPathChildIterator(XPathChildIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathComparerHelper : object {
    private XmlSortOrder _order;
    private XmlCaseOrder _caseOrder;
    private CultureInfo _cinfo;
    private XmlDataType _dataType;
    public XPathComparerHelper(XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public sealed virtual int Compare(object x, object y);
}
internal class MS.Internal.Xml.XPath.XPathDescendantIterator : XPathAxisIterator {
    private int _level;
    public XPathDescendantIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathDescendantIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathDescendantIterator(XPathDescendantIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathEmptyIterator : ResetableIterator {
    public static XPathEmptyIterator Instance;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private static XPathEmptyIterator();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class MS.Internal.Xml.XPath.XPathParser : object {
    private XPathScanner _scanner;
    private int _parseDepth;
    private static int MaxParseDepth;
    private static XPathResultType[] s_temparray1;
    private static XPathResultType[] s_temparray2;
    private static XPathResultType[] s_temparray3;
    private static XPathResultType[] s_temparray4;
    private static XPathResultType[] s_temparray5;
    private static XPathResultType[] s_temparray6;
    private static XPathResultType[] s_temparray7;
    private static XPathResultType[] s_temparray8;
    private static XPathResultType[] s_temparray9;
    private static Dictionary`2<string, ParamInfo> s_functionTable;
    private static Dictionary`2<string, AxisType> s_AxesTable;
    private XPathParser(XPathScanner scanner);
    private static XPathParser();
    public static AstNode ParseXPathExpression(string xpathExpression);
    public static AstNode ParseXPathPattern(string xpathPattern);
    private AstNode ParseExpression(AstNode qyInput);
    private AstNode ParseOrExpr(AstNode qyInput);
    private AstNode ParseAndExpr(AstNode qyInput);
    private AstNode ParseEqualityExpr(AstNode qyInput);
    private AstNode ParseRelationalExpr(AstNode qyInput);
    private AstNode ParseAdditiveExpr(AstNode qyInput);
    private AstNode ParseMultiplicativeExpr(AstNode qyInput);
    private AstNode ParseUnaryExpr(AstNode qyInput);
    private AstNode ParseUnionExpr(AstNode qyInput);
    private static bool IsNodeType(XPathScanner scaner);
    private AstNode ParsePathExpr(AstNode qyInput);
    private AstNode ParseFilterExpr(AstNode qyInput);
    private AstNode ParsePredicate(AstNode qyInput);
    private AstNode ParseLocationPath(AstNode qyInput);
    private AstNode ParseRelativeLocationPath(AstNode qyInput);
    private static bool IsStep(LexKind lexKind);
    private AstNode ParseStep(AstNode qyInput);
    private AstNode ParseNodeTest(AstNode qyInput, AxisType axisType, XPathNodeType nodeType);
    private static bool IsPrimaryExpr(XPathScanner scanner);
    private AstNode ParsePrimaryExpr(AstNode qyInput);
    private AstNode ParseMethod(AstNode qyInput);
    private AstNode ParsePattern();
    private AstNode ParseLocationPathPattern();
    private AstNode ParseIdKeyPattern();
    private AstNode ParseRelativePathPattern(AstNode qyInput);
    private AstNode ParseStepPattern(AstNode qyInput);
    private void CheckToken(LexKind t);
    private void PassToken(LexKind t);
    private void NextLex();
    private bool TestOp(string op);
    private void CheckNodeSet(XPathResultType t);
    private static Dictionary`2<string, ParamInfo> CreateFunctionTable();
    private static Dictionary`2<string, AxisType> CreateAxesTable();
    private AxisType GetAxis();
}
internal class MS.Internal.Xml.XPath.XPathScanner : object {
    private string _xpathExpr;
    private int _xpathExprIndex;
    private LexKind _kind;
    private char _currentChar;
    private string _name;
    private string _prefix;
    private string _stringValue;
    private double _numberValue;
    private bool _canBeFunction;
    private XmlCharType _xmlCharType;
    public string SourceText { get; }
    private char CurrentChar { get; }
    public LexKind Kind { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string StringValue { get; }
    public double NumberValue { get; }
    public bool CanBeFunction { get; }
    public XPathScanner(string xpathExpr);
    public string get_SourceText();
    private char get_CurrentChar();
    private bool NextChar();
    public LexKind get_Kind();
    public string get_Name();
    public string get_Prefix();
    public string get_StringValue();
    public double get_NumberValue();
    public bool get_CanBeFunction();
    private void SkipSpace();
    public bool NextLex();
    private double ScanNumber();
    private double ScanFraction();
    private string ScanString();
    private string ScanName();
}
internal class MS.Internal.Xml.XPath.XPathSelectionIterator : ResetableIterator {
    private XPathNavigator _nav;
    private Query _query;
    private int _position;
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal XPathSelectionIterator(XPathNavigator nav, Query query);
    protected XPathSelectionIterator(XPathSelectionIterator it);
    public virtual void Reset();
    public virtual bool MoveNext();
    public virtual int get_Count();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathSelfQuery : BaseAxisQuery {
    public XPathSelfQuery(Query qyInput, string Name, string Prefix, XPathNodeType Type);
    private XPathSelfQuery(XPathSelfQuery other);
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathSingletonIterator : ResetableIterator {
    private XPathNavigator _nav;
    private int _position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public XPathSingletonIterator(XPathNavigator nav);
    public XPathSingletonIterator(XPathNavigator nav, bool moved);
    public XPathSingletonIterator(XPathSingletonIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class MS.Internal.Xml.XPath.XPathSortComparer : object {
    private static int minSize;
    private Query[] _expressions;
    private IComparer[] _comparers;
    private int _numSorts;
    public int NumSorts { get; }
    public XPathSortComparer(int size);
    public void AddSort(Query evalQuery, IComparer comparer);
    public int get_NumSorts();
    public Query Expression(int i);
    private sealed virtual override int System.Collections.Generic.IComparer<MS.Internal.Xml.XPath.SortKey>.Compare(SortKey x, SortKey y);
    internal XPathSortComparer Clone();
}
internal static class System.NotImplemented : object {
    internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    private static string s_resourcesName;
    private static ResourceManager ResourceManager { get; }
    internal static string Sch_EnumFinished { get; }
    internal static string Sch_EnumNotStarted { get; }
    internal static string Xpn_BadPosition { get; }
    internal static string Xp_NodeSetExpected { get; }
    internal static string Xp_InvalidPattern { get; }
    internal static string Xp_NoContext { get; }
    internal static string Xp_BadQueryObject { get; }
    internal static string Xml_InvalidOperation { get; }
    internal static string Xp_QueryTooComplex { get; }
    internal static string Xp_InvalidKeyPattern { get; }
    internal static string Xp_NotSupported { get; }
    internal static string Xp_CurrentNotAllowed { get; }
    internal static string Xp_InvalidToken { get; }
    internal static string Xp_InvalidNumArgs { get; }
    internal static string Xp_InvalidArgumentType { get; }
    internal static string Xp_UnclosedString { get; }
    internal static string Xp_ExprExpected { get; }
    internal static string Xp_InvalidName { get; }
    internal static string Xp_UndefFunc { get; }
    internal static string XmlUndefinedAlias { get; }
    internal static string Xp_UndefinedXsltContext { get; }
    internal static string Xp_UndefVar { get; }
    internal static string Xp_FunctionFailed { get; }
    internal static string Xml_EmptyName { get; }
    internal static string Xml_BadStartNameChar { get; }
    internal static string Xml_BadNameChar { get; }
    internal static string Xdom_Empty_LocalName { get; }
    internal static string XmlBadName { get; }
    internal static string Xml_InvalidPIName { get; }
    internal static string XmlNoNameAllowed { get; }
    internal static string Xml_PrefixForEmptyNs { get; }
    internal static string Xml_XmlPrefix { get; }
    internal static string Xml_XmlnsPrefix { get; }
    internal static string Xml_NamespaceDeclXmlXmlns { get; }
    internal static string Xml_InvalidBase64Value { get; }
    internal static string Xml_InvalidBinHexValueOddCount { get; }
    internal static string Xml_MixingBinaryContentMethods { get; }
    internal static string Xml_InvalidNodeType { get; }
    internal static string Xml_InvalidBinHexValue { get; }
    internal static string XmlConvert_BadFormat { get; }
    internal static string Sch_XsdDateTimeCompare { get; }
    internal static string XmlConvert_TypeNoPrefix { get; }
    internal static string XmlConvert_Overflow { get; }
    internal static string XmlConvert_TypeListBadMapping { get; }
    internal static string XmlConvert_TypeListBadMapping2 { get; }
    internal static string Xml_ErrorPosition { get; }
    internal static string Xml_InvalidReadContentAs { get; }
    internal static string Xml_InvalidReadElementContentAs { get; }
    internal static string XmlConvert_TypeNoNamespace { get; }
    internal static string Xml_MessageWithErrorPosition { get; }
    internal static string XmlConvert_TypeToString { get; }
    internal static string XmlConvert_TypeFromString { get; }
    internal static string Xml_InvalidSurrogatePairWithArgs { get; }
    internal static string Xml_InvalidSurrogateHighChar { get; }
    internal static string Xml_InvalidCharacter { get; }
    internal static string Xml_InvalidSurrogateMissingLowChar { get; }
    internal static string Xml_UnknownResourceString { get; }
    internal static Type ResourceType { get; }
    private static ResourceManager get_ResourceManager();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string get_Sch_EnumFinished();
    internal static string get_Sch_EnumNotStarted();
    internal static string get_Xpn_BadPosition();
    internal static string get_Xp_NodeSetExpected();
    internal static string get_Xp_InvalidPattern();
    internal static string get_Xp_NoContext();
    internal static string get_Xp_BadQueryObject();
    internal static string get_Xml_InvalidOperation();
    internal static string get_Xp_QueryTooComplex();
    internal static string get_Xp_InvalidKeyPattern();
    internal static string get_Xp_NotSupported();
    internal static string get_Xp_CurrentNotAllowed();
    internal static string get_Xp_InvalidToken();
    internal static string get_Xp_InvalidNumArgs();
    internal static string get_Xp_InvalidArgumentType();
    internal static string get_Xp_UnclosedString();
    internal static string get_Xp_ExprExpected();
    internal static string get_Xp_InvalidName();
    internal static string get_Xp_UndefFunc();
    internal static string get_XmlUndefinedAlias();
    internal static string get_Xp_UndefinedXsltContext();
    internal static string get_Xp_UndefVar();
    internal static string get_Xp_FunctionFailed();
    internal static string get_Xml_EmptyName();
    internal static string get_Xml_BadStartNameChar();
    internal static string get_Xml_BadNameChar();
    internal static string get_Xdom_Empty_LocalName();
    internal static string get_XmlBadName();
    internal static string get_Xml_InvalidPIName();
    internal static string get_XmlNoNameAllowed();
    internal static string get_Xml_PrefixForEmptyNs();
    internal static string get_Xml_XmlPrefix();
    internal static string get_Xml_XmlnsPrefix();
    internal static string get_Xml_NamespaceDeclXmlXmlns();
    internal static string get_Xml_InvalidBase64Value();
    internal static string get_Xml_InvalidBinHexValueOddCount();
    internal static string get_Xml_MixingBinaryContentMethods();
    internal static string get_Xml_InvalidNodeType();
    internal static string get_Xml_InvalidBinHexValue();
    internal static string get_XmlConvert_BadFormat();
    internal static string get_Sch_XsdDateTimeCompare();
    internal static string get_XmlConvert_TypeNoPrefix();
    internal static string get_XmlConvert_Overflow();
    internal static string get_XmlConvert_TypeListBadMapping();
    internal static string get_XmlConvert_TypeListBadMapping2();
    internal static string get_Xml_ErrorPosition();
    internal static string get_Xml_InvalidReadContentAs();
    internal static string get_Xml_InvalidReadElementContentAs();
    internal static string get_XmlConvert_TypeNoNamespace();
    internal static string get_Xml_MessageWithErrorPosition();
    internal static string get_XmlConvert_TypeToString();
    internal static string get_XmlConvert_TypeFromString();
    internal static string get_Xml_InvalidSurrogatePairWithArgs();
    internal static string get_Xml_InvalidSurrogateHighChar();
    internal static string get_Xml_InvalidCharacter();
    internal static string get_Xml_InvalidSurrogateMissingLowChar();
    internal static string get_Xml_UnknownResourceString();
    internal static Type get_ResourceType();
}
internal class System.Xml.Base64Decoder : IncrementalReadDecoder {
    private Byte[] buffer;
    private int startIndex;
    private int curIndex;
    private int endIndex;
    private int bits;
    private int bitsFilled;
    private static string CharsBase64;
    private static Byte[] MapBase64;
    private static int MaxValidChar;
    private static byte Invalid;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    private static Base64Decoder();
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Byte[] buffer, int index, int count);
    private static Byte[] ConstructMapBase64();
    private void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Int32& charsDecoded, Int32& bytesDecoded);
}
internal abstract class System.Xml.Base64Encoder : object {
    private Byte[] leftOverBytes;
    private int leftOverBytesCount;
    private Char[] charsLine;
    internal static int Base64LineSize;
    internal static int LineSizeInBytes;
    internal abstract virtual void WriteChars(Char[] chars, int index, int count);
    internal void Encode(Byte[] buffer, int index, int count);
    internal void Flush();
}
internal class System.Xml.BinHexDecoder : IncrementalReadDecoder {
    private Byte[] buffer;
    private int startIndex;
    private int curIndex;
    private int endIndex;
    private bool hasHalfByteCached;
    private byte cachedHalfByte;
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Byte[] buffer, int index, int count);
    private static void Decode(Char* pChars, Char* pCharsEndPos, Byte* pBytes, Byte* pBytesEndPos, Boolean& hasHalfByteCached, Byte& cachedHalfByte, Int32& charsDecoded, Int32& bytesDecoded);
}
internal static class System.Xml.Bits : object {
    private static UInt32 MASK_0101010101010101;
    private static UInt32 MASK_0011001100110011;
    private static UInt32 MASK_0000111100001111;
    private static UInt32 MASK_0000000011111111;
    private static UInt32 MASK_1111111111111111;
    public static int Count(UInt32 num);
    public static bool ExactlyOne(UInt32 num);
    public static int LeastPosition(UInt32 num);
}
internal enum System.Xml.ExceptionType : Enum {
    public int value__;
    public static ExceptionType ArgumentException;
    public static ExceptionType XmlException;
}
internal abstract class System.Xml.IncrementalReadDecoder : object {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal abstract virtual int get_DecodedCount();
    internal abstract virtual bool get_IsFull();
    internal abstract virtual void SetNextOutputBuffer(Byte[] array, int offset, int len);
    internal abstract virtual int Decode(Char[] chars, int startPos, int len);
    internal abstract virtual int Decode(string str, int startPos, int len);
    internal abstract virtual void Reset();
}
internal class System.Xml.ReadContentAsBinaryHelper : object {
    private XmlReader reader;
    private State state;
    private int valueOffset;
    private bool isEnd;
    private bool canReadValueChunk;
    private Char[] valueChunk;
    private int valueChunkLength;
    private IncrementalReadDecoder decoder;
    private Base64Decoder base64Decoder;
    private BinHexDecoder binHexDecoder;
    private static int ChunkSize;
    internal ReadContentAsBinaryHelper(XmlReader reader);
    internal static ReadContentAsBinaryHelper CreateOrReset(ReadContentAsBinaryHelper helper, XmlReader reader);
    internal int ReadContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    internal void Finish();
    internal void Reset();
    private bool Init();
    private bool InitOnElement();
    private void InitBase64Decoder();
    private void InitBinHexDecoder();
    private int ReadContentAsBinary(Byte[] buffer, int index, int count);
    private int ReadElementContentAsBinary(Byte[] buffer, int index, int count);
    private bool MoveToNextContentNode(bool moveIfOnContentNode);
}
internal static class System.Xml.Schema.XmlUntypedConverter : object {
    private static Type DecimalType;
    private static Type Int32Type;
    private static Type Int64Type;
    private static Type StringType;
    private static Type ByteType;
    private static Type Int16Type;
    private static Type SByteType;
    private static Type UInt16Type;
    private static Type UInt32Type;
    private static Type UInt64Type;
    private static Type DoubleType;
    private static Type SingleType;
    private static Type DateTimeType;
    private static Type DateTimeOffsetType;
    private static Type BooleanType;
    private static Type ByteArrayType;
    private static Type XmlQualifiedNameType;
    private static Type UriType;
    private static Type TimeSpanType;
    private static XmlUntypedConverter();
    public static bool ToBoolean(string value);
    private static DateTime UntypedAtomicToDateTime(string value);
    public static DateTime ToDateTime(string value);
    public static double ToDouble(string value);
    public static int ToInt32(string value);
    public static long ToInt64(string value);
    private static string Base64BinaryToString(Byte[] value);
    private static string DateTimeToString(DateTime value);
    private static string DateTimeOffsetToString(DateTimeOffset value);
    private static string QNameToString(XmlQualifiedName qname, IXmlNamespaceResolver nsResolver);
    private static string AnyUriToString(Uri value);
    public static string ToString(object value, IXmlNamespaceResolver nsResolver);
    private static Byte[] StringToBase64Binary(string value);
    private static short Int32ToInt16(int value);
    private static byte Int32ToByte(int value);
    private static ulong DecimalToUInt64(decimal value);
    private static sbyte Int32ToSByte(int value);
    private static DateTimeOffset UntypedAtomicToDateTimeOffset(string value);
    private static XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver);
    private static ushort Int32ToUInt16(int value);
    private static UInt32 Int64ToUInt32(long value);
    public static object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XsdDateTime : ValueType {
    private DateTime dt;
    private UInt32 extra;
    private static UInt32 TypeMask;
    private static UInt32 KindMask;
    private static UInt32 ZoneHourMask;
    private static UInt32 ZoneMinuteMask;
    private static int TypeShift;
    private static int KindShift;
    private static int ZoneHourShift;
    private static short maxFractionDigits;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static int Lz_zz_;
    private static int Lz_zz_zz;
    private static int Lz__;
    private static int Lz__mm;
    private static int Lz__mm_;
    private static int Lz__mm__;
    private static int Lz__mm_dd;
    private static int Lz___;
    private static int Lz___dd;
    private DateTimeTypeCode InternalTypeCode { get; }
    private XsdDateTimeKind InternalKind { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Fraction { get; }
    public int ZoneHour { get; }
    public int ZoneMinute { get; }
    public XsdDateTime(string text, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTime dateTime, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTimeOffset dateTimeOffset, XsdDateTimeFlags kinds);
    private static XsdDateTime();
    private void InitiateXsdDateTime(Parser parser);
    private DateTimeTypeCode get_InternalTypeCode();
    private XsdDateTimeKind get_InternalKind();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Fraction();
    public int get_ZoneHour();
    public int get_ZoneMinute();
    public static DateTime op_Implicit(XsdDateTime xdt);
    public static DateTimeOffset op_Implicit(XsdDateTime xdt);
    public virtual string ToString();
    private void PrintDate(StringBuilder sb);
    private void PrintTime(StringBuilder sb);
    private void PrintZone(StringBuilder sb);
    private static void IntToCharArray(Char[] text, int start, int value, int digits);
    private static void ShortToCharArray(Char[] text, int start, int value);
}
[FlagsAttribute]
internal enum System.Xml.Schema.XsdDateTimeFlags : Enum {
    public int value__;
    public static XsdDateTimeFlags DateTime;
    public static XsdDateTimeFlags Time;
    public static XsdDateTimeFlags Date;
    public static XsdDateTimeFlags GYearMonth;
    public static XsdDateTimeFlags GYear;
    public static XsdDateTimeFlags GMonthDay;
    public static XsdDateTimeFlags GDay;
    public static XsdDateTimeFlags GMonth;
    public static XsdDateTimeFlags XdrDateTimeNoTz;
    public static XsdDateTimeFlags XdrDateTime;
    public static XsdDateTimeFlags XdrTimeNoTz;
    public static XsdDateTimeFlags AllXsd;
}
internal static class System.Xml.ValidateNames : object {
    private static XmlCharType xmlCharType;
    private static ValidateNames();
    internal static int ParseNmtoken(string s, int offset);
    internal static int ParseNmtokenNoNamespaces(string s, int offset);
    internal static bool IsNmtokenNoNamespaces(string s);
    internal static int ParseNameNoNamespaces(string s, int offset);
    internal static bool IsNameNoNamespaces(string s);
    internal static int ParseNCName(string s, int offset);
    internal static int ParseNCName(string s);
    internal static int ParseQName(string s, int offset, Int32& colonOffset);
    internal static void ParseQNameThrow(string s, String& prefix, String& localName);
    internal static void ThrowInvalidName(string s, int offsetStartChar, int offsetBadChar);
    internal static void SplitQName(string name, String& prefix, String& lname);
}
internal class System.Xml.XmlCharType : ValueType {
    internal static int SurHighStart;
    internal static int SurHighEnd;
    internal static int SurLowStart;
    internal static int SurLowEnd;
    internal static int SurMask;
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    private static string s_PublicIdBitmap;
    private static UInt32 CharPropertiesSize;
    internal static string s_Whitespace;
    private static string s_NCStartName;
    private static string s_NCName;
    private static string s_CharData;
    private static string s_PublicID;
    private static string s_Text;
    private static string s_AttrValue;
    private static string s_LetterXml4e;
    private static string s_NCNameXml4e;
    private static object s_Lock;
    private static Byte[] modreq(System.Runtime.CompilerServices.IsVolatile) s_CharProperties;
    internal Byte[] charProperties;
    private static object StaticLock { get; }
    public static XmlCharType Instance { get; }
    private XmlCharType(Byte[] charProperties);
    private static object get_StaticLock();
    private static void InitInstance();
    private static void SetProperties(Byte[] chProps, string ranges, byte value);
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsNCNameSingleChar(char ch);
    public bool IsStartNCNameSingleChar(char ch);
    public bool IsNameSingleChar(char ch);
    public bool IsStartNameSingleChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsLetter(char ch);
    public bool IsNCNameCharXml4e(char ch);
    public bool IsStartNCNameCharXml4e(char ch);
    public bool IsNameCharXml4e(char ch);
    public bool IsStartNameCharXml4e(char ch);
    public static bool IsDigit(char ch);
    internal static bool IsHighSurrogate(int ch);
    internal static bool IsLowSurrogate(int ch);
    internal static bool IsSurrogate(int ch);
    internal static int CombineSurrogateChar(int lowChar, int highChar);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal int IsOnlyCharData(string str);
    internal static bool IsOnlyDigits(string str, int startPos, int len);
    internal int IsPublicId(string str);
    private static bool InRange(int value, int start, int end);
}
internal static class System.Xml.XmlConst : object {
    internal static string ReservedNsXml;
    internal static string ReservedNsXmlNs;
    internal static string ReservedNsDataType;
    internal static string ReservedNsDataTypeAlias;
    internal static string ReservedNsDataTypeOld;
    internal static string ReservedNsMsxsl;
    internal static string ReservedNsXdr;
    internal static string ReservedNsXslDebug;
    internal static string ReservedNsXdrAlias;
    internal static string ReservedNsWdXsl;
    internal static string ReservedNsXs;
    internal static string ReservedNsXsd;
    internal static string ReservedNsXsi;
    internal static string ReservedNsXslt;
    internal static string ReservedNsExsltCommon;
    internal static string ReservedNsExsltDates;
    internal static string ReservedNsExsltMath;
    internal static string ReservedNsExsltRegExps;
    internal static string ReservedNsExsltSets;
    internal static string ReservedNsExsltStrings;
    internal static string ReservedNsXQueryFunc;
    internal static string ReservedNsXQueryDataType;
    internal static string ReservedNsCollationBase;
    internal static string ReservedNsCollCodePoint;
    internal static string ReservedNsXsltInternal;
    public static string NsXml;
    public static string NsXmlNs;
    public static string AttrLang;
    public static string AttrSpace;
    public static string AttrSpaceValueDefault;
    public static string AttrSpaceValuePreserve;
    public static string AttrXmlLang;
    public static string XmlDeclarationTag;
}
internal static class System.Xml.XmlConvertEx : object {
    private static XmlCharType xmlCharType;
    private static Char[] WhitespaceChars;
    private static XmlConvertEx();
    public static double ToXPathDouble(object o);
    public static double XPathRound(double value);
    public static string TrimString(string value);
    public static String[] SplitString(string value);
    public static Uri ToUri(string s);
    public static string EscapeValueForDebuggerDisplay(string value);
    public static Exception CreateInvalidSurrogatePairException(char low, char hi);
    private static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType);
    private static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, String[] args, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, string arg, ExceptionType exceptionType, int lineNo, int linePos);
    private static Exception CreateException(string res, ExceptionType exceptionType, int lineNo, int linePos);
    public static Exception CreateInvalidCharException(string data, int invCharPos, ExceptionType exceptionType);
    public static Exception CreateInvalidHighSurrogateCharException(char hi);
    private static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType);
    private static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType, int lineNo, int linePos);
    public static void VerifyCharData(string data, ExceptionType exceptionType);
    public static void VerifyCharData(string data, ExceptionType invCharExceptionType, ExceptionType invSurrogateExceptionType);
    public static string VerifyQName(string name, ExceptionType exceptionType);
    public static string TrimStringStart(string value);
    public static string TrimStringEnd(string value);
}
internal class System.Xml.XmlExceptionHelper : object {
    internal static String[] BuildCharExceptionArgs(string data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int length, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(char invChar, char nextChar);
}
public enum System.Xml.XmlNodeOrder : Enum {
    public int value__;
    public static XmlNodeOrder Before;
    public static XmlNodeOrder After;
    public static XmlNodeOrder Same;
    public static XmlNodeOrder Unknown;
}
internal abstract class System.Xml.XmlRawWriter : XmlWriter {
    protected XmlRawWriterBase64Encoder base64Encoder;
    protected IXmlNamespaceResolver resolver;
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual string LookupPrefix(string ns);
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal abstract virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel conformanceLevel);
    internal abstract virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteQualifiedName(string prefix, string localName, string ns);
    internal abstract virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    internal virtual void WriteEndBase64();
    internal virtual void Close(WriteState currentState);
}
internal class System.Xml.XmlRawWriterBase64Encoder : Base64Encoder {
    private XmlRawWriter rawWriter;
    internal XmlRawWriterBase64Encoder(XmlRawWriter rawWriter);
    internal virtual void WriteChars(Char[] chars, int index, int count);
}
[ExtensionAttribute]
internal static class System.Xml.XmlReaderExtensions : object {
    [ExtensionAttribute]
public static bool CanReadContentAs(XmlReader reader);
    private static string AddLineInfo(string message, IXmlLineInfo lineInfo);
    [ExtensionAttribute]
public static Exception CreateReadContentAsException(XmlReader reader, string methodName);
    [ExtensionAttribute]
public static Exception CreateReadElementContentAsException(XmlReader reader, string methodName);
}
internal enum System.Xml.XmlStandalone : Enum {
    public int value__;
    public static XmlStandalone Omit;
    public static XmlStandalone Yes;
    public static XmlStandalone No;
}
public interface System.Xml.XPath.IXPathNavigable {
    public abstract virtual XPathNavigator CreateNavigator();
}
public enum System.Xml.XPath.XmlCaseOrder : Enum {
    public int value__;
    public static XmlCaseOrder None;
    public static XmlCaseOrder UpperFirst;
    public static XmlCaseOrder LowerFirst;
}
public enum System.Xml.XPath.XmlDataType : Enum {
    public int value__;
    public static XmlDataType Text;
    public static XmlDataType Number;
}
internal class System.Xml.XPath.XmlEmptyNavigator : XPathNavigator {
    private static XmlEmptyNavigator modreq(System.Runtime.CompilerServices.IsVolatile) s_singleton;
    public static XmlEmptyNavigator Singleton { get; }
    public XPathNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public string Value { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public XmlNameTable NameTable { get; }
    public static XmlEmptyNavigator get_Singleton();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_NamespaceURI();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual string get_Value();
    public virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual XmlNameTable get_NameTable();
    public virtual bool MoveToFirstChild();
    public virtual void MoveToRoot();
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToId(string id);
    public virtual string GetAttribute(string localName, string namespaceName);
    public virtual bool MoveToAttribute(string localName, string namespaceName);
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string prefix);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToParent();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual XPathNavigator Clone();
}
public enum System.Xml.XPath.XmlSortOrder : Enum {
    public int value__;
    public static XmlSortOrder Ascending;
    public static XmlSortOrder Descending;
}
[ExtensionAttribute]
internal static class System.Xml.XPath.XmlWriterExtensions : object {
    [ExtensionAttribute]
private static void WriteLocalNamespaces(XmlWriter writer, XPathNavigator nsNav);
    [ExtensionAttribute]
public static void WriteNode(XmlWriter writer, XPathNavigator navigator, bool defattr);
}
public class System.Xml.XPath.XPathDocument : object {
    private XPathNode[] _pageText;
    private XPathNode[] _pageRoot;
    private XPathNode[] _pageXmlNmsp;
    private int _idxText;
    private int _idxRoot;
    private int _idxXmlNmsp;
    private XmlNameTable _nameTable;
    private bool _hasLineInfo;
    private Dictionary`2<XPathNodeRef, XPathNodeRef> _mapNmsp;
    private Dictionary`2<string, XPathNodeRef> _idValueMap;
    internal XmlNameTable NameTable { get; }
    internal bool HasLineInfo { get; }
    public XPathDocument(XmlReader reader);
    public XPathDocument(XmlReader reader, XmlSpace space);
    public XPathDocument(TextReader textReader);
    public XPathDocument(Stream stream);
    public XPathDocument(string uri);
    public XPathDocument(string uri, XmlSpace space);
    internal void LoadFromReader(XmlReader reader, XmlSpace space);
    public sealed virtual XPathNavigator CreateNavigator();
    internal XmlNameTable get_NameTable();
    internal bool get_HasLineInfo();
    internal int GetCollapsedTextNode(XPathNode[]& pageText);
    internal void SetCollapsedTextNode(XPathNode[] pageText, int idxText);
    internal int GetRootNode(XPathNode[]& pageRoot);
    internal void SetRootNode(XPathNode[] pageRoot, int idxRoot);
    internal int GetXmlNamespaceNode(XPathNode[]& pageXmlNmsp);
    internal void SetXmlNamespaceNode(XPathNode[] pageXmlNmsp, int idxXmlNmsp);
    internal void AddNamespace(XPathNode[] pageElem, int idxElem, XPathNode[] pageNmsp, int idxNmsp);
    internal int LookupNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    internal int LookupIdElement(string id, XPathNode[]& pageElem);
}
public class System.Xml.XPath.XPathException : Exception {
    public XPathException(string message);
    public XPathException(string message, Exception innerException);
    internal XPathException(string res, string arg, IXmlLineInfo lineInfo);
    internal XPathException(string res, String[] args, IXmlLineInfo lineInfo);
    internal XPathException(string res, String[] args, Exception innerException, int lineNumber, int linePosition);
    private XPathException(string res, String[] args);
    private XPathException(string res, String[] args, Exception inner);
    internal static XPathException Create(string res);
    internal static XPathException Create(string res, string arg);
    internal static XPathException Create(string res, string arg, string arg2);
    internal static XPathException Create(string res, string arg, Exception innerException);
    private static string CreateUnknownResourceMessage(string res);
    private static string CreateMessage(string res, String[] args);
    private static string CreateMessage(string res, String[] args, int lineNumber, int linePosition);
}
public abstract class System.Xml.XPath.XPathExpression : object {
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual string get_Expression();
    public abstract virtual void AddSort(object expr, IComparer comparer);
    public abstract virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public abstract virtual XPathExpression Clone();
    public abstract virtual void SetContext(XmlNamespaceManager nsManager);
    public abstract virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public abstract virtual XPathResultType get_ReturnType();
    public static XPathExpression Compile(string xpath);
    public static XPathExpression Compile(string xpath, IXmlNamespaceResolver nsResolver);
}
public abstract class System.Xml.XPath.XPathItem : object {
    public bool IsNode { get; }
    public string Value { get; }
    public object TypedValue { get; }
    public Type ValueType { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public abstract virtual bool get_IsNode();
    public abstract virtual string get_Value();
    public abstract virtual object get_TypedValue();
    public abstract virtual Type get_ValueType();
    public abstract virtual bool get_ValueAsBoolean();
    public abstract virtual DateTime get_ValueAsDateTime();
    public abstract virtual double get_ValueAsDouble();
    public abstract virtual int get_ValueAsInt();
    public abstract virtual long get_ValueAsLong();
    public virtual object ValueAs(Type returnType);
    public abstract virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
}
public enum System.Xml.XPath.XPathNamespaceScope : Enum {
    public int value__;
    public static XPathNamespaceScope All;
    public static XPathNamespaceScope ExcludeXml;
    public static XPathNamespaceScope Local;
}
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XPath.XPathNavigator : XPathItem {
    internal static XPathNavigatorKeyComparer comparer;
    internal static Char[] NodeTypeLetter;
    internal static Char[] UniqueIdTbl;
    public bool IsNode { get; }
    public object TypedValue { get; }
    public Type ValueType { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public XmlNameTable NameTable { get; }
    public static IEqualityComparer NavigatorComparer { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public object UnderlyingObject { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public bool CanEdit { get; }
    public string OuterXml { get; public set; }
    public string InnerXml { get; public set; }
    internal UInt32 IndexInParent { get; }
    internal string UniqueId { get; }
    private object debuggerDisplayProxy { get; }
    private static XPathNavigator();
    public virtual string ToString();
    public sealed virtual bool get_IsNode();
    public virtual void SetValue(string value);
    public virtual object get_TypedValue();
    public virtual void SetTypedValue(object typedValue);
    public virtual Type get_ValueType();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
    public virtual XPathNavigator CreateNavigator();
    public abstract virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string namespaceURI);
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public static IEqualityComparer get_NavigatorComparer();
    public abstract virtual XPathNavigator Clone();
    public abstract virtual XPathNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual string get_Prefix();
    public abstract virtual string get_BaseURI();
    public abstract virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual XmlReader ReadSubtree();
    public virtual void WriteSubtree(XmlWriter writer);
    public virtual object get_UnderlyingObject();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public abstract virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public abstract virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public bool MoveToFirstNamespace();
    public bool MoveToNextNamespace();
    public abstract virtual bool MoveToNext();
    public abstract virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public abstract virtual bool MoveToFirstChild();
    public abstract virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public abstract virtual bool MoveTo(XPathNavigator other);
    public abstract virtual bool MoveToId(string id);
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceURI);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool get_HasChildren();
    public abstract virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator nav);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator nav);
    public virtual XPathExpression Compile(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNavigator SelectSingleNode(XPathExpression expression);
    public virtual XPathNodeIterator Select(string xpath);
    public virtual XPathNodeIterator Select(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNodeIterator Select(XPathExpression expr);
    public virtual object Evaluate(string xpath);
    public virtual object Evaluate(string xpath, IXmlNamespaceResolver resolver);
    public virtual object Evaluate(XPathExpression expr);
    public virtual object Evaluate(XPathExpression expr, XPathNodeIterator context);
    public virtual bool Matches(XPathExpression expr);
    public virtual bool Matches(string xpath);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectAncestors(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual bool get_CanEdit();
    public virtual XmlWriter PrependChild();
    public virtual XmlWriter AppendChild();
    public virtual XmlWriter InsertAfter();
    public virtual XmlWriter InsertBefore();
    public virtual XmlWriter CreateAttributes();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void ReplaceSelf(string newNode);
    public virtual void ReplaceSelf(XmlReader newNode);
    public virtual void ReplaceSelf(XPathNavigator newNode);
    public virtual string get_OuterXml();
    public virtual void set_OuterXml(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void AppendChild(string newChild);
    public virtual void AppendChild(XmlReader newChild);
    public virtual void AppendChild(XPathNavigator newChild);
    public virtual void PrependChild(string newChild);
    public virtual void PrependChild(XmlReader newChild);
    public virtual void PrependChild(XPathNavigator newChild);
    public virtual void InsertBefore(string newSibling);
    public virtual void InsertBefore(XmlReader newSibling);
    public virtual void InsertBefore(XPathNavigator newSibling);
    public virtual void InsertAfter(string newSibling);
    public virtual void InsertAfter(XmlReader newSibling);
    public virtual void InsertAfter(XPathNavigator newSibling);
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    private static void WriteElement(XmlWriter writer, string prefix, string localName, string namespaceURI, string value);
    public virtual void PrependChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual void AppendChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementBefore(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementAfter(string prefix, string localName, string namespaceURI, string value);
    public virtual void CreateAttribute(string prefix, string localName, string namespaceURI, string value);
    internal bool MoveToNonDescendant();
    internal UInt32 get_IndexInParent();
    internal virtual string get_UniqueId();
    private static XPathExpression CompileMatchPattern(string xpath);
    private static int GetDepth(XPathNavigator nav);
    private static XmlNodeOrder CompareSiblings(XPathNavigator n1, XPathNavigator n2);
    internal static bool IsText(XPathNodeType type);
    private bool IsValidChildType(XPathNodeType type);
    private bool IsValidSiblingType(XPathNodeType type);
    private XmlReader CreateReader();
    private XmlReader CreateContextReader(string xml, bool fromCurrentNode);
    internal static void BuildSubtree(XmlReader reader, XmlWriter writer);
    private object get_debuggerDisplayProxy();
}
[ExtensionAttribute]
internal static class System.Xml.XPath.XPathNavigatorEx : object {
    private static int AllMask;
    private static int NoAttrNmspMask;
    private static int TextMask;
    private static Int32[] ContentKindMasks;
    private static XPathNavigatorEx();
    public static int GetContentKindMask(XPathNodeType type);
    public static int GetKindMask(XPathNodeType type);
    [ExtensionAttribute]
public static bool MoveToNonDescendant(XPathNavigator xpNavigator);
}
internal class System.Xml.XPath.XPathNavigatorKeyComparer : object {
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object obj1, object obj2);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
internal class System.Xml.XPath.XPathNavigatorReader : XmlReader {
    private XPathNavigator _nav;
    private XPathNavigator _navToRead;
    private int _depth;
    private State _state;
    private XmlNodeType _nodeType;
    private int _attrCount;
    private bool _readEntireDocument;
    private ReadContentAsBinaryHelper _readBinaryHelper;
    private State _savedState;
    internal static string space;
    internal static XmlNodeType[] convertFromXPathNodeType;
    public XmlNameTable NameTable { get; }
    public XmlReaderSettings Settings { get; }
    public Type ValueType { get; }
    public XmlNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool CanReadBinaryContent { get; }
    public int Depth { get; }
    protected XPathNavigatorReader(XPathNavigator navToRead);
    private static XPathNavigatorReader();
    internal static XmlNodeType ToXmlNodeType(XPathNodeType typ);
    public static XPathNavigatorReader Create(XPathNavigator navToRead);
    public virtual XmlNameTable get_NameTable();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public virtual XmlReaderSettings get_Settings();
    public virtual Type get_ValueType();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_NamespaceURI();
    public virtual string get_LocalName();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    private XPathNavigator GetElemNav();
    private XPathNavigator GetElemNav(Int32& depth);
    private void MoveToAttr(XPathNavigator nav, int depth);
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    private static string GetNamespaceByIndex(XPathNavigator nav, int index, Int32& count);
    public virtual string GetAttribute(int index);
    public virtual bool MoveToAttribute(string localName, string namespaceName);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToElement();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string LookupNamespace(string prefix);
    public virtual int get_Depth();
    public virtual bool Read();
    private void SetEOF();
}
[DebuggerDisplayAttribute("Position={CurrentPosition}, Current={debuggerDisplayProxy}")]
public abstract class System.Xml.XPath.XPathNodeIterator : object {
    internal int count;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private object debuggerDisplayProxy { get; }
    public abstract virtual XPathNodeIterator Clone();
    public abstract virtual bool MoveNext();
    public abstract virtual XPathNavigator get_Current();
    public abstract virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    private object get_debuggerDisplayProxy();
}
public enum System.Xml.XPath.XPathNodeType : Enum {
    public int value__;
    public static XPathNodeType Root;
    public static XPathNodeType Element;
    public static XPathNodeType Attribute;
    public static XPathNodeType Namespace;
    public static XPathNodeType Text;
    public static XPathNodeType SignificantWhitespace;
    public static XPathNodeType Whitespace;
    public static XPathNodeType ProcessingInstruction;
    public static XPathNodeType Comment;
    public static XPathNodeType All;
}
public enum System.Xml.XPath.XPathResultType : Enum {
    public int value__;
    public static XPathResultType Number;
    public static XPathResultType String;
    public static XPathResultType Boolean;
    public static XPathResultType NodeSet;
    public static XPathResultType Navigator;
    public static XPathResultType Any;
    public static XPathResultType Error;
}
internal interface System.Xml.Xsl.IXsltContextFunction {
    public int Minargs { get; }
    public int Maxargs { get; }
    public XPathResultType ReturnType { get; }
    public XPathResultType[] ArgTypes { get; }
    public abstract virtual int get_Minargs();
    public abstract virtual int get_Maxargs();
    public abstract virtual XPathResultType get_ReturnType();
    public abstract virtual XPathResultType[] get_ArgTypes();
    public abstract virtual object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext);
}
internal interface System.Xml.Xsl.IXsltContextVariable {
    public bool IsLocal { get; }
    public bool IsParam { get; }
    public XPathResultType VariableType { get; }
    public abstract virtual bool get_IsLocal();
    public abstract virtual bool get_IsParam();
    public abstract virtual XPathResultType get_VariableType();
    public abstract virtual object Evaluate(XsltContext xsltContext);
}
internal abstract class System.Xml.Xsl.XsltContext : XmlNamespaceManager {
    public bool Whitespace { get; }
    protected XsltContext(NameTable table);
    public abstract virtual IXsltContextVariable ResolveVariable(string prefix, string name);
    public abstract virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] ArgTypes);
    public abstract virtual bool get_Whitespace();
    public abstract virtual bool PreserveWhitespace(XPathNavigator node);
    public abstract virtual int CompareDocument(string baseUri, string nextbaseUri);
}
