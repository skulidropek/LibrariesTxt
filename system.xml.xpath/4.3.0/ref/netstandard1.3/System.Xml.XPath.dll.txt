public enum System.Xml.XmlNodeOrder : Enum {
    public int value__;
    public static XmlNodeOrder After;
    public static XmlNodeOrder Before;
    public static XmlNodeOrder Same;
    public static XmlNodeOrder Unknown;
}
public interface System.Xml.XPath.IXPathNavigable {
    public abstract virtual XPathNavigator CreateNavigator();
}
public enum System.Xml.XPath.XmlCaseOrder : Enum {
    public int value__;
    public static XmlCaseOrder LowerFirst;
    public static XmlCaseOrder None;
    public static XmlCaseOrder UpperFirst;
}
public enum System.Xml.XPath.XmlDataType : Enum {
    public int value__;
    public static XmlDataType Number;
    public static XmlDataType Text;
}
public enum System.Xml.XPath.XmlSortOrder : Enum {
    public int value__;
    public static XmlSortOrder Ascending;
    public static XmlSortOrder Descending;
}
public class System.Xml.XPath.XPathDocument : object {
    public XPathDocument(Stream stream);
    public XPathDocument(TextReader textReader);
    public XPathDocument(string uri);
    public XPathDocument(string uri, XmlSpace space);
    public XPathDocument(XmlReader reader);
    public XPathDocument(XmlReader reader, XmlSpace space);
    public sealed virtual XPathNavigator CreateNavigator();
}
public class System.Xml.XPath.XPathException : Exception {
    public XPathException(string message);
    public XPathException(string message, Exception innerException);
}
public abstract class System.Xml.XPath.XPathExpression : object {
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual string get_Expression();
    public abstract virtual XPathResultType get_ReturnType();
    public abstract virtual void AddSort(object expr, IComparer comparer);
    public abstract virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public abstract virtual XPathExpression Clone();
    public static XPathExpression Compile(string xpath);
    public static XPathExpression Compile(string xpath, IXmlNamespaceResolver nsResolver);
    public abstract virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public abstract virtual void SetContext(XmlNamespaceManager nsManager);
}
public abstract class System.Xml.XPath.XPathItem : object {
    public bool IsNode { get; }
    public object TypedValue { get; }
    public string Value { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public Type ValueType { get; }
    public abstract virtual bool get_IsNode();
    public abstract virtual object get_TypedValue();
    public abstract virtual string get_Value();
    public abstract virtual bool get_ValueAsBoolean();
    public abstract virtual DateTime get_ValueAsDateTime();
    public abstract virtual double get_ValueAsDouble();
    public abstract virtual int get_ValueAsInt();
    public abstract virtual long get_ValueAsLong();
    public abstract virtual Type get_ValueType();
    public virtual object ValueAs(Type returnType);
    public abstract virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
}
public enum System.Xml.XPath.XPathNamespaceScope : Enum {
    public int value__;
    public static XPathNamespaceScope All;
    public static XPathNamespaceScope ExcludeXml;
    public static XPathNamespaceScope Local;
}
public abstract class System.Xml.XPath.XPathNavigator : XPathItem {
    public string BaseURI { get; }
    public bool CanEdit { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public string InnerXml { get; public set; }
    public bool IsEmptyElement { get; }
    public bool IsNode { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public static IEqualityComparer NavigatorComparer { get; }
    public XPathNodeType NodeType { get; }
    public string OuterXml { get; public set; }
    public string Prefix { get; }
    public object TypedValue { get; }
    public object UnderlyingObject { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public Type ValueType { get; }
    public string XmlLang { get; }
    public abstract virtual string get_BaseURI();
    public virtual bool get_CanEdit();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public abstract virtual bool get_IsEmptyElement();
    public sealed virtual bool get_IsNode();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual XmlNameTable get_NameTable();
    public static IEqualityComparer get_NavigatorComparer();
    public abstract virtual XPathNodeType get_NodeType();
    public virtual string get_OuterXml();
    public virtual void set_OuterXml(string value);
    public abstract virtual string get_Prefix();
    public virtual object get_TypedValue();
    public virtual object get_UnderlyingObject();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual Type get_ValueType();
    public virtual string get_XmlLang();
    public virtual XmlWriter AppendChild();
    public virtual void AppendChild(string newChild);
    public virtual void AppendChild(XmlReader newChild);
    public virtual void AppendChild(XPathNavigator newChild);
    public virtual void AppendChildElement(string prefix, string localName, string namespaceURI, string value);
    public abstract virtual XPathNavigator Clone();
    public virtual XmlNodeOrder ComparePosition(XPathNavigator nav);
    public virtual XPathExpression Compile(string xpath);
    public virtual void CreateAttribute(string prefix, string localName, string namespaceURI, string value);
    public virtual XmlWriter CreateAttributes();
    public virtual XPathNavigator CreateNavigator();
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    public virtual object Evaluate(string xpath);
    public virtual object Evaluate(string xpath, IXmlNamespaceResolver resolver);
    public virtual object Evaluate(XPathExpression expr);
    public virtual object Evaluate(XPathExpression expr, XPathNodeIterator context);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetNamespace(string name);
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual XmlWriter InsertAfter();
    public virtual void InsertAfter(string newSibling);
    public virtual void InsertAfter(XmlReader newSibling);
    public virtual void InsertAfter(XPathNavigator newSibling);
    public virtual XmlWriter InsertBefore();
    public virtual void InsertBefore(string newSibling);
    public virtual void InsertBefore(XmlReader newSibling);
    public virtual void InsertBefore(XPathNavigator newSibling);
    public virtual void InsertElementAfter(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementBefore(string prefix, string localName, string namespaceURI, string value);
    public virtual bool IsDescendant(XPathNavigator nav);
    public abstract virtual bool IsSamePosition(XPathNavigator other);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string namespaceURI);
    public virtual bool Matches(string xpath);
    public virtual bool Matches(XPathExpression expr);
    public abstract virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFirst();
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToFirstChild();
    public bool MoveToFirstNamespace();
    public abstract virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToFollowing(string localName, string namespaceURI);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public abstract virtual bool MoveToId(string id);
    public virtual bool MoveToNamespace(string name);
    public abstract virtual bool MoveToNext();
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToNext(XPathNodeType type);
    public abstract virtual bool MoveToNextAttribute();
    public bool MoveToNextNamespace();
    public abstract virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public abstract virtual bool MoveToParent();
    public abstract virtual bool MoveToPrevious();
    public virtual void MoveToRoot();
    public virtual XmlWriter PrependChild();
    public virtual void PrependChild(string newChild);
    public virtual void PrependChild(XmlReader newChild);
    public virtual void PrependChild(XPathNavigator newChild);
    public virtual void PrependChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual XmlReader ReadSubtree();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void ReplaceSelf(string newNode);
    public virtual void ReplaceSelf(XmlReader newNode);
    public virtual void ReplaceSelf(XPathNavigator newNode);
    public virtual XPathNodeIterator Select(string xpath);
    public virtual XPathNodeIterator Select(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNodeIterator Select(XPathExpression expr);
    public virtual XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectAncestors(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNavigator SelectSingleNode(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNavigator SelectSingleNode(XPathExpression expression);
    public virtual void SetTypedValue(object typedValue);
    public virtual void SetValue(string value);
    public virtual string ToString();
    public virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
    public virtual void WriteSubtree(XmlWriter writer);
}
public abstract class System.Xml.XPath.XPathNodeIterator : object {
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public virtual int get_Count();
    public abstract virtual XPathNavigator get_Current();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual XPathNodeIterator Clone();
    public virtual IEnumerator GetEnumerator();
    public abstract virtual bool MoveNext();
}
public enum System.Xml.XPath.XPathNodeType : Enum {
    public int value__;
    public static XPathNodeType All;
    public static XPathNodeType Attribute;
    public static XPathNodeType Comment;
    public static XPathNodeType Element;
    public static XPathNodeType Namespace;
    public static XPathNodeType ProcessingInstruction;
    public static XPathNodeType Root;
    public static XPathNodeType SignificantWhitespace;
    public static XPathNodeType Text;
    public static XPathNodeType Whitespace;
}
public enum System.Xml.XPath.XPathResultType : Enum {
    public int value__;
    public static XPathResultType Any;
    public static XPathResultType Boolean;
    public static XPathResultType Error;
    public static XPathResultType Navigator;
    public static XPathResultType NodeSet;
    public static XPathResultType Number;
    public static XPathResultType String;
}
