[AttributeUsageAttribute("68")]
public class System.Web.Mvc.AutoNamedRouteAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public string Template { get; public set; }
    public int Order { get; public set; }
    public AutoNamedRouteAttribute(string template);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    private string getAreaName(ControllerDescriptor controllerDescriptor);
    public sealed virtual RouteEntry CreateRoute(DirectRouteFactoryContext context);
}
public class System.Web.Mvc.DefaultModelUnbinder : object {
    public sealed virtual void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue);
}
[ExtensionAttribute]
public static class System.Web.Mvc.GenericT4Extensions : object {
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<TActionResult> taskResult, FormMethod formMethod);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<TActionResult> taskResult, FormMethod formMethod, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<TActionResult> taskResult, FormMethod formMethod, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<TActionResult> taskResult, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<TActionResult> taskResult, FormMethod method, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<TActionResult> taskResult, FormMethod method, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static string Action(UrlHelper urlHelper, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static string Action(UrlHelper urlHelper, Task`1<TActionResult> taskResult, string protocol, string hostName);
    [ExtensionAttribute]
public static string ActionAbsolute(UrlHelper urlHelper, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, Task`1<TActionResult> taskResult, string protocol);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, Task`1<TActionResult> taskResult, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, Task`1<TActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<TActionResult> taskResult, object defaults);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<TActionResult> taskResult, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<TActionResult> taskResult, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<TActionResult> taskResult, object defaults, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<TActionResult> taskResult, object defaults, object constraints, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<TActionResult> taskResult);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<TActionResult> taskResult, object defaults);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<TActionResult> taskResult, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<TActionResult> taskResult, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<TActionResult> taskResult, object defaults, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<TActionResult> taskResult, object defaults, object constraints, String[] namespaces);
    [ExtensionAttribute]
public static TActionResult AddRouteValues(TActionResult result, object routeValues);
    [ExtensionAttribute]
public static TActionResult AddRouteValues(TActionResult result, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static TActionResult AddRouteValues(TActionResult result, NameValueCollection nameValueCollection);
    [ExtensionAttribute]
public static TActionResult AddRouteValue(TActionResult result, string name, object value);
    [ExtensionAttribute]
public static Task`1<TResult> AddRouteValues(Task`1<TResult> action, object routeValues);
    [ExtensionAttribute]
public static Task`1<TResult> AddRouteValues(Task`1<TResult> action, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static Task`1<TResult> AddRouteValues(Task`1<TResult> action, NameValueCollection nameValueCollection);
    [ExtensionAttribute]
public static Task`1<TResult> AddRouteValue(Task`1<TResult> action, string name, object value);
}
public interface System.Web.Mvc.IModelUnbinder {
    public abstract virtual void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue);
}
public interface System.Web.Mvc.IModelUnbinder`1 {
    public abstract virtual void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, T routeValue);
}
public interface System.Web.Mvc.IModelUnbinderProvider {
    public abstract virtual IModelUnbinder GetUnbinder(Type routeValueType);
}
public interface System.Web.Mvc.IT4MVCActionResult {
    public string Action { get; public set; }
    public string Controller { get; public set; }
    public RouteValueDictionary RouteValueDictionary { get; public set; }
    public string Protocol { get; public set; }
    public abstract virtual string get_Action();
    public abstract virtual void set_Action(string value);
    public abstract virtual string get_Controller();
    public abstract virtual void set_Controller(string value);
    public abstract virtual RouteValueDictionary get_RouteValueDictionary();
    public abstract virtual void set_RouteValueDictionary(RouteValueDictionary value);
    public abstract virtual string get_Protocol();
    public abstract virtual void set_Protocol(string value);
}
public class System.Web.Mvc.ModelUnbinderHelpers : object {
    private static ModelUnbinders _modelUnbinders;
    private static ModelUnbinderProviders _modelUnbinderProviders;
    [CompilerGeneratedAttribute]
private static IModelUnbinder <DefaultModelUnbinder>k__BackingField;
    public static ModelUnbinders ModelUnbinders { get; }
    public static ModelUnbinderProviders ModelUnbinderProviders { get; }
    public static IModelUnbinder DefaultModelUnbinder { get; public set; }
    private static ModelUnbinderHelpers();
    public static void AddRouteValues(RouteValueDictionary routeValueDictionary, string routeName, object routeValue);
    public static ModelUnbinders get_ModelUnbinders();
    public static ModelUnbinderProviders get_ModelUnbinderProviders();
    [CompilerGeneratedAttribute]
public static IModelUnbinder get_DefaultModelUnbinder();
    [CompilerGeneratedAttribute]
public static void set_DefaultModelUnbinder(IModelUnbinder value);
}
public class System.Web.Mvc.ModelUnbinderProviders : object {
    private List`1<IModelUnbinderProvider> _unbinderProviders;
    public virtual void Add(IModelUnbinderProvider unbinderProvider);
    public virtual IModelUnbinder FindUnbinderFor(Type type);
    public virtual void Clear();
}
public class System.Web.Mvc.ModelUnbinders : object {
    private Dictionary`2<Type, IModelUnbinder> _unbinders;
    public virtual void Add(Type type, IModelUnbinder unbinder);
    public virtual void Add(IModelUnbinder`1<T> unbinder);
    public virtual IModelUnbinder FindUnbinderFor(Type type);
    public virtual void Clear();
}
public class System.Web.Mvc.PropertiesUnbinder : object {
    public virtual void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue);
}
[ExtensionAttribute]
public static class System.Web.Mvc.T4Extensions : object {
    private static DateTime CenturyBegin;
    private static T4Extensions();
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, ActionResult result);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, ActionResult result);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, ActionResult result);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, ActionResult result, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, ActionResult result, FormMethod method, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, ActionResult result, FormMethod method, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, ActionResult result);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, ActionResult result);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(HtmlHelper htmlHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, object htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(HtmlHelper htmlHelper, string linkText, Task`1<ActionResult> taskResult, IDictionary`2<string, object> htmlAttributes, string protocol, string hostName, string fragment);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<ActionResult> taskResult, FormMethod formMethod);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<ActionResult> taskResult, FormMethod formMethod, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(HtmlHelper htmlHelper, Task`1<ActionResult> taskResult, FormMethod formMethod, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<ActionResult> taskResult, FormMethod method);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<ActionResult> taskResult, FormMethod method, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(HtmlHelper htmlHelper, string routeName, Task`1<ActionResult> taskResult, FormMethod method, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static void RenderAction(HtmlHelper htmlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static MvcHtmlString Action(HtmlHelper htmlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static string JavaScriptReplaceableUrl(UrlHelper urlHelper, ActionResult result);
    [ExtensionAttribute]
private static bool CompareValue(RouteValueDictionary dictionary, string key, string value);
    [ExtensionAttribute]
public static string JavaScriptReplaceableUrl(UrlHelper urlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static string Action(UrlHelper urlHelper, ActionResult result);
    [ExtensionAttribute]
public static string Action(UrlHelper urlHelper, ActionResult result, string protocol, string hostName);
    [ExtensionAttribute]
public static string Action(UrlHelper urlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static string Action(UrlHelper urlHelper, Task`1<ActionResult> taskResult, string protocol, string hostName);
    [ExtensionAttribute]
public static string ActionAbsolute(UrlHelper urlHelper, ActionResult result);
    [ExtensionAttribute]
public static string ActionAbsolute(UrlHelper urlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, ActionResult result);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, ActionResult result);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, ActionResult result, string protocol);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, ActionResult result, string protocol, string hostName);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, Task`1<ActionResult> taskResult, string protocol);
    [ExtensionAttribute]
public static string RouteUrl(UrlHelper urlHelper, string routeName, Task`1<ActionResult> taskResult, string protocol, string hostName);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString ActionLink(AjaxHelper ajaxHelper, string linkText, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, ActionResult result, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, ActionResult result, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString RouteLink(AjaxHelper ajaxHelper, string linkText, string routeName, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(AjaxHelper ajaxHelper, string linkText, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(AjaxHelper ajaxHelper, string linkText, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcHtmlString AutoNamedRouteLink(AjaxHelper ajaxHelper, string linkText, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginForm(AjaxHelper ajaxHelper, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, ActionResult result, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, ActionResult result, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, object htmlAttributes);
    [ExtensionAttribute]
public static MvcForm BeginRouteForm(AjaxHelper ajaxHelper, string routeName, Task`1<ActionResult> taskResult, AjaxOptions ajaxOptions, IDictionary`2<string, object> htmlAttributes);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, ActionResult result);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, ActionResult result, object defaults);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, ActionResult result, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, ActionResult result, object defaults, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<ActionResult> taskResult, object defaults);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<ActionResult> taskResult, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<ActionResult> taskResult, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<ActionResult> taskResult, object defaults, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRoute(RouteCollection routes, string name, string url, Task`1<ActionResult> taskResult, object defaults, object constraints, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, ActionResult result);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, ActionResult result, object defaults);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, ActionResult result, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<ActionResult> taskResult);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<ActionResult> taskResult, object defaults);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<ActionResult> taskResult, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<ActionResult> taskResult, object defaults, object constraints);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<ActionResult> taskResult, object defaults, String[] namespaces);
    [ExtensionAttribute]
public static Route MapRouteArea(AreaRegistrationContext context, string name, string url, Task`1<ActionResult> taskResult, object defaults, object constraints, String[] namespaces);
    private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, String[] namespaces);
    [ExtensionAttribute]
public static IT4MVCActionResult GetT4MVCResult(ActionResult result);
    [ExtensionAttribute]
public static RouteValueDictionary GetRouteValueDictionary(ActionResult result);
    [ExtensionAttribute]
public static ActionResult AddRouteValues(ActionResult result, object routeValues);
    [ExtensionAttribute]
public static ActionResult AddRouteValues(ActionResult result, RouteValueDictionary routeValues);
    [ExtensionAttribute]
public static ActionResult AddRouteValues(ActionResult result, NameValueCollection nameValueCollection);
    [ExtensionAttribute]
public static ActionResult AddRouteValue(ActionResult result, string name, object value);
    [ExtensionAttribute]
public static void InitMVCT4Result(IT4MVCActionResult result, string area, string controller, string action, string protocol);
    public static bool FileExists(string virtualPath);
    public static string TimestampString(string virtualPath);
    private static string autoRouteNameFromActionResult(ActionResult result);
    public static string ComposeAutoRouteName(string areaName, string controllerName, string actionName);
}
[AttributeUsageAttribute("4")]
public class System.Web.Mvc.T4MVCAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Process>k__BackingField;
    public bool Process { get; private set; }
    public T4MVCAttribute(bool process);
    [CompilerGeneratedAttribute]
public bool get_Process();
    [CompilerGeneratedAttribute]
private void set_Process(bool value);
}
[ExtensionAttribute]
public static class T4MVCExtensions.T4TypeHelper : object {
    [ExtensionAttribute]
public static bool IsT4MVC(Type t);
}
