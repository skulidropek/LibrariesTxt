internal class WEX.TestExecution.Delegates.AddDataDrivenProperty : MulticastDelegate {
    public AddDataDrivenProperty(object object, IntPtr method);
    public virtual int Invoke(string parameterName, string parameterValue, string parameterType);
    public virtual IAsyncResult BeginInvoke(string parameterName, string parameterValue, string parameterType, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.AddRuntimeParameter : MulticastDelegate {
    public AddRuntimeParameter(object object, IntPtr method);
    public virtual int Invoke(string parameterName, string parameterValue);
    public virtual IAsyncResult BeginInvoke(string parameterName, string parameterValue, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.CreateTestContext : MulticastDelegate {
    public CreateTestContext(object object, IntPtr method);
    public virtual int Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.DestroyClassInstance : MulticastDelegate {
    public DestroyClassInstance(object object, IntPtr method);
    public virtual int Invoke(IntPtr testClassPtr);
    public virtual IAsyncResult BeginInvoke(IntPtr testClassPtr, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.Instantiate : MulticastDelegate {
    public Instantiate(object object, IntPtr method);
    public virtual int Invoke(IntPtr testAssemblyPtr, string className, bool breakOnCreate, IntPtr& testClassPtr, String& errorMessage);
    public virtual IAsyncResult BeginInvoke(IntPtr testAssemblyPtr, string className, bool breakOnCreate, IntPtr& testClassPtr, String& errorMessage, AsyncCallback callback, object object);
    public virtual int EndInvoke(IntPtr& testClassPtr, String& errorMessage, IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.InvokeAssemblyFixture : MulticastDelegate {
    public InvokeAssemblyFixture(object object, IntPtr method);
    public virtual int Invoke(IntPtr testAssemblyPtr, string className, string methodName, bool breakOnInvoke, String& errorMessage);
    public virtual IAsyncResult BeginInvoke(IntPtr testAssemblyPtr, string className, string methodName, bool breakOnInvoke, String& errorMessage, AsyncCallback callback, object object);
    public virtual int EndInvoke(String& errorMessage, IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.InvokeTestMethod : MulticastDelegate {
    public InvokeTestMethod(object object, IntPtr method);
    public virtual int Invoke(IntPtr testClassPtr, string testMethodName, bool breakOnInvoke, Boolean& testThrewException, String& errorMessage);
    public virtual IAsyncResult BeginInvoke(IntPtr testClassPtr, string testMethodName, bool breakOnInvoke, Boolean& testThrewException, String& errorMessage, AsyncCallback callback, object object);
    public virtual int EndInvoke(Boolean& testThrewException, String& errorMessage, IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.LoadAssembly : MulticastDelegate {
    public LoadAssembly(object object, IntPtr method);
    public virtual int Invoke(string assemblyPath, IntPtr& testAssemblyPtr, String& errorMessage);
    public virtual IAsyncResult BeginInvoke(string assemblyPath, IntPtr& testAssemblyPtr, String& errorMessage, AsyncCallback callback, object object);
    public virtual int EndInvoke(IntPtr& testAssemblyPtr, String& errorMessage, IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.RemoveRuntimeParameter : MulticastDelegate {
    public RemoveRuntimeParameter(object object, IntPtr method);
    public virtual int Invoke(string parameterName);
    public virtual IAsyncResult BeginInvoke(string parameterName, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.ResetDataDrivenProperties : MulticastDelegate {
    public ResetDataDrivenProperties(object object, IntPtr method);
    public virtual int Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class WEX.TestExecution.Delegates.UpdateRuntimeParameter : MulticastDelegate {
    public UpdateRuntimeParameter(object object, IntPtr method);
    public virtual int Invoke(string parameterName, string parameterValue);
    public virtual IAsyncResult BeginInvoke(string parameterName, string parameterValue, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class WEX.TestExecution.DisableVerifyExceptions : object {
    [ThreadStaticAttribute]
private static int count;
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class WEX.TestExecution.DllNames : object {
    public static string TeCommon;
    public static string WexCommon;
}
internal enum WEX.TestExecution.HResult : Enum {
    public int value__;
    public static HResult ERROR_MOD_NOT_FOUND;
    public static HResult ERROR_NOT_FOUND;
    public static HResult ERROR_UNSUPPORTED_TYPE;
    public static HResult COR_E_INVALIDOPERATION;
}
[SecurityCriticalAttribute]
internal static class WEX.TestExecution.InteropMethods : object {
    private static TETestContext testContext;
    private static InteropMethods();
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.LoadAssembly")]
public static int LoadAssembly(string assemblyPath, IntPtr& testAssemblyPtr, String& errorMessage);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.CreateTestContext")]
public static int CreateTestContext();
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.Instantiate")]
public static int Instantiate(IntPtr testAssemblyPtr, string className, bool breakOnCreate, IntPtr& testClassPtr, String& errorMessage);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.InvokeAssemblyFixture")]
public static int InvokeAssemblyFixture(IntPtr testAssemblyPtr, string className, string methodName, bool breakOnInvoke, String& errorMessage);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.InvokeTestMethod")]
public static int InvokeTestMethod(IntPtr testClassPtr, string testMethodName, bool breakOnInvoke, Boolean& testThrewException, String& errorMessage);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.DestroyClassInstance")]
public static int DestroyClassInstance(IntPtr testClassPtr);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.RemoveRuntimeParameter")]
public static int RemoveRuntimeParameter(string parameterName);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.AddRuntimeParameter")]
public static int AddRuntimeParameter(string parameterName, string parameterValue);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.UpdateRuntimeParameter")]
public static int UpdateRuntimeParameter(string parameterName, string parameterValue);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.AddDataDrivenProperty")]
public static int AddDataDrivenProperty(string parameterName, string parameterValue, string parameterType);
    [DelegateTypeAttribute("WEX.TestExecution.Delegates.ResetDataDrivenProperties")]
public static int ResetDataDrivenProperties();
}
public static class WEX.TestExecution.Interruption : object {
    public static void Reboot(RebootOption option);
    public static void RebootCustom(RebootOption option);
}
internal class WEX.TestExecution.LoaderFailureException : Exception {
    [CompilerGeneratedAttribute]
private HResult <ErrorCode>k__BackingField;
    public HResult ErrorCode { get; }
    public LoaderFailureException(string message, HResult errorCode);
    [CompilerGeneratedAttribute]
public HResult get_ErrorCode();
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.AssemblyCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.AssemblyInitializeAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.ClassCleanupAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.ClassInitializeAttribute : Attribute {
}
public class WEX.TestExecution.Markup.DataColumn : object {
    private string columnName;
    private Type dataType;
    public string ColumnName { get; public set; }
    public Type DataType { get; public set; }
    internal DataColumn(string columnName);
    internal DataColumn(string columnName, Type type);
    public virtual string ToString();
    public string get_ColumnName();
    public void set_ColumnName(string value);
    public Type get_DataType();
    public void set_DataType(Type value);
}
[DefaultMemberAttribute("Item")]
public class WEX.TestExecution.Markup.DataColumnCollection : object {
    private List`1<DataColumn> columns;
    public int Count { get; }
    public DataColumn Item { get; }
    internal DataColumn Add(string columnName);
    internal DataColumn Add(string columnName, Type type);
    public int get_Count();
    public sealed virtual IEnumerator`1<DataColumn> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public DataColumn get_Item(int index);
    internal DataColumn Get(string name);
    public bool Contains(string name);
}
[DefaultMemberAttribute("Item")]
public class WEX.TestExecution.Markup.DataRow : object {
    private static object Null;
    private Dictionary`2<string, object> dataRow;
    [CompilerGeneratedAttribute]
private DataTable <Table>k__BackingField;
    public object Item { get; public set; }
    public DataTable Table { get; private set; }
    internal DataRow(DataTable table);
    private static DataRow();
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public bool IsNull(string name);
    [CompilerGeneratedAttribute]
public DataTable get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(DataTable value);
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.DataSourceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DataSourceSetting>k__BackingField;
    public string DataSourceSetting { get; private set; }
    public DataSourceAttribute(string dataSourceSetting);
    [CompilerGeneratedAttribute]
public string get_DataSourceSetting();
    [CompilerGeneratedAttribute]
private void set_DataSourceSetting(string value);
}
public class WEX.TestExecution.Markup.DataTable : object {
    [CompilerGeneratedAttribute]
private DataColumnCollection <Columns>k__BackingField;
    public DataColumnCollection Columns { get; private set; }
    internal DataRow NewRow();
    [CompilerGeneratedAttribute]
public DataColumnCollection get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(DataColumnCollection value);
}
[AttributeUsageAttribute("69")]
public class WEX.TestExecution.Markup.DeploymentItemAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    public string Path { get; private set; }
    public string OutputDirectory { get; private set; }
    public DeploymentItemAttribute(string path);
    public DeploymentItemAttribute(string path, string outputDirectory);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [CompilerGeneratedAttribute]
private void set_OutputDirectory(string value);
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.DescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Description { get; private set; }
    public DescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
private void set_Description(string value);
}
[AttributeUsageAttribute("68")]
public class WEX.TestExecution.Markup.IgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.OwnerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    public string Owner { get; private set; }
    public OwnerAttribute(string owner);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(string value);
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.PriorityAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    public int Priority { get; private set; }
    public PriorityAttribute(int priority);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
private void set_Priority(int value);
}
[AttributeUsageAttribute("4")]
public class WEX.TestExecution.Markup.TestClassAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.TestCleanupAttribute : Attribute {
}
public abstract class WEX.TestExecution.Markup.TestContext : object {
    public IDictionary Properties { get; }
    public DataRow DataRow { get; }
    public string TestRunDirectory { get; }
    public string DeploymentDirectory { get; }
    public string ResultsDirectory { get; }
    public string TestRunResultsDirectory { get; }
    public string TestResultsDirectory { get; }
    public string TestDir { get; }
    public string TestDeploymentDir { get; }
    public string TestLogsDir { get; }
    public string FullyQualifiedTestClassName { get; }
    public string TestName { get; }
    public UnitTestOutcome CurrentTestOutcome { get; }
    public abstract virtual IDictionary get_Properties();
    public abstract virtual DataRow get_DataRow();
    public virtual string get_TestRunDirectory();
    public virtual string get_DeploymentDirectory();
    public virtual string get_ResultsDirectory();
    public virtual string get_TestRunResultsDirectory();
    public virtual string get_TestResultsDirectory();
    public virtual string get_TestDir();
    public virtual string get_TestDeploymentDir();
    public virtual string get_TestLogsDir();
    public virtual string get_FullyQualifiedTestClassName();
    public virtual string get_TestName();
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public abstract virtual void WriteLine(string format, Object[] args);
    public abstract virtual void WriteLine(string message);
    public abstract virtual void AddResultFile(string fileName);
    public abstract virtual void BeginTimer(string timerName);
    public abstract virtual void EndTimer(string timerName);
    private T GetProperty(string name);
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.TestInitializeAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class WEX.TestExecution.Markup.TestMethodAttribute : Attribute {
}
[AttributeUsageAttribute("69")]
public class WEX.TestExecution.Markup.TestPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; private set; }
    public TestPropertyAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
[ComVisibleAttribute("True")]
public enum WEX.TestExecution.Markup.UnitTestOutcome : Enum {
    public int value__;
    public static UnitTestOutcome Failed;
    public static UnitTestOutcome Inconclusive;
    public static UnitTestOutcome Passed;
    public static UnitTestOutcome InProgress;
    public static UnitTestOutcome Error;
    public static UnitTestOutcome Timeout;
    public static UnitTestOutcome Aborted;
    public static UnitTestOutcome Unknown;
}
internal static class WEX.TestExecution.NativeMethods : object {
    public static void Interruption_Reboot(RebootOption option);
    public static void Interruption_RebootCustom(RebootOption option);
    public static void RaiseDeprecatedFeatureTelemetry(Situation situation, string message);
}
[DefaultMemberAttribute("Item")]
internal class WEX.TestExecution.Private.DataDrivenDictionary`1 : object {
    private Dictionary`2<string, string> m_dataType;
    private Dictionary`2<TKey, IList> m_containedDictionary;
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public void Add(TKey key, TValue value);
    public sealed virtual void Add(TKey key, object value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, Object& value);
    public ICollection GetAllValues();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, object value);
    public sealed virtual void Add(KeyValuePair`2<TKey, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, object> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, object> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public object GetValues(TKey key);
    public object GetFirstValue(TKey key);
    public string GetType(TKey key);
    public object GetValueAsObject(TKey key);
    public void AddType(string name, string type);
}
public enum WEX.TestExecution.RebootOption : Enum {
    public int value__;
    public static RebootOption Rerun;
    public static RebootOption Continue;
}
internal static class WEX.TestExecution.ReflectionHelper : object {
    public static PropertyInfo GetProperty(Type type, string propertyName);
    public static MethodInfo GetPublicMethod(Type type, string methodName);
}
public class WEX.TestExecution.SetVerifyOutput : object {
    private VerifyOutputSettings previousSetting;
    public SetVerifyOutput(VerifyOutputSettings outputSettings);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public static class WEX.TestExecution.Tailored : object {
    public static void RunOnUIThread(Func`1<Task> testCode);
    public static void RunOnUIThread(Action testCode);
    private static void WaitForAsyncAction(IAsyncAction asyncAction);
}
internal class WEX.TestExecution.TestAssembly : object {
    private Assembly testAssembly;
    public TestAssembly(string assemblyPath);
    public TestClass InstantiateTestClass(string className, bool breakOnCreate);
    public void InvokeAssemblyFixture(string className, string methodName, bool breakOnInvoke, TETestContext testContext);
    private Type LookupType(string className);
}
internal class WEX.TestExecution.TestClass : object {
    private Type testClassType;
    private object testClassInstance;
    public TestClass(Type testClassType, object testClassInstance);
    public void InvokeMethod(string testMethodName, bool breakOnInvoke, TETestContext testContext, Boolean& testThrewException);
    public static void InvokeMethodImpl(Type testClassType, object testClassInstance, string testMethodName, bool breakOnInvoke, TETestContext testContext, Boolean& testThrewException);
    private static void HandleTestException(Exception e);
    private static void GetMethodInfo(MethodInfo method, Boolean& isInitializeMethod, Boolean& isAsync);
    private static object GenerateTestContextTypeInstance(Type parent, TETestContext testContext);
}
internal class WEX.TestExecution.TestContextImplementation : TestContext {
    private TETestContext m_testContext;
    public IDictionary Properties { get; }
    public DataRow DataRow { get; }
    public UnitTestOutcome CurrentTestOutcome { get; }
    public TestContextImplementation(TETestContext testContext);
    public virtual IDictionary get_Properties();
    public virtual DataRow get_DataRow();
    public virtual UnitTestOutcome get_CurrentTestOutcome();
    public virtual void WriteLine(string format, Object[] args);
    public virtual void WriteLine(string message);
    public virtual void AddResultFile(string fileName);
    public virtual void BeginTimer(string timerName);
    public virtual void EndTimer(string timerName);
}
public class WEX.TestExecution.TETestContext : object {
    private DataRow m_row;
    private DataTable m_table;
    private Dictionary`2<string, Type> m_typeLookup;
    private Dictionary`2<string, string> m_typeAlias;
    private DataDrivenDictionary`1<string> m_dataDrivenProperties;
    private Dictionary`2<string, object> m_emptyArrayObjectLookup;
    private Dictionary`2<string, string> m_emptyValues;
    private Dictionary`2<string, object> m_runtimeProperties;
    private UnitTestOutcome m_currentTestOutcome;
    private static string intTypeName;
    private static string boolTypeName;
    private static string floatTypeName;
    private static string decimalTypeName;
    private static string uintTypeName;
    private static string objectTypeName;
    private static string stringTypeName;
    private static string ulongTypeName;
    private static string longTypeName;
    private static string xmlTypeName;
    private static string intArrayTypeName;
    private static string boolArrayTypeName;
    private static string floatArrayTypeName;
    private static string decimalArrayTypeName;
    private static string uintArrayTypeName;
    private static string objectArrayTypeName;
    private static string stringArrayTypeName;
    private static string ulongArrayTypeName;
    private static string longArrayTypeName;
    private static string arrayQualifier;
    private static string emptyQualifier;
    private static string nullTypeName;
    private static int defaultRuntimeParameterCount;
    public int DataDrivenPropertyCount { get; }
    public int DefaultRuntimeParameterCount { get; }
    public int RuntimeParameterCount { get; }
    public IDictionary Properties { get; }
    public DataRow DataRow { get; }
    public UnitTestOutcome CurrentTestOutcome { get; }
    public void AddDataDrivenProperty(string name, string value, string type);
    public void ResetDataDrivenProperties();
    public int get_DataDrivenPropertyCount();
    public void AddRuntimeParameter(string name, string value);
    public void UpdateRuntimeParameter(string name, string value);
    public void RemoveRuntimeParameter(string name);
    public int get_DefaultRuntimeParameterCount();
    public int get_RuntimeParameterCount();
    public IDictionary get_Properties();
    public void AddResultFile(string fileName);
    public void BeginTimer(string timerName);
    public DataRow get_DataRow();
    private void UpdateCurrentTestOutcome(string result);
    public UnitTestOutcome get_CurrentTestOutcome();
    public void EndTimer(string timerName);
    public void WriteLine(string format, Object[] args);
    public void WriteLine(string message);
    private string GetPureType(string type);
    private void InsertEmptyArray(string name, string type);
}
public class WEX.TestExecution.Verify : object {
    private static string verifyContext;
    private static string userMessageDelimiter;
    [ThreadStaticAttribute]
private static bool disableVerifyExceptions;
    [ThreadStaticAttribute]
private static VerifyOutputSettings outputSettings;
    public static bool DisableVerifyFailureExceptions { get; public set; }
    public static VerifyOutputSettings OutputSettings { get; public set; }
    public static bool AreEqual(object expected, object actual, string message, string file, string function, int line);
    public static bool AreEqual(T expected, T actual, string message, string file, string function, int line);
    public static bool AreNotEqual(object expected, object actual, string message, string file, string function, int line);
    public static bool AreNotEqual(T expected, T actual, string message, string file, string function, int line);
    public static bool AreSame(object expected, object actual, string message, string file, string function, int line);
    public static bool AreNotSame(object expected, object actual, string message, string file, string function, int line);
    public static bool IsGreaterThan(IComparable expectedGreater, IComparable expectedLess, string message, string file, string function, int line);
    public static bool IsGreaterThanOrEqual(IComparable expectedGreater, IComparable expectedLess, string message, string file, string function, int line);
    public static bool IsLessThan(IComparable expectedLess, IComparable expectedGreater, string message, string file, string function, int line);
    public static bool IsLessThanOrEqual(IComparable expectedLess, IComparable expectedGreater, string message, string file, string function, int line);
    public static void Fail(string message, string file, string function, int line);
    public static bool IsTrue(bool condition, string message, string file, string function, int line);
    public static bool IsFalse(bool condition, string message, string file, string function, int line);
    public static bool IsNull(object variable, string message, string file, string function, int line);
    public static bool IsNotNull(object variable, string message, string file, string function, int line);
    public static T Throws(VerifyOperation operation, string message, string file, string function, int line);
    [AsyncStateMachineAttribute("WEX.TestExecution.Verify/<ThrowsAsync>d__16`1")]
public static Task`1<T> ThrowsAsync(Func`1<Task> operation, string message, string file, string function, int line);
    public static bool NoThrow(VerifyOperation operation, string message, string file, string function, int line);
    [AsyncStateMachineAttribute("WEX.TestExecution.Verify/<NoThrowAsync>d__18")]
public static Task`1<bool> NoThrowAsync(Func`1<Task> operation, string message, string file, string function, int line);
    public static bool get_DisableVerifyFailureExceptions();
    public static void set_DisableVerifyFailureExceptions(bool value);
    public static void set_OutputSettings(VerifyOutputSettings value);
    public static VerifyOutputSettings get_OutputSettings();
    public static bool ReferenceEquals(object left, object right);
    public static bool Equals(object left);
    public static bool Equals(object left, object right);
    public static bool GetHashCode();
    private static string ObjectToString(object objectToConvert);
    private static string BuildVerifyMessage(string functionName, object object1, object object2);
    private static string BuildSuccessMessage(string functionName, object object1, object object2);
    private static string BuildLogMessage(string userMessage, string verifyMessage);
    private static bool VerificationFailed(string userMessage, string verifyMessage, string file, string function, int line);
    private static bool LogOnlyFailures();
    private static bool VerificationPassed(string userMessage, string verifyMessage);
    private static int PerformComparison(IComparable a, IComparable b);
}
public class WEX.TestExecution.VerifyFailureException : Exception {
    public VerifyFailureException(string message);
    public VerifyFailureException(string message, Exception exception);
}
public class WEX.TestExecution.VerifyOperation : MulticastDelegate {
    public VerifyOperation(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum WEX.TestExecution.VerifyOutputSettings : Enum {
    public int value__;
    public static VerifyOutputSettings None;
    public static VerifyOutputSettings LogOnlyFailures;
    public static VerifyOutputSettings LogFailuresAsBlocked;
    public static VerifyOutputSettings LogFailuresAsWarnings;
}
public class WEX.TestExecution.VerifyWithoutDefaultArguments.Verify : object {
    public static bool DisableVerifyFailureExceptions { get; public set; }
    public static VerifyOutputSettings OutputSettings { get; public set; }
    public static bool AreEqual(object expected, object actual);
    public static bool AreEqual(object expected, object actual, string message);
    public static bool AreEqual(T expected, T actual);
    public static bool AreEqual(T expected, T actual, string message);
    public static bool AreNotEqual(object expected, object actual);
    public static bool AreNotEqual(object expected, object actual, string message);
    public static bool AreNotEqual(T expected, T actual);
    public static bool AreNotEqual(T expected, T actual, string message);
    public static bool AreSame(object expected, object actual);
    public static bool AreSame(object expected, object actual, string message);
    public static bool AreNotSame(object expected, object actual);
    public static bool AreNotSame(object expected, object actual, string message);
    public static bool IsGreaterThan(IComparable expectedGreater, IComparable expectedLess);
    public static bool IsGreaterThan(IComparable expectedGreater, IComparable expectedLess, string message);
    public static bool IsGreaterThanOrEqual(IComparable expectedGreater, IComparable expectedLess);
    public static bool IsGreaterThanOrEqual(IComparable expectedGreater, IComparable expectedLess, string message);
    public static bool IsLessThan(IComparable expectedLess, IComparable expectedGreater);
    public static bool IsLessThan(IComparable expectedLess, IComparable expectedGreater, string message);
    public static bool IsLessThanOrEqual(IComparable expectedLess, IComparable expectedGreater);
    public static bool IsLessThanOrEqual(IComparable expectedLess, IComparable expectedGreater, string message);
    public static void Fail(string message);
    public static bool IsTrue(bool condition);
    public static bool IsTrue(bool condition, string message);
    public static bool IsFalse(bool condition);
    public static bool IsFalse(bool condition, string message);
    public static bool IsNull(object variable);
    public static bool IsNull(object variable, string message);
    public static bool IsNotNull(object variable);
    public static bool IsNotNull(object variable, string message);
    public static T Throws(VerifyOperation operation);
    public static T Throws(VerifyOperation operation, string message);
    [AsyncStateMachineAttribute("WEX.TestExecution.VerifyWithoutDefaultArguments.Verify/<ThrowsAsync>d__31`1")]
public static Task`1<T> ThrowsAsync(Func`1<Task> operation);
    [AsyncStateMachineAttribute("WEX.TestExecution.VerifyWithoutDefaultArguments.Verify/<ThrowsAsync>d__32`1")]
public static Task`1<T> ThrowsAsync(Func`1<Task> operation, string message);
    public static bool NoThrow(VerifyOperation operation);
    public static bool NoThrow(VerifyOperation operation, string message);
    [AsyncStateMachineAttribute("WEX.TestExecution.VerifyWithoutDefaultArguments.Verify/<NoThrowAsync>d__35")]
public static Task`1<bool> NoThrowAsync(Func`1<Task> operation);
    [AsyncStateMachineAttribute("WEX.TestExecution.VerifyWithoutDefaultArguments.Verify/<NoThrowAsync>d__36")]
public static Task`1<bool> NoThrowAsync(Func`1<Task> operation, string message);
    public static bool get_DisableVerifyFailureExceptions();
    public static void set_DisableVerifyFailureExceptions(bool value);
    public static VerifyOutputSettings get_OutputSettings();
    public static void set_OutputSettings(VerifyOutputSettings value);
    public static bool ReferenceEquals(object left, object right);
    public static bool Equals(object left);
    public static bool Equals(object left, object right);
    public static bool GetHashCode();
}
internal class WEX.TestExecution.VoidSynchronizationContext : SynchronizationContext {
    private static SynchronizationContext synchronizationContext;
    private int operationCount;
    private ManualResetEventSlim completedEvent;
    private ExceptionDispatchInfo exceptionInfo;
    private static SendOrPostCallback postCallback;
    private static VoidSynchronizationContext();
    public virtual void Post(SendOrPostCallback operation, object state);
    public void Run();
    public virtual void OperationStarted();
    public virtual void OperationCompleted();
    public sealed virtual void Dispose();
}
