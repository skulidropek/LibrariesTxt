internal class Microsoft.Taef.TestMode.CallbackRegistrar : object {
    internal ulong callbackRegistrarPtr;
    internal ulong testModePtr;
    private bool isDisposed;
    internal CallbackRegistrar(ulong testModePtr, ulong callbackRegistrarPtr);
    public sealed virtual void RegisterLayerExpander(ILayerExpander layerExpander);
    public sealed virtual void RegisterLayerExpanderTopmost(ILayerExpander layerExpander);
    public sealed virtual void RegisterLayerExpanderWithinFixtures(ILayerExpander layerExpander);
    public sealed virtual void RegisterTestSelectionCallback(ITestSelectionCallback testSelectionCallback);
    public sealed virtual void RegisterTestRunCallback(ITestRunCallback testRunCallback);
    public sealed virtual void RegisterFixtureRunCallback(IFixtureRunCallback fixtureRunCallback);
    public sealed virtual void RegisterCompletionCallback(ICompletionCallback completionCallback);
    public sealed virtual void RegisterHostCreationCallback(IHostCreationCallback hostCreationCallback);
    protected void ThrowIfDisposed();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool calledExplicitly);
    public sealed virtual void Dispose();
}
internal class Microsoft.Taef.TestMode.Delegates.AfterCleanupCallback : MulticastDelegate {
    public AfterCleanupCallback(object object, IntPtr method);
    public virtual int Invoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber);
    public virtual IAsyncResult BeginInvoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.AfterTestRunCallback : MulticastDelegate {
    public AfterTestRunCallback(object object, IntPtr method);
    public virtual int Invoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber, TestResult result);
    public virtual IAsyncResult BeginInvoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber, TestResult result, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.BeforeSetupCallback : MulticastDelegate {
    public BeforeSetupCallback(object object, IntPtr method);
    public virtual int Invoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber);
    public virtual IAsyncResult BeginInvoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.BeforeTestRunCallback : MulticastDelegate {
    public BeforeTestRunCallback(object object, IntPtr method);
    public virtual int Invoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber);
    public virtual IAsyncResult BeginInvoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.CompletionCallback : MulticastDelegate {
    public CompletionCallback(object object, IntPtr method);
    public virtual int Invoke(TransitionType& result);
    public virtual IAsyncResult BeginInvoke(TransitionType& result, AsyncCallback callback, object object);
    public virtual int EndInvoke(TransitionType& result, IAsyncResult __result);
}
internal class Microsoft.Taef.TestMode.Delegates.CreateTestMode : MulticastDelegate {
    public CreateTestMode(object object, IntPtr method);
    public virtual int Invoke(string testModeName);
    public virtual IAsyncResult BeginInvoke(string testModeName, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.ExpandLayer : MulticastDelegate {
    public ExpandLayer(object object, IntPtr method);
    public virtual int Invoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber, Int32& type, Int32& nodeExpansionContextId, int layerExpanderContextId);
    public virtual IAsyncResult BeginInvoke(ulong testNodePtr, string source, string codeFilePath, int lineNumber, Int32& type, Int32& nodeExpansionContextId, int layerExpanderContextId, AsyncCallback callback, object object);
    public virtual int EndInvoke(Int32& type, Int32& nodeExpansionContextId, IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.HostCreatedCallback : MulticastDelegate {
    public HostCreatedCallback(object object, IntPtr method);
    public virtual int Invoke(ulong testHostInfoPtr);
    public virtual IAsyncResult BeginInvoke(ulong testHostInfoPtr, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.LoadTestModeAssembly : MulticastDelegate {
    public LoadTestModeAssembly(object object, IntPtr method);
    public virtual int Invoke(string assemblyPath);
    public virtual IAsyncResult BeginInvoke(string assemblyPath, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.NodeExpansionAdvance : MulticastDelegate {
    public NodeExpansionAdvance(object object, IntPtr method);
    public virtual int Invoke(ulong testResultSet, ulong testHostPtr, int nodeExpansionContextId, Boolean& isNull, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize);
    public virtual IAsyncResult BeginInvoke(ulong testResultSet, ulong testHostPtr, int nodeExpansionContextId, Boolean& isNull, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize, AsyncCallback callback, object object);
    public virtual int EndInvoke(Boolean& isNull, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize, IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.NodeExpansionInitialize : MulticastDelegate {
    public NodeExpansionInitialize(object object, IntPtr method);
    public virtual int Invoke(ulong testHostPtr, int nodeExpansionContextId, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize);
    public virtual IAsyncResult BeginInvoke(ulong testHostPtr, int nodeExpansionContextId, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize, AsyncCallback callback, object object);
    public virtual int EndInvoke(String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize, IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.NodeExpansionUninitialize : MulticastDelegate {
    public NodeExpansionUninitialize(object object, IntPtr method);
    public virtual int Invoke(int nodeExpansionContextId);
    public virtual IAsyncResult BeginInvoke(int nodeExpansionContextId, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.OnTestSelectionCallback : MulticastDelegate {
    public OnTestSelectionCallback(object object, IntPtr method);
    public virtual int Invoke(ulong testNodePtr, ulong testHostPtr, string source, string codeFilePath, int lineNumber, TransitionType& result);
    public virtual IAsyncResult BeginInvoke(ulong testNodePtr, ulong testHostPtr, string source, string codeFilePath, int lineNumber, TransitionType& result, AsyncCallback callback, object object);
    public virtual int EndInvoke(TransitionType& result, IAsyncResult __result);
}
internal class Microsoft.Taef.TestMode.Delegates.TestModeAbort : MulticastDelegate {
    public TestModeAbort(object object, IntPtr method);
    public virtual int Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
internal class Microsoft.Taef.TestMode.Delegates.TestModeInitialize : MulticastDelegate {
    public TestModeInitialize(object object, IntPtr method);
    public virtual int Invoke(ulong testmodePtr, ulong settingsPtr, ulong callbackRegistrarPtr, Boolean& result);
    public virtual IAsyncResult BeginInvoke(ulong testmodePtr, ulong settingsPtr, ulong callbackRegistrarPtr, Boolean& result, AsyncCallback callback, object object);
    public virtual int EndInvoke(Boolean& result, IAsyncResult __result);
}
public interface Microsoft.Taef.TestMode.Extensibility.ICompletionCallback {
    public abstract virtual TransitionType Complete();
}
public interface Microsoft.Taef.TestMode.Extensibility.IFixtureRunCallback {
    public abstract virtual void BeforeSetup(ITestNode node);
    public abstract virtual void AfterCleanup(ITestNode node);
}
public interface Microsoft.Taef.TestMode.Extensibility.IHostCreationCallback {
    public abstract virtual void HostCreated(ITestHostInfo testHostInfo);
}
public interface Microsoft.Taef.TestMode.Extensibility.ILayerExpander {
    public abstract virtual Transition ExpandLayer(ITestNode node);
}
public interface Microsoft.Taef.TestMode.Extensibility.INodeExpansion {
    public abstract virtual NodeExpansionData Initialize(ITestHost host);
    public abstract virtual Nullable`1<NodeExpansionData> Advance(ITestResultSet testResultSet, ITestHost host);
}
public interface Microsoft.Taef.TestMode.Extensibility.ITestMode {
    public abstract virtual bool Initialize(ITestModeSettings settings, ICallbackRegistrar callbackRegistrar);
    public abstract virtual void Abort();
}
public interface Microsoft.Taef.TestMode.Extensibility.ITestRunCallback {
    public abstract virtual void BeforeTestRun(ITestNode node);
    public abstract virtual void AfterTestRun(ITestNode node, TestResult result);
}
public interface Microsoft.Taef.TestMode.Extensibility.ITestSelectionCallback {
    public abstract virtual TransitionType TestSelection(ITestNode node, ITestHost host);
}
public class Microsoft.Taef.TestMode.Extensibility.Transition : ValueType {
    internal Nullable`1<TransitionType> type;
    internal INodeExpansion nodeExpansion;
    public Transition(TransitionType type);
    public Transition(INodeExpansion nodeExpansion);
}
public interface Microsoft.Taef.TestMode.ICallbackRegistrar {
    public abstract virtual void RegisterLayerExpander(ILayerExpander layerExpander);
    public abstract virtual void RegisterLayerExpanderTopmost(ILayerExpander layerExpander);
    public abstract virtual void RegisterLayerExpanderWithinFixtures(ILayerExpander layerExpander);
    public abstract virtual void RegisterTestSelectionCallback(ITestSelectionCallback testSelectionCallback);
    public abstract virtual void RegisterTestRunCallback(ITestRunCallback testRunCallback);
    public abstract virtual void RegisterFixtureRunCallback(IFixtureRunCallback fixtureRunCallback);
    public abstract virtual void RegisterCompletionCallback(ICompletionCallback completionCallback);
    public abstract virtual void RegisterHostCreationCallback(IHostCreationCallback hostCreationCallback);
}
public enum Microsoft.Taef.TestMode.InheritanceType : Enum {
    public int value__;
    public static InheritanceType Local;
    public static InheritanceType Inherited;
}
internal static class Microsoft.Taef.TestMode.InteropMethods : object {
    private static int E_FAIL;
    private static Assembly testModeAssembly;
    private static ITestMode testModeInstance;
    private static int nodeExpansionContextId;
    private static int layerExpanderContextId;
    private static Dictionary`2<int, INodeExpansion> nodeExpansions;
    private static object interopMethodsSync;
    [CompilerGeneratedAttribute]
private static ITestSelectionCallback <ITestSelectionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static ITestRunCallback <ITestRunCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static IFixtureRunCallback <IFixtureRunCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static ICompletionCallback <ICompletionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static IHostCreationCallback <IHostCreationCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<int, ILayerExpander> <ILayerExpanders>k__BackingField;
    internal static ITestSelectionCallback ITestSelectionCallback { get; internal set; }
    internal static ITestRunCallback ITestRunCallback { get; internal set; }
    internal static IFixtureRunCallback IFixtureRunCallback { get; internal set; }
    internal static ICompletionCallback ICompletionCallback { get; internal set; }
    internal static IHostCreationCallback IHostCreationCallback { get; internal set; }
    internal static Dictionary`2<int, ILayerExpander> ILayerExpanders { get; internal set; }
    private static InteropMethods();
    internal static int AddLayerExpander(ILayerExpander layerExpander);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.LoadTestModeAssembly")]
public static int LoadTestModeAssembly(string assemblyPath);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.CreateTestMode")]
public static int CreateTestMode(string testModeName);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.TestModeInitialize")]
public static int TestModeInitialize(ulong testModePtr, ulong settingsPtr, ulong callbackRegistrarPtr, Boolean& result);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.TestModeAbort")]
public static int TestModeAbort();
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.HostCreatedCallback")]
public static int HostCreatedCallback(ulong testHostInfoPtr);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.CompletionCallback")]
public static int CompletionCallback(TransitionType& result);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.AfterCleanupCallback")]
public static int AfterCleanupCallback(ulong testNodePtr, string source, string codeFilePath, int lineNumber);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.BeforeSetupCallback")]
public static int BeforeSetupCallback(ulong testNodePtr, string source, string codeFilePath, int lineNumber);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.AfterTestRunCallback")]
public static int AfterTestRunCallback(ulong testNodePtr, string source, string codeFilePath, int lineNumber, TestResult result);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.BeforeTestRunCallback")]
public static int BeforeTestRunCallback(ulong testNodePtr, string source, string codeFilePath, int lineNumber);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.OnTestSelectionCallback")]
public static int OnTestSelectionCallback(ulong testNodePtr, ulong testHostPtr, string source, string codeFilePath, int lineNumber, TransitionType& type);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.ExpandLayer")]
public static int ExpandLayer(ulong testNodePtr, string source, string codeFilePath, int lineNumber, Int32& type, Int32& nodeExpansionContextId, int layerExpanderContextId);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.NodeExpansionAdvance")]
public static int NodeExpansionAdvance(ulong testResultSetPtr, ulong testHostPtr, int nodeExpansionContextId, Boolean& isNull, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.NodeExpansionInitialize")]
public static int NodeExpansionInitialize(ulong testHostPtr, int nodeExpansionContextId, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize);
    [DelegateTypeAttribute("Microsoft.Taef.TestMode.Delegates.NodeExpansionUninitialize")]
public static int NodeExpansionUninitialize(int nodeExpansionContextId);
    public static String[] MarshalUnmanagedStringArrayToStringArray(IntPtr pUnmanagedArray, int count);
    private static void FlattenNodeExpansionData(NodeExpansionData results, String[]& dataTypes, Int32& dataTypesSize, String[]& dataValues, Int32& dataValuesSize, String[]& metadata, Int32& metadataSize);
    [CompilerGeneratedAttribute]
internal static ITestSelectionCallback get_ITestSelectionCallback();
    [CompilerGeneratedAttribute]
internal static void set_ITestSelectionCallback(ITestSelectionCallback value);
    [CompilerGeneratedAttribute]
internal static ITestRunCallback get_ITestRunCallback();
    [CompilerGeneratedAttribute]
internal static void set_ITestRunCallback(ITestRunCallback value);
    [CompilerGeneratedAttribute]
internal static IFixtureRunCallback get_IFixtureRunCallback();
    [CompilerGeneratedAttribute]
internal static void set_IFixtureRunCallback(IFixtureRunCallback value);
    [CompilerGeneratedAttribute]
internal static ICompletionCallback get_ICompletionCallback();
    [CompilerGeneratedAttribute]
internal static void set_ICompletionCallback(ICompletionCallback value);
    [CompilerGeneratedAttribute]
internal static IHostCreationCallback get_IHostCreationCallback();
    [CompilerGeneratedAttribute]
internal static void set_IHostCreationCallback(IHostCreationCallback value);
    [CompilerGeneratedAttribute]
internal static Dictionary`2<int, ILayerExpander> get_ILayerExpanders();
    [CompilerGeneratedAttribute]
internal static void set_ILayerExpanders(Dictionary`2<int, ILayerExpander> value);
}
public interface Microsoft.Taef.TestMode.ITestHost {
    public abstract virtual void Refresh();
    public abstract virtual void SetSessionId(int sessionId);
    public abstract virtual void SetCommandLinePrefix(string executableName, string directory, string arguments);
}
public interface Microsoft.Taef.TestMode.ITestHostInfo {
    public abstract virtual int GetPid();
}
public interface Microsoft.Taef.TestMode.ITestModeSettings {
    public abstract virtual string GetValue(string propertyName);
}
public interface Microsoft.Taef.TestMode.ITestNode {
    public abstract virtual Guid GetId();
    public abstract virtual string GetName();
    public abstract virtual string GetSource();
    public abstract virtual string GetCodeFilePath();
    public abstract virtual Nullable`1<int> GetLineNumber();
    public abstract virtual IList`1<string> GetMetadata(string name, InheritanceType type);
    public abstract virtual bool IsTest();
    public abstract virtual bool IsModule();
}
public interface Microsoft.Taef.TestMode.ITestResultSet {
    public abstract virtual int GetTestCount();
    public abstract virtual TestResult GetWorstResult();
}
internal static class Microsoft.Taef.TestMode.NativeMethods : object {
    internal static int TestModeSettingsGetValue(ulong settingsPtr, string propertyName, String& value);
    internal static int RegisterTestSelectionCallback(ulong testModePtr, ulong callbackRegistrarPtr);
    internal static int RegisterTestRunCallback(ulong testModePtr, ulong callbackRegistrarPtr);
    internal static int RegisterFixtureRunCallback(ulong testModePtr, ulong callbackRegistrarPtr);
    internal static int RegisterCompletionCallback(ulong testModePtr, ulong callbackRegistrarPtr);
    internal static int RegisterHostCreationCallback(ulong testModePtr, ulong callbackRegistrarPtr);
    internal static int RegisterLayerExpander(ulong testModePtr, ulong callbackRegistrarPtr, int layerExpanderContextId);
    internal static int RegisterLayerExpanderTopmost(ulong testModePtr, ulong callbackRegistrarPtr, int layerExpanderContextId);
    internal static int RegisterLayerExpanderWithinFixtures(ulong testModePtr, ulong callbackRegistrarPtr, int layerExpanderContextId);
    internal static int TestNodeGetId(ulong testNodePtr, Guid& id);
    internal static int TestNodeGetName(ulong testNodePtr, String& name);
    internal static int TestNodeGetMetadata(ulong testNodePtr, string name, InheritanceType type, IntPtr& results, Int32& size);
    internal static int TestNodeIsTest(ulong testNodePtr, Boolean& isTest);
    internal static int TestNodeIsModule(ulong testNodePtr, Boolean& isModule);
    internal static int TestHostInfoGetPid(ulong testHostInfoPtr, Int32& pid);
    internal static int TestHostRefresh(ulong testHostPtr);
    internal static int TestHostSetSessionId(ulong testHostPtr, int sessionId);
    internal static int TestHostSetCommandLinePrefix(ulong testHostPtr, string executableName, string directory, string arguments);
    internal static int TestResultSetGetTestCount(ulong testResultSetPtr, Int32& count);
    internal static int TestResultSetGetWorstResult(ulong testResultSetPtr, Int32& result);
}
public class Microsoft.Taef.TestMode.NodeExpansionData : ValueType {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <DataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<string>> <DataValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, IList`1<string>> <Metadata>k__BackingField;
    public IDictionary`2<string, string> DataTypes { get; public set; }
    public IDictionary`2<string, IList`1<string>> DataValues { get; public set; }
    public IDictionary`2<string, IList`1<string>> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_DataTypes();
    [CompilerGeneratedAttribute]
public void set_DataTypes(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<string>> get_DataValues();
    [CompilerGeneratedAttribute]
public void set_DataValues(IDictionary`2<string, IList`1<string>> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, IList`1<string>> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, IList`1<string>> value);
}
internal class Microsoft.Taef.TestMode.TestHost : object {
    private ulong testHostPtr;
    private bool isDisposed;
    internal TestHost(ulong testHostPtr);
    public sealed virtual void Refresh();
    public sealed virtual void SetSessionId(int sessionId);
    public sealed virtual void SetCommandLinePrefix(string executableName, string directory, string arguments);
    protected void ThrowIfDisposed();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool calledExplicitly);
    public sealed virtual void Dispose();
}
internal class Microsoft.Taef.TestMode.TestHostInfo : object {
    private ulong testHostInfoPtr;
    private bool isDisposed;
    internal TestHostInfo(ulong testHostInfoPtr);
    public sealed virtual int GetPid();
    protected void ThrowIfDisposed();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool calledExplicitly);
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("4")]
public class Microsoft.Taef.TestMode.TestModeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public TestModeAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Microsoft.Taef.TestMode.TestModeSettings : object {
    private ulong settings;
    private bool isDisposed;
    internal TestModeSettings(ulong settings);
    public sealed virtual string GetValue(string propertyName);
    protected void ThrowIfDisposed();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool calledExplicitly);
    public sealed virtual void Dispose();
}
internal class Microsoft.Taef.TestMode.TestNode : object {
    private ulong testNodePtr;
    private Nullable`1<Guid> testNodeId;
    private object testNodeSync;
    private string source;
    private string codeFilePath;
    private Nullable`1<int> lineNumber;
    private bool isDisposed;
    internal TestNode(ulong testNodePtr, string source, string codeFilePath, int lineNumber);
    public sealed virtual Guid GetId();
    public sealed virtual string GetName();
    public sealed virtual string GetSource();
    public sealed virtual string GetCodeFilePath();
    public sealed virtual Nullable`1<int> GetLineNumber();
    public sealed virtual IList`1<string> GetMetadata(string name, InheritanceType type);
    public sealed virtual bool IsTest();
    public sealed virtual bool IsModule();
    protected void ThrowIfDisposed();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool calledExplicitly);
    public sealed virtual void Dispose();
}
public enum Microsoft.Taef.TestMode.TestResult : Enum {
    public int value__;
    public static TestResult Passed;
    public static TestResult NotRun;
    public static TestResult Skipped;
    public static TestResult Blocked;
    public static TestResult Failed;
    public static TestResult Unknown;
}
internal class Microsoft.Taef.TestMode.TestResultSet : object {
    private ulong testResultSetPtr;
    private bool isDisposed;
    internal TestResultSet(ulong testResultSetPtr);
    public sealed virtual int GetTestCount();
    public sealed virtual TestResult GetWorstResult();
    protected void ThrowIfDisposed();
    protected virtual override void Finalize();
    protected virtual void Dispose(bool calledExplicitly);
    public sealed virtual void Dispose();
}
public enum Microsoft.Taef.TestMode.TransitionType : Enum {
    public int value__;
    public static TransitionType Continue;
    public static TransitionType Repeat;
    public static TransitionType Skip;
}
