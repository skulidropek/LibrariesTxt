public class WEX.Logging.Interop.AssertTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public AssertTrace(string message, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public class WEX.Logging.Interop.BugTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public BugTrace(string bugDatabase, int bugId, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public class WEX.Logging.Interop.CommentTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public CommentTrace(string message, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public class WEX.Logging.Interop.EndGroupTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public EndGroupTrace(string groupName, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public class WEX.Logging.Interop.ErrorTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public ErrorTrace(string message, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public class WEX.Logging.Interop.FileTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public FileTrace(string fileName, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public static class WEX.Logging.Interop.Log : object {
    public static void Assert(IFormatProvider provider, string format, Object[] args);
    public static void Assert(string format, Object[] args);
    public static void Assert(string format, object arg0);
    public static void Assert(string message);
    public static void Assert(string message, string context);
    public static void Assert(string message, string file, string function, int line);
    public static void Assert(string message, string context, string file, string function, int line);
    public static void Trace(AssertTrace trace);
    public static void Bug(string bugDatabase, int bugId);
    public static void Bug(string bugDatabase, int bugId, string context);
    public static void Trace(BugTrace trace);
    public static void Comment(IFormatProvider provider, string format, Object[] args);
    public static void Comment(string format, Object[] args);
    public static void Comment(string format, object arg0);
    public static void Comment(string message);
    public static void Comment(string message, string context);
    public static void CommentWithContext(string message, string context);
    public static void Trace(CommentTrace trace);
    public static void EndGroup(string groupName);
    public static void EndGroup(string groupName, string context);
    public static void Trace(EndGroupTrace trace);
    public static void Error(IFormatProvider provider, string format, Object[] args);
    public static void Error(string format, Object[] args);
    public static void Error(string format, object arg0);
    public static void Error(string message);
    public static void Error(string message, string context);
    public static void ErrorWithContext(string message, string context);
    public static void Error(string message, string file, string function, int line);
    public static void Error(string message, string context, string file, string function, int line);
    public static void Trace(ErrorTrace trace);
    public static void File(string fileName);
    public static void File(string fileName, string context);
    public static void Trace(FileTrace trace);
    private static void FormatIfFormatable(String& message, String& context);
    private static bool IsFormatString(string candidate);
    [SecuritySafeCriticalAttribute]
public static void MiniDump();
    public static void Property(string name, string value);
    public static void Property(string name, string value, string context);
    public static void Trace(PropertyTrace trace);
    public static void Result(TestResult testResult);
    public static void Result(TestResult testResult, string comment);
    public static void Result(TestResult testResult, string comment, string context);
    public static void Trace(ResultTrace trace);
    public static void StartGroup(string groupName);
    public static void StartGroup(string groupName, string context);
    public static void Trace(StartGroupTrace trace);
    public static void Warning(IFormatProvider provider, string format, Object[] args);
    public static void Warning(string format, Object[] args);
    public static void Warning(string format, object arg0);
    public static void Warning(string message);
    public static void Warning(string message, string context);
    public static void WarningWithContext(string message, string context);
    public static void Warning(string message, string file, string function, int line);
    public static void Warning(string message, string context, string file, string function, int line);
    public static void Trace(WarningTrace trace);
    public static void Xml(string xmlData);
    public static void Xml(string xmlData, string context);
    public static void Trace(XmlTrace trace);
    [SecuritySafeCriticalAttribute]
private static void TraceImpl(LogTrace& trace);
}
[EditorBrowsableAttribute("1")]
public static class WEX.Logging.Interop.LogContext : object {
    [SecuritySafeCriticalAttribute]
public static void CloseContext(string context, TestResult testResult);
    [SecuritySafeCriticalAttribute]
public static void CreateContext(string parentContext, string childContext, string childData);
    [SecuritySafeCriticalAttribute]
public static void LogComment(string context, string comment);
    [SecuritySafeCriticalAttribute]
public static void LogFile(string context, string fileName);
    [SecuritySafeCriticalAttribute]
public static void LogXml(string context, string xml);
}
public static class WEX.Logging.Interop.LogController : object {
    [CompilerGeneratedAttribute]
private static WexLoggerErrorEventHandler WexLoggerError;
    [CompilerGeneratedAttribute]
public static void add_WexLoggerError(WexLoggerErrorEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_WexLoggerError(WexLoggerErrorEventHandler value);
    public static void InitializeLogging();
    [SecuritySafeCriticalAttribute]
public static void InitializeLogging(string logName);
    [SecuritySafeCriticalAttribute]
public static bool IsInitialized();
    [SecuritySafeCriticalAttribute]
public static string GetLogName();
    [SecuritySafeCriticalAttribute]
public static void FinalizeLogging();
    internal static void OnWexLoggerError(WexLoggerErrorEventArgs e);
}
internal class WEX.Logging.Interop.LogTrace : ValueType {
    private UIntPtr traceTypeAndAttachments;
    private string message;
    private UIntPtr traceTypeSpecificIntegralValue;
    private string traceTypeSpecificPointerValue;
    private string context;
    private string file;
    private string function;
    private IntPtr line;
    private string xmlAnnotation;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public LogTrace(TraceType traceType, string message, string file, string function, int line, UInt32 traceTypeSpecificIntegralValue, string traceTypeSpecificPointerValue);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
[FlagsAttribute]
public enum WEX.Logging.Interop.LogTraceAttachment : Enum {
    public int value__;
    public static LogTraceAttachment None;
    public static LogTraceAttachment ScreenCapture;
    public static LogTraceAttachment MiniDump;
}
internal static class WEX.Logging.Interop.LogUtilities : object {
    private static int UnexpectedErrorCode;
    public static void HandleException(string message, Exception e);
}
internal static class WEX.Logging.Interop.NativeMethods : object {
    internal static void Log_Trace(LogTrace& trace);
    internal static void Log_MiniDump();
    internal static void LogContext_CreateContext(string parentContext, string childContext, string childData);
    internal static void LogContext_CloseContext(string context, TestResult testResult);
    internal static void LogContext_LogComment(string context, string comment);
    internal static void LogContext_LogFile(string context, string fileName);
    internal static void LogContext_LogXml(string context, string xml);
    internal static void LogController_NotifyCallback(string message, int errorCode);
    internal static int LogController_FinalizeLogging();
    internal static IntPtr LogController_GetLogName();
    internal static bool LogController_IsInitialized();
    internal static int LogController_InitializeLogging(string logName);
    internal static int RemoteLogController_GenerateConnectionData(string machineName, StringBuilder connectionData, IntPtr& numberOfCharacters);
    internal static int RemoteLogController_InitializeLogging(string connectionData);
}
public class WEX.Logging.Interop.PropertyTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public PropertyTrace(string name, string value, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public static class WEX.Logging.Interop.RemoteLogController : object {
    public static string WexLoggerRemoteConnectionData;
    public static string GenerateConnectionData();
    [SecuritySafeCriticalAttribute]
public static string GenerateConnectionData(string machineName);
    [SecuritySafeCriticalAttribute]
public static void InitializeLogging(string connectionData);
}
public class WEX.Logging.Interop.ResultTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public ResultTrace(TestResult testResult, string comment, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public class WEX.Logging.Interop.StartGroupTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public StartGroupTrace(string groupName, string file, string function, int line);
    public StartGroupTrace(string groupName, TestResult defaultTestResult, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public enum WEX.Logging.Interop.TestResult : Enum {
    public int value__;
    public static TestResult Passed;
    public static TestResult NotRun;
    public static TestResult Skipped;
    public static TestResult Blocked;
    public static TestResult Failed;
    public static TestResult Unknown;
}
public class WEX.Logging.Interop.WarningTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public WarningTrace(string message, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
public class WEX.Logging.Interop.WexLoggerErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public int ErrorCode { get; private set; }
    public string Message { get; private set; }
    public WexLoggerErrorEventArgs(string message, int errorCode);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
}
public class WEX.Logging.Interop.WexLoggerErrorEventHandler : MulticastDelegate {
    public WexLoggerErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WexLoggerErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WexLoggerErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class WEX.Logging.Interop.WexLoggerException : Exception {
    public int ErrorCode { get; }
    public WexLoggerException(int errorCode);
    public WexLoggerException(string message);
    public WexLoggerException(int errorCode, string message);
    public WexLoggerException(string message, Exception exception);
    public int get_ErrorCode();
    public virtual string ToString();
}
public class WEX.Logging.Interop.XmlTrace : ValueType {
    internal LogTrace logTrace;
    unknown string Context {public set; }
    unknown string XmlAnnotation {public set; }
    unknown LogTraceAttachment Attachment {public set; }
    public XmlTrace(string xmlData, string file, string function, int line);
    public void set_Context(string value);
    public void set_XmlAnnotation(string value);
    public void set_Attachment(LogTraceAttachment value);
}
