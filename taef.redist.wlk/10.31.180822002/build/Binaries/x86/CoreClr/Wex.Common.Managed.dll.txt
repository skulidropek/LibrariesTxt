internal class WEX.Common.Managed.AndExpression : object {
    private Expression leftExpression;
    private Expression rightExpression;
    public AndExpression(Expression leftExpression, Expression rightExpression);
    public sealed virtual void Accept(IQueryTreeVisitor visitor);
}
internal class WEX.Common.Managed.BooleanValue : object {
    private bool value;
    public BooleanValue(bool value);
    public sealed virtual void Accept(IQueryTreeVisitor visitor, string propertyName, ComparisonType comparisonType);
}
public enum WEX.Common.Managed.ComparisonType : Enum {
    public int value__;
    public static ComparisonType Lesser;
    public static ComparisonType LesserEquals;
    public static ComparisonType Equals;
    public static ComparisonType GreaterEquals;
    public static ComparisonType Greater;
}
public class WEX.Common.Managed.DebugHelp : object {
    private IntPtr nativeThis;
    private static int Construct(IntPtr& nativeThis, IntPtr& errorInfo);
    private static void Destroy(IntPtr nativeThis);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    private static int GetDebugTypeInfoArrayFromQuery(IntPtr nativeThis, string moduleName, string query, UInt32& arraySize, IntPtr& debugTypeInfoArrayPtr, String& wexExceptionErrorMessage, IntPtr& errorInfo);
    private static void GetDebugTypeInfoArrayElement(IntPtr debugTypeInfoArrayPtr, UInt32 index, IntPtr& pszFileName, UInt32& lineNumber);
    private static void DestroyDebugTypeInfoArray(IntPtr debugTypeInfoArrayPtr);
    public IEnumerable`1<DebugTypeInfo> GetTypesFromQuery(string moduleName, string query);
    private static int SetSearchPath(IntPtr nativeThis, string searchPath, String& wexExceptionErrorMessage, IntPtr& errorInfo);
    public void SetSearchPath(string searchPath);
    private static int GetSearchPath(IntPtr nativeThis, String& searchPath, String& wexExceptionErrorMessage, IntPtr& errorInfo);
    public string GetSearchPath();
}
public class WEX.Common.Managed.DebugTypeInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <LineNumber>k__BackingField;
    public string FileName { get; private set; }
    public UInt32 LineNumber { get; private set; }
    internal DebugTypeInfo(string fileName, UInt32 lineNumber);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
private void set_FileName(string value);
    [CompilerGeneratedAttribute]
public UInt32 get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(UInt32 value);
}
internal interface WEX.Common.Managed.Expression {
    public abstract virtual void Accept(IQueryTreeVisitor visitor);
}
internal class WEX.Common.Managed.FloatValue : object {
    private string floatValue;
    private string unit;
    public FloatValue(string floatValue, string unit);
    public sealed virtual void Accept(IQueryTreeVisitor visitor, string propertyName, ComparisonType comparisonType);
}
public enum WEX.Common.Managed.ImageFormat : Enum {
    public int value__;
    public static ImageFormat Lossless;
    public static ImageFormat HDPhoto;
    public static ImageFormat Png;
    public static ImageFormat Bmp;
    public static ImageFormat Jpeg;
    public static ImageFormat LowQuality;
}
internal class WEX.Common.Managed.IntegerValue : object {
    private string integerValue;
    private string unit;
    public IntegerValue(string integerValue, string unit);
    public sealed virtual void Accept(IQueryTreeVisitor visitor, string propertyName, ComparisonType comparisonType);
}
public interface WEX.Common.Managed.IPropertyLookup {
    public abstract virtual IEnumerable`1<string> GetPropertyValues(string propertyName, string unit);
}
public abstract class WEX.Common.Managed.IQueryTreeVisitor : object {
    public virtual void VisitNothing();
    public virtual void And();
    public virtual void Or();
    public virtual void Not();
    public virtual void PushBooleanProperty(string propertyName, bool booleanValue);
    public virtual void PushWildCharProperty(string propertyName);
    public virtual void PushStringProperty(string propertyName, string stringValue);
    public virtual void PushIntegerProperty(string propertyName, ComparisonType comparisonType, string integerValue, string unit);
    public virtual void PushFloatProperty(string propertyName, ComparisonType comparisonType, string floatValue, string unit);
}
internal class WEX.Common.Managed.NotExpression : object {
    private Expression expression;
    public NotExpression(Expression expression);
    public sealed virtual void Accept(IQueryTreeVisitor visitor);
}
internal class WEX.Common.Managed.OrExpression : object {
    private Expression leftExpression;
    private Expression rightExpression;
    public OrExpression(Expression leftExpression, Expression rightExpression);
    public sealed virtual void Accept(IQueryTreeVisitor visitor);
}
internal class WEX.Common.Managed.ParserHelper : object {
    private string parsee;
    private int index;
    public ParserHelper(string parsee);
    public static bool IsWhitespace(char c);
    public static bool IsDigit(char c);
    public static bool IsAlpha(char c);
    public void Advance();
    public char Read();
    public char Peek();
    public char GetPrevious();
    public void SkipWhitespace();
    public bool ReadOptionalString(string possibleString);
    public bool ReadOptionalString(string possibleString, IgnoreWhitespace ignoreWhitespace);
    public void ReadExpectedCharacter(char expectedCharacter);
    public void ReadExpectedCharacter(char expectedCharacter, IgnoreWhitespace ignoreWhitespace);
    private char ReadChar(int index);
    public ParserHelper Clone();
}
internal class WEX.Common.Managed.PropertyExpression : object {
    private string propertyName;
    private ComparisonType comparisonType;
    private Value propertyValue;
    public PropertyExpression(string propertyName, ComparisonType comparisonType, Value value);
    public sealed virtual void Accept(IQueryTreeVisitor visitor);
}
internal class WEX.Common.Managed.QueryMatchVisitor : IQueryTreeVisitor {
    private IPropertyLookup lookupClass;
    private Stack`1<bool> state;
    public QueryMatchVisitor(IPropertyLookup lookupClass);
    public virtual void VisitNothing();
    public virtual void And();
    public virtual void Or();
    public virtual void Not();
    public virtual void PushBooleanProperty(string propertyName, bool booleanValue);
    public virtual void PushWildCharProperty(string propertyName);
    public virtual void PushStringProperty(string propertyName, string stringValue);
    public virtual void PushIntegerProperty(string propertyName, ComparisonType comparisonType, string integerValue, string unit);
    public virtual void PushFloatProperty(string propertyName, ComparisonType comparisonType, string floatValue, string unit);
    public bool GetResult();
    private void EvaluateExpression(string propertyName, string unit, Predicate`1<string> condition);
}
public static class WEX.Common.Managed.ScreenCapture : object {
    private static ImageFormat DefaultImageFormat;
    private static ScreenCaptureOptions DefaultCaptureOptions;
    private static ScreenCapture();
    public static string Save(string filePath);
    public static string Save(string filePath, ImageFormat imageFormat);
    public static string Save(string filePath, ScreenCaptureOptions captureOptions);
    private static int Save(string filePath, int imageFormat, int captureOptions, String& newPath, IntPtr& errorInfo);
    public static string Save(string filePath, ImageFormat imageFormat, ScreenCaptureOptions captureOptions);
    public static string Save(int left, int top, int right, int bottom, string filePath);
    public static string Save(int left, int top, int right, int bottom, string filePath, ImageFormat imageFormat);
    public static string Save(int left, int top, int right, int bottom, string filePath, ScreenCaptureOptions captureOptions);
    private static int Save(int left, int top, int right, int bottom, string filePath, int imageFormat, int captureOptions, String& newPath, IntPtr& errorInfo);
    public static string Save(int left, int top, int right, int bottom, string filePath, ImageFormat imageFormat, ScreenCaptureOptions captureOptions);
}
[FlagsAttribute]
public enum WEX.Common.Managed.ScreenCaptureOptions : Enum {
    public int value__;
    public static ScreenCaptureOptions None;
    public static ScreenCaptureOptions ShowMouseCursor;
    public static ScreenCaptureOptions Unknown;
}
public class WEX.Common.Managed.SelectFilter : object {
    private string selectionCriteria;
    private Expression rootExpression;
    public string SelectionCriteria { get; public set; }
    public SelectFilter(string selectionCriteria);
    private static bool IsIdentifierChar(char c);
    private static bool IsUnitChar(char c);
    private static string ReadIdentifier(ParserHelper& query);
    private static string ReadNumericString(ParserHelper& query);
    private static StringValue ReadStringValue(ParserHelper& query);
    private static string ReadPropertyName(ParserHelper& query);
    private static string ReadUnit(ParserHelper& query);
    private static Value ReadNumericalValue(ParserHelper& query);
    private static Value ReadValue(ParserHelper& query);
    private static Expression ReadPropertyExpression(ParserHelper& query);
    private static Expression ReadParenthesisExpression(ParserHelper& query);
    private static Expression ReadNotExpression(ParserHelper& query);
    private static Expression ReadAndExpression(ParserHelper& query);
    private static Expression ReadOrExpression(ParserHelper& query);
    private static Expression Parse(string selectionCriteria);
    public string get_SelectionCriteria();
    public void set_SelectionCriteria(string value);
    public void Accept(IQueryTreeVisitor visitor);
    public bool Matches(IPropertyLookup lookupClass);
}
public class WEX.Common.Managed.SelectLanguageException : Exception {
    public SelectLanguageException(string message);
    public SelectLanguageException(string message, Exception innerException);
}
internal class WEX.Common.Managed.StringValue : object {
    private string stringValue;
    public StringValue(string stringValue);
    public sealed virtual void Accept(IQueryTreeVisitor visitor, string propertyName, ComparisonType comparisonType);
}
internal interface WEX.Common.Managed.Value {
    public abstract virtual void Accept(IQueryTreeVisitor visitor, string propertyName, ComparisonType comparisonType);
}
public static class WEX.Common.Managed.WexDebug : object {
    private static void WexDebugBreak_ShouldUseDebuggerLaunch(Boolean& shouldUseDebuggerLaunch);
    private static void Debug_Break();
    private static bool ShouldUseDebuggerLaunch();
    public static void Break();
}
public class WEX.Common.Managed.WexException : Exception {
    public int ErrorCode { get; }
    internal WexException(int errorCode, string message);
    public int get_ErrorCode();
    internal static void ThrowAppropriateExceptionIfNecessary(int hr, string wexExceptionErrorMessage, IntPtr errorInfo);
}
public class WEX.Common.Managed.Wildcard : object {
    private Regex pattern;
    public Wildcard(string wildcard);
    public bool Matches(string target);
}
internal class WEX.Common.Managed.WildCharValue : object {
    public sealed virtual void Accept(IQueryTreeVisitor visitor, string propertyName, ComparisonType comparisonType);
}
