[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.NodeServices.Npm.NodeScriptRunner : object {
    [NullableAttribute("2")]
private Process _npmProcess;
    [CompilerGeneratedAttribute]
private EventedStreamReader <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private EventedStreamReader <StdErr>k__BackingField;
    private static Regex AnsiColorRegex;
    public EventedStreamReader StdOut { get; }
    public EventedStreamReader StdErr { get; }
    public NodeScriptRunner(string workingDirectory, string scriptName, string arguments, IDictionary`2<string, string> envVars, string pkgManagerCommand, DiagnosticSource diagnosticSource, CancellationToken applicationStoppingToken);
    private static NodeScriptRunner();
    [CompilerGeneratedAttribute]
public EventedStreamReader get_StdOut();
    [CompilerGeneratedAttribute]
public EventedStreamReader get_StdErr();
    public void AttachToLogger(ILogger logger, bool treatErrorsAsInfo);
    private static string StripAnsiColors(string line);
    private static Process LaunchNodeProcess(ProcessStartInfo startInfo, string commandName);
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.NodeServices.Util.EventedStreamReader : object {
    [CompilerGeneratedAttribute]
private OnReceivedChunkHandler OnReceivedChunk;
    [CompilerGeneratedAttribute]
private OnReceivedLineHandler OnReceivedLine;
    [CompilerGeneratedAttribute]
private OnStreamClosedHandler OnStreamClosed;
    [NullableAttribute("1")]
private StreamReader _streamReader;
    [NullableAttribute("1")]
private StringBuilder _linesBuffer;
    [NullableContextAttribute("1")]
public EventedStreamReader(StreamReader streamReader);
    [CompilerGeneratedAttribute]
public void add_OnReceivedChunk(OnReceivedChunkHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnReceivedChunk(OnReceivedChunkHandler value);
    [CompilerGeneratedAttribute]
public void add_OnReceivedLine(OnReceivedLineHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnReceivedLine(OnReceivedLineHandler value);
    [CompilerGeneratedAttribute]
public void add_OnStreamClosed(OnStreamClosedHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnStreamClosed(OnStreamClosedHandler value);
    [NullableContextAttribute("1")]
public Task`1<Match> WaitForMatch(Regex regex);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.AspNetCore.NodeServices.Util.EventedStreamReader/<Run>d__16")]
private Task Run();
    [NullableContextAttribute("0")]
private void OnChunk(ArraySegment`1<char> chunk);
    [NullableContextAttribute("1")]
private void OnCompleteLine(string line);
    private void OnClosed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.AspNetCore.NodeServices.Util.EventedStreamStringReader : object {
    private EventedStreamReader _eventedStreamReader;
    private bool _isDisposed;
    private StringBuilder _stringBuilder;
    public EventedStreamStringReader(EventedStreamReader eventedStreamReader);
    public string ReadAsString();
    private void OnReceivedLine(string line);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.AspNetCore.SpaServices.Extensions.Util.TaskTimeoutExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Util.TaskTimeoutExtensions/<WithTimeout>d__0")]
[ExtensionAttribute]
public static Task WithTimeout(Task task, TimeSpan timeoutDelay, string message);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.SpaServices.Extensions.Util.TaskTimeoutExtensions/<WithTimeout>d__1`1")]
[ExtensionAttribute]
public static Task`1<T> WithTimeout(Task`1<T> task, TimeSpan timeoutDelay, string message);
}
internal static class Microsoft.AspNetCore.SpaServices.Util.LoggerFinder : object {
    [NullableContextAttribute("1")]
public static ILogger GetOrCreateLogger(IApplicationBuilder appBuilder, string logCategoryName);
}
internal static class Microsoft.AspNetCore.SpaServices.Util.TcpPortFinder : object {
    public static int FindAvailablePort();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Tailwind.TailwindMiddleware : object {
    private static string LogCategoryName;
    private static TimeSpan RegexMatchTimeout;
    private static TailwindMiddleware();
    [AsyncStateMachineAttribute("Tailwind.TailwindMiddleware/<Attach>d__2")]
public static Task Attach(IApplicationBuilder appBuilder, string scriptName, string workingDir);
    [AsyncStateMachineAttribute("Tailwind.TailwindMiddleware/<ExecuteScript>d__3")]
private static Task ExecuteScript(string sourcePath, string scriptName, ILogger logger, DiagnosticSource diagnosticSource, CancellationToken applicationStoppingToken);
}
[ExtensionAttribute]
public static class Tailwind.TailwindMiddlewareExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task RunTailwind(IApplicationBuilder applicationBuilder, string npmScript, string workingDir);
}
