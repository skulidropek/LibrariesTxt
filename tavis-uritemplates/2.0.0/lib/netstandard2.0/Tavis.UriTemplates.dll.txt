public class Tavis.UriTemplates.OperatorInfo : object {
    [CompilerGeneratedAttribute]
private bool <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private string <First>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Separator>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Named>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IfEmpty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowReserved>k__BackingField;
    public bool Default { get; public set; }
    public string First { get; public set; }
    public char Separator { get; public set; }
    public bool Named { get; public set; }
    public string IfEmpty { get; public set; }
    public bool AllowReserved { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(bool value);
    [CompilerGeneratedAttribute]
public string get_First();
    [CompilerGeneratedAttribute]
public void set_First(string value);
    [CompilerGeneratedAttribute]
public char get_Separator();
    [CompilerGeneratedAttribute]
public void set_Separator(char value);
    [CompilerGeneratedAttribute]
public bool get_Named();
    [CompilerGeneratedAttribute]
public void set_Named(bool value);
    [CompilerGeneratedAttribute]
public string get_IfEmpty();
    [CompilerGeneratedAttribute]
public void set_IfEmpty(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowReserved();
    [CompilerGeneratedAttribute]
public void set_AllowReserved(bool value);
}
public enum Tavis.UriTemplates.QueryStringParameterOrder : Enum {
    public int value__;
    public static QueryStringParameterOrder Strict;
    public static QueryStringParameterOrder Any;
}
public class Tavis.UriTemplates.Result : object {
    [CompilerGeneratedAttribute]
private bool <ErrorDetected>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ParameterNames>k__BackingField;
    private static string _UriReservedSymbols;
    private static string _UriUnreservedSymbols;
    private StringBuilder _Result;
    private static Char[] HexDigits;
    public bool ErrorDetected { get; public set; }
    public List`1<string> ParameterNames { get; public set; }
    private static Result();
    [CompilerGeneratedAttribute]
public bool get_ErrorDetected();
    [CompilerGeneratedAttribute]
public void set_ErrorDetected(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ParameterNames();
    [CompilerGeneratedAttribute]
public void set_ParameterNames(List`1<string> value);
    public StringBuilder Append(char value);
    public StringBuilder Append(string value);
    public virtual string ToString();
    public void AppendName(string variable, OperatorInfo op, bool valueIsEmpty);
    public void AppendList(OperatorInfo op, bool explode, string variable, IList list);
    public void AppendDictionary(OperatorInfo op, bool explode, IDictionary`2<string, string> dictionary);
    public void AppendValue(string value, int prefixLength, bool allowReserved);
    private static string Encode(string p, bool allowReserved);
    public static string HexEscape(byte i);
    public static string HexEscape(char c);
}
public class Tavis.UriTemplates.TemplateMatch : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private UriTemplate <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Parameters>k__BackingField;
    public string Key { get; public set; }
    public UriTemplate Template { get; public set; }
    public IDictionary`2<string, object> Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public UriTemplate get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(UriTemplate value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IDictionary`2<string, object> value);
}
[ExtensionAttribute]
public static class Tavis.UriTemplates.UriExtensions : object {
    [ExtensionAttribute]
public static UriTemplate MakeTemplate(Uri uri);
    [ExtensionAttribute]
public static UriTemplate MakeTemplate(Uri uri, IDictionary`2<string, object> parameters);
    [ExtensionAttribute]
public static Dictionary`2<string, object> GetQueryStringParameters(Uri target);
}
[TypeConverterAttribute("Tavis.UriTemplates.UriTemplateConverter")]
public class Tavis.UriTemplates.UriTemplate : object {
    private static Dictionary`2<char, OperatorInfo> _Operators;
    private string _template;
    private Dictionary`2<string, object> _Parameters;
    private bool _resolvePartially;
    private static string varname;
    private static string op;
    private static string var;
    private static string varspec;
    private Regex _ParameterRegex;
    private Uri _ComponentBaseUri;
    public UriTemplate(string template, bool resolvePartially, bool caseInsensitiveParameterNames);
    private static UriTemplate();
    public virtual string ToString();
    public void SetParameter(string name, object value);
    public void ClearParameter(string name);
    public void SetParameter(string name, string value);
    public void SetParameter(string name, IEnumerable`1<string> value);
    public void SetParameter(string name, IDictionary`2<string, string> value);
    public IEnumerable`1<string> GetParameterNames();
    public string Resolve();
    private Result ResolveResult();
    private void ProcessExpression(StringBuilder currentExpression, Result result);
    private bool ProcessVariable(VarSpec varSpec, Result result, bool multiVariableExpression);
    private static bool IsVarNameChar(char c);
    private static OperatorInfo GetOperator(char operatorIndicator);
    public IDictionary`2<string, object> GetParameters(Uri uri, QueryStringParameterOrder order);
    public static string CreateMatchingRegex(string uriTemplate);
    public static string CreateMatchingRegex2(string uriTemplate);
    private static string GetQueryExpression(List`1<string> paramNames, string prefix);
    private static string GetExpression(List`1<string> paramNames, string prefix);
}
public class Tavis.UriTemplates.UriTemplateConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[ExtensionAttribute]
public static class Tavis.UriTemplates.UriTemplateExtensions : object {
    [ExtensionAttribute]
public static UriTemplate AddParameter(UriTemplate template, string name, object value);
    [ExtensionAttribute]
public static UriTemplate AddParameters(UriTemplate template, object parametersObject);
    [ExtensionAttribute]
public static UriTemplate AddParameters(UriTemplate uriTemplate, IDictionary`2<string, object> linkParameters);
}
[DefaultMemberAttribute("Item")]
public class Tavis.UriTemplates.UriTemplateTable : object {
    private Dictionary`2<string, UriTemplate> _Templates;
    public UriTemplate Item { get; }
    public void Add(string key, UriTemplate template);
    public TemplateMatch Match(Uri url, QueryStringParameterOrder order);
    public UriTemplate get_Item(string key);
}
public class Tavis.UriTemplates.VarSpec : object {
    private OperatorInfo _operatorInfo;
    public StringBuilder VarName;
    public bool Explode;
    public int PrefixLength;
    public bool First;
    public OperatorInfo OperatorInfo { get; }
    public VarSpec(OperatorInfo operatorInfo);
    public OperatorInfo get_OperatorInfo();
    public virtual string ToString();
}
