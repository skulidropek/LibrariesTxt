[AttributeUsageAttribute("4")]
internal class JetBrains.TeamCity.ServiceMessages.AspChildControlTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TagName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ControlType>k__BackingField;
    [NotNullAttribute]
public string TagName { get; private set; }
    [NotNullAttribute]
public Type ControlType { get; private set; }
    public AspChildControlTypeAttribute(string tagName, Type controlType);
    [CompilerGeneratedAttribute]
public string get_TagName();
    [CompilerGeneratedAttribute]
private void set_TagName(string value);
    [CompilerGeneratedAttribute]
public Type get_ControlType();
    [CompilerGeneratedAttribute]
private void set_ControlType(Type value);
}
[AttributeUsageAttribute("192")]
internal class JetBrains.TeamCity.ServiceMessages.AspDataFieldAttribute : Attribute {
}
[AttributeUsageAttribute("192")]
internal class JetBrains.TeamCity.ServiceMessages.AspDataFieldsAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
internal class JetBrains.TeamCity.ServiceMessages.AspMethodPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcActionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; private set; }
    public AspMvcActionAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2176")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcActionSelectorAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcAreaAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; private set; }
    public AspMvcAreaAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcAreaMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcAreaMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcAreaPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcAreaPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcAreaViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcAreaViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcControllerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AnonymousProperty>k__BackingField;
    [CanBeNullAttribute]
public string AnonymousProperty { get; private set; }
    public AspMvcControllerAttribute(string anonymousProperty);
    [CompilerGeneratedAttribute]
public string get_AnonymousProperty();
    [CompilerGeneratedAttribute]
private void set_AnonymousProperty(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcDisplayTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcEditorTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcMasterAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcMasterLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcMasterLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcModelTypeAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcPartialViewAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcPartialViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcPartialViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("68")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcSuppressViewErrorAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcViewAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcViewComponentAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcViewComponentViewAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.AspMvcViewLocationFormatAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [NotNullAttribute]
public string Format { get; private set; }
    public AspMvcViewLocationFormatAttribute(string format);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
private void set_Format(string value);
}
[AttributeUsageAttribute("4")]
internal class JetBrains.TeamCity.ServiceMessages.AspRequiredAttributeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Attribute>k__BackingField;
    [NotNullAttribute]
public string Attribute { get; private set; }
    public AspRequiredAttributeAttribute(string attribute);
    [CompilerGeneratedAttribute]
public string get_Attribute();
    [CompilerGeneratedAttribute]
private void set_Attribute(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.TeamCity.ServiceMessages.AspTypePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <CreateConstructorReferences>k__BackingField;
    public bool CreateConstructorReferences { get; private set; }
    public AspTypePropertyAttribute(bool createConstructorReferences);
    [CompilerGeneratedAttribute]
public bool get_CreateConstructorReferences();
    [CompilerGeneratedAttribute]
private void set_CreateConstructorReferences(bool value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.AssertionConditionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private AssertionConditionType <ConditionType>k__BackingField;
    public AssertionConditionType ConditionType { get; private set; }
    public AssertionConditionAttribute(AssertionConditionType conditionType);
    [CompilerGeneratedAttribute]
public AssertionConditionType get_ConditionType();
    [CompilerGeneratedAttribute]
private void set_ConditionType(AssertionConditionType value);
}
internal enum JetBrains.TeamCity.ServiceMessages.AssertionConditionType : Enum {
    public int value__;
    public static AssertionConditionType IS_TRUE;
    public static AssertionConditionType IS_FALSE;
    public static AssertionConditionType IS_NULL;
    public static AssertionConditionType IS_NOT_NULL;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.AssertionMethodAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[BaseTypeRequiredAttribute("System.Attribute")]
internal class JetBrains.TeamCity.ServiceMessages.BaseTypeRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <BaseType>k__BackingField;
    [NotNullAttribute]
public Type BaseType { get; private set; }
    public BaseTypeRequiredAttribute(Type baseType);
    [CompilerGeneratedAttribute]
public Type get_BaseType();
    [CompilerGeneratedAttribute]
private void set_BaseType(Type value);
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.TeamCity.ServiceMessages.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("1036")]
internal class JetBrains.TeamCity.ServiceMessages.CannotApplyEqualityOperatorAttribute : Attribute {
}
[AttributeUsageAttribute("224")]
internal class JetBrains.TeamCity.ServiceMessages.CollectionAccessAttribute : Attribute {
    [CompilerGeneratedAttribute]
private CollectionAccessType <CollectionAccessType>k__BackingField;
    public CollectionAccessType CollectionAccessType { get; private set; }
    public CollectionAccessAttribute(CollectionAccessType collectionAccessType);
    [CompilerGeneratedAttribute]
public CollectionAccessType get_CollectionAccessType();
    [CompilerGeneratedAttribute]
private void set_CollectionAccessType(CollectionAccessType value);
}
[FlagsAttribute]
internal enum JetBrains.TeamCity.ServiceMessages.CollectionAccessType : Enum {
    public int value__;
    public static CollectionAccessType None;
    public static CollectionAccessType Read;
    public static CollectionAccessType ModifyExistingContent;
    public static CollectionAccessType UpdatedContent;
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    [NotNullAttribute]
public string Contract { get; private set; }
    public bool ForceFullStates { get; private set; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
private void set_Contract(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
    [CompilerGeneratedAttribute]
private void set_ForceFullStates(bool value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.TeamCity.ServiceMessages.HtmlAttributeValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public HtmlAttributeValueAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.TeamCity.ServiceMessages.HtmlElementAttributesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CanBeNullAttribute]
public string Name { get; private set; }
    public HtmlElementAttributesAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[FlagsAttribute]
internal enum JetBrains.TeamCity.ServiceMessages.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.TeamCity.ServiceMessages.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.InstantHandleAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.InvokerParameterNameAttribute : Attribute {
}
public interface JetBrains.TeamCity.ServiceMessages.IServiceMessage {
    [NotNullAttribute]
public string Name { get; }
    [CanBeNullAttribute]
public string DefaultValue { get; }
    [NotNullAttribute]
public IEnumerable`1<string> Keys { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DefaultValue();
    public abstract virtual IEnumerable`1<string> get_Keys();
    [CanBeNullAttribute]
public abstract virtual string GetValue(string key);
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.TeamCity.ServiceMessages.ItemCanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.TeamCity.ServiceMessages.ItemNotNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.LinqTunnelAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.TeamCity.ServiceMessages.LocalizationRequiredAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public bool Required { get; private set; }
    public LocalizationRequiredAttribute(bool required);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.MacroAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Editable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CanBeNullAttribute]
public string Expression { get; public set; }
    public int Editable { get; public set; }
    [CanBeNullAttribute]
public string Target { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(string value);
    [CompilerGeneratedAttribute]
public int get_Editable();
    [CompilerGeneratedAttribute]
public void set_Editable(int value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
}
[AttributeUsageAttribute("16388")]
internal class JetBrains.TeamCity.ServiceMessages.MeansImplicitUseAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    [UsedImplicitlyAttribute]
public ImplicitUseKindFlags UseKindFlags { get; private set; }
    [UsedImplicitlyAttribute]
public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags);
    public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags);
    public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.MustUseReturnValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [CanBeNullAttribute]
public string Justification { get; private set; }
    public MustUseReturnValueAttribute(string justification);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
private void set_Justification(string value);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("1052")]
internal class JetBrains.TeamCity.ServiceMessages.NoReorderAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.NotifyPropertyChangedInvocatorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    [CanBeNullAttribute]
public string ParameterName { get; private set; }
    public NotifyPropertyChangedInvocatorAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
    [CompilerGeneratedAttribute]
private void set_ParameterName(string value);
}
[AttributeUsageAttribute("24516")]
internal class JetBrains.TeamCity.ServiceMessages.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.PathReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CanBeNullAttribute]
public string BasePath { get; private set; }
    public PathReferenceAttribute(string basePath);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
private void set_BasePath(string value);
}
[AttributeUsageAttribute("19916")]
internal class JetBrains.TeamCity.ServiceMessages.ProvidesContextAttribute : Attribute {
}
[MeansImplicitUseAttribute("3")]
internal class JetBrains.TeamCity.ServiceMessages.PublicAPIAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CanBeNullAttribute]
public string Comment { get; private set; }
    public PublicAPIAttribute(string comment);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
private void set_Comment(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.PureAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.RazorDirectiveAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Directive>k__BackingField;
    [NotNullAttribute]
public string Directive { get; private set; }
    public RazorDirectiveAttribute(string directive);
    [CompilerGeneratedAttribute]
public string get_Directive();
    [CompilerGeneratedAttribute]
private void set_Directive(string value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.RazorHelperCommonAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.RazorImportNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public RazorImportNamespaceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("1")]
internal class JetBrains.TeamCity.ServiceMessages.RazorInjectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FieldName>k__BackingField;
    [NotNullAttribute]
public string Type { get; private set; }
    [NotNullAttribute]
public string FieldName { get; private set; }
    public RazorInjectionAttribute(string type, string fieldName);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
private void set_FieldName(string value);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.TeamCity.ServiceMessages.RazorLayoutAttribute : Attribute {
}
[AttributeUsageAttribute("2112")]
internal class JetBrains.TeamCity.ServiceMessages.RazorSectionAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.RazorWriteLiteralMethodAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.RazorWriteMethodAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.RazorWriteMethodParameterAttribute : Attribute {
}
public interface JetBrains.TeamCity.ServiceMessages.Read.IServiceMessageParser {
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(string text);
    [NotNullAttribute]
public abstract virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(TextReader reader);
}
internal class JetBrains.TeamCity.ServiceMessages.Read.ServiceMessage : object {
    private Dictionary`2<string, string> _properties;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string Name { get; }
    public string DefaultValue { get; }
    public IEnumerable`1<string> Keys { get; }
    public ServiceMessage(string name, string defaultValue, Dictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultValue();
    public sealed virtual string GetValue(string key);
    public sealed virtual IEnumerable`1<string> get_Keys();
}
public class JetBrains.TeamCity.ServiceMessages.Read.ServiceMessageParser : object {
    public sealed virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(string text);
    public sealed virtual IEnumerable`1<IServiceMessage> ParseServiceMessages(TextReader reader);
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.TeamCity.ServiceMessages.RegexPatternAttribute : Attribute {
}
internal static class JetBrains.TeamCity.ServiceMessages.ServiceMessageConstants : object {
    public static string ServiceMessageOpen;
    public static string ServiceMessageClose;
}
public class JetBrains.TeamCity.ServiceMessages.ServiceMessageReplacements : object {
    private static char InvalidChar;
    private static ServiceMessageReplacements();
    [NotNullAttribute]
public static string Encode(string value);
    [NotNullAttribute]
public static string Decode(string value);
    public static string Decode(Char[] value);
    private static IEnumerable`1<char> DecodeChars(IEnumerable`1<char> value);
}
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.SourceTemplateAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.TeamCity.ServiceMessages.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; private set; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
    [CompilerGeneratedAttribute]
private void set_FormatParameterName(string value);
}
[ObsoleteAttribute("Use [ContractAnnotation('=> halt')] instead")]
[AttributeUsageAttribute("64")]
internal class JetBrains.TeamCity.ServiceMessages.TerminatesProgramAttribute : Attribute {
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.TeamCity.ServiceMessages.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; private set; }
    public ImplicitUseTargetFlags TargetFlags { get; private set; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
private void set_UseKindFlags(ImplicitUseKindFlags value);
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
    [CompilerGeneratedAttribute]
private void set_TargetFlags(ImplicitUseTargetFlags value);
}
[AttributeUsageAttribute("2432")]
internal class JetBrains.TeamCity.ServiceMessages.ValueProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NotNullAttribute]
public string Name { get; private set; }
    public ValueProviderAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.IServiceMessageFormatter {
    public abstract virtual string FormatMessage(string messageName, string singleValue);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string messageName, object anonymousProperties);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string messageName, ServiceMessageProperty[] properties);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string messageName, IEnumerable`1<ServiceMessageProperty> properties);
    [NotNullAttribute]
public abstract virtual string FormatMessage(IServiceMessage serviceMessage);
    [NotNullAttribute]
public abstract virtual string FormatMessage(string name, IEnumerable`1<KeyValuePair`2<string, string>> arguments);
}
public class JetBrains.TeamCity.ServiceMessages.Write.ServiceMessage : object {
    private Dictionary`2<string, string> _arguments;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public string DefaultValue { get; }
    public IEnumerable`1<string> Keys { get; }
    public ServiceMessage(IServiceMessage message);
    public ServiceMessage(string name);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual string get_DefaultValue();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual string GetValue(string key);
    public void Add(string key, string value);
    public void AddRange(IEnumerable`1<KeyValuePair`2<string, string>> values);
}
public class JetBrains.TeamCity.ServiceMessages.Write.ServiceMessageFormatter : object {
    public sealed virtual string FormatMessage(string messageName, string singleValue);
    public sealed virtual string FormatMessage(string messageName, object anonymousProperties);
    public sealed virtual string FormatMessage(string messageName, ServiceMessageProperty[] properties);
    public sealed virtual string FormatMessage(IServiceMessage serviceMessage);
    public sealed virtual string FormatMessage(string name, IEnumerable`1<KeyValuePair`2<string, string>> arguments);
    public sealed virtual string FormatMessage(string messageName, IEnumerable`1<ServiceMessageProperty> properties);
}
public class JetBrains.TeamCity.ServiceMessages.Write.ServiceMessageProperty : ValueType {
    public string Key;
    public string Value;
    public ServiceMessageProperty(string key, string value);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IFlowAwareServiceMessageProcessor {
    public string FlowId { get; }
    [NotNullAttribute]
public abstract virtual string get_FlowId();
    [NotNullAttribute]
public abstract virtual IFlowAwareServiceMessageProcessor ForNewFlow();
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IFlowIdGenerator {
    [NotNullAttribute]
public abstract virtual string NewFlowId();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.DefaultFlowIdGenerator : object {
    private static long ourIds;
    public sealed virtual string NewFlowId();
}
internal class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.DisposableDelegate : object {
    private Action _disposeAction;
    [NotNullAttribute]
public static IDisposable Empty;
    public DisposableDelegate(Action disposeAction);
    private static DisposableDelegate();
    public sealed virtual void Dispose();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.FlowAwareServiceMessageWriter : object {
    private IFlowIdGenerator _generator;
    private IServiceMessageProcessor _processor;
    private List`1<IServiceMessageUpdater> _updaters;
    [CompilerGeneratedAttribute]
private string <FlowId>k__BackingField;
    public string FlowId { get; }
    public FlowAwareServiceMessageWriter(string serviceMessageFlowId, IServiceMessageProcessor processor, IFlowIdGenerator generator, IEnumerable`1<IServiceMessageUpdater> updaters);
    public sealed virtual void AddServiceMessage(IServiceMessage serviceMessage);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FlowId();
    public sealed virtual IFlowAwareServiceMessageProcessor ForNewFlow();
    [NotNullAttribute]
private List`1<IServiceMessageUpdater> AddFlowIdUpdater(List`1<IServiceMessageUpdater> updaters);
}
internal class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.PatchedServiceMessage : ServiceMessage {
    public PatchedServiceMessage(IServiceMessage message);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.ServiceMessagesWriter : object {
    private IServiceMessageFormatter _formatter;
    private Action`1<string> _printer;
    public ServiceMessagesWriter(IServiceMessageFormatter formatter, Action`1<string> printer);
    public sealed virtual void AddServiceMessage(IServiceMessage serviceMessage);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.TeamCityWriterFacade : object {
    private ITeamCityArtifactsWriter _artifactsWriter;
    private ITeamCityBlockWriter`1<ITeamCityWriter> _blockWriter;
    private ITeamCityCompilationBlockWriter`1<ITeamCityWriter> _compilationWriter;
    private IDisposable _dispose;
    private ITeamCityFlowWriter`1<ITeamCityWriter> _flowWriter;
    private ITeamCityMessageWriter _messageWriter;
    private IServiceMessageProcessor _processor;
    private ITeamCityBuildStatusWriter _statusWriter;
    private ITeamCityTestsWriter _testsWriter;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    public TeamCityWriterFacade(IServiceMessageProcessor processor, ITeamCityBlockWriter`1<ITeamCityWriter> blockWriter, ITeamCityCompilationBlockWriter`1<ITeamCityWriter> compilationWriter, ITeamCityTestsWriter testsWriter, ITeamCityMessageWriter messageWriter, ITeamCityArtifactsWriter artifactsWriter, ITeamCityBuildStatusWriter statusWriter, ITeamCityFlowWriter`1<ITeamCityWriter> flowWriter, IDisposable disposeCallback);
    public sealed virtual ITeamCityWriter OpenFlow();
    public sealed virtual void WriteBuildNumber(string buildNumber);
    public sealed virtual void WriteBuildProblem(string identity, string message);
    public sealed virtual void WriteBuildParameter(string parameterName, string parameterValue);
    public sealed virtual void WriteBuildStatistics(string statisticsKey, string statisticsValue);
    public sealed virtual void WriteMessage(string text);
    public sealed virtual void WriteWarning(string text);
    public sealed virtual void WriteError(string text, string errorDetails);
    public virtual void Dispose();
    public sealed virtual void PublishArtifact(string rules);
    public sealed virtual ITeamCityWriter OpenBlock(string blockName);
    public sealed virtual void WriteRawMessage(IServiceMessage message);
    public sealed virtual ITeamCityTestsSubWriter OpenTestSuite(string suiteName);
    public sealed virtual ITeamCityTestWriter OpenTest(string testName);
    public sealed virtual ITeamCityWriter OpenCompilationBlock(string compilerName);
    protected virtual void CheckConsistency();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.TeamCityWriterImpl : TeamCityWriterFacade {
    private IEnumerable`1<ISubWriter> _writeCheck;
    public TeamCityWriterImpl(IFlowAwareServiceMessageProcessor processor, IDisposable dispose);
    private TeamCityWriterImpl(IServiceMessageProcessor processor, TeamCityFlowWriter`1<ITeamCityWriter> flowWriter, TeamCityBlockWriter`1<ITeamCityWriter> blockWriter, TeamCityCompilationBlockWriter`1<ITeamCityWriter> compilationWriter, TeamCityTestSuiteBlock testsWriter, ITeamCityMessageWriter messageWriter, ITeamCityArtifactsWriter artifactsWriter, ITeamCityBuildStatusWriter statusWriter, IDisposable dispose);
    public sealed virtual void AssertNoChildOpened();
    public virtual void Dispose();
    protected virtual void CheckConsistency();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Updater.FlowMessageUpdater : object {
    [NotNullAttribute]
private string _flowId;
    public FlowMessageUpdater(string flowId);
    public sealed virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Updater.TimestampUpdater : object {
    private Func`1<DateTime> _timeService;
    public TimestampUpdater(Func`1<DateTime> timeService);
    public sealed virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
internal class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.ValueServiceMessage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public string Name { get; }
    public string DefaultValue { get; }
    public IEnumerable`1<string> Keys { get; }
    public ValueServiceMessage(string name, string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DefaultValue();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public sealed virtual string GetValue(string key);
}
public abstract class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.BaseDisposableWriter`1 : BaseWriter`1<TProc> {
    private IDisposable _disposableHandler;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isDisposed;
    protected BaseDisposableWriter`1(TProc target, IDisposable disposableHandler);
    public sealed virtual void Dispose();
    protected abstract virtual void DisposeImpl();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.BaseWriter : BaseWriter`1<IServiceMessageProcessor> {
    protected BaseWriter(IServiceMessageProcessor target);
    protected BaseWriter(BaseWriter`1<IServiceMessageProcessor> writer);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.BaseWriter`1 : object {
    protected TProc myTarget;
    protected BaseWriter`1(TProc target);
    protected BaseWriter`1(BaseWriter`1<TProc> writer);
    protected void PostMessage(IServiceMessage message);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.ISubWriter {
    public abstract virtual void AssertNoChildOpened();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityArtifactsWriter : BaseWriter {
    public TeamCityArtifactsWriter(IServiceMessageProcessor target);
    public sealed virtual void PublishArtifact(string rules);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityBlockWriter : TeamCityBlockWriter`1<IDisposable> {
    public TeamCityBlockWriter(IServiceMessageProcessor target);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityBlockWriter`1 : BaseWriter {
    private Func`2<IDisposable, TCloseBlock> _closeBlock;
    private int _isChildOpenned;
    public TeamCityBlockWriter`1(IServiceMessageProcessor target, Func`2<IDisposable, TCloseBlock> closeBlock);
    public sealed virtual void AssertNoChildOpened();
    public sealed virtual void Dispose();
    public sealed virtual TCloseBlock OpenBlock(string blockName);
    private void CloseBlock(string blockName);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityBuildStatusWriter : BaseWriter {
    public TeamCityBuildStatusWriter(IServiceMessageProcessor target);
    public sealed virtual void WriteBuildNumber(string buildNumber);
    public sealed virtual void WriteBuildProblem(string identity, string message);
    public sealed virtual void WriteBuildParameter(string parameterName, string parameterValue);
    public sealed virtual void WriteBuildStatistics(string statisticsKey, string statisticsValue);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityCompilationBlockWriter : TeamCityCompilationBlockWriter`1<IDisposable> {
    public TeamCityCompilationBlockWriter(IServiceMessageProcessor target);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityCompilationBlockWriter`1 : BaseWriter {
    private Func`2<IDisposable, TCloseBlock> _closeBlock;
    private int _isChildOpenned;
    public TeamCityCompilationBlockWriter`1(IServiceMessageProcessor target, Func`2<IDisposable, TCloseBlock> closeBlock);
    public sealed virtual void AssertNoChildOpened();
    public sealed virtual void Dispose();
    public sealed virtual TCloseBlock OpenCompilationBlock(string compilerName);
    private void CloseBlock(string compilerName);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityFlowWriter`1 : BaseDisposableWriter`1<IFlowAwareServiceMessageProcessor> {
    private CreateWriter<TCloseBlock> _closeBlock;
    private HashSet`1<string> _openChildFlowIds;
    public TeamCityFlowWriter`1(IFlowAwareServiceMessageProcessor target, CreateWriter<TCloseBlock> closeBlock, IDisposable disposableHandler);
    public sealed virtual void AssertNoChildOpened();
    public sealed virtual TCloseBlock OpenFlow();
    protected virtual void DisposeImpl();
    private void CloseBlock(IFlowAwareServiceMessageProcessor flowAwareServiceMessageProcessor);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityMessageWriter : BaseWriter {
    public TeamCityMessageWriter(IServiceMessageProcessor target);
    public sealed virtual void WriteMessage(string text);
    public sealed virtual void WriteWarning(string text);
    public sealed virtual void WriteError(string text, string errorDetails);
    private void Write(string text, string details, string status);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityTestSuiteBlock : BaseDisposableWriter`1<IFlowAwareServiceMessageProcessor> {
    private TeamCityFlowWriter`1<ITeamCityTestsSubWriter> _flows;
    private bool _isChildSuiteOpened;
    private bool _isChildTestOpened;
    private string _childSuiteName;
    private string _childTestName;
    public TeamCityTestSuiteBlock(IFlowAwareServiceMessageProcessor target, IDisposable disposableHandler);
    public sealed virtual void AssertNoChildOpened();
    public sealed virtual ITeamCityTestsSubWriter OpenFlow();
    public sealed virtual ITeamCityTestsSubWriter OpenTestSuite(string suiteName);
    public sealed virtual ITeamCityTestWriter OpenTest(string testName);
    protected virtual void DisposeImpl();
    [CompilerGeneratedAttribute]
private void <OpenTest>b__9_0();
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.Impl.Writer.TeamCityTestWriter : BaseDisposableWriter`1<IServiceMessageProcessor> {
    private string _testName;
    private Nullable`1<TimeSpan> _duration;
    public TeamCityTestWriter(IServiceMessageProcessor target, string testName, IDisposable disposableHandler);
    public sealed virtual void WriteStdOutput(string text);
    public sealed virtual void WriteErrOutput(string text);
    public sealed virtual void WriteIgnored(string message);
    public sealed virtual void WriteIgnored();
    public sealed virtual void WriteFailed(string errorMessage, string errorDetails);
    public sealed virtual void WriteDuration(TimeSpan span);
    public sealed virtual void WriteImage(string teamCityArtifactUri, string description);
    public sealed virtual void WriteFile(string teamCityArtifactUri, string description);
    public sealed virtual void WriteValue(double value, string name);
    public sealed virtual void WriteValue(string value, string name);
    public sealed virtual void WriteLink(string linkUri, string name);
    public void OpenTest();
    protected virtual void DisposeImpl();
    private void WriteIgnoredImpl(string message);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IServiceMessageProcessor {
    public abstract virtual void AddServiceMessage(IServiceMessage serviceMessage);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.IServiceMessageUpdater {
    [NotNullAttribute]
public abstract virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityArtifactsWriter {
    public abstract virtual void PublishArtifact(string rules);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityBlockWriter`1 {
    [NotNullAttribute]
public abstract virtual CloseBlock OpenBlock(string blockName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityBuildStatusWriter {
    public abstract virtual void WriteBuildNumber(string buildNumber);
    public abstract virtual void WriteBuildProblem(string identity, string description);
    public abstract virtual void WriteBuildParameter(string parameterName, string parameterValue);
    public abstract virtual void WriteBuildStatistics(string statisticsKey, string statisticsValue);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityCompilationBlockWriter {
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityCompilationBlockWriter`1 {
    public abstract virtual CloseBlock OpenCompilationBlock(string compilerName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityFlowWriter`1 {
    [NotNullAttribute]
public abstract virtual TCloseBlock OpenFlow();
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityMessageWriter {
    public abstract virtual void WriteMessage(string text);
    public abstract virtual void WriteWarning(string text);
    public abstract virtual void WriteError(string text, string errorDetails);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityServiceMessages {
    [NotNullAttribute]
public abstract virtual ITeamCityWriter CreateWriter();
    [NotNullAttribute]
public abstract virtual ITeamCityWriter CreateWriter(Action`1<string> destination, bool addFlowIdsOnTopLevelMessages);
    public abstract virtual void AddServiceMessageUpdater(IServiceMessageUpdater updater);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestsSubWriter {
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestSuiteWriter {
    [NotNullAttribute]
public abstract virtual ITeamCityTestsSubWriter OpenTestSuite(string suiteName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestsWriter {
    [NotNullAttribute]
public abstract virtual ITeamCityTestWriter OpenTest(string testName);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityTestWriter {
    public abstract virtual void WriteStdOutput(string text);
    public abstract virtual void WriteErrOutput(string text);
    public abstract virtual void WriteIgnored(string ignoreReason);
    public abstract virtual void WriteIgnored();
    public abstract virtual void WriteFailed(string errorMessage, string errorDetails);
    public abstract virtual void WriteDuration(TimeSpan duration);
    public abstract virtual void WriteImage(string teamCityArtifactUri, string description);
    public abstract virtual void WriteFile(string teamCityArtifactUri, string description);
    public abstract virtual void WriteValue(double value, string name);
    public abstract virtual void WriteValue(string value, string name);
    public abstract virtual void WriteLink(string linkUri, string name);
}
public interface JetBrains.TeamCity.ServiceMessages.Write.Special.ITeamCityWriter {
    public abstract virtual void WriteRawMessage(IServiceMessage message);
}
public class JetBrains.TeamCity.ServiceMessages.Write.Special.TeamCityServiceMessages : object {
    [CompilerGeneratedAttribute]
private IServiceMessageFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IFlowIdGenerator <FlowIdGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IServiceMessageUpdater> <Updaters>k__BackingField;
    [NotNullAttribute]
public IServiceMessageFormatter Formatter { get; public set; }
    [NotNullAttribute]
public IFlowIdGenerator FlowIdGenerator { get; public set; }
    [NotNullAttribute]
public IEnumerable`1<IServiceMessageUpdater> Updaters { get; public set; }
    public TeamCityServiceMessages(IServiceMessageFormatter formatter, IFlowIdGenerator flowIdGenerator, IEnumerable`1<IServiceMessageUpdater> updaters);
    [CompilerGeneratedAttribute]
public IServiceMessageFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IServiceMessageFormatter value);
    [CompilerGeneratedAttribute]
public IFlowIdGenerator get_FlowIdGenerator();
    [CompilerGeneratedAttribute]
public void set_FlowIdGenerator(IFlowIdGenerator value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IServiceMessageUpdater> get_Updaters();
    [CompilerGeneratedAttribute]
public void set_Updaters(IEnumerable`1<IServiceMessageUpdater> value);
    public sealed virtual void AddServiceMessageUpdater(IServiceMessageUpdater updater);
    public sealed virtual ITeamCityWriter CreateWriter();
    public sealed virtual ITeamCityWriter CreateWriter(Action`1<string> destination, bool addFlowIdsOnTopLevelMessages);
}
[AttributeUsageAttribute("128")]
internal class JetBrains.TeamCity.ServiceMessages.XamlItemBindingOfItemsControlAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
internal class JetBrains.TeamCity.ServiceMessages.XamlItemsControlAttribute : Attribute {
}
