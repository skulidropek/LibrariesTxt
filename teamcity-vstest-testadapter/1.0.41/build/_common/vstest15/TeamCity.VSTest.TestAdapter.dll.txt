[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.Attachments : object {
    [CompilerGeneratedAttribute]
private ITestAttachmentPathResolver <testAttachmentPathResolver>P;
    private static Regex AttachmentDescriptionRegex;
    private IOptions _options;
    private IIdGenerator _idGenerator;
    private ITeamCityWriter _rootWriter;
    public Attachments(IOptions options, IIdGenerator idGenerator, ITeamCityWriter rootWriter, ITestAttachmentPathResolver testAttachmentPathResolver);
    private static Attachments();
    public sealed virtual void SendAttachment(string testName, UriDataAttachment attachment, ITeamCityTestWriter testWriter);
    [IteratorStateMachineAttribute("TeamCity.VSTest.TestLogger.Attachments/<NormalizeTestName>d__7")]
private static IEnumerable`1<char> NormalizeTestName(IEnumerable`1<char> testName);
}
internal class TeamCity.VSTest.TestLogger.BytesWriter : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <fileName>P;
    [NullableAttribute("2")]
private FileStream _stream;
    [NullableAttribute("2")]
private BinaryWriter _writer;
    [NullableContextAttribute("1")]
public BytesWriter(string fileName);
    [NullableContextAttribute("1")]
public sealed virtual void Write(Byte[] bytes);
    public sealed virtual void Flush();
    public sealed virtual void Dispose();
    private void EnsureOpened();
}
internal class TeamCity.VSTest.TestLogger.BytesWriterFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual IBytesWriter Create(string fileName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class TeamCity.VSTest.TestLogger.Disposable : object {
    public static IDisposable Empty;
    private static Disposable();
    public static IDisposable Create(Action action);
    public static IDisposable Create(IEnumerable`1<IDisposable> disposables);
}
internal class TeamCity.VSTest.TestLogger.EventContext : object {
    [NullableAttribute("2")]
private TestEvent _event;
    [NullableContextAttribute("1")]
public sealed virtual IDisposable Register(TestEvent testEvent);
    [NullableContextAttribute("2")]
public sealed virtual bool TryGetEvent(TestEvent& testEvent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.FailedTestsReportWriter : object {
    private IOptions _options;
    private IBytesWriterFactory _bytesWriterFactory;
    [NullableAttribute("2")]
private IBytesWriter _reportWriter;
    private HashSet`1<string> _reportedTests;
    public FailedTestsReportWriter(IOptions options, IBytesWriterFactory bytesWriterFactory);
    private bool EnsureFailedTestsFileSavePathDirectoryExists();
    public sealed virtual void ReportFailedTest(TestCase testCase);
    private string GetTestNameForRetry(string fullyQualifiedName);
    [NullableContextAttribute("2")]
private IBytesWriter InitFileMessageWriter();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.FlowIdGenerator : object {
    [CompilerGeneratedAttribute]
private IOptions <options>P;
    private IIdGenerator _idGenerator;
    private bool _isFirst;
    public FlowIdGenerator(IIdGenerator idGenerator, IOptions options);
    public sealed virtual string NewFlowId();
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.IAttachments {
    public abstract virtual void SendAttachment(string testName, UriDataAttachment attachment, ITeamCityTestWriter testWriter);
}
internal interface TeamCity.VSTest.TestLogger.IBytesWriter {
    [NullableContextAttribute("1")]
public abstract virtual void Write(Byte[] bytes);
    public abstract virtual void Flush();
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.IBytesWriterFactory {
    public abstract virtual IBytesWriter Create(string fileName);
}
internal class TeamCity.VSTest.TestLogger.IdGenerator : object {
    [NullableContextAttribute("1")]
public sealed virtual string NewId();
}
[NullableContextAttribute("2")]
internal interface TeamCity.VSTest.TestLogger.IEventContext {
    public abstract virtual bool TryGetEvent(TestEvent& testEvent);
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.IEventRegistry {
    public abstract virtual IDisposable Register(TestEvent testEvent);
}
internal interface TeamCity.VSTest.TestLogger.IFailedTestsReportWriter {
    [NullableContextAttribute("1")]
public abstract virtual void ReportFailedTest(TestCase testName);
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.IIdGenerator {
    public abstract virtual string NewId();
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.IMessageHandler {
    public abstract virtual void OnTestRunStart(string testRunDescription, bool shouldOpenNewFlow);
    public abstract virtual void OnTestRunMessage(TestRunMessageEventArgs ev);
    public abstract virtual void OnTestResult(TestResultEventArgs ev);
    public abstract virtual void OnTestRunComplete();
}
internal interface TeamCity.VSTest.TestLogger.IMessageWriter {
    [NullableContextAttribute("1")]
public abstract virtual void Write(string message);
}
internal class TeamCity.VSTest.TestLogger.IoCConfiguration : object {
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("TeamCity.VSTest.TestLogger.IoCConfiguration/<Apply>d__0")]
public sealed virtual IEnumerable`1<IToken> Apply(IMutableContainer container);
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.IOptions {
    [NullableAttribute("2")]
public string TestRunDirectory { get; public set; }
    public TeamCityVersion Version { get; }
    public string RootFlowId { get; }
    public string ServiceMessagesFileSavePath { get; }
    public string FailedTestsReportSavePath { get; }
    public bool FallbackToStdOutTestReporting { get; }
    public bool AllowServiceMessageBackup { get; }
    public string ServiceMessagesBackupPath { get; }
    public string ServiceMessagesBackupSource { get; }
    public bool AllowExperimental { get; }
    public bool MetadataEnable { get; }
    public TeamCityVersion TestMetadataSupportVersion { get; }
    public bool UseTestResultDisplayName { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_TestRunDirectory();
    [NullableContextAttribute("2")]
public abstract virtual void set_TestRunDirectory(string value);
    public abstract virtual TeamCityVersion get_Version();
    public abstract virtual string get_RootFlowId();
    public abstract virtual string get_ServiceMessagesFileSavePath();
    public abstract virtual string get_FailedTestsReportSavePath();
    public abstract virtual bool get_FallbackToStdOutTestReporting();
    public abstract virtual bool get_AllowServiceMessageBackup();
    public abstract virtual string get_ServiceMessagesBackupPath();
    public abstract virtual string get_ServiceMessagesBackupSource();
    public abstract virtual bool get_AllowExperimental();
    public abstract virtual bool get_MetadataEnable();
    public abstract virtual TeamCityVersion get_TestMetadataSupportVersion();
    public abstract virtual bool get_UseTestResultDisplayName();
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.ISuiteNameProvider {
    public abstract virtual string GetSuiteName(string source);
}
[NullableContextAttribute("1")]
internal interface TeamCity.VSTest.TestLogger.ITestAttachmentPathResolver {
    public abstract virtual string Resolve(string testFullyQualifiedName);
}
[NullableContextAttribute("2")]
internal interface TeamCity.VSTest.TestLogger.ITestNameProvider {
    public abstract virtual string GetTestName(string fullyQualifiedName, string displayName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.MessageBackupUpdater : object {
    [CompilerGeneratedAttribute]
private IOptions <options>P;
    private long _index;
    private bool _allowServiceMessageBackup;
    public MessageBackupUpdater(IOptions options);
    public sealed virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.MessageHandler : object {
    private ITeamCityWriter _rootWriter;
    private ISuiteNameProvider _suiteNameProvider;
    private IAttachments _attachments;
    private ITestNameProvider _testNameProvider;
    private IEventRegistry _eventRegistry;
    private IFailedTestsReportWriter _failedTestsReportWriter;
    private IOptions _options;
    [NullableAttribute("2")]
private ITeamCityWriter _flowWriter;
    [NullableAttribute("2")]
private ITeamCityWriter _blockWriter;
    private ITeamCityWriter CurrentWriter { get; }
    internal MessageHandler(ITeamCityWriter rootWriter, ISuiteNameProvider suiteNameProvider, IAttachments attachments, ITestNameProvider testNameProvider, IEventRegistry eventRegistry, IFailedTestsReportWriter failedTestsReportWriter, IOptions options);
    private ITeamCityWriter get_CurrentWriter();
    [NullableContextAttribute("2")]
public sealed virtual void OnTestRunMessage(TestRunMessageEventArgs ev);
    [NullableContextAttribute("2")]
public sealed virtual void OnTestResult(TestResultEventArgs ev);
    public sealed virtual void OnTestRunStart(string testRunDescription, bool shouldOpenNewFlow);
    public sealed virtual void OnTestRunComplete();
    private static bool IsNullOrWhiteSpace(string value);
}
internal class TeamCity.VSTest.TestLogger.MessageWriters.FileMessageWriter : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IBytesWriter <messageBytesWriter>P;
    [NullableContextAttribute("1")]
public FileMessageWriter(IBytesWriter messageBytesWriter);
    [NullableContextAttribute("1")]
public sealed virtual void Write(string message);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.MessageWriters.MessageWriterFactory : object {
    [CompilerGeneratedAttribute]
private IOptions <options>P;
    public MessageWriterFactory(IOptions options);
    public IMessageWriter GetMessageWriter();
    private bool EnsureServiceMessagesFileDirectoryExists();
    private IMessageWriter GetFileMessageWriter();
    private IMessageWriter GetStdOutWriterWithBackup();
}
public class TeamCity.VSTest.TestLogger.MessageWriters.StdOutMessageWriter : object {
    [NullableContextAttribute("1")]
public sealed virtual void Write(string message);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.MessageWriters.StdOutMessageWriterWithBackup : object {
    [CompilerGeneratedAttribute]
private IBytesWriter <indicesWriter>P;
    [CompilerGeneratedAttribute]
private IBytesWriter <messagesWriter>P;
    private bool _allowServiceMessageBackup;
    private ulong _position;
    public StdOutMessageWriterWithBackup(IBytesWriter indicesWriter, IBytesWriter messagesWriter);
    public sealed virtual void Write(string message);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.Options : object {
    private static Dictionary`2<string, string> Envs;
    private static TeamCityVersion TestMetadataSupportVersionVal;
    private static TeamCityVersion VersionVal;
    private static string RootFlowIdVal;
    private static string ServiceMessagesFileSavePathVal;
    private static bool FallbackToStdOutTestReportingVal;
    private static bool AllowServiceMessageBackupVal;
    private static bool AllowExperimentalVal;
    private static string ServiceMessagesBackupSourceVal;
    private static string ServiceMessagesBackupPathVal;
    private static bool MetadataEnableVal;
    private static string FailedTestsReportSavePathVal;
    private static bool UseTestResultDisplayNameVal;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TestRunDirectory>k__BackingField;
    [NullableAttribute("2")]
public string TestRunDirectory { get; public set; }
    public TeamCityVersion Version { get; }
    public string RootFlowId { get; }
    public string ServiceMessagesFileSavePath { get; }
    public bool FallbackToStdOutTestReporting { get; }
    public bool AllowServiceMessageBackup { get; }
    public string ServiceMessagesBackupPath { get; }
    public string ServiceMessagesBackupSource { get; }
    public bool AllowExperimental { get; }
    public bool MetadataEnable { get; }
    public string FailedTestsReportSavePath { get; }
    public TeamCityVersion TestMetadataSupportVersion { get; }
    public bool UseTestResultDisplayName { get; }
    private static Options();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TestRunDirectory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_TestRunDirectory(string value);
    public sealed virtual TeamCityVersion get_Version();
    public sealed virtual string get_RootFlowId();
    public sealed virtual string get_ServiceMessagesFileSavePath();
    public sealed virtual bool get_FallbackToStdOutTestReporting();
    public sealed virtual bool get_AllowServiceMessageBackup();
    public sealed virtual string get_ServiceMessagesBackupPath();
    public sealed virtual string get_ServiceMessagesBackupSource();
    public sealed virtual bool get_AllowExperimental();
    public sealed virtual bool get_MetadataEnable();
    public sealed virtual string get_FailedTestsReportSavePath();
    public sealed virtual TeamCityVersion get_TestMetadataSupportVersion();
    public sealed virtual bool get_UseTestResultDisplayName();
    private static string GetEnvironmentVariable(string name);
    private static bool GetBool(string value, bool defaultValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.PatchedServiceMessage : object {
    private IServiceMessage _message;
    private Dictionary`2<string, string> _values;
    public string Name { get; }
    public string DefaultValue { get; }
    public IEnumerable`1<string> Keys { get; }
    public PatchedServiceMessage(IServiceMessage message);
    public sealed virtual string GetValue(string key);
    public sealed virtual string get_Name();
    public sealed virtual string get_DefaultValue();
    public sealed virtual IEnumerable`1<string> get_Keys();
    public void Add(string name, string value);
}
internal static class TeamCity.VSTest.TestLogger.Strings : object {
    [NullableContextAttribute("2")]
public static bool IsNullOrWhiteSpace(string str);
}
internal class TeamCity.VSTest.TestLogger.SuiteNameProvider : object {
    [NullableContextAttribute("1")]
public sealed virtual string GetSuiteName(string source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2112")]
public class TeamCity.VSTest.TestLogger.TagAttribute : Attribute {
    public object Tag;
    public TagAttribute(object tag);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionUriAttribute("logger://TeamCity")]
[FriendlyNameAttribute("TeamCity")]
public class TeamCity.VSTest.TestLogger.TeamCityTestLogger : object {
    internal static string ExtensionId;
    private static string FriendlyName;
    private static IMutableContainer Container;
    private IMessageHandler _handler;
    private IOptions _options;
    private IMessageWriter _messageWriter;
    private static TeamCityTestLogger();
    public sealed virtual void Initialize(TestLoggerEvents events, string testRunDirectory);
    private void OutputLoggerInitializedMessage();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class TeamCity.VSTest.TestLogger.TeamCityVersion : object {
    private static Regex VersionRegex;
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    public int Major { get; }
    public int Minor { get; }
    [NullableContextAttribute("2")]
public TeamCityVersion(string version);
    private static TeamCityVersion();
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public int get_Minor();
    public sealed virtual int CompareTo(TeamCityVersion other);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.TestAttachmentPathResolver : object {
    private static int DirectoryMaxLength;
    private static char NamespaceDelimiter;
    private static char DirectorySeparator;
    public sealed virtual string Resolve(string testFullyQualifiedName);
    private static int ComputePosition(string testName, int currentPosition, int currentOffset);
    private static int ComputeOffset(string testName, int currentPosition);
    private static string DenormalizeNamespaceDelimiter(string testName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class TeamCity.VSTest.TestLogger.TestEvent : object {
    public string SuiteName;
    public string DisplayName;
    public TestCase TestCase;
    public TestEvent(string suiteName, string displayName, TestCase testCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TeamCity.VSTest.TestLogger.TestInfoUpdater : object {
    [CompilerGeneratedAttribute]
private IEventContext <eventContext>P;
    public TestInfoUpdater(IEventContext eventContext);
    public sealed virtual IServiceMessage UpdateServiceMessage(IServiceMessage message);
}
internal class TeamCity.VSTest.TestLogger.TestNameProvider : object {
    [NullableContextAttribute("2")]
public sealed virtual string GetTestName(string fullyQualifiedName, string displayName);
    [NullableContextAttribute("1")]
private static string GetArgs(string name);
}
