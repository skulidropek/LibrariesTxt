[NameAttribute("tss.ActionButton")]
public class Tesserae.ActionButton : object {
    [DebuggerBrowsableAttribute]
private HTMLDivElement <Container>k__BackingField;
    [DebuggerBrowsableAttribute]
private HTMLDivElement <DisplayButton>k__BackingField;
    [DebuggerBrowsableAttribute]
private HTMLButtonElement <ActionBtn>k__BackingField;
    [DebuggerBrowsableAttribute]
private IComponent <ActionBtnComponent>k__BackingField;
    private IComponent _content;
    private HTMLElement _iconSpan;
    [DebuggerBrowsableAttribute]
private ActionButtonEventHandler`2<HTMLDivElement, MouseEvent> ClickedDisplay;
    [DebuggerBrowsableAttribute]
private ActionButtonEventHandler`2<HTMLDivElement, MouseEvent> ContextMenuDisplay;
    [DebuggerBrowsableAttribute]
private ActionButtonEventHandler`2<HTMLButtonElement, MouseEvent> ClickedAction;
    [DebuggerBrowsableAttribute]
private ActionButtonEventHandler`2<HTMLButtonElement, MouseEvent> ContextMenuAction;
    public HTMLDivElement Container { get; protected set; }
    public HTMLDivElement DisplayButton { get; protected set; }
    public HTMLButtonElement ActionBtn { get; protected set; }
    public IComponent ActionBtnComponent { get; protected set; }
    public bool IsDanger { get; public set; }
    public bool IsPrimary { get; public set; }
    public bool IsEnabled { get; public set; }
    public ActionButton(string textContent, UIcons displayIcon, UIconsWeight displayIconWeight, string displayColor, TextSize displayIconSize, UIconsWeight actionIconWeight, UIcons actionIcon, string actionColor, TextSize actionIconSize);
    public ActionButton(string textContent, UIcons displayIcon, UIconsWeight actionIconWeight, UIcons actionIcon, string actionColor, TextSize actionIconSize);
    public ActionButton(string textContent, UIcons actionIcon, UIconsWeight actionIconWeight, string actionColor, TextSize actionIconSize);
    public ActionButton(IComponent contnent, string actionIcon, string actionColor, TextSize actionIconSize);
    public HTMLDivElement get_Container();
    protected void set_Container(HTMLDivElement value);
    public HTMLDivElement get_DisplayButton();
    protected void set_DisplayButton(HTMLDivElement value);
    public HTMLButtonElement get_ActionBtn();
    protected void set_ActionBtn(HTMLButtonElement value);
    public IComponent get_ActionBtnComponent();
    protected void set_ActionBtnComponent(IComponent value);
    protected void add_ClickedDisplay(ActionButtonEventHandler`2<HTMLDivElement, MouseEvent> value);
    protected void remove_ClickedDisplay(ActionButtonEventHandler`2<HTMLDivElement, MouseEvent> value);
    protected void add_ContextMenuDisplay(ActionButtonEventHandler`2<HTMLDivElement, MouseEvent> value);
    protected void remove_ContextMenuDisplay(ActionButtonEventHandler`2<HTMLDivElement, MouseEvent> value);
    protected void add_ClickedAction(ActionButtonEventHandler`2<HTMLButtonElement, MouseEvent> value);
    protected void remove_ClickedAction(ActionButtonEventHandler`2<HTMLButtonElement, MouseEvent> value);
    protected void add_ContextMenuAction(ActionButtonEventHandler`2<HTMLButtonElement, MouseEvent> value);
    protected void remove_ContextMenuAction(ActionButtonEventHandler`2<HTMLButtonElement, MouseEvent> value);
    public sealed virtual HTMLElement Render();
    public virtual ActionButton OnClickDisplay(ActionButtonEventHandler`2<HTMLDivElement, MouseEvent> onClick, bool clearPrevious);
    public virtual ActionButton OnClickAction(ActionButtonEventHandler`2<HTMLButtonElement, MouseEvent> onClick, bool clearPrevious);
    public ActionButton ModifyActionButton(Action`1<IComponent> modify);
    public bool get_IsDanger();
    public void set_IsDanger(bool value);
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
    public ActionButton Primary();
    public ActionButton Danger();
    public ActionButton Disabled(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
}
[ExtensionAttribute]
[NameAttribute("tss.arX")]
public static class Tesserae.ArrayExtensions : object {
    [ExtensionAttribute]
public static ReadOnlyArray`1<T> AsReadOnlyArray(T[] source);
    [ExtensionAttribute]
public static int IndexOrder(T[] array, T value);
    [ExtensionAttribute]
public static void MoveItem(T[] arr, int fromIndex, int toIndex);
    [ExtensionAttribute]
public static bool TryGetFirst(IEnumerable`1<T> arr, Func`2<T, bool> match, T& value);
}
[NameAttribute("tss.att")]
public class Tesserae.Attributes : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<string, string>> _data;
    [DebuggerBrowsableAttribute]
private string <ClassName>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Id>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    public Action`1<HTMLElement> OnElementCreate;
    public Action`1<CSSStyleDeclaration> Styles;
    [DebuggerBrowsableAttribute]
private string <Href>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Src>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Rel>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Target>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Text>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Type>k__BackingField;
    [DebuggerBrowsableAttribute]
private Nullable`1<bool> <Disabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Value>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <DefaultValue>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Placeholder>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Alt>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Role>k__BackingField;
    public string ClassName { get; internal set; }
    public string Id { get; internal set; }
    public string Title { get; internal set; }
    public string Href { get; internal set; }
    public string Src { get; internal set; }
    public string Rel { get; internal set; }
    public string Target { get; internal set; }
    public string Text { get; internal set; }
    public string Type { get; internal set; }
    public Nullable`1<bool> Disabled { get; internal set; }
    public string Value { get; internal set; }
    public string DefaultValue { get; internal set; }
    public string Placeholder { get; internal set; }
    public string Alt { get; internal set; }
    public string Role { get; internal set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<string, string>> Data { get; }
    public string get_ClassName();
    internal void set_ClassName(string value);
    public string get_Id();
    internal void set_Id(string value);
    public string get_Title();
    internal void set_Title(string value);
    public string get_Href();
    internal void set_Href(string value);
    public string get_Src();
    internal void set_Src(string value);
    public string get_Rel();
    internal void set_Rel(string value);
    public string get_Target();
    internal void set_Target(string value);
    public string get_Text();
    internal void set_Text(string value);
    public string get_Type();
    internal void set_Type(string value);
    public Nullable`1<bool> get_Disabled();
    internal void set_Disabled(Nullable`1<bool> value);
    public string get_Value();
    internal void set_Value(string value);
    public string get_DefaultValue();
    internal void set_DefaultValue(string value);
    public string get_Placeholder();
    internal void set_Placeholder(string value);
    public string get_Alt();
    internal void set_Alt(string value);
    public string get_Role();
    internal void set_Role(string value);
    public IEnumerable`1<ValueTuple`2<string, string>> get_Data();
    public void InitElement(HTMLElement element);
    public void InitAnchorElement(HTMLAnchorElement element);
    public void InitButtonElement(HTMLButtonElement element);
    public void InitImageElement(HTMLImageElement element);
    public void InitInputElement(HTMLInputElement element);
    public void InitIFrameElement(HTMLIFrameElement element);
    public void InitOptionElement(HTMLOptionElement element);
    public void InitTextAreaElement(HTMLTextAreaElement element);
    public Attributes WithAlt(string alt);
    public Attributes WithRole(string role);
    public Attributes WithData(string attributeName, string attributeValue);
}
[NameAttribute("tss.BackgroundArea")]
public class Tesserae.BackgroundArea : object {
    private Raw _raw;
    private HTMLElement _container;
    public string Background { get; public set; }
    public BackgroundArea(IComponent content);
    public BackgroundArea Content(IComponent content);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual HTMLElement Render();
}
public class Tesserae.BeforeSelectEventHandler`1 : MulticastDelegate {
    public BeforeSelectEventHandler`1(object object, IntPtr method);
    public virtual bool Invoke(TSender sender);
    public virtual IAsyncResult BeginInvoke(TSender sender, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[NameAttribute("tss.Breadcrumb")]
public class Tesserae.Breadcrumb : object {
    private HTMLElement _childContainer;
    private ResizeObserver _resizeObserver;
    private int _maximumItemsToDisplay;
    private int _overflowIndex;
    private bool _cacheSizes;
    private double _cachedFullWidth;
    private HTMLElement _chevronToUseAsButton;
    private string _chevronIcon;
    private Dictionary`2<HTMLElement, double> _cachedSizes;
    public int MaximumItemsToDisplay { get; public set; }
    public int OverflowIndex { get; public set; }
    public bool IsSmall { get; public set; }
    public int get_MaximumItemsToDisplay();
    public void set_MaximumItemsToDisplay(int value);
    public int get_OverflowIndex();
    public void set_OverflowIndex(int value);
    public bool get_IsSmall();
    public void set_IsSmall(bool value);
    private static IComponent Clone(Node node);
    private void Recompute();
    private void UpdateChildrenSizes();
    public sealed virtual void Clear();
    public sealed virtual void Replace(IComponent newComponent, IComponent oldComponent);
    public sealed virtual void Add(IComponent component);
    public Breadcrumb Items(IComponent[] children);
    public Breadcrumb DisableSizeCache();
    public Breadcrumb SetOverflowIndex(int i);
    public Breadcrumb SetChevron(UIcons icon);
    public Breadcrumb Small();
    public sealed virtual HTMLElement Render();
    internal static bool <Recompute>g__isChevron|20_0(HTMLElement e);
    private void <Items>b__25_0(IComponent x);
}
[NameAttribute("tss.Button")]
public class Tesserae.Button : ComponentBase`2<Button, HTMLButtonElement> {
    private HTMLSpanElement _textSpan;
    private HTMLElement _iconSpan;
    private HTMLButtonElement _spinner;
    public string Background { get; public set; }
    public string Foreground { get; public set; }
    public string Text { get; public set; }
    public string Title { get; public set; }
    public string Icon { get; public set; }
    public bool IsCompact { get; public set; }
    public bool IsLink { get; public set; }
    public bool IsPrimary { get; public set; }
    public bool IsSuccess { get; public set; }
    public bool IsDanger { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool CanWrap { get; public set; }
    public bool EnableEllipsis { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public Button(string text);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Icon();
    public void set_Icon(string value);
    public bool get_IsCompact();
    public void set_IsCompact(bool value);
    public bool get_IsLink();
    public void set_IsLink(bool value);
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
    public bool get_IsSuccess();
    public void set_IsSuccess(bool value);
    public bool get_IsDanger();
    public void set_IsDanger(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public sealed virtual bool get_CanWrap();
    public sealed virtual void set_CanWrap(bool value);
    public bool get_EnableEllipsis();
    public void set_EnableEllipsis(bool value);
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public virtual HTMLElement Render();
    public Button Compact();
    public Button NoMargin();
    public Button NoPadding();
    public Button LessPadding();
    public Button Link();
    public Button DefaultLink();
    public Button DangerLink();
    public void ToSpinner(string text);
    public void UndoSpinner();
    public Button OnClickSpinWhile(Func`1<Task> action, string text, Action`2<Button, Exception> onError);
    public Button OnClick(Action action);
    public Button OnContextMenu(Action action);
    public void SpinWhile(Func`1<Task> action, string text, Action`2<Button, Exception> onError);
    public Button Primary();
    public Button Success();
    public Button Danger();
    public Button Disabled(bool value);
    public Button NoBorder();
    public Button NoMinSize();
    public Button NoBackground();
    public Button LinkOnHover();
    public Button NoHover();
    public Button Color(string background, string textColor, string borderColor, string iconColor);
    public Button SetText(string text);
    public Button SetTitle(string title);
    private Button SetIcon(string icon, string color, bool afterText);
    public Button ClearIcon();
    internal void OnIconClick(Action`2<HTMLElement, MouseEvent> action);
    public Button SetIcon(Emoji icon, bool afterText);
    public Button SetIcon(UIcons icon, string color, TextSize size, UIconsWeight weight, bool afterText);
    public Button IconOnHover();
    public Button ReplaceContent(IComponent content);
    public Button Wrap();
    public Button Ellipsis();
    public Button NoWrap();
    private void RaiseOnClick(Event e, Handler handler);
    public Button Focus();
    public Button WithHotKey(string keys, Option options);
    private void <ToSpinner>g__MountSpinner|60_0();
    private void <Focus>b__89_0();
}
[NameAttribute("tss.Card")]
public class Tesserae.Card : ComponentBase`2<Card, HTMLElement> {
    private HTMLElement _cardContainer;
    public bool IsCompact { get; public set; }
    public Card(IComponent content);
    public bool get_IsCompact();
    public void set_IsCompact(bool value);
    public virtual Card OnClick(ComponentEventHandler`2<Card, MouseEvent> onClick, bool clearPrevious);
    public Card OnClick(Action action);
    public Card SetContent(IComponent content);
    public Card Compact();
    public Card NoAnimation();
    public Card BackgroundColor(string color);
    public Card Border(string color, UnitSize size);
    public Card NoPadding();
    public Card HoverColor(bool enabled);
    public virtual HTMLElement Render();
    private void <.ctor>b__1_0();
}
[NameAttribute("tss.ChecBox")]
public class Tesserae.CheckBox : ComponentBase`2<CheckBox, HTMLInputElement> {
    private HTMLSpanElement _checkSpan;
    private HTMLLabelElement _label;
    private SettableObservable`1<bool> _observable;
    public string Text { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsChecked { get; public set; }
    public CheckBox(string text);
    public string get_Text();
    public void set_Text(string value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public virtual HTMLElement Render();
    public CheckBox Disabled(bool value);
    public CheckBox Checked(bool value);
    public CheckBox SetText(string text);
    public sealed virtual IObservable`1<bool> AsObservable();
    private void <.ctor>b__3_0(object _);
}
[NameAttribute("tss.ChoiceGroup")]
public class Tesserae.ChoiceGroup : ComponentBase`2<ChoiceGroup, HTMLDivElement> {
    private TextBlock _header;
    private SettableObservable`1<Choice> _selectedOption;
    public Choice SelectedOption { get; private set; }
    public string Label { get; public set; }
    public ChoiceGroupOrientation Orientation { get; public set; }
    public bool IsRequired { get; public set; }
    public ChoiceGroup(string label);
    public Choice get_SelectedOption();
    private void set_SelectedOption(Choice value);
    public string get_Label();
    public void set_Label(string value);
    public ChoiceGroupOrientation get_Orientation();
    public void set_Orientation(ChoiceGroupOrientation value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public virtual HTMLElement Render();
    public sealed virtual void Add(Choice component);
    public sealed virtual void Clear();
    public sealed virtual void Replace(Choice newComponent, Choice oldComponent);
    public ChoiceGroup Choices(Choice[] children);
    public ChoiceGroup Horizontal();
    public ChoiceGroup Vertical();
    public ChoiceGroup Required();
    private void OnChoiceSelected(Choice sender);
    public sealed virtual IObservable`1<Choice> AsObservable();
    private void <Choices>b__19_0(Choice x);
}
[NameAttribute("tss.Clipboard")]
public static class Tesserae.Clipboard : object {
    public static void Copy(string valueToCopy, bool showMessage, string customMessage);
}
[NameAttribute("tss.Color")]
public class Tesserae.Color : object {
    [DebuggerBrowsableAttribute]
private byte <A>k__BackingField;
    [DebuggerBrowsableAttribute]
private byte <B>k__BackingField;
    [DebuggerBrowsableAttribute]
private byte <R>k__BackingField;
    [DebuggerBrowsableAttribute]
private byte <G>k__BackingField;
    private string Hex;
    public byte A { get; private set; }
    public byte B { get; private set; }
    public byte R { get; private set; }
    public byte G { get; private set; }
    public byte get_A();
    private void set_A(byte value);
    public byte get_B();
    private void set_B(byte value);
    public byte get_R();
    private void set_R(byte value);
    public byte get_G();
    private void set_G(byte value);
    public static Color FromArgb(byte r, byte g, byte b);
    public static Color FromArgb(byte a, byte r, byte g, byte b);
    public static string EvalVar(string variableName);
    public float GetHue();
    public float GetBrightness();
    public float GetSaturation();
    public static Color FromString(string hexString);
    public string ToHex();
    public string ToRGB();
    public string ToRGBvar();
    public string ToRGBA(float opacity);
    public string ToRGBAvar(float opacity);
}
[NameAttribute("tss.ColorPicker")]
public class Tesserae.ColorPicker : Input`1<ColorPicker> {
    public Color Color { get; public set; }
    public ColorPicker(Color color);
    public Color get_Color();
    public void set_Color(Color value);
    public ColorPicker SetColor(Color color);
}
[NameAttribute("tss.CombinedObservableT2")]
public class Tesserae.CombinedObservable`2 : object {
    private IObservable`1<T1> _first;
    private IObservable`1<T2> _second;
    private double _refreshTimeout;
    private int _delayInMs;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute]
private ValueChanged`1<ValueTuple`2<T1, T2>> ValueChanged;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<T1, T2> Value { get; }
    public CombinedObservable`2(IObservable`1<T1> o1, IObservable`1<T2> o2);
    public sealed virtual ValueTuple`2<T1, T2> get_Value();
    private void add_ValueChanged(ValueChanged`1<ValueTuple`2<T1, T2>> value);
    private void remove_ValueChanged(ValueChanged`1<ValueTuple`2<T1, T2>> value);
    public sealed virtual void Observe(ValueChanged`1<ValueTuple`2<T1, T2>> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<ValueTuple`2<T1, T2>> valueGetter);
    private void Observe(ValueChanged`1<ValueTuple`2<T1, T2>> valueGetter, bool callbackImmediately);
    public sealed virtual void StopObserving(ValueChanged`1<ValueTuple`2<T1, T2>> valueGetter);
    private void RaiseOnValueChanged();
    private void <.ctor>b__9_0(T1 _);
    private void <.ctor>b__9_1(T2 _);
    private void <RaiseOnValueChanged>b__14_0(Object[] _);
}
[NameAttribute("tss.CombinedObservableT3")]
public class Tesserae.CombinedObservable`3 : object {
    private IObservable`1<T1> _first;
    private IObservable`1<T2> _second;
    private IObservable`1<T3> _third;
    private double _refreshTimeout;
    private int _delayInMs;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute]
private ValueChanged`1<ValueTuple`3<T1, T2, T3>> ValueChanged;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`3<T1, T2, T3> Value { get; }
    public CombinedObservable`3(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3);
    public sealed virtual ValueTuple`3<T1, T2, T3> get_Value();
    private void add_ValueChanged(ValueChanged`1<ValueTuple`3<T1, T2, T3>> value);
    private void remove_ValueChanged(ValueChanged`1<ValueTuple`3<T1, T2, T3>> value);
    public sealed virtual void Observe(ValueChanged`1<ValueTuple`3<T1, T2, T3>> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<ValueTuple`3<T1, T2, T3>> valueGetter);
    private void Observe(ValueChanged`1<ValueTuple`3<T1, T2, T3>> valueGetter, bool callbackImmediately);
    public sealed virtual void StopObserving(ValueChanged`1<ValueTuple`3<T1, T2, T3>> valueGetter);
    private void RaiseOnValueChanged();
    private void <.ctor>b__10_0(T1 _);
    private void <.ctor>b__10_1(T2 _);
    private void <.ctor>b__10_2(T3 _);
    private void <RaiseOnValueChanged>b__15_0(Object[] _);
}
[NameAttribute("tss.CombinedObservableT4")]
public class Tesserae.CombinedObservable`4 : object {
    private IObservable`1<T1> _first;
    private IObservable`1<T2> _second;
    private IObservable`1<T3> _third;
    private IObservable`1<T4> _forth;
    private double _refreshTimeout;
    private int _delayInMs;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute]
private ValueChanged`1<ValueTuple`4<T1, T2, T3, T4>> ValueChanged;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`4<T1, T2, T3, T4> Value { get; }
    public CombinedObservable`4(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4);
    public sealed virtual ValueTuple`4<T1, T2, T3, T4> get_Value();
    private void add_ValueChanged(ValueChanged`1<ValueTuple`4<T1, T2, T3, T4>> value);
    private void remove_ValueChanged(ValueChanged`1<ValueTuple`4<T1, T2, T3, T4>> value);
    public sealed virtual void Observe(ValueChanged`1<ValueTuple`4<T1, T2, T3, T4>> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<ValueTuple`4<T1, T2, T3, T4>> valueGetter);
    private void Observe(ValueChanged`1<ValueTuple`4<T1, T2, T3, T4>> valueGetter, bool callbackImmediately);
    public sealed virtual void StopObserving(ValueChanged`1<ValueTuple`4<T1, T2, T3, T4>> valueGetter);
    private void RaiseOnValueChanged();
    private void <.ctor>b__11_0(T1 _);
    private void <.ctor>b__11_1(T2 _);
    private void <.ctor>b__11_2(T3 _);
    private void <.ctor>b__11_3(T4 _);
    private void <RaiseOnValueChanged>b__16_0(Object[] _);
}
[NameAttribute("tss.CombinedObservableT5")]
public class Tesserae.CombinedObservable`5 : object {
    private IObservable`1<T1> _first;
    private IObservable`1<T2> _second;
    private IObservable`1<T3> _third;
    private IObservable`1<T4> _forth;
    private IObservable`1<T5> _fifth;
    private double _refreshTimeout;
    private int _delayInMs;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerBrowsableAttribute]
private ValueChanged`1<ValueTuple`5<T1, T2, T3, T4, T5>> ValueChanged;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`5<T1, T2, T3, T4, T5> Value { get; }
    public CombinedObservable`5(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5);
    public sealed virtual ValueTuple`5<T1, T2, T3, T4, T5> get_Value();
    private void add_ValueChanged(ValueChanged`1<ValueTuple`5<T1, T2, T3, T4, T5>> value);
    private void remove_ValueChanged(ValueChanged`1<ValueTuple`5<T1, T2, T3, T4, T5>> value);
    public sealed virtual void Observe(ValueChanged`1<ValueTuple`5<T1, T2, T3, T4, T5>> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<ValueTuple`5<T1, T2, T3, T4, T5>> valueGetter);
    private void Observe(ValueChanged`1<ValueTuple`5<T1, T2, T3, T4, T5>> valueGetter, bool callbackImmediately);
    public sealed virtual void StopObserving(ValueChanged`1<ValueTuple`5<T1, T2, T3, T4, T5>> valueGetter);
    private void RaiseOnValueChanged();
    private void <.ctor>b__12_0(T1 _);
    private void <.ctor>b__12_1(T2 _);
    private void <.ctor>b__12_2(T3 _);
    private void <.ctor>b__12_3(T4 _);
    private void <.ctor>b__12_4(T5 _);
    private void <RaiseOnValueChanged>b__17_0(Object[] _);
}
[NameAttribute("tss.CB")]
public abstract class Tesserae.ComponentBase`2 : object {
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, MouseEvent> Clicked;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, MouseEvent> MouseOver;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, MouseEvent> MouseOut;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, MouseEvent> ContextMenu;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, Event> Changed;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, ClipboardEvent> Pasted;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, Event> InputUpdated;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, Event> ReceivedFocus;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, Event> LostFocus;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, KeyboardEvent> KeyDown;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, KeyboardEvent> KeyUp;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<T, KeyboardEvent> KeyPress;
    [DebuggerBrowsableAttribute]
private THTML <InnerElement>k__BackingField;
    public THTML InnerElement { get; protected set; }
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    protected void add_Clicked(ComponentEventHandler`2<T, MouseEvent> value);
    protected void remove_Clicked(ComponentEventHandler`2<T, MouseEvent> value);
    protected void add_MouseOver(ComponentEventHandler`2<T, MouseEvent> value);
    protected void remove_MouseOver(ComponentEventHandler`2<T, MouseEvent> value);
    protected void add_MouseOut(ComponentEventHandler`2<T, MouseEvent> value);
    protected void remove_MouseOut(ComponentEventHandler`2<T, MouseEvent> value);
    protected void add_ContextMenu(ComponentEventHandler`2<T, MouseEvent> value);
    protected void remove_ContextMenu(ComponentEventHandler`2<T, MouseEvent> value);
    protected void add_Changed(ComponentEventHandler`2<T, Event> value);
    protected void remove_Changed(ComponentEventHandler`2<T, Event> value);
    protected void add_Pasted(ComponentEventHandler`2<T, ClipboardEvent> value);
    protected void remove_Pasted(ComponentEventHandler`2<T, ClipboardEvent> value);
    protected void add_InputUpdated(ComponentEventHandler`2<T, Event> value);
    protected void remove_InputUpdated(ComponentEventHandler`2<T, Event> value);
    protected void add_ReceivedFocus(ComponentEventHandler`2<T, Event> value);
    protected void remove_ReceivedFocus(ComponentEventHandler`2<T, Event> value);
    protected void add_LostFocus(ComponentEventHandler`2<T, Event> value);
    protected void remove_LostFocus(ComponentEventHandler`2<T, Event> value);
    protected void add_KeyDown(ComponentEventHandler`2<T, KeyboardEvent> value);
    protected void remove_KeyDown(ComponentEventHandler`2<T, KeyboardEvent> value);
    protected void add_KeyUp(ComponentEventHandler`2<T, KeyboardEvent> value);
    protected void remove_KeyUp(ComponentEventHandler`2<T, KeyboardEvent> value);
    protected void add_KeyPress(ComponentEventHandler`2<T, KeyboardEvent> value);
    protected void remove_KeyPress(ComponentEventHandler`2<T, KeyboardEvent> value);
    public THTML get_InnerElement();
    protected void set_InnerElement(THTML value);
    public sealed virtual string get_Margin();
    public sealed virtual void set_Margin(string value);
    public sealed virtual string get_Padding();
    public sealed virtual void set_Padding(string value);
    public abstract virtual HTMLElement Render();
    public sealed virtual void OnClickBase(ComponentEventHandler`2<IComponent, MouseEvent> onClick, bool clearPrevious);
    public sealed virtual void OnContextMenuBase(ComponentEventHandler`2<IComponent, MouseEvent> onContextMenu, bool clearPrevious);
    public virtual T OnClick(ComponentEventHandler`2<T, MouseEvent> onClick, bool clearPrevious);
    public virtual T OnMouseOver(ComponentEventHandler`2<T, MouseEvent> onEnter, ComponentEventHandler`2<T, MouseEvent> onLeave, bool clearPrevious);
    public virtual T OnContextMenu(ComponentEventHandler`2<T, MouseEvent> onContextMenu, bool clearPrevious);
    public virtual T OnChange(ComponentEventHandler`2<T, Event> onChange);
    public virtual T OnInput(ComponentEventHandler`2<T, Event> onInput);
    public virtual T OnFocus(ComponentEventHandler`2<T, Event> onFocus);
    public virtual T OnBlur(ComponentEventHandler`2<T, Event> onBlur);
    public virtual T OnKeyDown(ComponentEventHandler`2<T, KeyboardEvent> onKeyDown);
    public virtual T OnKeyUp(ComponentEventHandler`2<T, KeyboardEvent> onKeyUp);
    public virtual T OnKeyPress(ComponentEventHandler`2<T, KeyboardEvent> onKeyPress);
    public virtual T OnPasted(ComponentEventHandler`2<T, ClipboardEvent> onPasted);
    protected void AttachClick();
    protected void AttachContextMenu();
    protected void AttachChange();
    public void RaiseOnClick(MouseEvent ev);
    public void RaiseOnMouseOver(MouseEvent ev);
    public void RaiseOnMouseOut(MouseEvent ev);
    public void RaiseOnContextMenu(MouseEvent ev);
    protected void RaiseOnChange(Event ev);
    protected void AttachInput();
    protected void AttachKeys();
    protected void AttachFocus();
    protected void AttachBlur();
    protected void RaiseOnPaste(ClipboardEvent ev);
    protected void RaiseOnInput(Event ev);
    protected void RaiseOnKeyDown(KeyboardEvent ev);
    protected void RaiseOnKeyUp(KeyboardEvent ev);
    protected void RaiseOnKeyPress(KeyboardEvent ev);
    private void RaiseOnFocus(Event ev);
    private void RaiseOnBlur(Event ev);
    private void <AttachClick>b__60_0(object e);
    private void <AttachClick>b__60_1(object e);
    private void <AttachClick>b__60_2(object e);
    private void <AttachContextMenu>b__61_0(object e);
    private void <AttachChange>b__62_0(Event s);
    private void <AttachInput>b__68_0(Event ev);
    private void <AttachKeys>b__69_0(object ev);
    private void <AttachKeys>b__69_1(object ev);
    private void <AttachKeys>b__69_2(object ev);
    private void <AttachKeys>b__69_3(object ev);
    private void <AttachFocus>b__70_0(Event s);
    private void <AttachBlur>b__71_0(Event s);
}
[NameAttribute("tss.ComponentCache")]
public class Tesserae.ComponentCache`1 : ComponentCacheBase`1<TComponent> {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<ValueTuple`2<int, TComponent>, HTMLElement> _createComponentExpression;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<int, HTMLElement>> _componentCache;
    public ComponentCache`1(Func`2<ValueTuple`2<int, TComponent>, HTMLElement> createComponentExpression);
    public ComponentCache`1<TComponent> AddComponents(IEnumerable`1<TComponent> components);
    public IEnumerable`1<HTMLElement> GetAllRenderedComponentsFromCache();
    public ComponentCache`1<TComponent> SortComponents(Comparison`1<TComponent> comparison);
    public ComponentCache`1<TComponent> ReverseComponentOrder();
    public ComponentCache`1<TComponent> Clear();
}
[NameAttribute("tss.ComponentCacheBase")]
public abstract class Tesserae.ComponentCacheBase`1 : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected List`1<ValueTuple`2<int, TComponent>> _componentsAndKeys;
    public int ComponentsCount { get; }
    public bool HasComponents { get; }
    public int get_ComponentsCount();
    public bool get_HasComponents();
    protected void AddToComponents(IEnumerable`1<TComponent> components);
}
public class Tesserae.ComponentEventHandler`1 : MulticastDelegate {
    public ComponentEventHandler`1(object object, IntPtr method);
    public virtual void Invoke(TSender sender);
    public virtual IAsyncResult BeginInvoke(TSender sender, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Tesserae.ComponentEventHandler`2 : MulticastDelegate {
    public ComponentEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(TSender sender, TEventArgs e);
    public virtual IAsyncResult BeginInvoke(TSender sender, TEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NameAttribute("tss.ConstantObservableT")]
public class Tesserae.ConstantObservable`1 : object {
    private T _value;
    public T Value { get; }
    public ConstantObservable`1(T value);
    public sealed virtual void Observe(ValueChanged`1<T> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<T> valueGetter);
    public sealed virtual void StopObserving(ValueChanged`1<T> valueGetter);
    public sealed virtual T get_Value();
}
[NameAttribute("tss.ContextMenu")]
public class Tesserae.ContextMenu : Layer`1<ContextMenu> {
    private HTMLElement _childContainer;
    private HTMLDivElement _modalOverlay;
    private HTMLDivElement _popup;
    private static int DELAY;
    private double _timeoutId;
    private Point2D _previousMouseCoords;
    private Point2D _currentMouseCoords;
    private Point2D _extremeCoordsTopLeft;
    private Point2D _extremeCoordsBottomRight;
    private Point2D _menuElementCoordsTopLeft;
    private Point2D _activeSubMenuTopLeftCoords;
    private Point2D _activeSubMenuBottomLeftCoords;
    private Item _activeMenuItem;
    private ContextMenu _activeSubMenu;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<Item, MouseEvent> ItemClick;
    private List`1<Item> _items;
    private void add_ItemClick(ComponentEventHandler`2<Item, MouseEvent> value);
    private void remove_ItemClick(ComponentEventHandler`2<Item, MouseEvent> value);
    public sealed virtual void Clear();
    public sealed virtual void Replace(Item newComponent, Item oldComponent);
    public sealed virtual void Add(Item component);
    public virtual HTMLElement Render();
    public virtual ContextMenu Show();
    private void SaveMouseCoords(double x, double y);
    private void OnWindowMouseMove(Event evnt);
    private void HideSubMenuIfCompletelyOutside();
    private void OnItemClick(ComponentEventHandler`2<Item, MouseEvent> componentEventHandler);
    public void ShowFor(IComponent component, int distanceX, int distanceY);
    public void ShowAt(int x, int y, int minWidth);
    public void ShowFor(HTMLElement element, int distanceX, int distanceY);
    private void ShowFor(HTMLElement element, int distanceX, int distanceY, bool asSubMenu);
    private void CancelPendingMenuItemActivations();
    private double CalculateSlope(Point2D a, Point2D b);
    private Point2D CalculateTopLeftCoords(HTMLElement element);
    private ValueTuple`4<Point2D, Point2D, int, int> CalculateTopAndBottomLeftCoords(HTMLElement element);
    private void ActivateMenuItem(Item menuItem);
    private bool ShouldChangeActiveMenuItem();
    private void DeactivateActiveMenuItem();
    private bool PossiblyActivateMenuItem(Item menuItem);
    private void OnMenuItemMouseEnter(Item item);
    private void PossiblySetupSubMenuHooks();
    public virtual void Hide(Action onHidden);
    public ContextMenu Items(Item[] children);
    private void OnPopupKeyDown(Event e);
    private void <Add>b__21_0(Item s, MouseEvent e);
    private void <ShowAt>b__29_0(object _);
    private void <ShowAt>b__29_1(Object[] e);
    private void <ShowFor>b__31_0(object _);
    private void <ShowFor>b__31_1(Object[] e);
    private void <OnMenuItemMouseEnter>b__40_0(Object[] args);
    private void <Items>b__43_0(Item x);
}
[NameAttribute("tss.DatePicker")]
public class Tesserae.DatePicker : MomentPickerBase`2<DatePicker, DateTime> {
    public DateTime Date { get; }
    public DatePicker(Nullable`1<DateTime> date);
    public DateTime get_Date();
    public DatePicker WithBrowserFallback();
    private static string FormatDateTime(DateTime date);
    protected virtual string FormatMoment(DateTime date);
    protected virtual DateTime FormatMoment(string date);
}
[NameAttribute("tss.DateTimePicker")]
public class Tesserae.DateTimePicker : MomentPickerBase`2<DateTimePicker, DateTime> {
    public DateTime DateTime { get; }
    public DateTimePicker(Nullable`1<DateTime> dateTime);
    public DateTime get_DateTime();
    public DateTimePicker WithBrowserFallback();
    private static string FormatDateTime(DateTime dateTime);
    protected virtual string FormatMoment(DateTime dateTime);
    protected virtual DateTime FormatMoment(string dateTime);
}
[NameAttribute("tss.DC")]
internal class Tesserae.DeferedComponent : object {
    private IComponent _loadMessage;
    private Func`1<Task`1<IComponent>> _asyncGenerator;
    private TextBlock _defaultLoadingMessageIfAny;
    private bool _needsRefresh;
    private bool _waitForComponentToBeMountedBeforeFullyInitiatingRender;
    private bool _renderHasBeenCalled;
    private double _refreshTimeout;
    private int _delayInMs;
    private int id;
    [DebuggerBrowsableAttribute]
private HTMLElement <Container>k__BackingField;
    internal HTMLElement Container { get; }
    private DeferedComponent(Func`1<Task`1<IComponent>> asyncGenerator, IComponent loadMessage, TextBlock defaultLoadingMessageIfAny);
    internal static DeferedComponent Create(Func`1<Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Create(Func`1<Task`1<IComponent>> asyncGenerator);
    public sealed virtual void Refresh();
    public sealed virtual IDefer Debounce(int milliseconds);
    public sealed virtual IDefer DoNotWaitForComponentMountingBeforeRendering();
    public sealed virtual HTMLElement Render();
    internal HTMLElement get_Container();
    private void TriggerRefresh();
    internal static DeferedComponent Observe(IObservable`1<T1> o1, Func`2<T1, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, Func`3<T1, T2, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, Func`4<T1, T2, T3, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, Func`5<T1, T2, T3, T4, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, Func`6<T1, T2, T3, T4, T5, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, Func`7<T1, T2, T3, T4, T5, T6, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    internal static DeferedComponent Observe(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, IObservable`1<T10> o10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    private void <Refresh>b__12_0(Object[] t);
    private void <Render>b__15_0(Object[] _);
}
[NameAttribute("tss.DetailsList")]
public class Tesserae.DetailsList`1 : object {
    private List`1<IDetailsListColumn> _columns;
    private ComponentCache`1<TDetailsListItem> _componentCache;
    private HTMLElement _container;
    private HTMLDivElement _listContainer;
    private bool _listAlreadyCreated;
    private HTMLDivElement _listItemsContainer;
    private string _previousColumnSortingKey;
    private UIcons _currentSortingIcon;
    private HTMLElement _columnSortingIcon;
    private Func`1<IComponent> _emptyListMessageGenerator;
    private Func`1<Task`1<TDetailsListItem[]>> _getNextItemPage;
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public bool IsCompact { get; public set; }
    public DetailsList`1(IDetailsListColumn[] columns);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public bool get_IsCompact();
    public void set_IsCompact(bool value);
    public DetailsList`1<TDetailsListItem> Compact();
    private static IComponent CreateGridCell(IDetailsListColumn column, Func`1<IComponent> gridCellInnerHtmlExpression);
    public DetailsList`1<TDetailsListItem> WithEmptyMessage(Func`1<IComponent> emptyListMessageGenerator);
    public DetailsList`1<TDetailsListItem> WithPaginatedItems(Func`1<Task`1<TDetailsListItem[]>> getNextItemPage);
    public DetailsList`1<TDetailsListItem> WithListItems(TDetailsListItem[] listItems);
    public DetailsList`1<TDetailsListItem> SortedBy(string columnSortingKey);
    public sealed virtual HTMLElement Render();
    private void CreateList();
    private void RefreshListItems();
    private void CreateColumnHeader(IDetailsListColumn column, Interface detailsListHeader);
    private void CreateColumnSortingIcon();
    private HTMLElement CreateListItem(ValueTuple`2<int, TDetailsListItem> detailsListItemAndKey);
    private void SortList(string columnSortingKey, Interface columnHtmlElement);
    private void SortListItems(string columnSortingKey);
    private void InvertSortingIcon();
    private void UpdateColumnSortingIcon(Interface htmlElement, Action setIconExpression);
    private void <RefreshListItems>b__27_0(VisibilitySensor v);
}
[NameAttribute("tss.DetailsListColumn")]
public class Tesserae.DetailsListColumn : object {
    private Action _onColumnClick;
    private HTMLElement InnerElement;
    [DebuggerBrowsableAttribute]
private string <SortingKey>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Title>k__BackingField;
    [DebuggerBrowsableAttribute]
private UnitSize <Width>k__BackingField;
    [DebuggerBrowsableAttribute]
private UnitSize <MaxWidth>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <IsRowHeader>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableColumnSorting>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableOnColumnClickEvent>k__BackingField;
    public string SortingKey { get; }
    public string Title { get; }
    public UnitSize Width { get; }
    public UnitSize MaxWidth { get; }
    public bool IsRowHeader { get; }
    public bool EnableColumnSorting { get; }
    public bool EnableOnColumnClickEvent { get; }
    public DetailsListColumn(string title, UnitSize width, UnitSize maxWidth, bool isRowHeader, bool enableColumnSorting, string sortingKey, Action onColumnClick);
    public sealed virtual string get_SortingKey();
    public string get_Title();
    public sealed virtual UnitSize get_Width();
    public sealed virtual UnitSize get_MaxWidth();
    public sealed virtual bool get_IsRowHeader();
    public sealed virtual bool get_EnableColumnSorting();
    public sealed virtual bool get_EnableOnColumnClickEvent();
    public sealed virtual void OnColumnClick();
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.DetailsListIconColumn")]
public class Tesserae.DetailsListIconColumn : object {
    private Action _onColumnClick;
    private HTMLElement InnerElement;
    [DebuggerBrowsableAttribute]
private string <SortingKey>k__BackingField;
    [DebuggerBrowsableAttribute]
private Icon <Icon>k__BackingField;
    [DebuggerBrowsableAttribute]
private UnitSize <Width>k__BackingField;
    [DebuggerBrowsableAttribute]
private UnitSize <MaxWidth>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableColumnSorting>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <EnableOnColumnClickEvent>k__BackingField;
    public string SortingKey { get; }
    public Icon Icon { get; }
    public UnitSize Width { get; }
    public UnitSize MaxWidth { get; }
    public bool IsRowHeader { get; }
    public bool EnableColumnSorting { get; }
    public bool EnableOnColumnClickEvent { get; }
    public DetailsListIconColumn(Icon icon, UnitSize width, UnitSize maxWidth, bool enableColumnSorting, string sortingKey, Action onColumnClick);
    public sealed virtual string get_SortingKey();
    public Icon get_Icon();
    public sealed virtual UnitSize get_Width();
    public sealed virtual UnitSize get_MaxWidth();
    public sealed virtual bool get_IsRowHeader();
    public sealed virtual bool get_EnableColumnSorting();
    public sealed virtual bool get_EnableOnColumnClickEvent();
    public sealed virtual void OnColumnClick();
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.Dialog")]
public class Tesserae.Dialog : object {
    private static Random RNG;
    private Modal _modal;
    private string _scope;
    public bool IsDraggable { get; public set; }
    public bool IsDark { get; public set; }
    public Dialog(IComponent content, IComponent title, bool centerContent);
    private static Dialog();
    public bool get_IsDraggable();
    public void set_IsDraggable(bool value);
    public bool get_IsDark();
    public void set_IsDark(bool value);
    public Dialog Title(IComponent title);
    public Dialog Content(IComponent content);
    public Dialog Commands(IComponent[] content);
    public Dialog Dark();
    public Dialog MinHeight(UnitSize unitSize);
    public Dialog Height(UnitSize unitSize);
    public void Ok(Action onOk, Func`2<Button, Button> btnOk);
    public void OkCancel(Action onOk, Action onCancel, Func`2<Button, Button> btnOk, Func`2<Button, Button> btnCancel);
    public void YesNo(Action onYes, Action onNo, Func`2<Button, Button> btnYes, Func`2<Button, Button> btnNo);
    public void YesNoCancel(Action onYes, Action onNo, Action onCancel, Func`2<Button, Button> btnYes, Func`2<Button, Button> btnNo, Func`2<Button, Button> btnCancel);
    public void RetryCancel(Action onRetry, Action onCancel, Func`2<Button, Button> btnRetry, Func`2<Button, Button> btnCancel);
    public void Show();
    public void Hide(Action onHidden);
    public Dialog Draggable();
    public Task`1<Response> OkAsync(Func`2<Button, Button> btnOk);
    public Task`1<Response> OkCancelAsync(Func`2<Button, Button> btnOk, Func`2<Button, Button> btnCancel);
    public Task`1<Response> YesNoAsync(Func`2<Button, Button> btnYes, Func`2<Button, Button> btnNo);
    public Task`1<Response> YesNoCancelAsync(Func`2<Button, Button> btnYes, Func`2<Button, Button> btnNo, Func`2<Button, Button> btnCancel);
    public Task`1<Response> RetryCancelAsync(Func`2<Button, Button> btnRetry, Func`2<Button, Button> btnCancel);
    private Button CreateButton(string text, Action onClick, string bindToKeys, Func`2<Button, Button> modifier, bool isPrimary, Action onActed);
    private void <.ctor>b__3_0(Modal _);
    private void <.ctor>b__3_1(Modal _);
}
[NameAttribute("tss.domObs")]
public static class Tesserae.DomObserver : object {
    private static List`1<ElementAndCallback> _elementsToTrackMountingOf;
    private static List`1<ElementAndCallback> _elementsToTrackRemovalOf;
    private static DomObserver();
    public static void CleanUnusedReferences();
    private static void CheckMounted(MutationRecord[] mutationRecords);
    private static void CheckUnmounted(MutationRecord[] mutationRecords);
    public static void WhenMounted(HTMLElement element, Action callback);
    public static void WhenRemoved(HTMLElement element, Action callback);
}
[NameAttribute("tss.Dropdown")]
public class Tesserae.Dropdown : Layer`1<Dropdown> {
    private static string _multiSelectDropdownClassName;
    private static HTMLElement _firstItem;
    private HTMLElement _childContainer;
    private HTMLDivElement _container;
    private HTMLSpanElement _noItemsSpan;
    private HTMLSpanElement _searchSpan;
    private HTMLSpanElement _errorSpan;
    private ObservableList`1<Item> _selectedChildren;
    private IComponent _placeholder;
    private HTMLDivElement _spinner;
    private bool _isChanged;
    private bool _callSelectOnChangingItemSelections;
    private bool _fitContent;
    private Func`1<Task`1<Item[]>> _itemsSource;
    private ReadOnlyArray`1<Item> _lastRenderedItems;
    private HTMLDivElement _popupDiv;
    private string _search;
    private int _latestRequestID;
    private Func`2<Item[], IComponent> _customRenderer;
    unknown int TabIndex {public set; }
    public SelectMode Mode { get; public set; }
    public Item[] SelectedItems { get; }
    public string SelectedText { get; }
    public string Error { get; public set; }
    public bool HasBorder { get; public set; }
    public bool IsInvalid { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsRequired { get; public set; }
    public Dropdown(HTMLSpanElement noItemsSpan);
    public Dropdown SuppressSelectedOnChangingItemSelections();
    public Dropdown FitContent();
    public sealed virtual void set_TabIndex(int value);
    public SelectMode get_Mode();
    public void set_Mode(SelectMode value);
    public Item[] get_SelectedItems();
    public string get_SelectedText();
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public bool get_HasBorder();
    public void set_HasBorder(bool value);
    public sealed virtual bool get_IsInvalid();
    public sealed virtual void set_IsInvalid(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public virtual HTMLElement Render();
    public Dropdown Focus();
    [DebuggerStepThroughAttribute]
public Task LoadItemsAsync();
    public virtual Dropdown Show();
    private void RecomputePopupPosition();
    public virtual void Hide(Action onHidden);
    public sealed virtual void Attach(ComponentEventHandler`1<Dropdown> handler);
    public Dropdown Single();
    public Dropdown Multi();
    public Dropdown NoArrow();
    public Dropdown Items(Item[] children);
    public Dropdown Items(Func`1<Task`1<Item[]>> itemsSource);
    public Dropdown Disabled(bool value);
    public Dropdown NoBorder();
    public Dropdown NoBackground();
    public Dropdown Required();
    public Dropdown Placeholder(string text);
    public Dropdown Placeholder(IComponent placeholder);
    private void OnWindowClick(Event e);
    private void UpdateStateBasedUponCurrentSelections();
    private void OnItemSelected(Item sender);
    public Dropdown WithCustomSelectionRender(Func`2<Item[], IComponent> renderSelectedItems);
    private void RenderSelected();
    private void OnPopupKeyDown(Event e);
    public sealed virtual IObservable`1<IReadOnlyList`1<Item>> AsObservable();
    private void UpdateSearch(KeyboardEvent e);
    private void ResetSearchItems(IEnumerable`1<ValueTuple`2<HTMLElement, string>> itemsToReset);
    private void ClearSearch();
    private void EnsureAsyncLoadingStateEnabled();
    private void EnsureAsyncLoadingStateDisabled();
    private ValueTuple`2[] GetItems();
    private void SearchItems();
    private static void RecursiveHighlight(HTMLElement baseElement, Regex highlighter);
    private static void RecursiveUnhighlight(HTMLElement baseElement);
    private void <.ctor>b__19_0(MouseEvent e);
    private void <.ctor>b__19_1(MouseEvent e);
    private void <Render>b__46_0();
    private void <Render>b__46_1();
    private void <Focus>b__47_0();
    private Dropdown <Show>b__49_0(Task t);
    private void <Show>b__49_1();
    private void <Items>b__56_0(Item component);
}
[NameAttribute("tss.EditableArea")]
public class Tesserae.EditableArea : ComponentBase`2<EditableArea, HTMLTextAreaElement> {
    [DebuggerBrowsableAttribute]
private SaveEditHandler Saved;
    private HTMLDivElement _container;
    private HTMLSpanElement _labelText;
    private HTMLDivElement _editView;
    private HTMLDivElement _labelView;
    private SettableObservable`1<string> _observable;
    private HTMLElement _editIcon;
    private HTMLElement _cancelEditIcon;
    private bool _isCanceling;
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public bool IsEditingMode { get; public set; }
    public EditableArea(string text);
    private void add_Saved(SaveEditHandler value);
    private void remove_Saved(SaveEditHandler value);
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public bool get_IsEditingMode();
    public void set_IsEditingMode(bool value);
    public EditableArea OnSave(SaveEditHandler onSave);
    private void BeginEditing();
    private void CancelEditing();
    private void SaveEditing(object e);
    public EditableArea SetText(string text);
    public virtual HTMLElement Render();
    public sealed virtual IObservable`1<string> AsObservable();
    private void <.ctor>b__12_0(EditableArea _, KeyboardEvent e);
    private void <.ctor>b__12_1(EditableArea _, Event __);
}
[NameAttribute("tss.EditableLabel")]
public class Tesserae.EditableLabel : ComponentBase`2<EditableLabel, HTMLInputElement> {
    [DebuggerBrowsableAttribute]
private SaveEditHandler Saved;
    private HTMLDivElement _container;
    private HTMLSpanElement _labelText;
    private HTMLElement _editIcon;
    private HTMLElement _cancelEditIcon;
    private HTMLDivElement _editView;
    private HTMLDivElement _labelView;
    private SettableObservable`1<string> _observable;
    private bool _isCanceling;
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public bool IsEditingMode { get; public set; }
    public EditableLabel(string text);
    private void add_Saved(SaveEditHandler value);
    private void remove_Saved(SaveEditHandler value);
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public bool get_IsEditingMode();
    public void set_IsEditingMode(bool value);
    public EditableLabel OnSave(SaveEditHandler onSave);
    private void BeginEditing();
    private void CancelEditing();
    private void BeginSaveEditing();
    private void SaveEditing(object e);
    public EditableLabel SetText(string text);
    public virtual HTMLElement Render();
    public sealed virtual IObservable`1<string> AsObservable();
    private void <.ctor>b__12_0(EditableLabel _, KeyboardEvent e);
    private void <.ctor>b__12_1(EditableLabel _, Event __);
}
[EnumAttribute]
public enum Tesserae.Emoji : Enum {
    public int value__;
    [NameAttribute("ec-100")]
public static Emoji _100;
    [NameAttribute("ec-1234")]
public static Emoji _1234;
    [NameAttribute("ec-grinning")]
public static Emoji Grinning;
    [NameAttribute("ec-grimacing")]
public static Emoji Grimacing;
    [NameAttribute("ec-grin")]
public static Emoji Grin;
    [NameAttribute("ec-joy")]
public static Emoji Joy;
    [NameAttribute("ec-rofl")]
public static Emoji Rofl;
    [NameAttribute("ec-partying")]
public static Emoji Partying;
    [NameAttribute("ec-smiley")]
public static Emoji Smiley;
    [NameAttribute("ec-smile")]
public static Emoji Smile;
    [NameAttribute("ec-sweat-smile")]
public static Emoji SweatSmile;
    [NameAttribute("ec-laughing")]
public static Emoji Laughing;
    [NameAttribute("ec-innocent")]
public static Emoji Innocent;
    [NameAttribute("ec-wink")]
public static Emoji Wink;
    [NameAttribute("ec-blush")]
public static Emoji Blush;
    [NameAttribute("ec-slightly-smiling-face")]
public static Emoji SlightlySmilingFace;
    [NameAttribute("ec-upside-down-face")]
public static Emoji UpsideDownFace;
    [NameAttribute("ec-yum")]
public static Emoji Yum;
    [NameAttribute("ec-relieved")]
public static Emoji Relieved;
    [NameAttribute("ec-heart-eyes")]
public static Emoji HeartEyes;
    [NameAttribute("ec-smiling-face-with-three-hearts")]
public static Emoji SmilingFaceWithThreeHearts;
    [NameAttribute("ec-kissing-heart")]
public static Emoji KissingHeart;
    [NameAttribute("ec-kissing")]
public static Emoji Kissing;
    [NameAttribute("ec-kissing-smiling-eyes")]
public static Emoji KissingSmilingEyes;
    [NameAttribute("ec-kissing-closed-eyes")]
public static Emoji KissingClosedEyes;
    [NameAttribute("ec-stuck-out-tongue-winking-eye")]
public static Emoji StuckOutTongueWinkingEye;
    [NameAttribute("ec-zany")]
public static Emoji Zany;
    [NameAttribute("ec-raised-eyebrow")]
public static Emoji RaisedEyebrow;
    [NameAttribute("ec-monocle")]
public static Emoji Monocle;
    [NameAttribute("ec-stuck-out-tongue-closed-eyes")]
public static Emoji StuckOutTongueClosedEyes;
    [NameAttribute("ec-stuck-out-tongue")]
public static Emoji StuckOutTongue;
    [NameAttribute("ec-money-mouth-face")]
public static Emoji MoneyMouthFace;
    [NameAttribute("ec-nerd-face")]
public static Emoji NerdFace;
    [NameAttribute("ec-sunglasses")]
public static Emoji Sunglasses;
    [NameAttribute("ec-star-struck")]
public static Emoji StarStruck;
    [NameAttribute("ec-clown-face")]
public static Emoji ClownFace;
    [NameAttribute("ec-cowboy-hat-face")]
public static Emoji CowboyHatFace;
    [NameAttribute("ec-hugs")]
public static Emoji Hugs;
    [NameAttribute("ec-smirk")]
public static Emoji Smirk;
    [NameAttribute("ec-no-mouth")]
public static Emoji NoMouth;
    [NameAttribute("ec-neutral-face")]
public static Emoji NeutralFace;
    [NameAttribute("ec-expressionless")]
public static Emoji Expressionless;
    [NameAttribute("ec-unamused")]
public static Emoji Unamused;
    [NameAttribute("ec-roll-eyes")]
public static Emoji RollEyes;
    [NameAttribute("ec-thinking")]
public static Emoji Thinking;
    [NameAttribute("ec-lying-face")]
public static Emoji LyingFace;
    [NameAttribute("ec-hand-over-mouth")]
public static Emoji HandOverMouth;
    [NameAttribute("ec-shushing")]
public static Emoji Shushing;
    [NameAttribute("ec-symbols-over-mouth")]
public static Emoji SymbolsOverMouth;
    [NameAttribute("ec-exploding-head")]
public static Emoji ExplodingHead;
    [NameAttribute("ec-flushed")]
public static Emoji Flushed;
    [NameAttribute("ec-disappointed")]
public static Emoji Disappointed;
    [NameAttribute("ec-worried")]
public static Emoji Worried;
    [NameAttribute("ec-angry")]
public static Emoji Angry;
    [NameAttribute("ec-rage")]
public static Emoji Rage;
    [NameAttribute("ec-pensive")]
public static Emoji Pensive;
    [NameAttribute("ec-confused")]
public static Emoji Confused;
    [NameAttribute("ec-slightly-frowning-face")]
public static Emoji SlightlyFrowningFace;
    [NameAttribute("ec-frowning-face")]
public static Emoji FrowningFace;
    [NameAttribute("ec-persevere")]
public static Emoji Persevere;
    [NameAttribute("ec-confounded")]
public static Emoji Confounded;
    [NameAttribute("ec-tired-face")]
public static Emoji TiredFace;
    [NameAttribute("ec-weary")]
public static Emoji Weary;
    [NameAttribute("ec-pleading")]
public static Emoji Pleading;
    [NameAttribute("ec-triumph")]
public static Emoji Triumph;
    [NameAttribute("ec-open-mouth")]
public static Emoji OpenMouth;
    [NameAttribute("ec-scream")]
public static Emoji Scream;
    [NameAttribute("ec-fearful")]
public static Emoji Fearful;
    [NameAttribute("ec-cold-sweat")]
public static Emoji ColdSweat;
    [NameAttribute("ec-hushed")]
public static Emoji Hushed;
    [NameAttribute("ec-frowning")]
public static Emoji Frowning;
    [NameAttribute("ec-anguished")]
public static Emoji Anguished;
    [NameAttribute("ec-cry")]
public static Emoji Cry;
    [NameAttribute("ec-disappointed-relieved")]
public static Emoji DisappointedRelieved;
    [NameAttribute("ec-drooling-face")]
public static Emoji DroolingFace;
    [NameAttribute("ec-sleepy")]
public static Emoji Sleepy;
    [NameAttribute("ec-sweat")]
public static Emoji Sweat;
    [NameAttribute("ec-hot")]
public static Emoji Hot;
    [NameAttribute("ec-cold")]
public static Emoji Cold;
    [NameAttribute("ec-sob")]
public static Emoji Sob;
    [NameAttribute("ec-dizzy-face")]
public static Emoji DizzyFace;
    [NameAttribute("ec-astonished")]
public static Emoji Astonished;
    [NameAttribute("ec-zipper-mouth-face")]
public static Emoji ZipperMouthFace;
    [NameAttribute("ec-nauseated-face")]
public static Emoji NauseatedFace;
    [NameAttribute("ec-sneezing-face")]
public static Emoji SneezingFace;
    [NameAttribute("ec-vomiting")]
public static Emoji Vomiting;
    [NameAttribute("ec-mask")]
public static Emoji Mask;
    [NameAttribute("ec-face-with-thermometer")]
public static Emoji FaceWithThermometer;
    [NameAttribute("ec-face-with-head-bandage")]
public static Emoji FaceWithHeadBandage;
    [NameAttribute("ec-woozy")]
public static Emoji Woozy;
    [NameAttribute("ec-sleeping")]
public static Emoji Sleeping;
    [NameAttribute("ec-zzz")]
public static Emoji Zzz;
    [NameAttribute("ec-poop")]
public static Emoji Poop;
    [NameAttribute("ec-smiling-imp")]
public static Emoji SmilingImp;
    [NameAttribute("ec-imp")]
public static Emoji Imp;
    [NameAttribute("ec-japanese-ogre")]
public static Emoji JapaneseOgre;
    [NameAttribute("ec-japanese-goblin")]
public static Emoji JapaneseGoblin;
    [NameAttribute("ec-skull")]
public static Emoji Skull;
    [NameAttribute("ec-ghost")]
public static Emoji Ghost;
    [NameAttribute("ec-alien")]
public static Emoji Alien;
    [NameAttribute("ec-robot")]
public static Emoji Robot;
    [NameAttribute("ec-smiley-cat")]
public static Emoji SmileyCat;
    [NameAttribute("ec-smile-cat")]
public static Emoji SmileCat;
    [NameAttribute("ec-joy-cat")]
public static Emoji JoyCat;
    [NameAttribute("ec-heart-eyes-cat")]
public static Emoji HeartEyesCat;
    [NameAttribute("ec-smirk-cat")]
public static Emoji SmirkCat;
    [NameAttribute("ec-kissing-cat")]
public static Emoji KissingCat;
    [NameAttribute("ec-scream-cat")]
public static Emoji ScreamCat;
    [NameAttribute("ec-crying-cat-face")]
public static Emoji CryingCatFace;
    [NameAttribute("ec-pouting-cat")]
public static Emoji PoutingCat;
    [NameAttribute("ec-palms-up")]
public static Emoji PalmsUp;
    [NameAttribute("ec-raised-hands")]
public static Emoji RaisedHands;
    [NameAttribute("ec-clap")]
public static Emoji Clap;
    [NameAttribute("ec-wave")]
public static Emoji Wave;
    [NameAttribute("ec-call-me-hand")]
public static Emoji CallMeHand;
    [NameAttribute("ec-plus1")]
public static Emoji Plus1;
    [NameAttribute("ec--1")]
public static Emoji Minus1;
    [NameAttribute("ec-facepunch")]
public static Emoji Facepunch;
    [NameAttribute("ec-fist")]
public static Emoji Fist;
    [NameAttribute("ec-fist-left")]
public static Emoji FistLeft;
    [NameAttribute("ec-fist-right")]
public static Emoji FistRight;
    [NameAttribute("ec-v")]
public static Emoji V;
    [NameAttribute("ec-ok-hand")]
public static Emoji OkHand;
    [NameAttribute("ec-raised-hand")]
public static Emoji RaisedHand;
    [NameAttribute("ec-raised-back-of-hand")]
public static Emoji RaisedBackOfHand;
    [NameAttribute("ec-open-hands")]
public static Emoji OpenHands;
    [NameAttribute("ec-muscle")]
public static Emoji Muscle;
    [NameAttribute("ec-pray")]
public static Emoji Pray;
    [NameAttribute("ec-foot")]
public static Emoji Foot;
    [NameAttribute("ec-leg")]
public static Emoji Leg;
    [NameAttribute("ec-handshake")]
public static Emoji Handshake;
    [NameAttribute("ec-point-up")]
public static Emoji PointUp;
    [NameAttribute("ec-point-up-2")]
public static Emoji PointUpMinus2;
    [NameAttribute("ec-point-down")]
public static Emoji PointDown;
    [NameAttribute("ec-point-left")]
public static Emoji PointLeft;
    [NameAttribute("ec-point-right")]
public static Emoji PointRight;
    [NameAttribute("ec-fu")]
public static Emoji Fu;
    [NameAttribute("ec-raised-hand-with-fingers-splayed")]
public static Emoji RaisedHandWithFingersSplayed;
    [NameAttribute("ec-love-you")]
public static Emoji LoveYou;
    [NameAttribute("ec-metal")]
public static Emoji Metal;
    [NameAttribute("ec-crossed-fingers")]
public static Emoji CrossedFingers;
    [NameAttribute("ec-vulcan-salute")]
public static Emoji VulcanSalute;
    [NameAttribute("ec-writing-hand")]
public static Emoji WritingHand;
    [NameAttribute("ec-selfie")]
public static Emoji Selfie;
    [NameAttribute("ec-nail-care")]
public static Emoji NailCare;
    [NameAttribute("ec-lips")]
public static Emoji Lips;
    [NameAttribute("ec-tooth")]
public static Emoji Tooth;
    [NameAttribute("ec-tongue")]
public static Emoji Tongue;
    [NameAttribute("ec-ear")]
public static Emoji Ear;
    [NameAttribute("ec-nose")]
public static Emoji Nose;
    [NameAttribute("ec-eye")]
public static Emoji Eye;
    [NameAttribute("ec-eyes")]
public static Emoji Eyes;
    [NameAttribute("ec-brain")]
public static Emoji Brain;
    [NameAttribute("ec-bust-in-silhouette")]
public static Emoji BustInSilhouette;
    [NameAttribute("ec-busts-in-silhouette")]
public static Emoji BustsInSilhouette;
    [NameAttribute("ec-speaking-head")]
public static Emoji SpeakingHead;
    [NameAttribute("ec-baby")]
public static Emoji Baby;
    [NameAttribute("ec-child")]
public static Emoji Child;
    [NameAttribute("ec-boy")]
public static Emoji Boy;
    [NameAttribute("ec-girl")]
public static Emoji Girl;
    [NameAttribute("ec-adult")]
public static Emoji Adult;
    [NameAttribute("ec-man")]
public static Emoji Man;
    [NameAttribute("ec-woman")]
public static Emoji Woman;
    [NameAttribute("ec-blonde-man")]
public static Emoji BlondeMan;
    [NameAttribute("ec-bearded-person")]
public static Emoji BeardedPerson;
    [NameAttribute("ec-older-adult")]
public static Emoji OlderAdult;
    [NameAttribute("ec-older-man")]
public static Emoji OlderMan;
    [NameAttribute("ec-older-woman")]
public static Emoji OlderWoman;
    [NameAttribute("ec-man-with-gua-pi-mao")]
public static Emoji ManWithGuaPiMao;
    [NameAttribute("ec-woman-with-headscarf")]
public static Emoji WomanWithHeadscarf;
    [NameAttribute("ec-man-with-turban")]
public static Emoji ManWithTurban;
    [NameAttribute("ec-policeman")]
public static Emoji Policeman;
    [NameAttribute("ec-construction-worker-man")]
public static Emoji ConstructionWorkerMan;
    [NameAttribute("ec-guardsman")]
public static Emoji Guardsman;
    [NameAttribute("ec-male-detective")]
public static Emoji MaleDetective;
    [NameAttribute("ec-mrs-claus")]
public static Emoji MrsClaus;
    [NameAttribute("ec-santa")]
public static Emoji Santa;
    [NameAttribute("ec-angel")]
public static Emoji Angel;
    [NameAttribute("ec-pregnant-woman")]
public static Emoji PregnantWoman;
    [NameAttribute("ec-breastfeeding")]
public static Emoji Breastfeeding;
    [NameAttribute("ec-princess")]
public static Emoji Princess;
    [NameAttribute("ec-prince")]
public static Emoji Prince;
    [NameAttribute("ec-bride-with-veil")]
public static Emoji BrideWithVeil;
    [NameAttribute("ec-man-in-tuxedo")]
public static Emoji ManInTuxedo;
    [NameAttribute("ec-running-man")]
public static Emoji RunningMan;
    [NameAttribute("ec-walking-man")]
public static Emoji WalkingMan;
    [NameAttribute("ec-dancer")]
public static Emoji Dancer;
    [NameAttribute("ec-man-dancing")]
public static Emoji ManDancing;
    [NameAttribute("ec-dancing-women")]
public static Emoji DancingWomen;
    [NameAttribute("ec-couple")]
public static Emoji Couple;
    [NameAttribute("ec-two-men-holding-hands")]
public static Emoji TwoMenHoldingHands;
    [NameAttribute("ec-two-women-holding-hands")]
public static Emoji TwoWomenHoldingHands;
    [NameAttribute("ec-bowing-man")]
public static Emoji BowingMan;
    [NameAttribute("ec-woman-shrugging")]
public static Emoji WomanShrugging;
    [NameAttribute("ec-tipping-hand-woman")]
public static Emoji TippingHandWoman;
    [NameAttribute("ec-no-good-woman")]
public static Emoji NoGoodWoman;
    [NameAttribute("ec-ok-woman")]
public static Emoji OkWoman;
    [NameAttribute("ec-raising-hand-woman")]
public static Emoji RaisingHandWoman;
    [NameAttribute("ec-pouting-woman")]
public static Emoji PoutingWoman;
    [NameAttribute("ec-frowning-woman")]
public static Emoji FrowningWoman;
    [NameAttribute("ec-haircut-woman")]
public static Emoji HaircutWoman;
    [NameAttribute("ec-massage-woman")]
public static Emoji MassageWoman;
    [NameAttribute("ec-couple-with-heart-woman-man")]
public static Emoji CoupleWithHeartWomanMan;
    [NameAttribute("ec-couplekiss-man-woman")]
public static Emoji CouplekissManWoman;
    [NameAttribute("ec-family-man-woman-boy")]
public static Emoji FamilyManWomanBoy;
    [NameAttribute("ec-yarn")]
public static Emoji Yarn;
    [NameAttribute("ec-thread")]
public static Emoji Thread;
    [NameAttribute("ec-coat")]
public static Emoji Coat;
    [NameAttribute("ec-labcoat")]
public static Emoji Labcoat;
    [NameAttribute("ec-womans-clothes")]
public static Emoji WomansClothes;
    [NameAttribute("ec-tshirt")]
public static Emoji Tshirt;
    [NameAttribute("ec-jeans")]
public static Emoji Jeans;
    [NameAttribute("ec-necktie")]
public static Emoji Necktie;
    [NameAttribute("ec-dress")]
public static Emoji Dress;
    [NameAttribute("ec-bikini")]
public static Emoji Bikini;
    [NameAttribute("ec-kimono")]
public static Emoji Kimono;
    [NameAttribute("ec-lipstick")]
public static Emoji Lipstick;
    [NameAttribute("ec-kiss")]
public static Emoji Kiss;
    [NameAttribute("ec-footprints")]
public static Emoji Footprints;
    [NameAttribute("ec-flat-shoe")]
public static Emoji FlatShoe;
    [NameAttribute("ec-high-heel")]
public static Emoji HighHeel;
    [NameAttribute("ec-sandal")]
public static Emoji Sandal;
    [NameAttribute("ec-boot")]
public static Emoji Boot;
    [NameAttribute("ec-mans-shoe")]
public static Emoji MansShoe;
    [NameAttribute("ec-athletic-shoe")]
public static Emoji AthleticShoe;
    [NameAttribute("ec-hiking-boot")]
public static Emoji HikingBoot;
    [NameAttribute("ec-socks")]
public static Emoji Socks;
    [NameAttribute("ec-gloves")]
public static Emoji Gloves;
    [NameAttribute("ec-scarf")]
public static Emoji Scarf;
    [NameAttribute("ec-womans-hat")]
public static Emoji WomansHat;
    [NameAttribute("ec-tophat")]
public static Emoji Tophat;
    [NameAttribute("ec-billed-hat")]
public static Emoji BilledHat;
    [NameAttribute("ec-rescue-worker-helmet")]
public static Emoji RescueWorkerHelmet;
    [NameAttribute("ec-mortar-board")]
public static Emoji MortarBoard;
    [NameAttribute("ec-crown")]
public static Emoji Crown;
    [NameAttribute("ec-school-satchel")]
public static Emoji SchoolSatchel;
    [NameAttribute("ec-luggage")]
public static Emoji Luggage;
    [NameAttribute("ec-pouch")]
public static Emoji Pouch;
    [NameAttribute("ec-purse")]
public static Emoji Purse;
    [NameAttribute("ec-handbag")]
public static Emoji Handbag;
    [NameAttribute("ec-briefcase")]
public static Emoji Briefcase;
    [NameAttribute("ec-eyeglasses")]
public static Emoji Eyeglasses;
    [NameAttribute("ec-dark-sunglasses")]
public static Emoji DarkSunglasses;
    [NameAttribute("ec-goggles")]
public static Emoji Goggles;
    [NameAttribute("ec-ring")]
public static Emoji Ring;
    [NameAttribute("ec-closed-umbrella")]
public static Emoji ClosedUmbrella;
    [NameAttribute("ec-dog")]
public static Emoji Dog;
    [NameAttribute("ec-cat")]
public static Emoji Cat;
    [NameAttribute("ec-mouse")]
public static Emoji Mouse;
    [NameAttribute("ec-hamster")]
public static Emoji Hamster;
    [NameAttribute("ec-rabbit")]
public static Emoji Rabbit;
    [NameAttribute("ec-fox-face")]
public static Emoji FoxFace;
    [NameAttribute("ec-bear")]
public static Emoji Bear;
    [NameAttribute("ec-panda-face")]
public static Emoji PandaFace;
    [NameAttribute("ec-koala")]
public static Emoji Koala;
    [NameAttribute("ec-tiger")]
public static Emoji Tiger;
    [NameAttribute("ec-lion")]
public static Emoji Lion;
    [NameAttribute("ec-cow")]
public static Emoji Cow;
    [NameAttribute("ec-pig")]
public static Emoji Pig;
    [NameAttribute("ec-pig-nose")]
public static Emoji PigNose;
    [NameAttribute("ec-frog")]
public static Emoji Frog;
    [NameAttribute("ec-squid")]
public static Emoji Squid;
    [NameAttribute("ec-octopus")]
public static Emoji Octopus;
    [NameAttribute("ec-shrimp")]
public static Emoji Shrimp;
    [NameAttribute("ec-monkey-face")]
public static Emoji MonkeyFace;
    [NameAttribute("ec-gorilla")]
public static Emoji Gorilla;
    [NameAttribute("ec-see-no-evil")]
public static Emoji SeeNoEvil;
    [NameAttribute("ec-hear-no-evil")]
public static Emoji HearNoEvil;
    [NameAttribute("ec-speak-no-evil")]
public static Emoji SpeakNoEvil;
    [NameAttribute("ec-monkey")]
public static Emoji Monkey;
    [NameAttribute("ec-chicken")]
public static Emoji Chicken;
    [NameAttribute("ec-penguin")]
public static Emoji Penguin;
    [NameAttribute("ec-bird")]
public static Emoji Bird;
    [NameAttribute("ec-baby-chick")]
public static Emoji BabyChick;
    [NameAttribute("ec-hatching-chick")]
public static Emoji HatchingChick;
    [NameAttribute("ec-hatched-chick")]
public static Emoji HatchedChick;
    [NameAttribute("ec-duck")]
public static Emoji Duck;
    [NameAttribute("ec-eagle")]
public static Emoji Eagle;
    [NameAttribute("ec-owl")]
public static Emoji Owl;
    [NameAttribute("ec-bat")]
public static Emoji Bat;
    [NameAttribute("ec-wolf")]
public static Emoji Wolf;
    [NameAttribute("ec-boar")]
public static Emoji Boar;
    [NameAttribute("ec-horse")]
public static Emoji Horse;
    [NameAttribute("ec-unicorn")]
public static Emoji Unicorn;
    [NameAttribute("ec-honeybee")]
public static Emoji Honeybee;
    [NameAttribute("ec-bug")]
public static Emoji Bug;
    [NameAttribute("ec-butterfly")]
public static Emoji Butterfly;
    [NameAttribute("ec-snail")]
public static Emoji Snail;
    [NameAttribute("ec-beetle")]
public static Emoji Beetle;
    [NameAttribute("ec-ant")]
public static Emoji Ant;
    [NameAttribute("ec-grasshopper")]
public static Emoji Grasshopper;
    [NameAttribute("ec-spider")]
public static Emoji Spider;
    [NameAttribute("ec-scorpion")]
public static Emoji Scorpion;
    [NameAttribute("ec-crab")]
public static Emoji Crab;
    [NameAttribute("ec-snake")]
public static Emoji Snake;
    [NameAttribute("ec-lizard")]
public static Emoji Lizard;
    [NameAttribute("ec-t-rex")]
public static Emoji TRex;
    [NameAttribute("ec-sauropod")]
public static Emoji Sauropod;
    [NameAttribute("ec-turtle")]
public static Emoji Turtle;
    [NameAttribute("ec-tropical-fish")]
public static Emoji TropicalFish;
    [NameAttribute("ec-fish")]
public static Emoji Fish;
    [NameAttribute("ec-blowfish")]
public static Emoji Blowfish;
    [NameAttribute("ec-dolphin")]
public static Emoji Dolphin;
    [NameAttribute("ec-shark")]
public static Emoji Shark;
    [NameAttribute("ec-whale")]
public static Emoji Whale;
    [NameAttribute("ec-whale2")]
public static Emoji Whale2;
    [NameAttribute("ec-crocodile")]
public static Emoji Crocodile;
    [NameAttribute("ec-leopard")]
public static Emoji Leopard;
    [NameAttribute("ec-zebra")]
public static Emoji Zebra;
    [NameAttribute("ec-tiger2")]
public static Emoji Tiger2;
    [NameAttribute("ec-water-buffalo")]
public static Emoji WaterBuffalo;
    [NameAttribute("ec-ox")]
public static Emoji Ox;
    [NameAttribute("ec-cow2")]
public static Emoji Cow2;
    [NameAttribute("ec-deer")]
public static Emoji Deer;
    [NameAttribute("ec-dromedary-camel")]
public static Emoji DromedaryCamel;
    [NameAttribute("ec-camel")]
public static Emoji Camel;
    [NameAttribute("ec-giraffe")]
public static Emoji Giraffe;
    [NameAttribute("ec-elephant")]
public static Emoji Elephant;
    [NameAttribute("ec-rhinoceros")]
public static Emoji Rhinoceros;
    [NameAttribute("ec-goat")]
public static Emoji Goat;
    [NameAttribute("ec-ram")]
public static Emoji Ram;
    [NameAttribute("ec-sheep")]
public static Emoji Sheep;
    [NameAttribute("ec-racehorse")]
public static Emoji Racehorse;
    [NameAttribute("ec-pig2")]
public static Emoji Pig2;
    [NameAttribute("ec-rat")]
public static Emoji Rat;
    [NameAttribute("ec-mouse2")]
public static Emoji Mouse2;
    [NameAttribute("ec-rooster")]
public static Emoji Rooster;
    [NameAttribute("ec-turkey")]
public static Emoji Turkey;
    [NameAttribute("ec-dove")]
public static Emoji Dove;
    [NameAttribute("ec-dog2")]
public static Emoji Dog2;
    [NameAttribute("ec-poodle")]
public static Emoji Poodle;
    [NameAttribute("ec-cat2")]
public static Emoji Cat2;
    [NameAttribute("ec-rabbit2")]
public static Emoji Rabbit2;
    [NameAttribute("ec-chipmunk")]
public static Emoji Chipmunk;
    [NameAttribute("ec-hedgehog")]
public static Emoji Hedgehog;
    [NameAttribute("ec-raccoon")]
public static Emoji Raccoon;
    [NameAttribute("ec-llama")]
public static Emoji Llama;
    [NameAttribute("ec-hippopotamus")]
public static Emoji Hippopotamus;
    [NameAttribute("ec-kangaroo")]
public static Emoji Kangaroo;
    [NameAttribute("ec-badger")]
public static Emoji Badger;
    [NameAttribute("ec-swan")]
public static Emoji Swan;
    [NameAttribute("ec-peacock")]
public static Emoji Peacock;
    [NameAttribute("ec-parrot")]
public static Emoji Parrot;
    [NameAttribute("ec-lobster")]
public static Emoji Lobster;
    [NameAttribute("ec-mosquito")]
public static Emoji Mosquito;
    [NameAttribute("ec-paw-prints")]
public static Emoji PawPrints;
    [NameAttribute("ec-dragon")]
public static Emoji Dragon;
    [NameAttribute("ec-dragon-face")]
public static Emoji DragonFace;
    [NameAttribute("ec-cactus")]
public static Emoji Cactus;
    [NameAttribute("ec-christmas-tree")]
public static Emoji ChristmasTree;
    [NameAttribute("ec-evergreen-tree")]
public static Emoji EvergreenTree;
    [NameAttribute("ec-deciduous-tree")]
public static Emoji DeciduousTree;
    [NameAttribute("ec-palm-tree")]
public static Emoji PalmTree;
    [NameAttribute("ec-seedling")]
public static Emoji Seedling;
    [NameAttribute("ec-herb")]
public static Emoji Herb;
    [NameAttribute("ec-shamrock")]
public static Emoji Shamrock;
    [NameAttribute("ec-four-leaf-clover")]
public static Emoji FourLeafClover;
    [NameAttribute("ec-bamboo")]
public static Emoji Bamboo;
    [NameAttribute("ec-tanabata-tree")]
public static Emoji TanabataTree;
    [NameAttribute("ec-leaves")]
public static Emoji Leaves;
    [NameAttribute("ec-fallen-leaf")]
public static Emoji FallenLeaf;
    [NameAttribute("ec-maple-leaf")]
public static Emoji MapleLeaf;
    [NameAttribute("ec-ear-of-rice")]
public static Emoji EarOfRice;
    [NameAttribute("ec-hibiscus")]
public static Emoji Hibiscus;
    [NameAttribute("ec-sunflower")]
public static Emoji Sunflower;
    [NameAttribute("ec-rose")]
public static Emoji Rose;
    [NameAttribute("ec-wilted-flower")]
public static Emoji WiltedFlower;
    [NameAttribute("ec-tulip")]
public static Emoji Tulip;
    [NameAttribute("ec-blossom")]
public static Emoji Blossom;
    [NameAttribute("ec-cherry-blossom")]
public static Emoji CherryBlossom;
    [NameAttribute("ec-bouquet")]
public static Emoji Bouquet;
    [NameAttribute("ec-mushroom")]
public static Emoji Mushroom;
    [NameAttribute("ec-chestnut")]
public static Emoji Chestnut;
    [NameAttribute("ec-jack-o-lantern")]
public static Emoji JackOLantern;
    [NameAttribute("ec-shell")]
public static Emoji Shell;
    [NameAttribute("ec-spider-web")]
public static Emoji SpiderWeb;
    [NameAttribute("ec-earth-americas")]
public static Emoji EarthAmericas;
    [NameAttribute("ec-earth-africa")]
public static Emoji EarthAfrica;
    [NameAttribute("ec-earth-asia")]
public static Emoji EarthAsia;
    [NameAttribute("ec-full-moon")]
public static Emoji FullMoon;
    [NameAttribute("ec-waning-gibbous-moon")]
public static Emoji WaningGibbousMoon;
    [NameAttribute("ec-last-quarter-moon")]
public static Emoji LastQuarterMoon;
    [NameAttribute("ec-waning-crescent-moon")]
public static Emoji WaningCrescentMoon;
    [NameAttribute("ec-new-moon")]
public static Emoji NewMoon;
    [NameAttribute("ec-waxing-crescent-moon")]
public static Emoji WaxingCrescentMoon;
    [NameAttribute("ec-first-quarter-moon")]
public static Emoji FirstQuarterMoon;
    [NameAttribute("ec-waxing-gibbous-moon")]
public static Emoji WaxingGibbousMoon;
    [NameAttribute("ec-new-moon-with-face")]
public static Emoji NewMoonWithFace;
    [NameAttribute("ec-full-moon-with-face")]
public static Emoji FullMoonWithFace;
    [NameAttribute("ec-first-quarter-moon-with-face")]
public static Emoji FirstQuarterMoonWithFace;
    [NameAttribute("ec-last-quarter-moon-with-face")]
public static Emoji LastQuarterMoonWithFace;
    [NameAttribute("ec-sun-with-face")]
public static Emoji SunWithFace;
    [NameAttribute("ec-crescent-moon")]
public static Emoji CrescentMoon;
    [NameAttribute("ec-star")]
public static Emoji Star;
    [NameAttribute("ec-star2")]
public static Emoji Star2;
    [NameAttribute("ec-dizzy")]
public static Emoji Dizzy;
    [NameAttribute("ec-sparkles")]
public static Emoji Sparkles;
    [NameAttribute("ec-comet")]
public static Emoji Comet;
    [NameAttribute("ec-sun-behind-small-cloud")]
public static Emoji SunBehindSmallCloud;
    [NameAttribute("ec-partly-sunny")]
public static Emoji PartlySunny;
    [NameAttribute("ec-sun-behind-large-cloud")]
public static Emoji SunBehindLargeCloud;
    [NameAttribute("ec-sun-behind-rain-cloud")]
public static Emoji SunBehindRainCloud;
    [NameAttribute("ec-cloud-with-rain")]
public static Emoji CloudWithRain;
    [NameAttribute("ec-cloud-with-lightning-and-rain")]
public static Emoji CloudWithLightningAndRain;
    [NameAttribute("ec-cloud-with-lightning")]
public static Emoji CloudWithLightning;
    [NameAttribute("ec-zap")]
public static Emoji Zap;
    [NameAttribute("ec-fire")]
public static Emoji Fire;
    [NameAttribute("ec-boom")]
public static Emoji Boom;
    [NameAttribute("ec-cloud-with-snow")]
public static Emoji CloudWithSnow;
    [NameAttribute("ec-snowman")]
public static Emoji Snowman;
    [NameAttribute("ec-snowman-with-snow")]
public static Emoji SnowmanWithSnow;
    [NameAttribute("ec-wind-face")]
public static Emoji WindFace;
    [NameAttribute("ec-dash")]
public static Emoji Dash;
    [NameAttribute("ec-tornado")]
public static Emoji Tornado;
    [NameAttribute("ec-fog")]
public static Emoji Fog;
    [NameAttribute("ec-open-umbrella")]
public static Emoji OpenUmbrella;
    [NameAttribute("ec-umbrella")]
public static Emoji Umbrella;
    [NameAttribute("ec-droplet")]
public static Emoji Droplet;
    [NameAttribute("ec-sweat-drops")]
public static Emoji SweatDrops;
    [NameAttribute("ec-ocean")]
public static Emoji Ocean;
    [NameAttribute("ec-green-apple")]
public static Emoji GreenApple;
    [NameAttribute("ec-apple")]
public static Emoji Apple;
    [NameAttribute("ec-pear")]
public static Emoji Pear;
    [NameAttribute("ec-tangerine")]
public static Emoji Tangerine;
    [NameAttribute("ec-lemon")]
public static Emoji Lemon;
    [NameAttribute("ec-banana")]
public static Emoji Banana;
    [NameAttribute("ec-watermelon")]
public static Emoji Watermelon;
    [NameAttribute("ec-grapes")]
public static Emoji Grapes;
    [NameAttribute("ec-strawberry")]
public static Emoji Strawberry;
    [NameAttribute("ec-melon")]
public static Emoji Melon;
    [NameAttribute("ec-cherries")]
public static Emoji Cherries;
    [NameAttribute("ec-peach")]
public static Emoji Peach;
    [NameAttribute("ec-pineapple")]
public static Emoji Pineapple;
    [NameAttribute("ec-coconut")]
public static Emoji Coconut;
    [NameAttribute("ec-kiwi-fruit")]
public static Emoji KiwiFruit;
    [NameAttribute("ec-mango")]
public static Emoji Mango;
    [NameAttribute("ec-avocado")]
public static Emoji Avocado;
    [NameAttribute("ec-broccoli")]
public static Emoji Broccoli;
    [NameAttribute("ec-tomato")]
public static Emoji Tomato;
    [NameAttribute("ec-eggplant")]
public static Emoji Eggplant;
    [NameAttribute("ec-cucumber")]
public static Emoji Cucumber;
    [NameAttribute("ec-carrot")]
public static Emoji Carrot;
    [NameAttribute("ec-hot-pepper")]
public static Emoji HotPepper;
    [NameAttribute("ec-potato")]
public static Emoji Potato;
    [NameAttribute("ec-corn")]
public static Emoji Corn;
    [NameAttribute("ec-leafy-greens")]
public static Emoji LeafyGreens;
    [NameAttribute("ec-sweet-potato")]
public static Emoji SweetPotato;
    [NameAttribute("ec-peanuts")]
public static Emoji Peanuts;
    [NameAttribute("ec-honey-pot")]
public static Emoji HoneyPot;
    [NameAttribute("ec-croissant")]
public static Emoji Croissant;
    [NameAttribute("ec-bread")]
public static Emoji Bread;
    [NameAttribute("ec-baguette-bread")]
public static Emoji BaguetteBread;
    [NameAttribute("ec-bagel")]
public static Emoji Bagel;
    [NameAttribute("ec-pretzel")]
public static Emoji Pretzel;
    [NameAttribute("ec-cheese")]
public static Emoji Cheese;
    [NameAttribute("ec-egg")]
public static Emoji Egg;
    [NameAttribute("ec-bacon")]
public static Emoji Bacon;
    [NameAttribute("ec-steak")]
public static Emoji Steak;
    [NameAttribute("ec-pancakes")]
public static Emoji Pancakes;
    [NameAttribute("ec-poultry-leg")]
public static Emoji PoultryLeg;
    [NameAttribute("ec-meat-on-bone")]
public static Emoji MeatOnBone;
    [NameAttribute("ec-bone")]
public static Emoji Bone;
    [NameAttribute("ec-fried-shrimp")]
public static Emoji FriedShrimp;
    [NameAttribute("ec-fried-egg")]
public static Emoji FriedEgg;
    [NameAttribute("ec-hamburger")]
public static Emoji Hamburger;
    [NameAttribute("ec-fries")]
public static Emoji Fries;
    [NameAttribute("ec-stuffed-flatbread")]
public static Emoji StuffedFlatbread;
    [NameAttribute("ec-hotdog")]
public static Emoji Hotdog;
    [NameAttribute("ec-pizza")]
public static Emoji Pizza;
    [NameAttribute("ec-sandwich")]
public static Emoji Sandwich;
    [NameAttribute("ec-canned-food")]
public static Emoji CannedFood;
    [NameAttribute("ec-spaghetti")]
public static Emoji Spaghetti;
    [NameAttribute("ec-taco")]
public static Emoji Taco;
    [NameAttribute("ec-burrito")]
public static Emoji Burrito;
    [NameAttribute("ec-green-salad")]
public static Emoji GreenSalad;
    [NameAttribute("ec-shallow-pan-of-food")]
public static Emoji ShallowPanOfFood;
    [NameAttribute("ec-ramen")]
public static Emoji Ramen;
    [NameAttribute("ec-stew")]
public static Emoji Stew;
    [NameAttribute("ec-fish-cake")]
public static Emoji FishCake;
    [NameAttribute("ec-fortune-cookie")]
public static Emoji FortuneCookie;
    [NameAttribute("ec-sushi")]
public static Emoji Sushi;
    [NameAttribute("ec-bento")]
public static Emoji Bento;
    [NameAttribute("ec-curry")]
public static Emoji Curry;
    [NameAttribute("ec-rice-ball")]
public static Emoji RiceBall;
    [NameAttribute("ec-rice")]
public static Emoji Rice;
    [NameAttribute("ec-rice-cracker")]
public static Emoji RiceCracker;
    [NameAttribute("ec-oden")]
public static Emoji Oden;
    [NameAttribute("ec-dango")]
public static Emoji Dango;
    [NameAttribute("ec-shaved-ice")]
public static Emoji ShavedIce;
    [NameAttribute("ec-ice-cream")]
public static Emoji IceCream;
    [NameAttribute("ec-icecream")]
public static Emoji Icecream;
    [NameAttribute("ec-pie")]
public static Emoji Pie;
    [NameAttribute("ec-cake")]
public static Emoji Cake;
    [NameAttribute("ec-cupcake")]
public static Emoji Cupcake;
    [NameAttribute("ec-moon-cake")]
public static Emoji MoonCake;
    [NameAttribute("ec-birthday")]
public static Emoji Birthday;
    [NameAttribute("ec-custard")]
public static Emoji Custard;
    [NameAttribute("ec-candy")]
public static Emoji Candy;
    [NameAttribute("ec-lollipop")]
public static Emoji Lollipop;
    [NameAttribute("ec-chocolate-bar")]
public static Emoji ChocolateBar;
    [NameAttribute("ec-popcorn")]
public static Emoji Popcorn;
    [NameAttribute("ec-dumpling")]
public static Emoji Dumpling;
    [NameAttribute("ec-doughnut")]
public static Emoji Doughnut;
    [NameAttribute("ec-cookie")]
public static Emoji Cookie;
    [NameAttribute("ec-milk-glass")]
public static Emoji MilkGlass;
    [NameAttribute("ec-beer")]
public static Emoji Beer;
    [NameAttribute("ec-beers")]
public static Emoji Beers;
    [NameAttribute("ec-clinking-glasses")]
public static Emoji ClinkingGlasses;
    [NameAttribute("ec-wine-glass")]
public static Emoji WineGlass;
    [NameAttribute("ec-tumbler-glass")]
public static Emoji TumblerGlass;
    [NameAttribute("ec-cocktail")]
public static Emoji Cocktail;
    [NameAttribute("ec-tropical-drink")]
public static Emoji TropicalDrink;
    [NameAttribute("ec-champagne")]
public static Emoji Champagne;
    [NameAttribute("ec-sake")]
public static Emoji Sake;
    [NameAttribute("ec-tea")]
public static Emoji Tea;
    [NameAttribute("ec-cup-with-straw")]
public static Emoji CupWithStraw;
    [NameAttribute("ec-coffee")]
public static Emoji Coffee;
    [NameAttribute("ec-baby-bottle")]
public static Emoji BabyBottle;
    [NameAttribute("ec-salt")]
public static Emoji Salt;
    [NameAttribute("ec-spoon")]
public static Emoji Spoon;
    [NameAttribute("ec-fork-and-knife")]
public static Emoji ForkAndKnife;
    [NameAttribute("ec-plate-with-cutlery")]
public static Emoji PlateWithCutlery;
    [NameAttribute("ec-bowl-with-spoon")]
public static Emoji BowlWithSpoon;
    [NameAttribute("ec-takeout-box")]
public static Emoji TakeoutBox;
    [NameAttribute("ec-chopsticks")]
public static Emoji Chopsticks;
    [NameAttribute("ec-soccer")]
public static Emoji Soccer;
    [NameAttribute("ec-basketball")]
public static Emoji Basketball;
    [NameAttribute("ec-football")]
public static Emoji Football;
    [NameAttribute("ec-baseball")]
public static Emoji Baseball;
    [NameAttribute("ec-softball")]
public static Emoji Softball;
    [NameAttribute("ec-tennis")]
public static Emoji Tennis;
    [NameAttribute("ec-volleyball")]
public static Emoji Volleyball;
    [NameAttribute("ec-rugby-football")]
public static Emoji RugbyFootball;
    [NameAttribute("ec-flying-disc")]
public static Emoji FlyingDisc;
    [NameAttribute("ec-8ball")]
public static Emoji EightBall;
    [NameAttribute("ec-golf")]
public static Emoji Golf;
    [NameAttribute("ec-golfing-man")]
public static Emoji GolfingMan;
    [NameAttribute("ec-ping-pong")]
public static Emoji PingPong;
    [NameAttribute("ec-badminton")]
public static Emoji Badminton;
    [NameAttribute("ec-goal-net")]
public static Emoji GoalNet;
    [NameAttribute("ec-ice-hockey")]
public static Emoji IceHockey;
    [NameAttribute("ec-field-hockey")]
public static Emoji FieldHockey;
    [NameAttribute("ec-lacrosse")]
public static Emoji Lacrosse;
    [NameAttribute("ec-cricket")]
public static Emoji Cricket;
    [NameAttribute("ec-ski")]
public static Emoji Ski;
    [NameAttribute("ec-skier")]
public static Emoji Skier;
    [NameAttribute("ec-snowboarder")]
public static Emoji Snowboarder;
    [NameAttribute("ec-person-fencing")]
public static Emoji PersonFencing;
    [NameAttribute("ec-ice-skate")]
public static Emoji IceSkate;
    [NameAttribute("ec-curling-stone")]
public static Emoji CurlingStone;
    [NameAttribute("ec-skateboard")]
public static Emoji Skateboard;
    [NameAttribute("ec-sled")]
public static Emoji Sled;
    [NameAttribute("ec-bow-and-arrow")]
public static Emoji BowAndArrow;
    [NameAttribute("ec-fishing-pole-and-fish")]
public static Emoji FishingPoleAndFish;
    [NameAttribute("ec-boxing-glove")]
public static Emoji BoxingGlove;
    [NameAttribute("ec-martial-arts-uniform")]
public static Emoji MartialArtsUniform;
    [NameAttribute("ec-rowing-man")]
public static Emoji RowingMan;
    [NameAttribute("ec-swimming-man")]
public static Emoji SwimmingMan;
    [NameAttribute("ec-surfing-man")]
public static Emoji SurfingMan;
    [NameAttribute("ec-bath")]
public static Emoji Bath;
    [NameAttribute("ec-basketball-man")]
public static Emoji BasketballMan;
    [NameAttribute("ec-weight-lifting-man")]
public static Emoji WeightLiftingMan;
    [NameAttribute("ec-biking-man")]
public static Emoji BikingMan;
    [NameAttribute("ec-mountain-biking-man")]
public static Emoji MountainBikingMan;
    [NameAttribute("ec-horse-racing")]
public static Emoji HorseRacing;
    [NameAttribute("ec-business-suit-levitating")]
public static Emoji BusinessSuitLevitating;
    [NameAttribute("ec-trophy")]
public static Emoji Trophy;
    [NameAttribute("ec-running-shirt-with-sash")]
public static Emoji RunningShirtWithSash;
    [NameAttribute("ec-medal-sports")]
public static Emoji MedalSports;
    [NameAttribute("ec-medal-military")]
public static Emoji MedalMilitary;
    [NameAttribute("ec-1st-place-medal")]
public static Emoji FirstPlaceMedal;
    [NameAttribute("ec-2nd-place-medal")]
public static Emoji SecondPlaceMedal;
    [NameAttribute("ec-3rd-place-medal")]
public static Emoji ThirdPlaceMedal;
    [NameAttribute("ec-reminder-ribbon")]
public static Emoji ReminderRibbon;
    [NameAttribute("ec-rosette")]
public static Emoji Rosette;
    [NameAttribute("ec-ticket")]
public static Emoji Ticket;
    [NameAttribute("ec-tickets")]
public static Emoji Tickets;
    [NameAttribute("ec-performing-arts")]
public static Emoji PerformingArts;
    [NameAttribute("ec-art")]
public static Emoji Art;
    [NameAttribute("ec-circus-tent")]
public static Emoji CircusTent;
    [NameAttribute("ec-microphone")]
public static Emoji Microphone;
    [NameAttribute("ec-headphones")]
public static Emoji Headphones;
    [NameAttribute("ec-musical-score")]
public static Emoji MusicalScore;
    [NameAttribute("ec-musical-keyboard")]
public static Emoji MusicalKeyboard;
    [NameAttribute("ec-drum")]
public static Emoji Drum;
    [NameAttribute("ec-saxophone")]
public static Emoji Saxophone;
    [NameAttribute("ec-trumpet")]
public static Emoji Trumpet;
    [NameAttribute("ec-guitar")]
public static Emoji Guitar;
    [NameAttribute("ec-violin")]
public static Emoji Violin;
    [NameAttribute("ec-clapper")]
public static Emoji Clapper;
    [NameAttribute("ec-video-game")]
public static Emoji VideoGame;
    [NameAttribute("ec-space-invader")]
public static Emoji SpaceInvader;
    [NameAttribute("ec-dart")]
public static Emoji Dart;
    [NameAttribute("ec-game-die")]
public static Emoji GameDie;
    [NameAttribute("ec-chess-pawn")]
public static Emoji ChessPawn;
    [NameAttribute("ec-slot-machine")]
public static Emoji SlotMachine;
    [NameAttribute("ec-jigsaw")]
public static Emoji Jigsaw;
    [NameAttribute("ec-bowling")]
public static Emoji Bowling;
    [NameAttribute("ec-red-car")]
public static Emoji RedCar;
    [NameAttribute("ec-taxi")]
public static Emoji Taxi;
    [NameAttribute("ec-blue-car")]
public static Emoji BlueCar;
    [NameAttribute("ec-bus")]
public static Emoji Bus;
    [NameAttribute("ec-trolleybus")]
public static Emoji Trolleybus;
    [NameAttribute("ec-racing-car")]
public static Emoji RacingCar;
    [NameAttribute("ec-police-car")]
public static Emoji PoliceCar;
    [NameAttribute("ec-ambulance")]
public static Emoji Ambulance;
    [NameAttribute("ec-fire-engine")]
public static Emoji FireEngine;
    [NameAttribute("ec-minibus")]
public static Emoji Minibus;
    [NameAttribute("ec-truck")]
public static Emoji Truck;
    [NameAttribute("ec-articulated-lorry")]
public static Emoji ArticulatedLorry;
    [NameAttribute("ec-tractor")]
public static Emoji Tractor;
    [NameAttribute("ec-kick-scooter")]
public static Emoji KickScooter;
    [NameAttribute("ec-motorcycle")]
public static Emoji Motorcycle;
    [NameAttribute("ec-bike")]
public static Emoji Bike;
    [NameAttribute("ec-motor-scooter")]
public static Emoji MotorScooter;
    [NameAttribute("ec-rotating-light")]
public static Emoji RotatingLight;
    [NameAttribute("ec-oncoming-police-car")]
public static Emoji OncomingPoliceCar;
    [NameAttribute("ec-oncoming-bus")]
public static Emoji OncomingBus;
    [NameAttribute("ec-oncoming-automobile")]
public static Emoji OncomingAutomobile;
    [NameAttribute("ec-oncoming-taxi")]
public static Emoji OncomingTaxi;
    [NameAttribute("ec-aerial-tramway")]
public static Emoji AerialTramway;
    [NameAttribute("ec-mountain-cableway")]
public static Emoji MountainCableway;
    [NameAttribute("ec-suspension-railway")]
public static Emoji SuspensionRailway;
    [NameAttribute("ec-railway-car")]
public static Emoji RailwayCar;
    [NameAttribute("ec-train")]
public static Emoji Train;
    [NameAttribute("ec-monorail")]
public static Emoji Monorail;
    [NameAttribute("ec-bullettrain-side")]
public static Emoji BullettrainSide;
    [NameAttribute("ec-bullettrain-front")]
public static Emoji BullettrainFront;
    [NameAttribute("ec-light-rail")]
public static Emoji LightRail;
    [NameAttribute("ec-mountain-railway")]
public static Emoji MountainRailway;
    [NameAttribute("ec-steam-locomotive")]
public static Emoji SteamLocomotive;
    [NameAttribute("ec-train2")]
public static Emoji Train2;
    [NameAttribute("ec-metro")]
public static Emoji Metro;
    [NameAttribute("ec-tram")]
public static Emoji Tram;
    [NameAttribute("ec-station")]
public static Emoji Station;
    [NameAttribute("ec-flying-saucer")]
public static Emoji FlyingSaucer;
    [NameAttribute("ec-helicopter")]
public static Emoji Helicopter;
    [NameAttribute("ec-small-airplane")]
public static Emoji SmallAirplane;
    [NameAttribute("ec-flight-departure")]
public static Emoji FlightDeparture;
    [NameAttribute("ec-flight-arrival")]
public static Emoji FlightArrival;
    [NameAttribute("ec-sailboat")]
public static Emoji Sailboat;
    [NameAttribute("ec-motor-boat")]
public static Emoji MotorBoat;
    [NameAttribute("ec-speedboat")]
public static Emoji Speedboat;
    [NameAttribute("ec-ferry")]
public static Emoji Ferry;
    [NameAttribute("ec-passenger-ship")]
public static Emoji PassengerShip;
    [NameAttribute("ec-rocket")]
public static Emoji Rocket;
    [NameAttribute("ec-artificial-satellite")]
public static Emoji ArtificialSatellite;
    [NameAttribute("ec-seat")]
public static Emoji Seat;
    [NameAttribute("ec-canoe")]
public static Emoji Canoe;
    [NameAttribute("ec-anchor")]
public static Emoji Anchor;
    [NameAttribute("ec-construction")]
public static Emoji Construction;
    [NameAttribute("ec-fuelpump")]
public static Emoji Fuelpump;
    [NameAttribute("ec-busstop")]
public static Emoji Busstop;
    [NameAttribute("ec-vertical-traffic-light")]
public static Emoji VerticalTrafficLight;
    [NameAttribute("ec-traffic-light")]
public static Emoji TrafficLight;
    [NameAttribute("ec-checkered-flag")]
public static Emoji CheckeredFlag;
    [NameAttribute("ec-ship")]
public static Emoji Ship;
    [NameAttribute("ec-ferris-wheel")]
public static Emoji FerrisWheel;
    [NameAttribute("ec-roller-coaster")]
public static Emoji RollerCoaster;
    [NameAttribute("ec-carousel-horse")]
public static Emoji CarouselHorse;
    [NameAttribute("ec-building-construction")]
public static Emoji BuildingConstruction;
    [NameAttribute("ec-foggy")]
public static Emoji Foggy;
    [NameAttribute("ec-tokyo-tower")]
public static Emoji TokyoTower;
    [NameAttribute("ec-factory")]
public static Emoji Factory;
    [NameAttribute("ec-fountain")]
public static Emoji Fountain;
    [NameAttribute("ec-rice-scene")]
public static Emoji RiceScene;
    [NameAttribute("ec-mountain")]
public static Emoji Mountain;
    [NameAttribute("ec-mountain-snow")]
public static Emoji MountainSnow;
    [NameAttribute("ec-mount-fuji")]
public static Emoji MountFuji;
    [NameAttribute("ec-volcano")]
public static Emoji Volcano;
    [NameAttribute("ec-japan")]
public static Emoji Japan;
    [NameAttribute("ec-camping")]
public static Emoji Camping;
    [NameAttribute("ec-tent")]
public static Emoji Tent;
    [NameAttribute("ec-national-park")]
public static Emoji NationalPark;
    [NameAttribute("ec-motorway")]
public static Emoji Motorway;
    [NameAttribute("ec-railway-track")]
public static Emoji RailwayTrack;
    [NameAttribute("ec-sunrise")]
public static Emoji Sunrise;
    [NameAttribute("ec-sunrise-over-mountains")]
public static Emoji SunriseOverMountains;
    [NameAttribute("ec-desert")]
public static Emoji Desert;
    [NameAttribute("ec-beach-umbrella")]
public static Emoji BeachUmbrella;
    [NameAttribute("ec-desert-island")]
public static Emoji DesertIsland;
    [NameAttribute("ec-city-sunrise")]
public static Emoji CitySunrise;
    [NameAttribute("ec-city-sunset")]
public static Emoji CitySunset;
    [NameAttribute("ec-cityscape")]
public static Emoji Cityscape;
    [NameAttribute("ec-night-with-stars")]
public static Emoji NightWithStars;
    [NameAttribute("ec-bridge-at-night")]
public static Emoji BridgeAtNight;
    [NameAttribute("ec-milky-way")]
public static Emoji MilkyWay;
    [NameAttribute("ec-stars")]
public static Emoji Stars;
    [NameAttribute("ec-sparkler")]
public static Emoji Sparkler;
    [NameAttribute("ec-fireworks")]
public static Emoji Fireworks;
    [NameAttribute("ec-rainbow")]
public static Emoji Rainbow;
    [NameAttribute("ec-houses")]
public static Emoji Houses;
    [NameAttribute("ec-european-castle")]
public static Emoji EuropeanCastle;
    [NameAttribute("ec-japanese-castle")]
public static Emoji JapaneseCastle;
    [NameAttribute("ec-stadium")]
public static Emoji Stadium;
    [NameAttribute("ec-statue-of-liberty")]
public static Emoji StatueOfLiberty;
    [NameAttribute("ec-house")]
public static Emoji House;
    [NameAttribute("ec-house-with-garden")]
public static Emoji HouseWithGarden;
    [NameAttribute("ec-derelict-house")]
public static Emoji DerelictHouse;
    [NameAttribute("ec-office")]
public static Emoji Office;
    [NameAttribute("ec-department-store")]
public static Emoji DepartmentStore;
    [NameAttribute("ec-post-office")]
public static Emoji PostOffice;
    [NameAttribute("ec-european-post-office")]
public static Emoji EuropeanPostOffice;
    [NameAttribute("ec-hospital")]
public static Emoji Hospital;
    [NameAttribute("ec-bank")]
public static Emoji Bank;
    [NameAttribute("ec-hotel")]
public static Emoji Hotel;
    [NameAttribute("ec-convenience-store")]
public static Emoji ConvenienceStore;
    [NameAttribute("ec-school")]
public static Emoji School;
    [NameAttribute("ec-love-hotel")]
public static Emoji LoveHotel;
    [NameAttribute("ec-wedding")]
public static Emoji Wedding;
    [NameAttribute("ec-classical-building")]
public static Emoji ClassicalBuilding;
    [NameAttribute("ec-church")]
public static Emoji Church;
    [NameAttribute("ec-mosque")]
public static Emoji Mosque;
    [NameAttribute("ec-synagogue")]
public static Emoji Synagogue;
    [NameAttribute("ec-kaaba")]
public static Emoji Kaaba;
    [NameAttribute("ec-shinto-shrine")]
public static Emoji ShintoShrine;
    [NameAttribute("ec-watch")]
public static Emoji Watch;
    [NameAttribute("ec-iphone")]
public static Emoji Iphone;
    [NameAttribute("ec-calling")]
public static Emoji Calling;
    [NameAttribute("ec-computer")]
public static Emoji Computer;
    [NameAttribute("ec-keyboard")]
public static Emoji Keyboard;
    [NameAttribute("ec-desktop-computer")]
public static Emoji DesktopComputer;
    [NameAttribute("ec-printer")]
public static Emoji Printer;
    [NameAttribute("ec-computer-mouse")]
public static Emoji ComputerMouse;
    [NameAttribute("ec-trackball")]
public static Emoji Trackball;
    [NameAttribute("ec-joystick")]
public static Emoji Joystick;
    [NameAttribute("ec-clamp")]
public static Emoji Clamp;
    [NameAttribute("ec-minidisc")]
public static Emoji Minidisc;
    [NameAttribute("ec-floppy-disk")]
public static Emoji FloppyDisk;
    [NameAttribute("ec-cd")]
public static Emoji Cd;
    [NameAttribute("ec-dvd")]
public static Emoji Dvd;
    [NameAttribute("ec-vhs")]
public static Emoji Vhs;
    [NameAttribute("ec-camera")]
public static Emoji Camera;
    [NameAttribute("ec-camera-flash")]
public static Emoji CameraFlash;
    [NameAttribute("ec-video-camera")]
public static Emoji VideoCamera;
    [NameAttribute("ec-movie-camera")]
public static Emoji MovieCamera;
    [NameAttribute("ec-film-projector")]
public static Emoji FilmProjector;
    [NameAttribute("ec-film-strip")]
public static Emoji FilmStrip;
    [NameAttribute("ec-telephone-receiver")]
public static Emoji TelephoneReceiver;
    [NameAttribute("ec-pager")]
public static Emoji Pager;
    [NameAttribute("ec-fax")]
public static Emoji Fax;
    [NameAttribute("ec-tv")]
public static Emoji Tv;
    [NameAttribute("ec-radio")]
public static Emoji Radio;
    [NameAttribute("ec-studio-microphone")]
public static Emoji StudioMicrophone;
    [NameAttribute("ec-level-slider")]
public static Emoji LevelSlider;
    [NameAttribute("ec-control-knobs")]
public static Emoji ControlKnobs;
    [NameAttribute("ec-compass")]
public static Emoji Compass;
    [NameAttribute("ec-stopwatch")]
public static Emoji Stopwatch;
    [NameAttribute("ec-timer-clock")]
public static Emoji TimerClock;
    [NameAttribute("ec-alarm-clock")]
public static Emoji AlarmClock;
    [NameAttribute("ec-mantelpiece-clock")]
public static Emoji MantelpieceClock;
    [NameAttribute("ec-hourglass-flowing-sand")]
public static Emoji HourglassFlowingSand;
    [NameAttribute("ec-hourglass")]
public static Emoji Hourglass;
    [NameAttribute("ec-satellite")]
public static Emoji Satellite;
    [NameAttribute("ec-battery")]
public static Emoji Battery;
    [NameAttribute("ec-electric-plug")]
public static Emoji ElectricPlug;
    [NameAttribute("ec-bulb")]
public static Emoji Bulb;
    [NameAttribute("ec-flashlight")]
public static Emoji Flashlight;
    [NameAttribute("ec-candle")]
public static Emoji Candle;
    [NameAttribute("ec-fire-extinguisher")]
public static Emoji FireExtinguisher;
    [NameAttribute("ec-wastebasket")]
public static Emoji Wastebasket;
    [NameAttribute("ec-oil-drum")]
public static Emoji OilDrum;
    [NameAttribute("ec-money-with-wings")]
public static Emoji MoneyWithWings;
    [NameAttribute("ec-dollar")]
public static Emoji Dollar;
    [NameAttribute("ec-yen")]
public static Emoji Yen;
    [NameAttribute("ec-euro")]
public static Emoji Euro;
    [NameAttribute("ec-pound")]
public static Emoji Pound;
    [NameAttribute("ec-moneybag")]
public static Emoji Moneybag;
    [NameAttribute("ec-credit-card")]
public static Emoji CreditCard;
    [NameAttribute("ec-gem")]
public static Emoji Gem;
    [NameAttribute("ec-balance-scale")]
public static Emoji BalanceScale;
    [NameAttribute("ec-toolbox")]
public static Emoji Toolbox;
    [NameAttribute("ec-wrench")]
public static Emoji Wrench;
    [NameAttribute("ec-hammer")]
public static Emoji Hammer;
    [NameAttribute("ec-hammer-and-pick")]
public static Emoji HammerAndPick;
    [NameAttribute("ec-hammer-and-wrench")]
public static Emoji HammerAndWrench;
    [NameAttribute("ec-pick")]
public static Emoji Pick;
    [NameAttribute("ec-nut-and-bolt")]
public static Emoji NutAndBolt;
    [NameAttribute("ec-gear")]
public static Emoji Gear;
    [NameAttribute("ec-brick")]
public static Emoji Brick;
    [NameAttribute("ec-chains")]
public static Emoji Chains;
    [NameAttribute("ec-magnet")]
public static Emoji Magnet;
    [NameAttribute("ec-gun")]
public static Emoji Gun;
    [NameAttribute("ec-bomb")]
public static Emoji Bomb;
    [NameAttribute("ec-firecracker")]
public static Emoji Firecracker;
    [NameAttribute("ec-hocho")]
public static Emoji Hocho;
    [NameAttribute("ec-dagger")]
public static Emoji Dagger;
    [NameAttribute("ec-crossed-swords")]
public static Emoji CrossedSwords;
    [NameAttribute("ec-shield")]
public static Emoji Shield;
    [NameAttribute("ec-smoking")]
public static Emoji Smoking;
    [NameAttribute("ec-skull-and-crossbones")]
public static Emoji SkullAndCrossbones;
    [NameAttribute("ec-coffin")]
public static Emoji Coffin;
    [NameAttribute("ec-funeral-urn")]
public static Emoji FuneralUrn;
    [NameAttribute("ec-amphora")]
public static Emoji Amphora;
    [NameAttribute("ec-crystal-ball")]
public static Emoji CrystalBall;
    [NameAttribute("ec-prayer-beads")]
public static Emoji PrayerBeads;
    [NameAttribute("ec-nazar-amulet")]
public static Emoji NazarAmulet;
    [NameAttribute("ec-barber")]
public static Emoji Barber;
    [NameAttribute("ec-alembic")]
public static Emoji Alembic;
    [NameAttribute("ec-telescope")]
public static Emoji Telescope;
    [NameAttribute("ec-microscope")]
public static Emoji Microscope;
    [NameAttribute("ec-hole")]
public static Emoji Hole;
    [NameAttribute("ec-pill")]
public static Emoji Pill;
    [NameAttribute("ec-syringe")]
public static Emoji Syringe;
    [NameAttribute("ec-dna")]
public static Emoji Dna;
    [NameAttribute("ec-microbe")]
public static Emoji Microbe;
    [NameAttribute("ec-petri-dish")]
public static Emoji PetriDish;
    [NameAttribute("ec-test-tube")]
public static Emoji TestTube;
    [NameAttribute("ec-thermometer")]
public static Emoji Thermometer;
    [NameAttribute("ec-broom")]
public static Emoji Broom;
    [NameAttribute("ec-basket")]
public static Emoji Basket;
    [NameAttribute("ec-toilet-paper")]
public static Emoji ToiletPaper;
    [NameAttribute("ec-label")]
public static Emoji Label;
    [NameAttribute("ec-bookmark")]
public static Emoji Bookmark;
    [NameAttribute("ec-toilet")]
public static Emoji Toilet;
    [NameAttribute("ec-shower")]
public static Emoji Shower;
    [NameAttribute("ec-bathtub")]
public static Emoji Bathtub;
    [NameAttribute("ec-soap")]
public static Emoji Soap;
    [NameAttribute("ec-sponge")]
public static Emoji Sponge;
    [NameAttribute("ec-lotion-bottle")]
public static Emoji LotionBottle;
    [NameAttribute("ec-key")]
public static Emoji Key;
    [NameAttribute("ec-old-key")]
public static Emoji OldKey;
    [NameAttribute("ec-couch-and-lamp")]
public static Emoji CouchAndLamp;
    [NameAttribute("ec-sleeping-bed")]
public static Emoji SleepingBed;
    [NameAttribute("ec-bed")]
public static Emoji Bed;
    [NameAttribute("ec-door")]
public static Emoji Door;
    [NameAttribute("ec-bellhop-bell")]
public static Emoji BellhopBell;
    [NameAttribute("ec-teddy-bear")]
public static Emoji TeddyBear;
    [NameAttribute("ec-framed-picture")]
public static Emoji FramedPicture;
    [NameAttribute("ec-world-map")]
public static Emoji WorldMap;
    [NameAttribute("ec-parasol-on-ground")]
public static Emoji ParasolOnGround;
    [NameAttribute("ec-moyai")]
public static Emoji Moyai;
    [NameAttribute("ec-shopping")]
public static Emoji Shopping;
    [NameAttribute("ec-shopping-cart")]
public static Emoji ShoppingCart;
    [NameAttribute("ec-balloon")]
public static Emoji Balloon;
    [NameAttribute("ec-flags")]
public static Emoji Flags;
    [NameAttribute("ec-ribbon")]
public static Emoji Ribbon;
    [NameAttribute("ec-gift")]
public static Emoji Gift;
    [NameAttribute("ec-confetti-ball")]
public static Emoji ConfettiBall;
    [NameAttribute("ec-tada")]
public static Emoji Tada;
    [NameAttribute("ec-dolls")]
public static Emoji Dolls;
    [NameAttribute("ec-wind-chime")]
public static Emoji WindChime;
    [NameAttribute("ec-crossed-flags")]
public static Emoji CrossedFlags;
    [NameAttribute("ec-izakaya-lantern")]
public static Emoji IzakayaLantern;
    [NameAttribute("ec-red-envelope")]
public static Emoji RedEnvelope;
    [NameAttribute("ec-envelope-with-arrow")]
public static Emoji EnvelopeWithArrow;
    [NameAttribute("ec-incoming-envelope")]
public static Emoji IncomingEnvelope;
    [NameAttribute("ec-e-mail")]
public static Emoji EMail;
    [NameAttribute("ec-love-letter")]
public static Emoji LoveLetter;
    [NameAttribute("ec-postbox")]
public static Emoji Postbox;
    [NameAttribute("ec-mailbox-closed")]
public static Emoji MailboxClosed;
    [NameAttribute("ec-mailbox")]
public static Emoji Mailbox;
    [NameAttribute("ec-mailbox-with-mail")]
public static Emoji MailboxWithMail;
    [NameAttribute("ec-mailbox-with-no-mail")]
public static Emoji MailboxWithNoMail;
    [NameAttribute("ec-package")]
public static Emoji Package;
    [NameAttribute("ec-postal-horn")]
public static Emoji PostalHorn;
    [NameAttribute("ec-inbox-tray")]
public static Emoji InboxTray;
    [NameAttribute("ec-outbox-tray")]
public static Emoji OutboxTray;
    [NameAttribute("ec-scroll")]
public static Emoji Scroll;
    [NameAttribute("ec-page-with-curl")]
public static Emoji PageWithCurl;
    [NameAttribute("ec-bookmark-tabs")]
public static Emoji BookmarkTabs;
    [NameAttribute("ec-receipt")]
public static Emoji Receipt;
    [NameAttribute("ec-bar-chart")]
public static Emoji BarChart;
    [NameAttribute("ec-chart-with-upwards-trend")]
public static Emoji ChartWithUpwardsTrend;
    [NameAttribute("ec-chart-with-downwards-trend")]
public static Emoji ChartWithDownwardsTrend;
    [NameAttribute("ec-page-facing-up")]
public static Emoji PageFacingUp;
    [NameAttribute("ec-date")]
public static Emoji Date;
    [NameAttribute("ec-calendar")]
public static Emoji Calendar;
    [NameAttribute("ec-spiral-calendar")]
public static Emoji SpiralCalendar;
    [NameAttribute("ec-card-index")]
public static Emoji CardIndex;
    [NameAttribute("ec-card-file-box")]
public static Emoji CardFileBox;
    [NameAttribute("ec-ballot-box")]
public static Emoji BallotBox;
    [NameAttribute("ec-file-cabinet")]
public static Emoji FileCabinet;
    [NameAttribute("ec-clipboard")]
public static Emoji Clipboard;
    [NameAttribute("ec-spiral-notepad")]
public static Emoji SpiralNotepad;
    [NameAttribute("ec-file-folder")]
public static Emoji FileFolder;
    [NameAttribute("ec-open-file-folder")]
public static Emoji OpenFileFolder;
    [NameAttribute("ec-card-index-dividers")]
public static Emoji CardIndexDividers;
    [NameAttribute("ec-newspaper-roll")]
public static Emoji NewspaperRoll;
    [NameAttribute("ec-newspaper")]
public static Emoji Newspaper;
    [NameAttribute("ec-notebook")]
public static Emoji Notebook;
    [NameAttribute("ec-closed-book")]
public static Emoji ClosedBook;
    [NameAttribute("ec-green-book")]
public static Emoji GreenBook;
    [NameAttribute("ec-blue-book")]
public static Emoji BlueBook;
    [NameAttribute("ec-orange-book")]
public static Emoji OrangeBook;
    [NameAttribute("ec-notebook-with-decorative-cover")]
public static Emoji NotebookWithDecorativeCover;
    [NameAttribute("ec-ledger")]
public static Emoji Ledger;
    [NameAttribute("ec-books")]
public static Emoji Books;
    [NameAttribute("ec-open-book")]
public static Emoji OpenBook;
    [NameAttribute("ec-safety-pin")]
public static Emoji SafetyPin;
    [NameAttribute("ec-link")]
public static Emoji Link;
    [NameAttribute("ec-paperclip")]
public static Emoji Paperclip;
    [NameAttribute("ec-paperclips")]
public static Emoji Paperclips;
    [NameAttribute("ec-triangular-ruler")]
public static Emoji TriangularRuler;
    [NameAttribute("ec-straight-ruler")]
public static Emoji StraightRuler;
    [NameAttribute("ec-abacus")]
public static Emoji Abacus;
    [NameAttribute("ec-pushpin")]
public static Emoji Pushpin;
    [NameAttribute("ec-round-pushpin")]
public static Emoji RoundPushpin;
    [NameAttribute("ec-triangular-flag-on-post")]
public static Emoji TriangularFlagOnPost;
    [NameAttribute("ec-white-flag")]
public static Emoji WhiteFlag;
    [NameAttribute("ec-black-flag")]
public static Emoji BlackFlag;
    [NameAttribute("ec-closed-lock-with-key")]
public static Emoji ClosedLockWithKey;
    [NameAttribute("ec-lock")]
public static Emoji Lock;
    [NameAttribute("ec-unlock")]
public static Emoji Unlock;
    [NameAttribute("ec-lock-with-ink-pen")]
public static Emoji LockWithInkPen;
    [NameAttribute("ec-pen")]
public static Emoji Pen;
    [NameAttribute("ec-fountain-pen")]
public static Emoji FountainPen;
    [NameAttribute("ec-memo")]
public static Emoji Memo;
    [NameAttribute("ec-crayon")]
public static Emoji Crayon;
    [NameAttribute("ec-paintbrush")]
public static Emoji Paintbrush;
    [NameAttribute("ec-mag")]
public static Emoji Mag;
    [NameAttribute("ec-mag-right")]
public static Emoji MagRight;
    [NameAttribute("ec-orange-heart")]
public static Emoji OrangeHeart;
    [NameAttribute("ec-yellow-heart")]
public static Emoji YellowHeart;
    [NameAttribute("ec-green-heart")]
public static Emoji GreenHeart;
    [NameAttribute("ec-blue-heart")]
public static Emoji BlueHeart;
    [NameAttribute("ec-purple-heart")]
public static Emoji PurpleHeart;
    [NameAttribute("ec-black-heart")]
public static Emoji BlackHeart;
    [NameAttribute("ec-broken-heart")]
public static Emoji BrokenHeart;
    [NameAttribute("ec-heavy-heart-exclamation")]
public static Emoji HeavyHeartExclamation;
    [NameAttribute("ec-two-hearts")]
public static Emoji TwoHearts;
    [NameAttribute("ec-revolving-hearts")]
public static Emoji RevolvingHearts;
    [NameAttribute("ec-heartbeat")]
public static Emoji Heartbeat;
    [NameAttribute("ec-heartpulse")]
public static Emoji Heartpulse;
    [NameAttribute("ec-sparkling-heart")]
public static Emoji SparklingHeart;
    [NameAttribute("ec-cupid")]
public static Emoji Cupid;
    [NameAttribute("ec-gift-heart")]
public static Emoji GiftHeart;
    [NameAttribute("ec-heart-decoration")]
public static Emoji HeartDecoration;
    [NameAttribute("ec-peace-symbol")]
public static Emoji PeaceSymbol;
    [NameAttribute("ec-latin-cross")]
public static Emoji LatinCross;
    [NameAttribute("ec-star-and-crescent")]
public static Emoji StarAndCrescent;
    [NameAttribute("ec-om")]
public static Emoji Om;
    [NameAttribute("ec-wheel-of-dharma")]
public static Emoji WheelOfDharma;
    [NameAttribute("ec-star-of-david")]
public static Emoji StarOfDavid;
    [NameAttribute("ec-six-pointed-star")]
public static Emoji SixPointedStar;
    [NameAttribute("ec-menorah")]
public static Emoji Menorah;
    [NameAttribute("ec-yin-yang")]
public static Emoji YinYang;
    [NameAttribute("ec-orthodox-cross")]
public static Emoji OrthodoxCross;
    [NameAttribute("ec-place-of-worship")]
public static Emoji PlaceOfWorship;
    [NameAttribute("ec-ophiuchus")]
public static Emoji Ophiuchus;
    [NameAttribute("ec-aries")]
public static Emoji Aries;
    [NameAttribute("ec-taurus")]
public static Emoji Taurus;
    [NameAttribute("ec-gemini")]
public static Emoji Gemini;
    [NameAttribute("ec-cancer")]
public static Emoji Cancer;
    [NameAttribute("ec-leo")]
public static Emoji Leo;
    [NameAttribute("ec-virgo")]
public static Emoji Virgo;
    [NameAttribute("ec-libra")]
public static Emoji Libra;
    [NameAttribute("ec-scorpius")]
public static Emoji Scorpius;
    [NameAttribute("ec-sagittarius")]
public static Emoji Sagittarius;
    [NameAttribute("ec-capricorn")]
public static Emoji Capricorn;
    [NameAttribute("ec-aquarius")]
public static Emoji Aquarius;
    [NameAttribute("ec-pisces")]
public static Emoji Pisces;
    [NameAttribute("ec-id")]
public static Emoji Id;
    [NameAttribute("ec-atom-symbol")]
public static Emoji AtomSymbol;
    [NameAttribute("ec-u7a7a")]
public static Emoji U7a7a;
    [NameAttribute("ec-u5272")]
public static Emoji U5272;
    [NameAttribute("ec-radioactive")]
public static Emoji Radioactive;
    [NameAttribute("ec-biohazard")]
public static Emoji Biohazard;
    [NameAttribute("ec-mobile-phone-off")]
public static Emoji MobilePhoneOff;
    [NameAttribute("ec-vibration-mode")]
public static Emoji VibrationMode;
    [NameAttribute("ec-u6709")]
public static Emoji U6709;
    [NameAttribute("ec-u7121")]
public static Emoji U7121;
    [NameAttribute("ec-u7533")]
public static Emoji U7533;
    [NameAttribute("ec-u55b6")]
public static Emoji U55b6;
    [NameAttribute("ec-vs")]
public static Emoji Vs;
    [NameAttribute("ec-accept")]
public static Emoji Accept;
    [NameAttribute("ec-white-flower")]
public static Emoji WhiteFlower;
    [NameAttribute("ec-ideograph-advantage")]
public static Emoji IdeographAdvantage;
    [NameAttribute("ec-u5408")]
public static Emoji U5408;
    [NameAttribute("ec-u6e80")]
public static Emoji U6e80;
    [NameAttribute("ec-u7981")]
public static Emoji U7981;
    [NameAttribute("ec-ab")]
public static Emoji Ab;
    [NameAttribute("ec-cl")]
public static Emoji Cl;
    [NameAttribute("ec-sos")]
public static Emoji Sos;
    [NameAttribute("ec-no-entry")]
public static Emoji NoEntry;
    [NameAttribute("ec-name-badge")]
public static Emoji NameBadge;
    [NameAttribute("ec-no-entry-sign")]
public static Emoji NoEntrySign;
    [NameAttribute("ec-x")]
public static Emoji X;
    [NameAttribute("ec-o")]
public static Emoji O;
    [NameAttribute("ec-stop-sign")]
public static Emoji StopSign;
    [NameAttribute("ec-anger")]
public static Emoji Anger;
    [NameAttribute("ec-no-pedestrians")]
public static Emoji NoPedestrians;
    [NameAttribute("ec-do-not-litter")]
public static Emoji DoNotLitter;
    [NameAttribute("ec-no-bicycles")]
public static Emoji NoBicycles;
    [NameAttribute("ec-non-potable-water")]
public static Emoji NonPotableWater;
    [NameAttribute("ec-underage")]
public static Emoji Underage;
    [NameAttribute("ec-no-mobile-phones")]
public static Emoji NoMobilePhones;
    [NameAttribute("ec-exclamation")]
public static Emoji Exclamation;
    [NameAttribute("ec-grey-exclamation")]
public static Emoji GreyExclamation;
    [NameAttribute("ec-question")]
public static Emoji Question;
    [NameAttribute("ec-grey-question")]
public static Emoji GreyQuestion;
    [NameAttribute("ec-low-brightness")]
public static Emoji LowBrightness;
    [NameAttribute("ec-high-brightness")]
public static Emoji HighBrightness;
    [NameAttribute("ec-trident")]
public static Emoji Trident;
    [NameAttribute("ec-fleur-de-lis")]
public static Emoji FleurDeLis;
    [NameAttribute("ec-children-crossing")]
public static Emoji ChildrenCrossing;
    [NameAttribute("ec-beginner")]
public static Emoji Beginner;
    [NameAttribute("ec-u6307")]
public static Emoji U6307;
    [NameAttribute("ec-chart")]
public static Emoji Chart;
    [NameAttribute("ec-negative-squared-cross-mark")]
public static Emoji NegativeSquaredCrossMark;
    [NameAttribute("ec-white-check-mark")]
public static Emoji WhiteCheckMark;
    [NameAttribute("ec-diamond-shape-with-a-dot-inside")]
public static Emoji DiamondShapeWithADotInside;
    [NameAttribute("ec-cyclone")]
public static Emoji Cyclone;
    [NameAttribute("ec-loop")]
public static Emoji Loop;
    [NameAttribute("ec-globe-with-meridians")]
public static Emoji GlobeWithMeridians;
    [NameAttribute("ec-atm")]
public static Emoji Atm;
    [NameAttribute("ec-passport-control")]
public static Emoji PassportControl;
    [NameAttribute("ec-customs")]
public static Emoji Customs;
    [NameAttribute("ec-baggage-claim")]
public static Emoji BaggageClaim;
    [NameAttribute("ec-left-luggage")]
public static Emoji LeftLuggage;
    [NameAttribute("ec-wheelchair")]
public static Emoji Wheelchair;
    [NameAttribute("ec-no-smoking")]
public static Emoji NoSmoking;
    [NameAttribute("ec-wc")]
public static Emoji Wc;
    [NameAttribute("ec-potable-water")]
public static Emoji PotableWater;
    [NameAttribute("ec-mens")]
public static Emoji Mens;
    [NameAttribute("ec-womens")]
public static Emoji Womens;
    [NameAttribute("ec-baby-symbol")]
public static Emoji BabySymbol;
    [NameAttribute("ec-restroom")]
public static Emoji Restroom;
    [NameAttribute("ec-put-litter-in-its-place")]
public static Emoji PutLitterInItsPlace;
    [NameAttribute("ec-cinema")]
public static Emoji Cinema;
    [NameAttribute("ec-signal-strength")]
public static Emoji SignalStrength;
    [NameAttribute("ec-koko")]
public static Emoji Koko;
    [NameAttribute("ec-ng")]
public static Emoji Ng;
    [NameAttribute("ec-ok")]
public static Emoji Ok;
    [NameAttribute("ec-up")]
public static Emoji Up;
    [NameAttribute("ec-cool")]
public static Emoji Cool;
    [NameAttribute("ec-new")]
public static Emoji New;
    [NameAttribute("ec-free")]
public static Emoji Free;
    [NameAttribute("ec-keycap-ten")]
public static Emoji KeycapTen;
    [NameAttribute("ec-pause-button")]
public static Emoji PauseButton;
    [NameAttribute("ec-next-track-button")]
public static Emoji NextTrackButton;
    [NameAttribute("ec-stop-button")]
public static Emoji StopButton;
    [NameAttribute("ec-record-button")]
public static Emoji RecordButton;
    [NameAttribute("ec-play-or-pause-button")]
public static Emoji PlayOrPauseButton;
    [NameAttribute("ec-previous-track-button")]
public static Emoji PreviousTrackButton;
    [NameAttribute("ec-fast-forward")]
public static Emoji FastForward;
    [NameAttribute("ec-rewind")]
public static Emoji Rewind;
    [NameAttribute("ec-twisted-rightwards-arrows")]
public static Emoji TwistedRightwardsArrows;
    [NameAttribute("ec-repeat")]
public static Emoji Repeat;
    [NameAttribute("ec-repeat-one")]
public static Emoji RepeatOne;
    [NameAttribute("ec-arrow-up-small")]
public static Emoji ArrowUpSmall;
    [NameAttribute("ec-arrow-down-small")]
public static Emoji ArrowDownSmall;
    [NameAttribute("ec-arrow-double-up")]
public static Emoji ArrowDoubleUp;
    [NameAttribute("ec-arrow-double-down")]
public static Emoji ArrowDoubleDown;
    [NameAttribute("ec-arrows-counterclockwise")]
public static Emoji ArrowsCounterclockwise;
    [NameAttribute("ec-abc")]
public static Emoji Abc;
    [NameAttribute("ec-abcd")]
public static Emoji Abcd;
    [NameAttribute("ec-capital-abcd")]
public static Emoji CapitalAbcd;
    [NameAttribute("ec-symbols")]
public static Emoji Symbols;
    [NameAttribute("ec-musical-note")]
public static Emoji MusicalNote;
    [NameAttribute("ec-notes")]
public static Emoji Notes;
    [NameAttribute("ec-curly-loop")]
public static Emoji CurlyLoop;
    [NameAttribute("ec-arrows-clockwise")]
public static Emoji ArrowsClockwise;
    [NameAttribute("ec-heavy-plus-sign")]
public static Emoji HeavyPlusSign;
    [NameAttribute("ec-heavy-minus-sign")]
public static Emoji HeavyMinusSign;
    [NameAttribute("ec-heavy-division-sign")]
public static Emoji HeavyDivisionSign;
    [NameAttribute("ec-infinity")]
public static Emoji Infinity;
    [NameAttribute("ec-heavy-dollar-sign")]
public static Emoji HeavyDollarSign;
    [NameAttribute("ec-currency-exchange")]
public static Emoji CurrencyExchange;
    [NameAttribute("ec-end")]
public static Emoji End;
    [NameAttribute("ec-back")]
public static Emoji Back;
    [NameAttribute("ec-on")]
public static Emoji On;
    [NameAttribute("ec-top")]
public static Emoji Top;
    [NameAttribute("ec-soon")]
public static Emoji Soon;
    [NameAttribute("ec-radio-button")]
public static Emoji RadioButton;
    [NameAttribute("ec-white-circle")]
public static Emoji WhiteCircle;
    [NameAttribute("ec-black-circle")]
public static Emoji BlackCircle;
    [NameAttribute("ec-red-circle")]
public static Emoji RedCircle;
    [NameAttribute("ec-large-blue-circle")]
public static Emoji LargeBlueCircle;
    [NameAttribute("ec-small-orange-diamond")]
public static Emoji SmallOrangeDiamond;
    [NameAttribute("ec-small-blue-diamond")]
public static Emoji SmallBlueDiamond;
    [NameAttribute("ec-large-orange-diamond")]
public static Emoji LargeOrangeDiamond;
    [NameAttribute("ec-large-blue-diamond")]
public static Emoji LargeBlueDiamond;
    [NameAttribute("ec-small-red-triangle")]
public static Emoji SmallRedTriangle;
    [NameAttribute("ec-black-large-square")]
public static Emoji BlackLargeSquare;
    [NameAttribute("ec-white-large-square")]
public static Emoji WhiteLargeSquare;
    [NameAttribute("ec-small-red-triangle-down")]
public static Emoji SmallRedTriangleDown;
    [NameAttribute("ec-black-medium-small-square")]
public static Emoji BlackMediumSmallSquare;
    [NameAttribute("ec-white-medium-small-square")]
public static Emoji WhiteMediumSmallSquare;
    [NameAttribute("ec-black-square-button")]
public static Emoji BlackSquareButton;
    [NameAttribute("ec-white-square-button")]
public static Emoji WhiteSquareButton;
    [NameAttribute("ec-speaker")]
public static Emoji Speaker;
    [NameAttribute("ec-sound")]
public static Emoji Sound;
    [NameAttribute("ec-loud-sound")]
public static Emoji LoudSound;
    [NameAttribute("ec-mute")]
public static Emoji Mute;
    [NameAttribute("ec-mega")]
public static Emoji Mega;
    [NameAttribute("ec-loudspeaker")]
public static Emoji Loudspeaker;
    [NameAttribute("ec-bell")]
public static Emoji Bell;
    [NameAttribute("ec-no-bell")]
public static Emoji NoBell;
    [NameAttribute("ec-black-joker")]
public static Emoji BlackJoker;
    [NameAttribute("ec-mahjong")]
public static Emoji Mahjong;
    [NameAttribute("ec-flower-playing-cards")]
public static Emoji FlowerPlayingCards;
    [NameAttribute("ec-thought-balloon")]
public static Emoji ThoughtBalloon;
    [NameAttribute("ec-right-anger-bubble")]
public static Emoji RightAngerBubble;
    [NameAttribute("ec-speech-balloon")]
public static Emoji SpeechBalloon;
    [NameAttribute("ec-left-speech-bubble")]
public static Emoji LeftSpeechBubble;
    [NameAttribute("ec-clock1")]
public static Emoji Clock1;
    [NameAttribute("ec-clock2")]
public static Emoji Clock2;
    [NameAttribute("ec-clock3")]
public static Emoji Clock3;
    [NameAttribute("ec-clock4")]
public static Emoji Clock4;
    [NameAttribute("ec-clock5")]
public static Emoji Clock5;
    [NameAttribute("ec-clock6")]
public static Emoji Clock6;
    [NameAttribute("ec-clock7")]
public static Emoji Clock7;
    [NameAttribute("ec-clock8")]
public static Emoji Clock8;
    [NameAttribute("ec-clock9")]
public static Emoji Clock9;
    [NameAttribute("ec-clock10")]
public static Emoji Clock10;
    [NameAttribute("ec-clock11")]
public static Emoji Clock11;
    [NameAttribute("ec-clock12")]
public static Emoji Clock12;
    [NameAttribute("ec-clock130")]
public static Emoji Clock130;
    [NameAttribute("ec-clock230")]
public static Emoji Clock230;
    [NameAttribute("ec-clock330")]
public static Emoji Clock330;
    [NameAttribute("ec-clock430")]
public static Emoji Clock430;
    [NameAttribute("ec-clock530")]
public static Emoji Clock530;
    [NameAttribute("ec-clock630")]
public static Emoji Clock630;
    [NameAttribute("ec-clock730")]
public static Emoji Clock730;
    [NameAttribute("ec-clock830")]
public static Emoji Clock830;
    [NameAttribute("ec-clock930")]
public static Emoji Clock930;
    [NameAttribute("ec-clock1030")]
public static Emoji Clock1030;
    [NameAttribute("ec-clock1130")]
public static Emoji Clock1130;
    [NameAttribute("ec-clock1230")]
public static Emoji Clock1230;
}
[NameAttribute("tss.EmojiImageIcon")]
public class Tesserae.EmojiImageIcon : object {
    private HTMLElement _img;
    public EmojiImageIcon(string icon);
    public sealed virtual HTMLElement Render();
    public sealed virtual ISidebarIcon Clone();
}
[ExtensionAttribute]
[NameAttribute("tss.eeX")]
internal static class Tesserae.EnumerableExtensions : object {
    [ExtensionAttribute]
internal static List`1<List`1<T>> InGroupsOf(IEnumerable`1<T> source, int groupSize);
}
[NameAttribute("tss.FileDropArea")]
public class Tesserae.FileDropArea : object {
    [DebuggerBrowsableAttribute]
private FileDroppedHandler FileDropped;
    private HTMLInputElement _fileInput;
    private Raw _raw;
    private HTMLElement _container;
    unknown IComponent Content {public set; }
    public string Accepts { get; public set; }
    public bool IsMultiple { get; public set; }
    private void add_FileDropped(FileDroppedHandler value);
    private void remove_FileDropped(FileDroppedHandler value);
    public void set_Content(IComponent value);
    public string get_Accepts();
    public void set_Accepts(string value);
    public bool get_IsMultiple();
    public void set_IsMultiple(bool value);
    private HTMLElement CreateDefaultDropArea();
    public FileDropArea OnFileDropped(FileDroppedHandler handler);
    public FileDropArea SetContent(IComponent content);
    public FileDropArea SetAccepts(string accepts);
    public FileDropArea Multiple();
    public void Reset();
    public sealed virtual HTMLElement Render();
    private void <.ctor>b__7_0(Event e);
    private void <.ctor>g__triggerDroppedOnFile|7_1();
}
[NameAttribute("tss.FileSelector")]
public class Tesserae.FileSelector : object {
    [DebuggerBrowsableAttribute]
private FileSelectedHandler FileSelected;
    private HTMLInputElement _fileInput;
    private IComponent _stack;
    private TextBox _textBox;
    private HTMLElement _container;
    private File _selectedFile;
    public File SelectedFile { get; private set; }
    public string Placeholder { get; public set; }
    public string Error { get; public set; }
    public bool IsInvalid { get; public set; }
    public bool IsRequired { get; public set; }
    public string Accepts { get; public set; }
    private void add_FileSelected(FileSelectedHandler value);
    private void remove_FileSelected(FileSelectedHandler value);
    public File get_SelectedFile();
    private void set_SelectedFile(File value);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual bool get_IsInvalid();
    public sealed virtual void set_IsInvalid(bool value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public string get_Accepts();
    public void set_Accepts(string value);
    public FileSelector OnFileSelected(FileSelectedHandler handler);
    public FileSelector SetPlaceholder(string placeholder);
    public FileSelector SetAccepts(string accepts);
    public FileSelector Required();
    public void Reset();
    public sealed virtual void Attach(ComponentEventHandler`1<FileSelector> handler);
    private string GetFileName(string value);
    public sealed virtual HTMLElement Render();
    private void <.ctor>b__27_0(Button s, MouseEvent e);
    private void <.ctor>b__27_1(Event _);
    private void <.ctor>g__updateFile|27_2();
}
[NameAttribute("tss.FixedValueObservable")]
public class Tesserae.FixedValueObservable`1 : object {
    [DebuggerBrowsableAttribute]
private TItem <Value>k__BackingField;
    public TItem Value { get; }
    public FixedValueObservable`1(TItem value);
    public sealed virtual TItem get_Value();
    private sealed virtual override void Tesserae.IObservable<TItem>.Observe(ValueChanged`1<TItem> valueGetter);
    private sealed virtual override void Tesserae.IObservable<TItem>.ObserveFutureChanges(ValueChanged`1<TItem> valueGetter);
    private sealed virtual override void Tesserae.IObservable<TItem>.StopObserving(ValueChanged`1<TItem> valueGetter);
}
[NameAttribute("tss.Float")]
public class Tesserae.Float : object {
    private IComponent _child;
    private HTMLElement _floatingContainer;
    public Float(IComponent child, Position position);
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.Grid")]
public class Tesserae.Grid : object {
    private HTMLElement _grid;
    [DebuggerBrowsableAttribute]
private bool <PropagateToStackItemParent>k__BackingField;
    public string Background { get; public set; }
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; private set; }
    public Grid(UnitSize[] columns);
    public Grid(UnitSize[] columns, UnitSize[] rows);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Margin();
    public sealed virtual void set_Margin(string value);
    public sealed virtual string get_Padding();
    public sealed virtual void set_Padding(string value);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    private void set_PropagateToStackItemParent(bool value);
    public Grid Columns(UnitSize[] columns);
    public Grid Rows(UnitSize[] rows);
    public sealed virtual void Add(IComponent component);
    internal static HTMLElement GetItem(IComponent component, bool forceAdd);
    internal static void CopyStylesDefinedWithExtension(HTMLElement from, HTMLElement to);
    public static void SetGridColumn(IComponent component, int start, int end);
    public static void SetGridRow(IComponent component, int start, int end);
    internal static ValueTuple`2<HTMLElement, bool> GetCorrectItemToApplyStyle(IComponent component);
    public Grid AlignItems(ItemAlign align);
    public Grid AlignContent(ItemAlign align);
    public Grid JustifyContent(ItemJustify justify);
    public Grid JustifyItems(ItemJustify justify);
    public Grid Relative();
    public Grid AlignItemsCenter();
    public Grid OverflowHidden();
    public Grid Gap(UnitSize gapSize);
    public Grid RowGap(UnitSize gapSize);
    public Grid ColumnGap(UnitSize gapSize);
    public Grid FlowColumn();
    public virtual void Clear();
    public Grid RemovePropagation();
    public Grid NoDefaultMargin();
    public sealed virtual void Replace(IComponent newComponent, IComponent oldComponent);
    public void Remove(IComponent component);
    public virtual HTMLElement Render();
    internal static bool <CopyStylesDefinedWithExtension>g__has|22_0(string att, <>c__DisplayClass22_0& );
}
[NameAttribute("tss.GridPicker")]
public class Tesserae.GridPicker : object {
    private Stack _stack;
    private int _columns;
    private int _rows;
    private int _stateCount;
    private Int32[][] _states;
    private Action`3<Button, int, int> _formatState;
    private Button[][] _buttons;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<GridPicker, Event> Changed;
    private static GridPicker _dragSource;
    private static int _draggingColumnStart;
    private static int _draggingRowStart;
    private static int _draggingColumnEnd;
    private static int _draggingRowEnd;
    private static int _draggingColumnMin;
    private static int _draggingRowMin;
    private static int _draggingColumnMax;
    private static int _draggingRowMax;
    private static int _draggingState;
    private int _hoverColumn;
    private int _hoverRow;
    public bool IsDragging { get; }
    public GridPicker(String[] columnNames, String[] rowNames, int states, Int32[][] initialStates, Action`3<Button, int, int> formatState, UnitSize[] columns, UnitSize rowHeight);
    private static GridPicker();
    private void add_Changed(ComponentEventHandler`2<GridPicker, Event> value);
    private void remove_Changed(ComponentEventHandler`2<GridPicker, Event> value);
    public bool get_IsDragging();
    public Int32[][] GetState();
    public GridPicker SetState(Int32[][] state);
    private void RaiseOnChange(Event ev);
    public GridPicker OnChange(ComponentEventHandler`2<GridPicker, Event> onChange);
    private void NextState(int column, int row, bool skipEvent);
    private void UpdateSingle(int column, int row, bool skipEvent);
    private void HoverState(int column, int row);
    private void ApplyDrag();
    private void UpdateAll();
    private void ConfigureButton(Button component, int column, int row);
    private void TryEndDrag();
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.HorizontalSeparator")]
public class Tesserae.HorizontalSeparator : object {
    private HTMLElement _container;
    private HTMLElement _separator;
    public Align Alignment { get; public set; }
    public string Text { get; public set; }
    public string Background { get; public set; }
    public HorizontalSeparator(string text);
    public HorizontalSeparator(IComponent component);
    public Align get_Alignment();
    public void set_Alignment(Align value);
    public string get_Text();
    public void set_Text(string value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public HorizontalSeparator SetContent(IComponent component);
    public HorizontalSeparator Primary();
    public HorizontalSeparator SetText(string text);
    public sealed virtual HTMLElement Render();
    public HorizontalSeparator Left();
    public HorizontalSeparator Center();
    public HorizontalSeparator Right();
}
[NameAttribute("tss.HorizontalSplitView")]
public class Tesserae.HorizontalSplitView : object {
    private HTMLElement _splitContainer;
    private string _splitterSize;
    private Raw _topComponent;
    private Raw _splitterComponent;
    private Raw _bottomComponent;
    private bool _resizable;
    private Action`1<int> _onResizeEnd;
    public HorizontalSplitView(UnitSize splitterSize);
    public HorizontalSplitView Resizable(Action`1<int> onResizeEnd);
    private void HookDragEvents(IComponent dragArea);
    public HorizontalSplitView Top(IComponent component, string background);
    public HorizontalSplitView Bottom(IComponent component, string background);
    public HorizontalSplitView PanelStyle();
    public HorizontalSplitView NotResizable();
    public HorizontalSplitView SplitInMiddle();
    public HorizontalSplitView Close();
    public HorizontalSplitView Open();
    public HorizontalSplitView TopIsSmaller(UnitSize topSize, UnitSize maxTopSize);
    public HorizontalSplitView BottomIsSmaller(UnitSize bottomSize, UnitSize maxBottomSize);
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.Hotkeys")]
public static class Tesserae.Hotkeys : object {
    public static bool Shift { get; }
    public static bool Ctrl { get; }
    public static bool Alt { get; }
    public static bool OptionKey { get; }
    public static bool Control { get; }
    public static bool Cmd { get; }
    public static bool Command { get; }
    public static bool get_Shift();
    public static bool get_Ctrl();
    public static bool get_Alt();
    public static bool get_OptionKey();
    public static bool get_Control();
    public static bool get_Cmd();
    public static bool get_Command();
    public static string GetScope();
    public static void SetScope(string scope);
    public static void DeleteScope(string scope);
    public static void Bind(string keys, Option option, Action`2<Event, Handler> action);
    public static void Unbind(string keys, Option option, Action`2<Event, Handler> action);
    public static void BindGlobal(string keys, Action`2<Event, Handler> action);
    public static void UnbindGlobal(string keys, Action`2<Event, Handler> action);
    public static bool IsPressed(int key);
    public static bool IsPressed(string key);
    public static bool IsPressed(char key);
    public static Int32[] GetPressedKeyCodes();
    public static void Filter(Func`2<Event, bool> onFilter);
    public static void ResetFilter();
}
[NameAttribute("tss.HSLColor")]
public class Tesserae.HSLColor : object {
    private static Random _rng;
    private double _hue;
    private double _saturation;
    private double _luminosity;
    private static double _scale;
    private static double _scaleHue;
    public double Hue { get; public set; }
    public double Saturation { get; public set; }
    public double Luminosity { get; public set; }
    public HSLColor(Color color);
    public HSLColor(double hue, double saturation, double luminosity);
    private static HSLColor();
    public double get_Hue();
    public void set_Hue(double value);
    public double get_Saturation();
    public void set_Saturation(double value);
    public double get_Luminosity();
    public void set_Luminosity(double value);
    private static double CheckRange(double value);
    public virtual string ToString();
    public string ToRGB();
    public string ToRGBA(float opacity);
    public string ToRGBvar();
    public string ToRGBAvar(float opacity);
    public string ToHex();
    public static HSLColor Random();
    public static Color op_Implicit(HSLColor hslColor);
    private static double GetColorComponent(double temp1, double temp2, double temp3);
    private static double MoveIntoRange(double temp3);
    private static double GetTemp2(HSLColor hslColor);
    public static HSLColor op_Implicit(Color color);
    public void SetRGB(byte red, byte green, byte blue);
}
[NameAttribute("tss.ICV")]
public interface Tesserae.ICanValidate {
    public string Error { get; public set; }
    public bool IsInvalid { get; public set; }
    public abstract virtual string get_Error();
    public abstract virtual void set_Error(string value);
    public abstract virtual bool get_IsInvalid();
    public abstract virtual void set_IsInvalid(bool value);
}
[NameAttribute("tss.ICVT")]
public interface Tesserae.ICanValidate`1 {
    public abstract virtual void Attach(ComponentEventHandler`1<T> handler);
}
[ExtensionAttribute]
[NameAttribute("tss.ICVX")]
public static class Tesserae.ICanValidateExtensions : object {
    [ExtensionAttribute]
public static T Error(T component, string error);
    [ExtensionAttribute]
public static T IsInvalid(T component, bool isInvalid);
}
[NameAttribute("tss.ICW")]
public interface Tesserae.ICanWrap {
    public bool CanWrap { get; public set; }
    public abstract virtual bool get_CanWrap();
    public abstract virtual void set_CanWrap(bool value);
}
[NameAttribute("tss.IC")]
public interface Tesserae.IComponent {
    public abstract virtual HTMLElement Render();
}
[ExtensionAttribute]
[NameAttribute("tss.ICX")]
public static class Tesserae.IComponentExtensions : object {
    [ExtensionAttribute]
public static T WhenMounted(T component, Action callback);
    [ExtensionAttribute]
public static T WhenMountedDelayed(T component, TimeSpan delay, Action callback, bool onlyIfStillMounted);
    [ExtensionAttribute]
public static T WhenRemoved(T component, Action callback);
    [ExtensionAttribute]
public static T AlignAuto(T component);
    [ExtensionAttribute]
public static T AlignStretch(T component);
    [ExtensionAttribute]
public static T AlignBaseline(T component);
    [ExtensionAttribute]
public static T AlignStart(T component);
    [ExtensionAttribute]
public static T AlignCenter(T component);
    [ExtensionAttribute]
public static T AlignEnd(T component);
    [ExtensionAttribute]
public static T Margin(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MarginLeft(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MarginRight(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MarginTop(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MarginBottom(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T Padding(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PaddingLeft(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PaddingRight(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PaddingTop(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PaddingBottom(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T WidthAuto(T component);
    [ExtensionAttribute]
public static T Width(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MinWidth(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MaxWidth(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T WidthStretch(T component);
    [ExtensionAttribute]
public static T HeightAuto(T component);
    [ExtensionAttribute]
public static T Height(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MinHeight(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MaxHeight(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T HeightStretch(T component);
    [ExtensionAttribute]
public static T MinHeightStretch(T component);
    [ExtensionAttribute]
public static T Stretch(T component);
    [ExtensionAttribute]
public static T Grow(T component, int grow);
    [ExtensionAttribute]
public static T Shrink(T component);
    [ExtensionAttribute]
public static T NoShrink(T component);
    [ExtensionAttribute]
public static T GridColumn(T component, int start, int end);
    [ExtensionAttribute]
public static T GridColumnStretch(T component);
    [ExtensionAttribute]
public static T GridRow(T component, int start, int end);
    [ExtensionAttribute]
public static T GridRowStretch(T component);
    [ExtensionAttribute]
public static T Collapse(T component);
    [ExtensionAttribute]
public static T FadeThenCollapse(T component);
    [ExtensionAttribute]
public static T Fade(T component);
    [ExtensionAttribute]
public static T Fade(T component, Func`1<Task> andThen);
    [ExtensionAttribute]
public static T Fade(T component, Action andThen);
    [ExtensionAttribute]
public static T LightFade(T component);
    [ExtensionAttribute]
public static T LightFade(T component, Func`1<Task> andThen);
    [ExtensionAttribute]
public static T LightFade(T component, Action andThen);
    [ExtensionAttribute]
public static T Show(T component);
    private static HTMLElement TryGetParentStackItem(HTMLElement el);
    [ExtensionAttribute]
public static T Tooltip(T component, string tooltipHtml, TooltipAnimation animation, TooltipPlacement placement, int delayShow, int delayHide, bool followCursor, int maxWidth, bool arrow, string theme, IComponent parent);
    [ExtensionAttribute]
public static T RemoveTooltip(T component);
    [ExtensionAttribute]
public static T Tooltip(T component, IComponent tooltip, bool interactive, TooltipAnimation animation, TooltipPlacement placement, int delayShow, int delayHide, bool appendToBody, bool followCursor, int maxWidth, bool hideOnClick, bool arrow, string theme, IComponent parent);
    [ExtensionAttribute]
public static T TabIndex(T component, int tabIndex);
    [ExtensionAttribute]
public static T Style(T component, Action`1<CSSStyleDeclaration> style);
    [ExtensionAttribute]
public static T SkipTab(T component);
    [ExtensionAttribute]
public static T W(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T H(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T W(T component, int pixels);
    [ExtensionAttribute]
public static T H(T component, int pixels);
    [ExtensionAttribute]
public static T S(T component);
    [ExtensionAttribute]
public static T WS(T component);
    [ExtensionAttribute]
public static T HS(T component);
    [ExtensionAttribute]
public static T M(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T ML(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MR(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MT(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T MB(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T P(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PL(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PR(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PT(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T PB(T component, UnitSize unitSize);
    [ExtensionAttribute]
public static T M(T component, int pixels);
    [ExtensionAttribute]
public static T ML(T component, int pixels);
    [ExtensionAttribute]
public static T MR(T component, int pixels);
    [ExtensionAttribute]
public static T MT(T component, int pixels);
    [ExtensionAttribute]
public static T MB(T component, int pixels);
    [ExtensionAttribute]
public static T P(T component, int pixels);
    [ExtensionAttribute]
public static T PL(T component, int pixels);
    [ExtensionAttribute]
public static T PR(T component, int pixels);
    [ExtensionAttribute]
public static T PT(T component, int pixels);
    [ExtensionAttribute]
public static T PB(T component, int pixels);
}
[NameAttribute("tss.Icon")]
public class Tesserae.Icon : object {
    private HTMLElement InnerElement;
    public string Foreground { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public string Title { get; public set; }
    public Icon(UIcons icon, UIconsWeight weight, TextSize size);
    public Icon(Emoji icon, TextSize size);
    public Icon SetIcon(Emoji icon, TextSize size);
    public Icon SetIcon(UIcons icon, UIconsWeight weight, TextSize size);
    public static string Transform(UIcons icon, UIconsWeight weight);
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public string get_Title();
    public void set_Title(string value);
    public Icon SetTitle(string title);
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.IconImageIcon")]
public class Tesserae.IconImageIcon : object {
    private HTMLElement _img;
    public IconImageIcon(string icon);
    public sealed virtual HTMLElement Render();
    public sealed virtual ISidebarIcon Clone();
}
[NameAttribute("tss.ICBTTC")]
public interface Tesserae.IContainer`2 {
}
[NameAttribute("tss.ICBT")]
public interface Tesserae.IContainerBase`1 {
    public abstract virtual void Add(TChild component);
    public abstract virtual void Clear();
    public abstract virtual void Replace(TChild newComponent, TChild oldComponent);
}
[ExtensionAttribute]
[NameAttribute("tss.ICTX")]
public static class Tesserae.IContainerExtensions : object {
    [ExtensionAttribute]
public static T Children(T container, IComponent first, IEnumerable`1<IComponent> children);
    [ExtensionAttribute]
public static T Children(T container, IEnumerable`1<IComponent> children, IComponent last);
    [ExtensionAttribute]
public static T Children(T container, IComponent first, IEnumerable`1<IComponent> children, IComponent last);
    [ExtensionAttribute]
public static T Children(T container, IComponent[] children);
    [ExtensionAttribute]
public static T Children(T container, IEnumerable`1<NavLink> children);
    [ExtensionAttribute]
public static T Children(T container, NavLink[] children);
    [ExtensionAttribute]
public static T Children(T container, IEnumerable`1<Choice> children);
    [ExtensionAttribute]
public static T Children(T container, Choice[] children);
}
[NameAttribute("tss.IDefer")]
public interface Tesserae.IDefer {
    public abstract virtual IDefer Debounce(int milliseconds);
    public abstract virtual void Refresh();
    public abstract virtual IDefer DoNotWaitForComponentMountingBeforeRendering();
}
[NameAttribute("tss.IDetailsListColumn")]
public interface Tesserae.IDetailsListColumn {
    public string SortingKey { get; }
    public UnitSize Width { get; }
    public UnitSize MaxWidth { get; }
    public bool IsRowHeader { get; }
    public bool EnableColumnSorting { get; }
    public bool EnableOnColumnClickEvent { get; }
    public abstract virtual string get_SortingKey();
    public abstract virtual UnitSize get_Width();
    public abstract virtual UnitSize get_MaxWidth();
    public abstract virtual bool get_IsRowHeader();
    public abstract virtual bool get_EnableColumnSorting();
    public abstract virtual bool get_EnableOnColumnClickEvent();
    public abstract virtual void OnColumnClick();
}
[NameAttribute("tss.IDetailsListItem")]
public interface Tesserae.IDetailsListItem {
    public bool EnableOnListItemClickEvent { get; }
    public abstract virtual bool get_EnableOnListItemClickEvent();
    public abstract virtual void OnListItemClick(int listItemIndex);
    public abstract virtual IEnumerable`1<IComponent> Render(IList`1<IDetailsListColumn> columns, Func`3<IDetailsListColumn, Func`1<IComponent>, IComponent> createGridCellExpression);
}
[NameAttribute("tss.IDetailsListItemT")]
public interface Tesserae.IDetailsListItem`1 {
    public abstract virtual int CompareTo(TDetailsListItem other, string columnSortingKey);
}
[NameAttribute("tss.IHBG")]
public interface Tesserae.IHasBackgroundColor {
    public string Background { get; public set; }
    public abstract virtual string get_Background();
    public abstract virtual void set_Background(string value);
}
public interface Tesserae.IHasClickHandler {
    public abstract virtual void OnClickBase(ComponentEventHandler`2<IComponent, MouseEvent> onClick, bool clearPrevious);
    public abstract virtual void OnContextMenuBase(ComponentEventHandler`2<IComponent, MouseEvent> onContextMenu, bool clearPrevious);
}
[NameAttribute("tss.IHFG")]
public interface Tesserae.IHasForegroundColor {
    public string Foreground { get; public set; }
    public abstract virtual string get_Foreground();
    public abstract virtual void set_Foreground(string value);
}
[NameAttribute("tss.IHMP")]
public interface Tesserae.IHasMarginPadding {
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    public abstract virtual string get_Margin();
    public abstract virtual void set_Margin(string value);
    public abstract virtual string get_Padding();
    public abstract virtual void set_Padding(string value);
}
[ExtensionAttribute]
[NameAttribute("tss.IHTWOX")]
public static class Tesserae.IHaveTextWrappingOptionsExtensions : object {
    [ExtensionAttribute]
public static T SetCanWrap(T component, bool canWrap);
}
[NameAttribute("tss.Image")]
public class Tesserae.Image : ComponentBase`2<Image, HTMLImageElement> {
    [DebuggerBrowsableAttribute]
private bool <PropagateToStackItemParent>k__BackingField;
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; private set; }
    public string Source { get; public set; }
    public string Cursor { get; public set; }
    public string Background { get; public set; }
    public Image(string source, string fallback);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    private void set_PropagateToStackItemParent(bool value);
    public string get_Source();
    public void set_Source(string value);
    public string get_Cursor();
    public void set_Cursor(string value);
    public virtual HTMLElement Render();
    public Image Position(string objectPosition);
    public Image Contain();
    public Image Cover();
    public Image Fill();
    public Image NoFit();
    public Image ScaleDown();
    public Image Circle();
    public Image Circle(int pixels);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
}
[NameAttribute("tss.ImageIcon")]
public class Tesserae.ImageIcon : object {
    private HTMLImageElement _img;
    public ImageIcon(string source, string backgroundColor);
    public sealed virtual HTMLElement Render();
    public sealed virtual ISidebarIcon Clone();
    public void SetImageSrc(string src);
}
[NameAttribute("tss.InfiniteScrollingList")]
public class Tesserae.InfiniteScrollingList : object {
    private Grid _grid;
    private Stack _stack;
    private UnitSize _maxStackItemSize;
    private HTMLDivElement _container;
    private Func`1<IComponent> _emptyListMessageGenerator;
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public InfiniteScrollingList(Func`1<IComponent[]> getNextItemPage, UnitSize[] columns);
    public InfiniteScrollingList(IComponent[] items, Func`1<IComponent[]> getNextItemPage, UnitSize[] columns);
    public InfiniteScrollingList(Func`1<Task`1<IComponent[]>> getNextItemPage, UnitSize[] columns);
    public InfiniteScrollingList(IComponent[] items, Func`1<Task`1<IComponent[]>> getNextItemPage, UnitSize[] columns);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    private void AddItems(IComponent[] items);
    public InfiniteScrollingList WithEmptyMessage(Func`1<IComponent> emptyListMessageGenerator);
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.Input")]
public abstract class Tesserae.Input`1 : ComponentBase`2<TInput, HTMLInputElement> {
    private HTMLDivElement _container;
    private HTMLSpanElement _errorSpan;
    private SettableObservable`1<string> _observable;
    public string Text { get; public set; }
    public bool IsEnabled { get; public set; }
    public string Error { get; public set; }
    public bool IsInvalid { get; public set; }
    public bool IsRequired { get; public set; }
    unknown int TabIndex {public set; }
    protected Input`1(string type, string defaultText);
    public void Reset();
    public string get_Text();
    public void set_Text(string value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual bool get_IsInvalid();
    public sealed virtual void set_IsInvalid(bool value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public sealed virtual void set_TabIndex(int value);
    public sealed virtual void Attach(ComponentEventHandler`1<TInput> handler);
    public TInput SetText(string text);
    public TInput ClearText();
    public TInput Disabled(bool value);
    public TInput NoSpellCheck();
    public TInput Required();
    public TInput Focus();
    public sealed virtual IObservable`1<string> AsObservable();
    public virtual HTMLElement Render();
    private void <.ctor>b__3_0(TInput _, Event __);
    private void <.ctor>b__3_1(TInput _, Event __);
    private void <Focus>b__28_0();
}
[NameAttribute("tss.IOBS")]
public interface Tesserae.IObservable`1 {
    public T Value { get; }
    public abstract virtual void Observe(ValueChanged`1<T> valueGetter);
    public abstract virtual void ObserveFutureChanges(ValueChanged`1<T> valueGetter);
    public abstract virtual void StopObserving(ValueChanged`1<T> valueGetter);
    public abstract virtual T get_Value();
}
[NameAttribute("tss.IObservableComponent")]
public interface Tesserae.IObservableComponent`1 {
    public abstract virtual IObservable`1<T> AsObservable();
}
[NameAttribute("tss.IObservableListComponent")]
public interface Tesserae.IObservableListComponent`1 {
    public abstract virtual IObservable`1<IReadOnlyList`1<T>> AsObservable();
}
[NameAttribute("tss.IPickerItem")]
public interface Tesserae.IPickerItem {
    public string Name { get; }
    public bool IsSelected { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
    public abstract virtual IComponent Render();
}
[ExtensionAttribute]
[NameAttribute("tss.IPickerItemX")]
public static class Tesserae.IPickerItemExtensions : object {
    [ExtensionAttribute]
public static T SelectedIf(T source, bool shouldSelect);
}
[NameAttribute("tss.ISearchableGroupedItem")]
public interface Tesserae.ISearchableGroupedItem {
    public string Group { get; }
    public abstract virtual string get_Group();
}
[NameAttribute("tss.ISearchableItem")]
public interface Tesserae.ISearchableItem {
    public abstract virtual bool IsMatch(string searchTerm);
    public abstract virtual IComponent Render();
}
public interface Tesserae.ISidebarIcon {
    public abstract virtual ISidebarIcon Clone();
}
public interface Tesserae.ISidebarItem {
    public bool IsSelected { get; public set; }
    public IComponent CurrentRendered { get; }
    public string Identifier { get; }
    public abstract virtual IComponent RenderClosed();
    public abstract virtual IComponent RenderOpen();
    public abstract virtual bool get_IsSelected();
    public abstract virtual void set_IsSelected(bool value);
    public abstract virtual IComponent get_CurrentRendered();
    public abstract virtual void Show();
    public abstract virtual void Collapse();
    public abstract virtual string get_Identifier();
    public abstract virtual void AddGroupIdentifier(string groupIdentifier);
}
[NameAttribute("tss.ISCS")]
public interface Tesserae.ISpecialCaseStyling {
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public abstract virtual HTMLElement get_StylingContainer();
    public abstract virtual bool get_PropagateToStackItemParent();
}
[NameAttribute("tss.ITAB")]
public interface Tesserae.ITabIndex {
    unknown int TabIndex {public set; }
    public abstract virtual void set_TabIndex(int value);
}
[NameAttribute("tss.ItemAlign")]
[EnumAttribute]
public enum Tesserae.ItemAlign : Enum {
    public int value__;
    [NameAttribute("auto")]
public static ItemAlign Auto;
    [NameAttribute("stretch")]
public static ItemAlign Stretch;
    [NameAttribute("baseline")]
public static ItemAlign Baseline;
    [NameAttribute("flex-start")]
public static ItemAlign Start;
    [NameAttribute("center")]
public static ItemAlign Center;
    [NameAttribute("flex-end")]
public static ItemAlign End;
}
[NameAttribute("tss.ItemJustify")]
[EnumAttribute]
public enum Tesserae.ItemJustify : Enum {
    public int value__;
    [NameAttribute("space-between")]
public static ItemJustify Between;
    [NameAttribute("space-around")]
public static ItemJustify Around;
    [NameAttribute("space-evenly")]
public static ItemJustify Evenly;
    [NameAttribute("flex-start")]
public static ItemJustify Start;
    [NameAttribute("center")]
public static ItemJustify Center;
    [NameAttribute("flex-end")]
public static ItemJustify End;
}
[NameAttribute("tss.ItemsList")]
public class Tesserae.ItemsList : object {
    private Grid _grid;
    private Stack _stack;
    private UnitSize _maxStackItemSize;
    private DeferedComponent _defered;
    private Func`1<IComponent> _emptyListMessageGenerator;
    [DebuggerBrowsableAttribute]
private ObservableList`1<IComponent> <Items>k__BackingField;
    public ObservableList`1<IComponent> Items { get; }
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public ItemsList(IComponent[] items, UnitSize[] columns);
    public ItemsList(ObservableList`1<IComponent> items, UnitSize[] columns);
    public ObservableList`1<IComponent> get_Items();
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public ItemsList WithEmptyMessage(Func`1<IComponent> emptyListMessageGenerator);
    public sealed virtual HTMLElement Render();
    private Task`1<IComponent> <.ctor>b__13_0(IReadOnlyList`1<IComponent> observedItems);
    private IComponent <.ctor>b__13_1(IComponent i);
}
[NameAttribute("tss.ITF")]
public interface Tesserae.ITextFormating {
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public abstract virtual TextSize get_Size();
    public abstract virtual void set_Size(TextSize value);
    public abstract virtual TextWeight get_Weight();
    public abstract virtual void set_Weight(TextWeight value);
    public abstract virtual TextAlign get_TextAlign();
    public abstract virtual void set_TextAlign(TextAlign value);
}
[ExtensionAttribute]
[NameAttribute("tss.ITFX")]
public static class Tesserae.ITextFormatingExtensions : object {
    [ExtensionAttribute]
public static T SetTextSize(T hasTextSize, TextSize textSize);
    [ExtensionAttribute]
public static T SetTextWeight(T hasTextSize, TextWeight textWeight);
    [ExtensionAttribute]
public static T SetTextAlign(T hasTextSize, TextAlign textAlign);
    [ExtensionAttribute]
public static T Tiny(T hasTextSize);
    [ExtensionAttribute]
public static T XSmall(T hasTextSize);
    [ExtensionAttribute]
public static T Small(T hasTextSize);
    [ExtensionAttribute]
public static T SmallPlus(T hasTextSize);
    [ExtensionAttribute]
public static T Medium(T hasTextSize);
    [ExtensionAttribute]
public static T MediumPlus(T hasTextSize);
    [ExtensionAttribute]
public static T Large(T hasTextSize);
    [ExtensionAttribute]
public static T XLarge(T hasTextSize);
    [ExtensionAttribute]
public static T XXLarge(T hasTextSize);
    [ExtensionAttribute]
public static T Mega(T hasTextSize);
    [ExtensionAttribute]
public static T Regular(T hasTextSize);
    [ExtensionAttribute]
public static T SemiBold(T hasTextSize);
    [ExtensionAttribute]
public static T Bold(T hasTextSize);
    [ExtensionAttribute]
public static T TextLeft(T hasTextSize);
    [ExtensionAttribute]
public static T TextCenter(T hasTextSize);
    [ExtensionAttribute]
public static T TextRight(T hasTextSize);
    internal static TextSize FromClassList(HTMLElement element, TextSize defaultValue);
    internal static TextAlign FromClassList(HTMLElement element, TextAlign defaultValue);
    internal static TextWeight FromClassList(HTMLElement element, TextWeight defaultValue);
}
[NameAttribute("tss.Label")]
public class Tesserae.Label : TextBlock {
    private static int _labelForId;
    private HTMLLabelElement _label;
    private HTMLDivElement _content;
    private static UInt32 _callback;
    private static Dictionary`2<HTMLElement, Action> _pendingCallbacks;
    public bool IsRequired { get; public set; }
    public bool IsInline { get; public set; }
    unknown IComponent Content {public set; }
    private HTMLElement Tesserae.ISpecialCaseStyling.StylingContainer { get; }
    private bool Tesserae.ISpecialCaseStyling.PropagateToStackItemParent { get; }
    public Label(string text);
    public Label(IComponent component);
    private static Label();
    public virtual bool get_IsRequired();
    public virtual void set_IsRequired(bool value);
    public bool get_IsInline();
    public void set_IsInline(bool value);
    public void set_Content(IComponent value);
    private sealed virtual override HTMLElement Tesserae.ISpecialCaseStyling.get_StylingContainer();
    private sealed virtual override bool Tesserae.ISpecialCaseStyling.get_PropagateToStackItemParent();
    public Label SetContent(IComponent content);
    public Label Inline();
    public Label SetMinLabelWidth(UnitSize unitSize);
    public Label WithContentMargin();
    public Label AlignLabelTop();
    public Label AutoWidth(int nestingLevels, bool alignRight);
    private static void TriggerAll();
    private static void AutoSizeChildrenLabels(HTMLElement parent, int nestingLevels);
}
[NameAttribute("tss.Layer")]
public class Tesserae.Layer : Layer`1<Layer> {
}
[NameAttribute("tss.LayerT")]
public abstract class Tesserae.Layer`1 : ComponentBase`2<T, HTMLDivElement> {
    protected IComponent _content;
    protected HTMLDivElement _contentHtml;
    protected HTMLElement _renderedContent;
    private LayerHost _host;
    private bool _isVisible;
    private bool _isTransparent;
    private Action`1<MouseEvent> _onLayerClick;
    public LayerHost Host { get; public set; }
    public IComponent Content { get; public set; }
    public bool IsTopmost { get; }
    public bool IsVisible { get; public set; }
    public bool IsTransparent { get; public set; }
    public LayerHost get_Host();
    public void set_Host(LayerHost value);
    public virtual IComponent get_Content();
    public virtual void set_Content(IComponent value);
    public bool get_IsTopmost();
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public bool get_IsTransparent();
    public void set_IsTransparent(bool value);
    public virtual HTMLElement Render();
    public virtual T Show();
    public virtual void Hide(Action onHidden);
    public void OnBackgroundClick(Action`1<MouseEvent> action);
    protected virtual HTMLElement BuildRenderedContent();
    private void <Show>b__23_0(double _);
    private void <Show>b__23_1(double _);
    private void <BuildRenderedContent>b__26_0(MouseEvent e);
}
[ExtensionAttribute]
[NameAttribute("tss.LayerExtensions")]
public static class Tesserae.LayerExtensions : object {
    [ExtensionAttribute]
public static T Content(T layer, IComponent content);
    [ExtensionAttribute]
public static T Visible(T layer, bool visible);
    [ExtensionAttribute]
public static T Host(T layer, LayerHost host);
}
[NameAttribute("tss.LayerHost")]
public class Tesserae.LayerHost : ComponentBase`2<Layer, HTMLDivElement> {
    public virtual HTMLElement Render();
}
[NameAttribute("tss.Layers")]
public static class Tesserae.Layers : object {
    private static int BaseZIndex;
    public static string PushLayer(HTMLElement element);
    internal static int CurrentZIndex();
    public static string AboveCurrent();
}
[NameAttribute("tss.Link")]
public class Tesserae.Link : object {
    private HTMLAnchorElement _anchor;
    private string _features;
    public string Target { get; public set; }
    public string URL { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public Link(string url, IComponent component, bool noUnderline);
    public string get_Target();
    public void set_Target(string value);
    public string get_URL();
    public void set_URL(string value);
    public sealed virtual HTMLElement Render();
    public Link OpenInNewTab();
    public Link AsWindow(string features);
    public Link OnClick(Action onClicked);
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    private void <AsWindow>b__11_0();
}
[NameAttribute("tss.ListPageCache")]
public class Tesserae.ListPageCache`1 : ComponentCacheBase`1<TComponent> {
    private Func`2<int, HTMLElement> _createPageHtmlElementExpression;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<ValueTuple`2<int, TComponent>, HTMLElement> _afterComponentRetrievedExpression;
    private Dictionary`2<int, HTMLElement> _pageCache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<List`1<ValueTuple`2<int, TComponent>>> _pages;
    [DebuggerBrowsableAttribute]
private int <RowsPerPage>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <ComponentsPerPage>k__BackingField;
    public int RowsPerPage { get; }
    public int ComponentsPerPage { get; }
    public int PagesCount { get; }
    public int RowsCount { get; }
    public ListPageCache`1(int rowsPerPage, int columnsPerRow, Func`2<int, HTMLElement> createPageHtmlElementExpression, Func`2<ValueTuple`2<int, TComponent>, HTMLElement> afterComponentRetrievedExpression);
    public int get_RowsPerPage();
    public int get_ComponentsPerPage();
    public int get_PagesCount();
    public int get_RowsCount();
    public ListPageCache`1<TComponent> AddComponents(IEnumerable`1<TComponent> components);
    public HTMLElement RetrievePageFromCache(int pageNumberToRetrieve);
    public IEnumerable`1<HTMLElement> RetrievePagesFromCache(IEnumerable`1<int> rangeOfPageNumbersToRetrieve);
    public IEnumerable`1<HTMLElement> RetrieveAllPagesFromCache();
    public ListPageCache`1<TComponent> Clear();
    private void AddPages(int componentNumberToPageFrom);
    private List`1<ValueTuple`2<int, TComponent>> GetComponentsForPage(int pageNumber);
}
[NameAttribute("tss.Masonry")]
public class Tesserae.Masonry : object {
    private string _percent;
    private HTMLElement _masonry;
    private object _masonryObj;
    private int _gutter;
    private double _timeout;
    public string Background { get; public set; }
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public Masonry(int columns, int gutter);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Margin();
    public sealed virtual void set_Margin(string value);
    public sealed virtual string get_Padding();
    public sealed virtual void set_Padding(string value);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public sealed virtual void Add(IComponent component);
    private void Layout();
    internal HTMLElement GetItem(IComponent component, bool forceAdd);
    internal static void CopyStylesDefinedWithExtension(HTMLElement from, HTMLElement to);
    public virtual void Clear();
    public sealed virtual void Replace(IComponent newComponent, IComponent oldComponent);
    public void Remove(IComponent component);
    public virtual HTMLElement Render();
    private void <.ctor>b__18_0();
    private void <Layout>b__20_0(Object[] _);
    private void <GetItem>b__21_0(CSSStyleDeclaration s);
    internal static bool <CopyStylesDefinedWithExtension>g__has|22_0(string att, <>c__DisplayClass22_0& );
}
[NameAttribute("tss.Modal")]
public class Tesserae.Modal : Layer`1<Modal> {
    [DebuggerBrowsableAttribute]
private OnShowHandler Shown;
    [DebuggerBrowsableAttribute]
private OnHideHandler Hidden;
    private HTMLElement _closeButton;
    private HTMLElement _modalHeader;
    private HTMLElement _modalFooter;
    private HTMLElement _modalOverlay;
    private HTMLDivElement _modalContent;
    private HTMLElement _modalLeftHeaderCommands;
    private HTMLElement _modalHeaderCommands;
    private HTMLElement _modalLeftFooterCommands;
    private HTMLElement _modalFooterCommands;
    private HTMLElement _modalHeaderContents;
    private HTMLElement _modalFooterContents;
    private HTMLDivElement _modal;
    private bool _isDragged;
    private TranslationPoint _startPoint;
    [DebuggerBrowsableAttribute]
private bool <AnimateOnShow>k__BackingField;
    public bool AnimateOnShow { get; public set; }
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public string Background { get; public set; }
    public IComponent Content { get; public set; }
    public bool CanLightDismiss { get; public set; }
    public bool IsDark { get; public set; }
    public bool IsDraggable { get; public set; }
    public bool IsNonBlocking { get; public set; }
    public bool WillShowCloseButton { get; public set; }
    public Modal(IComponent header);
    private void add_Shown(OnShowHandler value);
    private void remove_Shown(OnShowHandler value);
    private void add_Hidden(OnHideHandler value);
    private void remove_Hidden(OnHideHandler value);
    public bool get_AnimateOnShow();
    public void set_AnimateOnShow(bool value);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public Modal SetHeader(IComponent header);
    public Modal SetFooter(IComponent footer);
    public Modal SetHeaderCommands(IComponent[] commands);
    public Modal SetFooterCommands(IComponent[] commands);
    public Modal SetLeftHeaderCommands(IComponent[] commands);
    public Modal SetLeftFooterCommands(IComponent[] commands);
    public Modal ContentHeight(UnitSize height);
    public Modal NoHeader();
    public Modal NoFooter();
    public Modal NoAnimation();
    public virtual IComponent get_Content();
    public virtual void set_Content(IComponent value);
    public bool get_CanLightDismiss();
    public void set_CanLightDismiss(bool value);
    public bool get_IsDark();
    public void set_IsDark(bool value);
    public bool get_IsDraggable();
    public void set_IsDraggable(bool value);
    public bool get_IsNonBlocking();
    public void set_IsNonBlocking(bool value);
    public IComponent ShowEmbedded();
    public bool get_WillShowCloseButton();
    public void set_WillShowCloseButton(bool value);
    public Modal CenterContent();
    public Modal NoPadding();
    public Modal NoContentPadding();
    public Modal ShowCloseButton();
    public Modal HideCloseButton();
    public Modal LightDismiss();
    public Modal NoLightDismiss();
    public Modal Dark();
    public Modal Draggable();
    public Modal NonBlocking();
    public Modal Blocking();
    public void ShowAt(UnitSize fromTop, UnitSize fromLeft, UnitSize fromRight, UnitSize fromBottom);
    public virtual Modal Show();
    public Task ShowAsync();
    private void DoShow();
    public Modal OnHide(OnHideHandler onHide);
    public Modal OnShow(OnShowHandler onShow);
    public void RaiseOnHide();
    public void RaiseOnShow();
    public virtual void Hide(Action onHidden);
    protected virtual HTMLElement BuildRenderedContent();
    private void OnCloseClick(object ev);
    private void OnDragMouseMove(object ev);
    private void OnDragMouseUp(object ev);
    private void OnDragMouseDown(object ev);
    private void <.ctor>b__33_0(HTMLElement el);
    private void <.ctor>b__33_3(MouseEvent e);
    private void <.ctor>b__33_2(Modal _, KeyboardEvent e);
}
[NameAttribute("tss.MomentPickerBase")]
public abstract class Tesserae.MomentPickerBase`2 : Input`1<TMomentPicker> {
    protected TMoment Moment { get; }
    public TMoment Max { get; public set; }
    public TMoment Min { get; public set; }
    public int Step { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public string Background { get; public set; }
    public string Foreground { get; public set; }
    protected MomentPickerBase`2(string type, string defaultText);
    protected TMoment get_Moment();
    public TMoment get_Max();
    public void set_Max(TMoment value);
    public TMoment get_Min();
    public void set_Min(TMoment value);
    public int get_Step();
    public void set_Step(int value);
    public TMomentPicker SetMax(TMoment max);
    public TMomentPicker SetMin(TMoment min);
    public TMomentPicker SetStep(int step);
    protected abstract virtual string FormatMoment(TMoment moment);
    protected abstract virtual TMoment FormatMoment(string moment);
    public virtual TextSize get_Size();
    public virtual void set_Size(TextSize value);
    public virtual TextWeight get_Weight();
    public virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NameAttribute("tss.MonthPicker")]
public class Tesserae.MonthPicker : MomentPickerBase`2<MonthPicker, ValueTuple`2<int, int>> {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<int, int> Month { get; }
    public MonthPicker(Nullable`1<ValueTuple`2<int, int>> monthAndYear);
    public ValueTuple`2<int, int> get_Month();
    public MonthPicker WithBrowserFallback();
    private static string FormatMonth(ValueTuple`2<int, int> monthAndYear);
    protected virtual string FormatMoment(ValueTuple`2<int, int> monthAndYear);
    protected virtual ValueTuple`2<int, int> FormatMoment(string monthAndYear);
}
[NameAttribute("tss.Nav")]
public class Tesserae.Nav : ComponentBase`2<Nav, HTMLUListElement> {
    [DebuggerBrowsableAttribute]
private NavLink <SelectedLink>k__BackingField;
    private List`1<NavLink> _children;
    public NavLink SelectedLink { get; private set; }
    public string Background { get; public set; }
    public NavLink get_SelectedLink();
    private void set_SelectedLink(NavLink value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public virtual HTMLElement Render();
    public sealed virtual void Add(NavLink component);
    public sealed virtual void Clear();
    public sealed virtual void Replace(NavLink newComponent, NavLink oldComponent);
    public Nav Links(NavLink[] children);
    public Nav InlineContent(IComponent content, bool disableMouseEvents);
    private void OnNavLinkSelected(NavLink sender);
    public Nav Compact();
    public Nav NoLinkStyle();
    public Nav SelectMarkerOnRight();
    private void <Links>b__13_0(NavLink x);
}
[NameAttribute("tss.NumberPicker")]
public class Tesserae.NumberPicker : Input`1<NumberPicker> {
    public int Value { get; }
    public int Max { get; public set; }
    public int Min { get; public set; }
    public int Step { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public string Background { get; public set; }
    public string Foreground { get; public set; }
    public NumberPicker(int defaultValue);
    public int get_Value();
    public int get_Max();
    public void set_Max(int value);
    public int get_Min();
    public void set_Min(int value);
    public int get_Step();
    public void set_Step(int value);
    public NumberPicker SetMax(int max);
    public NumberPicker SetMin(int min);
    public NumberPicker SetStep(int step);
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
}
[DefaultMemberAttribute("Item")]
[NameAttribute("tss.ObservableDictionary")]
public class Tesserae.ObservableDictionary`2 : object {
    [DebuggerBrowsableAttribute]
private ValueChanged`1<IReadOnlyDictionary`2<TKey, TValue>> ValueChanged;
    private Dictionary`2<TKey, TValue> _dictionary;
    private bool _shouldHookNestedObservables;
    private double _refreshTimeout;
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IReadOnlyDictionary`2<TKey, TValue> Value { get; }
    public ObservableDictionary`2(IEqualityComparer`1<TKey> keyComparer, bool shouldHook);
    public ObservableDictionary`2(Dictionary`2<TKey, TValue> values, bool shouldHook);
    public ObservableDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> values, IEqualityComparer`1<TKey> keyComparer, bool shouldHook);
    private void add_ValueChanged(ValueChanged`1<IReadOnlyDictionary`2<TKey, TValue>> value);
    private void remove_ValueChanged(ValueChanged`1<IReadOnlyDictionary`2<TKey, TValue>> value);
    public sealed virtual void Observe(ValueChanged`1<IReadOnlyDictionary`2<TKey, TValue>> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<IReadOnlyDictionary`2<TKey, TValue>> valueGetter);
    private void Observe(ValueChanged`1<IReadOnlyDictionary`2<TKey, TValue>> valueGetter, bool callbackImmediately);
    public sealed virtual void StopObserving(ValueChanged`1<IReadOnlyDictionary`2<TKey, TValue>> valueGetter);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IReadOnlyDictionary`2<TKey, TValue> get_Value();
    public void AddRange(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private void HookValue(TValue v);
    private void UnhookValue(TValue v);
    private void RaiseOnValueChanged();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void <RaiseOnValueChanged>b__38_0(Object[] _);
}
[NameAttribute("tss.ObservableEvent")]
public static class Tesserae.ObservableEvent : object {
}
[DefaultMemberAttribute("Item")]
[NameAttribute("tss.ObservableList")]
public class Tesserae.ObservableList`1 : object {
    [DebuggerBrowsableAttribute]
private ValueChanged`1<IReadOnlyList`1<T>> ValueChanged;
    private List`1<T> _list;
    private bool _shouldHookNestedObservables;
    private double _refreshTimeout;
    private double _refreshDelay;
    public double Delay { get; public set; }
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IReadOnlyList`1<T> Value { get; }
    public ObservableList`1(T[] initialValues);
    public ObservableList`1(bool shouldHook, T[] initialValues);
    private void add_ValueChanged(ValueChanged`1<IReadOnlyList`1<T>> value);
    private void remove_ValueChanged(ValueChanged`1<IReadOnlyList`1<T>> value);
    public double get_Delay();
    public void set_Delay(double value);
    public sealed virtual void Observe(ValueChanged`1<IReadOnlyList`1<T>> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<IReadOnlyList`1<T>> valueGetter);
    private void Observe(ValueChanged`1<IReadOnlyList`1<T>> valueGetter, bool callbackImmediately);
    public sealed virtual void StopObserving(ValueChanged`1<IReadOnlyList`1<T>> valueGetter);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    private void RaiseOnValueChanged();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IReadOnlyList`1<T> get_Value();
    public sealed virtual void Add(T item);
    public void AddRange(IEnumerable`1<T> enumerable);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public void Update(int index, T item);
    public int RemoveAll(Func`2<T, bool> match);
    public sealed virtual bool Remove(T item);
    public sealed virtual void RemoveAt(int index);
    private void HookValue(T v);
    private void UnhookValue(T v);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void <RaiseOnValueChanged>b__19_0(Object[] _);
}
[NameAttribute("tss.OverflowSet")]
public class Tesserae.OverflowSet : object {
    private string _expandIcon;
    private HTMLElement _childContainer;
    private ResizeObserver _resizeObserver;
    private int _maximumItemsToDisplay;
    private int _overflowIndex;
    private bool _cacheSizes;
    private double _cachedFullWidth;
    private HTMLElement _chevronToUseAsButton;
    private Dictionary`2<HTMLElement, double> _cachedSizes;
    public int MaximumItemsToDisplay { get; public set; }
    public int OverflowIndex { get; public set; }
    public bool IsSmall { get; public set; }
    public int get_MaximumItemsToDisplay();
    public void set_MaximumItemsToDisplay(int value);
    public int get_OverflowIndex();
    public void set_OverflowIndex(int value);
    public bool get_IsSmall();
    public void set_IsSmall(bool value);
    private void Recompute();
    public OverflowSet JustifyContent(ItemJustify justify);
    private void UpdateChildrenSizes();
    public sealed virtual void Clear();
    public sealed virtual void Replace(IComponent newComponent, IComponent oldComponent);
    public sealed virtual void Add(IComponent component);
    public OverflowSet Items(IComponent[] children);
    public OverflowSet DisableSizeCache();
    public OverflowSet SetOverflowIndex(int i);
    public OverflowSet Small();
    public sealed virtual HTMLElement Render();
    internal static bool <Recompute>g__isChevron|19_0(HTMLElement e);
    internal static IComponent <Recompute>g__clone|19_1(Node node);
    private void <Items>b__25_0(IComponent x);
}
[NameAttribute("tss.Panel")]
public class Tesserae.Panel : Layer`1<Panel> {
    [DebuggerBrowsableAttribute]
private OnHideHandler HidePanel;
    private IComponent _footer;
    private HTMLElement _panel;
    private HTMLElement _panelOverlay;
    private HTMLElement _panelContent;
    private HTMLElement _panelFooter;
    private HTMLElement _panelCommand;
    private HTMLElement _closeButton;
    private HTMLElement _panelTitle;
    public IComponent Content { get; public set; }
    public IComponent Footer { get; public set; }
    public PanelSize Size { get; public set; }
    public PanelSide Side { get; public set; }
    public bool CanLightDismiss { get; public set; }
    public bool IsDark { get; public set; }
    public bool IsNonBlocking { get; public set; }
    public bool ShowCloseButton { get; public set; }
    public string Background { get; public set; }
    public Panel(string title);
    public Panel(IComponent title);
    private void add_HidePanel(OnHideHandler value);
    private void remove_HidePanel(OnHideHandler value);
    public virtual IComponent get_Content();
    public virtual void set_Content(IComponent value);
    public IComponent get_Footer();
    public void set_Footer(IComponent value);
    public PanelSize get_Size();
    public void set_Size(PanelSize value);
    public PanelSide get_Side();
    public void set_Side(PanelSide value);
    public bool get_CanLightDismiss();
    public void set_CanLightDismiss(bool value);
    public bool get_IsDark();
    public void set_IsDark(bool value);
    public bool get_IsNonBlocking();
    public void set_IsNonBlocking(bool value);
    public bool get_ShowCloseButton();
    public void set_ShowCloseButton(bool value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    protected virtual HTMLElement BuildRenderedContent();
    public virtual Panel Show();
    public Panel OnHide(OnHideHandler onHide);
    public virtual void Hide(Action onHidden);
    private void OnCloseClick(object ev);
    public Panel HideCloseButton();
    public Panel SetFooter(IComponent footer);
    public Panel Small();
    public Panel Medium();
    public Panel Large();
    public Panel LargeFixed();
    public Panel ExtraLarge();
    public Panel FullWidth();
    public Panel Far();
    public Panel Near();
    public Panel LightDismiss();
    public Panel NoLightDismiss();
    public Panel Dark();
    public Panel NonBlocking();
    public Panel Blocking();
    private void <.ctor>b__13_0(HTMLElement el);
    private void <.ctor>b__13_1(MouseEvent e);
}
[DefaultMemberAttribute("Item")]
[NameAttribute("tss.Parameters")]
public class Tesserae.Parameters : object {
    private Dictionary`2<string, string> _parameters;
    public string Item { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<string> Values { get; }
    public int Count { get; }
    public Parameters(Dictionary`2<string, string> parameters);
    public string get_Item(string key);
    public IEnumerable`1<string> get_Keys();
    public IEnumerable`1<string> get_Values();
    public int get_Count();
    public bool ContainsKey(string key);
    public bool TryGetValue(string key, String& value);
    public bool SameAs(Parameters other);
    public IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    public Parameters With(string key, string value);
    public Parameters Remove(string key);
    public string ToQueryString();
    public Parameters Clone();
}
[NameAttribute("tss.Picker")]
public class Tesserae.Picker`1 : object {
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<Picker`1<TPickerItem>, ItemPickedEvent<TPickerItem>> SelectedItem;
    private ObservableList`1<TPickerItem> _pickerItems;
    private HTMLElement _container;
    private TextBox _textBox;
    private SuggestionsLayer<TPickerItem> _suggestionsLayer;
    private bool _renderSelectionsInline;
    private HTMLElement _selectionsElement;
    private double _debounce;
    private double _debounceTimeout;
    private double _hideSugestionsTimeout;
    private HTMLElement _textBoxElement;
    [DebuggerBrowsableAttribute]
private Nullable`1<int> <MaximumAllowedSelections>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <DuplicateSelectionsAllowed>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <SuggestionsTolerance>k__BackingField;
    unknown int TabIndex {public set; }
    public IEnumerable`1<TPickerItem> PickerItems { get; }
    public IEnumerable`1<TPickerItem> SelectedPickerItems { get; }
    public IEnumerable`1<TPickerItem> UnselectedPickerItems { get; }
    public Nullable`1<int> MaximumAllowedSelections { get; }
    public bool DuplicateSelectionsAllowed { get; }
    public int SuggestionsTolerance { get; }
    public Picker`1(int maximumAllowedSelections, bool duplicateSelectionsAllowed, int suggestionsTolerance, bool renderSelectionsInline, string suggestionsTitleText);
    private void add_SelectedItem(ComponentEventHandler`2<Picker`1<TPickerItem>, ItemPickedEvent<TPickerItem>> value);
    private void remove_SelectedItem(ComponentEventHandler`2<Picker`1<TPickerItem>, ItemPickedEvent<TPickerItem>> value);
    public sealed virtual void set_TabIndex(int value);
    public sealed virtual IObservable`1<IReadOnlyList`1<TPickerItem>> AsObservable();
    public IEnumerable`1<TPickerItem> get_PickerItems();
    public IEnumerable`1<TPickerItem> get_SelectedPickerItems();
    public IEnumerable`1<TPickerItem> get_UnselectedPickerItems();
    public Nullable`1<int> get_MaximumAllowedSelections();
    public bool get_DuplicateSelectionsAllowed();
    public int get_SuggestionsTolerance();
    public Picker`1<TPickerItem> Items(TPickerItem[] items);
    public Picker`1<TPickerItem> Items(IEnumerable`1<TPickerItem> items);
    public Picker`1<TPickerItem> OnItemSelected(ComponentEventHandler`2<Picker`1<TPickerItem>, ItemPickedEvent<TPickerItem>> eventHandler);
    public sealed virtual HTMLElement Render();
    private void CreatePicker(HTMLElement pickerContainer);
    private void OnTextBoxInput();
    private void ShowSuggestions();
    private void OnTextBoxBlur();
    private IEnumerable`1<TPickerItem> GetPickerItems();
    private IEnumerable`1<TPickerItem> GetSuggestions(string textBoxText);
    private void CreateSuggestions(IEnumerable`1<TPickerItem> suggestions);
    private void ClearSuggestions();
    private void CreateSelection(TPickerItem selectedItem);
    private void UpdateSelection(TPickerItem selectedItem, bool isSelected);
    private void PositionSuggestions();
    private void <CreatePicker>b__36_0(TextBox _, Event __);
    private void <CreatePicker>b__36_1(TextBox _, Event __);
    private void <CreatePicker>b__36_2(TextBox _, Event __);
    private void <OnTextBoxInput>b__37_0(Object[] _);
    private void <OnTextBoxBlur>b__39_0(Object[] _);
    private void <UpdateSelection>b__45_0(Object[] _);
}
[NameAttribute("tss.Pivot")]
public class Tesserae.Pivot : object {
    [DebuggerBrowsableAttribute]
private PivotEventHandler`1<PivotBeforeNavigateEvent> BeforeNavigated;
    [DebuggerBrowsableAttribute]
private PivotEventHandler`1<PivotNavigateEvent> Navigated;
    private List`1<Tab> OrderedTabs;
    private Dictionary`2<Tab, HTMLElement> RenderedTitles;
    private HTMLElement RenderedTabs;
    private HTMLElement RenderedContent;
    private HTMLElement Line;
    private string _initiallySelectedID;
    private string _currentSelectedID;
    private bool _isRendered;
    [DebuggerBrowsableAttribute]
private HTMLElement <StylingContainer>k__BackingField;
    private HTMLElement SelectedNav;
    private HTMLElement HoveredNav;
    private double T0;
    private double CurrentWidth;
    private double CurrentLeft;
    private double TargetWidth;
    private double TargetLeft;
    private double Left0;
    private bool _firstRender;
    public string SelectedTab { get; }
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    private void add_BeforeNavigated(PivotEventHandler`1<PivotBeforeNavigateEvent> value);
    private void remove_BeforeNavigated(PivotEventHandler`1<PivotBeforeNavigateEvent> value);
    private void add_Navigated(PivotEventHandler`1<PivotNavigateEvent> value);
    private void remove_Navigated(PivotEventHandler`1<PivotNavigateEvent> value);
    public string get_SelectedTab();
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public Pivot Justified();
    public Pivot HideIfSingle();
    internal Pivot Add(Tab tab);
    public void RemoveTab(string id);
    private void AttachEvents(string id, HTMLElement title);
    public Pivot OnBeforeNavigate(PivotEventHandler`1<PivotBeforeNavigateEvent> onBeforeNavigate);
    public Pivot OnNavigate(PivotEventHandler`1<PivotNavigateEvent> onNavigate);
    public Pivot Select(string id, bool refresh);
    private Pivot Select(Tab tab);
    private void UpdateTitleStyles(HTMLElement title);
    public sealed virtual HTMLElement Render();
    private void TriggerAnimation();
    private void AnimateLine(double time);
    private void <Render>b__33_0();
    private void <TriggerAnimation>b__34_0(double t);
    private void <AnimateLine>b__44_0(double t);
}
[ExtensionAttribute]
[NameAttribute("tss.PivotX")]
public static class Tesserae.PivotExtensions : object {
    [ExtensionAttribute]
public static Pivot Pivot(Pivot pivot, string id, Func`1<IComponent> titleCreator, Func`1<IComponent> contentCreator, bool cached);
}
[NameAttribute("tss.PossibleObservableHelpers")]
internal static class Tesserae.PossibleObservableHelpers : object {
    public static bool IsObservable(Type type);
    public static bool ObserveFutureChangesIfObservable(object source, Action receiver);
    public static bool StopObservingIfObservable(object source, Action receiver);
    private static Type TryToGetFirstWrappedValueFromAnIsObservable(Type type);
    private static bool IsAnIObservableInterface(Type type, Type& wrappedValueType);
    private static bool UpdateObservingStatusIfObservable(object source, Action receiver, bool listenForFutureChanges);
    private static void HookCallbackForFutureChanges(IObservable`1<T> observable, ValueChanged`1<T> receiver);
    private static void UnhookCallbackForFutureChanges(IObservable`1<T> observable, ValueChanged`1<T> receiver);
}
[NameAttribute("tss.ProgressIndicator")]
public class Tesserae.ProgressIndicator : object {
    private HTMLElement InnerElement;
    private HTMLElement BarElement;
    public string Foreground { get; public set; }
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
    public ProgressIndicator Progress(int position, int total);
    public ProgressIndicator Progress(float percent);
    public ProgressIndicator Indeterminated();
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.ProgressModal")]
public class Tesserae.ProgressModal : object {
    private Modal _modalHost;
    private Raw _titleHost;
    private Raw _messageHost;
    private Raw _progressHost;
    private Raw _footerHost;
    private ProgressIndicator _progressIndicator;
    private Spinner _spinner;
    private bool _isSpinner;
    public ProgressModal Show();
    public IComponent ShowEmbedded();
    public ProgressModal Hide();
    public ProgressModal Message(string message);
    public ProgressModal Message(IComponent message);
    public ProgressModal Title(string title);
    public ProgressModal Title(IComponent title);
    public ProgressModal Progress(float percent);
    public ProgressModal Progress(int position, int total);
    public ProgressModal ProgressIndeterminated();
    public ProgressModal ProgressSpin();
    public ProgressModal WithCancel(Action`1<Button> onCancel, Action`1<Button> btnCancel);
}
[NameAttribute("tss.Raw")]
public class Tesserae.Raw : object {
    private HTMLElement InnerElement;
    private byte _hasProperties;
    public string Background { get; public set; }
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    public string Width { get; public set; }
    public string Height { get; public set; }
    public string MaxWidth { get; public set; }
    public string MaxHeight { get; public set; }
    public string FlexGrow { get; public set; }
    public string FlexShrink { get; public set; }
    public Raw(HTMLElement content);
    public Raw(IComponent component);
    public Raw Content(IComponent component);
    public Raw Content(HTMLElement element);
    private void CopyPropertiesTo(HTMLElement element);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Margin();
    public sealed virtual void set_Margin(string value);
    public sealed virtual string get_Padding();
    public sealed virtual void set_Padding(string value);
    public string get_Width();
    public void set_Width(string value);
    public string get_Height();
    public void set_Height(string value);
    public string get_MaxWidth();
    public void set_MaxWidth(string value);
    public string get_MaxHeight();
    public void set_MaxHeight(string value);
    public string get_FlexGrow();
    public void set_FlexGrow(string value);
    public string get_FlexShrink();
    public void set_FlexShrink(string value);
    public sealed virtual HTMLElement Render();
}
[DefaultMemberAttribute("Item")]
[NameAttribute("tss.ROA")]
public class Tesserae.ReadOnlyArray`1 : object {
    [ExternalAttribute]
public T Item { get; }
    public int Length { get; }
    [TemplateAttribute("{data}")]
public ReadOnlyArray`1(T[] data);
    [TemplateAttribute("{this}[{index}]")]
public T get_Item(int index);
    [NameAttribute("length")]
public int get_Length();
    [ExternalAttribute]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public static ReadOnlyArray`1<T> op_Implicit(T[] data);
}
[NameAttribute("tss.ReadOnlyObservableT")]
public abstract class Tesserae.ReadOnlyObservable`1 : object {
    private T _value;
    private IEqualityComparer`1<T> _comparer;
    private double _refreshTimeout;
    private double _refreshDelay;
    [DebuggerBrowsableAttribute]
private ValueChanged`1<T> ValueChanged;
    public double Delay { get; public set; }
    public T Value { get; protected set; }
    protected ReadOnlyObservable`1(T value, IEqualityComparer`1<T> comparer);
    public double get_Delay();
    public void set_Delay(double value);
    private void add_ValueChanged(ValueChanged`1<T> value);
    private void remove_ValueChanged(ValueChanged`1<T> value);
    public sealed virtual void Observe(ValueChanged`1<T> valueGetter);
    public sealed virtual void ObserveFutureChanges(ValueChanged`1<T> valueGetter);
    private void Observe(ValueChanged`1<T> valueGetter, bool callbackImmediately);
    public sealed virtual void StopObserving(ValueChanged`1<T> valueGetter);
    public sealed virtual T get_Value();
    protected void set_Value(T value);
    protected void RaiseOnValueChanged();
    private void <RaiseOnValueChanged>b__18_0(Object[] _);
}
[NameAttribute("tss.Require")]
public static class Tesserae.Require : object {
    private static SingleSemaphoreSlim singleCall;
    private static Require();
    public static void LoadStyleAsync(String[] styles);
    [DebuggerStepThroughAttribute]
public static Task LoadScriptAsync(String[] libraries);
    [DebuggerStepThroughAttribute]
public static Task LoadModuleAsync(String[] libraries);
    private static void LoadScriptAsync(Action onComplete, Action`1<string> onFail, bool isModule, String[] libraries);
}
[NameAttribute("tss.ResizeObserver")]
public class Tesserae.ResizeObserver : object {
    [DebuggerBrowsableAttribute]
private Action`1<Event> <OnResizeElement>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action <OnResize>k__BackingField;
    private object resizeObserver;
    public Action`1<Event> OnResizeElement { get; public set; }
    public Action OnResize { get; public set; }
    public Action`1<Event> get_OnResizeElement();
    public void set_OnResizeElement(Action`1<Event> value);
    public Action get_OnResize();
    public void set_OnResize(Action value);
    public void Observe(HTMLElement element);
    public void StopObserving(HTMLElement element);
    public void Disconnect();
    private void DoResize(Event[] entries);
    public static float GetHeight(HTMLElement element);
    public static float GetWidth(HTMLElement element);
}
[NameAttribute("tss.Router")]
public static class Tesserae.Router : object {
    [DebuggerBrowsableAttribute]
private static NavigatedHandler Navigated;
    [DebuggerBrowsableAttribute]
private static NoMatchHandler NotMatched;
    [DebuggerBrowsableAttribute]
private static State <_lastState>k__BackingField;
    [DebuggerBrowsableAttribute]
private static State <_currentState>k__BackingField;
    private static CanNavigateHandler _beforeNavigate;
    private static WillNavigate _onWillNavigate;
    private static TransformRoute _transformRoute;
    private static bool _initialized;
    private static Dictionary`2<string, Func`2<Parameters, bool>> _registedRoutesMappedToActions;
    private static Dictionary`2<string, string> _paths;
    private static List`1<Route> _routesToTryMatchingOnLocationChanged;
    private static State _lastState { get; private set; }
    private static State _currentState { get; private set; }
    private static Router();
    private static void add_Navigated(NavigatedHandler value);
    private static void remove_Navigated(NavigatedHandler value);
    private static void add_NotMatched(NoMatchHandler value);
    private static void remove_NotMatched(NoMatchHandler value);
    private static State get__lastState();
    private static void set__lastState(State value);
    private static State get__currentState();
    private static void set__currentState(State value);
    public static void OnBeforeNavigate(CanNavigateHandler onBeforeNavigate);
    public static void OnTransformRoutes(TransformRoute transformRoute);
    public static void OnWíllNavigate(WillNavigate onWillNavigate);
    public static void OnNavigated(NavigatedHandler onNavigated);
    public static void OnNotMatched(NoMatchHandler notMatched);
    public static void Initialize();
    public static void Push(string path);
    public static void Replace(string path);
    public static Parameters GetQueryParameters();
    public static void SetQueryParameters(Parameters parameters, bool pushToHistory);
    public static void ReplaceQueryParameters(Func`2<Parameters, Parameters> updateFn, bool pushToHistory);
    public static void ForceMatchCurrent();
    public static void Navigate(string path, bool reload);
    private static bool AlreadyThere(string path);
    private static bool AlreadyThere(string candidatePath, string hashOrPath);
    private static string LowerCasePath(string path);
    public static void Register(string uniqueIdentifier, string path, Func`2<Parameters, Task> actionTask);
    public static void Register(string uniquePath, Action`1<Parameters> action);
    public static void Register(string uniquePath, Func`2<Parameters, bool> action);
    public static void Register(string uniquePath, Func`2<Parameters, Task> actionTask);
    public static void Register(string uniqueIdentifier, string path, Action`1<Parameters> action, bool replace);
    public static void Register(string uniqueIdentifier, string path, Func`2<Parameters, bool> action, bool replace);
    public static void Refresh(Action onDone);
    public static bool Exists(string hashRoute);
    private static void LocationChanged(bool allowCallbackEvenIfLocationUnchanged, string trigger);
    internal static void <Navigate>g__ExecuteTheNavigation|38_0(<>c__DisplayClass38_0& );
}
[ExtensionAttribute]
[NameAttribute("tss.ScrollBar")]
public static class Tesserae.ScrollBar : object {
    private static List`1<Handle> LiveHandles;
    private static ScrollBar();
    public static HTMLElement GetCorrectContainer(HTMLElement element);
    public static Handle EnableInvisibleScroll(HTMLElement element, bool horizontal);
    public static void DisableInvisibleScroll(HTMLElement element);
    [ExtensionAttribute]
public static T InvisibleScroll(T component, bool horizontal);
    [ExtensionAttribute]
public static T Scroll(T component);
    [ExtensionAttribute]
public static T ScrollY(T component);
    [ExtensionAttribute]
public static T ScrollX(T component);
    [ExtensionAttribute]
public static T ScrollBoth(T component);
    [ExtensionAttribute]
public static HTMLElement InvisibleScroll(HTMLElement element);
    [ExtensionAttribute]
public static HTMLElement RemoveInvisibleScroll(HTMLElement element);
    [ExtensionAttribute]
public static HTMLDivElement InvisibleScroll(HTMLDivElement element);
    public static void ForceRecalculateAll();
}
[NameAttribute("tss.SearchableGroupedList")]
public class Tesserae.SearchableGroupedList`1 : object {
    private Func`2<string, IComponent> _groupedItemHeaderGenerator;
    private IDefer _defered;
    private Stack _searchBoxContainer;
    private List`1<IComponent> _searchBoxContainerComponents;
    private Stack _stack;
    private SearchBox _searchBox;
    private ItemsList _list;
    private IComparer`1<string> _groupComparer;
    [DebuggerBrowsableAttribute]
private ObservableList`1<IComponent> <Items>k__BackingField;
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public ObservableList`1<IComponent> Items { get; }
    public SearchableGroupedList`1(T[] items, Func`2<string, IComponent> groupedItemHeaderGenerator, UnitSize[] columns);
    public SearchableGroupedList`1(ObservableList`1<T> originalItems, Func`2<string, IComponent> groupedItemHeaderGenerator, UnitSize[] columns);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public ObservableList`1<IComponent> get_Items();
    public SearchableGroupedList`1<T> WithNoResultsMessage(Func`1<IComponent> emptyListMessageGenerator);
    public SearchableGroupedList`1<T> WithGroupOrdering(IComparer`1<string> groupComparer);
    public SearchableGroupedList`1<T> SearchBox(Action`1<SearchBox> sb);
    public SearchableGroupedList`1<T> CaptureSearchBox(SearchBox& sb);
    public SearchableGroupedList`1<T> BeforeSearchBox(IComponent[] beforeComponents);
    public SearchableGroupedList`1<T> AfterSearchBox(IComponent[] afterComponents);
    public sealed virtual HTMLElement Render();
    private void AddGroupedItems(IEnumerable`1<T> items, ObservableList`1<IComponent> observableList, bool isGrid);
}
[NameAttribute("tss.SearchableList")]
public class Tesserae.SearchableList`1 : object {
    private IDefer _defered;
    private Stack _searchBoxContainer;
    private List`1<IComponent> _searchBoxContainerComponents;
    private Stack _stack;
    private SearchBox _searchBox;
    private ItemsList _list;
    private int _minimumItemsToShowBox;
    private Func`2<string, Task`1<T[]>> _backgroundSearcher;
    [DebuggerBrowsableAttribute]
private ObservableList`1<T> <Items>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <ShowNotMatchingItems>k__BackingField;
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public ObservableList`1<T> Items { get; }
    public bool ShowNotMatchingItems { get; public set; }
    public SearchableList`1(T[] items, UnitSize[] columns);
    public SearchableList`1(ObservableList`1<T> items, UnitSize[] columns);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public ObservableList`1<T> get_Items();
    public bool get_ShowNotMatchingItems();
    public void set_ShowNotMatchingItems(bool value);
    public SearchableList`1<T> WithNoResultsMessage(Func`1<IComponent> emptyListMessageGenerator);
    public SearchableList`1<T> SearchBox(Action`1<SearchBox> sb);
    public SearchableList`1<T> CaptureSearchBox(SearchBox& sb);
    public SearchableList`1<T> WithBackgroundSearch(Func`2<string, Task`1<T[]>> searcher);
    public SearchableList`1<T> HideSearchBoxIfLessThan(int items);
    public SearchableList`1<T> ShowNotMatching();
    public SearchableList`1<T> BeforeSearchBox(IComponent[] beforeComponents);
    public SearchableList`1<T> AfterSearchBox(IComponent[] afterComponents);
    public sealed virtual HTMLElement Render();
    private void <.ctor>b__20_1(SearchBox _, string __);
}
[NameAttribute("tss.SearchBox")]
public class Tesserae.SearchBox : ComponentBase`2<SearchBox, HTMLInputElement> {
    private HTMLDivElement _container;
    private HTMLSpanElement _icon;
    private HTMLElement _iconContainer;
    private HTMLElement _paddingContainer;
    [DebuggerBrowsableAttribute]
private SearchEventHandler Searched;
    unknown int TabIndex {public set; }
    public bool IsEnabled { get; public set; }
    public bool IsUnderlined { get; public set; }
    public string Text { get; public set; }
    public string Placeholder { get; public set; }
    public bool IsInvalid { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public string Background { get; public set; }
    public SearchBox(string placeholder);
    protected void add_Searched(SearchEventHandler value);
    protected void remove_Searched(SearchEventHandler value);
    public sealed virtual void set_TabIndex(int value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsUnderlined();
    public void set_IsUnderlined(bool value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public bool get_IsInvalid();
    public void set_IsInvalid(bool value);
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public virtual HTMLElement Render();
    public void Attach(ComponentEventHandler`1<SearchBox> handler);
    public SearchBox SetText(string text);
    public SearchBox SetPlaceholder(string error);
    public SearchBox Disabled(bool value);
    public SearchBox Underlined();
    public SearchBox NotUnderlined();
    public SearchBox SetIcon(UIcons icon);
    public SearchBox NoIcon();
    public SearchBox Focus();
    public SearchBox SearchAsYouType();
    public SearchBox OnSearch(SearchEventHandler onSearch);
    public SearchBox Height(UnitSize unitSize);
    public SearchBox H(int unitSize);
    private void <.ctor>b__8_0(SearchBox s, KeyboardEvent e);
    private void <Focus>b__47_0();
    private void <Focus>b__47_1(Object[] _);
    private void <SearchAsYouType>b__48_0(SearchBox s, KeyboardEvent e);
}
[NameAttribute("tss.SectionStack")]
public class Tesserae.SectionStack : Stack {
    private int Count;
    public void AddAnimated(IComponent component, bool grow, bool shrink, string customPadding);
    public void AddAnimatedTitle(IComponent component);
    private HTMLDivElement GetAnimatedItem(IComponent component, bool isTitle, bool grow, bool shrink, string customPadding);
    public virtual void Clear();
    public virtual HTMLElement Render();
}
[ExtensionAttribute]
[NameAttribute("tss.SectionStackX")]
public static class Tesserae.SectionStackExtensions : object {
    [ExtensionAttribute]
public static SectionStack Section(SectionStack stack, IComponent component, bool grow, bool shrink, string customPadding);
    [ExtensionAttribute]
public static SectionStack Title(SectionStack stack, IComponent component);
    [ExtensionAttribute]
public static SectionStack Children(SectionStack stack, IComponent[] children);
}
[NameAttribute("tss.SettableObservable")]
public static class Tesserae.SettableObservable : object {
    public static SettableObservable`1<T> For(T value, IEqualityComparer`1<T> comparer);
}
[NameAttribute("tss.SettableObservableT")]
public class Tesserae.SettableObservable`1 : ReadOnlyObservable`1<T> {
    public T Value { get; public set; }
    public SettableObservable`1(T value, IEqualityComparer`1<T> comparer);
    public T get_Value();
    public void set_Value(T value);
    public void Update(Action`1<T> action);
}
[NameAttribute("tss.Sidebar")]
public class Tesserae.Sidebar : object {
    private ObservableList`1<ISidebarItem> _header;
    private SettableObservable`1<IReadOnlyList`1<ISidebarItem>> _middleContent;
    private ObservableList`1<ISidebarItem> _footer;
    private SettableObservable`1<bool> _closed;
    private double _closedTimeout;
    private Stack _sidebar;
    private bool _isSortable;
    private Action`1<Dictionary`2<string, String[]>> _onSortingChanged;
    private List`1<string> _itemOrder;
    public static int SIDEBAR_TRANSITION_TIME;
    public static string ROOT_SIDEBAR_FOR_ORDERING;
    public bool IsClosed { get; public set; }
    public Sidebar(bool sortable);
    public bool get_IsClosed();
    public void set_IsClosed(bool value);
    public void Sortable(bool sortable);
    private void RenderSidebar(IReadOnlyList`1<ISidebarItem> header, IReadOnlyList`1<ISidebarItem> middle, IReadOnlyList`1<ISidebarItem> footer, bool closed);
    public Sidebar Closed(bool isClosed);
    public Sidebar Toggle();
    public Sidebar AddHeader(ISidebarItem item);
    public Sidebar AddContent(ISidebarItem item);
    public Sidebar RemoveContent(ISidebarItem item);
    public Sidebar AddFooter(ISidebarItem item);
    public void Clear();
    public void ClearHeader();
    public void ClearContent();
    public void ClearFooter();
    public sealed virtual HTMLElement Render();
    public void LoadSorting(Dictionary`2<string, String[]> itemOrder);
    public Dictionary`2<string, String[]> GetCurrentSorting();
    public void Refresh();
    public void OnSortingChanged(Action`1<Dictionary`2<string, String[]>> onSortingChanged);
    private void <.ctor>b__13_0(bool isClosed);
    private void <.ctor>b__13_1(ValueTuple`4<IReadOnlyList`1<ISidebarItem>, IReadOnlyList`1<ISidebarItem>, IReadOnlyList`1<ISidebarItem>, bool> content);
    private void <.ctor>b__13_2(bool closed);
}
public class Tesserae.SidebarBadge : object {
    private Button _button;
    private Action`1<Button> _tooltip;
    public SidebarBadge(string badge, UIcons badgeIcon, TextSize iconSize);
    public SidebarBadge(string badge, UIcons badgeIcon);
    public SidebarBadge(string badge);
    public SidebarBadge(ISidebarIcon image);
    public SidebarBadge SemiTransparent();
    public SidebarBadge Foreground(string color);
    public SidebarBadge Background(string color);
    public SidebarBadge Default();
    public SidebarBadge Primary();
    public SidebarBadge Success();
    public SidebarBadge Danger();
    public SidebarBadge Tooltip(string text);
    public SidebarBadge Tooltip(IComponent tooltip);
    public SidebarBadge Tooltip(Func`1<IComponent> tooltip);
    public SidebarBadge SetIcon(UIcons icon, string color, UIconsWeight weight);
    public SidebarBadge SetIcon(Emoji icon);
    public SidebarBadge SetBadge(string badge);
    internal void RefreshTooltip();
    public sealed virtual HTMLElement Render();
}
public class Tesserae.SidebarButton : object {
    private Button _closedButton;
    private Button _openButton;
    private IComponent _open;
    private SidebarCommand[] _commands;
    private SidebarBadge _badge;
    private Action`1<IComponent> _tooltipClosed;
    private ISidebarIcon _image;
    private Action`1<IComponent> _tooltipOpen;
    private SettableObservable`1<bool> _selected;
    [DebuggerBrowsableAttribute]
private Action`1<HTMLElement> _onRendered;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    public bool IsSelected { get; public set; }
    public IComponent CurrentRendered { get; }
    public string Identifier { get; private set; }
    public SidebarButton(string identifier, Emoji icon, string text, SidebarCommand[] commands);
    public SidebarButton(string identifier, Emoji icon, string text, SidebarBadge badge, SidebarCommand[] commands);
    public SidebarButton(string identifier, ISidebarIcon image, string text, SidebarCommand[] commands);
    public SidebarButton(string identifier, UIcons icon, string text, SidebarBadge badge, SidebarCommand[] commands);
    public SidebarButton(string identifier, UIcons icon, string text, SidebarCommand[] commands);
    public SidebarButton(string identifier, UIcons icon, UIconsWeight weight, string text, SidebarCommand[] commands);
    public SidebarButton(string identifier, UIcons icon, UIconsWeight weight, string text, SidebarBadge badge, SidebarCommand[] commands);
    private SidebarButton(string identifier, string text, SidebarBadge badge, Button buttonWithIconClosed, Button buttonWithIconOpen, SidebarCommand[] commands);
    public SidebarButton(string identifier, ISidebarIcon image, string text, SidebarBadge badge, SidebarCommand[] commands);
    private void add__onRendered(Action`1<HTMLElement> value);
    private void remove__onRendered(Action`1<HTMLElement> value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual IComponent get_CurrentRendered();
    public sealed virtual string get_Identifier();
    private void set_Identifier(string value);
    public sealed virtual void AddGroupIdentifier(string groupIdentifier);
    public sealed virtual void Show();
    public sealed virtual void Collapse();
    public SidebarButton ClearProgress();
    public SidebarButton Progress(float progress);
    public SidebarButton SetText(string text);
    public SidebarButton CommandsAlwaysVisible();
    public SidebarButton Light();
    public SidebarButton Danger();
    public SidebarButton Default();
    public SidebarButton Success();
    public SidebarButton Primary();
    public SidebarButton Selected(bool isSelected);
    public SidebarButton Tooltip(string text);
    public SidebarButton Tooltip(IComponent tooltip);
    public SidebarButton Tooltip(Func`1<IComponent> tooltip);
    public SidebarButton OpenedTooltip(string text);
    public SidebarButton OpenedTooltip(IComponent tooltip);
    public SidebarButton OpenedTooltip(Func`1<IComponent> tooltip);
    public SidebarButton OnClick(Action action);
    public SidebarButton OnOpenIconClick(Action`2<HTMLElement, MouseEvent> action);
    public SidebarButton Id(string id);
    public SidebarButton OnOpenIconClick(Action action);
    public SidebarButton OnContextMenu(Action action);
    public SidebarButton OnClick(Action`2<Button, MouseEvent> action);
    public SidebarButton OnContextMenu(Action`2<Button, MouseEvent> action);
    public SidebarButton SetIcon(UIcons icon, string color, UIconsWeight weight);
    public SidebarButton SetIcon(Emoji icon);
    public ISidebarItem OnRendered(Action`1<HTMLElement> onRendered);
    public sealed virtual IComponent RenderClosed();
    public sealed virtual IComponent RenderOpen();
    private void <RenderClosed>b__59_0();
    private void <RenderClosed>b__59_1(Object[] _);
}
public class Tesserae.SidebarCommand : object {
    private Button _button;
    private Action`1<Button> _tooltip;
    private Func`1<ISidebarItem[]> _menuGenerator;
    private bool _hookParentContextMenu;
    internal bool ShouldHookToContextMenu { get; }
    public SidebarCommand(UIcons icon, UIconsWeight weight);
    public SidebarCommand(Emoji icon);
    public SidebarCommand(ISidebarIcon image);
    private SidebarCommand(Button buttonWithIcon);
    internal bool get_ShouldHookToContextMenu();
    public SidebarCommand Foreground(string color);
    public SidebarCommand HookToParentContextMenu();
    public SidebarCommand Background(string color);
    public SidebarCommand Default();
    public SidebarCommand Primary();
    public SidebarCommand Success();
    public SidebarCommand Danger();
    public SidebarCommand Tooltip(string text);
    public SidebarCommand Tooltip(IComponent tooltip);
    public SidebarCommand Tooltip(Func`1<IComponent> tooltip);
    public SidebarCommand OnClickMenu(Func`1<ISidebarItem[]> generator);
    public void ShowMenu();
    public SidebarCommand RaiseOnClick(MouseEvent mouseEvent);
    public SidebarCommand RaiseOnContextMenu(MouseEvent mouseEvent);
    public SidebarCommand OnClick(Action action);
    public SidebarCommand OnContextMenu(Action action);
    public SidebarCommand OnClick(Action`2<Button, MouseEvent> action);
    public SidebarCommand OnContextMenu(Action`2<Button, MouseEvent> action);
    public SidebarCommand SetIcon(UIcons icon, string color, UIconsWeight weight);
    public SidebarCommand SetIcon(Emoji icon);
    internal void RefreshTooltip();
    public sealed virtual HTMLElement Render();
    private void <OnClickMenu>b__20_0();
}
public class Tesserae.SidebarCommands : object {
    private SidebarCommand[] _commands;
    private bool _isEndAligned;
    private bool _isHidden;
    [DebuggerBrowsableAttribute]
private bool <IsSelected>k__BackingField;
    [DebuggerBrowsableAttribute]
private IComponent <CurrentRendered>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    public bool IsSelected { get; public set; }
    public IComponent CurrentRendered { get; private set; }
    public string Identifier { get; private set; }
    public SidebarCommands(string identifier, SidebarCommand[] commands);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual IComponent get_CurrentRendered();
    private void set_CurrentRendered(IComponent value);
    private void WhenSizeIsStable(HTMLElement element, Action`1<int> action, int previousWidth);
    public sealed virtual IComponent RenderOpen();
    public sealed virtual void Show();
    public sealed virtual void Collapse();
    public IComponent RenderOpenFull();
    public sealed virtual IComponent RenderClosed();
    public SidebarCommands AlignEnd();
    public sealed virtual string get_Identifier();
    private void set_Identifier(string value);
    public sealed virtual void AddGroupIdentifier(string groupIdentifier);
}
public class Tesserae.SidebarNav : object {
    [DebuggerBrowsableAttribute]
private Action`1<Dictionary`2<string, String[]>> _onSortingChanged;
    private string _text;
    private Button _closedHeader;
    private HTMLElement _openHeader;
    private Button _arrow;
    private Button _openHeaderButton;
    private SettableObservable`1<IReadOnlyList`1<ISidebarItem>> _items;
    private SettableObservable`1<bool> _collapsed;
    private SettableObservable`1<bool> _selected;
    private Func`1<IComponent> _closedContent;
    private Func`1<IComponent> _openContent;
    private SidebarCommand[] _commands;
    private bool _isHidden;
    private bool _isSortable;
    private List`1<string> _itemOrder;
    [DebuggerBrowsableAttribute]
private Action`1<HTMLElement> _onRendered;
    private IComponent _lastClosed;
    private IComponent _lastOpen;
    public static string collapse_local_storage_save_key;
    private static Func`2<string, string> _getCollapseState;
    private static Action`2<string, string> _setCollapseState;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    public bool IsCollapsed { get; public set; }
    public bool IsSelected { get; public set; }
    public IObservable`1<bool> CollapsedStatus { get; }
    public IComponent CurrentRendered { get; }
    public string Identifier { get; private set; }
    public SidebarNav(string identifier, Emoji icon, string text, bool initiallyCollapsed, SidebarCommand[] commands);
    public SidebarNav(string identifier, UIcons icon, string text, bool initiallyCollapsed, SidebarCommand[] commands);
    public SidebarNav(string identifier, UIcons icon, UIconsWeight weight, string text, bool initiallyCollapsed, SidebarCommand[] commands);
    private SidebarNav(string identifier, string text, bool initiallyCollapsed, Action`1<Button> setButtonIcon, SidebarCommand[] commands);
    public void add__onSortingChanged(Action`1<Dictionary`2<string, String[]>> value);
    public void remove__onSortingChanged(Action`1<Dictionary`2<string, String[]>> value);
    private void add__onRendered(Action`1<HTMLElement> value);
    private void remove__onRendered(Action`1<HTMLElement> value);
    public bool get_IsCollapsed();
    public void set_IsCollapsed(bool value);
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public IObservable`1<bool> get_CollapsedStatus();
    public sealed virtual IComponent get_CurrentRendered();
    public static void WithCollapseStatePersist(Func`2<string, string> get, Action`2<string, string> set);
    public sealed virtual void Show();
    public sealed virtual void Collapse();
    public SidebarNav SetText(string text);
    public SidebarNav Collapsed(bool isCollapsed);
    public SidebarNav Selected(bool isSelected);
    public SidebarNav Toggle();
    public SidebarNav ShowDotIfEmpty();
    public SidebarNav OnOpenIconClick(Action`2<HTMLElement, MouseEvent> action);
    public SidebarNav OnOpenIconClick(Action action);
    private Action WrapAction(Action action);
    private Action`2<Button, MouseEvent> WrapAction(Action`2<Button, MouseEvent> action);
    public SidebarNav OnClick(Action action);
    public SidebarNav OnClick(Action`1<SidebarNav> action);
    public SidebarNav OnClick(Action`2<Button, MouseEvent> action);
    public SidebarNav OnContextMenu(Action action);
    public SidebarNav OnContextMenu(Action`2<Button, MouseEvent> action);
    private IComponent RenderOpened(IReadOnlyList`1<ISidebarItem> items);
    private IComponent RenderClosed(IReadOnlyList`1<ISidebarItem> items);
    public void Clear();
    public void Add(ISidebarItem item);
    public void Remove(ISidebarItem item);
    public void AddRange(IEnumerable`1<ISidebarItem> items);
    public sealed virtual IComponent RenderClosed();
    public sealed virtual IComponent RenderOpen();
    public ISidebarItem OnRendered(Action`1<HTMLElement> onRendered);
    public sealed virtual string get_Identifier();
    private void set_Identifier(string value);
    public sealed virtual void AddGroupIdentifier(string groupIdentifier);
    public void LoadSorting(Dictionary`2<string, String[]> itemOrder);
    public Dictionary`2<string, String[]> GetCurrentSorting();
    public void Sortable(bool sortable);
    public void OnSortingChanged(Action`1<Dictionary`2<string, String[]>> onSortingChanged);
    private void <Sortable>b__72_0(Dictionary`2<string, String[]> newItemOrder);
}
public class Tesserae.SidebarText : object {
    private TextBlock _closed;
    private TextBlock _open;
    [DebuggerBrowsableAttribute]
private bool <IsSelected>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    public IComponent CurrentRendered { get; }
    public bool IsSelected { get; public set; }
    public string Identifier { get; private set; }
    public SidebarText(string identifier, string text, string closedText, TextSize textSize, TextWeight textWeight);
    public sealed virtual IComponent get_CurrentRendered();
    public sealed virtual bool get_IsSelected();
    public sealed virtual void set_IsSelected(bool value);
    public sealed virtual void Show();
    public sealed virtual void Collapse();
    public sealed virtual string get_Identifier();
    private void set_Identifier(string value);
    public sealed virtual void AddGroupIdentifier(string groupIdentifier);
    public SidebarText SetText(string text);
    public SidebarText Foreground(string color);
    public SidebarText PT(int pixels);
    public SidebarText PB(int pixels);
    public SidebarText PL(int pixels);
    public sealed virtual IComponent RenderClosed();
    public sealed virtual IComponent RenderOpen();
}
[NameAttribute("tss.SingleSemaphoreSlim")]
public class Tesserae.SingleSemaphoreSlim : object {
    private Queue`1<TaskCompletionSource`1<bool>> _queue;
    public bool IsPending { get; }
    public Task WaitAsync();
    public bool get_IsPending();
    public void Release();
}
[NameAttribute("tss.sz")]
public enum Tesserae.SizeMode : Enum {
    public int value__;
    public static SizeMode Pixels;
    public static SizeMode Percent;
}
[NameAttribute("tss.Slider")]
public class Tesserae.Slider : ComponentBase`2<Slider, HTMLInputElement> {
    private HTMLLabelElement _outerLabel;
    private HTMLDivElement _outerDiv;
    private HTMLDivElement _fakeDiv;
    public SliderOrientation Orientation { get; public set; }
    public int Value { get; public set; }
    public int Min { get; public set; }
    public int Max { get; public set; }
    public int Step { get; public set; }
    public bool IsEnabled { get; public set; }
    public Slider(int val, int min, int max, int step);
    private double UpdateFakeProgress();
    public SliderOrientation get_Orientation();
    public void set_Orientation(SliderOrientation value);
    public int get_Value();
    public void set_Value(int value);
    public int get_Min();
    public void set_Min(int value);
    public int get_Max();
    public void set_Max(int value);
    public int get_Step();
    public void set_Step(int value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public virtual HTMLElement Render();
    public Slider SetValue(int val);
    public Slider SetMin(int min);
    public Slider SetMax(int max);
    public Slider SetStep(int step);
    public Slider Disabled(bool value);
    public Slider Horizontal();
    public Slider Vertical();
}
[NameAttribute("tss.Sortable")]
public class Tesserae.Sortable : object {
    private HTMLElement _element;
    private object _sortable;
    private SortableOptions _options;
    public Sortable(HTMLElement element, SortableOptions options);
}
[ObjectLiteralAttribute]
public class Tesserae.SortableEvent : object {
    [DebuggerBrowsableAttribute]
private HTMLElement <item>k__BackingField;
    [DebuggerBrowsableAttribute]
private HTMLElement <to>k__BackingField;
    [DebuggerBrowsableAttribute]
private HTMLElement <from>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <oldIndex>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <newIndex>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <oldDraggableIndex>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <newDraggableIndex>k__BackingField;
    [DebuggerBrowsableAttribute]
private HTMLElement <clone>k__BackingField;
    [DebuggerBrowsableAttribute]
private object <pullMode>k__BackingField;
    public HTMLElement item { get; public set; }
    public HTMLElement to { get; public set; }
    public HTMLElement from { get; public set; }
    public int oldIndex { get; public set; }
    public int newIndex { get; public set; }
    public int oldDraggableIndex { get; public set; }
    public int newDraggableIndex { get; public set; }
    public HTMLElement clone { get; public set; }
    public object pullMode { get; public set; }
    public HTMLElement get_item();
    public void set_item(HTMLElement value);
    public HTMLElement get_to();
    public void set_to(HTMLElement value);
    public HTMLElement get_from();
    public void set_from(HTMLElement value);
    public int get_oldIndex();
    public void set_oldIndex(int value);
    public int get_newIndex();
    public void set_newIndex(int value);
    public int get_oldDraggableIndex();
    public void set_oldDraggableIndex(int value);
    public int get_newDraggableIndex();
    public void set_newDraggableIndex(int value);
    public HTMLElement get_clone();
    public void set_clone(HTMLElement value);
    public object get_pullMode();
    public void set_pullMode(object value);
    public PullMode GetPullMode();
}
[ObjectLiteralAttribute]
public class Tesserae.SortableOptions : object {
    [DebuggerBrowsableAttribute]
private string <group>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <sort>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <delay>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <delayOnTouchOnly>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <touchStartThreshold>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <disabled>k__BackingField;
    [DebuggerBrowsableAttribute]
private object <store>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <animation>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <easing>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <handle>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <filter>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <preventOnFilter>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <draggable>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <dataIdAttr>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <ghostClass>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <chosenClass>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <dragClass>k__BackingField;
    [DebuggerBrowsableAttribute]
private double <swapThreshold>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <invertSwap>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <invertedSwapThreshold>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <direction>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <forceFallback>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <fallbackClass>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <fallbackOnBody>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <fallbackTolerance>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <dragoverBubble>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <removeCloneOnHide>k__BackingField;
    [DebuggerBrowsableAttribute]
private int <emptyInsertThreshold>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onChoose>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`2<DataTransfer, HTMLElement> <setData>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onUnchoose>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onStart>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onEnd>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onAdd>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onUpdate>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onSort>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onRemove>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onFilter>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onMove>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onClone>k__BackingField;
    [DebuggerBrowsableAttribute]
private Action`1<SortableEvent> <onChange>k__BackingField;
    public string group { get; public set; }
    public bool sort { get; public set; }
    public int delay { get; public set; }
    public bool delayOnTouchOnly { get; public set; }
    public int touchStartThreshold { get; public set; }
    public bool disabled { get; public set; }
    public object store { get; public set; }
    public int animation { get; public set; }
    public string easing { get; public set; }
    public string handle { get; public set; }
    public string filter { get; public set; }
    public bool preventOnFilter { get; public set; }
    public string draggable { get; public set; }
    public string dataIdAttr { get; public set; }
    public string ghostClass { get; public set; }
    public string chosenClass { get; public set; }
    public string dragClass { get; public set; }
    public double swapThreshold { get; public set; }
    public bool invertSwap { get; public set; }
    public int invertedSwapThreshold { get; public set; }
    public string direction { get; public set; }
    public bool forceFallback { get; public set; }
    public string fallbackClass { get; public set; }
    public bool fallbackOnBody { get; public set; }
    public int fallbackTolerance { get; public set; }
    public bool dragoverBubble { get; public set; }
    public bool removeCloneOnHide { get; public set; }
    public int emptyInsertThreshold { get; public set; }
    public Action`1<SortableEvent> onChoose { get; public set; }
    public Action`2<DataTransfer, HTMLElement> setData { get; public set; }
    public Action`1<SortableEvent> onUnchoose { get; public set; }
    public Action`1<SortableEvent> onStart { get; public set; }
    public Action`1<SortableEvent> onEnd { get; public set; }
    public Action`1<SortableEvent> onAdd { get; public set; }
    public Action`1<SortableEvent> onUpdate { get; public set; }
    public Action`1<SortableEvent> onSort { get; public set; }
    public Action`1<SortableEvent> onRemove { get; public set; }
    public Action`1<SortableEvent> onFilter { get; public set; }
    public Action`1<SortableEvent> onMove { get; public set; }
    public Action`1<SortableEvent> onClone { get; public set; }
    public Action`1<SortableEvent> onChange { get; public set; }
    public string get_group();
    public void set_group(string value);
    public bool get_sort();
    public void set_sort(bool value);
    public int get_delay();
    public void set_delay(int value);
    public bool get_delayOnTouchOnly();
    public void set_delayOnTouchOnly(bool value);
    public int get_touchStartThreshold();
    public void set_touchStartThreshold(int value);
    public bool get_disabled();
    public void set_disabled(bool value);
    public object get_store();
    public void set_store(object value);
    public int get_animation();
    public void set_animation(int value);
    public string get_easing();
    public void set_easing(string value);
    public string get_handle();
    public void set_handle(string value);
    public string get_filter();
    public void set_filter(string value);
    public bool get_preventOnFilter();
    public void set_preventOnFilter(bool value);
    public string get_draggable();
    public void set_draggable(string value);
    public string get_dataIdAttr();
    public void set_dataIdAttr(string value);
    public string get_ghostClass();
    public void set_ghostClass(string value);
    public string get_chosenClass();
    public void set_chosenClass(string value);
    public string get_dragClass();
    public void set_dragClass(string value);
    public double get_swapThreshold();
    public void set_swapThreshold(double value);
    public bool get_invertSwap();
    public void set_invertSwap(bool value);
    public int get_invertedSwapThreshold();
    public void set_invertedSwapThreshold(int value);
    public string get_direction();
    public void set_direction(string value);
    public bool get_forceFallback();
    public void set_forceFallback(bool value);
    public string get_fallbackClass();
    public void set_fallbackClass(string value);
    public bool get_fallbackOnBody();
    public void set_fallbackOnBody(bool value);
    public int get_fallbackTolerance();
    public void set_fallbackTolerance(int value);
    public bool get_dragoverBubble();
    public void set_dragoverBubble(bool value);
    public bool get_removeCloneOnHide();
    public void set_removeCloneOnHide(bool value);
    public int get_emptyInsertThreshold();
    public void set_emptyInsertThreshold(int value);
    public Action`1<SortableEvent> get_onChoose();
    public void set_onChoose(Action`1<SortableEvent> value);
    public Action`2<DataTransfer, HTMLElement> get_setData();
    public void set_setData(Action`2<DataTransfer, HTMLElement> value);
    public Action`1<SortableEvent> get_onUnchoose();
    public void set_onUnchoose(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onStart();
    public void set_onStart(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onEnd();
    public void set_onEnd(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onAdd();
    public void set_onAdd(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onUpdate();
    public void set_onUpdate(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onSort();
    public void set_onSort(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onRemove();
    public void set_onRemove(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onFilter();
    public void set_onFilter(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onMove();
    public void set_onMove(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onClone();
    public void set_onClone(Action`1<SortableEvent> value);
    public Action`1<SortableEvent> get_onChange();
    public void set_onChange(Action`1<SortableEvent> value);
}
public class Tesserae.SortableStack : object {
    private Stack _container;
    private List`1<SortableStackItem> _items;
    private List`1<string> _itemOrder;
    private Action`1<String[]> _onSortingChanged;
    public string Background { get; public set; }
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public bool CanWrap { get; public set; }
    public SortableStack(Orientation orientation);
    public void Add(string identifier, IComponent component);
    public void Add(SortableStackItem item);
    public SortableStack Children(SortableStackItem[] children);
    public sealed virtual HTMLElement Render();
    public SortableStack AlignItemsCenter();
    public void LoadSorting(String[] itemOrder);
    private void Refresh();
    private String[] GetCurrentSorting();
    public void OnSortingChanged(Action`1<String[]> onSortingChanged);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Margin();
    public sealed virtual void set_Margin(string value);
    public sealed virtual string get_Padding();
    public sealed virtual void set_Padding(string value);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public sealed virtual bool get_CanWrap();
    public sealed virtual void set_CanWrap(bool value);
    public SortableStack NoWrap();
    public SortableStack Wrap();
    public SortableStack AlignItems(ItemAlign align);
    public SortableStack Relative();
    public SortableStack AlignContent(ItemAlign align);
    public SortableStack JustifyContent(ItemJustify justify);
    public SortableStack JustifyItems(ItemJustify justify);
    public SortableStack RemovePropagation();
    public SortableStack OnMouseOver(ComponentEventHandler`2<Stack, Event> onMouseOver);
    public SortableStack OnMouseOut(ComponentEventHandler`2<Stack, Event> onMouseOut);
    public void Clear();
    public SortableStack NoDefaultMargin();
    public void Remove(string identifer);
    private void <.ctor>b__4_0(SortableEvent e);
    private int <Refresh>b__11_0(SortableStackItem i);
}
public class Tesserae.SortableStackItem : object {
    [DebuggerBrowsableAttribute]
private IComponent <Component>k__BackingField;
    [DebuggerBrowsableAttribute]
private string <Identifier>k__BackingField;
    public IComponent Component { get; public set; }
    public string Identifier { get; public set; }
    public IComponent get_Component();
    public void set_Component(IComponent value);
    public string get_Identifier();
    public void set_Identifier(string value);
}
[NameAttribute("tss.Spinner")]
public class Tesserae.Spinner : ComponentBase`2<Spinner, HTMLDivElement> {
    private HTMLElement _container;
    private HTMLElement _label;
    public LabelPosition Position { get; public set; }
    public CircleSize Size { get; public set; }
    public string Text { get; public set; }
    public Spinner(string text);
    public Spinner Success();
    public Spinner Danger();
    public Spinner Primary();
    public LabelPosition get_Position();
    public void set_Position(LabelPosition value);
    public CircleSize get_Size();
    public void set_Size(CircleSize value);
    public string get_Text();
    public void set_Text(string value);
    public virtual HTMLElement Render();
    public Spinner Left();
    public Spinner Right();
    public Spinner Above();
    public Spinner Below();
    public Spinner XSmall();
    public Spinner Small();
    public Spinner Medium();
    public Spinner Large();
    public Spinner SetText(string text);
}
[NameAttribute("tss.SplitView")]
public class Tesserae.SplitView : object {
    private HTMLElement _splitContainer;
    private string _splitterSize;
    private Raw _leftComponent;
    private Raw _splitterComponent;
    private Raw _rightComponent;
    private bool _resizable;
    private Action`1<int> _onResizeEnd;
    public SplitView(UnitSize splitterSize);
    public SplitView Resizable(Action`1<int> onResizeEnd);
    private void HookDragEvents(IComponent dragArea);
    public SplitView Left(IComponent component, string background);
    public SplitView Right(IComponent component, string background);
    public SplitView PanelStyle();
    public SplitView NotResizable();
    public SplitView SplitInMiddle();
    public SplitView Close();
    public SplitView Open();
    public SplitView LeftIsSmaller(UnitSize leftSize, UnitSize maxLeftSize);
    public SplitView RightIsSmaller(UnitSize rightSize, UnitSize maxRightSize);
    public sealed virtual HTMLElement Render();
}
[NameAttribute("tss.S")]
public class Tesserae.Stack : object {
    [DebuggerBrowsableAttribute]
private HTMLElement <InnerElement>k__BackingField;
    [DebuggerBrowsableAttribute]
private bool <PropagateToStackItemParent>k__BackingField;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<Stack, Event> MouseOver;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<Stack, Event> MouseOut;
    private static String[] _stylesToPropagate;
    public Orientation StackOrientation { get; public set; }
    public bool CanWrap { get; public set; }
    public bool IsInline { get; public set; }
    public HTMLElement InnerElement { get; private set; }
    public string Background { get; public set; }
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; private set; }
    public Stack(Orientation orientation);
    private static Stack();
    public Orientation get_StackOrientation();
    public void set_StackOrientation(Orientation value);
    public sealed virtual bool get_CanWrap();
    public sealed virtual void set_CanWrap(bool value);
    public bool get_IsInline();
    public void set_IsInline(bool value);
    public HTMLElement get_InnerElement();
    private void set_InnerElement(HTMLElement value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Margin();
    public sealed virtual void set_Margin(string value);
    public sealed virtual string get_Padding();
    public sealed virtual void set_Padding(string value);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    private void set_PropagateToStackItemParent(bool value);
    public static void SetAlign(IComponent component, ItemAlign align);
    public Stack AlignItems(ItemAlign align);
    public Stack AlignItemsCenter();
    public Stack Relative();
    public Stack AlignContent(ItemAlign align);
    public Stack JustifyContent(ItemJustify justify);
    public Stack JustifyItems(ItemJustify justify);
    internal static ValueTuple`2<HTMLElement, bool> GetCorrectItemToApplyStyle(IComponent component);
    public Stack RemovePropagation();
    public static void SetWidth(IComponent component, UnitSize unitSize);
    public static void SetMinWidth(IComponent component, UnitSize unitSize);
    public static void SetMaxWidth(IComponent component, UnitSize unitSize);
    public static void SetHeight(IComponent component, UnitSize unitSize);
    public static void SetMinHeight(IComponent component, UnitSize unitSize);
    public static void SetMaxHeight(IComponent component, UnitSize unitSize);
    public static void SetMarginLeft(IComponent component, UnitSize unitSize);
    public static void SetMarginRight(IComponent component, UnitSize unitSize);
    public static void SetMarginTop(IComponent component, UnitSize unitSize);
    public static void SetMarginBottom(IComponent component, UnitSize unitSize);
    public static void SetPaddingLeft(IComponent component, UnitSize unitSize);
    public static void SetPaddingRight(IComponent component, UnitSize unitSize);
    public static void SetPaddingTop(IComponent component, UnitSize unitSize);
    public static void SetPaddingBottom(IComponent component, UnitSize unitSize);
    public static void SetGrow(IComponent component, int grow);
    public static void SetShrink(IComponent component, bool shrink);
    private void add_MouseOver(ComponentEventHandler`2<Stack, Event> value);
    private void remove_MouseOver(ComponentEventHandler`2<Stack, Event> value);
    private void add_MouseOut(ComponentEventHandler`2<Stack, Event> value);
    private void remove_MouseOut(ComponentEventHandler`2<Stack, Event> value);
    private void RaiseMouseOver(Event ev);
    private void RaiseMouseOut(Event ev);
    public Stack OnMouseOver(ComponentEventHandler`2<Stack, Event> onMouseOver);
    public Stack OnMouseOut(ComponentEventHandler`2<Stack, Event> onMouseOut);
    public sealed virtual void Add(IComponent component);
    public void Prepend(IComponent component);
    public void InsertBefore(IComponent component, IComponent componentToInsertBefore);
    public void InsertAfter(IComponent component, IComponent componentToInsertBefore);
    public virtual void Clear();
    public sealed virtual void Replace(IComponent newComponent, IComponent oldComponent);
    public void Remove(IComponent component);
    public virtual HTMLElement Render();
    public Stack Horizontal();
    public Stack Vertical();
    public Stack HorizontalReverse();
    public Stack VerticalReverse();
    public Stack Wrap();
    public Stack Inline();
    public Stack NoWrap();
    public Stack OverflowHidden();
    public Stack NoDefaultMargin();
    internal static HTMLElement GetItem(IComponent component, bool forceAdd);
    internal static void CopyStylesDefinedWithExtension(HTMLElement from, HTMLElement to);
    public IComponent Skeleton(bool enabled);
    private void <OnMouseOver>b__62_0(MouseEvent s);
    private void <OnMouseOut>b__63_0(MouseEvent s);
    internal static bool <CopyStylesDefinedWithExtension>g__has|82_0(string att, <>c__DisplayClass82_0& );
}
[NameAttribute("tss.StepsSlider")]
public class Tesserae.StepsSlider`1 : object {
    private T[] _steps;
    private Slider _slider;
    private IEqualityComparer`1<T> _equalityComparer;
    public T Value { get; public set; }
    public bool IsEnabled { get; public set; }
    public SliderOrientation Orientation { get; public set; }
    public StepsSlider`1(T[] steps);
    public StepsSlider`1<T> Comparer(IEqualityComparer`1<T> equalityComparer);
    public T get_Value();
    public void set_Value(T value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public SliderOrientation get_Orientation();
    public void set_Orientation(SliderOrientation value);
    public StepsSlider`1<T> SetValue(T val);
    public StepsSlider`1<T> OnChange(Action`1<T> onChange);
    public StepsSlider`1<T> Disabled(bool value);
    public StepsSlider`1<T> Horizontal();
    public StepsSlider`1<T> Vertical();
    public sealed virtual HTMLElement Render();
    private bool <set_Value>b__7_0(T p);
}
[ExtensionAttribute]
[NameAttribute("tss.ISX")]
public static class Tesserae.StyleExtensions : object {
    [ExtensionAttribute]
public static T Background(T element, string color);
    [ExtensionAttribute]
public static T Foreground(T element, string color);
    [ExtensionAttribute]
public static T Padding(T element, string padding);
    [ExtensionAttribute]
public static T Margin(T element, string margin);
}
[ExtensionAttribute]
[NameAttribute("tss.tX")]
public static class Tesserae.TaskExtensions : object {
    [DebuggerBrowsableAttribute]
private static Task <Completed>k__BackingField;
    public static Task Completed { get; }
    private static TaskExtensions();
    public static Task get_Completed();
    [ExtensionAttribute]
[NameAttribute("fireAndForget")]
public static void FireAndForget(Task task);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<T> Unwrap(Task`1<Task`1<T>> task);
    [DebuggerStepThroughAttribute]
public static Task`1<ValueTuple`2<T1, T2>> WhenAll(Task`1<T1> t1, Task`1<T2> t2);
    [DebuggerStepThroughAttribute]
public static Task`1<ValueTuple`3<T1, T2, T3>> WhenAll(Task`1<T1> t1, Task`1<T2> t2, Task`1<T3> t3);
    [DebuggerStepThroughAttribute]
public static Task`1<ValueTuple`4<T1, T2, T3, T4>> WhenAll(Task`1<T1> t1, Task`1<T2> t2, Task`1<T3> t3, Task`1<T4> t4);
    [DebuggerStepThroughAttribute]
public static Task`1<ValueTuple`5<T1, T2, T3, T4, T5>> WhenAll(Task`1<T1> t1, Task`1<T2> t2, Task`1<T3> t3, Task`1<T4> t4, Task`1<T5> t5);
    [DebuggerStepThroughAttribute]
public static Task`1<ValueTuple`6<T1, T2, T3, T4, T5, T6>> WhenAll(Task`1<T1> t1, Task`1<T2> t2, Task`1<T3> t3, Task`1<T4> t4, Task`1<T5> t5, Task`1<T6> t6);
    [DebuggerStepThroughAttribute]
public static Task`1<ValueTuple`7<T1, T2, T3, T4, T5, T6, T7>> WhenAll(Task`1<T1> t1, Task`1<T2> t2, Task`1<T3> t3, Task`1<T4> t4, Task`1<T5> t5, Task`1<T6> t6, Task`1<T7> t7);
    [DebuggerStepThroughAttribute]
public static Task`1<ValueTuple`8<T1, T2, T3, T4, T5, T6, T7, ValueTuple`1<T8>>> WhenAll(Task`1<T1> t1, Task`1<T2> t2, Task`1<T3> t3, Task`1<T4> t4, Task`1<T5> t5, Task`1<T6> t6, Task`1<T7> t7, Task`1<T8> t8);
    [ExtensionAttribute]
public static Task`1<IComponent> AsTask(IComponent component);
    private static Task BuildCompletedTask();
}
[NameAttribute("tss.Teaching")]
public class Tesserae.Teaching : object {
    private Func`1<bool> _condition;
    private int _stepCounter;
    private int _currentStep;
    private int _firstDelay;
    private int _stepDelay;
    private Dictionary`2<int, Action> _futureSteps;
    private Action _completed;
    public Teaching RunIf(Func`1<bool> condition);
    public Teaching OnComplete(Action completed);
    public Teaching FirstDelay(int milliseconds);
    public Teaching StepDelay(int milliseconds);
    public Teaching RunNow();
    public Teaching AddStep(IComponent showFor, IComponent tooltip, TooltipAnimation animation, TooltipPlacement placement, StepType stepType);
    private static Action ShowTooltip(IComponent showFor, IComponent tooltip, TooltipAnimation animation, TooltipPlacement placement, bool hideOnClick);
}
[EnumAttribute]
[NameAttribute("tss.TA")]
public enum Tesserae.TextAlign : Enum {
    public int value__;
    [NameAttribute("tss-textalign-left")]
public static TextAlign Left;
    [NameAttribute("tss-textalign-center")]
public static TextAlign Center;
    [NameAttribute("tss-textalign-right")]
public static TextAlign Right;
}
[NameAttribute("tss.TextArea")]
public class Tesserae.TextArea : ComponentBase`2<TextArea, HTMLTextAreaElement> {
    private HTMLDivElement _container;
    private HTMLSpanElement _errorSpan;
    private SettableObservable`1<string> _observable;
    unknown int TabIndex {public set; }
    public bool IsEnabled { get; public set; }
    public bool IsReadOnly { get; public set; }
    public string Text { get; public set; }
    public string Placeholder { get; public set; }
    public string Error { get; public set; }
    public bool IsInvalid { get; public set; }
    public bool IsRequired { get; public set; }
    public TextArea(string text);
    public sealed virtual void set_TabIndex(int value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public sealed virtual string get_Error();
    public sealed virtual void set_Error(string value);
    public sealed virtual bool get_IsInvalid();
    public sealed virtual void set_IsInvalid(bool value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public virtual HTMLElement Render();
    public sealed virtual void Attach(ComponentEventHandler`1<TextArea> handler);
    public TextArea SetText(string text);
    public TextArea ClearText();
    public TextArea SetPlaceholder(string placeholder);
    public TextArea Disabled(bool value);
    public TextArea ReadOnly();
    public TextArea NoSpellCheck();
    public TextArea Required();
    public TextArea Focus();
    public sealed virtual IObservable`1<string> AsObservable();
    private void <.ctor>b__3_0(TextArea _, Event __);
    private void <.ctor>b__3_1(TextArea _, Event __);
    private void <Focus>b__36_0();
}
[NameAttribute("tss.txt")]
public class Tesserae.TextBlock : ComponentBase`2<TextBlock, HTMLElement> {
    public string Background { get; public set; }
    public string Foreground { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsSelectable { get; public set; }
    public string Text { get; public set; }
    public string HTML { get; public set; }
    public string Title { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public bool IsPrimary { get; public set; }
    public bool IsSecondary { get; public set; }
    public bool IsSuccess { get; public set; }
    public bool IsDanger { get; public set; }
    public bool IsInvalid { get; public set; }
    public bool IsRequired { get; public set; }
    public bool CanWrap { get; public set; }
    public bool EnableEllipsis { get; public set; }
    public bool EnableBreakSpaces { get; public set; }
    public string Cursor { get; public set; }
    public TextBlock(string text, bool treatAsHTML, bool selectable, TextSize textSize, TextWeight textWeight, string afterText);
    public TextBlock(string text);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsSelectable();
    public void set_IsSelectable(bool value);
    public string get_Text();
    public void set_Text(string value);
    public string get_HTML();
    public void set_HTML(string value);
    public string get_Title();
    public void set_Title(string value);
    private HTMLElement GetTarget();
    public sealed virtual TextSize get_Size();
    public sealed virtual void set_Size(TextSize value);
    public sealed virtual TextWeight get_Weight();
    public sealed virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public bool get_IsPrimary();
    public void set_IsPrimary(bool value);
    public bool get_IsSecondary();
    public void set_IsSecondary(bool value);
    public bool get_IsSuccess();
    public void set_IsSuccess(bool value);
    public bool get_IsDanger();
    public void set_IsDanger(bool value);
    public bool get_IsInvalid();
    public void set_IsInvalid(bool value);
    public virtual bool get_IsRequired();
    public virtual void set_IsRequired(bool value);
    public sealed virtual bool get_CanWrap();
    public sealed virtual void set_CanWrap(bool value);
    public bool get_EnableEllipsis();
    public void set_EnableEllipsis(bool value);
    public bool get_EnableBreakSpaces();
    public void set_EnableBreakSpaces(bool value);
    public string get_Cursor();
    public void set_Cursor(string value);
    public virtual HTMLElement Render();
}
[ExtensionAttribute]
[NameAttribute("tss.txtX")]
public static class Tesserae.TextBlockExtensions : object {
    [ExtensionAttribute]
public static T Text(T textBlock, string text);
    [ExtensionAttribute]
public static T Title(T textBlock, string title);
    [ExtensionAttribute]
public static T Required(T textBlock);
    [ExtensionAttribute]
public static T Wrap(T textBlock);
    [ExtensionAttribute]
public static T Ellipsis(T textBlock);
    [ExtensionAttribute]
public static T BreakSpaces(T textBlock);
    [ExtensionAttribute]
public static T NoWrap(T textBlock);
    [ExtensionAttribute]
public static T Disabled(T textBlock, bool value);
    [ExtensionAttribute]
public static T NonSelectable(T textBlock);
    [ExtensionAttribute]
public static T Primary(T textBlock);
    [ExtensionAttribute]
public static T Success(T textBlock);
    [ExtensionAttribute]
public static T Danger(T textBlock);
    [ExtensionAttribute]
public static T Secondary(T textBlock);
}
[NameAttribute("tss.TextBox")]
public class Tesserae.TextBox : Input`1<TextBox> {
    public string Placeholder { get; public set; }
    public bool IsReadOnly { get; public set; }
    public int MaxLength { get; public set; }
    public bool IsPassword { get; public set; }
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public string Background { get; public set; }
    public string Foreground { get; public set; }
    public TextBox(string text);
    public string get_Placeholder();
    public void set_Placeholder(string value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public bool get_IsPassword();
    public void set_IsPassword(bool value);
    public virtual TextSize get_Size();
    public virtual void set_Size(TextSize value);
    public virtual TextWeight get_Weight();
    public virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
    public TextBox SetPlaceholder(string placeholder);
    public TextBox ReadOnly();
    public TextBox Password();
    public TextBox NoBorder();
    public TextBox NoMinWidth();
    public TextBox UnlockHeight();
}
[NameAttribute("tss.TextBreadcrumb")]
public class Tesserae.TextBreadcrumb : ComponentBase`2<TextBreadcrumb, HTMLSpanElement> {
    public TextBreadcrumb(string text);
    public virtual HTMLElement Render();
}
[NameAttribute("tss.TextBreadcrumbs")]
public class Tesserae.TextBreadcrumbs : object {
    private HTMLElement InnerElement;
    public TextSize Size { get; public set; }
    public TextWeight Weight { get; public set; }
    public TextAlign TextAlign { get; public set; }
    public string Foreground { get; public set; }
    public sealed virtual void Clear();
    public sealed virtual void Replace(TextBreadcrumb newComponent, TextBreadcrumb oldComponent);
    public sealed virtual void Add(TextBreadcrumb component);
    public TextBreadcrumbs Items(TextBreadcrumb[] children);
    public sealed virtual HTMLElement Render();
    public virtual TextSize get_Size();
    public virtual void set_Size(TextSize value);
    public virtual TextWeight get_Weight();
    public virtual void set_Weight(TextWeight value);
    public sealed virtual TextAlign get_TextAlign();
    public sealed virtual void set_TextAlign(TextAlign value);
    public sealed virtual string get_Foreground();
    public sealed virtual void set_Foreground(string value);
    private void <Items>b__5_0(TextBreadcrumb x);
}
[EnumAttribute]
[NameAttribute("tss.TC")]
public enum Tesserae.TextColor : Enum {
    public int value__;
    [NameAttribute("text-dark")]
public static TextColor Dark;
    [NameAttribute("text-warning")]
public static TextColor Warning;
    [NameAttribute("text-danger")]
public static TextColor Danger;
    [NameAttribute("text-muted")]
public static TextColor Muted;
    [NameAttribute("text-success")]
public static TextColor Success;
    [NameAttribute("text-primary")]
public static TextColor Primary;
    [NameAttribute("text-secondary")]
public static TextColor Secondary;
}
[EnumAttribute]
[NameAttribute("tss.TS")]
public enum Tesserae.TextSize : Enum {
    public int value__;
    [NameAttribute("tss-fontsize-tiny")]
public static TextSize Tiny;
    [NameAttribute("tss-fontsize-xsmall")]
public static TextSize XSmall;
    [NameAttribute("tss-fontsize-small")]
public static TextSize Small;
    [NameAttribute("tss-fontsize-smallplus")]
public static TextSize SmallPlus;
    [NameAttribute("tss-fontsize-medium")]
public static TextSize Medium;
    [NameAttribute("tss-fontsize-mediumplus")]
public static TextSize MediumPlus;
    [NameAttribute("tss-fontsize-large")]
public static TextSize Large;
    [NameAttribute("tss-fontsize-xlarge")]
public static TextSize XLarge;
    [NameAttribute("tss-fontsize-xxlarge")]
public static TextSize XXLarge;
    [NameAttribute("tss-fontsize-mega")]
public static TextSize Mega;
}
[EnumAttribute]
[NameAttribute("tss.TW")]
public enum Tesserae.TextWeight : Enum {
    public int value__;
    [NameAttribute("tss-fontweight-regular")]
public static TextWeight Regular;
    [NameAttribute("tss-fontweight-semibold")]
public static TextWeight SemiBold;
    [NameAttribute("tss-fontweight-bold")]
public static TextWeight Bold;
}
[NameAttribute("tss.Timeline")]
public class Tesserae.Timeline : object {
    private HTMLElement _timeline;
    private HTMLElement _timelineOwner;
    private bool left;
    public string Background { get; public set; }
    public string Margin { get; public set; }
    public string Padding { get; public set; }
    public bool IsSameSide { get; public set; }
    public sealed virtual string get_Background();
    public sealed virtual void set_Background(string value);
    public sealed virtual string get_Margin();
    public sealed virtual void set_Margin(string value);
    public sealed virtual string get_Padding();
    public sealed virtual void set_Padding(string value);
    public bool get_IsSameSide();
    public void set_IsSameSide(bool value);
    public sealed virtual void Add(IComponent component);
    public Timeline SameSide();
    public Timeline SameSideIf(int minWidthPixels);
    public Timeline TimelineWidth(UnitSize maxWidth);
    private void Rebase(bool rebaseAll);
    private HTMLElement Wrap(IComponent component);
    public sealed virtual void Clear();
    public sealed virtual HTMLElement Render();
    public sealed virtual void Replace(IComponent newComponent, IComponent oldComponent);
}
[NameAttribute("tss.TimePicker")]
public class Tesserae.TimePicker : MomentPickerBase`2<TimePicker, DateTimeOffset> {
    public DateTimeOffset Time { get; }
    public TimePicker(Nullable`1<DateTimeOffset> time);
    public DateTimeOffset get_Time();
    public TimePicker WithBrowserFallback();
    private static string FormatDateTime(DateTimeOffset time);
    protected virtual string FormatMoment(DateTimeOffset time);
    protected virtual DateTimeOffset FormatMoment(string time);
}
[NameAttribute("tss.tippy")]
public static class Tesserae.Tippy : object {
    public static int DeadZoneTop;
    private static HTMLElement GetAppendToTarget(HTMLElement hostElement);
    public static void ShowFor(IComponent hostComponent, IComponent tooltip, Action& hide, TooltipAnimation animation, TooltipPlacement placement, int delayShow, int delayHide, int maxWidth, bool arrow, string theme, bool hideOnClick, Action onHiddenCallback, Func`1<bool> onHide);
    private static TooltipPlacement CheckDeadZone(TooltipPlacement placement, HTMLElement appendTo);
    public static void ShowFor(HTMLElement hostElement, HTMLElement tooltip, Action& hide, TooltipAnimation animation, TooltipPlacement placement, int delayShow, int delayHide, int maxWidth, bool arrow, string theme, bool hideOnClick, Action onHiddenCallback, Func`1<bool> onHide);
    public static void HideAll();
}
[NameAttribute("tss.Toast")]
public class Tesserae.Toast : Layer`1<Toast> {
    [DebuggerBrowsableAttribute]
private static Position <DefaultPosition>k__BackingField;
    private Type _type;
    [DebuggerBrowsableAttribute]
private Position <_pos>k__BackingField;
    private IComponent _title;
    private IComponent _message;
    private double _height;
    private static Dictionary`2<Position, List`1<Toast>> OpenToasts;
    private int _timeoutDuration;
    private double _timeoutHandle;
    private HTMLDivElement _toastContainer;
    public static Position DefaultPosition { get; public set; }
    private Position _pos { get; private set; }
    private Position _simPos { get; }
    private static Toast();
    public static Position get_DefaultPosition();
    public static void set_DefaultPosition(Position value);
    private Position get__pos();
    private void set__pos(Position value);
    private Position get__simPos();
    public Toast TopRight();
    public Toast TopCenter();
    public Toast TopLeft();
    public Toast BottomRight();
    public Toast BottomCenter();
    public Toast BottomLeft();
    public Toast TopFull();
    public Toast BottomFull();
    public Toast Duration(TimeSpan timeSpan);
    public void Success(IComponent title, IComponent message);
    public void Information(IComponent title, IComponent message);
    public void Warning(IComponent title, IComponent message);
    public void Error(IComponent title, IComponent message);
    public void Success(IComponent message);
    public void Information(IComponent message);
    public void Warning(IComponent message);
    public void Error(IComponent message);
    public void Success(string title, string message);
    public void Information(string title, string message);
    public void Warning(string title, string message);
    public void Error(string title, string message);
    public void Success(string message);
    public void Information(string message);
    public void Warning(string message);
    public void Error(string message);
    public Toast Width(UnitSize width);
    public Toast Height(UnitSize height);
    private void Fire();
    private static void RefreshPositioning();
    private void Measure();
    private void ClearTimeout();
    private void ResetTimeout();
    private void RemoveAndHide();
    private void <Fire>b__45_0(MouseEvent e);
    private void <Fire>b__45_1(MouseEvent e);
    private void <Fire>b__45_2(MouseEvent e);
    private void <ResetTimeout>b__49_0(Object[] _);
}
[NameAttribute("tss.Toggle")]
public class Tesserae.Toggle : ComponentBase`2<Toggle, HTMLInputElement> {
    private HTMLElement _checkElement;
    private HTMLElement _onOffSpan;
    private HTMLElement _container;
    private IComponent _offText;
    private IComponent _onText;
    private SettableObservable`1<bool> _observable;
    public string Text { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsChecked { get; public set; }
    public Toggle(IComponent onText, IComponent offText);
    public string get_Text();
    public void set_Text(string value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public virtual HTMLElement Render();
    private void OnToggleChanged();
    public Toggle SetText(string text);
    public Toggle Disabled(bool value);
    public Toggle Checked(bool value);
    public sealed virtual IObservable`1<bool> AsObservable();
    private void <.ctor>b__6_1(MouseEvent e);
    private void <.ctor>b__6_0(Toggle s, Event e);
}
[NameAttribute("tss.ToggleButton")]
public class Tesserae.ToggleButton : object {
    private Button _button;
    [DebuggerBrowsableAttribute]
private ComponentEventHandler`2<ToggleButton, Event> Changed;
    public bool IsChecked { get; public set; }
    public bool IsEnabled { get; public set; }
    public ToggleButton(Button button);
    protected void add_Changed(ComponentEventHandler`2<ToggleButton, Event> value);
    protected void remove_Changed(ComponentEventHandler`2<ToggleButton, Event> value);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public ToggleButton OnChange(ComponentEventHandler`2<ToggleButton, Event> onChange);
    public sealed virtual HTMLElement Render();
    public ToggleButton Disabled(bool value);
    public ToggleButton Checked(bool value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    private void <.ctor>b__7_0();
}
[EnumAttribute]
[NameAttribute("tss.TooltipAnimation")]
public enum Tesserae.TooltipAnimation : Enum {
    public int value__;
    [NameAttribute("none")]
public static TooltipAnimation None;
    [NameAttribute("shift-away-subtle")]
public static TooltipAnimation ShiftAway;
    [NameAttribute("shift-toward-subtle")]
public static TooltipAnimation ShiftToward;
    [NameAttribute("scale-subtle")]
public static TooltipAnimation Scale;
    [NameAttribute("perspective-subtle")]
public static TooltipAnimation Perspective;
}
[EnumAttribute]
[NameAttribute("tss.TooltipPlacement")]
public enum Tesserae.TooltipPlacement : Enum {
    public int value__;
    [NameAttribute("top")]
public static TooltipPlacement Top;
    [NameAttribute("top-start")]
public static TooltipPlacement TopStart;
    [NameAttribute("top-end")]
public static TooltipPlacement TopEnd;
    [NameAttribute("right")]
public static TooltipPlacement Right;
    [NameAttribute("right-start")]
public static TooltipPlacement RightStart;
    [NameAttribute("right-end")]
public static TooltipPlacement RightEnd;
    [NameAttribute("bottom")]
public static TooltipPlacement Bottom;
    [NameAttribute("bottom-start")]
public static TooltipPlacement BottomStart;
    [NameAttribute("bottom-end")]
public static TooltipPlacement BottomEnd;
    [NameAttribute("left")]
public static TooltipPlacement Left;
    [NameAttribute("left-start")]
public static TooltipPlacement LeftStart;
    [NameAttribute("left-end")]
public static TooltipPlacement LeftEnd;
    [NameAttribute("auto")]
public static TooltipPlacement Auto;
    [NameAttribute("auto-start")]
public static TooltipPlacement AutoStart;
    [NameAttribute("auto-end")]
public static TooltipPlacement AutoEnd;
}
[NameAttribute("tss.TutorialModal")]
public class Tesserae.TutorialModal : object {
    private Modal _modal;
    private Stack _footerCommands;
    private Stack _content;
    private TextBlock _title;
    private TextBlock _helpText;
    private Raw _illustration;
    private Stack _leftStack;
    private Stack _rightStack;
    public HTMLElement StylingContainer { get; }
    public bool PropagateToStackItemParent { get; }
    public TutorialModal(string title, string helpText, string imageSrc);
    public sealed virtual HTMLElement get_StylingContainer();
    public sealed virtual bool get_PropagateToStackItemParent();
    public TutorialModal SetFooterCommands(IComponent[] commands);
    public TutorialModal SetContent(IComponent content);
    public TutorialModal Height(UnitSize height);
    public TutorialModal H(UnitSize height);
    public TutorialModal Width(UnitSize width);
    public TutorialModal W(UnitSize width);
    public TutorialModal SetTitle(string title);
    public TutorialModal SetHelpText(string helpText, bool treatAsHTML);
    public TutorialModal SetImageSrc(string imageSrc, UnitSize padding);
    public TutorialModal SetImage(Image image, UnitSize padding);
    public TutorialModal LightDismiss();
    public TutorialModal NoLightDismiss();
    public TutorialModal ContentPadding(string padding);
    public IComponent ShowEmbedded();
    public TutorialModal Border(string color, UnitSize size);
    public TutorialModal Show();
    public TutorialModal OnHide(OnHideHandler onHide);
    public TutorialModal OnShow(OnShowHandler onShow);
    public void Hide(Action onHidden);
    public sealed virtual HTMLElement Render();
}
[ExtensionAttribute]
[NameAttribute("tss.UI")]
public static class Tesserae.UI : object {
    private static UI();
    [ExtensionAttribute]
public static T Var(T component, T& var);
    [ExtensionAttribute]
public static T Do(T component, Action`1<T> action);
    public static IComponent If(bool condition, IComponent ifTrue, IComponent ifFalse);
    public static IComponent If(bool condition, Func`1<IComponent> ifTrue, IComponent ifFalse);
    public static IComponent If(bool condition, Func`1<IComponent> ifTrue, Func`1<IComponent> ifFalse);
    [ExtensionAttribute]
public static T Id(T component, string id);
    [ExtensionAttribute]
public static T Class(T component, string className);
    [ExtensionAttribute]
public static T RemoveClass(T component, string className);
    public static Raw Raw(HTMLElement element);
    public static Raw Raw();
    public static Raw Raw(IComponent component);
    public static IComponent Empty();
    public static Image Image(string source, string fallback);
    public static Card Card(IComponent content);
    public static BackgroundArea BackgroundArea(IComponent content);
    public static IDefer Defer(Func`1<Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<TComponent> observableComponent);
    public static IDefer Defer(IObservable`1<T1> o1, Func`2<T1, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, Func`3<T1, T2, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, Func`4<T1, T2, T3, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, Func`5<T1, T2, T3, T4, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, Func`6<T1, T2, T3, T4, T5, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, Func`7<T1, T2, T3, T4, T5, T6, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, IObservable`1<T10> o10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task`1<IComponent>> asyncGenerator);
    public static IDefer Defer(Func`1<Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, Func`2<T1, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, Func`3<T1, T2, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, Func`4<T1, T2, T3, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, Func`5<T1, T2, T3, T4, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, Func`6<T1, T2, T3, T4, T5, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, Func`7<T1, T2, T3, T4, T5, T6, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, Func`8<T1, T2, T3, T4, T5, T6, T7, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer Defer(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, IObservable`1<T10> o10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task`1<IComponent>> asyncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(Func`1<IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<TComponent> observableComponent);
    public static IDefer DeferSync(IObservable`1<T1> o1, Func`2<T1, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, Func`3<T1, T2, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, Func`4<T1, T2, T3, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, Func`5<T1, T2, T3, T4, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, Func`6<T1, T2, T3, T4, T5, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, Func`7<T1, T2, T3, T4, T5, T6, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, Func`8<T1, T2, T3, T4, T5, T6, T7, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IComponent> syncGenerator);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, IObservable`1<T10> o10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IComponent> syncGenerator);
    public static IDefer DeferSync(Func`1<IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, Func`2<T1, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, Func`3<T1, T2, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, Func`4<T1, T2, T3, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, Func`5<T1, T2, T3, T4, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, Func`6<T1, T2, T3, T4, T5, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, Func`7<T1, T2, T3, T4, T5, T6, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, Func`8<T1, T2, T3, T4, T5, T6, T7, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, Func`9<T1, T2, T3, T4, T5, T6, T7, T8, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, Func`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, IComponent> syncGenerator, IComponent loadMessage);
    public static IDefer DeferSync(IObservable`1<T1> o1, IObservable`1<T2> o2, IObservable`1<T3> o3, IObservable`1<T4> o4, IObservable`1<T5> o5, IObservable`1<T6> o6, IObservable`1<T7> o7, IObservable`1<T8> o8, IObservable`1<T9> o9, IObservable`1<T10> o10, Func`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IComponent> syncGenerator, IComponent loadMessage);
    public static Stack Stack(Orientation orientation);
    public static Masonry Masonry(int columns, int gutter);
    public static Stack HStack();
    public static Stack VStack();
    public static Grid Grid(UnitSize[] columns);
    public static Grid Grid(UnitSize[] columns, UnitSize[] rows);
    public static SectionStack SectionStack();
    public static Float Float(IComponent child, Position position);
    public static Button Button(string text);
    public static ActionButton ActionButton(string textContent, UIcons displayIcon, UIconsWeight displayIconWeight, string displayColor, TextSize displayIconSize, UIconsWeight actionIconWeight, UIcons actionIcon, string actionColor, TextSize actionIconSize);
    public static ActionButton ActionButton(string textContent, UIcons actionIcon, UIconsWeight actionIconWeight, string actionColor, TextSize actionIconSize);
    public static ActionButton ActionButton(IComponent contnent, string actionIcon, string actionColor, TextSize actionIconSize);
    public static CheckBox CheckBox(string text);
    public static Toggle Toggle(IComponent onText, IComponent offText);
    public static Toggle Toggle(string onText, string offText);
    public static Toggle Toggle(string text);
    public static Toggle Toggle();
    public static Choice Choice(string label);
    public static ChoiceGroup ChoiceGroup(string label);
    public static TextBlock TextBlock(string text);
    public static TextBlock TextBlock(string text, bool treatAsHTML, bool selectable, TextSize textSize, TextWeight textWeight, string afterText);
    public static FileSelector FileSelector();
    public static FileDropArea FileDropArea();
    public static Validator Validator();
    public static Icon Icon(UIcons icon, string color);
    public static Icon Icon(UIcons icon, UIconsWeight weight, TextSize size, string color);
    public static Icon Icon(Emoji icon, TextSize size);
    public static HorizontalSeparator HorizontalSeparator(string text);
    public static HorizontalSeparator HorizontalSeparator(IComponent component);
    public static Label Label(string text);
    public static Label Label(IComponent component);
    public static EditableLabel EditableLabel(string text);
    public static EditableArea EditableArea(string text);
    public static Breadcrumb Breadcrumb();
    public static TextBreadcrumbs TextBreadcrumbs();
    public static TextBreadcrumb TextBreadcrumb(string text);
    public static Button Crumb(string text);
    public static OverflowSet OverflowSet();
    public static TextBox TextBox(string text);
    public static TextArea TextArea(string text);
    public static ColorPicker ColorPicker(Color color);
    public static DateTimePicker DateTimePicker(Nullable`1<DateTime> dateTime);
    public static DatePicker DatePicker(Nullable`1<DateTime> dateTime);
    public static NumberPicker NumberPicker(int defaultValue);
    public static GridPicker GridPicker(String[] columnNames, String[] rowNames, int states, Int32[][] initialStates, Action`3<Button, int, int> formatState, UnitSize[] columns, UnitSize rowHeight);
    public static SearchBox SearchBox(string placeholder);
    public static Slider Slider(int val, int min, int max, int step);
    public static Layer Layer();
    public static LayerHost LayerHost();
    public static Nav Nav();
    public static NavLink NavLink(string text);
    public static NavLink NavLink(IComponent content);
    public static Panel Panel(string title);
    public static Panel Panel(IComponent title);
    public static Modal Modal(IComponent header);
    public static Modal Modal(string header);
    public static TutorialModal TutorialModal();
    public static TutorialModal TutorialModal(string title, string helpText);
    public static ProgressModal ProgressModal();
    public static Dialog Dialog(IComponent content, IComponent title, bool centerContent);
    public static Dialog Dialog(string text, bool centerContent);
    public static Pivot Pivot();
    public static Sidebar Sidebar(bool sortable);
    public static Toast Toast();
    public static ProgressIndicator ProgressIndicator();
    public static Dropdown Dropdown();
    public static Dropdown Dropdown(string noItemsText);
    public static Dropdown Dropdown(HTMLSpanElement noItemsSpan);
    public static Item DropdownItem();
    public static Item DropdownItem(string text, string selectedText);
    public static Item DropdownItem(IComponent content, IComponent selectedContent);
    public static ContextMenu ContextMenu();
    public static Item ContextMenuItem(string text);
    public static Item ContextMenuItem(IComponent component);
    public static Spinner Spinner(string text);
    public static Link Link(string url, IComponent content, bool noUnderline);
    public static Link Link(string url, string text);
    public static Link Link(string url, string text, UIcons icon, bool noUnderline);
    public static SplitView SplitView();
    public static HorizontalSplitView HorizontalSplitView();
    public static VirtualizedList VirtualizedList(int rowsPerPage, int columnsPerRow);
    public static SearchableList`1<T> SearchableList(T[] components, UnitSize[] columns);
    public static SearchableList`1<T> SearchableList(ObservableList`1<T> components, UnitSize[] columns);
    public static SearchableGroupedList`1<T> SearchableGroupedList(T[] components, Func`2<string, IComponent> groupedItemHeaderGenerator, UnitSize[] columns);
    public static SearchableGroupedList`1<T> SearchableGroupedList(ObservableList`1<T> components, Func`2<string, IComponent> groupedItemHeaderGenerator, UnitSize[] columns);
    public static ItemsList ItemsList(IComponent[] components, UnitSize[] columns);
    public static ItemsList ItemsList(ObservableList`1<IComponent> components, UnitSize[] columns);
    public static InfiniteScrollingList InfiniteScrollingList(Func`1<IComponent[]> getNextItemPage, UnitSize[] columns);
    public static InfiniteScrollingList InfiniteScrollingList(Func`1<Task`1<IComponent[]>> getNextItemPage, UnitSize[] columns);
    public static InfiniteScrollingList InfiniteScrollingList(IComponent[] initComponents, Func`1<Task`1<IComponent[]>> getNextItemPage, UnitSize[] columns);
    public static InfiniteScrollingList InfiniteScrollingList(IComponent[] initComponents, Func`1<IComponent[]> getNextItemPage, UnitSize[] columns);
    public static DetailsList`1<TDetailsListItem> DetailsList(IDetailsListColumn[] columns);
    public static DetailsListIconColumn IconColumn(Icon icon, UnitSize width, bool enableColumnSorting, string sortingKey, Action onColumnClick);
    public static DetailsListIconColumn IconColumn(Icon icon, UnitSize width, UnitSize maxWidth, bool enableColumnSorting, string sortingKey, Action onColumnClick);
    public static DetailsListColumn DetailsListColumn(string title, UnitSize width, bool isRowHeader, bool enableColumnSorting, string sortingKey, Action onColumnClick);
    public static DetailsListColumn DetailsListColumn(string title, UnitSize width, UnitSize maxWidth, bool isRowHeader, bool enableColumnSorting, string sortingKey, Action onColumnClick);
    public static Picker`1<TPickerItem> Picker(int maximumAllowedSelections, bool duplicateSelectionsAllowed, int suggestionsTolerance, bool renderSelectionsInline, string suggestionsTitleText);
    public static VisibilitySensor VisibilitySensor(Action`1<VisibilitySensor> onVisible, bool singleCall, IComponent message);
    public static CombinedObservable`2<T1, T2> Combine(IObservable`1<T1> o1, IObservable`1<T2> o2);
    public static Timeline Timeline();
    public static Teaching Teaching();
    [ExtensionAttribute]
public static ToggleButton ToToggle(Button button);
    public static Attributes _();
    public static Attributes _(string className);
    public static Attributes _(string className, string id, string src, string href, string rel, string target, string text, string type, Nullable`1<bool> disabled, string value, string placeholder, string defaultValue, string title, Action`1<HTMLElement> el, Action`1<CSSStyleDeclaration> styles);
    [ExtensionAttribute]
public static HTMLElement TryToFindAncestor(HTMLElement source, string tagNameToFind);
    [ExtensionAttribute]
public static bool IsMounted(HTMLElement source);
    [ExtensionAttribute]
public static bool IsMounted(IComponent source);
    [ExtensionAttribute]
public static bool IsEqualToOrIsChildOf(HTMLElement element, Node possibleParentElement);
    [ExtensionAttribute]
public static void AppendChildren(HTMLElement source, HTMLElement[] children);
    public static void StopEvent(Event e);
    public static List`1<Element> ToList(HTMLCollection c);
    [ExtensionAttribute]
public static void RemoveChildElements(HTMLElement source);
    [ExtensionAttribute]
public static HTMLElement UpdateClassIf(HTMLElement htmlElement, bool value, string cssClass);
    [ExtensionAttribute]
public static HTMLElement UpdateClassIfNot(HTMLElement htmlElement, bool value, string cssClass);
    public static void ReplaceElement(HTMLElement source, HTMLElement replaceWith);
    public static void AppendElements(HTMLElement parent, IEnumerable`1<HTMLElement> children);
    public static void AppendElements(HTMLElement parent, HTMLElement[] children);
    public static void ClearChildren(HTMLElement element);
    public static HTMLElement AppendClass(HTMLElement element, String[] classes);
    public static HTMLElement SetStyle(HTMLElement element, Action`1<CSSStyleDeclaration> style);
    [ExtensionAttribute]
public static T SetStyle(T element, Action`1<CSSStyleDeclaration> style);
    [IgnoreGenericAttribute]
private static T InitElement(T element, Attributes init, HTMLElement[] children);
    public static HTMLElement Raw(string html, bool forceParseAsHTML);
    private static bool IsProbablyHtml(string html);
    public static Text Text(string text);
    public static HTMLDivElement Div(Attributes init, HTMLElement first);
    public static HTMLDivElement Div(Attributes init, HTMLElement first, HTMLElement second);
    public static HTMLDivElement Div(Attributes init, HTMLElement[] children);
    public static HTMLSpanElement Span(Attributes init, HTMLElement[] children);
    public static HTMLParagraphElement P(Attributes init, HTMLElement[] children);
    public static HTMLPreElement Pre(Attributes init, HTMLElement[] children);
    public static HTMLElement Strong(Attributes init, HTMLElement[] children);
    public static HTMLElement I(Attributes init, HTMLElement[] children);
    public static HTMLElement I(UIcons icon, UIconsWeight weight, string cssClass);
    public static HTMLElement Sup(Attributes init, HTMLElement[] children);
    public static HTMLBRElement Br(Attributes init);
    public static HTMLOListElement Ol(Attributes init, HTMLLIElement[] children);
    public static HTMLUListElement Ul(Attributes init, HTMLLIElement[] children);
    public static HTMLLIElement Li(Attributes init, HTMLElement[] children);
    public static HTMLElement Main(Attributes init, HTMLElement[] children);
    public static HTMLElement Header(Attributes init, HTMLElement[] children);
    public static HTMLElement Footer(Attributes init, HTMLElement[] children);
    public static HTMLElement Section(Attributes init, HTMLElement[] children);
    public static HTMLElement Nav(Attributes init, HTMLElement[] children);
    public static HTMLHRElement HR(Attributes init);
    public static HTMLAnchorElement A(Attributes init, HTMLElement[] children);
    public static HTMLImageElement Image(Attributes init);
    public static HTMLCanvasElement Canvas(Attributes init);
    private static HTMLElement H(Attributes init, string type, HTMLElement[] children);
    public static HTMLElement H1(Attributes init, HTMLElement[] children);
    public static HTMLElement H2(Attributes init, HTMLElement[] children);
    public static HTMLElement H3(Attributes init, HTMLElement[] children);
    public static HTMLElement H4(Attributes init, HTMLElement[] children);
    public static HTMLElement H5(Attributes init, HTMLElement[] children);
    public static HTMLElement H6(Attributes init, HTMLElement[] children);
    public static HTMLFormElement FormE(Attributes init, HTMLElement[] children);
    public static HTMLFieldSetElement FieldSet(Attributes init, HTMLElement[] children);
    public static HTMLOptGroupElement OptGroup(Attributes init, HTMLOptionElement[] children);
    public static HTMLOptionElement Option(Attributes init);
    public static HTMLLegendElement Legend(Attributes init, HTMLElement[] children);
    public static HTMLButtonElement Button(Attributes init, HTMLElement[] children);
    public static HTMLSelectElement Select(Attributes init, HTMLOptionElement[] children);
    public static HTMLDataListElement DataList(Attributes init, HTMLOptionElement[] children);
    public static HTMLInputElement TextBox(Attributes init);
    public static HTMLInputElement CheckBox(Attributes init);
    public static HTMLInputElement RadioButton(Attributes init);
    public static HTMLInputElement FileInput(Attributes init);
    public static HTMLTextAreaElement TextArea(Attributes init);
    public static HTMLLabelElement Label(Attributes init, HTMLElement[] children);
    public static HTMLTableElement Table(Attributes init, HTMLElement[] children);
    public static HTMLTableCaptionElement Caption(Attributes init, HTMLElement[] children);
    public static HTMLElement THeader(Attributes init, HTMLTableRowElement[] children);
    public static HTMLTableSectionElement TBody(Attributes init, HTMLTableRowElement[] children);
    public static HTMLTableSectionElement TFooter(Attributes init, HTMLTableRowElement[] children);
    public static HTMLTableRowElement TRow(Attributes init, HTMLTableDataCellElement[] children);
    public static HTMLTableRowElement TRow(Attributes init, HTMLTableHeaderCellElement[] children);
    public static HTMLTableDataCellElement Td(Attributes init, HTMLElement[] children);
    public static HTMLTableHeaderCellElement Th(Attributes init, HTMLElement[] children);
    public static HTMLIFrameElement IFrame(Attributes init, HTMLElement[] children);
    public static HTMLDivElement DIV(HTMLElement[] child);
    public static HTMLSpanElement SPAN(HTMLElement[] child);
    public static void MakeScrollableOnHover(HTMLElement element, int initialDelay, double pixelsPerSecond);
}
[ExtensionAttribute]
public static class Tesserae.UIconHelper : object {
    private static Dictionary`2<UIcons, string> Icon2Unicode;
    private static UIconHelper();
    public static UIcons WithDefaultUIcon(UIcons icon, UIcons defaultIcon);
    public static UIcons WithDefaultUIcon(UIcons icon);
    [ExtensionAttribute]
public static Emoji WithTextSize(Emoji icon, TextSize size);
    [ExtensionAttribute]
public static UIcons WithTextSize(UIcons icon, TextSize size);
    [ExtensionAttribute]
public static UIcons WithTextColor(UIcons icon, TextColor color);
    public static bool TryGetUIcon(string value, UIcons& icon);
    public static bool TryGetEmoji(string value, Emoji& icon);
    public static UIcons ParseUIcon(string value, UIcons ifInvalid);
    public static UIcons AsUIcon(string value);
    [ExtensionAttribute]
public static UIcons WithCss(UIcons value, String[] cssClasses);
    [ExtensionAttribute]
public static Emoji WithCss(Emoji value, String[] cssClasses);
    public static UIcons ToIconOrDefault(string value, UIcons defaultIcon);
    public static Emoji ToEmojiOrDefault(string value, Emoji defaultEmoji);
    public static Emoji AsEmoji(string value);
    public static string GetUnicode(UIcons icon);
    private static string GetContent(UIcons icon);
    public static string GetFontText(UIcons icon, UIconsWeight weight);
}
[EnumAttribute]
public enum Tesserae.UIcons : Enum {
    public int value__;
    [NameAttribute("fi-rr-default-empty")]
public static UIcons Default;
    [NameAttribute("fi-rr-0")]
public static UIcons _0;
    [NameAttribute("fi-rr-00s-music-disc")]
public static UIcons _00sMusicDisc;
    [NameAttribute("fi-rr-1")]
public static UIcons _1;
    [NameAttribute("fi-rr-2")]
public static UIcons _2;
    [NameAttribute("fi-rr-3")]
public static UIcons _3;
    [NameAttribute("fi-rr-360-degrees")]
public static UIcons _360Degrees;
    [NameAttribute("fi-rr-4")]
public static UIcons _4;
    [NameAttribute("fi-rr-404")]
public static UIcons _404;
    [NameAttribute("fi-rr-5")]
public static UIcons _5;
    [NameAttribute("fi-rr-6")]
public static UIcons _6;
    [NameAttribute("fi-rr-60s-music-disc")]
public static UIcons _60sMusicDisc;
    [NameAttribute("fi-rr-7")]
public static UIcons _7;
    [NameAttribute("fi-rr-70s-music-disc")]
public static UIcons _70sMusicDisc;
    [NameAttribute("fi-rr-8")]
public static UIcons _8;
    [NameAttribute("fi-rr-80s-music-disc")]
public static UIcons _80sMusicDisc;
    [NameAttribute("fi-rr-9")]
public static UIcons _9;
    [NameAttribute("fi-rr-90s-music-disc")]
public static UIcons _90sMusicDisc;
    [NameAttribute("fi-rr-a")]
public static UIcons A;
    [NameAttribute("fi-rr-accident")]
public static UIcons Accident;
    [NameAttribute("fi-rr-acorn")]
public static UIcons Acorn;
    [NameAttribute("fi-rr-ad")]
public static UIcons Ad;
    [NameAttribute("fi-rr-ad-paid")]
public static UIcons AdPaid;
    [NameAttribute("fi-rr-add")]
public static UIcons Add;
    [NameAttribute("fi-rr-add-document")]
public static UIcons AddDocument;
    [NameAttribute("fi-rr-add-folder")]
public static UIcons AddFolder;
    [NameAttribute("fi-rr-add-image")]
public static UIcons AddImage;
    [NameAttribute("fi-rr-address-book")]
public static UIcons AddressBook;
    [NameAttribute("fi-rr-address-card")]
public static UIcons AddressCard;
    [NameAttribute("fi-rr-admin")]
public static UIcons Admin;
    [NameAttribute("fi-rr-admin-alt")]
public static UIcons AdminAlt;
    [NameAttribute("fi-rr-age")]
public static UIcons Age;
    [NameAttribute("fi-rr-age-alt")]
public static UIcons AgeAlt;
    [NameAttribute("fi-rr-age-restriction-eighteen")]
public static UIcons AgeRestrictionEighteen;
    [NameAttribute("fi-rr-age-restriction-seven")]
public static UIcons AgeRestrictionSeven;
    [NameAttribute("fi-rr-age-restriction-six")]
public static UIcons AgeRestrictionSix;
    [NameAttribute("fi-rr-age-restriction-sixteen")]
public static UIcons AgeRestrictionSixteen;
    [NameAttribute("fi-rr-age-restriction-thirteen")]
public static UIcons AgeRestrictionThirteen;
    [NameAttribute("fi-rr-age-restriction-three")]
public static UIcons AgeRestrictionThree;
    [NameAttribute("fi-rr-age-restriction-twelve")]
public static UIcons AgeRestrictionTwelve;
    [NameAttribute("fi-rr-age-restriction-twenty-one")]
public static UIcons AgeRestrictionTwentyOne;
    [NameAttribute("fi-rr-age-restriction-zero")]
public static UIcons AgeRestrictionZero;
    [NameAttribute("fi-rr-air-conditioner")]
public static UIcons AirConditioner;
    [NameAttribute("fi-rr-air-freshener")]
public static UIcons AirFreshener;
    [NameAttribute("fi-rr-air-pollution")]
public static UIcons AirPollution;
    [NameAttribute("fi-rr-airplane-journey")]
public static UIcons AirplaneJourney;
    [NameAttribute("fi-rr-airplane-window-open")]
public static UIcons AirplaneWindowOpen;
    [NameAttribute("fi-rr-airplay")]
public static UIcons Airplay;
    [NameAttribute("fi-rr-alarm-clock")]
public static UIcons AlarmClock;
    [NameAttribute("fi-rr-alarm-exclamation")]
public static UIcons AlarmExclamation;
    [NameAttribute("fi-rr-alarm-plus")]
public static UIcons AlarmPlus;
    [NameAttribute("fi-rr-alarm-snooze")]
public static UIcons AlarmSnooze;
    [NameAttribute("fi-rr-album")]
public static UIcons Album;
    [NameAttribute("fi-rr-album-circle-plus")]
public static UIcons AlbumCirclePlus;
    [NameAttribute("fi-rr-album-circle-user")]
public static UIcons AlbumCircleUser;
    [NameAttribute("fi-rr-album-collection")]
public static UIcons AlbumCollection;
    [NameAttribute("fi-rr-algorithm")]
public static UIcons Algorithm;
    [NameAttribute("fi-rr-alicorn")]
public static UIcons Alicorn;
    [NameAttribute("fi-rr-alien")]
public static UIcons Alien;
    [NameAttribute("fi-rr-align-center")]
public static UIcons AlignCenter;
    [NameAttribute("fi-rr-align-justify")]
public static UIcons AlignJustify;
    [NameAttribute("fi-rr-align-left")]
public static UIcons AlignLeft;
    [NameAttribute("fi-rr-align-slash")]
public static UIcons AlignSlash;
    [NameAttribute("fi-rr-ambulance")]
public static UIcons Ambulance;
    [NameAttribute("fi-rr-amusement-park")]
public static UIcons AmusementPark;
    [NameAttribute("fi-rr-analyse")]
public static UIcons Analyse;
    [NameAttribute("fi-rr-analyse-alt")]
public static UIcons AnalyseAlt;
    [NameAttribute("fi-rr-anatomical-heart")]
public static UIcons AnatomicalHeart;
    [NameAttribute("fi-rr-anchor")]
public static UIcons Anchor;
    [NameAttribute("fi-rr-angel")]
public static UIcons Angel;
    [NameAttribute("fi-rr-angle")]
public static UIcons Angle;
    [NameAttribute("fi-rr-angle-90")]
public static UIcons Angle90;
    [NameAttribute("fi-rr-angle-circle-down")]
public static UIcons AngleCircleDown;
    [NameAttribute("fi-rr-angle-circle-left")]
public static UIcons AngleCircleLeft;
    [NameAttribute("fi-rr-angle-circle-right")]
public static UIcons AngleCircleRight;
    [NameAttribute("fi-rr-angle-circle-up")]
public static UIcons AngleCircleUp;
    [NameAttribute("fi-rr-angle-double-left")]
public static UIcons AngleDoubleLeft;
    [NameAttribute("fi-rr-angle-double-right")]
public static UIcons AngleDoubleRight;
    [NameAttribute("fi-rr-angle-double-small-down")]
public static UIcons AngleDoubleSmallDown;
    [NameAttribute("fi-rr-angle-double-small-left")]
public static UIcons AngleDoubleSmallLeft;
    [NameAttribute("fi-rr-angle-double-small-right")]
public static UIcons AngleDoubleSmallRight;
    [NameAttribute("fi-rr-angle-double-small-up")]
public static UIcons AngleDoubleSmallUp;
    [NameAttribute("fi-rr-angle-down")]
public static UIcons AngleDown;
    [NameAttribute("fi-rr-angle-left")]
public static UIcons AngleLeft;
    [NameAttribute("fi-rr-angle-right")]
public static UIcons AngleRight;
    [NameAttribute("fi-rr-angle-small-down")]
public static UIcons AngleSmallDown;
    [NameAttribute("fi-rr-angle-small-left")]
public static UIcons AngleSmallLeft;
    [NameAttribute("fi-rr-angle-small-right")]
public static UIcons AngleSmallRight;
    [NameAttribute("fi-rr-angle-small-up")]
public static UIcons AngleSmallUp;
    [NameAttribute("fi-rr-angle-square-down")]
public static UIcons AngleSquareDown;
    [NameAttribute("fi-rr-angle-square-left")]
public static UIcons AngleSquareLeft;
    [NameAttribute("fi-rr-angle-square-right")]
public static UIcons AngleSquareRight;
    [NameAttribute("fi-rr-angle-square-up")]
public static UIcons AngleSquareUp;
    [NameAttribute("fi-rr-angle-up")]
public static UIcons AngleUp;
    [NameAttribute("fi-rr-angles-up-down")]
public static UIcons AnglesUpDown;
    [NameAttribute("fi-rr-angry")]
public static UIcons Angry;
    [NameAttribute("fi-rr-animated-icon")]
public static UIcons AnimatedIcon;
    [NameAttribute("fi-rr-ankh")]
public static UIcons Ankh;
    [NameAttribute("fi-rr-answer")]
public static UIcons Answer;
    [NameAttribute("fi-rr-answer-alt")]
public static UIcons AnswerAlt;
    [NameAttribute("fi-rr-apartment")]
public static UIcons Apartment;
    [NameAttribute("fi-rr-aperture")]
public static UIcons Aperture;
    [NameAttribute("fi-rr-api")]
public static UIcons Api;
    [NameAttribute("fi-rr-apple-core")]
public static UIcons AppleCore;
    [NameAttribute("fi-rr-apple-crate")]
public static UIcons AppleCrate;
    [NameAttribute("fi-rr-apple-whole")]
public static UIcons AppleWhole;
    [NameAttribute("fi-rr-apps")]
public static UIcons Apps;
    [NameAttribute("fi-rr-apps-add")]
public static UIcons AppsAdd;
    [NameAttribute("fi-rr-apps-delete")]
public static UIcons AppsDelete;
    [NameAttribute("fi-rr-apps-sort")]
public static UIcons AppsSort;
    [NameAttribute("fi-rr-archive")]
public static UIcons Archive;
    [NameAttribute("fi-rr-archway")]
public static UIcons Archway;
    [NameAttribute("fi-rr-arrow-alt-circle-down")]
public static UIcons ArrowAltCircleDown;
    [NameAttribute("fi-rr-arrow-alt-circle-left")]
public static UIcons ArrowAltCircleLeft;
    [NameAttribute("fi-rr-arrow-alt-circle-right")]
public static UIcons ArrowAltCircleRight;
    [NameAttribute("fi-rr-arrow-alt-circle-up")]
public static UIcons ArrowAltCircleUp;
    [NameAttribute("fi-rr-arrow-alt-down")]
public static UIcons ArrowAltDown;
    [NameAttribute("fi-rr-arrow-alt-from-bottom")]
public static UIcons ArrowAltFromBottom;
    [NameAttribute("fi-rr-arrow-alt-from-left")]
public static UIcons ArrowAltFromLeft;
    [NameAttribute("fi-rr-arrow-alt-from-right")]
public static UIcons ArrowAltFromRight;
    [NameAttribute("fi-rr-arrow-alt-from-top")]
public static UIcons ArrowAltFromTop;
    [NameAttribute("fi-rr-arrow-alt-left")]
public static UIcons ArrowAltLeft;
    [NameAttribute("fi-rr-arrow-alt-right")]
public static UIcons ArrowAltRight;
    [NameAttribute("fi-rr-arrow-alt-square-down")]
public static UIcons ArrowAltSquareDown;
    [NameAttribute("fi-rr-arrow-alt-square-left")]
public static UIcons ArrowAltSquareLeft;
    [NameAttribute("fi-rr-arrow-alt-square-right")]
public static UIcons ArrowAltSquareRight;
    [NameAttribute("fi-rr-arrow-alt-square-up")]
public static UIcons ArrowAltSquareUp;
    [NameAttribute("fi-rr-arrow-alt-to-bottom")]
public static UIcons ArrowAltToBottom;
    [NameAttribute("fi-rr-arrow-alt-to-left")]
public static UIcons ArrowAltToLeft;
    [NameAttribute("fi-rr-arrow-alt-to-right")]
public static UIcons ArrowAltToRight;
    [NameAttribute("fi-rr-arrow-alt-to-top")]
public static UIcons ArrowAltToTop;
    [NameAttribute("fi-rr-arrow-alt-up")]
public static UIcons ArrowAltUp;
    [NameAttribute("fi-rr-arrow-circle-down")]
public static UIcons ArrowCircleDown;
    [NameAttribute("fi-rr-arrow-circle-left")]
public static UIcons ArrowCircleLeft;
    [NameAttribute("fi-rr-arrow-circle-right")]
public static UIcons ArrowCircleRight;
    [NameAttribute("fi-rr-arrow-circle-up")]
public static UIcons ArrowCircleUp;
    [NameAttribute("fi-rr-arrow-comparison")]
public static UIcons ArrowComparison;
    [NameAttribute("fi-rr-arrow-down")]
public static UIcons ArrowDown;
    [NameAttribute("fi-rr-arrow-down-from-arc")]
public static UIcons ArrowDownFromArc;
    [NameAttribute("fi-rr-arrow-down-from-dotted-line")]
public static UIcons ArrowDownFromDottedLine;
    [NameAttribute("fi-rr-arrow-down-left")]
public static UIcons ArrowDownLeft;
    [NameAttribute("fi-rr-arrow-down-small-big")]
public static UIcons ArrowDownSmallBig;
    [NameAttribute("fi-rr-arrow-down-to-dotted-line")]
public static UIcons ArrowDownToDottedLine;
    [NameAttribute("fi-rr-arrow-down-to-square")]
public static UIcons ArrowDownToSquare;
    [NameAttribute("fi-rr-arrow-down-triangle-square")]
public static UIcons ArrowDownTriangleSquare;
    [NameAttribute("fi-rr-arrow-from-bottom")]
public static UIcons ArrowFromBottom;
    [NameAttribute("fi-rr-arrow-from-left")]
public static UIcons ArrowFromLeft;
    [NameAttribute("fi-rr-arrow-from-right")]
public static UIcons ArrowFromRight;
    [NameAttribute("fi-rr-arrow-from-top")]
public static UIcons ArrowFromTop;
    [NameAttribute("fi-rr-arrow-left")]
public static UIcons ArrowLeft;
    [NameAttribute("fi-rr-arrow-left-from-arc")]
public static UIcons ArrowLeftFromArc;
    [NameAttribute("fi-rr-arrow-left-from-line")]
public static UIcons ArrowLeftFromLine;
    [NameAttribute("fi-rr-arrow-left-to-arc")]
public static UIcons ArrowLeftToArc;
    [NameAttribute("fi-rr-arrow-progress")]
public static UIcons ArrowProgress;
    [NameAttribute("fi-rr-arrow-progress-alt")]
public static UIcons ArrowProgressAlt;
    [NameAttribute("fi-rr-arrow-right")]
public static UIcons ArrowRight;
    [NameAttribute("fi-rr-arrow-right-to-bracket")]
public static UIcons ArrowRightToBracket;
    [NameAttribute("fi-rr-arrow-small-down")]
public static UIcons ArrowSmallDown;
    [NameAttribute("fi-rr-arrow-small-left")]
public static UIcons ArrowSmallLeft;
    [NameAttribute("fi-rr-arrow-small-right")]
public static UIcons ArrowSmallRight;
    [NameAttribute("fi-rr-arrow-small-up")]
public static UIcons ArrowSmallUp;
    [NameAttribute("fi-rr-arrow-square-down")]
public static UIcons ArrowSquareDown;
    [NameAttribute("fi-rr-arrow-square-left")]
public static UIcons ArrowSquareLeft;
    [NameAttribute("fi-rr-arrow-square-right")]
public static UIcons ArrowSquareRight;
    [NameAttribute("fi-rr-arrow-square-up")]
public static UIcons ArrowSquareUp;
    [NameAttribute("fi-rr-arrow-to-bottom")]
public static UIcons ArrowToBottom;
    [NameAttribute("fi-rr-arrow-to-left")]
public static UIcons ArrowToLeft;
    [NameAttribute("fi-rr-arrow-to-right")]
public static UIcons ArrowToRight;
    [NameAttribute("fi-rr-arrow-to-top")]
public static UIcons ArrowToTop;
    [NameAttribute("fi-rr-arrow-trend-down")]
public static UIcons ArrowTrendDown;
    [NameAttribute("fi-rr-arrow-trend-up")]
public static UIcons ArrowTrendUp;
    [NameAttribute("fi-rr-arrow-turn-down-left")]
public static UIcons ArrowTurnDownLeft;
    [NameAttribute("fi-rr-arrow-turn-down-right")]
public static UIcons ArrowTurnDownRight;
    [NameAttribute("fi-rr-arrow-turn-left")]
public static UIcons ArrowTurnLeft;
    [NameAttribute("fi-rr-arrow-turn-left-up")]
public static UIcons ArrowTurnLeftUp;
    [NameAttribute("fi-rr-arrow-up")]
public static UIcons ArrowUp;
    [NameAttribute("fi-rr-arrow-up-from-dotted-line")]
public static UIcons ArrowUpFromDottedLine;
    [NameAttribute("fi-rr-arrow-up-from-ground-water")]
public static UIcons ArrowUpFromGroundWater;
    [NameAttribute("fi-rr-arrow-up-from-square")]
public static UIcons ArrowUpFromSquare;
    [NameAttribute("fi-rr-arrow-up-left")]
public static UIcons ArrowUpLeft;
    [NameAttribute("fi-rr-arrow-up-left-from-circle")]
public static UIcons ArrowUpLeftFromCircle;
    [NameAttribute("fi-rr-arrow-up-right")]
public static UIcons ArrowUpRight;
    [NameAttribute("fi-rr-arrow-up-right-and-arrow-down-left-from-center")]
public static UIcons ArrowUpRightAndArrowDownLeftFromCenter;
    [NameAttribute("fi-rr-arrow-up-right-from-square")]
public static UIcons ArrowUpRightFromSquare;
    [NameAttribute("fi-rr-arrow-up-small-big")]
public static UIcons ArrowUpSmallBig;
    [NameAttribute("fi-rr-arrow-up-square-triangle")]
public static UIcons ArrowUpSquareTriangle;
    [NameAttribute("fi-rr-arrow-up-to-arc")]
public static UIcons ArrowUpToArc;
    [NameAttribute("fi-rr-arrow-up-to-dotted-line")]
public static UIcons ArrowUpToDottedLine;
    [NameAttribute("fi-rr-arrow-upward-growth-crypto")]
public static UIcons ArrowUpwardGrowthCrypto;
    [NameAttribute("fi-rr-arrows")]
public static UIcons Arrows;
    [NameAttribute("fi-rr-arrows-alt")]
public static UIcons ArrowsAlt;
    [NameAttribute("fi-rr-arrows-alt-h")]
public static UIcons ArrowsAltH;
    [NameAttribute("fi-rr-arrows-alt-v")]
public static UIcons ArrowsAltV;
    [NameAttribute("fi-rr-arrows-cross")]
public static UIcons ArrowsCross;
    [NameAttribute("fi-rr-arrows-from-dotted-line")]
public static UIcons ArrowsFromDottedLine;
    [NameAttribute("fi-rr-arrows-from-line")]
public static UIcons ArrowsFromLine;
    [NameAttribute("fi-rr-arrows-h")]
public static UIcons ArrowsH;
    [NameAttribute("fi-rr-arrows-h-copy")]
public static UIcons ArrowsHCopy;
    [NameAttribute("fi-rr-arrows-repeat")]
public static UIcons ArrowsRepeat;
    [NameAttribute("fi-rr-arrows-repeat-1")]
public static UIcons ArrowsRepeat1;
    [NameAttribute("fi-rr-arrows-retweet")]
public static UIcons ArrowsRetweet;
    [NameAttribute("fi-rr-arrows-split-right-and-left")]
public static UIcons ArrowsSplitRightAndLeft;
    [NameAttribute("fi-rr-arrows-split-up-and-left")]
public static UIcons ArrowsSplitUpAndLeft;
    [NameAttribute("fi-rr-arrows-to-circle")]
public static UIcons ArrowsToCircle;
    [NameAttribute("fi-rr-arrows-to-dotted-line")]
public static UIcons ArrowsToDottedLine;
    [NameAttribute("fi-rr-arrows-to-eye")]
public static UIcons ArrowsToEye;
    [NameAttribute("fi-rr-arrows-to-line")]
public static UIcons ArrowsToLine;
    [NameAttribute("fi-rr-artificial-intelligence")]
public static UIcons ArtificialIntelligence;
    [NameAttribute("fi-rr-assept-document")]
public static UIcons AsseptDocument;
    [NameAttribute("fi-rr-assessment")]
public static UIcons Assessment;
    [NameAttribute("fi-rr-assessment-alt")]
public static UIcons AssessmentAlt;
    [NameAttribute("fi-rr-assign")]
public static UIcons Assign;
    [NameAttribute("fi-rr-assistive-listening-systems")]
public static UIcons AssistiveListeningSystems;
    [NameAttribute("fi-rr-asterik")]
public static UIcons Asterik;
    [NameAttribute("fi-rr-astonished-face")]
public static UIcons AstonishedFace;
    [NameAttribute("fi-rr-at")]
public static UIcons At;
    [NameAttribute("fi-rr-attribution-pen")]
public static UIcons AttributionPen;
    [NameAttribute("fi-rr-attribution-pencil")]
public static UIcons AttributionPencil;
    [NameAttribute("fi-rr-aubergine")]
public static UIcons Aubergine;
    [NameAttribute("fi-rr-auction")]
public static UIcons Auction;
    [NameAttribute("fi-rr-audience-megaphone")]
public static UIcons AudienceMegaphone;
    [NameAttribute("fi-rr-audio-description-slash")]
public static UIcons AudioDescriptionSlash;
    [NameAttribute("fi-rr-audit")]
public static UIcons Audit;
    [NameAttribute("fi-rr-audit-alt")]
public static UIcons AuditAlt;
    [NameAttribute("fi-rr-austral-sign")]
public static UIcons AustralSign;
    [NameAttribute("fi-rr-avocado")]
public static UIcons Avocado;
    [NameAttribute("fi-rr-award")]
public static UIcons Award;
    [NameAttribute("fi-rr-axe")]
public static UIcons Axe;
    [NameAttribute("fi-rr-axe-battle")]
public static UIcons AxeBattle;
    [NameAttribute("fi-rr-b")]
public static UIcons B;
    [NameAttribute("fi-rr-baby")]
public static UIcons Baby;
    [NameAttribute("fi-rr-baby-carriage")]
public static UIcons BabyCarriage;
    [NameAttribute("fi-rr-back-up")]
public static UIcons BackUp;
    [NameAttribute("fi-rr-background")]
public static UIcons Background;
    [NameAttribute("fi-rr-backpack")]
public static UIcons Backpack;
    [NameAttribute("fi-rr-bacon")]
public static UIcons Bacon;
    [NameAttribute("fi-rr-bacteria")]
public static UIcons Bacteria;
    [NameAttribute("fi-rr-bacterium")]
public static UIcons Bacterium;
    [NameAttribute("fi-rr-badge")]
public static UIcons Badge;
    [NameAttribute("fi-rr-badge-check")]
public static UIcons BadgeCheck;
    [NameAttribute("fi-rr-badge-dollar")]
public static UIcons BadgeDollar;
    [NameAttribute("fi-rr-badge-leaf")]
public static UIcons BadgeLeaf;
    [NameAttribute("fi-rr-badge-percent")]
public static UIcons BadgePercent;
    [NameAttribute("fi-rr-badge-sheriff")]
public static UIcons BadgeSheriff;
    [NameAttribute("fi-rr-badger-honey")]
public static UIcons BadgerHoney;
    [NameAttribute("fi-rr-badget-check-alt")]
public static UIcons BadgetCheckAlt;
    [NameAttribute("fi-rr-badminton")]
public static UIcons Badminton;
    [NameAttribute("fi-rr-bag-map-pin")]
public static UIcons BagMapPin;
    [NameAttribute("fi-rr-bag-seedling")]
public static UIcons BagSeedling;
    [NameAttribute("fi-rr-bag-shopping-minus")]
public static UIcons BagShoppingMinus;
    [NameAttribute("fi-rr-bags-shopping")]
public static UIcons BagsShopping;
    [NameAttribute("fi-rr-baguette")]
public static UIcons Baguette;
    [NameAttribute("fi-rr-bahai")]
public static UIcons Bahai;
    [NameAttribute("fi-rr-baht-sign")]
public static UIcons BahtSign;
    [NameAttribute("fi-rr-balance-scale-left")]
public static UIcons BalanceScaleLeft;
    [NameAttribute("fi-rr-balance-scale-right")]
public static UIcons BalanceScaleRight;
    [NameAttribute("fi-rr-ball")]
public static UIcons Ball;
    [NameAttribute("fi-rr-ball-pile")]
public static UIcons BallPile;
    [NameAttribute("fi-rr-ballet-dance")]
public static UIcons BalletDance;
    [NameAttribute("fi-rr-balloon")]
public static UIcons Balloon;
    [NameAttribute("fi-rr-balloons")]
public static UIcons Balloons;
    [NameAttribute("fi-rr-ballot")]
public static UIcons Ballot;
    [NameAttribute("fi-rr-ballot-check")]
public static UIcons BallotCheck;
    [NameAttribute("fi-rr-ban")]
public static UIcons Ban;
    [NameAttribute("fi-rr-ban-bug")]
public static UIcons BanBug;
    [NameAttribute("fi-rr-banana")]
public static UIcons Banana;
    [NameAttribute("fi-rr-band-aid")]
public static UIcons BandAid;
    [NameAttribute("fi-rr-bangladeshi-taka-sign")]
public static UIcons BangladeshiTakaSign;
    [NameAttribute("fi-rr-banjo")]
public static UIcons Banjo;
    [NameAttribute("fi-rr-bank")]
public static UIcons Bank;
    [NameAttribute("fi-rr-banner")]
public static UIcons Banner;
    [NameAttribute("fi-rr-banner-2")]
public static UIcons Banner2;
    [NameAttribute("fi-rr-banner-3")]
public static UIcons Banner3;
    [NameAttribute("fi-rr-banner-4")]
public static UIcons Banner4;
    [NameAttribute("fi-rr-banner-5")]
public static UIcons Banner5;
    [NameAttribute("fi-rr-barber-pole")]
public static UIcons BarberPole;
    [NameAttribute("fi-rr-barber-shop")]
public static UIcons BarberShop;
    [NameAttribute("fi-rr-barcode")]
public static UIcons Barcode;
    [NameAttribute("fi-rr-barcode-read")]
public static UIcons BarcodeRead;
    [NameAttribute("fi-rr-barcode-scan")]
public static UIcons BarcodeScan;
    [NameAttribute("fi-rr-bars-filter")]
public static UIcons BarsFilter;
    [NameAttribute("fi-rr-bars-progress")]
public static UIcons BarsProgress;
    [NameAttribute("fi-rr-bars-sort")]
public static UIcons BarsSort;
    [NameAttribute("fi-rr-bars-staggered")]
public static UIcons BarsStaggered;
    [NameAttribute("fi-rr-baseball")]
public static UIcons Baseball;
    [NameAttribute("fi-rr-baseball-alt")]
public static UIcons BaseballAlt;
    [NameAttribute("fi-rr-basket")]
public static UIcons Basket;
    [NameAttribute("fi-rr-basket-shopping-minus")]
public static UIcons BasketShoppingMinus;
    [NameAttribute("fi-rr-basket-shopping-plus")]
public static UIcons BasketShoppingPlus;
    [NameAttribute("fi-rr-basket-shopping-simple")]
public static UIcons BasketShoppingSimple;
    [NameAttribute("fi-rr-basketball")]
public static UIcons Basketball;
    [NameAttribute("fi-rr-basketball-hoop")]
public static UIcons BasketballHoop;
    [NameAttribute("fi-rr-bat")]
public static UIcons Bat;
    [NameAttribute("fi-rr-bath")]
public static UIcons Bath;
    [NameAttribute("fi-rr-battery-bolt")]
public static UIcons BatteryBolt;
    [NameAttribute("fi-rr-battery-empty")]
public static UIcons BatteryEmpty;
    [NameAttribute("fi-rr-battery-exclamation")]
public static UIcons BatteryExclamation;
    [NameAttribute("fi-rr-battery-full")]
public static UIcons BatteryFull;
    [NameAttribute("fi-rr-battery-half")]
public static UIcons BatteryHalf;
    [NameAttribute("fi-rr-battery-quarter")]
public static UIcons BatteryQuarter;
    [NameAttribute("fi-rr-battery-slash")]
public static UIcons BatterySlash;
    [NameAttribute("fi-rr-battery-three-quarters")]
public static UIcons BatteryThreeQuarters;
    [NameAttribute("fi-rr-beacon")]
public static UIcons Beacon;
    [NameAttribute("fi-rr-bed")]
public static UIcons Bed;
    [NameAttribute("fi-rr-bed-alt")]
public static UIcons BedAlt;
    [NameAttribute("fi-rr-bed-bunk")]
public static UIcons BedBunk;
    [NameAttribute("fi-rr-bed-empty")]
public static UIcons BedEmpty;
    [NameAttribute("fi-rr-bee")]
public static UIcons Bee;
    [NameAttribute("fi-rr-beer")]
public static UIcons Beer;
    [NameAttribute("fi-rr-beer-mug-empty")]
public static UIcons BeerMugEmpty;
    [NameAttribute("fi-rr-bell")]
public static UIcons Bell;
    [NameAttribute("fi-rr-bell-concierge")]
public static UIcons BellConcierge;
    [NameAttribute("fi-rr-bell-notification-call")]
public static UIcons BellNotificationCall;
    [NameAttribute("fi-rr-bell-notification-social-media")]
public static UIcons BellNotificationSocialMedia;
    [NameAttribute("fi-rr-bell-ring")]
public static UIcons BellRing;
    [NameAttribute("fi-rr-bell-school")]
public static UIcons BellSchool;
    [NameAttribute("fi-rr-bell-school-slash")]
public static UIcons BellSchoolSlash;
    [NameAttribute("fi-rr-bell-slash")]
public static UIcons BellSlash;
    [NameAttribute("fi-rr-bells")]
public static UIcons Bells;
    [NameAttribute("fi-rr-bench-tree")]
public static UIcons BenchTree;
    [NameAttribute("fi-rr-benefit")]
public static UIcons Benefit;
    [NameAttribute("fi-rr-benefit-diamond")]
public static UIcons BenefitDiamond;
    [NameAttribute("fi-rr-benefit-diamond-alt")]
public static UIcons BenefitDiamondAlt;
    [NameAttribute("fi-rr-benefit-increase")]
public static UIcons BenefitIncrease;
    [NameAttribute("fi-rr-benefit-porcent")]
public static UIcons BenefitPorcent;
    [NameAttribute("fi-rr-benefit-thumbs-down")]
public static UIcons BenefitThumbsDown;
    [NameAttribute("fi-rr-betamax")]
public static UIcons Betamax;
    [NameAttribute("fi-rr-bible")]
public static UIcons Bible;
    [NameAttribute("fi-rr-bicycle-journey")]
public static UIcons BicycleJourney;
    [NameAttribute("fi-rr-bike")]
public static UIcons Bike;
    [NameAttribute("fi-rr-biking")]
public static UIcons Biking;
    [NameAttribute("fi-rr-biking-mountain")]
public static UIcons BikingMountain;
    [NameAttribute("fi-rr-bill-arrow")]
public static UIcons BillArrow;
    [NameAttribute("fi-rr-billiard")]
public static UIcons Billiard;
    [NameAttribute("fi-rr-bin-bottles")]
public static UIcons BinBottles;
    [NameAttribute("fi-rr-binary")]
public static UIcons Binary;
    [NameAttribute("fi-rr-binary-circle-check")]
public static UIcons BinaryCircleCheck;
    [NameAttribute("fi-rr-binary-lock")]
public static UIcons BinaryLock;
    [NameAttribute("fi-rr-binary-slash")]
public static UIcons BinarySlash;
    [NameAttribute("fi-rr-binoculars")]
public static UIcons Binoculars;
    [NameAttribute("fi-rr-bio")]
public static UIcons Bio;
    [NameAttribute("fi-rr-bio-leaves")]
public static UIcons BioLeaves;
    [NameAttribute("fi-rr-biohazard")]
public static UIcons Biohazard;
    [NameAttribute("fi-rr-bird")]
public static UIcons Bird;
    [NameAttribute("fi-rr-bitcoin-sign")]
public static UIcons BitcoinSign;
    [NameAttribute("fi-rr-blanket")]
public static UIcons Blanket;
    [NameAttribute("fi-rr-blender")]
public static UIcons Blender;
    [NameAttribute("fi-rr-blender-phone")]
public static UIcons BlenderPhone;
    [NameAttribute("fi-rr-blinds")]
public static UIcons Blinds;
    [NameAttribute("fi-rr-blinds-open")]
public static UIcons BlindsOpen;
    [NameAttribute("fi-rr-blinds-raised")]
public static UIcons BlindsRaised;
    [NameAttribute("fi-rr-block")]
public static UIcons Block;
    [NameAttribute("fi-rr-block-brick")]
public static UIcons BlockBrick;
    [NameAttribute("fi-rr-block-microphone")]
public static UIcons BlockMicrophone;
    [NameAttribute("fi-rr-block-question")]
public static UIcons BlockQuestion;
    [NameAttribute("fi-rr-block-quote")]
public static UIcons BlockQuote;
    [NameAttribute("fi-rr-blockchain-3")]
public static UIcons Blockchain3;
    [NameAttribute("fi-rr-blog-pencil")]
public static UIcons BlogPencil;
    [NameAttribute("fi-rr-blog-text")]
public static UIcons BlogText;
    [NameAttribute("fi-rr-blood")]
public static UIcons Blood;
    [NameAttribute("fi-rr-blood-dropper")]
public static UIcons BloodDropper;
    [NameAttribute("fi-rr-blood-test-tube")]
public static UIcons BloodTestTube;
    [NameAttribute("fi-rr-blood-test-tube-alt")]
public static UIcons BloodTestTubeAlt;
    [NameAttribute("fi-rr-blossom")]
public static UIcons Blossom;
    [NameAttribute("fi-rr-blueberries")]
public static UIcons Blueberries;
    [NameAttribute("fi-rr-blueprint")]
public static UIcons Blueprint;
    [NameAttribute("fi-rr-bold")]
public static UIcons Bold;
    [NameAttribute("fi-rr-bolt")]
public static UIcons Bolt;
    [NameAttribute("fi-rr-bolt-auto")]
public static UIcons BoltAuto;
    [NameAttribute("fi-rr-bolt-slash")]
public static UIcons BoltSlash;
    [NameAttribute("fi-rr-bomb")]
public static UIcons Bomb;
    [NameAttribute("fi-rr-bone")]
public static UIcons Bone;
    [NameAttribute("fi-rr-bone-break")]
public static UIcons BoneBreak;
    [NameAttribute("fi-rr-bong")]
public static UIcons Bong;
    [NameAttribute("fi-rr-bonus")]
public static UIcons Bonus;
    [NameAttribute("fi-rr-bonus-alt")]
public static UIcons BonusAlt;
    [NameAttribute("fi-rr-bonus-star")]
public static UIcons BonusStar;
    [NameAttribute("fi-rr-book")]
public static UIcons Book;
    [NameAttribute("fi-rr-book-alt")]
public static UIcons BookAlt;
    [NameAttribute("fi-rr-book-arrow-right")]
public static UIcons BookArrowRight;
    [NameAttribute("fi-rr-book-arrow-up")]
public static UIcons BookArrowUp;
    [NameAttribute("fi-rr-book-atlas")]
public static UIcons BookAtlas;
    [NameAttribute("fi-rr-book-bookmark")]
public static UIcons BookBookmark;
    [NameAttribute("fi-rr-book-circle-arrow-right")]
public static UIcons BookCircleArrowRight;
    [NameAttribute("fi-rr-book-circle-arrow-up")]
public static UIcons BookCircleArrowUp;
    [NameAttribute("fi-rr-book-copy")]
public static UIcons BookCopy;
    [NameAttribute("fi-rr-book-dead")]
public static UIcons BookDead;
    [NameAttribute("fi-rr-book-font")]
public static UIcons BookFont;
    [NameAttribute("fi-rr-book-heart")]
public static UIcons BookHeart;
    [NameAttribute("fi-rr-book-medical")]
public static UIcons BookMedical;
    [NameAttribute("fi-rr-book-open-cover")]
public static UIcons BookOpenCover;
    [NameAttribute("fi-rr-book-open-reader")]
public static UIcons BookOpenReader;
    [NameAttribute("fi-rr-book-plus")]
public static UIcons BookPlus;
    [NameAttribute("fi-rr-book-quran")]
public static UIcons BookQuran;
    [NameAttribute("fi-rr-book-section")]
public static UIcons BookSection;
    [NameAttribute("fi-rr-book-spells")]
public static UIcons BookSpells;
    [NameAttribute("fi-rr-book-tanakh")]
public static UIcons BookTanakh;
    [NameAttribute("fi-rr-book-user")]
public static UIcons BookUser;
    [NameAttribute("fi-rr-Booking")]
public static UIcons Booking;
    [NameAttribute("fi-rr-bookmark")]
public static UIcons Bookmark;
    [NameAttribute("fi-rr-bookmark-slash")]
public static UIcons BookmarkSlash;
    [NameAttribute("fi-rr-books")]
public static UIcons Books;
    [NameAttribute("fi-rr-books-medical")]
public static UIcons BooksMedical;
    [NameAttribute("fi-rr-boot")]
public static UIcons Boot;
    [NameAttribute("fi-rr-boot-heeled")]
public static UIcons BootHeeled;
    [NameAttribute("fi-rr-booth-curtain")]
public static UIcons BoothCurtain;
    [NameAttribute("fi-rr-border-all")]
public static UIcons BorderAll;
    [NameAttribute("fi-rr-border-bottom")]
public static UIcons BorderBottom;
    [NameAttribute("fi-rr-border-center-h")]
public static UIcons BorderCenterH;
    [NameAttribute("fi-rr-border-center-v")]
public static UIcons BorderCenterV;
    [NameAttribute("fi-rr-border-inner")]
public static UIcons BorderInner;
    [NameAttribute("fi-rr-border-left")]
public static UIcons BorderLeft;
    [NameAttribute("fi-rr-border-none")]
public static UIcons BorderNone;
    [NameAttribute("fi-rr-border-outer")]
public static UIcons BorderOuter;
    [NameAttribute("fi-rr-border-right")]
public static UIcons BorderRight;
    [NameAttribute("fi-rr-border-style")]
public static UIcons BorderStyle;
    [NameAttribute("fi-rr-border-style-alt")]
public static UIcons BorderStyleAlt;
    [NameAttribute("fi-rr-border-top")]
public static UIcons BorderTop;
    [NameAttribute("fi-rr-boss")]
public static UIcons Boss;
    [NameAttribute("fi-rr-bottle")]
public static UIcons Bottle;
    [NameAttribute("fi-rr-bottle-droplet")]
public static UIcons BottleDroplet;
    [NameAttribute("fi-rr-bow-arrow")]
public static UIcons BowArrow;
    [NameAttribute("fi-rr-bowl-chopsticks")]
public static UIcons BowlChopsticks;
    [NameAttribute("fi-rr-bowl-chopsticks-noodles")]
public static UIcons BowlChopsticksNoodles;
    [NameAttribute("fi-rr-bowl-rice")]
public static UIcons BowlRice;
    [NameAttribute("fi-rr-bowl-scoop")]
public static UIcons BowlScoop;
    [NameAttribute("fi-rr-bowl-scoops")]
public static UIcons BowlScoops;
    [NameAttribute("fi-rr-bowl-soft-serve")]
public static UIcons BowlSoftServe;
    [NameAttribute("fi-rr-bowl-spoon")]
public static UIcons BowlSpoon;
    [NameAttribute("fi-rr-bowling")]
public static UIcons Bowling;
    [NameAttribute("fi-rr-bowling-ball")]
public static UIcons BowlingBall;
    [NameAttribute("fi-rr-bowling-pins")]
public static UIcons BowlingPins;
    [NameAttribute("fi-rr-box")]
public static UIcons Box;
    [NameAttribute("fi-rr-box-alt")]
public static UIcons BoxAlt;
    [NameAttribute("fi-rr-box-ballot")]
public static UIcons BoxBallot;
    [NameAttribute("fi-rr-box-check")]
public static UIcons BoxCheck;
    [NameAttribute("fi-rr-box-circle-check")]
public static UIcons BoxCircleCheck;
    [NameAttribute("fi-rr-box-dollar")]
public static UIcons BoxDollar;
    [NameAttribute("fi-rr-box-fragile")]
public static UIcons BoxFragile;
    [NameAttribute("fi-rr-box-heart")]
public static UIcons BoxHeart;
    [NameAttribute("fi-rr-box-open")]
public static UIcons BoxOpen;
    [NameAttribute("fi-rr-box-open-full")]
public static UIcons BoxOpenFull;
    [NameAttribute("fi-rr-box-tissue")]
public static UIcons BoxTissue;
    [NameAttribute("fi-rr-box-up")]
public static UIcons BoxUp;
    [NameAttribute("fi-rr-boxes")]
public static UIcons Boxes;
    [NameAttribute("fi-rr-boxing-glove")]
public static UIcons BoxingGlove;
    [NameAttribute("fi-rr-bracket-curly")]
public static UIcons BracketCurly;
    [NameAttribute("fi-rr-bracket-curly-right")]
public static UIcons BracketCurlyRight;
    [NameAttribute("fi-rr-bracket-round")]
public static UIcons BracketRound;
    [NameAttribute("fi-rr-bracket-round-right")]
public static UIcons BracketRoundRight;
    [NameAttribute("fi-rr-bracket-square")]
public static UIcons BracketSquare;
    [NameAttribute("fi-rr-bracket-square-right")]
public static UIcons BracketSquareRight;
    [NameAttribute("fi-rr-brackets-curly")]
public static UIcons BracketsCurly;
    [NameAttribute("fi-rr-brackets-round")]
public static UIcons BracketsRound;
    [NameAttribute("fi-rr-brackets-square")]
public static UIcons BracketsSquare;
    [NameAttribute("fi-rr-braille")]
public static UIcons Braille;
    [NameAttribute("fi-rr-braille-a")]
public static UIcons BrailleA;
    [NameAttribute("fi-rr-braille-b")]
public static UIcons BrailleB;
    [NameAttribute("fi-rr-braille-c")]
public static UIcons BrailleC;
    [NameAttribute("fi-rr-braille-d")]
public static UIcons BrailleD;
    [NameAttribute("fi-rr-braille-e")]
public static UIcons BrailleE;
    [NameAttribute("fi-rr-braille-g")]
public static UIcons BrailleG;
    [NameAttribute("fi-rr-braille-h")]
public static UIcons BrailleH;
    [NameAttribute("fi-rr-braille-i")]
public static UIcons BrailleI;
    [NameAttribute("fi-rr-braille-j")]
public static UIcons BrailleJ;
    [NameAttribute("fi-rr-braille-k")]
public static UIcons BrailleK;
    [NameAttribute("fi-rr-braille-l")]
public static UIcons BrailleL;
    [NameAttribute("fi-rr-braille-m")]
public static UIcons BrailleM;
    [NameAttribute("fi-rr-braille-n")]
public static UIcons BrailleN;
    [NameAttribute("fi-rr-braille-n-alt")]
public static UIcons BrailleNAlt;
    [NameAttribute("fi-rr-braille-o")]
public static UIcons BrailleO;
    [NameAttribute("fi-rr-braille-p")]
public static UIcons BrailleP;
    [NameAttribute("fi-rr-braille-q")]
public static UIcons BrailleQ;
    [NameAttribute("fi-rr-braille-r")]
public static UIcons BrailleR;
    [NameAttribute("fi-rr-braille-s")]
public static UIcons BrailleS;
    [NameAttribute("fi-rr-braille-t")]
public static UIcons BrailleT;
    [NameAttribute("fi-rr-braille-u")]
public static UIcons BrailleU;
    [NameAttribute("fi-rr-braille-v")]
public static UIcons BrailleV;
    [NameAttribute("fi-rr-braille-w")]
public static UIcons BrailleW;
    [NameAttribute("fi-rr-braille-x")]
public static UIcons BrailleX;
    [NameAttribute("fi-rr-braille-y")]
public static UIcons BrailleY;
    [NameAttribute("fi-rr-braille-z")]
public static UIcons BrailleZ;
    [NameAttribute("fi-rr-brain")]
public static UIcons Brain;
    [NameAttribute("fi-rr-brain-circuit")]
public static UIcons BrainCircuit;
    [NameAttribute("fi-rr-brake-warning")]
public static UIcons BrakeWarning;
    [NameAttribute("fi-rr-branching")]
public static UIcons Branching;
    [NameAttribute("fi-rr-brand")]
public static UIcons Brand;
    [NameAttribute("fi-rr-branding")]
public static UIcons Branding;
    [NameAttribute("fi-rr-bread")]
public static UIcons Bread;
    [NameAttribute("fi-rr-bread-loaf")]
public static UIcons BreadLoaf;
    [NameAttribute("fi-rr-bread-slice")]
public static UIcons BreadSlice;
    [NameAttribute("fi-rr-bread-slice-butter")]
public static UIcons BreadSliceButter;
    [NameAttribute("fi-rr-briefcase")]
public static UIcons Briefcase;
    [NameAttribute("fi-rr-briefcase-arrow-right")]
public static UIcons BriefcaseArrowRight;
    [NameAttribute("fi-rr-briefcase-blank")]
public static UIcons BriefcaseBlank;
    [NameAttribute("fi-rr-brightness")]
public static UIcons Brightness;
    [NameAttribute("fi-rr-brightness-low")]
public static UIcons BrightnessLow;
    [NameAttribute("fi-rr-bring-forward")]
public static UIcons BringForward;
    [NameAttribute("fi-rr-bring-front")]
public static UIcons BringFront;
    [NameAttribute("fi-rr-broadcast-tower")]
public static UIcons BroadcastTower;
    [NameAttribute("fi-rr-broccoli")]
public static UIcons Broccoli;
    [NameAttribute("fi-rr-broken-chain-link-wrong")]
public static UIcons BrokenChainLinkWrong;
    [NameAttribute("fi-rr-broken-image")]
public static UIcons BrokenImage;
    [NameAttribute("fi-rr-broom")]
public static UIcons Broom;
    [NameAttribute("fi-rr-broom-ball")]
public static UIcons BroomBall;
    [NameAttribute("fi-rr-browser")]
public static UIcons Browser;
    [NameAttribute("fi-rr-browser-ui")]
public static UIcons BrowserUi;
    [NameAttribute("fi-rr-browsers")]
public static UIcons Browsers;
    [NameAttribute("fi-rr-brush")]
public static UIcons Brush;
    [NameAttribute("fi-rr-bucket")]
public static UIcons Bucket;
    [NameAttribute("fi-rr-budget")]
public static UIcons Budget;
    [NameAttribute("fi-rr-budget-alt")]
public static UIcons BudgetAlt;
    [NameAttribute("fi-rr-bug")]
public static UIcons Bug;
    [NameAttribute("fi-rr-bug-slash")]
public static UIcons BugSlash;
    [NameAttribute("fi-rr-bugs")]
public static UIcons Bugs;
    [NameAttribute("fi-rr-build")]
public static UIcons Build;
    [NameAttribute("fi-rr-build-alt")]
public static UIcons BuildAlt;
    [NameAttribute("fi-rr-builder")]
public static UIcons Builder;
    [NameAttribute("fi-rr-building")]
public static UIcons Building;
    [NameAttribute("fi-rr-building-circle-arrow-right")]
public static UIcons BuildingCircleArrowRight;
    [NameAttribute("fi-rr-building-ngo")]
public static UIcons BuildingNgo;
    [NameAttribute("fi-rr-bulb")]
public static UIcons Bulb;
    [NameAttribute("fi-rr-bullet")]
public static UIcons Bullet;
    [NameAttribute("fi-rr-bullhorn")]
public static UIcons Bullhorn;
    [NameAttribute("fi-rr-bullseye")]
public static UIcons Bullseye;
    [NameAttribute("fi-rr-bullseye-arrow")]
public static UIcons BullseyeArrow;
    [NameAttribute("fi-rr-bullseye-pointer")]
public static UIcons BullseyePointer;
    [NameAttribute("fi-rr-burger-alt")]
public static UIcons BurgerAlt;
    [NameAttribute("fi-rr-burger-fries")]
public static UIcons BurgerFries;
    [NameAttribute("fi-rr-burger-glass")]
public static UIcons BurgerGlass;
    [NameAttribute("fi-rr-burger-menu")]
public static UIcons BurgerMenu;
    [NameAttribute("fi-rr-burrito")]
public static UIcons Burrito;
    [NameAttribute("fi-rr-burst")]
public static UIcons Burst;
    [NameAttribute("fi-rr-bus")]
public static UIcons Bus;
    [NameAttribute("fi-rr-bus-alt")]
public static UIcons BusAlt;
    [NameAttribute("fi-rr-business-time")]
public static UIcons BusinessTime;
    [NameAttribute("fi-rr-Butter")]
public static UIcons Butter;
    [NameAttribute("fi-rr-butterfly")]
public static UIcons Butterfly;
    [NameAttribute("fi-rr-cabin")]
public static UIcons Cabin;
    [NameAttribute("fi-rr-cactus")]
public static UIcons Cactus;
    [NameAttribute("fi-rr-cage-empty")]
public static UIcons CageEmpty;
    [NameAttribute("fi-rr-cake-birthday")]
public static UIcons CakeBirthday;
    [NameAttribute("fi-rr-cake-slice")]
public static UIcons CakeSlice;
    [NameAttribute("fi-rr-cake-wedding")]
public static UIcons CakeWedding;
    [NameAttribute("fi-rr-calculator")]
public static UIcons Calculator;
    [NameAttribute("fi-rr-calculator-bill")]
public static UIcons CalculatorBill;
    [NameAttribute("fi-rr-calculator-math-tax")]
public static UIcons CalculatorMathTax;
    [NameAttribute("fi-rr-calculator-money")]
public static UIcons CalculatorMoney;
    [NameAttribute("fi-rr-calculator-simple")]
public static UIcons CalculatorSimple;
    [NameAttribute("fi-rr-calendar")]
public static UIcons Calendar;
    [NameAttribute("fi-rr-calendar-arrow-down")]
public static UIcons CalendarArrowDown;
    [NameAttribute("fi-rr-calendar-arrow-up")]
public static UIcons CalendarArrowUp;
    [NameAttribute("fi-rr-calendar-birhtday-cake")]
public static UIcons CalendarBirhtdayCake;
    [NameAttribute("fi-rr-calendar-call")]
public static UIcons CalendarCall;
    [NameAttribute("fi-rr-calendar-check")]
public static UIcons CalendarCheck;
    [NameAttribute("fi-rr-calendar-clock")]
public static UIcons CalendarClock;
    [NameAttribute("fi-rr-calendar-day")]
public static UIcons CalendarDay;
    [NameAttribute("fi-rr-calendar-days")]
public static UIcons CalendarDays;
    [NameAttribute("fi-rr-calendar-event-tax")]
public static UIcons CalendarEventTax;
    [NameAttribute("fi-rr-calendar-exclamation")]
public static UIcons CalendarExclamation;
    [NameAttribute("fi-rr-calendar-gavel-legal")]
public static UIcons CalendarGavelLegal;
    [NameAttribute("fi-rr-calendar-heart")]
public static UIcons CalendarHeart;
    [NameAttribute("fi-rr-calendar-image")]
public static UIcons CalendarImage;
    [NameAttribute("fi-rr-calendar-lines")]
public static UIcons CalendarLines;
    [NameAttribute("fi-rr-calendar-lines-pen")]
public static UIcons CalendarLinesPen;
    [NameAttribute("fi-rr-calendar-minus")]
public static UIcons CalendarMinus;
    [NameAttribute("fi-rr-calendar-payment-loan")]
public static UIcons CalendarPaymentLoan;
    [NameAttribute("fi-rr-calendar-pen")]
public static UIcons CalendarPen;
    [NameAttribute("fi-rr-calendar-plus")]
public static UIcons CalendarPlus;
    [NameAttribute("fi-rr-calendar-salary")]
public static UIcons CalendarSalary;
    [NameAttribute("fi-rr-calendar-shift-swap")]
public static UIcons CalendarShiftSwap;
    [NameAttribute("fi-rr-calendar-star")]
public static UIcons CalendarStar;
    [NameAttribute("fi-rr-calendar-swap")]
public static UIcons CalendarSwap;
    [NameAttribute("fi-rr-calendar-week")]
public static UIcons CalendarWeek;
    [NameAttribute("fi-rr-calendar-xmark")]
public static UIcons CalendarXmark;
    [NameAttribute("fi-rr-calendars")]
public static UIcons Calendars;
    [NameAttribute("fi-rr-call-duration")]
public static UIcons CallDuration;
    [NameAttribute("fi-rr-call-history")]
public static UIcons CallHistory;
    [NameAttribute("fi-rr-call-incoming")]
public static UIcons CallIncoming;
    [NameAttribute("fi-rr-call-missed")]
public static UIcons CallMissed;
    [NameAttribute("fi-rr-call-outgoing")]
public static UIcons CallOutgoing;
    [NameAttribute("fi-rr-camcorder")]
public static UIcons Camcorder;
    [NameAttribute("fi-rr-camera")]
public static UIcons Camera;
    [NameAttribute("fi-rr-camera-cctv")]
public static UIcons CameraCctv;
    [NameAttribute("fi-rr-camera-movie")]
public static UIcons CameraMovie;
    [NameAttribute("fi-rr-camera-retro")]
public static UIcons CameraRetro;
    [NameAttribute("fi-rr-camera-rotate")]
public static UIcons CameraRotate;
    [NameAttribute("fi-rr-camera-security")]
public static UIcons CameraSecurity;
    [NameAttribute("fi-rr-camera-slash")]
public static UIcons CameraSlash;
    [NameAttribute("fi-rr-camera-viewfinder")]
public static UIcons CameraViewfinder;
    [NameAttribute("fi-rr-campfire")]
public static UIcons Campfire;
    [NameAttribute("fi-rr-camping")]
public static UIcons Camping;
    [NameAttribute("fi-rr-can-food")]
public static UIcons CanFood;
    [NameAttribute("fi-rr-candle-holder")]
public static UIcons CandleHolder;
    [NameAttribute("fi-rr-candle-lotus-yoga")]
public static UIcons CandleLotusYoga;
    [NameAttribute("fi-rr-candle-pose-yoga")]
public static UIcons CandlePoseYoga;
    [NameAttribute("fi-rr-candy")]
public static UIcons Candy;
    [NameAttribute("fi-rr-candy-alt")]
public static UIcons CandyAlt;
    [NameAttribute("fi-rr-candy-bar")]
public static UIcons CandyBar;
    [NameAttribute("fi-rr-candy-cane")]
public static UIcons CandyCane;
    [NameAttribute("fi-rr-candy-corn")]
public static UIcons CandyCorn;
    [NameAttribute("fi-rr-candy-sweet")]
public static UIcons CandySweet;
    [NameAttribute("fi-rr-Cannabis")]
public static UIcons Cannabis;
    [NameAttribute("fi-rr-canned-food")]
public static UIcons CannedFood;
    [NameAttribute("fi-rr-capsules")]
public static UIcons Capsules;
    [NameAttribute("fi-rr-car")]
public static UIcons Car;
    [NameAttribute("fi-rr-car-alt")]
public static UIcons CarAlt;
    [NameAttribute("fi-rr-car-battery")]
public static UIcons CarBattery;
    [NameAttribute("fi-rr-car-bolt")]
public static UIcons CarBolt;
    [NameAttribute("fi-rr-car-building")]
public static UIcons CarBuilding;
    [NameAttribute("fi-rr-car-bump")]
public static UIcons CarBump;
    [NameAttribute("fi-rr-car-bus")]
public static UIcons CarBus;
    [NameAttribute("fi-rr-car-circle-bolt")]
public static UIcons CarCircleBolt;
    [NameAttribute("fi-rr-car-crash")]
public static UIcons CarCrash;
    [NameAttribute("fi-rr-car-garage")]
public static UIcons CarGarage;
    [NameAttribute("fi-rr-car-journey")]
public static UIcons CarJourney;
    [NameAttribute("fi-rr-car-mechanic")]
public static UIcons CarMechanic;
    [NameAttribute("fi-rr-car-rear")]
public static UIcons CarRear;
    [NameAttribute("fi-rr-car-side")]
public static UIcons CarSide;
    [NameAttribute("fi-rr-car-side-bolt")]
public static UIcons CarSideBolt;
    [NameAttribute("fi-rr-car-tilt")]
public static UIcons CarTilt;
    [NameAttribute("fi-rr-car-tunnel")]
public static UIcons CarTunnel;
    [NameAttribute("fi-rr-car-wash")]
public static UIcons CarWash;
    [NameAttribute("fi-rr-caravan")]
public static UIcons Caravan;
    [NameAttribute("fi-rr-caravan-alt")]
public static UIcons CaravanAlt;
    [NameAttribute("fi-rr-card-club")]
public static UIcons CardClub;
    [NameAttribute("fi-rr-card-diamond")]
public static UIcons CardDiamond;
    [NameAttribute("fi-rr-card-heart")]
public static UIcons CardHeart;
    [NameAttribute("fi-rr-card-spade")]
public static UIcons CardSpade;
    [NameAttribute("fi-rr-cardinal-compass")]
public static UIcons CardinalCompass;
    [NameAttribute("fi-rr-care")]
public static UIcons Care;
    [NameAttribute("fi-rr-career-growth")]
public static UIcons CareerGrowth;
    [NameAttribute("fi-rr-career-path")]
public static UIcons CareerPath;
    [NameAttribute("fi-rr-caret-circle-down")]
public static UIcons CaretCircleDown;
    [NameAttribute("fi-rr-caret-circle-right")]
public static UIcons CaretCircleRight;
    [NameAttribute("fi-rr-caret-circle-up")]
public static UIcons CaretCircleUp;
    [NameAttribute("fi-rr-caret-down")]
public static UIcons CaretDown;
    [NameAttribute("fi-rr-caret-left")]
public static UIcons CaretLeft;
    [NameAttribute("fi-rr-caret-quare-up")]
public static UIcons CaretQuareUp;
    [NameAttribute("fi-rr-caret-right")]
public static UIcons CaretRight;
    [NameAttribute("fi-rr-caret-square-down")]
public static UIcons CaretSquareDown;
    [NameAttribute("fi-rr-caret-square-left")]
public static UIcons CaretSquareLeft;
    [NameAttribute("fi-rr-caret-square-left_1")]
public static UIcons CaretSquareLeft_1;
    [NameAttribute("fi-rr-caret-square-right")]
public static UIcons CaretSquareRight;
    [NameAttribute("fi-rr-caret-square-up")]
public static UIcons CaretSquareUp;
    [NameAttribute("fi-rr-caret-up")]
public static UIcons CaretUp;
    [NameAttribute("fi-rr-carrot")]
public static UIcons Carrot;
    [NameAttribute("fi-rr-cars")]
public static UIcons Cars;
    [NameAttribute("fi-rr-cars-crash")]
public static UIcons CarsCrash;
    [NameAttribute("fi-rr-cart-arrow-down")]
public static UIcons CartArrowDown;
    [NameAttribute("fi-rr-cart-minus")]
public static UIcons CartMinus;
    [NameAttribute("fi-rr-cart-shopping-fast")]
public static UIcons CartShoppingFast;
    [NameAttribute("fi-rr-cash-register")]
public static UIcons CashRegister;
    [NameAttribute("fi-rr-cassette-tape")]
public static UIcons CassetteTape;
    [NameAttribute("fi-rr-cassette-vhs")]
public static UIcons CassetteVhs;
    [NameAttribute("fi-rr-castle")]
public static UIcons Castle;
    [NameAttribute("fi-rr-cat")]
public static UIcons Cat;
    [NameAttribute("fi-rr-cat-head")]
public static UIcons CatHead;
    [NameAttribute("fi-rr-cat-space")]
public static UIcons CatSpace;
    [NameAttribute("fi-rr-catalog")]
public static UIcons Catalog;
    [NameAttribute("fi-rr-catalog-alt")]
public static UIcons CatalogAlt;
    [NameAttribute("fi-rr-catalog-magazine")]
public static UIcons CatalogMagazine;
    [NameAttribute("fi-rr-category")]
public static UIcons Category;
    [NameAttribute("fi-rr-category-alt")]
public static UIcons CategoryAlt;
    [NameAttribute("fi-rr-cauldron")]
public static UIcons Cauldron;
    [NameAttribute("fi-rr-cedi-sign")]
public static UIcons CediSign;
    [NameAttribute("fi-rr-cello")]
public static UIcons Cello;
    [NameAttribute("fi-rr-cent-sign")]
public static UIcons CentSign;
    [NameAttribute("fi-rr-chair")]
public static UIcons Chair;
    [NameAttribute("fi-rr-chair-office")]
public static UIcons ChairOffice;
    [NameAttribute("fi-rr-chalkboard")]
public static UIcons Chalkboard;
    [NameAttribute("fi-rr-chalkboard-user")]
public static UIcons ChalkboardUser;
    [NameAttribute("fi-rr-challenge")]
public static UIcons Challenge;
    [NameAttribute("fi-rr-challenge-alt")]
public static UIcons ChallengeAlt;
    [NameAttribute("fi-rr-channel")]
public static UIcons Channel;
    [NameAttribute("fi-rr-charging-station")]
public static UIcons ChargingStation;
    [NameAttribute("fi-rr-chart-area")]
public static UIcons ChartArea;
    [NameAttribute("fi-rr-chart-arrow-down")]
public static UIcons ChartArrowDown;
    [NameAttribute("fi-rr-chart-arrow-grow")]
public static UIcons ChartArrowGrow;
    [NameAttribute("fi-rr-chart-bullet")]
public static UIcons ChartBullet;
    [NameAttribute("fi-rr-chart-candlestick")]
public static UIcons ChartCandlestick;
    [NameAttribute("fi-rr-chart-connected")]
public static UIcons ChartConnected;
    [NameAttribute("fi-rr-chart-gantt")]
public static UIcons ChartGantt;
    [NameAttribute("fi-rr-chart-histogram")]
public static UIcons ChartHistogram;
    [NameAttribute("fi-rr-chart-kanban")]
public static UIcons ChartKanban;
    [NameAttribute("fi-rr-chart-line-up")]
public static UIcons ChartLineUp;
    [NameAttribute("fi-rr-chart-line-up-down")]
public static UIcons ChartLineUpDown;
    [NameAttribute("fi-rr-chart-mixed")]
public static UIcons ChartMixed;
    [NameAttribute("fi-rr-chart-mixed-up-circle-currency")]
public static UIcons ChartMixedUpCircleCurrency;
    [NameAttribute("fi-rr-chart-mixed-up-circle-dollar")]
public static UIcons ChartMixedUpCircleDollar;
    [NameAttribute("fi-rr-chart-network")]
public static UIcons ChartNetwork;
    [NameAttribute("fi-rr-chart-pie")]
public static UIcons ChartPie;
    [NameAttribute("fi-rr-chart-pie-alt")]
public static UIcons ChartPieAlt;
    [NameAttribute("fi-rr-chart-pie-simple-circle-currency")]
public static UIcons ChartPieSimpleCircleCurrency;
    [NameAttribute("fi-rr-chart-pie-simple-circle-dollar")]
public static UIcons ChartPieSimpleCircleDollar;
    [NameAttribute("fi-rr-chart-pyramid")]
public static UIcons ChartPyramid;
    [NameAttribute("fi-rr-chart-radar")]
public static UIcons ChartRadar;
    [NameAttribute("fi-rr-chart-scatter")]
public static UIcons ChartScatter;
    [NameAttribute("fi-rr-chart-scatter-3d")]
public static UIcons ChartScatter3d;
    [NameAttribute("fi-rr-chart-scatter-bubble")]
public static UIcons ChartScatterBubble;
    [NameAttribute("fi-rr-chart-set-theory")]
public static UIcons ChartSetTheory;
    [NameAttribute("fi-rr-chart-simple")]
public static UIcons ChartSimple;
    [NameAttribute("fi-rr-chart-simple-horizontal")]
public static UIcons ChartSimpleHorizontal;
    [NameAttribute("fi-rr-chart-tree")]
public static UIcons ChartTree;
    [NameAttribute("fi-rr-chart-tree-map")]
public static UIcons ChartTreeMap;
    [NameAttribute("fi-rr-chart-user")]
public static UIcons ChartUser;
    [NameAttribute("fi-rr-chart-waterfall")]
public static UIcons ChartWaterfall;
    [NameAttribute("fi-rr-chat-arrow-down")]
public static UIcons ChatArrowDown;
    [NameAttribute("fi-rr-chat-arrow-grow")]
public static UIcons ChatArrowGrow;
    [NameAttribute("fi-rr-chat-bubble-call")]
public static UIcons ChatBubbleCall;
    [NameAttribute("fi-rr-chatbot")]
public static UIcons Chatbot;
    [NameAttribute("fi-rr-chatbot-speech-bubble")]
public static UIcons ChatbotSpeechBubble;
    [NameAttribute("fi-rr-cheap")]
public static UIcons Cheap;
    [NameAttribute("fi-rr-cheap-bill")]
public static UIcons CheapBill;
    [NameAttribute("fi-rr-cheap-dollar")]
public static UIcons CheapDollar;
    [NameAttribute("fi-rr-cheap-stack")]
public static UIcons CheapStack;
    [NameAttribute("fi-rr-cheap-stack-dollar")]
public static UIcons CheapStackDollar;
    [NameAttribute("fi-rr-check")]
public static UIcons Check;
    [NameAttribute("fi-rr-check-circle")]
public static UIcons CheckCircle;
    [NameAttribute("fi-rr-check-double")]
public static UIcons CheckDouble;
    [NameAttribute("fi-rr-check-in-calendar")]
public static UIcons CheckInCalendar;
    [NameAttribute("fi-rr-check-out-calendar")]
public static UIcons CheckOutCalendar;
    [NameAttribute("fi-rr-checkbox")]
public static UIcons Checkbox;
    [NameAttribute("fi-rr-checklist-task-budget")]
public static UIcons ChecklistTaskBudget;
    [NameAttribute("fi-rr-cheese")]
public static UIcons Cheese;
    [NameAttribute("fi-rr-cheese-alt")]
public static UIcons CheeseAlt;
    [NameAttribute("fi-rr-cheeseburger")]
public static UIcons Cheeseburger;
    [NameAttribute("fi-rr-cherry")]
public static UIcons Cherry;
    [NameAttribute("fi-rr-chess")]
public static UIcons Chess;
    [NameAttribute("fi-rr-chess-bishop")]
public static UIcons ChessBishop;
    [NameAttribute("fi-rr-chess-board")]
public static UIcons ChessBoard;
    [NameAttribute("fi-rr-chess-clock")]
public static UIcons ChessClock;
    [NameAttribute("fi-rr-chess-clock-alt")]
public static UIcons ChessClockAlt;
    [NameAttribute("fi-rr-chess-king")]
public static UIcons ChessKing;
    [NameAttribute("fi-rr-chess-king-alt")]
public static UIcons ChessKingAlt;
    [NameAttribute("fi-rr-chess-knight")]
public static UIcons ChessKnight;
    [NameAttribute("fi-rr-chess-knight-alt")]
public static UIcons ChessKnightAlt;
    [NameAttribute("fi-rr-chess-pawn")]
public static UIcons ChessPawn;
    [NameAttribute("fi-rr-chess-pawn-alt")]
public static UIcons ChessPawnAlt;
    [NameAttribute("fi-rr-chess-piece")]
public static UIcons ChessPiece;
    [NameAttribute("fi-rr-chess-queen")]
public static UIcons ChessQueen;
    [NameAttribute("fi-rr-chess-queen-alt")]
public static UIcons ChessQueenAlt;
    [NameAttribute("fi-rr-chess-rook")]
public static UIcons ChessRook;
    [NameAttribute("fi-rr-chess-rook-alt")]
public static UIcons ChessRookAlt;
    [NameAttribute("fi-rr-chevron-double-down")]
public static UIcons ChevronDoubleDown;
    [NameAttribute("fi-rr-chevron-double-up")]
public static UIcons ChevronDoubleUp;
    [NameAttribute("fi-rr-child")]
public static UIcons Child;
    [NameAttribute("fi-rr-child-head")]
public static UIcons ChildHead;
    [NameAttribute("fi-rr-chimney")]
public static UIcons Chimney;
    [NameAttribute("fi-rr-chip")]
public static UIcons Chip;
    [NameAttribute("fi-rr-chocolate")]
public static UIcons Chocolate;
    [NameAttribute("fi-rr-chocolate-bar")]
public static UIcons ChocolateBar;
    [NameAttribute("fi-rr-choir-singing")]
public static UIcons ChoirSinging;
    [NameAttribute("fi-rr-choose")]
public static UIcons Choose;
    [NameAttribute("fi-rr-choose-alt")]
public static UIcons ChooseAlt;
    [NameAttribute("fi-rr-church")]
public static UIcons Church;
    [NameAttribute("fi-rr-circle")]
public static UIcons Circle;
    [NameAttribute("fi-rr-circle-0")]
public static UIcons Circle0;
    [NameAttribute("fi-rr-circle-1")]
public static UIcons Circle1;
    [NameAttribute("fi-rr-circle-2")]
public static UIcons Circle2;
    [NameAttribute("fi-rr-circle-3")]
public static UIcons Circle3;
    [NameAttribute("fi-rr-circle-4")]
public static UIcons Circle4;
    [NameAttribute("fi-rr-circle-5")]
public static UIcons Circle5;
    [NameAttribute("fi-rr-circle-6")]
public static UIcons Circle6;
    [NameAttribute("fi-rr-circle-7")]
public static UIcons Circle7;
    [NameAttribute("fi-rr-circle-8")]
public static UIcons Circle8;
    [NameAttribute("fi-rr-circle-9")]
public static UIcons Circle9;
    [NameAttribute("fi-rr-circle-a")]
public static UIcons CircleA;
    [NameAttribute("fi-rr-circle-b")]
public static UIcons CircleB;
    [NameAttribute("fi-rr-circle-bolt")]
public static UIcons CircleBolt;
    [NameAttribute("fi-rr-circle-book-open")]
public static UIcons CircleBookOpen;
    [NameAttribute("fi-rr-circle-bookmark")]
public static UIcons CircleBookmark;
    [NameAttribute("fi-rr-circle-c")]
public static UIcons CircleC;
    [NameAttribute("fi-rr-circle-calendar")]
public static UIcons CircleCalendar;
    [NameAttribute("fi-rr-circle-camera")]
public static UIcons CircleCamera;
    [NameAttribute("fi-rr-circle-cross")]
public static UIcons CircleCross;
    [NameAttribute("fi-rr-circle-d")]
public static UIcons CircleD;
    [NameAttribute("fi-rr-circle-dashed")]
public static UIcons CircleDashed;
    [NameAttribute("fi-rr-circle-divide")]
public static UIcons CircleDivide;
    [NameAttribute("fi-rr-circle-e")]
public static UIcons CircleE;
    [NameAttribute("fi-rr-circle-ellipsis")]
public static UIcons CircleEllipsis;
    [NameAttribute("fi-rr-circle-ellipsis-vertical")]
public static UIcons CircleEllipsisVertical;
    [NameAttribute("fi-rr-circle-envelope")]
public static UIcons CircleEnvelope;
    [NameAttribute("fi-rr-circle-exclamation-check")]
public static UIcons CircleExclamationCheck;
    [NameAttribute("fi-rr-circle-f")]
public static UIcons CircleF;
    [NameAttribute("fi-rr-circle-g")]
public static UIcons CircleG;
    [NameAttribute("fi-rr-circle-h")]
public static UIcons CircleH;
    [NameAttribute("fi-rr-circle-half")]
public static UIcons CircleHalf;
    [NameAttribute("fi-rr-circle-half-stroke")]
public static UIcons CircleHalfStroke;
    [NameAttribute("fi-rr-circle-heart")]
public static UIcons CircleHeart;
    [NameAttribute("fi-rr-circle-i")]
public static UIcons CircleI;
    [NameAttribute("fi-rr-circle-j")]
public static UIcons CircleJ;
    [NameAttribute("fi-rr-circle-k")]
public static UIcons CircleK;
    [NameAttribute("fi-rr-circle-l")]
public static UIcons CircleL;
    [NameAttribute("fi-rr-circle-m")]
public static UIcons CircleM;
    [NameAttribute("fi-rr-circle-microphone")]
public static UIcons CircleMicrophone;
    [NameAttribute("fi-rr-circle-microphone-lines")]
public static UIcons CircleMicrophoneLines;
    [NameAttribute("fi-rr-circle-n")]
public static UIcons CircleN;
    [NameAttribute("fi-rr-circle-nodes")]
public static UIcons CircleNodes;
    [NameAttribute("fi-rr-circle-o")]
public static UIcons CircleO;
    [NameAttribute("fi-rr-circle-overlap")]
public static UIcons CircleOverlap;
    [NameAttribute("fi-rr-circle-p")]
public static UIcons CircleP;
    [NameAttribute("fi-rr-circle-phone")]
public static UIcons CirclePhone;
    [NameAttribute("fi-rr-circle-phone-flip")]
public static UIcons CirclePhoneFlip;
    [NameAttribute("fi-rr-circle-phone-hangup")]
public static UIcons CirclePhoneHangup;
    [NameAttribute("fi-rr-circle-q")]
public static UIcons CircleQ;
    [NameAttribute("fi-rr-circle-quarter")]
public static UIcons CircleQuarter;
    [NameAttribute("fi-rr-circle-quarters")]
public static UIcons CircleQuarters;
    [NameAttribute("fi-rr-circle-quarters-alt")]
public static UIcons CircleQuartersAlt;
    [NameAttribute("fi-rr-circle-r")]
public static UIcons CircleR;
    [NameAttribute("fi-rr-circle-s")]
public static UIcons CircleS;
    [NameAttribute("fi-rr-circle-small")]
public static UIcons CircleSmall;
    [NameAttribute("fi-rr-circle-star")]
public static UIcons CircleStar;
    [NameAttribute("fi-rr-circle-t")]
public static UIcons CircleT;
    [NameAttribute("fi-rr-circle-three-quarters")]
public static UIcons CircleThreeQuarters;
    [NameAttribute("fi-rr-circle-trash")]
public static UIcons CircleTrash;
    [NameAttribute("fi-rr-circle-u")]
public static UIcons CircleU;
    [NameAttribute("fi-rr-circle-user")]
public static UIcons CircleUser;
    [NameAttribute("fi-rr-circle-v")]
public static UIcons CircleV;
    [NameAttribute("fi-rr-circle-video")]
public static UIcons CircleVideo;
    [NameAttribute("fi-rr-circle-w")]
public static UIcons CircleW;
    [NameAttribute("fi-rr-circle-waveform-lines")]
public static UIcons CircleWaveformLines;
    [NameAttribute("fi-rr-circle-x")]
public static UIcons CircleX;
    [NameAttribute("fi-rr-circle-xmark")]
public static UIcons CircleXmark;
    [NameAttribute("fi-rr-circle-y")]
public static UIcons CircleY;
    [NameAttribute("fi-rr-circle-z")]
public static UIcons CircleZ;
    [NameAttribute("fi-rr-citrus")]
public static UIcons Citrus;
    [NameAttribute("fi-rr-citrus-slice")]
public static UIcons CitrusSlice;
    [NameAttribute("fi-rr-city")]
public static UIcons City;
    [NameAttribute("fi-rr-clapperboard")]
public static UIcons Clapperboard;
    [NameAttribute("fi-rr-clapperboard-play")]
public static UIcons ClapperboardPlay;
    [NameAttribute("fi-rr-clarinet")]
public static UIcons Clarinet;
    [NameAttribute("fi-rr-claw-marks")]
public static UIcons ClawMarks;
    [NameAttribute("fi-rr-clean")]
public static UIcons Clean;
    [NameAttribute("fi-rr-clear-alt")]
public static UIcons ClearAlt;
    [NameAttribute("fi-rr-clip")]
public static UIcons Clip;
    [NameAttribute("fi-rr-clip-file")]
public static UIcons ClipFile;
    [NameAttribute("fi-rr-clip-mail")]
public static UIcons ClipMail;
    [NameAttribute("fi-rr-clipboard")]
public static UIcons Clipboard;
    [NameAttribute("fi-rr-clipboard-check")]
public static UIcons ClipboardCheck;
    [NameAttribute("fi-rr-clipboard-exclamation")]
public static UIcons ClipboardExclamation;
    [NameAttribute("fi-rr-clipboard-list")]
public static UIcons ClipboardList;
    [NameAttribute("fi-rr-clipboard-list-check")]
public static UIcons ClipboardListCheck;
    [NameAttribute("fi-rr-clipboard-prescription")]
public static UIcons ClipboardPrescription;
    [NameAttribute("fi-rr-clipboard-question")]
public static UIcons ClipboardQuestion;
    [NameAttribute("fi-rr-clipboard-user")]
public static UIcons ClipboardUser;
    [NameAttribute("fi-rr-clipoard-wrong")]
public static UIcons ClipoardWrong;
    [NameAttribute("fi-rr-clock")]
public static UIcons Clock;
    [NameAttribute("fi-rr-clock-desk")]
public static UIcons ClockDesk;
    [NameAttribute("fi-rr-clock-eight-thirty")]
public static UIcons ClockEightThirty;
    [NameAttribute("fi-rr-clock-eleven")]
public static UIcons ClockEleven;
    [NameAttribute("fi-rr-clock-eleven-thirty")]
public static UIcons ClockElevenThirty;
    [NameAttribute("fi-rr-clock-five")]
public static UIcons ClockFive;
    [NameAttribute("fi-rr-clock-five-thirty")]
public static UIcons ClockFiveThirty;
    [NameAttribute("fi-rr-clock-four-thirty")]
public static UIcons ClockFourThirty;
    [NameAttribute("fi-rr-clock-nine")]
public static UIcons ClockNine;
    [NameAttribute("fi-rr-clock-nine-thirty")]
public static UIcons ClockNineThirty;
    [NameAttribute("fi-rr-clock-one")]
public static UIcons ClockOne;
    [NameAttribute("fi-rr-clock-one-thirty")]
public static UIcons ClockOneThirty;
    [NameAttribute("fi-rr-clock-seven")]
public static UIcons ClockSeven;
    [NameAttribute("fi-rr-clock-seven-thirty")]
public static UIcons ClockSevenThirty;
    [NameAttribute("fi-rr-clock-six")]
public static UIcons ClockSix;
    [NameAttribute("fi-rr-clock-six-thirty")]
public static UIcons ClockSixThirty;
    [NameAttribute("fi-rr-clock-ten")]
public static UIcons ClockTen;
    [NameAttribute("fi-rr-clock-ten-thirty")]
public static UIcons ClockTenThirty;
    [NameAttribute("fi-rr-clock-three")]
public static UIcons ClockThree;
    [NameAttribute("fi-rr-clock-three-thirty")]
public static UIcons ClockThreeThirty;
    [NameAttribute("fi-rr-clock-time-tracking")]
public static UIcons ClockTimeTracking;
    [NameAttribute("fi-rr-clock-twelve")]
public static UIcons ClockTwelve;
    [NameAttribute("fi-rr-clock-twelve-thirty")]
public static UIcons ClockTwelveThirty;
    [NameAttribute("fi-rr-clock-two")]
public static UIcons ClockTwo;
    [NameAttribute("fi-rr-clock-two-thirty")]
public static UIcons ClockTwoThirty;
    [NameAttribute("fi-rr-clock-up-arrow")]
public static UIcons ClockUpArrow;
    [NameAttribute("fi-rr-clone")]
public static UIcons Clone;
    [NameAttribute("fi-rr-closed-captioning-slash")]
public static UIcons ClosedCaptioningSlash;
    [NameAttribute("fi-rr-clothes-hanger")]
public static UIcons ClothesHanger;
    [NameAttribute("fi-rr-cloud")]
public static UIcons Cloud;
    [NameAttribute("fi-rr-cloud-back-up")]
public static UIcons CloudBackUp;
    [NameAttribute("fi-rr-cloud-back-up-alt")]
public static UIcons CloudBackUpAlt;
    [NameAttribute("fi-rr-cloud-check")]
public static UIcons CloudCheck;
    [NameAttribute("fi-rr-cloud-code")]
public static UIcons CloudCode;
    [NameAttribute("fi-rr-cloud-disabled")]
public static UIcons CloudDisabled;
    [NameAttribute("fi-rr-cloud-download")]
public static UIcons CloudDownload;
    [NameAttribute("fi-rr-cloud-download-alt")]
public static UIcons CloudDownloadAlt;
    [NameAttribute("fi-rr-cloud-drizzle")]
public static UIcons CloudDrizzle;
    [NameAttribute("fi-rr-cloud-exclamation")]
public static UIcons CloudExclamation;
    [NameAttribute("fi-rr-cloud-gear-automation")]
public static UIcons CloudGearAutomation;
    [NameAttribute("fi-rr-cloud-hail")]
public static UIcons CloudHail;
    [NameAttribute("fi-rr-cloud-hail-mixed")]
public static UIcons CloudHailMixed;
    [NameAttribute("fi-rr-cloud-meatball")]
public static UIcons CloudMeatball;
    [NameAttribute("fi-rr-cloud-moon")]
public static UIcons CloudMoon;
    [NameAttribute("fi-rr-cloud-moon-rain")]
public static UIcons CloudMoonRain;
    [NameAttribute("fi-rr-cloud-question")]
public static UIcons CloudQuestion;
    [NameAttribute("fi-rr-cloud-rain")]
public static UIcons CloudRain;
    [NameAttribute("fi-rr-cloud-rainbow")]
public static UIcons CloudRainbow;
    [NameAttribute("fi-rr-cloud-share")]
public static UIcons CloudShare;
    [NameAttribute("fi-rr-cloud-showers")]
public static UIcons CloudShowers;
    [NameAttribute("fi-rr-cloud-showers-heavy")]
public static UIcons CloudShowersHeavy;
    [NameAttribute("fi-rr-cloud-sleet")]
public static UIcons CloudSleet;
    [NameAttribute("fi-rr-cloud-snow")]
public static UIcons CloudSnow;
    [NameAttribute("fi-rr-cloud-sun")]
public static UIcons CloudSun;
    [NameAttribute("fi-rr-cloud-sun-rain")]
public static UIcons CloudSunRain;
    [NameAttribute("fi-rr-cloud-upload")]
public static UIcons CloudUpload;
    [NameAttribute("fi-rr-cloud-upload-alt")]
public static UIcons CloudUploadAlt;
    [NameAttribute("fi-rr-clouds")]
public static UIcons Clouds;
    [NameAttribute("fi-rr-clouds-moon")]
public static UIcons CloudsMoon;
    [NameAttribute("fi-rr-clouds-sun")]
public static UIcons CloudsSun;
    [NameAttribute("fi-rr-clover-alt")]
public static UIcons CloverAlt;
    [NameAttribute("fi-rr-club")]
public static UIcons Club;
    [NameAttribute("fi-rr-cocktail")]
public static UIcons Cocktail;
    [NameAttribute("fi-rr-cocktail-alt")]
public static UIcons CocktailAlt;
    [NameAttribute("fi-rr-coconut")]
public static UIcons Coconut;
    [NameAttribute("fi-rr-code-branch")]
public static UIcons CodeBranch;
    [NameAttribute("fi-rr-code-commit")]
public static UIcons CodeCommit;
    [NameAttribute("fi-rr-code-compare")]
public static UIcons CodeCompare;
    [NameAttribute("fi-rr-code-fork")]
public static UIcons CodeFork;
    [NameAttribute("fi-rr-code-merge")]
public static UIcons CodeMerge;
    [NameAttribute("fi-rr-code-pull-request")]
public static UIcons CodePullRequest;
    [NameAttribute("fi-rr-code-pull-request-closed")]
public static UIcons CodePullRequestClosed;
    [NameAttribute("fi-rr-code-pull-request-draft")]
public static UIcons CodePullRequestDraft;
    [NameAttribute("fi-rr-code-simple")]
public static UIcons CodeSimple;
    [NameAttribute("fi-rr-coffee")]
public static UIcons Coffee;
    [NameAttribute("fi-rr-coffee-bean")]
public static UIcons CoffeeBean;
    [NameAttribute("fi-rr-coffee-beans")]
public static UIcons CoffeeBeans;
    [NameAttribute("fi-rr-coffee-heart")]
public static UIcons CoffeeHeart;
    [NameAttribute("fi-rr-coffee-pot")]
public static UIcons CoffeePot;
    [NameAttribute("fi-rr-coffin")]
public static UIcons Coffin;
    [NameAttribute("fi-rr-coffin-cross")]
public static UIcons CoffinCross;
    [NameAttribute("fi-rr-coin")]
public static UIcons Coin;
    [NameAttribute("fi-rr-coin-up-arrow")]
public static UIcons CoinUpArrow;
    [NameAttribute("fi-rr-coins")]
public static UIcons Coins;
    [NameAttribute("fi-rr-colon-sign")]
public static UIcons ColonSign;
    [NameAttribute("fi-rr-columns-3")]
public static UIcons Columns3;
    [NameAttribute("fi-rr-comet")]
public static UIcons Comet;
    [NameAttribute("fi-rr-command")]
public static UIcons Command;
    [NameAttribute("fi-rr-comment")]
public static UIcons Comment;
    [NameAttribute("fi-rr-comment-alt")]
public static UIcons CommentAlt;
    [NameAttribute("fi-rr-comment-alt-check")]
public static UIcons CommentAltCheck;
    [NameAttribute("fi-rr-comment-alt-dots")]
public static UIcons CommentAltDots;
    [NameAttribute("fi-rr-comment-alt-edit")]
public static UIcons CommentAltEdit;
    [NameAttribute("fi-rr-comment-alt-medical")]
public static UIcons CommentAltMedical;
    [NameAttribute("fi-rr-comment-alt-middle")]
public static UIcons CommentAltMiddle;
    [NameAttribute("fi-rr-comment-alt-middle-top")]
public static UIcons CommentAltMiddleTop;
    [NameAttribute("fi-rr-comment-alt-minus")]
public static UIcons CommentAltMinus;
    [NameAttribute("fi-rr-comment-alt-music")]
public static UIcons CommentAltMusic;
    [NameAttribute("fi-rr-comment-arrow-down")]
public static UIcons CommentArrowDown;
    [NameAttribute("fi-rr-comment-arrow-up")]
public static UIcons CommentArrowUp;
    [NameAttribute("fi-rr-comment-arrow-up-right")]
public static UIcons CommentArrowUpRight;
    [NameAttribute("fi-rr-comment-check")]
public static UIcons CommentCheck;
    [NameAttribute("fi-rr-comment-code")]
public static UIcons CommentCode;
    [NameAttribute("fi-rr-comment-dollar")]
public static UIcons CommentDollar;
    [NameAttribute("fi-rr-comment-dots")]
public static UIcons CommentDots;
    [NameAttribute("fi-rr-comment-exclamation")]
public static UIcons CommentExclamation;
    [NameAttribute("fi-rr-comment-heart")]
public static UIcons CommentHeart;
    [NameAttribute("fi-rr-comment-image")]
public static UIcons CommentImage;
    [NameAttribute("fi-rr-comment-info")]
public static UIcons CommentInfo;
    [NameAttribute("fi-rr-comment-medical")]
public static UIcons CommentMedical;
    [NameAttribute("fi-rr-comment-minus")]
public static UIcons CommentMinus;
    [NameAttribute("fi-rr-comment-pen")]
public static UIcons CommentPen;
    [NameAttribute("fi-rr-comment-question")]
public static UIcons CommentQuestion;
    [NameAttribute("fi-rr-comment-quote")]
public static UIcons CommentQuote;
    [NameAttribute("fi-rr-comment-slash")]
public static UIcons CommentSlash;
    [NameAttribute("fi-rr-comment-smile")]
public static UIcons CommentSmile;
    [NameAttribute("fi-rr-comment-sms")]
public static UIcons CommentSms;
    [NameAttribute("fi-rr-comment-text")]
public static UIcons CommentText;
    [NameAttribute("fi-rr-comment-user")]
public static UIcons CommentUser;
    [NameAttribute("fi-rr-comment-xmark")]
public static UIcons CommentXmark;
    [NameAttribute("fi-rr-comments")]
public static UIcons Comments;
    [NameAttribute("fi-rr-comments-dollar")]
public static UIcons CommentsDollar;
    [NameAttribute("fi-rr-comments-question")]
public static UIcons CommentsQuestion;
    [NameAttribute("fi-rr-comments-question-check")]
public static UIcons CommentsQuestionCheck;
    [NameAttribute("fi-rr-compass-alt")]
public static UIcons CompassAlt;
    [NameAttribute("fi-rr-compass-east")]
public static UIcons CompassEast;
    [NameAttribute("fi-rr-compass-north")]
public static UIcons CompassNorth;
    [NameAttribute("fi-rr-compass-slash")]
public static UIcons CompassSlash;
    [NameAttribute("fi-rr-compass-south")]
public static UIcons CompassSouth;
    [NameAttribute("fi-rr-compass-west")]
public static UIcons CompassWest;
    [NameAttribute("fi-rr-completed")]
public static UIcons Completed;
    [NameAttribute("fi-rr-compliance")]
public static UIcons Compliance;
    [NameAttribute("fi-rr-compliance-clipboard")]
public static UIcons ComplianceClipboard;
    [NameAttribute("fi-rr-compliance-document")]
public static UIcons ComplianceDocument;
    [NameAttribute("fi-rr-compress")]
public static UIcons Compress;
    [NameAttribute("fi-rr-compress-alt")]
public static UIcons CompressAlt;
    [NameAttribute("fi-rr-computer")]
public static UIcons Computer;
    [NameAttribute("fi-rr-computer-classic")]
public static UIcons ComputerClassic;
    [NameAttribute("fi-rr-computer-mouse")]
public static UIcons ComputerMouse;
    [NameAttribute("fi-rr-computer-speaker")]
public static UIcons ComputerSpeaker;
    [NameAttribute("fi-rr-concierge-bell")]
public static UIcons ConciergeBell;
    [NameAttribute("fi-rr-condition")]
public static UIcons Condition;
    [NameAttribute("fi-rr-condition-alt")]
public static UIcons ConditionAlt;
    [NameAttribute("fi-rr-confetti")]
public static UIcons Confetti;
    [NameAttribute("fi-rr-constellation")]
public static UIcons Constellation;
    [NameAttribute("fi-rr-container-storage")]
public static UIcons ContainerStorage;
    [NameAttribute("fi-rr-convert-document")]
public static UIcons ConvertDocument;
    [NameAttribute("fi-rr-convert-shapes")]
public static UIcons ConvertShapes;
    [NameAttribute("fi-rr-conveyor-belt")]
public static UIcons ConveyorBelt;
    [NameAttribute("fi-rr-conveyor-belt-alt")]
public static UIcons ConveyorBeltAlt;
    [NameAttribute("fi-rr-conveyor-belt-arm")]
public static UIcons ConveyorBeltArm;
    [NameAttribute("fi-rr-conveyor-belt-empty")]
public static UIcons ConveyorBeltEmpty;
    [NameAttribute("fi-rr-cookie")]
public static UIcons Cookie;
    [NameAttribute("fi-rr-cookie-alt")]
public static UIcons CookieAlt;
    [NameAttribute("fi-rr-copy")]
public static UIcons Copy;
    [NameAttribute("fi-rr-copy-alt")]
public static UIcons CopyAlt;
    [NameAttribute("fi-rr-copy-image")]
public static UIcons CopyImage;
    [NameAttribute("fi-rr-copyright")]
public static UIcons Copyright;
    [NameAttribute("fi-rr-corn")]
public static UIcons Corn;
    [NameAttribute("fi-rr-corporate")]
public static UIcons Corporate;
    [NameAttribute("fi-rr-corporate-alt")]
public static UIcons CorporateAlt;
    [NameAttribute("fi-rr-couch")]
public static UIcons Couch;
    [NameAttribute("fi-rr-couple")]
public static UIcons Couple;
    [NameAttribute("fi-rr-court-sport")]
public static UIcons CourtSport;
    [NameAttribute("fi-rr-cow")]
public static UIcons Cow;
    [NameAttribute("fi-rr-cow-alt")]
public static UIcons CowAlt;
    [NameAttribute("fi-rr-cowbell")]
public static UIcons Cowbell;
    [NameAttribute("fi-rr-cowbell-circle-plus")]
public static UIcons CowbellCirclePlus;
    [NameAttribute("fi-rr-cowbell-more")]
public static UIcons CowbellMore;
    [NameAttribute("fi-rr-crab")]
public static UIcons Crab;
    [NameAttribute("fi-rr-crate-empty")]
public static UIcons CrateEmpty;
    [NameAttribute("fi-rr-cream")]
public static UIcons Cream;
    [NameAttribute("fi-rr-credit-card")]
public static UIcons CreditCard;
    [NameAttribute("fi-rr-credit-card-buyer")]
public static UIcons CreditCardBuyer;
    [NameAttribute("fi-rr-credit-card-eye")]
public static UIcons CreditCardEye;
    [NameAttribute("fi-rr-cricket")]
public static UIcons Cricket;
    [NameAttribute("fi-rr-CRM")]
public static UIcons CRM;
    [NameAttribute("fi-rr-crm-alt")]
public static UIcons CrmAlt;
    [NameAttribute("fi-rr-crm-computer")]
public static UIcons CrmComputer;
    [NameAttribute("fi-rr-croissant")]
public static UIcons Croissant;
    [NameAttribute("fi-rr-cross")]
public static UIcons Cross;
    [NameAttribute("fi-rr-cross-circle")]
public static UIcons CrossCircle;
    [NameAttribute("fi-rr-cross-religion")]
public static UIcons CrossReligion;
    [NameAttribute("fi-rr-cross-small")]
public static UIcons CrossSmall;
    [NameAttribute("fi-rr-crossed-eye")]
public static UIcons CrossedEye;
    [NameAttribute("fi-rr-crow")]
public static UIcons Crow;
    [NameAttribute("fi-rr-crown")]
public static UIcons Crown;
    [NameAttribute("fi-rr-crutch")]
public static UIcons Crutch;
    [NameAttribute("fi-rr-crutches")]
public static UIcons Crutches;
    [NameAttribute("fi-rr-cruzeiro-sign")]
public static UIcons CruzeiroSign;
    [NameAttribute("fi-rr-crypto-calendar")]
public static UIcons CryptoCalendar;
    [NameAttribute("fi-rr-cryptocurrency")]
public static UIcons Cryptocurrency;
    [NameAttribute("fi-rr-crystal-ball")]
public static UIcons CrystalBall;
    [NameAttribute("fi-rr-cube")]
public static UIcons Cube;
    [NameAttribute("fi-rr-cubes")]
public static UIcons Cubes;
    [NameAttribute("fi-rr-cubes-stacked")]
public static UIcons CubesStacked;
    [NameAttribute("fi-rr-cucumber")]
public static UIcons Cucumber;
    [NameAttribute("fi-rr-cup-straw")]
public static UIcons CupStraw;
    [NameAttribute("fi-rr-cup-straw-swoosh")]
public static UIcons CupStrawSwoosh;
    [NameAttribute("fi-rr-cup-togo")]
public static UIcons CupTogo;
    [NameAttribute("fi-rr-cupcake")]
public static UIcons Cupcake;
    [NameAttribute("fi-rr-cupcake-alt")]
public static UIcons CupcakeAlt;
    [NameAttribute("fi-rr-curling")]
public static UIcons Curling;
    [NameAttribute("fi-rr-cursor")]
public static UIcons Cursor;
    [NameAttribute("fi-rr-cursor-finger")]
public static UIcons CursorFinger;
    [NameAttribute("fi-rr-cursor-plus")]
public static UIcons CursorPlus;
    [NameAttribute("fi-rr-cursor-text")]
public static UIcons CursorText;
    [NameAttribute("fi-rr-cursor-text-alt")]
public static UIcons CursorTextAlt;
    [NameAttribute("fi-rr-curve")]
public static UIcons Curve;
    [NameAttribute("fi-rr-curve-alt")]
public static UIcons CurveAlt;
    [NameAttribute("fi-rr-curve-arrow")]
public static UIcons CurveArrow;
    [NameAttribute("fi-rr-custard")]
public static UIcons Custard;
    [NameAttribute("fi-rr-customer-care")]
public static UIcons CustomerCare;
    [NameAttribute("fi-rr-customer-service")]
public static UIcons CustomerService;
    [NameAttribute("fi-rr-customization")]
public static UIcons Customization;
    [NameAttribute("fi-rr-customization-cogwheel")]
public static UIcons CustomizationCogwheel;
    [NameAttribute("fi-rr-customize")]
public static UIcons Customize;
    [NameAttribute("fi-rr-customize-computer")]
public static UIcons CustomizeComputer;
    [NameAttribute("fi-rr-customize-edit")]
public static UIcons CustomizeEdit;
    [NameAttribute("fi-rr-CV")]
public static UIcons CV;
    [NameAttribute("fi-rr-cvv-card")]
public static UIcons CvvCard;
    [NameAttribute("fi-rr-d")]
public static UIcons D;
    [NameAttribute("fi-rr-dagger")]
public static UIcons Dagger;
    [NameAttribute("fi-rr-daily-calendar")]
public static UIcons DailyCalendar;
    [NameAttribute("fi-rr-damage")]
public static UIcons Damage;
    [NameAttribute("fi-rr-dart")]
public static UIcons Dart;
    [NameAttribute("fi-rr-dashboard")]
public static UIcons Dashboard;
    [NameAttribute("fi-rr-dashboard-monitor")]
public static UIcons DashboardMonitor;
    [NameAttribute("fi-rr-dashboard-panel")]
public static UIcons DashboardPanel;
    [NameAttribute("fi-rr-data-transfer")]
public static UIcons DataTransfer;
    [NameAttribute("fi-rr-database")]
public static UIcons Database;
    [NameAttribute("fi-rr-debt")]
public static UIcons Debt;
    [NameAttribute("fi-rr-deer")]
public static UIcons Deer;
    [NameAttribute("fi-rr-deer-rudolph")]
public static UIcons DeerRudolph;
    [NameAttribute("fi-rr-delete")]
public static UIcons Delete;
    [NameAttribute("fi-rr-delete-document")]
public static UIcons DeleteDocument;
    [NameAttribute("fi-rr-delete-right")]
public static UIcons DeleteRight;
    [NameAttribute("fi-rr-delete-user")]
public static UIcons DeleteUser;
    [NameAttribute("fi-rr-democrat")]
public static UIcons Democrat;
    [NameAttribute("fi-rr-department")]
public static UIcons Department;
    [NameAttribute("fi-rr-department-structure")]
public static UIcons DepartmentStructure;
    [NameAttribute("fi-rr-deposit")]
public static UIcons Deposit;
    [NameAttribute("fi-rr-deposit-alt")]
public static UIcons DepositAlt;
    [NameAttribute("fi-rr-description")]
public static UIcons Description;
    [NameAttribute("fi-rr-description-alt")]
public static UIcons DescriptionAlt;
    [NameAttribute("fi-rr-desk")]
public static UIcons Desk;
    [NameAttribute("fi-rr-desktop-arrow-down")]
public static UIcons DesktopArrowDown;
    [NameAttribute("fi-rr-desktop-wallpaper")]
public static UIcons DesktopWallpaper;
    [NameAttribute("fi-rr-devices")]
public static UIcons Devices;
    [NameAttribute("fi-rr-dewpoint")]
public static UIcons Dewpoint;
    [NameAttribute("fi-rr-dharmachakra")]
public static UIcons Dharmachakra;
    [NameAttribute("fi-rr-diagram-cells")]
public static UIcons DiagramCells;
    [NameAttribute("fi-rr-diagram-lean-canvas")]
public static UIcons DiagramLeanCanvas;
    [NameAttribute("fi-rr-diagram-nested")]
public static UIcons DiagramNested;
    [NameAttribute("fi-rr-diagram-next")]
public static UIcons DiagramNext;
    [NameAttribute("fi-rr-diagram-predecessor")]
public static UIcons DiagramPredecessor;
    [NameAttribute("fi-rr-diagram-previous")]
public static UIcons DiagramPrevious;
    [NameAttribute("fi-rr-diagram-project")]
public static UIcons DiagramProject;
    [NameAttribute("fi-rr-diagram-sankey")]
public static UIcons DiagramSankey;
    [NameAttribute("fi-rr-diagram-subtask")]
public static UIcons DiagramSubtask;
    [NameAttribute("fi-rr-diagram-successor")]
public static UIcons DiagramSuccessor;
    [NameAttribute("fi-rr-diagram-venn")]
public static UIcons DiagramVenn;
    [NameAttribute("fi-rr-dial")]
public static UIcons Dial;
    [NameAttribute("fi-rr-dial-high")]
public static UIcons DialHigh;
    [NameAttribute("fi-rr-dial-low")]
public static UIcons DialLow;
    [NameAttribute("fi-rr-dial-max")]
public static UIcons DialMax;
    [NameAttribute("fi-rr-dial-med")]
public static UIcons DialMed;
    [NameAttribute("fi-rr-dial-med-low")]
public static UIcons DialMedLow;
    [NameAttribute("fi-rr-dial-min")]
public static UIcons DialMin;
    [NameAttribute("fi-rr-dial-off")]
public static UIcons DialOff;
    [NameAttribute("fi-rr-diamond")]
public static UIcons Diamond;
    [NameAttribute("fi-rr-diamond-exclamation")]
public static UIcons DiamondExclamation;
    [NameAttribute("fi-rr-diamond-turn-right")]
public static UIcons DiamondTurnRight;
    [NameAttribute("fi-rr-diary-bookmark-down")]
public static UIcons DiaryBookmarkDown;
    [NameAttribute("fi-rr-diary-bookmarks")]
public static UIcons DiaryBookmarks;
    [NameAttribute("fi-rr-diary-clasp")]
public static UIcons DiaryClasp;
    [NameAttribute("fi-rr-dice")]
public static UIcons Dice;
    [NameAttribute("fi-rr-dice-alt")]
public static UIcons DiceAlt;
    [NameAttribute("fi-rr-dice-d10")]
public static UIcons DiceD10;
    [NameAttribute("fi-rr-dice-d12")]
public static UIcons DiceD12;
    [NameAttribute("fi-rr-dice-d20")]
public static UIcons DiceD20;
    [NameAttribute("fi-rr-dice-d4")]
public static UIcons DiceD4;
    [NameAttribute("fi-rr-dice-d6")]
public static UIcons DiceD6;
    [NameAttribute("fi-rr-dice-d8")]
public static UIcons DiceD8;
    [NameAttribute("fi-rr-dice-four")]
public static UIcons DiceFour;
    [NameAttribute("fi-rr-dice-one")]
public static UIcons DiceOne;
    [NameAttribute("fi-rr-dice-six")]
public static UIcons DiceSix;
    [NameAttribute("fi-rr-dice-three")]
public static UIcons DiceThree;
    [NameAttribute("fi-rr-dice-two")]
public static UIcons DiceTwo;
    [NameAttribute("fi-rr-digging")]
public static UIcons Digging;
    [NameAttribute("fi-rr-digital-tachograph")]
public static UIcons DigitalTachograph;
    [NameAttribute("fi-rr-dinner")]
public static UIcons Dinner;
    [NameAttribute("fi-rr-diploma")]
public static UIcons Diploma;
    [NameAttribute("fi-rr-direction-signal")]
public static UIcons DirectionSignal;
    [NameAttribute("fi-rr-direction-signal-arrow")]
public static UIcons DirectionSignalArrow;
    [NameAttribute("fi-rr-disc-drive")]
public static UIcons DiscDrive;
    [NameAttribute("fi-rr-disco-ball")]
public static UIcons DiscoBall;
    [NameAttribute("fi-rr-discover")]
public static UIcons Discover;
    [NameAttribute("fi-rr-disease")]
public static UIcons Disease;
    [NameAttribute("fi-rr-disk")]
public static UIcons Disk;
    [NameAttribute("fi-rr-display")]
public static UIcons Display;
    [NameAttribute("fi-rr-display-arrow-down")]
public static UIcons DisplayArrowDown;
    [NameAttribute("fi-rr-display-chart-up")]
public static UIcons DisplayChartUp;
    [NameAttribute("fi-rr-display-code")]
public static UIcons DisplayCode;
    [NameAttribute("fi-rr-display-medical")]
public static UIcons DisplayMedical;
    [NameAttribute("fi-rr-display-slash")]
public static UIcons DisplaySlash;
    [NameAttribute("fi-rr-distribute-spacing-horizontal")]
public static UIcons DistributeSpacingHorizontal;
    [NameAttribute("fi-rr-distribute-spacing-vertical")]
public static UIcons DistributeSpacingVertical;
    [NameAttribute("fi-rr-divide")]
public static UIcons Divide;
    [NameAttribute("fi-rr-dizzy")]
public static UIcons Dizzy;
    [NameAttribute("fi-rr-dna")]
public static UIcons Dna;
    [NameAttribute("fi-rr-do-not-enter")]
public static UIcons DoNotEnter;
    [NameAttribute("fi-rr-doctor")]
public static UIcons Doctor;
    [NameAttribute("fi-rr-document")]
public static UIcons Document;
    [NameAttribute("fi-rr-document-circle-wrong")]
public static UIcons DocumentCircleWrong;
    [NameAttribute("fi-rr-document-paid")]
public static UIcons DocumentPaid;
    [NameAttribute("fi-rr-document-signed")]
public static UIcons DocumentSigned;
    [NameAttribute("fi-rr-dog")]
public static UIcons Dog;
    [NameAttribute("fi-rr-dog-leashed")]
public static UIcons DogLeashed;
    [NameAttribute("fi-rr-dollar")]
public static UIcons Dollar;
    [NameAttribute("fi-rr-dolly-flatbed")]
public static UIcons DollyFlatbed;
    [NameAttribute("fi-rr-dolly-flatbed-alt")]
public static UIcons DollyFlatbedAlt;
    [NameAttribute("fi-rr-dolly-flatbed-empty")]
public static UIcons DollyFlatbedEmpty;
    [NameAttribute("fi-rr-dolphin")]
public static UIcons Dolphin;
    [NameAttribute("fi-rr-domino-effect")]
public static UIcons DominoEffect;
    [NameAttribute("fi-rr-donate")]
public static UIcons Donate;
    [NameAttribute("fi-rr-dong-sign")]
public static UIcons DongSign;
    [NameAttribute("fi-rr-donut")]
public static UIcons Donut;
    [NameAttribute("fi-rr-door-closed")]
public static UIcons DoorClosed;
    [NameAttribute("fi-rr-door-open")]
public static UIcons DoorOpen;
    [NameAttribute("fi-rr-dot-circle")]
public static UIcons DotCircle;
    [NameAttribute("fi-rr-dot-pending")]
public static UIcons DotPending;
    [NameAttribute("fi-rr-dove")]
public static UIcons Dove;
    [NameAttribute("fi-rr-down")]
public static UIcons Down;
    [NameAttribute("fi-rr-down-from-bracket")]
public static UIcons DownFromBracket;
    [NameAttribute("fi-rr-down-left")]
public static UIcons DownLeft;
    [NameAttribute("fi-rr-down-left-and-up-right-to-center")]
public static UIcons DownLeftAndUpRightToCenter;
    [NameAttribute("fi-rr-down-right")]
public static UIcons DownRight;
    [NameAttribute("fi-rr-down-to-line")]
public static UIcons DownToLine;
    [NameAttribute("fi-rr-download")]
public static UIcons Download;
    [NameAttribute("fi-rr-drafting-compass")]
public static UIcons DraftingCompass;
    [NameAttribute("fi-rr-dragon")]
public static UIcons Dragon;
    [NameAttribute("fi-rr-draw-polygon")]
public static UIcons DrawPolygon;
    [NameAttribute("fi-rr-draw-square")]
public static UIcons DrawSquare;
    [NameAttribute("fi-rr-drawer")]
public static UIcons Drawer;
    [NameAttribute("fi-rr-drawer-alt")]
public static UIcons DrawerAlt;
    [NameAttribute("fi-rr-drawer-empty")]
public static UIcons DrawerEmpty;
    [NameAttribute("fi-rr-dreidel")]
public static UIcons Dreidel;
    [NameAttribute("fi-rr-drink")]
public static UIcons Drink;
    [NameAttribute("fi-rr-drink-alt")]
public static UIcons DrinkAlt;
    [NameAttribute("fi-rr-driver-man")]
public static UIcons DriverMan;
    [NameAttribute("fi-rr-driver-woman")]
public static UIcons DriverWoman;
    [NameAttribute("fi-rr-drone")]
public static UIcons Drone;
    [NameAttribute("fi-rr-drone-alt")]
public static UIcons DroneAlt;
    [NameAttribute("fi-rr-drone-front")]
public static UIcons DroneFront;
    [NameAttribute("fi-rr-drop-down")]
public static UIcons DropDown;
    [NameAttribute("fi-rr-dropdown")]
public static UIcons Dropdown;
    [NameAttribute("fi-rr-dropdown-select")]
public static UIcons DropdownSelect;
    [NameAttribute("fi-rr-drum")]
public static UIcons Drum;
    [NameAttribute("fi-rr-drum-steelpan")]
public static UIcons DrumSteelpan;
    [NameAttribute("fi-rr-drumstick")]
public static UIcons Drumstick;
    [NameAttribute("fi-rr-drumstick-bite")]
public static UIcons DrumstickBite;
    [NameAttribute("fi-rr-dryer")]
public static UIcons Dryer;
    [NameAttribute("fi-rr-dryer-alt")]
public static UIcons DryerAlt;
    [NameAttribute("fi-rr-duck")]
public static UIcons Duck;
    [NameAttribute("fi-rr-dumbbell-fitness")]
public static UIcons DumbbellFitness;
    [NameAttribute("fi-rr-dumbbell-horizontal")]
public static UIcons DumbbellHorizontal;
    [NameAttribute("fi-rr-dumbbell-ray")]
public static UIcons DumbbellRay;
    [NameAttribute("fi-rr-dumbbell-weightlifting")]
public static UIcons DumbbellWeightlifting;
    [NameAttribute("fi-rr-dumpster")]
public static UIcons Dumpster;
    [NameAttribute("fi-rr-dumpster-fire")]
public static UIcons DumpsterFire;
    [NameAttribute("fi-rr-dungeon")]
public static UIcons Dungeon;
    [NameAttribute("fi-rr-duplicate")]
public static UIcons Duplicate;
    [NameAttribute("fi-rr-duration")]
public static UIcons Duration;
    [NameAttribute("fi-rr-duration-alt")]
public static UIcons DurationAlt;
    [NameAttribute("fi-rr-e")]
public static UIcons E;
    [NameAttribute("fi-rr-e-learning")]
public static UIcons ELearning;
    [NameAttribute("fi-rr-ear")]
public static UIcons Ear;
    [NameAttribute("fi-rr-ear-deaf")]
public static UIcons EarDeaf;
    [NameAttribute("fi-rr-ear-muffs")]
public static UIcons EarMuffs;
    [NameAttribute("fi-rr-earnings")]
public static UIcons Earnings;
    [NameAttribute("fi-rr-earth-africa")]
public static UIcons EarthAfrica;
    [NameAttribute("fi-rr-earth-americas")]
public static UIcons EarthAmericas;
    [NameAttribute("fi-rr-earth-asia")]
public static UIcons EarthAsia;
    [NameAttribute("fi-rr-earth-europa")]
public static UIcons EarthEuropa;
    [NameAttribute("fi-rr-eclipse")]
public static UIcons Eclipse;
    [NameAttribute("fi-rr-eclipse-alt")]
public static UIcons EclipseAlt;
    [NameAttribute("fi-rr-edit")]
public static UIcons Edit;
    [NameAttribute("fi-rr-edit-alt")]
public static UIcons EditAlt;
    [NameAttribute("fi-rr-effect")]
public static UIcons Effect;
    [NameAttribute("fi-rr-egg")]
public static UIcons Egg;
    [NameAttribute("fi-rr-egg-fried")]
public static UIcons EggFried;
    [NameAttribute("fi-rr-eject")]
public static UIcons Eject;
    [NameAttribute("fi-rr-elephant")]
public static UIcons Elephant;
    [NameAttribute("fi-rr-elevator")]
public static UIcons Elevator;
    [NameAttribute("fi-rr-email-pending")]
public static UIcons EmailPending;
    [NameAttribute("fi-rr-employee-alt")]
public static UIcons EmployeeAlt;
    [NameAttribute("fi-rr-employee-handbook")]
public static UIcons EmployeeHandbook;
    [NameAttribute("fi-rr-employee-man")]
public static UIcons EmployeeMan;
    [NameAttribute("fi-rr-employee-man-alt")]
public static UIcons EmployeeManAlt;
    [NameAttribute("fi-rr-employees")]
public static UIcons Employees;
    [NameAttribute("fi-rr-employees-woman-man")]
public static UIcons EmployeesWomanMan;
    [NameAttribute("fi-rr-empty-set")]
public static UIcons EmptySet;
    [NameAttribute("fi-rr-endless-loop")]
public static UIcons EndlessLoop;
    [NameAttribute("fi-rr-engine")]
public static UIcons Engine;
    [NameAttribute("fi-rr-engine-warning")]
public static UIcons EngineWarning;
    [NameAttribute("fi-rr-enter")]
public static UIcons Enter;
    [NameAttribute("fi-rr-entertainment")]
public static UIcons Entertainment;
    [NameAttribute("fi-rr-envelope")]
public static UIcons Envelope;
    [NameAttribute("fi-rr-envelope-ban")]
public static UIcons EnvelopeBan;
    [NameAttribute("fi-rr-envelope-bulk")]
public static UIcons EnvelopeBulk;
    [NameAttribute("fi-rr-envelope-dot")]
public static UIcons EnvelopeDot;
    [NameAttribute("fi-rr-envelope-download")]
public static UIcons EnvelopeDownload;
    [NameAttribute("fi-rr-envelope-heart")]
public static UIcons EnvelopeHeart;
    [NameAttribute("fi-rr-envelope-marker")]
public static UIcons EnvelopeMarker;
    [NameAttribute("fi-rr-envelope-open")]
public static UIcons EnvelopeOpen;
    [NameAttribute("fi-rr-envelope-open-dollar")]
public static UIcons EnvelopeOpenDollar;
    [NameAttribute("fi-rr-envelope-open-text")]
public static UIcons EnvelopeOpenText;
    [NameAttribute("fi-rr-envelope-plus")]
public static UIcons EnvelopePlus;
    [NameAttribute("fi-rr-envelopes")]
public static UIcons Envelopes;
    [NameAttribute("fi-rr-equality")]
public static UIcons Equality;
    [NameAttribute("fi-rr-equals")]
public static UIcons Equals;
    [NameAttribute("fi-rr-equipment")]
public static UIcons Equipment;
    [NameAttribute("fi-rr-eraser")]
public static UIcons Eraser;
    [NameAttribute("fi-rr-error-camera")]
public static UIcons ErrorCamera;
    [NameAttribute("fi-rr-escalator")]
public static UIcons Escalator;
    [NameAttribute("fi-rr-ethernet")]
public static UIcons Ethernet;
    [NameAttribute("fi-rr-euro")]
public static UIcons Euro;
    [NameAttribute("fi-rr-excavator")]
public static UIcons Excavator;
    [NameAttribute("fi-rr-exchange")]
public static UIcons Exchange;
    [NameAttribute("fi-rr-exchange-alt")]
public static UIcons ExchangeAlt;
    [NameAttribute("fi-rr-exchange-cryptocurrency")]
public static UIcons ExchangeCryptocurrency;
    [NameAttribute("fi-rr-exclamation")]
public static UIcons Exclamation;
    [NameAttribute("fi-rr-exit")]
public static UIcons Exit;
    [NameAttribute("fi-rr-exit-alt")]
public static UIcons ExitAlt;
    [NameAttribute("fi-rr-expand")]
public static UIcons Expand;
    [NameAttribute("fi-rr-expand-arrows")]
public static UIcons ExpandArrows;
    [NameAttribute("fi-rr-expand-arrows-alt")]
public static UIcons ExpandArrowsAlt;
    [NameAttribute("fi-rr-expense")]
public static UIcons Expense;
    [NameAttribute("fi-rr-expense-bill")]
public static UIcons ExpenseBill;
    [NameAttribute("fi-rr-external-hard-drive")]
public static UIcons ExternalHardDrive;
    [NameAttribute("fi-rr-external-world")]
public static UIcons ExternalWorld;
    [NameAttribute("fi-rr-eye")]
public static UIcons Eye;
    [NameAttribute("fi-rr-eye-crossed")]
public static UIcons EyeCrossed;
    [NameAttribute("fi-rr-eye-dropper")]
public static UIcons EyeDropper;
    [NameAttribute("fi-rr-eye-dropper-half")]
public static UIcons EyeDropperHalf;
    [NameAttribute("fi-rr-eyes")]
public static UIcons Eyes;
    [NameAttribute("fi-rr-f")]
public static UIcons F;
    [NameAttribute("fi-rr-fabric")]
public static UIcons Fabric;
    [NameAttribute("fi-rr-face-angry-horns")]
public static UIcons FaceAngryHorns;
    [NameAttribute("fi-rr-face-anguished")]
public static UIcons FaceAnguished;
    [NameAttribute("fi-rr-face-anxious-sweat")]
public static UIcons FaceAnxiousSweat;
    [NameAttribute("fi-rr-face-astonished")]
public static UIcons FaceAstonished;
    [NameAttribute("fi-rr-face-awesome")]
public static UIcons FaceAwesome;
    [NameAttribute("fi-rr-face-beam-hand-over-mouth")]
public static UIcons FaceBeamHandOverMouth;
    [NameAttribute("fi-rr-face-confounded")]
public static UIcons FaceConfounded;
    [NameAttribute("fi-rr-face-confused")]
public static UIcons FaceConfused;
    [NameAttribute("fi-rr-face-cowboy-hat")]
public static UIcons FaceCowboyHat;
    [NameAttribute("fi-rr-face-disappointed")]
public static UIcons FaceDisappointed;
    [NameAttribute("fi-rr-face-disguise")]
public static UIcons FaceDisguise;
    [NameAttribute("fi-rr-face-downcast-sweat")]
public static UIcons FaceDowncastSweat;
    [NameAttribute("fi-rr-face-drooling")]
public static UIcons FaceDrooling;
    [NameAttribute("fi-rr-face-explode")]
public static UIcons FaceExplode;
    [NameAttribute("fi-rr-face-expressionless")]
public static UIcons FaceExpressionless;
    [NameAttribute("fi-rr-face-eyes-xmarks")]
public static UIcons FaceEyesXmarks;
    [NameAttribute("fi-rr-face-fearful")]
public static UIcons FaceFearful;
    [NameAttribute("fi-rr-face-glasses")]
public static UIcons FaceGlasses;
    [NameAttribute("fi-rr-face-grin-tongue-wink")]
public static UIcons FaceGrinTongueWink;
    [NameAttribute("fi-rr-face-hand-yawn")]
public static UIcons FaceHandYawn;
    [NameAttribute("fi-rr-face-head-bandage")]
public static UIcons FaceHeadBandage;
    [NameAttribute("fi-rr-face-hushed")]
public static UIcons FaceHushed;
    [NameAttribute("fi-rr-face-icicles")]
public static UIcons FaceIcicles;
    [NameAttribute("fi-rr-face-lying")]
public static UIcons FaceLying;
    [NameAttribute("fi-rr-face-mask")]
public static UIcons FaceMask;
    [NameAttribute("fi-rr-face-monocle")]
public static UIcons FaceMonocle;
    [NameAttribute("fi-rr-face-nauseated")]
public static UIcons FaceNauseated;
    [NameAttribute("fi-rr-face-nose-steam")]
public static UIcons FaceNoseSteam;
    [NameAttribute("fi-rr-face-party")]
public static UIcons FaceParty;
    [NameAttribute("fi-rr-face-pensive")]
public static UIcons FacePensive;
    [NameAttribute("fi-rr-face-persevering")]
public static UIcons FacePersevering;
    [NameAttribute("fi-rr-face-pleading")]
public static UIcons FacePleading;
    [NameAttribute("fi-rr-face-raised-eyebrow")]
public static UIcons FaceRaisedEyebrow;
    [NameAttribute("fi-rr-face-relieved")]
public static UIcons FaceRelieved;
    [NameAttribute("fi-rr-face-sad-sweat")]
public static UIcons FaceSadSweat;
    [NameAttribute("fi-rr-face-scream")]
public static UIcons FaceScream;
    [NameAttribute("fi-rr-face-shush")]
public static UIcons FaceShush;
    [NameAttribute("fi-rr-face-sleeping")]
public static UIcons FaceSleeping;
    [NameAttribute("fi-rr-face-sleepy")]
public static UIcons FaceSleepy;
    [NameAttribute("fi-rr-face-smile-halo")]
public static UIcons FaceSmileHalo;
    [NameAttribute("fi-rr-face-smile-hearts")]
public static UIcons FaceSmileHearts;
    [NameAttribute("fi-rr-face-smile-horns")]
public static UIcons FaceSmileHorns;
    [NameAttribute("fi-rr-face-smile-tear")]
public static UIcons FaceSmileTear;
    [NameAttribute("fi-rr-face-smile-tongue")]
public static UIcons FaceSmileTongue;
    [NameAttribute("fi-rr-face-smile-upside-down")]
public static UIcons FaceSmileUpsideDown;
    [NameAttribute("fi-rr-face-smiling-hands")]
public static UIcons FaceSmilingHands;
    [NameAttribute("fi-rr-face-smirking")]
public static UIcons FaceSmirking;
    [NameAttribute("fi-rr-face-sunglasses")]
public static UIcons FaceSunglasses;
    [NameAttribute("fi-rr-face-sunglasses-alt")]
public static UIcons FaceSunglassesAlt;
    [NameAttribute("fi-rr-face-swear")]
public static UIcons FaceSwear;
    [NameAttribute("fi-rr-face-thermometer")]
public static UIcons FaceThermometer;
    [NameAttribute("fi-rr-face-thinking")]
public static UIcons FaceThinking;
    [NameAttribute("fi-rr-face-tissue")]
public static UIcons FaceTissue;
    [NameAttribute("fi-rr-face-tongue-money")]
public static UIcons FaceTongueMoney;
    [NameAttribute("fi-rr-face-tongue-sweat")]
public static UIcons FaceTongueSweat;
    [NameAttribute("fi-rr-face-unamused")]
public static UIcons FaceUnamused;
    [NameAttribute("fi-rr-face-viewfinder")]
public static UIcons FaceViewfinder;
    [NameAttribute("fi-rr-face-vomit")]
public static UIcons FaceVomit;
    [NameAttribute("fi-rr-face-weary")]
public static UIcons FaceWeary;
    [NameAttribute("fi-rr-face-woozy")]
public static UIcons FaceWoozy;
    [NameAttribute("fi-rr-face-worried")]
public static UIcons FaceWorried;
    [NameAttribute("fi-rr-face-zany")]
public static UIcons FaceZany;
    [NameAttribute("fi-rr-face-zipper")]
public static UIcons FaceZipper;
    [NameAttribute("fi-rr-fail")]
public static UIcons Fail;
    [NameAttribute("fi-rr-falafel")]
public static UIcons Falafel;
    [NameAttribute("fi-rr-family")]
public static UIcons Family;
    [NameAttribute("fi-rr-family-dress")]
public static UIcons FamilyDress;
    [NameAttribute("fi-rr-family-pants")]
public static UIcons FamilyPants;
    [NameAttribute("fi-rr-fan")]
public static UIcons Fan;
    [NameAttribute("fi-rr-fan-table")]
public static UIcons FanTable;
    [NameAttribute("fi-rr-farm")]
public static UIcons Farm;
    [NameAttribute("fi-rr-faucet")]
public static UIcons Faucet;
    [NameAttribute("fi-rr-faucet-drip")]
public static UIcons FaucetDrip;
    [NameAttribute("fi-rr-fax")]
public static UIcons Fax;
    [NameAttribute("fi-rr-feather")]
public static UIcons Feather;
    [NameAttribute("fi-rr-feather-pointed")]
public static UIcons FeatherPointed;
    [NameAttribute("fi-rr-features")]
public static UIcons Features;
    [NameAttribute("fi-rr-features-alt")]
public static UIcons FeaturesAlt;
    [NameAttribute("fi-rr-fee")]
public static UIcons Fee;
    [NameAttribute("fi-rr-fee-receipt")]
public static UIcons FeeReceipt;
    [NameAttribute("fi-rr-feedback")]
public static UIcons Feedback;
    [NameAttribute("fi-rr-feedback-alt")]
public static UIcons FeedbackAlt;
    [NameAttribute("fi-rr-feedback-cycle-loop")]
public static UIcons FeedbackCycleLoop;
    [NameAttribute("fi-rr-feedback-review")]
public static UIcons FeedbackReview;
    [NameAttribute("fi-rr-feedback-thumbs-down")]
public static UIcons FeedbackThumbsDown;
    [NameAttribute("fi-rr-female")]
public static UIcons Female;
    [NameAttribute("fi-rr-female-couple")]
public static UIcons FemaleCouple;
    [NameAttribute("fi-rr-fence")]
public static UIcons Fence;
    [NameAttribute("fi-rr-ferris-wheel")]
public static UIcons FerrisWheel;
    [NameAttribute("fi-rr-field-hockey")]
public static UIcons FieldHockey;
    [NameAttribute("fi-rr-fighter-jet")]
public static UIcons FighterJet;
    [NameAttribute("fi-rr-file")]
public static UIcons File;
    [NameAttribute("fi-rr-file-ai")]
public static UIcons FileAi;
    [NameAttribute("fi-rr-file-audio")]
public static UIcons FileAudio;
    [NameAttribute("fi-rr-file-binary")]
public static UIcons FileBinary;
    [NameAttribute("fi-rr-file-chart-line")]
public static UIcons FileChartLine;
    [NameAttribute("fi-rr-file-chart-pie")]
public static UIcons FileChartPie;
    [NameAttribute("fi-rr-file-circle-info")]
public static UIcons FileCircleInfo;
    [NameAttribute("fi-rr-file-cloud")]
public static UIcons FileCloud;
    [NameAttribute("fi-rr-file-code")]
public static UIcons FileCode;
    [NameAttribute("fi-rr-file-csv")]
public static UIcons FileCsv;
    [NameAttribute("fi-rr-file-download")]
public static UIcons FileDownload;
    [NameAttribute("fi-rr-file-edit")]
public static UIcons FileEdit;
    [NameAttribute("fi-rr-file-eps")]
public static UIcons FileEps;
    [NameAttribute("fi-rr-file-excel")]
public static UIcons FileExcel;
    [NameAttribute("fi-rr-file-exclamation")]
public static UIcons FileExclamation;
    [NameAttribute("fi-rr-file-export")]
public static UIcons FileExport;
    [NameAttribute("fi-rr-file-image")]
public static UIcons FileImage;
    [NameAttribute("fi-rr-file-import")]
public static UIcons FileImport;
    [NameAttribute("fi-rr-file-invoice")]
public static UIcons FileInvoice;
    [NameAttribute("fi-rr-file-invoice-dollar")]
public static UIcons FileInvoiceDollar;
    [NameAttribute("fi-rr-file-medical")]
public static UIcons FileMedical;
    [NameAttribute("fi-rr-file-medical-alt")]
public static UIcons FileMedicalAlt;
    [NameAttribute("fi-rr-file-minus")]
public static UIcons FileMinus;
    [NameAttribute("fi-rr-file-pdf")]
public static UIcons FilePdf;
    [NameAttribute("fi-rr-file-powerpoint")]
public static UIcons FilePowerpoint;
    [NameAttribute("fi-rr-file-prescription")]
public static UIcons FilePrescription;
    [NameAttribute("fi-rr-file-psd")]
public static UIcons FilePsd;
    [NameAttribute("fi-rr-file-signature")]
public static UIcons FileSignature;
    [NameAttribute("fi-rr-file-spreadsheet")]
public static UIcons FileSpreadsheet;
    [NameAttribute("fi-rr-file-upload")]
public static UIcons FileUpload;
    [NameAttribute("fi-rr-file-user")]
public static UIcons FileUser;
    [NameAttribute("fi-rr-file-video")]
public static UIcons FileVideo;
    [NameAttribute("fi-rr-file-word")]
public static UIcons FileWord;
    [NameAttribute("fi-rr-file-zipper")]
public static UIcons FileZipper;
    [NameAttribute("fi-rr-files-medical")]
public static UIcons FilesMedical;
    [NameAttribute("fi-rr-fill")]
public static UIcons Fill;
    [NameAttribute("fi-rr-film")]
public static UIcons Film;
    [NameAttribute("fi-rr-film-canister")]
public static UIcons FilmCanister;
    [NameAttribute("fi-rr-film-slash")]
public static UIcons FilmSlash;
    [NameAttribute("fi-rr-films")]
public static UIcons Films;
    [NameAttribute("fi-rr-filter")]
public static UIcons Filter;
    [NameAttribute("fi-rr-filter-list")]
public static UIcons FilterList;
    [NameAttribute("fi-rr-filter-slash")]
public static UIcons FilterSlash;
    [NameAttribute("fi-rr-filters")]
public static UIcons Filters;
    [NameAttribute("fi-rr-fingerprint")]
public static UIcons Fingerprint;
    [NameAttribute("fi-rr-fingerprint-security-risk")]
public static UIcons FingerprintSecurityRisk;
    [NameAttribute("fi-rr-fire-burner")]
public static UIcons FireBurner;
    [NameAttribute("fi-rr-fire-extinguisher")]
public static UIcons FireExtinguisher;
    [NameAttribute("fi-rr-fire-flame-curved")]
public static UIcons FireFlameCurved;
    [NameAttribute("fi-rr-fire-flame-simple")]
public static UIcons FireFlameSimple;
    [NameAttribute("fi-rr-fire-hydrant")]
public static UIcons FireHydrant;
    [NameAttribute("fi-rr-fire-smoke")]
public static UIcons FireSmoke;
    [NameAttribute("fi-rr-fireplace")]
public static UIcons Fireplace;
    [NameAttribute("fi-rr-first")]
public static UIcons First;
    [NameAttribute("fi-rr-first-award")]
public static UIcons FirstAward;
    [NameAttribute("fi-rr-first-laurel")]
public static UIcons FirstLaurel;
    [NameAttribute("fi-rr-first-medal")]
public static UIcons FirstMedal;
    [NameAttribute("fi-rr-fish")]
public static UIcons Fish;
    [NameAttribute("fi-rr-fish-bones")]
public static UIcons FishBones;
    [NameAttribute("fi-rr-fish-cooked")]
public static UIcons FishCooked;
    [NameAttribute("fi-rr-fishing-rod")]
public static UIcons FishingRod;
    [NameAttribute("fi-rr-fist-move")]
public static UIcons FistMove;
    [NameAttribute("fi-rr-flag")]
public static UIcons Flag;
    [NameAttribute("fi-rr-flag-alt")]
public static UIcons FlagAlt;
    [NameAttribute("fi-rr-flag-checkered")]
public static UIcons FlagCheckered;
    [NameAttribute("fi-rr-flag-usa")]
public static UIcons FlagUsa;
    [NameAttribute("fi-rr-flame")]
public static UIcons Flame;
    [NameAttribute("fi-rr-flashlight")]
public static UIcons Flashlight;
    [NameAttribute("fi-rr-flask")]
public static UIcons Flask;
    [NameAttribute("fi-rr-flask-gear")]
public static UIcons FlaskGear;
    [NameAttribute("fi-rr-flask-poison")]
public static UIcons FlaskPoison;
    [NameAttribute("fi-rr-flask-potion")]
public static UIcons FlaskPotion;
    [NameAttribute("fi-rr-flatbread")]
public static UIcons Flatbread;
    [NameAttribute("fi-rr-flatbread-stuffed")]
public static UIcons FlatbreadStuffed;
    [NameAttribute("fi-rr-flip-horizontal")]
public static UIcons FlipHorizontal;
    [NameAttribute("fi-rr-floor")]
public static UIcons Floor;
    [NameAttribute("fi-rr-floor-alt")]
public static UIcons FloorAlt;
    [NameAttribute("fi-rr-floor-layer")]
public static UIcons FloorLayer;
    [NameAttribute("fi-rr-floppy-disk-circle-arrow-right")]
public static UIcons FloppyDiskCircleArrowRight;
    [NameAttribute("fi-rr-floppy-disk-circle-xmark")]
public static UIcons FloppyDiskCircleXmark;
    [NameAttribute("fi-rr-floppy-disk-pen")]
public static UIcons FloppyDiskPen;
    [NameAttribute("fi-rr-floppy-disks")]
public static UIcons FloppyDisks;
    [NameAttribute("fi-rr-florin-sign")]
public static UIcons FlorinSign;
    [NameAttribute("fi-rr-flower")]
public static UIcons Flower;
    [NameAttribute("fi-rr-flower-bouquet")]
public static UIcons FlowerBouquet;
    [NameAttribute("fi-rr-flower-butterfly")]
public static UIcons FlowerButterfly;
    [NameAttribute("fi-rr-flower-daffodil")]
public static UIcons FlowerDaffodil;
    [NameAttribute("fi-rr-flower-tulip")]
public static UIcons FlowerTulip;
    [NameAttribute("fi-rr-flushed")]
public static UIcons Flushed;
    [NameAttribute("fi-rr-flushed-face")]
public static UIcons FlushedFace;
    [NameAttribute("fi-rr-flute")]
public static UIcons Flute;
    [NameAttribute("fi-rr-flux-capacitor")]
public static UIcons FluxCapacitor;
    [NameAttribute("fi-rr-fly-insect")]
public static UIcons FlyInsect;
    [NameAttribute("fi-rr-flying-disc")]
public static UIcons FlyingDisc;
    [NameAttribute("fi-rr-fog")]
public static UIcons Fog;
    [NameAttribute("fi-rr-folder")]
public static UIcons Folder;
    [NameAttribute("fi-rr-folder-download")]
public static UIcons FolderDownload;
    [NameAttribute("fi-rr-folder-fire")]
public static UIcons FolderFire;
    [NameAttribute("fi-rr-folder-minus")]
public static UIcons FolderMinus;
    [NameAttribute("fi-rr-folder-open")]
public static UIcons FolderOpen;
    [NameAttribute("fi-rr-folder-times")]
public static UIcons FolderTimes;
    [NameAttribute("fi-rr-folder-tree")]
public static UIcons FolderTree;
    [NameAttribute("fi-rr-folder-upload")]
public static UIcons FolderUpload;
    [NameAttribute("fi-rr-folder-xmark")]
public static UIcons FolderXmark;
    [NameAttribute("fi-rr-folders")]
public static UIcons Folders;
    [NameAttribute("fi-rr-follow-folder")]
public static UIcons FollowFolder;
    [NameAttribute("fi-rr-followcollection")]
public static UIcons Followcollection;
    [NameAttribute("fi-rr-following")]
public static UIcons Following;
    [NameAttribute("fi-rr-fondue-pot")]
public static UIcons FonduePot;
    [NameAttribute("fi-rr-football")]
public static UIcons Football;
    [NameAttribute("fi-rr-foreign-language-audio")]
public static UIcons ForeignLanguageAudio;
    [NameAttribute("fi-rr-fork")]
public static UIcons Fork;
    [NameAttribute("fi-rr-forklift")]
public static UIcons Forklift;
    [NameAttribute("fi-rr-form")]
public static UIcons Form;
    [NameAttribute("fi-rr-fort")]
public static UIcons Fort;
    [NameAttribute("fi-rr-forward")]
public static UIcons Forward;
    [NameAttribute("fi-rr-forward-fast")]
public static UIcons ForwardFast;
    [NameAttribute("fi-rr-fox")]
public static UIcons Fox;
    [NameAttribute("fi-rr-frame")]
public static UIcons Frame;
    [NameAttribute("fi-rr-franc-sign")]
public static UIcons FrancSign;
    [NameAttribute("fi-rr-free")]
public static UIcons Free;
    [NameAttribute("fi-rr-free-delivery")]
public static UIcons FreeDelivery;
    [NameAttribute("fi-rr-french-fries")]
public static UIcons FrenchFries;
    [NameAttribute("fi-rr-friday")]
public static UIcons Friday;
    [NameAttribute("fi-rr-frog")]
public static UIcons Frog;
    [NameAttribute("fi-rr-frown")]
public static UIcons Frown;
    [NameAttribute("fi-rr-ftp")]
public static UIcons Ftp;
    [NameAttribute("fi-rr-fuel-gauge")]
public static UIcons FuelGauge;
    [NameAttribute("fi-rr-function")]
public static UIcons Function;
    [NameAttribute("fi-rr-function-process")]
public static UIcons FunctionProcess;
    [NameAttribute("fi-rr-function-square")]
public static UIcons FunctionSquare;
    [NameAttribute("fi-rr-funnel-dollar")]
public static UIcons FunnelDollar;
    [NameAttribute("fi-rr-g")]
public static UIcons G;
    [NameAttribute("fi-rr-galaxy")]
public static UIcons Galaxy;
    [NameAttribute("fi-rr-galaxy-alt")]
public static UIcons GalaxyAlt;
    [NameAttribute("fi-rr-galaxy-planet")]
public static UIcons GalaxyPlanet;
    [NameAttribute("fi-rr-galaxy-star")]
public static UIcons GalaxyStar;
    [NameAttribute("fi-rr-gallery")]
public static UIcons Gallery;
    [NameAttribute("fi-rr-gallery-thumbnails")]
public static UIcons GalleryThumbnails;
    [NameAttribute("fi-rr-game")]
public static UIcons Game;
    [NameAttribute("fi-rr-game-board-alt")]
public static UIcons GameBoardAlt;
    [NameAttribute("fi-rr-gamepad")]
public static UIcons Gamepad;
    [NameAttribute("fi-rr-games")]
public static UIcons Games;
    [NameAttribute("fi-rr-garage")]
public static UIcons Garage;
    [NameAttribute("fi-rr-garage-car")]
public static UIcons GarageCar;
    [NameAttribute("fi-rr-garage-open")]
public static UIcons GarageOpen;
    [NameAttribute("fi-rr-garlic")]
public static UIcons Garlic;
    [NameAttribute("fi-rr-garlic-alt")]
public static UIcons GarlicAlt;
    [NameAttribute("fi-rr-gas-pump")]
public static UIcons GasPump;
    [NameAttribute("fi-rr-gas-pump-alt")]
public static UIcons GasPumpAlt;
    [NameAttribute("fi-rr-gas-pump-slash")]
public static UIcons GasPumpSlash;
    [NameAttribute("fi-rr-gauge-circle-bolt")]
public static UIcons GaugeCircleBolt;
    [NameAttribute("fi-rr-gauge-circle-minus")]
public static UIcons GaugeCircleMinus;
    [NameAttribute("fi-rr-gauge-circle-plus")]
public static UIcons GaugeCirclePlus;
    [NameAttribute("fi-rr-gavel")]
public static UIcons Gavel;
    [NameAttribute("fi-rr-gay-couple")]
public static UIcons GayCouple;
    [NameAttribute("fi-rr-gears")]
public static UIcons Gears;
    [NameAttribute("fi-rr-gem")]
public static UIcons Gem;
    [NameAttribute("fi-rr-general")]
public static UIcons General;
    [NameAttribute("fi-rr-ghost")]
public static UIcons Ghost;
    [NameAttribute("fi-rr-gif")]
public static UIcons Gif;
    [NameAttribute("fi-rr-gif-square")]
public static UIcons GifSquare;
    [NameAttribute("fi-rr-gift")]
public static UIcons Gift;
    [NameAttribute("fi-rr-gift-box-benefits")]
public static UIcons GiftBoxBenefits;
    [NameAttribute("fi-rr-gift-card")]
public static UIcons GiftCard;
    [NameAttribute("fi-rr-gifts")]
public static UIcons Gifts;
    [NameAttribute("fi-rr-gingerbread-man")]
public static UIcons GingerbreadMan;
    [NameAttribute("fi-rr-glass")]
public static UIcons Glass;
    [NameAttribute("fi-rr-glass-champagne")]
public static UIcons GlassChampagne;
    [NameAttribute("fi-rr-glass-cheers")]
public static UIcons GlassCheers;
    [NameAttribute("fi-rr-glass-citrus")]
public static UIcons GlassCitrus;
    [NameAttribute("fi-rr-glass-empty")]
public static UIcons GlassEmpty;
    [NameAttribute("fi-rr-glass-half")]
public static UIcons GlassHalf;
    [NameAttribute("fi-rr-glass-water-droplet")]
public static UIcons GlassWaterDroplet;
    [NameAttribute("fi-rr-glass-whiskey")]
public static UIcons GlassWhiskey;
    [NameAttribute("fi-rr-glass-whiskey-rocks")]
public static UIcons GlassWhiskeyRocks;
    [NameAttribute("fi-rr-glasses")]
public static UIcons Glasses;
    [NameAttribute("fi-rr-globe")]
public static UIcons Globe;
    [NameAttribute("fi-rr-globe-alt")]
public static UIcons GlobeAlt;
    [NameAttribute("fi-rr-globe-pointer")]
public static UIcons GlobePointer;
    [NameAttribute("fi-rr-globe-snow")]
public static UIcons GlobeSnow;
    [NameAttribute("fi-rr-goal-net")]
public static UIcons GoalNet;
    [NameAttribute("fi-rr-golf")]
public static UIcons Golf;
    [NameAttribute("fi-rr-golf-ball")]
public static UIcons GolfBall;
    [NameAttribute("fi-rr-golf-club")]
public static UIcons GolfClub;
    [NameAttribute("fi-rr-golf-hole")]
public static UIcons GolfHole;
    [NameAttribute("fi-rr-gopuram")]
public static UIcons Gopuram;
    [NameAttribute("fi-rr-government-budget")]
public static UIcons GovernmentBudget;
    [NameAttribute("fi-rr-government-flag")]
public static UIcons GovernmentFlag;
    [NameAttribute("fi-rr-government-user")]
public static UIcons GovernmentUser;
    [NameAttribute("fi-rr-gps-navigation")]
public static UIcons GpsNavigation;
    [NameAttribute("fi-rr-graduation-cap")]
public static UIcons GraduationCap;
    [NameAttribute("fi-rr-gramophone")]
public static UIcons Gramophone;
    [NameAttribute("fi-rr-grape")]
public static UIcons Grape;
    [NameAttribute("fi-rr-graph-curve")]
public static UIcons GraphCurve;
    [NameAttribute("fi-rr-graphic-style")]
public static UIcons GraphicStyle;
    [NameAttribute("fi-rr-graphic-tablet")]
public static UIcons GraphicTablet;
    [NameAttribute("fi-rr-grate")]
public static UIcons Grate;
    [NameAttribute("fi-rr-grate-droplet")]
public static UIcons GrateDroplet;
    [NameAttribute("fi-rr-greater-than")]
public static UIcons GreaterThan;
    [NameAttribute("fi-rr-greater-than-equal")]
public static UIcons GreaterThanEqual;
    [NameAttribute("fi-rr-greek-helmet")]
public static UIcons GreekHelmet;
    [NameAttribute("fi-rr-grid")]
public static UIcons Grid;
    [NameAttribute("fi-rr-grid-alt")]
public static UIcons GridAlt;
    [NameAttribute("fi-rr-grid-dividers")]
public static UIcons GridDividers;
    [NameAttribute("fi-rr-grill")]
public static UIcons Grill;
    [NameAttribute("fi-rr-grill-hot-alt")]
public static UIcons GrillHotAlt;
    [NameAttribute("fi-rr-grimace")]
public static UIcons Grimace;
    [NameAttribute("fi-rr-grin")]
public static UIcons Grin;
    [NameAttribute("fi-rr-grin-alt")]
public static UIcons GrinAlt;
    [NameAttribute("fi-rr-grin-beam")]
public static UIcons GrinBeam;
    [NameAttribute("fi-rr-grin-beam-sweat")]
public static UIcons GrinBeamSweat;
    [NameAttribute("fi-rr-grin-hearts")]
public static UIcons GrinHearts;
    [NameAttribute("fi-rr-grin-squint")]
public static UIcons GrinSquint;
    [NameAttribute("fi-rr-grin-squint-tears")]
public static UIcons GrinSquintTears;
    [NameAttribute("fi-rr-grin-stars")]
public static UIcons GrinStars;
    [NameAttribute("fi-rr-grin-tears")]
public static UIcons GrinTears;
    [NameAttribute("fi-rr-grin-tongue")]
public static UIcons GrinTongue;
    [NameAttribute("fi-rr-grin-tongue-squint")]
public static UIcons GrinTongueSquint;
    [NameAttribute("fi-rr-grin-tongue-wink")]
public static UIcons GrinTongueWink;
    [NameAttribute("fi-rr-grin-wink")]
public static UIcons GrinWink;
    [NameAttribute("fi-rr-grip-dots")]
public static UIcons GripDots;
    [NameAttribute("fi-rr-grip-dots-vertical")]
public static UIcons GripDotsVertical;
    [NameAttribute("fi-rr-grip-horizontal")]
public static UIcons GripHorizontal;
    [NameAttribute("fi-rr-grip-lines")]
public static UIcons GripLines;
    [NameAttribute("fi-rr-grip-lines-vertical")]
public static UIcons GripLinesVertical;
    [NameAttribute("fi-rr-grip-vertical")]
public static UIcons GripVertical;
    [NameAttribute("fi-rr-grocery-bag")]
public static UIcons GroceryBag;
    [NameAttribute("fi-rr-grocery-basket")]
public static UIcons GroceryBasket;
    [NameAttribute("fi-rr-group-arrows-rotate")]
public static UIcons GroupArrowsRotate;
    [NameAttribute("fi-rr-group-call")]
public static UIcons GroupCall;
    [NameAttribute("fi-rr-group-community-social-media")]
public static UIcons GroupCommunitySocialMedia;
    [NameAttribute("fi-rr-growth-chart-invest")]
public static UIcons GrowthChartInvest;
    [NameAttribute("fi-rr-guarani-sign")]
public static UIcons GuaraniSign;
    [NameAttribute("fi-rr-guide")]
public static UIcons Guide;
    [NameAttribute("fi-rr-guide-alt")]
public static UIcons GuideAlt;
    [NameAttribute("fi-rr-guitar")]
public static UIcons Guitar;
    [NameAttribute("fi-rr-guitar-electric")]
public static UIcons GuitarElectric;
    [NameAttribute("fi-rr-guitars")]
public static UIcons Guitars;
    [NameAttribute("fi-rr-gun-squirt")]
public static UIcons GunSquirt;
    [NameAttribute("fi-rr-gym")]
public static UIcons Gym;
    [NameAttribute("fi-rr-h")]
public static UIcons H;
    [NameAttribute("fi-rr-h-square")]
public static UIcons HSquare;
    [NameAttribute("fi-rr-h1")]
public static UIcons H1;
    [NameAttribute("fi-rr-h2")]
public static UIcons H2;
    [NameAttribute("fi-rr-h3")]
public static UIcons H3;
    [NameAttribute("fi-rr-h4")]
public static UIcons H4;
    [NameAttribute("fi-rr-hair-clipper")]
public static UIcons HairClipper;
    [NameAttribute("fi-rr-hamburger")]
public static UIcons Hamburger;
    [NameAttribute("fi-rr-hamburger-soda")]
public static UIcons HamburgerSoda;
    [NameAttribute("fi-rr-hammer")]
public static UIcons Hammer;
    [NameAttribute("fi-rr-hammer-crash")]
public static UIcons HammerCrash;
    [NameAttribute("fi-rr-hammer-war")]
public static UIcons HammerWar;
    [NameAttribute("fi-rr-hamsa")]
public static UIcons Hamsa;
    [NameAttribute("fi-rr-hand-back-fist")]
public static UIcons HandBackFist;
    [NameAttribute("fi-rr-hand-back-point-down")]
public static UIcons HandBackPointDown;
    [NameAttribute("fi-rr-hand-back-point-left")]
public static UIcons HandBackPointLeft;
    [NameAttribute("fi-rr-hand-back-point-ribbon")]
public static UIcons HandBackPointRibbon;
    [NameAttribute("fi-rr-hand-back-point-right")]
public static UIcons HandBackPointRight;
    [NameAttribute("fi-rr-hand-bill")]
public static UIcons HandBill;
    [NameAttribute("fi-rr-hand-dots")]
public static UIcons HandDots;
    [NameAttribute("fi-rr-hand-fingers-crossed")]
public static UIcons HandFingersCrossed;
    [NameAttribute("fi-rr-hand-fist")]
public static UIcons HandFist;
    [NameAttribute("fi-rr-hand-heart")]
public static UIcons HandHeart;
    [NameAttribute("fi-rr-hand-holding-box")]
public static UIcons HandHoldingBox;
    [NameAttribute("fi-rr-hand-holding-droplet")]
public static UIcons HandHoldingDroplet;
    [NameAttribute("fi-rr-hand-holding-heart")]
public static UIcons HandHoldingHeart;
    [NameAttribute("fi-rr-hand-holding-magic")]
public static UIcons HandHoldingMagic;
    [NameAttribute("fi-rr-hand-holding-medical")]
public static UIcons HandHoldingMedical;
    [NameAttribute("fi-rr-hand-holding-seeding")]
public static UIcons HandHoldingSeeding;
    [NameAttribute("fi-rr-hand-holding-seedling")]
public static UIcons HandHoldingSeedling;
    [NameAttribute("fi-rr-hand-holding-skull")]
public static UIcons HandHoldingSkull;
    [NameAttribute("fi-rr-hand-holding-usd")]
public static UIcons HandHoldingUsd;
    [NameAttribute("fi-rr-hand-holding-water")]
public static UIcons HandHoldingWater;
    [NameAttribute("fi-rr-hand-horns")]
public static UIcons HandHorns;
    [NameAttribute("fi-rr-hand-lizard")]
public static UIcons HandLizard;
    [NameAttribute("fi-rr-hand-love")]
public static UIcons HandLove;
    [NameAttribute("fi-rr-hand-middle-finger")]
public static UIcons HandMiddleFinger;
    [NameAttribute("fi-rr-hand-paper")]
public static UIcons HandPaper;
    [NameAttribute("fi-rr-hand-peace")]
public static UIcons HandPeace;
    [NameAttribute("fi-rr-hand-point-ribbon")]
public static UIcons HandPointRibbon;
    [NameAttribute("fi-rr-hand-scissors")]
public static UIcons HandScissors;
    [NameAttribute("fi-rr-hand-sparkles")]
public static UIcons HandSparkles;
    [NameAttribute("fi-rr-hand-spock")]
public static UIcons HandSpock;
    [NameAttribute("fi-rr-hand-wave")]
public static UIcons HandWave;
    [NameAttribute("fi-rr-handmade")]
public static UIcons Handmade;
    [NameAttribute("fi-rr-hands-bubbles")]
public static UIcons HandsBubbles;
    [NameAttribute("fi-rr-hands-clapping")]
public static UIcons HandsClapping;
    [NameAttribute("fi-rr-hands-heart")]
public static UIcons HandsHeart;
    [NameAttribute("fi-rr-hands-holding")]
public static UIcons HandsHolding;
    [NameAttribute("fi-rr-hands-holding-diamond")]
public static UIcons HandsHoldingDiamond;
    [NameAttribute("fi-rr-hands-usd")]
public static UIcons HandsUsd;
    [NameAttribute("fi-rr-handshake")]
public static UIcons Handshake;
    [NameAttribute("fi-rr-handshake-angle")]
public static UIcons HandshakeAngle;
    [NameAttribute("fi-rr-handshake-deal-loan")]
public static UIcons HandshakeDealLoan;
    [NameAttribute("fi-rr-handshake-house")]
public static UIcons HandshakeHouse;
    [NameAttribute("fi-rr-handshake-simple-slash")]
public static UIcons HandshakeSimpleSlash;
    [NameAttribute("fi-rr-handshake-trust")]
public static UIcons HandshakeTrust;
    [NameAttribute("fi-rr-happy")]
public static UIcons Happy;
    [NameAttribute("fi-rr-hard-hat")]
public static UIcons HardHat;
    [NameAttribute("fi-rr-hashtag")]
public static UIcons Hashtag;
    [NameAttribute("fi-rr-hashtag-lock")]
public static UIcons HashtagLock;
    [NameAttribute("fi-rr-hat-beach")]
public static UIcons HatBeach;
    [NameAttribute("fi-rr-hat-birthday")]
public static UIcons HatBirthday;
    [NameAttribute("fi-rr-hat-chef")]
public static UIcons HatChef;
    [NameAttribute("fi-rr-hat-cowboy")]
public static UIcons HatCowboy;
    [NameAttribute("fi-rr-hat-cowboy-side")]
public static UIcons HatCowboySide;
    [NameAttribute("fi-rr-hat-santa")]
public static UIcons HatSanta;
    [NameAttribute("fi-rr-hat-winter")]
public static UIcons HatWinter;
    [NameAttribute("fi-rr-hat-witch")]
public static UIcons HatWitch;
    [NameAttribute("fi-rr-hat-wizard")]
public static UIcons HatWizard;
    [NameAttribute("fi-rr-hdd")]
public static UIcons Hdd;
    [NameAttribute("fi-rr-head-side")]
public static UIcons HeadSide;
    [NameAttribute("fi-rr-head-side-brain")]
public static UIcons HeadSideBrain;
    [NameAttribute("fi-rr-head-side-cough")]
public static UIcons HeadSideCough;
    [NameAttribute("fi-rr-head-side-cough-slash")]
public static UIcons HeadSideCoughSlash;
    [NameAttribute("fi-rr-head-side-headphones")]
public static UIcons HeadSideHeadphones;
    [NameAttribute("fi-rr-head-side-heart")]
public static UIcons HeadSideHeart;
    [NameAttribute("fi-rr-head-side-mask")]
public static UIcons HeadSideMask;
    [NameAttribute("fi-rr-head-side-medical")]
public static UIcons HeadSideMedical;
    [NameAttribute("fi-rr-head-side-thinking")]
public static UIcons HeadSideThinking;
    [NameAttribute("fi-rr-head-side-virus")]
public static UIcons HeadSideVirus;
    [NameAttribute("fi-rr-head-vr")]
public static UIcons HeadVr;
    [NameAttribute("fi-rr-heading")]
public static UIcons Heading;
    [NameAttribute("fi-rr-headphones")]
public static UIcons Headphones;
    [NameAttribute("fi-rr-headset")]
public static UIcons Headset;
    [NameAttribute("fi-rr-heart")]
public static UIcons Heart;
    [NameAttribute("fi-rr-heart-arrow")]
public static UIcons HeartArrow;
    [NameAttribute("fi-rr-heart-brain")]
public static UIcons HeartBrain;
    [NameAttribute("fi-rr-heart-crack")]
public static UIcons HeartCrack;
    [NameAttribute("fi-rr-heart-half")]
public static UIcons HeartHalf;
    [NameAttribute("fi-rr-heart-half-stroke")]
public static UIcons HeartHalfStroke;
    [NameAttribute("fi-rr-heart-health-muscle")]
public static UIcons HeartHealthMuscle;
    [NameAttribute("fi-rr-heart-lock")]
public static UIcons HeartLock;
    [NameAttribute("fi-rr-heart-partner-handshake")]
public static UIcons HeartPartnerHandshake;
    [NameAttribute("fi-rr-heart-rate")]
public static UIcons HeartRate;
    [NameAttribute("fi-rr-heart-slash")]
public static UIcons HeartSlash;
    [NameAttribute("fi-rr-heart-upside-down")]
public static UIcons HeartUpsideDown;
    [NameAttribute("fi-rr-heat")]
public static UIcons Heat;
    [NameAttribute("fi-rr-helicopter-side")]
public static UIcons HelicopterSide;
    [NameAttribute("fi-rr-helmet-battle")]
public static UIcons HelmetBattle;
    [NameAttribute("fi-rr-hexagon")]
public static UIcons Hexagon;
    [NameAttribute("fi-rr-hexagon-check")]
public static UIcons HexagonCheck;
    [NameAttribute("fi-rr-hexagon-divide")]
public static UIcons HexagonDivide;
    [NameAttribute("fi-rr-hexagon-exclamation")]
public static UIcons HexagonExclamation;
    [NameAttribute("fi-rr-high-definition")]
public static UIcons HighDefinition;
    [NameAttribute("fi-rr-high-five")]
public static UIcons HighFive;
    [NameAttribute("fi-rr-high-five-celebration-yes")]
public static UIcons HighFiveCelebrationYes;
    [NameAttribute("fi-rr-highlighter")]
public static UIcons Highlighter;
    [NameAttribute("fi-rr-highlighter-line")]
public static UIcons HighlighterLine;
    [NameAttribute("fi-rr-hiking")]
public static UIcons Hiking;
    [NameAttribute("fi-rr-hippo")]
public static UIcons Hippo;
    [NameAttribute("fi-rr-hockey-mask")]
public static UIcons HockeyMask;
    [NameAttribute("fi-rr-hockey-puck")]
public static UIcons HockeyPuck;
    [NameAttribute("fi-rr-hockey-stick-puck")]
public static UIcons HockeyStickPuck;
    [NameAttribute("fi-rr-hockey-sticks")]
public static UIcons HockeySticks;
    [NameAttribute("fi-rr-holding-hand-gear")]
public static UIcons HoldingHandGear;
    [NameAttribute("fi-rr-holding-hand-revenue")]
public static UIcons HoldingHandRevenue;
    [NameAttribute("fi-rr-holly-berry")]
public static UIcons HollyBerry;
    [NameAttribute("fi-rr-home")]
public static UIcons Home;
    [NameAttribute("fi-rr-home-heart")]
public static UIcons HomeHeart;
    [NameAttribute("fi-rr-home-location")]
public static UIcons HomeLocation;
    [NameAttribute("fi-rr-home-location-alt")]
public static UIcons HomeLocationAlt;
    [NameAttribute("fi-rr-honey-pot")]
public static UIcons HoneyPot;
    [NameAttribute("fi-rr-hood-cloak")]
public static UIcons HoodCloak;
    [NameAttribute("fi-rr-horizontal-rule")]
public static UIcons HorizontalRule;
    [NameAttribute("fi-rr-horse")]
public static UIcons Horse;
    [NameAttribute("fi-rr-horse-head")]
public static UIcons HorseHead;
    [NameAttribute("fi-rr-horse-saddle")]
public static UIcons HorseSaddle;
    [NameAttribute("fi-rr-horseshoe")]
public static UIcons Horseshoe;
    [NameAttribute("fi-rr-horseshoe-broken")]
public static UIcons HorseshoeBroken;
    [NameAttribute("fi-rr-hose")]
public static UIcons Hose;
    [NameAttribute("fi-rr-hose-reel")]
public static UIcons HoseReel;
    [NameAttribute("fi-rr-hospital")]
public static UIcons Hospital;
    [NameAttribute("fi-rr-hospital-symbol")]
public static UIcons HospitalSymbol;
    [NameAttribute("fi-rr-hospital-user")]
public static UIcons HospitalUser;
    [NameAttribute("fi-rr-hospitals")]
public static UIcons Hospitals;
    [NameAttribute("fi-rr-hot-tub")]
public static UIcons HotTub;
    [NameAttribute("fi-rr-hotdog")]
public static UIcons Hotdog;
    [NameAttribute("fi-rr-hotel")]
public static UIcons Hotel;
    [NameAttribute("fi-rr-hourglass")]
public static UIcons Hourglass;
    [NameAttribute("fi-rr-hourglass-end")]
public static UIcons HourglassEnd;
    [NameAttribute("fi-rr-hourglass-start")]
public static UIcons HourglassStart;
    [NameAttribute("fi-rr-house-blank")]
public static UIcons HouseBlank;
    [NameAttribute("fi-rr-house-building")]
public static UIcons HouseBuilding;
    [NameAttribute("fi-rr-house-chimney")]
public static UIcons HouseChimney;
    [NameAttribute("fi-rr-house-chimney-blank")]
public static UIcons HouseChimneyBlank;
    [NameAttribute("fi-rr-house-chimney-crack")]
public static UIcons HouseChimneyCrack;
    [NameAttribute("fi-rr-house-chimney-heart")]
public static UIcons HouseChimneyHeart;
    [NameAttribute("fi-rr-house-chimney-medical")]
public static UIcons HouseChimneyMedical;
    [NameAttribute("fi-rr-house-chimney-user")]
public static UIcons HouseChimneyUser;
    [NameAttribute("fi-rr-house-chimney-window")]
public static UIcons HouseChimneyWindow;
    [NameAttribute("fi-rr-house-circle-check")]
public static UIcons HouseCircleCheck;
    [NameAttribute("fi-rr-house-circle-exclamation")]
public static UIcons HouseCircleExclamation;
    [NameAttribute("fi-rr-house-circle-xmark")]
public static UIcons HouseCircleXmark;
    [NameAttribute("fi-rr-house-crack")]
public static UIcons HouseCrack;
    [NameAttribute("fi-rr-house-crack-alt")]
public static UIcons HouseCrackAlt;
    [NameAttribute("fi-rr-house-day")]
public static UIcons HouseDay;
    [NameAttribute("fi-rr-house-fire")]
public static UIcons HouseFire;
    [NameAttribute("fi-rr-house-flag")]
public static UIcons HouseFlag;
    [NameAttribute("fi-rr-house-flood")]
public static UIcons HouseFlood;
    [NameAttribute("fi-rr-house-laptop")]
public static UIcons HouseLaptop;
    [NameAttribute("fi-rr-house-leave")]
public static UIcons HouseLeave;
    [NameAttribute("fi-rr-house-lock")]
public static UIcons HouseLock;
    [NameAttribute("fi-rr-house-medical")]
public static UIcons HouseMedical;
    [NameAttribute("fi-rr-house-night")]
public static UIcons HouseNight;
    [NameAttribute("fi-rr-house-return")]
public static UIcons HouseReturn;
    [NameAttribute("fi-rr-house-signal")]
public static UIcons HouseSignal;
    [NameAttribute("fi-rr-house-tree")]
public static UIcons HouseTree;
    [NameAttribute("fi-rr-house-tsunami")]
public static UIcons HouseTsunami;
    [NameAttribute("fi-rr-house-turret")]
public static UIcons HouseTurret;
    [NameAttribute("fi-rr-house-user")]
public static UIcons HouseUser;
    [NameAttribute("fi-rr-house-window")]
public static UIcons HouseWindow;
    [NameAttribute("fi-rr-hr")]
public static UIcons Hr;
    [NameAttribute("fi-rr-hr-group")]
public static UIcons HrGroup;
    [NameAttribute("fi-rr-hr-person")]
public static UIcons HrPerson;
    [NameAttribute("fi-rr-hryvnia")]
public static UIcons Hryvnia;
    [NameAttribute("fi-rr-humidity")]
public static UIcons Humidity;
    [NameAttribute("fi-rr-hundred-points")]
public static UIcons HundredPoints;
    [NameAttribute("fi-rr-hurricane")]
public static UIcons Hurricane;
    [NameAttribute("fi-rr-i")]
public static UIcons I;
    [NameAttribute("fi-rr-ice-cream")]
public static UIcons IceCream;
    [NameAttribute("fi-rr-ice-skate")]
public static UIcons IceSkate;
    [NameAttribute("fi-rr-icicles")]
public static UIcons Icicles;
    [NameAttribute("fi-rr-icon-star")]
public static UIcons IconStar;
    [NameAttribute("fi-rr-id-badge")]
public static UIcons IdBadge;
    [NameAttribute("fi-rr-id-card-clip-alt")]
public static UIcons IdCardClipAlt;
    [NameAttribute("fi-rr-igloo")]
public static UIcons Igloo;
    [NameAttribute("fi-rr-image-slash")]
public static UIcons ImageSlash;
    [NameAttribute("fi-rr-images")]
public static UIcons Images;
    [NameAttribute("fi-rr-images-user")]
public static UIcons ImagesUser;
    [NameAttribute("fi-rr-improve-user")]
public static UIcons ImproveUser;
    [NameAttribute("fi-rr-inbox")]
public static UIcons Inbox;
    [NameAttribute("fi-rr-inbox-full")]
public static UIcons InboxFull;
    [NameAttribute("fi-rr-inbox-in")]
public static UIcons InboxIn;
    [NameAttribute("fi-rr-inbox-out")]
public static UIcons InboxOut;
    [NameAttribute("fi-rr-inboxes")]
public static UIcons Inboxes;
    [NameAttribute("fi-rr-incense-sticks-yoga")]
public static UIcons IncenseSticksYoga;
    [NameAttribute("fi-rr-incognito")]
public static UIcons Incognito;
    [NameAttribute("fi-rr-indent")]
public static UIcons Indent;
    [NameAttribute("fi-rr-indian-rupee-sign")]
public static UIcons IndianRupeeSign;
    [NameAttribute("fi-rr-industry-alt")]
public static UIcons IndustryAlt;
    [NameAttribute("fi-rr-industry-windows")]
public static UIcons IndustryWindows;
    [NameAttribute("fi-rr-infinity")]
public static UIcons Infinity;
    [NameAttribute("fi-rr-info")]
public static UIcons Info;
    [NameAttribute("fi-rr-info-guide")]
public static UIcons InfoGuide;
    [NameAttribute("fi-rr-information")]
public static UIcons Information;
    [NameAttribute("fi-rr-inhaler")]
public static UIcons Inhaler;
    [NameAttribute("fi-rr-input-numeric")]
public static UIcons InputNumeric;
    [NameAttribute("fi-rr-input-pipe")]
public static UIcons InputPipe;
    [NameAttribute("fi-rr-input-text")]
public static UIcons InputText;
    [NameAttribute("fi-rr-insert")]
public static UIcons Insert;
    [NameAttribute("fi-rr-insert-alt")]
public static UIcons InsertAlt;
    [NameAttribute("fi-rr-insert-arrows")]
public static UIcons InsertArrows;
    [NameAttribute("fi-rr-insert-button-circle")]
public static UIcons InsertButtonCircle;
    [NameAttribute("fi-rr-insert-credit-card")]
public static UIcons InsertCreditCard;
    [NameAttribute("fi-rr-insert-square")]
public static UIcons InsertSquare;
    [NameAttribute("fi-rr-insight")]
public static UIcons Insight;
    [NameAttribute("fi-rr-insight-alt")]
public static UIcons InsightAlt;
    [NameAttribute("fi-rr-insight-head")]
public static UIcons InsightHead;
    [NameAttribute("fi-rr-integral")]
public static UIcons Integral;
    [NameAttribute("fi-rr-interactive")]
public static UIcons Interactive;
    [NameAttribute("fi-rr-interlining")]
public static UIcons Interlining;
    [NameAttribute("fi-rr-internet-speed-wifi")]
public static UIcons InternetSpeedWifi;
    [NameAttribute("fi-rr-interrogation")]
public static UIcons Interrogation;
    [NameAttribute("fi-rr-intersection")]
public static UIcons Intersection;
    [NameAttribute("fi-rr-introduction")]
public static UIcons Introduction;
    [NameAttribute("fi-rr-introduction-handshake")]
public static UIcons IntroductionHandshake;
    [NameAttribute("fi-rr-inventory-alt")]
public static UIcons InventoryAlt;
    [NameAttribute("fi-rr-invest")]
public static UIcons Invest;
    [NameAttribute("fi-rr-investment")]
public static UIcons Investment;
    [NameAttribute("fi-rr-invite")]
public static UIcons Invite;
    [NameAttribute("fi-rr-invite-alt")]
public static UIcons InviteAlt;
    [NameAttribute("fi-rr-iot")]
public static UIcons Iot;
    [NameAttribute("fi-rr-iot-alt")]
public static UIcons IotAlt;
    [NameAttribute("fi-rr-ip-address")]
public static UIcons IpAddress;
    [NameAttribute("fi-rr-island-tropical")]
public static UIcons IslandTropical;
    [NameAttribute("fi-rr-issue-loupe")]
public static UIcons IssueLoupe;
    [NameAttribute("fi-rr-it")]
public static UIcons It;
    [NameAttribute("fi-rr-it-alt")]
public static UIcons ItAlt;
    [NameAttribute("fi-rr-it-computer")]
public static UIcons ItComputer;
    [NameAttribute("fi-rr-italian-lira-sign")]
public static UIcons ItalianLiraSign;
    [NameAttribute("fi-rr-italic")]
public static UIcons Italic;
    [NameAttribute("fi-rr-j")]
public static UIcons J;
    [NameAttribute("fi-rr-jam")]
public static UIcons Jam;
    [NameAttribute("fi-rr-jar-alt")]
public static UIcons JarAlt;
    [NameAttribute("fi-rr-jar-wheat")]
public static UIcons JarWheat;
    [NameAttribute("fi-rr-javascript")]
public static UIcons Javascript;
    [NameAttribute("fi-rr-joint")]
public static UIcons Joint;
    [NameAttribute("fi-rr-joker")]
public static UIcons Joker;
    [NameAttribute("fi-rr-journal")]
public static UIcons Journal;
    [NameAttribute("fi-rr-journal-alt")]
public static UIcons JournalAlt;
    [NameAttribute("fi-rr-journey")]
public static UIcons Journey;
    [NameAttribute("fi-rr-joystick")]
public static UIcons Joystick;
    [NameAttribute("fi-rr-jpg")]
public static UIcons Jpg;
    [NameAttribute("fi-rr-jug")]
public static UIcons Jug;
    [NameAttribute("fi-rr-jug-alt")]
public static UIcons JugAlt;
    [NameAttribute("fi-rr-jug-bottle")]
public static UIcons JugBottle;
    [NameAttribute("fi-rr-jumping-rope")]
public static UIcons JumpingRope;
    [NameAttribute("fi-rr-k")]
public static UIcons K;
    [NameAttribute("fi-rr-kaaba")]
public static UIcons Kaaba;
    [NameAttribute("fi-rr-kazoo")]
public static UIcons Kazoo;
    [NameAttribute("fi-rr-kerning")]
public static UIcons Kerning;
    [NameAttribute("fi-rr-key")]
public static UIcons Key;
    [NameAttribute("fi-rr-key-lock-crypto")]
public static UIcons KeyLockCrypto;
    [NameAttribute("fi-rr-key-skeleton-left-right")]
public static UIcons KeySkeletonLeftRight;
    [NameAttribute("fi-rr-keyboard")]
public static UIcons Keyboard;
    [NameAttribute("fi-rr-keyboard-brightness")]
public static UIcons KeyboardBrightness;
    [NameAttribute("fi-rr-keyboard-brightness-low")]
public static UIcons KeyboardBrightnessLow;
    [NameAttribute("fi-rr-keyboard-down")]
public static UIcons KeyboardDown;
    [NameAttribute("fi-rr-keyboard-left")]
public static UIcons KeyboardLeft;
    [NameAttribute("fi-rr-keynote")]
public static UIcons Keynote;
    [NameAttribute("fi-rr-kidneys")]
public static UIcons Kidneys;
    [NameAttribute("fi-rr-kip-sign")]
public static UIcons KipSign;
    [NameAttribute("fi-rr-kiss")]
public static UIcons Kiss;
    [NameAttribute("fi-rr-kiss-beam")]
public static UIcons KissBeam;
    [NameAttribute("fi-rr-kiss-wink-heart")]
public static UIcons KissWinkHeart;
    [NameAttribute("fi-rr-kite")]
public static UIcons Kite;
    [NameAttribute("fi-rr-kiwi-bird")]
public static UIcons KiwiBird;
    [NameAttribute("fi-rr-kiwi-fruit")]
public static UIcons KiwiFruit;
    [NameAttribute("fi-rr-knife")]
public static UIcons Knife;
    [NameAttribute("fi-rr-knife-kitchen")]
public static UIcons KnifeKitchen;
    [NameAttribute("fi-rr-knitting")]
public static UIcons Knitting;
    [NameAttribute("fi-rr-kpi")]
public static UIcons Kpi;
    [NameAttribute("fi-rr-kpi-evaluation")]
public static UIcons KpiEvaluation;
    [NameAttribute("fi-rr-l")]
public static UIcons L;
    [NameAttribute("fi-rr-label")]
public static UIcons Label;
    [NameAttribute("fi-rr-lacrosse-stick")]
public static UIcons LacrosseStick;
    [NameAttribute("fi-rr-lacrosse-stick-ball")]
public static UIcons LacrosseStickBall;
    [NameAttribute("fi-rr-lambda")]
public static UIcons Lambda;
    [NameAttribute("fi-rr-lamp")]
public static UIcons Lamp;
    [NameAttribute("fi-rr-lamp-desk")]
public static UIcons LampDesk;
    [NameAttribute("fi-rr-lamp-floor")]
public static UIcons LampFloor;
    [NameAttribute("fi-rr-lamp-street")]
public static UIcons LampStreet;
    [NameAttribute("fi-rr-land-layer-location")]
public static UIcons LandLayerLocation;
    [NameAttribute("fi-rr-land-layers")]
public static UIcons LandLayers;
    [NameAttribute("fi-rr-land-location")]
public static UIcons LandLocation;
    [NameAttribute("fi-rr-landmark-alt")]
public static UIcons LandmarkAlt;
    [NameAttribute("fi-rr-language")]
public static UIcons Language;
    [NameAttribute("fi-rr-laptop")]
public static UIcons Laptop;
    [NameAttribute("fi-rr-laptop-arrow-down")]
public static UIcons LaptopArrowDown;
    [NameAttribute("fi-rr-laptop-binary")]
public static UIcons LaptopBinary;
    [NameAttribute("fi-rr-laptop-code")]
public static UIcons LaptopCode;
    [NameAttribute("fi-rr-laptop-medical")]
public static UIcons LaptopMedical;
    [NameAttribute("fi-rr-laptop-mobile")]
public static UIcons LaptopMobile;
    [NameAttribute("fi-rr-laptop-slash")]
public static UIcons LaptopSlash;
    [NameAttribute("fi-rr-lari-sign")]
public static UIcons LariSign;
    [NameAttribute("fi-rr-lasso")]
public static UIcons Lasso;
    [NameAttribute("fi-rr-lasso-sparkles")]
public static UIcons LassoSparkles;
    [NameAttribute("fi-rr-last-square")]
public static UIcons LastSquare;
    [NameAttribute("fi-rr-laugh")]
public static UIcons Laugh;
    [NameAttribute("fi-rr-laugh-beam")]
public static UIcons LaughBeam;
    [NameAttribute("fi-rr-laugh-squint")]
public static UIcons LaughSquint;
    [NameAttribute("fi-rr-laugh-wink")]
public static UIcons LaughWink;
    [NameAttribute("fi-rr-lawyer-man")]
public static UIcons LawyerMan;
    [NameAttribute("fi-rr-lawyer-woman")]
public static UIcons LawyerWoman;
    [NameAttribute("fi-rr-layer-minus")]
public static UIcons LayerMinus;
    [NameAttribute("fi-rr-layer-plus")]
public static UIcons LayerPlus;
    [NameAttribute("fi-rr-layers")]
public static UIcons Layers;
    [NameAttribute("fi-rr-layout-fluid")]
public static UIcons LayoutFluid;
    [NameAttribute("fi-rr-lead")]
public static UIcons Lead;
    [NameAttribute("fi-rr-lead-funnel")]
public static UIcons LeadFunnel;
    [NameAttribute("fi-rr-lead-management")]
public static UIcons LeadManagement;
    [NameAttribute("fi-rr-leader")]
public static UIcons Leader;
    [NameAttribute("fi-rr-leader-alt")]
public static UIcons LeaderAlt;
    [NameAttribute("fi-rr-leader-speech")]
public static UIcons LeaderSpeech;
    [NameAttribute("fi-rr-leaderboard")]
public static UIcons Leaderboard;
    [NameAttribute("fi-rr-leaderboard-alt")]
public static UIcons LeaderboardAlt;
    [NameAttribute("fi-rr-leaderboard-trophy")]
public static UIcons LeaderboardTrophy;
    [NameAttribute("fi-rr-leadership")]
public static UIcons Leadership;
    [NameAttribute("fi-rr-leadership-alt")]
public static UIcons LeadershipAlt;
    [NameAttribute("fi-rr-leaf")]
public static UIcons Leaf;
    [NameAttribute("fi-rr-leaf-heart")]
public static UIcons LeafHeart;
    [NameAttribute("fi-rr-leaf-maple")]
public static UIcons LeafMaple;
    [NameAttribute("fi-rr-leaf-oak")]
public static UIcons LeafOak;
    [NameAttribute("fi-rr-leafy-green")]
public static UIcons LeafyGreen;
    [NameAttribute("fi-rr-leave")]
public static UIcons Leave;
    [NameAttribute("fi-rr-left")]
public static UIcons Left;
    [NameAttribute("fi-rr-left-from-bracket")]
public static UIcons LeftFromBracket;
    [NameAttribute("fi-rr-legal")]
public static UIcons Legal;
    [NameAttribute("fi-rr-lemon")]
public static UIcons Lemon;
    [NameAttribute("fi-rr-lesbian-couple")]
public static UIcons LesbianCouple;
    [NameAttribute("fi-rr-less-than")]
public static UIcons LessThan;
    [NameAttribute("fi-rr-less-than-equal")]
public static UIcons LessThanEqual;
    [NameAttribute("fi-rr-lesson")]
public static UIcons Lesson;
    [NameAttribute("fi-rr-lesson-class")]
public static UIcons LessonClass;
    [NameAttribute("fi-rr-letter-case")]
public static UIcons LetterCase;
    [NameAttribute("fi-rr-lettuce")]
public static UIcons Lettuce;
    [NameAttribute("fi-rr-level-down")]
public static UIcons LevelDown;
    [NameAttribute("fi-rr-level-down-alt")]
public static UIcons LevelDownAlt;
    [NameAttribute("fi-rr-level-up")]
public static UIcons LevelUp;
    [NameAttribute("fi-rr-level-up-alt")]
public static UIcons LevelUpAlt;
    [NameAttribute("fi-rr-license")]
public static UIcons License;
    [NameAttribute("fi-rr-life")]
public static UIcons Life;
    [NameAttribute("fi-rr-life-ring")]
public static UIcons LifeRing;
    [NameAttribute("fi-rr-light-ceiling")]
public static UIcons LightCeiling;
    [NameAttribute("fi-rr-light-emergency")]
public static UIcons LightEmergency;
    [NameAttribute("fi-rr-light-emergency-on")]
public static UIcons LightEmergencyOn;
    [NameAttribute("fi-rr-light-switch")]
public static UIcons LightSwitch;
    [NameAttribute("fi-rr-light-switch-off")]
public static UIcons LightSwitchOff;
    [NameAttribute("fi-rr-light-switch-on")]
public static UIcons LightSwitchOn;
    [NameAttribute("fi-rr-lightbulb-cfl")]
public static UIcons LightbulbCfl;
    [NameAttribute("fi-rr-lightbulb-cfl-on")]
public static UIcons LightbulbCflOn;
    [NameAttribute("fi-rr-lightbulb-dollar")]
public static UIcons LightbulbDollar;
    [NameAttribute("fi-rr-lightbulb-exclamation")]
public static UIcons LightbulbExclamation;
    [NameAttribute("fi-rr-lightbulb-head")]
public static UIcons LightbulbHead;
    [NameAttribute("fi-rr-lightbulb-on")]
public static UIcons LightbulbOn;
    [NameAttribute("fi-rr-lightbulb-question")]
public static UIcons LightbulbQuestion;
    [NameAttribute("fi-rr-lightbulb-setting")]
public static UIcons LightbulbSetting;
    [NameAttribute("fi-rr-lightbulb-slash")]
public static UIcons LightbulbSlash;
    [NameAttribute("fi-rr-lighthouse")]
public static UIcons Lighthouse;
    [NameAttribute("fi-rr-lights-holiday")]
public static UIcons LightsHoliday;
    [NameAttribute("fi-rr-limit-speedometer")]
public static UIcons LimitSpeedometer;
    [NameAttribute("fi-rr-limit-thumbs-down")]
public static UIcons LimitThumbsDown;
    [NameAttribute("fi-rr-line-width")]
public static UIcons LineWidth;
    [NameAttribute("fi-rr-link")]
public static UIcons Link;
    [NameAttribute("fi-rr-link-alt")]
public static UIcons LinkAlt;
    [NameAttribute("fi-rr-link-horizontal")]
public static UIcons LinkHorizontal;
    [NameAttribute("fi-rr-link-horizontal-slash")]
public static UIcons LinkHorizontalSlash;
    [NameAttribute("fi-rr-link-slash")]
public static UIcons LinkSlash;
    [NameAttribute("fi-rr-link-slash-alt")]
public static UIcons LinkSlashAlt;
    [NameAttribute("fi-rr-lion")]
public static UIcons Lion;
    [NameAttribute("fi-rr-lion-head")]
public static UIcons LionHead;
    [NameAttribute("fi-rr-lips")]
public static UIcons Lips;
    [NameAttribute("fi-rr-lipstick")]
public static UIcons Lipstick;
    [NameAttribute("fi-rr-lira-sign")]
public static UIcons LiraSign;
    [NameAttribute("fi-rr-list")]
public static UIcons List;
    [NameAttribute("fi-rr-list-check")]
public static UIcons ListCheck;
    [NameAttribute("fi-rr-list-dropdown")]
public static UIcons ListDropdown;
    [NameAttribute("fi-rr-list-music")]
public static UIcons ListMusic;
    [NameAttribute("fi-rr-list-timeline")]
public static UIcons ListTimeline;
    [NameAttribute("fi-rr-litecoin-sign")]
public static UIcons LitecoinSign;
    [NameAttribute("fi-rr-live")]
public static UIcons Live;
    [NameAttribute("fi-rr-live-alt")]
public static UIcons LiveAlt;
    [NameAttribute("fi-rr-loading")]
public static UIcons Loading;
    [NameAttribute("fi-rr-loan")]
public static UIcons Loan;
    [NameAttribute("fi-rr-lobster")]
public static UIcons Lobster;
    [NameAttribute("fi-rr-location-alt")]
public static UIcons LocationAlt;
    [NameAttribute("fi-rr-location-arrow")]
public static UIcons LocationArrow;
    [NameAttribute("fi-rr-location-crosshairs")]
public static UIcons LocationCrosshairs;
    [NameAttribute("fi-rr-location-crosshairs-slash")]
public static UIcons LocationCrosshairsSlash;
    [NameAttribute("fi-rr-location-dot-slash")]
public static UIcons LocationDotSlash;
    [NameAttribute("fi-rr-location-exclamation")]
public static UIcons LocationExclamation;
    [NameAttribute("fi-rr-location-pin-call")]
public static UIcons LocationPinCall;
    [NameAttribute("fi-rr-lock")]
public static UIcons Lock;
    [NameAttribute("fi-rr-lock-alt")]
public static UIcons LockAlt;
    [NameAttribute("fi-rr-lock-hashtag")]
public static UIcons LockHashtag;
    [NameAttribute("fi-rr-lock-open-alt")]
public static UIcons LockOpenAlt;
    [NameAttribute("fi-rr-locust")]
public static UIcons Locust;
    [NameAttribute("fi-rr-log-out")]
public static UIcons LogOut;
    [NameAttribute("fi-rr-loop-square")]
public static UIcons LoopSquare;
    [NameAttribute("fi-rr-loveseat")]
public static UIcons Loveseat;
    [NameAttribute("fi-rr-low-vision")]
public static UIcons LowVision;
    [NameAttribute("fi-rr-luchador")]
public static UIcons Luchador;
    [NameAttribute("fi-rr-luggage-cart")]
public static UIcons LuggageCart;
    [NameAttribute("fi-rr-luggage-rolling")]
public static UIcons LuggageRolling;
    [NameAttribute("fi-rr-lungs")]
public static UIcons Lungs;
    [NameAttribute("fi-rr-lungs-virus")]
public static UIcons LungsVirus;
    [NameAttribute("fi-rr-m")]
public static UIcons M;
    [NameAttribute("fi-rr-mace")]
public static UIcons Mace;
    [NameAttribute("fi-rr-magic-wand")]
public static UIcons MagicWand;
    [NameAttribute("fi-rr-magnet")]
public static UIcons Magnet;
    [NameAttribute("fi-rr-magnet-user")]
public static UIcons MagnetUser;
    [NameAttribute("fi-rr-mailbox")]
public static UIcons Mailbox;
    [NameAttribute("fi-rr-mailbox-envelope")]
public static UIcons MailboxEnvelope;
    [NameAttribute("fi-rr-mailbox-flag-up")]
public static UIcons MailboxFlagUp;
    [NameAttribute("fi-rr-makeup-brush")]
public static UIcons MakeupBrush;
    [NameAttribute("fi-rr-male")]
public static UIcons Male;
    [NameAttribute("fi-rr-male-couple")]
public static UIcons MaleCouple;
    [NameAttribute("fi-rr-man-head")]
public static UIcons ManHead;
    [NameAttribute("fi-rr-man-scientist")]
public static UIcons ManScientist;
    [NameAttribute("fi-rr-manat-sign")]
public static UIcons ManatSign;
    [NameAttribute("fi-rr-mandolin")]
public static UIcons Mandolin;
    [NameAttribute("fi-rr-mango")]
public static UIcons Mango;
    [NameAttribute("fi-rr-manhole")]
public static UIcons Manhole;
    [NameAttribute("fi-rr-map")]
public static UIcons Map;
    [NameAttribute("fi-rr-map-location-track")]
public static UIcons MapLocationTrack;
    [NameAttribute("fi-rr-map-marker")]
public static UIcons MapMarker;
    [NameAttribute("fi-rr-map-marker-check")]
public static UIcons MapMarkerCheck;
    [NameAttribute("fi-rr-map-marker-cross")]
public static UIcons MapMarkerCross;
    [NameAttribute("fi-rr-map-marker-edit")]
public static UIcons MapMarkerEdit;
    [NameAttribute("fi-rr-map-marker-home")]
public static UIcons MapMarkerHome;
    [NameAttribute("fi-rr-map-marker-minus")]
public static UIcons MapMarkerMinus;
    [NameAttribute("fi-rr-map-marker-plus")]
public static UIcons MapMarkerPlus;
    [NameAttribute("fi-rr-map-marker-question")]
public static UIcons MapMarkerQuestion;
    [NameAttribute("fi-rr-map-marker-slash")]
public static UIcons MapMarkerSlash;
    [NameAttribute("fi-rr-map-marker-smile")]
public static UIcons MapMarkerSmile;
    [NameAttribute("fi-rr-map-pin")]
public static UIcons MapPin;
    [NameAttribute("fi-rr-map-point")]
public static UIcons MapPoint;
    [NameAttribute("fi-rr-marker")]
public static UIcons Marker;
    [NameAttribute("fi-rr-marker-time")]
public static UIcons MarkerTime;
    [NameAttribute("fi-rr-marketplace")]
public static UIcons Marketplace;
    [NameAttribute("fi-rr-marketplace-alt")]
public static UIcons MarketplaceAlt;
    [NameAttribute("fi-rr-marketplace-store")]
public static UIcons MarketplaceStore;
    [NameAttribute("fi-rr-mars")]
public static UIcons Mars;
    [NameAttribute("fi-rr-mars-double")]
public static UIcons MarsDouble;
    [NameAttribute("fi-rr-mars-stroke-right")]
public static UIcons MarsStrokeRight;
    [NameAttribute("fi-rr-mars-stroke-up")]
public static UIcons MarsStrokeUp;
    [NameAttribute("fi-rr-martini-glass-citrus")]
public static UIcons MartiniGlassCitrus;
    [NameAttribute("fi-rr-martini-glass-empty")]
public static UIcons MartiniGlassEmpty;
    [NameAttribute("fi-rr-mask")]
public static UIcons Mask;
    [NameAttribute("fi-rr-mask-carnival")]
public static UIcons MaskCarnival;
    [NameAttribute("fi-rr-mask-face")]
public static UIcons MaskFace;
    [NameAttribute("fi-rr-mask-snorkel")]
public static UIcons MaskSnorkel;
    [NameAttribute("fi-rr-massage")]
public static UIcons Massage;
    [NameAttribute("fi-rr-match-fire")]
public static UIcons MatchFire;
    [NameAttribute("fi-rr-mattress-pillow")]
public static UIcons MattressPillow;
    [NameAttribute("fi-rr-measuring-tape")]
public static UIcons MeasuringTape;
    [NameAttribute("fi-rr-meat")]
public static UIcons Meat;
    [NameAttribute("fi-rr-medal")]
public static UIcons Medal;
    [NameAttribute("fi-rr-medical-star")]
public static UIcons MedicalStar;
    [NameAttribute("fi-rr-medicine")]
public static UIcons Medicine;
    [NameAttribute("fi-rr-meditation")]
public static UIcons Meditation;
    [NameAttribute("fi-rr-meeting")]
public static UIcons Meeting;
    [NameAttribute("fi-rr-meeting-alt")]
public static UIcons MeetingAlt;
    [NameAttribute("fi-rr-megaphone")]
public static UIcons Megaphone;
    [NameAttribute("fi-rr-megaphone-announcement-leader")]
public static UIcons MegaphoneAnnouncementLeader;
    [NameAttribute("fi-rr-meh")]
public static UIcons Meh;
    [NameAttribute("fi-rr-meh-blank")]
public static UIcons MehBlank;
    [NameAttribute("fi-rr-meh-rolling-eyes")]
public static UIcons MehRollingEyes;
    [NameAttribute("fi-rr-melon")]
public static UIcons Melon;
    [NameAttribute("fi-rr-melon-alt")]
public static UIcons MelonAlt;
    [NameAttribute("fi-rr-member-list")]
public static UIcons MemberList;
    [NameAttribute("fi-rr-member-search")]
public static UIcons MemberSearch;
    [NameAttribute("fi-rr-membership")]
public static UIcons Membership;
    [NameAttribute("fi-rr-membership-vip")]
public static UIcons MembershipVip;
    [NameAttribute("fi-rr-memo")]
public static UIcons Memo;
    [NameAttribute("fi-rr-memo-circle-check")]
public static UIcons MemoCircleCheck;
    [NameAttribute("fi-rr-memo-pad")]
public static UIcons MemoPad;
    [NameAttribute("fi-rr-memory")]
public static UIcons Memory;
    [NameAttribute("fi-rr-menu-burger")]
public static UIcons MenuBurger;
    [NameAttribute("fi-rr-menu-dots")]
public static UIcons MenuDots;
    [NameAttribute("fi-rr-menu-dots-vertical")]
public static UIcons MenuDotsVertical;
    [NameAttribute("fi-rr-mercury")]
public static UIcons Mercury;
    [NameAttribute("fi-rr-message-arrow-down")]
public static UIcons MessageArrowDown;
    [NameAttribute("fi-rr-message-arrow-up")]
public static UIcons MessageArrowUp;
    [NameAttribute("fi-rr-message-arrow-up-right")]
public static UIcons MessageArrowUpRight;
    [NameAttribute("fi-rr-message-bot")]
public static UIcons MessageBot;
    [NameAttribute("fi-rr-message-code")]
public static UIcons MessageCode;
    [NameAttribute("fi-rr-message-dollar")]
public static UIcons MessageDollar;
    [NameAttribute("fi-rr-message-heart")]
public static UIcons MessageHeart;
    [NameAttribute("fi-rr-message-image")]
public static UIcons MessageImage;
    [NameAttribute("fi-rr-message-question")]
public static UIcons MessageQuestion;
    [NameAttribute("fi-rr-message-quote")]
public static UIcons MessageQuote;
    [NameAttribute("fi-rr-message-slash")]
public static UIcons MessageSlash;
    [NameAttribute("fi-rr-message-sms")]
public static UIcons MessageSms;
    [NameAttribute("fi-rr-message-text")]
public static UIcons MessageText;
    [NameAttribute("fi-rr-message-xmark")]
public static UIcons MessageXmark;
    [NameAttribute("fi-rr-messages")]
public static UIcons Messages;
    [NameAttribute("fi-rr-messages-dollar")]
public static UIcons MessagesDollar;
    [NameAttribute("fi-rr-messages-question")]
public static UIcons MessagesQuestion;
    [NameAttribute("fi-rr-meteor")]
public static UIcons Meteor;
    [NameAttribute("fi-rr-meter")]
public static UIcons Meter;
    [NameAttribute("fi-rr-meter-bolt")]
public static UIcons MeterBolt;
    [NameAttribute("fi-rr-meter-droplet")]
public static UIcons MeterDroplet;
    [NameAttribute("fi-rr-meter-fire")]
public static UIcons MeterFire;
    [NameAttribute("fi-rr-method")]
public static UIcons Method;
    [NameAttribute("fi-rr-microchip")]
public static UIcons Microchip;
    [NameAttribute("fi-rr-microchip-ai")]
public static UIcons MicrochipAi;
    [NameAttribute("fi-rr-microphone")]
public static UIcons Microphone;
    [NameAttribute("fi-rr-microphone-alt")]
public static UIcons MicrophoneAlt;
    [NameAttribute("fi-rr-microphone-slash")]
public static UIcons MicrophoneSlash;
    [NameAttribute("fi-rr-microscope")]
public static UIcons Microscope;
    [NameAttribute("fi-rr-microwave")]
public static UIcons Microwave;
    [NameAttribute("fi-rr-milk")]
public static UIcons Milk;
    [NameAttribute("fi-rr-milk-alt")]
public static UIcons MilkAlt;
    [NameAttribute("fi-rr-mill-sign")]
public static UIcons MillSign;
    [NameAttribute("fi-rr-mind-share")]
public static UIcons MindShare;
    [NameAttribute("fi-rr-minus")]
public static UIcons Minus;
    [NameAttribute("fi-rr-minus-circle")]
public static UIcons MinusCircle;
    [NameAttribute("fi-rr-minus-hexagon")]
public static UIcons MinusHexagon;
    [NameAttribute("fi-rr-minus-small")]
public static UIcons MinusSmall;
    [NameAttribute("fi-rr-minuss")]
public static UIcons Minuss;
    [NameAttribute("fi-rr-mistletoe")]
public static UIcons Mistletoe;
    [NameAttribute("fi-rr-mix")]
public static UIcons Mix;
    [NameAttribute("fi-rr-mobile")]
public static UIcons Mobile;
    [NameAttribute("fi-rr-mobile-button")]
public static UIcons MobileButton;
    [NameAttribute("fi-rr-mobile-notch")]
public static UIcons MobileNotch;
    [NameAttribute("fi-rr-mockup")]
public static UIcons Mockup;
    [NameAttribute("fi-rr-mode")]
public static UIcons Mode;
    [NameAttribute("fi-rr-mode-alt")]
public static UIcons ModeAlt;
    [NameAttribute("fi-rr-mode-landscape")]
public static UIcons ModeLandscape;
    [NameAttribute("fi-rr-mode-portrait")]
public static UIcons ModePortrait;
    [NameAttribute("fi-rr-model-cube")]
public static UIcons ModelCube;
    [NameAttribute("fi-rr-model-cube-arrows")]
public static UIcons ModelCubeArrows;
    [NameAttribute("fi-rr-model-cube-space")]
public static UIcons ModelCubeSpace;
    [NameAttribute("fi-rr-module")]
public static UIcons Module;
    [NameAttribute("fi-rr-monday")]
public static UIcons Monday;
    [NameAttribute("fi-rr-money")]
public static UIcons Money;
    [NameAttribute("fi-rr-money-bill-simple")]
public static UIcons MoneyBillSimple;
    [NameAttribute("fi-rr-money-bill-transfer")]
public static UIcons MoneyBillTransfer;
    [NameAttribute("fi-rr-money-bill-wave")]
public static UIcons MoneyBillWave;
    [NameAttribute("fi-rr-money-bill-wave-alt")]
public static UIcons MoneyBillWaveAlt;
    [NameAttribute("fi-rr-money-bills")]
public static UIcons MoneyBills;
    [NameAttribute("fi-rr-money-bills-simple")]
public static UIcons MoneyBillsSimple;
    [NameAttribute("fi-rr-money-check")]
public static UIcons MoneyCheck;
    [NameAttribute("fi-rr-money-check-edit")]
public static UIcons MoneyCheckEdit;
    [NameAttribute("fi-rr-money-check-edit-alt")]
public static UIcons MoneyCheckEditAlt;
    [NameAttribute("fi-rr-money-coin-transfer")]
public static UIcons MoneyCoinTransfer;
    [NameAttribute("fi-rr-money-from-bracket")]
public static UIcons MoneyFromBracket;
    [NameAttribute("fi-rr-money-simple-from-bracket")]
public static UIcons MoneySimpleFromBracket;
    [NameAttribute("fi-rr-money-transfer-alt")]
public static UIcons MoneyTransferAlt;
    [NameAttribute("fi-rr-money-transfer-coin-arrow")]
public static UIcons MoneyTransferCoinArrow;
    [NameAttribute("fi-rr-money-transfer-smartphone")]
public static UIcons MoneyTransferSmartphone;
    [NameAttribute("fi-rr-money-wings")]
public static UIcons MoneyWings;
    [NameAttribute("fi-rr-monkey")]
public static UIcons Monkey;
    [NameAttribute("fi-rr-monument")]
public static UIcons Monument;
    [NameAttribute("fi-rr-moon")]
public static UIcons Moon;
    [NameAttribute("fi-rr-moon-stars")]
public static UIcons MoonStars;
    [NameAttribute("fi-rr-moped")]
public static UIcons Moped;
    [NameAttribute("fi-rr-mortar-pestle")]
public static UIcons MortarPestle;
    [NameAttribute("fi-rr-mortgage")]
public static UIcons Mortgage;
    [NameAttribute("fi-rr-mosque")]
public static UIcons Mosque;
    [NameAttribute("fi-rr-mosque-alt")]
public static UIcons MosqueAlt;
    [NameAttribute("fi-rr-mosque-moon")]
public static UIcons MosqueMoon;
    [NameAttribute("fi-rr-mosquito")]
public static UIcons Mosquito;
    [NameAttribute("fi-rr-mosquito-net")]
public static UIcons MosquitoNet;
    [NameAttribute("fi-rr-motorcycle")]
public static UIcons Motorcycle;
    [NameAttribute("fi-rr-mound")]
public static UIcons Mound;
    [NameAttribute("fi-rr-mountain")]
public static UIcons Mountain;
    [NameAttribute("fi-rr-mountain-city")]
public static UIcons MountainCity;
    [NameAttribute("fi-rr-mountains")]
public static UIcons Mountains;
    [NameAttribute("fi-rr-mouse")]
public static UIcons Mouse;
    [NameAttribute("fi-rr-mouse-field")]
public static UIcons MouseField;
    [NameAttribute("fi-rr-mov-file")]
public static UIcons MovFile;
    [NameAttribute("fi-rr-move-to-folder")]
public static UIcons MoveToFolder;
    [NameAttribute("fi-rr-move-to-folder-2")]
public static UIcons MoveToFolder2;
    [NameAttribute("fi-rr-mp3-file")]
public static UIcons Mp3File;
    [NameAttribute("fi-rr-mp3-player")]
public static UIcons Mp3Player;
    [NameAttribute("fi-rr-mp4-file")]
public static UIcons Mp4File;
    [NameAttribute("fi-rr-mug")]
public static UIcons Mug;
    [NameAttribute("fi-rr-mug-alt")]
public static UIcons MugAlt;
    [NameAttribute("fi-rr-mug-hot")]
public static UIcons MugHot;
    [NameAttribute("fi-rr-mug-hot-alt")]
public static UIcons MugHotAlt;
    [NameAttribute("fi-rr-mug-marshmallows")]
public static UIcons MugMarshmallows;
    [NameAttribute("fi-rr-mug-tea")]
public static UIcons MugTea;
    [NameAttribute("fi-rr-mug-tea-saucer")]
public static UIcons MugTeaSaucer;
    [NameAttribute("fi-rr-multiple")]
public static UIcons Multiple;
    [NameAttribute("fi-rr-multiple-alt")]
public static UIcons MultipleAlt;
    [NameAttribute("fi-rr-muscle")]
public static UIcons Muscle;
    [NameAttribute("fi-rr-mushroom")]
public static UIcons Mushroom;
    [NameAttribute("fi-rr-mushroom-alt")]
public static UIcons MushroomAlt;
    [NameAttribute("fi-rr-music")]
public static UIcons Music;
    [NameAttribute("fi-rr-music-alt")]
public static UIcons MusicAlt;
    [NameAttribute("fi-rr-music-alt-slash")]
public static UIcons MusicAltSlash;
    [NameAttribute("fi-rr-music-file")]
public static UIcons MusicFile;
    [NameAttribute("fi-rr-music-note")]
public static UIcons MusicNote;
    [NameAttribute("fi-rr-music-note-slash")]
public static UIcons MusicNoteSlash;
    [NameAttribute("fi-rr-music-slash")]
public static UIcons MusicSlash;
    [NameAttribute("fi-rr-n")]
public static UIcons N;
    [NameAttribute("fi-rr-naira-sign")]
public static UIcons NairaSign;
    [NameAttribute("fi-rr-narwhal")]
public static UIcons Narwhal;
    [NameAttribute("fi-rr-navigation")]
public static UIcons Navigation;
    [NameAttribute("fi-rr-nesting-dolls")]
public static UIcons NestingDolls;
    [NameAttribute("fi-rr-network")]
public static UIcons Network;
    [NameAttribute("fi-rr-network-analytic")]
public static UIcons NetworkAnalytic;
    [NameAttribute("fi-rr-network-cloud")]
public static UIcons NetworkCloud;
    [NameAttribute("fi-rr-neuter")]
public static UIcons Neuter;
    [NameAttribute("fi-rr-newsletter-subscribe")]
public static UIcons NewsletterSubscribe;
    [NameAttribute("fi-rr-newspaper")]
public static UIcons Newspaper;
    [NameAttribute("fi-rr-newspaper-open")]
public static UIcons NewspaperOpen;
    [NameAttribute("fi-rr-nfc")]
public static UIcons Nfc;
    [NameAttribute("fi-rr-nfc-lock")]
public static UIcons NfcLock;
    [NameAttribute("fi-rr-nfc-magnifying-glass")]
public static UIcons NfcMagnifyingGlass;
    [NameAttribute("fi-rr-nfc-pen")]
public static UIcons NfcPen;
    [NameAttribute("fi-rr-nfc-slash")]
public static UIcons NfcSlash;
    [NameAttribute("fi-rr-nfc-trash")]
public static UIcons NfcTrash;
    [NameAttribute("fi-rr-night-day")]
public static UIcons NightDay;
    [NameAttribute("fi-rr-no-fee")]
public static UIcons NoFee;
    [NameAttribute("fi-rr-no-people")]
public static UIcons NoPeople;
    [NameAttribute("fi-rr-noodles")]
public static UIcons Noodles;
    [NameAttribute("fi-rr-nose")]
public static UIcons Nose;
    [NameAttribute("fi-rr-not-equal")]
public static UIcons NotEqual;
    [NameAttribute("fi-rr-not-found")]
public static UIcons NotFound;
    [NameAttribute("fi-rr-not-found-alt")]
public static UIcons NotFoundAlt;
    [NameAttribute("fi-rr-not-found-magnifying-glass")]
public static UIcons NotFoundMagnifyingGlass;
    [NameAttribute("fi-rr-notdef")]
public static UIcons Notdef;
    [NameAttribute("fi-rr-note")]
public static UIcons Note;
    [NameAttribute("fi-rr-note-medical")]
public static UIcons NoteMedical;
    [NameAttribute("fi-rr-note-sticky")]
public static UIcons NoteSticky;
    [NameAttribute("fi-rr-notebook")]
public static UIcons Notebook;
    [NameAttribute("fi-rr-notebook-alt")]
public static UIcons NotebookAlt;
    [NameAttribute("fi-rr-notes")]
public static UIcons Notes;
    [NameAttribute("fi-rr-notes-medical")]
public static UIcons NotesMedical;
    [NameAttribute("fi-rr-o")]
public static UIcons O;
    [NameAttribute("fi-rr-object-exclude")]
public static UIcons ObjectExclude;
    [NameAttribute("fi-rr-object-group")]
public static UIcons ObjectGroup;
    [NameAttribute("fi-rr-object-intersect")]
public static UIcons ObjectIntersect;
    [NameAttribute("fi-rr-object-subtract")]
public static UIcons ObjectSubtract;
    [NameAttribute("fi-rr-object-ungroup")]
public static UIcons ObjectUngroup;
    [NameAttribute("fi-rr-object-union")]
public static UIcons ObjectUnion;
    [NameAttribute("fi-rr-objects-column")]
public static UIcons ObjectsColumn;
    [NameAttribute("fi-rr-octagon")]
public static UIcons Octagon;
    [NameAttribute("fi-rr-octagon-check")]
public static UIcons OctagonCheck;
    [NameAttribute("fi-rr-octagon-divide")]
public static UIcons OctagonDivide;
    [NameAttribute("fi-rr-octagon-exclamation")]
public static UIcons OctagonExclamation;
    [NameAttribute("fi-rr-octagon-minus")]
public static UIcons OctagonMinus;
    [NameAttribute("fi-rr-octagon-plus")]
public static UIcons OctagonPlus;
    [NameAttribute("fi-rr-octagon-xmark")]
public static UIcons OctagonXmark;
    [NameAttribute("fi-rr-oil-can")]
public static UIcons OilCan;
    [NameAttribute("fi-rr-oil-temp")]
public static UIcons OilTemp;
    [NameAttribute("fi-rr-olive")]
public static UIcons Olive;
    [NameAttribute("fi-rr-olive-oil")]
public static UIcons OliveOil;
    [NameAttribute("fi-rr-olives")]
public static UIcons Olives;
    [NameAttribute("fi-rr-om")]
public static UIcons Om;
    [NameAttribute("fi-rr-omega")]
public static UIcons Omega;
    [NameAttribute("fi-rr-onboarding")]
public static UIcons Onboarding;
    [NameAttribute("fi-rr-onion")]
public static UIcons Onion;
    [NameAttribute("fi-rr-opacity")]
public static UIcons Opacity;
    [NameAttribute("fi-rr-open-mail-clip")]
public static UIcons OpenMailClip;
    [NameAttribute("fi-rr-operating-system-upgrade")]
public static UIcons OperatingSystemUpgrade;
    [NameAttribute("fi-rr-operation")]
public static UIcons Operation;
    [NameAttribute("fi-rr-order-history")]
public static UIcons OrderHistory;
    [NameAttribute("fi-rr-organization-chart")]
public static UIcons OrganizationChart;
    [NameAttribute("fi-rr-ornament")]
public static UIcons Ornament;
    [NameAttribute("fi-rr-otp")]
public static UIcons Otp;
    [NameAttribute("fi-rr-otter")]
public static UIcons Otter;
    [NameAttribute("fi-rr-outdent")]
public static UIcons Outdent;
    [NameAttribute("fi-rr-oval")]
public static UIcons Oval;
    [NameAttribute("fi-rr-oval-alt")]
public static UIcons OvalAlt;
    [NameAttribute("fi-rr-oven")]
public static UIcons Oven;
    [NameAttribute("fi-rr-overline")]
public static UIcons Overline;
    [NameAttribute("fi-rr-overview")]
public static UIcons Overview;
    [NameAttribute("fi-rr-p")]
public static UIcons P;
    [NameAttribute("fi-rr-package")]
public static UIcons Package;
    [NameAttribute("fi-rr-padlock-check")]
public static UIcons PadlockCheck;
    [NameAttribute("fi-rr-page-break")]
public static UIcons PageBreak;
    [NameAttribute("fi-rr-pager")]
public static UIcons Pager;
    [NameAttribute("fi-rr-paid")]
public static UIcons Paid;
    [NameAttribute("fi-rr-paint")]
public static UIcons Paint;
    [NameAttribute("fi-rr-paint-brush")]
public static UIcons PaintBrush;
    [NameAttribute("fi-rr-paint-roller")]
public static UIcons PaintRoller;
    [NameAttribute("fi-rr-paintbrush-pencil")]
public static UIcons PaintbrushPencil;
    [NameAttribute("fi-rr-palette")]
public static UIcons Palette;
    [NameAttribute("fi-rr-pallet")]
public static UIcons Pallet;
    [NameAttribute("fi-rr-pallet-alt")]
public static UIcons PalletAlt;
    [NameAttribute("fi-rr-pan")]
public static UIcons Pan;
    [NameAttribute("fi-rr-pan-food")]
public static UIcons PanFood;
    [NameAttribute("fi-rr-pan-frying")]
public static UIcons PanFrying;
    [NameAttribute("fi-rr-pancakes")]
public static UIcons Pancakes;
    [NameAttribute("fi-rr-panorama")]
public static UIcons Panorama;
    [NameAttribute("fi-rr-paper-plane")]
public static UIcons PaperPlane;
    [NameAttribute("fi-rr-paper-plane-launch")]
public static UIcons PaperPlaneLaunch;
    [NameAttribute("fi-rr-paper-plane-top")]
public static UIcons PaperPlaneTop;
    [NameAttribute("fi-rr-paperclip-vertical")]
public static UIcons PaperclipVertical;
    [NameAttribute("fi-rr-parachute-box")]
public static UIcons ParachuteBox;
    [NameAttribute("fi-rr-paragraph")]
public static UIcons Paragraph;
    [NameAttribute("fi-rr-paragraph-left")]
public static UIcons ParagraphLeft;
    [NameAttribute("fi-rr-parking")]
public static UIcons Parking;
    [NameAttribute("fi-rr-parking-circle")]
public static UIcons ParkingCircle;
    [NameAttribute("fi-rr-parking-circle-slash")]
public static UIcons ParkingCircleSlash;
    [NameAttribute("fi-rr-parking-slash")]
public static UIcons ParkingSlash;
    [NameAttribute("fi-rr-party")]
public static UIcons Party;
    [NameAttribute("fi-rr-party-bell")]
public static UIcons PartyBell;
    [NameAttribute("fi-rr-party-horn")]
public static UIcons PartyHorn;
    [NameAttribute("fi-rr-passport")]
public static UIcons Passport;
    [NameAttribute("fi-rr-password")]
public static UIcons Password;
    [NameAttribute("fi-rr-password-alt")]
public static UIcons PasswordAlt;
    [NameAttribute("fi-rr-password-computer")]
public static UIcons PasswordComputer;
    [NameAttribute("fi-rr-password-email")]
public static UIcons PasswordEmail;
    [NameAttribute("fi-rr-password-smartphone")]
public static UIcons PasswordSmartphone;
    [NameAttribute("fi-rr-paste")]
public static UIcons Paste;
    [NameAttribute("fi-rr-pattern")]
public static UIcons Pattern;
    [NameAttribute("fi-rr-pause")]
public static UIcons Pause;
    [NameAttribute("fi-rr-pause-circle")]
public static UIcons PauseCircle;
    [NameAttribute("fi-rr-pause-square")]
public static UIcons PauseSquare;
    [NameAttribute("fi-rr-paw")]
public static UIcons Paw;
    [NameAttribute("fi-rr-paw-claws")]
public static UIcons PawClaws;
    [NameAttribute("fi-rr-paw-heart")]
public static UIcons PawHeart;
    [NameAttribute("fi-rr-payment-pos")]
public static UIcons PaymentPos;
    [NameAttribute("fi-rr-payroll")]
public static UIcons Payroll;
    [NameAttribute("fi-rr-payroll-calendar")]
public static UIcons PayrollCalendar;
    [NameAttribute("fi-rr-payroll-check")]
public static UIcons PayrollCheck;
    [NameAttribute("fi-rr-peace")]
public static UIcons Peace;
    [NameAttribute("fi-rr-peach")]
public static UIcons Peach;
    [NameAttribute("fi-rr-peanut")]
public static UIcons Peanut;
    [NameAttribute("fi-rr-peanuts")]
public static UIcons Peanuts;
    [NameAttribute("fi-rr-peapod")]
public static UIcons Peapod;
    [NameAttribute("fi-rr-pear")]
public static UIcons Pear;
    [NameAttribute("fi-rr-pedestal")]
public static UIcons Pedestal;
    [NameAttribute("fi-rr-pen-circle")]
public static UIcons PenCircle;
    [NameAttribute("fi-rr-pen-clip")]
public static UIcons PenClip;
    [NameAttribute("fi-rr-pen-clip-slash")]
public static UIcons PenClipSlash;
    [NameAttribute("fi-rr-pen-fancy")]
public static UIcons PenFancy;
    [NameAttribute("fi-rr-pen-fancy-slash")]
public static UIcons PenFancySlash;
    [NameAttribute("fi-rr-pen-field")]
public static UIcons PenField;
    [NameAttribute("fi-rr-pen-nib")]
public static UIcons PenNib;
    [NameAttribute("fi-rr-pen-nib-slash")]
public static UIcons PenNibSlash;
    [NameAttribute("fi-rr-pen-slash")]
public static UIcons PenSlash;
    [NameAttribute("fi-rr-pen-square")]
public static UIcons PenSquare;
    [NameAttribute("fi-rr-pen-swirl")]
public static UIcons PenSwirl;
    [NameAttribute("fi-rr-pencil")]
public static UIcons Pencil;
    [NameAttribute("fi-rr-pencil-paintbrush")]
public static UIcons PencilPaintbrush;
    [NameAttribute("fi-rr-pencil-ruler")]
public static UIcons PencilRuler;
    [NameAttribute("fi-rr-pencil-slash")]
public static UIcons PencilSlash;
    [NameAttribute("fi-rr-pending")]
public static UIcons Pending;
    [NameAttribute("fi-rr-pennant")]
public static UIcons Pennant;
    [NameAttribute("fi-rr-people")]
public static UIcons People;
    [NameAttribute("fi-rr-people-arrows-left-right")]
public static UIcons PeopleArrowsLeftRight;
    [NameAttribute("fi-rr-people-carry-box")]
public static UIcons PeopleCarryBox;
    [NameAttribute("fi-rr-people-dress")]
public static UIcons PeopleDress;
    [NameAttribute("fi-rr-people-network-partner")]
public static UIcons PeopleNetworkPartner;
    [NameAttribute("fi-rr-people-pants")]
public static UIcons PeoplePants;
    [NameAttribute("fi-rr-people-poll")]
public static UIcons PeoplePoll;
    [NameAttribute("fi-rr-people-pulling")]
public static UIcons PeoplePulling;
    [NameAttribute("fi-rr-people-roof")]
public static UIcons PeopleRoof;
    [NameAttribute("fi-rr-pepper")]
public static UIcons Pepper;
    [NameAttribute("fi-rr-pepper-alt")]
public static UIcons PepperAlt;
    [NameAttribute("fi-rr-pepper-hot")]
public static UIcons PepperHot;
    [NameAttribute("fi-rr-percent-10")]
public static UIcons Percent10;
    [NameAttribute("fi-rr-percent-100")]
public static UIcons Percent100;
    [NameAttribute("fi-rr-percent-20")]
public static UIcons Percent20;
    [NameAttribute("fi-rr-percent-25")]
public static UIcons Percent25;
    [NameAttribute("fi-rr-percent-30")]
public static UIcons Percent30;
    [NameAttribute("fi-rr-percent-40")]
public static UIcons Percent40;
    [NameAttribute("fi-rr-percent-50")]
public static UIcons Percent50;
    [NameAttribute("fi-rr-percent-60")]
public static UIcons Percent60;
    [NameAttribute("fi-rr-percent-70")]
public static UIcons Percent70;
    [NameAttribute("fi-rr-percent-75")]
public static UIcons Percent75;
    [NameAttribute("fi-rr-percent-80")]
public static UIcons Percent80;
    [NameAttribute("fi-rr-percent-90")]
public static UIcons Percent90;
    [NameAttribute("fi-rr-percentage")]
public static UIcons Percentage;
    [NameAttribute("fi-rr-person-burst")]
public static UIcons PersonBurst;
    [NameAttribute("fi-rr-person-carry-box")]
public static UIcons PersonCarryBox;
    [NameAttribute("fi-rr-person-circle-check")]
public static UIcons PersonCircleCheck;
    [NameAttribute("fi-rr-person-circle-exclamation")]
public static UIcons PersonCircleExclamation;
    [NameAttribute("fi-rr-person-circle-minus")]
public static UIcons PersonCircleMinus;
    [NameAttribute("fi-rr-person-circle-plus")]
public static UIcons PersonCirclePlus;
    [NameAttribute("fi-rr-person-circle-question")]
public static UIcons PersonCircleQuestion;
    [NameAttribute("fi-rr-person-circle-xmark")]
public static UIcons PersonCircleXmark;
    [NameAttribute("fi-rr-person-cv")]
public static UIcons PersonCv;
    [NameAttribute("fi-rr-person-dolly")]
public static UIcons PersonDolly;
    [NameAttribute("fi-rr-person-dolly-empty")]
public static UIcons PersonDollyEmpty;
    [NameAttribute("fi-rr-person-dress")]
public static UIcons PersonDress;
    [NameAttribute("fi-rr-person-dress-simple")]
public static UIcons PersonDressSimple;
    [NameAttribute("fi-rr-person-luggage")]
public static UIcons PersonLuggage;
    [NameAttribute("fi-rr-person-lunge")]
public static UIcons PersonLunge;
    [NameAttribute("fi-rr-person-pilates")]
public static UIcons PersonPilates;
    [NameAttribute("fi-rr-person-praying")]
public static UIcons PersonPraying;
    [NameAttribute("fi-rr-person-pregnant")]
public static UIcons PersonPregnant;
    [NameAttribute("fi-rr-person-seat")]
public static UIcons PersonSeat;
    [NameAttribute("fi-rr-person-seat-reclined")]
public static UIcons PersonSeatReclined;
    [NameAttribute("fi-rr-person-shelter")]
public static UIcons PersonShelter;
    [NameAttribute("fi-rr-person-sign")]
public static UIcons PersonSign;
    [NameAttribute("fi-rr-person-simple")]
public static UIcons PersonSimple;
    [NameAttribute("fi-rr-person-walking-with-cane")]
public static UIcons PersonWalkingWithCane;
    [NameAttribute("fi-rr-peseta-sign")]
public static UIcons PesetaSign;
    [NameAttribute("fi-rr-peso-sign")]
public static UIcons PesoSign;
    [NameAttribute("fi-rr-pets")]
public static UIcons Pets;
    [NameAttribute("fi-rr-pharmacy")]
public static UIcons Pharmacy;
    [NameAttribute("fi-rr-phone-call")]
public static UIcons PhoneCall;
    [NameAttribute("fi-rr-phone-cross")]
public static UIcons PhoneCross;
    [NameAttribute("fi-rr-phone-flip")]
public static UIcons PhoneFlip;
    [NameAttribute("fi-rr-phone-guide")]
public static UIcons PhoneGuide;
    [NameAttribute("fi-rr-phone-heart-message")]
public static UIcons PhoneHeartMessage;
    [NameAttribute("fi-rr-phone-office")]
public static UIcons PhoneOffice;
    [NameAttribute("fi-rr-phone-pause")]
public static UIcons PhonePause;
    [NameAttribute("fi-rr-phone-plus")]
public static UIcons PhonePlus;
    [NameAttribute("fi-rr-phone-rotary")]
public static UIcons PhoneRotary;
    [NameAttribute("fi-rr-phone-slash")]
public static UIcons PhoneSlash;
    [NameAttribute("fi-rr-photo-capture")]
public static UIcons PhotoCapture;
    [NameAttribute("fi-rr-photo-film-music")]
public static UIcons PhotoFilmMusic;
    [NameAttribute("fi-rr-photo-video")]
public static UIcons PhotoVideo;
    [NameAttribute("fi-rr-physics")]
public static UIcons Physics;
    [NameAttribute("fi-rr-Pi")]
public static UIcons Pi;
    [NameAttribute("fi-rr-piano")]
public static UIcons Piano;
    [NameAttribute("fi-rr-piano-keyboard")]
public static UIcons PianoKeyboard;
    [NameAttribute("fi-rr-pickaxe")]
public static UIcons Pickaxe;
    [NameAttribute("fi-rr-picking")]
public static UIcons Picking;
    [NameAttribute("fi-rr-picking-box")]
public static UIcons PickingBox;
    [NameAttribute("fi-rr-picnic")]
public static UIcons Picnic;
    [NameAttribute("fi-rr-picpeople")]
public static UIcons Picpeople;
    [NameAttribute("fi-rr-picpeople-filled")]
public static UIcons PicpeopleFilled;
    [NameAttribute("fi-rr-picture")]
public static UIcons Picture;
    [NameAttribute("fi-rr-pie")]
public static UIcons Pie;
    [NameAttribute("fi-rr-piece")]
public static UIcons Piece;
    [NameAttribute("fi-rr-pig")]
public static UIcons Pig;
    [NameAttribute("fi-rr-pig-bank-bulb")]
public static UIcons PigBankBulb;
    [NameAttribute("fi-rr-pig-face")]
public static UIcons PigFace;
    [NameAttribute("fi-rr-piggy-bank")]
public static UIcons PiggyBank;
    [NameAttribute("fi-rr-piggy-bank-budget")]
public static UIcons PiggyBankBudget;
    [NameAttribute("fi-rr-pills")]
public static UIcons Pills;
    [NameAttribute("fi-rr-pinata")]
public static UIcons Pinata;
    [NameAttribute("fi-rr-pineapple")]
public static UIcons Pineapple;
    [NameAttribute("fi-rr-pineapple-alt")]
public static UIcons PineappleAlt;
    [NameAttribute("fi-rr-ping-pong")]
public static UIcons PingPong;
    [NameAttribute("fi-rr-pipe-smoking")]
public static UIcons PipeSmoking;
    [NameAttribute("fi-rr-pipette")]
public static UIcons Pipette;
    [NameAttribute("fi-rr-pixabay")]
public static UIcons Pixabay;
    [NameAttribute("fi-rr-pizza-slice")]
public static UIcons PizzaSlice;
    [NameAttribute("fi-rr-place-of-worship")]
public static UIcons PlaceOfWorship;
    [NameAttribute("fi-rr-plan")]
public static UIcons Plan;
    [NameAttribute("fi-rr-plan-strategy")]
public static UIcons PlanStrategy;
    [NameAttribute("fi-rr-plane")]
public static UIcons Plane;
    [NameAttribute("fi-rr-plane-alt")]
public static UIcons PlaneAlt;
    [NameAttribute("fi-rr-plane-arrival")]
public static UIcons PlaneArrival;
    [NameAttribute("fi-rr-plane-departure")]
public static UIcons PlaneDeparture;
    [NameAttribute("fi-rr-plane-prop")]
public static UIcons PlaneProp;
    [NameAttribute("fi-rr-plane-slash")]
public static UIcons PlaneSlash;
    [NameAttribute("fi-rr-plane-tail")]
public static UIcons PlaneTail;
    [NameAttribute("fi-rr-planet-moon")]
public static UIcons PlanetMoon;
    [NameAttribute("fi-rr-planet-ringed")]
public static UIcons PlanetRinged;
    [NameAttribute("fi-rr-plant-care")]
public static UIcons PlantCare;
    [NameAttribute("fi-rr-plant-growth")]
public static UIcons PlantGrowth;
    [NameAttribute("fi-rr-plant-seed-invest")]
public static UIcons PlantSeedInvest;
    [NameAttribute("fi-rr-plant-wilt")]
public static UIcons PlantWilt;
    [NameAttribute("fi-rr-plate")]
public static UIcons Plate;
    [NameAttribute("fi-rr-plate-utensils")]
public static UIcons PlateUtensils;
    [NameAttribute("fi-rr-plate-wheat")]
public static UIcons PlateWheat;
    [NameAttribute("fi-rr-play")]
public static UIcons Play;
    [NameAttribute("fi-rr-play-alt")]
public static UIcons PlayAlt;
    [NameAttribute("fi-rr-play-circle")]
public static UIcons PlayCircle;
    [NameAttribute("fi-rr-play-microphone")]
public static UIcons PlayMicrophone;
    [NameAttribute("fi-rr-play-pause")]
public static UIcons PlayPause;
    [NameAttribute("fi-rr-playing-cards")]
public static UIcons PlayingCards;
    [NameAttribute("fi-rr-plug")]
public static UIcons Plug;
    [NameAttribute("fi-rr-plug-alt")]
public static UIcons PlugAlt;
    [NameAttribute("fi-rr-plug-cable")]
public static UIcons PlugCable;
    [NameAttribute("fi-rr-plug-circle-bolt")]
public static UIcons PlugCircleBolt;
    [NameAttribute("fi-rr-plug-circle-check")]
public static UIcons PlugCircleCheck;
    [NameAttribute("fi-rr-plug-circle-exclamation")]
public static UIcons PlugCircleExclamation;
    [NameAttribute("fi-rr-plug-circle-minus")]
public static UIcons PlugCircleMinus;
    [NameAttribute("fi-rr-plug-circle-plus")]
public static UIcons PlugCirclePlus;
    [NameAttribute("fi-rr-plug-connection")]
public static UIcons PlugConnection;
    [NameAttribute("fi-rr-plus")]
public static UIcons Plus;
    [NameAttribute("fi-rr-plus-hexagon")]
public static UIcons PlusHexagon;
    [NameAttribute("fi-rr-plus-minus")]
public static UIcons PlusMinus;
    [NameAttribute("fi-rr-plus-small")]
public static UIcons PlusSmall;
    [NameAttribute("fi-rr-png-file")]
public static UIcons PngFile;
    [NameAttribute("fi-rr-podcast")]
public static UIcons Podcast;
    [NameAttribute("fi-rr-podium")]
public static UIcons Podium;
    [NameAttribute("fi-rr-podium-star")]
public static UIcons PodiumStar;
    [NameAttribute("fi-rr-podium-victory-leader")]
public static UIcons PodiumVictoryLeader;
    [NameAttribute("fi-rr-point-of-sale")]
public static UIcons PointOfSale;
    [NameAttribute("fi-rr-point-of-sale-bill")]
public static UIcons PointOfSaleBill;
    [NameAttribute("fi-rr-point-of-sale-signal")]
public static UIcons PointOfSaleSignal;
    [NameAttribute("fi-rr-pointer-loading")]
public static UIcons PointerLoading;
    [NameAttribute("fi-rr-pointer-text")]
public static UIcons PointerText;
    [NameAttribute("fi-rr-poker-chip")]
public static UIcons PokerChip;
    [NameAttribute("fi-rr-police-box")]
public static UIcons PoliceBox;
    [NameAttribute("fi-rr-poll-h")]
public static UIcons PollH;
    [NameAttribute("fi-rr-pollution")]
public static UIcons Pollution;
    [NameAttribute("fi-rr-pompebled")]
public static UIcons Pompebled;
    [NameAttribute("fi-rr-poo")]
public static UIcons Poo;
    [NameAttribute("fi-rr-poo-bolt")]
public static UIcons PooBolt;
    [NameAttribute("fi-rr-pool-8-ball")]
public static UIcons Pool8Ball;
    [NameAttribute("fi-rr-poop")]
public static UIcons Poop;
    [NameAttribute("fi-rr-popcorn")]
public static UIcons Popcorn;
    [NameAttribute("fi-rr-popsicle")]
public static UIcons Popsicle;
    [NameAttribute("fi-rr-portal-enter")]
public static UIcons PortalEnter;
    [NameAttribute("fi-rr-portal-exit")]
public static UIcons PortalExit;
    [NameAttribute("fi-rr-portrait")]
public static UIcons Portrait;
    [NameAttribute("fi-rr-postal-address")]
public static UIcons PostalAddress;
    [NameAttribute("fi-rr-pot")]
public static UIcons Pot;
    [NameAttribute("fi-rr-potato")]
public static UIcons Potato;
    [NameAttribute("fi-rr-pound")]
public static UIcons Pound;
    [NameAttribute("fi-rr-power")]
public static UIcons Power;
    [NameAttribute("fi-rr-ppt-file")]
public static UIcons PptFile;
    [NameAttribute("fi-rr-practice")]
public static UIcons Practice;
    [NameAttribute("fi-rr-praying-hands")]
public static UIcons PrayingHands;
    [NameAttribute("fi-rr-prescription")]
public static UIcons Prescription;
    [NameAttribute("fi-rr-prescription-bottle")]
public static UIcons PrescriptionBottle;
    [NameAttribute("fi-rr-prescription-bottle-alt")]
public static UIcons PrescriptionBottleAlt;
    [NameAttribute("fi-rr-prescription-bottle-pill")]
public static UIcons PrescriptionBottlePill;
    [NameAttribute("fi-rr-presentation")]
public static UIcons Presentation;
    [NameAttribute("fi-rr-preview")]
public static UIcons Preview;
    [NameAttribute("fi-rr-previous-square")]
public static UIcons PreviousSquare;
    [NameAttribute("fi-rr-print")]
public static UIcons Print;
    [NameAttribute("fi-rr-print-magnifying-glass")]
public static UIcons PrintMagnifyingGlass;
    [NameAttribute("fi-rr-print-slash")]
public static UIcons PrintSlash;
    [NameAttribute("fi-rr-priority-arrow")]
public static UIcons PriorityArrow;
    [NameAttribute("fi-rr-priority-arrows")]
public static UIcons PriorityArrows;
    [NameAttribute("fi-rr-priority-importance")]
public static UIcons PriorityImportance;
    [NameAttribute("fi-rr-problem-solving")]
public static UIcons ProblemSolving;
    [NameAttribute("fi-rr-procedures")]
public static UIcons Procedures;
    [NameAttribute("fi-rr-process")]
public static UIcons Process;
    [NameAttribute("fi-rr-productivity")]
public static UIcons Productivity;
    [NameAttribute("fi-rr-progress-complete")]
public static UIcons ProgressComplete;
    [NameAttribute("fi-rr-progress-download")]
public static UIcons ProgressDownload;
    [NameAttribute("fi-rr-progress-upload")]
public static UIcons ProgressUpload;
    [NameAttribute("fi-rr-projector")]
public static UIcons Projector;
    [NameAttribute("fi-rr-protractor")]
public static UIcons Protractor;
    [NameAttribute("fi-rr-pulse")]
public static UIcons Pulse;
    [NameAttribute("fi-rr-pump")]
public static UIcons Pump;
    [NameAttribute("fi-rr-pump-medical")]
public static UIcons PumpMedical;
    [NameAttribute("fi-rr-pumpkin")]
public static UIcons Pumpkin;
    [NameAttribute("fi-rr-pumpkin-alt")]
public static UIcons PumpkinAlt;
    [NameAttribute("fi-rr-pumpkin-alt-2")]
public static UIcons PumpkinAlt2;
    [NameAttribute("fi-rr-puzzle")]
public static UIcons Puzzle;
    [NameAttribute("fi-rr-puzzle-alt")]
public static UIcons PuzzleAlt;
    [NameAttribute("fi-rr-puzzle-piece")]
public static UIcons PuzzlePiece;
    [NameAttribute("fi-rr-puzzle-piece-integration")]
public static UIcons PuzzlePieceIntegration;
    [NameAttribute("fi-rr-puzzle-pieces")]
public static UIcons PuzzlePieces;
    [NameAttribute("fi-rr-pyramid")]
public static UIcons Pyramid;
    [NameAttribute("fi-rr-q")]
public static UIcons Q;
    [NameAttribute("fi-rr-QR")]
public static UIcons QR;
    [NameAttribute("fi-rr-qr-scan")]
public static UIcons QrScan;
    [NameAttribute("fi-rr-qrcode")]
public static UIcons Qrcode;
    [NameAttribute("fi-rr-question")]
public static UIcons Question;
    [NameAttribute("fi-rr-question-square")]
public static UIcons QuestionSquare;
    [NameAttribute("fi-rr-queue")]
public static UIcons Queue;
    [NameAttribute("fi-rr-queue-alt")]
public static UIcons QueueAlt;
    [NameAttribute("fi-rr-queue-line")]
public static UIcons QueueLine;
    [NameAttribute("fi-rr-queue-signal")]
public static UIcons QueueSignal;
    [NameAttribute("fi-rr-quill-pen-story")]
public static UIcons QuillPenStory;
    [NameAttribute("fi-rr-quiz")]
public static UIcons Quiz;
    [NameAttribute("fi-rr-quiz-alt")]
public static UIcons QuizAlt;
    [NameAttribute("fi-rr-quote-right")]
public static UIcons QuoteRight;
    [NameAttribute("fi-rr-r")]
public static UIcons R;
    [NameAttribute("fi-rr-rabbit")]
public static UIcons Rabbit;
    [NameAttribute("fi-rr-rabbit-fast")]
public static UIcons RabbitFast;
    [NameAttribute("fi-rr-raccoon")]
public static UIcons Raccoon;
    [NameAttribute("fi-rr-racquet")]
public static UIcons Racquet;
    [NameAttribute("fi-rr-radar")]
public static UIcons Radar;
    [NameAttribute("fi-rr-radar-monitoring-track")]
public static UIcons RadarMonitoringTrack;
    [NameAttribute("fi-rr-radiation")]
public static UIcons Radiation;
    [NameAttribute("fi-rr-radiation-alt")]
public static UIcons RadiationAlt;
    [NameAttribute("fi-rr-radio")]
public static UIcons Radio;
    [NameAttribute("fi-rr-radio-alt")]
public static UIcons RadioAlt;
    [NameAttribute("fi-rr-radio-button")]
public static UIcons RadioButton;
    [NameAttribute("fi-rr-radish")]
public static UIcons Radish;
    [NameAttribute("fi-rr-rainbow")]
public static UIcons Rainbow;
    [NameAttribute("fi-rr-raindrops")]
public static UIcons Raindrops;
    [NameAttribute("fi-rr-ram")]
public static UIcons Ram;
    [NameAttribute("fi-rr-ramp-loading")]
public static UIcons RampLoading;
    [NameAttribute("fi-rr-rank")]
public static UIcons Rank;
    [NameAttribute("fi-rr-ranking-podium")]
public static UIcons RankingPodium;
    [NameAttribute("fi-rr-ranking-podium-empty")]
public static UIcons RankingPodiumEmpty;
    [NameAttribute("fi-rr-ranking-star")]
public static UIcons RankingStar;
    [NameAttribute("fi-rr-ranking-stars")]
public static UIcons RankingStars;
    [NameAttribute("fi-rr-raygun")]
public static UIcons Raygun;
    [NameAttribute("fi-rr-razor-barber")]
public static UIcons RazorBarber;
    [NameAttribute("fi-rr-react")]
public static UIcons React;
    [NameAttribute("fi-rr-rec")]
public static UIcons Rec;
    [NameAttribute("fi-rr-receipt")]
public static UIcons Receipt;
    [NameAttribute("fi-rr-recipe")]
public static UIcons Recipe;
    [NameAttribute("fi-rr-recipe-book")]
public static UIcons RecipeBook;
    [NameAttribute("fi-rr-record-vinyl")]
public static UIcons RecordVinyl;
    [NameAttribute("fi-rr-rectabgle-vertical")]
public static UIcons RectabgleVertical;
    [NameAttribute("fi-rr-rectangle-barcode")]
public static UIcons RectangleBarcode;
    [NameAttribute("fi-rr-rectangle-code")]
public static UIcons RectangleCode;
    [NameAttribute("fi-rr-rectangle-history-circle-plus")]
public static UIcons RectangleHistoryCirclePlus;
    [NameAttribute("fi-rr-rectangle-horizontal")]
public static UIcons RectangleHorizontal;
    [NameAttribute("fi-rr-rectangle-list")]
public static UIcons RectangleList;
    [NameAttribute("fi-rr-rectangle-panoramic")]
public static UIcons RectanglePanoramic;
    [NameAttribute("fi-rr-rectangle-pro")]
public static UIcons RectanglePro;
    [NameAttribute("fi-rr-rectangle-vertical")]
public static UIcons RectangleVertical;
    [NameAttribute("fi-rr-rectangle-vertical-history")]
public static UIcons RectangleVerticalHistory;
    [NameAttribute("fi-rr-rectangle-xmark")]
public static UIcons RectangleXmark;
    [NameAttribute("fi-rr-rectangles-mixed")]
public static UIcons RectanglesMixed;
    [NameAttribute("fi-rr-recycle")]
public static UIcons Recycle;
    [NameAttribute("fi-rr-recycle-bin")]
public static UIcons RecycleBin;
    [NameAttribute("fi-rr-redo")]
public static UIcons Redo;
    [NameAttribute("fi-rr-redo-alt")]
public static UIcons RedoAlt;
    [NameAttribute("fi-rr-reel")]
public static UIcons Reel;
    [NameAttribute("fi-rr-refer")]
public static UIcons Refer;
    [NameAttribute("fi-rr-refer-arrow")]
public static UIcons ReferArrow;
    [NameAttribute("fi-rr-referral")]
public static UIcons Referral;
    [NameAttribute("fi-rr-referral-alt")]
public static UIcons ReferralAlt;
    [NameAttribute("fi-rr-referral-user")]
public static UIcons ReferralUser;
    [NameAttribute("fi-rr-reflect")]
public static UIcons Reflect;
    [NameAttribute("fi-rr-reflect-horizontal")]
public static UIcons ReflectHorizontal;
    [NameAttribute("fi-rr-reflect-horizontal-alt")]
public static UIcons ReflectHorizontalAlt;
    [NameAttribute("fi-rr-reflect-vertical")]
public static UIcons ReflectVertical;
    [NameAttribute("fi-rr-refresh")]
public static UIcons Refresh;
    [NameAttribute("fi-rr-refrigerator")]
public static UIcons Refrigerator;
    [NameAttribute("fi-rr-refund")]
public static UIcons Refund;
    [NameAttribute("fi-rr-refund-alt")]
public static UIcons RefundAlt;
    [NameAttribute("fi-rr-region-pin")]
public static UIcons RegionPin;
    [NameAttribute("fi-rr-region-pin-alt")]
public static UIcons RegionPinAlt;
    [NameAttribute("fi-rr-registered")]
public static UIcons Registered;
    [NameAttribute("fi-rr-registration-paper")]
public static UIcons RegistrationPaper;
    [NameAttribute("fi-rr-remove-folder")]
public static UIcons RemoveFolder;
    [NameAttribute("fi-rr-remove-user")]
public static UIcons RemoveUser;
    [NameAttribute("fi-rr-rent")]
public static UIcons Rent;
    [NameAttribute("fi-rr-rent-signal")]
public static UIcons RentSignal;
    [NameAttribute("fi-rr-replace")]
public static UIcons Replace;
    [NameAttribute("fi-rr-replay-10")]
public static UIcons Replay10;
    [NameAttribute("fi-rr-replay-30")]
public static UIcons Replay30;
    [NameAttribute("fi-rr-replay-5")]
public static UIcons Replay5;
    [NameAttribute("fi-rr-reply-all")]
public static UIcons ReplyAll;
    [NameAttribute("fi-rr-republican")]
public static UIcons Republican;
    [NameAttribute("fi-rr-reservation-smartphone")]
public static UIcons ReservationSmartphone;
    [NameAttribute("fi-rr-reservation-table")]
public static UIcons ReservationTable;
    [NameAttribute("fi-rr-resistance-band")]
public static UIcons ResistanceBand;
    [NameAttribute("fi-rr-resize")]
public static UIcons Resize;
    [NameAttribute("fi-rr-resources")]
public static UIcons Resources;
    [NameAttribute("fi-rr-restaurant")]
public static UIcons Restaurant;
    [NameAttribute("fi-rr-restock")]
public static UIcons Restock;
    [NameAttribute("fi-rr-restroom-simple")]
public static UIcons RestroomSimple;
    [NameAttribute("fi-rr-resume")]
public static UIcons Resume;
    [NameAttribute("fi-rr-Revenue")]
public static UIcons Revenue;
    [NameAttribute("fi-rr-revenue-alt")]
public static UIcons RevenueAlt;
    [NameAttribute("fi-rr-revenue-euro")]
public static UIcons RevenueEuro;
    [NameAttribute("fi-rr-review")]
public static UIcons Review;
    [NameAttribute("fi-rr-rewind")]
public static UIcons Rewind;
    [NameAttribute("fi-rr-rewind-button-circle")]
public static UIcons RewindButtonCircle;
    [NameAttribute("fi-rr-rhombus")]
public static UIcons Rhombus;
    [NameAttribute("fi-rr-ribbon")]
public static UIcons Ribbon;
    [NameAttribute("fi-rr-right")]
public static UIcons Right;
    [NameAttribute("fi-rr-right-from-bracket")]
public static UIcons RightFromBracket;
    [NameAttribute("fi-rr-ring")]
public static UIcons Ring;
    [NameAttribute("fi-rr-ring-diamond")]
public static UIcons RingDiamond;
    [NameAttribute("fi-rr-rings-wedding")]
public static UIcons RingsWedding;
    [NameAttribute("fi-rr-risk")]
public static UIcons Risk;
    [NameAttribute("fi-rr-risk-alt")]
public static UIcons RiskAlt;
    [NameAttribute("fi-rr-road")]
public static UIcons Road;
    [NameAttribute("fi-rr-road-barrier")]
public static UIcons RoadBarrier;
    [NameAttribute("fi-rr-road-sign-left")]
public static UIcons RoadSignLeft;
    [NameAttribute("fi-rr-robot")]
public static UIcons Robot;
    [NameAttribute("fi-rr-robotic-arm")]
public static UIcons RoboticArm;
    [NameAttribute("fi-rr-rocket")]
public static UIcons Rocket;
    [NameAttribute("fi-rr-rocket-lunch")]
public static UIcons RocketLunch;
    [NameAttribute("fi-rr-roller-coaster")]
public static UIcons RollerCoaster;
    [NameAttribute("fi-rr-room-service")]
public static UIcons RoomService;
    [NameAttribute("fi-rr-rotate-exclamation")]
public static UIcons RotateExclamation;
    [NameAttribute("fi-rr-rotate-left")]
public static UIcons RotateLeft;
    [NameAttribute("fi-rr-rotate-reverse")]
public static UIcons RotateReverse;
    [NameAttribute("fi-rr-rotate-right")]
public static UIcons RotateRight;
    [NameAttribute("fi-rr-rotate-square")]
public static UIcons RotateSquare;
    [NameAttribute("fi-rr-roulette")]
public static UIcons Roulette;
    [NameAttribute("fi-rr-route")]
public static UIcons Route;
    [NameAttribute("fi-rr-route-highway")]
public static UIcons RouteHighway;
    [NameAttribute("fi-rr-route-interstate")]
public static UIcons RouteInterstate;
    [NameAttribute("fi-rr-router")]
public static UIcons Router;
    [NameAttribute("fi-rr-rss")]
public static UIcons Rss;
    [NameAttribute("fi-rr-rss-alt")]
public static UIcons RssAlt;
    [NameAttribute("fi-rr-ruble-sign")]
public static UIcons RubleSign;
    [NameAttribute("fi-rr-rugby")]
public static UIcons Rugby;
    [NameAttribute("fi-rr-rugby-helmet")]
public static UIcons RugbyHelmet;
    [NameAttribute("fi-rr-ruler-combined")]
public static UIcons RulerCombined;
    [NameAttribute("fi-rr-ruler-horizontal")]
public static UIcons RulerHorizontal;
    [NameAttribute("fi-rr-ruler-triangle")]
public static UIcons RulerTriangle;
    [NameAttribute("fi-rr-ruler-vertical")]
public static UIcons RulerVertical;
    [NameAttribute("fi-rr-rules")]
public static UIcons Rules;
    [NameAttribute("fi-rr-rules-alt")]
public static UIcons RulesAlt;
    [NameAttribute("fi-rr-running")]
public static UIcons Running;
    [NameAttribute("fi-rr-running-track")]
public static UIcons RunningTrack;
    [NameAttribute("fi-rr-rupee-sign")]
public static UIcons RupeeSign;
    [NameAttribute("fi-rr-rupiah-sign")]
public static UIcons RupiahSign;
    [NameAttribute("fi-rr-rv")]
public static UIcons Rv;
    [NameAttribute("fi-rr-s")]
public static UIcons S;
    [NameAttribute("fi-rr-sack")]
public static UIcons Sack;
    [NameAttribute("fi-rr-sack-dollar")]
public static UIcons SackDollar;
    [NameAttribute("fi-rr-sad")]
public static UIcons Sad;
    [NameAttribute("fi-rr-sad-cry")]
public static UIcons SadCry;
    [NameAttribute("fi-rr-sad-tear")]
public static UIcons SadTear;
    [NameAttribute("fi-rr-safe-box")]
public static UIcons SafeBox;
    [NameAttribute("fi-rr-sailboat")]
public static UIcons Sailboat;
    [NameAttribute("fi-rr-salad")]
public static UIcons Salad;
    [NameAttribute("fi-rr-salary-alt")]
public static UIcons SalaryAlt;
    [NameAttribute("fi-rr-salt-pepper")]
public static UIcons SaltPepper;
    [NameAttribute("fi-rr-salt-shaker")]
public static UIcons SaltShaker;
    [NameAttribute("fi-rr-sandwich")]
public static UIcons Sandwich;
    [NameAttribute("fi-rr-sandwich-alt")]
public static UIcons SandwichAlt;
    [NameAttribute("fi-rr-satellite")]
public static UIcons Satellite;
    [NameAttribute("fi-rr-satellite-dish")]
public static UIcons SatelliteDish;
    [NameAttribute("fi-rr-saturday")]
public static UIcons Saturday;
    [NameAttribute("fi-rr-sauce")]
public static UIcons Sauce;
    [NameAttribute("fi-rr-sausage")]
public static UIcons Sausage;
    [NameAttribute("fi-rr-sax-hot")]
public static UIcons SaxHot;
    [NameAttribute("fi-rr-saxophone")]
public static UIcons Saxophone;
    [NameAttribute("fi-rr-scale")]
public static UIcons Scale;
    [NameAttribute("fi-rr-scale-comparison")]
public static UIcons ScaleComparison;
    [NameAttribute("fi-rr-scale-comparison-alt")]
public static UIcons ScaleComparisonAlt;
    [NameAttribute("fi-rr-scalpel")]
public static UIcons Scalpel;
    [NameAttribute("fi-rr-scalpel-path")]
public static UIcons ScalpelPath;
    [NameAttribute("fi-rr-scanner-gun")]
public static UIcons ScannerGun;
    [NameAttribute("fi-rr-scanner-image")]
public static UIcons ScannerImage;
    [NameAttribute("fi-rr-scanner-keyboard")]
public static UIcons ScannerKeyboard;
    [NameAttribute("fi-rr-scanner-touchscreen")]
public static UIcons ScannerTouchscreen;
    [NameAttribute("fi-rr-scarecrow")]
public static UIcons Scarecrow;
    [NameAttribute("fi-rr-scarf")]
public static UIcons Scarf;
    [NameAttribute("fi-rr-school")]
public static UIcons School;
    [NameAttribute("fi-rr-school-bus")]
public static UIcons SchoolBus;
    [NameAttribute("fi-rr-scissors")]
public static UIcons Scissors;
    [NameAttribute("fi-rr-scooter")]
public static UIcons Scooter;
    [NameAttribute("fi-rr-screen")]
public static UIcons Screen;
    [NameAttribute("fi-rr-screencast")]
public static UIcons Screencast;
    [NameAttribute("fi-rr-screw")]
public static UIcons Screw;
    [NameAttribute("fi-rr-screw-alt")]
public static UIcons ScrewAlt;
    [NameAttribute("fi-rr-screwdriver")]
public static UIcons Screwdriver;
    [NameAttribute("fi-rr-scribble")]
public static UIcons Scribble;
    [NameAttribute("fi-rr-script")]
public static UIcons Script;
    [NameAttribute("fi-rr-scroll")]
public static UIcons Scroll;
    [NameAttribute("fi-rr-scroll-document-story")]
public static UIcons ScrollDocumentStory;
    [NameAttribute("fi-rr-scroll-old")]
public static UIcons ScrollOld;
    [NameAttribute("fi-rr-scroll-torah")]
public static UIcons ScrollTorah;
    [NameAttribute("fi-rr-scrubber")]
public static UIcons Scrubber;
    [NameAttribute("fi-rr-scythe")]
public static UIcons Scythe;
    [NameAttribute("fi-rr-sd-card")]
public static UIcons SdCard;
    [NameAttribute("fi-rr-sd-cards")]
public static UIcons SdCards;
    [NameAttribute("fi-rr-seal")]
public static UIcons Seal;
    [NameAttribute("fi-rr-seal-exclamation")]
public static UIcons SealExclamation;
    [NameAttribute("fi-rr-seal-question")]
public static UIcons SealQuestion;
    [NameAttribute("fi-rr-search")]
public static UIcons Search;
    [NameAttribute("fi-rr-search-alt")]
public static UIcons SearchAlt;
    [NameAttribute("fi-rr-search-dollar")]
public static UIcons SearchDollar;
    [NameAttribute("fi-rr-search-heart")]
public static UIcons SearchHeart;
    [NameAttribute("fi-rr-search-location")]
public static UIcons SearchLocation;
    [NameAttribute("fi-rr-seat-airline")]
public static UIcons SeatAirline;
    [NameAttribute("fi-rr-seatbelt-safety-driver")]
public static UIcons SeatbeltSafetyDriver;
    [NameAttribute("fi-rr-second")]
public static UIcons Second;
    [NameAttribute("fi-rr-second-award")]
public static UIcons SecondAward;
    [NameAttribute("fi-rr-second-laurel")]
public static UIcons SecondLaurel;
    [NameAttribute("fi-rr-second-medal")]
public static UIcons SecondMedal;
    [NameAttribute("fi-rr-security")]
public static UIcons Security;
    [NameAttribute("fi-rr-seedling")]
public static UIcons Seedling;
    [NameAttribute("fi-rr-select")]
public static UIcons Select;
    [NameAttribute("fi-rr-selection")]
public static UIcons Selection;
    [NameAttribute("fi-rr-sell")]
public static UIcons Sell;
    [NameAttribute("fi-rr-seller")]
public static UIcons Seller;
    [NameAttribute("fi-rr-seller-store")]
public static UIcons SellerStore;
    [NameAttribute("fi-rr-selling")]
public static UIcons Selling;
    [NameAttribute("fi-rr-send-back")]
public static UIcons SendBack;
    [NameAttribute("fi-rr-send-backward")]
public static UIcons SendBackward;
    [NameAttribute("fi-rr-send-money")]
public static UIcons SendMoney;
    [NameAttribute("fi-rr-send-money-smartphone")]
public static UIcons SendMoneySmartphone;
    [NameAttribute("fi-rr-sensor")]
public static UIcons Sensor;
    [NameAttribute("fi-rr-sensor-alert")]
public static UIcons SensorAlert;
    [NameAttribute("fi-rr-sensor-fire")]
public static UIcons SensorFire;
    [NameAttribute("fi-rr-sensor-on")]
public static UIcons SensorOn;
    [NameAttribute("fi-rr-sensor-smoke")]
public static UIcons SensorSmoke;
    [NameAttribute("fi-rr-settings")]
public static UIcons Settings;
    [NameAttribute("fi-rr-settings-sliders")]
public static UIcons SettingsSliders;
    [NameAttribute("fi-rr-share")]
public static UIcons Share;
    [NameAttribute("fi-rr-share-alt-square")]
public static UIcons ShareAltSquare;
    [NameAttribute("fi-rr-share-square")]
public static UIcons ShareSquare;
    [NameAttribute("fi-rr-sheep")]
public static UIcons Sheep;
    [NameAttribute("fi-rr-shekel-sign")]
public static UIcons ShekelSign;
    [NameAttribute("fi-rr-shelves")]
public static UIcons Shelves;
    [NameAttribute("fi-rr-shield")]
public static UIcons Shield;
    [NameAttribute("fi-rr-shield-alt")]
public static UIcons ShieldAlt;
    [NameAttribute("fi-rr-shield-cat")]
public static UIcons ShieldCat;
    [NameAttribute("fi-rr-shield-check")]
public static UIcons ShieldCheck;
    [NameAttribute("fi-rr-shield-cross")]
public static UIcons ShieldCross;
    [NameAttribute("fi-rr-shield-dog")]
public static UIcons ShieldDog;
    [NameAttribute("fi-rr-shield-exclamation")]
public static UIcons ShieldExclamation;
    [NameAttribute("fi-rr-shield-interrogation")]
public static UIcons ShieldInterrogation;
    [NameAttribute("fi-rr-shield-keyhole")]
public static UIcons ShieldKeyhole;
    [NameAttribute("fi-rr-shield-minus")]
public static UIcons ShieldMinus;
    [NameAttribute("fi-rr-shield-plus")]
public static UIcons ShieldPlus;
    [NameAttribute("fi-rr-shield-security-risk")]
public static UIcons ShieldSecurityRisk;
    [NameAttribute("fi-rr-shield-slash")]
public static UIcons ShieldSlash;
    [NameAttribute("fi-rr-shield-trust")]
public static UIcons ShieldTrust;
    [NameAttribute("fi-rr-shield-virus")]
public static UIcons ShieldVirus;
    [NameAttribute("fi-rr-shield-xmark")]
public static UIcons ShieldXmark;
    [NameAttribute("fi-rr-ship")]
public static UIcons Ship;
    [NameAttribute("fi-rr-ship-side")]
public static UIcons ShipSide;
    [NameAttribute("fi-rr-shipping-fast")]
public static UIcons ShippingFast;
    [NameAttribute("fi-rr-shipping-timed")]
public static UIcons ShippingTimed;
    [NameAttribute("fi-rr-shirt")]
public static UIcons Shirt;
    [NameAttribute("fi-rr-shirt-long-sleeve")]
public static UIcons ShirtLongSleeve;
    [NameAttribute("fi-rr-shirt-running")]
public static UIcons ShirtRunning;
    [NameAttribute("fi-rr-shirt-tank-top")]
public static UIcons ShirtTankTop;
    [NameAttribute("fi-rr-shish-kebab")]
public static UIcons ShishKebab;
    [NameAttribute("fi-rr-shoe-prints")]
public static UIcons ShoePrints;
    [NameAttribute("fi-rr-shop")]
public static UIcons Shop;
    [NameAttribute("fi-rr-shop-lock")]
public static UIcons ShopLock;
    [NameAttribute("fi-rr-shop-slash")]
public static UIcons ShopSlash;
    [NameAttribute("fi-rr-shopping-bag")]
public static UIcons ShoppingBag;
    [NameAttribute("fi-rr-shopping-bag-add")]
public static UIcons ShoppingBagAdd;
    [NameAttribute("fi-rr-shopping-basket")]
public static UIcons ShoppingBasket;
    [NameAttribute("fi-rr-shopping-cart")]
public static UIcons ShoppingCart;
    [NameAttribute("fi-rr-shopping-cart-add")]
public static UIcons ShoppingCartAdd;
    [NameAttribute("fi-rr-shopping-cart-buyer")]
public static UIcons ShoppingCartBuyer;
    [NameAttribute("fi-rr-shopping-cart-check")]
public static UIcons ShoppingCartCheck;
    [NameAttribute("fi-rr-shovel")]
public static UIcons Shovel;
    [NameAttribute("fi-rr-shovel-snow")]
public static UIcons ShovelSnow;
    [NameAttribute("fi-rr-shower")]
public static UIcons Shower;
    [NameAttribute("fi-rr-shower-down")]
public static UIcons ShowerDown;
    [NameAttribute("fi-rr-shredder")]
public static UIcons Shredder;
    [NameAttribute("fi-rr-shrimp")]
public static UIcons Shrimp;
    [NameAttribute("fi-rr-shuffle")]
public static UIcons Shuffle;
    [NameAttribute("fi-rr-shuttle-van")]
public static UIcons ShuttleVan;
    [NameAttribute("fi-rr-shuttlecock")]
public static UIcons Shuttlecock;
    [NameAttribute("fi-rr-Sickle")]
public static UIcons Sickle;
    [NameAttribute("fi-rr-sidebar")]
public static UIcons Sidebar;
    [NameAttribute("fi-rr-sidebar-flip")]
public static UIcons SidebarFlip;
    [NameAttribute("fi-rr-sigma")]
public static UIcons Sigma;
    [NameAttribute("fi-rr-sign-hanging")]
public static UIcons SignHanging;
    [NameAttribute("fi-rr-sign-in-alt")]
public static UIcons SignInAlt;
    [NameAttribute("fi-rr-sign-out-alt")]
public static UIcons SignOutAlt;
    [NameAttribute("fi-rr-sign-posts")]
public static UIcons SignPosts;
    [NameAttribute("fi-rr-sign-posts-wrench")]
public static UIcons SignPostsWrench;
    [NameAttribute("fi-rr-sign-up")]
public static UIcons SignUp;
    [NameAttribute("fi-rr-signal-alt")]
public static UIcons SignalAlt;
    [NameAttribute("fi-rr-signal-alt-1")]
public static UIcons SignalAlt1;
    [NameAttribute("fi-rr-signal-alt-2")]
public static UIcons SignalAlt2;
    [NameAttribute("fi-rr-signal-alt-slash")]
public static UIcons SignalAltSlash;
    [NameAttribute("fi-rr-signal-bars-fair")]
public static UIcons SignalBarsFair;
    [NameAttribute("fi-rr-signal-bars-good")]
public static UIcons SignalBarsGood;
    [NameAttribute("fi-rr-signal-bars-weak")]
public static UIcons SignalBarsWeak;
    [NameAttribute("fi-rr-signal-stream")]
public static UIcons SignalStream;
    [NameAttribute("fi-rr-signal-stream-slash")]
public static UIcons SignalStreamSlash;
    [NameAttribute("fi-rr-signature")]
public static UIcons Signature;
    [NameAttribute("fi-rr-signature-lock")]
public static UIcons SignatureLock;
    [NameAttribute("fi-rr-signature-slash")]
public static UIcons SignatureSlash;
    [NameAttribute("fi-rr-sim-card")]
public static UIcons SimCard;
    [NameAttribute("fi-rr-sim-cards")]
public static UIcons SimCards;
    [NameAttribute("fi-rr-sink")]
public static UIcons Sink;
    [NameAttribute("fi-rr-Siren")]
public static UIcons Siren;
    [NameAttribute("fi-rr-siren-on")]
public static UIcons SirenOn;
    [NameAttribute("fi-rr-site")]
public static UIcons Site;
    [NameAttribute("fi-rr-site-alt")]
public static UIcons SiteAlt;
    [NameAttribute("fi-rr-site-browser")]
public static UIcons SiteBrowser;
    [NameAttribute("fi-rr-sitemap")]
public static UIcons Sitemap;
    [NameAttribute("fi-rr-skateboard")]
public static UIcons Skateboard;
    [NameAttribute("fi-rr-skating")]
public static UIcons Skating;
    [NameAttribute("fi-rr-skeleton")]
public static UIcons Skeleton;
    [NameAttribute("fi-rr-skeleton-ribs")]
public static UIcons SkeletonRibs;
    [NameAttribute("fi-rr-skewer")]
public static UIcons Skewer;
    [NameAttribute("fi-rr-ski-boot-ski")]
public static UIcons SkiBootSki;
    [NameAttribute("fi-rr-ski-jump")]
public static UIcons SkiJump;
    [NameAttribute("fi-rr-ski-lift")]
public static UIcons SkiLift;
    [NameAttribute("fi-rr-skiing")]
public static UIcons Skiing;
    [NameAttribute("fi-rr-skiing-nordic")]
public static UIcons SkiingNordic;
    [NameAttribute("fi-rr-skill")]
public static UIcons Skill;
    [NameAttribute("fi-rr-skill-alt")]
public static UIcons SkillAlt;
    [NameAttribute("fi-rr-skill-user")]
public static UIcons SkillUser;
    [NameAttribute("fi-rr-skin")]
public static UIcons Skin;
    [NameAttribute("fi-rr-skin-arrow")]
public static UIcons SkinArrow;
    [NameAttribute("fi-rr-skin-drop")]
public static UIcons SkinDrop;
    [NameAttribute("fi-rr-skin-hair")]
public static UIcons SkinHair;
    [NameAttribute("fi-rr-skip-15-seconds")]
public static UIcons Skip15Seconds;
    [NameAttribute("fi-rr-skull")]
public static UIcons Skull;
    [NameAttribute("fi-rr-skull-cow")]
public static UIcons SkullCow;
    [NameAttribute("fi-rr-skull-crossbones")]
public static UIcons SkullCrossbones;
    [NameAttribute("fi-rr-slash")]
public static UIcons Slash;
    [NameAttribute("fi-rr-sledding")]
public static UIcons Sledding;
    [NameAttribute("fi-rr-sleeping-bag")]
public static UIcons SleepingBag;
    [NameAttribute("fi-rr-sleigh")]
public static UIcons Sleigh;
    [NameAttribute("fi-rr-sliders-h-square")]
public static UIcons SlidersHSquare;
    [NameAttribute("fi-rr-sliders-v")]
public static UIcons SlidersV;
    [NameAttribute("fi-rr-sliders-v-square")]
public static UIcons SlidersVSquare;
    [NameAttribute("fi-rr-slot-machine")]
public static UIcons SlotMachine;
    [NameAttribute("fi-rr-smart-home")]
public static UIcons SmartHome;
    [NameAttribute("fi-rr-smart-home-alt")]
public static UIcons SmartHomeAlt;
    [NameAttribute("fi-rr-smartphone")]
public static UIcons Smartphone;
    [NameAttribute("fi-rr-smile")]
public static UIcons Smile;
    [NameAttribute("fi-rr-smile-beam")]
public static UIcons SmileBeam;
    [NameAttribute("fi-rr-smile-plus")]
public static UIcons SmilePlus;
    [NameAttribute("fi-rr-smile-wink")]
public static UIcons SmileWink;
    [NameAttribute("fi-rr-smiley-comment-alt")]
public static UIcons SmileyCommentAlt;
    [NameAttribute("fi-rr-smog")]
public static UIcons Smog;
    [NameAttribute("fi-rr-smoke")]
public static UIcons Smoke;
    [NameAttribute("fi-rr-smoking")]
public static UIcons Smoking;
    [NameAttribute("fi-rr-smoking-ban")]
public static UIcons SmokingBan;
    [NameAttribute("fi-rr-snake")]
public static UIcons Snake;
    [NameAttribute("fi-rr-snap")]
public static UIcons Snap;
    [NameAttribute("fi-rr-snooze")]
public static UIcons Snooze;
    [NameAttribute("fi-rr-snow-blowing")]
public static UIcons SnowBlowing;
    [NameAttribute("fi-rr-snowboarding")]
public static UIcons Snowboarding;
    [NameAttribute("fi-rr-snowflake")]
public static UIcons Snowflake;
    [NameAttribute("fi-rr-snowflake-droplets")]
public static UIcons SnowflakeDroplets;
    [NameAttribute("fi-rr-snowflakes")]
public static UIcons Snowflakes;
    [NameAttribute("fi-rr-snowman-alt")]
public static UIcons SnowmanAlt;
    [NameAttribute("fi-rr-snowman-head")]
public static UIcons SnowmanHead;
    [NameAttribute("fi-rr-snowmobile")]
public static UIcons Snowmobile;
    [NameAttribute("fi-rr-snowplow")]
public static UIcons Snowplow;
    [NameAttribute("fi-rr-soap")]
public static UIcons Soap;
    [NameAttribute("fi-rr-soap-alt")]
public static UIcons SoapAlt;
    [NameAttribute("fi-rr-socks")]
public static UIcons Socks;
    [NameAttribute("fi-rr-sofa")]
public static UIcons Sofa;
    [NameAttribute("fi-rr-sofa-size")]
public static UIcons SofaSize;
    [NameAttribute("fi-rr-solar-panel")]
public static UIcons SolarPanel;
    [NameAttribute("fi-rr-solar-panel-sun")]
public static UIcons SolarPanelSun;
    [NameAttribute("fi-rr-solar-system")]
public static UIcons SolarSystem;
    [NameAttribute("fi-rr-sold-house")]
public static UIcons SoldHouse;
    [NameAttribute("fi-rr-sold-signal")]
public static UIcons SoldSignal;
    [NameAttribute("fi-rr-sort")]
public static UIcons Sort;
    [NameAttribute("fi-rr-sort-alpha-down")]
public static UIcons SortAlphaDown;
    [NameAttribute("fi-rr-sort-alpha-down-alt")]
public static UIcons SortAlphaDownAlt;
    [NameAttribute("fi-rr-sort-alpha-up")]
public static UIcons SortAlphaUp;
    [NameAttribute("fi-rr-sort-alpha-up-alt")]
public static UIcons SortAlphaUpAlt;
    [NameAttribute("fi-rr-sort-alt")]
public static UIcons SortAlt;
    [NameAttribute("fi-rr-sort-amount-down")]
public static UIcons SortAmountDown;
    [NameAttribute("fi-rr-sort-amount-down-alt")]
public static UIcons SortAmountDownAlt;
    [NameAttribute("fi-rr-sort-amount-up")]
public static UIcons SortAmountUp;
    [NameAttribute("fi-rr-sort-amount-up-alt")]
public static UIcons SortAmountUpAlt;
    [NameAttribute("fi-rr-sort-circle")]
public static UIcons SortCircle;
    [NameAttribute("fi-rr-sort-circle-down")]
public static UIcons SortCircleDown;
    [NameAttribute("fi-rr-sort-circle-up")]
public static UIcons SortCircleUp;
    [NameAttribute("fi-rr-sort-down")]
public static UIcons SortDown;
    [NameAttribute("fi-rr-sort-numeric-down")]
public static UIcons SortNumericDown;
    [NameAttribute("fi-rr-sort-numeric-down-alt")]
public static UIcons SortNumericDownAlt;
    [NameAttribute("fi-rr-sort-shapes-down")]
public static UIcons SortShapesDown;
    [NameAttribute("fi-rr-sort-shapes-up")]
public static UIcons SortShapesUp;
    [NameAttribute("fi-rr-sort-size-down")]
public static UIcons SortSizeDown;
    [NameAttribute("fi-rr-sort-size-up")]
public static UIcons SortSizeUp;
    [NameAttribute("fi-rr-soup")]
public static UIcons Soup;
    [NameAttribute("fi-rr-source-data")]
public static UIcons SourceData;
    [NameAttribute("fi-rr-source-document")]
public static UIcons SourceDocument;
    [NameAttribute("fi-rr-source-document-alt")]
public static UIcons SourceDocumentAlt;
    [NameAttribute("fi-rr-spa")]
public static UIcons Spa;
    [NameAttribute("fi-rr-space-shuttle")]
public static UIcons SpaceShuttle;
    [NameAttribute("fi-rr-space-station-moon")]
public static UIcons SpaceStationMoon;
    [NameAttribute("fi-rr-space-station-moon-alt")]
public static UIcons SpaceStationMoonAlt;
    [NameAttribute("fi-rr-spade")]
public static UIcons Spade;
    [NameAttribute("fi-rr-spaghetti-monster-flying")]
public static UIcons SpaghettiMonsterFlying;
    [NameAttribute("fi-rr-spain-map")]
public static UIcons SpainMap;
    [NameAttribute("fi-rr-sparkles")]
public static UIcons Sparkles;
    [NameAttribute("fi-rr-spartan-helmet")]
public static UIcons SpartanHelmet;
    [NameAttribute("fi-rr-speaker")]
public static UIcons Speaker;
    [NameAttribute("fi-rr-speakers")]
public static UIcons Speakers;
    [NameAttribute("fi-rr-speech-bubble-story")]
public static UIcons SpeechBubbleStory;
    [NameAttribute("fi-rr-speedometer-arrow")]
public static UIcons SpeedometerArrow;
    [NameAttribute("fi-rr-speedometer-kpi")]
public static UIcons SpeedometerKpi;
    [NameAttribute("fi-rr-sphere")]
public static UIcons Sphere;
    [NameAttribute("fi-rr-spider")]
public static UIcons Spider;
    [NameAttribute("fi-rr-spider-black-widow")]
public static UIcons SpiderBlackWidow;
    [NameAttribute("fi-rr-spider-web")]
public static UIcons SpiderWeb;
    [NameAttribute("fi-rr-spinner")]
public static UIcons Spinner;
    [NameAttribute("fi-rr-split")]
public static UIcons Split;
    [NameAttribute("fi-rr-split-up-relation")]
public static UIcons SplitUpRelation;
    [NameAttribute("fi-rr-splotch")]
public static UIcons Splotch;
    [NameAttribute("fi-rr-spoon")]
public static UIcons Spoon;
    [NameAttribute("fi-rr-sport")]
public static UIcons Sport;
    [NameAttribute("fi-rr-spray-can")]
public static UIcons SprayCan;
    [NameAttribute("fi-rr-spray-can-sparkles")]
public static UIcons SprayCanSparkles;
    [NameAttribute("fi-rr-spring-calendar")]
public static UIcons SpringCalendar;
    [NameAttribute("fi-rr-sprinkler")]
public static UIcons Sprinkler;
    [NameAttribute("fi-rr-spy")]
public static UIcons Spy;
    [NameAttribute("fi-rr-square")]
public static UIcons Square;
    [NameAttribute("fi-rr-square-0")]
public static UIcons Square0;
    [NameAttribute("fi-rr-square-1")]
public static UIcons Square1;
    [NameAttribute("fi-rr-square-2")]
public static UIcons Square2;
    [NameAttribute("fi-rr-square-3")]
public static UIcons Square3;
    [NameAttribute("fi-rr-square-4")]
public static UIcons Square4;
    [NameAttribute("fi-rr-square-5")]
public static UIcons Square5;
    [NameAttribute("fi-rr-square-6")]
public static UIcons Square6;
    [NameAttribute("fi-rr-square-7")]
public static UIcons Square7;
    [NameAttribute("fi-rr-square-8")]
public static UIcons Square8;
    [NameAttribute("fi-rr-square-9")]
public static UIcons Square9;
    [NameAttribute("fi-rr-square-a")]
public static UIcons SquareA;
    [NameAttribute("fi-rr-square-b")]
public static UIcons SquareB;
    [NameAttribute("fi-rr-square-bolt")]
public static UIcons SquareBolt;
    [NameAttribute("fi-rr-square-c")]
public static UIcons SquareC;
    [NameAttribute("fi-rr-square-code")]
public static UIcons SquareCode;
    [NameAttribute("fi-rr-square-d")]
public static UIcons SquareD;
    [NameAttribute("fi-rr-square-dashed")]
public static UIcons SquareDashed;
    [NameAttribute("fi-rr-square-dashed-circle-plus")]
public static UIcons SquareDashedCirclePlus;
    [NameAttribute("fi-rr-square-divide")]
public static UIcons SquareDivide;
    [NameAttribute("fi-rr-square-e")]
public static UIcons SquareE;
    [NameAttribute("fi-rr-square-ellipsis")]
public static UIcons SquareEllipsis;
    [NameAttribute("fi-rr-square-ellipsis-vertical")]
public static UIcons SquareEllipsisVertical;
    [NameAttribute("fi-rr-square-exclamation")]
public static UIcons SquareExclamation;
    [NameAttribute("fi-rr-square-f")]
public static UIcons SquareF;
    [NameAttribute("fi-rr-square-g")]
public static UIcons SquareG;
    [NameAttribute("fi-rr-square-h")]
public static UIcons SquareH;
    [NameAttribute("fi-rr-square-heart")]
public static UIcons SquareHeart;
    [NameAttribute("fi-rr-square-i")]
public static UIcons SquareI;
    [NameAttribute("fi-rr-square-info")]
public static UIcons SquareInfo;
    [NameAttribute("fi-rr-square-j")]
public static UIcons SquareJ;
    [NameAttribute("fi-rr-square-k")]
public static UIcons SquareK;
    [NameAttribute("fi-rr-square-kanban")]
public static UIcons SquareKanban;
    [NameAttribute("fi-rr-square-l")]
public static UIcons SquareL;
    [NameAttribute("fi-rr-square-m")]
public static UIcons SquareM;
    [NameAttribute("fi-rr-square-minus")]
public static UIcons SquareMinus;
    [NameAttribute("fi-rr-square-n")]
public static UIcons SquareN;
    [NameAttribute("fi-rr-square-o")]
public static UIcons SquareO;
    [NameAttribute("fi-rr-square-p")]
public static UIcons SquareP;
    [NameAttribute("fi-rr-square-phone-hangup")]
public static UIcons SquarePhoneHangup;
    [NameAttribute("fi-rr-square-plus")]
public static UIcons SquarePlus;
    [NameAttribute("fi-rr-square-poll-horizontal")]
public static UIcons SquarePollHorizontal;
    [NameAttribute("fi-rr-square-poll-vertical")]
public static UIcons SquarePollVertical;
    [NameAttribute("fi-rr-square-q")]
public static UIcons SquareQ;
    [NameAttribute("fi-rr-square-quote")]
public static UIcons SquareQuote;
    [NameAttribute("fi-rr-square-r")]
public static UIcons SquareR;
    [NameAttribute("fi-rr-square-root")]
public static UIcons SquareRoot;
    [NameAttribute("fi-rr-square-s")]
public static UIcons SquareS;
    [NameAttribute("fi-rr-square-small")]
public static UIcons SquareSmall;
    [NameAttribute("fi-rr-square-star")]
public static UIcons SquareStar;
    [NameAttribute("fi-rr-square-t")]
public static UIcons SquareT;
    [NameAttribute("fi-rr-square-terminal")]
public static UIcons SquareTerminal;
    [NameAttribute("fi-rr-square-u")]
public static UIcons SquareU;
    [NameAttribute("fi-rr-square-up-right")]
public static UIcons SquareUpRight;
    [NameAttribute("fi-rr-square-v")]
public static UIcons SquareV;
    [NameAttribute("fi-rr-square-w")]
public static UIcons SquareW;
    [NameAttribute("fi-rr-square-x")]
public static UIcons SquareX;
    [NameAttribute("fi-rr-square-y")]
public static UIcons SquareY;
    [NameAttribute("fi-rr-square-z")]
public static UIcons SquareZ;
    [NameAttribute("fi-rr-squid")]
public static UIcons Squid;
    [NameAttribute("fi-rr-squircle")]
public static UIcons Squircle;
    [NameAttribute("fi-rr-squirrel")]
public static UIcons Squirrel;
    [NameAttribute("fi-rr-staff")]
public static UIcons Staff;
    [NameAttribute("fi-rr-stage")]
public static UIcons Stage;
    [NameAttribute("fi-rr-stage-concert")]
public static UIcons StageConcert;
    [NameAttribute("fi-rr-stage-theatre")]
public static UIcons StageTheatre;
    [NameAttribute("fi-rr-stairs")]
public static UIcons Stairs;
    [NameAttribute("fi-rr-stamp")]
public static UIcons Stamp;
    [NameAttribute("fi-rr-standard-definition")]
public static UIcons StandardDefinition;
    [NameAttribute("fi-rr-star")]
public static UIcons Star;
    [NameAttribute("fi-rr-star-and-crescent")]
public static UIcons StarAndCrescent;
    [NameAttribute("fi-rr-star-christmas")]
public static UIcons StarChristmas;
    [NameAttribute("fi-rr-star-comment-alt")]
public static UIcons StarCommentAlt;
    [NameAttribute("fi-rr-star-exclamation")]
public static UIcons StarExclamation;
    [NameAttribute("fi-rr-star-octogram")]
public static UIcons StarOctogram;
    [NameAttribute("fi-rr-star-of-david")]
public static UIcons StarOfDavid;
    [NameAttribute("fi-rr-star-rating-call")]
public static UIcons StarRatingCall;
    [NameAttribute("fi-rr-star-sharp-half")]
public static UIcons StarSharpHalf;
    [NameAttribute("fi-rr-star-sharp-half-stroke")]
public static UIcons StarSharpHalfStroke;
    [NameAttribute("fi-rr-star-shooting")]
public static UIcons StarShooting;
    [NameAttribute("fi-rr-starfighter")]
public static UIcons Starfighter;
    [NameAttribute("fi-rr-stars")]
public static UIcons Stars;
    [NameAttribute("fi-rr-state-country")]
public static UIcons StateCountry;
    [NameAttribute("fi-rr-stationary-bike")]
public static UIcons StationaryBike;
    [NameAttribute("fi-rr-stats")]
public static UIcons Stats;
    [NameAttribute("fi-rr-steak")]
public static UIcons Steak;
    [NameAttribute("fi-rr-steering-wheel")]
public static UIcons SteeringWheel;
    [NameAttribute("fi-rr-step-backward")]
public static UIcons StepBackward;
    [NameAttribute("fi-rr-step-forward")]
public static UIcons StepForward;
    [NameAttribute("fi-rr-sterling-sign")]
public static UIcons SterlingSign;
    [NameAttribute("fi-rr-stethoscope")]
public static UIcons Stethoscope;
    [NameAttribute("fi-rr-sticker")]
public static UIcons Sticker;
    [NameAttribute("fi-rr-stocking")]
public static UIcons Stocking;
    [NameAttribute("fi-rr-stomach")]
public static UIcons Stomach;
    [NameAttribute("fi-rr-stop")]
public static UIcons Stop;
    [NameAttribute("fi-rr-stop-circle")]
public static UIcons StopCircle;
    [NameAttribute("fi-rr-stop-square")]
public static UIcons StopSquare;
    [NameAttribute("fi-rr-stopwatch")]
public static UIcons Stopwatch;
    [NameAttribute("fi-rr-store-alt")]
public static UIcons StoreAlt;
    [NameAttribute("fi-rr-store-buyer")]
public static UIcons StoreBuyer;
    [NameAttribute("fi-rr-store-lock")]
public static UIcons StoreLock;
    [NameAttribute("fi-rr-store-slash")]
public static UIcons StoreSlash;
    [NameAttribute("fi-rr-story-book")]
public static UIcons StoryBook;
    [NameAttribute("fi-rr-story-fairy-tale")]
public static UIcons StoryFairyTale;
    [NameAttribute("fi-rr-story-fantasy")]
public static UIcons StoryFantasy;
    [NameAttribute("fi-rr-strategy-chess-risk")]
public static UIcons StrategyChessRisk;
    [NameAttribute("fi-rr-strawberry")]
public static UIcons Strawberry;
    [NameAttribute("fi-rr-street-view")]
public static UIcons StreetView;
    [NameAttribute("fi-rr-stretcher")]
public static UIcons Stretcher;
    [NameAttribute("fi-rr-strikethrough")]
public static UIcons Strikethrough;
    [NameAttribute("fi-rr-stroopwafel")]
public static UIcons Stroopwafel;
    [NameAttribute("fi-rr-student")]
public static UIcons Student;
    [NameAttribute("fi-rr-student-alt")]
public static UIcons StudentAlt;
    [NameAttribute("fi-rr-subscript")]
public static UIcons Subscript;
    [NameAttribute("fi-rr-subscription")]
public static UIcons Subscription;
    [NameAttribute("fi-rr-subscription-alt")]
public static UIcons SubscriptionAlt;
    [NameAttribute("fi-rr-subtitles")]
public static UIcons Subtitles;
    [NameAttribute("fi-rr-subtitles-slash")]
public static UIcons SubtitlesSlash;
    [NameAttribute("fi-rr-subway")]
public static UIcons Subway;
    [NameAttribute("fi-rr-suitcase-alt")]
public static UIcons SuitcaseAlt;
    [NameAttribute("fi-rr-summary-check")]
public static UIcons SummaryCheck;
    [NameAttribute("fi-rr-summer")]
public static UIcons Summer;
    [NameAttribute("fi-rr-sun")]
public static UIcons Sun;
    [NameAttribute("fi-rr-sun-dust")]
public static UIcons SunDust;
    [NameAttribute("fi-rr-sun-plant-wilt")]
public static UIcons SunPlantWilt;
    [NameAttribute("fi-rr-sun-salutation-yoga")]
public static UIcons SunSalutationYoga;
    [NameAttribute("fi-rr-sunday")]
public static UIcons Sunday;
    [NameAttribute("fi-rr-sunglasses")]
public static UIcons Sunglasses;
    [NameAttribute("fi-rr-sunglasses-alt")]
public static UIcons SunglassesAlt;
    [NameAttribute("fi-rr-sunrise")]
public static UIcons Sunrise;
    [NameAttribute("fi-rr-sunrise-alt")]
public static UIcons SunriseAlt;
    [NameAttribute("fi-rr-sunset")]
public static UIcons Sunset;
    [NameAttribute("fi-rr-superscript")]
public static UIcons Superscript;
    [NameAttribute("fi-rr-supplier")]
public static UIcons Supplier;
    [NameAttribute("fi-rr-supplier-alt")]
public static UIcons SupplierAlt;
    [NameAttribute("fi-rr-surfing")]
public static UIcons Surfing;
    [NameAttribute("fi-rr-surprise")]
public static UIcons Surprise;
    [NameAttribute("fi-rr-surveillance-camera")]
public static UIcons SurveillanceCamera;
    [NameAttribute("fi-rr-survey-xmark")]
public static UIcons SurveyXmark;
    [NameAttribute("fi-rr-sushi")]
public static UIcons Sushi;
    [NameAttribute("fi-rr-sushi-alt")]
public static UIcons SushiAlt;
    [NameAttribute("fi-rr-sushi-roll")]
public static UIcons SushiRoll;
    [NameAttribute("fi-rr-svg")]
public static UIcons Svg;
    [NameAttribute("fi-rr-swap")]
public static UIcons Swap;
    [NameAttribute("fi-rr-swatchbook")]
public static UIcons Swatchbook;
    [NameAttribute("fi-rr-swimmer")]
public static UIcons Swimmer;
    [NameAttribute("fi-rr-swimming-pool")]
public static UIcons SwimmingPool;
    [NameAttribute("fi-rr-swing")]
public static UIcons Swing;
    [NameAttribute("fi-rr-swipe-down")]
public static UIcons SwipeDown;
    [NameAttribute("fi-rr-swipe-left")]
public static UIcons SwipeLeft;
    [NameAttribute("fi-rr-swipe-right")]
public static UIcons SwipeRight;
    [NameAttribute("fi-rr-swipe-up")]
public static UIcons SwipeUp;
    [NameAttribute("fi-rr-sword")]
public static UIcons Sword;
    [NameAttribute("fi-rr-symbol")]
public static UIcons Symbol;
    [NameAttribute("fi-rr-symbols")]
public static UIcons Symbols;
    [NameAttribute("fi-rr-synagogue")]
public static UIcons Synagogue;
    [NameAttribute("fi-rr-syringe")]
public static UIcons Syringe;
    [NameAttribute("fi-rr-system-cloud")]
public static UIcons SystemCloud;
    [NameAttribute("fi-rr-t")]
public static UIcons T;
    [NameAttribute("fi-rr-tab-folder")]
public static UIcons TabFolder;
    [NameAttribute("fi-rr-table")]
public static UIcons Table;
    [NameAttribute("fi-rr-table-columns")]
public static UIcons TableColumns;
    [NameAttribute("fi-rr-table-layout")]
public static UIcons TableLayout;
    [NameAttribute("fi-rr-table-list")]
public static UIcons TableList;
    [NameAttribute("fi-rr-table-picnic")]
public static UIcons TablePicnic;
    [NameAttribute("fi-rr-table-pivot")]
public static UIcons TablePivot;
    [NameAttribute("fi-rr-table-rows")]
public static UIcons TableRows;
    [NameAttribute("fi-rr-table-tree")]
public static UIcons TableTree;
    [NameAttribute("fi-rr-tablet")]
public static UIcons Tablet;
    [NameAttribute("fi-rr-tablet-android")]
public static UIcons TabletAndroid;
    [NameAttribute("fi-rr-tablet-android-alt")]
public static UIcons TabletAndroidAlt;
    [NameAttribute("fi-rr-tablet-rugged")]
public static UIcons TabletRugged;
    [NameAttribute("fi-rr-tachometer")]
public static UIcons Tachometer;
    [NameAttribute("fi-rr-tachometer-alt-average")]
public static UIcons TachometerAltAverage;
    [NameAttribute("fi-rr-tachometer-alt-fastest")]
public static UIcons TachometerAltFastest;
    [NameAttribute("fi-rr-tachometer-alt-slow")]
public static UIcons TachometerAltSlow;
    [NameAttribute("fi-rr-tachometer-alt-slowest")]
public static UIcons TachometerAltSlowest;
    [NameAttribute("fi-rr-tachometer-average")]
public static UIcons TachometerAverage;
    [NameAttribute("fi-rr-tachometer-fast")]
public static UIcons TachometerFast;
    [NameAttribute("fi-rr-tachometer-fastest")]
public static UIcons TachometerFastest;
    [NameAttribute("fi-rr-tachometer-slow")]
public static UIcons TachometerSlow;
    [NameAttribute("fi-rr-tachometer-slowest")]
public static UIcons TachometerSlowest;
    [NameAttribute("fi-rr-taco")]
public static UIcons Taco;
    [NameAttribute("fi-rr-tags")]
public static UIcons Tags;
    [NameAttribute("fi-rr-talent")]
public static UIcons Talent;
    [NameAttribute("fi-rr-talent-alt")]
public static UIcons TalentAlt;
    [NameAttribute("fi-rr-talent-thumbs-down")]
public static UIcons TalentThumbsDown;
    [NameAttribute("fi-rr-tally")]
public static UIcons Tally;
    [NameAttribute("fi-rr-tally-1")]
public static UIcons Tally1;
    [NameAttribute("fi-rr-tally-2")]
public static UIcons Tally2;
    [NameAttribute("fi-rr-tally-3")]
public static UIcons Tally3;
    [NameAttribute("fi-rr-tally-4")]
public static UIcons Tally4;
    [NameAttribute("fi-rr-tamale")]
public static UIcons Tamale;
    [NameAttribute("fi-rr-tank-water")]
public static UIcons TankWater;
    [NameAttribute("fi-rr-tap")]
public static UIcons Tap;
    [NameAttribute("fi-rr-tape")]
public static UIcons Tape;
    [NameAttribute("fi-rr-target")]
public static UIcons Target;
    [NameAttribute("fi-rr-target-audience")]
public static UIcons TargetAudience;
    [NameAttribute("fi-rr-tax")]
public static UIcons Tax;
    [NameAttribute("fi-rr-tax-alt")]
public static UIcons TaxAlt;
    [NameAttribute("fi-rr-taxi")]
public static UIcons Taxi;
    [NameAttribute("fi-rr-taxi-bus")]
public static UIcons TaxiBus;
    [NameAttribute("fi-rr-team-check")]
public static UIcons TeamCheck;
    [NameAttribute("fi-rr-team-check-alt")]
public static UIcons TeamCheckAlt;
    [NameAttribute("fi-rr-teddy-bear")]
public static UIcons TeddyBear;
    [NameAttribute("fi-rr-teeth-open")]
public static UIcons TeethOpen;
    [NameAttribute("fi-rr-telescope")]
public static UIcons Telescope;
    [NameAttribute("fi-rr-temperature-down")]
public static UIcons TemperatureDown;
    [NameAttribute("fi-rr-temperature-frigid")]
public static UIcons TemperatureFrigid;
    [NameAttribute("fi-rr-temperature-high")]
public static UIcons TemperatureHigh;
    [NameAttribute("fi-rr-temperature-list")]
public static UIcons TemperatureList;
    [NameAttribute("fi-rr-temperature-low")]
public static UIcons TemperatureLow;
    [NameAttribute("fi-rr-temperature-up")]
public static UIcons TemperatureUp;
    [NameAttribute("fi-rr-template")]
public static UIcons Template;
    [NameAttribute("fi-rr-template-alt")]
public static UIcons TemplateAlt;
    [NameAttribute("fi-rr-tenge")]
public static UIcons Tenge;
    [NameAttribute("fi-rr-tennis")]
public static UIcons Tennis;
    [NameAttribute("fi-rr-tent-arrow-down-to-line")]
public static UIcons TentArrowDownToLine;
    [NameAttribute("fi-rr-tent-arrow-left-right")]
public static UIcons TentArrowLeftRight;
    [NameAttribute("fi-rr-tent-arrow-turn-left")]
public static UIcons TentArrowTurnLeft;
    [NameAttribute("fi-rr-tent-arrows-down")]
public static UIcons TentArrowsDown;
    [NameAttribute("fi-rr-tents")]
public static UIcons Tents;
    [NameAttribute("fi-rr-terminal")]
public static UIcons Terminal;
    [NameAttribute("fi-rr-terrace")]
public static UIcons Terrace;
    [NameAttribute("fi-rr-test")]
public static UIcons Test;
    [NameAttribute("fi-rr-test-tube")]
public static UIcons TestTube;
    [NameAttribute("fi-rr-text")]
public static UIcons Text;
    [NameAttribute("fi-rr-text-box")]
public static UIcons TextBox;
    [NameAttribute("fi-rr-text-box-dots")]
public static UIcons TextBoxDots;
    [NameAttribute("fi-rr-text-box-edit")]
public static UIcons TextBoxEdit;
    [NameAttribute("fi-rr-text-check")]
public static UIcons TextCheck;
    [NameAttribute("fi-rr-text-height")]
public static UIcons TextHeight;
    [NameAttribute("fi-rr-text-shadow")]
public static UIcons TextShadow;
    [NameAttribute("fi-rr-text-size")]
public static UIcons TextSize;
    [NameAttribute("fi-rr-text-slash")]
public static UIcons TextSlash;
    [NameAttribute("fi-rr-text-width")]
public static UIcons TextWidth;
    [NameAttribute("fi-rr-theater-masks")]
public static UIcons TheaterMasks;
    [NameAttribute("fi-rr-thermometer-alt")]
public static UIcons ThermometerAlt;
    [NameAttribute("fi-rr-thermometer-empty")]
public static UIcons ThermometerEmpty;
    [NameAttribute("fi-rr-thermometer-full")]
public static UIcons ThermometerFull;
    [NameAttribute("fi-rr-thermometer-half")]
public static UIcons ThermometerHalf;
    [NameAttribute("fi-rr-thermometer-quarter")]
public static UIcons ThermometerQuarter;
    [NameAttribute("fi-rr-thermometer-three-quarters")]
public static UIcons ThermometerThreeQuarters;
    [NameAttribute("fi-rr-theta")]
public static UIcons Theta;
    [NameAttribute("fi-rr-third")]
public static UIcons Third;
    [NameAttribute("fi-rr-third-award")]
public static UIcons ThirdAward;
    [NameAttribute("fi-rr-third-laurel")]
public static UIcons ThirdLaurel;
    [NameAttribute("fi-rr-third-medal")]
public static UIcons ThirdMedal;
    [NameAttribute("fi-rr-thought-bubble")]
public static UIcons ThoughtBubble;
    [NameAttribute("fi-rr-three-leaf-clover")]
public static UIcons ThreeLeafClover;
    [NameAttribute("fi-rr-thumbs-down")]
public static UIcons ThumbsDown;
    [NameAttribute("fi-rr-thumbs-up")]
public static UIcons ThumbsUp;
    [NameAttribute("fi-rr-thumbs-up-trust")]
public static UIcons ThumbsUpTrust;
    [NameAttribute("fi-rr-thumbtack")]
public static UIcons Thumbtack;
    [NameAttribute("fi-rr-thunderstorm")]
public static UIcons Thunderstorm;
    [NameAttribute("fi-rr-thunderstorm-moon")]
public static UIcons ThunderstormMoon;
    [NameAttribute("fi-rr-thunderstorm-risk")]
public static UIcons ThunderstormRisk;
    [NameAttribute("fi-rr-thunderstorm-sun")]
public static UIcons ThunderstormSun;
    [NameAttribute("fi-rr-thursday")]
public static UIcons Thursday;
    [NameAttribute("fi-rr-ticket")]
public static UIcons Ticket;
    [NameAttribute("fi-rr-ticket-airline")]
public static UIcons TicketAirline;
    [NameAttribute("fi-rr-ticket-alt")]
public static UIcons TicketAlt;
    [NameAttribute("fi-rr-tickets-airline")]
public static UIcons TicketsAirline;
    [NameAttribute("fi-rr-tie")]
public static UIcons Tie;
    [NameAttribute("fi-rr-tilde")]
public static UIcons Tilde;
    [NameAttribute("fi-rr-time-add")]
public static UIcons TimeAdd;
    [NameAttribute("fi-rr-time-check")]
public static UIcons TimeCheck;
    [NameAttribute("fi-rr-time-delete")]
public static UIcons TimeDelete;
    [NameAttribute("fi-rr-time-fast")]
public static UIcons TimeFast;
    [NameAttribute("fi-rr-time-forward")]
public static UIcons TimeForward;
    [NameAttribute("fi-rr-time-forward-sixty")]
public static UIcons TimeForwardSixty;
    [NameAttribute("fi-rr-time-forward-ten")]
public static UIcons TimeForwardTen;
    [NameAttribute("fi-rr-time-half-past")]
public static UIcons TimeHalfPast;
    [NameAttribute("fi-rr-time-oclock")]
public static UIcons TimeOclock;
    [NameAttribute("fi-rr-time-past")]
public static UIcons TimePast;
    [NameAttribute("fi-rr-time-quarter-past")]
public static UIcons TimeQuarterPast;
    [NameAttribute("fi-rr-time-quarter-to")]
public static UIcons TimeQuarterTo;
    [NameAttribute("fi-rr-time-twenty-four")]
public static UIcons TimeTwentyFour;
    [NameAttribute("fi-rr-time-watch-calendar")]
public static UIcons TimeWatchCalendar;
    [NameAttribute("fi-rr-timer-clock-call")]
public static UIcons TimerClockCall;
    [NameAttribute("fi-rr-times-hexagon")]
public static UIcons TimesHexagon;
    [NameAttribute("fi-rr-tint-slash")]
public static UIcons TintSlash;
    [NameAttribute("fi-rr-tip-coin")]
public static UIcons TipCoin;
    [NameAttribute("fi-rr-tire")]
public static UIcons Tire;
    [NameAttribute("fi-rr-tire-flat")]
public static UIcons TireFlat;
    [NameAttribute("fi-rr-tire-pressure-warning")]
public static UIcons TirePressureWarning;
    [NameAttribute("fi-rr-tire-rugged")]
public static UIcons TireRugged;
    [NameAttribute("fi-rr-tired")]
public static UIcons Tired;
    [NameAttribute("fi-rr-to-do")]
public static UIcons ToDo;
    [NameAttribute("fi-rr-to-do-alt")]
public static UIcons ToDoAlt;
    [NameAttribute("fi-rr-together-people")]
public static UIcons TogetherPeople;
    [NameAttribute("fi-rr-toggle-off")]
public static UIcons ToggleOff;
    [NameAttribute("fi-rr-toggle-on")]
public static UIcons ToggleOn;
    [NameAttribute("fi-rr-toilet")]
public static UIcons Toilet;
    [NameAttribute("fi-rr-toilet-paper-blank")]
public static UIcons ToiletPaperBlank;
    [NameAttribute("fi-rr-toilet-paper-blank-under")]
public static UIcons ToiletPaperBlankUnder;
    [NameAttribute("fi-rr-toilet-paper-slash")]
public static UIcons ToiletPaperSlash;
    [NameAttribute("fi-rr-toilet-paper-under")]
public static UIcons ToiletPaperUnder;
    [NameAttribute("fi-rr-toilet-paper-under-slash")]
public static UIcons ToiletPaperUnderSlash;
    [NameAttribute("fi-rr-toilets-portable")]
public static UIcons ToiletsPortable;
    [NameAttribute("fi-rr-token")]
public static UIcons Token;
    [NameAttribute("fi-rr-tomato")]
public static UIcons Tomato;
    [NameAttribute("fi-rr-tombstone")]
public static UIcons Tombstone;
    [NameAttribute("fi-rr-tombstone-alt")]
public static UIcons TombstoneAlt;
    [NameAttribute("fi-rr-tool-box")]
public static UIcons ToolBox;
    [NameAttribute("fi-rr-tool-crop")]
public static UIcons ToolCrop;
    [NameAttribute("fi-rr-tool-marquee")]
public static UIcons ToolMarquee;
    [NameAttribute("fi-rr-tools")]
public static UIcons Tools;
    [NameAttribute("fi-rr-tooth")]
public static UIcons Tooth;
    [NameAttribute("fi-rr-toothbrush")]
public static UIcons Toothbrush;
    [NameAttribute("fi-rr-torch-inspiration-leader")]
public static UIcons TorchInspirationLeader;
    [NameAttribute("fi-rr-torii-gate")]
public static UIcons ToriiGate;
    [NameAttribute("fi-rr-tornado")]
public static UIcons Tornado;
    [NameAttribute("fi-rr-total")]
public static UIcons Total;
    [NameAttribute("fi-rr-tour-guide-people")]
public static UIcons TourGuidePeople;
    [NameAttribute("fi-rr-tour-virtual")]
public static UIcons TourVirtual;
    [NameAttribute("fi-rr-tower-control")]
public static UIcons TowerControl;
    [NameAttribute("fi-rr-track")]
public static UIcons Track;
    [NameAttribute("fi-rr-tractor")]
public static UIcons Tractor;
    [NameAttribute("fi-rr-trademark")]
public static UIcons Trademark;
    [NameAttribute("fi-rr-traffic-cone")]
public static UIcons TrafficCone;
    [NameAttribute("fi-rr-traffic-light")]
public static UIcons TrafficLight;
    [NameAttribute("fi-rr-traffic-light-go")]
public static UIcons TrafficLightGo;
    [NameAttribute("fi-rr-traffic-light-slow")]
public static UIcons TrafficLightSlow;
    [NameAttribute("fi-rr-traffic-light-stop")]
public static UIcons TrafficLightStop;
    [NameAttribute("fi-rr-trailer")]
public static UIcons Trailer;
    [NameAttribute("fi-rr-train")]
public static UIcons Train;
    [NameAttribute("fi-rr-train-journey")]
public static UIcons TrainJourney;
    [NameAttribute("fi-rr-train-side")]
public static UIcons TrainSide;
    [NameAttribute("fi-rr-train-station")]
public static UIcons TrainStation;
    [NameAttribute("fi-rr-train-station-building")]
public static UIcons TrainStationBuilding;
    [NameAttribute("fi-rr-train-subway-tunnel")]
public static UIcons TrainSubwayTunnel;
    [NameAttribute("fi-rr-train-track")]
public static UIcons TrainTrack;
    [NameAttribute("fi-rr-train-tram")]
public static UIcons TrainTram;
    [NameAttribute("fi-rr-tram")]
public static UIcons Tram;
    [NameAttribute("fi-rr-transform")]
public static UIcons Transform;
    [NameAttribute("fi-rr-transformation-block")]
public static UIcons TransformationBlock;
    [NameAttribute("fi-rr-transformation-circle")]
public static UIcons TransformationCircle;
    [NameAttribute("fi-rr-transformation-design")]
public static UIcons TransformationDesign;
    [NameAttribute("fi-rr-transformation-shapes")]
public static UIcons TransformationShapes;
    [NameAttribute("fi-rr-transformer-bolt")]
public static UIcons TransformerBolt;
    [NameAttribute("fi-rr-transgender")]
public static UIcons Transgender;
    [NameAttribute("fi-rr-transporter")]
public static UIcons Transporter;
    [NameAttribute("fi-rr-transporter-1")]
public static UIcons Transporter1;
    [NameAttribute("fi-rr-transporter-2")]
public static UIcons Transporter2;
    [NameAttribute("fi-rr-transporter-3")]
public static UIcons Transporter3;
    [NameAttribute("fi-rr-transporter-4")]
public static UIcons Transporter4;
    [NameAttribute("fi-rr-transporter-5")]
public static UIcons Transporter5;
    [NameAttribute("fi-rr-transporter-6")]
public static UIcons Transporter6;
    [NameAttribute("fi-rr-transporter-7")]
public static UIcons Transporter7;
    [NameAttribute("fi-rr-transporter-empty")]
public static UIcons TransporterEmpty;
    [NameAttribute("fi-rr-trash")]
public static UIcons Trash;
    [NameAttribute("fi-rr-trash-can-check")]
public static UIcons TrashCanCheck;
    [NameAttribute("fi-rr-trash-can-clock")]
public static UIcons TrashCanClock;
    [NameAttribute("fi-rr-trash-can-list")]
public static UIcons TrashCanList;
    [NameAttribute("fi-rr-trash-can-plus")]
public static UIcons TrashCanPlus;
    [NameAttribute("fi-rr-trash-can-slash")]
public static UIcons TrashCanSlash;
    [NameAttribute("fi-rr-trash-check")]
public static UIcons TrashCheck;
    [NameAttribute("fi-rr-trash-clock")]
public static UIcons TrashClock;
    [NameAttribute("fi-rr-trash-empty")]
public static UIcons TrashEmpty;
    [NameAttribute("fi-rr-trash-list")]
public static UIcons TrashList;
    [NameAttribute("fi-rr-trash-plus")]
public static UIcons TrashPlus;
    [NameAttribute("fi-rr-trash-restore")]
public static UIcons TrashRestore;
    [NameAttribute("fi-rr-trash-restore-alt")]
public static UIcons TrashRestoreAlt;
    [NameAttribute("fi-rr-trash-slash")]
public static UIcons TrashSlash;
    [NameAttribute("fi-rr-trash-undo")]
public static UIcons TrashUndo;
    [NameAttribute("fi-rr-trash-undo-alt")]
public static UIcons TrashUndoAlt;
    [NameAttribute("fi-rr-trash-xmark")]
public static UIcons TrashXmark;
    [NameAttribute("fi-rr-treadmill")]
public static UIcons Treadmill;
    [NameAttribute("fi-rr-treasure-chest")]
public static UIcons TreasureChest;
    [NameAttribute("fi-rr-treatment")]
public static UIcons Treatment;
    [NameAttribute("fi-rr-tree")]
public static UIcons Tree;
    [NameAttribute("fi-rr-tree-alt")]
public static UIcons TreeAlt;
    [NameAttribute("fi-rr-tree-christmas")]
public static UIcons TreeChristmas;
    [NameAttribute("fi-rr-tree-deciduous")]
public static UIcons TreeDeciduous;
    [NameAttribute("fi-rr-trees")]
public static UIcons Trees;
    [NameAttribute("fi-rr-trees-alt")]
public static UIcons TreesAlt;
    [NameAttribute("fi-rr-triangle")]
public static UIcons Triangle;
    [NameAttribute("fi-rr-triangle-music")]
public static UIcons TriangleMusic;
    [NameAttribute("fi-rr-triangle-person-digging")]
public static UIcons TrianglePersonDigging;
    [NameAttribute("fi-rr-triangle-warning")]
public static UIcons TriangleWarning;
    [NameAttribute("fi-rr-tricycle")]
public static UIcons Tricycle;
    [NameAttribute("fi-rr-trillium")]
public static UIcons Trillium;
    [NameAttribute("fi-rr-trophy")]
public static UIcons Trophy;
    [NameAttribute("fi-rr-trophy-achievement-skill")]
public static UIcons TrophyAchievementSkill;
    [NameAttribute("fi-rr-trophy-star")]
public static UIcons TrophyStar;
    [NameAttribute("fi-rr-truck-arrow-left")]
public static UIcons TruckArrowLeft;
    [NameAttribute("fi-rr-truck-arrow-right")]
public static UIcons TruckArrowRight;
    [NameAttribute("fi-rr-truck-bolt")]
public static UIcons TruckBolt;
    [NameAttribute("fi-rr-truck-box")]
public static UIcons TruckBox;
    [NameAttribute("fi-rr-truck-check")]
public static UIcons TruckCheck;
    [NameAttribute("fi-rr-truck-container")]
public static UIcons TruckContainer;
    [NameAttribute("fi-rr-truck-container-empty")]
public static UIcons TruckContainerEmpty;
    [NameAttribute("fi-rr-truck-couch")]
public static UIcons TruckCouch;
    [NameAttribute("fi-rr-truck-fire")]
public static UIcons TruckFire;
    [NameAttribute("fi-rr-truck-flatbed")]
public static UIcons TruckFlatbed;
    [NameAttribute("fi-rr-truck-front")]
public static UIcons TruckFront;
    [NameAttribute("fi-rr-truck-ladder")]
public static UIcons TruckLadder;
    [NameAttribute("fi-rr-truck-loading")]
public static UIcons TruckLoading;
    [NameAttribute("fi-rr-truck-medical")]
public static UIcons TruckMedical;
    [NameAttribute("fi-rr-truck-monster")]
public static UIcons TruckMonster;
    [NameAttribute("fi-rr-truck-moving")]
public static UIcons TruckMoving;
    [NameAttribute("fi-rr-truck-pickup")]
public static UIcons TruckPickup;
    [NameAttribute("fi-rr-truck-plow")]
public static UIcons TruckPlow;
    [NameAttribute("fi-rr-truck-ramp")]
public static UIcons TruckRamp;
    [NameAttribute("fi-rr-truck-side")]
public static UIcons TruckSide;
    [NameAttribute("fi-rr-truck-tow")]
public static UIcons TruckTow;
    [NameAttribute("fi-rr-truck-utensils")]
public static UIcons TruckUtensils;
    [NameAttribute("fi-rr-trumpet")]
public static UIcons Trumpet;
    [NameAttribute("fi-rr-trust")]
public static UIcons Trust;
    [NameAttribute("fi-rr-trust-alt")]
public static UIcons TrustAlt;
    [NameAttribute("fi-rr-tshirt")]
public static UIcons Tshirt;
    [NameAttribute("fi-rr-tty")]
public static UIcons Tty;
    [NameAttribute("fi-rr-tty-answer")]
public static UIcons TtyAnswer;
    [NameAttribute("fi-rr-tubes")]
public static UIcons Tubes;
    [NameAttribute("fi-rr-tuesday")]
public static UIcons Tuesday;
    [NameAttribute("fi-rr-tugrik-sign")]
public static UIcons TugrikSign;
    [NameAttribute("fi-rr-turkey")]
public static UIcons Turkey;
    [NameAttribute("fi-rr-turn-left")]
public static UIcons TurnLeft;
    [NameAttribute("fi-rr-turn-left-down")]
public static UIcons TurnLeftDown;
    [NameAttribute("fi-rr-turn-right")]
public static UIcons TurnRight;
    [NameAttribute("fi-rr-turntable")]
public static UIcons Turntable;
    [NameAttribute("fi-rr-turtle")]
public static UIcons Turtle;
    [NameAttribute("fi-rr-tv-music")]
public static UIcons TvMusic;
    [NameAttribute("fi-rr-tv-retro")]
public static UIcons TvRetro;
    [NameAttribute("fi-rr-typewriter")]
public static UIcons Typewriter;
    [NameAttribute("fi-rr-u")]
public static UIcons U;
    [NameAttribute("fi-rr-ufo")]
public static UIcons Ufo;
    [NameAttribute("fi-rr-ufo-beam")]
public static UIcons UfoBeam;
    [NameAttribute("fi-rr-ui-ux")]
public static UIcons UiUx;
    [NameAttribute("fi-rr-umbrella")]
public static UIcons Umbrella;
    [NameAttribute("fi-rr-umbrella-beach")]
public static UIcons UmbrellaBeach;
    [NameAttribute("fi-rr-under-construction")]
public static UIcons UnderConstruction;
    [NameAttribute("fi-rr-underline")]
public static UIcons Underline;
    [NameAttribute("fi-rr-undo")]
public static UIcons Undo;
    [NameAttribute("fi-rr-undo-alt")]
public static UIcons UndoAlt;
    [NameAttribute("fi-rr-unicorn")]
public static UIcons Unicorn;
    [NameAttribute("fi-rr-uniform-martial-arts")]
public static UIcons UniformMartialArts;
    [NameAttribute("fi-rr-universal-access")]
public static UIcons UniversalAccess;
    [NameAttribute("fi-rr-unlock")]
public static UIcons Unlock;
    [NameAttribute("fi-rr-up")]
public static UIcons Up;
    [NameAttribute("fi-rr-up-from-bracket")]
public static UIcons UpFromBracket;
    [NameAttribute("fi-rr-up-left")]
public static UIcons UpLeft;
    [NameAttribute("fi-rr-up-right")]
public static UIcons UpRight;
    [NameAttribute("fi-rr-up-right-from-square")]
public static UIcons UpRightFromSquare;
    [NameAttribute("fi-rr-upload")]
public static UIcons Upload;
    [NameAttribute("fi-rr-url")]
public static UIcons Url;
    [NameAttribute("fi-rr-usb-pendrive")]
public static UIcons UsbPendrive;
    [NameAttribute("fi-rr-usd-circle")]
public static UIcons UsdCircle;
    [NameAttribute("fi-rr-usd-square")]
public static UIcons UsdSquare;
    [NameAttribute("fi-rr-user")]
public static UIcons User;
    [NameAttribute("fi-rr-user-add")]
public static UIcons UserAdd;
    [NameAttribute("fi-rr-user-alien")]
public static UIcons UserAlien;
    [NameAttribute("fi-rr-user-astronaut")]
public static UIcons UserAstronaut;
    [NameAttribute("fi-rr-user-check")]
public static UIcons UserCheck;
    [NameAttribute("fi-rr-user-chef")]
public static UIcons UserChef;
    [NameAttribute("fi-rr-user-coach")]
public static UIcons UserCoach;
    [NameAttribute("fi-rr-user-cowboy")]
public static UIcons UserCowboy;
    [NameAttribute("fi-rr-user-crown")]
public static UIcons UserCrown;
    [NameAttribute("fi-rr-user-gear")]
public static UIcons UserGear;
    [NameAttribute("fi-rr-user-graduate")]
public static UIcons UserGraduate;
    [NameAttribute("fi-rr-user-headset")]
public static UIcons UserHeadset;
    [NameAttribute("fi-rr-user-helmet-safety")]
public static UIcons UserHelmetSafety;
    [NameAttribute("fi-rr-user-injured")]
public static UIcons UserInjured;
    [NameAttribute("fi-rr-user-interface-ui")]
public static UIcons UserInterfaceUi;
    [NameAttribute("fi-rr-user-key")]
public static UIcons UserKey;
    [NameAttribute("fi-rr-user-lock")]
public static UIcons UserLock;
    [NameAttribute("fi-rr-user-md")]
public static UIcons UserMd;
    [NameAttribute("fi-rr-user-md-chat")]
public static UIcons UserMdChat;
    [NameAttribute("fi-rr-user-minus")]
public static UIcons UserMinus;
    [NameAttribute("fi-rr-user-music")]
public static UIcons UserMusic;
    [NameAttribute("fi-rr-user-ninja")]
public static UIcons UserNinja;
    [NameAttribute("fi-rr-user-nurse")]
public static UIcons UserNurse;
    [NameAttribute("fi-rr-user-pen")]
public static UIcons UserPen;
    [NameAttribute("fi-rr-user-pilot")]
public static UIcons UserPilot;
    [NameAttribute("fi-rr-user-pilot-tie")]
public static UIcons UserPilotTie;
    [NameAttribute("fi-rr-user-police")]
public static UIcons UserPolice;
    [NameAttribute("fi-rr-user-robot")]
public static UIcons UserRobot;
    [NameAttribute("fi-rr-user-robot-xmarks")]
public static UIcons UserRobotXmarks;
    [NameAttribute("fi-rr-user-salary")]
public static UIcons UserSalary;
    [NameAttribute("fi-rr-user-shield")]
public static UIcons UserShield;
    [NameAttribute("fi-rr-user-skill-gear")]
public static UIcons UserSkillGear;
    [NameAttribute("fi-rr-user-slash")]
public static UIcons UserSlash;
    [NameAttribute("fi-rr-user-tag")]
public static UIcons UserTag;
    [NameAttribute("fi-rr-user-time")]
public static UIcons UserTime;
    [NameAttribute("fi-rr-user-trust")]
public static UIcons UserTrust;
    [NameAttribute("fi-rr-user-unlock")]
public static UIcons UserUnlock;
    [NameAttribute("fi-rr-user-visor")]
public static UIcons UserVisor;
    [NameAttribute("fi-rr-user-xmark")]
public static UIcons UserXmark;
    [NameAttribute("fi-rr-users")]
public static UIcons Users;
    [NameAttribute("fi-rr-users-alt")]
public static UIcons UsersAlt;
    [NameAttribute("fi-rr-users-class")]
public static UIcons UsersClass;
    [NameAttribute("fi-rr-users-gear")]
public static UIcons UsersGear;
    [NameAttribute("fi-rr-users-medical")]
public static UIcons UsersMedical;
    [NameAttribute("fi-rr-users-slash")]
public static UIcons UsersSlash;
    [NameAttribute("fi-rr-utensils")]
public static UIcons Utensils;
    [NameAttribute("fi-rr-utensils-slash")]
public static UIcons UtensilsSlash;
    [NameAttribute("fi-rr-utility-pole")]
public static UIcons UtilityPole;
    [NameAttribute("fi-rr-utility-pole-double")]
public static UIcons UtilityPoleDouble;
    [NameAttribute("fi-rr-ux")]
public static UIcons Ux;
    [NameAttribute("fi-rr-ux-browser")]
public static UIcons UxBrowser;
    [NameAttribute("fi-rr-v")]
public static UIcons V;
    [NameAttribute("fi-rr-vacuum")]
public static UIcons Vacuum;
    [NameAttribute("fi-rr-vacuum-robot")]
public static UIcons VacuumRobot;
    [NameAttribute("fi-rr-value-absolute")]
public static UIcons ValueAbsolute;
    [NameAttribute("fi-rr-vault")]
public static UIcons Vault;
    [NameAttribute("fi-rr-vector")]
public static UIcons Vector;
    [NameAttribute("fi-rr-vector-alt")]
public static UIcons VectorAlt;
    [NameAttribute("fi-rr-vector-circle")]
public static UIcons VectorCircle;
    [NameAttribute("fi-rr-vector-polygon")]
public static UIcons VectorPolygon;
    [NameAttribute("fi-rr-venus")]
public static UIcons Venus;
    [NameAttribute("fi-rr-venus-double")]
public static UIcons VenusDouble;
    [NameAttribute("fi-rr-venus-mars")]
public static UIcons VenusMars;
    [NameAttribute("fi-rr-vest")]
public static UIcons Vest;
    [NameAttribute("fi-rr-vest-patches")]
public static UIcons VestPatches;
    [NameAttribute("fi-rr-video-arrow-down-left")]
public static UIcons VideoArrowDownLeft;
    [NameAttribute("fi-rr-video-arrow-up-right")]
public static UIcons VideoArrowUpRight;
    [NameAttribute("fi-rr-video-camera")]
public static UIcons VideoCamera;
    [NameAttribute("fi-rr-video-camera-alt")]
public static UIcons VideoCameraAlt;
    [NameAttribute("fi-rr-video-duration")]
public static UIcons VideoDuration;
    [NameAttribute("fi-rr-video-plus")]
public static UIcons VideoPlus;
    [NameAttribute("fi-rr-video-slash")]
public static UIcons VideoSlash;
    [NameAttribute("fi-rr-videoconference")]
public static UIcons Videoconference;
    [NameAttribute("fi-rr-vihara")]
public static UIcons Vihara;
    [NameAttribute("fi-rr-violin")]
public static UIcons Violin;
    [NameAttribute("fi-rr-virus")]
public static UIcons Virus;
    [NameAttribute("fi-rr-virus-slash")]
public static UIcons VirusSlash;
    [NameAttribute("fi-rr-viruses")]
public static UIcons Viruses;
    [NameAttribute("fi-rr-visit")]
public static UIcons Visit;
    [NameAttribute("fi-rr-voicemail")]
public static UIcons Voicemail;
    [NameAttribute("fi-rr-volcano")]
public static UIcons Volcano;
    [NameAttribute("fi-rr-volleyball")]
public static UIcons Volleyball;
    [NameAttribute("fi-rr-volume")]
public static UIcons Volume;
    [NameAttribute("fi-rr-volume-down")]
public static UIcons VolumeDown;
    [NameAttribute("fi-rr-volume-mute")]
public static UIcons VolumeMute;
    [NameAttribute("fi-rr-volume-off")]
public static UIcons VolumeOff;
    [NameAttribute("fi-rr-volume-slash")]
public static UIcons VolumeSlash;
    [NameAttribute("fi-rr-vote-nay")]
public static UIcons VoteNay;
    [NameAttribute("fi-rr-vote-yea")]
public static UIcons VoteYea;
    [NameAttribute("fi-rr-vr-cardboard")]
public static UIcons VrCardboard;
    [NameAttribute("fi-rr-w")]
public static UIcons W;
    [NameAttribute("fi-rr-waffle")]
public static UIcons Waffle;
    [NameAttribute("fi-rr-wagon-covered")]
public static UIcons WagonCovered;
    [NameAttribute("fi-rr-walker")]
public static UIcons Walker;
    [NameAttribute("fi-rr-walkie-talkie")]
public static UIcons WalkieTalkie;
    [NameAttribute("fi-rr-walking")]
public static UIcons Walking;
    [NameAttribute("fi-rr-wallet")]
public static UIcons Wallet;
    [NameAttribute("fi-rr-wallet-arrow")]
public static UIcons WalletArrow;
    [NameAttribute("fi-rr-wallet-buyer")]
public static UIcons WalletBuyer;
    [NameAttribute("fi-rr-warehouse-alt")]
public static UIcons WarehouseAlt;
    [NameAttribute("fi-rr-warranty")]
public static UIcons Warranty;
    [NameAttribute("fi-rr-washer")]
public static UIcons Washer;
    [NameAttribute("fi-rr-waste")]
public static UIcons Waste;
    [NameAttribute("fi-rr-waste-pollution")]
public static UIcons WastePollution;
    [NameAttribute("fi-rr-watch")]
public static UIcons Watch;
    [NameAttribute("fi-rr-watch-calculator")]
public static UIcons WatchCalculator;
    [NameAttribute("fi-rr-watch-fitness")]
public static UIcons WatchFitness;
    [NameAttribute("fi-rr-watch-smart")]
public static UIcons WatchSmart;
    [NameAttribute("fi-rr-water")]
public static UIcons Water;
    [NameAttribute("fi-rr-water-bottle")]
public static UIcons WaterBottle;
    [NameAttribute("fi-rr-water-ladder")]
public static UIcons WaterLadder;
    [NameAttribute("fi-rr-water-lower")]
public static UIcons WaterLower;
    [NameAttribute("fi-rr-water-rise")]
public static UIcons WaterRise;
    [NameAttribute("fi-rr-watermelon")]
public static UIcons Watermelon;
    [NameAttribute("fi-rr-wave")]
public static UIcons Wave;
    [NameAttribute("fi-rr-wave-sine")]
public static UIcons WaveSine;
    [NameAttribute("fi-rr-wave-square")]
public static UIcons WaveSquare;
    [NameAttribute("fi-rr-wave-triangle")]
public static UIcons WaveTriangle;
    [NameAttribute("fi-rr-waveform")]
public static UIcons Waveform;
    [NameAttribute("fi-rr-waveform-path")]
public static UIcons WaveformPath;
    [NameAttribute("fi-rr-web")]
public static UIcons Web;
    [NameAttribute("fi-rr-web-design")]
public static UIcons WebDesign;
    [NameAttribute("fi-rr-webcam")]
public static UIcons Webcam;
    [NameAttribute("fi-rr-webcam-slash")]
public static UIcons WebcamSlash;
    [NameAttribute("fi-rr-webhook")]
public static UIcons Webhook;
    [NameAttribute("fi-rr-wednesday")]
public static UIcons Wednesday;
    [NameAttribute("fi-rr-whale")]
public static UIcons Whale;
    [NameAttribute("fi-rr-wheat")]
public static UIcons Wheat;
    [NameAttribute("fi-rr-wheat-awn")]
public static UIcons WheatAwn;
    [NameAttribute("fi-rr-wheat-awn-circle-exclamation")]
public static UIcons WheatAwnCircleExclamation;
    [NameAttribute("fi-rr-wheat-awn-slash")]
public static UIcons WheatAwnSlash;
    [NameAttribute("fi-rr-wheat-slash")]
public static UIcons WheatSlash;
    [NameAttribute("fi-rr-wheelchair")]
public static UIcons Wheelchair;
    [NameAttribute("fi-rr-wheelchair-move")]
public static UIcons WheelchairMove;
    [NameAttribute("fi-rr-wheelchair-sleeping")]
public static UIcons WheelchairSleeping;
    [NameAttribute("fi-rr-whistle")]
public static UIcons Whistle;
    [NameAttribute("fi-rr-white-space")]
public static UIcons WhiteSpace;
    [NameAttribute("fi-rr-wifi")]
public static UIcons Wifi;
    [NameAttribute("fi-rr-wifi-1")]
public static UIcons Wifi1;
    [NameAttribute("fi-rr-wifi-2")]
public static UIcons Wifi2;
    [NameAttribute("fi-rr-wifi-alt")]
public static UIcons WifiAlt;
    [NameAttribute("fi-rr-wifi-exclamation")]
public static UIcons WifiExclamation;
    [NameAttribute("fi-rr-wifi-slash")]
public static UIcons WifiSlash;
    [NameAttribute("fi-rr-wind")]
public static UIcons Wind;
    [NameAttribute("fi-rr-wind-turbine")]
public static UIcons WindTurbine;
    [NameAttribute("fi-rr-wind-warning")]
public static UIcons WindWarning;
    [NameAttribute("fi-rr-window-alt")]
public static UIcons WindowAlt;
    [NameAttribute("fi-rr-window-frame")]
public static UIcons WindowFrame;
    [NameAttribute("fi-rr-window-frame-open")]
public static UIcons WindowFrameOpen;
    [NameAttribute("fi-rr-window-maximize")]
public static UIcons WindowMaximize;
    [NameAttribute("fi-rr-window-minimize")]
public static UIcons WindowMinimize;
    [NameAttribute("fi-rr-window-restore")]
public static UIcons WindowRestore;
    [NameAttribute("fi-rr-windsock")]
public static UIcons Windsock;
    [NameAttribute("fi-rr-wine-bottle")]
public static UIcons WineBottle;
    [NameAttribute("fi-rr-wine-glass-crack")]
public static UIcons WineGlassCrack;
    [NameAttribute("fi-rr-wine-glass-empty")]
public static UIcons WineGlassEmpty;
    [NameAttribute("fi-rr-wink")]
public static UIcons Wink;
    [NameAttribute("fi-rr-wishlist-heart")]
public static UIcons WishlistHeart;
    [NameAttribute("fi-rr-wishlist-star")]
public static UIcons WishlistStar;
    [NameAttribute("fi-rr-woman-head")]
public static UIcons WomanHead;
    [NameAttribute("fi-rr-woman-scientist")]
public static UIcons WomanScientist;
    [NameAttribute("fi-rr-won-sign")]
public static UIcons WonSign;
    [NameAttribute("fi-rr-work-in-progress")]
public static UIcons WorkInProgress;
    [NameAttribute("fi-rr-workflow")]
public static UIcons Workflow;
    [NameAttribute("fi-rr-workflow-alt")]
public static UIcons WorkflowAlt;
    [NameAttribute("fi-rr-workflow-setting")]
public static UIcons WorkflowSetting;
    [NameAttribute("fi-rr-workflow-setting-alt")]
public static UIcons WorkflowSettingAlt;
    [NameAttribute("fi-rr-workshop")]
public static UIcons Workshop;
    [NameAttribute("fi-rr-world")]
public static UIcons World;
    [NameAttribute("fi-rr-worm")]
public static UIcons Worm;
    [NameAttribute("fi-rr-wreath")]
public static UIcons Wreath;
    [NameAttribute("fi-rr-wrench-alt")]
public static UIcons WrenchAlt;
    [NameAttribute("fi-rr-wrench-simple")]
public static UIcons WrenchSimple;
    [NameAttribute("fi-rr-x")]
public static UIcons X;
    [NameAttribute("fi-rr-x-ray")]
public static UIcons XRay;
    [NameAttribute("fi-rr-y")]
public static UIcons Y;
    [NameAttribute("fi-rr-yen")]
public static UIcons Yen;
    [NameAttribute("fi-rr-yin-yang")]
public static UIcons YinYang;
    [NameAttribute("fi-rr-z")]
public static UIcons Z;
    [NameAttribute("fi-rr-zip-file")]
public static UIcons ZipFile;
    [NameAttribute("fi-rr-zoom-in")]
public static UIcons ZoomIn;
    [NameAttribute("fi-rr-zoom-out")]
public static UIcons ZoomOut;
    [NameAttribute("fi-brands-3m")]
public static UIcons Brands_3m;
    [NameAttribute("fi-brands-500px")]
public static UIcons Brands_500px;
    [NameAttribute("fi-brands-abbot-laboratories")]
public static UIcons BrandsAbbotLaboratories;
    [NameAttribute("fi-brands-accusoft")]
public static UIcons BrandsAccusoft;
    [NameAttribute("fi-brands-acrobat")]
public static UIcons BrandsAcrobat;
    [NameAttribute("fi-brands-adobe")]
public static UIcons BrandsAdobe;
    [NameAttribute("fi-brands-aecom")]
public static UIcons BrandsAecom;
    [NameAttribute("fi-brands-aero")]
public static UIcons BrandsAero;
    [NameAttribute("fi-brands-after-effects")]
public static UIcons BrandsAfterEffects;
    [NameAttribute("fi-brands-airbnb")]
public static UIcons BrandsAirbnb;
    [NameAttribute("fi-brands-algolia")]
public static UIcons BrandsAlgolia;
    [NameAttribute("fi-brands-amd")]
public static UIcons BrandsAmd;
    [NameAttribute("fi-brands-american-express")]
public static UIcons BrandsAmericanExpress;
    [NameAttribute("fi-brands-android")]
public static UIcons BrandsAndroid;
    [NameAttribute("fi-brands-animate")]
public static UIcons BrandsAnimate;
    [NameAttribute("fi-brands-app-store-ios")]
public static UIcons BrandsAppStoreIos;
    [NameAttribute("fi-brands-apple")]
public static UIcons BrandsApple;
    [NameAttribute("fi-brands-apple-pay")]
public static UIcons BrandsApplePay;
    [NameAttribute("fi-brands-artstation")]
public static UIcons BrandsArtstation;
    [NameAttribute("fi-brands-astrazeneca")]
public static UIcons BrandsAstrazeneca;
    [NameAttribute("fi-brands-asus")]
public static UIcons BrandsAsus;
    [NameAttribute("fi-brands-atandt")]
public static UIcons BrandsAtandt;
    [NameAttribute("fi-brands-atlassian")]
public static UIcons BrandsAtlassian;
    [NameAttribute("fi-brands-atom")]
public static UIcons BrandsAtom;
    [NameAttribute("fi-brands-audition")]
public static UIcons BrandsAudition;
    [NameAttribute("fi-brands-behance")]
public static UIcons BrandsBehance;
    [NameAttribute("fi-brands-bitcoin")]
public static UIcons BrandsBitcoin;
    [NameAttribute("fi-brands-blackberry")]
public static UIcons BrandsBlackberry;
    [NameAttribute("fi-brands-blogger")]
public static UIcons BrandsBlogger;
    [NameAttribute("fi-brands-bluetooth")]
public static UIcons BrandsBluetooth;
    [NameAttribute("fi-brands-bootstrap")]
public static UIcons BrandsBootstrap;
    [NameAttribute("fi-brands-bridgestone")]
public static UIcons BrandsBridgestone;
    [NameAttribute("fi-brands-burger-king")]
public static UIcons BrandsBurgerKing;
    [NameAttribute("fi-brands-c")]
public static UIcons BrandsC;
    [NameAttribute("fi-brands-capture")]
public static UIcons BrandsCapture;
    [NameAttribute("fi-brands-cc-amazon-pay")]
public static UIcons BrandsCcAmazonPay;
    [NameAttribute("fi-brands-cc-apple-pay")]
public static UIcons BrandsCcApplePay;
    [NameAttribute("fi-brands-cc-diners-club")]
public static UIcons BrandsCcDinersClub;
    [NameAttribute("fi-brands-cc-visa")]
public static UIcons BrandsCcVisa;
    [NameAttribute("fi-brands-centos")]
public static UIcons BrandsCentos;
    [NameAttribute("fi-brands-character")]
public static UIcons BrandsCharacter;
    [NameAttribute("fi-brands-chromecast")]
public static UIcons BrandsChromecast;
    [NameAttribute("fi-brands-cloudflare")]
public static UIcons BrandsCloudflare;
    [NameAttribute("fi-brands-confluence")]
public static UIcons BrandsConfluence;
    [NameAttribute("fi-brands-creative-commons")]
public static UIcons BrandsCreativeCommons;
    [NameAttribute("fi-brands-creative-commons-by")]
public static UIcons BrandsCreativeCommonsBy;
    [NameAttribute("fi-brands-creative-commons-nc")]
public static UIcons BrandsCreativeCommonsNc;
    [NameAttribute("fi-brands-creative-commons-nc-eu")]
public static UIcons BrandsCreativeCommonsNcEu;
    [NameAttribute("fi-brands-creative-commons-nc-jp")]
public static UIcons BrandsCreativeCommonsNcJp;
    [NameAttribute("fi-brands-creative-commons-nd")]
public static UIcons BrandsCreativeCommonsNd;
    [NameAttribute("fi-brands-creative-commons-pd")]
public static UIcons BrandsCreativeCommonsPd;
    [NameAttribute("fi-brands-creative-commons-pd-alt")]
public static UIcons BrandsCreativeCommonsPdAlt;
    [NameAttribute("fi-brands-creative-commons-remix")]
public static UIcons BrandsCreativeCommonsRemix;
    [NameAttribute("fi-brands-creative-commons-sa")]
public static UIcons BrandsCreativeCommonsSa;
    [NameAttribute("fi-brands-creative-commons-sampling")]
public static UIcons BrandsCreativeCommonsSampling;
    [NameAttribute("fi-brands-creative-commons-sampling-plus")]
public static UIcons BrandsCreativeCommonsSamplingPlus;
    [NameAttribute("fi-brands-creative-commons-share")]
public static UIcons BrandsCreativeCommonsShare;
    [NameAttribute("fi-brands-creative-commons-zero")]
public static UIcons BrandsCreativeCommonsZero;
    [NameAttribute("fi-brands-css3")]
public static UIcons BrandsCss3;
    [NameAttribute("fi-brands-css3-alt")]
public static UIcons BrandsCss3Alt;
    [NameAttribute("fi-brands-dailymotion")]
public static UIcons BrandsDailymotion;
    [NameAttribute("fi-brands-deezer")]
public static UIcons BrandsDeezer;
    [NameAttribute("fi-brands-delphi")]
public static UIcons BrandsDelphi;
    [NameAttribute("fi-brands-dev")]
public static UIcons BrandsDev;
    [NameAttribute("fi-brands-devianart")]
public static UIcons BrandsDevianart;
    [NameAttribute("fi-brands-digg")]
public static UIcons BrandsDigg;
    [NameAttribute("fi-brands-dimension")]
public static UIcons BrandsDimension;
    [NameAttribute("fi-brands-discord")]
public static UIcons BrandsDiscord;
    [NameAttribute("fi-brands-docker")]
public static UIcons BrandsDocker;
    [NameAttribute("fi-brands-dribbble")]
public static UIcons BrandsDribbble;
    [NameAttribute("fi-brands-dropbox")]
public static UIcons BrandsDropbox;
    [NameAttribute("fi-brands-drupal")]
public static UIcons BrandsDrupal;
    [NameAttribute("fi-brands-ebay")]
public static UIcons BrandsEbay;
    [NameAttribute("fi-brands-elementor")]
public static UIcons BrandsElementor;
    [NameAttribute("fi-brands-ethereum")]
public static UIcons BrandsEthereum;
    [NameAttribute("fi-brands-etsy")]
public static UIcons BrandsEtsy;
    [NameAttribute("fi-brands-evernote")]
public static UIcons BrandsEvernote;
    [NameAttribute("fi-brands-facebook")]
public static UIcons BrandsFacebook;
    [NameAttribute("fi-brands-facebook-messenger")]
public static UIcons BrandsFacebookMessenger;
    [NameAttribute("fi-brands-fedex")]
public static UIcons BrandsFedex;
    [NameAttribute("fi-brands-figma")]
public static UIcons BrandsFigma;
    [NameAttribute("fi-brands-firefox")]
public static UIcons BrandsFirefox;
    [NameAttribute("fi-brands-firefox-browser")]
public static UIcons BrandsFirefoxBrowser;
    [NameAttribute("fi-brands-flaticon")]
public static UIcons BrandsFlaticon;
    [NameAttribute("fi-brands-flaticon-1")]
public static UIcons BrandsFlaticon1;
    [NameAttribute("fi-brands-flickr")]
public static UIcons BrandsFlickr;
    [NameAttribute("fi-brands-flipboard")]
public static UIcons BrandsFlipboard;
    [NameAttribute("fi-brands-fonts")]
public static UIcons BrandsFonts;
    [NameAttribute("fi-brands-foursquare")]
public static UIcons BrandsFoursquare;
    [NameAttribute("fi-brands-freepik")]
public static UIcons BrandsFreepik;
    [NameAttribute("fi-brands-freepik-1")]
public static UIcons BrandsFreepik1;
    [NameAttribute("fi-brands-fresco")]
public static UIcons BrandsFresco;
    [NameAttribute("fi-brands-github")]
public static UIcons BrandsGithub;
    [NameAttribute("fi-brands-gitlab")]
public static UIcons BrandsGitlab;
    [NameAttribute("fi-brands-goodreads")]
public static UIcons BrandsGoodreads;
    [NameAttribute("fi-brands-google")]
public static UIcons BrandsGoogle;
    [NameAttribute("fi-brands-haskell")]
public static UIcons BrandsHaskell;
    [NameAttribute("fi-brands-hbo")]
public static UIcons BrandsHbo;
    [NameAttribute("fi-brands-hotjar")]
public static UIcons BrandsHotjar;
    [NameAttribute("fi-brands-html5")]
public static UIcons BrandsHtml5;
    [NameAttribute("fi-brands-huawei")]
public static UIcons BrandsHuawei;
    [NameAttribute("fi-brands-hubspot")]
public static UIcons BrandsHubspot;
    [NameAttribute("fi-brands-ibm")]
public static UIcons BrandsIbm;
    [NameAttribute("fi-brands-iconfinder")]
public static UIcons BrandsIconfinder;
    [NameAttribute("fi-brands-illustrator")]
public static UIcons BrandsIllustrator;
    [NameAttribute("fi-brands-illustrator-draw")]
public static UIcons BrandsIllustratorDraw;
    [NameAttribute("fi-brands-imdb")]
public static UIcons BrandsImdb;
    [NameAttribute("fi-brands-incopy")]
public static UIcons BrandsIncopy;
    [NameAttribute("fi-brands-indesign")]
public static UIcons BrandsIndesign;
    [NameAttribute("fi-brands-instagram")]
public static UIcons BrandsInstagram;
    [NameAttribute("fi-brands-intel")]
public static UIcons BrandsIntel;
    [NameAttribute("fi-brands-invision")]
public static UIcons BrandsInvision;
    [NameAttribute("fi-brands-itunes")]
public static UIcons BrandsItunes;
    [NameAttribute("fi-brands-janseen")]
public static UIcons BrandsJanseen;
    [NameAttribute("fi-brands-java")]
public static UIcons BrandsJava;
    [NameAttribute("fi-brands-jcb")]
public static UIcons BrandsJcb;
    [NameAttribute("fi-brands-jira")]
public static UIcons BrandsJira;
    [NameAttribute("fi-brands-johnson-and-johnson")]
public static UIcons BrandsJohnsonAndJohnson;
    [NameAttribute("fi-brands-joomla")]
public static UIcons BrandsJoomla;
    [NameAttribute("fi-brands-js")]
public static UIcons BrandsJs;
    [NameAttribute("fi-brands-kickstarter")]
public static UIcons BrandsKickstarter;
    [NameAttribute("fi-brands-line")]
public static UIcons BrandsLine;
    [NameAttribute("fi-brands-linkedin")]
public static UIcons BrandsLinkedin;
    [NameAttribute("fi-brands-lisp")]
public static UIcons BrandsLisp;
    [NameAttribute("fi-brands-mailchimp")]
public static UIcons BrandsMailchimp;
    [NameAttribute("fi-brands-marriott-international")]
public static UIcons BrandsMarriottInternational;
    [NameAttribute("fi-brands-mcdonalds")]
public static UIcons BrandsMcdonalds;
    [NameAttribute("fi-brands-media-encoder")]
public static UIcons BrandsMediaEncoder;
    [NameAttribute("fi-brands-medium")]
public static UIcons BrandsMedium;
    [NameAttribute("fi-brands-meta")]
public static UIcons BrandsMeta;
    [NameAttribute("fi-brands-microsoft")]
public static UIcons BrandsMicrosoft;
    [NameAttribute("fi-brands-microsoft-edge")]
public static UIcons BrandsMicrosoftEdge;
    [NameAttribute("fi-brands-microsoft-explorer")]
public static UIcons BrandsMicrosoftExplorer;
    [NameAttribute("fi-brands-mysql")]
public static UIcons BrandsMysql;
    [NameAttribute("fi-brands-napster")]
public static UIcons BrandsNapster;
    [NameAttribute("fi-brands-nestle")]
public static UIcons BrandsNestle;
    [NameAttribute("fi-brands-netflix")]
public static UIcons BrandsNetflix;
    [NameAttribute("fi-brands-node-js")]
public static UIcons BrandsNodeJs;
    [NameAttribute("fi-brands-nvidia")]
public static UIcons BrandsNvidia;
    [NameAttribute("fi-brands-oracle")]
public static UIcons BrandsOracle;
    [NameAttribute("fi-brands-patreon")]
public static UIcons BrandsPatreon;
    [NameAttribute("fi-brands-paypal")]
public static UIcons BrandsPaypal;
    [NameAttribute("fi-brands-pfizer")]
public static UIcons BrandsPfizer;
    [NameAttribute("fi-brands-photoshop")]
public static UIcons BrandsPhotoshop;
    [NameAttribute("fi-brands-photoshop-camera")]
public static UIcons BrandsPhotoshopCamera;
    [NameAttribute("fi-brands-photoshop-express")]
public static UIcons BrandsPhotoshopExpress;
    [NameAttribute("fi-brands-photoshop-lightroom")]
public static UIcons BrandsPhotoshopLightroom;
    [NameAttribute("fi-brands-photoshop-lightroom-classic")]
public static UIcons BrandsPhotoshopLightroomClassic;
    [NameAttribute("fi-brands-php")]
public static UIcons BrandsPhp;
    [NameAttribute("fi-brands-pinterest")]
public static UIcons BrandsPinterest;
    [NameAttribute("fi-brands-postgre")]
public static UIcons BrandsPostgre;
    [NameAttribute("fi-brands-premiere")]
public static UIcons BrandsPremiere;
    [NameAttribute("fi-brands-premiere-rush")]
public static UIcons BrandsPremiereRush;
    [NameAttribute("fi-brands-product-hunt")]
public static UIcons BrandsProductHunt;
    [NameAttribute("fi-brands-python")]
public static UIcons BrandsPython;
    [NameAttribute("fi-brands-raspberry-pi")]
public static UIcons BrandsRaspberryPi;
    [NameAttribute("fi-brands-reddit")]
public static UIcons BrandsReddit;
    [NameAttribute("fi-brands-samsung")]
public static UIcons BrandsSamsung;
    [NameAttribute("fi-brands-sap")]
public static UIcons BrandsSap;
    [NameAttribute("fi-brands-sass")]
public static UIcons BrandsSass;
    [NameAttribute("fi-brands-shopify")]
public static UIcons BrandsShopify;
    [NameAttribute("fi-brands-siemens")]
public static UIcons BrandsSiemens;
    [NameAttribute("fi-brands-sketch")]
public static UIcons BrandsSketch;
    [NameAttribute("fi-brands-skype")]
public static UIcons BrandsSkype;
    [NameAttribute("fi-brands-slack")]
public static UIcons BrandsSlack;
    [NameAttribute("fi-brands-slidesgo")]
public static UIcons BrandsSlidesgo;
    [NameAttribute("fi-brands-snapchat")]
public static UIcons BrandsSnapchat;
    [NameAttribute("fi-brands-sony")]
public static UIcons BrandsSony;
    [NameAttribute("fi-brands-soundcloud")]
public static UIcons BrandsSoundcloud;
    [NameAttribute("fi-brands-spark")]
public static UIcons BrandsSpark;
    [NameAttribute("fi-brands-spotify")]
public static UIcons BrandsSpotify;
    [NameAttribute("fi-brands-starbucks")]
public static UIcons BrandsStarbucks;
    [NameAttribute("fi-brands-stock")]
public static UIcons BrandsStock;
    [NameAttribute("fi-brands-storyset")]
public static UIcons BrandsStoryset;
    [NameAttribute("fi-brands-stripe")]
public static UIcons BrandsStripe;
    [NameAttribute("fi-brands-substance-3d-designer")]
public static UIcons BrandsSubstance3dDesigner;
    [NameAttribute("fi-brands-substance-3d-painter")]
public static UIcons BrandsSubstance3dPainter;
    [NameAttribute("fi-brands-substance-3d-sampler")]
public static UIcons BrandsSubstance3dSampler;
    [NameAttribute("fi-brands-substance-3d-stager")]
public static UIcons BrandsSubstance3dStager;
    [NameAttribute("fi-brands-swift")]
public static UIcons BrandsSwift;
    [NameAttribute("fi-brands-t-mobile")]
public static UIcons BrandsTMobile;
    [NameAttribute("fi-brands-telegram")]
public static UIcons BrandsTelegram;
    [NameAttribute("fi-brands-tencent")]
public static UIcons BrandsTencent;
    [NameAttribute("fi-brands-the-home-depot")]
public static UIcons BrandsTheHomeDepot;
    [NameAttribute("fi-brands-tik-tok")]
public static UIcons BrandsTikTok;
    [NameAttribute("fi-brands-trello")]
public static UIcons BrandsTrello;
    [NameAttribute("fi-brands-tripadvisor")]
public static UIcons BrandsTripadvisor;
    [NameAttribute("fi-brands-tumblr")]
public static UIcons BrandsTumblr;
    [NameAttribute("fi-brands-twitch")]
public static UIcons BrandsTwitch;
    [NameAttribute("fi-brands-twitter")]
public static UIcons BrandsTwitter;
    [NameAttribute("fi-brands-twitter-alt")]
public static UIcons BrandsTwitterAlt;
    [NameAttribute("fi-brands-twitter-alt-circle")]
public static UIcons BrandsTwitterAltCircle;
    [NameAttribute("fi-brands-twitter-alt-square")]
public static UIcons BrandsTwitterAltSquare;
    [NameAttribute("fi-brands-typescript")]
public static UIcons BrandsTypescript;
    [NameAttribute("fi-brands-uber")]
public static UIcons BrandsUber;
    [NameAttribute("fi-brands-ubuntu")]
public static UIcons BrandsUbuntu;
    [NameAttribute("fi-brands-unilever")]
public static UIcons BrandsUnilever;
    [NameAttribute("fi-brands-unity")]
public static UIcons BrandsUnity;
    [NameAttribute("fi-brands-unsplash")]
public static UIcons BrandsUnsplash;
    [NameAttribute("fi-brands-ups")]
public static UIcons BrandsUps;
    [NameAttribute("fi-brands-usaa")]
public static UIcons BrandsUsaa;
    [NameAttribute("fi-brands-verizon")]
public static UIcons BrandsVerizon;
    [NameAttribute("fi-brands-videvo")]
public static UIcons BrandsVidevo;
    [NameAttribute("fi-brands-vimeo")]
public static UIcons BrandsVimeo;
    [NameAttribute("fi-brands-visa")]
public static UIcons BrandsVisa;
    [NameAttribute("fi-brands-visual-basic")]
public static UIcons BrandsVisualBasic;
    [NameAttribute("fi-brands-vk")]
public static UIcons BrandsVk;
    [NameAttribute("fi-brands-walmart")]
public static UIcons BrandsWalmart;
    [NameAttribute("fi-brands-wepik")]
public static UIcons BrandsWepik;
    [NameAttribute("fi-brands-whatsapp")]
public static UIcons BrandsWhatsapp;
    [NameAttribute("fi-brands-wikipedia")]
public static UIcons BrandsWikipedia;
    [NameAttribute("fi-brands-windows")]
public static UIcons BrandsWindows;
    [NameAttribute("fi-brands-wix")]
public static UIcons BrandsWix;
    [NameAttribute("fi-brands-wordpress")]
public static UIcons BrandsWordpress;
    [NameAttribute("fi-brands-xd")]
public static UIcons BrandsXd;
    [NameAttribute("fi-brands-xing")]
public static UIcons BrandsXing;
    [NameAttribute("fi-brands-yahoo")]
public static UIcons BrandsYahoo;
    [NameAttribute("fi-brands-yandex")]
public static UIcons BrandsYandex;
    [NameAttribute("fi-brands-yelp")]
public static UIcons BrandsYelp;
    [NameAttribute("fi-brands-youtube")]
public static UIcons BrandsYoutube;
    [NameAttribute("fi-brands-zoom")]
public static UIcons BrandsZoom;
}
[EnumAttribute]
[NameAttribute("tss.uiconweight")]
public enum Tesserae.UIconsWeight : Enum {
    public int value__;
    [NameAttribute("fi-rr-")]
public static UIconsWeight Regular;
    [NameAttribute("fi-sr-")]
public static UIconsWeight Solid;
    [NameAttribute("fi-br-")]
public static UIconsWeight Bold;
    [NameAttribute("fi-tr-")]
public static UIconsWeight Thin;
    [NameAttribute("fi-rs-")]
public static UIconsWeight RegularStraight;
    [NameAttribute("fi-ss-")]
public static UIconsWeight SolidStraight;
    [NameAttribute("fi-bs-")]
public static UIconsWeight BoldStraight;
    [NameAttribute("fi-ts-")]
public static UIconsWeight ThinStraight;
}
[EnumAttribute]
[NameAttribute("tss.Unit")]
public enum Tesserae.Unit : Enum {
    public int value__;
    public static Unit Default;
    [NameAttribute("auto")]
public static Unit Auto;
    [NameAttribute("%")]
public static Unit Percent;
    [NameAttribute("px")]
public static Unit Pixels;
    [NameAttribute("vh")]
public static Unit ViewportHeight;
    [NameAttribute("vw")]
public static Unit ViewportWidth;
    [NameAttribute("inherit")]
public static Unit Inherit;
    [NameAttribute("fr")]
public static Unit FR;
}
[NameAttribute("tss.us")]
public class Tesserae.UnitSize : object {
    private static UnitSize[] _cachedIntegers;
    private string _cachedValue;
    [DebuggerBrowsableAttribute]
private float <Size>k__BackingField;
    [DebuggerBrowsableAttribute]
private Unit <Unit>k__BackingField;
    public float Size { get; private set; }
    public Unit Unit { get; private set; }
    public UnitSize(float size, Unit unit);
    public UnitSize(string custom);
    private static UnitSize();
    public static UnitSize FromPixelCache(int value);
    private static UnitSize[] CreateCache(int count);
    public static UnitSize Auto();
    public static UnitSize Inherit();
    public float get_Size();
    private void set_Size(float value);
    public Unit get_Unit();
    private void set_Unit(Unit value);
    public virtual string ToString();
    public static UnitSize op_UnaryNegation(UnitSize a);
    public static UnitSize op_UnaryPlus(UnitSize a);
}
[ExtensionAttribute]
[NameAttribute("tss.usX")]
public static class Tesserae.UnitSizeExtensions : object {
    [ExtensionAttribute]
public static UnitSize px(int value);
    [ExtensionAttribute]
public static UnitSize percent(int value);
    [ExtensionAttribute]
public static UnitSize vh(int value);
    [ExtensionAttribute]
public static UnitSize vw(int value);
    [ExtensionAttribute]
public static UnitSize fr(int value);
    [ExtensionAttribute]
public static UnitSize percent(double value);
    [ExtensionAttribute]
public static UnitSize px(double value);
    [ExtensionAttribute]
public static UnitSize vh(double value);
    [ExtensionAttribute]
public static UnitSize vw(double value);
    [ExtensionAttribute]
public static UnitSize fr(double value);
    [ExtensionAttribute]
public static UnitSize percent(float value);
    [ExtensionAttribute]
public static UnitSize px(float value);
    [ExtensionAttribute]
public static UnitSize vh(float value);
    [ExtensionAttribute]
public static UnitSize vw(float value);
    [ExtensionAttribute]
public static UnitSize fr(float value);
}
[NameAttribute("tss.Validation")]
public static class Tesserae.Validation : object {
    public static string NotEmpty(TextArea textArea);
    public static string NotEmpty(TextBox textBox);
    public static string NotNegativeInteger(TextBox textBox);
    public static string NonZeroPositiveInteger(TextBox textBox);
    public static string LightColor(ColorPicker colorPicker);
    public static string DarkColor(ColorPicker colorPicker);
    public static string NotInThePast(DateTimePicker dateTimePicker);
    public static string NotInTheFuture(DateTimePicker dateTimePicker);
    public static string BetweenRange(DateTimePicker dateTimePicker, DateTime from, DateTime to);
    public static string NotInThePast(DatePicker datePicker);
    public static string NotInTheFuture(DatePicker datePicker);
    public static string BetweenRange(DatePicker datePicker, DateTime from, DateTime to);
}
[ExtensionAttribute]
[NameAttribute("tss.vX")]
public static class Tesserae.ValidationExtensions : object {
    [ExtensionAttribute]
public static TComponent Validation(TComponent component, Func`2<TComponent, string> validate, Validator validator, bool forceInitialValidation);
}
[NameAttribute("tss.VS")]
public enum Tesserae.ValidationState : Enum {
    public int value__;
    public static ValidationState EveryComponentIsValid;
    public static ValidationState Invalid;
    public static ValidationState NoInvalidComponentFoundSoFar;
}
[NameAttribute("tss.Validator")]
public class Tesserae.Validator : object {
    [DebuggerBrowsableAttribute]
private OnValidationHandler ValidationOccured;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ICanValidate, ValueTuple`2<Func`1<bool>, Action>> _registeredComponents;
    private HashSet`1<ICanValidate> _registeredComponentsThatUserHasInteractedWith;
    private double _timeout;
    private int _callsDepth;
    public bool IsValid { get; }
    private void add_ValidationOccured(OnValidationHandler value);
    private void remove_ValidationOccured(OnValidationHandler value);
    public void Register(ICanValidate`1<T> component, Func`1<bool> wouldBeValid, Action validate);
    public void ResetState();
    public void RegisterFromCallback(Func`1<bool> isInvalid, Action onRevalidation);
    public Validator OnValidation(OnValidationHandler onValidation);
    private void RaiseOnValidation();
    public bool AreCurrentValuesAllValid();
    public bool get_IsValid();
    public bool Revalidate();
    private ValidationState GetValidity(bool validateOnlyUserEditedComponents, bool updateComponentAppearances);
    private void <RaiseOnValidation>b__13_0(Object[] _);
}
[NameAttribute("tss.VirtualizedList")]
public class Tesserae.VirtualizedList : object {
    private static int PagesToVirtualize;
    private static int InitialPagesToCreate;
    private ListPageCache`1<IComponent> _listPageCache;
    private int _pagesToVirtualizeUpperBoundary;
    private int _pagesToVirtualizeLowerBoundary;
    private string _componentHeightInPercentage;
    private string _componentWidthInPercentage;
    private HTMLElement _innerElement;
    private HTMLDivElement _basicListContainer;
    private HTMLDivElement _topSpacingDiv;
    private HTMLDivElement _bottomSpacingDiv;
    private bool _initialPagesCreated;
    private Func`1<IComponent> _emptyListMessageGenerator;
    private int _currentPage;
    private UnitSize _componentHeight;
    private UnitSize _pageHeight;
    private double _currentScrollPosition;
    public VirtualizedList(int rowsPerPage, int columnsPerRow);
    public VirtualizedList WithEmptyMessage(Func`1<IComponent> emptyListMessageGenerator);
    public VirtualizedList WithListItems(IEnumerable`1<IComponent> listItems);
    public sealed virtual HTMLElement Render();
    private static string GetComponentSize(int itemsCount);
    private static HTMLDivElement CreateInnerElementHtmlDivElement();
    private static HTMLDivElement CreateSpacingHtmlDivElement(string className);
    private static void SetHtmlElementHeight(HTMLElement htmlElement, UnitSize height);
    private static void CreatePage(HTMLElement page, Action`1<HTMLElement> renderingAction);
    private HTMLDivElement CreateBasicListContainerHtmlDivElement();
    private void AppendChildrenToBasicListContainerHtmlDivElement(HTMLElement[] htmlElements);
    private HTMLDivElement CreateTopSpacingHtmlDivElement();
    private HTMLDivElement CreateBottomSpacingHtmlDivElement();
    private void SetBasicListContainerHeight();
    private void SetTopSpacingDivHeight(UnitSize height);
    private void SetBottomSpacingDivHeight(UnitSize height);
    private IEnumerable`1<HTMLElement> GetInitialPages();
    private IEnumerable`1<HTMLElement> RetrievePagesFromCache(IEnumerable`1<int> rangeOfPageNumbersToRetrieve);
    private HTMLElement RetrievePageFromCache(int pageNumberToRetrieve);
    private HTMLElement CreatePageHtmlElement(int pageNumber);
    private HTMLElement CreateComponentContainerHtmlElement(ValueTuple`2<int, IComponent> componentAndKey);
    private void CreatePageUpwards(HTMLElement page);
    private void CreatePagesDownwards(IEnumerable`1<HTMLElement> pages);
    private void CreatePageDownwards(HTMLElement page);
    private NodeListOf`1<Element> GetRenderedPages();
    private void RemoveFirstPageFromBasicListContainer();
    private void RemoveLastPageFromBasicListContainer();
    private void RemovePageFromBasicListContainer(NodeListOf`1<Element> pages, int index);
    private void AttachOnLastComponentMountedEvent();
    private void AttachBasicListContainerOnScrollEvent();
    private void OnLastComponentMounted(int lastComponentMountedClientHeight);
    private void OnBasicListContainerScroll(object listener);
    private ScrollDirection GetScrollDirection(double scrollTop);
    private void <CreateComponentContainerHtmlElement>b__37_0(CSSStyleDeclaration cssStyleDeclaration);
    private void <CreatePageUpwards>b__38_0(HTMLElement pageToCreate);
}
[NameAttribute("tss.VisibilitySensor")]
public class Tesserae.VisibilitySensor : object {
    private HTMLElement InnerElement;
    private double _debounceTimeout;
    private double _debounce;
    private Action`1<VisibilitySensor> _onVisible;
    private int _maxCalls;
    private IntersectionObserver _observer;
    public VisibilitySensor(Action`1<VisibilitySensor> onVisible, bool singleCall, IComponent message);
    public sealed virtual HTMLElement Render();
    public void Reset();
    private void HookCheck();
    private void UnHookCheck();
    private void OnScroll(Event ev);
    private void CheckVisibility(object t);
    private void <HookCheck>b__9_0(IntersectionObserverEntry[] entries, IntersectionObserver obs);
}
[NameAttribute("tss.WeakMap")]
public class Tesserae.WeakMap : object {
    private object _map;
    public object Get(object key);
    public void Set(object key, object value);
    public bool Has(object key);
    public void Delete(object key);
}
public class Tesserae.WeakRef`1 : object {
    [TemplateAttribute("new WeakRef({data})")]
public WeakRef`1(T data);
    [TemplateAttribute("{this}.deref()")]
public T Deref();
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NameAttribute("tss.WeekPicker")]
public class Tesserae.WeekPicker : MomentPickerBase`2<WeekPicker, ValueTuple`2<int, int>> {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<int, int> Week { get; }
    public WeekPicker(Nullable`1<ValueTuple`2<int, int>> week);
    public ValueTuple`2<int, int> get_Week();
    private static string FormatWeek(ValueTuple`2<int, int> week);
    protected virtual string FormatMoment(ValueTuple`2<int, int> week);
    protected virtual ValueTuple`2<int, int> FormatMoment(string week);
}
[ExtensionAttribute]
public static class TNT.T : object {
    private static Dictionary`2<string, string> _currentTranslation;
    private static Func`2<string, string> _currentTransformer;
    public static string t(FormattableString formattableString);
    [ExtensionAttribute]
public static string t(string originalString);
    public static void SetTranslation(Dictionary`2<string, string> translation);
}
