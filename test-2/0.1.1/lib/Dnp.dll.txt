public class Dnp.Collections.DictionaryChangedEventHandler`2 : MulticastDelegate {
    public DictionaryChangedEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(object sender, NotifyDictionaryChangedEventArgs`2<TKey, TValue> e);
    public virtual IAsyncResult BeginInvoke(object sender, NotifyDictionaryChangedEventArgs`2<TKey, TValue> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dnp.Collections.DictionaryChangingEventHandler`2 : MulticastDelegate {
    public DictionaryChangingEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(object sender, NotifyDictionaryChangingEventArgs`2<TKey, TValue> e);
    public virtual IAsyncResult BeginInvoke(object sender, NotifyDictionaryChangingEventArgs`2<TKey, TValue> e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Dnp.Collections.Generic.BinaryNode`1 : object {
    [CompilerGeneratedAttribute]
private BinaryNode`1<T> <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private BinaryNode`1<T> <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    public BinaryNode`1<T> Left { get; public set; }
    public BinaryNode`1<T> Right { get; public set; }
    public T Data { get; public set; }
    public BinaryNode`1(BinaryNode`1<T> left, BinaryNode`1<T> right, T data);
    [CompilerGeneratedAttribute]
public BinaryNode`1<T> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(BinaryNode`1<T> value);
    [CompilerGeneratedAttribute]
public BinaryNode`1<T> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(BinaryNode`1<T> value);
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(T value);
}
public interface Dnp.Collections.INotifyDictionaryChanged`2 {
    public abstract virtual void add_DictionaryChanged(DictionaryChangedEventHandler`2<TKey, TValue> value);
    public abstract virtual void remove_DictionaryChanged(DictionaryChangedEventHandler`2<TKey, TValue> value);
}
public interface Dnp.Collections.INotifyDictionaryChanging`2 {
    public abstract virtual void add_DictionaryChanging(DictionaryChangingEventHandler`2<TKey, TValue> value);
    public abstract virtual void remove_DictionaryChanging(DictionaryChangingEventHandler`2<TKey, TValue> value);
}
public interface Dnp.Collections.IPropertyCollection {
    public abstract virtual void Add(object o);
}
public class Dnp.Collections.NotifyDictionaryChangedEventArgs`2 : EventArgs {
    private NotifyCollectionChangedAction _Action;
    private IDictionary`2<TKey, TValue> _NewItems;
    private IDictionary`2<TKey, TValue> _OldItems;
    public NotifyCollectionChangedAction Action { get; }
    public KeyValuePair`2<TKey, TValue> NewItem { get; }
    public IDictionary`2<TKey, TValue> NewItems { get; }
    public KeyValuePair`2<TKey, TValue> OldItem { get; }
    public IDictionary`2<TKey, TValue> OldItems { get; }
    public NotifyDictionaryChangedEventArgs`2(NotifyCollectionChangedAction action);
    public NotifyDictionaryChangedEventArgs`2(NotifyCollectionChangedAction action, IDictionary`2<TKey, TValue> items);
    public NotifyDictionaryChangedEventArgs`2(NotifyCollectionChangedAction action, KeyValuePair`2<TKey, TValue> item);
    public NotifyDictionaryChangedEventArgs`2(NotifyCollectionChangedAction action, IDictionary`2<TKey, TValue> newItems, IDictionary`2<TKey, TValue> oldItems);
    public NotifyDictionaryChangedEventArgs`2(NotifyCollectionChangedAction action, KeyValuePair`2<TKey, TValue> newItem, KeyValuePair`2<TKey, TValue> oldItem);
    public NotifyDictionaryChangedEventArgs`2(NotifyCollectionChangedAction action, TKey key, TValue value);
    public NotifyCollectionChangedAction get_Action();
    public KeyValuePair`2<TKey, TValue> get_NewItem();
    public IDictionary`2<TKey, TValue> get_NewItems();
    public KeyValuePair`2<TKey, TValue> get_OldItem();
    public IDictionary`2<TKey, TValue> get_OldItems();
}
public class Dnp.Collections.NotifyDictionaryChangingEventArgs`2 : EventArgs {
    private NotifyCollectionChangedAction _Action;
    private IDictionary`2<TKey, TValue> _NewItems;
    private IDictionary`2<TKey, TValue> _OldItems;
    public NotifyCollectionChangedAction Action { get; }
    public KeyValuePair`2<TKey, TValue> NewItem { get; }
    public IDictionary`2<TKey, TValue> NewItems { get; }
    public KeyValuePair`2<TKey, TValue> OldItem { get; }
    public IDictionary`2<TKey, TValue> OldItems { get; }
    public NotifyDictionaryChangingEventArgs`2(NotifyCollectionChangedAction action);
    public NotifyDictionaryChangingEventArgs`2(NotifyCollectionChangedAction action, IDictionary`2<TKey, TValue> items);
    public NotifyDictionaryChangingEventArgs`2(NotifyCollectionChangedAction action, KeyValuePair`2<TKey, TValue> item);
    public NotifyDictionaryChangingEventArgs`2(NotifyCollectionChangedAction action, IDictionary`2<TKey, TValue> newItems, IDictionary`2<TKey, TValue> oldItems);
    public NotifyDictionaryChangingEventArgs`2(NotifyCollectionChangedAction action, KeyValuePair`2<TKey, TValue> newItem, KeyValuePair`2<TKey, TValue> oldItem);
    public NotifyDictionaryChangingEventArgs`2(NotifyCollectionChangedAction action, TKey key, TValue value);
    public NotifyCollectionChangedAction get_Action();
    public KeyValuePair`2<TKey, TValue> get_NewItem();
    public IDictionary`2<TKey, TValue> get_NewItems();
    public KeyValuePair`2<TKey, TValue> get_OldItem();
    public IDictionary`2<TKey, TValue> get_OldItems();
}
[DefaultMemberAttribute("Item")]
public class Dnp.Collections.ObservableDictionary`2 : object {
    private Dictionary`2<TKey, TValue> _Dictionary;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    private DictionaryChangedEventHandler`2<TKey, TValue> DictionaryChanged;
    private DictionaryChangingEventHandler`2<TKey, TValue> DictionaryChanging;
    protected Dictionary`2<TKey, TValue> Dictionary { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public ObservableDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> dictionary);
    public ObservableDictionary`2(Dictionary`2<TKey, TValue> dictionary);
    public ObservableDictionary`2(KeyValuePair`2<TKey, TValue> item);
    public ObservableDictionary`2(TKey key, TValue value);
    protected Dictionary`2<TKey, TValue> get_Dictionary();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void add_DictionaryChanged(DictionaryChangedEventHandler`2<TKey, TValue> value);
    public sealed virtual void remove_DictionaryChanged(DictionaryChangedEventHandler`2<TKey, TValue> value);
    public sealed virtual void add_DictionaryChanging(DictionaryChangingEventHandler`2<TKey, TValue> value);
    public sealed virtual void remove_DictionaryChanging(DictionaryChangingEventHandler`2<TKey, TValue> value);
    public void AddRange(IDictionary`2<TKey, TValue> dictionary);
    protected void OnDictionaryChanged(NotifyDictionaryChangedEventArgs`2<TKey, TValue> e);
    protected void OnDictionaryChanging(NotifyDictionaryChangingEventArgs`2<TKey, TValue> e);
    protected void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public void RemoveRange(IDictionary`2<TKey, TValue> dictionary);
}
public class Dnp.Collections.PropertyCollection`1 : List`1<T> {
    public sealed virtual void Add(object o);
}
[AttributeUsageAttribute("128")]
public class Dnp.CommandLineOptionAttribute : Attribute {
    private string _Name;
    private string _Description;
    private string _Alias;
    public string Name { get; }
    public string Description { get; }
    public string Alias { get; }
    public CommandLineOptionAttribute(string name, string description);
    public CommandLineOptionAttribute(string name, string description, string aliases);
    public string get_Name();
    public string get_Description();
    public string get_Alias();
}
[DefaultMemberAttribute("Item")]
public class Dnp.CommandLineParser : object {
    private string _CommandLine;
    private string _WorkingString;
    private string _ApplicationName;
    private String[] _SplitParameters;
    private ArrayList _Switches;
    public string CommandLine { get; public set; }
    public string WorkingString { get; public set; }
    public string ApplicationName { get; }
    public String[] Parameters { get; }
    public OptionInfo[] Switches { get; }
    public object Item { get; }
    public String[] UnhandledSwitches { get; }
    public CommandLineParser(string commandLine);
    public CommandLineParser(string commandLine, object commandLineInfo);
    public string get_CommandLine();
    public void set_CommandLine(string value);
    public string get_WorkingString();
    public void set_WorkingString(string value);
    public string get_ApplicationName();
    public String[] get_Parameters();
    public OptionInfo[] get_Switches();
    public object get_Item(string name);
    public String[] get_UnhandledSwitches();
    private void GetApplicationName();
    private void SplitParameters();
    private void HandleSwitches();
    public void AddSwitch(string name, string description);
    public void AddSwitch(String[] names, string description);
    public bool Parse();
    public string GetHelpText();
    public object InternalValue(string name);
}
public abstract class Dnp.Configuration.AbstractConfigurationSource : object {
    private IList`1<IConfigurationSource> _configurationSources;
    private IDictionary`2<string, IConfigurationSection> _sections;
    private object _syncRoot;
    [CompilerGeneratedAttribute]
private bool <AutoSave>k__BackingField;
    protected IList`1<IConfigurationSource> ConfigurationSources { get; }
    protected object SyncRoot { get; }
    public bool AutoSave { get; public set; }
    public IDictionary`2<string, IConfigurationSection> Sections { get; }
    protected IList`1<IConfigurationSource> get_ConfigurationSources();
    protected object get_SyncRoot();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AutoSave();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AutoSave(bool value);
    public sealed virtual IDictionary`2<string, IConfigurationSection> get_Sections();
    public sealed virtual void Merge(IConfigurationSource[] configurationSources);
    public abstract virtual void Save();
    public abstract virtual void Reload();
    public sealed virtual void Add(IConfigurationSection section);
    public virtual void ExpandKeyValues();
    public sealed virtual void Clear();
    private void MergeSectionIntoSource(IConfigurationSection section);
    protected virtual void OnPropertyChanged(string section, string key);
    private string Expand(IConfigurationSection section, string key);
    private string ExpandValue(IConfigurationSection section, string search);
    private string GetResultFromExternalSection(string sectionName, string keyName);
    private static string GetResultFromCurrentSection(string keyName, IConfigurationSection section);
    public sealed virtual IEnumerator`1<IConfigurationSection> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [CompilerGeneratedAttribute]
private void <MergeSectionIntoSource>b__4(object s, PropertyChangedEventArgs e);
}
public abstract class Dnp.Configuration.AbstractFileConfigurationSource : AbstractConfigurationSource {
    [CompilerGeneratedAttribute]
private Encoding <DefaultEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public Encoding DefaultEncoding { get; public set; }
    public string FileName { get; public set; }
    [CompilerGeneratedAttribute]
public Encoding get_DefaultEncoding();
    [CompilerGeneratedAttribute]
public void set_DefaultEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    protected abstract virtual void Load(string fileName);
    protected static IConfigurationSource FromFile(string fileName);
    public virtual void Save();
    public virtual void Reload();
}
internal class Dnp.Configuration.ByteArrayConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Dnp.Configuration.CommandLineConfigurationSource : AbstractConfigurationSource {
    private String[] _arguments;
    private StringDictionary _parameters;
    public CommandLineConfigurationSource(String[] args);
    public CommandLineConfigurationSource(String[] args, string sectionName, IEnumerable`1<string> switches);
    public CommandLineConfigurationSource(String[] args, string sectionName, String[] switches);
    public void AddSwitch(string sectionName, string longName, string shortName);
    public void AddSwitch(string sectionName, IEnumerable`1<string> switches);
    public void AddSwitch(string sectionName, String[] switches);
    public bool Exists(string switchName);
    private void Extract(IEnumerable`1<string> args);
    public virtual void Save();
    public virtual void Reload();
}
public class Dnp.Configuration.ConfigurationSection : object {
    private IDictionary`2<string, string> _settings;
    private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ConfigurationSection(string sectionName);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    public sealed virtual T Get(string key);
    public sealed virtual bool TryGet(string key, T& value);
    public sealed virtual T Get(string key, T defaultValue);
    public sealed virtual bool Remove(string key);
    public sealed virtual void Set(string key, T value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Equals(ConfigurationSection other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ConfigurationSection left, ConfigurationSection right);
    public static bool op_Inequality(ConfigurationSection left, ConfigurationSection right);
    public virtual string ToString();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Add(KeyValuePair`2<string, string> item);
    public sealed virtual void Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Contains(KeyValuePair`2<string, string> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.String>>.Remove(KeyValuePair`2<string, string> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
}
public class Dnp.Configuration.DotNetConfigurationSource : XmlConfigurationSource {
    [CompilerGeneratedAttribute]
private static Func`2<XElement, string> CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static Func`2<XElement, IEnumerable`1<XElement>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`3<XElement, XElement, KeyValuePair`2<string, string>> CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, XElement> CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static Func`2<IConfigurationSection, XElement> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IConfigurationSection, XElement> CS$<>9__CachedAnonymousMethodDelegateb;
    public DotNetConfigurationSource(string xml);
    public static IConfigurationSource FromFile(string fileName);
    protected virtual void Process(XDocument document);
    private static IEnumerable`1<string> GetSections(XDocument document);
    private static IEnumerable`1<string> GetSectionsImpl(XDocument document);
    private void CreateConfigurationSection(string current, IEnumerable`1<KeyValuePair`2<string, string>> items);
    private static IEnumerable`1<KeyValuePair`2<string, string>> GetSettings(XDocument document, string sectionName);
    public static XElement ToXml(IConfigurationSection section);
    public static string ToXml(IEnumerable`1<IConfigurationSection> sections);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static string <GetSectionsImpl>b__0(XElement section);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<XElement> <GetSettings>b__2(XElement section);
    [CompilerGeneratedAttribute]
private static KeyValuePair`2<string, string> <GetSettings>b__3(XElement section, XElement setting);
    [CompilerGeneratedAttribute]
private static XElement <ToXml>b__6(KeyValuePair`2<string, string> setting);
    [CompilerGeneratedAttribute]
private static XElement <ToXml>b__8(IConfigurationSection section);
    [CompilerGeneratedAttribute]
private static XElement <ToXml>b__9(IConfigurationSection section);
}
[ExtensionAttribute]
internal static class Dnp.Configuration.EventHandlerExtension : object {
    [ExtensionAttribute]
public static void Raise(EventHandler`1<T> handler, object sender, T args);
    [ExtensionAttribute]
public static void Raise(EventHandler handler, object sender, EventArgs args);
    [ExtensionAttribute]
public static void Raise(PropertyChangedEventHandler handler, object sender, PropertyChangedEventArgs args);
}
public interface Dnp.Configuration.IConfigurationSection {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual T Get(string key);
    public abstract virtual bool TryGet(string key, T& value);
    public abstract virtual T Get(string key, T defaultValue);
    public abstract virtual bool Remove(string key);
    public abstract virtual void Set(string key, T value);
}
public interface Dnp.Configuration.IConfigurationSource {
    public bool AutoSave { get; public set; }
    public IDictionary`2<string, IConfigurationSection> Sections { get; }
    public abstract virtual bool get_AutoSave();
    public abstract virtual void set_AutoSave(bool value);
    public abstract virtual IDictionary`2<string, IConfigurationSection> get_Sections();
    public abstract virtual void Add(IConfigurationSection section);
    public abstract virtual void ExpandKeyValues();
    public abstract virtual void Merge(IConfigurationSource[] configurationSources);
    public abstract virtual void Reload();
    public abstract virtual void Save();
    public abstract virtual void Clear();
}
public class Dnp.Configuration.IniConfigurationSource : AbstractFileConfigurationSource {
    private string _comment;
    private string _delimiter;
    [CompilerGeneratedAttribute]
private static Func`2<string, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    protected string Comment { get; }
    protected string Delimiter { get; }
    public IniConfigurationSource(string data);
    public IniConfigurationSource(string data, string comment, string delimiter);
    protected virtual string get_Comment();
    protected virtual string get_Delimiter();
    public static IConfigurationSource FromFile(string fileName);
    protected virtual void Load(string fileName);
    private void Parse(string data);
    private static List`1<string> GetFileSections(string data);
    public virtual string ToString();
    private IEnumerable`1<string> GetSections();
    private string GetSection(IConfigurationSection section);
    private IEnumerable`1<IConfigurationSection> GetSections(IEnumerable`1<string> sectionData);
    private IConfigurationSection GetSection(string sectionData);
    [CompilerGeneratedAttribute]
private static bool <GetFileSections>b__1(string line);
}
public class Dnp.Configuration.IsoStorageConfigurationSource : AbstractConfigurationSource {
    private static IsolatedStorageScope DefaultScope;
    private static FieldInfo FullPathAccessor;
    private string _fileName;
    [CompilerGeneratedAttribute]
private string <FullPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolatedStorageScope <Scope>k__BackingField;
    public string FullPath { get; private set; }
    public IsolatedStorageScope Scope { get; private set; }
    public IsoStorageConfigurationSource(string fileName);
    public IsoStorageConfigurationSource(IsolatedStorageScope scope, string fileName);
    private static IsoStorageConfigurationSource();
    public virtual void Save();
    public virtual void Reload();
    [CompilerGeneratedAttribute]
public string get_FullPath();
    [CompilerGeneratedAttribute]
private void set_FullPath(string value);
    [CompilerGeneratedAttribute]
public IsolatedStorageScope get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(IsolatedStorageScope value);
    private void Load();
}
public class Dnp.Configuration.RegistryConfigurationSource : AbstractConfigurationSource {
    private static string DefaultKeyName;
    [CompilerGeneratedAttribute]
private RegistryKey <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recursive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    public RegistryKey Root { get; private set; }
    public bool Recursive { get; private set; }
    public bool IsDisposed { get; private set; }
    public RegistryConfigurationSource(RegistryKey root);
    public RegistryConfigurationSource(string root);
    public RegistryConfigurationSource(RegistryKey root, bool recursive);
    public RegistryConfigurationSource(string root, bool recursive);
    [CompilerGeneratedAttribute]
public RegistryKey get_Root();
    [CompilerGeneratedAttribute]
private void set_Root(RegistryKey value);
    [CompilerGeneratedAttribute]
public bool get_Recursive();
    [CompilerGeneratedAttribute]
private void set_Recursive(bool value);
    private void Load(RegistryKey root);
    private IEnumerable`1<IConfigurationSection> GetSections(RegistryKey root);
    private IConfigurationSection GetSection(string subKey, string sectionName);
    private IEnumerable`1<string> GetSubKeys(RegistryKey registryKey);
    internal static RegistryKey CloneKey(RegistryKey source, RegistryKeyPermissionCheck permissionCheck);
    internal static RegistryKey OpenKey(string key, RegistryKeyPermissionCheck permissionCheck);
    internal static RegistryKey OpenRoot(string key);
    private RegistryKey GetKey(string sectionName, RegistryKeyPermissionCheck permissionCheck);
    private RegistryKey GetKey(string subKey, String& sectionName, RegistryKeyPermissionCheck permissionCheck);
    public virtual void Save();
    private void SaveValue(IConfigurationSection section, KeyValuePair`2<string, string> pair);
    private static RegistryValueKind GetValueKind(RegistryKey key, string keyName);
    public virtual void Reload();
    [CompilerGeneratedAttribute]
public bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
}
internal static class Dnp.Configuration.SettingConverter : object {
    private static Type StringType;
    private static SettingConverter();
    internal static T GetTFromString(string value);
    internal static string GetStringFromT(T value);
    private static T ConvertToBool(string value);
    public static bool IsBool();
    public static bool IsStringArray();
    public static bool IsByteArray();
}
internal class Dnp.Configuration.StringArrayConverter : TypeConverter {
    private char _delimiter;
    public StringArrayConverter(char delimiter);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Dnp.Configuration.XmlConfigurationSource : AbstractFileConfigurationSource {
    [CompilerGeneratedAttribute]
private static Func`2<XElement, IEnumerable`1<XElement>> CS$<>9__CachedAnonymousMethodDelegate4;
    [CompilerGeneratedAttribute]
private static Func`2<KeyValuePair`2<string, string>, XElement> CS$<>9__CachedAnonymousMethodDelegatea;
    [CompilerGeneratedAttribute]
private static Func`2<IConfigurationSection, XElement> CS$<>9__CachedAnonymousMethodDelegatec;
    public XmlConfigurationSource(string xml);
    public static IConfigurationSource FromFile(string fileName);
    protected virtual void Parse(string xml);
    protected virtual void Load(string fileName);
    protected virtual void Process(XDocument document);
    public static XElement ToXml(IConfigurationSection section);
    public static string ToXml(IEnumerable`1<IConfigurationSection> sections);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private static IEnumerable`1<XElement> <Process>b__0(XElement section);
    [CompilerGeneratedAttribute]
private static XElement <ToXml>b__9(KeyValuePair`2<string, string> setting);
    [CompilerGeneratedAttribute]
private static XElement <ToXml>b__b(IConfigurationSection section);
}
public class Dnp.Data.Connection.ConnectionString : object {
    [CompilerGeneratedAttribute]
private string <UserID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Server>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Direct>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sid>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PersistSecurityInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalConnectionParameters>k__BackingField;
    public string UserID { get; public set; }
    public string Password { get; public set; }
    public string Server { get; public set; }
    public Nullable`1<bool> Direct { get; public set; }
    public string Sid { get; public set; }
    public Nullable`1<bool> PersistSecurityInfo { get; public set; }
    public string AdditionalConnectionParameters { get; public set; }
    public ConnectionString(string userId, string password, string server, Nullable`1<bool> direct, string sid, Nullable`1<bool> persistSecurityInfo, string additionalConnectionParameters);
    [CompilerGeneratedAttribute]
public string get_UserID();
    [CompilerGeneratedAttribute]
public void set_UserID(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_Server();
    [CompilerGeneratedAttribute]
public void set_Server(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Direct();
    [CompilerGeneratedAttribute]
public void set_Direct(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Sid();
    [CompilerGeneratedAttribute]
public void set_Sid(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PersistSecurityInfo();
    [CompilerGeneratedAttribute]
public void set_PersistSecurityInfo(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_AdditionalConnectionParameters();
    [CompilerGeneratedAttribute]
public void set_AdditionalConnectionParameters(string value);
    public static string Create(string userId, string password, string server, Nullable`1<bool> direct, string sid, Nullable`1<bool> persistSecurityInfo, string additionalConnectionParameters);
    public virtual string ToString();
}
public class Dnp.Data.Metadata.EdmxReader`1 : object {
    private bool _HasLoaded;
    private ICollection`1<TNode> _Nodes;
    [CompilerGeneratedAttribute]
private XmlTextReader <Reader>k__BackingField;
    public bool HasLoaded { get; }
    public ICollection`1<TNode> Nodes { get; }
    private XmlTextReader Reader { get; private set; }
    public EdmxReader`1(string edmxFile);
    public bool get_HasLoaded();
    public ICollection`1<TNode> get_Nodes();
    [CompilerGeneratedAttribute]
private XmlTextReader get_Reader();
    [CompilerGeneratedAttribute]
private void set_Reader(XmlTextReader value);
    public bool TryLoad();
    public sealed virtual void Dispose();
    private void Load();
    private void LoadNode(Type nodeType, string nodeName, object node);
    private void LoadAttributes(Type nodeType, object node);
    private static ICollection`1<PropertyInfo> GetPropertyWhere(Type nodeType, Func`2<PropertyInfo, bool> predicate);
    [CompilerGeneratedAttribute]
private bool <LoadNode>b__0(PropertyInfo p);
    [CompilerGeneratedAttribute]
private bool <LoadAttributes>b__2(PropertyInfo p);
}
public class Dnp.Data.Metadata.Elements.EntityTypeMapping : object {
    private MappingFragment _MappingFragment;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; public set; }
    public MappingFragment MappingFragment { get; }
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    public MappingFragment get_MappingFragment();
}
public class Dnp.Data.Metadata.Elements.MappingFragment : object {
    private PropertyCollection`1<ScalarProperty> _ScalarProperty;
    [CompilerGeneratedAttribute]
private string <StoreEntitySet>k__BackingField;
    public string StoreEntitySet { get; public set; }
    public PropertyCollection`1<ScalarProperty> ScalarProperty { get; }
    [CompilerGeneratedAttribute]
public string get_StoreEntitySet();
    [CompilerGeneratedAttribute]
public void set_StoreEntitySet(string value);
    public PropertyCollection`1<ScalarProperty> get_ScalarProperty();
}
public class Dnp.Data.Metadata.Elements.ScalarProperty : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    public string Name { get; public set; }
    public string ColumnName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
}
[DataContractAttribute]
public abstract class Dnp.Data.Objects.Bases.EntityBase`1 : object {
    protected Dictionary`2<string, object> PropertyUpdatedValue;
    protected Dictionary`2<string, object> PropertyOriginalValue;
    private static PropertyDescriptorCollection PropertyDescriptors;
    private IObjectContext _ObjectContext;
    private bool _IsNew;
    protected IObjectContext ObjectContext { get; protected set; }
    public bool IsNew { get; protected set; }
    private static EntityBase`1();
    protected IObjectContext get_ObjectContext();
    protected void set_ObjectContext(IObjectContext value);
    private void OnPropertyChanging(object sender, PropertyChangingEventArgs e);
    private void OnPropertyChanged(object sender, PropertyChangedEventArgs e);
    private object GetPropertyValue(string propertyName);
    private void ResetOriginalValues();
    protected virtual void IsNewChanged();
    private void ListenForChangingNotifications();
    public virtual void SetContext(IObjectContext objectContext);
    public virtual void ObjectFinishedLoading();
    public virtual void ObjectFinishedLoading(IObjectContext objectContext);
    public virtual void ResetUpdateValues();
    public virtual void ResetValuesToOldValues();
    public virtual void OnSaveChanges(IObjectContext objectContext);
    public virtual void OnSaveChanges(IObjectContext objectContext, IEnumerable`1<string> modifiedProperties);
    public virtual void OnAddObject(IObjectContext objectContext);
    public virtual bool get_IsNew();
    protected virtual void set_IsNew(bool value);
}
public class Dnp.Data.Objects.DisposableObject : object {
    private bool _AlreadyDisposed;
    public virtual string ToString();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
}
public class Dnp.Data.Objects.EventArguments.ObjectContextEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IObjectContext <ObjectContext>k__BackingField;
    public IObjectContext ObjectContext { get; private set; }
    public ObjectContextEventArgs(IObjectContext objectContext);
    [CompilerGeneratedAttribute]
public IObjectContext get_ObjectContext();
    [CompilerGeneratedAttribute]
private void set_ObjectContext(IObjectContext value);
}
public class Dnp.Data.Objects.Factory.MockObjectContextFactory`1 : ObjectContextFactoryBase`1<TContainer> {
    public virtual IObjectContainer CreateObjectContext(string entityConnectionString, string entityContainerName, string userId, string password, string server, string sid);
}
internal class Dnp.Data.Objects.Factory.MockObjectContextWithDataFactory : object {
    public static HashSet`1<Type> ContainerInitialized;
    private static MockObjectContextWithDataFactory();
}
public class Dnp.Data.Objects.Factory.MockObjectContextWithDataFactory`1 : ObjectContextFactoryBase`1<TContainer> {
    [CompilerGeneratedAttribute]
private ITestDataLoader <TestDataLoader>k__BackingField;
    public ITestDataLoader TestDataLoader { get; public set; }
    public MockObjectContextWithDataFactory`1(ITestDataLoader testDataLoader);
    [CompilerGeneratedAttribute]
public ITestDataLoader get_TestDataLoader();
    [CompilerGeneratedAttribute]
public void set_TestDataLoader(ITestDataLoader value);
    public virtual IObjectContainer CreateObjectContext(string entityConnectionString, string entityContainerName, string userId, string password, string server, string sid);
}
public class Dnp.Data.Objects.Factory.ObjectContextFactory`1 : ObjectContextFactoryBase`1<TContainer> {
    public virtual IObjectContainer CreateObjectContext(string entityConnectionString, string entityContainerName, string userId, string password, string server, string sid);
}
public abstract class Dnp.Data.Objects.Factory.ObjectContextFactoryBase`1 : object {
    protected ConstructorInfo ObjectContainerConstructor { get; }
    protected virtual ConstructorInfo get_ObjectContainerConstructor();
    protected virtual TObjectContainer InvokeObjectContainerConstructor(Object[] parameters);
    public abstract virtual IObjectContainer CreateObjectContext(string entityConnectionString, string entityContainerName, string userId, string password, string server, string sid);
}
public interface Dnp.Data.Objects.IBusinessLogic {
    public abstract virtual void OnSaveChanges(IObjectContext objectContext, IEnumerable`1<string> modifiedProperties);
    public abstract virtual void OnAddObject(IObjectContext objectContext);
}
public interface Dnp.Data.Objects.ICloneable`1 {
    public abstract virtual T Clone();
}
public interface Dnp.Data.Objects.ICloneableDepth`1 {
    public abstract virtual T Clone(int depth);
}
public interface Dnp.Data.Objects.ICloneableState`1 {
    public abstract virtual T Clone(Stack`1<Type> state);
    public abstract virtual T Clone(Stack`1<Type> state, int depth);
}
public interface Dnp.Data.Objects.ICreateTimestamp {
    public Nullable`1<DateTime> LastUpdateTimestamp { get; public set; }
    public DateTime CreateTimestamp { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_LastUpdateTimestamp();
    public abstract virtual void set_LastUpdateTimestamp(Nullable`1<DateTime> value);
    public abstract virtual DateTime get_CreateTimestamp();
    public abstract virtual void set_CreateTimestamp(DateTime value);
}
public interface Dnp.Data.Objects.IDisposableObject {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
}
public interface Dnp.Data.Objects.IFootprint {
    public Nullable`1<DateTime> LastUpdateTimestamp { get; public set; }
    public Nullable`1<DateTime> CreateTimestamp { get; public set; }
    public abstract virtual Nullable`1<DateTime> get_LastUpdateTimestamp();
    public abstract virtual void set_LastUpdateTimestamp(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_CreateTimestamp();
    public abstract virtual void set_CreateTimestamp(Nullable`1<DateTime> value);
}
public interface Dnp.Data.Objects.IMockObjectSet {
    public abstract virtual void AddObject(object entity);
    public abstract virtual void DeleteObject(object entity);
}
public interface Dnp.Data.Objects.INavigations {
    public String[] NavigationPropertyNames { get; }
    public Dictionary`2<string, Type> NavigationPropertyTypes { get; }
    public abstract virtual String[] get_NavigationPropertyNames();
    public abstract virtual Dictionary`2<string, Type> get_NavigationPropertyTypes();
}
public interface Dnp.Data.Objects.IObjectContainer {
    public IObjectContext ObjectContext { get; }
    public abstract virtual IObjectContext get_ObjectContext();
}
public interface Dnp.Data.Objects.IObjectContext {
    public bool LazyLoading { get; public set; }
    public abstract virtual bool get_LazyLoading();
    public abstract virtual void set_LazyLoading(bool value);
    public abstract virtual void SetKeyGenerator(Func`1<object> keyGenerator);
    public abstract virtual int ExecuteFunction(string functionName, ObjectParameter[] parameters);
    public abstract virtual void InitializeObjectKey(TEntity entity);
    public abstract virtual TKey CreateObjectKey();
    public abstract virtual IObjectSet`1<TEntity> GetObjects();
    public abstract virtual IQueryable`1<TEntity> GetObjects(String[] includes);
    public abstract virtual IQueryable`1<TEntity> GetObjects(Expression`1<Func`2<TEntity, bool>> predicate);
    public abstract virtual IQueryable`1<TEntity> GetObjects(Expression`1<Func`2<TEntity, bool>> predicate, String[] includes);
    public abstract virtual TEntity GetObject(TKey key);
    public abstract virtual TEntity GetObjectEntityName(TKey key, string containerName);
    public abstract virtual TEntity GetObject(TKey key, String[] includes);
    public abstract virtual bool AddObject(TEntity entity);
    public abstract virtual bool DeleteObject(TEntity entity);
    public abstract virtual bool DeleteObject(TKey key);
    public abstract virtual bool DeleteAllObjects();
    public abstract virtual bool UpdateObject(TEntity entity);
    public abstract virtual int SaveObjectChanges();
    public abstract virtual void LoadRelationship(TEntity entityWithRelationship, string relationshipToLoad);
    public abstract virtual bool IsObjectAttached(TEntity objectToCheck);
    public abstract virtual bool RefreshObject(TEntity entity);
    public abstract virtual void RefreshObjects(IEnumerable`1<TEntity> entities);
    public abstract virtual void RefreshAllObjects(bool ignoreExceptions);
    public abstract virtual void RefreshAllModifiedObjects(bool ignoreExceptions);
    public abstract virtual void DetachObject(Object& objectToDetach);
    public abstract virtual TEntity GetObject(long key);
    public abstract virtual TEntity GetObject(string key);
    public abstract virtual TEntity GetObject(long key, String[] includes);
    public abstract virtual TEntity GetObject(string key, String[] includes);
    public abstract virtual bool DeleteObject(long key);
    public abstract virtual bool DeleteObject(string key);
}
public interface Dnp.Data.Objects.IObjectContextFactory {
    public abstract virtual IObjectContainer CreateObjectContext(string entityConnectionString, string entityContainerName, string userId, string password, string server, string sid);
}
public interface Dnp.Data.Objects.IObjectCreated {
    public bool IsNew { get; }
    public abstract virtual bool get_IsNew();
}
public interface Dnp.Data.Objects.IObjectManager {
    public abstract virtual void SetContext(IObjectContext objectContext);
    public abstract virtual void ObjectFinishedLoading();
    public abstract virtual void ObjectFinishedLoading(IObjectContext objectContext);
    public abstract virtual void ResetUpdateValues();
    public abstract virtual void ResetValuesToOldValues();
}
public interface Dnp.Data.Objects.ISearchable {
    public abstract virtual bool Search(string criteria, Tuple`2& result);
    public abstract virtual bool Search(string criteria, CancellationToken cancelToken, Tuple`2& result);
}
public interface Dnp.Data.Objects.ISearchableState {
    public abstract virtual bool Search(string criteria, Stack`1<Type> state, Tuple`2& result);
    public abstract virtual bool Search(string criteria, Stack`1<Type> state, CancellationToken cancelToken, Tuple`2& result);
}
public interface Dnp.Data.Objects.ISimplePrimaryKey {
    public object KeyObject { get; public set; }
    public abstract virtual object get_KeyObject();
    public abstract virtual void set_KeyObject(object value);
}
public interface Dnp.Data.Objects.ISimplePrimaryKey`1 {
    public TKey Key { get; public set; }
    public abstract virtual TKey get_Key();
    public abstract virtual void set_Key(TKey value);
}
public interface Dnp.Data.Objects.ISimplePrimaryKeyEquatable {
    public abstract virtual bool KeyEquals(object keyObject);
}
public interface Dnp.Data.Objects.IUserIdentifier {
    public string Identifier { get; public set; }
    public abstract virtual string get_Identifier();
    public abstract virtual void set_Identifier(string value);
}
public class Dnp.Data.Objects.MockObjectContext : object {
    private static Dictionary`2<Type, object> StaticObjectSets;
    private bool _IsDisposed;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityConnection <Connection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultContainerName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldDeferObjectManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LazyLoading>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dnp.Data.Objects.IUserIdentifier.Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action`1<IObjectManager> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType1`2<object, PropertyInfo>, <>f__AnonymousType2`2<<>f__AnonymousType1`2<object, PropertyInfo>, Type>> CS$<>9__CachedAnonymousMethodDelegateb;
    [CompilerGeneratedAttribute]
private static Func`2<<>f__AnonymousType2`2<<>f__AnonymousType1`2<object, PropertyInfo>, Type>, long> CS$<>9__CachedAnonymousMethodDelegatec;
    public bool ObjectSetsHasObjects { get; }
    public string ConnectionString { get; private set; }
    public EntityConnection Connection { get; private set; }
    public string DefaultContainerName { get; private set; }
    public Dictionary`2<Type, object> ObjectSets { get; }
    private bool ShouldDeferObjectManagement { get; private set; }
    public bool IsDisposed { get; }
    public bool LazyLoading { get; public set; }
    private string Dnp.Data.Objects.IUserIdentifier.Identifier { get; private set; }
    private static MockObjectContext();
    public MockObjectContext(EntityConnection connection);
    public MockObjectContext(string connectionString);
    public MockObjectContext(EntityConnection connection, string connectionString);
    public MockObjectContext(string connectionString, string defaultContainerName);
    private MockObjectContext(bool useTestData);
    public bool get_ObjectSetsHasObjects();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
private void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public EntityConnection get_Connection();
    [CompilerGeneratedAttribute]
private void set_Connection(EntityConnection value);
    [CompilerGeneratedAttribute]
public string get_DefaultContainerName();
    [CompilerGeneratedAttribute]
private void set_DefaultContainerName(string value);
    public Dictionary`2<Type, object> get_ObjectSets();
    [CompilerGeneratedAttribute]
private bool get_ShouldDeferObjectManagement();
    [CompilerGeneratedAttribute]
private void set_ShouldDeferObjectManagement(bool value);
    public static void ClearMockObjectSets();
    public static MockObjectContext CreateObjectContextWithoutTestData();
    public static MockObjectContext CreateObjectContextWithTestData();
    private void Initialize(EntityConnection connection, string connectionString, string defaultContainerName);
    private void InitializeLazyLoading();
    private void ApplyTestDataLoaderFinishedLoading();
    private IEnumerable`1<TType> FilterObjectSetsAgainst();
    private static MockObjectSet`1<TEntity> GetMockObjectSet();
    private static void CleanupRelationships(TEntity entity);
    private static void CleanupRelationship(TEntity entity, INavigations navigation, Type navigationType);
    private static IEnumerable`1<long> KeyValues(Type type, IEnumerable objectSet);
    private static TKey CastTo(object key);
    private static TKey Increment(object keyToIncrement, Type keyType);
    private static TKey Increment(long keyToIncrement);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LazyLoading();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LazyLoading(bool value);
    public sealed virtual void SetKeyGenerator(Func`1<object> keyGenerator);
    public sealed virtual int ExecuteFunction(string functionName, ObjectParameter[] parameters);
    public sealed virtual void InitializeObjectKey(TEntity entity);
    public sealed virtual TKey CreateObjectKey();
    public sealed virtual IObjectSet`1<TEntity> GetObjects();
    public sealed virtual IQueryable`1<TEntity> GetObjects(Expression`1<Func`2<TEntity, bool>> predicate);
    public sealed virtual TEntity GetObject(TKey key);
    public sealed virtual TEntity GetObject(TKey key, String[] includes);
    public sealed virtual bool AddObject(TEntity entity);
    public sealed virtual bool DeleteObject(TEntity entity);
    public sealed virtual bool DeleteObject(TKey key);
    public sealed virtual bool DeleteAllObjects();
    public sealed virtual bool UpdateObject(TEntity entity);
    public sealed virtual int SaveObjectChanges();
    public sealed virtual void LoadRelationship(TEntity entityWithRelationship, string relationshipToLoad);
    public sealed virtual bool IsObjectAttached(TEntity objectToCheck);
    public sealed virtual IQueryable`1<TEntity> GetObjects(String[] includes);
    public sealed virtual IQueryable`1<TEntity> GetObjects(Expression`1<Func`2<TEntity, bool>> predicate, String[] includes);
    public sealed virtual TEntity GetObjectEntityName(TKey key, string containerName);
    public sealed virtual bool RefreshObject(TEntity entity);
    public sealed virtual void RefreshObjects(IEnumerable`1<TEntity> entities);
    public sealed virtual void RefreshAllObjects(bool ignoreExceptions);
    public sealed virtual void RefreshAllModifiedObjects(bool ignoreExceptions);
    [CompilerGeneratedAttribute]
private sealed virtual override string Dnp.Data.Objects.IUserIdentifier.get_Identifier();
    [CompilerGeneratedAttribute]
private sealed virtual override void Dnp.Data.Objects.IUserIdentifier.set_Identifier(string value);
    public sealed virtual TEntity GetObject(long key);
    public sealed virtual TEntity GetObject(string key);
    public sealed virtual TEntity GetObject(long key, String[] includes);
    public sealed virtual TEntity GetObject(string key, String[] includes);
    public sealed virtual bool DeleteObject(long key);
    public sealed virtual bool DeleteObject(string key);
    public sealed virtual void DetachObject(Object& objectToDetach);
    [CompilerGeneratedAttribute]
private void <ApplyTestDataLoaderFinishedLoading>b__0(object sender, ObjectContextEventArgs e);
    [CompilerGeneratedAttribute]
private static void <ApplyTestDataLoaderFinishedLoading>b__1(IObjectManager objectManager);
    [CompilerGeneratedAttribute]
private static IEnumerable`1<TType> <FilterObjectSetsAgainst>b__3(KeyValuePair`2<Type, object> typeObjectSet);
    [CompilerGeneratedAttribute]
private static bool <CleanupRelationship>b__4(KeyValuePair`2<string, Type> kv);
    [CompilerGeneratedAttribute]
private static <>f__AnonymousType2`2<<>f__AnonymousType1`2<object, PropertyInfo>, Type> <KeyValues>b__9(<>f__AnonymousType1`2<object, PropertyInfo> <>h__TransparentIdentifier5);
    [CompilerGeneratedAttribute]
private static long <KeyValues>b__a(<>f__AnonymousType2`2<<>f__AnonymousType1`2<object, PropertyInfo>, Type> <>h__TransparentIdentifier6);
    [CompilerGeneratedAttribute]
private static long <CreateObjectKey>b__10(KeyValuePair`2<Type, object> item);
}
public class Dnp.Data.Objects.MockObjectSet`1 : object {
    private HashSet`1<TEntity> _Set;
    private IQueryable`1<TEntity> _Query;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    public MockObjectSet`1(IEnumerable`1<TEntity> set);
    public sealed virtual void AddObject(TEntity entity);
    public sealed virtual void AddObject(object entity);
    public sealed virtual void Attach(TEntity entity);
    public sealed virtual void DeleteObject(TEntity entity);
    public sealed virtual void DeleteObject(object entity);
    public sealed virtual void Detach(TEntity entity);
    public sealed virtual IEnumerator`1<TEntity> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual Type get_ElementType();
    public sealed virtual Expression get_Expression();
    public sealed virtual IQueryProvider get_Provider();
}
public class Dnp.Data.Objects.ObjectContainer : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    [CompilerGeneratedAttribute]
private IObjectContext <ObjectContext>k__BackingField;
    public bool IsDisposed { get; public set; }
    public IObjectContext ObjectContext { get; private set; }
    public ObjectContainer(IObjectContext objectContext);
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDisposed();
    [CompilerGeneratedAttribute]
public virtual void set_IsDisposed(bool value);
    [CompilerGeneratedAttribute]
public virtual IObjectContext get_ObjectContext();
    [CompilerGeneratedAttribute]
private void set_ObjectContext(IObjectContext value);
}
public class Dnp.Data.Objects.ObjectContextWrapper : ObjectContext {
    private Dictionary`2<Type, object> _TypeObjectSet;
    private bool _IsDisposed;
    [CompilerGeneratedAttribute]
private Func`1<object> <KeyGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Dnp.Data.Objects.IUserIdentifier.Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectStateEntry, bool> CS$<>9__CachedAnonymousMethodDelegate2;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectStateEntry, bool> CS$<>9__CachedAnonymousMethodDelegate16;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectStateEntry, object> CS$<>9__CachedAnonymousMethodDelegate17;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectStateEntry, bool> CS$<>9__CachedAnonymousMethodDelegate1a;
    [CompilerGeneratedAttribute]
private static Func`2<ObjectStateEntry, object> CS$<>9__CachedAnonymousMethodDelegate1b;
    private Func`1<object> KeyGenerator { get; private set; }
    public bool LazyLoading { get; public set; }
    public bool IsDisposed { get; }
    private string Dnp.Data.Objects.IUserIdentifier.Identifier { get; private set; }
    public ObjectContextWrapper(string connectionString, string containerName);
    public ObjectContextWrapper(EntityConnection entityConnection, string containerName);
    [CompilerGeneratedAttribute]
private Func`1<object> get_KeyGenerator();
    [CompilerGeneratedAttribute]
private void set_KeyGenerator(Func`1<object> value);
    public void Initialize();
    public sealed virtual void SetKeyGenerator(Func`1<object> keyGenerator);
    private static TKey CastToTKey(object key);
    private ObjectSet`1<TEntity> GetObjectSet();
    private ObjectSet`1<TEntity> GetObjectSet(string containerName);
    private void ApplyEntityEvents();
    private void OnSavingChanges(object sender, EventArgs e);
    private void OnMaterialized(object sender, ObjectMaterializedEventArgs e);
    private IEnumerable`1<Tuple`2<IBusinessLogic, IEnumerable`1<string>>> FilterToBusinessLogic(EntityState entityState);
    private IEnumerable`1<Tuple`2<IBusinessLogic, IEnumerable`1<string>>> FilterToBusinessLogic();
    public sealed virtual bool get_LazyLoading();
    public sealed virtual void set_LazyLoading(bool value);
    public sealed virtual int SaveObjectChanges();
    public sealed virtual void LoadRelationship(TEntity entityWithRelationship, string relationshipToLoad);
    public sealed virtual bool IsObjectAttached(TEntity objectToCheck);
    public sealed virtual TKey CreateObjectKey();
    public sealed virtual IObjectSet`1<TEntity> GetObjects();
    public sealed virtual IQueryable`1<TEntity> GetObjects(String[] includes);
    public sealed virtual IQueryable`1<TEntity> GetObjects(Expression`1<Func`2<TEntity, bool>> predicate);
    public sealed virtual IQueryable`1<TEntity> GetObjects(Expression`1<Func`2<TEntity, bool>> predicate, String[] includes);
    public sealed virtual TEntity GetObject(TKey key);
    public sealed virtual TEntity GetObjectEntityName(TKey key, string containerName);
    public sealed virtual TEntity GetObject(TKey key, String[] includes);
    public sealed virtual bool AddObject(TEntity entity);
    public sealed virtual bool DeleteObject(TEntity entity);
    public sealed virtual bool DeleteObject(TKey key);
    public sealed virtual bool DeleteAllObjects();
    public sealed virtual bool UpdateObject(TEntity entity);
    public sealed virtual void InitializeObjectKey(TEntity entity);
    public sealed virtual bool RefreshObject(TEntity entity);
    public sealed virtual void RefreshObjects(IEnumerable`1<TEntity> entities);
    public sealed virtual void RefreshAllObjects(bool ignoreExceptions);
    public sealed virtual void RefreshAllModifiedObjects(bool ignoreExceptions);
    public sealed virtual void DetachObject(Object& objectToDetach);
    public sealed virtual bool get_IsDisposed();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
private sealed virtual override string Dnp.Data.Objects.IUserIdentifier.get_Identifier();
    [CompilerGeneratedAttribute]
private sealed virtual override void Dnp.Data.Objects.IUserIdentifier.set_Identifier(string value);
    public sealed virtual TEntity GetObject(long key);
    public sealed virtual TEntity GetObject(string key);
    public sealed virtual TEntity GetObject(long key, String[] includes);
    public sealed virtual TEntity GetObject(string key, String[] includes);
    public sealed virtual bool DeleteObject(long key);
    public sealed virtual bool DeleteObject(string key);
    private sealed virtual override int Dnp.Data.Objects.IObjectContext.ExecuteFunction(string , ObjectParameter[] );
    [CompilerGeneratedAttribute]
private void <OnSavingChanges>b__0(Tuple`2<IBusinessLogic, IEnumerable`1<string>> item);
    [CompilerGeneratedAttribute]
private static bool <FilterToBusinessLogic>b__1(ObjectStateEntry item);
    [CompilerGeneratedAttribute]
private static ObjectQuery`1<TEntity> <GetObjects>b__a(ObjectQuery`1<TEntity> current, string i);
    [CompilerGeneratedAttribute]
private static ObjectQuery`1<TEntity> <GetObjects>b__b(ObjectQuery`1<TEntity> current, string i);
    [CompilerGeneratedAttribute]
private static bool <RefreshAllObjects>b__14(ObjectStateEntry item);
    [CompilerGeneratedAttribute]
private static object <RefreshAllObjects>b__15(ObjectStateEntry item);
    [CompilerGeneratedAttribute]
private static bool <RefreshAllModifiedObjects>b__18(ObjectStateEntry item);
    [CompilerGeneratedAttribute]
private static object <RefreshAllModifiedObjects>b__19(ObjectStateEntry item);
}
public class Dnp.Data.TestData.DataLoader : object {
    private EntityTypeMapping _EntityMapping;
    private String[][] _DataFileContents;
    private string _DataFileName;
    private string _MappingName;
    private string _EntityName;
    private ICollection`1<Dictionary`2<string, string>> _EntityPropertyValues;
    [CompilerGeneratedAttribute]
private static Func`2<char, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public string EntityName { get; }
    public ICollection`1<Dictionary`2<string, string>> EntityPropertyValues { get; }
    public DataLoader(string edmxFile, string dataFile);
    public DataLoader(EdmxReader`1<EntityTypeMapping> edmxReader, string dataFile);
    public DataLoader(EntityTypeMapping entityMapping, string dataFile);
    private void Initialize(string dataFile);
    private void LoadDataFileContents();
    private IEnumerable`1<string> BuildRowsOfData(string dataContents);
    private IEnumerable`1<string> ParseDataContents(string dataFileContent);
    public sealed virtual string get_EntityName();
    public sealed virtual ICollection`1<Dictionary`2<string, string>> get_EntityPropertyValues();
    public sealed virtual bool TryLoad();
    private void LoadPropertyValues();
    private string GetMappingName(string dataFileName);
    private void LoadEntityName();
    private EntityTypeMapping GetEntityTypeMapping(EdmxReader`1<EntityTypeMapping> edmxReader);
    private void LoadDataFileName(string typeName);
    [CompilerGeneratedAttribute]
private static bool <BuildRowsOfData>b__0(char c);
    [CompilerGeneratedAttribute]
private bool <GetEntityTypeMapping>b__c(EntityTypeMapping e);
}
public class Dnp.Data.TestData.DataLoaderXml : object {
    [CompilerGeneratedAttribute]
private EntityTypeMapping <EntityMapping>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MappingName>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <DataContents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Dictionary`2<string, string>> <EntityPropertyValues>k__BackingField;
    private EntityTypeMapping EntityMapping { get; private set; }
    private string DataFileName { get; private set; }
    private string MappingName { get; private set; }
    private XElement DataContents { get; private set; }
    public string EntityName { get; private set; }
    public ICollection`1<Dictionary`2<string, string>> EntityPropertyValues { get; private set; }
    public DataLoaderXml(string edmxFile, string dataFile);
    public DataLoaderXml(EdmxReader`1<EntityTypeMapping> edmxReader, string dataFile);
    public DataLoaderXml(EntityTypeMapping entityMapping, string dataFile);
    [CompilerGeneratedAttribute]
private EntityTypeMapping get_EntityMapping();
    [CompilerGeneratedAttribute]
private void set_EntityMapping(EntityTypeMapping value);
    [CompilerGeneratedAttribute]
private string get_DataFileName();
    [CompilerGeneratedAttribute]
private void set_DataFileName(string value);
    [CompilerGeneratedAttribute]
private string get_MappingName();
    [CompilerGeneratedAttribute]
private void set_MappingName(string value);
    [CompilerGeneratedAttribute]
private XElement get_DataContents();
    [CompilerGeneratedAttribute]
private void set_DataContents(XElement value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EntityName();
    [CompilerGeneratedAttribute]
private void set_EntityName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<Dictionary`2<string, string>> get_EntityPropertyValues();
    [CompilerGeneratedAttribute]
private void set_EntityPropertyValues(ICollection`1<Dictionary`2<string, string>> value);
    public sealed virtual bool TryLoad();
    private void Initialize(string dataFile);
    private void LoadPropertyValues();
    private string GetMappingName(string dataFileName);
    private void LoadEntityName();
    private EntityTypeMapping GetEntityTypeMapping(EdmxReader`1<EntityTypeMapping> edmxReader);
    private void LoadDataFileName(string typeName);
    [CompilerGeneratedAttribute]
private bool <GetEntityTypeMapping>b__0(EntityTypeMapping e);
}
public class Dnp.Data.TestData.DirectoryDataLoader : object {
    [CompilerGeneratedAttribute]
private string <EdmxFile>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Files>k__BackingField;
    private string EdmxFile { get; private set; }
    public IEnumerable`1<string> Files { get; public set; }
    public DirectoryDataLoader(string directory, string edmxFile);
    [CompilerGeneratedAttribute]
private string get_EdmxFile();
    [CompilerGeneratedAttribute]
private void set_EdmxFile(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<string> value);
    public IEnumerable`1<IDataLoader> GetData();
    public IDataLoader LoadData(EdmxReader`1<EntityTypeMapping> edmxReader, string dataFile);
}
public interface Dnp.Data.TestData.IDataLoader {
    public ICollection`1<Dictionary`2<string, string>> EntityPropertyValues { get; }
    public string EntityName { get; }
    public abstract virtual ICollection`1<Dictionary`2<string, string>> get_EntityPropertyValues();
    public abstract virtual string get_EntityName();
    public abstract virtual bool TryLoad();
}
public interface Dnp.Data.TestData.IRemoveAllRows {
    public abstract virtual void Execute(IObjectContext objectContext);
}
public interface Dnp.Data.TestData.ITestDataLoader {
    public abstract virtual void Load(IObjectContext objectContext);
    public abstract virtual void RemoveAllRows(IObjectContext objectContext);
}
public abstract class Dnp.Data.TestData.TestDataLoader : object {
    public static EventHandler`1<ObjectContextEventArgs> BeginLoading;
    public static EventHandler`1<ObjectContextEventArgs> FinishedLoading;
    protected static void OnBeginLoading(object sender, IObjectContext objectContext);
    protected static void OnFinishedLoading(object sender, IObjectContext objectContext);
    public virtual void Load(IObjectContext objectContext);
    public virtual void RemoveAllRows(IObjectContext objectContext);
}
public class Dnp.Exceptions.ExceptionEmailSender : object {
    [CompilerGeneratedAttribute]
private EmailSender <EmailSender>k__BackingField;
    private EmailSender EmailSender { get; private set; }
    public ExceptionEmailSender(ISmtpServer smptServer);
    [CompilerGeneratedAttribute]
private EmailSender get_EmailSender();
    [CompilerGeneratedAttribute]
private void set_EmailSender(EmailSender value);
    public void Send(string subject, Exception exception, string fromAddress, IEnumerable`1<string> recipients);
    public void Send(string header, string subject, Exception exception, string fromAddress, IEnumerable`1<string> recipients);
}
public class Dnp.Expression.ExpressionProperties : object {
    public static string GetPropertyName(Expression`1<Func`1<TProperty>> propertyExpression, Type type);
}
public class Dnp.IO.StringWriterWithEncoding : StringWriter {
    private Encoding _Encoding;
    public Encoding Encoding { get; }
    public StringWriterWithEncoding(Encoding encoding);
    public StringWriterWithEncoding(IFormatProvider formatProvider, Encoding encoding);
    public StringWriterWithEncoding(StringBuilder sb, Encoding encoding);
    public StringWriterWithEncoding(StringBuilder sb, IFormatProvider formatProvider, Encoding encoding);
    public virtual Encoding get_Encoding();
}
public class Dnp.Net.EmailSender : object {
    private ISmtpServer _SmtpServer;
    [CompilerGeneratedAttribute]
private static Func`2<string, MailAddress> CS$<>9__CachedAnonymousMethodDelegate2;
    public EmailSender(ISmtpServer smtpServer);
    public void Send(string subject, string body, string fromAddress, IEnumerable`1<string> recipients, bool isBodyHtml);
    private static MailMessage GetMailMessage(string subject, string body, string fromAddress, IEnumerable`1<string> recipients);
    [CompilerGeneratedAttribute]
private static MailAddress <GetMailMessage>b__1(string recipient);
}
public interface Dnp.Net.ISmtpServer {
    public abstract virtual void Send(MailMessage mailMessage);
}
public class Dnp.Net.SmtpServer : object {
    private SmtpClient _SmtpClient;
    public SmtpServer(string host, int port, bool useDefaultCredentials, string user, string password);
    public sealed virtual void Send(MailMessage mailMessage);
}
public class Dnp.Properties.CurrentVersion : object {
    public static string Version;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Dnp.Properties.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
internal class Dnp.Properties.Settings : ApplicationSettingsBase {
    private static Settings defaultInstance;
    public static Settings Default { get; }
    private static Settings();
    public static Settings get_Default();
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class Dnp.Properties.Strings : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string CannotRoundTripType0 { get; }
    internal static string DestinationFileNameNotSet { get; }
    internal static string DocumentRootMustNotBeNull { get; }
    internal static string ExpandKeyMissing0 { get; }
    internal static string ExpandSectionMissing0 { get; }
    internal static string FailedToConvert0T1 { get; }
    internal static string InvalidShortNameLength { get; }
    internal static string InvalidStorageScope { get; }
    internal static string Key0NotFoundInSection1DuringExpansion { get; }
    internal static string KeyCannotExpandOnSelf0 { get; }
    internal static string NoEmptySectionNames { get; }
    internal static string NoTypeConverterForRestore0 { get; }
    internal static string TypeCantBeReloaded0 { get; }
    internal static string TypeCantBeSaved0 { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CannotRoundTripType0();
    internal static string get_DestinationFileNameNotSet();
    internal static string get_DocumentRootMustNotBeNull();
    internal static string get_ExpandKeyMissing0();
    internal static string get_ExpandSectionMissing0();
    internal static string get_FailedToConvert0T1();
    internal static string get_InvalidShortNameLength();
    internal static string get_InvalidStorageScope();
    internal static string get_Key0NotFoundInSection1DuringExpansion();
    internal static string get_KeyCannotExpandOnSelf0();
    internal static string get_NoEmptySectionNames();
    internal static string get_NoTypeConverterForRestore0();
    internal static string get_TypeCantBeReloaded0();
    internal static string get_TypeCantBeSaved0();
}
public class Dnp.Runtime.Serialization.BinaryFormatterSerializer : object {
    private BinaryFormatter _BinaryFormatter;
    public sealed virtual Byte[] SerializeObjects(T objectsToSerialize);
    public sealed virtual T DeserializeObjects(Stream stream);
}
[ExtensionAttribute]
public static class Dnp.Runtime.Serialization.DataContractSerializerExtensions : object {
    [ExtensionAttribute]
public static string ContractToString(DataContractSerializer dataContractSerializer, object contract);
}
public interface Dnp.Runtime.Serialization.ISerializer {
    public abstract virtual Byte[] SerializeObjects(T objectsToSerialize);
    public abstract virtual T DeserializeObjects(Stream stream);
}
public class Dnp.Runtime.Serialization.XmlSerializer`1 : XmlSerializer {
    [CompilerGeneratedAttribute]
private bool <Indent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndentChars>k__BackingField;
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public XmlSerializer`1(Type[] extraTypes);
    public XmlSerializer`1(string defaultNamespace);
    public XmlSerializer`1(XmlAttributeOverrides overrides);
    public XmlSerializer`1(XmlRootAttribute root);
    public XmlSerializer`1(XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer`1(XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location);
    [CompilerGeneratedAttribute]
public bool get_Indent();
    [CompilerGeneratedAttribute]
public void set_Indent(bool value);
    [CompilerGeneratedAttribute]
public string get_IndentChars();
    [CompilerGeneratedAttribute]
public void set_IndentChars(string value);
    protected virtual void Init();
    public string Serialize(TRoot root);
    public string Serialize(TRoot root, Encoding encoding);
    public string Serialize(TRoot root, Encoding encoding, XmlSerializerNamespaces serializerNamespaces);
    private XmlWriter GetXmlWriter(StringWriter stringWriter, Encoding encoding);
    public TRoot Deserialize(string xml);
    public TRoot Deserialize(string xml, Encoding encoding);
    public TRoot Deserialize(Stream stream);
    public TRoot Deserialize(TextReader textReader);
    public TRoot Deserialize(XmlReader xmlReader);
    public TRoot Deserialize(XmlReader xmlReader, string encodingStyle);
    public TRoot Deserialize(XmlReader xmlReader, XmlDeserializationEvents events);
    public TRoot Deserialize(XmlReader xmlReader, string encodingStyle, XmlDeserializationEvents events);
}
public class Dnp.Security.Cryptography.Cryptographer : object {
    [CompilerGeneratedAttribute]
private SymmetricAlgorithm <CryptoAlgorithm>k__BackingField;
    public SymmetricAlgorithm CryptoAlgorithm { get; public set; }
    public Cryptographer(SymmetricAlgorithm cryptoAlgorithm);
    [CompilerGeneratedAttribute]
public SymmetricAlgorithm get_CryptoAlgorithm();
    [CompilerGeneratedAttribute]
public void set_CryptoAlgorithm(SymmetricAlgorithm value);
    public string Encrypt(string text);
    public string Encrypt(ICryptoTransform encryptor, string text);
    public Byte[] Encrypt(ICryptoTransform encryptor, Byte[] data);
    public string Decrypt(string encryptedText);
    public string Decrypt(ICryptoTransform decryptor, string encryptedText);
    public Byte[] Decrypt(ICryptoTransform decryptor, Byte[] encrypted);
    public sealed virtual void Dispose();
}
public interface Dnp.Security.Cryptography.IPasswordDeriver {
    public abstract virtual Byte[] DeriveKey(string password);
}
public class Dnp.Security.Cryptography.PasswordCryptographer : object {
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private SymmetricAlgorithm <SymmetricAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private IPasswordDeriver <PasswordDeriver>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitialVector>k__BackingField;
    public string Password { get; public set; }
    protected SymmetricAlgorithm SymmetricAlgorithm { get; protected set; }
    public IPasswordDeriver PasswordDeriver { get; public set; }
    public Byte[] InitialVector { get; public set; }
    public PasswordCryptographer(SymmetricAlgorithm symmetricAlgorithm, IPasswordDeriver passwordDeriver, Byte[] initialVector, string password);
    public PasswordCryptographer(SymmetricAlgorithm symmetricAlgorithm, Byte[] initialVector, string password);
    public PasswordCryptographer(SymmetricAlgorithm symmetricAlgorithm, string password);
    public PasswordCryptographer(string password);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
protected SymmetricAlgorithm get_SymmetricAlgorithm();
    [CompilerGeneratedAttribute]
protected void set_SymmetricAlgorithm(SymmetricAlgorithm value);
    [CompilerGeneratedAttribute]
public IPasswordDeriver get_PasswordDeriver();
    [CompilerGeneratedAttribute]
public void set_PasswordDeriver(IPasswordDeriver value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitialVector();
    [CompilerGeneratedAttribute]
public void set_InitialVector(Byte[] value);
    public Byte[] Encrypt(Byte[] data, string password);
    public void Encrypt(Stream dataStream, Stream encryptedStream, string password);
    public Byte[] Decrypt(Byte[] encryptedData, string password);
    public Byte[] Decrypt(Stream encryptedDataStream, string password);
}
public class Dnp.Security.Cryptography.PasswordDeriver : object {
    private static List`1<Type> AllowedSymmetricAlgorithms;
    private static Byte[] DefaultSalt;
    [CompilerGeneratedAttribute]
private Byte[] <InitialVector>k__BackingField;
    [CompilerGeneratedAttribute]
private SymmetricAlgorithm <SymmetricAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private HashAlgorithm <PasswordHashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PasswordSalt>k__BackingField;
    public Byte[] InitialVector { get; public set; }
    public SymmetricAlgorithm SymmetricAlgorithm { get; public set; }
    public HashAlgorithm PasswordHashAlgorithm { get; public set; }
    public Byte[] PasswordSalt { get; public set; }
    public PasswordDeriver(SymmetricAlgorithm symmetricAlgorithm, Byte[] initialVector, HashAlgorithm passwordHashAlgorithm, Byte[] passwordSalt);
    public PasswordDeriver(SymmetricAlgorithm symmetricAlgorithm, Byte[] initialVector);
    private static PasswordDeriver();
    [CompilerGeneratedAttribute]
public Byte[] get_InitialVector();
    [CompilerGeneratedAttribute]
public void set_InitialVector(Byte[] value);
    [CompilerGeneratedAttribute]
public SymmetricAlgorithm get_SymmetricAlgorithm();
    [CompilerGeneratedAttribute]
public void set_SymmetricAlgorithm(SymmetricAlgorithm value);
    [CompilerGeneratedAttribute]
public HashAlgorithm get_PasswordHashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_PasswordHashAlgorithm(HashAlgorithm value);
    [CompilerGeneratedAttribute]
public Byte[] get_PasswordSalt();
    [CompilerGeneratedAttribute]
public void set_PasswordSalt(Byte[] value);
    protected bool IsSupportedSymmetricAlgorithm(SymmetricAlgorithm symmetricAlgorithm);
    public sealed virtual Byte[] DeriveKey(string password);
}
public class Dnp.Security.Cryptography.SymmetricAlgorithmHelper : object {
    public static Byte[] GenerateConstantIV(SymmetricAlgorithm symmetricAlgorithm, int seed);
}
public interface Dnp.ServiceModel.IServiceResponseContract {
    public abstract virtual TResponse CallService(TContract contract, Func`2<TContract, TResponse> predicate, Func`3<TContract, Exception, TResponse> error);
}
public class Dnp.ServiceModel.ServiceResponseContract : object {
    public sealed virtual TResponse CallService(TContract contract, Func`2<TContract, TResponse> predicate, Func`3<TContract, Exception, TResponse> error);
}
[ExtensionAttribute]
public static class Dnp.String.StringExtensions : object {
    [ExtensionAttribute]
public static string Replace(string stringToReplace, string criteria);
    [ExtensionAttribute]
public static string ReplaceWithRegex(string stringToReplace, string regexCriteria, string replaceWith);
    [ExtensionAttribute]
public static string TrimInternal(string stringToTrim);
    [ExtensionAttribute]
public static String[] SplitAndKeepSeparator(string stringToSplit, Char[] separator);
    private static int MakeSeparatorList(string stringToSplit, Char[] separator, Int32[]& sepList);
}
public static class Dnp.Text.RegularExpressions.Expressions : object {
    public static string EMail;
    public static string IPv4;
    public static string DuplicateWords;
    public static string NetworkMacAddress;
    public static string UsaPhoneNumber;
    public static string CreditCard;
    public static string AnsiSqlDateTime;
    public static string Ssn;
    private static Expressions();
}
