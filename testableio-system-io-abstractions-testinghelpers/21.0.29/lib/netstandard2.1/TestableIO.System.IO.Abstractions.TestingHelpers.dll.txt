internal static class System.IO.Abstractions.TestingHelpers.CommonExceptions : object {
    private static int _fileLockHResult;
    public static FileNotFoundException FileNotFound(string path);
    public static DirectoryNotFoundException CouldNotFindPartOfPath(string path);
    public static UnauthorizedAccessException AccessDenied(string path);
    public static NotSupportedException InvalidUseOfVolumeSeparator();
    public static ArgumentException PathIsNotOfALegalForm(string paramName);
    public static ArgumentNullException FilenameCannotBeNull(string paramName);
    public static ArgumentException IllegalCharactersInPath(string paramName);
    public static ArgumentException InvalidUncPath(string paramName);
    public static IOException ProcessCannotAccessFileInUse(string paramName);
    public static IOException FileAlreadyExists(string paramName);
    public static ArgumentException InvalidAccessCombination(FileMode mode, FileAccess access);
    public static ArgumentException AppendAccessOnlyInWriteOnlyMode();
    public static NotImplementedException NotImplemented();
    public static IOException CannotCreateBecauseSameNameAlreadyExists(string path);
    public static IOException NameCannotBeResolvedByTheSystem(string path);
    public static DirectoryNotFoundException PathDoesNotExistOrCouldNotBeFound(string path);
}
public interface System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor {
    public IEnumerable`1<string> AllPaths { get; }
    public IEnumerable`1<string> AllFiles { get; }
    public IEnumerable`1<string> AllDirectories { get; }
    public IEnumerable`1<string> AllDrives { get; }
    public StringOperations StringOperations { get; }
    public PathVerifier PathVerifier { get; }
    public IFileSystem FileSystem { get; }
    public abstract virtual MockFileData AdjustTimes(MockFileData fileData, TimeAdjustments timeAdjustments);
    public abstract virtual MockFileData GetFile(string path);
    public abstract virtual MockDriveData GetDrive(string name);
    public abstract virtual void AddFile(string path, MockFileData mockFile);
    public abstract virtual void AddDirectory(string path);
    public abstract virtual void AddDrive(string name, MockDriveData mockDrive);
    public abstract virtual void AddFileFromEmbeddedResource(string path, Assembly resourceAssembly, string embeddedResourcePath);
    public abstract virtual void AddFilesFromEmbeddedNamespace(string path, Assembly resourceAssembly, string embeddedResourcePath);
    public abstract virtual void MoveDirectory(string sourcePath, string destPath);
    public abstract virtual void RemoveFile(string path);
    public abstract virtual bool FileExists(string path);
    public abstract virtual IEnumerable`1<string> get_AllPaths();
    public abstract virtual IEnumerable`1<string> get_AllFiles();
    public abstract virtual IEnumerable`1<string> get_AllDirectories();
    public abstract virtual IEnumerable`1<string> get_AllDrives();
    public abstract virtual StringOperations get_StringOperations();
    public abstract virtual PathVerifier get_PathVerifier();
    public abstract virtual IFileSystem get_FileSystem();
}
public class System.IO.Abstractions.TestingHelpers.MockDirectory : DirectoryBase {
    private IMockFileDataAccessor mockFileDataAccessor;
    private string currentDirectory;
    public MockDirectory(IMockFileDataAccessor mockFileDataAccessor, FileBase fileBase, string currentDirectory);
    public MockDirectory(IMockFileDataAccessor mockFileDataAccessor, string currentDirectory);
    public virtual IDirectoryInfo CreateDirectory(string path);
    private IDirectoryInfo CreateDirectoryInternal(string path);
    public virtual void Delete(string path);
    public virtual void Delete(string path, bool recursive);
    public virtual bool Exists(string path);
    public virtual DateTime GetCreationTime(string path);
    public virtual DateTime GetCreationTimeUtc(string path);
    public virtual string GetCurrentDirectory();
    public virtual String[] GetDirectories(string path);
    public virtual String[] GetDirectories(string path, string searchPattern);
    public virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOption);
    public virtual String[] GetDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual string GetDirectoryRoot(string path);
    public virtual String[] GetFiles(string path);
    public virtual String[] GetFiles(string path, string searchPattern);
    public virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public virtual String[] GetFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    private String[] GetFilesInternal(IEnumerable`1<string> files, string path, string searchPattern, SearchOption searchOption);
    public virtual String[] GetFileSystemEntries(string path);
    public virtual String[] GetFileSystemEntries(string path, string searchPattern);
    public virtual String[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public virtual String[] GetFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual DateTime GetLastAccessTime(string path);
    public virtual DateTime GetLastAccessTimeUtc(string path);
    public virtual DateTime GetLastWriteTime(string path);
    public virtual DateTime GetLastWriteTimeUtc(string path);
    public virtual String[] GetLogicalDrives();
    public virtual IDirectoryInfo GetParent(string path);
    public virtual void Move(string sourceDirName, string destDirName);
    public virtual void SetCreationTime(string path, DateTime creationTime);
    public virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public virtual void SetCurrentDirectory(string path);
    public virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption);
    private string FixPrefix(string path, string originalPath);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<string> EnumerateFiles(string path);
    public virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
    private string EnsureAbsolutePath(string path);
    private void CheckSearchPattern(string searchPattern);
    private string ReplaceLastOccurrence(string source, string find, string replace);
    private SearchOption EnumerationOptionsToSearchOption(EnumerationOptions enumerationOptions);
    [CompilerGeneratedAttribute]
private string <GetLogicalDrives>b__30_0(string d);
    [CompilerGeneratedAttribute]
private string <GetLogicalDrives>b__30_1(string r);
    [CompilerGeneratedAttribute]
internal static Exception <EnumerationOptionsToSearchOption>g__CreateExceptionForUnsupportedProperty|56_0(string propertyName);
}
public class System.IO.Abstractions.TestingHelpers.MockDirectoryData : MockFileData {
    private DirectorySecurity accessControl;
    [SupportedOSPlatformAttribute("windows")]
public DirectorySecurity AccessControl { get; public set; }
    public DirectorySecurity get_AccessControl();
    public void set_AccessControl(DirectorySecurity value);
}
public class System.IO.Abstractions.TestingHelpers.MockDirectoryInfo : DirectoryInfoBase {
    private IMockFileDataAccessor mockFileDataAccessor;
    private string directoryPath;
    private string originalPath;
    private MockFileData cachedMockFileData;
    private bool refreshOnNextRead;
    public FileAttributes Attributes { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public bool Exists { get; }
    public string Extension { get; }
    public string FullName { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public string Name { get; }
    public IDirectoryInfo Parent { get; }
    public IDirectoryInfo Root { get; }
    public MockDirectoryInfo(IMockFileDataAccessor mockFileDataAccessor, string directoryPath);
    public virtual void Delete();
    public virtual void Refresh();
    public virtual FileAttributes get_Attributes();
    public virtual void set_Attributes(FileAttributes value);
    public virtual DateTime get_CreationTime();
    public virtual void set_CreationTime(DateTime value);
    public virtual DateTime get_CreationTimeUtc();
    public virtual void set_CreationTimeUtc(DateTime value);
    public virtual bool get_Exists();
    public virtual string get_Extension();
    public virtual string get_FullName();
    public virtual DateTime get_LastAccessTime();
    public virtual void set_LastAccessTime(DateTime value);
    public virtual DateTime get_LastAccessTimeUtc();
    public virtual void set_LastAccessTimeUtc(DateTime value);
    public virtual DateTime get_LastWriteTime();
    public virtual void set_LastWriteTime(DateTime value);
    public virtual DateTime get_LastWriteTimeUtc();
    public virtual void set_LastWriteTimeUtc(DateTime value);
    public virtual string get_Name();
    public virtual void Create();
    public virtual IDirectoryInfo CreateSubdirectory(string path);
    public virtual void Delete(bool recursive);
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories();
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern);
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles();
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern);
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos();
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IDirectoryInfo[] GetDirectories();
    public virtual IDirectoryInfo[] GetDirectories(string searchPattern);
    public virtual IDirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption);
    public virtual IDirectoryInfo[] GetDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    private DirectoryInfoBase[] ConvertStringsToDirectories(IEnumerable`1<string> paths);
    public virtual IFileInfo[] GetFiles();
    public virtual IFileInfo[] GetFiles(string searchPattern);
    public virtual IFileInfo[] GetFiles(string searchPattern, SearchOption searchOption);
    public virtual IFileInfo[] GetFiles(string searchPattern, EnumerationOptions enumerationOptions);
    private IFileInfo[] ConvertStringsToFiles(IEnumerable`1<string> paths);
    public virtual IFileSystemInfo[] GetFileSystemInfos();
    public virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern);
    public virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption);
    public virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual void MoveTo(string destDirName);
    public virtual IDirectoryInfo get_Parent();
    public virtual IDirectoryInfo get_Root();
    private MockFileData GetMockFileDataForRead();
    private MockFileData GetMockFileDataForWrite();
    public virtual string ToString();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl(AccessControlSections includeSections);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual void SetAccessControl(object value);
    private void SetDirectoryPath(string path);
    private MockDirectoryData GetMockDirectoryData();
    [CompilerGeneratedAttribute]
private MockDirectoryInfo <ConvertStringsToDirectories>b__56_0(string path);
}
public class System.IO.Abstractions.TestingHelpers.MockDirectoryInfoFactory : object {
    private IMockFileDataAccessor mockFileSystem;
    public IFileSystem FileSystem { get; }
    public MockDirectoryInfoFactory(IMockFileDataAccessor mockFileSystem);
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IDirectoryInfo New(string path);
    public sealed virtual IDirectoryInfo Wrap(DirectoryInfo directoryInfo);
}
public class System.IO.Abstractions.TestingHelpers.MockDriveData : object {
    [CompilerGeneratedAttribute]
private long <AvailableFreeSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DriveFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private DriveType <DriveType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReady>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalFreeSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VolumeLabel>k__BackingField;
    public long AvailableFreeSpace { get; public set; }
    public string DriveFormat { get; public set; }
    public DriveType DriveType { get; public set; }
    public bool IsReady { get; public set; }
    public long TotalFreeSpace { get; public set; }
    public long TotalSize { get; public set; }
    public string VolumeLabel { get; public set; }
    public MockDriveData(MockDriveData template);
    [CompilerGeneratedAttribute]
public long get_AvailableFreeSpace();
    [CompilerGeneratedAttribute]
public void set_AvailableFreeSpace(long value);
    [CompilerGeneratedAttribute]
public string get_DriveFormat();
    [CompilerGeneratedAttribute]
public void set_DriveFormat(string value);
    [CompilerGeneratedAttribute]
public DriveType get_DriveType();
    [CompilerGeneratedAttribute]
public void set_DriveType(DriveType value);
    [CompilerGeneratedAttribute]
public bool get_IsReady();
    [CompilerGeneratedAttribute]
public void set_IsReady(bool value);
    [CompilerGeneratedAttribute]
public long get_TotalFreeSpace();
    [CompilerGeneratedAttribute]
public void set_TotalFreeSpace(long value);
    [CompilerGeneratedAttribute]
public long get_TotalSize();
    [CompilerGeneratedAttribute]
public void set_TotalSize(long value);
    [CompilerGeneratedAttribute]
public string get_VolumeLabel();
    [CompilerGeneratedAttribute]
public void set_VolumeLabel(string value);
}
public class System.IO.Abstractions.TestingHelpers.MockDriveInfo : DriveInfoBase {
    private IMockFileDataAccessor mockFileDataAccessor;
    private string name;
    public long AvailableFreeSpace { get; }
    public string DriveFormat { get; }
    public DriveType DriveType { get; }
    public bool IsReady { get; }
    public string Name { get; }
    public IDirectoryInfo RootDirectory { get; }
    public long TotalFreeSpace { get; }
    public long TotalSize { get; }
    public string VolumeLabel { get; public set; }
    public MockDriveInfo(IMockFileDataAccessor mockFileDataAccessor, string name);
    public virtual long get_AvailableFreeSpace();
    public virtual string get_DriveFormat();
    public virtual DriveType get_DriveType();
    public virtual bool get_IsReady();
    public virtual string get_Name();
    public virtual IDirectoryInfo get_RootDirectory();
    public virtual long get_TotalFreeSpace();
    public virtual long get_TotalSize();
    public virtual string get_VolumeLabel();
    public virtual void set_VolumeLabel(string value);
    public virtual string ToString();
    private MockDriveData GetMockDriveData();
}
public class System.IO.Abstractions.TestingHelpers.MockDriveInfoFactory : object {
    private IMockFileDataAccessor mockFileSystem;
    public IFileSystem FileSystem { get; }
    public MockDriveInfoFactory(IMockFileDataAccessor mockFileSystem);
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IDriveInfo[] GetDrives();
    public sealed virtual IDriveInfo New(string driveName);
    public sealed virtual IDriveInfo Wrap(DriveInfo driveInfo);
    private string NormalizeDriveName(string driveName);
}
public class System.IO.Abstractions.TestingHelpers.MockFile : FileBase {
    private IMockFileDataAccessor mockFileDataAccessor;
    public MockFile(IMockFileDataAccessor mockFileDataAccessor);
    public virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task AppendAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public virtual Task AppendAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAllBytesAsync(string path, CancellationToken cancellationToken);
    public virtual Task`1<String[]> ReadAllLinesAsync(string path, CancellationToken cancellationToken);
    public virtual Task`1<String[]> ReadAllLinesAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAllTextAsync(string path, CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAllTextAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task WriteAllBytesAsync(string path, Byte[] bytes, CancellationToken cancellationToken);
    public virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task WriteAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public virtual Task WriteAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual void AppendAllLines(string path, IEnumerable`1<string> contents);
    public virtual void AppendAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public virtual void AppendAllText(string path, string contents);
    public virtual void AppendAllText(string path, string contents, Encoding encoding);
    public virtual StreamWriter AppendText(string path);
    public virtual void Copy(string sourceFileName, string destFileName);
    public virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public virtual FileSystemStream Create(string path);
    public virtual FileSystemStream Create(string path, int bufferSize);
    public virtual FileSystemStream Create(string path, int bufferSize, FileOptions options);
    private FileSystemStream CreateInternal(string path, FileAccess access, FileOptions options);
    public virtual StreamWriter CreateText(string path);
    public virtual void Decrypt(string path);
    public virtual void Delete(string path);
    public virtual void Encrypt(string path);
    public virtual bool Exists(string path);
    public virtual FileAttributes GetAttributes(string path);
    public virtual DateTime GetCreationTime(string path);
    public virtual DateTime GetCreationTimeUtc(string path);
    public virtual DateTime GetLastAccessTime(string path);
    public virtual DateTime GetLastAccessTimeUtc(string path);
    public virtual DateTime GetLastWriteTime(string path);
    public virtual DateTime GetLastWriteTimeUtc(string path);
    private DateTime GetTimeFromFile(string path, Func`2<MockFileData, DateTime> existingFileFunction, Func`1<DateTime> nonExistingFileFunction);
    public virtual void Move(string sourceFileName, string destFileName);
    public virtual FileSystemStream Open(string path, FileMode mode);
    public virtual FileSystemStream Open(string path, FileMode mode, FileAccess access);
    public virtual FileSystemStream Open(string path, FileMode mode, FileAccess access, FileShare share);
    private FileSystemStream OpenInternal(string path, FileMode mode, FileAccess access, FileOptions options);
    public virtual FileSystemStream OpenRead(string path);
    public virtual StreamReader OpenText(string path);
    public virtual FileSystemStream OpenWrite(string path);
    private FileSystemStream OpenWriteInternal(string path, FileOptions options);
    public virtual Byte[] ReadAllBytes(string path);
    public virtual String[] ReadAllLines(string path);
    public virtual String[] ReadAllLines(string path, Encoding encoding);
    public virtual string ReadAllText(string path);
    public virtual string ReadAllText(string path, Encoding encoding);
    public virtual IEnumerable`1<string> ReadLines(string path);
    public virtual IEnumerable`1<string> ReadLines(string path, Encoding encoding);
    public virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);
    public virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    public virtual void SetAttributes(string path, FileAttributes fileAttributes);
    public virtual void SetCreationTime(string path, DateTime creationTime);
    public virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public virtual void WriteAllBytes(string path, Byte[] bytes);
    public virtual void WriteAllLines(string path, IEnumerable`1<string> contents);
    public virtual void WriteAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public virtual void WriteAllLines(string path, String[] contents);
    public virtual void WriteAllLines(string path, String[] contents, Encoding encoding);
    public virtual void WriteAllText(string path, string contents);
    public virtual void WriteAllText(string path, string contents, Encoding encoding);
    internal static string ReadAllBytes(Byte[] contents, Encoding encoding);
    private string ReadAllTextInternal(string path, Encoding encoding);
    private void VerifyValueIsNotNull(object value, string parameterName);
    private void VerifyDirectoryExists(string path);
}
public class System.IO.Abstractions.TestingHelpers.MockFileData : object {
    public static Encoding DefaultEncoding;
    internal static MockFileData NullObject;
    public static DateTimeOffset DefaultDateTimeOffset;
    private FileSecurity accessControl;
    [CompilerGeneratedAttribute]
private Byte[] <Contents>k__BackingField;
    private DateTimeOffset creationTime;
    private DateTimeOffset lastAccessTime;
    private DateTimeOffset lastWriteTime;
    [CompilerGeneratedAttribute]
private FileAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private FileShare <AllowedFileShare>k__BackingField;
    public bool IsDirectory { get; }
    public Byte[] Contents { get; public set; }
    public string TextContents { get; public set; }
    public DateTimeOffset CreationTime { get; public set; }
    public DateTimeOffset LastAccessTime { get; public set; }
    public DateTimeOffset LastWriteTime { get; public set; }
    public FileAttributes Attributes { get; public set; }
    [SupportedOSPlatformAttribute("windows")]
public FileSecurity AccessControl { get; public set; }
    public FileShare AllowedFileShare { get; public set; }
    public MockFileData(string textContents);
    public MockFileData(string textContents, Encoding encoding);
    public MockFileData(Byte[] contents);
    public MockFileData(MockFileData template);
    private static MockFileData();
    public bool get_IsDirectory();
    [CompilerGeneratedAttribute]
public Byte[] get_Contents();
    [CompilerGeneratedAttribute]
public void set_Contents(Byte[] value);
    public string get_TextContents();
    public void set_TextContents(string value);
    public DateTimeOffset get_CreationTime();
    public void set_CreationTime(DateTimeOffset value);
    public DateTimeOffset get_LastAccessTime();
    public void set_LastAccessTime(DateTimeOffset value);
    public DateTimeOffset get_LastWriteTime();
    public void set_LastWriteTime(DateTimeOffset value);
    public static MockFileData op_Implicit(string s);
    [CompilerGeneratedAttribute]
public FileAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public void set_Attributes(FileAttributes value);
    public FileSecurity get_AccessControl();
    public void set_AccessControl(FileSecurity value);
    [CompilerGeneratedAttribute]
public FileShare get_AllowedFileShare();
    [CompilerGeneratedAttribute]
public void set_AllowedFileShare(FileShare value);
    internal void CheckFileAccess(string path, FileAccess access);
    internal virtual MockFileData Clone();
}
public class System.IO.Abstractions.TestingHelpers.MockFileInfo : FileInfoBase {
    private IMockFileDataAccessor mockFileSystem;
    private string path;
    private string originalPath;
    private MockFileData cachedMockFileData;
    private MockFile mockFile;
    private bool refreshOnNextRead;
    public FileAttributes Attributes { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public bool Exists { get; }
    public string Extension { get; }
    public string FullName { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public string Name { get; }
    public IDirectoryInfo Directory { get; }
    public string DirectoryName { get; }
    public bool IsReadOnly { get; public set; }
    public long Length { get; }
    public MockFileInfo(IMockFileDataAccessor mockFileSystem, string path);
    public virtual void Delete();
    public virtual void Refresh();
    public virtual FileAttributes get_Attributes();
    public virtual void set_Attributes(FileAttributes value);
    public virtual DateTime get_CreationTime();
    public virtual void set_CreationTime(DateTime value);
    public virtual DateTime get_CreationTimeUtc();
    public virtual void set_CreationTimeUtc(DateTime value);
    public virtual bool get_Exists();
    public virtual string get_Extension();
    public virtual string get_FullName();
    public virtual DateTime get_LastAccessTime();
    public virtual void set_LastAccessTime(DateTime value);
    public virtual DateTime get_LastAccessTimeUtc();
    public virtual void set_LastAccessTimeUtc(DateTime value);
    public virtual DateTime get_LastWriteTime();
    public virtual void set_LastWriteTime(DateTime value);
    public virtual DateTime get_LastWriteTimeUtc();
    public virtual void set_LastWriteTimeUtc(DateTime value);
    public virtual string get_Name();
    public virtual StreamWriter AppendText();
    public virtual IFileInfo CopyTo(string destFileName);
    public virtual IFileInfo CopyTo(string destFileName, bool overwrite);
    public virtual FileSystemStream Create();
    public virtual StreamWriter CreateText();
    public virtual void Decrypt();
    public virtual void Encrypt();
    public virtual void MoveTo(string destFileName);
    public virtual FileSystemStream Open(FileMode mode);
    public virtual FileSystemStream Open(FileMode mode, FileAccess access);
    public virtual FileSystemStream Open(FileMode mode, FileAccess access, FileShare share);
    public virtual FileSystemStream OpenRead();
    public virtual StreamReader OpenText();
    public virtual FileSystemStream OpenWrite();
    public virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName);
    public virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    public virtual IDirectoryInfo get_Directory();
    public virtual string get_DirectoryName();
    public virtual bool get_IsReadOnly();
    public virtual void set_IsReadOnly(bool value);
    public virtual long get_Length();
    public virtual string ToString();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl(AccessControlSections includeSections);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual void SetAccessControl(object value);
    private MockFileData GetMockFileData();
    private static DateTime AdjustUnspecifiedKind(DateTime time, DateTimeKind fallbackKind);
    private MockFileData GetMockFileDataForRead();
    private MockFileData GetMockFileDataForWrite();
}
public class System.IO.Abstractions.TestingHelpers.MockFileInfoFactory : object {
    private IMockFileDataAccessor mockFileSystem;
    public IFileSystem FileSystem { get; }
    public MockFileInfoFactory(IMockFileDataAccessor mockFileSystem);
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IFileInfo New(string fileName);
    public sealed virtual IFileInfo Wrap(FileInfo fileInfo);
}
public class System.IO.Abstractions.TestingHelpers.MockFileStream : FileSystemStream {
    [CompilerGeneratedAttribute]
private static FileSystemStream <Null>k__BackingField;
    private IMockFileDataAccessor mockFileDataAccessor;
    private string path;
    private FileAccess access;
    private FileOptions options;
    private MockFileData fileData;
    private bool disposed;
    public static FileSystemStream Null { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public MockFileStream(IMockFileDataAccessor mockFileDataAccessor, string path, FileMode mode, FileAccess access, FileOptions options);
    private static MockFileStream();
    [CompilerGeneratedAttribute]
public static FileSystemStream get_Null();
    private static void ThrowIfInvalidModeAccess(FileMode mode, FileAccess access);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual int Read(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual void Flush();
    public virtual void Flush(bool flushToDisk);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl(AccessControlSections includeSections);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual void SetAccessControl(object value);
    private MockFileData GetMockFileData();
    private void InternalFlush();
    private void OnClose();
    private TimeAdjustments GetTimeAdjustmentsForFileStreamWhenFileExists(FileMode mode, FileAccess access);
}
public class System.IO.Abstractions.TestingHelpers.MockFileStreamFactory : object {
    private IMockFileDataAccessor mockFileSystem;
    public IFileSystem FileSystem { get; }
    public MockFileStreamFactory(IMockFileDataAccessor mockFileSystem);
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual FileSystemStream New(SafeFileHandle handle, FileAccess access);
    public sealed virtual FileSystemStream New(SafeFileHandle handle, FileAccess access, int bufferSize);
    public sealed virtual FileSystemStream New(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync);
    public sealed virtual FileSystemStream New(string path, FileMode mode);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options);
    public sealed virtual FileSystemStream Wrap(FileStream fileStream);
}
public class System.IO.Abstractions.TestingHelpers.MockFileSystem : FileSystemBase {
    private static string DEFAULT_CURRENT_DIRECTORY;
    private static string TEMP_DIRECTORY;
    private IDictionary`2<string, FileSystemEntry> files;
    private IDictionary`2<string, MockDriveData> drives;
    private PathVerifier pathVerifier;
    private Func`1<DateTime> dateTimeProvider;
    private static Func`1<DateTime> defaultDateTimeProvider;
    [CompilerGeneratedAttribute]
private StringOperations <StringOperations>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IDirectory <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileInfoFactory <FileInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileStreamFactory <FileStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IDirectoryInfoFactory <DirectoryInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDriveInfoFactory <DriveInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystemWatcherFactory <FileSystemWatcher>k__BackingField;
    public StringOperations StringOperations { get; }
    public IFile File { get; }
    public IDirectory Directory { get; }
    public IFileInfoFactory FileInfo { get; }
    public IFileStreamFactory FileStream { get; }
    public IPath Path { get; }
    public IDirectoryInfoFactory DirectoryInfo { get; }
    public IDriveInfoFactory DriveInfo { get; }
    public IFileSystemWatcherFactory FileSystemWatcher { get; }
    public IFileSystem FileSystem { get; }
    public PathVerifier PathVerifier { get; }
    public IEnumerable`1<string> AllPaths { get; }
    public IEnumerable`1<string> AllNodes { get; }
    public IEnumerable`1<string> AllFiles { get; }
    public IEnumerable`1<string> AllDirectories { get; }
    public IEnumerable`1<string> AllDrives { get; }
    public MockFileSystem(IDictionary`2<string, MockFileData> files, string currentDirectory);
    public MockFileSystem(MockFileSystemOptions options);
    public MockFileSystem(IDictionary`2<string, MockFileData> files, MockFileSystemOptions options);
    private static MockFileSystem();
    [CompilerGeneratedAttribute]
public sealed virtual StringOperations get_StringOperations();
    [CompilerGeneratedAttribute]
public virtual IFile get_File();
    [CompilerGeneratedAttribute]
public virtual IDirectory get_Directory();
    [CompilerGeneratedAttribute]
public virtual IFileInfoFactory get_FileInfo();
    [CompilerGeneratedAttribute]
public virtual IFileStreamFactory get_FileStream();
    [CompilerGeneratedAttribute]
public virtual IPath get_Path();
    [CompilerGeneratedAttribute]
public virtual IDirectoryInfoFactory get_DirectoryInfo();
    [CompilerGeneratedAttribute]
public virtual IDriveInfoFactory get_DriveInfo();
    [CompilerGeneratedAttribute]
public virtual IFileSystemWatcherFactory get_FileSystemWatcher();
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual PathVerifier get_PathVerifier();
    public MockFileSystem MockTime(Func`1<DateTime> dateTimeProvider);
    private string FixPath(string path, bool checkCaps);
    private string GetPathWithCorrectDirectoryCapitalization(string fullPath);
    public sealed virtual MockFileData AdjustTimes(MockFileData fileData, TimeAdjustments timeAdjustments);
    public sealed virtual MockFileData GetFile(string path);
    public sealed virtual MockDriveData GetDrive(string name);
    private void SetEntry(string path, MockFileData mockFile);
    public sealed virtual void AddFile(string path, MockFileData mockFile);
    public void AddEmptyFile(string path);
    public void AddEmptyFile(IFileInfo path);
    public void AddDirectory(IDirectoryInfo path);
    public void AddFile(IFileInfo path, MockFileData data);
    public MockFileData GetFile(IFileInfo path);
    public sealed virtual void AddDirectory(string path);
    public sealed virtual void AddFileFromEmbeddedResource(string path, Assembly resourceAssembly, string embeddedResourcePath);
    public sealed virtual void AddFilesFromEmbeddedNamespace(string path, Assembly resourceAssembly, string embeddedResourcePath);
    public sealed virtual void AddDrive(string name, MockDriveData mockDrive);
    public sealed virtual void MoveDirectory(string sourcePath, string destPath);
    public sealed virtual void RemoveFile(string path);
    public sealed virtual bool FileExists(string path);
    public sealed virtual IEnumerable`1<string> get_AllPaths();
    public IEnumerable`1<string> get_AllNodes();
    public sealed virtual IEnumerable`1<string> get_AllFiles();
    public sealed virtual IEnumerable`1<string> get_AllDirectories();
    public sealed virtual IEnumerable`1<string> get_AllDrives();
    [OnDeserializingAttribute]
private void OnDeserializing(StreamingContext c);
    private bool AnyFileIsReadOnly(string path);
    private bool IsStartOfAnotherPath(string path);
    private MockFileData GetFileWithoutFixingPath(string path);
    private bool DirectoryExistsWithoutFixingPath(string path);
    private bool FileIsReadOnly(string path);
    [CompilerGeneratedAttribute]
private bool <get_AllNodes>b__65_0(string path);
    [CompilerGeneratedAttribute]
private bool <AnyFileIsReadOnly>b__73_0(string file);
}
public class System.IO.Abstractions.TestingHelpers.MockFileSystemOptions : object {
    [CompilerGeneratedAttribute]
private string <CurrentDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateDefaultTempDir>k__BackingField;
    public string CurrentDirectory { get; public set; }
    public bool CreateDefaultTempDir { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CurrentDirectory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_CreateDefaultTempDir();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CreateDefaultTempDir(bool value);
}
public class System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    public MockFileSystemWatcherFactory(MockFileSystem mockFileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IFileSystemWatcher New();
    public sealed virtual IFileSystemWatcher New(string path);
    public sealed virtual IFileSystemWatcher New(string path, string filter);
    public sealed virtual IFileSystemWatcher Wrap(FileSystemWatcher fileSystemWatcher);
}
public class System.IO.Abstractions.TestingHelpers.MockPath : PathWrapper {
    private IMockFileDataAccessor mockFileDataAccessor;
    private string defaultTempDirectory;
    public MockPath(IMockFileDataAccessor mockFileDataAccessor);
    public MockPath(IMockFileDataAccessor mockFileDataAccessor, string defaultTempDirectory);
    public virtual string GetFullPath(string path);
    private String[] GetSegments(String[] paths);
    public virtual string GetTempFileName();
    public virtual string GetTempPath();
    public virtual string GetRelativePath(string relativeTo, string path);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <GetSegments>b__5_0(string path);
}
public static class System.IO.Abstractions.TestingHelpers.MockUnixSupport : object {
    private static Regex pathTransform;
    private static MockUnixSupport();
    public static string Path(string path);
    public static bool IsUnixPlatform();
    public static bool IsWindowsPlatform();
}
public class System.IO.Abstractions.TestingHelpers.PathVerifier : object {
    private static Char[] AdditionalInvalidPathChars;
    private IMockFileDataAccessor _mockFileDataAccessor;
    public PathVerifier(IMockFileDataAccessor mockFileDataAccessor);
    private static PathVerifier();
    public void IsLegalAbsoluteOrRelative(string path, string paramName);
    private static bool IsValidUseOfVolumeSeparatorChar(string path);
    private string ExtractFileName(string fullFileName);
    private string ExtractFilePath(string fullFileName);
    public bool HasIllegalCharacters(string path, bool checkAdditional);
    public void CheckInvalidPathChars(string path, bool checkAdditional);
    public string NormalizeDriveName(string name);
    public bool TryNormalizeDriveName(string name, String& result);
}
[ExtensionAttribute]
internal static class System.IO.Abstractions.TestingHelpers.StringExtensions : object {
    [ExtensionAttribute]
public static String[] SplitLines(string input);
    [ExtensionAttribute]
public static string Replace(string source, string oldValue, string newValue, StringComparison comparisonType);
    [ExtensionAttribute]
public static string TrimSlashes(string path);
    [ExtensionAttribute]
public static string NormalizeSlashes(string path);
}
public class System.IO.Abstractions.TestingHelpers.StringOperations : object {
    private bool caseSensitive;
    private StringComparison comparison;
    public StringComparer Comparer { get; }
    public StringOperations(bool caseSensitive);
    public StringComparer get_Comparer();
    public bool StartsWith(string s, string prefix);
    public bool EndsWith(string s, string suffix);
    public bool Equals(string x, string y);
    public bool Equals(char x, char y);
    public int IndexOf(string s, string substring);
    public int IndexOf(string s, string substring, int startIndex);
    public bool Contains(string s, string substring);
    public string Replace(string s, string oldValue, string newValue);
    public char ToLower(char c);
    public char ToUpper(char c);
    public string ToLower(string s);
    public string ToUpper(string s);
}
internal static class System.IO.Abstractions.TestingHelpers.StringResources : object {
    [CompilerGeneratedAttribute]
private static ResourceManager <Manager>k__BackingField;
    public static ResourceManager Manager { get; }
    private static StringResources();
    [CompilerGeneratedAttribute]
public static ResourceManager get_Manager();
}
[FlagsAttribute]
public enum System.IO.Abstractions.TestingHelpers.TimeAdjustments : Enum {
    public int value__;
    public static TimeAdjustments None;
    public static TimeAdjustments CreationTime;
    public static TimeAdjustments LastAccessTime;
    public static TimeAdjustments LastWriteTime;
    public static TimeAdjustments All;
}
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    public SupportedOSPlatformAttribute(string _);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
