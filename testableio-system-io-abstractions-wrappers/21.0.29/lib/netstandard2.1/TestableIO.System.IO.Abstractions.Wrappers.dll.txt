[ExtensionAttribute]
internal static class System.IO.Abstractions.Converters : object {
    [ExtensionAttribute]
internal static IEnumerable`1<FileSystemInfoBase> WrapFileSystemInfos(IEnumerable`1<FileSystemInfo> input, IFileSystem fileSystem);
    [ExtensionAttribute]
internal static FileSystemInfoBase[] WrapFileSystemInfos(FileSystemInfo[] input, IFileSystem fileSystem);
    [ExtensionAttribute]
internal static FileSystemInfoBase WrapFileSystemInfo(FileSystemInfo input, IFileSystem fileSystem);
    [ExtensionAttribute]
internal static IEnumerable`1<DirectoryInfoBase> WrapDirectories(IEnumerable`1<DirectoryInfo> input, IFileSystem fileSystem);
    [ExtensionAttribute]
internal static DirectoryInfoBase[] WrapDirectories(DirectoryInfo[] input, IFileSystem fileSystem);
    [ExtensionAttribute]
internal static IEnumerable`1<FileInfoBase> WrapFiles(IEnumerable`1<FileInfo> input, IFileSystem fileSystem);
    [ExtensionAttribute]
internal static FileInfoBase[] WrapFiles(FileInfo[] input, IFileSystem fileSystem);
    private static FileSystemInfoBase WrapFileSystemInfo(IFileSystem fileSystem, FileSystemInfo item);
    private static FileInfoBase WrapFileInfo(IFileSystem fileSystem, FileInfo f);
    private static DirectoryInfoBase WrapDirectoryInfo(IFileSystem fileSystem, DirectoryInfo d);
}
[ExtensionAttribute]
public static class System.IO.Abstractions.DirectoryAclExtensions : object {
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static void CreateDirectory(IDirectory directory, string path, DirectorySecurity directorySecurity);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static DirectorySecurity GetAccessControl(IDirectory directory, string path);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static DirectorySecurity GetAccessControl(IDirectory directory, string path, AccessControlSections includeSections);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static void SetAccessControl(IDirectory directory, string path, DirectorySecurity directorySecurity);
}
public abstract class System.IO.Abstractions.DirectoryBase : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    protected DirectoryBase(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public abstract virtual IDirectoryInfo CreateDirectory(string path);
    public abstract virtual void Delete(string path);
    public abstract virtual void Delete(string path, bool recursive);
    public abstract virtual bool Exists(string path);
    public abstract virtual DateTime GetCreationTime(string path);
    public abstract virtual DateTime GetCreationTimeUtc(string path);
    public abstract virtual string GetCurrentDirectory();
    public abstract virtual String[] GetDirectories(string path);
    public abstract virtual String[] GetDirectories(string path, string searchPattern);
    public abstract virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual string GetDirectoryRoot(string path);
    public abstract virtual String[] GetFiles(string path);
    public abstract virtual String[] GetFiles(string path, string searchPattern);
    public abstract virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual String[] GetFileSystemEntries(string path);
    public abstract virtual String[] GetFileSystemEntries(string path, string searchPattern);
    public abstract virtual String[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual DateTime GetLastAccessTime(string path);
    public abstract virtual DateTime GetLastAccessTimeUtc(string path);
    public abstract virtual DateTime GetLastWriteTime(string path);
    public abstract virtual DateTime GetLastWriteTimeUtc(string path);
    public abstract virtual String[] GetLogicalDrives();
    public abstract virtual IDirectoryInfo GetParent(string path);
    public abstract virtual void Move(string sourceDirName, string destDirName);
    public abstract virtual void SetCreationTime(string path, DateTime creationTime);
    public abstract virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public abstract virtual void SetCurrentDirectory(string path);
    public abstract virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public abstract virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public abstract virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public abstract virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
}
[ExtensionAttribute]
public static class System.IO.Abstractions.DirectoryInfoAclExtensions : object {
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static void Create(IDirectoryInfo directoryInfo, DirectorySecurity directorySecurity);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static DirectorySecurity GetAccessControl(IDirectoryInfo directoryInfo);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static DirectorySecurity GetAccessControl(IDirectoryInfo directoryInfo, AccessControlSections includeSections);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static void SetAccessControl(IDirectoryInfo directoryInfo, DirectorySecurity directorySecurity);
}
public abstract class System.IO.Abstractions.DirectoryInfoBase : FileSystemInfoBase {
    public IDirectoryInfo Parent { get; }
    public IDirectoryInfo Root { get; }
    protected DirectoryInfoBase(IFileSystem fileSystem);
    public abstract virtual void Create();
    public abstract virtual IDirectoryInfo CreateSubdirectory(string path);
    public abstract virtual void Delete(bool recursive);
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories();
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern);
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles();
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern);
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos();
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IDirectoryInfo[] GetDirectories();
    public abstract virtual IDirectoryInfo[] GetDirectories(string searchPattern);
    public abstract virtual IDirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption);
    public abstract virtual IDirectoryInfo[] GetDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IFileInfo[] GetFiles();
    public abstract virtual IFileInfo[] GetFiles(string searchPattern);
    public abstract virtual IFileInfo[] GetFiles(string searchPattern, SearchOption searchOption);
    public abstract virtual IFileInfo[] GetFiles(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos();
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern);
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption);
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual void MoveTo(string destDirName);
    public abstract virtual IDirectoryInfo get_Parent();
    public abstract virtual IDirectoryInfo get_Root();
    public static DirectoryInfoBase op_Implicit(DirectoryInfo directoryInfo);
}
internal class System.IO.Abstractions.DirectoryInfoFactory : object {
    private IFileSystem fileSystem;
    public IFileSystem FileSystem { get; }
    public DirectoryInfoFactory(IFileSystem fileSystem);
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IDirectoryInfo New(string path);
    public sealed virtual IDirectoryInfo Wrap(DirectoryInfo directoryInfo);
}
public class System.IO.Abstractions.DirectoryInfoWrapper : DirectoryInfoBase {
    private DirectoryInfo instance;
    public FileAttributes Attributes { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public bool Exists { get; }
    public string Extension { get; }
    public string FullName { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public string Name { get; }
    public IDirectoryInfo Parent { get; }
    public IDirectoryInfo Root { get; }
    public DirectoryInfoWrapper(IFileSystem fileSystem, DirectoryInfo instance);
    public virtual void Delete();
    public virtual void Refresh();
    public virtual FileAttributes get_Attributes();
    public virtual void set_Attributes(FileAttributes value);
    public virtual DateTime get_CreationTime();
    public virtual void set_CreationTime(DateTime value);
    public virtual DateTime get_CreationTimeUtc();
    public virtual void set_CreationTimeUtc(DateTime value);
    public virtual bool get_Exists();
    public virtual string get_Extension();
    public virtual string get_FullName();
    public virtual DateTime get_LastAccessTime();
    public virtual void set_LastAccessTime(DateTime value);
    public virtual DateTime get_LastAccessTimeUtc();
    public virtual void set_LastAccessTimeUtc(DateTime value);
    public virtual DateTime get_LastWriteTime();
    public virtual void set_LastWriteTime(DateTime value);
    public virtual DateTime get_LastWriteTimeUtc();
    public virtual void set_LastWriteTimeUtc(DateTime value);
    public virtual string get_Name();
    public virtual void Create();
    public virtual IDirectoryInfo CreateSubdirectory(string path);
    public virtual void Delete(bool recursive);
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories();
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern);
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles();
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern);
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos();
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IDirectoryInfo[] GetDirectories();
    public virtual IDirectoryInfo[] GetDirectories(string searchPattern);
    public virtual IDirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption);
    public virtual IDirectoryInfo[] GetDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IFileInfo[] GetFiles();
    public virtual IFileInfo[] GetFiles(string searchPattern);
    public virtual IFileInfo[] GetFiles(string searchPattern, SearchOption searchOption);
    public virtual IFileInfo[] GetFiles(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IFileSystemInfo[] GetFileSystemInfos();
    public virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern);
    public virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption);
    public virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public virtual void MoveTo(string destDirName);
    public virtual IDirectoryInfo get_Parent();
    public virtual IDirectoryInfo get_Root();
    public virtual string ToString();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl(AccessControlSections includeSections);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual void SetAccessControl(object value);
    [CompilerGeneratedAttribute]
private DirectoryInfoWrapper <EnumerateDirectories>b__36_0(DirectoryInfo directoryInfo);
    [CompilerGeneratedAttribute]
private DirectoryInfoWrapper <EnumerateDirectories>b__37_0(DirectoryInfo directoryInfo);
    [CompilerGeneratedAttribute]
private DirectoryInfoWrapper <EnumerateDirectories>b__38_0(DirectoryInfo directoryInfo);
    [CompilerGeneratedAttribute]
private DirectoryInfoWrapper <EnumerateDirectories>b__39_0(DirectoryInfo directoryInfo);
    [CompilerGeneratedAttribute]
private FileInfoWrapper <EnumerateFiles>b__40_0(FileInfo fileInfo);
    [CompilerGeneratedAttribute]
private FileInfoWrapper <EnumerateFiles>b__41_0(FileInfo fileInfo);
    [CompilerGeneratedAttribute]
private FileInfoWrapper <EnumerateFiles>b__42_0(FileInfo fileInfo);
    [CompilerGeneratedAttribute]
private FileInfoWrapper <EnumerateFiles>b__43_0(FileInfo fileInfo);
}
public class System.IO.Abstractions.DirectoryWrapper : DirectoryBase {
    public DirectoryWrapper(IFileSystem fileSystem);
    public virtual IDirectoryInfo CreateDirectory(string path);
    public virtual void Delete(string path);
    public virtual void Delete(string path, bool recursive);
    public virtual bool Exists(string path);
    public virtual DateTime GetCreationTime(string path);
    public virtual DateTime GetCreationTimeUtc(string path);
    public virtual string GetCurrentDirectory();
    public virtual String[] GetDirectories(string path);
    public virtual String[] GetDirectories(string path, string searchPattern);
    public virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOption);
    public virtual String[] GetDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual string GetDirectoryRoot(string path);
    public virtual String[] GetFiles(string path);
    public virtual String[] GetFiles(string path, string searchPattern);
    public virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public virtual String[] GetFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual String[] GetFileSystemEntries(string path);
    public virtual String[] GetFileSystemEntries(string path, string searchPattern);
    public virtual String[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public virtual String[] GetFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual DateTime GetLastAccessTime(string path);
    public virtual DateTime GetLastAccessTimeUtc(string path);
    public virtual DateTime GetLastWriteTime(string path);
    public virtual DateTime GetLastWriteTimeUtc(string path);
    public virtual String[] GetLogicalDrives();
    public virtual IDirectoryInfo GetParent(string path);
    public virtual void Move(string sourceDirName, string destDirName);
    public virtual void SetCreationTime(string path, DateTime creationTime);
    public virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public virtual void SetCurrentDirectory(string path);
    public virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<string> EnumerateFiles(string path);
    public virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
}
public abstract class System.IO.Abstractions.DriveInfoBase : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    public long AvailableFreeSpace { get; }
    public string DriveFormat { get; }
    public DriveType DriveType { get; }
    public bool IsReady { get; }
    public string Name { get; }
    public IDirectoryInfo RootDirectory { get; }
    public long TotalFreeSpace { get; }
    public long TotalSize { get; }
    public string VolumeLabel { get; public set; }
    protected DriveInfoBase(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public abstract virtual long get_AvailableFreeSpace();
    public abstract virtual string get_DriveFormat();
    public abstract virtual DriveType get_DriveType();
    public abstract virtual bool get_IsReady();
    public abstract virtual string get_Name();
    public abstract virtual IDirectoryInfo get_RootDirectory();
    public abstract virtual long get_TotalFreeSpace();
    public abstract virtual long get_TotalSize();
    public abstract virtual string get_VolumeLabel();
    public abstract virtual void set_VolumeLabel(string value);
    public static DriveInfoBase op_Implicit(DriveInfo driveInfo);
}
internal class System.IO.Abstractions.DriveInfoFactory : object {
    private IFileSystem fileSystem;
    public IFileSystem FileSystem { get; }
    public DriveInfoFactory(IFileSystem fileSystem);
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IDriveInfo[] GetDrives();
    public sealed virtual IDriveInfo New(string driveName);
    public sealed virtual IDriveInfo Wrap(DriveInfo driveInfo);
}
public class System.IO.Abstractions.DriveInfoWrapper : DriveInfoBase {
    private DriveInfo instance;
    public string Name { get; }
    public DriveType DriveType { get; }
    public string DriveFormat { get; }
    public bool IsReady { get; }
    public long AvailableFreeSpace { get; }
    public long TotalFreeSpace { get; }
    public long TotalSize { get; }
    public IDirectoryInfo RootDirectory { get; }
    public string VolumeLabel { get; public set; }
    public DriveInfoWrapper(IFileSystem fileSystem, DriveInfo instance);
    public virtual string get_Name();
    public virtual DriveType get_DriveType();
    public virtual string get_DriveFormat();
    public virtual bool get_IsReady();
    public virtual long get_AvailableFreeSpace();
    public virtual long get_TotalFreeSpace();
    public virtual long get_TotalSize();
    public virtual IDirectoryInfo get_RootDirectory();
    public virtual string get_VolumeLabel();
    [SupportedOSPlatformAttribute("windows")]
public virtual void set_VolumeLabel(string value);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class System.IO.Abstractions.FileAclExtensions : object {
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static FileSecurity GetAccessControl(IFile file, string path);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static FileSecurity GetAccessControl(IFile file, string path, AccessControlSections includeSections);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static void SetAccessControl(IFile file, string path, FileSecurity fileSecurity);
}
public abstract class System.IO.Abstractions.FileBase : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    protected FileBase(IFileSystem fileSystem);
    public abstract virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public abstract virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task AppendAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public abstract virtual Task AppendAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task`1<Byte[]> ReadAllBytesAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<String[]> ReadAllLinesAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<String[]> ReadAllLinesAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ReadAllTextAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ReadAllTextAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllBytesAsync(string path, Byte[] bytes, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public abstract virtual void AppendAllLines(string path, IEnumerable`1<string> contents);
    public abstract virtual void AppendAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public abstract virtual void AppendAllText(string path, string contents);
    public abstract virtual void AppendAllText(string path, string contents, Encoding encoding);
    public abstract virtual StreamWriter AppendText(string path);
    public abstract virtual void Copy(string sourceFileName, string destFileName);
    public abstract virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual FileSystemStream Create(string path);
    public abstract virtual FileSystemStream Create(string path, int bufferSize);
    public abstract virtual FileSystemStream Create(string path, int bufferSize, FileOptions options);
    public abstract virtual StreamWriter CreateText(string path);
    public abstract virtual void Decrypt(string path);
    public abstract virtual void Delete(string path);
    public abstract virtual void Encrypt(string path);
    public abstract virtual bool Exists(string path);
    public abstract virtual FileAttributes GetAttributes(string path);
    public abstract virtual DateTime GetCreationTime(string path);
    public abstract virtual DateTime GetCreationTimeUtc(string path);
    public abstract virtual DateTime GetLastAccessTime(string path);
    public abstract virtual DateTime GetLastAccessTimeUtc(string path);
    public abstract virtual DateTime GetLastWriteTime(string path);
    public abstract virtual DateTime GetLastWriteTimeUtc(string path);
    public abstract virtual void Move(string sourceFileName, string destFileName);
    public abstract virtual FileSystemStream Open(string path, FileMode mode);
    public abstract virtual FileSystemStream Open(string path, FileMode mode, FileAccess access);
    public abstract virtual FileSystemStream Open(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual FileSystemStream OpenRead(string path);
    public abstract virtual StreamReader OpenText(string path);
    public abstract virtual FileSystemStream OpenWrite(string path);
    public abstract virtual Byte[] ReadAllBytes(string path);
    public abstract virtual String[] ReadAllLines(string path);
    public abstract virtual String[] ReadAllLines(string path, Encoding encoding);
    public abstract virtual string ReadAllText(string path);
    public abstract virtual string ReadAllText(string path, Encoding encoding);
    public abstract virtual IEnumerable`1<string> ReadLines(string path);
    public abstract virtual IEnumerable`1<string> ReadLines(string path, Encoding encoding);
    public abstract virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);
    public abstract virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    public abstract virtual void SetAttributes(string path, FileAttributes fileAttributes);
    public abstract virtual void SetCreationTime(string path, DateTime creationTime);
    public abstract virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public abstract virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public abstract virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public abstract virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public abstract virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public abstract virtual void WriteAllBytes(string path, Byte[] bytes);
    public abstract virtual void WriteAllLines(string path, IEnumerable`1<string> contents);
    public abstract virtual void WriteAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public abstract virtual void WriteAllLines(string path, String[] contents);
    public abstract virtual void WriteAllLines(string path, String[] contents, Encoding encoding);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual void WriteAllText(string path, string contents, Encoding encoding);
}
[ExtensionAttribute]
public static class System.IO.Abstractions.FileInfoAclExtensions : object {
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static FileSecurity GetAccessControl(IFileInfo fileInfo);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static FileSecurity GetAccessControl(IFileInfo fileInfo, AccessControlSections includeSections);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static void SetAccessControl(IFileInfo fileInfo, FileSecurity fileSecurity);
}
public abstract class System.IO.Abstractions.FileInfoBase : FileSystemInfoBase {
    public IDirectoryInfo Directory { get; }
    public string DirectoryName { get; }
    public bool IsReadOnly { get; public set; }
    public long Length { get; }
    protected FileInfoBase(IFileSystem fileSystem);
    public abstract virtual StreamWriter AppendText();
    public abstract virtual IFileInfo CopyTo(string destFileName);
    public abstract virtual IFileInfo CopyTo(string destFileName, bool overwrite);
    public abstract virtual FileSystemStream Create();
    public abstract virtual StreamWriter CreateText();
    public abstract virtual void Decrypt();
    public abstract virtual void Encrypt();
    public abstract virtual void MoveTo(string destFileName);
    public abstract virtual FileSystemStream Open(FileMode mode);
    public abstract virtual FileSystemStream Open(FileMode mode, FileAccess access);
    public abstract virtual FileSystemStream Open(FileMode mode, FileAccess access, FileShare share);
    public abstract virtual FileSystemStream OpenRead();
    public abstract virtual StreamReader OpenText();
    public abstract virtual FileSystemStream OpenWrite();
    public abstract virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName);
    public abstract virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    public abstract virtual IDirectoryInfo get_Directory();
    public abstract virtual string get_DirectoryName();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void set_IsReadOnly(bool value);
    public abstract virtual long get_Length();
    public static FileInfoBase op_Implicit(FileInfo fileInfo);
}
internal class System.IO.Abstractions.FileInfoFactory : object {
    private IFileSystem fileSystem;
    public IFileSystem FileSystem { get; }
    public FileInfoFactory(IFileSystem fileSystem);
    public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IFileInfo New(string fileName);
    public sealed virtual IFileInfo Wrap(FileInfo fileInfo);
}
public class System.IO.Abstractions.FileInfoWrapper : FileInfoBase {
    private FileInfo instance;
    public FileAttributes Attributes { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public bool Exists { get; }
    public string Extension { get; }
    public string FullName { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public string Name { get; }
    public IDirectoryInfo Directory { get; }
    public string DirectoryName { get; }
    public bool IsReadOnly { get; public set; }
    public long Length { get; }
    public FileInfoWrapper(IFileSystem fileSystem, FileInfo instance);
    public virtual void Delete();
    public virtual void Refresh();
    public virtual FileAttributes get_Attributes();
    public virtual void set_Attributes(FileAttributes value);
    public virtual DateTime get_CreationTime();
    public virtual void set_CreationTime(DateTime value);
    public virtual DateTime get_CreationTimeUtc();
    public virtual void set_CreationTimeUtc(DateTime value);
    public virtual bool get_Exists();
    public virtual string get_Extension();
    public virtual string get_FullName();
    public virtual DateTime get_LastAccessTime();
    public virtual void set_LastAccessTime(DateTime value);
    public virtual DateTime get_LastAccessTimeUtc();
    public virtual void set_LastAccessTimeUtc(DateTime value);
    public virtual DateTime get_LastWriteTime();
    public virtual void set_LastWriteTime(DateTime value);
    public virtual DateTime get_LastWriteTimeUtc();
    public virtual void set_LastWriteTimeUtc(DateTime value);
    public virtual string get_Name();
    public virtual StreamWriter AppendText();
    public virtual IFileInfo CopyTo(string destFileName);
    public virtual IFileInfo CopyTo(string destFileName, bool overwrite);
    public virtual FileSystemStream Create();
    public virtual StreamWriter CreateText();
    [SupportedOSPlatformAttribute("windows")]
public virtual void Decrypt();
    [SupportedOSPlatformAttribute("windows")]
public virtual void Encrypt();
    public virtual void MoveTo(string destFileName);
    public virtual FileSystemStream Open(FileMode mode);
    public virtual FileSystemStream Open(FileMode mode, FileAccess access);
    public virtual FileSystemStream Open(FileMode mode, FileAccess access, FileShare share);
    public virtual FileSystemStream OpenRead();
    public virtual StreamReader OpenText();
    public virtual FileSystemStream OpenWrite();
    public virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName);
    public virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    public virtual IDirectoryInfo get_Directory();
    public virtual string get_DirectoryName();
    public virtual bool get_IsReadOnly();
    public virtual void set_IsReadOnly(bool value);
    public virtual long get_Length();
    public virtual string ToString();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl(AccessControlSections includeSections);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual void SetAccessControl(object value);
}
[ExtensionAttribute]
public static class System.IO.Abstractions.FileStreamAclExtensions : object {
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static FileSecurity GetAccessControl(FileSystemStream fileStream);
    [ExtensionAttribute]
[SupportedOSPlatformAttribute("windows")]
public static void SetAccessControl(FileSystemStream fileStream, FileSecurity fileSecurity);
}
internal class System.IO.Abstractions.FileStreamFactory : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    public FileStreamFactory(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual FileSystemStream New(SafeFileHandle handle, FileAccess access);
    public sealed virtual FileSystemStream New(SafeFileHandle handle, FileAccess access, int bufferSize);
    public sealed virtual FileSystemStream New(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync);
    public sealed virtual FileSystemStream New(string path, FileMode mode);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync);
    public sealed virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options);
    public sealed virtual FileSystemStream Wrap(FileStream fileStream);
}
internal class System.IO.Abstractions.FileStreamWrapper : FileSystemStream {
    private FileStream fileStream;
    public FileStreamWrapper(FileStream fileStream);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl();
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual object GetAccessControl(AccessControlSections includeSections);
    [SupportedOSPlatformAttribute("windows")]
public sealed virtual void SetAccessControl(object value);
    public virtual void Flush(bool flushToDisk);
}
public class System.IO.Abstractions.FileSystem : FileSystemBase {
    [CompilerGeneratedAttribute]
private IDirectory <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private IFile <File>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileInfoFactory <FileInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileStreamFactory <FileStream>k__BackingField;
    [CompilerGeneratedAttribute]
private IPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IDirectoryInfoFactory <DirectoryInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IDriveInfoFactory <DriveInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystemWatcherFactory <FileSystemWatcher>k__BackingField;
    public IDirectory Directory { get; }
    public IFile File { get; }
    public IFileInfoFactory FileInfo { get; }
    public IFileStreamFactory FileStream { get; }
    public IPath Path { get; }
    public IDirectoryInfoFactory DirectoryInfo { get; }
    public IDriveInfoFactory DriveInfo { get; }
    public IFileSystemWatcherFactory FileSystemWatcher { get; }
    [CompilerGeneratedAttribute]
public virtual IDirectory get_Directory();
    [CompilerGeneratedAttribute]
public virtual IFile get_File();
    [CompilerGeneratedAttribute]
public virtual IFileInfoFactory get_FileInfo();
    [CompilerGeneratedAttribute]
public virtual IFileStreamFactory get_FileStream();
    [CompilerGeneratedAttribute]
public virtual IPath get_Path();
    [CompilerGeneratedAttribute]
public virtual IDirectoryInfoFactory get_DirectoryInfo();
    [CompilerGeneratedAttribute]
public virtual IDriveInfoFactory get_DriveInfo();
    [CompilerGeneratedAttribute]
public virtual IFileSystemWatcherFactory get_FileSystemWatcher();
}
public abstract class System.IO.Abstractions.FileSystemBase : object {
    public IDirectory Directory { get; }
    public IFile File { get; }
    public IFileInfoFactory FileInfo { get; }
    public IFileStreamFactory FileStream { get; }
    public IPath Path { get; }
    public IDirectoryInfoFactory DirectoryInfo { get; }
    public IDriveInfoFactory DriveInfo { get; }
    public IFileSystemWatcherFactory FileSystemWatcher { get; }
    public abstract virtual IDirectory get_Directory();
    public abstract virtual IFile get_File();
    public abstract virtual IFileInfoFactory get_FileInfo();
    public abstract virtual IFileStreamFactory get_FileStream();
    public abstract virtual IPath get_Path();
    public abstract virtual IDirectoryInfoFactory get_DirectoryInfo();
    public abstract virtual IDriveInfoFactory get_DriveInfo();
    public abstract virtual IFileSystemWatcherFactory get_FileSystemWatcher();
}
public abstract class System.IO.Abstractions.FileSystemInfoBase : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    public FileAttributes Attributes { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public bool Exists { get; }
    public string Extension { get; }
    public string FullName { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    public string Name { get; }
    protected FileSystemInfoBase(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public abstract virtual void Delete();
    public abstract virtual void Refresh();
    public abstract virtual FileAttributes get_Attributes();
    public abstract virtual void set_Attributes(FileAttributes value);
    public abstract virtual DateTime get_CreationTime();
    public abstract virtual void set_CreationTime(DateTime value);
    public abstract virtual DateTime get_CreationTimeUtc();
    public abstract virtual void set_CreationTimeUtc(DateTime value);
    public abstract virtual bool get_Exists();
    public abstract virtual string get_Extension();
    public abstract virtual string get_FullName();
    public abstract virtual DateTime get_LastAccessTime();
    public abstract virtual void set_LastAccessTime(DateTime value);
    public abstract virtual DateTime get_LastAccessTimeUtc();
    public abstract virtual void set_LastAccessTimeUtc(DateTime value);
    public abstract virtual DateTime get_LastWriteTime();
    public abstract virtual void set_LastWriteTime(DateTime value);
    public abstract virtual DateTime get_LastWriteTimeUtc();
    public abstract virtual void set_LastWriteTimeUtc(DateTime value);
    public abstract virtual string get_Name();
}
public abstract class System.IO.Abstractions.FileSystemWatcherBase : object {
    [CompilerGeneratedAttribute]
private FileSystemEventHandler Changed;
    [CompilerGeneratedAttribute]
private FileSystemEventHandler Created;
    [CompilerGeneratedAttribute]
private FileSystemEventHandler Deleted;
    [CompilerGeneratedAttribute]
private ErrorEventHandler Error;
    [CompilerGeneratedAttribute]
private RenamedEventHandler Renamed;
    public IFileSystem FileSystem { get; }
    public bool IncludeSubdirectories { get; public set; }
    public IContainer Container { get; }
    public bool EnableRaisingEvents { get; public set; }
    public string Filter { get; public set; }
    public int InternalBufferSize { get; public set; }
    public NotifyFilters NotifyFilter { get; public set; }
    public string Path { get; public set; }
    public ISite Site { get; public set; }
    public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public abstract virtual IFileSystem get_FileSystem();
    public abstract virtual bool get_IncludeSubdirectories();
    public abstract virtual void set_IncludeSubdirectories(bool value);
    public abstract virtual IContainer get_Container();
    public abstract virtual bool get_EnableRaisingEvents();
    public abstract virtual void set_EnableRaisingEvents(bool value);
    public abstract virtual string get_Filter();
    public abstract virtual void set_Filter(string value);
    public abstract virtual int get_InternalBufferSize();
    public abstract virtual void set_InternalBufferSize(int value);
    public abstract virtual NotifyFilters get_NotifyFilter();
    public abstract virtual void set_NotifyFilter(NotifyFilters value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual ISite get_Site();
    public abstract virtual void set_Site(ISite value);
    public abstract virtual ISynchronizeInvoke get_SynchronizingObject();
    public abstract virtual void set_SynchronizingObject(ISynchronizeInvoke value);
    [CompilerGeneratedAttribute]
public virtual void add_Changed(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_Changed(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_Created(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_Created(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_Deleted(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_Deleted(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_Error(ErrorEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_Error(ErrorEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_Renamed(RenamedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_Renamed(RenamedEventHandler value);
    public abstract virtual void BeginInit();
    public sealed virtual void Dispose();
    public abstract virtual void EndInit();
    public abstract virtual IWaitForChangedResult WaitForChanged(WatcherChangeTypes changeType);
    public abstract virtual IWaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, int timeout);
    public static FileSystemWatcherBase op_Implicit(FileSystemWatcher watcher);
    public virtual void Dispose(bool disposing);
    protected void OnCreated(object sender, FileSystemEventArgs args);
    protected void OnChanged(object sender, FileSystemEventArgs args);
    protected void OnDeleted(object sender, FileSystemEventArgs args);
    protected void OnRenamed(object sender, RenamedEventArgs args);
    protected void OnError(object sender, ErrorEventArgs args);
}
public class System.IO.Abstractions.FileSystemWatcherFactory : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    public FileSystemWatcherFactory(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public sealed virtual IFileSystemWatcher New();
    public sealed virtual IFileSystemWatcher New(string path);
    public sealed virtual IFileSystemWatcher New(string path, string filter);
    public sealed virtual IFileSystemWatcher Wrap(FileSystemWatcher fileSystemWatcher);
}
public class System.IO.Abstractions.FileSystemWatcherWrapper : FileSystemWatcherBase {
    private FileSystemWatcher watcher;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    public bool IncludeSubdirectories { get; public set; }
    public IContainer Container { get; }
    public bool EnableRaisingEvents { get; public set; }
    public string Filter { get; public set; }
    public int InternalBufferSize { get; public set; }
    public NotifyFilters NotifyFilter { get; public set; }
    public string Path { get; public set; }
    public ISite Site { get; public set; }
    public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public FileSystemWatcherWrapper(IFileSystem fileSystem);
    public FileSystemWatcherWrapper(IFileSystem fileSystem, string path);
    public FileSystemWatcherWrapper(IFileSystem fileSystem, string path, string filter);
    public FileSystemWatcherWrapper(IFileSystem fileSystem, FileSystemWatcher watcher);
    [CompilerGeneratedAttribute]
public virtual IFileSystem get_FileSystem();
    public virtual bool get_IncludeSubdirectories();
    public virtual void set_IncludeSubdirectories(bool value);
    public virtual IContainer get_Container();
    public virtual bool get_EnableRaisingEvents();
    public virtual void set_EnableRaisingEvents(bool value);
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual int get_InternalBufferSize();
    public virtual void set_InternalBufferSize(int value);
    public virtual NotifyFilters get_NotifyFilter();
    public virtual void set_NotifyFilter(NotifyFilters value);
    public virtual string get_Path();
    public virtual void set_Path(string value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public virtual ISynchronizeInvoke get_SynchronizingObject();
    public virtual void set_SynchronizingObject(ISynchronizeInvoke value);
    public virtual void BeginInit();
    public virtual void Dispose(bool disposing);
    public virtual void EndInit();
    public virtual IWaitForChangedResult WaitForChanged(WatcherChangeTypes changeType);
    public virtual IWaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, int timeout);
}
public class System.IO.Abstractions.FileWrapper : FileBase {
    public FileWrapper(IFileSystem fileSystem);
    public virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task AppendAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public virtual Task AppendAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAllBytesAsync(string path, CancellationToken cancellationToken);
    public virtual Task`1<String[]> ReadAllLinesAsync(string path, CancellationToken cancellationToken);
    public virtual Task`1<String[]> ReadAllLinesAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAllTextAsync(string path, CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAllTextAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task WriteAllBytesAsync(string path, Byte[] bytes, CancellationToken cancellationToken);
    public virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual Task WriteAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public virtual Task WriteAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    public virtual void AppendAllLines(string path, IEnumerable`1<string> contents);
    public virtual void AppendAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public virtual void AppendAllText(string path, string contents);
    public virtual void AppendAllText(string path, string contents, Encoding encoding);
    public virtual StreamWriter AppendText(string path);
    public virtual void Copy(string sourceFileName, string destFileName);
    public virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public virtual FileSystemStream Create(string path);
    public virtual FileSystemStream Create(string path, int bufferSize);
    public virtual FileSystemStream Create(string path, int bufferSize, FileOptions options);
    public virtual StreamWriter CreateText(string path);
    [SupportedOSPlatformAttribute("windows")]
public virtual void Decrypt(string path);
    public virtual void Delete(string path);
    [SupportedOSPlatformAttribute("windows")]
public virtual void Encrypt(string path);
    public virtual bool Exists(string path);
    public virtual FileAttributes GetAttributes(string path);
    public virtual DateTime GetCreationTime(string path);
    public virtual DateTime GetCreationTimeUtc(string path);
    public virtual DateTime GetLastAccessTime(string path);
    public virtual DateTime GetLastAccessTimeUtc(string path);
    public virtual DateTime GetLastWriteTime(string path);
    public virtual DateTime GetLastWriteTimeUtc(string path);
    public virtual void Move(string sourceFileName, string destFileName);
    public virtual FileSystemStream Open(string path, FileMode mode);
    public virtual FileSystemStream Open(string path, FileMode mode, FileAccess access);
    public virtual FileSystemStream Open(string path, FileMode mode, FileAccess access, FileShare share);
    public virtual FileSystemStream OpenRead(string path);
    public virtual StreamReader OpenText(string path);
    public virtual FileSystemStream OpenWrite(string path);
    public virtual Byte[] ReadAllBytes(string path);
    public virtual String[] ReadAllLines(string path);
    public virtual String[] ReadAllLines(string path, Encoding encoding);
    public virtual string ReadAllText(string path);
    public virtual string ReadAllText(string path, Encoding encoding);
    public virtual IEnumerable`1<string> ReadLines(string path);
    public virtual IEnumerable`1<string> ReadLines(string path, Encoding encoding);
    public virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);
    public virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    public virtual void SetAttributes(string path, FileAttributes fileAttributes);
    public virtual void SetCreationTime(string path, DateTime creationTime);
    public virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public virtual void WriteAllBytes(string path, Byte[] bytes);
    public virtual void WriteAllLines(string path, IEnumerable`1<string> contents);
    public virtual void WriteAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public virtual void WriteAllLines(string path, String[] contents);
    public virtual void WriteAllLines(string path, String[] contents, Encoding encoding);
    public virtual void WriteAllText(string path, string contents);
    public virtual void WriteAllText(string path, string contents, Encoding encoding);
}
public abstract class System.IO.Abstractions.PathBase : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    public IFileSystem FileSystem { get; }
    public char AltDirectorySeparatorChar { get; }
    public char DirectorySeparatorChar { get; }
    [ObsoleteAttribute("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")]
public Char[] InvalidPathChars { get; }
    public char PathSeparator { get; }
    public char VolumeSeparatorChar { get; }
    protected PathBase(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
public sealed virtual IFileSystem get_FileSystem();
    public abstract virtual char get_AltDirectorySeparatorChar();
    public abstract virtual char get_DirectorySeparatorChar();
    public abstract virtual Char[] get_InvalidPathChars();
    public abstract virtual char get_PathSeparator();
    public abstract virtual char get_VolumeSeparatorChar();
    public abstract virtual string ChangeExtension(string path, string extension);
    public abstract virtual string Combine(String[] paths);
    public abstract virtual string Combine(string path1, string path2);
    public abstract virtual string Combine(string path1, string path2, string path3);
    public abstract virtual string Combine(string path1, string path2, string path3, string path4);
    public abstract virtual string GetDirectoryName(string path);
    public abstract virtual string GetExtension(string path);
    public abstract virtual string GetFileName(string path);
    public abstract virtual string GetFileNameWithoutExtension(string path);
    public abstract virtual string GetFullPath(string path);
    public abstract virtual string GetFullPath(string path, string basePath);
    public abstract virtual Char[] GetInvalidFileNameChars();
    public abstract virtual Char[] GetInvalidPathChars();
    public abstract virtual string GetPathRoot(string path);
    public abstract virtual string GetRandomFileName();
    public abstract virtual string GetTempFileName();
    public abstract virtual string GetTempPath();
    public abstract virtual bool HasExtension(string path);
    public abstract virtual bool IsPathRooted(string path);
    public abstract virtual bool IsPathFullyQualified(string path);
    public abstract virtual string GetRelativePath(string relativeTo, string path);
    public abstract virtual string Join(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2);
    public abstract virtual string Join(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, ReadOnlySpan`1<char> path3);
    public abstract virtual bool TryJoin(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, ReadOnlySpan`1<char> path3, Span`1<char> destination, Int32& charsWritten);
    public abstract virtual bool TryJoin(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, Span`1<char> destination, Int32& charsWritten);
    public abstract virtual bool HasExtension(ReadOnlySpan`1<char> path);
    public abstract virtual bool IsPathFullyQualified(ReadOnlySpan`1<char> path);
    public abstract virtual bool IsPathRooted(ReadOnlySpan`1<char> path);
    public abstract virtual ReadOnlySpan`1<char> GetDirectoryName(ReadOnlySpan`1<char> path);
    public abstract virtual ReadOnlySpan`1<char> GetExtension(ReadOnlySpan`1<char> path);
    public abstract virtual ReadOnlySpan`1<char> GetFileName(ReadOnlySpan`1<char> path);
    public abstract virtual ReadOnlySpan`1<char> GetFileNameWithoutExtension(ReadOnlySpan`1<char> path);
    public abstract virtual ReadOnlySpan`1<char> GetPathRoot(ReadOnlySpan`1<char> path);
}
public class System.IO.Abstractions.PathWrapper : PathBase {
    public char AltDirectorySeparatorChar { get; }
    public char DirectorySeparatorChar { get; }
    [ObsoleteAttribute("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")]
public Char[] InvalidPathChars { get; }
    public char PathSeparator { get; }
    public char VolumeSeparatorChar { get; }
    public PathWrapper(IFileSystem fileSystem);
    public virtual char get_AltDirectorySeparatorChar();
    public virtual char get_DirectorySeparatorChar();
    public virtual Char[] get_InvalidPathChars();
    public virtual char get_PathSeparator();
    public virtual char get_VolumeSeparatorChar();
    public virtual string ChangeExtension(string path, string extension);
    public virtual string Combine(String[] paths);
    public virtual string Combine(string path1, string path2);
    public virtual string Combine(string path1, string path2, string path3);
    public virtual string Combine(string path1, string path2, string path3, string path4);
    public virtual string GetDirectoryName(string path);
    public virtual string GetExtension(string path);
    public virtual string GetFileName(string path);
    public virtual string GetFileNameWithoutExtension(string path);
    public virtual string GetFullPath(string path);
    public virtual string GetFullPath(string path, string basePath);
    public virtual Char[] GetInvalidFileNameChars();
    public virtual Char[] GetInvalidPathChars();
    public virtual string GetPathRoot(string path);
    public virtual string GetRandomFileName();
    public virtual string GetTempFileName();
    public virtual string GetTempPath();
    public virtual bool HasExtension(string path);
    public virtual bool IsPathFullyQualified(string path);
    public virtual string GetRelativePath(string relativeTo, string path);
    public virtual string Join(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2);
    public virtual string Join(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, ReadOnlySpan`1<char> path3);
    public virtual bool TryJoin(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, Span`1<char> destination, Int32& charsWritten);
    public virtual bool TryJoin(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, ReadOnlySpan`1<char> path3, Span`1<char> destination, Int32& charsWritten);
    public virtual bool IsPathRooted(string path);
    public virtual bool HasExtension(ReadOnlySpan`1<char> path);
    public virtual bool IsPathFullyQualified(ReadOnlySpan`1<char> path);
    public virtual bool IsPathRooted(ReadOnlySpan`1<char> path);
    public virtual ReadOnlySpan`1<char> GetDirectoryName(ReadOnlySpan`1<char> path);
    public virtual ReadOnlySpan`1<char> GetExtension(ReadOnlySpan`1<char> path);
    public virtual ReadOnlySpan`1<char> GetFileName(ReadOnlySpan`1<char> path);
    public virtual ReadOnlySpan`1<char> GetFileNameWithoutExtension(ReadOnlySpan`1<char> path);
    public virtual ReadOnlySpan`1<char> GetPathRoot(ReadOnlySpan`1<char> path);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : Attribute {
    public SupportedOSPlatformAttribute(string _);
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
