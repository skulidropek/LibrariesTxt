[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Abstractions.FileSystemStream : Stream {
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private Stream _stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public bool IsAsync { get; }
    public long Length { get; }
    public string Name { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public int WriteTimeout { get; public set; }
    protected FileSystemStream(Stream stream, string path, bool isAsync);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    public virtual long get_Length();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void CopyTo(Stream destination, int bufferSize);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual void Flush(bool flushToDisk);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    [NullableContextAttribute("2")]
public virtual string ToString();
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    protected virtual void Dispose(bool disposing);
    public static FileStream op_Explicit(FileSystemStream fsStream);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IDirectory {
    public abstract virtual IDirectoryInfo CreateDirectory(string path);
    public abstract virtual IDirectoryInfo CreateDirectory(string path, UnixFileMode unixCreateMode);
    public abstract virtual IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget);
    public abstract virtual IDirectoryInfo CreateTempSubdirectory(string prefix);
    public abstract virtual void Delete(string path);
    public abstract virtual void Delete(string path, bool recursive);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<string> EnumerateDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<string> EnumerateFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<string> EnumerateFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
    [NullableContextAttribute("2")]
public abstract virtual bool Exists(string path);
    public abstract virtual DateTime GetCreationTime(string path);
    public abstract virtual DateTime GetCreationTimeUtc(string path);
    public abstract virtual string GetCurrentDirectory();
    public abstract virtual String[] GetDirectories(string path);
    public abstract virtual String[] GetDirectories(string path, string searchPattern);
    public abstract virtual String[] GetDirectories(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetDirectories(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual string GetDirectoryRoot(string path);
    public abstract virtual String[] GetFiles(string path);
    public abstract virtual String[] GetFiles(string path, string searchPattern);
    public abstract virtual String[] GetFiles(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetFiles(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual String[] GetFileSystemEntries(string path);
    public abstract virtual String[] GetFileSystemEntries(string path, string searchPattern);
    public abstract virtual String[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption);
    public abstract virtual String[] GetFileSystemEntries(string path, string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual DateTime GetLastAccessTime(string path);
    public abstract virtual DateTime GetLastAccessTimeUtc(string path);
    public abstract virtual DateTime GetLastWriteTime(string path);
    public abstract virtual DateTime GetLastWriteTimeUtc(string path);
    public abstract virtual String[] GetLogicalDrives();
    public abstract virtual IDirectoryInfo GetParent(string path);
    public abstract virtual void Move(string sourceDirName, string destDirName);
    public abstract virtual IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget);
    public abstract virtual void SetCreationTime(string path, DateTime creationTime);
    public abstract virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public abstract virtual void SetCurrentDirectory(string path);
    public abstract virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public abstract virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public abstract virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public abstract virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IDirectoryInfo {
    [NullableAttribute("2")]
public IDirectoryInfo Parent { get; }
    public IDirectoryInfo Root { get; }
    [NullableContextAttribute("2")]
public abstract virtual IDirectoryInfo get_Parent();
    public abstract virtual IDirectoryInfo get_Root();
    public abstract virtual void Create();
    public abstract virtual IDirectoryInfo CreateSubdirectory(string path);
    public abstract virtual void Delete(bool recursive);
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories();
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern);
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<IDirectoryInfo> EnumerateDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles();
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern);
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<IFileInfo> EnumerateFiles(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos();
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern);
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption);
    public abstract virtual IEnumerable`1<IFileSystemInfo> EnumerateFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IDirectoryInfo[] GetDirectories();
    public abstract virtual IDirectoryInfo[] GetDirectories(string searchPattern);
    public abstract virtual IDirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption);
    public abstract virtual IDirectoryInfo[] GetDirectories(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IFileInfo[] GetFiles();
    public abstract virtual IFileInfo[] GetFiles(string searchPattern);
    public abstract virtual IFileInfo[] GetFiles(string searchPattern, SearchOption searchOption);
    public abstract virtual IFileInfo[] GetFiles(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos();
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern);
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption);
    public abstract virtual IFileSystemInfo[] GetFileSystemInfos(string searchPattern, EnumerationOptions enumerationOptions);
    public abstract virtual void MoveTo(string destDirName);
}
public interface System.IO.Abstractions.IDirectoryInfoFactory {
    [NullableContextAttribute("1")]
public abstract virtual IDirectoryInfo New(string path);
    [NullableContextAttribute("2")]
public abstract virtual IDirectoryInfo Wrap(DirectoryInfo directoryInfo);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IDriveInfo {
    public long AvailableFreeSpace { get; }
    public string DriveFormat { get; }
    public DriveType DriveType { get; }
    public bool IsReady { get; }
    public string Name { get; }
    public IDirectoryInfo RootDirectory { get; }
    public long TotalFreeSpace { get; }
    public long TotalSize { get; }
    public string VolumeLabel { get; public set; }
    public abstract virtual long get_AvailableFreeSpace();
    public abstract virtual string get_DriveFormat();
    public abstract virtual DriveType get_DriveType();
    public abstract virtual bool get_IsReady();
    public abstract virtual string get_Name();
    public abstract virtual IDirectoryInfo get_RootDirectory();
    public abstract virtual long get_TotalFreeSpace();
    public abstract virtual long get_TotalSize();
    public abstract virtual string get_VolumeLabel();
    [SupportedOSPlatformAttribute("windows")]
public abstract virtual void set_VolumeLabel(string value);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IDriveInfoFactory {
    public abstract virtual IDriveInfo[] GetDrives();
    public abstract virtual IDriveInfo New(string driveName);
    [NullableContextAttribute("2")]
public abstract virtual IDriveInfo Wrap(DriveInfo driveInfo);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFile {
    public abstract virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public abstract virtual Task AppendAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task AppendAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public abstract virtual Task AppendAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task`1<Byte[]> ReadAllBytesAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<String[]> ReadAllLinesAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<String[]> ReadAllLinesAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ReadAllTextAsync(string path, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ReadAllTextAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<string> ReadLinesAsync(string path, CancellationToken cancellationToken);
    public abstract virtual IAsyncEnumerable`1<string> ReadLinesAsync(string path, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllBytesAsync(string path, Byte[] bytes, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllLinesAsync(string path, IEnumerable`1<string> contents, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllTextAsync(string path, string contents, CancellationToken cancellationToken);
    public abstract virtual Task WriteAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken);
    public abstract virtual void AppendAllLines(string path, IEnumerable`1<string> contents);
    public abstract virtual void AppendAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public abstract virtual void AppendAllText(string path, string contents);
    public abstract virtual void AppendAllText(string path, string contents, Encoding encoding);
    public abstract virtual StreamWriter AppendText(string path);
    public abstract virtual void Copy(string sourceFileName, string destFileName);
    public abstract virtual void Copy(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual FileSystemStream Create(string path);
    public abstract virtual FileSystemStream Create(string path, int bufferSize);
    public abstract virtual FileSystemStream Create(string path, int bufferSize, FileOptions options);
    public abstract virtual IFileSystemInfo CreateSymbolicLink(string path, string pathToTarget);
    public abstract virtual StreamWriter CreateText(string path);
    [SupportedOSPlatformAttribute("windows")]
public abstract virtual void Decrypt(string path);
    public abstract virtual void Delete(string path);
    [SupportedOSPlatformAttribute("windows")]
public abstract virtual void Encrypt(string path);
    [NullableContextAttribute("2")]
public abstract virtual bool Exists(string path);
    public abstract virtual FileAttributes GetAttributes(string path);
    public abstract virtual FileAttributes GetAttributes(SafeFileHandle fileHandle);
    public abstract virtual DateTime GetCreationTime(string path);
    public abstract virtual DateTime GetCreationTime(SafeFileHandle fileHandle);
    public abstract virtual DateTime GetCreationTimeUtc(string path);
    public abstract virtual DateTime GetCreationTimeUtc(SafeFileHandle fileHandle);
    public abstract virtual DateTime GetLastAccessTime(string path);
    public abstract virtual DateTime GetLastAccessTime(SafeFileHandle fileHandle);
    public abstract virtual DateTime GetLastAccessTimeUtc(string path);
    public abstract virtual DateTime GetLastAccessTimeUtc(SafeFileHandle fileHandle);
    public abstract virtual DateTime GetLastWriteTime(string path);
    public abstract virtual DateTime GetLastWriteTime(SafeFileHandle fileHandle);
    public abstract virtual DateTime GetLastWriteTimeUtc(string path);
    public abstract virtual DateTime GetLastWriteTimeUtc(SafeFileHandle fileHandle);
    [UnsupportedOSPlatformAttribute("windows")]
public abstract virtual UnixFileMode GetUnixFileMode(string path);
    [UnsupportedOSPlatformAttribute("windows")]
public abstract virtual UnixFileMode GetUnixFileMode(SafeFileHandle fileHandle);
    public abstract virtual void Move(string sourceFileName, string destFileName);
    public abstract virtual void Move(string sourceFileName, string destFileName, bool overwrite);
    public abstract virtual FileSystemStream Open(string path, FileMode mode);
    public abstract virtual FileSystemStream Open(string path, FileMode mode, FileAccess access);
    public abstract virtual FileSystemStream Open(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual FileSystemStream Open(string path, FileStreamOptions options);
    public abstract virtual FileSystemStream OpenRead(string path);
    public abstract virtual StreamReader OpenText(string path);
    public abstract virtual FileSystemStream OpenWrite(string path);
    public abstract virtual Byte[] ReadAllBytes(string path);
    public abstract virtual String[] ReadAllLines(string path);
    public abstract virtual String[] ReadAllLines(string path, Encoding encoding);
    public abstract virtual string ReadAllText(string path);
    public abstract virtual string ReadAllText(string path, Encoding encoding);
    public abstract virtual IEnumerable`1<string> ReadLines(string path);
    public abstract virtual IEnumerable`1<string> ReadLines(string path, Encoding encoding);
    public abstract virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);
    public abstract virtual void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
    public abstract virtual IFileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget);
    public abstract virtual void SetAttributes(string path, FileAttributes fileAttributes);
    public abstract virtual void SetAttributes(SafeFileHandle fileHandle, FileAttributes fileAttributes);
    public abstract virtual void SetCreationTime(string path, DateTime creationTime);
    public abstract virtual void SetCreationTime(SafeFileHandle fileHandle, DateTime creationTime);
    public abstract virtual void SetCreationTimeUtc(string path, DateTime creationTimeUtc);
    public abstract virtual void SetCreationTimeUtc(SafeFileHandle fileHandle, DateTime creationTimeUtc);
    public abstract virtual void SetLastAccessTime(string path, DateTime lastAccessTime);
    public abstract virtual void SetLastAccessTime(SafeFileHandle fileHandle, DateTime lastAccessTime);
    public abstract virtual void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc);
    public abstract virtual void SetLastAccessTimeUtc(SafeFileHandle fileHandle, DateTime lastAccessTimeUtc);
    public abstract virtual void SetLastWriteTime(string path, DateTime lastWriteTime);
    public abstract virtual void SetLastWriteTime(SafeFileHandle fileHandle, DateTime lastWriteTime);
    public abstract virtual void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc);
    public abstract virtual void SetLastWriteTimeUtc(SafeFileHandle fileHandle, DateTime lastWriteTimeUtc);
    [UnsupportedOSPlatformAttribute("windows")]
public abstract virtual void SetUnixFileMode(string path, UnixFileMode mode);
    [UnsupportedOSPlatformAttribute("windows")]
public abstract virtual void SetUnixFileMode(SafeFileHandle fileHandle, UnixFileMode mode);
    public abstract virtual void WriteAllBytes(string path, Byte[] bytes);
    public abstract virtual void WriteAllLines(string path, String[] contents);
    public abstract virtual void WriteAllLines(string path, IEnumerable`1<string> contents);
    public abstract virtual void WriteAllLines(string path, String[] contents, Encoding encoding);
    public abstract virtual void WriteAllLines(string path, IEnumerable`1<string> contents, Encoding encoding);
    public abstract virtual void WriteAllText(string path, string contents);
    public abstract virtual void WriteAllText(string path, string contents, Encoding encoding);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFileInfo {
    [NullableAttribute("2")]
public IDirectoryInfo Directory { get; }
    [NullableAttribute("2")]
public string DirectoryName { get; }
    public bool IsReadOnly { get; public set; }
    public long Length { get; }
    [NullableContextAttribute("2")]
public abstract virtual IDirectoryInfo get_Directory();
    [NullableContextAttribute("2")]
public abstract virtual string get_DirectoryName();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual void set_IsReadOnly(bool value);
    public abstract virtual long get_Length();
    public abstract virtual StreamWriter AppendText();
    public abstract virtual IFileInfo CopyTo(string destFileName);
    public abstract virtual IFileInfo CopyTo(string destFileName, bool overwrite);
    public abstract virtual FileSystemStream Create();
    public abstract virtual StreamWriter CreateText();
    [SupportedOSPlatformAttribute("windows")]
public abstract virtual void Decrypt();
    [SupportedOSPlatformAttribute("windows")]
public abstract virtual void Encrypt();
    public abstract virtual void MoveTo(string destFileName);
    public abstract virtual void MoveTo(string destFileName, bool overwrite);
    public abstract virtual FileSystemStream Open(FileMode mode);
    public abstract virtual FileSystemStream Open(FileMode mode, FileAccess access);
    public abstract virtual FileSystemStream Open(FileMode mode, FileAccess access, FileShare share);
    public abstract virtual FileSystemStream Open(FileStreamOptions options);
    public abstract virtual FileSystemStream OpenRead();
    public abstract virtual StreamReader OpenText();
    public abstract virtual FileSystemStream OpenWrite();
    public abstract virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName);
    public abstract virtual IFileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
}
public interface System.IO.Abstractions.IFileInfoFactory {
    [NullableContextAttribute("1")]
public abstract virtual IFileInfo New(string fileName);
    [NullableContextAttribute("2")]
public abstract virtual IFileInfo Wrap(FileInfo fileInfo);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFileStreamFactory {
    public abstract virtual FileSystemStream New(SafeFileHandle handle, FileAccess access);
    public abstract virtual FileSystemStream New(SafeFileHandle handle, FileAccess access, int bufferSize);
    public abstract virtual FileSystemStream New(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync);
    public abstract virtual FileSystemStream New(string path, FileMode mode);
    public abstract virtual FileSystemStream New(string path, FileMode mode, FileAccess access);
    public abstract virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share);
    public abstract virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize);
    public abstract virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync);
    public abstract virtual FileSystemStream New(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options);
    public abstract virtual FileSystemStream New(string path, FileStreamOptions options);
    public abstract virtual FileSystemStream Wrap(FileStream fileStream);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFileSystem {
    public IDirectory Directory { get; }
    public IDirectoryInfoFactory DirectoryInfo { get; }
    public IDriveInfoFactory DriveInfo { get; }
    public IFile File { get; }
    public IFileInfoFactory FileInfo { get; }
    public IFileStreamFactory FileStream { get; }
    public IFileSystemWatcherFactory FileSystemWatcher { get; }
    public IPath Path { get; }
    public abstract virtual IDirectory get_Directory();
    public abstract virtual IDirectoryInfoFactory get_DirectoryInfo();
    public abstract virtual IDriveInfoFactory get_DriveInfo();
    public abstract virtual IFile get_File();
    public abstract virtual IFileInfoFactory get_FileInfo();
    public abstract virtual IFileStreamFactory get_FileStream();
    public abstract virtual IFileSystemWatcherFactory get_FileSystemWatcher();
    public abstract virtual IPath get_Path();
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFileSystemAclSupport {
    public abstract virtual object GetAccessControl();
    public abstract virtual object GetAccessControl(AccessControlSections includeSections);
    public abstract virtual void SetAccessControl(object value);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFileSystemEntity {
    public IFileSystem FileSystem { get; }
    public abstract virtual IFileSystem get_FileSystem();
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFileSystemInfo {
    public IFileSystem FileSystem { get; }
    public FileAttributes Attributes { get; public set; }
    public DateTime CreationTime { get; public set; }
    public DateTime CreationTimeUtc { get; public set; }
    public bool Exists { get; }
    public string Extension { get; }
    public string FullName { get; }
    public DateTime LastAccessTime { get; public set; }
    public DateTime LastAccessTimeUtc { get; public set; }
    public DateTime LastWriteTime { get; public set; }
    public DateTime LastWriteTimeUtc { get; public set; }
    [NullableAttribute("2")]
public string LinkTarget { get; }
    public string Name { get; }
    public UnixFileMode UnixFileMode { get; public set; }
    public abstract virtual IFileSystem get_FileSystem();
    public abstract virtual FileAttributes get_Attributes();
    public abstract virtual void set_Attributes(FileAttributes value);
    public abstract virtual DateTime get_CreationTime();
    public abstract virtual void set_CreationTime(DateTime value);
    public abstract virtual DateTime get_CreationTimeUtc();
    public abstract virtual void set_CreationTimeUtc(DateTime value);
    public abstract virtual bool get_Exists();
    public abstract virtual string get_Extension();
    public abstract virtual string get_FullName();
    public abstract virtual DateTime get_LastAccessTime();
    public abstract virtual void set_LastAccessTime(DateTime value);
    public abstract virtual DateTime get_LastAccessTimeUtc();
    public abstract virtual void set_LastAccessTimeUtc(DateTime value);
    public abstract virtual DateTime get_LastWriteTime();
    public abstract virtual void set_LastWriteTime(DateTime value);
    public abstract virtual DateTime get_LastWriteTimeUtc();
    public abstract virtual void set_LastWriteTimeUtc(DateTime value);
    [NullableContextAttribute("2")]
public abstract virtual string get_LinkTarget();
    public abstract virtual string get_Name();
    public abstract virtual UnixFileMode get_UnixFileMode();
    [UnsupportedOSPlatformAttribute("windows")]
public abstract virtual void set_UnixFileMode(UnixFileMode value);
    public abstract virtual void CreateAsSymbolicLink(string pathToTarget);
    public abstract virtual void Delete();
    public abstract virtual void Refresh();
    [NullableContextAttribute("2")]
public abstract virtual IFileSystemInfo ResolveLinkTarget(bool returnFinalTarget);
}
[NullableContextAttribute("2")]
public interface System.IO.Abstractions.IFileSystemWatcher {
    public IContainer Container { get; }
    public bool EnableRaisingEvents { get; public set; }
    [NullableAttribute("1")]
public string Filter { get; public set; }
    [NullableAttribute("1")]
public Collection`1<string> Filters { get; }
    public bool IncludeSubdirectories { get; public set; }
    public int InternalBufferSize { get; public set; }
    public NotifyFilters NotifyFilter { get; public set; }
    [NullableAttribute("1")]
public string Path { get; public set; }
    public ISite Site { get; public set; }
    public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public abstract virtual IContainer get_Container();
    public abstract virtual bool get_EnableRaisingEvents();
    public abstract virtual void set_EnableRaisingEvents(bool value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Filter();
    [NullableContextAttribute("1")]
public abstract virtual void set_Filter(string value);
    [NullableContextAttribute("1")]
public abstract virtual Collection`1<string> get_Filters();
    public abstract virtual bool get_IncludeSubdirectories();
    public abstract virtual void set_IncludeSubdirectories(bool value);
    public abstract virtual int get_InternalBufferSize();
    public abstract virtual void set_InternalBufferSize(int value);
    public abstract virtual NotifyFilters get_NotifyFilter();
    public abstract virtual void set_NotifyFilter(NotifyFilters value);
    [NullableContextAttribute("1")]
public abstract virtual string get_Path();
    [NullableContextAttribute("1")]
public abstract virtual void set_Path(string value);
    public abstract virtual ISite get_Site();
    public abstract virtual void set_Site(ISite value);
    public abstract virtual ISynchronizeInvoke get_SynchronizingObject();
    public abstract virtual void set_SynchronizingObject(ISynchronizeInvoke value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Changed(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Changed(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Created(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Created(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Deleted(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Deleted(FileSystemEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(ErrorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(ErrorEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Renamed(RenamedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Renamed(RenamedEventHandler value);
    public abstract virtual void BeginInit();
    public abstract virtual void EndInit();
    [NullableContextAttribute("1")]
public abstract virtual IWaitForChangedResult WaitForChanged(WatcherChangeTypes changeType);
    [NullableContextAttribute("1")]
public abstract virtual IWaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, int timeout);
    [NullableContextAttribute("1")]
public abstract virtual IWaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, TimeSpan timeout);
}
[NullableContextAttribute("1")]
public interface System.IO.Abstractions.IFileSystemWatcherFactory {
    public abstract virtual IFileSystemWatcher New();
    public abstract virtual IFileSystemWatcher New(string path);
    public abstract virtual IFileSystemWatcher New(string path, string filter);
    [NullableContextAttribute("2")]
public abstract virtual IFileSystemWatcher Wrap(FileSystemWatcher fileSystemWatcher);
}
public interface System.IO.Abstractions.IPath {
    public char AltDirectorySeparatorChar { get; }
    public char DirectorySeparatorChar { get; }
    public char PathSeparator { get; }
    public char VolumeSeparatorChar { get; }
    public abstract virtual char get_AltDirectorySeparatorChar();
    public abstract virtual char get_DirectorySeparatorChar();
    public abstract virtual char get_PathSeparator();
    public abstract virtual char get_VolumeSeparatorChar();
    [NullableContextAttribute("2")]
public abstract virtual string ChangeExtension(string path, string extension);
    [NullableContextAttribute("1")]
public abstract virtual string Combine(string path1, string path2);
    [NullableContextAttribute("1")]
public abstract virtual string Combine(string path1, string path2, string path3);
    [NullableContextAttribute("1")]
public abstract virtual string Combine(string path1, string path2, string path3, string path4);
    [NullableContextAttribute("1")]
public abstract virtual string Combine(String[] paths);
    public abstract virtual bool EndsInDirectorySeparator(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("1")]
public abstract virtual bool EndsInDirectorySeparator(string path);
    [NullableContextAttribute("2")]
public abstract virtual bool Exists(string path);
    public abstract virtual ReadOnlySpan`1<char> GetDirectoryName(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("2")]
public abstract virtual string GetDirectoryName(string path);
    public abstract virtual ReadOnlySpan`1<char> GetExtension(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("2")]
public abstract virtual string GetExtension(string path);
    public abstract virtual ReadOnlySpan`1<char> GetFileName(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("2")]
public abstract virtual string GetFileName(string path);
    public abstract virtual ReadOnlySpan`1<char> GetFileNameWithoutExtension(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("2")]
public abstract virtual string GetFileNameWithoutExtension(string path);
    [NullableContextAttribute("1")]
public abstract virtual string GetFullPath(string path);
    [NullableContextAttribute("1")]
public abstract virtual string GetFullPath(string path, string basePath);
    [NullableContextAttribute("1")]
public abstract virtual Char[] GetInvalidFileNameChars();
    [NullableContextAttribute("1")]
public abstract virtual Char[] GetInvalidPathChars();
    public abstract virtual ReadOnlySpan`1<char> GetPathRoot(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("2")]
public abstract virtual string GetPathRoot(string path);
    [NullableContextAttribute("1")]
public abstract virtual string GetRandomFileName();
    [NullableContextAttribute("1")]
public abstract virtual string GetRelativePath(string relativeTo, string path);
    [NullableContextAttribute("1")]
public abstract virtual string GetTempFileName();
    [NullableContextAttribute("1")]
public abstract virtual string GetTempPath();
    public abstract virtual bool HasExtension(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("2")]
public abstract virtual bool HasExtension(string path);
    public abstract virtual bool IsPathFullyQualified(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("1")]
public abstract virtual bool IsPathFullyQualified(string path);
    public abstract virtual bool IsPathRooted(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("2")]
public abstract virtual bool IsPathRooted(string path);
    public abstract virtual string Join(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2);
    public abstract virtual string Join(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, ReadOnlySpan`1<char> path3);
    public abstract virtual bool TryJoin(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, Span`1<char> destination, Int32& charsWritten);
    public abstract virtual bool TryJoin(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, ReadOnlySpan`1<char> path3, Span`1<char> destination, Int32& charsWritten);
    [NullableContextAttribute("2")]
public abstract virtual string Join(string path1, string path2);
    [NullableContextAttribute("2")]
public abstract virtual string Join(string path1, string path2, string path3);
    [NullableContextAttribute("1")]
public abstract virtual string Join(String[] paths);
    public abstract virtual ReadOnlySpan`1<char> TrimEndingDirectorySeparator(ReadOnlySpan`1<char> path);
    [NullableContextAttribute("1")]
public abstract virtual string TrimEndingDirectorySeparator(string path);
    public abstract virtual string Join(ReadOnlySpan`1<char> path1, ReadOnlySpan`1<char> path2, ReadOnlySpan`1<char> path3, ReadOnlySpan`1<char> path4);
    [NullableContextAttribute("2")]
public abstract virtual string Join(string path1, string path2, string path3, string path4);
}
[NullableContextAttribute("2")]
public interface System.IO.Abstractions.IWaitForChangedResult {
    public WatcherChangeTypes ChangeType { get; }
    public string Name { get; }
    public string OldName { get; }
    public bool TimedOut { get; }
    public abstract virtual WatcherChangeTypes get_ChangeType();
    public abstract virtual string get_Name();
    public abstract virtual string get_OldName();
    public abstract virtual bool get_TimedOut();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string PublicKey;
    internal static string PublicKeyToken;
    internal static string RootNamespace;
    private static ThisAssembly();
}
