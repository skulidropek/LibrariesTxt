[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class BashRunner : object {
    public static string Run(string commandLine);
    [ExtensionAttribute]
private static bool DoubleWaitForExit(Process process);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class LinuxClipboard : object {
    private static bool isWsl;
    private static LinuxClipboard();
    public static Task SetTextAsync(string text, CancellationToken cancellation);
    public static void SetText(string text);
    public static Task`1<string> GetTextAsync(CancellationToken cancellation);
    public static string GetText();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class OsxClipboard : object {
    private static IntPtr nsString;
    private static IntPtr nsPasteboard;
    private static IntPtr nsStringPboardType;
    private static IntPtr utfTextType;
    private static IntPtr generalPasteboard;
    private static IntPtr initWithUtf8Register;
    private static IntPtr allocRegister;
    private static IntPtr setStringRegister;
    private static IntPtr stringForTypeRegister;
    private static IntPtr utf8Register;
    private static IntPtr generalPasteboardRegister;
    private static IntPtr clearContentsRegister;
    private static OsxClipboard();
    [NullableContextAttribute("2")]
public static string GetText();
    public static Task`1<string> GetTextAsync(CancellationToken cancellation);
    public static void SetText(string text);
    public static Task SetTextAsync(string text, CancellationToken cancellation);
    private static IntPtr objc_getClass(string className);
    private static IntPtr objc_msgSend(IntPtr receiver, IntPtr selector);
    private static IntPtr objc_msgSend(IntPtr receiver, IntPtr selector, string arg1);
    private static IntPtr objc_msgSend(IntPtr receiver, IntPtr selector, IntPtr arg1);
    private static IntPtr objc_msgSend(IntPtr receiver, IntPtr selector, IntPtr arg1, IntPtr arg2);
    private static IntPtr sel_registerName(string selectorName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
internal class TextCopy_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string Weavers;
}
public class TextCopy.Clipboard : object {
    public virtual Task`1<string> GetTextAsync(CancellationToken cancellation);
    [NullableContextAttribute("2")]
public virtual string GetText();
    [NullableContextAttribute("1")]
public virtual Task SetTextAsync(string text, CancellationToken cancellation);
    [NullableContextAttribute("1")]
public virtual void SetText(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class TextCopy.ClipboardService : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<CancellationToken, Task`1<string>> getAsyncFunc;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`1<string> getFunc;
    private static Func`3<string, CancellationToken, Task> setAsyncAction;
    private static Action`1<string> setAction;
    private static ClipboardService();
    public static Task`1<string> GetTextAsync(CancellationToken cancellation);
    [NullableContextAttribute("2")]
public static string GetText();
    public static Task SetTextAsync(string text, CancellationToken cancellation);
    public static void SetText(string text);
    private static Func`2<CancellationToken, Task`1<string>> CreateAsyncGet();
    private static Func`1<string> CreateGet();
    private static Func`3<string, CancellationToken, Task> CreateAsyncSet();
    private static Action`1<string> CreateSet();
}
[NullableContextAttribute("1")]
public interface TextCopy.IClipboard {
    public abstract virtual Task`1<string> GetTextAsync(CancellationToken cancellation);
    [NullableContextAttribute("2")]
public abstract virtual string GetText();
    public abstract virtual Task SetTextAsync(string text, CancellationToken cancellation);
    public abstract virtual void SetText(string text);
}
public class TextCopy.MockClipboard : object {
    public virtual Task`1<string> GetTextAsync(CancellationToken cancellation);
    [NullableContextAttribute("2")]
public virtual string GetText();
    [NullableContextAttribute("1")]
public virtual Task SetTextAsync(string text, CancellationToken cancellation);
    [NullableContextAttribute("1")]
public sealed virtual void SetText(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class TextCopy.ServiceExtensions : object {
    [ExtensionAttribute]
public static void InjectMockClipboard(IServiceCollection services);
    [ExtensionAttribute]
public static void InjectClipboard(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class WindowsClipboard : object {
    private static UInt32 cfUnicodeText;
    [AsyncStateMachineAttribute("WindowsClipboard/<SetTextAsync>d__0")]
public static Task SetTextAsync(string text, CancellationToken cancellation);
    public static void SetText(string text);
    private static void InnerSet(string text);
    [AsyncStateMachineAttribute("WindowsClipboard/<TryOpenClipboardAsync>d__3")]
private static Task TryOpenClipboardAsync(CancellationToken cancellation);
    private static void TryOpenClipboard();
    [AsyncStateMachineAttribute("WindowsClipboard/<GetTextAsync>d__5")]
public static Task`1<string> GetTextAsync(CancellationToken cancellation);
    [NullableContextAttribute("2")]
public static string GetText();
    [NullableContextAttribute("2")]
private static string InnerGet();
    private static void ThrowWin32();
    private static bool IsClipboardFormatAvailable(UInt32 format);
    private static IntPtr GetClipboardData(UInt32 uFormat);
    private static IntPtr GlobalLock(IntPtr hMem);
    private static bool GlobalUnlock(IntPtr hMem);
    private static bool OpenClipboard(IntPtr hWndNewOwner);
    private static bool CloseClipboard();
    private static IntPtr SetClipboardData(UInt32 uFormat, IntPtr data);
    private static bool EmptyClipboard();
    private static int GlobalSize(IntPtr hMem);
}
