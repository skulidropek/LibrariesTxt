public static class Thinktecture.IdentityModel.AuthenticationInstantClaim : object {
    public static Claim Now { get; }
    public static Claim get_Now();
}
public static class Thinktecture.IdentityModel.Base64Url : object {
    public static string Encode(Byte[] arg);
    public static Byte[] Decode(string arg);
}
public class Thinktecture.IdentityModel.ClaimComparer : object {
    public sealed virtual bool Equals(Claim x, Claim y);
    public sealed virtual int GetHashCode(Claim claim);
}
public static class Thinktecture.IdentityModel.ClaimsAuthorization : object {
    public static string ActionType;
    public static string ResourceType;
    private static Lazy`1<ClaimsAuthorizationManager> _claimsAuthorizationManager;
    [CompilerGeneratedAttribute]
private static bool <EnforceAuthorizationManagerImplementation>k__BackingField;
    [CompilerGeneratedAttribute]
private static ClaimsAuthorizationManager <CustomAuthorizationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`1<ClaimsAuthorizationManager> CS$<>9__CachedAnonymousMethodDelegate1;
    public static bool EnforceAuthorizationManagerImplementation { get; public set; }
    public static ClaimsAuthorizationManager CustomAuthorizationManager { get; public set; }
    public static ClaimsAuthorizationManager AuthorizationManager { get; }
    private static ClaimsAuthorization();
    [CompilerGeneratedAttribute]
public static bool get_EnforceAuthorizationManagerImplementation();
    [CompilerGeneratedAttribute]
public static void set_EnforceAuthorizationManagerImplementation(bool value);
    [CompilerGeneratedAttribute]
public static ClaimsAuthorizationManager get_CustomAuthorizationManager();
    [CompilerGeneratedAttribute]
public static void set_CustomAuthorizationManager(ClaimsAuthorizationManager value);
    public static ClaimsAuthorizationManager get_AuthorizationManager();
    public static bool CheckAccess(string action, String[] resources);
    public static bool CheckAccess(ClaimsPrincipal principal, string action, String[] resources);
    public static bool CheckAccess(IPrincipal principal, string action, String[] resources);
    public static bool CheckAccess(Collection`1<Claim> actions, Collection`1<Claim> resources);
    public static bool CheckAccess(string action, Claim[] resources);
    public static bool CheckAccess(string action, string resource, Claim[] resources);
    public static bool CheckAccess(AuthorizationContext context);
    public static AuthorizationContext CreateAuthorizationContext(ClaimsPrincipal principal, string action, String[] resources);
    [CompilerGeneratedAttribute]
private static ClaimsAuthorizationManager <.cctor>b__0();
}
public static class Thinktecture.IdentityModel.Constants.Algorithms : object {
    public static string HmacSha256Signature;
    public static string HmacSha384Signature;
    public static string HmacSha512Signature;
    public static string Sha256Digest;
    public static string Sha384Digest;
    public static string Sha512Digest;
}
public static class Thinktecture.IdentityModel.Constants.DateTimeFormats : object {
    public static String[] Accepted;
    public static string Generated;
    private static DateTimeFormats();
}
public static class Thinktecture.IdentityModel.Constants.JwtConstants : object {
    public static string JWT;
    public static string Bearer;
}
public static class Thinktecture.IdentityModel.Constants.OAuth2Constants : object {
    public static string GrantType;
    public static string UserName;
    public static string Scope;
    public static string Assertion;
    public static string Password;
    public static string Code;
    public static string RedirectUri;
    public static string Bearer;
}
public static class Thinktecture.IdentityModel.Constants.SamlNameIdentifierFormats : object {
    public static string EmailAddressString;
    public static string EncryptedString;
    public static string EntityString;
    public static string KerberosString;
    public static string PersistentString;
    public static string TransientString;
    public static string UnspecifiedString;
    public static string WindowsDomainQualifiedNameString;
    public static string X509SubjectNameString;
}
public static class Thinktecture.IdentityModel.Constants.TokenTypes : object {
    public static string Kerberos;
    public static string OasisWssSaml11TokenProfile11;
    public static string OasisWssSaml2TokenProfile11;
    public static string Rsa;
    public static string Saml11TokenProfile11;
    public static string Saml2TokenProfile11;
    public static string UserName;
    public static string X509Certificate;
    public static string SimpleWebToken;
    public static string JsonWebToken;
}
public static class Thinktecture.IdentityModel.Constants.WSSecurity10Constants : object {
    public static string Base64EncodingType;
    public static string FragmentBaseAddress;
    public static string HexBinaryEncodingType;
    public static string KerberosTokenType1510;
    public static string KerberosTokenTypeGSS;
    public static string Namespace;
    public static string Prefix;
    public static string TextEncodingType;
    public static string UPTokenPasswordTextValue;
    public static string X509TokenType;
}
public static class Thinktecture.IdentityModel.Constants.WSTrust13Constants : object {
    public static string NamespaceURI;
    public static string Prefix;
    public static string Schema;
    public static string SchemaLocation;
}
public class Thinktecture.IdentityModel.CryptoRandom : Random {
    private RNGCryptoServiceProvider _rng;
    private Byte[] _uint32Buffer;
    public CryptoRandom(int ignoredSeed);
    public static Byte[] CreateRandomKey(int length);
    public static string CreateRandomKeyString(int length);
    public static string CreateUniqueId(int length);
    private static string ByteArrayToString(Byte[] ba);
    public virtual int Next();
    public virtual int Next(int maxValue);
    public virtual int Next(int minValue, int maxValue);
    public virtual double NextDouble();
    public virtual void NextBytes(Byte[] buffer);
}
[ExtensionAttribute]
public static class Thinktecture.IdentityModel.Extensions.ClaimsExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<Claim, string> CS$<>9__CachedAnonymousMethodDelegatee;
    [ExtensionAttribute]
public static bool HasClaim(ClaimsPrincipal user, string type);
    [ExtensionAttribute]
public static bool HasClaim(ClaimsIdentity user, string type);
    [ExtensionAttribute]
public static string GetValue(IEnumerable`1<Claim> claims, string type);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetValues(IEnumerable`1<Claim> claims, string claimType);
    [CompilerGeneratedAttribute]
private static string <GetValues>b__d(Claim claim);
}
[ExtensionAttribute]
public static class Thinktecture.IdentityModel.Extensions.ConsoleExtensions : object {
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static void ConsoleGreen(string text);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static void ConsoleRed(string text);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static void ConsoleYellow(string text);
    [DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static void ColoredWriteLine(string text, ConsoleColor color);
}
[ExtensionAttribute]
public static class Thinktecture.IdentityModel.Extensions.DateTimeExtensions : object {
    [ExtensionAttribute]
public static long ToEpochTime(DateTime dateTime);
    [ExtensionAttribute]
public static long ToEpochTime(DateTimeOffset dateTime);
    [ExtensionAttribute]
public static DateTime ToDateTimeFromEpoch(long intDate);
    [ExtensionAttribute]
public static DateTimeOffset ToDateTimeOffsetFromEpoch(long intDate);
}
[ExtensionAttribute]
public static class Thinktecture.IdentityModel.Extensions.RSAExtensions : object {
    [ExtensionAttribute]
public static Byte[] GetKeyHash(RSA rsa);
    [ExtensionAttribute]
public static string GetKeyHashString(RSA rsa);
    [ExtensionAttribute]
public static string GetKeyHashString(RSA rsa, string entropy);
    [ExtensionAttribute]
public static Byte[] GetKeyHash(RSA rsa, string entropy);
}
[ExtensionAttribute]
public static class Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions : object {
    [CompilerGeneratedAttribute]
private static Func`2<ClaimsIdentity, ClaimsIdentity> CS$<>9__CachedAnonymousMethodDelegate1;
    [ExtensionAttribute]
public static SecurityToken ToSecurityToken(GenericXmlSecurityToken token);
    [ExtensionAttribute]
public static SecurityToken ToSecurityToken(GenericXmlSecurityToken token, X509Certificate2 decryptionCertificate);
    [ExtensionAttribute]
public static SecurityToken ToSecurityToken(GenericXmlSecurityToken token, SecurityTokenHandlerCollection handler);
    [ExtensionAttribute]
public static string ToTokenXmlString(GenericXmlSecurityToken token);
    [ExtensionAttribute]
public static string ToTokenXmlString(SecurityToken token);
    [ExtensionAttribute]
public static string ToTokenXmlString(SecurityToken token, SecurityTokenHandlerCollection handler);
    [ExtensionAttribute]
public static ClaimsPrincipal ToClaimsPrincipal(SecurityToken token, X509Certificate2 signingCertificate);
    [ExtensionAttribute]
public static ClaimsPrincipal ToClaimsPrincipal(SecurityToken token, X509Certificate2 signingCertificate, string audienceUri);
    [ExtensionAttribute]
public static ClaimsPrincipal ToClaimsPrincipal(SecurityToken token, SecurityTokenHandlerCollection handler);
    private static SecurityTokenHandlerConfiguration CreateStandardConfiguration(X509Certificate2 signingCertificate);
    [ExtensionAttribute]
private static IssuerNameRegistry CreateIssuerNameRegistry(X509Certificate2 certificate);
    [ExtensionAttribute]
private static SecurityTokenResolver CreateSecurityTokenResolver(X509Certificate2 certificate);
    [ExtensionAttribute]
private static SecurityTokenHandlerCollection CreateDefaultHandlerCollection(SecurityTokenHandlerConfiguration configuration);
    [CompilerGeneratedAttribute]
private static ClaimsIdentity <ToClaimsPrincipal>b__0(ClaimsIdentity identity);
}
internal class Thinktecture.IdentityModel.Extensions.XmlConverter : object {
    private StringBuilder _xmlTextBuilder;
    private XmlWriter _writer;
    public XmlConverter(XNode e);
    public XmlConverter(XmlNode e);
    public XElement CreateXElement();
    public XDocument CreateXDocument();
    public XmlElement CreateXmlElement();
    public XmlDocument CreateXmlDocument();
}
[ExtensionAttribute]
public static class Thinktecture.IdentityModel.Extensions.XmlExtensions : object {
    [ExtensionAttribute]
public static XmlDocument ToXmlDocument(XDocument document);
    [ExtensionAttribute]
public static XmlElement ToXmlElement(XElement element);
    [ExtensionAttribute]
public static XDocument ToXDocument(XmlDocument document);
    [ExtensionAttribute]
public static XElement ToXElement(XmlElement element);
    [ExtensionAttribute]
public static string AsString(XmlReader reader);
    [ExtensionAttribute]
public static XmlReader AsXmlReader(string input);
    [ExtensionAttribute]
public static XmlReader AsXmlReader(string input, bool isInteractive);
}
public class Thinktecture.IdentityModel.Http.BasicAuthenticationHeaderValue : AuthenticationHeaderValue {
    public BasicAuthenticationHeaderValue(string userName, string password);
    private static string EncodeCredential(string userName, string password);
}
public class Thinktecture.IdentityModel.Http.CertPinningWebRequestHandler : WebRequestHandler {
    private ThumbprintSet _thumbprints;
    [CompilerGeneratedAttribute]
private static Func`2<X509ChainElement, X509Certificate2> CS$<>9__CachedAnonymousMethodDelegate2;
    public CertPinningWebRequestHandler(ThumbprintSet thumbprints);
    private bool CertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    [CompilerGeneratedAttribute]
private static X509Certificate2 <CertificateValidationCallback>b__0(X509ChainElement elem);
    [CompilerGeneratedAttribute]
private bool <CertificateValidationCallback>b__1(X509Certificate2 cert);
}
[ExtensionAttribute]
public static class Thinktecture.IdentityModel.Http.HttpClientExtensions : object {
    [ExtensionAttribute]
public static void SetBasicAuthentication(HttpClient client, string userName, string password);
    [ExtensionAttribute]
public static void SetToken(HttpClient client, string scheme, string token);
    [ExtensionAttribute]
public static void SetBearerToken(HttpClient client, string token);
}
public class Thinktecture.IdentityModel.Http.ThumbprintSet : HashSet`1<string> {
    [CompilerGeneratedAttribute]
private static Func`2<string, string> CS$<>9__CachedAnonymousMethodDelegate1;
    public ThumbprintSet(String[] thumbprints);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(string t);
}
public static class Thinktecture.IdentityModel.Identity : object {
    public static ClaimsIdentity Anonymous { get; }
    public static ClaimsIdentity get_Anonymous();
    public static ClaimsIdentity Create(string authenticationType, Claim[] claims);
    public static ClaimsIdentity CreateFromCertificate(X509Certificate2 certificate, string authenticationType, bool includeAllClaims);
}
public static class Thinktecture.IdentityModel.KeyGenerator : object {
    private static int _maxKeyIterations;
    private static RandomNumberGenerator _random;
    private static KeyGenerator();
    public static Byte[] ComputeCombinedKey(Byte[] requestorEntropy, Byte[] issuerEntropy, int keySizeInBits);
    private static int ValidateKeySizeInBytes(int keySizeInBits);
}
public class Thinktecture.IdentityModel.Metadata.FederationMetadata : object {
    [CompilerGeneratedAttribute]
private static Func`2<RoleDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public static IEnumerable`1<X509Certificate> GetSigningCertificates(Uri url, X509CertificateValidationMode mode);
    private static Stream GetMetadataStream(Uri url);
    [CompilerGeneratedAttribute]
private static bool <GetSigningCertificates>b__0(RoleDescriptor x);
}
public class Thinktecture.IdentityModel.Metadata.FileBasedMetadataCache : object {
    private string filename;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, bool> CS$<>9__CachedAnonymousMethodDelegate1;
    public TimeSpan Age { get; }
    public FileBasedMetadataCache(string filename);
    public sealed virtual Byte[] Load();
    public sealed virtual void Save(Byte[] data);
    public sealed virtual TimeSpan get_Age();
    public sealed virtual void LoadCustomConfiguration(XmlNodeList nodeList);
    [CompilerGeneratedAttribute]
private static bool <LoadCustomConfiguration>b__0(XmlNode x);
}
public interface Thinktecture.IdentityModel.Metadata.IMetadataCache {
    public TimeSpan Age { get; }
    public abstract virtual TimeSpan get_Age();
    public abstract virtual Byte[] Load();
    public abstract virtual void Save(Byte[] data);
}
public class Thinktecture.IdentityModel.Metadata.MetadataBasedIssuerNameRegistry : IssuerNameRegistry {
    private Uri metadataAddress;
    private string issuerName;
    private X509CertificateValidationMode mode;
    private static ConfigurationBasedIssuerNameRegistry modreq(System.Runtime.CompilerServices.IsVolatile) _registry;
    private static object _registryLock;
    [CompilerGeneratedAttribute]
private static Func`2<RoleDescriptor, bool> CS$<>9__CachedAnonymousMethodDelegate8;
    [CompilerGeneratedAttribute]
private static Func`2<XmlNode, bool> CS$<>9__CachedAnonymousMethodDelegatea;
    public MetadataBasedIssuerNameRegistry(Uri metadataAddress, string issuerName, X509CertificateValidationMode mode, bool lazyLoad);
    private static MetadataBasedIssuerNameRegistry();
    public virtual string GetIssuerName(SecurityToken securityToken);
    protected virtual Stream GetMetadataStream();
    [AsyncStateMachineAttribute("Thinktecture.IdentityModel.Metadata.MetadataBasedIssuerNameRegistry/<GetMetadataStreamAsync>d__3")]
[DebuggerStepThroughAttribute]
protected virtual Task`1<Stream> GetMetadataStreamAsync();
    protected virtual void LoadMetadata();
    public virtual void LoadCustomConfiguration(XmlNodeList nodeList);
    [CompilerGeneratedAttribute]
private static bool <LoadMetadata>b__7(RoleDescriptor x);
    [CompilerGeneratedAttribute]
private static bool <LoadCustomConfiguration>b__9(XmlNode x);
}
public static class Thinktecture.IdentityModel.ObfuscatingComparer : object {
    public static bool IsEqual(string s1, string s2);
}
public static class Thinktecture.IdentityModel.Principal : object {
    [CompilerGeneratedAttribute]
private static Func`2<string, Claim> CS$<>9__CachedAnonymousMethodDelegate1;
    public static ClaimsPrincipal Anonymous { get; }
    public static ClaimsPrincipal get_Anonymous();
    public static ClaimsPrincipal Create(string authenticationType, Claim[] claims);
    public static IEnumerable`1<Claim> CreateRoles(String[] roleNames);
    public static ClaimsPrincipal CreateFromCertificate(X509Certificate2 certificate, string authenticationType, bool includeAllClaims);
    [CompilerGeneratedAttribute]
private static Claim <CreateRoles>b__0(string r);
}
public static class Thinktecture.IdentityModel.Tokens.ClaimMappings : object {
    public static Dictionary`2<string, string> None { get; }
    public static Dictionary`2<string, string> get_None();
}
public class Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler : UserNameSecurityTokenHandler {
    [CompilerGeneratedAttribute]
private ValidateUserNameCredentialDelegate <ValidateUserNameCredential>k__BackingField;
    public ValidateUserNameCredentialDelegate ValidateUserNameCredential { get; public set; }
    public bool CanValidateToken { get; }
    public GenericUserNameSecurityTokenHandler(ValidateUserNameCredentialDelegate validateUserNameCredential);
    [CompilerGeneratedAttribute]
public ValidateUserNameCredentialDelegate get_ValidateUserNameCredential();
    [CompilerGeneratedAttribute]
public void set_ValidateUserNameCredential(ValidateUserNameCredentialDelegate value);
    protected virtual bool ValidateUserNameCredentialCore(string userName, string password);
    public virtual ReadOnlyCollection`1<ClaimsIdentity> ValidateToken(SecurityToken token);
    public virtual bool get_CanValidateToken();
}
public static class Thinktecture.IdentityModel.Tokens.HeaderEncoding : object {
    public static bool IsBase64Encoded(string token);
    public static string EncodeBase64(string token);
    public static string DecodeBase64(string token);
}
public class Thinktecture.IdentityModel.Tokens.HmacSigningCredentials : SigningCredentials {
    public HmacSigningCredentials(string base64EncodedKey);
    public HmacSigningCredentials(Byte[] key);
    protected static string CreateSignatureAlgorithm(Byte[] key);
    protected static string CreateDigestAlgorithm(Byte[] key);
}
public class Thinktecture.IdentityModel.Tokens.HttpSaml2SecurityTokenHandler : Saml2SecurityTokenHandler {
    public HttpSaml2SecurityTokenHandler(SamlSecurityTokenRequirement requirement);
    public virtual SecurityToken ReadToken(string tokenString);
}
public class Thinktecture.IdentityModel.Tokens.HttpSamlSecurityTokenHandler : SamlSecurityTokenHandler {
    public HttpSamlSecurityTokenHandler(SamlSecurityTokenRequirement requirement);
    public virtual SecurityToken ReadToken(string tokenString);
}
public class Thinktecture.IdentityModel.Tokens.SimpleSecurityToken : WrappedSecurityToken`1<string> {
    public SimpleSecurityToken(string token);
}
public class Thinktecture.IdentityModel.Tokens.SimpleSecurityTokenHandler : SecurityTokenHandler {
    private String[] _identifier;
    [CompilerGeneratedAttribute]
private ValidateTokenDelegate <Validator>k__BackingField;
    public ValidateTokenDelegate Validator { get; public set; }
    public Type TokenType { get; }
    public SimpleSecurityTokenHandler(string identifier);
    public SimpleSecurityTokenHandler(ValidateTokenDelegate validator);
    public SimpleSecurityTokenHandler(string identifier, ValidateTokenDelegate validator);
    [CompilerGeneratedAttribute]
public ValidateTokenDelegate get_Validator();
    [CompilerGeneratedAttribute]
public void set_Validator(ValidateTokenDelegate value);
    public virtual SecurityToken ReadToken(string tokenString);
    public virtual ReadOnlyCollection`1<ClaimsIdentity> ValidateToken(SecurityToken token);
    public virtual string WriteToken(SecurityToken token);
    public virtual String[] GetTokenTypeIdentifiers();
    public virtual Type get_TokenType();
}
public class Thinktecture.IdentityModel.Tokens.TestIssuerNameRegistry : IssuerNameRegistry {
    public virtual string GetIssuerName(SecurityToken securityToken);
}
public class Thinktecture.IdentityModel.Tokens.WrappedSecurityToken`1 : SecurityToken {
    private T _token;
    public T Token { get; }
    public string Id { get; }
    public ReadOnlyCollection`1<SecurityKey> SecurityKeys { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public WrappedSecurityToken`1(T token);
    public T get_Token();
    public virtual string get_Id();
    public virtual ReadOnlyCollection`1<SecurityKey> get_SecurityKeys();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
}
internal static class Thinktecture.IdentityModel.Tracing : object {
    private static TraceSource _ts;
    private static Tracing();
    [DebuggerStepThroughAttribute]
public static void Start(string message);
    [DebuggerStepThroughAttribute]
public static void Stop(string message);
    [DebuggerStepThroughAttribute]
public static void Information(string message);
    [DebuggerStepThroughAttribute]
public static void InformationFormat(string message, Object[] objects);
    [DebuggerStepThroughAttribute]
public static void Warning(string message);
    [DebuggerStepThroughAttribute]
public static void WarningFormat(string message, Object[] objects);
    [DebuggerStepThroughAttribute]
public static void Error(string message);
    [DebuggerStepThroughAttribute]
public static void ErrorVerbose(string message, string memberName, string filePath, int lineNumber);
    [DebuggerStepThroughAttribute]
public static void ErrorFormat(string message, Object[] objects);
    [DebuggerStepThroughAttribute]
public static void Verbose(string message);
    [DebuggerStepThroughAttribute]
public static void VerboseFormat(string message, Object[] objects);
    [DebuggerStepThroughAttribute]
public static void Transfer(string message, Guid activity);
    [DebuggerStepThroughAttribute]
public static void TraceEventFormat(TraceEventType type, string message, Object[] objects);
    [DebuggerStepThroughAttribute]
public static void TraceEvent(TraceEventType type, string message);
}
public static class Thinktecture.IdentityModel.X509 : object {
    public static X509CertificatesLocation CurrentUser { get; }
    public static X509CertificatesLocation LocalMachine { get; }
    public static X509CertificatesLocation get_CurrentUser();
    public static X509CertificatesLocation get_LocalMachine();
}
[EditorBrowsableAttribute("1")]
public class Thinktecture.IdentityModel.X509CertificatesFinder : object {
    private StoreLocation _location;
    private StoreName _name;
    private X509FindType _findType;
    public X509CertificatesFinder(StoreLocation location, StoreName name, X509FindType findType);
    public IEnumerable`1<X509Certificate2> Find(object findValue, bool validOnly);
}
[EditorBrowsableAttribute("1")]
public class Thinktecture.IdentityModel.X509CertificatesLocation : object {
    private StoreLocation _location;
    public X509CertificatesName My { get; }
    public X509CertificatesName AddressBook { get; }
    public X509CertificatesName TrustedPeople { get; }
    public X509CertificatesName TrustedPublisher { get; }
    public X509CertificatesName CertificateAuthority { get; }
    public X509CertificatesLocation(StoreLocation location);
    public X509CertificatesName get_My();
    public X509CertificatesName get_AddressBook();
    public X509CertificatesName get_TrustedPeople();
    public X509CertificatesName get_TrustedPublisher();
    public X509CertificatesName get_CertificateAuthority();
}
[EditorBrowsableAttribute("1")]
public class Thinktecture.IdentityModel.X509CertificatesName : object {
    private StoreLocation _location;
    private StoreName _name;
    public X509CertificatesFinder Thumbprint { get; }
    public X509CertificatesFinder SubjectDistinguishedName { get; }
    public X509CertificatesFinder SerialNumber { get; }
    public X509CertificatesFinder IssuerName { get; }
    public X509CertificatesName(StoreLocation location, StoreName name);
    public X509CertificatesFinder get_Thumbprint();
    public X509CertificatesFinder get_SubjectDistinguishedName();
    public X509CertificatesFinder get_SerialNumber();
    public X509CertificatesFinder get_IssuerName();
}
