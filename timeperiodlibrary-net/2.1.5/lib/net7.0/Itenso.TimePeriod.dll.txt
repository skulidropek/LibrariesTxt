public class Itenso.TimePeriod.AmbiguousMomentException : Exception {
    private DateTime moment;
    public DateTime Moment { get; }
    public AmbiguousMomentException(DateTime moment);
    public AmbiguousMomentException(DateTime moment, string message);
    public AmbiguousMomentException(DateTime moment, Exception cause);
    public AmbiguousMomentException(DateTime moment, string message, Exception cause);
    public DateTime get_Moment();
}
public static class Itenso.TimePeriod.BroadcastCalendarTool : object {
    public static int GetWeeksOfYear(int year);
    public static void GetWeekOf(DateTime moment, Int32& year, Int32& week);
    public static DateTime GetStartOfWeek(int year, int week);
    public static void AddMonths(int startYear, YearMonth startMonth, int addMonths, Int32& targetYear, YearMonth& targetMonth);
    public static void GetMonthOf(DateTime moment, Int32& year, YearMonth& month);
    public static DateTime GetStartOfMonth(int year, YearMonth month);
    public static void GetYearOf(DateTime moment, Int32& year);
    public static DateTime GetStartOfYear(int year);
}
public class Itenso.TimePeriod.BroadcastMonth : CalendarTimeRange {
    private int year;
    private YearMonth month;
    public YearMonth Month { get; }
    public int Year { get; }
    public BroadcastMonth(ITimeCalendar calendar);
    public BroadcastMonth(DateTime moment);
    public BroadcastMonth(DateTime moment, ITimeCalendar calendar);
    public BroadcastMonth(int year, YearMonth month);
    public BroadcastMonth(int year, YearMonth month, ITimeCalendar calendar);
    public YearMonth get_Month();
    public int get_Year();
    public ITimePeriodCollection GetDays();
    public ITimePeriodCollection GetWeeks();
    public BroadcastMonth GetPreviousMonth();
    public BroadcastMonth GetNextMonth();
    public BroadcastMonth AddMonths(int months);
    protected virtual string Format(ITimeFormatter formatter);
    private static int GetYearOf(DateTime moment);
    private static YearMonth GetMonthOf(DateTime moment);
    private static ITimeRange GetPeriodOf(int year, YearMonth month);
}
public class Itenso.TimePeriod.BroadcastWeek : CalendarTimeRange {
    private int year;
    private int week;
    public int Week { get; }
    public int Year { get; }
    public BroadcastWeek(ITimeCalendar calendar);
    public BroadcastWeek(DateTime moment);
    public BroadcastWeek(DateTime moment, ITimeCalendar calendar);
    public BroadcastWeek(int year, int week);
    public BroadcastWeek(int year, int week, ITimeCalendar calendar);
    public int get_Week();
    public int get_Year();
    public ITimePeriodCollection GetDays();
    public BroadcastWeek GetPreviousWeek();
    public BroadcastWeek GetNextWeek();
    public BroadcastWeek AddWeeks(int weeks);
    protected virtual string Format(ITimeFormatter formatter);
    private static int GetYearOf(DateTime moment);
    private static int GetWeekOf(DateTime moment);
    private static ITimeRange GetPeriodOf(int year, int week);
}
public class Itenso.TimePeriod.BroadcastYear : CalendarTimeRange {
    private int year;
    public int Year { get; }
    public BroadcastYear(ITimeCalendar calendar);
    public BroadcastYear(DateTime moment);
    public BroadcastYear(DateTime moment, ITimeCalendar calendar);
    public BroadcastYear(int year);
    public BroadcastYear(int year, ITimeCalendar calendar);
    public int get_Year();
    public ITimePeriodCollection GetWeeks();
    public ITimePeriodCollection GetMonths();
    public BroadcastYear GetPreviousYear();
    public BroadcastYear GetNextYear();
    public BroadcastYear AddYears(int count);
    protected virtual string Format(ITimeFormatter formatter);
    private static int GetYearOf(DateTime moment);
    private static ITimeRange GetPeriodOf(int year);
}
public class Itenso.TimePeriod.CalendarDateAdd : DateAdd {
    private List`1<DayOfWeek> weekDays;
    private List`1<HourRange> workingHours;
    private List`1<DayHourRange> workingDayHours;
    private ITimeCalendar calendar;
    public IList`1<DayOfWeek> WeekDays { get; }
    public IList`1<HourRange> WorkingHours { get; }
    public IList`1<DayHourRange> WorkingDayHours { get; }
    public ITimeCalendar Calendar { get; }
    public ITimePeriodCollection IncludePeriods { get; }
    public CalendarDateAdd(ITimeCalendar calendar);
    public IList`1<DayOfWeek> get_WeekDays();
    public IList`1<HourRange> get_WorkingHours();
    public IList`1<DayHourRange> get_WorkingDayHours();
    public ITimeCalendar get_Calendar();
    public ITimePeriodCollection get_IncludePeriods();
    public void AddWorkingWeekDays();
    public void AddWeekendWeekDays();
    public virtual Nullable`1<DateTime> Subtract(DateTime start, TimeSpan offset, SeekBoundaryMode seekBoundaryMode);
    public virtual Nullable`1<DateTime> Add(DateTime start, TimeSpan offset, SeekBoundaryMode seekBoundaryMode);
    protected Nullable`1<DateTime> CalculateEnd(DateTime start, TimeSpan offset, SeekDirection seekDirection, SeekBoundaryMode seekBoundaryMode);
    private Week FindNextWeek(Week current);
    private Week FindPreviousWeek(Week current);
    protected virtual IEnumerable`1<ITimePeriod> GetAvailableWeekPeriods(Week week);
}
public class Itenso.TimePeriod.CalendarDateDiff : object {
    private CalendarPeriodCollectorFilter collectorFilter;
    private ITimeCalendar calendar;
    private IDurationProvider durationProvider;
    public IList`1<DayOfWeek> WeekDays { get; }
    public IList`1<HourRange> WorkingHours { get; }
    public IList`1<DayHourRange> WorkingDayHours { get; }
    public ITimeCalendar Calendar { get; }
    public IDurationProvider DurationProvider { get; }
    public CalendarDateDiff(ITimeCalendar calendar, IDurationProvider durationProvider);
    public IList`1<DayOfWeek> get_WeekDays();
    public IList`1<HourRange> get_WorkingHours();
    public IList`1<DayHourRange> get_WorkingDayHours();
    public ITimeCalendar get_Calendar();
    public IDurationProvider get_DurationProvider();
    public void AddWorkingWeekDays();
    public void AddWeekendWeekDays();
    public TimeSpan Difference(DateTime date);
    public TimeSpan Difference(DateTime date1, DateTime date2);
}
public enum Itenso.TimePeriod.CalendarNameType : Enum {
    public int value__;
    public static CalendarNameType Full;
    public static CalendarNameType Abbreviated;
}
public class Itenso.TimePeriod.CalendarPeriodCollector : CalendarVisitor`2<CalendarPeriodCollectorFilter, CalendarPeriodCollectorContext> {
    private ITimePeriodCollection periods;
    public ITimePeriodCollection Periods { get; }
    public CalendarPeriodCollector(CalendarPeriodCollectorFilter filter, ITimePeriod limits, SeekDirection seekDirection, ITimeCalendar calendar);
    public ITimePeriodCollection get_Periods();
    public void CollectYears();
    public void CollectMonths();
    public void CollectDays();
    public void CollectHours();
    public virtual string ToString();
    protected virtual bool EnterYears(Years years, CalendarPeriodCollectorContext context);
    protected virtual bool EnterMonths(Year year, CalendarPeriodCollectorContext context);
    protected virtual bool EnterDays(Month month, CalendarPeriodCollectorContext context);
    protected virtual bool EnterHours(Day day, CalendarPeriodCollectorContext context);
    protected virtual bool OnVisitYears(Years years, CalendarPeriodCollectorContext context);
    protected virtual bool OnVisitYear(Year year, CalendarPeriodCollectorContext context);
    protected virtual bool OnVisitMonth(Month month, CalendarPeriodCollectorContext context);
    protected virtual bool OnVisitDay(Day day, CalendarPeriodCollectorContext context);
}
public class Itenso.TimePeriod.CalendarPeriodCollectorContext : object {
    [CompilerGeneratedAttribute]
private CollectType <Scope>k__BackingField;
    public CollectType Scope { get; public set; }
    [CompilerGeneratedAttribute]
public CollectType get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(CollectType value);
}
public class Itenso.TimePeriod.CalendarPeriodCollectorFilter : CalendarVisitorFilter {
    private List`1<MonthRange> collectingMonths;
    private List`1<DayRange> collectingDays;
    private List`1<HourRange> collectingHours;
    private List`1<DayHourRange> collectingDayHours;
    public IList`1<MonthRange> CollectingMonths { get; }
    public IList`1<DayRange> CollectingDays { get; }
    public IList`1<HourRange> CollectingHours { get; }
    public IList`1<DayHourRange> CollectingDayHours { get; }
    public virtual void Clear();
    public sealed virtual IList`1<MonthRange> get_CollectingMonths();
    public sealed virtual IList`1<DayRange> get_CollectingDays();
    public sealed virtual IList`1<HourRange> get_CollectingHours();
    public IList`1<DayHourRange> get_CollectingDayHours();
}
public class Itenso.TimePeriod.CalendarTimeRange : TimeRange {
    private ITimeCalendar calendar;
    public ITimeCalendar Calendar { get; }
    public YearMonth YearBaseMonth { get; }
    public int BaseYear { get; }
    public DateTime FirstMonthStart { get; }
    public DateTime LastMonthStart { get; }
    public DateTime FirstDayStart { get; }
    public DateTime LastDayStart { get; }
    public DateTime FirstHourStart { get; }
    public DateTime LastHourStart { get; }
    public DateTime FirstMinuteStart { get; }
    public DateTime LastMinuteStart { get; }
    public CalendarTimeRange(DateTime start, DateTime end);
    public CalendarTimeRange(DateTime start, DateTime end, ITimeCalendar calendar);
    public CalendarTimeRange(DateTime start, TimeSpan duration);
    public CalendarTimeRange(DateTime start, TimeSpan duration, ITimeCalendar calendar);
    public CalendarTimeRange(ITimePeriod period);
    public CalendarTimeRange(ITimePeriod period, ITimeCalendar calendar);
    public sealed virtual ITimeCalendar get_Calendar();
    public YearMonth get_YearBaseMonth();
    public virtual int get_BaseYear();
    public DateTime get_FirstMonthStart();
    public DateTime get_LastMonthStart();
    public DateTime get_FirstDayStart();
    public DateTime get_LastDayStart();
    public DateTime get_FirstHourStart();
    public DateTime get_LastHourStart();
    public DateTime get_FirstMinuteStart();
    public DateTime get_LastMinuteStart();
    public virtual ITimeRange Copy(TimeSpan offset);
    protected virtual string Format(ITimeFormatter formatter);
    protected virtual bool IsEqual(object obj);
    protected virtual int ComputeHashCode();
    private bool HasSameData(CalendarTimeRange comp);
    private static TimeRange ToCalendarTimeRange(ITimePeriod period, ITimePeriodMapper mapper);
}
public abstract class Itenso.TimePeriod.CalendarVisitor`2 : object {
    private TFilter filter;
    private ITimePeriod limits;
    private SeekDirection seekDirection;
    private ITimeCalendar calendar;
    public TFilter Filter { get; }
    public ITimePeriod Limits { get; }
    public SeekDirection SeekDirection { get; }
    public ITimeCalendar Calendar { get; }
    protected CalendarVisitor`2(TFilter filter, ITimePeriod limits, SeekDirection seekDirection, ITimeCalendar calendar);
    public TFilter get_Filter();
    public ITimePeriod get_Limits();
    public SeekDirection get_SeekDirection();
    public ITimeCalendar get_Calendar();
    protected void StartPeriodVisit(TContext context);
    protected void StartPeriodVisit(ITimePeriod period, TContext context);
    protected Year StartYearVisit(Year year, TContext context, Nullable`1<SeekDirection> visitDirection);
    protected Month StartMonthVisit(Month month, TContext context, Nullable`1<SeekDirection> visitDirection);
    protected Day StartDayVisit(Day day, TContext context, Nullable`1<SeekDirection> visitDirection);
    protected Hour StartHourVisit(Hour hour, TContext context, Nullable`1<SeekDirection> visitDirection);
    protected virtual void OnVisitStart();
    protected virtual bool CheckLimits(ITimePeriod test);
    protected virtual bool CheckExcludePeriods(ITimePeriod test);
    protected virtual bool EnterYears(Years years, TContext context);
    protected virtual bool EnterMonths(Year year, TContext context);
    protected virtual bool EnterDays(Month month, TContext context);
    protected virtual bool EnterHours(Day day, TContext context);
    protected virtual bool OnVisitYears(Years years, TContext context);
    protected virtual bool OnVisitYear(Year year, TContext context);
    protected virtual bool OnVisitMonth(Month month, TContext context);
    protected virtual bool OnVisitDay(Day day, TContext context);
    protected virtual bool OnVisitHour(Hour hour, TContext context);
    protected virtual bool IsMatchingYear(Year year, TContext context);
    protected virtual bool IsMatchingMonth(Month month, TContext context);
    protected virtual bool IsMatchingDay(Day day, TContext context);
    protected virtual bool IsMatchingHour(Hour hour, TContext context);
    protected virtual void OnVisitEnd();
}
public class Itenso.TimePeriod.CalendarVisitorFilter : object {
    private TimePeriodCollection excludePeriods;
    private List`1<int> years;
    private List`1<YearMonth> months;
    private List`1<int> days;
    private List`1<DayOfWeek> weekDays;
    private List`1<int> hours;
    public ITimePeriodCollection ExcludePeriods { get; }
    public IList`1<int> Years { get; }
    public IList`1<YearMonth> Months { get; }
    public IList`1<int> Days { get; }
    public IList`1<DayOfWeek> WeekDays { get; }
    public IList`1<int> Hours { get; }
    public virtual void Clear();
    public sealed virtual ITimePeriodCollection get_ExcludePeriods();
    public sealed virtual IList`1<int> get_Years();
    public sealed virtual IList`1<YearMonth> get_Months();
    public sealed virtual IList`1<int> get_Days();
    public sealed virtual IList`1<DayOfWeek> get_WeekDays();
    public sealed virtual IList`1<int> get_Hours();
    public sealed virtual void AddWorkingWeekDays();
    public sealed virtual void AddWeekendWeekDays();
}
public static class Itenso.TimePeriod.ClockProxy : object {
    private static object mutex;
    private static IClock modreq(System.Runtime.CompilerServices.IsVolatile) clock;
    public static IClock Clock { get; public set; }
    private static ClockProxy();
    public static IClock get_Clock();
    public static void set_Clock(IClock value);
}
public class Itenso.TimePeriod.Date : ValueType {
    private DateTime date;
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public DateTime DateTime { get; }
    public Date(DateTime date);
    public Date(int year, int month, int day);
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public DateTime get_DateTime();
    public sealed virtual int CompareTo(Date other);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual bool Equals(Date other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static TimeSpan op_Subtraction(Date date1, Date date2);
    public static Date op_Subtraction(Date date, TimeSpan duration);
    public static Date op_Addition(Date date, TimeSpan duration);
    public static bool op_LessThan(Date date1, Date date2);
    public static bool op_LessThanOrEqual(Date date1, Date date2);
    public static bool op_Equality(Date left, Date right);
    public static bool op_Inequality(Date left, Date right);
    public static bool op_GreaterThan(Date date1, Date date2);
    public static bool op_GreaterThanOrEqual(Date date1, Date date2);
    public DateTime ToDateTime(Time time);
    public DateTime ToDateTime(int hour, int minute, int second, int millisecond);
    public static DateTime ToDateTime(Date date, Time time);
    public static DateTime ToDateTime(Date date, int hour, int minute, int second, int millisecond);
}
public class Itenso.TimePeriod.DateAdd : object {
    private TimePeriodCollection includePeriods;
    private TimePeriodCollection excludePeriods;
    public ITimePeriodCollection IncludePeriods { get; }
    public ITimePeriodCollection ExcludePeriods { get; }
    public ITimePeriodCollection get_IncludePeriods();
    public ITimePeriodCollection get_ExcludePeriods();
    public virtual Nullable`1<DateTime> Subtract(DateTime start, TimeSpan offset, SeekBoundaryMode seekBoundaryMode);
    public virtual Nullable`1<DateTime> Add(DateTime start, TimeSpan offset, SeekBoundaryMode seekBoundaryMode);
    protected Nullable`1<DateTime> CalculateEnd(DateTime start, TimeSpan offset, SeekDirection seekDirection, SeekBoundaryMode seekBoundaryMode, Nullable`1& remaining);
    private static ITimePeriod FindNextPeriod(DateTime start, IEnumerable`1<ITimePeriod> periods, DateTime& moment);
    private static ITimePeriod FindPreviousPeriod(DateTime start, IEnumerable`1<ITimePeriod> periods, DateTime& moment);
}
public class Itenso.TimePeriod.DateDiff : object {
    private Calendar calendar;
    private YearMonth yearBaseMonth;
    private DayOfWeek firstDayOfWeek;
    private DateTime date1;
    private DateTime date2;
    private TimeSpan difference;
    private Nullable`1<int> years;
    private Nullable`1<int> quarters;
    private Nullable`1<int> months;
    private Nullable`1<int> weeks;
    private Nullable`1<int> elapsedYears;
    private Nullable`1<int> elapsedMonths;
    private Nullable`1<int> elapsedDays;
    private Nullable`1<int> elapsedHours;
    private Nullable`1<int> elapsedMinutes;
    private Nullable`1<int> elapsedSeconds;
    public static DateTimeFormatInfo SafeCurrentInfo { get; }
    public Calendar Calendar { get; }
    public YearMonth YearBaseMonth { get; }
    public DayOfWeek FirstDayOfWeek { get; }
    public DateTime Date1 { get; }
    public DateTime Date2 { get; }
    public TimeSpan Difference { get; }
    public bool IsEmpty { get; }
    private int Year1 { get; }
    private int Year2 { get; }
    public int Years { get; }
    public int ElapsedYears { get; }
    public int Quarters { get; }
    private int Month1 { get; }
    private int Month2 { get; }
    public int Months { get; }
    public int ElapsedMonths { get; }
    public int Weeks { get; }
    public int Days { get; }
    public int Weekdays { get; }
    public int ElapsedDays { get; }
    public int Hours { get; }
    public int ElapsedHours { get; }
    public int Minutes { get; }
    public int ElapsedMinutes { get; }
    public int Seconds { get; }
    public int ElapsedSeconds { get; }
    public DateDiff(DateTime date);
    public DateDiff(DateTime date, Calendar calendar, DayOfWeek firstDayOfWeek, YearMonth yearBaseMonth);
    public DateDiff(DateTime date1, DateTime date2);
    public DateDiff(DateTime date1, DateTime date2, Calendar calendar, DayOfWeek firstDayOfWeek, YearMonth yearBaseMonth);
    public DateDiff(TimeSpan difference);
    public DateDiff(TimeSpan difference, Calendar calendar, DayOfWeek firstDayOfWeek, YearMonth yearBaseMonth);
    public DateDiff(DateTime date1, TimeSpan difference);
    public DateDiff(DateTime date1, TimeSpan difference, Calendar calendar, DayOfWeek firstDayOfWeek, YearMonth yearBaseMonth);
    public static DateTimeFormatInfo get_SafeCurrentInfo();
    public Calendar get_Calendar();
    public YearMonth get_YearBaseMonth();
    public DayOfWeek get_FirstDayOfWeek();
    public DateTime get_Date1();
    public DateTime get_Date2();
    public TimeSpan get_Difference();
    public bool get_IsEmpty();
    private int get_Year1();
    private int get_Year2();
    public int get_Years();
    public int get_ElapsedYears();
    public int get_Quarters();
    private int get_Month1();
    private int get_Month2();
    public int get_Months();
    public int get_ElapsedMonths();
    public int get_Weeks();
    public int get_Days();
    public int get_Weekdays();
    public int get_ElapsedDays();
    public int get_Hours();
    public int get_ElapsedHours();
    public int get_Minutes();
    public int get_ElapsedMinutes();
    public int get_Seconds();
    public int get_ElapsedSeconds();
    public string GetDescription(int precision, ITimeFormatter formatter);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private static double Round(double number);
    private int CalcYears();
    private int CalcQuarters();
    private int CalcMonths();
    private int CalcWeeks();
}
[DefaultMemberAttribute("Item")]
public class Itenso.TimePeriod.DateTimeSet : object {
    private List`1<DateTime> moments;
    public DateTime Item { get; }
    public Nullable`1<DateTime> Min { get; }
    public Nullable`1<DateTime> Max { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public bool IsEmpty { get; }
    public bool IsMoment { get; }
    public bool IsAnytime { get; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.DateTime>.IsReadOnly { get; }
    public DateTimeSet(IEnumerable`1<DateTime> moments);
    public sealed virtual DateTime get_Item(int index);
    public sealed virtual Nullable`1<DateTime> get_Min();
    public sealed virtual Nullable`1<DateTime> get_Max();
    public sealed virtual Nullable`1<TimeSpan> get_Duration();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool get_IsMoment();
    public sealed virtual bool get_IsAnytime();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.DateTime>.get_IsReadOnly();
    public sealed virtual int IndexOf(DateTime moment);
    public sealed virtual Nullable`1<DateTime> FindPrevious(DateTime moment);
    public sealed virtual Nullable`1<DateTime> FindNext(DateTime moment);
    public sealed virtual IEnumerator`1<DateTime> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Add(DateTime moment);
    private sealed virtual override void System.Collections.Generic.ICollection<System.DateTime>.Add(DateTime moment);
    public sealed virtual void AddAll(IEnumerable`1<DateTime> items);
    public sealed virtual IList`1<TimeSpan> GetDurations(int startIndex, int count);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(DateTime moment);
    public sealed virtual void CopyTo(DateTime[] array, int arrayIndex);
    public sealed virtual bool Remove(DateTime moment);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Itenso.TimePeriod.Day : DayTimeRange {
    public int Year { get; }
    public int Month { get; }
    public int DayValue { get; }
    public DayOfWeek DayOfWeek { get; }
    public string DayName { get; }
    public Day(DateTime moment);
    public Day(ITimeCalendar calendar);
    public Day(DateTime moment, ITimeCalendar calendar);
    public Day(int year, int month);
    public Day(int year, int month, ITimeCalendar calendar);
    public Day(int year, int month, int day);
    public Day(int year, int month, int day, ITimeCalendar calendar);
    public int get_Year();
    public int get_Month();
    public int get_DayValue();
    public DayOfWeek get_DayOfWeek();
    public string get_DayName();
    public Day GetPreviousDay();
    public Day GetNextDay();
    public Day AddDays(int days);
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.DayHourRange : HourRange {
    private DayOfWeek day;
    public DayOfWeek Day { get; }
    public DayHourRange(DayOfWeek day, int hour);
    public DayHourRange(DayOfWeek day, int startHour, int endHour);
    public DayHourRange(DayOfWeek day, Time start, Time end);
    public DayOfWeek get_Day();
    public virtual string ToString();
}
public class Itenso.TimePeriod.DayRange : ValueType {
    private int min;
    private int max;
    public int Min { get; }
    public int Max { get; }
    public bool IsSingleDay { get; }
    public DayRange(int day);
    public DayRange(int min, int max);
    public int get_Min();
    public int get_Max();
    public bool get_IsSingleDay();
    public bool HasInside(int test);
}
public class Itenso.TimePeriod.Days : DayTimeRange {
    public Days(DateTime moment, int count);
    public Days(DateTime moment, int count, ITimeCalendar calendar);
    public Days(int startYear, int startMonth, int startDay, int dayCount);
    public Days(int startYear, int startMonth, int startDay, int dayCount, ITimeCalendar calendar);
    public ITimePeriodCollection GetDays();
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.DaySeeker : CalendarVisitor`2<CalendarVisitorFilter, DaySeekerContext> {
    private ITimePeriodCollection periods;
    public ITimePeriodCollection Periods { get; }
    public DaySeeker(SeekDirection seekDirection, ITimeCalendar calendar);
    public DaySeeker(CalendarVisitorFilter filter, SeekDirection seekDirection, ITimeCalendar calendar);
    public ITimePeriodCollection get_Periods();
    public Day FindDay(Day start, int offset);
    protected virtual bool EnterYears(Years years, DaySeekerContext context);
    protected virtual bool EnterMonths(Year year, DaySeekerContext context);
    protected virtual bool EnterDays(Month month, DaySeekerContext context);
    protected virtual bool EnterHours(Day day, DaySeekerContext context);
    protected virtual bool OnVisitDay(Day day, DaySeekerContext context);
}
public class Itenso.TimePeriod.DaySeekerContext : object {
    [CompilerGeneratedAttribute]
private int <DayCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemaingDays>k__BackingField;
    [CompilerGeneratedAttribute]
private Day <StartDay>k__BackingField;
    [CompilerGeneratedAttribute]
private Day <FoundDay>k__BackingField;
    public int DayCount { get; private set; }
    public int RemaingDays { get; private set; }
    public Day StartDay { get; private set; }
    public Day FoundDay { get; private set; }
    public bool IsFinished { get; }
    public DaySeekerContext(Day startDay, int dayCount);
    [CompilerGeneratedAttribute]
public int get_DayCount();
    [CompilerGeneratedAttribute]
private void set_DayCount(int value);
    [CompilerGeneratedAttribute]
public int get_RemaingDays();
    [CompilerGeneratedAttribute]
private void set_RemaingDays(int value);
    [CompilerGeneratedAttribute]
public Day get_StartDay();
    [CompilerGeneratedAttribute]
private void set_StartDay(Day value);
    [CompilerGeneratedAttribute]
public Day get_FoundDay();
    [CompilerGeneratedAttribute]
private void set_FoundDay(Day value);
    public bool get_IsFinished();
    public void ProcessDay(Day day);
}
public abstract class Itenso.TimePeriod.DayTimeRange : CalendarTimeRange {
    private DateTime startDay;
    private int dayCount;
    private DateTime endDay;
    public int StartYear { get; }
    public int StartMonth { get; }
    public int StartDay { get; }
    public int EndYear { get; }
    public int EndMonth { get; }
    public int EndDay { get; }
    public int DayCount { get; }
    public DayOfWeek StartDayOfWeek { get; }
    public string StartDayName { get; }
    public DayOfWeek EndDayOfWeek { get; }
    public string EndDayName { get; }
    protected DayTimeRange(int startYear, int startMonth, int startDay, int dayCount);
    protected DayTimeRange(int startYear, int startMonth, int startDay, int dayCount, ITimeCalendar calendar);
    public int get_StartYear();
    public int get_StartMonth();
    public int get_StartDay();
    public int get_EndYear();
    public int get_EndMonth();
    public int get_EndDay();
    public int get_DayCount();
    public DayOfWeek get_StartDayOfWeek();
    public string get_StartDayName();
    public DayOfWeek get_EndDayOfWeek();
    public string get_EndDayName();
    public ITimePeriodCollection GetHours();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(DayTimeRange comp);
    protected virtual int ComputeHashCode();
    private static TimeRange GetPeriodOf(int year, int month, int day, int dayCount);
}
public static class Itenso.TimePeriod.Duration : object {
    public static TimeSpan Week;
    public static TimeSpan Day;
    public static TimeSpan Hour;
    public static TimeSpan Minute;
    public static TimeSpan Second;
    public static TimeSpan Millisecond;
    private static Duration();
    public static TimeSpan Year(int year);
    public static TimeSpan Year(Calendar calendar, int year);
    public static TimeSpan Halfyear(int year, YearHalfyear yearHalfyear);
    public static TimeSpan Halfyear(Calendar calendar, int year, YearHalfyear yearHalfyear);
    public static TimeSpan Quarter(int year, YearQuarter yearQuarter);
    public static TimeSpan Quarter(Calendar calendar, int year, YearQuarter yearQuarter);
    public static TimeSpan Month(int year, YearMonth yearMonth);
    public static TimeSpan Month(Calendar calendar, int year, YearMonth yearMonth);
    public static TimeSpan Weeks(int weeks);
    public static TimeSpan Days(int days, int hours, int minutes, int seconds, int milliseconds);
    public static TimeSpan Hours(int hours, int minutes, int seconds, int milliseconds);
    public static TimeSpan Minutes(int minutes, int seconds, int milliseconds);
    public static TimeSpan Seconds(int seconds, int milliseconds);
    public static TimeSpan Milliseconds(int milliseconds);
}
public class Itenso.TimePeriod.DurationCalculator : object {
    private CalendarPeriodCollectorFilter filter;
    private TimePeriodCollection includePeriods;
    private TimePeriodCollection excludePeriods;
    private IDurationProvider durationProvider;
    public IDurationProvider DurationProvider { get; }
    public ITimePeriodCollection IncludePeriods { get; }
    public ITimePeriodCollection ExcludePeriods { get; }
    public DurationCalculator(IDurationProvider durationProvider);
    public IDurationProvider get_DurationProvider();
    public ITimePeriodCollection get_IncludePeriods();
    public ITimePeriodCollection get_ExcludePeriods();
    public void Hours(Time start, Time end);
    public void Hours(HourRange[] hours);
    public void DayHours(DayOfWeek dayOfWeek, Time start, Time end);
    public void DayHours(DayHourRange[] dayHours);
    public void WeekDays(DayOfWeek[] weekDays);
    public void WorkingWeekDays();
    public void WeekendWeekDays();
    public TimeSpan CalcDuration(ITimeRange period);
    public TimeSpan CalcDuration(DateTime start, DateTime end);
    public TimeSpan CalcDayllightDuration(ITimeRange period, TimeZoneInfo timeZone);
    public TimeSpan CalcDayllightDuration(DateTime start, DateTime end, TimeZoneInfo timeZone);
    protected virtual TimeSpan DoCalcDuration(DateTime start, DateTime end, TimeZoneInfo timeZone);
}
public enum Itenso.TimePeriod.DurationFormatType : Enum {
    public int value__;
    public static DurationFormatType Compact;
    public static DurationFormatType Detailed;
}
public class Itenso.TimePeriod.DurationProvider : object {
    public virtual TimeSpan GetDuration(DateTime start, DateTime end);
}
public static class Itenso.TimePeriod.FiscalCalendarTool : object {
    public static int GetDaysInMonth(YearMonth month, YearMonth yearBaseMonth, FiscalQuarterGrouping quarterGrouping);
    public static int GetYear(int year, YearMonth month, YearMonth yearBaseMonth, YearMonth fiscalYearBaseMonth);
    public static DateTime GetStartOfMonth(int year, YearMonth month, YearMonth yearBaseMonth, DayOfWeek yearStartDay, FiscalYearAlignment yearAlignment, FiscalQuarterGrouping quarterGrouping);
    public static DateTime GetStartOfQuarter(int year, YearQuarter quarter, YearMonth yearBaseMonth, DayOfWeek yearStartDay, FiscalYearAlignment yearAlignment);
    public static DateTime GetStartOfHalfyear(int year, YearHalfyear halfyear, YearMonth yearBaseMonth, DayOfWeek yearStartDay, FiscalYearAlignment yearAlignment);
    public static int GetFiscalYear(int calendarYear, YearMonth fiscalYearBaseMonth, YearMonth yearBaseMonth);
    public static DateTime GetStartOfYear(int year, YearMonth yearBaseMonth, DayOfWeek yearStartDay, FiscalYearAlignment yearAlignment);
}
public enum Itenso.TimePeriod.FiscalQuarterGrouping : Enum {
    public int value__;
    public static FiscalQuarterGrouping FourFourFiveWeeks;
    public static FiscalQuarterGrouping FourFiveFourWeeks;
    public static FiscalQuarterGrouping FiveFourFourWeeks;
}
public enum Itenso.TimePeriod.FiscalYearAlignment : Enum {
    public int value__;
    public static FiscalYearAlignment None;
    public static FiscalYearAlignment LastDay;
    public static FiscalYearAlignment NearestDay;
}
public class Itenso.TimePeriod.Halfyear : HalfyearTimeRange {
    public int Year { get; }
    public YearMonth StartMonth { get; }
    public YearHalfyear YearHalfyear { get; }
    public string HalfyearName { get; }
    public string HalfyearOfYearName { get; }
    public bool IsCalendarHalfyear { get; }
    public bool MultipleCalendarYears { get; }
    public Halfyear(DateTime moment);
    public Halfyear(ITimeCalendar calendar);
    public Halfyear(DateTime moment, ITimeCalendar calendar);
    public Halfyear(int year, YearHalfyear yearHalfyear);
    public Halfyear(int year, YearHalfyear yearHalfyear, ITimeCalendar calendar);
    public int get_Year();
    public YearMonth get_StartMonth();
    public YearHalfyear get_YearHalfyear();
    public string get_HalfyearName();
    public string get_HalfyearOfYearName();
    public bool get_IsCalendarHalfyear();
    public bool get_MultipleCalendarYears();
    public Halfyear GetPreviousHalfyear();
    public Halfyear GetNextHalfyear();
    public Halfyear AddHalfyears(int count);
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.Halfyears : HalfyearTimeRange {
    public Halfyears(DateTime moment, YearHalfyear startHalfyear, int count);
    public Halfyears(DateTime moment, YearHalfyear startHalfyear, int count, ITimeCalendar calendar);
    public Halfyears(int startYear, YearHalfyear startHalfyear, int halfyearCount);
    public Halfyears(int startYear, YearHalfyear startHalfyear, int halfyearCount, ITimeCalendar calendar);
    public ITimePeriodCollection GetHalfyears();
    protected virtual string Format(ITimeFormatter formatter);
}
public abstract class Itenso.TimePeriod.HalfyearTimeRange : CalendarTimeRange {
    private int startYear;
    private YearHalfyear startHalfyear;
    private int halfyearCount;
    private int endYear;
    private YearHalfyear endHalfyear;
    public int BaseYear { get; }
    public int StartYear { get; }
    public int EndYear { get; }
    public YearHalfyear StartHalfyear { get; }
    public YearHalfyear EndHalfyear { get; }
    public int HalfyearCount { get; }
    public string StartHalfyearName { get; }
    public string StartHalfyearOfYearName { get; }
    public string EndHalfyearName { get; }
    public string EndHalfyearOfYearName { get; }
    protected HalfyearTimeRange(int startYear, YearHalfyear startHalfyear, int halfyearCount, ITimeCalendar calendar);
    public virtual int get_BaseYear();
    public int get_StartYear();
    public int get_EndYear();
    public YearHalfyear get_StartHalfyear();
    public YearHalfyear get_EndHalfyear();
    public int get_HalfyearCount();
    public string get_StartHalfyearName();
    public string get_StartHalfyearOfYearName();
    public string get_EndHalfyearName();
    public string get_EndHalfyearOfYearName();
    public ITimePeriodCollection GetQuarters();
    public ITimePeriodCollection GetMonths();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(HalfyearTimeRange comp);
    protected virtual int ComputeHashCode();
    private static DateTime GetStartOfHalfyear(ITimeCalendar calendar, int year, YearHalfyear halfyear);
    private static TimeRange GetPeriodOf(ITimeCalendar calendar, int startYear, YearHalfyear startHalfyear, int halfyearCount);
}
public static class Itenso.TimePeriod.HashTool : object {
    private static int nullValue;
    private static int initValue;
    private static int factor;
    public static int AddHashCode(int hash, object obj);
    public static int AddHashCode(int hash, int objHash);
    public static int ComputeHashCode(object obj);
    public static int ComputeHashCode(Object[] objs);
    public static int ComputeHashCode(IEnumerable enumerable);
}
public class Itenso.TimePeriod.Hour : HourTimeRange {
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int HourValue { get; }
    public Hour(ITimeCalendar calendar);
    public Hour(DateTime moment);
    public Hour(DateTime moment, ITimeCalendar calendar);
    public Hour(int year, int month, int day, int hour);
    public Hour(int year, int month, int day, int hour, ITimeCalendar calendar);
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_HourValue();
    public Hour GetPreviousHour();
    public Hour GetNextHour();
    public Hour AddHours(int hours);
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.HourRange : object {
    private Time start;
    private Time end;
    public Time Start { get; }
    public Time End { get; }
    public bool IsMoment { get; }
    public HourRange(int hour);
    public HourRange(int startHour, int endHour);
    public HourRange(Time start, Time end);
    public Time get_Start();
    public Time get_End();
    public bool get_IsMoment();
    public virtual string ToString();
}
public class Itenso.TimePeriod.Hours : HourTimeRange {
    public Hours(DateTime moment, int count);
    public Hours(DateTime moment, int count, ITimeCalendar calendar);
    public Hours(int startYear, int startMonth, int startDay, int hour, int hourCount);
    public Hours(int startYear, int startMonth, int startDay, int hour, int hourCount, ITimeCalendar calendar);
    public ITimePeriodCollection GetHours();
    protected virtual string Format(ITimeFormatter formatter);
}
public abstract class Itenso.TimePeriod.HourTimeRange : CalendarTimeRange {
    private DateTime startHour;
    private int hourCount;
    private DateTime endHour;
    public int StartYear { get; }
    public int StartMonth { get; }
    public int StartDay { get; }
    public int StartHour { get; }
    public int EndYear { get; }
    public int EndMonth { get; }
    public int EndDay { get; }
    public int EndHour { get; }
    public int HourCount { get; }
    protected HourTimeRange(int startYear, int startMonth, int startDay, int startHour, int hourCount);
    protected HourTimeRange(int startYear, int startMonth, int startDay, int startHour, int hourCount, ITimeCalendar calendar);
    public int get_StartYear();
    public int get_StartMonth();
    public int get_StartDay();
    public int get_StartHour();
    public int get_EndYear();
    public int get_EndMonth();
    public int get_EndDay();
    public int get_EndHour();
    public int get_HourCount();
    public ITimePeriodCollection GetMinutes();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(HourTimeRange comp);
    protected virtual int ComputeHashCode();
    private static TimeRange GetPeriodOf(int year, int month, int day, int hour, int hourCount);
}
public interface Itenso.TimePeriod.ICalendarPeriodCollectorFilter {
    public IList`1<MonthRange> CollectingMonths { get; }
    public IList`1<DayRange> CollectingDays { get; }
    public IList`1<HourRange> CollectingHours { get; }
    public abstract virtual IList`1<MonthRange> get_CollectingMonths();
    public abstract virtual IList`1<DayRange> get_CollectingDays();
    public abstract virtual IList`1<HourRange> get_CollectingHours();
}
public interface Itenso.TimePeriod.ICalendarTimeRange {
    public ITimeCalendar Calendar { get; }
    public abstract virtual ITimeCalendar get_Calendar();
}
public interface Itenso.TimePeriod.ICalendarVisitorContext {
}
public interface Itenso.TimePeriod.ICalendarVisitorFilter {
    public ITimePeriodCollection ExcludePeriods { get; }
    public IList`1<int> Years { get; }
    public IList`1<YearMonth> Months { get; }
    public IList`1<int> Days { get; }
    public IList`1<DayOfWeek> WeekDays { get; }
    public IList`1<int> Hours { get; }
    public abstract virtual ITimePeriodCollection get_ExcludePeriods();
    public abstract virtual IList`1<int> get_Years();
    public abstract virtual IList`1<YearMonth> get_Months();
    public abstract virtual IList`1<int> get_Days();
    public abstract virtual IList`1<DayOfWeek> get_WeekDays();
    public abstract virtual IList`1<int> get_Hours();
    public abstract virtual void AddWorkingWeekDays();
    public abstract virtual void AddWeekendWeekDays();
    public abstract virtual void Clear();
}
public interface Itenso.TimePeriod.IClock {
    public DateTime Now { get; }
    public abstract virtual DateTime get_Now();
}
[DefaultMemberAttribute("Item")]
public interface Itenso.TimePeriod.IDateTimeSet {
    public DateTime Item { get; }
    public Nullable`1<DateTime> Min { get; }
    public Nullable`1<DateTime> Max { get; }
    public Nullable`1<TimeSpan> Duration { get; }
    public bool IsEmpty { get; }
    public bool IsMoment { get; }
    public bool IsAnytime { get; }
    public abstract virtual DateTime get_Item(int index);
    public abstract virtual Nullable`1<DateTime> get_Min();
    public abstract virtual Nullable`1<DateTime> get_Max();
    public abstract virtual Nullable`1<TimeSpan> get_Duration();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsMoment();
    public abstract virtual bool get_IsAnytime();
    public abstract virtual int IndexOf(DateTime moment);
    public abstract virtual bool Add(DateTime moment);
    public abstract virtual void AddAll(IEnumerable`1<DateTime> moments);
    public abstract virtual IList`1<TimeSpan> GetDurations(int startIndex, int count);
    public abstract virtual Nullable`1<DateTime> FindPrevious(DateTime moment);
    public abstract virtual Nullable`1<DateTime> FindNext(DateTime moment);
}
public interface Itenso.TimePeriod.IDurationProvider {
    public abstract virtual TimeSpan GetDuration(DateTime start, DateTime end);
}
public enum Itenso.TimePeriod.IntervalEdge : Enum {
    public int value__;
    public static IntervalEdge Closed;
    public static IntervalEdge Open;
}
public class Itenso.TimePeriod.InvalidMomentException : Exception {
    private DateTime moment;
    public DateTime Moment { get; }
    public InvalidMomentException(DateTime moment);
    public InvalidMomentException(DateTime moment, string message);
    public InvalidMomentException(DateTime moment, Exception cause);
    public InvalidMomentException(DateTime moment, string message, Exception cause);
    public DateTime get_Moment();
}
public interface Itenso.TimePeriod.ITimeBlock {
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public TimeSpan Duration { get; public set; }
    public abstract virtual DateTime get_Start();
    public abstract virtual void set_Start(DateTime value);
    public abstract virtual DateTime get_End();
    public abstract virtual void set_End(DateTime value);
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual void set_Duration(TimeSpan value);
    public abstract virtual void Setup(DateTime newStart, TimeSpan newDuration);
    public abstract virtual void Move(TimeSpan delta);
    public abstract virtual void DurationFromStart(TimeSpan newDuration);
    public abstract virtual void DurationFromEnd(TimeSpan newDuration);
    public abstract virtual ITimeBlock Copy(TimeSpan delta);
    public abstract virtual ITimeBlock GetPreviousPeriod(TimeSpan offset);
    public abstract virtual ITimeBlock GetNextPeriod(TimeSpan offset);
    public abstract virtual ITimeBlock GetIntersection(ITimePeriod period);
}
public interface Itenso.TimePeriod.ITimeCalendar {
    public CultureInfo Culture { get; }
    public YearType YearType { get; }
    public TimeSpan StartOffset { get; }
    public TimeSpan EndOffset { get; }
    public YearMonth YearBaseMonth { get; }
    public YearMonth FiscalYearBaseMonth { get; }
    public DayOfWeek FiscalFirstDayOfYear { get; }
    public FiscalYearAlignment FiscalYearAlignment { get; }
    public FiscalQuarterGrouping FiscalQuarterGrouping { get; }
    public DayOfWeek FirstDayOfWeek { get; }
    public YearWeekType YearWeekType { get; }
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual YearType get_YearType();
    public abstract virtual TimeSpan get_StartOffset();
    public abstract virtual TimeSpan get_EndOffset();
    public abstract virtual YearMonth get_YearBaseMonth();
    public abstract virtual YearMonth get_FiscalYearBaseMonth();
    public abstract virtual DayOfWeek get_FiscalFirstDayOfYear();
    public abstract virtual FiscalYearAlignment get_FiscalYearAlignment();
    public abstract virtual FiscalQuarterGrouping get_FiscalQuarterGrouping();
    public abstract virtual DayOfWeek get_FirstDayOfWeek();
    public abstract virtual YearWeekType get_YearWeekType();
    public abstract virtual int GetYear(DateTime time);
    public abstract virtual int GetMonth(DateTime time);
    public abstract virtual int GetHour(DateTime time);
    public abstract virtual int GetMinute(DateTime time);
    public abstract virtual int GetDayOfMonth(DateTime time);
    public abstract virtual DayOfWeek GetDayOfWeek(DateTime time);
    public abstract virtual int GetDaysInMonth(int year, int month);
    public abstract virtual int GetYear(int year, int month);
    public abstract virtual string GetYearName(int year);
    public abstract virtual string GetHalfyearName(YearHalfyear yearHalfyear);
    public abstract virtual string GetHalfyearOfYearName(int year, YearHalfyear yearHalfyear);
    public abstract virtual string GetQuarterName(YearQuarter yearQuarter);
    public abstract virtual string GetQuarterOfYearName(int year, YearQuarter yearQuarter);
    public abstract virtual string GetMonthName(int month);
    public abstract virtual string GetMonthOfYearName(int year, int month);
    public abstract virtual string GetWeekOfYearName(int year, int weekOfYear);
    public abstract virtual string GetDayName(DayOfWeek dayOfWeek);
    public abstract virtual int GetWeekOfYear(DateTime time);
    public abstract virtual DateTime GetStartOfYearWeek(int year, int weekOfYear);
}
public interface Itenso.TimePeriod.ITimeFormatter {
    public CultureInfo Culture { get; }
    public string ListSeparator { get; }
    public string ContextSeparator { get; }
    public string StartEndSeparator { get; }
    public string DurationSeparator { get; }
    public string DurationItemSeparator { get; }
    public string DurationLastItemSeparator { get; }
    public string DurationValueSeparator { get; }
    public string IntervalStartClosed { get; }
    public string IntervalStartOpen { get; }
    public string IntervalStartOpenIso { get; }
    public string IntervalEndClosed { get; }
    public string IntervalEndOpen { get; }
    public string IntervalEndOpenIso { get; }
    public string DateTimeFormat { get; }
    public string ShortDateFormat { get; }
    public string LongTimeFormat { get; }
    public string ShortTimeFormat { get; }
    public DurationFormatType DurationType { get; }
    public bool UseDurationSeconds { get; }
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual string get_ListSeparator();
    public abstract virtual string get_ContextSeparator();
    public abstract virtual string get_StartEndSeparator();
    public abstract virtual string get_DurationSeparator();
    public abstract virtual string get_DurationItemSeparator();
    public abstract virtual string get_DurationLastItemSeparator();
    public abstract virtual string get_DurationValueSeparator();
    public abstract virtual string get_IntervalStartClosed();
    public abstract virtual string get_IntervalStartOpen();
    public abstract virtual string get_IntervalStartOpenIso();
    public abstract virtual string get_IntervalEndClosed();
    public abstract virtual string get_IntervalEndOpen();
    public abstract virtual string get_IntervalEndOpenIso();
    public abstract virtual string get_DateTimeFormat();
    public abstract virtual string get_ShortDateFormat();
    public abstract virtual string get_LongTimeFormat();
    public abstract virtual string get_ShortTimeFormat();
    public abstract virtual DurationFormatType get_DurationType();
    public abstract virtual bool get_UseDurationSeconds();
    public abstract virtual string GetCollection(int count);
    public abstract virtual string GetCollectionPeriod(int count, DateTime start, DateTime end, TimeSpan duration);
    public abstract virtual string GetDateTime(DateTime dateTime);
    public abstract virtual string GetShortDate(DateTime dateTime);
    public abstract virtual string GetLongTime(DateTime dateTime);
    public abstract virtual string GetShortTime(DateTime dateTime);
    public abstract virtual string GetPeriod(DateTime start, DateTime end);
    public abstract virtual string GetDuration(TimeSpan timeSpan);
    public abstract virtual string GetDuration(TimeSpan timeSpan, DurationFormatType durationFormatType);
    public abstract virtual string GetDuration(int years, int months, int days, int hours, int minutes, int seconds);
    public abstract virtual string GetPeriod(DateTime start, DateTime end, TimeSpan duration);
    public abstract virtual string GetInterval(DateTime start, DateTime end, IntervalEdge startEdge, IntervalEdge endEdge, TimeSpan duration);
    public abstract virtual string GetCalendarPeriod(string start, string end, TimeSpan duration);
    public abstract virtual string GetCalendarPeriod(string context, string start, string end, TimeSpan duration);
    public abstract virtual string GetCalendarPeriod(string startContext, string endContext, string start, string end, TimeSpan duration);
}
public interface Itenso.TimePeriod.ITimeInterval {
    public bool IsStartOpen { get; }
    public bool IsEndOpen { get; }
    public bool IsOpen { get; }
    public bool IsStartClosed { get; }
    public bool IsEndClosed { get; }
    public bool IsClosed { get; }
    public bool IsEmpty { get; }
    public bool IsDegenerate { get; }
    public bool IsIntervalEnabled { get; }
    public DateTime StartInterval { get; public set; }
    public DateTime EndInterval { get; public set; }
    public IntervalEdge StartEdge { get; public set; }
    public IntervalEdge EndEdge { get; public set; }
    public abstract virtual bool get_IsStartOpen();
    public abstract virtual bool get_IsEndOpen();
    public abstract virtual bool get_IsOpen();
    public abstract virtual bool get_IsStartClosed();
    public abstract virtual bool get_IsEndClosed();
    public abstract virtual bool get_IsClosed();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual bool get_IsDegenerate();
    public abstract virtual bool get_IsIntervalEnabled();
    public abstract virtual DateTime get_StartInterval();
    public abstract virtual void set_StartInterval(DateTime value);
    public abstract virtual DateTime get_EndInterval();
    public abstract virtual void set_EndInterval(DateTime value);
    public abstract virtual IntervalEdge get_StartEdge();
    public abstract virtual void set_StartEdge(IntervalEdge value);
    public abstract virtual IntervalEdge get_EndEdge();
    public abstract virtual void set_EndEdge(IntervalEdge value);
    public abstract virtual void Move(TimeSpan offset);
    public abstract virtual void ExpandStartTo(DateTime moment);
    public abstract virtual void ExpandEndTo(DateTime moment);
    public abstract virtual void ExpandTo(DateTime moment);
    public abstract virtual void ExpandTo(ITimePeriod period);
    public abstract virtual void ShrinkStartTo(DateTime moment);
    public abstract virtual void ShrinkEndTo(DateTime moment);
    public abstract virtual void ShrinkTo(ITimePeriod period);
    public abstract virtual ITimeInterval Copy(TimeSpan offset);
}
public interface Itenso.TimePeriod.ITimeLine {
    public ITimePeriodContainer Periods { get; }
    public ITimePeriod Limits { get; }
    public ITimePeriodMapper PeriodMapper { get; }
    public abstract virtual ITimePeriodContainer get_Periods();
    public abstract virtual ITimePeriod get_Limits();
    public abstract virtual ITimePeriodMapper get_PeriodMapper();
    public abstract virtual bool HasOverlaps();
    public abstract virtual bool HasGaps();
    public abstract virtual ITimePeriodCollection CombinePeriods();
    public abstract virtual ITimePeriodCollection IntersectPeriods(bool combinePeriods);
    public abstract virtual ITimePeriodCollection CalculateGaps();
}
public interface Itenso.TimePeriod.ITimeLineMoment {
    public DateTime Moment { get; }
    public int BalanceCount { get; }
    public int StartCount { get; }
    public int EndCount { get; }
    public bool IsEmpty { get; }
    public abstract virtual DateTime get_Moment();
    public abstract virtual int get_BalanceCount();
    public abstract virtual int get_StartCount();
    public abstract virtual int get_EndCount();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual void AddStart();
    public abstract virtual void RemoveStart();
    public abstract virtual void AddEnd();
    public abstract virtual void RemoveEnd();
}
[DefaultMemberAttribute("Item")]
public interface Itenso.TimePeriod.ITimeLineMomentCollection {
    public int Count { get; }
    public bool IsEmpty { get; }
    public ITimeLineMoment Min { get; }
    public ITimeLineMoment Max { get; }
    public ITimeLineMoment Item { get; }
    public ITimeLineMoment Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool get_IsEmpty();
    public abstract virtual ITimeLineMoment get_Min();
    public abstract virtual ITimeLineMoment get_Max();
    public abstract virtual ITimeLineMoment get_Item(int index);
    public abstract virtual ITimeLineMoment get_Item(DateTime moment);
    public abstract virtual void Add(ITimePeriod period);
    public abstract virtual void AddAll(IEnumerable`1<ITimePeriod> periods);
    public abstract virtual void Remove(ITimePeriod period);
    public abstract virtual ITimeLineMoment Find(DateTime moment);
    public abstract virtual bool Contains(DateTime moment);
    public abstract virtual bool HasOverlaps();
    public abstract virtual bool HasGaps();
}
public interface Itenso.TimePeriod.ITimePeriod {
    public bool HasStart { get; }
    public DateTime Start { get; }
    public bool HasEnd { get; }
    public DateTime End { get; }
    public TimeSpan Duration { get; }
    public string DurationDescription { get; }
    public bool IsMoment { get; }
    public bool IsAnytime { get; }
    public bool IsReadOnly { get; }
    public abstract virtual bool get_HasStart();
    public abstract virtual DateTime get_Start();
    public abstract virtual bool get_HasEnd();
    public abstract virtual DateTime get_End();
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual string get_DurationDescription();
    public abstract virtual bool get_IsMoment();
    public abstract virtual bool get_IsAnytime();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual TimeSpan GetDuration(IDurationProvider provider);
    public abstract virtual void Setup(DateTime newStart, DateTime newEnd);
    public abstract virtual bool IsSamePeriod(ITimePeriod test);
    public abstract virtual bool HasInside(DateTime test);
    public abstract virtual bool HasInside(ITimePeriod test);
    public abstract virtual bool IntersectsWith(ITimePeriod test);
    public abstract virtual bool OverlapsWith(ITimePeriod test);
    public abstract virtual PeriodRelation GetRelation(ITimePeriod test);
    public abstract virtual int CompareTo(ITimePeriod other, ITimePeriodComparer comparer);
    public abstract virtual string GetDescription(ITimeFormatter formatter);
}
public interface Itenso.TimePeriod.ITimePeriodChain {
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public ITimePeriod First { get; }
    public ITimePeriod Last { get; }
    public abstract virtual DateTime get_Start();
    public abstract virtual void set_Start(DateTime value);
    public abstract virtual DateTime get_End();
    public abstract virtual void set_End(DateTime value);
    public abstract virtual ITimePeriod get_First();
    public abstract virtual ITimePeriod get_Last();
}
public interface Itenso.TimePeriod.ITimePeriodCollection {
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public TimeSpan TotalDuration { get; }
    public abstract virtual DateTime get_Start();
    public abstract virtual void set_Start(DateTime value);
    public abstract virtual DateTime get_End();
    public abstract virtual void set_End(DateTime value);
    public abstract virtual TimeSpan get_TotalDuration();
    public abstract virtual TimeSpan GetTotalDuration(IDurationProvider provider);
    public abstract virtual void SortBy(ITimePeriodComparer comparer);
    public abstract virtual void SortReverseBy(ITimePeriodComparer comparer);
    public abstract virtual void SortByStart(ListSortDirection sortDirection);
    public abstract virtual void SortByEnd(ListSortDirection sortDirection);
    public abstract virtual void SortByDuration(ListSortDirection sortDirection);
    public abstract virtual bool HasInsidePeriods(ITimePeriod test);
    public abstract virtual bool HasOverlaps();
    public abstract virtual bool HasGaps();
    public abstract virtual bool HasOverlapPeriods(ITimePeriod test);
    public abstract virtual bool HasIntersectionPeriods(DateTime test);
    public abstract virtual bool HasIntersectionPeriods(ITimePeriod test);
    public abstract virtual ITimePeriodCollection InsidePeriods(ITimePeriod test);
    public abstract virtual ITimePeriodCollection OverlapPeriods(ITimePeriod test);
    public abstract virtual ITimePeriodCollection IntersectionPeriods(DateTime test);
    public abstract virtual ITimePeriodCollection IntersectionPeriods(ITimePeriod test);
    public abstract virtual ITimePeriodCollection RelationPeriods(ITimePeriod test, PeriodRelation relation);
}
public interface Itenso.TimePeriod.ITimePeriodComparer {
}
public interface Itenso.TimePeriod.ITimePeriodContainer {
    public bool IsReadOnly { get; }
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool ContainsPeriod(ITimePeriod test);
    public abstract virtual void AddAll(IEnumerable`1<ITimePeriod> periods);
    public abstract virtual void Move(TimeSpan delta);
}
public interface Itenso.TimePeriod.ITimePeriodMapper {
    public abstract virtual DateTime MapStart(DateTime moment);
    public abstract virtual DateTime MapEnd(DateTime moment);
    public abstract virtual DateTime UnmapStart(DateTime moment);
    public abstract virtual DateTime UnmapEnd(DateTime moment);
}
public interface Itenso.TimePeriod.ITimeRange {
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public TimeSpan Duration { get; public set; }
    public abstract virtual DateTime get_Start();
    public abstract virtual void set_Start(DateTime value);
    public abstract virtual DateTime get_End();
    public abstract virtual void set_End(DateTime value);
    public abstract virtual TimeSpan get_Duration();
    public abstract virtual void set_Duration(TimeSpan value);
    public abstract virtual void Move(TimeSpan offset);
    public abstract virtual void ExpandStartTo(DateTime moment);
    public abstract virtual void ExpandEndTo(DateTime moment);
    public abstract virtual void ExpandTo(DateTime moment);
    public abstract virtual void ExpandTo(ITimePeriod period);
    public abstract virtual void ShrinkStartTo(DateTime moment);
    public abstract virtual void ShrinkEndTo(DateTime moment);
    public abstract virtual void ShrinkTo(ITimePeriod period);
    public abstract virtual ITimeRange Copy(TimeSpan offset);
    public abstract virtual ITimeRange GetIntersection(ITimePeriod period);
}
public enum Itenso.TimePeriod.ListSortDirection : Enum {
    public int value__;
    public static ListSortDirection Ascending;
    public static ListSortDirection Descending;
}
public class Itenso.TimePeriod.Minute : MinuteTimeRange {
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int MinuteValue { get; }
    public Minute(ITimeCalendar calendar);
    public Minute(DateTime moment);
    public Minute(DateTime moment, ITimeCalendar calendar);
    public Minute(int year, int month, int day, int hour, int minute);
    public Minute(int year, int month, int day, int hour, int minute, ITimeCalendar calendar);
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_MinuteValue();
    public Minute GetPreviousMinute();
    public Minute GetNextMinute();
    public Minute AddMinutes(int minutes);
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.Minutes : MinuteTimeRange {
    public Minutes(DateTime moment, int count);
    public Minutes(DateTime moment, int count, ITimeCalendar calendar);
    public Minutes(int startYear, int startMonth, int startDay, int startHour, int startMinute, int minuteCount);
    public Minutes(int startYear, int startMonth, int startDay, int startHour, int startMinute, int minuteCount, ITimeCalendar calendar);
    public ITimePeriodCollection GetMinutes();
    protected virtual string Format(ITimeFormatter formatter);
}
public abstract class Itenso.TimePeriod.MinuteTimeRange : CalendarTimeRange {
    private DateTime startMinute;
    private int minuteCount;
    private DateTime endMinute;
    public int StartYear { get; }
    public int StartMonth { get; }
    public int StartDay { get; }
    public int StartHour { get; }
    public int StartMinute { get; }
    public int EndYear { get; }
    public int EndMonth { get; }
    public int EndDay { get; }
    public int EndHour { get; }
    public int EndMinute { get; }
    public int MinuteCount { get; }
    protected MinuteTimeRange(int startYear, int startMonth, int startDay, int startHour, int startMinute, int minuteCount);
    protected MinuteTimeRange(int startYear, int startMonth, int startDay, int startHour, int startMinute, int minuteCount, ITimeCalendar calendar);
    public int get_StartYear();
    public int get_StartMonth();
    public int get_StartDay();
    public int get_StartHour();
    public int get_StartMinute();
    public int get_EndYear();
    public int get_EndMonth();
    public int get_EndDay();
    public int get_EndHour();
    public int get_EndMinute();
    public int get_MinuteCount();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(MinuteTimeRange comp);
    protected virtual int ComputeHashCode();
    private static TimeRange GetPeriodOf(int year, int month, int day, int hour, int minute, int minuteCount);
}
public class Itenso.TimePeriod.Month : MonthTimeRange {
    public int Year { get; }
    public YearMonth YearMonth { get; }
    public int MonthValue { get; }
    public string MonthName { get; }
    public string MonthOfYearName { get; }
    public int DaysInMonth { get; }
    public Month(ITimeCalendar calendar);
    public Month(DateTime moment);
    public Month(DateTime moment, ITimeCalendar calendar);
    public Month(int year, YearMonth yearMonth);
    public Month(int year, YearMonth yearMonth, ITimeCalendar calendar);
    public int get_Year();
    public YearMonth get_YearMonth();
    public int get_MonthValue();
    public string get_MonthName();
    public string get_MonthOfYearName();
    public int get_DaysInMonth();
    public Month GetPreviousMonth();
    public Month GetNextMonth();
    public Month AddMonths(int months);
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.MonthRange : ValueType {
    private YearMonth min;
    private YearMonth max;
    public YearMonth Min { get; }
    public YearMonth Max { get; }
    public bool IsSingleMonth { get; }
    public MonthRange(YearMonth month);
    public MonthRange(YearMonth min, YearMonth max);
    public YearMonth get_Min();
    public YearMonth get_Max();
    public bool get_IsSingleMonth();
    public bool HasInside(YearMonth test);
}
public class Itenso.TimePeriod.Months : MonthTimeRange {
    public Months(DateTime moment, YearMonth startMonth, int count);
    public Months(DateTime moment, YearMonth startMonth, int count, ITimeCalendar calendar);
    public Months(int startYear, YearMonth startMonth, int monthCounth);
    public Months(int startYear, YearMonth startMonth, int monthCount, ITimeCalendar calendar);
    public ITimePeriodCollection GetMonths();
    protected virtual string Format(ITimeFormatter formatter);
}
public abstract class Itenso.TimePeriod.MonthTimeRange : CalendarTimeRange {
    private int startYear;
    private YearMonth startMonth;
    private int monthCount;
    private int endYear;
    private YearMonth endMonth;
    public int StartYear { get; }
    public int EndYear { get; }
    public YearMonth StartMonth { get; }
    public YearMonth EndMonth { get; }
    public int MonthCount { get; }
    public string StartMonthName { get; }
    public string StartMonthOfYearName { get; }
    public string EndMonthName { get; }
    public string EndMonthOfYearName { get; }
    protected MonthTimeRange(int startYear, YearMonth startMonth, int monthCounth);
    protected MonthTimeRange(int startYear, YearMonth startMonth, int monthCount, ITimeCalendar calendar);
    public int get_StartYear();
    public int get_EndYear();
    public YearMonth get_StartMonth();
    public YearMonth get_EndMonth();
    public int get_MonthCount();
    public string get_StartMonthName();
    public string get_StartMonthOfYearName();
    public string get_EndMonthName();
    public string get_EndMonthOfYearName();
    public ITimePeriodCollection GetDays();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(MonthTimeRange comp);
    protected virtual int ComputeHashCode();
    private static DateTime GetStartOfMonth(ITimeCalendar calendar, int year, YearMonth month);
    private static TimeRange GetPeriodOf(ITimeCalendar calendar, int startYear, YearMonth startMonth, int monthCount);
}
public static class Itenso.TimePeriod.Now : object {
    public static DateTime CalendarYear { get; }
    public static DateTime CalendarHalfyear { get; }
    public static DateTime CalendarQuarter { get; }
    public static DateTime Month { get; }
    public static YearMonth YearMonth { get; }
    public static DateTime Today { get; }
    public static DateTime Hour { get; }
    public static DateTime Minute { get; }
    public static DateTime Second { get; }
    public static DateTime get_CalendarYear();
    public static DateTime Year(YearMonth yearStartMonth);
    public static DateTime get_CalendarHalfyear();
    public static DateTime Halfyear(YearMonth yearStartMonth);
    public static DateTime get_CalendarQuarter();
    public static DateTime Quarter(YearMonth yearStartMonth);
    public static DateTime get_Month();
    public static YearMonth get_YearMonth();
    public static DateTime Week();
    public static DateTime Week(DayOfWeek firstDayOfWeek);
    public static DateTime get_Today();
    public static DateTime get_Hour();
    public static DateTime get_Minute();
    public static DateTime get_Second();
}
public enum Itenso.TimePeriod.PeriodRelation : Enum {
    public int value__;
    public static PeriodRelation After;
    public static PeriodRelation StartTouching;
    public static PeriodRelation StartInside;
    public static PeriodRelation InsideStartTouching;
    public static PeriodRelation EnclosingStartTouching;
    public static PeriodRelation Enclosing;
    public static PeriodRelation EnclosingEndTouching;
    public static PeriodRelation ExactMatch;
    public static PeriodRelation Inside;
    public static PeriodRelation InsideEndTouching;
    public static PeriodRelation EndInside;
    public static PeriodRelation EndTouching;
    public static PeriodRelation Before;
}
public class Itenso.TimePeriod.Quarter : QuarterTimeRange {
    public int Year { get; }
    public YearMonth StartMonth { get; }
    public YearQuarter YearQuarter { get; }
    public string QuarterName { get; }
    public string QuarterOfYearName { get; }
    public bool IsCalendarQuarter { get; }
    public bool MultipleCalendarYears { get; }
    public Quarter(ITimeCalendar calendar);
    public Quarter(DateTime moment);
    public Quarter(DateTime moment, ITimeCalendar calendar);
    public Quarter(int baseYear, YearQuarter yearQuarter);
    public Quarter(int baseYear, YearQuarter yearQuarter, ITimeCalendar calendar);
    public int get_Year();
    public YearMonth get_StartMonth();
    public YearQuarter get_YearQuarter();
    public string get_QuarterName();
    public string get_QuarterOfYearName();
    public bool get_IsCalendarQuarter();
    public bool get_MultipleCalendarYears();
    public Quarter GetPreviousQuarter();
    public Quarter GetNextQuarter();
    public Quarter AddQuarters(int count);
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.Quarters : QuarterTimeRange {
    public Quarters(DateTime moment, YearQuarter startYearQuarter, int count);
    public Quarters(DateTime moment, YearQuarter startYearQuarter, int count, ITimeCalendar calendar);
    public Quarters(int startYear, YearQuarter startYearQuarter, int quarterCount);
    public Quarters(int startYear, YearQuarter startYearQuarter, int quarterCount, ITimeCalendar calendar);
    public ITimePeriodCollection GetQuarters();
    protected virtual string Format(ITimeFormatter formatter);
}
public abstract class Itenso.TimePeriod.QuarterTimeRange : CalendarTimeRange {
    private int startYear;
    private YearQuarter startQuarter;
    private int quarterCount;
    private int endYear;
    private YearQuarter endQuarter;
    public int BaseYear { get; }
    public int StartYear { get; }
    public int EndYear { get; }
    public YearQuarter StartQuarter { get; }
    public YearQuarter EndQuarter { get; }
    public int QuarterCount { get; }
    public string StartQuarterName { get; }
    public string StartQuarterOfYearName { get; }
    public string EndQuarterName { get; }
    public string EndQuarterOfYearName { get; }
    protected QuarterTimeRange(int startYear, YearQuarter startQuarter, int quarterCount);
    protected QuarterTimeRange(int startYear, YearQuarter startQuarter, int quarterCount, ITimeCalendar calendar);
    public virtual int get_BaseYear();
    public int get_StartYear();
    public int get_EndYear();
    public YearQuarter get_StartQuarter();
    public YearQuarter get_EndQuarter();
    public int get_QuarterCount();
    public string get_StartQuarterName();
    public string get_StartQuarterOfYearName();
    public string get_EndQuarterName();
    public string get_EndQuarterOfYearName();
    public ITimePeriodCollection GetMonths();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(QuarterTimeRange comp);
    protected virtual int ComputeHashCode();
    private static DateTime GetStartOfQuarter(ITimeCalendar calendar, int year, YearQuarter quarter);
    private static TimeRange GetPeriodOf(ITimeCalendar calendar, int startYear, YearQuarter startQuarter, int quarterCount);
}
public enum Itenso.TimePeriod.SeekBoundaryMode : Enum {
    public int value__;
    public static SeekBoundaryMode Fill;
    public static SeekBoundaryMode Next;
}
public enum Itenso.TimePeriod.SeekDirection : Enum {
    public int value__;
    public static SeekDirection Forward;
    public static SeekDirection Backward;
}
public class Itenso.TimePeriod.StaticClock : object {
    private DateTime now;
    public DateTime Now { get; }
    public StaticClock(DateTime now);
    public sealed virtual DateTime get_Now();
}
internal class Itenso.TimePeriod.Strings : object {
    private static ResourceManager inst;
    public static string TimeSpanYears { get; }
    public static string TimeSpanYear { get; }
    public static string TimeSpanMonths { get; }
    public static string TimeSpanMonth { get; }
    public static string TimeSpanWeeks { get; }
    public static string TimeSpanWeek { get; }
    public static string TimeSpanDays { get; }
    public static string TimeSpanDay { get; }
    public static string TimeSpanHours { get; }
    public static string TimeSpanHour { get; }
    public static string TimeSpanMinutes { get; }
    public static string TimeSpanMinute { get; }
    public static string TimeSpanSeconds { get; }
    public static string TimeSpanSecond { get; }
    private static Strings();
    public static string SystemYearName(int year);
    public static string CalendarYearName(int year);
    public static string FiscalYearName(int year);
    public static string SchoolYearName(int year);
    public static string SystemHalfyearName(YearHalfyear yearHalfyear);
    public static string CalendarHalfyearName(YearHalfyear yearHalfyear);
    public static string FiscalHalfyearName(YearHalfyear yearHalfyear);
    public static string SchoolHalfyearName(YearHalfyear yearHalfyear);
    public static string SystemHalfyearOfYearName(YearHalfyear yearHalfyear, int year);
    public static string CalendarHalfyearOfYearName(YearHalfyear yearHalfyear, int year);
    public static string FiscalHalfyearOfYearName(YearHalfyear yearHalfyear, int year);
    public static string SchoolHalfyearOfYearName(YearHalfyear yearHalfyear, int year);
    public static string SystemQuarterName(YearQuarter yearQuarter);
    public static string CalendarQuarterName(YearQuarter yearQuarter);
    public static string FiscalQuarterName(YearQuarter yearQuarter);
    public static string SchoolQuarterName(YearQuarter yearQuarter);
    public static string SystemQuarterOfYearName(YearQuarter yearQuarter, int year);
    public static string CalendarQuarterOfYearName(YearQuarter yearQuarter, int year);
    public static string FiscalQuarterOfYearName(YearQuarter yearQuarter, int year);
    public static string SchoolQuarterOfYearName(YearQuarter yearQuarter, int year);
    public static string MonthOfYearName(string monthName, string yearName);
    public static string WeekOfYearName(int weekOfYear, string yearName);
    public static string get_TimeSpanYears();
    public static string get_TimeSpanYear();
    public static string get_TimeSpanMonths();
    public static string get_TimeSpanMonth();
    public static string get_TimeSpanWeeks();
    public static string get_TimeSpanWeek();
    public static string get_TimeSpanDays();
    public static string get_TimeSpanDay();
    public static string get_TimeSpanHours();
    public static string get_TimeSpanHour();
    public static string get_TimeSpanMinutes();
    public static string get_TimeSpanMinute();
    public static string get_TimeSpanSeconds();
    public static string get_TimeSpanSecond();
    private static string Format(string format, Object[] args);
    private static ResourceManager NewInst(Type singletonType);
}
public class Itenso.TimePeriod.SystemClock : object {
    public DateTime Now { get; }
    public sealed virtual DateTime get_Now();
}
public class Itenso.TimePeriod.Time : ValueType {
    private TimeSpan duration;
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Millisecond { get; }
    public TimeSpan Duration { get; }
    public bool IsZero { get; }
    public bool IsFullDay { get; }
    public bool IsFullDayOrZero { get; }
    public long Ticks { get; }
    public double TotalHours { get; }
    public double TotalMinutes { get; }
    public double TotalSeconds { get; }
    public double TotalMilliseconds { get; }
    public Time(DateTime dateTime);
    public Time(TimeSpan duration);
    public Time(int hour, int minute, int second, int millisecond);
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Millisecond();
    public TimeSpan get_Duration();
    public bool get_IsZero();
    public bool get_IsFullDay();
    public bool get_IsFullDayOrZero();
    public long get_Ticks();
    public double get_TotalHours();
    public double get_TotalMinutes();
    public double get_TotalSeconds();
    public double get_TotalMilliseconds();
    public sealed virtual int CompareTo(Time other);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual bool Equals(Time other);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static TimeSpan op_Subtraction(Time time1, Time time2);
    public static Time op_Subtraction(Time time, TimeSpan duration);
    public static TimeSpan op_Addition(Time time1, Time time2);
    public static Time op_Addition(Time time, TimeSpan duration);
    public static bool op_LessThan(Time time1, Time time2);
    public static bool op_LessThanOrEqual(Time time1, Time time2);
    public static bool op_Equality(Time left, Time right);
    public static bool op_Inequality(Time left, Time right);
    public static bool op_GreaterThan(Time time1, Time time2);
    public static bool op_GreaterThanOrEqual(Time time1, Time time2);
    public DateTime ToDateTime(Date date);
    public DateTime ToDateTime(DateTime dateTime);
    public static DateTime ToDateTime(Date date, Time time);
    public static DateTime ToDateTime(DateTime dateTime, Time time);
}
public class Itenso.TimePeriod.TimeBlock : object {
    public static TimeBlock Anytime;
    private bool isReadOnly;
    private DateTime start;
    private TimeSpan duration;
    private DateTime end;
    public bool IsReadOnly { get; }
    public bool IsAnytime { get; }
    public bool IsMoment { get; }
    public bool HasStart { get; }
    public DateTime Start { get; public set; }
    public bool HasEnd { get; }
    public DateTime End { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string DurationDescription { get; }
    internal TimeBlock(bool isReadOnly);
    public TimeBlock(DateTime moment, bool isReadOnly);
    public TimeBlock(DateTime start, DateTime end, bool isReadOnly);
    public TimeBlock(DateTime start, TimeSpan duration, bool isReadOnly);
    public TimeBlock(TimeSpan duration, DateTime end, bool isReadOnly);
    public TimeBlock(ITimePeriod copy);
    protected TimeBlock(ITimePeriod copy, bool isReadOnly);
    private static TimeBlock();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsAnytime();
    public sealed virtual bool get_IsMoment();
    public sealed virtual bool get_HasStart();
    public sealed virtual DateTime get_Start();
    public sealed virtual void set_Start(DateTime value);
    public sealed virtual bool get_HasEnd();
    public sealed virtual DateTime get_End();
    public sealed virtual void set_End(DateTime value);
    public sealed virtual TimeSpan get_Duration();
    public sealed virtual void set_Duration(TimeSpan value);
    public sealed virtual string get_DurationDescription();
    public virtual TimeSpan GetDuration(IDurationProvider provider);
    public virtual void Setup(DateTime newStart, DateTime newEnd);
    public virtual void Setup(DateTime newStart, TimeSpan newDuration);
    public ITimeBlock Copy();
    public virtual ITimeBlock Copy(TimeSpan offset);
    public virtual void Move(TimeSpan offset);
    public ITimeBlock GetPreviousPeriod();
    public virtual ITimeBlock GetPreviousPeriod(TimeSpan offset);
    public ITimeBlock GetNextPeriod();
    public virtual ITimeBlock GetNextPeriod(TimeSpan offset);
    public virtual void DurationFromStart(TimeSpan newDuration);
    public virtual void DurationFromEnd(TimeSpan newDuration);
    public virtual bool IsSamePeriod(ITimePeriod test);
    public virtual bool HasInside(DateTime test);
    public virtual bool HasInside(ITimePeriod test);
    public virtual bool IntersectsWith(ITimePeriod test);
    public virtual ITimeBlock GetIntersection(ITimePeriod period);
    public virtual bool OverlapsWith(ITimePeriod test);
    public virtual PeriodRelation GetRelation(ITimePeriod test);
    public virtual int CompareTo(ITimePeriod other, ITimePeriodComparer comparer);
    public virtual void Reset();
    public sealed virtual string GetDescription(ITimeFormatter formatter);
    protected virtual string Format(ITimeFormatter formatter);
    public virtual string ToString();
    public sealed virtual bool Equals(object obj);
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(TimeBlock comp);
    public sealed virtual int GetHashCode();
    protected virtual int ComputeHashCode();
    protected void CheckModification();
}
public class Itenso.TimePeriod.TimeCalendar : object {
    public static TimeSpan DefaultStartOffset;
    public static TimeSpan DefaultEndOffset;
    private CultureInfo culture;
    private YearType yearType;
    private TimeSpan startOffset;
    private TimeSpan endOffset;
    private YearMonth yearBaseMonth;
    private YearMonth fiscalYearBaseMonth;
    private DayOfWeek fiscalFirstDayOfYear;
    private FiscalYearAlignment fiscalYearAlignment;
    private FiscalQuarterGrouping fiscalQuarterGrouping;
    private YearWeekType yearWeekType;
    private CalendarNameType dayNameType;
    private CalendarNameType monthNameType;
    public CultureInfo Culture { get; }
    public YearType YearType { get; }
    public TimeSpan StartOffset { get; }
    public TimeSpan EndOffset { get; }
    public YearMonth YearBaseMonth { get; }
    public YearMonth FiscalYearBaseMonth { get; }
    public DayOfWeek FiscalFirstDayOfYear { get; }
    public FiscalYearAlignment FiscalYearAlignment { get; }
    public FiscalQuarterGrouping FiscalQuarterGrouping { get; }
    public DayOfWeek FirstDayOfWeek { get; }
    public YearWeekType YearWeekType { get; }
    public TimeCalendar(TimeCalendarConfig config);
    private static TimeCalendar();
    public sealed virtual CultureInfo get_Culture();
    public sealed virtual YearType get_YearType();
    public sealed virtual TimeSpan get_StartOffset();
    public sealed virtual TimeSpan get_EndOffset();
    public sealed virtual YearMonth get_YearBaseMonth();
    public sealed virtual YearMonth get_FiscalYearBaseMonth();
    public sealed virtual DayOfWeek get_FiscalFirstDayOfYear();
    public sealed virtual FiscalYearAlignment get_FiscalYearAlignment();
    public sealed virtual FiscalQuarterGrouping get_FiscalQuarterGrouping();
    public virtual DayOfWeek get_FirstDayOfWeek();
    public sealed virtual YearWeekType get_YearWeekType();
    public static TimeCalendar New(CultureInfo culture);
    public static TimeCalendar New(YearMonth yearBaseMonth);
    public static TimeCalendar New(TimeSpan startOffset, TimeSpan endOffset);
    public static TimeCalendar New(TimeSpan startOffset, TimeSpan endOffset, YearMonth yearBaseMonth);
    public static TimeCalendar New(CultureInfo culture, TimeSpan startOffset, TimeSpan endOffset);
    public static TimeCalendar New(CultureInfo culture, YearMonth yearBaseMonth, YearWeekType yearWeekType);
    public static TimeCalendar NewEmptyOffset();
    public virtual DateTime MapStart(DateTime moment);
    public virtual DateTime MapEnd(DateTime moment);
    public virtual DateTime UnmapStart(DateTime moment);
    public virtual DateTime UnmapEnd(DateTime moment);
    public virtual int GetYear(DateTime time);
    public virtual int GetMonth(DateTime time);
    public virtual int GetHour(DateTime time);
    public virtual int GetMinute(DateTime time);
    public virtual int GetDayOfMonth(DateTime time);
    public virtual DayOfWeek GetDayOfWeek(DateTime time);
    public virtual int GetDaysInMonth(int year, int month);
    public sealed virtual int GetYear(int year, int month);
    public virtual string GetYearName(int year);
    public virtual string GetHalfyearName(YearHalfyear yearHalfyear);
    public virtual string GetHalfyearOfYearName(int year, YearHalfyear yearHalfyear);
    public virtual string GetQuarterName(YearQuarter yearQuarter);
    public virtual string GetQuarterOfYearName(int year, YearQuarter yearQuarter);
    public virtual string GetMonthName(int month);
    public virtual string GetMonthOfYearName(int year, int month);
    public virtual string GetWeekOfYearName(int year, int weekOfYear);
    public virtual string GetDayName(DayOfWeek dayOfWeek);
    public virtual int GetWeekOfYear(DateTime time);
    public virtual DateTime GetStartOfYearWeek(int year, int weekOfYear);
    public sealed virtual bool Equals(object obj);
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(TimeCalendar comp);
    public sealed virtual int GetHashCode();
    protected virtual int ComputeHashCode();
}
public class Itenso.TimePeriod.TimeCalendarConfig : ValueType {
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<YearType> <YearType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <StartOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <EndOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<YearMonth> <YearBaseMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<YearMonth> <FiscalYearBaseMonth>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DayOfWeek> <FiscalFirstDayOfYear>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FiscalYearAlignment> <FiscalYearAlignment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<FiscalQuarterGrouping> <FiscalQuarterGrouping>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<YearWeekType> <YearWeekType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CalendarNameType> <DayNameType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CalendarNameType> <MonthNameType>k__BackingField;
    public CultureInfo Culture { get; public set; }
    public Nullable`1<YearType> YearType { get; public set; }
    public Nullable`1<TimeSpan> StartOffset { get; public set; }
    public Nullable`1<TimeSpan> EndOffset { get; public set; }
    public Nullable`1<YearMonth> YearBaseMonth { get; public set; }
    public Nullable`1<YearMonth> FiscalYearBaseMonth { get; public set; }
    public Nullable`1<DayOfWeek> FiscalFirstDayOfYear { get; public set; }
    public Nullable`1<FiscalYearAlignment> FiscalYearAlignment { get; public set; }
    public Nullable`1<FiscalQuarterGrouping> FiscalQuarterGrouping { get; public set; }
    public Nullable`1<YearWeekType> YearWeekType { get; public set; }
    public Nullable`1<CalendarNameType> DayNameType { get; public set; }
    public Nullable`1<CalendarNameType> MonthNameType { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(CultureInfo value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<YearType> get_YearType();
    [CompilerGeneratedAttribute]
public void set_YearType(Nullable`1<YearType> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_StartOffset();
    [CompilerGeneratedAttribute]
public void set_StartOffset(Nullable`1<TimeSpan> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_EndOffset();
    [CompilerGeneratedAttribute]
public void set_EndOffset(Nullable`1<TimeSpan> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<YearMonth> get_YearBaseMonth();
    [CompilerGeneratedAttribute]
public void set_YearBaseMonth(Nullable`1<YearMonth> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<YearMonth> get_FiscalYearBaseMonth();
    [CompilerGeneratedAttribute]
public void set_FiscalYearBaseMonth(Nullable`1<YearMonth> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<DayOfWeek> get_FiscalFirstDayOfYear();
    [CompilerGeneratedAttribute]
public void set_FiscalFirstDayOfYear(Nullable`1<DayOfWeek> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<FiscalYearAlignment> get_FiscalYearAlignment();
    [CompilerGeneratedAttribute]
public void set_FiscalYearAlignment(Nullable`1<FiscalYearAlignment> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<FiscalQuarterGrouping> get_FiscalQuarterGrouping();
    [CompilerGeneratedAttribute]
public void set_FiscalQuarterGrouping(Nullable`1<FiscalQuarterGrouping> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<YearWeekType> get_YearWeekType();
    [CompilerGeneratedAttribute]
public void set_YearWeekType(Nullable`1<YearWeekType> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<CalendarNameType> get_DayNameType();
    [CompilerGeneratedAttribute]
public void set_DayNameType(Nullable`1<CalendarNameType> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<CalendarNameType> get_MonthNameType();
    [CompilerGeneratedAttribute]
public void set_MonthNameType(Nullable`1<CalendarNameType> value);
}
public static class Itenso.TimePeriod.TimeCompare : object {
    public static bool IsSameYear(DateTime left, DateTime right);
    public static bool IsSameYear(YearMonth yearStartMonth, DateTime left, DateTime right);
    public static bool IsSameHalfyear(DateTime left, DateTime right);
    public static bool IsSameHalfyear(YearMonth yearStartMonth, DateTime left, DateTime right);
    public static bool IsSameQuarter(DateTime left, DateTime right);
    public static bool IsSameQuarter(YearMonth yearStartMonth, DateTime left, DateTime right);
    public static bool IsSameMonth(DateTime left, DateTime right);
    public static bool IsSameWeek(DateTime left, DateTime right, CultureInfo culture, YearWeekType weekType);
    public static bool IsSameWeek(DateTime left, DateTime right, CultureInfo culture, CalendarWeekRule weekRule, DayOfWeek firstDayOfWeek, YearWeekType weekType);
    public static bool IsSameDay(DateTime left, DateTime right);
    public static bool IsSameHour(DateTime left, DateTime right);
    public static bool IsSameMinute(DateTime left, DateTime right);
    public static bool IsSameSecond(DateTime left, DateTime right);
}
public class Itenso.TimePeriod.TimeFormatter : object {
    private CultureInfo culture;
    private string listSeparator;
    private string contextSeparator;
    private string startEndSeparator;
    private string durationSeparator;
    private string durationItemSeparator;
    private string durationLastItemSeparator;
    private string durationValueSeparator;
    private string intervalStartClosed;
    private string intervalStartOpen;
    private string intervalStartOpenIso;
    private string intervalEndClosed;
    private string intervalEndOpen;
    private string intervalEndOpenIso;
    private string dateTimeFormat;
    private string shortDateFormat;
    private string longTimeFormat;
    private string shortTimeFormat;
    private DurationFormatType durationType;
    private bool useDurationSeconds;
    private bool useIsoIntervalNotation;
    private static object mutex;
    private static TimeFormatter modreq(System.Runtime.CompilerServices.IsVolatile) instance;
    public static TimeFormatter Instance { get; public set; }
    public CultureInfo Culture { get; }
    public string ListSeparator { get; }
    public string ContextSeparator { get; }
    public string StartEndSeparator { get; }
    public string DurationSeparator { get; }
    public string DurationItemSeparator { get; }
    public string DurationLastItemSeparator { get; }
    public string DurationValueSeparator { get; }
    public string IntervalStartClosed { get; }
    public string IntervalStartOpen { get; }
    public string IntervalStartOpenIso { get; }
    public string IntervalEndClosed { get; }
    public string IntervalEndOpen { get; }
    public string IntervalEndOpenIso { get; }
    public string DateTimeFormat { get; }
    public string ShortDateFormat { get; }
    public string LongTimeFormat { get; }
    public string ShortTimeFormat { get; }
    public DurationFormatType DurationType { get; }
    public bool UseDurationSeconds { get; }
    public bool UseIsoIntervalNotation { get; }
    public TimeFormatter(CultureInfo culture, string contextSeparator, string startEndSeparator, string durationSeparator, string dateTimeFormat, string shortDateFormat, string longTimeFormat, string shortTimeFormat, DurationFormatType durationType, bool useDurationSeconds, bool useIsoIntervalNotation, string durationItemSeparator, string durationLastItemSeparator, string durationValueSeparator, string intervalStartClosed, string intervalStartOpen, string intervalStartOpenIso, string intervalEndClosed, string intervalEndOpen, string intervalEndOpenIso);
    private static TimeFormatter();
    public static TimeFormatter get_Instance();
    public static void set_Instance(TimeFormatter value);
    public sealed virtual CultureInfo get_Culture();
    public sealed virtual string get_ListSeparator();
    public sealed virtual string get_ContextSeparator();
    public sealed virtual string get_StartEndSeparator();
    public sealed virtual string get_DurationSeparator();
    public sealed virtual string get_DurationItemSeparator();
    public sealed virtual string get_DurationLastItemSeparator();
    public sealed virtual string get_DurationValueSeparator();
    public sealed virtual string get_IntervalStartClosed();
    public sealed virtual string get_IntervalStartOpen();
    public sealed virtual string get_IntervalStartOpenIso();
    public sealed virtual string get_IntervalEndClosed();
    public sealed virtual string get_IntervalEndOpen();
    public sealed virtual string get_IntervalEndOpenIso();
    public sealed virtual string get_DateTimeFormat();
    public sealed virtual string get_ShortDateFormat();
    public sealed virtual string get_LongTimeFormat();
    public sealed virtual string get_ShortTimeFormat();
    public sealed virtual DurationFormatType get_DurationType();
    public sealed virtual bool get_UseDurationSeconds();
    public bool get_UseIsoIntervalNotation();
    public virtual string GetCollection(int count);
    public virtual string GetCollectionPeriod(int count, DateTime start, DateTime end, TimeSpan duration);
    public sealed virtual string GetDateTime(DateTime dateTime);
    public sealed virtual string GetShortDate(DateTime dateTime);
    public sealed virtual string GetLongTime(DateTime dateTime);
    public sealed virtual string GetShortTime(DateTime dateTime);
    public sealed virtual string GetPeriod(DateTime start, DateTime end);
    public sealed virtual string GetDuration(TimeSpan timeSpan);
    public sealed virtual string GetDuration(TimeSpan timeSpan, DurationFormatType durationFormatType);
    public virtual string GetDuration(int years, int months, int days, int hours, int minutes, int seconds);
    public virtual string GetPeriod(DateTime start, DateTime end, TimeSpan duration);
    public sealed virtual string GetCalendarPeriod(string start, string end, TimeSpan duration);
    public sealed virtual string GetCalendarPeriod(string context, string start, string end, TimeSpan duration);
    public sealed virtual string GetCalendarPeriod(string startContext, string endContext, string start, string end, TimeSpan duration);
    public sealed virtual string GetInterval(DateTime start, DateTime end, IntervalEdge startEdge, IntervalEdge endEdge, TimeSpan duration);
}
public class Itenso.TimePeriod.TimeGapCalculator`1 : object {
    private ITimePeriodMapper periodMapper;
    public ITimePeriodMapper PeriodMapper { get; }
    public TimeGapCalculator`1(ITimePeriodMapper periodMapper);
    public ITimePeriodMapper get_PeriodMapper();
    public virtual ITimePeriodCollection GetGaps(ITimePeriodContainer periods, ITimePeriod limits);
}
public class Itenso.TimePeriod.TimeInterval : object {
    public static TimeInterval Anytime;
    private bool isReadOnly;
    private bool isIntervalEnabled;
    private DateTime startInterval;
    private DateTime endInterval;
    private IntervalEdge startEdge;
    private IntervalEdge endEdge;
    public bool IsReadOnly { get; }
    public bool IsAnytime { get; }
    public bool IsMoment { get; }
    public bool IsStartOpen { get; }
    public bool IsEndOpen { get; }
    public bool IsOpen { get; }
    public bool IsStartClosed { get; }
    public bool IsEndClosed { get; }
    public bool IsClosed { get; }
    public bool IsEmpty { get; }
    public bool IsDegenerate { get; }
    public bool IsIntervalEnabled { get; public set; }
    public bool HasStart { get; }
    public DateTime StartInterval { get; public set; }
    public DateTime Start { get; }
    public IntervalEdge StartEdge { get; public set; }
    public bool HasEnd { get; }
    public DateTime EndInterval { get; public set; }
    public DateTime End { get; }
    public IntervalEdge EndEdge { get; public set; }
    public TimeSpan Duration { get; }
    public string DurationDescription { get; }
    public TimeInterval(DateTime moment, IntervalEdge startEdge, IntervalEdge endEdge, bool isIntervalEnabled, bool isReadOnly);
    public TimeInterval(DateTime startInterval, DateTime endInterval, IntervalEdge startEdge, IntervalEdge endEdge, bool isIntervalEnabled, bool isReadOnly);
    public TimeInterval(ITimePeriod copy);
    protected TimeInterval(ITimePeriod copy, bool isReadOnly);
    private static TimeInterval();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsAnytime();
    public sealed virtual bool get_IsMoment();
    public sealed virtual bool get_IsStartOpen();
    public sealed virtual bool get_IsEndOpen();
    public sealed virtual bool get_IsOpen();
    public sealed virtual bool get_IsStartClosed();
    public sealed virtual bool get_IsEndClosed();
    public sealed virtual bool get_IsClosed();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual bool get_IsDegenerate();
    public sealed virtual bool get_IsIntervalEnabled();
    public void set_IsIntervalEnabled(bool value);
    public sealed virtual bool get_HasStart();
    public sealed virtual DateTime get_StartInterval();
    public sealed virtual void set_StartInterval(DateTime value);
    public sealed virtual DateTime get_Start();
    public sealed virtual IntervalEdge get_StartEdge();
    public sealed virtual void set_StartEdge(IntervalEdge value);
    public sealed virtual bool get_HasEnd();
    public sealed virtual DateTime get_EndInterval();
    public sealed virtual void set_EndInterval(DateTime value);
    public sealed virtual DateTime get_End();
    public sealed virtual IntervalEdge get_EndEdge();
    public sealed virtual void set_EndEdge(IntervalEdge value);
    public sealed virtual TimeSpan get_Duration();
    public sealed virtual string get_DurationDescription();
    public virtual TimeSpan GetDuration(IDurationProvider provider);
    public virtual void Setup(DateTime newStartInterval, DateTime newEndInterval);
    public virtual bool IsSamePeriod(ITimePeriod test);
    public virtual bool HasInside(DateTime test);
    public virtual bool HasInside(ITimePeriod test);
    public ITimeInterval Copy();
    public virtual ITimeInterval Copy(TimeSpan offset);
    public virtual void Move(TimeSpan offset);
    public virtual void ExpandStartTo(DateTime moment);
    public virtual void ExpandEndTo(DateTime moment);
    public sealed virtual void ExpandTo(DateTime moment);
    public sealed virtual void ExpandTo(ITimePeriod period);
    public virtual void ShrinkStartTo(DateTime moment);
    public virtual void ShrinkEndTo(DateTime moment);
    public sealed virtual void ShrinkTo(ITimePeriod period);
    public virtual bool IntersectsWith(ITimePeriod test);
    public virtual ITimeInterval GetIntersection(ITimePeriod period);
    public virtual bool OverlapsWith(ITimePeriod test);
    public virtual PeriodRelation GetRelation(ITimePeriod test);
    public virtual int CompareTo(ITimePeriod other, ITimePeriodComparer comparer);
    public virtual void Reset();
    public sealed virtual string GetDescription(ITimeFormatter formatter);
    protected virtual string Format(ITimeFormatter formatter);
    public virtual string ToString();
    public sealed virtual bool Equals(object obj);
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(TimeInterval comp);
    public sealed virtual int GetHashCode();
    protected virtual int ComputeHashCode();
    protected void CheckModification();
}
public class Itenso.TimePeriod.TimeLine`1 : object {
    private ITimeRange limits;
    private ITimePeriodContainer periods;
    private ITimePeriodMapper periodMapper;
    public ITimePeriodContainer Periods { get; }
    public ITimePeriod Limits { get; }
    public ITimePeriodMapper PeriodMapper { get; }
    private bool HasNonMomentPeriods { get; }
    public TimeLine`1(ITimePeriodContainer periods, ITimePeriodMapper periodMapper);
    public TimeLine`1(ITimePeriodContainer periods, ITimePeriod limits, ITimePeriodMapper periodMapper);
    public sealed virtual ITimePeriodContainer get_Periods();
    public sealed virtual ITimePeriod get_Limits();
    public sealed virtual ITimePeriodMapper get_PeriodMapper();
    private bool get_HasNonMomentPeriods();
    public sealed virtual bool HasOverlaps();
    public sealed virtual bool HasGaps();
    public sealed virtual ITimePeriodCollection CombinePeriods();
    public sealed virtual ITimePeriodCollection IntersectPeriods(bool combinePeriods);
    public sealed virtual ITimePeriodCollection CalculateGaps();
    private ITimeLineMomentCollection GetTimeLineMoments();
    private ITimeLineMomentCollection GetTimeLineMoments(ICollection`1<ITimePeriod> momentPeriods);
    private static ITimePeriodCollection CombinePeriods(ITimeLineMomentCollection timeLineMoments);
    private static ITimePeriodCollection IntersectCombinedPeriods(ITimeLineMomentCollection timeLineMoments);
    private static ITimePeriodCollection IntersectPeriods(ITimeLineMomentCollection timeLineMoments);
    private static ITimePeriodCollection CalculateGaps(ITimePeriod range, ITimeLineMomentCollection timeLineMoments);
    private DateTime MapPeriodStart(DateTime start);
    private DateTime MapPeriodEnd(DateTime end);
}
public class Itenso.TimePeriod.TimeLineMoment : object {
    private DateTime moment;
    private int startCount;
    private int endCount;
    public DateTime Moment { get; }
    public int BalanceCount { get; }
    public int StartCount { get; }
    public int EndCount { get; }
    public bool IsEmpty { get; }
    public TimeLineMoment(DateTime moment);
    public sealed virtual DateTime get_Moment();
    public sealed virtual int get_BalanceCount();
    public sealed virtual int get_StartCount();
    public sealed virtual int get_EndCount();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual void AddStart();
    public sealed virtual void RemoveStart();
    public sealed virtual void AddEnd();
    public sealed virtual void RemoveEnd();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class Itenso.TimePeriod.TimeLineMomentCollection : object {
    private List`1<ITimeLineMoment> timeLineMoments;
    private Dictionary`2<DateTime, ITimeLineMoment> timeLineMomentLookup;
    public int Count { get; }
    public bool IsEmpty { get; }
    public ITimeLineMoment Min { get; }
    public ITimeLineMoment Max { get; }
    public ITimeLineMoment Item { get; }
    public ITimeLineMoment Item { get; }
    protected IList`1<ITimeLineMoment> Moments { get; }
    public TimeLineMomentCollection(IEnumerable`1<ITimePeriod> periods);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsEmpty();
    public sealed virtual ITimeLineMoment get_Min();
    public sealed virtual ITimeLineMoment get_Max();
    public sealed virtual ITimeLineMoment get_Item(int index);
    public sealed virtual ITimeLineMoment get_Item(DateTime moment);
    protected IList`1<ITimeLineMoment> get_Moments();
    public void Clear();
    public sealed virtual void Add(ITimePeriod period);
    public sealed virtual void AddAll(IEnumerable`1<ITimePeriod> periods);
    public sealed virtual void Remove(ITimePeriod period);
    public sealed virtual ITimeLineMoment Find(DateTime moment);
    public sealed virtual bool Contains(DateTime moment);
    public sealed virtual bool HasOverlaps();
    public sealed virtual bool HasGaps();
    public sealed virtual IEnumerator`1<ITimeLineMoment> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual void AddStart(DateTime moment);
    protected virtual void AddEnd(DateTime moment);
    protected virtual void RemoveStart(DateTime moment);
    protected virtual void RemoveEnd(DateTime moment);
    protected virtual void Sort();
}
public abstract class Itenso.TimePeriod.TimeLinePeriodEvaluator : object {
    private ITimePeriodContainer periods;
    private ITimePeriodMapper periodMapper;
    public ITimePeriodContainer Periods { get; }
    public ITimePeriodMapper PeriodMapper { get; }
    protected bool IgnoreEmptyPeriods { get; }
    protected TimeLinePeriodEvaluator(ITimePeriodContainer periods, ITimePeriodMapper periodMapper);
    public ITimePeriodContainer get_Periods();
    public ITimePeriodMapper get_PeriodMapper();
    protected virtual bool get_IgnoreEmptyPeriods();
    protected virtual void StartEvaluation();
    protected abstract virtual bool EvaluatePeriod(ITimePeriod period, int periodCount);
    private DateTime MapPeriodStart(DateTime start);
    private DateTime MapPeriodEnd(DateTime end);
}
internal static class Itenso.TimePeriod.TimePeriodCalc : object {
    public static bool HasInside(ITimePeriod period, DateTime test);
    public static bool HasInside(ITimePeriod period, ITimePeriod test);
    public static bool IntersectsWith(ITimePeriod period, ITimePeriod test);
    public static bool OverlapsWith(ITimePeriod period, ITimePeriod test);
    public static PeriodRelation GetRelation(ITimePeriod period, ITimePeriod test);
}
[DefaultMemberAttribute("Item")]
public class Itenso.TimePeriod.TimePeriodChain : object {
    private List`1<ITimePeriod> periods;
    public bool IsReadOnly { get; }
    public ITimePeriod First { get; }
    public ITimePeriod Last { get; }
    public int Count { get; }
    public ITimePeriod Item { get; public set; }
    public bool IsAnytime { get; }
    public bool IsMoment { get; }
    public bool HasStart { get; }
    public DateTime Start { get; public set; }
    public bool HasEnd { get; }
    public DateTime End { get; public set; }
    public TimeSpan Duration { get; }
    public string DurationDescription { get; }
    public TimePeriodChain(IEnumerable`1<ITimePeriod> timePeriods);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ITimePeriod get_First();
    public sealed virtual ITimePeriod get_Last();
    public sealed virtual int get_Count();
    public sealed virtual ITimePeriod get_Item(int index);
    public sealed virtual void set_Item(int index, ITimePeriod value);
    public sealed virtual bool get_IsAnytime();
    public sealed virtual bool get_IsMoment();
    public sealed virtual bool get_HasStart();
    public sealed virtual DateTime get_Start();
    public sealed virtual void set_Start(DateTime value);
    public sealed virtual bool get_HasEnd();
    public sealed virtual DateTime get_End();
    public sealed virtual void set_End(DateTime value);
    public sealed virtual TimeSpan get_Duration();
    public sealed virtual string get_DurationDescription();
    public virtual TimeSpan GetDuration(IDurationProvider provider);
    public virtual void Setup(DateTime newStart, DateTime newEnd);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<ITimePeriod> GetEnumerator();
    public virtual void Move(TimeSpan delta);
    public virtual void Add(ITimePeriod item);
    public sealed virtual bool ContainsPeriod(ITimePeriod test);
    public sealed virtual void AddAll(IEnumerable`1<ITimePeriod> timePeriods);
    public virtual void Insert(int index, ITimePeriod period);
    public virtual bool Contains(ITimePeriod period);
    public virtual int IndexOf(ITimePeriod period);
    public virtual void CopyTo(ITimePeriod[] array, int arrayIndex);
    public virtual void Clear();
    public virtual bool Remove(ITimePeriod period);
    public virtual void RemoveAt(int index);
    public virtual bool IsSamePeriod(ITimePeriod test);
    public virtual bool HasInside(DateTime test);
    public virtual bool HasInside(ITimePeriod test);
    public virtual bool IntersectsWith(ITimePeriod test);
    public virtual bool OverlapsWith(ITimePeriod test);
    public virtual PeriodRelation GetRelation(ITimePeriod test);
    public virtual int CompareTo(ITimePeriod other, ITimePeriodComparer comparer);
    public sealed virtual string GetDescription(ITimeFormatter formatter);
    protected virtual string Format(ITimeFormatter formatter);
    public virtual string ToString();
    public sealed virtual bool Equals(object obj);
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(IList`1<ITimePeriod> comp);
    public sealed virtual int GetHashCode();
    protected virtual int ComputeHashCode();
    protected void CheckSpaceBefore(DateTime moment, TimeSpan duration);
    protected void CheckSpaceAfter(DateTime moment, TimeSpan duration);
    protected void CheckReadOnlyItem(ITimePeriod timePeriod);
}
[DefaultMemberAttribute("Item")]
public class Itenso.TimePeriod.TimePeriodCollection : object {
    private List`1<ITimePeriod> periods;
    public bool IsReadOnly { get; }
    public int Count { get; }
    public ITimePeriod Item { get; public set; }
    public bool IsAnytime { get; }
    public bool IsMoment { get; }
    public bool HasStart { get; }
    public DateTime Start { get; public set; }
    public bool HasEnd { get; }
    public DateTime End { get; public set; }
    public TimeSpan Duration { get; }
    public TimeSpan TotalDuration { get; }
    public string DurationDescription { get; }
    public TimePeriodCollection(IEnumerable`1<ITimePeriod> timePeriods);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Count();
    public sealed virtual ITimePeriod get_Item(int index);
    public sealed virtual void set_Item(int index, ITimePeriod value);
    public sealed virtual bool get_IsAnytime();
    public sealed virtual bool get_IsMoment();
    public sealed virtual bool get_HasStart();
    public sealed virtual DateTime get_Start();
    public sealed virtual void set_Start(DateTime value);
    public sealed virtual bool get_HasEnd();
    public sealed virtual DateTime get_End();
    public sealed virtual void set_End(DateTime value);
    public sealed virtual TimeSpan get_Duration();
    public virtual TimeSpan get_TotalDuration();
    public sealed virtual string get_DurationDescription();
    public virtual TimeSpan GetDuration(IDurationProvider provider);
    public virtual TimeSpan GetTotalDuration(IDurationProvider provider);
    public virtual void Setup(DateTime newStart, DateTime newEnd);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<ITimePeriod> GetEnumerator();
    public virtual void Move(TimeSpan delta);
    public virtual void SortBy(ITimePeriodComparer comparer);
    public virtual void SortReverseBy(ITimePeriodComparer comparer);
    public virtual void SortByStart(ListSortDirection sortDirection);
    public virtual void SortByEnd(ListSortDirection sortDirection);
    public virtual void SortByDuration(ListSortDirection sortDirection);
    public virtual bool HasInsidePeriods(ITimePeriod test);
    public virtual ITimePeriodCollection InsidePeriods(ITimePeriod test);
    public virtual bool HasOverlaps();
    public virtual bool HasGaps();
    public virtual bool HasOverlapPeriods(ITimePeriod test);
    public virtual ITimePeriodCollection OverlapPeriods(ITimePeriod test);
    public virtual bool HasIntersectionPeriods(DateTime test);
    public virtual ITimePeriodCollection IntersectionPeriods(DateTime test);
    public virtual bool HasIntersectionPeriods(ITimePeriod test);
    public virtual ITimePeriodCollection IntersectionPeriods(ITimePeriod test);
    public virtual ITimePeriodCollection RelationPeriods(ITimePeriod test, PeriodRelation relation);
    public virtual void Add(ITimePeriod item);
    public sealed virtual bool ContainsPeriod(ITimePeriod test);
    public sealed virtual void AddAll(IEnumerable`1<ITimePeriod> timePeriods);
    public virtual void Insert(int index, ITimePeriod item);
    public virtual bool Contains(ITimePeriod item);
    public virtual int IndexOf(ITimePeriod item);
    public virtual void CopyTo(ITimePeriod[] array, int arrayIndex);
    public virtual void Clear();
    public virtual bool Remove(ITimePeriod item);
    public virtual void RemoveAt(int index);
    public virtual bool IsSamePeriod(ITimePeriod test);
    public virtual bool HasInside(DateTime test);
    public virtual bool HasInside(ITimePeriod test);
    public virtual bool IntersectsWith(ITimePeriod test);
    public virtual bool OverlapsWith(ITimePeriod test);
    public virtual PeriodRelation GetRelation(ITimePeriod test);
    public virtual int CompareTo(ITimePeriod other, ITimePeriodComparer comparer);
    public sealed virtual string GetDescription(ITimeFormatter formatter);
    protected virtual string Format(ITimeFormatter formatter);
    public virtual string ToString();
    public sealed virtual bool Equals(object obj);
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(IList`1<ITimePeriod> comp);
    public sealed virtual int GetHashCode();
    protected virtual int ComputeHashCode();
    protected virtual Nullable`1<DateTime> GetStart();
    protected virtual Nullable`1<DateTime> GetEnd();
    protected virtual void GetStartEnd(Nullable`1& start, Nullable`1& end);
    protected virtual Nullable`1<TimeSpan> GetDuration();
}
public class Itenso.TimePeriod.TimePeriodCombiner`1 : object {
    private ITimePeriodMapper periodMapper;
    public ITimePeriodMapper PeriodMapper { get; }
    public TimePeriodCombiner`1(ITimePeriodMapper periodMapper);
    public ITimePeriodMapper get_PeriodMapper();
    public virtual ITimePeriodCollection CombinePeriods(ITimePeriodContainer periods);
}
public class Itenso.TimePeriod.TimePeriodDurationComparer : object {
    public static ITimePeriodComparer Comparer;
    public static ITimePeriodComparer ReverseComparer;
    private static TimePeriodDurationComparer();
    public sealed virtual int Compare(ITimePeriod left, ITimePeriod right);
}
public class Itenso.TimePeriod.TimePeriodEndComparer : object {
    public static ITimePeriodComparer Comparer;
    public static ITimePeriodComparer ReverseComparer;
    private static TimePeriodEndComparer();
    public sealed virtual int Compare(ITimePeriod left, ITimePeriod right);
}
public class Itenso.TimePeriod.TimePeriodIntersector`1 : object {
    private ITimePeriodMapper periodMapper;
    public ITimePeriodMapper PeriodMapper { get; }
    public TimePeriodIntersector`1(ITimePeriodMapper periodMapper);
    public ITimePeriodMapper get_PeriodMapper();
    public virtual ITimePeriodCollection IntersectPeriods(ITimePeriodContainer periods, bool combinePeriods);
}
public class Itenso.TimePeriod.TimePeriodReversComparer : object {
    private ITimePeriodComparer baseComparer;
    public ITimePeriodComparer BaseComparer { get; }
    public TimePeriodReversComparer(ITimePeriodComparer baseComparer);
    public ITimePeriodComparer get_BaseComparer();
    public sealed virtual int Compare(ITimePeriod left, ITimePeriod right);
}
public class Itenso.TimePeriod.TimePeriodStartComparer : object {
    public static ITimePeriodComparer Comparer;
    public static ITimePeriodComparer ReverseComparer;
    private static TimePeriodStartComparer();
    public sealed virtual int Compare(ITimePeriod left, ITimePeriod right);
}
public class Itenso.TimePeriod.TimePeriodSubtractor`1 : object {
    private ITimePeriodMapper periodMapper;
    private TimePeriodCombiner`1<T> timePeriodCombiner;
    private TimeGapCalculator`1<T> timeGapCalculator;
    private TimePeriodIntersector`1<T> timePeriodIntersector;
    public ITimePeriodMapper PeriodMapper { get; }
    public TimePeriodSubtractor`1(ITimePeriodMapper periodMapper);
    public ITimePeriodMapper get_PeriodMapper();
    public virtual ITimePeriodCollection SubtractPeriods(ITimePeriodContainer sourcePeriods, ITimePeriodCollection subtractingPeriods, bool combinePeriods);
}
public class Itenso.TimePeriod.TimeRange : object {
    public static TimeRange Anytime;
    private bool isReadOnly;
    private DateTime start;
    private DateTime end;
    public bool IsReadOnly { get; }
    public bool IsAnytime { get; }
    public bool IsMoment { get; }
    public bool HasStart { get; }
    public DateTime Start { get; public set; }
    public bool HasEnd { get; }
    public DateTime End { get; public set; }
    public TimeSpan Duration { get; public set; }
    public string DurationDescription { get; }
    internal TimeRange(bool isReadOnly);
    public TimeRange(DateTime moment, bool isReadOnly);
    public TimeRange(DateTime start, DateTime end, bool isReadOnly);
    public TimeRange(DateTime start, TimeSpan duration, bool isReadOnly);
    public TimeRange(ITimePeriod copy);
    protected TimeRange(ITimePeriod copy, bool isReadOnly);
    private static TimeRange();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsAnytime();
    public sealed virtual bool get_IsMoment();
    public sealed virtual bool get_HasStart();
    public sealed virtual DateTime get_Start();
    public sealed virtual void set_Start(DateTime value);
    public sealed virtual bool get_HasEnd();
    public sealed virtual DateTime get_End();
    public sealed virtual void set_End(DateTime value);
    public sealed virtual TimeSpan get_Duration();
    public sealed virtual void set_Duration(TimeSpan value);
    public sealed virtual string get_DurationDescription();
    public virtual TimeSpan GetDuration(IDurationProvider provider);
    public virtual void Setup(DateTime newStart, DateTime newEnd);
    public virtual bool IsSamePeriod(ITimePeriod test);
    public virtual bool HasInside(DateTime test);
    public virtual bool HasInside(ITimePeriod test);
    public ITimeRange Copy();
    public virtual ITimeRange Copy(TimeSpan offset);
    public virtual void Move(TimeSpan offset);
    public virtual void ExpandStartTo(DateTime moment);
    public virtual void ExpandEndTo(DateTime moment);
    public sealed virtual void ExpandTo(DateTime moment);
    public sealed virtual void ExpandTo(ITimePeriod period);
    public virtual void ShrinkStartTo(DateTime moment);
    public virtual void ShrinkEndTo(DateTime moment);
    public sealed virtual void ShrinkTo(ITimePeriod period);
    public virtual bool IntersectsWith(ITimePeriod test);
    public virtual ITimeRange GetIntersection(ITimePeriod period);
    public virtual bool OverlapsWith(ITimePeriod test);
    public virtual PeriodRelation GetRelation(ITimePeriod test);
    public virtual int CompareTo(ITimePeriod other, ITimePeriodComparer comparer);
    public virtual void Reset();
    public sealed virtual string GetDescription(ITimeFormatter formatter);
    protected virtual string Format(ITimeFormatter formatter);
    public virtual string ToString();
    public sealed virtual bool Equals(object obj);
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(TimeRange comp);
    public sealed virtual int GetHashCode();
    protected virtual int ComputeHashCode();
    protected void CheckModification();
}
public static class Itenso.TimePeriod.TimeSpec : object {
    public static int MonthsPerYear;
    public static int HalfyearsPerYear;
    public static int QuartersPerYear;
    public static int QuartersPerHalfyear;
    public static int MaxWeeksPerYear;
    public static int MonthsPerHalfyear;
    public static int MonthsPerQuarter;
    public static int MaxDaysPerMonth;
    public static int DaysPerWeek;
    public static int HoursPerDay;
    public static int MinutesPerHour;
    public static int SecondsPerMinute;
    public static int MillisecondsPerSecond;
    public static YearMonth CalendarYearStartMonth;
    public static DayOfWeek FirstWorkingDayOfWeek;
    public static YearMonth FiscalYearBaseMonth;
    public static int FiscalWeeksPerShortMonth;
    public static int FiscalWeeksPerLongMonth;
    public static int FiscalWeeksPerLeapMonth;
    public static int FiscalWeeksPerQuarter;
    public static int FiscalWeeksPerLeapQuarter;
    public static int FiscalWeeksPerHalfyear;
    public static int FiscalWeeksPerLeapHalfyear;
    public static int FiscalWeeksPerYear;
    public static int FiscalWeeksPerLeapYear;
    public static int FiscalDaysPerShortMonth;
    public static int FiscalDaysPerLongMonth;
    public static int FiscalDaysPerLeapMonth;
    public static int FiscalDaysPerQuarter;
    public static int FiscalDaysPerLeapQuarter;
    public static int FiscalDaysPerHalfyear;
    public static int FiscalDaysPerLeapHalfyear;
    public static int FiscalDaysPerYear;
    public static int FiscalDaysPerLeapYear;
    public static YearMonth[] FirstHalfyearMonths;
    public static YearMonth[] SecondHalfyearMonths;
    public static int FirstQuarterMonthIndex;
    public static int SecondQuarterMonthIndex;
    public static int ThirdQuarterMonthIndex;
    public static int FourthQuarterMonthIndex;
    public static YearMonth[] FirstQuarterMonths;
    public static YearMonth[] SecondQuarterMonths;
    public static YearMonth[] ThirdQuarterMonths;
    public static YearMonth[] FourthQuarterMonths;
    public static TimeSpan NoDuration;
    public static TimeSpan MinPositiveDuration;
    public static TimeSpan MinNegativeDuration;
    public static DateTime MinPeriodDate;
    public static DateTime MaxPeriodDate;
    public static TimeSpan MinPeriodDuration;
    public static TimeSpan MaxPeriodDuration;
    private static TimeSpec();
}
public static class Itenso.TimePeriod.TimeTool : object {
    public static DateTime GetDate(DateTime dateTime);
    public static DateTime SetDate(DateTime from, DateTime to);
    public static DateTime SetDate(DateTime from, int year, int month, int day);
    public static bool HasTimeOfDay(DateTime dateTime);
    public static DateTime SetTimeOfDay(DateTime from, DateTime to);
    public static DateTime SetTimeOfDay(DateTime from, int hour, int minute, int second, int millisecond);
    public static int GetYearOf(YearMonth yearBaseMonth, DateTime moment);
    public static int GetYearOf(YearMonth yearBaseMonth, int year, int month);
    public static void NextHalfyear(YearHalfyear startHalfyear, Int32& year, YearHalfyear& halfyear);
    public static void PreviousHalfyear(YearHalfyear startHalfyear, Int32& year, YearHalfyear& halfyear);
    public static void AddHalfyear(YearHalfyear startHalfyear, int count, Int32& year, YearHalfyear& halfyear);
    public static void AddHalfyear(int startYear, YearHalfyear startHalfyear, int count, Int32& year, YearHalfyear& halfyear);
    public static YearHalfyear GetHalfyearOfMonth(YearMonth yearMonth);
    public static YearHalfyear GetHalfyearOfMonth(YearMonth yearBaseMonth, YearMonth yearMonth);
    public static YearMonth[] GetMonthsOfHalfyear(YearHalfyear yearHalfyear);
    public static void NextQuarter(YearQuarter startQuarter, Int32& year, YearQuarter& quarter);
    public static void PreviousQuarter(YearQuarter startQuarter, Int32& year, YearQuarter& quarter);
    public static void AddQuarter(YearQuarter startQuarter, int count, Int32& year, YearQuarter& quarter);
    public static void AddQuarter(int startYear, YearQuarter startQuarter, int count, Int32& year, YearQuarter& quarter);
    public static YearQuarter GetQuarterOfMonth(YearMonth yearMonth);
    public static YearQuarter GetQuarterOfMonth(YearMonth yearBaseMonth, YearMonth yearMonth);
    public static YearMonth[] GetMonthsOfQuarter(YearQuarter yearQuarter);
    public static void NextMonth(YearMonth startMonth, Int32& year, YearMonth& month);
    public static void PreviousMonth(YearMonth startMonth, Int32& year, YearMonth& month);
    public static void AddMonth(YearMonth startMonth, int count, Int32& year, YearMonth& month);
    public static void AddMonth(int startYear, YearMonth startMonth, int count, Int32& year, YearMonth& month);
    public static int GetDaysInMonth(int year, int month);
    public static DateTime GetStartOfWeek(DateTime time, DayOfWeek firstDayOfWeek);
    public static void GetWeekOfYear(DateTime moment, CultureInfo culture, YearWeekType yearWeekType, Int32& year, Int32& weekOfYear);
    public static void GetWeekOfYear(DateTime moment, CultureInfo culture, CalendarWeekRule weekRule, DayOfWeek firstDayOfWeek, YearWeekType yearWeekType, Int32& year, Int32& weekOfYear);
    public static int GetWeeksOfYear(int year, CultureInfo culture, YearWeekType yearWeekType);
    public static int GetWeeksOfYear(int year, CultureInfo culture, CalendarWeekRule weekRule, DayOfWeek firstDayOfWeek, YearWeekType yearWeekType);
    public static DateTime GetStartOfYearWeek(int year, int weekOfYear, CultureInfo culture, YearWeekType yearWeekType);
    public static DateTime GetStartOfYearWeek(int year, int weekOfYear, CultureInfo culture, CalendarWeekRule weekRule, DayOfWeek firstDayOfWeek, YearWeekType yearWeekType);
    public static DateTime DayStart(DateTime dateTime);
    public static DayOfWeek NextDay(DayOfWeek day);
    public static DayOfWeek PreviousDay(DayOfWeek day);
    public static DayOfWeek AddDays(DayOfWeek day, int days);
}
public static class Itenso.TimePeriod.TimeTrim : object {
    public static DateTime Month(DateTime dateTime, int month, int day, int hour, int minute, int second, int millisecond);
    public static DateTime Day(DateTime dateTime, int day, int hour, int minute, int second, int millisecond);
    public static DateTime Hour(DateTime dateTime, int hour, int minute, int second, int millisecond);
    public static DateTime Minute(DateTime dateTime, int minute, int second, int millisecond);
    public static DateTime Second(DateTime dateTime, int second, int millisecond);
    public static DateTime Millisecond(DateTime dateTime, int millisecond);
}
public class Itenso.TimePeriod.TimeZoneDurationProvider : DurationProvider {
    private TimeZoneInfo timeZone;
    private Func`4<TimeZoneInfo, DateTime, TimeSpan[], DateTime> ambigiousMoment;
    private Func`3<TimeZoneInfo, DateTime, DateTime> invalidMoment;
    public TimeZoneInfo TimeZone { get; }
    public Func`4<TimeZoneInfo, DateTime, TimeSpan[], DateTime> AmbigiousMoment { get; }
    public Func`3<TimeZoneInfo, DateTime, DateTime> InvalidMoment { get; }
    public TimeZoneDurationProvider(TimeZoneInfo timeZone, Func`4<TimeZoneInfo, DateTime, TimeSpan[], DateTime> ambigiousMoment, Func`3<TimeZoneInfo, DateTime, DateTime> invalidMoment);
    public TimeZoneInfo get_TimeZone();
    public Func`4<TimeZoneInfo, DateTime, TimeSpan[], DateTime> get_AmbigiousMoment();
    public Func`3<TimeZoneInfo, DateTime, DateTime> get_InvalidMoment();
    public virtual TimeSpan GetDuration(DateTime start, DateTime end);
    protected virtual DateTime OnAmbiguousMoment(DateTime moment);
    protected virtual DateTime OnInvalidMoment(DateTime moment);
}
public class Itenso.TimePeriod.Week : WeekTimeRange {
    public int WeekOfYear { get; }
    public string WeekOfYearName { get; }
    public DateTime FirstDayOfWeek { get; }
    public DateTime LastDayOfWeek { get; }
    public bool MultipleCalendarYears { get; }
    public Week(ITimeCalendar calendar);
    public Week(DateTime moment);
    public Week(DateTime moment, ITimeCalendar calendar);
    public Week(int year, int weekOfYear);
    public Week(int year, int weekOfYear, ITimeCalendar calendar);
    public int get_WeekOfYear();
    public string get_WeekOfYearName();
    public DateTime get_FirstDayOfWeek();
    public DateTime get_LastDayOfWeek();
    public bool get_MultipleCalendarYears();
    public Week GetPreviousWeek();
    public Week GetNextWeek();
    public Week AddWeeks(int weeks);
    protected virtual string Format(ITimeFormatter formatter);
}
public class Itenso.TimePeriod.Weeks : WeekTimeRange {
    public Weeks(DateTime moment, int count);
    public Weeks(DateTime moment, int count, ITimeCalendar calendar);
    public Weeks(int year, int startWeek, int count);
    public Weeks(int year, int startWeek, int count, ITimeCalendar calendar);
    public ITimePeriodCollection GetWeeks();
    protected virtual string Format(ITimeFormatter formatter);
}
public abstract class Itenso.TimePeriod.WeekTimeRange : CalendarTimeRange {
    private int year;
    private int startWeek;
    private int weekCount;
    public int Year { get; }
    public int WeekCount { get; }
    public int StartWeek { get; }
    public int EndWeek { get; }
    public string StartWeekOfYearName { get; }
    public string EndWeekOfYearName { get; }
    protected WeekTimeRange(int year, int startWeek, int weekCount);
    protected WeekTimeRange(int year, int startWeek, int weekCount, ITimeCalendar calendar);
    protected WeekTimeRange(DateTime moment, int weekCount);
    protected WeekTimeRange(DateTime moment, int weekCount, ITimeCalendar calendar);
    public int get_Year();
    public int get_WeekCount();
    public int get_StartWeek();
    public int get_EndWeek();
    public string get_StartWeekOfYearName();
    public string get_EndWeekOfYearName();
    public DateTime GetStartOfWeek(int weekIndex);
    public ITimePeriodCollection GetDays();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(WeekTimeRange comp);
    protected virtual int ComputeHashCode();
    private static TimeRange GetPeriodOf(DateTime moment, int weekCount, ITimeCalendar calendar);
    private static TimeRange GetPeriodOf(int year, int weekOfYear, int weekCount, ITimeCalendar calendar);
}
public class Itenso.TimePeriod.Year : YearTimeRange {
    public int YearValue { get; }
    public string YearName { get; }
    public bool IsCalendarYear { get; }
    public Year(ITimeCalendar calendar);
    public Year(DateTime moment);
    public Year(DateTime moment, ITimeCalendar calendar);
    public Year(int year);
    public Year(int year, ITimeCalendar calendar);
    public int get_YearValue();
    public string get_YearName();
    public bool get_IsCalendarYear();
    public Year GetPreviousYear();
    public Year GetNextYear();
    public Year AddYears(int count);
    protected virtual string Format(ITimeFormatter formatter);
}
public enum Itenso.TimePeriod.YearHalfyear : Enum {
    public int value__;
    public static YearHalfyear First;
    public static YearHalfyear Second;
}
public enum Itenso.TimePeriod.YearMonth : Enum {
    public int value__;
    public static YearMonth January;
    public static YearMonth February;
    public static YearMonth March;
    public static YearMonth April;
    public static YearMonth May;
    public static YearMonth June;
    public static YearMonth July;
    public static YearMonth August;
    public static YearMonth September;
    public static YearMonth October;
    public static YearMonth November;
    public static YearMonth December;
}
public enum Itenso.TimePeriod.YearQuarter : Enum {
    public int value__;
    public static YearQuarter First;
    public static YearQuarter Second;
    public static YearQuarter Third;
    public static YearQuarter Fourth;
}
public class Itenso.TimePeriod.Years : YearTimeRange {
    public Years(DateTime moment, int count);
    public Years(DateTime moment, int count, ITimeCalendar calendar);
    public Years(int year, int count);
    public Years(int year, int count, ITimeCalendar calendar);
    public ITimePeriodCollection GetYears();
    protected virtual string Format(ITimeFormatter formatter);
}
public abstract class Itenso.TimePeriod.YearTimeRange : CalendarTimeRange {
    private int startYear;
    private int yearCount;
    private int endYear;
    public int YearCount { get; }
    public int BaseYear { get; }
    public int StartYear { get; }
    public int EndYear { get; }
    public string StartYearName { get; }
    public string EndYearName { get; }
    protected YearTimeRange(int startYear, int yearCount, ITimeCalendar calendar);
    public int get_YearCount();
    public virtual int get_BaseYear();
    public int get_StartYear();
    public int get_EndYear();
    public string get_StartYearName();
    public string get_EndYearName();
    public ITimePeriodCollection GetHalfyears();
    public ITimePeriodCollection GetQuarters();
    public ITimePeriodCollection GetMonths();
    protected virtual bool IsEqual(object obj);
    private bool HasSameData(YearTimeRange comp);
    protected virtual int ComputeHashCode();
    private static DateTime GetStartOfYear(ITimeCalendar calendar, int year);
    private static TimeRange GetPeriodOf(ITimeCalendar calendar, int year, int yearCount);
}
public enum Itenso.TimePeriod.YearType : Enum {
    public int value__;
    public static YearType SystemYear;
    public static YearType CalendarYear;
    public static YearType FiscalYear;
    public static YearType SchoolYear;
    public static YearType CustomYear;
}
public enum Itenso.TimePeriod.YearWeekType : Enum {
    public int value__;
    public static YearWeekType Calendar;
    public static YearWeekType Iso8601;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
