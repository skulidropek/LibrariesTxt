[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TimeZoneNames.CldrLanguageData : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TimeZoneValues <Formats>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FallbackFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TimeZoneValues> <ShortNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TimeZoneValues> <LongNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CountryNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CityNames>k__BackingField;
    [NullableAttribute("2")]
public TimeZoneValues Formats { get; public set; }
    [NullableAttribute("2")]
public string FallbackFormat { get; public set; }
    public Dictionary`2<string, TimeZoneValues> ShortNames { get; public set; }
    public Dictionary`2<string, TimeZoneValues> LongNames { get; public set; }
    public Dictionary`2<string, string> CountryNames { get; public set; }
    public Dictionary`2<string, string> CityNames { get; public set; }
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TimeZoneValues get_Formats();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Formats(TimeZoneValues value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FallbackFormat();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_FallbackFormat(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TimeZoneValues> get_ShortNames();
    [CompilerGeneratedAttribute]
public void set_ShortNames(Dictionary`2<string, TimeZoneValues> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TimeZoneValues> get_LongNames();
    [CompilerGeneratedAttribute]
public void set_LongNames(Dictionary`2<string, TimeZoneValues> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CountryNames();
    [CompilerGeneratedAttribute]
public void set_CountryNames(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CityNames();
    [CompilerGeneratedAttribute]
public void set_CityNames(Dictionary`2<string, string> value);
    internal CldrLanguageData ToCaseInsensitive();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class TimeZoneNames.OrderedDictionary`2 : object {
    private OrderedDictionary _dictionary;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    public OrderedDictionary`2(int capacity, IEqualityComparer`1<TKey> equalityComparer);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class TimeZoneNames.OrderedDictionaryExtensions : object {
    [ExtensionAttribute]
public static OrderedDictionary`2<TKey, TValue> ToOrderedDictionary(ICollection`1<KeyValuePair`2<TKey, TValue>> items, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedDictionary`2<TKey, TValue> ToOrderedDictionary(ICollection`1<TSource> items, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedDictionary`2<TKey, TValue> ToOrderedDictionary(IEnumerable`1<KeyValuePair`2<TKey, TValue>> items, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedDictionary`2<TKey, TValue> ToOrderedDictionary(IEnumerable`1<TSource> items, Func`2<TSource, TKey> keySelector, Func`2<TSource, TValue> valueSelector, IEqualityComparer`1<TKey> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TimeZoneNames.TimeZoneData : object {
    public static String[] ObsoleteWindowsZones;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, String[]> <TzdbZoneCountries>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, String[]> <CldrZoneCountries>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CldrMetazones>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CldrPrimaryZones>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CldrAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, CldrLanguageData> <CldrLanguageData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TimeZoneSelectionData> <SelectionZones>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IDictionary`2<string, string>> <DisplayNames>k__BackingField;
    public Dictionary`2<string, String[]> TzdbZoneCountries { get; public set; }
    public Dictionary`2<string, String[]> CldrZoneCountries { get; public set; }
    public Dictionary`2<string, string> CldrMetazones { get; public set; }
    public Dictionary`2<string, string> CldrPrimaryZones { get; public set; }
    public Dictionary`2<string, string> CldrAliases { get; public set; }
    public Dictionary`2<string, CldrLanguageData> CldrLanguageData { get; public set; }
    public List`1<TimeZoneSelectionData> SelectionZones { get; public set; }
    public Dictionary`2<string, IDictionary`2<string, string>> DisplayNames { get; public set; }
    private static TimeZoneData();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, String[]> get_TzdbZoneCountries();
    [CompilerGeneratedAttribute]
public void set_TzdbZoneCountries(Dictionary`2<string, String[]> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, String[]> get_CldrZoneCountries();
    [CompilerGeneratedAttribute]
public void set_CldrZoneCountries(Dictionary`2<string, String[]> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CldrMetazones();
    [CompilerGeneratedAttribute]
public void set_CldrMetazones(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CldrPrimaryZones();
    [CompilerGeneratedAttribute]
public void set_CldrPrimaryZones(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CldrAliases();
    [CompilerGeneratedAttribute]
public void set_CldrAliases(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, CldrLanguageData> get_CldrLanguageData();
    [CompilerGeneratedAttribute]
public void set_CldrLanguageData(Dictionary`2<string, CldrLanguageData> value);
    [CompilerGeneratedAttribute]
public List`1<TimeZoneSelectionData> get_SelectionZones();
    [CompilerGeneratedAttribute]
public void set_SelectionZones(List`1<TimeZoneSelectionData> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IDictionary`2<string, string>> get_DisplayNames();
    [CompilerGeneratedAttribute]
public void set_DisplayNames(Dictionary`2<string, IDictionary`2<string, string>> value);
    [SecuritySafeCriticalAttribute]
public static TimeZoneData Load();
    private TimeZoneData ToCaseInsensitive();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonSerializableAttribute("TimeZoneNames.TimeZoneData")]
[GeneratedCodeAttribute("System.Text.Json.SourceGeneration", "6.0.5.2210")]
internal class TimeZoneNames.TimeZoneDataContext : JsonSerializerContext {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<string> _String;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<String[]> _StringArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, String[]>> _DictionaryStringStringArray;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, string>> _DictionaryStringString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<TimeZoneValues> _TimeZoneValues;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, TimeZoneValues>> _DictionaryStringTimeZoneValues;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<CldrLanguageData> _CldrLanguageData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, CldrLanguageData>> _DictionaryStringCldrLanguageData;
    [NullableAttribute("2")]
private JsonTypeInfo`1<DateTime> _DateTime;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<TimeZoneSelectionData> _TimeZoneSelectionData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<List`1<TimeZoneSelectionData>> _ListTimeZoneSelectionData;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<IDictionary`2<string, string>> _IDictionaryStringString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<Dictionary`2<string, IDictionary`2<string, string>>> _DictionaryStringIDictionaryStringString;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private JsonTypeInfo`1<TimeZoneData> _TimeZoneData;
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions <s_defaultOptions>k__BackingField;
    [NullableAttribute("2")]
private static TimeZoneDataContext s_defaultContext;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private JsonSerializerOptions <GeneratedSerializerOptions>k__BackingField;
    public JsonTypeInfo`1<string> String { get; }
    public JsonTypeInfo`1<String[]> StringArray { get; }
    public JsonTypeInfo`1<Dictionary`2<string, String[]>> DictionaryStringStringArray { get; }
    public JsonTypeInfo`1<Dictionary`2<string, string>> DictionaryStringString { get; }
    public JsonTypeInfo`1<TimeZoneValues> TimeZoneValues { get; }
    public JsonTypeInfo`1<Dictionary`2<string, TimeZoneValues>> DictionaryStringTimeZoneValues { get; }
    public JsonTypeInfo`1<CldrLanguageData> CldrLanguageData { get; }
    public JsonTypeInfo`1<Dictionary`2<string, CldrLanguageData>> DictionaryStringCldrLanguageData { get; }
    public JsonTypeInfo`1<DateTime> DateTime { get; }
    public JsonTypeInfo`1<TimeZoneSelectionData> TimeZoneSelectionData { get; }
    public JsonTypeInfo`1<List`1<TimeZoneSelectionData>> ListTimeZoneSelectionData { get; }
    public JsonTypeInfo`1<IDictionary`2<string, string>> IDictionaryStringString { get; }
    public JsonTypeInfo`1<Dictionary`2<string, IDictionary`2<string, string>>> DictionaryStringIDictionaryStringString { get; }
    public JsonTypeInfo`1<TimeZoneData> TimeZoneData { get; }
    private static JsonSerializerOptions s_defaultOptions { get; }
    public static TimeZoneDataContext Default { get; }
    [NullableAttribute("2")]
protected JsonSerializerOptions GeneratedSerializerOptions { get; }
    public TimeZoneDataContext(JsonSerializerOptions options);
    private static TimeZoneDataContext();
    public JsonTypeInfo`1<string> get_String();
    public JsonTypeInfo`1<String[]> get_StringArray();
    public JsonTypeInfo`1<Dictionary`2<string, String[]>> get_DictionaryStringStringArray();
    public JsonTypeInfo`1<Dictionary`2<string, string>> get_DictionaryStringString();
    public JsonTypeInfo`1<TimeZoneValues> get_TimeZoneValues();
    private static JsonPropertyInfo[] TimeZoneValuesPropInit(JsonSerializerContext context);
    public JsonTypeInfo`1<Dictionary`2<string, TimeZoneValues>> get_DictionaryStringTimeZoneValues();
    public JsonTypeInfo`1<CldrLanguageData> get_CldrLanguageData();
    private static JsonPropertyInfo[] CldrLanguageDataPropInit(JsonSerializerContext context);
    public JsonTypeInfo`1<Dictionary`2<string, CldrLanguageData>> get_DictionaryStringCldrLanguageData();
    public JsonTypeInfo`1<DateTime> get_DateTime();
    public JsonTypeInfo`1<TimeZoneSelectionData> get_TimeZoneSelectionData();
    private static JsonPropertyInfo[] TimeZoneSelectionDataPropInit(JsonSerializerContext context);
    public JsonTypeInfo`1<List`1<TimeZoneSelectionData>> get_ListTimeZoneSelectionData();
    public JsonTypeInfo`1<IDictionary`2<string, string>> get_IDictionaryStringString();
    public JsonTypeInfo`1<Dictionary`2<string, IDictionary`2<string, string>>> get_DictionaryStringIDictionaryStringString();
    public JsonTypeInfo`1<TimeZoneData> get_TimeZoneData();
    private static JsonPropertyInfo[] TimeZoneDataPropInit(JsonSerializerContext context);
    [CompilerGeneratedAttribute]
private static JsonSerializerOptions get_s_defaultOptions();
    public static TimeZoneDataContext get_Default();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual JsonSerializerOptions get_GeneratedSerializerOptions();
    private JsonConverter GetRuntimeProvidedCustomConverter(Type type);
    public virtual JsonTypeInfo GetTypeInfo(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class TimeZoneNames.TimeZoneSelectionData : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ThresholdUtc>k__BackingField;
    public string Id { get; public set; }
    public DateTime ThresholdUtc { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTime get_ThresholdUtc();
    [CompilerGeneratedAttribute]
public void set_ThresholdUtc(DateTime value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class TimeZoneNames.TimeZoneValues : object {
    [CompilerGeneratedAttribute]
private string <Generic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Standard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Daylight>k__BackingField;
    [JsonIncludeAttribute]
public string Generic { get; internal set; }
    [JsonIncludeAttribute]
public string Standard { get; internal set; }
    [JsonIncludeAttribute]
public string Daylight { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Generic();
    [CompilerGeneratedAttribute]
internal void set_Generic(string value);
    [CompilerGeneratedAttribute]
public string get_Standard();
    [CompilerGeneratedAttribute]
internal void set_Standard(string value);
    [CompilerGeneratedAttribute]
public string get_Daylight();
    [CompilerGeneratedAttribute]
internal void set_Daylight(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class TimeZoneNames.TZNames : object {
    private static TimeZoneData Data;
    private static ConcurrentDictionary`2<string, IComparer`1<string>> Comparers;
    private static TZNames();
    public static String[] GetTimeZoneIdsForCountry(string countryCode);
    public static String[] GetTimeZoneIdsForCountry(string countryCode, DateTimeOffset threshold);
    public static IDictionary`2<string, string> GetTimeZonesForCountry(string countryCode, string languageCode);
    public static IDictionary`2<string, string> GetTimeZonesForCountry(string countryCode, string languageCode, DateTimeOffset threshold);
    public static IList`1<string> GetFixedTimeZoneIds();
    public static IDictionary`2<string, string> GetFixedTimeZoneNames(string languageCode);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Do not pass a language code. Language does not apply for fixed time zone abbreviations.")]
public static IDictionary`2<string, string> GetFixedTimeZoneAbbreviations(string languageCode);
    public static IDictionary`2<string, string> GetFixedTimeZoneAbbreviations();
    private static IDictionary`2<string, string> GetFixedTimeZoneNames(string languageCode, bool abbreviations);
    [ExtensionAttribute]
private static string AppendCity(string name, string city);
    public static TimeZoneValues GetNamesForTimeZone(string timeZoneId, string languageCode);
    public static TimeZoneValues GetAbbreviationsForTimeZone(string timeZoneId, string languageCode);
    public static IDictionary`2<string, string> GetCountryNames(string languageCode);
    public static string GetDisplayNameForTimeZone(string timeZoneId, string languageCode);
    public static IDictionary`2<string, string> GetDisplayNames(string languageCode, bool useIanaZoneIds);
    public static ICollection`1<string> GetLanguageCodes();
    public static ICollection`1<string> GetLanguageCodes(bool forDisplayNames);
    private static IComparer`1<string> GetComparer(string langKey);
    private static string GetLanguageKey(string languageCode, bool forDisplayNames);
    private static string GetLanguageSubkey(string languageKey);
    private static void SearchLanguages(string languageKey, TimeZoneValues values, Action`1<string> action);
    private static string GetCldrCanonicalId(string timeZoneId);
    private static string GetCityName(string timeZoneId, string languageKey);
    private static TimeZoneValues GetNames(string timeZoneId, string languageKey, bool abbreviations);
    private static string GetMetazone(string timeZoneId);
    private static bool PopulateDirectValues(string langKey, TimeZoneValues values, string timeZoneId, string metaZone, bool abbreviations);
}
