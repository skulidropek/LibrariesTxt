public class TinyCsvParser.CsvParser`1 : object {
    private CsvParserOptions options;
    private ICsvMapping`1<TEntity> mapping;
    public CsvParser`1(CsvParserOptions options, ICsvMapping`1<TEntity> mapping);
    public sealed virtual ParallelQuery`1<CsvMappingResult`1<TEntity>> Parse(IEnumerable`1<Row> csvData);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <Parse>b__3_1(Row line);
    [CompilerGeneratedAttribute]
private TokenizedRow <Parse>b__3_2(Row line);
    [CompilerGeneratedAttribute]
private CsvMappingResult`1<TEntity> <Parse>b__3_3(TokenizedRow fields);
}
[ExtensionAttribute]
public static class TinyCsvParser.CsvParserExtensions : object {
    [ExtensionAttribute]
public static ParallelQuery`1<CsvMappingResult`1<TEntity>> ReadFromFile(ICsvParser`1<TEntity> csvParser, string fileName, Encoding encoding);
    [ExtensionAttribute]
public static ParallelQuery`1<CsvMappingResult`1<TEntity>> ReadFromString(ICsvParser`1<TEntity> csvParser, CsvReaderOptions csvReaderOptions, string csvData);
    [IteratorStateMachineAttribute("TinyCsvParser.CsvParserExtensions/<ReadLinesFromStream>d__2")]
private static IEnumerable`1<string> ReadLinesFromStream(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
    [ExtensionAttribute]
public static ParallelQuery`1<CsvMappingResult`1<TEntity>> ReadFromStream(ICsvParser`1<TEntity> csvParser, Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
}
public class TinyCsvParser.CsvParserOptions : object {
    public ITokenizer Tokenizer;
    public bool SkipHeader;
    public string CommentCharacter;
    public int DegreeOfParallelism;
    public bool KeepOrder;
    public CsvParserOptions(bool skipHeader, char fieldsSeparator);
    public CsvParserOptions(bool skipHeader, char fieldsSeparator, int degreeOfParallelism, bool keepOrder);
    public CsvParserOptions(bool skipHeader, ITokenizer tokenizer);
    public CsvParserOptions(bool skipHeader, string commentCharacter, ITokenizer tokenizer);
    public CsvParserOptions(bool skipHeader, string commentCharacter, ITokenizer tokenizer, int degreeOfParallelism, bool keepOrder);
    public virtual string ToString();
}
public class TinyCsvParser.CsvReaderOptions : object {
    public String[] NewLine;
    public CsvReaderOptions(String[] newLine);
    public virtual string ToString();
}
public class TinyCsvParser.Exceptions.CsvTypeConverterAlreadyRegisteredException : Exception {
    public CsvTypeConverterAlreadyRegisteredException(string message);
    public CsvTypeConverterAlreadyRegisteredException(string message, Exception inner);
}
public class TinyCsvParser.Exceptions.CsvTypeConverterNotRegisteredException : Exception {
    public CsvTypeConverterNotRegisteredException(string message);
    public CsvTypeConverterNotRegisteredException(string message, Exception inner);
}
public interface TinyCsvParser.ICsvParser`1 {
    public abstract virtual ParallelQuery`1<CsvMappingResult`1<TEntity>> Parse(IEnumerable`1<Row> csvData);
}
public class TinyCsvParser.Mapping.CsvCollectionPropertyMapping`2 : object {
    private string propertyName;
    private IArrayTypeConverter`1<TProperty> propertyConverter;
    private Action`2<TEntity, TProperty> propertySetter;
    public CsvCollectionPropertyMapping`2(Expression`1<Func`2<TEntity, TProperty>> property, IArrayTypeConverter`1<TProperty> typeConverter);
    public sealed virtual bool TryMapValue(TEntity entity, String[] value);
    public virtual string ToString();
}
public abstract class TinyCsvParser.Mapping.CsvMapping`1 : object {
    private ITypeConverterProvider typeConverterProvider;
    private List`1<IndexToPropertyMapping<TEntity>> csvIndexPropertyMappings;
    private List`1<RangeToPropertyMapping<TEntity>> csvRangePropertyMappings;
    private List`1<CsvRowMapping`1<TEntity>> csvRowMappings;
    protected CsvMapping`1(ITypeConverterProvider typeConverterProvider);
    protected CsvRowMapping`1<TEntity> MapUsing(Func`3<TEntity, TokenizedRow, bool> action);
    protected CsvPropertyMapping`2<TEntity, TProperty> MapProperty(int columnIndex, Expression`1<Func`2<TEntity, TProperty>> property);
    protected CsvCollectionPropertyMapping`2<TEntity, TProperty> MapProperty(RangeDefinition range, Expression`1<Func`2<TEntity, TProperty>> property);
    protected CsvCollectionPropertyMapping`2<TEntity, TProperty> MapProperty(RangeDefinition range, Expression`1<Func`2<TEntity, TProperty>> property, IArrayTypeConverter`1<TProperty> typeConverter);
    protected CsvPropertyMapping`2<TEntity, TProperty> MapProperty(int columnIndex, Expression`1<Func`2<TEntity, TProperty>> property, ITypeConverter`1<TProperty> typeConverter);
    private void AddPropertyMapping(int columnIndex, CsvPropertyMapping`2<TEntity, TProperty> propertyMapping);
    private void AddPropertyMapping(RangeDefinition range, CsvCollectionPropertyMapping`2<TEntity, TProperty> propertyMapping);
    public sealed virtual CsvMappingResult`1<TEntity> Map(TokenizedRow values);
    public virtual string ToString();
}
public class TinyCsvParser.Mapping.CsvMappingError : object {
    [CompilerGeneratedAttribute]
private int <ColumnIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnmappedRow>k__BackingField;
    public int ColumnIndex { get; public set; }
    public string Value { get; public set; }
    public string UnmappedRow { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ColumnIndex();
    [CompilerGeneratedAttribute]
public void set_ColumnIndex(int value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_UnmappedRow();
    [CompilerGeneratedAttribute]
public void set_UnmappedRow(string value);
    public virtual string ToString();
}
public class TinyCsvParser.Mapping.CsvMappingResult`1 : object {
    [CompilerGeneratedAttribute]
private int <RowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private CsvMappingError <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private TEntity <Result>k__BackingField;
    public int RowIndex { get; public set; }
    public CsvMappingError Error { get; public set; }
    public TEntity Result { get; public set; }
    public bool IsValid { get; }
    [CompilerGeneratedAttribute]
public int get_RowIndex();
    [CompilerGeneratedAttribute]
public void set_RowIndex(int value);
    [CompilerGeneratedAttribute]
public CsvMappingError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(CsvMappingError value);
    [CompilerGeneratedAttribute]
public TEntity get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(TEntity value);
    public bool get_IsValid();
    public virtual string ToString();
}
public class TinyCsvParser.Mapping.CsvPropertyMapping`2 : object {
    private string propertyName;
    private ITypeConverter`1<TProperty> propertyConverter;
    private Action`2<TEntity, TProperty> propertySetter;
    public CsvPropertyMapping`2(Expression`1<Func`2<TEntity, TProperty>> property, ITypeConverter`1<TProperty> typeConverter);
    public sealed virtual bool TryMapValue(TEntity entity, string value);
    public virtual string ToString();
}
public class TinyCsvParser.Mapping.CsvRowMapping`1 : object {
    private Func`3<TEntity, TokenizedRow, bool> action;
    public CsvRowMapping`1(Func`3<TEntity, TokenizedRow, bool> action);
    public sealed virtual bool TryMapValue(TEntity entity, TokenizedRow value);
}
public class TinyCsvParser.Mapping.CsvStringArrayMapping : object {
    public sealed virtual CsvMappingResult`1<String[]> Map(TokenizedRow values);
}
public interface TinyCsvParser.Mapping.ICsvMapping`1 {
    public abstract virtual CsvMappingResult`1<TEntity> Map(TokenizedRow values);
}
public interface TinyCsvParser.Mapping.ICsvPropertyMapping`2 {
    public abstract virtual bool TryMapValue(TEntity entity, TProperty value);
}
public class TinyCsvParser.Model.Row : object {
    public int Index;
    public string Data;
    public Row(int index, string data);
}
public class TinyCsvParser.Model.TokenizedRow : object {
    public int Index;
    public String[] Tokens;
    public TokenizedRow(int index, String[] tokens);
}
public class TinyCsvParser.Ranges.RangeDefinition : object {
    [CompilerGeneratedAttribute]
private int <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private int <End>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Start { get; }
    public int End { get; }
    public int Length { get; }
    public RangeDefinition(int start, int end);
    [CompilerGeneratedAttribute]
public int get_Start();
    [CompilerGeneratedAttribute]
public int get_End();
    [CompilerGeneratedAttribute]
public int get_Length();
    public Tuple`2<int, int> GetOffsetAndLength(int length);
}
public static class TinyCsvParser.Reflection.ReflectionUtils : object {
    public static PropertyInfo GetProperty(Expression`1<Func`2<TEntity, TProperty>> expression);
    private static MemberExpression GetMemberExpression(Expression`1<Func`2<TEntity, TProperty>> expression);
    public static bool IsEnum(Type type);
    public static Action`2<TEntity, TProperty> CreateSetter(Expression`1<Func`2<TEntity, TProperty>> property);
    public static string GetPropertyNameFromExpression(Expression`1<Func`2<TEntity, TProperty>> expression);
}
public class TinyCsvParser.Tokenizer.Decorators.TokenizerProcessingDecorator : object {
    private ITokenizer tokenizer;
    private Preprocessor preprocessor;
    private Postprocessor postprocessor;
    public TokenizerProcessingDecorator(ITokenizer tokenizer, Preprocessor preprocessor);
    public TokenizerProcessingDecorator(ITokenizer tokenizer, Postprocessor postprocessor);
    public TokenizerProcessingDecorator(ITokenizer tokenizer, Preprocessor preprocessor, Postprocessor postprocessor);
    public sealed virtual String[] Tokenize(string input);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private string <Tokenize>b__8_0(string token);
}
public class TinyCsvParser.Tokenizer.FixedLengthTokenizer : object {
    public ColumnDefinition[] Columns;
    public bool Trim;
    public FixedLengthTokenizer(ColumnDefinition[] columns, bool trim);
    public FixedLengthTokenizer(IList`1<ColumnDefinition> columns, bool trim);
    public sealed virtual String[] Tokenize(string input);
    public virtual string ToString();
}
public interface TinyCsvParser.Tokenizer.ITokenizer {
    public abstract virtual String[] Tokenize(string input);
}
public class TinyCsvParser.Tokenizer.QuotedStringTokenizer : RFC4180Tokenizer {
    public QuotedStringTokenizer(char columnDelimiter);
    public QuotedStringTokenizer(char quoteCharacter, char escapeCharacter, char columnDelimiter);
    public virtual string ToString();
}
public abstract class TinyCsvParser.Tokenizer.RegularExpressions.RegularExpressionTokenizer : object {
    public Regex Regexp { get; }
    public abstract virtual Regex get_Regexp();
    public sealed virtual String[] Tokenize(string input);
    public virtual string ToString();
}
public class TinyCsvParser.Tokenizer.RFC4180.Options : object {
    public char QuoteCharacter;
    public char EscapeCharacter;
    public char DelimiterCharacter;
    public bool StrictDelimitation;
    public Options(char quoteCharacter, char escapeCharacter, char delimiterCharacter, bool strictDelimitation);
    public virtual string ToString();
}
public class TinyCsvParser.Tokenizer.RFC4180.Reader : object {
    private Options options;
    public Reader(Options options);
    public IList`1<Token> ReadTokens(StringReader reader);
    private Token NextToken(StringReader reader);
    private string ReadQuoted(StringReader reader);
    private void Skip(StringReader reader);
    private bool IsQuoteCharacter(int c);
    private bool IsEndOfStream(int c);
    private bool IsDelimiter(int c);
    private bool IsWhiteSpace(int c);
    public virtual string ToString();
}
public class TinyCsvParser.Tokenizer.RFC4180.RFC4180Tokenizer : object {
    private Reader reader;
    public RFC4180Tokenizer(Options options);
    public sealed virtual String[] Tokenize(string input);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class TinyCsvParser.Tokenizer.RFC4180.StringReaderExtensions : object {
    [ExtensionAttribute]
public static string ReadTo(StringReader reader, char readTo);
}
public class TinyCsvParser.Tokenizer.StringSplitTokenizer : object {
    public Char[] FieldsSeparator;
    public bool TrimValues;
    public StringSplitTokenizer(Char[] fieldsSeparator, bool trimValues);
    public sealed virtual String[] Tokenize(string input);
    public virtual string ToString();
}
public class TinyCsvParser.TypeConverter.ArrayConverter`1 : object {
    private ITypeConverter`1<TTargetType> internalConverter;
    public Type TargetType { get; }
    public ArrayConverter`1(ITypeConverter`1<TTargetType> internalConverter);
    public sealed virtual bool TryConvert(String[] values, TTargetType[]& result);
    public sealed virtual Type get_TargetType();
}
public abstract class TinyCsvParser.TypeConverter.BaseConverter`1 : object {
    public Type TargetType { get; }
    public abstract virtual bool TryConvert(string value, TTargetType& result);
    public sealed virtual Type get_TargetType();
}
public class TinyCsvParser.TypeConverter.BoolConverter : NonNullableConverter`1<bool> {
    private string trueValue;
    private string falseValue;
    private StringComparison stringComparism;
    public BoolConverter(string trueValue, string falseValue, StringComparison stringComparism);
    protected virtual bool InternalConvert(string value, Boolean& result);
}
public class TinyCsvParser.TypeConverter.ByteConverter : NonNullableConverter`1<byte> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public ByteConverter(IFormatProvider formatProvider);
    public ByteConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, Byte& result);
}
public class TinyCsvParser.TypeConverter.DateTimeConverter : NonNullableConverter`1<DateTime> {
    private string dateTimeFormat;
    private IFormatProvider formatProvider;
    private DateTimeStyles dateTimeStyles;
    public DateTimeConverter(string dateTimeFormat);
    public DateTimeConverter(string dateTimeFormat, IFormatProvider formatProvider);
    public DateTimeConverter(string dateTimeFormat, IFormatProvider formatProvider, DateTimeStyles dateTimeStyles);
    protected virtual bool InternalConvert(string value, DateTime& result);
}
public class TinyCsvParser.TypeConverter.DecimalConverter : NonNullableConverter`1<decimal> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public DecimalConverter(IFormatProvider formatProvider);
    public DecimalConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, Decimal& result);
}
public class TinyCsvParser.TypeConverter.DoubleConverter : NonNullableConverter`1<double> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public DoubleConverter(IFormatProvider formatProvider);
    public DoubleConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, Double& result);
}
public class TinyCsvParser.TypeConverter.EnumConverter`1 : NonNullableConverter`1<TTargetType> {
    private Type enumType;
    private bool ignoreCase;
    public EnumConverter`1(bool ignoreCase);
    protected virtual bool InternalConvert(string value, TTargetType& result);
}
public class TinyCsvParser.TypeConverter.GuidConverter : NonNullableConverter`1<Guid> {
    private string format;
    public GuidConverter(string format);
    protected virtual bool InternalConvert(string value, Guid& result);
}
public interface TinyCsvParser.TypeConverter.IArrayTypeConverter`1 {
    public Type TargetType { get; }
    public abstract virtual bool TryConvert(String[] value, TTargetType& result);
    public abstract virtual Type get_TargetType();
}
public class TinyCsvParser.TypeConverter.Int16Converter : NonNullableConverter`1<short> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public Int16Converter(IFormatProvider formatProvider);
    public Int16Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, Int16& result);
}
public class TinyCsvParser.TypeConverter.Int32Converter : NonNullableConverter`1<int> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public Int32Converter(IFormatProvider formatProvider);
    public Int32Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, Int32& result);
}
public class TinyCsvParser.TypeConverter.Int64Converter : NonNullableConverter`1<long> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public Int64Converter(IFormatProvider formatProvider);
    public Int64Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, Int64& result);
}
public interface TinyCsvParser.TypeConverter.ITypeConverter {
}
public interface TinyCsvParser.TypeConverter.ITypeConverter`1 {
    public Type TargetType { get; }
    public abstract virtual bool TryConvert(string value, TTargetType& result);
    public abstract virtual Type get_TargetType();
}
public interface TinyCsvParser.TypeConverter.ITypeConverterProvider {
    public abstract virtual ITypeConverter`1<TTargetType> Resolve();
    public abstract virtual IArrayTypeConverter`1<TTargetType> ResolveCollection();
}
public abstract class TinyCsvParser.TypeConverter.NonNullableConverter`1 : BaseConverter`1<TTargetType> {
    public virtual bool TryConvert(string value, TTargetType& result);
    protected abstract virtual bool InternalConvert(string value, TTargetType& result);
}
public class TinyCsvParser.TypeConverter.NullableBoolConverter : NullableInnerConverter`1<bool> {
    public NullableBoolConverter(string trueValue, string falseValue, StringComparison stringComparism);
}
public class TinyCsvParser.TypeConverter.NullableByteConverter : NullableInnerConverter`1<byte> {
    public NullableByteConverter(IFormatProvider formatProvider);
    public NullableByteConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public abstract class TinyCsvParser.TypeConverter.NullableConverter`1 : BaseConverter`1<TTargetType> {
    public virtual bool TryConvert(string value, TTargetType& result);
    protected abstract virtual bool InternalConvert(string value, TTargetType& result);
}
public class TinyCsvParser.TypeConverter.NullableDateTimeConverter : NullableInnerConverter`1<DateTime> {
    public NullableDateTimeConverter(string dateTimeFormat);
    public NullableDateTimeConverter(string dateTimeFormat, IFormatProvider formatProvider);
    public NullableDateTimeConverter(string dateTimeFormat, IFormatProvider formatProvider, DateTimeStyles dateTimeStyles);
}
public class TinyCsvParser.TypeConverter.NullableDecimalConverter : NullableInnerConverter`1<decimal> {
    public NullableDecimalConverter(IFormatProvider formatProvider);
    public NullableDecimalConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableDoubleConverter : NullableInnerConverter`1<double> {
    public NullableDoubleConverter(IFormatProvider formatProvider);
    public NullableDoubleConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableEnumConverter`1 : NullableInnerConverter`1<TTargetType> {
    public NullableEnumConverter`1(bool ignoreCase);
}
public class TinyCsvParser.TypeConverter.NullableGuidConverter : NullableInnerConverter`1<Guid> {
    public NullableGuidConverter(string format);
}
public abstract class TinyCsvParser.TypeConverter.NullableInnerConverter`1 : NullableConverter`1<Nullable`1<TTargetType>> {
    private NonNullableConverter`1<TTargetType> internalConverter;
    public NullableInnerConverter`1(NonNullableConverter`1<TTargetType> internalConverter);
    protected virtual bool InternalConvert(string value, Nullable`1& result);
}
public class TinyCsvParser.TypeConverter.NullableInt16Converter : NullableInnerConverter`1<short> {
    public NullableInt16Converter(IFormatProvider formatProvider);
    public NullableInt16Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableInt32Converter : NullableInnerConverter`1<int> {
    public NullableInt32Converter(IFormatProvider formatProvider);
    public NullableInt32Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableInt64Converter : NullableInnerConverter`1<long> {
    public NullableInt64Converter(IFormatProvider formatProvider);
    public NullableInt64Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableSByteConverter : NullableInnerConverter`1<sbyte> {
    public NullableSByteConverter(IFormatProvider formatProvider);
    public NullableSByteConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableSingleConverter : NullableInnerConverter`1<float> {
    public NullableSingleConverter(IFormatProvider formatProvider);
    public NullableSingleConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableTimeSpanConverter : NullableInnerConverter`1<TimeSpan> {
    public NullableTimeSpanConverter(string format);
    public NullableTimeSpanConverter(string format, IFormatProvider formatProvider);
    public NullableTimeSpanConverter(string format, IFormatProvider formatProvider, TimeSpanStyles timeSpanStyles);
}
public class TinyCsvParser.TypeConverter.NullableUInt16Converter : NullableInnerConverter`1<ushort> {
    public NullableUInt16Converter(IFormatProvider formatProvider);
    public NullableUInt16Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableUInt32Converter : NullableInnerConverter`1<UInt32> {
    public NullableUInt32Converter(IFormatProvider formatProvider);
    public NullableUInt32Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.NullableUInt64Converter : NullableInnerConverter`1<ulong> {
    public NullableUInt64Converter(IFormatProvider formatProvider);
    public NullableUInt64Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
}
public class TinyCsvParser.TypeConverter.SByteConverter : NonNullableConverter`1<sbyte> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public SByteConverter(IFormatProvider formatProvider);
    public SByteConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, SByte& result);
}
public class TinyCsvParser.TypeConverter.SingleConverter : NonNullableConverter`1<float> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public SingleConverter(IFormatProvider formatProvider);
    public SingleConverter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, Single& result);
}
public class TinyCsvParser.TypeConverter.StringConverter : BaseConverter`1<string> {
    public virtual bool TryConvert(string value, String& result);
}
public class TinyCsvParser.TypeConverter.TimeSpanConverter : NonNullableConverter`1<TimeSpan> {
    private string format;
    private IFormatProvider formatProvider;
    private TimeSpanStyles timeSpanStyles;
    public TimeSpanConverter(string format);
    public TimeSpanConverter(string format, IFormatProvider formatProvider);
    public TimeSpanConverter(string format, IFormatProvider formatProvider, TimeSpanStyles timeSpanStyles);
    protected virtual bool InternalConvert(string value, TimeSpan& result);
}
public class TinyCsvParser.TypeConverter.TypeConverterProvider : object {
    private IDictionary`2<Type, ITypeConverter> typeConverters;
    public TypeConverterProvider Add(ITypeConverter`1<TTargetType> typeConverter);
    public TypeConverterProvider Add(IArrayTypeConverter`1<TTargetType> typeConverter);
    public sealed virtual ITypeConverter`1<TTargetType> Resolve();
    public sealed virtual IArrayTypeConverter`1<TTargetType> ResolveCollection();
}
public class TinyCsvParser.TypeConverter.UInt16Converter : NonNullableConverter`1<ushort> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public UInt16Converter(IFormatProvider formatProvider);
    public UInt16Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, UInt16& result);
}
public class TinyCsvParser.TypeConverter.UInt32Converter : NonNullableConverter`1<UInt32> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public UInt32Converter(IFormatProvider formatProvider);
    public UInt32Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, UInt32& result);
}
public class TinyCsvParser.TypeConverter.UInt64Converter : NonNullableConverter`1<ulong> {
    private IFormatProvider formatProvider;
    private NumberStyles numberStyles;
    public UInt64Converter(IFormatProvider formatProvider);
    public UInt64Converter(IFormatProvider formatProvider, NumberStyles numberStyles);
    protected virtual bool InternalConvert(string value, UInt64& result);
}
