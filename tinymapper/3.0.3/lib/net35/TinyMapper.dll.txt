[AttributeUsageAttribute("128")]
public class Nelibur.ObjectMapper.Bindings.BindAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public Type TargetType { get; }
    public string MemberName { get; }
    public BindAttribute(string targetMemberName, Type targetType);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public string get_MemberName();
}
internal class Nelibur.ObjectMapper.Bindings.BindingConfig : object {
    private Dictionary`2<string, List`1<string>> _oneToOneBindFields;
    private Dictionary`2<string, List`1<BindingFieldPath>> _bindFieldsPath;
    private Dictionary`2<string, Type> _bindTypes;
    private Dictionary`2<string, Func`2<object, object>> _customTypeConverters;
    private HashSet`1<string> _ignoreFields;
    internal void BindConverter(string targetName, Func`2<object, object> func);
    internal void BindFields(List`1<string> sourcePath, List`1<string> targetPath);
    internal void BindType(string targetName, Type value);
    internal Option`1<List`1<string>> GetBindField(string sourceName);
    internal Option`1<List`1<BindingFieldPath>> GetBindFieldPath(string fieldName);
    internal Option`1<Type> GetBindType(string targetName);
    internal Option`1<Func`2<object, object>> GetCustomTypeConverter(string targetName);
    internal bool HasCustomTypeConverter(string targetName);
    internal void IgnoreSourceField(string sourceName);
    internal bool IsIgnoreSourceField(string sourceName);
}
internal class Nelibur.ObjectMapper.Bindings.BindingConfigOf`2 : BindingConfig {
    public sealed virtual void Bind(Expression`1<Func`2<TSource, object>> source, Expression`1<Func`2<TTarget, object>> target);
    public sealed virtual void Bind(Expression`1<Func`2<TTarget, object>> target, Type targetType);
    public sealed virtual void Ignore(Expression`1<Func`2<TSource, object>> expression);
    private static string GetMemberInfo(Expression`1<Func`2<T, TField>> expression);
    private static List`1<string> GetMemberInfoPath(Expression`1<Func`2<T, TField>> expression);
}
internal class Nelibur.ObjectMapper.Bindings.BindingFieldPath : object {
    [CompilerGeneratedAttribute]
private List`1<string> <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceHead>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetHead>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasPath>k__BackingField;
    public List`1<string> SourcePath { get; }
    public List`1<string> TargetPath { get; }
    public string SourceHead { get; }
    public string TargetHead { get; }
    public bool HasPath { get; }
    public BindingFieldPath(List`1<string> sourcePath, List`1<string> targetPath);
    [CompilerGeneratedAttribute]
public List`1<string> get_SourcePath();
    [CompilerGeneratedAttribute]
public List`1<string> get_TargetPath();
    [CompilerGeneratedAttribute]
public string get_SourceHead();
    [CompilerGeneratedAttribute]
public string get_TargetHead();
    [CompilerGeneratedAttribute]
public bool get_HasPath();
}
public interface Nelibur.ObjectMapper.Bindings.IBindingConfig`2 {
    public abstract virtual void Bind(Expression`1<Func`2<TSource, object>> source, Expression`1<Func`2<TTarget, object>> target);
    public abstract virtual void Bind(Expression`1<Func`2<TTarget, object>> target, Type targetType);
    public abstract virtual void Ignore(Expression`1<Func`2<TSource, object>> expression);
}
[AttributeUsageAttribute("128")]
public class Nelibur.ObjectMapper.Bindings.IgnoreAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <TargetType>k__BackingField;
    public Type TargetType { get; }
    public IgnoreAttribute(Type targetType);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
}
internal class Nelibur.ObjectMapper.CodeGenerators.CodeGenerator : object {
    private ILGenerator _ilGenerator;
    public CodeGenerator(ILGenerator ilGenerator);
    public CodeGenerator CastType(Type stackType, Type targetType);
    public LocalBuilder DeclareLocal(Type type);
    public void Emit(OpCode opCode);
    public void Emit(OpCode opCode, int value);
    public void Emit(OpCode opCode, Type value);
    public void Emit(OpCode opCode, FieldInfo value);
    public void EmitCall(MethodInfo method, IEmitterType invocationObject, IEmitterType[] arguments);
    public void EmitNewObject(ConstructorInfo ctor);
    private void EmitCall(MethodInfo method);
}
internal static class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitArgument : object {
    public static IEmitterType Load(Type type, int index);
}
internal static class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitArray : object {
    public static IEmitterType Load(IEmitterType array, int index);
}
internal class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitBox : object {
    private IEmitterType _value;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    public Type ObjectType { get; }
    private EmitBox(IEmitterType value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ObjectType();
    public sealed virtual void Emit(CodeGenerator generator);
    public static IEmitterType Box(IEmitterType value);
}
internal class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitComposite : object {
    private List`1<IEmitter> _nodes;
    public sealed virtual void Emit(CodeGenerator generator);
    public EmitComposite Add(IEmitter node);
}
internal static class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitField : object {
    public static IEmitterType Load(IEmitterType source, FieldInfo field);
    public static IEmitterType Store(FieldInfo field, IEmitterType targetObject, IEmitterType value);
}
internal static class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitLocal : object {
    public static IEmitterType Load(LocalBuilder localBuilder);
}
internal class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitLocalVariable : object {
    private Option`1<LocalBuilder> _localBuilder;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    public Type ObjectType { get; }
    private EmitLocalVariable(LocalBuilder localBuilder);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ObjectType();
    public sealed virtual void Emit(CodeGenerator generator);
    public static IEmitterType Declare(LocalBuilder localBuilder);
}
internal static class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitMethod : object {
    public static IEmitterType Call(MethodInfo method, IEmitterType invocationObject, IEmitterType[] arguments);
    public static IEmitterType CallStatic(MethodInfo method, IEmitterType[] arguments);
}
internal class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitNewObj : object {
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    public Type ObjectType { get; }
    private EmitNewObj(Type objectType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ObjectType();
    public sealed virtual void Emit(CodeGenerator generator);
    public static IEmitterType NewObj(Type objectType);
}
internal class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitNull : object {
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    public Type ObjectType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ObjectType();
    public sealed virtual void Emit(CodeGenerator generator);
    public static IEmitterType Load();
}
internal class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitProperty : object {
    public static IEmitterType Load(IEmitterType source, PropertyInfo property);
    public static IEmitterType Store(PropertyInfo property, IEmitterType targetObject, IEmitterType value);
}
internal class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitReturn : object {
    private IEmitterType _returnValue;
    [CompilerGeneratedAttribute]
private Type <ObjectType>k__BackingField;
    public Type ObjectType { get; }
    private EmitReturn(IEmitterType returnValue, Type returnType);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ObjectType();
    public sealed virtual void Emit(CodeGenerator generator);
    public static IEmitterType Return(IEmitterType returnValue, Type returnType);
}
internal static class Nelibur.ObjectMapper.CodeGenerators.Emitters.EmitThis : object {
    public static IEmitterType Load(Type thisType);
}
internal interface Nelibur.ObjectMapper.CodeGenerators.Emitters.IEmitter {
    public abstract virtual void Emit(CodeGenerator generator);
}
internal interface Nelibur.ObjectMapper.CodeGenerators.Emitters.IEmitterType {
    public Type ObjectType { get; }
    public abstract virtual Type get_ObjectType();
}
internal class Nelibur.ObjectMapper.Core.DataStructures.Option`1 : ValueType {
    [CompilerGeneratedAttribute]
private static Option`1<T> <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public static Option`1<T> Empty { get; }
    public bool HasNoValue { get; }
    public bool HasValue { get; }
    public T Value { get; }
    public Option`1(T value, bool hasValue);
    private static Option`1();
    [CompilerGeneratedAttribute]
public static Option`1<T> get_Empty();
    public bool get_HasNoValue();
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    [CompilerGeneratedAttribute]
public T get_Value();
    public Option`1<T> Match(Func`2<T, bool> predicate, Action`1<T> action);
    public Option`1<T> MatchType(Action`1<TTarget> action);
    public Option`1<T> ThrowOnEmpty();
    public Option`1<T> ThrowOnEmpty(Func`1<TException> func);
}
internal class Nelibur.ObjectMapper.Core.DataStructures.TypePair : ValueType {
    [CompilerGeneratedAttribute]
private Type <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Target>k__BackingField;
    public bool IsDeepCloneable { get; }
    public bool IsEnumTypes { get; }
    public bool IsEnumerableTypes { get; }
    public bool IsNullableToNotNullable { get; }
    public Type Source { get; }
    public Type Target { get; }
    private bool IsEqualTypes { get; }
    private bool IsNullableTypes { get; }
    private bool IsPrimitiveTypes { get; }
    private bool IsValueTypes { get; }
    public TypePair(Type source, Type target);
    public bool get_IsDeepCloneable();
    public bool get_IsEnumTypes();
    public bool get_IsEnumerableTypes();
    public bool get_IsNullableToNotNullable();
    [CompilerGeneratedAttribute]
public Type get_Source();
    [CompilerGeneratedAttribute]
public Type get_Target();
    private bool get_IsEqualTypes();
    private bool get_IsNullableTypes();
    private bool get_IsPrimitiveTypes();
    private bool get_IsValueTypes();
    public static TypePair Create(Type source, Type target);
    public static TypePair Create();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool HasTypeConverter();
    public sealed virtual bool Equals(TypePair other);
}
internal static class Nelibur.ObjectMapper.Core.Error : object {
    public static Exception ArgumentNull(string paramName);
    public static Exception InvalidOperation(string message);
    public static Exception NotImplemented();
    public static Exception NotSupported();
    public static Exception Type();
    private static Func`1<T> CreateCtor();
}
[ExtensionAttribute]
internal static class Nelibur.ObjectMapper.Core.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
public static Option`1<TValue> GetValue(IDictionary`2<TKey, TValue> value, TKey key);
}
[ExtensionAttribute]
internal static class Nelibur.ObjectMapper.Core.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static List`1<TResult> ConvertAll(IEnumerable`1<TFrom> value, Func`2<TFrom, TResult> converter);
    [ExtensionAttribute]
public static int Count(IEnumerable source);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(IEnumerable`1<T> value);
    [ExtensionAttribute]
public static void Iter(IEnumerable`1<T> value, Action`1<T> action);
    [ExtensionAttribute]
public static void IterI(IEnumerable`1<T> value, Action`2<int, T> action);
    [ExtensionAttribute]
public static void IterSafe(IEnumerable`1<T> value, Action`1<T> action, Action`1<Exception> exceptionHandler);
    [ExtensionAttribute]
public static IEnumerable`1<T> ToValue(IEnumerable`1<Option`1<T>> value);
}
[ExtensionAttribute]
internal static class Nelibur.ObjectMapper.Core.Extensions.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Option`1<TAttribute> GetAttribute(MemberInfo value);
    [ExtensionAttribute]
public static List`1<TAttribute> GetAttributes(MemberInfo value);
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo value);
    [ExtensionAttribute]
public static bool IsField(MemberInfo value);
    [ExtensionAttribute]
public static bool IsProperty(MemberInfo value);
    [ExtensionAttribute]
private static bool IsMethod(MemberInfo value);
}
[ExtensionAttribute]
internal static class Nelibur.ObjectMapper.Core.Extensions.ObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsNotNull(object obj);
    [ExtensionAttribute]
public static bool IsNull(object obj);
    [ExtensionAttribute]
public static Option`1<T> ToOption(T value);
    [ExtensionAttribute]
public static Option`1<TResult> ToType(object obj);
}
[ExtensionAttribute]
internal static class Nelibur.ObjectMapper.Core.Extensions.OptionExtensions : object {
    [ExtensionAttribute]
public static Option`1<T> Do(Option`1<T> value, Action`1<T> action);
    [ExtensionAttribute]
public static Option`1<T> DoOnEmpty(Option`1<T> value, Action action);
    [ExtensionAttribute]
public static Option`1<T> Finally(Option`1<T> value, Action`1<T> action);
    [ExtensionAttribute]
public static Option`1<TResult> Map(Option`1<TInput> value, Func`2<TInput, Option`1<TResult>> func);
    [ExtensionAttribute]
public static Option`1<TResult> Map(Option`1<TInput> value, Func`2<TInput, TResult> func);
    [ExtensionAttribute]
public static Option`1<TResult> Map(Option`1<TInput> value, Func`2<TInput, bool> predicate, Func`2<TInput, TResult> func);
    [ExtensionAttribute]
public static Option`1<T> MapOnEmpty(Option`1<T> value, Func`1<T> func);
    [ExtensionAttribute]
public static Option`1<V> SelectMany(Option`1<T> value, Func`2<T, Option`1<U>> func, Func`3<T, U, V> selector);
    [ExtensionAttribute]
public static Option`1<T> Where(Option`1<T> value, Func`2<T, bool> predicate);
}
[ExtensionAttribute]
internal static class Nelibur.ObjectMapper.Core.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static Type GetCollectionItemType(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDefaultCtor(Type type);
    [ExtensionAttribute]
public static KeyValuePair`2<Type, Type> GetDictionaryItemTypes(Type type);
    [ExtensionAttribute]
public static MethodInfo GetGenericMethod(Type type, string methodName, Type[] arguments);
    [ExtensionAttribute]
public static bool HasDefaultCtor(Type type);
    [ExtensionAttribute]
public static bool IsDictionaryOf(Type type);
    [ExtensionAttribute]
public static bool IsIEnumerable(Type type);
    [ExtensionAttribute]
public static bool IsIEnumerableOf(Type type);
    [ExtensionAttribute]
public static bool IsListOf(Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
}
internal static class Nelibur.ObjectMapper.Core.Helpers : object {
    internal static bool IsValueType(Type type);
    internal static bool IsPrimitive(Type type);
    internal static bool IsEnum(Type type);
    internal static bool IsGenericType(Type type);
    internal static Type CreateType(TypeBuilder typeBuilder);
    internal static Type BaseType(Type type);
}
public interface Nelibur.ObjectMapper.ITinyMapperConfig {
    public abstract virtual void NameMatching(Func`3<string, string, bool> nameMatching);
    public abstract virtual void Reset();
}
internal class Nelibur.ObjectMapper.Mappers.Caches.MapperCache : object {
    private Dictionary`2<TypePair, MapperCacheItem> _cache;
    public bool IsEmpty { get; }
    public List`1<Mapper> Mappers { get; }
    public List`1<MapperCacheItem> MapperCacheItems { get; }
    public bool get_IsEmpty();
    public List`1<Mapper> get_Mappers();
    public List`1<MapperCacheItem> get_MapperCacheItems();
    public MapperCacheItem AddStub(TypePair key);
    public void ReplaceStub(TypePair key, Mapper mapper);
    public MapperCacheItem Add(TypePair key, Mapper mapper);
    public Option`1<MapperCacheItem> Get(TypePair key);
    private int GetId();
}
internal class Nelibur.ObjectMapper.Mappers.Caches.MapperCacheItem : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Mapper <Mapper>k__BackingField;
    public int Id { get; public set; }
    public Mapper Mapper { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Mapper get_Mapper();
    [CompilerGeneratedAttribute]
public void set_Mapper(Mapper value);
    public IEmitterType EmitMapMethod(IEmitterType sourceMemeber, IEmitterType targetMember);
}
internal abstract class Nelibur.ObjectMapper.Mappers.Classes.ClassMapper`2 : MapperOf`2<TSource, TTarget> {
    protected virtual TTarget CreateTargetInstance();
    protected abstract virtual TTarget MapClass(TSource source, TTarget target);
    protected virtual TTarget MapCore(TSource source, TTarget target);
}
internal class Nelibur.ObjectMapper.Mappers.Classes.ClassMapperBuilder : MapperBuilder {
    private MapperCache _mapperCache;
    private static string CreateTargetInstanceMethod;
    private static string MapClassMethod;
    private MappingMemberBuilder _mappingMemberBuilder;
    private MemberMapper _memberMapper;
    protected string ScopeName { get; }
    public ClassMapperBuilder(MapperCache mapperCache, IMapperBuilderConfig config);
    protected virtual string get_ScopeName();
    protected virtual Mapper BuildCore(TypePair typePair);
    private static void UpdateMappers(Option`1<MapperCache> mappers, int rootMapperId, Mapper rootMapper);
    protected virtual Mapper BuildCore(TypePair parentTypePair, MappingMember mappingMember);
    protected virtual bool IsSupportedCore(TypePair typePair);
    private static void EmitCreateTargetInstance(Type targetType, TypeBuilder typeBuilder);
    private static IEmitterType EmitRefType(Type type);
    private static IEmitterType EmitValueType(Type type, CodeGenerator codeGenerator);
    private Option`1<MapperCache> EmitMapClass(TypePair typePair, TypeBuilder typeBuilder);
    private MemberEmitterDescription EmitMappingMembers(TypePair typePair);
}
internal class Nelibur.ObjectMapper.Mappers.Classes.Members.MappingMember : object {
    [CompilerGeneratedAttribute]
private MemberInfo <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private TypePair <TypePair>k__BackingField;
    public MemberInfo Source { get; }
    public MemberInfo Target { get; }
    public TypePair TypePair { get; }
    public MappingMember(MemberInfo source, MemberInfo target, TypePair typePair);
    [CompilerGeneratedAttribute]
public MemberInfo get_Source();
    [CompilerGeneratedAttribute]
public MemberInfo get_Target();
    [CompilerGeneratedAttribute]
public TypePair get_TypePair();
}
internal class Nelibur.ObjectMapper.Mappers.Classes.Members.MappingMemberBuilder : object {
    private IMapperBuilderConfig _config;
    public MappingMemberBuilder(IMapperBuilderConfig config);
    public List`1<MappingMemberPath> Build(TypePair typePair);
    private static MemberInfo[] GetPublicMembers(Type type);
    private static List`1<MemberInfo> GetSourceMembers(Type sourceType);
    private static List`1<MemberInfo> GetTargetMembers(Type targetType);
    private List`1<string> GetTargetName(Option`1<BindingConfig> bindingConfig, TypePair typePair, MemberInfo sourceMember, Dictionary`2<string, string> targetBindings);
    private Dictionary`2<string, string> GetTest(TypePair typePair, List`1<MemberInfo> targetMembers);
    private bool IsIgnore(Option`1<BindingConfig> bindingConfig, TypePair typePair, MemberInfo sourceMember);
    private List`1<MemberInfo> GetSourceMemberPath(List`1<string> fieldPath, Type sourceType);
    private List`1<MappingMemberPath> ParseMappingTypes(TypePair typePair);
    private List`1<MappingMemberPath> GetBindMappingMemberPath(TypePair typePair, Option`1<BindingConfig> bindingConfig, MemberInfo sourceMember);
}
internal class Nelibur.ObjectMapper.Mappers.Classes.Members.MappingMemberPath : object {
    [CompilerGeneratedAttribute]
private bool <OneLevelSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OneLevelTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MemberInfo> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MemberInfo> <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private TypePair <TypePair>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingMember <Tail>k__BackingField;
    [CompilerGeneratedAttribute]
private MappingMember <Head>k__BackingField;
    public bool OneLevelSource { get; }
    public bool OneLevelTarget { get; }
    public List`1<MemberInfo> Source { get; }
    public List`1<MemberInfo> Target { get; }
    public TypePair TypePair { get; }
    public MappingMember Tail { get; }
    public MappingMember Head { get; }
    public MappingMemberPath(List`1<MemberInfo> source, List`1<MemberInfo> target);
    public MappingMemberPath(MemberInfo source, MemberInfo target);
    public MappingMemberPath(MemberInfo source, MemberInfo target, TypePair typePair);
    public MappingMemberPath(List`1<MemberInfo> source, List`1<MemberInfo> target, TypePair typePair);
    [CompilerGeneratedAttribute]
public bool get_OneLevelSource();
    [CompilerGeneratedAttribute]
public bool get_OneLevelTarget();
    [CompilerGeneratedAttribute]
public List`1<MemberInfo> get_Source();
    [CompilerGeneratedAttribute]
public List`1<MemberInfo> get_Target();
    [CompilerGeneratedAttribute]
public TypePair get_TypePair();
    [CompilerGeneratedAttribute]
public MappingMember get_Tail();
    [CompilerGeneratedAttribute]
public MappingMember get_Head();
}
internal class Nelibur.ObjectMapper.Mappers.Classes.Members.MemberEmitterDescription : object {
    [CompilerGeneratedAttribute]
private IEmitter <Emitter>k__BackingField;
    [CompilerGeneratedAttribute]
private Option`1<MapperCache> <MapperCache>k__BackingField;
    public IEmitter Emitter { get; }
    public Option`1<MapperCache> MapperCache { get; private set; }
    public MemberEmitterDescription(IEmitter emitter, MapperCache mappers);
    [CompilerGeneratedAttribute]
public IEmitter get_Emitter();
    [CompilerGeneratedAttribute]
public Option`1<MapperCache> get_MapperCache();
    [CompilerGeneratedAttribute]
private void set_MapperCache(Option`1<MapperCache> value);
    public void AddMapper(MapperCache value);
}
internal class Nelibur.ObjectMapper.Mappers.Classes.Members.MemberMapper : object {
    private IMapperBuilderConfig _config;
    private MapperCache _mapperCache;
    public MemberMapper(MapperCache mapperCache, IMapperBuilderConfig config);
    public MemberEmitterDescription Build(TypePair parentTypePair, List`1<MappingMemberPath> members);
    private static IEmitterType StoreFiled(FieldInfo field, IEmitterType targetObject, IEmitterType value);
    private static IEmitterType StoreProperty(PropertyInfo property, IEmitterType targetObject, IEmitterType value);
    private static IEmitterType StoreTargetObjectMember(MappingMember member, IEmitterType targetObject, IEmitterType convertedMember);
    private IEmitter Build(TypePair parentTypePair, MappingMemberPath memberPath);
    private IEmitterType ConvertMember(TypePair parentTypePair, MappingMember member, IEmitterType sourceMemeber, IEmitterType targetMember);
    private MapperCacheItem CreateMapperCacheItem(TypePair parentTypePair, MappingMember mappingMember);
    private IEmitterType LoadField(IEmitterType source, FieldInfo field);
    private IEmitterType LoadMember(List`1<MemberInfo> members, IEmitterType sourceObject, int loadLevel);
    private IEmitterType LoadMember(MemberInfo member, IEmitterType sourceObject);
    private IEmitterType LoadProperty(IEmitterType source, PropertyInfo property);
}
internal abstract class Nelibur.ObjectMapper.Mappers.Collections.CollectionMapper`2 : MapperOf`2<TSource, TTarget> {
    protected virtual object ConvertItem(object item);
    protected virtual object ConvertItemKey(object item);
    protected virtual TTarget DictionaryToDictionary(IEnumerable source);
    protected Dictionary`2<TTargetKey, TTargetValue> DictionaryToDictionaryTemplate(IEnumerable source);
    protected virtual TTarget EnumerableToArray(IEnumerable source);
    protected Array EnumerableToArrayTemplate(IEnumerable source);
    protected virtual TTarget EnumerableToList(IEnumerable source);
    protected virtual TTarget EnumerableToArrayList(IEnumerable source);
    protected List`1<TTargetItem> EnumerableToListTemplate(IEnumerable source);
    protected List`1<TTargetItem> EnumerableOfDeepCloneableToListTemplate(IEnumerable source);
    protected virtual TTarget EnumerableToEnumerable(IEnumerable source);
    protected virtual TTarget MapCore(TSource source, TTarget target);
}
internal class Nelibur.ObjectMapper.Mappers.Collections.CollectionMapperBuilder : MapperBuilder {
    private MapperCache _mapperCache;
    private static string ConvertItemKeyMethod;
    private static string ConvertItemMethod;
    private static string DictionaryToDictionaryMethod;
    private static string DictionaryToDictionaryTemplateMethod;
    private static string EnumerableToArrayMethod;
    private static string EnumerableToArrayTemplateMethod;
    private static string EnumerableToListMethod;
    private static string EnumerableToListTemplateMethod;
    private static string EnumerableOfDeepCloneableToListTemplateMethod;
    protected string ScopeName { get; }
    public CollectionMapperBuilder(MapperCache mapperCache, IMapperBuilderConfig config);
    protected virtual string get_ScopeName();
    protected virtual Mapper BuildCore(TypePair typePair);
    protected virtual Mapper BuildCore(TypePair parentTypePair, MappingMember mappingMember);
    protected virtual bool IsSupportedCore(TypePair typePair);
    private static bool IsDictionaryToDictionary(TypePair typePair);
    private static bool IsIEnumerableToArray(TypePair typePair);
    private static bool IsIEnumerableToList(TypePair typePair);
    private bool IsEnumerableToEnumerable(TypePair typePair);
    private MapperCacheItem CreateMapperCacheItem(TypePair typePair);
    private void EmitConvertItem(TypeBuilder typeBuilder, TypePair typePair, string methodName);
    private void EmitDictionaryToDictionary(Type parentType, TypeBuilder typeBuilder, TypePair typePair);
    private void EmitDictionaryToTarget(Type parentType, TypeBuilder typeBuilder, TypePair typePair, string methodName, string templateMethodName);
    private void EmitEnumerableToArray(Type parentType, TypeBuilder typeBuilder, TypePair typePair);
    private void EmitEnumerableToList(Type parentType, TypeBuilder typeBuilder, TypePair typePair);
    private void EmitEnumerableToEnumerable(Type parentType, TypeBuilder typeBuilder, TypePair typePair);
    private static TypePair GetCollectionItemTypePair(TypePair typePair);
    private void EmitEnumerableToTarget(Type parentType, TypeBuilder typeBuilder, TypePair typePair, TypePair collectionItemTypePair, string methodName, string templateMethodName);
}
internal interface Nelibur.ObjectMapper.Mappers.IMapperBuilderConfig {
    public IDynamicAssembly Assembly { get; }
    public Func`3<string, string, bool> NameMatching { get; }
    public abstract virtual IDynamicAssembly get_Assembly();
    public abstract virtual Func`3<string, string, bool> get_NameMatching();
    public abstract virtual Option`1<BindingConfig> GetBindingConfig(TypePair typePair);
    public abstract virtual MapperBuilder GetMapperBuilder(TypePair typePair);
    public abstract virtual MapperBuilder GetMapperBuilder(TypePair parentTypePair, MappingMember mappingMember);
}
internal abstract class Nelibur.ObjectMapper.Mappers.Mapper : object {
    public static string MapMethodName;
    public static string MappersFieldName;
    protected Mapper[] _mappers;
    public void AddMappers(IEnumerable`1<Mapper> mappers);
    public void UpdateRootMapper(int mapperId, Mapper mapper);
    public object Map(object source, object target);
    protected abstract virtual object MapCore(object source, object target);
}
internal abstract class Nelibur.ObjectMapper.Mappers.MapperBuilder : object {
    protected static MethodAttributes OverrideProtected;
    private static string AssemblyName;
    protected IDynamicAssembly _assembly;
    protected IMapperBuilderConfig _config;
    protected string ScopeName { get; }
    protected MapperBuilder(IMapperBuilderConfig config);
    protected abstract virtual string get_ScopeName();
    public Mapper Build(TypePair typePair);
    public Mapper Build(TypePair parentTypePair, MappingMember mappingMember);
    public bool IsSupported(TypePair typePair);
    protected abstract virtual Mapper BuildCore(TypePair typePair);
    protected abstract virtual Mapper BuildCore(TypePair parentTypePair, MappingMember mappingMember);
    protected MapperBuilder GetMapperBuilder(TypePair typePair);
    protected string GetMapperFullName();
    protected abstract virtual bool IsSupportedCore(TypePair typePair);
}
internal abstract class Nelibur.ObjectMapper.Mappers.MapperOf`2 : Mapper {
    protected virtual object MapCore(object source, object target);
    protected abstract virtual TTarget MapCore(TSource source, TTarget target);
}
internal class Nelibur.ObjectMapper.Mappers.TargetMapperBuilder : object {
    public static Func`3<string, string, bool> DefaultNameMatching;
    private Dictionary`2<TypePair, BindingConfig> _bindingConfigs;
    private ClassMapperBuilder _classMapperBuilder;
    private CollectionMapperBuilder _collectionMapperBuilder;
    private ConvertibleTypeMapperBuilder _convertibleTypeMapperBuilder;
    private CustomTypeMapperBuilder _customTypeMapperBuilder;
    [CompilerGeneratedAttribute]
private Func`3<string, string, bool> <NameMatching>k__BackingField;
    [CompilerGeneratedAttribute]
private IDynamicAssembly <Assembly>k__BackingField;
    public Func`3<string, string, bool> NameMatching { get; private set; }
    public IDynamicAssembly Assembly { get; }
    public TargetMapperBuilder(IDynamicAssembly assembly);
    private static TargetMapperBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual Func`3<string, string, bool> get_NameMatching();
    [CompilerGeneratedAttribute]
private void set_NameMatching(Func`3<string, string, bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDynamicAssembly get_Assembly();
    public sealed virtual Option`1<BindingConfig> GetBindingConfig(TypePair typePair);
    public sealed virtual MapperBuilder GetMapperBuilder(TypePair parentTypePair, MappingMember mappingMember);
    public sealed virtual MapperBuilder GetMapperBuilder(TypePair typePair);
    public void SetNameMatching(Func`3<string, string, bool> nameMatching);
    public Mapper Build(TypePair typePair, BindingConfig bindingConfig);
    public Mapper Build(TypePair typePair);
    private MapperBuilder GetTypeMapperBuilder(TypePair typePair);
}
internal class Nelibur.ObjectMapper.Mappers.Types.Convertible.ConvertibleTypeMapper : Mapper {
    private Func`2<object, object> _converter;
    public ConvertibleTypeMapper(Func`2<object, object> converter);
    protected virtual object MapCore(object source, object target);
}
internal class Nelibur.ObjectMapper.Mappers.Types.Convertible.ConvertibleTypeMapperBuilder : MapperBuilder {
    private static Func`2<object, object> _nothingConverter;
    protected string ScopeName { get; }
    public ConvertibleTypeMapperBuilder(IMapperBuilderConfig config);
    private static ConvertibleTypeMapperBuilder();
    protected virtual string get_ScopeName();
    protected virtual Mapper BuildCore(TypePair typePair);
    protected virtual Mapper BuildCore(TypePair parentTypePair, MappingMember mappingMember);
    protected virtual bool IsSupportedCore(TypePair typePair);
    private static Option`1<Func`2<object, object>> ConvertEnum(TypePair pair);
    private static Func`2<object, object> GetConverter(TypePair pair);
    private bool IsSupportedType(Type value);
}
internal class Nelibur.ObjectMapper.Mappers.Types.Custom.CustomTypeMapper : Mapper {
    private Func`2<object, object> _converter;
    public CustomTypeMapper(Func`2<object, object> converter);
    protected virtual object MapCore(object source, object target);
}
internal class Nelibur.ObjectMapper.Mappers.Types.Custom.CustomTypeMapperBuilder : MapperBuilder {
    protected string ScopeName { get; }
    public CustomTypeMapperBuilder(IMapperBuilderConfig config);
    protected virtual string get_ScopeName();
    public bool IsSupported(TypePair parentTypePair, MappingMember mappingMember);
    protected virtual Mapper BuildCore(TypePair typePair);
    protected virtual Mapper BuildCore(TypePair parentTypePair, MappingMember mappingMember);
    protected virtual bool IsSupportedCore(TypePair typePair);
}
internal class Nelibur.ObjectMapper.Reflection.DynamicAssemblyBuilder : object {
    internal static string AssemblyName;
    private static DynamicAssembly _dynamicAssembly;
    private static DynamicAssemblyBuilder();
    public static IDynamicAssembly Get();
}
internal interface Nelibur.ObjectMapper.Reflection.IDynamicAssembly {
    public abstract virtual TypeBuilder DefineType(string typeName, Type parentType);
    public abstract virtual void Save();
}
public static class Nelibur.ObjectMapper.TinyMapper : object {
    private static Dictionary`2<TypePair, Mapper> _mappers;
    private static TargetMapperBuilder _targetMapperBuilder;
    private static TinyMapperConfig _config;
    private static object _mappersLock;
    private static TinyMapper();
    public static void Bind();
    public static void Bind(Type sourceType, Type targetType);
    public static void Bind(Action`1<IBindingConfig`2<TSource, TTarget>> config);
    public static bool BindingExists();
    public static TTarget Map(TSource source, TTarget target);
    public static object Map(Type sourceType, Type targetType, object source, object target);
    public static void Config(Action`1<ITinyMapperConfig> config);
    public static TTarget Map(object source);
    private static Mapper GetMapper(TypePair typePair);
}
internal class Nelibur.ObjectMapper.TinyMapperConfig : object {
    private TargetMapperBuilder _targetMapperBuilder;
    public TinyMapperConfig(TargetMapperBuilder targetMapperBuilder);
    public sealed virtual void NameMatching(Func`3<string, string, bool> nameMatching);
    public sealed virtual void Reset();
}
public class Nelibur.ObjectMapper.TinyMapperException : Exception {
    public TinyMapperException(string message);
    public TinyMapperException(string message, Exception innerException);
    protected TinyMapperException(SerializationInfo info, StreamingContext context);
}
