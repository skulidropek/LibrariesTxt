public class Topshelf.Builders.CommandBuilder : object {
    private int _command;
    private HostEnvironment _environment;
    private HostSettings _settings;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public CommandBuilder(HostBuilder builder, int command);
    public sealed virtual HostEnvironment get_Environment();
    public sealed virtual HostSettings get_Settings();
    public sealed virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
}
public class Topshelf.Builders.ControlServiceBuilder`1 : object {
    private ServiceEvents _serviceEvents;
    private Func`2<HostSettings, T> _serviceFactory;
    public ControlServiceBuilder`1(Func`2<HostSettings, T> serviceFactory, ServiceEvents serviceEvents);
    public sealed virtual ServiceHandle Build(HostSettings settings);
}
public class Topshelf.Builders.DelegateServiceBuilder`1 : object {
    private Func`3<T, HostControl, bool> _continue;
    private Func`3<T, HostControl, bool> _pause;
    private ServiceEvents _serviceEvents;
    private ServiceFactory`1<T> _serviceFactory;
    private Action`2<T, HostControl> _shutdown;
    private Func`3<T, HostControl, bool> _start;
    private Func`3<T, HostControl, bool> _stop;
    private Action`3<T, HostControl, SessionChangedArguments> _sessionChanged;
    private Func`4<T, HostControl, PowerEventArguments, bool> _powerEvent;
    private Action`3<T, HostControl, int> _customCommand;
    public DelegateServiceBuilder`1(ServiceFactory`1<T> serviceFactory, Func`3<T, HostControl, bool> start, Func`3<T, HostControl, bool> stop, Func`3<T, HostControl, bool> pause, Func`3<T, HostControl, bool> continue, Action`2<T, HostControl> shutdown, Action`3<T, HostControl, SessionChangedArguments> sessionChanged, Func`4<T, HostControl, PowerEventArguments, bool> powerEvent, Action`3<T, HostControl, int> customCommand, ServiceEvents serviceEvents);
    public sealed virtual ServiceHandle Build(HostSettings settings);
}
public interface Topshelf.Builders.EnvironmentBuilder {
    public abstract virtual HostEnvironment Build();
}
public class Topshelf.Builders.HelpBuilder : object {
    private HostEnvironment _environment;
    private HostSettings _settings;
    private string _prefixText;
    private bool _systemHelpTextOnly;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public HelpBuilder(HostEnvironment environment, HostSettings settings);
    public sealed virtual HostEnvironment get_Environment();
    public sealed virtual HostSettings get_Settings();
    public sealed virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
    public void SetAdditionalHelpText(string prefixText);
    public void SystemHelpTextOnly();
}
public interface Topshelf.Builders.HostBuilder {
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public abstract virtual HostEnvironment get_Environment();
    public abstract virtual HostSettings get_Settings();
    public abstract virtual Host Build(ServiceBuilder serviceBuilder);
    public abstract virtual void Match(Action`1<T> callback);
}
public class Topshelf.Builders.InstallBuilder : object {
    private IList`1<string> _dependencies;
    private HostEnvironment _environment;
    private IList`1<Action`1<InstallHostSettings>> _postActions;
    private IList`1<Action`1<InstallHostSettings>> _preActions;
    private IList`1<Action`1<InstallHostSettings>> _postRollbackActions;
    private IList`1<Action`1<InstallHostSettings>> _preRollbackActions;
    private HostSettings _settings;
    private Credentials _credentials;
    private HostStartMode _startMode;
    private bool _sudo;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public InstallBuilder(HostEnvironment environment, HostSettings settings);
    public sealed virtual HostEnvironment get_Environment();
    public sealed virtual HostSettings get_Settings();
    public sealed virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
    public void RunAs(string username, string password, ServiceAccount accountType);
    public void Sudo();
    public void SetStartMode(HostStartMode startMode);
    public void BeforeInstall(Action`1<InstallHostSettings> callback);
    public void AfterInstall(Action`1<InstallHostSettings> callback);
    public void BeforeRollback(Action`1<InstallHostSettings> callback);
    public void AfterRollback(Action`1<InstallHostSettings> callback);
    public void AddDependency(string name);
}
public class Topshelf.Builders.RunBuilder : object {
    private static LogWriter _log;
    [CompilerGeneratedAttribute]
private HostEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private HostSettings <Settings>k__BackingField;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public RunBuilder(HostEnvironment environment, HostSettings settings);
    private static RunBuilder();
    [CompilerGeneratedAttribute]
public sealed virtual HostEnvironment get_Environment();
    [CompilerGeneratedAttribute]
public sealed virtual HostSettings get_Settings();
    public virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
    private Host CreateHost(ServiceHandle serviceHandle);
}
public interface Topshelf.Builders.ServiceBuilder {
    public abstract virtual ServiceHandle Build(HostSettings settings);
}
public class Topshelf.Builders.StartBuilder : object {
    private HostBuilder _builder;
    private HostEnvironment _environment;
    private HostSettings _settings;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public StartBuilder(HostBuilder builder);
    public sealed virtual HostEnvironment get_Environment();
    public sealed virtual HostSettings get_Settings();
    public sealed virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
    private static HostBuilder GetParentBuilder(HostBuilder builder);
}
public class Topshelf.Builders.StopBuilder : object {
    private HostEnvironment _environment;
    private HostSettings _settings;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public StopBuilder(HostEnvironment environment, HostSettings settings);
    public sealed virtual HostEnvironment get_Environment();
    public sealed virtual HostSettings get_Settings();
    public sealed virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
}
public class Topshelf.Builders.TestBuilder : object {
    private static LogWriter _log;
    private HostEnvironment _environment;
    private HostSettings _settings;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public TestBuilder(HostEnvironment environment, HostSettings settings);
    private static TestBuilder();
    public sealed virtual HostEnvironment get_Environment();
    public sealed virtual HostSettings get_Settings();
    public virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
    private Host CreateHost(ServiceHandle serviceHandle);
}
public class Topshelf.Builders.UninstallBuilder : object {
    private HostEnvironment _environment;
    private IList`1<Action> _postActions;
    private IList`1<Action> _preActions;
    private HostSettings _settings;
    private bool _sudo;
    public HostEnvironment Environment { get; }
    public HostSettings Settings { get; }
    public UninstallBuilder(HostEnvironment environment, HostSettings settings);
    public sealed virtual HostEnvironment get_Environment();
    public sealed virtual HostSettings get_Settings();
    public sealed virtual Host Build(ServiceBuilder serviceBuilder);
    public sealed virtual void Match(Action`1<T> callback);
    public void Sudo();
    public void BeforeUninstall(Action callback);
    public void AfterUninstall(Action callback);
}
[DefaultMemberAttribute("Item")]
internal interface Topshelf.Caching.Cache`2 {
    unknown MissingValueProvider`2<TKey, TValue> MissingValueProvider {public set; }
    unknown CacheItemCallback`2<TKey, TValue> ValueAddedCallback {public set; }
    unknown CacheItemCallback`2<TKey, TValue> ValueRemovedCallback {public set; }
    unknown CacheItemCallback`2<TKey, TValue> DuplicateValueAdded {public set; }
    unknown KeySelector`2<TKey, TValue> KeySelector {public set; }
    public TValue Item { get; public set; }
    public abstract virtual void set_MissingValueProvider(MissingValueProvider`2<TKey, TValue> value);
    public abstract virtual void set_ValueAddedCallback(CacheItemCallback`2<TKey, TValue> value);
    public abstract virtual void set_ValueRemovedCallback(CacheItemCallback`2<TKey, TValue> value);
    public abstract virtual void set_DuplicateValueAdded(CacheItemCallback`2<TKey, TValue> value);
    public abstract virtual void set_KeySelector(KeySelector`2<TKey, TValue> value);
    public abstract virtual TValue get_Item(TKey key);
    public abstract virtual void set_Item(TKey key, TValue value);
    public abstract virtual TValue Get(TKey key);
    public abstract virtual TValue Get(TKey key, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public abstract virtual TValue GetValue(TKey key, TValue defaultValue);
    public abstract virtual TValue GetValue(TKey key, Func`1<TValue> defaultValueProvider);
    public abstract virtual bool TryGetValue(TKey key, TValue& value);
    public abstract virtual void Add(TKey key, TValue value);
    public abstract virtual void AddValue(TValue value);
    public abstract virtual void Remove(TKey key);
    public abstract virtual void RemoveValue(TValue value);
    public abstract virtual void Clear();
    public abstract virtual void Fill(IEnumerable`1<TValue> values);
    public abstract virtual bool WithValue(TKey key, Action`1<TValue> callback);
    public abstract virtual TResult WithValue(TKey key, Func`2<TValue, TResult> callback, TResult defaultValue);
    public abstract virtual TResult WithValue(TKey key, Func`2<TValue, TResult> callback, Func`2<TKey, TResult> defaultValue);
}
internal class Topshelf.Caching.CacheItemCallback`2 : MulticastDelegate {
    public CacheItemCallback`2(object object, IntPtr method);
    public virtual void Invoke(TKey key, TValue value);
    public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
internal class Topshelf.Caching.ConcurrentCache`2 : object {
    private ConcurrentDictionary`2<TKey, TValue> _values;
    private CacheItemCallback`2<TKey, TValue> _duplicateValueAdded;
    private KeySelector`2<TKey, TValue> _keySelector;
    private MissingValueProvider`2<TKey, TValue> _missingValueProvider;
    private CacheItemCallback`2<TKey, TValue> _valueAddedCallback;
    private CacheItemCallback`2<TKey, TValue> _valueRemovedCallback;
    unknown MissingValueProvider`2<TKey, TValue> MissingValueProvider {public set; }
    unknown CacheItemCallback`2<TKey, TValue> ValueAddedCallback {public set; }
    unknown CacheItemCallback`2<TKey, TValue> ValueRemovedCallback {public set; }
    unknown CacheItemCallback`2<TKey, TValue> DuplicateValueAdded {public set; }
    unknown KeySelector`2<TKey, TValue> KeySelector {public set; }
    public int Count { get; }
    public TValue Item { get; public set; }
    public ConcurrentCache`2(MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public ConcurrentCache`2(IEqualityComparer`1<TKey> equalityComparer);
    public ConcurrentCache`2(KeySelector`2<TKey, TValue> keySelector);
    public ConcurrentCache`2(KeySelector`2<TKey, TValue> keySelector, IEnumerable`1<TValue> values);
    public ConcurrentCache`2(IEqualityComparer`1<TKey> equalityComparer, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public ConcurrentCache`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> values);
    public ConcurrentCache`2(IDictionary`2<TKey, TValue> values, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public ConcurrentCache`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> values, IEqualityComparer`1<TKey> equalityComparer);
    public ConcurrentCache`2(IDictionary`2<TKey, TValue> values, IEqualityComparer`1<TKey> equalityComparer, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public sealed virtual void set_MissingValueProvider(MissingValueProvider`2<TKey, TValue> value);
    public sealed virtual void set_ValueAddedCallback(CacheItemCallback`2<TKey, TValue> value);
    public sealed virtual void set_ValueRemovedCallback(CacheItemCallback`2<TKey, TValue> value);
    public sealed virtual void set_DuplicateValueAdded(CacheItemCallback`2<TKey, TValue> value);
    public sealed virtual void set_KeySelector(KeySelector`2<TKey, TValue> value);
    public sealed virtual int get_Count();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual IEnumerator`1<TValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual TValue Get(TKey key);
    public sealed virtual TValue Get(TKey key, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public sealed virtual TValue GetValue(TKey key, TValue defaultValue);
    public sealed virtual TValue GetValue(TKey key, Func`1<TValue> defaultValueProvider);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual bool Has(TKey key);
    public sealed virtual bool HasValue(TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void AddValue(TValue value);
    public sealed virtual void Fill(IEnumerable`1<TValue> values);
    public sealed virtual void Each(Action`1<TValue> callback);
    public sealed virtual void Each(Action`2<TKey, TValue> callback);
    public sealed virtual bool Exists(Predicate`1<TValue> predicate);
    public sealed virtual bool Find(Predicate`1<TValue> predicate, TValue& result);
    public sealed virtual TKey[] GetAllKeys();
    public sealed virtual TValue[] GetAll();
    public sealed virtual void Remove(TKey key);
    public sealed virtual void RemoveValue(TValue value);
    public sealed virtual void Clear();
    public sealed virtual bool WithValue(TKey key, Action`1<TValue> callback);
    public sealed virtual TResult WithValue(TKey key, Func`2<TValue, TResult> callback, TResult defaultValue);
    public sealed virtual TResult WithValue(TKey key, Func`2<TValue, TResult> callback, Func`2<TKey, TResult> defaultValue);
    private static TValue ThrowOnMissingValue(TKey key);
    private static void ThrowOnDuplicateValue(TKey key, TValue value);
    private static void DefaultCacheItemCallback(TKey key, TValue value);
    private static TKey DefaultKeyAccessor(TValue value);
}
[DefaultMemberAttribute("Item")]
internal class Topshelf.Caching.DictionaryCache`2 : object {
    private IDictionary`2<TKey, TValue> _values;
    private CacheItemCallback`2<TKey, TValue> _duplicateValueAdded;
    private KeySelector`2<TKey, TValue> _keySelector;
    private MissingValueProvider`2<TKey, TValue> _missingValueProvider;
    private CacheItemCallback`2<TKey, TValue> _valueAddedCallback;
    private CacheItemCallback`2<TKey, TValue> _valueRemovedCallback;
    unknown MissingValueProvider`2<TKey, TValue> MissingValueProvider {public set; }
    unknown CacheItemCallback`2<TKey, TValue> ValueAddedCallback {public set; }
    unknown CacheItemCallback`2<TKey, TValue> ValueRemovedCallback {public set; }
    unknown CacheItemCallback`2<TKey, TValue> DuplicateValueAdded {public set; }
    unknown KeySelector`2<TKey, TValue> KeySelector {public set; }
    public int Count { get; }
    public TValue Item { get; public set; }
    public DictionaryCache`2(MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public DictionaryCache`2(IEqualityComparer`1<TKey> equalityComparer);
    public DictionaryCache`2(KeySelector`2<TKey, TValue> keySelector);
    public DictionaryCache`2(KeySelector`2<TKey, TValue> keySelector, IEnumerable`1<TValue> values);
    public DictionaryCache`2(IEqualityComparer`1<TKey> equalityComparer, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public DictionaryCache`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> values);
    public DictionaryCache`2(IDictionary`2<TKey, TValue> values);
    public DictionaryCache`2(IDictionary`2<TKey, TValue> values, bool copy);
    public DictionaryCache`2(IDictionary`2<TKey, TValue> values, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public DictionaryCache`2(IDictionary`2<TKey, TValue> values, MissingValueProvider`2<TKey, TValue> missingValueProvider, bool copy);
    public DictionaryCache`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> values, IEqualityComparer`1<TKey> equalityComparer);
    public DictionaryCache`2(IDictionary`2<TKey, TValue> values, IEqualityComparer`1<TKey> equalityComparer);
    public DictionaryCache`2(IDictionary`2<TKey, TValue> values, IEqualityComparer`1<TKey> equalityComparer, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public sealed virtual void set_MissingValueProvider(MissingValueProvider`2<TKey, TValue> value);
    public sealed virtual void set_ValueAddedCallback(CacheItemCallback`2<TKey, TValue> value);
    public sealed virtual void set_ValueRemovedCallback(CacheItemCallback`2<TKey, TValue> value);
    public sealed virtual void set_DuplicateValueAdded(CacheItemCallback`2<TKey, TValue> value);
    public sealed virtual void set_KeySelector(KeySelector`2<TKey, TValue> value);
    public sealed virtual int get_Count();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual IEnumerator`1<TValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual TValue Get(TKey key);
    public sealed virtual TValue Get(TKey key, MissingValueProvider`2<TKey, TValue> missingValueProvider);
    public sealed virtual TValue GetValue(TKey key, TValue defaultValue);
    public sealed virtual TValue GetValue(TKey key, Func`1<TValue> defaultValueProvider);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual bool Has(TKey key);
    public sealed virtual bool HasValue(TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void AddValue(TValue value);
    public sealed virtual void Fill(IEnumerable`1<TValue> values);
    public sealed virtual void Each(Action`1<TValue> callback);
    public sealed virtual void Each(Action`2<TKey, TValue> callback);
    public sealed virtual bool Exists(Predicate`1<TValue> predicate);
    public sealed virtual bool Find(Predicate`1<TValue> predicate, TValue& result);
    public sealed virtual TKey[] GetAllKeys();
    public sealed virtual TValue[] GetAll();
    public sealed virtual void Remove(TKey key);
    public sealed virtual void RemoveValue(TValue value);
    public sealed virtual void Clear();
    public sealed virtual bool WithValue(TKey key, Action`1<TValue> callback);
    public sealed virtual TResult WithValue(TKey key, Func`2<TValue, TResult> callback, TResult defaultValue);
    public sealed virtual TResult WithValue(TKey key, Func`2<TValue, TResult> callback, Func`2<TKey, TResult> defaultValue);
    private static TValue ThrowOnMissingValue(TKey key);
    private static void ThrowOnDuplicateValue(TKey key, TValue value);
    private static void DefaultCacheItemCallback(TKey key, TValue value);
    private static TKey DefaultKeyAccessor(TValue value);
}
[DefaultMemberAttribute("Item")]
internal class Topshelf.Caching.GenericTypeCache`1 : object {
    private Cache`2<Type, TInterface> _cache;
    private Type _genericType;
    public Type GenericType { get; }
    public int Count { get; }
    unknown MissingValueProvider`2<Type, TInterface> MissingValueProvider {public set; }
    unknown CacheItemCallback`2<Type, TInterface> ValueAddedCallback {public set; }
    unknown CacheItemCallback`2<Type, TInterface> DuplicateValueAdded {public set; }
    unknown CacheItemCallback`2<Type, TInterface> ValueRemovedCallback {public set; }
    unknown KeySelector`2<Type, TInterface> KeySelector {public set; }
    public TInterface Item { get; public set; }
    private GenericTypeCache`1(Type genericType, Cache`2<Type, TInterface> cache);
    public GenericTypeCache`1(Type genericType);
    public GenericTypeCache`1(Type genericType, MissingValueProvider`2<Type, TInterface> missingValueProvider);
    public Type get_GenericType();
    public sealed virtual IEnumerator`1<TInterface> GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool Has(Type key);
    public sealed virtual bool HasValue(TInterface value);
    public sealed virtual void Each(Action`1<TInterface> callback);
    public sealed virtual void Each(Action`2<Type, TInterface> callback);
    public sealed virtual bool Exists(Predicate`1<TInterface> predicate);
    public sealed virtual bool Find(Predicate`1<TInterface> predicate, TInterface& result);
    public sealed virtual Type[] GetAllKeys();
    public sealed virtual TInterface[] GetAll();
    public sealed virtual void set_MissingValueProvider(MissingValueProvider`2<Type, TInterface> value);
    public sealed virtual void set_ValueAddedCallback(CacheItemCallback`2<Type, TInterface> value);
    public sealed virtual void set_DuplicateValueAdded(CacheItemCallback`2<Type, TInterface> value);
    public sealed virtual void set_ValueRemovedCallback(CacheItemCallback`2<Type, TInterface> value);
    public sealed virtual void set_KeySelector(KeySelector`2<Type, TInterface> value);
    public sealed virtual TInterface Get(Type key);
    public sealed virtual TInterface Get(Type key, MissingValueProvider`2<Type, TInterface> missingValueProvider);
    public sealed virtual TInterface GetValue(Type key, TInterface defaultValue);
    public sealed virtual TInterface GetValue(Type key, Func`1<TInterface> defaultValueProvider);
    public sealed virtual bool TryGetValue(Type key, TInterface& value);
    public sealed virtual TInterface get_Item(Type key);
    public sealed virtual void set_Item(Type key, TInterface value);
    public sealed virtual void Add(Type key, TInterface value);
    public sealed virtual void AddValue(TInterface value);
    public sealed virtual void Remove(Type key);
    public sealed virtual void RemoveValue(TInterface value);
    public sealed virtual void Clear();
    public sealed virtual void Fill(IEnumerable`1<TInterface> values);
    public sealed virtual bool WithValue(Type key, Action`1<TInterface> callback);
    public sealed virtual TResult WithValue(Type key, Func`2<TInterface, TResult> callback, TResult defaultValue);
    public sealed virtual TResult WithValue(Type key, Func`2<TInterface, TResult> callback, Func`2<Type, TResult> defaultValue);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static MissingValueProvider`2<Type, TInterface> DefaultMissingValueProvider(Type genericType);
}
internal class Topshelf.Caching.KeySelector`2 : MulticastDelegate {
    public KeySelector`2(object object, IntPtr method);
    public virtual TKey Invoke(TValue value);
    public virtual IAsyncResult BeginInvoke(TValue value, AsyncCallback callback, object object);
    public virtual TKey EndInvoke(IAsyncResult result);
}
internal class Topshelf.Caching.MissingValueProvider`2 : MulticastDelegate {
    public MissingValueProvider`2(object object, IntPtr method);
    public virtual TValue Invoke(TKey key);
    public virtual IAsyncResult BeginInvoke(TKey key, AsyncCallback callback, object object);
    public virtual TValue EndInvoke(IAsyncResult result);
}
internal interface Topshelf.Caching.ReadCache`2 {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool Has(TKey key);
    public abstract virtual bool HasValue(TValue value);
    public abstract virtual void Each(Action`1<TValue> callback);
    public abstract virtual void Each(Action`2<TKey, TValue> callback);
    public abstract virtual bool Exists(Predicate`1<TValue> predicate);
    public abstract virtual bool Find(Predicate`1<TValue> predicate, TValue& result);
    public abstract virtual TKey[] GetAllKeys();
    public abstract virtual TValue[] GetAll();
}
internal abstract class Topshelf.CommandLineParser.AbstractParser`1 : object {
    public Parser`2<TInput, TValue> Succeed(TValue value);
    public Parser`2<TInput, TValue[]> Rep(Parser`2<TInput, TValue> parser);
    public Parser`2<TInput, TValue[]> Rep1(Parser`2<TInput, TValue> parser);
}
internal class Topshelf.CommandLineParser.ArgumentElement : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public ArgumentElement(string id);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    public virtual string ToString();
    public bool Equals(ArgumentElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ICommandLineElement New(string id);
}
internal static class Topshelf.CommandLineParser.CommandLine : object {
    private static StringCommandLineParser _parser;
    private static CommandLine();
    public static string GetUnparsedCommandLine();
    [IteratorStateMachineAttribute("Topshelf.CommandLineParser.CommandLine/<Parse>d__2")]
private static IEnumerable`1<ICommandLineElement> Parse(string commandLine);
    public static IEnumerable`1<T> Parse(Action`1<ICommandLineElementParser`1<T>> initializer);
    public static IEnumerable`1<T> Parse(Action`1<ICommandLineElementParser`1<T>> initializer, string commandLine);
}
internal class Topshelf.CommandLineParser.CommandLineElementParser`1 : AbstractParser`1<IEnumerable`1<ICommandLineElement>> {
    private IList`1<Parser`2<IEnumerable`1<ICommandLineElement>, TResult>> _parsers;
    [CompilerGeneratedAttribute]
private Parser`2<IEnumerable`1<ICommandLineElement>, TResult> <All>k__BackingField;
    public Parser`2<IEnumerable`1<ICommandLineElement>, ICommandLineElement> AnyElement { get; }
    public Parser`2<IEnumerable`1<ICommandLineElement>, TResult> All { get; public set; }
    public Parser`2<IEnumerable`1<ICommandLineElement>, ICommandLineElement> get_AnyElement();
    [CompilerGeneratedAttribute]
public Parser`2<IEnumerable`1<ICommandLineElement>, TResult> get_All();
    [CompilerGeneratedAttribute]
public void set_All(Parser`2<IEnumerable`1<ICommandLineElement>, TResult> value);
    public sealed virtual void Add(Parser`2<IEnumerable`1<ICommandLineElement>, TResult> parser);
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> Definition();
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> Definition(string key);
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> Definitions(String[] keys);
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> Switch();
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> Switch(string key);
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> Switches(String[] keys);
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> Argument();
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> Argument(string value);
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> Argument(Predicate`1<IArgumentElement> pred);
    public sealed virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> ValidPath();
    [IteratorStateMachineAttribute("Topshelf.CommandLineParser.CommandLineElementParser`1/<Parse>d__19")]
public IEnumerable`1<TResult> Parse(IEnumerable`1<ICommandLineElement> elements);
    private static bool IsValidPath(string path);
}
internal class Topshelf.CommandLineParser.DefinitionElement : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Key { get; }
    public string Value { get; }
    public DefinitionElement(string key, string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    public virtual string ToString();
    public bool Equals(DefinitionElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ICommandLineElement New(string key, string value);
}
[ExtensionAttribute]
internal static class Topshelf.CommandLineParser.ExtensionForCommandLineElementParsers : object {
    [ExtensionAttribute]
public static Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> Optional(Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> source, string key, bool defaultValue);
    [ExtensionAttribute]
public static Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> Optional(Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> source, string key, string defaultValue);
}
internal interface Topshelf.CommandLineParser.IArgumentElement {
    public string Id { get; }
    public abstract virtual string get_Id();
}
internal interface Topshelf.CommandLineParser.ICommandLineElement {
}
internal interface Topshelf.CommandLineParser.ICommandLineElementParser`1 {
    public abstract virtual void Add(Parser`2<IEnumerable`1<ICommandLineElement>, TResult> parser);
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> Argument();
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> Argument(string value);
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> Argument(Predicate`1<IArgumentElement> pred);
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> Definition();
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> Definition(string key);
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, IDefinitionElement> Definitions(String[] keys);
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> Switch();
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> Switch(string key);
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, ISwitchElement> Switches(String[] keys);
    public abstract virtual Parser`2<IEnumerable`1<ICommandLineElement>, IArgumentElement> ValidPath();
}
internal interface Topshelf.CommandLineParser.IDefinitionElement {
    public string Key { get; }
    public string Value { get; }
    public abstract virtual string get_Key();
    public abstract virtual string get_Value();
}
internal interface Topshelf.CommandLineParser.ISwitchElement {
    public string Key { get; }
    public bool Value { get; }
    public abstract virtual string get_Key();
    public abstract virtual bool get_Value();
}
internal interface Topshelf.CommandLineParser.ITokenElement {
    public string Token { get; }
    public abstract virtual string get_Token();
}
[ExtensionAttribute]
internal static class Topshelf.CommandLineParser.MonadParserExtensions : object {
    [ExtensionAttribute]
public static Parser`2<TInput, TValue> Where(Parser`2<TInput, TValue> parser, Func`2<TValue, bool> pred);
    [ExtensionAttribute]
public static Parser`2<TInput, TSelect> Select(Parser`2<TInput, TValue> parser, Func`2<TValue, TSelect> selector);
    [ExtensionAttribute]
public static Parser`2<TInput, TSelect> SelectMany(Parser`2<TInput, TValue> parser, Func`2<TValue, Parser`2<TInput, TIntermediate>> selector, Func`3<TValue, TIntermediate, TSelect> projector);
    [ExtensionAttribute]
public static Parser`2<TInput, TValue> Or(Parser`2<TInput, TValue> first, Parser`2<TInput, TValue> second);
    [ExtensionAttribute]
public static Parser`2<TInput, TValue> FirstMatch(IEnumerable`1<Parser`2<TInput, TValue>> options);
    [ExtensionAttribute]
public static Parser`2<TInput, TSecondValue> And(Parser`2<TInput, TFirstValue> first, Parser`2<TInput, TSecondValue> second);
}
internal class Topshelf.CommandLineParser.Parser`2 : MulticastDelegate {
    public Parser`2(object object, IntPtr method);
    public virtual Result`2<TInput, TValue> Invoke(TInput input);
    public virtual IAsyncResult BeginInvoke(TInput input, AsyncCallback callback, object object);
    public virtual Result`2<TInput, TValue> EndInvoke(IAsyncResult result);
}
internal class Topshelf.CommandLineParser.Result`2 : object {
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private TInput <Rest>k__BackingField;
    public TValue Value { get; private set; }
    public TInput Rest { get; private set; }
    public Result`2(TValue value, TInput rest);
    [CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(TValue value);
    [CompilerGeneratedAttribute]
public TInput get_Rest();
    [CompilerGeneratedAttribute]
private void set_Rest(TInput value);
}
internal class Topshelf.CommandLineParser.StringCommandLineParser : AbstractParser`1<string> {
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <Whitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <NewLine>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <EscChar>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <ValueInQuotes>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> <EmptyDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> <Switch>k__BackingField;
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> <All>k__BackingField;
    private Parser`2<string, Char[]> Whitespace { get; private set; }
    private Parser`2<string, Char[]> NewLine { get; private set; }
    private Parser`2<string, char> EscChar { get; private set; }
    private Parser`2<string, string> Id { get; private set; }
    private Parser`2<string, string> Key { get; private set; }
    private Parser`2<string, string> Value { get; private set; }
    private Parser`2<string, string> ValueInQuotes { get; private set; }
    private Parser`2<string, ICommandLineElement> Definition { get; private set; }
    private Parser`2<string, ICommandLineElement> EmptyDefinition { get; private set; }
    private Parser`2<string, ICommandLineElement> Argument { get; private set; }
    private Parser`2<string, ICommandLineElement> Token { get; private set; }
    private Parser`2<string, ICommandLineElement> Switch { get; private set; }
    public Parser`2<string, ICommandLineElement> All { get; private set; }
    private Parser`2<string, char> AnyChar { get; }
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> get_Whitespace();
    [CompilerGeneratedAttribute]
private void set_Whitespace(Parser`2<string, Char[]> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> get_NewLine();
    [CompilerGeneratedAttribute]
private void set_NewLine(Parser`2<string, Char[]> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> get_EscChar();
    [CompilerGeneratedAttribute]
private void set_EscChar(Parser`2<string, char> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Parser`2<string, string> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(Parser`2<string, string> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(Parser`2<string, string> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> get_ValueInQuotes();
    [CompilerGeneratedAttribute]
private void set_ValueInQuotes(Parser`2<string, string> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(Parser`2<string, ICommandLineElement> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> get_EmptyDefinition();
    [CompilerGeneratedAttribute]
private void set_EmptyDefinition(Parser`2<string, ICommandLineElement> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> get_Argument();
    [CompilerGeneratedAttribute]
private void set_Argument(Parser`2<string, ICommandLineElement> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(Parser`2<string, ICommandLineElement> value);
    [CompilerGeneratedAttribute]
private Parser`2<string, ICommandLineElement> get_Switch();
    [CompilerGeneratedAttribute]
private void set_Switch(Parser`2<string, ICommandLineElement> value);
    [CompilerGeneratedAttribute]
public Parser`2<string, ICommandLineElement> get_All();
    [CompilerGeneratedAttribute]
private void set_All(Parser`2<string, ICommandLineElement> value);
    private Parser`2<string, char> get_AnyChar();
    private Parser`2<string, char> Char(char ch);
    private Parser`2<string, char> Char(Predicate`1<char> pred);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_0(char bs);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_4(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <.ctor>b__0_6(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_8(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <.ctor>b__0_10(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <.ctor>b__0_13(char oq);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_15(<>f__AnonymousType1`2<char, Char[]> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_17(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <.ctor>b__0_19(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_21(<>f__AnonymousType2`2<<>f__AnonymousType0`2<Char[], char>, string> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <.ctor>b__0_23(<>f__AnonymousType3`2<<>f__AnonymousType2`2<<>f__AnonymousType0`2<Char[], char>, string>, char> <>h__TransparentIdentifier2);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_25(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <.ctor>b__0_27(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <.ctor>b__0_29(<>f__AnonymousType2`2<<>f__AnonymousType0`2<Char[], char>, string> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <.ctor>b__0_31(<>f__AnonymousType4`2<<>f__AnonymousType2`2<<>f__AnonymousType0`2<Char[], char>, string>, Char[]> <>h__TransparentIdentifier2);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_33(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <.ctor>b__0_35(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <.ctor>b__0_37(<>f__AnonymousType2`2<<>f__AnonymousType0`2<Char[], char>, string> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_39(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <.ctor>b__0_41(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_43(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_45(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, Char[]> <.ctor>b__0_47(<>f__AnonymousType5`2<<>f__AnonymousType0`2<Char[], char>, char> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_51(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_53(<>f__AnonymousType0`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_55(<>f__AnonymousType5`2<<>f__AnonymousType0`2<Char[], char>, char> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_57(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_59(<>f__AnonymousType7`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <.ctor>b__0_61(<>f__AnonymousType8`2<<>f__AnonymousType7`2<Char[], char>, char> <>h__TransparentIdentifier1);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_63(Char[] w);
    [CompilerGeneratedAttribute]
private Parser`2<string, string> <.ctor>b__0_65(<>f__AnonymousType9`2<Char[], char> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Parser`2<string, char> <.ctor>b__0_67(<>f__AnonymousType10`2<<>f__AnonymousType9`2<Char[], char>, string> <>h__TransparentIdentifier1);
}
internal class Topshelf.CommandLineParser.SwitchElement : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Value>k__BackingField;
    public string Key { get; }
    public bool Value { get; }
    public SwitchElement(char key);
    public SwitchElement(string key);
    public SwitchElement(string key, bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Value();
    public virtual string ToString();
    public bool Equals(SwitchElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ICommandLineElement New(char key);
    public static ICommandLineElement New(string key);
    public static ICommandLineElement New(char key, bool value);
}
internal class Topshelf.CommandLineParser.TokenElement : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Token { get; }
    public TokenElement(string token);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Token();
    public virtual string ToString();
    public bool Equals(TokenElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ICommandLineElement New(string token);
}
public interface Topshelf.Configurators.ConfigurationResult {
    public IEnumerable`1<ValidateResult> Results { get; }
    public string Message { get; }
    public abstract virtual IEnumerable`1<ValidateResult> get_Results();
    public abstract virtual string get_Message();
}
public interface Topshelf.Configurators.Configurator {
    public abstract virtual IEnumerable`1<ValidateResult> Validate();
}
[DebuggerDisplayAttribute("{Message}")]
public class Topshelf.Configurators.ValidateConfigurationResult : object {
    private IList`1<ValidateResult> _results;
    public bool ContainsFailure { get; }
    public IEnumerable`1<ValidateResult> Results { get; }
    public string Message { get; }
    private ValidateConfigurationResult(IEnumerable`1<ValidateResult> results);
    public bool get_ContainsFailure();
    public sealed virtual IEnumerable`1<ValidateResult> get_Results();
    public sealed virtual string get_Message();
    public static ConfigurationResult CompileResults(IEnumerable`1<ValidateResult> results);
}
public interface Topshelf.Configurators.ValidateResult {
    public ValidationResultDisposition Disposition { get; }
    public string Message { get; }
    public string Key { get; }
    public string Value { get; }
    public abstract virtual ValidationResultDisposition get_Disposition();
    public abstract virtual string get_Message();
    public abstract virtual string get_Key();
    public abstract virtual string get_Value();
}
public class Topshelf.Configurators.ValidateResultImpl : object {
    [CompilerGeneratedAttribute]
private ValidationResultDisposition <Disposition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public ValidationResultDisposition Disposition { get; private set; }
    public string Key { get; private set; }
    public string Value { get; public set; }
    public string Message { get; private set; }
    public ValidateResultImpl(ValidationResultDisposition disposition, string key, string value, string message);
    public ValidateResultImpl(ValidationResultDisposition disposition, string key, string message);
    public ValidateResultImpl(ValidationResultDisposition disposition, string message);
    [CompilerGeneratedAttribute]
public sealed virtual ValidationResultDisposition get_Disposition();
    [CompilerGeneratedAttribute]
private void set_Disposition(ValidationResultDisposition value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    public virtual string ToString();
}
public enum Topshelf.Configurators.ValidationResultDisposition : Enum {
    public int value__;
    public static ValidationResultDisposition Success;
    public static ValidationResultDisposition Warning;
    public static ValidationResultDisposition Failure;
}
[ExtensionAttribute]
public static class Topshelf.Configurators.ValidationResultExtensions : object {
    [ExtensionAttribute]
public static ValidateResult Failure(Configurator configurator, string message);
    [ExtensionAttribute]
public static ValidateResult Failure(Configurator configurator, string key, string message);
    [ExtensionAttribute]
public static ValidateResult Failure(Configurator configurator, string key, string value, string message);
    [ExtensionAttribute]
public static ValidateResult Warning(Configurator configurator, string message);
    [ExtensionAttribute]
public static ValidateResult Warning(Configurator configurator, string key, string message);
    [ExtensionAttribute]
public static ValidateResult Warning(Configurator configurator, string key, string value, string message);
    [ExtensionAttribute]
public static ValidateResult Success(Configurator configurator, string message);
    [ExtensionAttribute]
public static ValidateResult Success(Configurator configurator, string key, string message);
    [ExtensionAttribute]
public static ValidateResult Success(Configurator configurator, string key, string value, string message);
    [ExtensionAttribute]
public static ValidateResult WithParentKey(ValidateResult result, string parentKey);
}
public static class Topshelf.Constants.KnownServiceNames : object {
    public static string Msmq { get; }
    public static string SqlServer { get; }
    public static string IIS { get; }
    public static string EventLog { get; }
    public static string get_Msmq();
    public static string get_SqlServer();
    public static string get_IIS();
    public static string get_EventLog();
}
public class Topshelf.Credentials : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceAccount <Account>k__BackingField;
    public string Username { get; }
    public string Password { get; }
    public ServiceAccount Account { get; }
    public Credentials(string username, string password, ServiceAccount account);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public ServiceAccount get_Account();
}
[ExtensionAttribute]
public static class Topshelf.DependencyExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator AddDependency(HostConfigurator configurator, string name);
    [ExtensionAttribute]
public static HostConfigurator DependsOn(HostConfigurator configurator, string name);
    [ExtensionAttribute]
public static HostConfigurator DependsOnMsmq(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator DependsOnMsSql(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator DependsOnEventLog(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator DependsOnIis(HostConfigurator configurator);
}
[ExtensionAttribute]
public static class Topshelf.HelpHostConfiguratorExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator SetHelpTextPrefix(HostConfigurator hostConfigurator, string text);
    [ExtensionAttribute]
public static HostConfigurator LoadHelpTextPrefix(HostConfigurator hostConfigurator, Assembly assembly, string resourceName);
}
public interface Topshelf.Host {
    public abstract virtual TopshelfExitCode Run();
}
public class Topshelf.HostConfigurationException : TopshelfException {
    public HostConfigurationException(string message);
    public HostConfigurationException(string message, Exception innerException);
    protected HostConfigurationException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Topshelf.HostConfiguratorExtensions : object {
    [ExtensionAttribute]
public static void UseAssemblyInfoForServiceInfo(HostConfigurator hostConfigurator, Assembly assembly);
    [ExtensionAttribute]
public static void UseAssemblyInfoForServiceInfo(HostConfigurator hostConfigurator);
}
[ExtensionAttribute]
public static class Topshelf.HostConfigurators.AssemblyExtensions.AssemblyExtentions : object {
    [ExtensionAttribute]
public static T GetAttribute(Assembly assembly);
    [ExtensionAttribute]
public static Return TryGetProperty(Input attribute, Func`2<Input, Return> accessor);
    [ExtensionAttribute]
public static string ToServiceNameSafeString(string input);
}
public class Topshelf.HostConfigurators.CommandConfigurator : object {
    private int _command;
    public CommandConfigurator(int command);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.CommandConfigurator/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
}
internal interface Topshelf.HostConfigurators.CommandLineConfigurator {
    public abstract virtual void Configure(ICommandLineElementParser`1<Option> parser);
}
internal class Topshelf.HostConfigurators.CommandLineDefinitionConfigurator : object {
    private Action`1<string> _callback;
    private string _name;
    public CommandLineDefinitionConfigurator(string name, Action`1<string> callback);
    public sealed virtual void Configure(ICommandLineElementParser`1<Option> parser);
    [CompilerGeneratedAttribute]
private Option <Configure>b__3_0(IDefinitionElement s);
}
internal static class Topshelf.HostConfigurators.CommandLineParserOptions : object {
    internal static void AddTopshelfOptions(ICommandLineElementParser`1<Option> x);
    internal static void AddUnknownOptions(ICommandLineElementParser`1<Option> x);
}
internal class Topshelf.HostConfigurators.CommandLineSwitchConfigurator : object {
    private Action`1<bool> _callback;
    private string _name;
    public CommandLineSwitchConfigurator(string name, Action`1<bool> callback);
    public sealed virtual void Configure(ICommandLineElementParser`1<Option> parser);
    [CompilerGeneratedAttribute]
private Option <Configure>b__3_0(ISwitchElement s);
}
public class Topshelf.HostConfigurators.DependencyHostConfigurator : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public DependencyHostConfigurator(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.DependencyHostConfigurator/<Validate>d__5")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [CompilerGeneratedAttribute]
private void <Configure>b__6_0(InstallBuilder x);
}
public class Topshelf.HostConfigurators.EnvironmentBuilderFactory : MulticastDelegate {
    public EnvironmentBuilderFactory(object object, IntPtr method);
    public virtual EnvironmentBuilder Invoke(HostConfigurator configurator);
    public virtual IAsyncResult BeginInvoke(HostConfigurator configurator, AsyncCallback callback, object object);
    public virtual EnvironmentBuilder EndInvoke(IAsyncResult result);
}
public interface Topshelf.HostConfigurators.HostBuilderConfigurator {
    public abstract virtual HostBuilder Configure(HostBuilder builder);
}
public class Topshelf.HostConfigurators.HostBuilderFactory : MulticastDelegate {
    public HostBuilderFactory(object object, IntPtr method);
    public virtual HostBuilder Invoke(HostEnvironment environment, HostSettings settings);
    public virtual IAsyncResult BeginInvoke(HostEnvironment environment, HostSettings settings, AsyncCallback callback, object object);
    public virtual HostBuilder EndInvoke(IAsyncResult result);
}
public interface Topshelf.HostConfigurators.HostConfigurator {
    public UnhandledExceptionPolicyCode UnhandledExceptionPolicy { get; public set; }
    public abstract virtual void SetDisplayName(string name);
    public abstract virtual void SetServiceName(string name);
    public abstract virtual void SetDescription(string description);
    public abstract virtual void SetInstanceName(string instanceName);
    public abstract virtual void SetStartTimeout(TimeSpan startTimeOut);
    public abstract virtual void SetStopTimeout(TimeSpan stopTimeOut);
    public abstract virtual void EnablePauseAndContinue();
    public abstract virtual void EnableShutdown();
    public abstract virtual void EnableSessionChanged();
    public abstract virtual void EnablePowerEvents();
    public abstract virtual void EnableHandleCtrlBreak();
    public abstract virtual void UseHostBuilder(HostBuilderFactory hostBuilderFactory);
    public abstract virtual void UseServiceBuilder(ServiceBuilderFactory serviceBuilderFactory);
    public abstract virtual void UseEnvironmentBuilder(EnvironmentBuilderFactory environmentBuilderFactory);
    public abstract virtual void AddConfigurator(HostBuilderConfigurator configurator);
    public abstract virtual void ApplyCommandLine();
    public abstract virtual void ApplyCommandLine(string commandLine);
    public abstract virtual void AddCommandLineSwitch(string name, Action`1<bool> callback);
    public abstract virtual void AddCommandLineDefinition(string name, Action`1<string> callback);
    public abstract virtual void OnException(Action`1<Exception> callback);
    public abstract virtual UnhandledExceptionPolicyCode get_UnhandledExceptionPolicy();
    public abstract virtual void set_UnhandledExceptionPolicy(UnhandledExceptionPolicyCode value);
}
public class Topshelf.HostConfigurators.HostConfiguratorImpl : object {
    private IList`1<CommandLineConfigurator> _commandLineOptionConfigurators;
    private IList`1<HostBuilderConfigurator> _configurators;
    private WindowsHostSettings _settings;
    private bool _commandLineApplied;
    private EnvironmentBuilderFactory _environmentBuilderFactory;
    private HostBuilderFactory _hostBuilderFactory;
    private ServiceBuilderFactory _serviceBuilderFactory;
    public UnhandledExceptionPolicyCode UnhandledExceptionPolicy { get; public set; }
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.HostConfiguratorImpl/<Validate>d__8")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual void SetDisplayName(string name);
    public sealed virtual void SetServiceName(string name);
    public sealed virtual void SetDescription(string description);
    public sealed virtual void SetInstanceName(string instanceName);
    public sealed virtual void SetStartTimeout(TimeSpan startTimeOut);
    public sealed virtual void SetStopTimeout(TimeSpan stopTimeOut);
    public sealed virtual void EnablePauseAndContinue();
    public sealed virtual void EnableShutdown();
    public sealed virtual void EnableSessionChanged();
    public sealed virtual void EnablePowerEvents();
    public sealed virtual void EnableHandleCtrlBreak();
    public sealed virtual void UseHostBuilder(HostBuilderFactory hostBuilderFactory);
    public sealed virtual void UseServiceBuilder(ServiceBuilderFactory serviceBuilderFactory);
    public sealed virtual void UseEnvironmentBuilder(EnvironmentBuilderFactory environmentBuilderFactory);
    public sealed virtual void AddConfigurator(HostBuilderConfigurator configurator);
    public sealed virtual void ApplyCommandLine();
    public sealed virtual void ApplyCommandLine(string commandLine);
    public sealed virtual void AddCommandLineSwitch(string name, Action`1<bool> callback);
    public sealed virtual void AddCommandLineDefinition(string name, Action`1<string> callback);
    public sealed virtual void OnException(Action`1<Exception> callback);
    public sealed virtual UnhandledExceptionPolicyCode get_UnhandledExceptionPolicy();
    public sealed virtual void set_UnhandledExceptionPolicy(UnhandledExceptionPolicyCode value);
    public Host CreateHost();
    private void ApplyCommandLineOptions(IEnumerable`1<Option> options);
    private void ConfigureCommandLineParser(ICommandLineElementParser`1<Option> parser);
    private static HostBuilder DefaultHostBuilderFactory(HostEnvironment environment, HostSettings settings);
    private static EnvironmentBuilder DefaultEnvironmentBuilderFactory(HostConfigurator configurator);
}
public class Topshelf.HostConfigurators.InstallHostConfiguratorAction : object {
    [CompilerGeneratedAttribute]
private Action`1<InstallBuilder> <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public Action`1<InstallBuilder> Callback { get; private set; }
    public string Key { get; private set; }
    public InstallHostConfiguratorAction(string key, Action`1<InstallBuilder> callback);
    [CompilerGeneratedAttribute]
public Action`1<InstallBuilder> get_Callback();
    [CompilerGeneratedAttribute]
private void set_Callback(Action`1<InstallBuilder> value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.InstallHostConfiguratorAction/<Validate>d__9")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [CompilerGeneratedAttribute]
private void <Configure>b__10_0(InstallBuilder x);
}
public class Topshelf.HostConfigurators.PrefixHelpTextHostConfigurator : object {
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public Assembly Assembly { get; private set; }
    public string ResourceName { get; private set; }
    public string Text { get; private set; }
    public PrefixHelpTextHostConfigurator(Assembly assembly, string resourceName);
    public PrefixHelpTextHostConfigurator(string text);
    [CompilerGeneratedAttribute]
public Assembly get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(Assembly value);
    [CompilerGeneratedAttribute]
public string get_ResourceName();
    [CompilerGeneratedAttribute]
private void set_ResourceName(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.PrefixHelpTextHostConfigurator/<Validate>d__14")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [CompilerGeneratedAttribute]
private void <Configure>b__15_0(HelpBuilder x);
}
public class Topshelf.HostConfigurators.RunAsServiceAccountHostConfigurator : object {
    [CompilerGeneratedAttribute]
private ServiceAccount <AccountType>k__BackingField;
    public ServiceAccount AccountType { get; private set; }
    public RunAsServiceAccountHostConfigurator(ServiceAccount accountType);
    [CompilerGeneratedAttribute]
public ServiceAccount get_AccountType();
    [CompilerGeneratedAttribute]
private void set_AccountType(ServiceAccount value);
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.RunAsServiceAccountHostConfigurator/<Validate>d__6")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    [CompilerGeneratedAttribute]
private void <Configure>b__5_0(InstallBuilder x);
}
public class Topshelf.HostConfigurators.RunAsUserHostConfigurator : object {
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    public string Password { get; }
    public string Username { get; }
    public RunAsUserHostConfigurator(string username, string password);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public string get_Username();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.RunAsUserHostConfigurator/<Validate>d__8")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    [CompilerGeneratedAttribute]
private void <Configure>b__7_0(InstallBuilder x);
}
public class Topshelf.HostConfigurators.RunAsVirtualAccountHostConfigurator : object {
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.RunAsVirtualAccountHostConfigurator/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
}
public class Topshelf.HostConfigurators.RunHostConfiguratorAction : object {
    private Action`1<RunBuilder> _callback;
    private string _key;
    public RunHostConfiguratorAction(string key, Action`1<RunBuilder> callback);
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.RunHostConfiguratorAction/<Validate>d__4")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    [CompilerGeneratedAttribute]
private void <Configure>b__3_0(RunBuilder x);
}
public class Topshelf.HostConfigurators.ServiceBuilderFactory : MulticastDelegate {
    public ServiceBuilderFactory(object object, IntPtr method);
    public virtual ServiceBuilder Invoke(HostSettings settings);
    public virtual IAsyncResult BeginInvoke(HostSettings settings, AsyncCallback callback, object object);
    public virtual ServiceBuilder EndInvoke(IAsyncResult result);
}
public class Topshelf.HostConfigurators.ServiceRecoveryHostConfigurator : object {
    private ServiceRecoveryOptions _options;
    private HostSettings _settings;
    private ServiceRecoveryOptions Options { get; }
    private ServiceRecoveryOptions get_Options();
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.ServiceRecoveryHostConfigurator/<Validate>d__4")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    public sealed virtual ServiceRecoveryConfigurator RestartService(TimeSpan delay);
    public sealed virtual ServiceRecoveryConfigurator RestartService(int delayInMinutes);
    public sealed virtual ServiceRecoveryConfigurator RestartComputer(TimeSpan delay, string message);
    public sealed virtual ServiceRecoveryConfigurator RestartComputer(int delayInMinutes, string message);
    public sealed virtual ServiceRecoveryConfigurator RunProgram(TimeSpan delay, string command);
    public sealed virtual ServiceRecoveryConfigurator RunProgram(int delayInMinutes, string command);
    public sealed virtual ServiceRecoveryConfigurator TakeNoAction();
    public sealed virtual ServiceRecoveryConfigurator SetResetPeriod(int days);
    public sealed virtual void OnCrashOnly();
    private void ConfigureServiceRecovery(InstallHostSettings installSettings);
    [CompilerGeneratedAttribute]
private void <Configure>b__5_0(InstallBuilder x);
}
public class Topshelf.HostConfigurators.StartConfigurator : object {
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.StartConfigurator/<Validate>d__0")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
}
public class Topshelf.HostConfigurators.StartModeHostConfigurator : object {
    [CompilerGeneratedAttribute]
private HostStartMode <StartMode>k__BackingField;
    public HostStartMode StartMode { get; }
    public StartModeHostConfigurator(HostStartMode startMode);
    [CompilerGeneratedAttribute]
public HostStartMode get_StartMode();
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.StartModeHostConfigurator/<Validate>d__4")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [CompilerGeneratedAttribute]
private void <Configure>b__5_0(InstallBuilder x);
}
public class Topshelf.HostConfigurators.SudoConfigurator : object {
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.SudoConfigurator/<Validate>d__0")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
}
public class Topshelf.HostConfigurators.SystemOnlyHelpHostConfigurator : object {
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.SystemOnlyHelpHostConfigurator/<Validate>d__0")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
}
public class Topshelf.HostConfigurators.UninstallHostConfiguratorAction : object {
    [CompilerGeneratedAttribute]
private Action`1<UninstallBuilder> <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public Action`1<UninstallBuilder> Callback { get; private set; }
    public string Key { get; private set; }
    public UninstallHostConfiguratorAction(string key, Action`1<UninstallBuilder> callback);
    [CompilerGeneratedAttribute]
public Action`1<UninstallBuilder> get_Callback();
    [CompilerGeneratedAttribute]
private void set_Callback(Action`1<UninstallBuilder> value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(string value);
    public sealed virtual HostBuilder Configure(HostBuilder builder);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.UninstallHostConfiguratorAction/<Validate>d__10")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    [CompilerGeneratedAttribute]
private void <Configure>b__9_0(UninstallBuilder x);
}
public class Topshelf.HostConfigurators.UnknownCommandLineOptionHostConfigurator : object {
    private string _text;
    public UnknownCommandLineOptionHostConfigurator(string text);
    [IteratorStateMachineAttribute("Topshelf.HostConfigurators.UnknownCommandLineOptionHostConfigurator/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual HostBuilder Configure(HostBuilder builder);
}
public interface Topshelf.HostControl {
    public abstract virtual void RequestAdditionalTime(TimeSpan timeRemaining);
    public abstract virtual void Stop();
    public abstract virtual void Stop(TopshelfExitCode exitCode);
}
public static class Topshelf.HostFactory : object {
    public static Host New(Action`1<HostConfigurator> configureCallback);
    public static TopshelfExitCode Run(Action`1<HostConfigurator> configureCallback);
}
public class Topshelf.Hosts.CommandHost : object {
    private int _command;
    private HostEnvironment _environment;
    private LogWriter _log;
    private HostSettings _settings;
    public CommandHost(HostEnvironment environment, HostSettings settings, int command);
    public sealed virtual TopshelfExitCode Run();
}
public class Topshelf.Hosts.ConsoleRunHost : object {
    private LogWriter _log;
    private HostEnvironment _environment;
    private ServiceHandle _serviceHandle;
    private HostSettings _settings;
    private int _deadThread;
    private TopshelfExitCode _exitCode;
    private ManualResetEvent _exit;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _hasCancelled;
    public ConsoleRunHost(HostSettings settings, HostEnvironment environment, ServiceHandle serviceHandle);
    private static IntPtr GetConsoleWindow();
    public sealed virtual TopshelfExitCode Run();
    private sealed virtual override void Topshelf.HostControl.RequestAdditionalTime(TimeSpan timeRemaining);
    private sealed virtual override void Topshelf.HostControl.Stop();
    private sealed virtual override void Topshelf.HostControl.Stop(TopshelfExitCode exitCode);
    private void CatchUnhandledException(object sender, UnhandledExceptionEventArgs e);
    private void StopService();
    private void HandleCancelKeyPress(object sender, ConsoleCancelEventArgs consoleCancelEventArgs);
    private void OnSessionChanged(object sender, SessionSwitchEventArgs e);
    private void OnPowerModeChanged(object sender, PowerModeChangedEventArgs e);
}
public class Topshelf.Hosts.HelpHost : object {
    private string _prefixText;
    public string PrefixText { get; }
    public HelpHost(string prefixText);
    public string get_PrefixText();
    public sealed virtual TopshelfExitCode Run();
}
public class Topshelf.Hosts.InstallHost : object {
    private static LogWriter _log;
    private HostEnvironment _environment;
    private InstallHostSettings _installSettings;
    private IEnumerable`1<Action`1<InstallHostSettings>> _postActions;
    private IEnumerable`1<Action`1<InstallHostSettings>> _preActions;
    private IEnumerable`1<Action`1<InstallHostSettings>> _postRollbackActions;
    private IEnumerable`1<Action`1<InstallHostSettings>> _preRollbackActions;
    private HostSettings _settings;
    private bool _sudo;
    public InstallHostSettings InstallSettings { get; }
    public HostSettings Settings { get; }
    public InstallHost(HostEnvironment environment, HostSettings settings, HostStartMode startMode, IEnumerable`1<string> dependencies, Credentials credentials, IEnumerable`1<Action`1<InstallHostSettings>> preActions, IEnumerable`1<Action`1<InstallHostSettings>> postActions, IEnumerable`1<Action`1<InstallHostSettings>> preRollbackActions, IEnumerable`1<Action`1<InstallHostSettings>> postRollbackActions, bool sudo);
    private static InstallHost();
    public InstallHostSettings get_InstallSettings();
    public HostSettings get_Settings();
    public sealed virtual TopshelfExitCode Run();
    private void ExecutePreActions(InstallHostSettings settings);
    private void ExecutePostActions();
    private void ExecutePreRollbackActions();
    private void ExecutePostRollbackActions();
}
public class Topshelf.Hosts.StartHost : object {
    private HostEnvironment _environment;
    private LogWriter _log;
    private Host _parentHost;
    private HostSettings _settings;
    public StartHost(HostEnvironment environment, HostSettings settings, Host parentHost);
    public sealed virtual TopshelfExitCode Run();
}
public class Topshelf.Hosts.StopHost : object {
    private static LogWriter _log;
    private HostEnvironment _environment;
    private HostSettings _settings;
    public StopHost(HostEnvironment environment, HostSettings settings);
    private static StopHost();
    public sealed virtual TopshelfExitCode Run();
}
public class Topshelf.Hosts.TestHost : object {
    private LogWriter _log;
    private ServiceHandle _serviceHandle;
    private HostSettings _settings;
    public TestHost(HostSettings settings, HostEnvironment environment, ServiceHandle serviceHandle);
    public sealed virtual TopshelfExitCode Run();
    private sealed virtual override void Topshelf.HostControl.RequestAdditionalTime(TimeSpan timeRemaining);
    private sealed virtual override void Topshelf.HostControl.Stop();
    private sealed virtual override void Topshelf.HostControl.Stop(TopshelfExitCode exitCode);
}
public class Topshelf.Hosts.UninstallHost : object {
    private static LogWriter _log;
    private HostEnvironment _environment;
    private IEnumerable`1<Action> _postActions;
    private IEnumerable`1<Action> _preActions;
    private HostSettings _settings;
    private bool _sudo;
    public UninstallHost(HostEnvironment environment, HostSettings settings, IEnumerable`1<Action> preActions, IEnumerable`1<Action> postActions, bool sudo);
    private static UninstallHost();
    public sealed virtual TopshelfExitCode Run();
    private void ExecutePreActions();
    private void ExecutePostActions();
}
public interface Topshelf.HostStartContext {
    public abstract virtual void CancelStart();
}
public interface Topshelf.HostStartedContext {
}
public interface Topshelf.HostStopContext {
}
public interface Topshelf.HostStoppedContext {
}
[ExtensionAttribute]
public static class Topshelf.InstallHostConfiguratorExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator BeforeInstall(HostConfigurator configurator, Action callback);
    [ExtensionAttribute]
public static HostConfigurator BeforeInstall(HostConfigurator configurator, Action`1<InstallHostSettings> callback);
    [ExtensionAttribute]
public static HostConfigurator AfterInstall(HostConfigurator configurator, Action callback);
    [ExtensionAttribute]
public static HostConfigurator AfterInstall(HostConfigurator configurator, Action`1<InstallHostSettings> callback);
    [ExtensionAttribute]
public static HostConfigurator BeforeRollback(HostConfigurator configurator, Action callback);
    [ExtensionAttribute]
public static HostConfigurator BeforeRollback(HostConfigurator configurator, Action`1<InstallHostSettings> callback);
    [ExtensionAttribute]
public static HostConfigurator AfterRollback(HostConfigurator configurator, Action callback);
    [ExtensionAttribute]
public static HostConfigurator AfterRollback(HostConfigurator configurator, Action`1<InstallHostSettings> callback);
}
public static class Topshelf.Logging.HostLogger : object {
    private static object _locker;
    private static HostLoggerConfigurator _configurator;
    private static LogWriterFactory _logWriterFactory;
    public static LogWriterFactory Current { get; }
    public static HostLoggerConfigurator CurrentHostLoggerConfigurator { get; }
    private static HostLogger();
    public static LogWriterFactory get_Current();
    public static HostLoggerConfigurator get_CurrentHostLoggerConfigurator();
    private static LogWriterFactory CreateLogWriterFactory();
    public static LogWriter Get();
    public static LogWriter Get(Type type);
    public static LogWriter Get(string name);
    public static void UseLogger(HostLoggerConfigurator configurator);
    public static void Shutdown();
}
public interface Topshelf.Logging.HostLoggerConfigurator {
    public abstract virtual LogWriterFactory CreateLogWriterFactory();
}
public class Topshelf.Logging.LoggingLevel : object {
    public static LoggingLevel All;
    public static LoggingLevel Debug;
    public static LoggingLevel Error;
    public static LoggingLevel Fatal;
    public static LoggingLevel Info;
    public static LoggingLevel None;
    public static LoggingLevel Warn;
    private int _index;
    private string _name;
    private SourceLevels _sourceLevel;
    private TraceEventType _traceEventType;
    public static IEnumerable`1<LoggingLevel> Values { get; }
    public TraceEventType TraceEventType { get; }
    public string Name { get; }
    public SourceLevels SourceLevel { get; }
    private LoggingLevel(string name, int index, SourceLevels sourceLevel, TraceEventType traceEventType);
    private static LoggingLevel();
    [IteratorStateMachineAttribute("Topshelf.Logging.LoggingLevel/<get_Values>d__13")]
public static IEnumerable`1<LoggingLevel> get_Values();
    public TraceEventType get_TraceEventType();
    public string get_Name();
    public SourceLevels get_SourceLevel();
    public virtual string ToString();
    public static bool op_GreaterThan(LoggingLevel left, LoggingLevel right);
    public static bool op_LessThan(LoggingLevel left, LoggingLevel right);
    public static bool op_GreaterThanOrEqual(LoggingLevel left, LoggingLevel right);
    public static bool op_LessThanOrEqual(LoggingLevel left, LoggingLevel right);
    public static LoggingLevel FromSourceLevels(SourceLevels level);
}
public interface Topshelf.Logging.LogWriter {
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public abstract virtual bool get_IsDebugEnabled();
    public abstract virtual bool get_IsInfoEnabled();
    public abstract virtual bool get_IsWarnEnabled();
    public abstract virtual bool get_IsErrorEnabled();
    public abstract virtual bool get_IsFatalEnabled();
    public abstract virtual void Log(LoggingLevel level, object obj);
    public abstract virtual void Log(LoggingLevel level, object obj, Exception exception);
    public abstract virtual void Log(LoggingLevel level, LogWriterOutputProvider messageProvider);
    public abstract virtual void LogFormat(LoggingLevel level, IFormatProvider formatProvider, string format, Object[] args);
    public abstract virtual void LogFormat(LoggingLevel level, string format, Object[] args);
    public abstract virtual void Debug(object obj);
    public abstract virtual void Debug(object obj, Exception exception);
    public abstract virtual void Debug(LogWriterOutputProvider messageProvider);
    public abstract virtual void DebugFormat(IFormatProvider formatProvider, string format, Object[] args);
    public abstract virtual void DebugFormat(string format, Object[] args);
    public abstract virtual void Info(object obj);
    public abstract virtual void Info(object obj, Exception exception);
    public abstract virtual void Info(LogWriterOutputProvider messageProvider);
    public abstract virtual void InfoFormat(IFormatProvider formatProvider, string format, Object[] args);
    public abstract virtual void InfoFormat(string format, Object[] args);
    public abstract virtual void Warn(object obj);
    public abstract virtual void Warn(object obj, Exception exception);
    public abstract virtual void Warn(LogWriterOutputProvider messageProvider);
    public abstract virtual void WarnFormat(IFormatProvider formatProvider, string format, Object[] args);
    public abstract virtual void WarnFormat(string format, Object[] args);
    public abstract virtual void Error(object obj);
    public abstract virtual void Error(object obj, Exception exception);
    public abstract virtual void Error(LogWriterOutputProvider messageProvider);
    public abstract virtual void ErrorFormat(IFormatProvider formatProvider, string format, Object[] args);
    public abstract virtual void ErrorFormat(string format, Object[] args);
    public abstract virtual void Fatal(object obj);
    public abstract virtual void Fatal(object obj, Exception exception);
    public abstract virtual void Fatal(LogWriterOutputProvider messageProvider);
    public abstract virtual void FatalFormat(IFormatProvider formatProvider, string format, Object[] args);
    public abstract virtual void FatalFormat(string format, Object[] args);
}
public interface Topshelf.Logging.LogWriterFactory {
    public abstract virtual LogWriter Get(string name);
    public abstract virtual void Shutdown();
}
public class Topshelf.Logging.LogWriterOutputProvider : MulticastDelegate {
    public LogWriterOutputProvider(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Topshelf.Logging.TopshelfConsoleTraceListener : TraceListener {
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
}
public class Topshelf.Logging.TraceHostLoggerConfigurator : object {
    public sealed virtual LogWriterFactory CreateLogWriterFactory();
}
public class Topshelf.Logging.TraceLogWriter : object {
    private LoggingLevel _level;
    private TraceSource _source;
    public bool IsDebugEnabled { get; }
    public bool IsInfoEnabled { get; }
    public bool IsWarnEnabled { get; }
    public bool IsErrorEnabled { get; }
    public bool IsFatalEnabled { get; }
    public TraceLogWriter(TraceSource source);
    public sealed virtual bool get_IsDebugEnabled();
    public sealed virtual bool get_IsInfoEnabled();
    public sealed virtual bool get_IsWarnEnabled();
    public sealed virtual bool get_IsErrorEnabled();
    public sealed virtual bool get_IsFatalEnabled();
    public sealed virtual void LogFormat(LoggingLevel level, string format, Object[] args);
    public sealed virtual void Debug(object message);
    public sealed virtual void Debug(object message, Exception exception);
    public sealed virtual void Debug(LogWriterOutputProvider messageProvider);
    public sealed virtual void DebugFormat(string format, Object[] args);
    public sealed virtual void DebugFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Info(object message);
    public sealed virtual void Info(object message, Exception exception);
    public sealed virtual void Info(LogWriterOutputProvider messageProvider);
    public sealed virtual void InfoFormat(string format, Object[] args);
    public sealed virtual void InfoFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Warn(object message);
    public sealed virtual void Warn(object message, Exception exception);
    public sealed virtual void Warn(LogWriterOutputProvider messageProvider);
    public sealed virtual void WarnFormat(string format, Object[] args);
    public sealed virtual void WarnFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Error(object message);
    public sealed virtual void Error(object message, Exception exception);
    public sealed virtual void Error(LogWriterOutputProvider messageProvider);
    public sealed virtual void ErrorFormat(string format, Object[] args);
    public sealed virtual void ErrorFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Fatal(object message);
    public sealed virtual void Fatal(object message, Exception exception);
    public sealed virtual void Fatal(LogWriterOutputProvider messageProvider);
    public sealed virtual void FatalFormat(string format, Object[] args);
    public sealed virtual void FatalFormat(IFormatProvider formatProvider, string format, Object[] args);
    public sealed virtual void Log(LoggingLevel level, object obj);
    public sealed virtual void Log(LoggingLevel level, object obj, Exception exception);
    public sealed virtual void Log(LoggingLevel level, LogWriterOutputProvider messageProvider);
    public sealed virtual void LogFormat(LoggingLevel level, IFormatProvider formatProvider, string format, Object[] args);
    public void DebugFormat(Exception exception, string format, Object[] args);
    public void DebugFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public void InfoFormat(Exception exception, string format, Object[] args);
    public void InfoFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public void WarnFormat(Exception exception, string format, Object[] args);
    public void WarnFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public void ErrorFormat(Exception exception, string format, Object[] args);
    public void ErrorFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    public void FatalFormat(Exception exception, string format, Object[] args);
    public void FatalFormat(Exception exception, IFormatProvider formatProvider, string format, Object[] args);
    private void LogInternal(LoggingLevel level, object obj, Exception exception);
}
public class Topshelf.Logging.TraceLogWriterFactory : object {
    private Cache`2<string, TraceLogWriter> _logs;
    private Cache`2<string, TraceSource> _sources;
    private TraceListener _listener;
    private TraceSource _defaultSource;
    public sealed virtual LogWriter Get(string name);
    public sealed virtual void Shutdown();
    private static TraceListener AddDefaultConsoleTraceListener(TraceSource source);
    private TraceLogWriter CreateTraceLog(string name);
    private TraceSource CreateTraceSource(string name);
    private void ConfigureTraceSource(TraceSource source, string name, SourceLevels sourceLevel);
    private static bool IsSourceConfigured(TraceSource source);
    private static string ShortenName(string name);
}
[ExtensionAttribute]
internal static class Topshelf.Logging.TypeExtensions : object {
    private static TypeNameFormatter _typeNameFormatter;
    private static TypeExtensions();
    [ExtensionAttribute]
public static string GetTypeName(Type type);
}
internal class Topshelf.Logging.TypeNameFormatter : object {
    private Cache`2<Type, string> _cache;
    private string _genericArgumentSeparator;
    private string _genericOpen;
    private string _genericClose;
    private string _namespaceSeparator;
    private string _nestedTypeSeparator;
    public TypeNameFormatter(string genericArgumentSeparator, string genericOpen, string genericClose, string namespaceSeparator, string nestedTypeSeparator);
    public string GetTypeName(Type type);
    private string FormatTypeName(Type type);
    private string FormatTypeName(StringBuilder sb, Type type, string scope);
}
public class Topshelf.Options.AutostartOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.CommandOption : object {
    private int _command;
    public CommandOption(string command);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.DelayedOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.DependencyOption : object {
    private string dependencyName;
    public DependencyOption(string dependencyName);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.DisabledOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.DisplayNameOption : object {
    private string _name;
    public DisplayNameOption(string name);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.HelpOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.InstallOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.InstanceOption : object {
    private string _instanceName;
    public InstanceOption(string instanceName);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.InteractiveOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.LocalServiceOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.LocalSystemOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.ManualStartOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.NetworkServiceOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public interface Topshelf.Options.Option {
    public abstract virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.RunOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.ServiceAccountOption : object {
    private string _password;
    private string _username;
    public ServiceAccountOption(string username, string password);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.ServiceDescriptionOption : object {
    private string _description;
    public ServiceDescriptionOption(string description);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.ServiceNameOption : object {
    private string _serviceName;
    public ServiceNameOption(string name);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.ServiceRecoveryOption : object {
    private ServiceRecoveryOptions serviceRecoveryOptions;
    public ServiceRecoveryOption(ServiceRecoveryOptions serviceRecoveryOptions);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.StartOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.StartTimeoutOption : object {
    private int startTimeout;
    public StartTimeoutOption(int startTimeout);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.StopOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.StopTimeoutOption : object {
    private int stopTimeoout;
    public StopTimeoutOption(int stopTimeoout);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.SudoOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.SystemOnlyHelpOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.UninstallOption : object {
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public class Topshelf.Options.UnknownOption : object {
    private string _text;
    public UnknownOption(string text);
    public sealed virtual void ApplyTo(HostConfigurator configurator);
}
public interface Topshelf.PowerEventArguments {
    public PowerEventCode EventCode { get; }
    public abstract virtual PowerEventCode get_EventCode();
}
public enum Topshelf.PowerEventCode : Enum {
    public int value__;
    public static PowerEventCode QuerySuspend;
    public static PowerEventCode QuerySuspendFailed;
    public static PowerEventCode Suspend;
    public static PowerEventCode ResumeCritical;
    public static PowerEventCode ResumeSuspend;
    public static PowerEventCode BatteryLow;
    public static PowerEventCode PowerStatusChange;
    public static PowerEventCode OemEvent;
    public static PowerEventCode ResumeAutomatic;
}
[ExtensionAttribute]
public static class Topshelf.RunAsExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator RunAs(HostConfigurator configurator, string username, string password);
    [ExtensionAttribute]
public static HostConfigurator RunAsVirtualServiceAccount(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator RunAsPrompt(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator RunAsNetworkService(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator RunAsLocalSystem(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator RunAsLocalService(HostConfigurator configurator);
}
public class Topshelf.Runtime.EventCallbackList`1 : object {
    private IList`1<Action`1<T>> _callbacks;
    public void Add(Action`1<T> callback);
    public void Notify(T data);
}
public interface Topshelf.Runtime.HostEnvironment {
    public string CommandLine { get; }
    public bool IsAdministrator { get; }
    public bool IsRunningAsAService { get; }
    public abstract virtual string get_CommandLine();
    public abstract virtual bool get_IsAdministrator();
    public abstract virtual bool get_IsRunningAsAService();
    public abstract virtual bool IsServiceInstalled(string serviceName);
    public abstract virtual bool IsServiceStopped(string serviceName);
    public abstract virtual void StartService(string serviceName, TimeSpan startTimeOut);
    public abstract virtual void StopService(string serviceName, TimeSpan stopTimeOut);
    public abstract virtual void InstallService(InstallHostSettings settings, Action`1<InstallHostSettings> beforeInstall, Action afterInstall, Action beforeRollback, Action afterRollback);
    public abstract virtual void UninstallService(HostSettings settings, Action beforeUninstall, Action afterUninstall);
    public abstract virtual bool RunAsAdministrator();
    public abstract virtual Host CreateServiceHost(HostSettings settings, ServiceHandle serviceHandle);
    public abstract virtual void SendServiceCommand(string serviceName, int command);
}
public interface Topshelf.Runtime.HostSettings {
    public string Name { get; }
    public string DisplayName { get; }
    public string Description { get; }
    public string InstanceName { get; }
    public string ServiceName { get; }
    public bool CanPauseAndContinue { get; }
    public bool CanShutdown { get; }
    public bool CanSessionChanged { get; }
    public bool CanHandlePowerEvent { get; }
    public TimeSpan StartTimeOut { get; }
    public TimeSpan StopTimeOut { get; }
    public Action`1<Exception> ExceptionCallback { get; }
    public UnhandledExceptionPolicyCode UnhandledExceptionPolicy { get; }
    public bool CanHandleCtrlBreak { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_DisplayName();
    public abstract virtual string get_Description();
    public abstract virtual string get_InstanceName();
    public abstract virtual string get_ServiceName();
    public abstract virtual bool get_CanPauseAndContinue();
    public abstract virtual bool get_CanShutdown();
    public abstract virtual bool get_CanSessionChanged();
    public abstract virtual bool get_CanHandlePowerEvent();
    public abstract virtual TimeSpan get_StartTimeOut();
    public abstract virtual TimeSpan get_StopTimeOut();
    public abstract virtual Action`1<Exception> get_ExceptionCallback();
    public abstract virtual UnhandledExceptionPolicyCode get_UnhandledExceptionPolicy();
    public abstract virtual bool get_CanHandleCtrlBreak();
}
public enum Topshelf.Runtime.HostStartMode : Enum {
    public int value__;
    public static HostStartMode Automatic;
    public static HostStartMode Manual;
    public static HostStartMode Disabled;
    public static HostStartMode AutomaticDelayed;
}
public interface Topshelf.Runtime.InstallHostSettings {
    public Credentials Credentials { get; public set; }
    public String[] Dependencies { get; }
    public HostStartMode StartMode { get; }
    public abstract virtual Credentials get_Credentials();
    public abstract virtual void set_Credentials(Credentials value);
    public abstract virtual String[] get_Dependencies();
    public abstract virtual HostStartMode get_StartMode();
}
public interface Topshelf.Runtime.ServiceEvents {
    public abstract virtual void BeforeStart(HostControl hostControl);
    public abstract virtual void AfterStart(HostControl hostControl);
    public abstract virtual void BeforeStop(HostControl hostControl);
    public abstract virtual void AfterStop(HostControl hostControl);
}
public class Topshelf.Runtime.ServiceEventsImpl : object {
    private EventCallbackList`1<HostStartedContext> _afterStart;
    private EventCallbackList`1<HostStoppedContext> _afterStop;
    private EventCallbackList`1<HostStartContext> _beforeStart;
    private EventCallbackList`1<HostStopContext> _beforeStop;
    public sealed virtual void BeforeStart(HostControl hostControl);
    public sealed virtual void AfterStart(HostControl hostControl);
    public sealed virtual void BeforeStop(HostControl hostControl);
    public sealed virtual void AfterStop(HostControl hostControl);
    public void AddBeforeStart(Action`1<HostStartContext> callback);
    public void AddAfterStart(Action`1<HostStartedContext> callback);
    public void AddBeforeStop(Action`1<HostStopContext> callback);
    public void AddAfterStop(Action`1<HostStoppedContext> callback);
}
public class Topshelf.Runtime.ServiceFactory`1 : MulticastDelegate {
    public ServiceFactory`1(object object, IntPtr method);
    public virtual T Invoke(HostSettings settings);
    public virtual IAsyncResult BeginInvoke(HostSettings settings, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public interface Topshelf.Runtime.ServiceHandle {
    public abstract virtual bool Start(HostControl hostControl);
    public abstract virtual bool Pause(HostControl hostControl);
    public abstract virtual bool Continue(HostControl hostControl);
    public abstract virtual bool Stop(HostControl hostControl);
    public abstract virtual void Shutdown(HostControl hostControl);
    public abstract virtual void SessionChanged(HostControl hostControl, SessionChangedArguments arguments);
    public abstract virtual bool PowerEvent(HostControl hostControl, PowerEventArguments arguments);
    public abstract virtual void CustomCommand(HostControl hostControl, int command);
}
public enum Topshelf.Runtime.UnhandledExceptionPolicyCode : Enum {
    public int value__;
    public static UnhandledExceptionPolicyCode LogErrorAndStopService;
    public static UnhandledExceptionPolicyCode LogErrorOnly;
    public static UnhandledExceptionPolicyCode TakeNoAction;
}
public class Topshelf.Runtime.Windows.HostInstaller : Installer {
    private static LogWriter _log;
    private string _arguments;
    private Installer[] _installers;
    private HostSettings _settings;
    public HostInstaller(HostSettings settings, string arguments, Installer[] installers);
    private static HostInstaller();
    public virtual void Install(IDictionary stateSaver);
    public virtual void Uninstall(IDictionary savedState);
}
public class Topshelf.Runtime.Windows.HostServiceInstaller : object {
    private Installer _installer;
    private TransactedInstaller _transactedInstaller;
    public ServiceProcessInstaller ServiceProcessInstaller { get; }
    public HostServiceInstaller(InstallHostSettings settings);
    public HostServiceInstaller(HostSettings settings);
    public ServiceProcessInstaller get_ServiceProcessInstaller();
    public sealed virtual void Dispose();
    public void InstallService(Action`1<InstallEventArgs> beforeInstall, Action`1<InstallEventArgs> afterInstall, Action`1<InstallEventArgs> beforeRollback, Action`1<InstallEventArgs> afterRollback);
    public void UninstallService(Action`1<InstallEventArgs> beforeUninstall, Action`1<InstallEventArgs> afterUninstall);
    private static Installer CreateInstaller(InstallHostSettings settings);
    private static void RemoveEventLogInstallers(Installer[] installers);
    private Installer CreateInstaller(HostSettings settings);
    private static Installer CreateHostInstaller(HostSettings settings, Installer[] installers);
    private static TransactedInstaller CreateTransactedInstaller(Installer installer);
    private static bool IsDotnetExe(Process process);
    private static ServiceInstaller ConfigureServiceInstaller(HostSettings settings, String[] dependencies, HostStartMode startMode);
    private static void SetStartMode(ServiceInstaller installer, HostStartMode startMode);
    private static ServiceProcessInstaller ConfigureServiceProcessInstaller(ServiceAccount account, string username, string password);
}
internal static class Topshelf.Runtime.Windows.Kernel32 : object {
    public static UInt32 TH32CS_SNAPPROCESS;
    private static Kernel32();
    public static IntPtr CreateToolhelp32Snapshot(UInt32 dwFlags, UInt32 th32ProcessID);
    public static bool Process32First(IntPtr hSnapshot, PROCESSENTRY32& lppe);
    public static bool Process32Next(IntPtr hSnapshot, PROCESSENTRY32& lppe);
}
public class Topshelf.Runtime.Windows.NativeMethods : object {
    public static int SERVICE_CONFIG_FAILURE_ACTIONS;
    public static int SERVICE_CONFIG_FAILURE_ACTIONS_FLAG;
    public static SCMHandle OpenSCManager(string machineName, string databaseName, UInt32 dwAccess);
    public static bool CloseServiceHandle(IntPtr hSCObject);
    public static SCMHandle OpenService(SCMHandle hSCManager, string lpServiceName, UInt32 dwDesiredAccess);
    public static bool ChangeServiceConfig2(SCMHandle serviceHandle, UInt32 infoLevel, IntPtr lpInfo);
    public static bool OpenProcessToken(IntPtr ProcessHandle, int DesiredAccess, SafeTokenHandle& TokenHandle);
    public static bool AdjustTokenPrivileges(SafeTokenHandle TokenHandle, bool DisableAllPrivileges, TOKEN_PRIVILEGES& NewState, UInt32 BufferLength, IntPtr PreviousState, IntPtr ReturnLength);
    public static bool LookupPrivilegeValue(string lpSystemName, string lpName, LUID& lpLuid);
}
public class Topshelf.Runtime.Windows.RestartServiceRecoveryAction : ServiceRecoveryAction {
    public RestartServiceRecoveryAction(TimeSpan delay);
    public virtual SC_ACTION GetAction();
}
public class Topshelf.Runtime.Windows.RestartSystemRecoveryAction : ServiceRecoveryAction {
    [CompilerGeneratedAttribute]
private string <RestartMessage>k__BackingField;
    public string RestartMessage { get; private set; }
    public RestartSystemRecoveryAction(TimeSpan delay, string restartMessage);
    [CompilerGeneratedAttribute]
public string get_RestartMessage();
    [CompilerGeneratedAttribute]
private void set_RestartMessage(string value);
    public virtual SC_ACTION GetAction();
}
public class Topshelf.Runtime.Windows.RunProgramRecoveryAction : ServiceRecoveryAction {
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    public string Command { get; private set; }
    public RunProgramRecoveryAction(TimeSpan delay, string command);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
    public virtual SC_ACTION GetAction();
}
public class Topshelf.Runtime.Windows.SafeTokenHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [ReliabilityContractAttribute("3", "2")]
[SuppressUnmanagedCodeSecurityAttribute]
private static bool CloseHandle(IntPtr handle);
    protected virtual bool ReleaseHandle();
}
public class Topshelf.Runtime.Windows.SCMHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
public abstract class Topshelf.Runtime.Windows.ServiceRecoveryAction : object {
    [CompilerGeneratedAttribute]
private int <Delay>k__BackingField;
    public int Delay { get; }
    protected ServiceRecoveryAction(TimeSpan delay);
    [CompilerGeneratedAttribute]
public int get_Delay();
    public abstract virtual SC_ACTION GetAction();
}
public class Topshelf.Runtime.Windows.ServiceRecoveryOptions : object {
    private IList`1<ServiceRecoveryAction> _actions;
    [CompilerGeneratedAttribute]
private int <ResetPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecoverOnCrashOnly>k__BackingField;
    public int ResetPeriod { get; public set; }
    public IEnumerable`1<ServiceRecoveryAction> Actions { get; }
    public bool RecoverOnCrashOnly { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ResetPeriod();
    [CompilerGeneratedAttribute]
public void set_ResetPeriod(int value);
    public IEnumerable`1<ServiceRecoveryAction> get_Actions();
    [CompilerGeneratedAttribute]
public bool get_RecoverOnCrashOnly();
    [CompilerGeneratedAttribute]
public void set_RecoverOnCrashOnly(bool value);
    public void AddAction(ServiceRecoveryAction serviceRecoveryAction);
}
public class Topshelf.Runtime.Windows.TakeNoActionAction : ServiceRecoveryAction {
    public virtual SC_ACTION GetAction();
}
public class Topshelf.Runtime.Windows.WindowsHostEnvironment : object {
    private LogWriter _log;
    private HostConfigurator _hostConfigurator;
    public string CommandLine { get; }
    public bool IsAdministrator { get; }
    public bool IsRunningAsAService { get; }
    public WindowsHostEnvironment(HostConfigurator configurator);
    public sealed virtual bool IsServiceInstalled(string serviceName);
    public sealed virtual bool IsServiceStopped(string serviceName);
    public sealed virtual void StartService(string serviceName, TimeSpan startTimeOut);
    public sealed virtual void StopService(string serviceName, TimeSpan stopTimeOut);
    public sealed virtual string get_CommandLine();
    public sealed virtual bool get_IsAdministrator();
    public sealed virtual bool get_IsRunningAsAService();
    public sealed virtual bool RunAsAdministrator();
    public sealed virtual Host CreateServiceHost(HostSettings settings, ServiceHandle serviceHandle);
    public sealed virtual void SendServiceCommand(string serviceName, int command);
    public sealed virtual void InstallService(InstallHostSettings settings, Action`1<InstallHostSettings> beforeInstall, Action afterInstall, Action beforeRollback, Action afterRollback);
    public sealed virtual void UninstallService(HostSettings settings, Action beforeUninstall, Action afterUninstall);
    private Process GetParent(Process child);
    private bool IsServiceListed(string serviceName);
}
public class Topshelf.Runtime.Windows.WindowsHostEnvironmentBuilder : object {
    private HostConfigurator _hostConfigurator;
    public WindowsHostEnvironmentBuilder(HostConfigurator configurator);
    public sealed virtual HostEnvironment Build();
}
public class Topshelf.Runtime.Windows.WindowsHostSettings : object {
    public static string InstanceSeparator;
    private string _description;
    private string _displayName;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanPauseAndContinue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanShutdown>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanSessionChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanHandlePowerEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartTimeOut>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StopTimeOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <ExceptionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private UnhandledExceptionPolicyCode <UnhandledExceptionPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanHandleCtrlBreak>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string InstanceName { get; public set; }
    public string ServiceName { get; }
    public bool CanPauseAndContinue { get; public set; }
    public bool CanShutdown { get; public set; }
    public bool CanSessionChanged { get; public set; }
    public bool CanHandlePowerEvent { get; public set; }
    public TimeSpan StartTimeOut { get; public set; }
    public TimeSpan StopTimeOut { get; public set; }
    public Action`1<Exception> ExceptionCallback { get; public set; }
    public UnhandledExceptionPolicyCode UnhandledExceptionPolicy { get; public set; }
    public bool CanHandleCtrlBreak { get; public set; }
    public WindowsHostSettings(string name, string instanceName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public sealed virtual string get_DisplayName();
    public void set_DisplayName(string value);
    public sealed virtual string get_Description();
    public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstanceName();
    [CompilerGeneratedAttribute]
public void set_InstanceName(string value);
    public sealed virtual string get_ServiceName();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanPauseAndContinue();
    [CompilerGeneratedAttribute]
public void set_CanPauseAndContinue(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanShutdown();
    [CompilerGeneratedAttribute]
public void set_CanShutdown(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanSessionChanged();
    [CompilerGeneratedAttribute]
public void set_CanSessionChanged(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanHandlePowerEvent();
    [CompilerGeneratedAttribute]
public void set_CanHandlePowerEvent(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StartTimeOut();
    [CompilerGeneratedAttribute]
public void set_StartTimeOut(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_StopTimeOut();
    [CompilerGeneratedAttribute]
public void set_StopTimeOut(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<Exception> get_ExceptionCallback();
    [CompilerGeneratedAttribute]
public void set_ExceptionCallback(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public sealed virtual UnhandledExceptionPolicyCode get_UnhandledExceptionPolicy();
    [CompilerGeneratedAttribute]
public void set_UnhandledExceptionPolicy(UnhandledExceptionPolicyCode value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanHandleCtrlBreak();
    [CompilerGeneratedAttribute]
public void set_CanHandleCtrlBreak(bool value);
}
public class Topshelf.Runtime.Windows.WindowsServiceHost : ServiceBase {
    private static LogWriter _log;
    private HostConfigurator _configurator;
    private HostEnvironment _environment;
    private ServiceHandle _serviceHandle;
    private HostSettings _settings;
    private int _deadThread;
    private bool _disposed;
    private Exception _unhandledException;
    public WindowsServiceHost(HostEnvironment environment, HostSettings settings, ServiceHandle serviceHandle, HostConfigurator configurator);
    private static WindowsServiceHost();
    public sealed virtual TopshelfExitCode Run();
    private sealed virtual override void Topshelf.HostControl.RequestAdditionalTime(TimeSpan timeRemaining);
    private sealed virtual override void Topshelf.HostControl.Stop();
    private sealed virtual override void Topshelf.HostControl.Stop(TopshelfExitCode exitCode);
    private void InternalStop(Nullable`1<TopshelfExitCode> exitCode);
    protected virtual void OnStart(String[] args);
    protected virtual void OnStop();
    protected virtual void OnPause();
    protected virtual void OnContinue();
    protected virtual void OnShutdown();
    protected virtual void OnSessionChange(SessionChangeDescription changeDescription);
    protected virtual bool OnPowerEvent(PowerBroadcastStatus powerStatus);
    protected virtual void OnCustomCommand(int command);
    protected virtual void Dispose(bool disposing);
    private void CatchUnhandledException(object sender, UnhandledExceptionEventArgs e);
}
public class Topshelf.Runtime.Windows.WindowsServiceRecoveryController : object {
    public void SetServiceRecoveryOptions(HostSettings settings, ServiceRecoveryOptions options);
    private void RequestShutdownPrivileges();
    private static void ThrowOnFail(bool success);
}
public static class Topshelf.Runtime.Windows.WindowsUserAccessControl : object {
    private static LogWriter _log;
    private static WindowsUserAccessControl();
}
public class Topshelf.ServiceBuilderException : TopshelfException {
    public ServiceBuilderException(string message);
    public ServiceBuilderException(string message, Exception innerException);
    protected ServiceBuilderException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Topshelf.ServiceConfiguratorExtensions : object {
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> ConstructUsing(ServiceConfigurator`1<T> configurator, Func`1<T> factory);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> ConstructUsing(ServiceConfigurator`1<T> configurator, Func`2<string, T> factory);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> WhenStarted(ServiceConfigurator`1<T> configurator, Action`1<T> callback);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> WhenStopped(ServiceConfigurator`1<T> configurator, Action`1<T> callback);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> WhenPaused(ServiceConfigurator`1<T> configurator, Action`1<T> callback);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> WhenContinued(ServiceConfigurator`1<T> configurator, Action`1<T> callback);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> WhenShutdown(ServiceConfigurator`1<T> configurator, Action`1<T> callback);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> WhenSessionChanged(ServiceConfigurator`1<T> configurator, Action`2<T, SessionChangedArguments> callback);
    [ExtensionAttribute]
public static ServiceConfigurator`1<T> WhenPowerEvent(ServiceConfigurator`1<T> configurator, Func`3<T, PowerEventArguments, bool> callback);
}
public class Topshelf.ServiceConfigurators.ControlServiceConfigurator`1 : ServiceConfiguratorBase {
    private Func`2<HostSettings, T> _serviceFactory;
    public ControlServiceConfigurator`1(Func`2<HostSettings, T> serviceFactory);
    [IteratorStateMachineAttribute("Topshelf.ServiceConfigurators.ControlServiceConfigurator`1/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public ServiceBuilder Build();
}
public class Topshelf.ServiceConfigurators.DelegateServiceConfigurator`1 : ServiceConfiguratorBase {
    private Func`3<T, HostControl, bool> _continue;
    private ServiceFactory`1<T> _factory;
    private Func`3<T, HostControl, bool> _pause;
    private bool _pauseConfigured;
    private bool _sessionChangeConfigured;
    private bool _powerEventConfigured;
    private Action`3<T, HostControl, SessionChangedArguments> _sessionChanged;
    private Func`4<T, HostControl, PowerEventArguments, bool> _powerEvent;
    private Action`2<T, HostControl> _shutdown;
    private bool _shutdownConfigured;
    private Func`3<T, HostControl, bool> _start;
    private Func`3<T, HostControl, bool> _stop;
    private bool _customCommandReceivedConfigured;
    private Action`3<T, HostControl, int> _customCommandReceived;
    [IteratorStateMachineAttribute("Topshelf.ServiceConfigurators.DelegateServiceConfigurator`1/<Validate>d__14")]
public sealed virtual IEnumerable`1<ValidateResult> Validate();
    public sealed virtual void ConstructUsing(ServiceFactory`1<T> serviceFactory);
    public sealed virtual void WhenStarted(Func`3<T, HostControl, bool> start);
    public sealed virtual void WhenStopped(Func`3<T, HostControl, bool> stop);
    public sealed virtual void WhenPaused(Func`3<T, HostControl, bool> pause);
    public sealed virtual void WhenContinued(Func`3<T, HostControl, bool> continue);
    public sealed virtual void WhenShutdown(Action`2<T, HostControl> shutdown);
    public sealed virtual void WhenSessionChanged(Action`3<T, HostControl, SessionChangedArguments> sessionChanged);
    public sealed virtual void WhenPowerEvent(Func`4<T, HostControl, PowerEventArguments, bool> powerEvent);
    public sealed virtual void WhenCustomCommandReceived(Action`3<T, HostControl, int> customCommandReceived);
    public ServiceBuilder Build();
}
public interface Topshelf.ServiceConfigurators.ServiceConfigurator {
    public abstract virtual void BeforeStartingService(Action`1<HostStartContext> callback);
    public abstract virtual void AfterStartingService(Action`1<HostStartedContext> callback);
    public abstract virtual void BeforeStoppingService(Action`1<HostStopContext> callback);
    public abstract virtual void AfterStoppingService(Action`1<HostStoppedContext> callback);
}
public interface Topshelf.ServiceConfigurators.ServiceConfigurator`1 {
    public abstract virtual void ConstructUsing(ServiceFactory`1<T> serviceFactory);
    public abstract virtual void WhenStarted(Func`3<T, HostControl, bool> start);
    public abstract virtual void WhenStopped(Func`3<T, HostControl, bool> stop);
    public abstract virtual void WhenPaused(Func`3<T, HostControl, bool> pause);
    public abstract virtual void WhenContinued(Func`3<T, HostControl, bool> continue);
    public abstract virtual void WhenShutdown(Action`2<T, HostControl> shutdown);
    public abstract virtual void WhenSessionChanged(Action`3<T, HostControl, SessionChangedArguments> sessionChanged);
    public abstract virtual void WhenPowerEvent(Func`4<T, HostControl, PowerEventArguments, bool> powerEvent);
    public abstract virtual void WhenCustomCommandReceived(Action`3<T, HostControl, int> customCommandReceived);
}
public abstract class Topshelf.ServiceConfigurators.ServiceConfiguratorBase : object {
    protected ServiceEventsImpl ServiceEvents;
    public sealed virtual void BeforeStartingService(Action`1<HostStartContext> callback);
    public sealed virtual void AfterStartingService(Action`1<HostStartedContext> callback);
    public sealed virtual void BeforeStoppingService(Action`1<HostStopContext> callback);
    public sealed virtual void AfterStoppingService(Action`1<HostStoppedContext> callback);
}
public interface Topshelf.ServiceControl {
    public abstract virtual bool Start(HostControl hostControl);
    public abstract virtual bool Stop(HostControl hostControl);
}
public class Topshelf.ServiceControlException : TopshelfException {
    public ServiceControlException(string message);
    public ServiceControlException(string message, Exception innerException);
    protected ServiceControlException(SerializationInfo info, StreamingContext context);
    public ServiceControlException(string format, Type serviceType, string command, Exception innerException);
    private static string FormatMessage(string format, Type serviceType, string command);
}
public interface Topshelf.ServiceCustomCommand {
    public abstract virtual void CustomCommand(HostControl hostControl, int command);
}
[ExtensionAttribute]
public static class Topshelf.ServiceEventConfiguratorExtensions : object {
    [ExtensionAttribute]
public static T BeforeStartingService(T configurator, Action callback);
    [ExtensionAttribute]
public static T AfterStartingService(T configurator, Action callback);
    [ExtensionAttribute]
public static T BeforeStoppingService(T configurator, Action callback);
    [ExtensionAttribute]
public static T AfterStoppingService(T configurator, Action callback);
}
[ExtensionAttribute]
public static class Topshelf.ServiceExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator Service(HostConfigurator configurator, Func`2<HostSettings, TService> serviceFactory, Action`1<ServiceConfigurator> callback);
    public static ServiceBuilderFactory CreateServiceBuilderFactory(Func`2<HostSettings, TService> serviceFactory, Action`1<ServiceConfigurator> callback);
    [ExtensionAttribute]
public static HostConfigurator Service(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator Service(HostConfigurator configurator, Func`1<T> serviceFactory);
    [ExtensionAttribute]
public static HostConfigurator Service(HostConfigurator configurator, Func`1<T> serviceFactory, Action`1<ServiceConfigurator> callback);
    [ExtensionAttribute]
public static HostConfigurator Service(HostConfigurator configurator, Func`2<HostSettings, T> serviceFactory);
    [ExtensionAttribute]
public static HostConfigurator Service(HostConfigurator configurator, Action`1<ServiceConfigurator`1<TService>> callback);
    public static ServiceBuilderFactory CreateServiceBuilderFactory(Action`1<ServiceConfigurator`1<TService>> callback);
}
public interface Topshelf.ServicePowerEvent {
    public abstract virtual bool PowerEvent(HostControl hostControl, PowerEventArguments changedArguments);
}
public interface Topshelf.ServiceRecoveryConfigurator {
    public abstract virtual ServiceRecoveryConfigurator RestartService(TimeSpan delay);
    public abstract virtual ServiceRecoveryConfigurator RestartService(int delayInMinutes);
    public abstract virtual ServiceRecoveryConfigurator RestartComputer(TimeSpan delay, string message);
    public abstract virtual ServiceRecoveryConfigurator RestartComputer(int delayInMinutes, string message);
    public abstract virtual ServiceRecoveryConfigurator RunProgram(TimeSpan delay, string command);
    public abstract virtual ServiceRecoveryConfigurator RunProgram(int delayInMinutes, string command);
    public abstract virtual ServiceRecoveryConfigurator TakeNoAction();
    public abstract virtual ServiceRecoveryConfigurator SetResetPeriod(int days);
    public abstract virtual void OnCrashOnly();
}
[ExtensionAttribute]
public static class Topshelf.ServiceRecoveryConfiguratorExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator EnableServiceRecovery(HostConfigurator configurator, Action`1<ServiceRecoveryConfigurator> configureCallback);
}
public interface Topshelf.ServiceSessionChange {
    public abstract virtual void SessionChange(HostControl hostControl, SessionChangedArguments changedArguments);
}
public interface Topshelf.ServiceShutdown {
    public abstract virtual void Shutdown(HostControl hostControl);
}
public interface Topshelf.ServiceSuspend {
    public abstract virtual bool Pause(HostControl hostControl);
    public abstract virtual bool Continue(HostControl hostControl);
}
public interface Topshelf.SessionChangedArguments {
    public SessionChangeReasonCode ReasonCode { get; }
    public int SessionId { get; }
    public abstract virtual SessionChangeReasonCode get_ReasonCode();
    public abstract virtual int get_SessionId();
}
public enum Topshelf.SessionChangeReasonCode : Enum {
    public int value__;
    public static SessionChangeReasonCode ConsoleConnect;
    public static SessionChangeReasonCode ConsoleDisconnect;
    public static SessionChangeReasonCode RemoteConnect;
    public static SessionChangeReasonCode RemoteDisconnect;
    public static SessionChangeReasonCode SessionLogon;
    public static SessionChangeReasonCode SessionLogoff;
    public static SessionChangeReasonCode SessionLock;
    public static SessionChangeReasonCode SessionUnlock;
    public static SessionChangeReasonCode SessionRemoteControl;
}
[ExtensionAttribute]
public static class Topshelf.StartModeExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator StartAutomatically(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator StartAutomaticallyDelayed(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator StartManually(HostConfigurator configurator);
    [ExtensionAttribute]
public static HostConfigurator Disabled(HostConfigurator configurator);
}
[ExtensionAttribute]
public static class Topshelf.TestHostExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator UseTestHost(HostConfigurator configurator);
}
public class Topshelf.TopshelfException : Exception {
    public TopshelfException(string message);
    public TopshelfException(string message, Exception innerException);
    protected TopshelfException(SerializationInfo info, StreamingContext context);
}
public enum Topshelf.TopshelfExitCode : Enum {
    public int value__;
    public static TopshelfExitCode Ok;
    public static TopshelfExitCode ServiceAlreadyInstalled;
    public static TopshelfExitCode ServiceNotInstalled;
    public static TopshelfExitCode ServiceAlreadyRunning;
    public static TopshelfExitCode ServiceNotRunning;
    public static TopshelfExitCode ServiceControlRequestFailed;
    public static TopshelfExitCode AbnormalExit;
    public static TopshelfExitCode SudoRequired;
    public static TopshelfExitCode NotRunningOnWindows;
}
[ExtensionAttribute]
public static class Topshelf.UninstallHostConfiguratorExtensions : object {
    [ExtensionAttribute]
public static HostConfigurator BeforeUninstall(HostConfigurator configurator, Action callback);
    [ExtensionAttribute]
public static HostConfigurator AfterUninstall(HostConfigurator configurator, Action callback);
}
