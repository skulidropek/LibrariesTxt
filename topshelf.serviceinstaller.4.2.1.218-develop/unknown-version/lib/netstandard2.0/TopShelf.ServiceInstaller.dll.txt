public abstract class System.Configuration.Install.ComponentInstaller : Installer {
    public abstract virtual void CopyFromComponent(IComponent component);
    public virtual bool IsEquivalentInstaller(ComponentInstaller otherInstaller);
}
public class System.Configuration.Install.InstallContext : object {
    private StringDictionary parameters;
    public StringDictionary Parameters { get; }
    public InstallContext(string logFilePath, String[] commandLine);
    public StringDictionary get_Parameters();
    public bool IsParameterTrue(string paramName);
    public void LogMessage(string message);
    internal void LogMessageHelper(string message);
    protected static StringDictionary ParseCommandLine(String[] args);
}
public class System.Configuration.Install.Installer : Component {
    internal Installer parent;
    private InstallerCollection installers;
    [CompilerGeneratedAttribute]
private InstallContext <Context>k__BackingField;
    private InstallEventHandler afterCommitHandler;
    private InstallEventHandler afterInstallHandler;
    private InstallEventHandler afterRollbackHandler;
    private InstallEventHandler afterUninstallHandler;
    private InstallEventHandler beforeCommitHandler;
    private InstallEventHandler beforeInstallHandler;
    private InstallEventHandler beforeRollbackHandler;
    private InstallEventHandler beforeUninstallHandler;
    public InstallContext Context { get; public set; }
    public InstallerCollection Installers { get; }
    [ResDescriptionAttribute("Desc_Installer_HelpText")]
public string HelpText { get; }
    [TypeConverterAttribute("System.Configuration.Install.InstallerParentConverter")]
[ResDescriptionAttribute("Desc_Installer_Parent")]
public Installer Parent { get; public set; }
    [CompilerGeneratedAttribute]
public InstallContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(InstallContext value);
    public InstallerCollection get_Installers();
    public virtual string get_HelpText();
    public Installer get_Parent();
    public void set_Parent(Installer value);
    public virtual void Commit(IDictionary savedState);
    public virtual void Install(IDictionary stateSaver);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
    public void add_Committed(InstallEventHandler value);
    public void remove_Committed(InstallEventHandler value);
    public void add_AfterInstall(InstallEventHandler value);
    public void remove_AfterInstall(InstallEventHandler value);
    public void add_AfterRollback(InstallEventHandler value);
    public void remove_AfterRollback(InstallEventHandler value);
    public void add_AfterUninstall(InstallEventHandler value);
    public void remove_AfterUninstall(InstallEventHandler value);
    public void add_Committing(InstallEventHandler value);
    public void remove_Committing(InstallEventHandler value);
    public void add_BeforeInstall(InstallEventHandler value);
    public void remove_BeforeInstall(InstallEventHandler value);
    public void add_BeforeRollback(InstallEventHandler value);
    public void remove_BeforeRollback(InstallEventHandler value);
    public void add_BeforeUninstall(InstallEventHandler value);
    public void remove_BeforeUninstall(InstallEventHandler value);
    protected virtual void OnCommitted(IDictionary savedState);
    protected virtual void OnAfterInstall(IDictionary savedState);
    protected virtual void OnAfterRollback(IDictionary savedState);
    protected virtual void OnAfterUninstall(IDictionary savedState);
    protected virtual void OnCommitting(IDictionary savedState);
    protected virtual void OnBeforeInstall(IDictionary savedState);
    protected virtual void OnBeforeRollback(IDictionary savedState);
    protected virtual void OnBeforeUninstall(IDictionary savedState);
    private void WriteEventHandlerError(string severity, string eventName, Exception e);
    internal static void LogException(Exception e, InstallContext context);
    private bool IsWrappedException(Exception e);
    internal bool InstallerTreeContains(Installer target);
}
public class System.Configuration.Install.InstallerCollection : Collection`1<Installer> {
    private Installer owner;
    internal InstallerCollection(Installer owner);
    public void AddRange(IEnumerable`1<Installer> value);
    protected virtual void InsertItem(int index, Installer item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Installer item);
}
internal class System.Configuration.Install.InstallerParentConverter : ReferenceConverter {
    public InstallerParentConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class System.Configuration.Install.InstallEventArgs : object {
    [CompilerGeneratedAttribute]
private IDictionary <SavedSate>k__BackingField;
    public IDictionary SavedSate { get; }
    public InstallEventArgs(IDictionary savedSate);
    [CompilerGeneratedAttribute]
public IDictionary get_SavedSate();
}
public class System.Configuration.Install.InstallEventHandler : MulticastDelegate {
    public InstallEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InstallEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InstallEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Configuration.Install.InstallException : SystemException {
    public InstallException(string message);
    public InstallException(string message, Exception innerException);
    protected InstallException(SerializationInfo info, StreamingContext context);
}
internal class System.Configuration.Install.Res : object {
    internal static string InstallAbort;
    internal static string InstallException;
    internal static string InstallLogContent;
    internal static string InstallFileLocation;
    internal static string InstallLogParameters;
    internal static string InstallLogNone;
    internal static string InstallNoPublicInstallers;
    internal static string InstallFileNotFound;
    internal static string InstallNoInstallerTypes;
    internal static string InstallCannotCreateInstance;
    internal static string InstallBadParent;
    internal static string InstallRecursiveParent;
    internal static string InstallNullParameter;
    internal static string InstallDictionaryMissingValues;
    internal static string InstallDictionaryCorrupted;
    internal static string InstallCommitException;
    internal static string InstallRollbackException;
    internal static string InstallUninstallException;
    internal static string InstallEventException;
    internal static string InstallInstallerNotFound;
    internal static string InstallSeverityError;
    internal static string InstallSeverityWarning;
    internal static string InstallLogInner;
    internal static string InstallLogError;
    internal static string InstallLogCommitException;
    internal static string InstallLogRollbackException;
    internal static string InstallLogUninstallException;
    internal static string InstallRollback;
    internal static string InstallAssemblyHelp;
    internal static string InstallActivityRollingBack;
    internal static string InstallActivityUninstalling;
    internal static string InstallActivityCommitting;
    internal static string InstallActivityInstalling;
    internal static string InstallInfoTransacted;
    internal static string InstallInfoBeginInstall;
    internal static string InstallInfoException;
    internal static string InstallInfoBeginRollback;
    internal static string InstallInfoRollbackDone;
    internal static string InstallInfoBeginCommit;
    internal static string InstallInfoCommitDone;
    internal static string InstallInfoTransactedDone;
    internal static string InstallInfoBeginUninstall;
    internal static string InstallInfoUninstallDone;
    internal static string InstallSavedStateFileCorruptedWarning;
    internal static string IncompleteEventLog;
    internal static string IncompletePerformanceCounter;
    internal static string PerfInvalidCategoryName;
    internal static string NotCustomPerformanceCategory;
    internal static string RemovingInstallState;
    internal static string InstallUnableDeleteFile;
    internal static string InstallInitializeException;
    internal static string InstallFileDoesntExist;
    internal static string InstallFileDoesntExistCommandLine;
    internal static string WinNTRequired;
    internal static string WrappedExceptionSource;
    internal static string InvalidProperty;
    internal static string InstallRollbackNtRun;
    internal static string InstallCommitNtRun;
    internal static string InstallUninstallNtRun;
    internal static string InstallInstallNtRun;
    internal static string InstallHelpMessageStart;
    internal static string InstallHelpMessageEnd;
    internal static string CantAddSelf;
    internal static string Desc_Installer_HelpText;
    internal static string Desc_Installer_Parent;
    internal static string Desc_AssemblyInstaller_Assembly;
    internal static string Desc_AssemblyInstaller_CommandLine;
    internal static string Desc_AssemblyInstaller_Path;
    internal static string Desc_AssemblyInstaller_UseNewContext;
    internal static string NotAnEventLog;
    internal static string CreatingEventLog;
    internal static string RestoringEventLog;
    internal static string RemovingEventLog;
    internal static string DeletingEventLog;
    internal static string LocalSourceNotRegisteredWarning;
    internal static string Desc_CategoryResourceFile;
    internal static string Desc_CategoryCount;
    internal static string Desc_Log;
    internal static string Desc_MessageResourceFile;
    internal static string Desc_ParameterResourceFile;
    internal static string Desc_Source;
    internal static string Desc_UninstallAction;
    internal static string NotAPerformanceCounter;
    internal static string NewCategory;
    internal static string RestoringPerformanceCounter;
    internal static string CreatingPerformanceCounter;
    internal static string RemovingPerformanceCounter;
    internal static string PCCategoryName;
    internal static string PCCounterName;
    internal static string PCInstanceName;
    internal static string PCMachineName;
    internal static string PCI_CategoryHelp;
    internal static string PCI_Counters;
    internal static string PCI_IsMultiInstance;
    internal static string PCI_UninstallAction;
    private static Res loader;
    private ResourceManager resources;
    private static CultureInfo Culture { get; }
    public static ResourceManager Resources { get; }
    private static CultureInfo get_Culture();
    public static ResourceManager get_Resources();
    private static Res GetLoader();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Configuration.Install.ResDescriptionAttribute : DescriptionAttribute {
    private bool replaced;
    public string Description { get; }
    public ResDescriptionAttribute(string description);
    public virtual string get_Description();
}
public class System.Configuration.Install.TransactedInstaller : Installer {
    public virtual void Install(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
public class System.Diagnostics.EventLogInstaller : ComponentInstaller {
    private EventSourceCreationData sourceData;
    private UninstallAction uninstallAction;
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_CategoryResourceFile")]
public string CategoryResourceFile { get; public set; }
    [ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_CategoryCount")]
public int CategoryCount { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResDescriptionAttribute("Desc_Log")]
public string Log { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_MessageResourceFile")]
public string MessageResourceFile { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_ParameterResourceFile")]
public string ParameterResourceFile { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResDescriptionAttribute("Desc_Source")]
public string Source { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("Desc_UninstallAction")]
public UninstallAction UninstallAction { get; public set; }
    public string get_CategoryResourceFile();
    public void set_CategoryResourceFile(string value);
    public int get_CategoryCount();
    public void set_CategoryCount(int value);
    public string get_Log();
    public void set_Log(string value);
    public string get_MessageResourceFile();
    public void set_MessageResourceFile(string value);
    public string get_ParameterResourceFile();
    public void set_ParameterResourceFile(string value);
    public string get_Source();
    public void set_Source(string value);
    public UninstallAction get_UninstallAction();
    public void set_UninstallAction(UninstallAction value);
    public virtual void CopyFromComponent(IComponent component);
    public virtual void Install(IDictionary stateSaver);
    public virtual bool IsEquivalentInstaller(ComponentInstaller otherInstaller);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
public enum System.Diagnostics.UninstallAction : Enum {
    public int value__;
    public static UninstallAction Remove;
    public static UninstallAction NoAction;
}
public class System.ServiceProcess.NativeMethods : object {
    public static bool ChangeServiceConfig2(IntPtr serviceHandle, UInt32 infoLevel, SERVICE_DESCRIPTION& serviceDesc);
    public static bool ChangeServiceConfig2(IntPtr serviceHandle, UInt32 infoLevel, SERVICE_DELAYED_AUTOSTART_INFO& serviceDesc);
    public static IntPtr CreateService(IntPtr databaseHandle, string serviceName, string displayName, int access, int serviceType, int startType, int errorControl, string binaryPath, string loadOrderGroup, IntPtr pTagId, string dependencies, string servicesStartName, string password);
    public static bool LookupAccountName(string systemName, string accountName, Byte[] sid, Int32[] sidLen, Char[] refDomainName, Int32[] domNameLen, Int32[] sidNameUse);
    public static int LsaAddAccountRights(IntPtr policyHandle, Byte[] accountSid, LSA_UNICODE_STRING userRights, int countOfRights);
    public static int LsaEnumerateAccountRights(IntPtr policyHandle, Byte[] accountSid, IntPtr& pLsaUnicodeStringUserRights, Int32& RightsCount);
    public static int LsaOpenPolicy(LSA_UNICODE_STRING systemName, IntPtr pointerObjectAttributes, int desiredAccess, IntPtr& pointerPolicyHandle);
    public static int LsaRemoveAccountRights(IntPtr policyHandle, Byte[] accountSid, bool allRights, LSA_UNICODE_STRING userRights, int countOfRights);
    public static bool GetComputerName(StringBuilder lpBuffer, Int32& nSize);
    public static bool DeleteService(IntPtr serviceHandle);
    public static IntPtr OpenService(IntPtr databaseHandle, string serviceName, int access);
}
internal class System.ServiceProcess.Res : object {
    internal static string RTL;
    internal static string FileName;
    internal static string ServiceStartedIncorrectly;
    internal static string CallbackHandler;
    internal static string OpenService;
    internal static string StartService;
    internal static string StopService;
    internal static string PauseService;
    internal static string ResumeService;
    internal static string ControlService;
    internal static string ServiceName;
    internal static string ServiceStartType;
    internal static string ServiceDependency;
    internal static string InstallService;
    internal static string InstallError;
    internal static string UserName;
    internal static string UserPassword;
    internal static string ButtonOK;
    internal static string ServiceUsage;
    internal static string ServiceNameTooLongForNt4;
    internal static string DisplayNameTooLong;
    internal static string NoService;
    internal static string NoDisplayName;
    internal static string OpenSC;
    internal static string Timeout;
    internal static string CannotChangeProperties;
    internal static string CannotChangeName;
    internal static string NoServices;
    internal static string NoMachineName;
    internal static string BadMachineName;
    internal static string NoGivenName;
    internal static string CannotStart;
    internal static string NotAService;
    internal static string NoInstaller;
    internal static string UserCanceledInstall;
    internal static string UnattendedCannotPrompt;
    internal static string InvalidParameter;
    internal static string FailedToUnloadAppDomain;
    internal static string NotInPendingState;
    internal static string ArgsCantBeNull;
    internal static string StartSuccessful;
    internal static string StopSuccessful;
    internal static string PauseSuccessful;
    internal static string ContinueSuccessful;
    internal static string InstallSuccessful;
    internal static string UninstallSuccessful;
    internal static string CommandSuccessful;
    internal static string StartFailed;
    internal static string StopFailed;
    internal static string PauseFailed;
    internal static string ContinueFailed;
    internal static string SessionChangeFailed;
    internal static string InstallFailed;
    internal static string UninstallFailed;
    internal static string CommandFailed;
    internal static string ErrorNumber;
    internal static string ShutdownOK;
    internal static string ShutdownFailed;
    internal static string PowerEventOK;
    internal static string PowerEventFailed;
    internal static string InstallOK;
    internal static string TryToStop;
    internal static string ServiceRemoving;
    internal static string ServiceRemoved;
    internal static string HelpText;
    internal static string CantStartFromCommandLine;
    internal static string CantStartFromCommandLineTitle;
    internal static string CantRunOnWin9x;
    internal static string CantRunOnWin9xTitle;
    internal static string CantControlOnWin9x;
    internal static string CantInstallOnWin9x;
    internal static string InstallingService;
    internal static string StartingService;
    internal static string SBAutoLog;
    internal static string SBServiceName;
    internal static string SBServiceDescription;
    internal static string ServiceControllerDesc;
    internal static string SPCanPauseAndContinue;
    internal static string SPCanShutdown;
    internal static string SPCanStop;
    internal static string SPDisplayName;
    internal static string SPDependentServices;
    internal static string SPMachineName;
    internal static string SPServiceName;
    internal static string SPServicesDependedOn;
    internal static string SPStatus;
    internal static string SPServiceType;
    internal static string SPStartType;
    internal static string ServiceProcessInstallerAccount;
    internal static string ServiceInstallerDescription;
    internal static string ServiceInstallerServicesDependedOn;
    internal static string ServiceInstallerServiceName;
    internal static string ServiceInstallerStartType;
    internal static string ServiceInstallerDelayedAutoStart;
    internal static string ServiceInstallerDisplayName;
    internal static string Label_SetServiceLogin;
    internal static string Label_MissmatchedPasswords;
    private static Res loader;
    private ResourceManager resources;
    private static CultureInfo Culture { get; }
    public static ResourceManager Resources { get; }
    private static CultureInfo get_Culture();
    public static ResourceManager get_Resources();
    private static Res GetLoader();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[SuppressUnmanagedCodeSecurityAttribute]
public class System.ServiceProcess.SafeNativeMethods : object {
    [ReliabilityContractAttribute("3", "2")]
public static bool CloseServiceHandle(IntPtr handle);
    public static int LsaClose(IntPtr objectHandle);
    public static int LsaNtStatusToWinError(int ntStatus);
    public static int LsaFreeMemory(IntPtr ptr);
    public static IntPtr OpenSCManager(string machineName, string databaseName, int access);
}
public enum System.ServiceProcess.ServiceAccount : Enum {
    public int value__;
    public static ServiceAccount LocalService;
    public static ServiceAccount NetworkService;
    public static ServiceAccount LocalSystem;
    public static ServiceAccount User;
}
public static class System.ServiceProcess.ServiceControllerExtensions : object {
    public static bool ValidServiceName(string serviceName);
}
public class System.ServiceProcess.ServiceInstaller : ComponentInstaller {
    private static string NetworkServiceName;
    private static string LocalServiceName;
    private string serviceName;
    private string displayName;
    private string description;
    private String[] servicesDependedOn;
    private ServiceStartMode startType;
    private bool delayedStartMode;
    private static bool environmentChecked;
    private static bool isWin9x;
    [DefaultValueAttribute("")]
[ServiceProcessDescriptionAttribute("ServiceInstallerDisplayName")]
public string DisplayName { get; public set; }
    [DefaultValueAttribute("")]
[ComVisibleAttribute("False")]
[ServiceProcessDescriptionAttribute("ServiceInstallerDescription")]
public string Description { get; public set; }
    [ServiceProcessDescriptionAttribute("ServiceInstallerServicesDependedOn")]
public String[] ServicesDependedOn { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ServiceProcessDescriptionAttribute("ServiceInstallerServiceName")]
public string ServiceName { get; public set; }
    [DefaultValueAttribute]
[ServiceProcessDescriptionAttribute("ServiceInstallerStartType")]
public ServiceStartMode StartType { get; public set; }
    [DefaultValueAttribute("False")]
[ServiceProcessDescriptionAttribute("ServiceInstallerDelayedAutoStart")]
public bool DelayedAutoStart { get; public set; }
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public String[] get_ServicesDependedOn();
    public void set_ServicesDependedOn(String[] value);
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public ServiceStartMode get_StartType();
    public void set_StartType(ServiceStartMode value);
    public bool get_DelayedAutoStart();
    public void set_DelayedAutoStart(bool value);
    internal static void CheckEnvironment();
    public virtual void CopyFromComponent(IComponent component);
    public virtual void Install(IDictionary stateSaver);
    public virtual bool IsEquivalentInstaller(ComponentInstaller otherInstaller);
    private void RemoveService();
    public virtual void Rollback(IDictionary savedState);
    private bool ShouldSerializeServicesDependedOn();
    public virtual void Uninstall(IDictionary savedState);
    private static bool ValidateServiceName(string name);
}
public class System.ServiceProcess.ServiceProcessInstaller : ComponentInstaller {
    private ServiceAccount serviceAccount;
    private bool haveLoginInfo;
    private string password;
    private string username;
    private static bool helpPrinted;
    public string HelpText { get; }
    [BrowsableAttribute("False")]
public string Password { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ServiceProcessDescriptionAttribute("ServiceProcessInstallerAccount")]
public ServiceAccount Account { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[BrowsableAttribute("False")]
public string Username { get; public set; }
    public virtual string get_HelpText();
    public string get_Password();
    public void set_Password(string value);
    public ServiceAccount get_Account();
    public void set_Account(ServiceAccount value);
    public string get_Username();
    public void set_Username(string value);
    private static bool AccountHasRight(IntPtr policyHandle, Byte[] accountSid, string rightName);
    public virtual void CopyFromComponent(IComponent comp);
    private Byte[] GetAccountSid(string accountName);
    private void GetLoginInfo();
    private static void GrantAccountRight(IntPtr policyHandle, Byte[] accountSid, string rightName);
    public virtual void Install(IDictionary stateSaver);
    private IntPtr OpenSecurityPolicy();
    private static void RemoveAccountRight(IntPtr policyHandle, Byte[] accountSid, string rightName);
    public virtual void Rollback(IDictionary savedState);
}
