internal class Microsoft.Practices.TransientFaultHandling.AsyncExecution : AsyncExecution`1<bool> {
    private static Task`1<bool> cachedBoolTask;
    public AsyncExecution(Func`1<Task> taskAction, ShouldRetry shouldRetry, Func`2<Exception, bool> isTransient, Action`3<int, Exception, TimeSpan> onRetrying, bool fastFirstRetry, CancellationToken cancellationToken);
    private static Task`1<bool> StartAsGenericTask(Func`1<Task> taskAction);
    private static Task`1<bool> GetCachedTask();
}
internal class Microsoft.Practices.TransientFaultHandling.AsyncExecution`1 : object {
    private Func`1<Task`1<TResult>> taskFunc;
    private ShouldRetry shouldRetry;
    private Func`2<Exception, bool> isTransient;
    private Action`3<int, Exception, TimeSpan> onRetrying;
    private bool fastFirstRetry;
    private CancellationToken cancellationToken;
    private Task`1<TResult> previousTask;
    private int retryCount;
    public AsyncExecution`1(Func`1<Task`1<TResult>> taskFunc, ShouldRetry shouldRetry, Func`2<Exception, bool> isTransient, Action`3<int, Exception, TimeSpan> onRetrying, bool fastFirstRetry, CancellationToken cancellationToken);
    internal Task`1<TResult> ExecuteAsync();
    private Task`1<TResult> ExecuteAsyncImpl(Task ignore);
    private Task`1<TResult> ExecuteAsyncContinueWith(Task`1<TResult> runningTask);
}
public class Microsoft.Practices.TransientFaultHandling.ExponentialBackoff : RetryStrategy {
    private int retryCount;
    private TimeSpan minBackoff;
    private TimeSpan maxBackoff;
    private TimeSpan deltaBackoff;
    public ExponentialBackoff(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoff(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoff(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
public class Microsoft.Practices.TransientFaultHandling.FixedInterval : RetryStrategy {
    private int retryCount;
    private TimeSpan retryInterval;
    [CompilerGeneratedAttribute]
private static ShouldRetry CS$<>9__CachedAnonymousMethodDelegate2;
    public FixedInterval(int retryCount);
    public FixedInterval(int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private static bool <GetShouldRetry>b__0(int currentRetryCount, Exception lastException, TimeSpan& interval);
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__1(int currentRetryCount, Exception lastException, TimeSpan& interval);
}
public static class Microsoft.Practices.TransientFaultHandling.Guard : object {
    public static bool ArgumentNotNullOrEmptyString(string argumentValue, string argumentName);
    public static bool ArgumentNotNull(object argumentValue, string argumentName);
    public static void ArgumentNotDefaultValue(T argumentValue, string argumentName);
    public static void ArgumentNotZeroOrNegativeValue(int argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(int argumentValue, string argumentName);
    public static void ArgumentNotNegativeValue(long argumentValue, string argumentName);
    public static void ArgumentNotGreaterThan(double argumentValue, double ceilingValue, string argumentName);
    public static void EnumValueIsDefined(Type enumType, object value, string argumentName);
    public static void TypeIsAssignableFromType(Type assignee, Type providedType, string argumentName);
    private static bool IsValueDefined(T value);
}
public class Microsoft.Practices.TransientFaultHandling.Incremental : RetryStrategy {
    private int retryCount;
    private TimeSpan initialInterval;
    private TimeSpan increment;
    public Incremental(int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
public interface Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy {
    public abstract virtual bool IsTransient(Exception ex);
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class Microsoft.Practices.TransientFaultHandling.Properties.ExceptionMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentCannotBeDefault { get; }
    internal static string ArgumentCannotBeGreaterThanBaseline { get; }
    internal static string ArgumentCannotBeNegative { get; }
    internal static string ArgumentCannotBeZeroOrNegative { get; }
    internal static string InvalidEnumValue { get; }
    internal static string RetryLimitExceeded { get; }
    internal static string StringCannotBeEmpty { get; }
    internal static string TaskCannotBeNull { get; }
    internal static string TaskMustBeScheduled { get; }
    internal static string TypeNotCompatible { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentCannotBeDefault();
    internal static string get_ArgumentCannotBeGreaterThanBaseline();
    internal static string get_ArgumentCannotBeNegative();
    internal static string get_ArgumentCannotBeZeroOrNegative();
    internal static string get_InvalidEnumValue();
    internal static string get_RetryLimitExceeded();
    internal static string get_StringCannotBeEmpty();
    internal static string get_TaskCannotBeNull();
    internal static string get_TaskMustBeScheduled();
    internal static string get_TypeNotCompatible();
}
public class Microsoft.Practices.TransientFaultHandling.RetryingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <CurrentRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    public int CurrentRetryCount { get; private set; }
    public TimeSpan Delay { get; private set; }
    public Exception LastException { get; private set; }
    public RetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException);
    [CompilerGeneratedAttribute]
public int get_CurrentRetryCount();
    [CompilerGeneratedAttribute]
private void set_CurrentRetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public Exception get_LastException();
    [CompilerGeneratedAttribute]
private void set_LastException(Exception value);
}
public class Microsoft.Practices.TransientFaultHandling.RetryLimitExceededException : Exception {
    public RetryLimitExceededException(string message);
    public RetryLimitExceededException(Exception innerException);
    public RetryLimitExceededException(string message, Exception innerException);
    private RetryLimitExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Practices.TransientFaultHandling.RetryPolicy : object {
    public static RetryPolicy NoRetry;
    public static RetryPolicy DefaultFixed;
    public static RetryPolicy DefaultProgressive;
    public static RetryPolicy DefaultExponential;
    private EventHandler`1<RetryingEventArgs> Retrying;
    [CompilerGeneratedAttribute]
private RetryStrategy <RetryStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransientErrorDetectionStrategy <ErrorDetectionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private static Action CS$<>9__CachedAnonymousMethodDelegate6;
    public RetryStrategy RetryStrategy { get; private set; }
    public ITransientErrorDetectionStrategy ErrorDetectionStrategy { get; private set; }
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan retryInterval);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    private static RetryPolicy();
    public void add_Retrying(EventHandler`1<RetryingEventArgs> value);
    public void remove_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public RetryStrategy get_RetryStrategy();
    [CompilerGeneratedAttribute]
private void set_RetryStrategy(RetryStrategy value);
    [CompilerGeneratedAttribute]
public ITransientErrorDetectionStrategy get_ErrorDetectionStrategy();
    [CompilerGeneratedAttribute]
private void set_ErrorDetectionStrategy(ITransientErrorDetectionStrategy value);
    public virtual void ExecuteAction(Action action);
    public virtual TResult ExecuteAction(Func`1<TResult> func);
    public Task ExecuteAsync(Func`1<Task> taskAction);
    public Task ExecuteAsync(Func`1<Task> taskAction, CancellationToken cancellationToken);
    public Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> taskFunc);
    public Task`1<TResult> ExecuteAsync(Func`1<Task`1<TResult>> taskFunc, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use the ExecuteAsync method instead. If you need to retry operations that use the Asynchronous Programming Model (APM), consider wrapping the call with a task using the TaskFactory.FromAsync method.")]
public virtual void ExecuteAction(Action`1<AsyncCallback> beginAction, Action`1<IAsyncResult> endAction, Action successHandler, Action`1<Exception> faultHandler);
    [ObsoleteAttribute("Use the ExecuteAsync method instead. If you need to retry operations that use the Asynchronous Programming Model (APM), consider wrapping the call with a task using the TaskFactory.FromAsync method.")]
public virtual void ExecuteAction(Action`1<AsyncCallback> beginAction, Func`2<IAsyncResult, TResult> endAction, Action`1<TResult> successHandler, Action`1<Exception> faultHandler);
    protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay);
    [CompilerGeneratedAttribute]
private static void <ExecuteAction>b__3();
    [CompilerGeneratedAttribute]
private static void <ExecuteAction>b__9(TResult _);
    [CompilerGeneratedAttribute]
private static void <ExecuteAction>b__a(Exception _);
}
public class Microsoft.Practices.TransientFaultHandling.RetryPolicy`1 : RetryPolicy {
    public RetryPolicy`1(RetryStrategy retryStrategy);
    public RetryPolicy`1(int retryCount);
    public RetryPolicy`1(int retryCount, TimeSpan retryInterval);
    public RetryPolicy`1(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public RetryPolicy`1(int retryCount, TimeSpan initialInterval, TimeSpan increment);
}
public abstract class Microsoft.Practices.TransientFaultHandling.RetryStrategy : object {
    public static int DefaultClientRetryCount;
    public static TimeSpan DefaultClientBackoff;
    public static TimeSpan DefaultMaxBackoff;
    public static TimeSpan DefaultMinBackoff;
    public static TimeSpan DefaultRetryInterval;
    public static TimeSpan DefaultRetryIncrement;
    public static bool DefaultFirstFastRetry;
    public static RetryStrategy NoRetry;
    public static RetryStrategy DefaultFixed;
    public static RetryStrategy DefaultProgressive;
    public static RetryStrategy DefaultExponential;
    [CompilerGeneratedAttribute]
private bool <FastFirstRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool FastFirstRetry { get; public set; }
    public string Name { get; private set; }
    protected RetryStrategy(string name, bool firstFastRetry);
    private static RetryStrategy();
    [CompilerGeneratedAttribute]
public bool get_FastFirstRetry();
    [CompilerGeneratedAttribute]
public void set_FastFirstRetry(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public abstract virtual ShouldRetry GetShouldRetry();
}
public class Microsoft.Practices.TransientFaultHandling.ShouldRetry : MulticastDelegate {
    public ShouldRetry(object object, IntPtr method);
    public virtual bool Invoke(int retryCount, Exception lastException, TimeSpan& delay);
    public virtual IAsyncResult BeginInvoke(int retryCount, Exception lastException, TimeSpan& delay, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TimeSpan& delay, IAsyncResult result);
}
internal class Microsoft.Practices.TransientFaultHandling.TaskEx : object {
    private static TimeSpan Infinite;
    private static TaskEx();
    public static Task Delay(TimeSpan dueTime);
}
