public class Tweetinvi.Controllers.AccountActivityController : object {
    private ITwitterAccessor _twitterAccessor;
    private IAccountActivityQueryGenerator _accountActivityQueryGenerator;
    public AccountActivityController(ITwitterAccessor twitterAccessor, IAccountActivityQueryGenerator accountActivityQueryGenerator);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookDTO>> CreateAccountActivityWebhookAsync(ICreateAccountActivityWebhookParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IGetAccountActivityWebhookEnvironmentsResultDTO>> GetAccountActivityWebhookEnvironmentsAsync(IGetAccountActivityWebhookEnvironmentsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookDTO[]>> GetAccountActivityEnvironmentWebhooksAsync(IGetAccountActivityEnvironmentWebhooksParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> DeleteAccountActivityWebhookAsync(IDeleteAccountActivityWebhookParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> TriggerAccountActivityWebhookCRCAsync(ITriggerAccountActivityWebhookCRCParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> SubscribeToAccountActivityAsync(ISubscribeToAccountActivityParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> UnsubscribeFromAccountActivityAsync(IUnsubscribeFromAccountActivityParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookSubscriptionsCount>> CountAccountActivitySubscriptionsAsync(ICountAccountActivitySubscriptionsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> IsAccountSubscribedToAccountActivityAsync(IIsAccountSubscribedToAccountActivityParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookEnvironmentSubscriptionsDTO>> GetAccountActivitySubscriptionsAsync(IGetAccountActivitySubscriptionsParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.AccountActivityQueryGenerator : object {
    public sealed virtual string GetCreateAccountActivityWebhookQuery(ICreateAccountActivityWebhookParameters parameters);
    public sealed virtual string GetAccountActivityWebhookEnvironmentsQuery(IGetAccountActivityWebhookEnvironmentsParameters parameters);
    public sealed virtual string GetAccountActivityEnvironmentWebhooksQuery(IGetAccountActivityEnvironmentWebhooksParameters parameters);
    public sealed virtual string GetDeleteAccountActivityWebhookQuery(IDeleteAccountActivityWebhookParameters parameters);
    public sealed virtual string GetTriggerAccountActivityWebhookCRCQuery(ITriggerAccountActivityWebhookCRCParameters parameters);
    public sealed virtual string GetSubscribeToAccountActivityQuery(ISubscribeToAccountActivityParameters parameters);
    public sealed virtual string GetUnsubscribeToAccountActivityQuery(IUnsubscribeFromAccountActivityParameters parameters);
    public sealed virtual string GetCountAccountActivitySubscriptionsQuery(ICountAccountActivitySubscriptionsParameters parameters);
    public sealed virtual string GetIsAccountSubscribedToAccountActivityQuery(IIsAccountSubscribedToAccountActivityParameters parameters);
    public sealed virtual string GetAccountActivitySubscriptionsQuery(IGetAccountActivitySubscriptionsParameters parameters);
}
public class Tweetinvi.Controllers.AccountSettings.AccountSettingsController : object {
    private IAccountSettingsQueryExecutor _accountSettingsQueryExecutor;
    public AccountSettingsController(IAccountSettingsQueryExecutor accountSettingsQueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> GetAccountSettingsAsync(IGetAccountSettingsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> UpdateAccountSettingsAsync(IUpdateAccountSettingsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileAsync(IUpdateProfileParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileImageAsync(IUpdateProfileImageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> UpdateProfileBannerAsync(IUpdateProfileBannerParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> RemoveProfileBannerAsync(IRemoveProfileBannerParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.AccountSettings.AccountSettingsQueryExecutor : object {
    private IAccountSettingsQueryGenerator _accountSettingsQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public AccountSettingsQueryExecutor(IAccountSettingsQueryGenerator accountSettingsQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> GetAccountSettingsAsync(IGetAccountSettingsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> UpdateAccountSettingsAsync(IUpdateAccountSettingsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileAsync(IUpdateProfileParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileImageAsync(IUpdateProfileImageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> UpdateProfileBannerAsync(IUpdateProfileBannerParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> RemoveProfileBannerAsync(IRemoveProfileBannerParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.AccountSettings.AccountSettingsQueryGenerator : object {
    public sealed virtual string GetAccountSettingsQuery(IGetAccountSettingsParameters parameters);
    public sealed virtual string GetUpdateAccountSettingsQuery(IUpdateAccountSettingsParameters parameters);
    public sealed virtual string GetUpdateProfileQuery(IUpdateProfileParameters parameters);
    private static string SleepHourToString(Nullable`1<int> hour);
    public sealed virtual string GetUpdateProfileImageQuery(IUpdateProfileImageParameters parameters);
    public sealed virtual string GetUpdateProfileBannerQuery(IUpdateProfileBannerParameters parameters);
    public sealed virtual string GetRemoveProfileBannerQuery(IRemoveProfileBannerParameters parameters);
}
public interface Tweetinvi.Controllers.AccountSettings.IAccountSettingsController {
    public abstract virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> GetAccountSettingsAsync(IGetAccountSettingsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> UpdateAccountSettingsAsync(IUpdateAccountSettingsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileAsync(IUpdateProfileParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileImageAsync(IUpdateProfileImageParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> UpdateProfileBannerAsync(IUpdateProfileBannerParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> RemoveProfileBannerAsync(IRemoveProfileBannerParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.AccountSettings.IAccountSettingsQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> GetAccountSettingsAsync(IGetAccountSettingsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> UpdateAccountSettingsAsync(IUpdateAccountSettingsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileAsync(IUpdateProfileParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileImageAsync(IUpdateProfileImageParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> UpdateProfileBannerAsync(IUpdateProfileBannerParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> RemoveProfileBannerAsync(IRemoveProfileBannerParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.AccountSettings.IAccountSettingsQueryGenerator {
    public abstract virtual string GetAccountSettingsQuery(IGetAccountSettingsParameters parameters);
    public abstract virtual string GetUpdateAccountSettingsQuery(IUpdateAccountSettingsParameters parameters);
    public abstract virtual string GetUpdateProfileQuery(IUpdateProfileParameters parameters);
    public abstract virtual string GetUpdateProfileImageQuery(IUpdateProfileImageParameters parameters);
    public abstract virtual string GetUpdateProfileBannerQuery(IUpdateProfileBannerParameters parameters);
    public abstract virtual string GetRemoveProfileBannerQuery(IRemoveProfileBannerParameters parameters);
}
public class Tweetinvi.Controllers.Auth.AuthController : object {
    private IAuthQueryExecutor _authQueryExecutor;
    private Regex _parseRequestUrlResponseRegex;
    public AuthController(IAuthQueryExecutor authQueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<CreateTokenResponseDTO>> CreateBearerTokenAsync(ICreateBearerTokenParameters parameters, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Auth.AuthController/<RequestAuthUrlAsync>d__4")]
public sealed virtual Task`1<ITwitterResult`1<IAuthenticationRequest>> RequestAuthUrlAsync(IRequestAuthUrlParameters parameters, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Auth.AuthController/<RequestCredentialsAsync>d__5")]
public sealed virtual Task`1<ITwitterResult`1<ITwitterCredentials>> RequestCredentialsAsync(IRequestCredentialsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateBearerTokenAsync(IInvalidateBearerTokenParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateAccessTokenAsync(IInvalidateAccessTokenParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Auth.AuthQueryExecutor : object {
    private IAuthQueryGenerator _queryGenerator;
    private IOAuthWebRequestGeneratorFactory _oAuthWebRequestGeneratorFactory;
    private ITwitterAccessor _twitterAccessor;
    public AuthQueryExecutor(IAuthQueryGenerator queryGenerator, IOAuthWebRequestGeneratorFactory oAuthWebRequestGeneratorFactory, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<CreateTokenResponseDTO>> CreateBearerTokenAsync(ICreateBearerTokenParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> RequestAuthUrlAsync(RequestAuthUrlInternalParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> RequestCredentialsAsync(IRequestCredentialsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateBearerTokenAsync(IInvalidateBearerTokenParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateAccessTokenAsync(IInvalidateAccessTokenParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Auth.AuthQueryGenerator : object {
    public sealed virtual string GetCreateBearerTokenQuery(ICreateBearerTokenParameters parameters);
    public sealed virtual string GetRequestAuthUrlQuery(IRequestAuthUrlParameters parameters);
    public sealed virtual string GetRequestCredentialsQuery(IRequestCredentialsParameters parameters);
    public sealed virtual string GetInvalidateBearerTokenQuery(IInvalidateBearerTokenParameters parameters);
    public sealed virtual string GetInvalidateAccessTokenQuery(IInvalidateAccessTokenParameters parameters);
}
public interface Tweetinvi.Controllers.Auth.IAuthQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<CreateTokenResponseDTO>> CreateBearerTokenAsync(ICreateBearerTokenParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> RequestAuthUrlAsync(RequestAuthUrlInternalParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> RequestCredentialsAsync(IRequestCredentialsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateBearerTokenAsync(IInvalidateBearerTokenParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateAccessTokenAsync(IInvalidateAccessTokenParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Auth.IAuthQueryGenerator {
    public abstract virtual string GetCreateBearerTokenQuery(ICreateBearerTokenParameters parameters);
    public abstract virtual string GetRequestAuthUrlQuery(IRequestAuthUrlParameters parameters);
    public abstract virtual string GetRequestCredentialsQuery(IRequestCredentialsParameters parameters);
    public abstract virtual string GetInvalidateBearerTokenQuery(IInvalidateBearerTokenParameters parameters);
    public abstract virtual string GetInvalidateAccessTokenQuery(IInvalidateAccessTokenParameters parameters);
}
public class Tweetinvi.Controllers.Auth.RequestAuthUrlInternalParameters : RequestUrlAuthUrlParameters {
    [CompilerGeneratedAttribute]
private IAuthenticationRequest <AuthRequest>k__BackingField;
    public IAuthenticationRequest AuthRequest { get; }
    public RequestAuthUrlInternalParameters(IRequestAuthUrlParameters parameters, IAuthenticationRequest authRequest);
    [CompilerGeneratedAttribute]
public IAuthenticationRequest get_AuthRequest();
}
public class Tweetinvi.Controllers.Help.HelpController : object {
    private IHelpQueryExecutor _helpQueryExecutor;
    public HelpController(IHelpQueryExecutor helpQueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<CredentialsRateLimitsDTO>> GetRateLimitsAsync(IGetRateLimitsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterConfiguration>> GetTwitterConfigurationAsync(IGetTwitterConfigurationParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SupportedLanguage[]>> GetSupportedLanguagesAsync(IGetSupportedLanguagesParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IPlace>> GetPlaceAsync(IGetPlaceParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoAsync(IGeoSearchParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoReverseAsync(IGeoSearchReverseParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Help.HelpQueryExecutor : object {
    private IHelpQueryGenerator _helpQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public HelpQueryExecutor(IHelpQueryGenerator helpQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<CredentialsRateLimitsDTO>> GetRateLimitsAsync(IGetRateLimitsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterConfiguration>> GetTwitterConfigurationAsync(IGetTwitterConfigurationParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SupportedLanguage[]>> GetSupportedLanguagesAsync(IGetSupportedLanguagesParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IPlace>> GetPlaceAsync(IGetPlaceParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoAsync(IGeoSearchParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoReverseAsync(IGeoSearchReverseParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Help.HelpQueryGenerator : object {
    public sealed virtual string GetRateLimitsQuery(IGetRateLimitsParameters parameters);
    public sealed virtual string GetTwitterConfigurationQuery(IGetTwitterConfigurationParameters parameters);
    public sealed virtual string GetSupportedLanguagesQuery(IGetSupportedLanguagesParameters parameters);
    public sealed virtual string GetPlaceQuery(IGetPlaceParameters parameters);
    public string GenerateGeoParameter(ICoordinates coordinates);
    public sealed virtual string GetSearchGeoQuery(IGeoSearchParameters parameters);
    public sealed virtual string GetSearchGeoReverseQuery(IGeoSearchReverseParameters parameters);
    public string GetPlaceFromIdQuery(string placeId);
}
public interface Tweetinvi.Controllers.Help.IHelpQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<CredentialsRateLimitsDTO>> GetRateLimitsAsync(IGetRateLimitsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterConfiguration>> GetTwitterConfigurationAsync(IGetTwitterConfigurationParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SupportedLanguage[]>> GetSupportedLanguagesAsync(IGetSupportedLanguagesParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IPlace>> GetPlaceAsync(IGetPlaceParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoAsync(IGeoSearchParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoReverseAsync(IGeoSearchReverseParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.IAccountActivityQueryGenerator {
    public abstract virtual string GetCreateAccountActivityWebhookQuery(ICreateAccountActivityWebhookParameters parameters);
    public abstract virtual string GetAccountActivityWebhookEnvironmentsQuery(IGetAccountActivityWebhookEnvironmentsParameters parameters);
    public abstract virtual string GetAccountActivityEnvironmentWebhooksQuery(IGetAccountActivityEnvironmentWebhooksParameters parameters);
    public abstract virtual string GetDeleteAccountActivityWebhookQuery(IDeleteAccountActivityWebhookParameters parameters);
    public abstract virtual string GetTriggerAccountActivityWebhookCRCQuery(ITriggerAccountActivityWebhookCRCParameters parameters);
    public abstract virtual string GetSubscribeToAccountActivityQuery(ISubscribeToAccountActivityParameters parameters);
    public abstract virtual string GetUnsubscribeToAccountActivityQuery(IUnsubscribeFromAccountActivityParameters parameters);
    public abstract virtual string GetCountAccountActivitySubscriptionsQuery(ICountAccountActivitySubscriptionsParameters parameters);
    public abstract virtual string GetIsAccountSubscribedToAccountActivityQuery(IIsAccountSubscribedToAccountActivityParameters parameters);
    public abstract virtual string GetAccountActivitySubscriptionsQuery(IGetAccountActivitySubscriptionsParameters parameters);
}
public interface Tweetinvi.Controllers.Messages.IMessageQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<ICreateMessageDTO>> PublishMessageAsync(IPublishMessageParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> DestroyMessageAsync(IDeleteMessageParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IGetMessageDTO>> GetMessageAsync(IGetMessageParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IMessageCursorQueryResultDTO>> GetMessagesAsync(IGetMessagesParameters parameters, TwitterRequest request);
}
public interface Tweetinvi.Controllers.Messages.IMessageQueryGenerator {
    public abstract virtual RequestWithPayload GetPublishMessageQuery(IPublishMessageParameters parameters);
    public abstract virtual string GetDestroyMessageQuery(IDeleteMessageParameters parameters);
    public abstract virtual string GetMessageQuery(IGetMessageParameters parameters);
    public abstract virtual string GetMessagesQuery(IGetMessagesParameters parameters);
}
public class Tweetinvi.Controllers.Messages.MessageController : object {
    private IMessageQueryExecutor _messageQueryExecutor;
    public MessageController(IMessageQueryExecutor messageQueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<ICreateMessageDTO>> PublishMessageAsync(IPublishMessageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> DestroyMessageAsync(IDeleteMessageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IGetMessageDTO>> GetMessageAsync(IGetMessageParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IMessageCursorQueryResultDTO>> GetMessagesIterator(IGetMessagesParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Messages.MessageQueryExecutor : object {
    private ITwitterAccessor _twitterAccessor;
    private IMessageQueryGenerator _messageQueryGenerator;
    public MessageQueryExecutor(ITwitterAccessor twitterAccessor, IMessageQueryGenerator messageQueryGenerator);
    public sealed virtual Task`1<ITwitterResult`1<ICreateMessageDTO>> PublishMessageAsync(IPublishMessageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult> DestroyMessageAsync(IDeleteMessageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IGetMessageDTO>> GetMessageAsync(IGetMessageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IMessageCursorQueryResultDTO>> GetMessagesAsync(IGetMessagesParameters parameters, TwitterRequest request);
}
public class Tweetinvi.Controllers.Messages.MessageQueryGenerator : object {
    private JsonContentFactory _jsonContentFactory;
    private IQueryParameterGenerator _queryParameterGenerator;
    public MessageQueryGenerator(JsonContentFactory jsonContentFactory, IQueryParameterGenerator queryParameterGenerator);
    public sealed virtual RequestWithPayload GetPublishMessageQuery(IPublishMessageParameters parameters);
    public sealed virtual string GetDestroyMessageQuery(IDeleteMessageParameters parameters);
    public sealed virtual string GetMessageQuery(IGetMessageParameters parameters);
    public sealed virtual string GetMessagesQuery(IGetMessagesParameters parameters);
    private ICreateMessageDTO GetPublishMessageBody(IPublishMessageParameters parameters);
}
public class Tweetinvi.Controllers.Messages.RequestWithPayload : object {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpContent <Content>k__BackingField;
    public string Url { get; public set; }
    public HttpContent Content { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public HttpContent get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(HttpContent value);
}
public static class Tweetinvi.Controllers.Properties.Resources : object {
    public static string Account_GetSettings;
    public static string Account_Mute_Create;
    public static string Account_Mute_Destroy;
    public static string Account_Mute_GetUserIds;
    public static string Account_Mute_GetUsers;
    public static string Account_UpdateSettings;
    public static string Account_UpdateProfile;
    public static string Account_UpdateProfileImage;
    public static string Account_UpdateProfileBanner;
    public static string Account_RemoveProfileBanner;
    public static string Friendship_Create;
    public static string Friendship_Destroy;
    public static string Friendship_FriendIdsWithNoRetweets;
    public static string Friendship_GetIncomingIds;
    public static string Friendship_GetOutgoingIds;
    public static string Friendship_GetRelationship;
    public static string Friendship_GetRelationships;
    public static string Friendship_Update;
    public static string Geo_CoordinatesParameter;
    public static string Geo_GetPlaceFromId;
    public static string Geo_SearchGeo;
    public static string Geo_SearchGeoReverse;
    public static string Geo_PlaceIdParameter;
    public static string Help_GetRateLimit;
    public static string Help_GetTwitterConfiguration;
    public static string Help_GetSupportedLanguages;
    public static string List_Create;
    public static string List_Get;
    public static string List_GetUserLists;
    public static string List_Update;
    public static string List_Destroy;
    public static string List_Members_Create;
    public static string List_Members_List;
    public static string List_CheckMembership;
    public static string List_CreateMembers;
    public static string List_DestroyMember;
    public static string List_DestroyMembers;
    public static string List_GetSubscribers;
    public static string List_GetTweetsFromList;
    public static string List_OwnerIdParameter;
    public static string List_OwnerScreenNameParameter;
    public static string List_GetUserMemberships;
    public static string List_OwnedByUser;
    public static string List_SlugParameter;
    public static string List_Subscribe;
    public static string List_Unsubscribe;
    public static string List_UserSubscriptions;
    public static string List_CheckSubscriber;
    public static string Message_GetMessages;
    public static string Message_Create;
    public static string Message_Get;
    public static string Message_Destroy;
    public static string QueryParameter_Count;
    public static string QueryParameter_IncludeEntities;
    public static string QueryParameter_IncludeRetweets;
    public static string QueryParameter_MaxId;
    public static string QueryParameter_PageNumber;
    public static string QueryParameter_SinceId;
    public static string QueryParameter_SkipStatus;
    public static string QueryParameter_TrimUser;
    public static string QueryParameter_Cursor;
    public static string SavedSearch_Create;
    public static string SavedSearch_Get;
    public static string SavedSearch_Destroy;
    public static string SavedSearches_List;
    public static string Search_SearchTweets;
    public static string Search_SearchUsers;
    public static string SearchParameter_GeoCode;
    public static string Timeline_GetHomeTimeline;
    public static string Timeline_GetMentionsTimeline;
    public static string Timeline_GetRetweetsOfMeTimeline;
    public static string Timeline_GetUserTimeline;
    public static string Trends_GetTrendsFromWoeId;
    public static string Trends_GetAvailableTrendsLocations;
    public static string Trends_GetTrendsLocationCloseTo;
    public static string Tweet_Destroy;
    public static string Tweet_Favorite_Create;
    public static string Tweet_Favorite_Destroy;
    public static string Tweet_GenerateOEmbed;
    public static string Tweet_Get;
    public static string TweetV2_Get;
    public static string Tweet_GetRetweeters;
    public static string Tweet_Lookup;
    public static string Tweet_Publish;
    public static string Tweet_Retweet_GetRetweets;
    public static string Tweet_DestroyRetweet;
    public static string Tweet_Retweet_Publish;
    public static string Upload_URL;
    public static string User_GetCurrentUser;
    public static string User_Block_Create;
    public static string User_Block_Destroy;
    public static string User_Block_List;
    public static string User_Block_List_Ids;
    public static string User_GetFavorites;
    public static string User_GetFollowers;
    public static string User_GetFriends;
    public static string User_GetUser;
    public static string UserV2_Get;
    public static string UserV2_GetBy;
    public static string User_GetUsers;
    public static string User_Report_Spam;
    public static string Exception_Upload_Status_NotUploaded;
    public static string Exception_Upload_Status_No_ProcessingInfo;
    public static string Auth_PinCodeUrl;
    public static string Auth_ProcessIdKey;
    public static string Auth_CreateBearerToken;
    public static string Auth_RequestToken;
    public static string Auth_RequestAccessToken;
    public static string Auth_AuthorizeBaseUrl;
    public static string Auth_InvalidateBearerToken;
    public static string Auth_InvalidateAccessToken;
    public static string Auth_RequestTokenParserRegex;
    public static string Webhooks_AccountActivity_All;
    public static string Webhooks_AccountActivity_GetAllWebhooks;
    private static Resources();
    public static string GetResourceByName(string resourceName);
}
public interface Tweetinvi.Controllers.Search.ISearchController {
    public abstract virtual ITwitterPageIterator`2<ITwitterResult`1<ISearchResultsDTO>, Nullable`1<long>> GetSearchTweetsIterator(ISearchTweetsParameters parameters, ITwitterRequest request);
    public abstract virtual ITwitterPageIterator`2<IFilteredTwitterResult`1<UserDTO[]>, Nullable`1<int>> GetSearchUsersIterator(ISearchUsersParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO>> CreateSavedSearchAsync(ICreateSavedSearchParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO>> GetSavedSearchAsync(IGetSavedSearchParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO[]>> ListSavedSearchesAsync(IListSavedSearchesParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO>> DestroySavedSearchAsync(IDestroySavedSearchParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Search.ISearchQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<ISearchResultsDTO>> SearchTweetsAsync(ISearchTweetsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<UserDTO[]>> SearchUsersAsync(ISearchUsersParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO>> CreateSavedSearchAsync(ICreateSavedSearchParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO>> GetSavedSearchAsync(IGetSavedSearchParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO[]>> ListSavedSearchesAsync(IListSavedSearchesParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<SavedSearchDTO>> DestroySavedSearchAsync(IDestroySavedSearchParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Search.ISearchQueryGenerator {
    public abstract virtual string GetSearchTweetsQuery(ISearchTweetsParameters parameters, ComputedTweetMode tweetMode);
    public abstract virtual string GetSearchUsersQuery(ISearchUsersParameters parameters);
    public abstract virtual string GetCreateSavedSearchQuery(ICreateSavedSearchParameters parameters);
    public abstract virtual string GetSavedSearchQuery(IGetSavedSearchParameters parameters);
    public abstract virtual string GetListSavedSearchQuery(IListSavedSearchesParameters parameters);
    public abstract virtual string GetDestroySavedSearchQuery(IDestroySavedSearchParameters parameters);
}
public interface Tweetinvi.Controllers.Search.ISearchQueryParameterGenerator {
    public abstract virtual ISearchTweetsParameters CreateSearchTweetParameter(string query);
    public abstract virtual ISearchTweetsParameters CreateSearchTweetParameter(IGeoCode geoCode);
    public abstract virtual ISearchTweetsParameters CreateSearchTweetParameter(ICoordinates coordinates, int radius, DistanceMeasure measure);
    public abstract virtual ISearchTweetsParameters CreateSearchTweetParameter(double latitude, double longitude, int radius, DistanceMeasure measure);
    public abstract virtual string GenerateSinceParameter(Nullable`1<DateTime> since);
    public abstract virtual string GenerateUntilParameter(Nullable`1<DateTime> until);
    public abstract virtual string GenerateGeoCodeParameter(IGeoCode geoCode);
    public abstract virtual ISearchUsersParameters CreateUserSearchParameters(string query);
}
public interface Tweetinvi.Controllers.Search.ISearchV2Controller {
    public abstract virtual Task`1<ITwitterResult`1<SearchTweetsV2Response>> SearchTweetsAsync(ISearchTweetsV2Parameters parameters, ITwitterRequest request);
    public abstract virtual ITwitterPageIterator`2<ITwitterResult`1<SearchTweetsV2Response>, string> GetSearchTweetsV2Iterator(ISearchTweetsV2Parameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Search.ISearchV2QueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<SearchTweetsV2Response>> SearchTweetsAsync(ISearchTweetsV2Parameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Search.ISearchV2QueryGenerator {
    public abstract virtual string GetSearchTweetsV2Query(ISearchTweetsV2Parameters parameters);
}
public class Tweetinvi.Controllers.Search.SearchController : object {
    private ISearchQueryExecutor _searchQueryExecutor;
    public SearchController(ISearchQueryExecutor searchQueryExecutor);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ISearchResultsDTO>, Nullable`1<long>> GetSearchTweetsIterator(ISearchTweetsParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`2<IFilteredTwitterResult`1<UserDTO[]>, Nullable`1<int>> GetSearchUsersIterator(ISearchUsersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> CreateSavedSearchAsync(ICreateSavedSearchParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> GetSavedSearchAsync(IGetSavedSearchParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO[]>> ListSavedSearchesAsync(IListSavedSearchesParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> DestroySavedSearchAsync(IDestroySavedSearchParameters parameters, ITwitterRequest request);
    [CompilerGeneratedAttribute]
internal static Nullable`1<long> <GetSearchTweetsIterator>g__getNextCursor|2_0(ITwitterResult`1<ISearchResultsDTO> page);
}
public class Tweetinvi.Controllers.Search.SearchQueryExecutor : object {
    private ISearchQueryGenerator _searchQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public SearchQueryExecutor(ISearchQueryGenerator searchQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<ISearchResultsDTO>> SearchTweetsAsync(ISearchTweetsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<UserDTO[]>> SearchUsersAsync(ISearchUsersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> CreateSavedSearchAsync(ICreateSavedSearchParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> GetSavedSearchAsync(IGetSavedSearchParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO[]>> ListSavedSearchesAsync(IListSavedSearchesParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> DestroySavedSearchAsync(IDestroySavedSearchParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Search.SearchQueryGenerator : object {
    private IQueryParameterGenerator _queryParameterGenerator;
    private ISearchQueryParameterGenerator _searchQueryParameterGenerator;
    public SearchQueryGenerator(IQueryParameterGenerator queryParameterGenerator, ISearchQueryParameterGenerator searchQueryParameterGenerator);
    public sealed virtual string GetSearchTweetsQuery(ISearchTweetsParameters parameters, ComputedTweetMode tweetMode);
    private string GenerateQueryParameter(string query, TweetSearchFilters tweetSearchFilters);
    [IteratorStateMachineAttribute("Tweetinvi.Controllers.Search.SearchQueryGenerator/<GetFlags>d__5")]
private IEnumerable`1<TweetSearchFilters> GetFlags(TweetSearchFilters tweetSearchFilters);
    public sealed virtual string GetSearchUsersQuery(ISearchUsersParameters parameters);
    public sealed virtual string GetCreateSavedSearchQuery(ICreateSavedSearchParameters parameters);
    public sealed virtual string GetSavedSearchQuery(IGetSavedSearchParameters parameters);
    public sealed virtual string GetListSavedSearchQuery(IListSavedSearchesParameters parameters);
    public sealed virtual string GetDestroySavedSearchQuery(IDestroySavedSearchParameters parameters);
}
public class Tweetinvi.Controllers.Search.SearchQueryParameterGenerator : object {
    public sealed virtual ISearchTweetsParameters CreateSearchTweetParameter(string query);
    public sealed virtual ISearchTweetsParameters CreateSearchTweetParameter(IGeoCode geoCode);
    public sealed virtual ISearchTweetsParameters CreateSearchTweetParameter(ICoordinates coordinates, int radius, DistanceMeasure measure);
    public sealed virtual ISearchTweetsParameters CreateSearchTweetParameter(double latitude, double longitude, int radius, DistanceMeasure measure);
    public sealed virtual string GenerateSinceParameter(Nullable`1<DateTime> since);
    public sealed virtual string GenerateUntilParameter(Nullable`1<DateTime> until);
    public sealed virtual string GenerateGeoCodeParameter(IGeoCode geoCode);
    public sealed virtual ISearchUsersParameters CreateUserSearchParameters(string query);
}
public class Tweetinvi.Controllers.Search.SearchV2Controller : object {
    private ISearchV2QueryExecutor _searchQueryExecutor;
    public SearchV2Controller(ISearchV2QueryExecutor searchQueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<SearchTweetsV2Response>> SearchTweetsAsync(ISearchTweetsV2Parameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<SearchTweetsV2Response>, string> GetSearchTweetsV2Iterator(ISearchTweetsV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Search.SearchV2QueryExecutor : object {
    private ISearchV2QueryGenerator _searchQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public SearchV2QueryExecutor(ISearchV2QueryGenerator searchQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<SearchTweetsV2Response>> SearchTweetsAsync(ISearchTweetsV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Search.SearchV2QueryGenerator : object {
    private ITweetsV2QueryGenerator _tweetsV2QueryGenerator;
    public SearchV2QueryGenerator(ITweetsV2QueryGenerator tweetsV2QueryGenerator);
    public sealed virtual string GetSearchTweetsV2Query(ISearchTweetsV2Parameters parameters);
}
public interface Tweetinvi.Controllers.Shared.IQueryParameterGenerator {
    public abstract virtual void AppendCursorParameters(StringBuilder query, ICursorQueryParameters parameters);
    public abstract virtual string GenerateLanguageParameter(Nullable`1<Language> language);
    public abstract virtual string GenerateTweetIdentifier(ITweetIdentifier tweetId);
    public abstract virtual string GenerateAdditionalRequestParameters(string additionalParameters, bool existingParameters);
    public abstract virtual string GenerateOEmbedAlignmentParameter(Nullable`1<OEmbedTweetAlignment> alignment);
    public abstract virtual string GenerateOEmbedThemeParameter(Nullable`1<OEmbedTweetTheme> theme);
    public abstract virtual void AddMinMaxQueryParameters(StringBuilder query, IMinMaxQueryParameters parameters);
    public abstract virtual void AddTimelineParameters(StringBuilder query, ITimelineRequestParameters parameters, ComputedTweetMode tweetMode);
}
public class Tweetinvi.Controllers.Shared.QueryParameterGenerator : object {
    public sealed virtual void AppendCursorParameters(StringBuilder query, ICursorQueryParameters parameters);
    public string GenerateCountParameter(int count);
    public string GenerateTrimUserParameter(Nullable`1<bool> trimUser);
    public string GenerateSinceIdParameter(Nullable`1<long> sinceId);
    public string GenerateMaxIdParameter(Nullable`1<long> maxId);
    public string GenerateIncludeEntitiesParameter(Nullable`1<bool> includeEntities);
    public string GenerateSkipStatusParameter(bool skipStatus);
    public string GeneratePageNumberParameter(Nullable`1<int> pageNumber);
    public string GenerateIncludeRetweetsParameter(bool includeRetweets);
    public sealed virtual string GenerateLanguageParameter(Nullable`1<Language> language);
    public string GenerateCursorParameter(string cursor);
    public sealed virtual string GenerateTweetIdentifier(ITweetIdentifier tweetId);
    public sealed virtual string GenerateAdditionalRequestParameters(string additionalParameters, bool existingParameters);
    public sealed virtual void AddMinMaxQueryParameters(StringBuilder query, IMinMaxQueryParameters parameters);
    public sealed virtual void AddTimelineParameters(StringBuilder query, ITimelineRequestParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GenerateOEmbedAlignmentParameter(Nullable`1<OEmbedTweetAlignment> alignment);
    public sealed virtual string GenerateOEmbedThemeParameter(Nullable`1<OEmbedTweetTheme> theme);
}
public interface Tweetinvi.Controllers.Streams.IStreamsV2Controller {
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> GetRulesForFilteredStreamV2Async(IGetRulesForFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> AddRulesToFilteredStreamAsync(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> DeleteRulesFromFilteredStreamAsync(IDeleteRulesFromFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> TestFilteredStreamRulesV2Async(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Streams.IStreamsV2QueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> GetRulesForFilteredStreamV2Async(IGetRulesForFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> AddRulesToFilteredStreamAsync(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> DeleteRulesFromFilteredStreamAsync(IDeleteRulesFromFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> TestFilteredStreamRulesV2Async(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Streams.IStreamsV2QueryGenerator {
    public abstract virtual string GetRulesForFilteredStreamV2Query(IGetRulesForFilteredStreamV2Parameters parameters);
    public abstract virtual string GetAddRulesToFilteredStreamQuery(IAddRulesToFilteredStreamV2Parameters parameters);
    public abstract virtual string GetDeleteRulesFromFilteredStreamQuery(IDeleteRulesFromFilteredStreamV2Parameters parameters);
    public abstract virtual string GetTestFilteredStreamRulesV2Query(IAddRulesToFilteredStreamV2Parameters parameters);
}
public class Tweetinvi.Controllers.Streams.StreamsV2Controller : object {
    private IStreamsV2QueryExecutor _streamsV2QueryExecutor;
    public StreamsV2Controller(IStreamsV2QueryExecutor streamsV2QueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> GetRulesForFilteredStreamV2Async(IGetRulesForFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> AddRulesToFilteredStreamAsync(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> DeleteRulesFromFilteredStreamAsync(IDeleteRulesFromFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> TestFilteredStreamRulesV2Async(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Streams.StreamsV2QueryExecutor : object {
    private JsonContentFactory _jsonContentFactory;
    private IStreamsV2QueryGenerator _streamsV2QueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public StreamsV2QueryExecutor(JsonContentFactory jsonContentFactory, IStreamsV2QueryGenerator streamsV2QueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> GetRulesForFilteredStreamV2Async(IGetRulesForFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> AddRulesToFilteredStreamAsync(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> DeleteRulesFromFilteredStreamAsync(IDeleteRulesFromFilteredStreamV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> TestFilteredStreamRulesV2Async(IAddRulesToFilteredStreamV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Streams.StreamsV2QueryGenerator : object {
    public sealed virtual string GetRulesForFilteredStreamV2Query(IGetRulesForFilteredStreamV2Parameters parameters);
    public sealed virtual string GetAddRulesToFilteredStreamQuery(IAddRulesToFilteredStreamV2Parameters parameters);
    public sealed virtual string GetDeleteRulesFromFilteredStreamQuery(IDeleteRulesFromFilteredStreamV2Parameters parameters);
    public sealed virtual string GetTestFilteredStreamRulesV2Query(IAddRulesToFilteredStreamV2Parameters parameters);
}
public interface Tweetinvi.Controllers.Timeline.ITimelineQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetHomeTimelineAsync(IGetHomeTimelineParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetUserTimelineAsync(IGetUserTimelineParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetMentionsTimelineAsync(IGetMentionsTimelineParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetRetweetsOfMeTimelineAsync(IGetRetweetsOfMeTimelineParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Timeline.ITimelineQueryGenerator {
    public abstract virtual string GetHomeTimelineQuery(IGetHomeTimelineParameters parameters, ComputedTweetMode tweetMode);
    public abstract virtual string GetUserTimelineQuery(IGetUserTimelineParameters parameters, ComputedTweetMode tweetMode);
    public abstract virtual string GetMentionsTimelineQuery(IGetMentionsTimelineParameters getMentionsTimelineParameters, ComputedTweetMode tweetMode);
    public abstract virtual string GetRetweetsOfMeTimelineQuery(IGetRetweetsOfMeTimelineParameters parameters, ComputedTweetMode tweetMode);
}
public class Tweetinvi.Controllers.Timeline.TimelineController : object {
    private ITimelineQueryExecutor _timelineQueryExecutor;
    private IPageCursorIteratorFactories _pageCursorIteratorFactories;
    public TimelineController(ITimelineQueryExecutor timelineQueryExecutor, IPageCursorIteratorFactories pageCursorIteratorFactories);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetHomeTimelineIterator(IGetHomeTimelineParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetUserTimelineIterator(IGetUserTimelineParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetMentionsTimelineIterator(IGetMentionsTimelineParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetRetweetsOfMeTimelineIterator(IGetRetweetsOfMeTimelineParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Timeline.TimelineQueryExecutor : object {
    private ITwitterAccessor _twitterAccessor;
    private ITimelineQueryGenerator _timelineQueryGenerator;
    public TimelineQueryExecutor(ITwitterAccessor twitterAccessor, ITimelineQueryGenerator timelineQueryGenerator);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetHomeTimelineAsync(IGetHomeTimelineParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetUserTimelineAsync(IGetUserTimelineParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetMentionsTimelineAsync(IGetMentionsTimelineParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetRetweetsOfMeTimelineAsync(IGetRetweetsOfMeTimelineParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Timeline.TimelineQueryGenerator : object {
    private IUserQueryParameterGenerator _userQueryParameterGenerator;
    private IQueryParameterGenerator _queryParameterGenerator;
    public TimelineQueryGenerator(IUserQueryParameterGenerator userQueryParameterGenerator, IQueryParameterGenerator queryParameterGenerator);
    public sealed virtual string GetHomeTimelineQuery(IGetHomeTimelineParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetUserTimelineQuery(IGetUserTimelineParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetMentionsTimelineQuery(IGetMentionsTimelineParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetRetweetsOfMeTimelineQuery(IGetRetweetsOfMeTimelineParameters parameters, ComputedTweetMode tweetMode);
}
public interface Tweetinvi.Controllers.Trends.ITrendsQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<IGetTrendsAtResult[]>> GetPlaceTrendsAtAsync(IGetTrendsAtParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendLocationsAsync(IGetTrendsLocationParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendsLocationCloseToAsync(IGetTrendsLocationCloseToParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Trends.ITrendsQueryGenerator {
    public abstract virtual string GetTrendsAtQuery(IGetTrendsAtParameters parameters);
    public abstract virtual string GetTrendsLocationQuery(IGetTrendsLocationParameters parameters);
    public abstract virtual string GetTrendsLocationCloseToQuery(IGetTrendsLocationCloseToParameters parameters);
}
public class Tweetinvi.Controllers.Trends.TrendsController : object {
    private ITrendsQueryExecutor _trendsQueryExecutor;
    public TrendsController(ITrendsQueryExecutor trendsQueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<IGetTrendsAtResult[]>> GetPlaceTrendsAtAsync(IGetTrendsAtParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendLocationsAsync(IGetTrendsLocationParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendsLocationCloseToAsync(IGetTrendsLocationCloseToParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Trends.TrendsQueryExecutor : object {
    private ITrendsQueryGenerator _trendsQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public TrendsQueryExecutor(ITrendsQueryGenerator trendsQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<IGetTrendsAtResult[]>> GetPlaceTrendsAtAsync(IGetTrendsAtParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendLocationsAsync(IGetTrendsLocationParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendsLocationCloseToAsync(IGetTrendsLocationCloseToParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Trends.TrendsQueryGenerator : object {
    public sealed virtual string GetTrendsAtQuery(IGetTrendsAtParameters parameters);
    public sealed virtual string GetTrendsLocationQuery(IGetTrendsLocationParameters parameters);
    public sealed virtual string GetTrendsLocationCloseToQuery(IGetTrendsLocationCloseToParameters parameters);
}
public interface Tweetinvi.Controllers.Tweet.ITweetQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO>> GetTweetAsync(IGetTweetParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetTweetsAsync(IGetTweetsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishTweetAsync(IPublishTweetParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishRetweetAsync(IPublishRetweetParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyRetweetAsync(IDestroyRetweetParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetRetweetsAsync(IGetRetweetsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetRetweeterIdsAsync(IGetRetweeterIdsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyTweetAsync(IDestroyTweetParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO>> FavoriteTweetAsync(IFavoriteTweetParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO>> UnfavoriteTweetAsync(IUnfavoriteTweetParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetFavoriteTweetsAsync(IGetUserFavoriteTweetsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IOEmbedTweetDTO>> GetOEmbedTweetAsync(IGetOEmbedTweetParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Tweet.ITweetsV2QueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<TweetV2Response>> GetTweetAsync(IGetTweetV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<TweetsV2Response>> GetTweetsAsync(IGetTweetsV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<TweetHideV2Response>> ChangeTweetReplyVisibilityAsync(IChangeTweetReplyVisibilityV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Tweet.TweetController : object {
    private ITweetQueryExecutor _tweetQueryExecutor;
    private IUploadQueryExecutor _uploadQueryExecutor;
    private IPageCursorIteratorFactories _pageCursorIteratorFactories;
    public TweetController(ITweetQueryExecutor tweetQueryExecutor, IUploadQueryExecutor uploadQueryExecutor, IPageCursorIteratorFactories pageCursorIteratorFactories);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> GetTweetAsync(IGetTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetTweetsAsync(IGetTweetsParameters parameters, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Tweet.TweetController/<PublishTweetAsync>d__6")]
public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishTweetAsync(IPublishTweetParameters parameters, ITwitterRequest request);
    public sealed virtual bool CanBePublished(IPublishTweetParameters publishTweetParameters);
    public sealed virtual bool CanBePublished(string text);
    public static int EstimateTweetLength(string text);
    private static int EstimateTweetLength(IPublishTweetParameters publishTweetParameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishRetweetAsync(IPublishRetweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyRetweetAsync(IDestroyRetweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetRetweetsAsync(IGetRetweetsParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetRetweeterIdsIterator(IGetRetweeterIdsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyTweetAsync(IDestroyTweetParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetFavoriteTweetsIterator(IGetUserFavoriteTweetsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> FavoriteTweetAsync(IFavoriteTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> UnfavoriteTweetAsync(IUnfavoriteTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IOEmbedTweetDTO>> GetOEmbedTweetAsync(IGetOEmbedTweetParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Tweet.TweetQueryExecutor : object {
    private ITweetQueryGenerator _tweetQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public TweetQueryExecutor(ITweetQueryGenerator tweetQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> GetTweetAsync(IGetTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetTweetsAsync(IGetTweetsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishTweetAsync(IPublishTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetRetweetsAsync(IGetRetweetsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishRetweetAsync(IPublishRetweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyRetweetAsync(IDestroyRetweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetRetweeterIdsAsync(IGetRetweeterIdsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyTweetAsync(IDestroyTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetFavoriteTweetsAsync(IGetUserFavoriteTweetsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IOEmbedTweetDTO>> GetOEmbedTweetAsync(IGetOEmbedTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> FavoriteTweetAsync(IFavoriteTweetParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> UnfavoriteTweetAsync(IUnfavoriteTweetParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Tweet.TweetQueryGenerator : object {
    private IQueryParameterGenerator _queryParameterGenerator;
    private IUserQueryParameterGenerator _userQueryParameterGenerator;
    public TweetQueryGenerator(IQueryParameterGenerator queryParameterGenerator, IUserQueryParameterGenerator userQueryParameterGenerator);
    public sealed virtual string GetTweetQuery(IGetTweetParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetTweetsQuery(IGetTweetsParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetPublishTweetQuery(IPublishTweetParameters parameters, ComputedTweetMode tweetMode);
    private string GetQuotedTweetUrl(IPublishTweetParameters parameters);
    public sealed virtual string GetDestroyTweetQuery(IDestroyTweetParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetFavoriteTweetsQuery(IGetUserFavoriteTweetsParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetRetweetsQuery(IGetRetweetsParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetPublishRetweetQuery(IPublishRetweetParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetDestroyRetweetQuery(IDestroyRetweetParameters parameters, ComputedTweetMode tweetMode);
    public sealed virtual string GetRetweeterIdsQuery(IGetRetweeterIdsParameters parameters);
    public sealed virtual string GetCreateFavoriteTweetQuery(IFavoriteTweetParameters parameters);
    public sealed virtual string GetUnfavoriteTweetQuery(IUnfavoriteTweetParameters parameters);
    public sealed virtual string GetOEmbedTweetQuery(IGetOEmbedTweetParameters parameters);
    private string GetTweetId(ITweetIdentifier tweetIdentifier);
    [CompilerGeneratedAttribute]
private bool <GetTweetsQuery>b__4_0(ITweetIdentifier x);
}
public class Tweetinvi.Controllers.Tweet.TweetsV2Controller : object {
    private ITweetsV2QueryExecutor _queryExecutor;
    public TweetsV2Controller(ITweetsV2QueryExecutor queryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<TweetV2Response>> GetTweetAsync(IGetTweetV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<TweetsV2Response>> GetTweetsAsync(IGetTweetsV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<TweetHideV2Response>> ChangeTweetReplyVisibilityAsync(IChangeTweetReplyVisibilityV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Tweet.TweetsV2QueryExecutor : object {
    private JsonContentFactory _jsonContentFactory;
    private ITweetsV2QueryGenerator _tweetQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public TweetsV2QueryExecutor(JsonContentFactory jsonContentFactory, ITweetsV2QueryGenerator tweetQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<TweetV2Response>> GetTweetAsync(IGetTweetV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<TweetsV2Response>> GetTweetsAsync(IGetTweetsV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<TweetHideV2Response>> ChangeTweetReplyVisibilityAsync(IChangeTweetReplyVisibilityV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Tweet.TweetsV2QueryGenerator : object {
    public sealed virtual string GetTweetQuery(IGetTweetV2Parameters parameters);
    public sealed virtual string GetTweetsQuery(IGetTweetsV2Parameters parameters);
    public sealed virtual string GetChangeTweetReplyVisibilityQuery(IChangeTweetReplyVisibilityV2Parameters parameters);
    public sealed virtual void AddTweetFieldsParameters(IBaseTweetsV2Parameters parameters, StringBuilder query);
}
public class Tweetinvi.Controllers.TweetinviControllersModule : object {
    public sealed virtual void Initialize(ITweetinviContainer container);
    private void InitializeControllers(ITweetinviContainer container);
    private void InitializeQueryExecutors(ITweetinviContainer container);
    private void InitializeQueryGenerators(ITweetinviContainer container);
    private void InitializeHelpers(ITweetinviContainer container);
}
public interface Tweetinvi.Controllers.TwitterLists.ITwitterListQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CreateListAsync(ICreateListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> GetListAsync(IGetListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO[]>> GetListsSubscribedByUserAsync(IGetListsSubscribedByUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UpdateListAsync(IUpdateListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> DestroyListAsync(IDestroyListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetListsOwnedByUserAsync(IGetListsOwnedByUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> AddMemberToListAsync(IAddMemberToListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> AddMembersToListAsync(IAddMembersToListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListMembershipsAsync(IGetUserListMembershipsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMembersOfListAsync(IGetMembersOfListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsAListMemberAsync(ICheckIfUserIsMemberOfListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMemberFromListAsync(IRemoveMemberFromListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMembersFromListAsync(IRemoveMembersFromListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> SubscribeToListAsync(ISubscribeToListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UnsubscribeFromListAsync(IUnsubscribeFromListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetListSubscribersAsync(IGetListSubscribersParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListSubscriptionsAsync(IGetUserListSubscriptionsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsSubscriberOfListAsync(ICheckIfUserIsSubscriberOfListParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetTweetsFromListAsync(IGetTweetsFromListParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.TwitterLists.ITwitterListQueryGenerator {
    public abstract virtual string GetCreateListQuery(ICreateListParameters parameters);
    public abstract virtual string GetListQuery(IGetListParameters parameters);
    public abstract virtual string GetListsSubscribedByUserQuery(IGetListsSubscribedByUserParameters parameters);
    public abstract virtual string GetUpdateListQuery(IUpdateListParameters parameters);
    public abstract virtual string GetDestroyListQuery(IDestroyListParameters parameters);
    public abstract virtual string GetListsOwnedByUserQuery(IGetListsOwnedByUserParameters parameters);
    public abstract virtual string GetAddMemberToListQuery(IAddMemberToListParameters parameters);
    public abstract virtual string GetAddMembersQuery(IAddMembersToListParameters parameters);
    public abstract virtual string GetCheckIfUserIsMemberOfListQuery(ICheckIfUserIsMemberOfListParameters parameters);
    public abstract virtual string GetUserListMembershipsQuery(IGetUserListMembershipsParameters parameters);
    public abstract virtual string GetMembersOfListQuery(IGetMembersOfListParameters parameters);
    public abstract virtual string GetRemoveMemberFromListQuery(IRemoveMemberFromListParameters parameters);
    public abstract virtual string GetRemoveMembersFromListQuery(IRemoveMembersFromListParameters parameters);
    public abstract virtual string GetSubscribeToListQuery(ISubscribeToListParameters parameters);
    public abstract virtual string GetListSubscribersQuery(IGetListSubscribersParameters parameters);
    public abstract virtual string GetCheckIfUserIsSubscriberOfListQuery(ICheckIfUserIsSubscriberOfListParameters parameters);
    public abstract virtual string GetUserListSubscriptionsQuery(IGetUserListSubscriptionsParameters parameters);
    public abstract virtual string GetUnsubscribeFromListQuery(IUnsubscribeFromListParameters parameters);
    public abstract virtual string GetTweetsFromListQuery(IGetTweetsFromListParameters queryParameters, ComputedTweetMode tweetMode);
}
public class Tweetinvi.Controllers.TwitterLists.TwitterListController : object {
    private ITwitterListQueryExecutor _twitterListQueryExecutor;
    private IPageCursorIteratorFactories _pageCursorIteratorFactories;
    public TwitterListController(ITwitterListQueryExecutor twitterListQueryExecutor, IPageCursorIteratorFactories pageCursorIteratorFactories);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CreateListAsync(ICreateListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> GetListAsync(IGetListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO[]>> GetListsSubscribedByUserAsync(IGetListsSubscribedByUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UpdateListAsync(IUpdateListParameters parameters, ITwitterRequest request);
    private sealed virtual override Task`1<ITwitterResult`1<ITwitterListDTO>> Tweetinvi.Core.Controllers.ITwitterListController.DestroyListAsync(IDestroyListParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetListsOwnedByUserIterator(IGetListsOwnedByUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> AddMemberToListAsync(IAddMemberToListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> AddMembersToListAsync(IAddMembersToListParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListMembershipsIterator(IGetUserListMembershipsParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMembersOfListIterator(IGetMembersOfListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsAListMemberAsync(ICheckIfUserIsMemberOfListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMemberFromListAsync(IRemoveMemberFromListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMembersFromListAsync(IRemoveMembersFromListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> SubscribeToListAsync(ISubscribeToListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UnsubscribeFromListAsync(IUnsubscribeFromListParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetListSubscribersIterator(IGetListSubscribersParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListSubscriptionsIterator(IGetUserListSubscriptionsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsSubscriberOfListAsync(ICheckIfUserIsSubscriberOfListParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetTweetsFromListIterator(IGetTweetsFromListParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.TwitterLists.TwitterListQueryExecutor : object {
    private ITwitterListQueryGenerator _listsQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public TwitterListQueryExecutor(ITwitterListQueryGenerator listsQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CreateListAsync(ICreateListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> GetListAsync(IGetListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO[]>> GetListsSubscribedByUserAsync(IGetListsSubscribedByUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UpdateListAsync(IUpdateListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> DestroyListAsync(IDestroyListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetListsOwnedByUserAsync(IGetListsOwnedByUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> AddMemberToListAsync(IAddMemberToListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> AddMembersToListAsync(IAddMembersToListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListMembershipsAsync(IGetUserListMembershipsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMembersOfListAsync(IGetMembersOfListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsAListMemberAsync(ICheckIfUserIsMemberOfListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMemberFromListAsync(IRemoveMemberFromListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMembersFromListAsync(IRemoveMembersFromListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> SubscribeToListAsync(ISubscribeToListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UnsubscribeFromListAsync(IUnsubscribeFromListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetListSubscribersAsync(IGetListSubscribersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListSubscriptionsAsync(IGetUserListSubscriptionsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsSubscriberOfListAsync(ICheckIfUserIsSubscriberOfListParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetTweetsFromListAsync(IGetTweetsFromListParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.TwitterLists.TwitterListQueryGenerator : object {
    private IUserQueryParameterGenerator _userQueryParameterGenerator;
    private IQueryParameterGenerator _queryParameterGenerator;
    private ITwitterListQueryParameterGenerator _twitterListQueryParameterGenerator;
    public TwitterListQueryGenerator(IUserQueryParameterGenerator userQueryParameterGenerator, IQueryParameterGenerator queryParameterGenerator, ITwitterListQueryParameterGenerator twitterListQueryParameterGenerator);
    public sealed virtual string GetCreateListQuery(ICreateListParameters parameters);
    private static void AppendListMetadataToQuery(IListMetadataParameters parameters, StringBuilder query);
    public sealed virtual string GetListQuery(IGetListParameters parameters);
    public sealed virtual string GetListsSubscribedByUserQuery(IGetListsSubscribedByUserParameters parameters);
    public sealed virtual string GetUpdateListQuery(IUpdateListParameters parameters);
    public sealed virtual string GetDestroyListQuery(IDestroyListParameters parameters);
    public sealed virtual string GetListsOwnedByUserQuery(IGetListsOwnedByUserParameters parameters);
    public sealed virtual string GetAddMemberToListQuery(IAddMemberToListParameters parameters);
    public sealed virtual string GetAddMembersQuery(IAddMembersToListParameters parameters);
    public sealed virtual string GetCheckIfUserIsMemberOfListQuery(ICheckIfUserIsMemberOfListParameters parameters);
    public sealed virtual string GetUserListMembershipsQuery(IGetUserListMembershipsParameters parameters);
    public sealed virtual string GetMembersOfListQuery(IGetMembersOfListParameters parameters);
    public sealed virtual string GetRemoveMemberFromListQuery(IRemoveMemberFromListParameters parameters);
    public sealed virtual string GetRemoveMembersFromListQuery(IRemoveMembersFromListParameters parameters);
    public sealed virtual string GetSubscribeToListQuery(ISubscribeToListParameters parameters);
    public sealed virtual string GetListSubscribersQuery(IGetListSubscribersParameters parameters);
    public sealed virtual string GetCheckIfUserIsSubscriberOfListQuery(ICheckIfUserIsSubscriberOfListParameters parameters);
    public sealed virtual string GetUserListSubscriptionsQuery(IGetUserListSubscriptionsParameters parameters);
    public sealed virtual string GetUnsubscribeFromListQuery(IUnsubscribeFromListParameters parameters);
    public sealed virtual string GetTweetsFromListQuery(IGetTweetsFromListParameters parameters, ComputedTweetMode tweetMode);
}
public class Tweetinvi.Controllers.TwitterLists.TwitterListQueryParameterGenerator : object {
    private IUserQueryParameterGenerator _userQueryParameterGenerator;
    private IFactory`1<IGetTweetsFromListParameters> _getTweetsFromListParametersFactory;
    public TwitterListQueryParameterGenerator(IUserQueryParameterGenerator userQueryParameterGenerator, IFactory`1<IGetTweetsFromListParameters> getTweetsFromListParametersFactory);
    public sealed virtual string GenerateIdentifierParameter(ITwitterListIdentifier twitterListIdentifier);
    public sealed virtual void AppendListIdentifierParameter(StringBuilder query, ITwitterListIdentifier listIdentifier);
    public sealed virtual void AppendListIdentifierParameter(StringBuilder query, IListParameters parameters);
    public sealed virtual IGetTweetsFromListParameters CreateTweetsFromListParameters();
}
public class Tweetinvi.Controllers.Upload.ChunkedUploader : object {
    private IMedia _media;
    private ITwitterAccessor _twitterAccessor;
    private IUploadQueryGenerator _uploadQueryGenerator;
    private Nullable`1<int> _expectedBinaryLength;
    private ChunkUploadResult _result;
    [CompilerGeneratedAttribute]
private Dictionary`2<long, Byte[]> <UploadedSegments>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NextSegmentIndex>k__BackingField;
    public Nullable`1<long> MediaId { get; public set; }
    public Dictionary`2<long, Byte[]> UploadedSegments { get; }
    public int NextSegmentIndex { get; public set; }
    public IChunkUploadResult Result { get; }
    public ChunkedUploader(ITwitterAccessor twitterAccessor, IUploadQueryGenerator uploadQueryGenerator, IMedia media);
    public sealed virtual Nullable`1<long> get_MediaId();
    public sealed virtual void set_MediaId(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<long, Byte[]> get_UploadedSegments();
    [CompilerGeneratedAttribute]
public sealed virtual int get_NextSegmentIndex();
    [CompilerGeneratedAttribute]
public sealed virtual void set_NextSegmentIndex(int value);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.ChunkedUploader/<InitAsync>d__16")]
public sealed virtual Task`1<bool> InitAsync(IChunkUploadInitParameters initParameters, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.ChunkedUploader/<AppendAsync>d__17")]
public sealed virtual Task`1<bool> AppendAsync(IChunkUploadAppendParameters parameters, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.ChunkedUploader/<FinalizeAsync>d__18")]
public sealed virtual Task`1<bool> FinalizeAsync(ICustomRequestParameters customRequestParameters, ITwitterRequest request);
    public sealed virtual IChunkUploadResult get_Result();
    private void UpdateMedia(IUploadedMediaInfo uploadedMediaInfos);
}
public interface Tweetinvi.Controllers.Upload.IUploadHelper {
    public abstract virtual Task WaitForMediaProcessingToGetAllMetadataAsync(IMedia media, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Upload.IUploadMediaStatusQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<IUploadedMediaInfo>> GetMediaStatusAsync(IMedia media, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.Upload.IUploadQueryExecutor {
    public abstract virtual Task`1<IChunkUploadResult> UploadBinaryAsync(IUploadParameters uploadQueryParameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult> AddMediaMetadataAsync(IAddMediaMetadataParameters metadata, ITwitterRequest request);
}
internal class Tweetinvi.Controllers.Upload.UploadAwaiter : object {
}
public class Tweetinvi.Controllers.Upload.UploadHelper : object {
    private IUploadMediaStatusQueryExecutor _uploadQueryExecutor;
    public UploadHelper(IUploadMediaStatusQueryExecutor uploadQueryExecutor);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.UploadHelper/<WaitForMediaProcessingToGetAllMetadataAsync>d__2")]
public sealed virtual Task WaitForMediaProcessingToGetAllMetadataAsync(IMedia media, ITwitterRequest request);
    private bool IsMediaProcessed(IUploadedMediaInfo mediaInfo);
    private bool IsMediaProcessed(IUploadProcessingInfo processInfo);
}
public class Tweetinvi.Controllers.Upload.UploadMediaStatusQueryExecutor : object {
    private ITwitterAccessor _twitterAccessor;
    public UploadMediaStatusQueryExecutor(ITwitterAccessor twitterAccessor);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.UploadMediaStatusQueryExecutor/<GetMediaStatusAsync>d__2")]
public sealed virtual Task`1<ITwitterResult`1<IUploadedMediaInfo>> GetMediaStatusAsync(IMedia media, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Upload.UploadQueryExecutor : object {
    private ITwitterAccessor _twitterAccessor;
    private IFactory`1<IChunkedUploader> _chunkedUploadFactory;
    private IUploadHelper _uploadHelper;
    public UploadQueryExecutor(ITwitterAccessor twitterAccessor, IFactory`1<IChunkedUploader> chunkedUploadFactory, IUploadHelper uploadHelper);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.UploadQueryExecutor/<UploadBinaryAsync>d__4")]
public sealed virtual Task`1<IChunkUploadResult> UploadBinaryAsync(IUploadParameters uploadQueryParameters, ITwitterRequest baseRequest);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.UploadQueryExecutor/<CalculateSizeAsync>d__5")]
private static Task`1<long> CalculateSizeAsync(string contentId, Byte[] binary);
    private static List`1<Byte[]> GetBinaryChunks(Byte[] binary, int chunkSize);
    private IChunkedUploader CreateChunkedUploader();
    public sealed virtual Task`1<ITwitterResult> AddMediaMetadataAsync(IAddMediaMetadataParameters metadata, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Controllers.Upload.UploadQueryExecutor/<GetMediaStatusAsync>d__9")]
public Task`1<ITwitterResult`1<IUploadedMediaInfo>> GetMediaStatusAsync(IMedia media, bool autoWait, ITwitterRequest request);
}
public class Tweetinvi.Controllers.Upload.UploadQueryGenerator : object {
    public sealed virtual string GetChunkedUploadInitQuery(IChunkUploadInitParameters parameters);
    public sealed virtual string GetChunkedUploadAppendQuery(IChunkUploadAppendParameters parameters);
    public sealed virtual string GetChunkedUploadFinalizeQuery(long mediaId, ICustomRequestParameters customRequestParameters);
}
public interface Tweetinvi.Controllers.User.IUserQueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> GetAuthenticatedUserAsync(IGetAuthenticatedUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> GetUserAsync(IGetUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO[]>> GetUsersAsync(IGetUsersParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFriendIdsAsync(IGetFriendIdsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFollowerIdsAsync(IGetFollowerIdsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> BlockUserAsync(IBlockUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> UnblockUserAsync(IUnblockUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> ReportUserForSpamAsync(IReportUserForSpamParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetBlockedUserIdsAsync(IGetBlockedUserIdsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetBlockedUsersAsync(IGetBlockedUsersParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> FollowUserAsync(IFollowUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> UnfollowUserAsync(IUnfollowUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsRequestingFriendshipAsync(IGetUserIdsRequestingFriendshipParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsYouRequestedToFollowAsync(IGetUserIdsYouRequestedToFollowParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> GetRelationshipBetweenAsync(IGetRelationshipBetweenParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IRelationshipStateDTO[]>> GetRelationshipsWithAsync(IGetRelationshipsWithParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetMutedUserIdsAsync(IGetMutedUserIdsParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMutedUsersAsync(IGetMutedUsersParameters cursoredParameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> MuteUserAsync(IMuteUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IUserDTO>> UnmuteUserAsync(IUnmuteUserParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> UpdateRelationshipAsync(IUpdateRelationshipParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<Int64[]>> GetUserIdsWhoseRetweetsAreMutedAsync(IGetUserIdsWhoseRetweetsAreMutedParameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<Stream> GetProfileImageStreamAsync(IGetProfileImageParameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.User.IUsersV2QueryExecutor {
    public abstract virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByIdV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByIdV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByNameV2Parameters parameters, ITwitterRequest request);
    public abstract virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByNameV2Parameters parameters, ITwitterRequest request);
}
public interface Tweetinvi.Controllers.User.IUsersV2QueryGenerator {
    public abstract virtual string GetUserQuery(IGetUserByIdV2Parameters parameters);
    public abstract virtual string GetUsersQuery(IGetUsersByIdV2Parameters parameters);
    public abstract virtual string GetUserQuery(IGetUserByNameV2Parameters parameters);
    public abstract virtual string GetUsersQuery(IGetUsersByNameV2Parameters parameters);
}
public class Tweetinvi.Controllers.User.UserController : object {
    private IUserQueryExecutor _userQueryExecutor;
    public UserController(IUserQueryExecutor userQueryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> GetAuthenticatedUserAsync(IGetAuthenticatedUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> GetUserAsync(IGetUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO[]>> GetUsersAsync(IGetUsersParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFriendIdsIterator(IGetFriendIdsParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFollowerIdsIterator(IGetFollowerIdsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> GetRelationshipBetweenAsync(IGetRelationshipBetweenParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<Stream> GetProfileImageStreamAsync(IGetProfileImageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> FollowUserAsync(IFollowUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> UpdateRelationshipAsync(IUpdateRelationshipParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnfollowUserAsync(IUnfollowUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipStateDTO[]>> GetRelationshipsWithAsync(IGetRelationshipsWithParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsRequestingFriendshipIterator(IGetUserIdsRequestingFriendshipParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsYouRequestedToFollowIterator(IGetUserIdsYouRequestedToFollowParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> BlockUserAsync(IBlockUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnblockUserAsync(IUnblockUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> ReportUserForSpamAsync(IReportUserForSpamParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetBlockedUserIdsIterator(IGetBlockedUserIdsParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetBlockedUsersIterator(IGetBlockedUsersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<Int64[]>> GetUserIdsWhoseRetweetsAreMutedAsync(IGetUserIdsWhoseRetweetsAreMutedParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetMutedUserIdsIterator(IGetMutedUserIdsParameters parameters, ITwitterRequest request);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMutedUsersIterator(IGetMutedUsersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> MuteUserAsync(IMuteUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnmuteUserAsync(IUnmuteUserParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.User.UserQueryExecutor : object {
    private IUserQueryGenerator _userQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    private IWebHelper _webHelper;
    public UserQueryExecutor(IUserQueryGenerator userQueryGenerator, ITwitterAccessor twitterAccessor, IWebHelper webHelper);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> GetAuthenticatedUserAsync(IGetAuthenticatedUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> GetUserAsync(IGetUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO[]>> GetUsersAsync(IGetUsersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFollowerIdsAsync(IGetFollowerIdsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFriendIdsAsync(IGetFriendIdsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> GetRelationshipBetweenAsync(IGetRelationshipBetweenParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<Stream> GetProfileImageStreamAsync(IGetProfileImageParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> BlockUserAsync(IBlockUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnblockUserAsync(IUnblockUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> ReportUserForSpamAsync(IReportUserForSpamParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetBlockedUserIdsAsync(IGetBlockedUserIdsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetBlockedUsersAsync(IGetBlockedUsersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> FollowUserAsync(IFollowUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> UpdateRelationshipAsync(IUpdateRelationshipParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnfollowUserAsync(IUnfollowUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsRequestingFriendshipAsync(IGetUserIdsRequestingFriendshipParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsYouRequestedToFollowAsync(IGetUserIdsYouRequestedToFollowParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipStateDTO[]>> GetRelationshipsWithAsync(IGetRelationshipsWithParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<Int64[]>> GetUserIdsWhoseRetweetsAreMutedAsync(IGetUserIdsWhoseRetweetsAreMutedParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetMutedUserIdsAsync(IGetMutedUserIdsParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMutedUsersAsync(IGetMutedUsersParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> MuteUserAsync(IMuteUserParameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnmuteUserAsync(IUnmuteUserParameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.User.UserQueryGenerator : object {
    private IUserQueryParameterGenerator _userQueryParameterGenerator;
    private IQueryParameterGenerator _queryParameterGenerator;
    public UserQueryGenerator(IUserQueryParameterGenerator userQueryParameterGenerator, IQueryParameterGenerator queryParameterGenerator);
    public sealed virtual string GetAuthenticatedUserQuery(IGetAuthenticatedUserParameters parameters);
    public sealed virtual string GetUserQuery(IGetUserParameters parameters);
    public sealed virtual string GetUsersQuery(IGetUsersParameters parameters);
    public sealed virtual string GetFriendIdsQuery(IGetFriendIdsParameters parameters);
    public sealed virtual string GetFollowerIdsQuery(IGetFollowerIdsParameters parameters);
    public sealed virtual string GetRelationshipBetweenQuery(IGetRelationshipBetweenParameters parameters);
    public sealed virtual string DownloadProfileImageURL(IGetProfileImageParameters parameters);
    public sealed virtual string GetBlockUserQuery(IBlockUserParameters parameters);
    public sealed virtual string GetUnblockUserQuery(IUnblockUserParameters parameters);
    public sealed virtual string GetReportUserForSpamQuery(IReportUserForSpamParameters parameters);
    public sealed virtual string GetBlockedUserIdsQuery(IGetBlockedUserIdsParameters parameters);
    public sealed virtual string GetBlockedUsersQuery(IGetBlockedUsersParameters parameters);
    public sealed virtual string GetFollowUserQuery(IFollowUserParameters parameters);
    public sealed virtual string GetUpdateRelationshipQuery(IUpdateRelationshipParameters parameters);
    public sealed virtual string GetUnfollowUserQuery(IUnfollowUserParameters parameters);
    public sealed virtual string GetUserIdsRequestingFriendshipQuery(IGetUserIdsRequestingFriendshipParameters parameters);
    public sealed virtual string GetUserIdsYouRequestedToFollowQuery(IGetUserIdsYouRequestedToFollowParameters parameters);
    public sealed virtual string GetRelationshipsWithQuery(IGetRelationshipsWithParameters parameters);
    public sealed virtual string GetUserIdsWhoseRetweetsAreMutedQuery(IGetUserIdsWhoseRetweetsAreMutedParameters parameters);
    public sealed virtual string GetMutedUserIdsQuery(IGetMutedUserIdsParameters parameters);
    public sealed virtual string GetMutedUsersQuery(IGetMutedUsersParameters parameters);
    public sealed virtual string GetMuteUserQuery(IMuteUserParameters parameters);
    public sealed virtual string GetUnmuteUserQuery(IUnmuteUserParameters parameters);
}
public class Tweetinvi.Controllers.User.UserQueryParameterGenerator : object {
    private string GenerateUserIdParameter(long userId, string parameterName);
    private string GenerateUserIdParameter(string userId, string parameterName);
    public string GenerateScreenNameParameter(string screenName, string parameterName);
    public sealed virtual string GenerateIdOrScreenNameParameter(IUserIdentifier user, string idParameterName, string screenNameParameterName);
    public sealed virtual void AppendUser(StringBuilder query, IUserIdentifier user);
    public sealed virtual void AppendUsers(StringBuilder query, IEnumerable`1<IUserIdentifier> users);
    private string GenerateCollectionParameter(String[] screenNames);
    public sealed virtual string GenerateListOfUserIdentifiersParameter(IEnumerable`1<IUserIdentifier> usersIdentifiers);
}
public class Tweetinvi.Controllers.User.UsersV2Controller : object {
    private IUsersV2QueryExecutor _queryExecutor;
    public UsersV2Controller(IUsersV2QueryExecutor queryExecutor);
    public sealed virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByIdV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByIdV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByNameV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByNameV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.User.UsersV2QueryExecutor : object {
    private IUsersV2QueryGenerator _tweetQueryGenerator;
    private ITwitterAccessor _twitterAccessor;
    public UsersV2QueryExecutor(IUsersV2QueryGenerator tweetQueryGenerator, ITwitterAccessor twitterAccessor);
    public sealed virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByIdV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByIdV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByNameV2Parameters parameters, ITwitterRequest request);
    public sealed virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByNameV2Parameters parameters, ITwitterRequest request);
}
public class Tweetinvi.Controllers.User.UsersV2QueryGenerator : object {
    public sealed virtual string GetUserQuery(IGetUserByIdV2Parameters parameters);
    public sealed virtual string GetUsersQuery(IGetUsersByIdV2Parameters parameters);
    public sealed virtual string GetUserQuery(IGetUserByNameV2Parameters parameters);
    public sealed virtual string GetUsersQuery(IGetUsersByNameV2Parameters parameters);
    private static void AddTweetFieldsParameters(IBaseUsersV2Parameters parameters, StringBuilder query);
}
