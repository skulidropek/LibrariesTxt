public class Tweetinvi.Security.BlockProcessor : object {
    private ICryptoTransform _transform;
    private Byte[] _block;
    private int _blockSize;
    private int _blockCount;
    public BlockProcessor(ICryptoTransform transform);
    public BlockProcessor(ICryptoTransform transform, int blockSize);
    protected virtual override void Finalize();
    public void Initialize();
    public void Core(Byte[] rgb);
    public void Core(Byte[] rgb, int ib, int cb);
    public Byte[] Final();
}
public class Tweetinvi.Security.CryptoConfig : object {
    public static object CreateFromName(string name);
}
public abstract class Tweetinvi.Security.HashAlgorithm : object {
    protected internal Byte[] _hashValue;
    protected int _hashSizeValue;
    protected int _state;
    private bool _disposed;
    public bool CanTransformMultipleBlocks { get; }
    public bool CanReuseTransform { get; }
    public Byte[] Hash { get; }
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual bool get_CanReuseTransform();
    public void Clear();
    public Byte[] ComputeHash(Byte[] buffer);
    public Byte[] ComputeHash(Byte[] buffer, int offset, int count);
    public Byte[] ComputeHash(Stream inputStream);
    public static HashAlgorithm Create();
    public static HashAlgorithm Create(string hashName);
    public virtual Byte[] get_Hash();
    protected abstract virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected abstract virtual Byte[] HashFinal();
    public virtual int get_HashSize();
    public abstract virtual void Initialize();
    protected virtual void Dispose(bool disposing);
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    private sealed virtual override void System.IDisposable.Dispose();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public abstract class Tweetinvi.Security.HMAC : KeyedHashAlgorithm {
    private bool _disposed;
    private string _hashName;
    private HashAlgorithm _algo;
    private BlockProcessor _block;
    private int _blockSizeValue;
    protected int BlockSizeValue { get; protected set; }
    public string HashName { get; public set; }
    public Byte[] Key { get; public set; }
    internal BlockProcessor Block { get; }
    protected int get_BlockSizeValue();
    protected void set_BlockSizeValue(int value);
    public string get_HashName();
    public void set_HashName(string value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    internal BlockProcessor get_Block();
    private Byte[] KeySetup(Byte[] key, byte padding);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
    public static HMAC Create();
    public static HMAC Create(string algorithmName);
}
public class Tweetinvi.Security.HMACSHA1 : HMAC {
    public HMACSHA1(Byte[] key);
}
public interface Tweetinvi.Security.ICryptoTransform {
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public abstract virtual bool get_CanReuseTransform();
    public abstract virtual bool get_CanTransformMultipleBlocks();
    public abstract virtual int get_InputBlockSize();
    public abstract virtual int get_OutputBlockSize();
    public abstract virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public abstract class Tweetinvi.Security.KeyedHashAlgorithm : HashAlgorithm {
    protected Byte[] _keyValue;
    public Byte[] Key { get; public set; }
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    public static KeyedHashAlgorithm Create();
    public static KeyedHashAlgorithm Create(string algName);
}
public abstract class Tweetinvi.Security.SHA1 : HashAlgorithm {
    public static SHA1 Create(string hashName);
}
public class Tweetinvi.Security.SHA1CryptoServiceProvider : SHA1 {
    private SHA1Internal _sha;
    protected virtual void HashCore(Byte[] rgb, int ibStart, int cbSize);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
internal class Tweetinvi.Security.SHA1Internal : object {
    private static int BLOCK_SIZE_BYTES;
    private UInt32[] _h;
    private ulong _count;
    private Byte[] _processingBuffer;
    private int _processingBufferCount;
    private UInt32[] _buff;
    public void HashCore(Byte[] rgb, int ibStart, int cbSize);
    public Byte[] HashFinal();
    public void Initialize();
    private void ProcessBlock(Byte[] inputBuffer, UInt32 inputOffset);
    private static void InitialiseBuff(UInt32[] buff, Byte[] input, UInt32 inputOffset);
    private static void FillBuff(UInt32[] buff);
    private void ProcessFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
    internal void AddLength(ulong length, Byte[] buffer, int position);
}
public class Tweetinvi.Security.System.Security.Cryptography.HMACSHA1Generator : object {
    public Byte[] ComputeHash(Byte[] source, Byte[] key);
    public Byte[] ComputeHash(string source, string key, Encoding encoding);
}
