public class Tweetinvi.Streams.AccountActivityStream : object {
    private IJObjectStaticWrapper _jObjectWrapper;
    private IJsonObjectConverter _jsonObjectConverter;
    private ITwitterClientFactories _factories;
    private Dictionary`2<string, Action`2<string, JObject>> _events;
    [CompilerGeneratedAttribute]
private long <AccountUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetCreatedEvent> <TweetCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetFavoritedEvent> <TweetFavorited>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetDeletedEvent> <TweetDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserFollowedEvent> <UserFollowed>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserUnfollowedEvent> <UserUnfollowed>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserBlockedEvent> <UserBlocked>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserUnblockedEvent> <UserUnblocked>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserMutedEvent> <UserMuted>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserUnmutedEvent> <UserUnmuted>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserRevokedAppPermissionsEvent> <UserRevokedAppPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageReceivedEvent> <MessageReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<MessageSentEvent> <MessageSent>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserIsTypingMessageEvent> <UserIsTypingMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserReadMessageConversationEvent> <UserReadMessageConversation>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnsupportedMessageReceivedEvent> <UnsupportedEventReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EventKnownButNotSupported> <EventKnownButNotFullySupportedReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<AccountActivityEvent> <EventReceived>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnexpectedExceptionThrownEvent> <UnexpectedExceptionThrown>k__BackingField;
    public long AccountUserId { get; public set; }
    public EventHandler`1<TweetCreatedEvent> TweetCreated { get; public set; }
    public EventHandler`1<TweetFavoritedEvent> TweetFavorited { get; public set; }
    public EventHandler`1<TweetDeletedEvent> TweetDeleted { get; public set; }
    public EventHandler`1<UserFollowedEvent> UserFollowed { get; public set; }
    public EventHandler`1<UserUnfollowedEvent> UserUnfollowed { get; public set; }
    public EventHandler`1<UserBlockedEvent> UserBlocked { get; public set; }
    public EventHandler`1<UserUnblockedEvent> UserUnblocked { get; public set; }
    public EventHandler`1<UserMutedEvent> UserMuted { get; public set; }
    public EventHandler`1<UserUnmutedEvent> UserUnmuted { get; public set; }
    public EventHandler`1<UserRevokedAppPermissionsEvent> UserRevokedAppPermissions { get; public set; }
    public EventHandler`1<MessageReceivedEvent> MessageReceived { get; public set; }
    public EventHandler`1<MessageSentEvent> MessageSent { get; public set; }
    public EventHandler`1<UserIsTypingMessageEvent> UserIsTypingMessage { get; public set; }
    public EventHandler`1<UserReadMessageConversationEvent> UserReadMessageConversation { get; public set; }
    public EventHandler`1<UnsupportedMessageReceivedEvent> UnsupportedEventReceived { get; public set; }
    public EventHandler`1<EventKnownButNotSupported> EventKnownButNotFullySupportedReceived { get; public set; }
    public EventHandler`1<AccountActivityEvent> EventReceived { get; public set; }
    public EventHandler`1<UnexpectedExceptionThrownEvent> UnexpectedExceptionThrown { get; public set; }
    public AccountActivityStream(IJObjectStaticWrapper jObjectWrapper, IJsonObjectConverter jsonObjectConverter, ITwitterClientFactories factories);
    private void InitializeEvents();
    [CompilerGeneratedAttribute]
public sealed virtual long get_AccountUserId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AccountUserId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<TweetCreatedEvent> get_TweetCreated();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TweetCreated(EventHandler`1<TweetCreatedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<TweetFavoritedEvent> get_TweetFavorited();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TweetFavorited(EventHandler`1<TweetFavoritedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<TweetDeletedEvent> get_TweetDeleted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TweetDeleted(EventHandler`1<TweetDeletedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserFollowedEvent> get_UserFollowed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserFollowed(EventHandler`1<UserFollowedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserUnfollowedEvent> get_UserUnfollowed();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserUnfollowed(EventHandler`1<UserUnfollowedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserBlockedEvent> get_UserBlocked();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserBlocked(EventHandler`1<UserBlockedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserUnblockedEvent> get_UserUnblocked();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserUnblocked(EventHandler`1<UserUnblockedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserMutedEvent> get_UserMuted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserMuted(EventHandler`1<UserMutedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserUnmutedEvent> get_UserUnmuted();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserUnmuted(EventHandler`1<UserUnmutedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserRevokedAppPermissionsEvent> get_UserRevokedAppPermissions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserRevokedAppPermissions(EventHandler`1<UserRevokedAppPermissionsEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<MessageReceivedEvent> get_MessageReceived();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageReceived(EventHandler`1<MessageReceivedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<MessageSentEvent> get_MessageSent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MessageSent(EventHandler`1<MessageSentEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserIsTypingMessageEvent> get_UserIsTypingMessage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserIsTypingMessage(EventHandler`1<UserIsTypingMessageEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UserReadMessageConversationEvent> get_UserReadMessageConversation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserReadMessageConversation(EventHandler`1<UserReadMessageConversationEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UnsupportedMessageReceivedEvent> get_UnsupportedEventReceived();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnsupportedEventReceived(EventHandler`1<UnsupportedMessageReceivedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<EventKnownButNotSupported> get_EventKnownButNotFullySupportedReceived();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EventKnownButNotFullySupportedReceived(EventHandler`1<EventKnownButNotSupported> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<AccountActivityEvent> get_EventReceived();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EventReceived(EventHandler`1<AccountActivityEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual EventHandler`1<UnexpectedExceptionThrownEvent> get_UnexpectedExceptionThrown();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UnexpectedExceptionThrown(EventHandler`1<UnexpectedExceptionThrownEvent> value);
    public sealed virtual void WebhookMessageReceived(IWebhookMessage message);
    private void TryRaiseTweetCreatedEvents(string eventName, JObject jsonObjectEvent);
    private void TryRaiseTweetDeletedEvents(string eventName, JObject jsonObjectEvent);
    private void TryRaiseTweetFavoritedEvents(string eventName, JObject jsonObjectEvent);
    private void TryRaiseFollowedEvents(string eventName, JObject jsonObjectEvent);
    private void TryRaiseUserBlockedEvents(string eventName, JObject jsonObjectEvent);
    private void TryRaiseUserMutedEvents(string eventName, JObject jsonObjectEvent);
    private void TryRaiseUserEvent(string eventName, JObject jsonObjectEvent);
    private void TryRaiseMessageEvent(string eventName, JObject jsonObjectEvent);
    private void TryRaiseIndicateUserIsTypingMessage(string eventName, JObject jsonObjectEvent);
    private void TryRaiseMessageReadEvent(string eventName, JObject jsonObjectEvent);
    private AccountActivityUserToUserEventDTO[] ExtractUserToUserEventDTOs(JToken userToUserEvent);
    private AccountActivityUserToUserEventDTO[] ExtractUserToUserEventDTOs(string userToUserEventJson);
}
public class Tweetinvi.Streams.FilteredStream : TrackedStream {
    [CompilerGeneratedAttribute]
private IStreamTrackManager`1<ITweet> <StreamTrackManager>k__BackingField;
    private ITwitterClient _client;
    private IFilterStreamTweetMatcherFactory _filterStreamTweetMatcherFactory;
    private ITwitterClientFactories _factories;
    private static int MAXIMUM_TRACKED_LOCATIONS_AUTHORIZED;
    private static int MAXIMUM_TRACKED_USER_ID_AUTHORIZED;
    [CompilerGeneratedAttribute]
private MatchOn <MatchOn>k__BackingField;
    private IFilterStreamTweetMatcher _filterStreamTweetMatcher;
    private Dictionary`2<Nullable`1<long>, Action`1<ITweet>> _followingUserIds;
    private Dictionary`2<ILocation, Action`1<ITweet>> _locations;
    private IStreamTrackManager`1<ITweet> StreamTrackManager { get; }
    public MatchOn MatchOn { get; public set; }
    public Dictionary`2<Nullable`1<long>, Action`1<ITweet>> FollowingUserIds { get; }
    public Dictionary`2<ILocation, Action`1<ITweet>> Locations { get; }
    public FilteredStream(ITwitterClient client, IStreamTrackManager`1<ITweet> streamTrackManager, IFilterStreamTweetMatcherFactory filterStreamTweetMatcherFactory, IJsonObjectConverter jsonObjectConverter, IJObjectStaticWrapper jObjectStaticWrapper, IStreamResultGenerator streamResultGenerator, ITwitterClientFactories factories, ICreateFilteredTweetStreamParameters createFilteredTweetStreamParameters);
    [CompilerGeneratedAttribute]
private IStreamTrackManager`1<ITweet> get_StreamTrackManager();
    [CompilerGeneratedAttribute]
public sealed virtual MatchOn get_MatchOn();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MatchOn(MatchOn value);
    public sealed virtual Dictionary`2<Nullable`1<long>, Action`1<ITweet>> get_FollowingUserIds();
    public sealed virtual Dictionary`2<ILocation, Action`1<ITweet>> get_Locations();
    [AsyncStateMachineAttribute("Tweetinvi.Streams.FilteredStream/<StartMatchingAnyConditionAsync>d__20")]
public sealed virtual Task StartMatchingAnyConditionAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Streams.FilteredStream/<StartMatchingAllConditionsAsync>d__21")]
public sealed virtual Task StartMatchingAllConditionsAsync();
    public sealed virtual MatchOn CheckIfTweetMatchesStreamFilters(ITweet tweet);
    private bool DoestTheTweetMatchAllConditions(ITweet tweet, String[] matchingTracks, ILocation[] matchingLocations, Int64[] matchingFollowers);
    private StringBuilder GenerateORFilterQuery();
    private StringBuilder GenerateANDFilterQuery();
    public sealed virtual void AddFollow(long userId, Action`1<ITweet> userPublishedTweet);
    public sealed virtual void AddFollow(IUserIdentifier user, Action`1<ITweet> userPublishedTweet);
    public sealed virtual void RemoveFollow(long userId);
    public sealed virtual void RemoveFollow(IUserIdentifier user);
    public sealed virtual bool ContainsFollow(long userId);
    public sealed virtual bool ContainsFollow(IUserIdentifier user);
    public sealed virtual void ClearFollows();
    public sealed virtual ILocation AddLocation(ICoordinates coordinate1, ICoordinates coordinate2, Action`1<ITweet> locationDetected);
    public sealed virtual void AddLocation(ILocation location, Action`1<ITweet> locationDetected);
    public sealed virtual void RemoveLocation(ICoordinates coordinate1, ICoordinates coordinate2);
    public sealed virtual void RemoveLocation(ILocation location);
    public sealed virtual bool ContainsLocation(ICoordinates coordinate1, ICoordinates coordinate2);
    public sealed virtual bool ContainsLocation(ILocation location);
    public sealed virtual void ClearLocations();
    [CompilerGeneratedAttribute]
private ITwitterRequest <StartMatchingAnyConditionAsync>g__CreateTwitterRequest|20_0();
    [CompilerGeneratedAttribute]
private void <StartMatchingAnyConditionAsync>g__OnJsonReceived|20_1(string json);
    [CompilerGeneratedAttribute]
private ITwitterRequest <StartMatchingAllConditionsAsync>g__CreateTwitterRequest|21_0();
    [CompilerGeneratedAttribute]
private void <StartMatchingAllConditionsAsync>g__JsonReceived|21_1(string json);
}
public class Tweetinvi.Streams.FilteredStreamMatcherConfig`1 : object {
    [CompilerGeneratedAttribute]
private MatchOn <MatchOn>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<T, Action`1<ITweet>> <TweetMatchingTrackAndActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<T, Action`1<ITweet>> <RetweetMatchingTrackAndActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<T, Action`1<ITweet>> <QuotedTweetMatchingTrackAndActions>k__BackingField;
    public MatchOn MatchOn { get; }
    public Dictionary`2<T, Action`1<ITweet>> TweetMatchingTrackAndActions { get; }
    public Dictionary`2<T, Action`1<ITweet>> RetweetMatchingTrackAndActions { get; }
    public Dictionary`2<T, Action`1<ITweet>> QuotedTweetMatchingTrackAndActions { get; }
    public FilteredStreamMatcherConfig`1(MatchOn matchOn);
    [CompilerGeneratedAttribute]
public MatchOn get_MatchOn();
    [CompilerGeneratedAttribute]
public Dictionary`2<T, Action`1<ITweet>> get_TweetMatchingTrackAndActions();
    [CompilerGeneratedAttribute]
public Dictionary`2<T, Action`1<ITweet>> get_RetweetMatchingTrackAndActions();
    [CompilerGeneratedAttribute]
public Dictionary`2<T, Action`1<ITweet>> get_QuotedTweetMatchingTrackAndActions();
    public Dictionary`2<T, Action`1<ITweet>> GetAllMatchingTracks();
}
public class Tweetinvi.Streams.FilteredStreamV2 : TweetStreamV2`1<FilteredStreamTweetV2EventArgs> {
    private ITwitterClient _client;
    private ITweetsV2QueryGenerator _tweetsV2QueryGenerator;
    public FilteredStreamV2(ITwitterClient client, IStreamResultGenerator streamResultGenerator, ITweetsV2QueryGenerator tweetsV2QueryGenerator);
    public sealed virtual Task StartAsync();
    public sealed virtual Task StartAsync(IStartFilteredStreamV2Parameters parameters);
    [CompilerGeneratedAttribute]
private FilteredStreamTweetV2EventArgs <StartAsync>b__4_0(string json);
}
public class Tweetinvi.Streams.FilterStreamTweetMatcher : object {
    private IStreamTrackManager`1<ITweet> _streamTrackManager;
    private Dictionary`2<ILocation, Action`1<ITweet>> _locations;
    private Dictionary`2<Nullable`1<long>, Action`1<ITweet>> _followingUserIds;
    public FilterStreamTweetMatcher(IStreamTrackManager`1<ITweet> streamTrackManager, Dictionary`2<ILocation, Action`1<ITweet>> locations, Dictionary`2<Nullable`1<long>, Action`1<ITweet>> followingUserIds);
    public sealed virtual MatchedTweetReceivedEventArgs GetMatchingTweetEventArgsAndRaiseMatchingElements(ITweet tweet, string json, MatchOn matchOn);
    private void UpdateMatchesBasedOnTweetText(ITweet tweet, FilteredStreamMatcherConfig`1<string> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingTracksInTweetText(ITweet tweet, Dictionary`2<string, Action`1<ITweet>> matchingTrackAndActions, Action onTrackFound);
    private void UpdateMatchesBasedOnUrlEntities(ITweet tweet, FilteredStreamMatcherConfig`1<string> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingTracksInTweetUrls(ITweet tweet, Dictionary`2<string, Action`1<ITweet>> matchingTrackAndActions, Action onTrackFound);
    private void UpdateMatchesBasedOnHashTagEntities(ITweet tweet, FilteredStreamMatcherConfig`1<string> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingTracksInHashTags(ITweet tweet, Dictionary`2<string, Action`1<ITweet>> matchingTrackAndActions, Action onTrackFound);
    private void UpdateMatchesBasedOnUserMentions(ITweet tweet, FilteredStreamMatcherConfig`1<string> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingTracksInUserMentions(ITweet tweet, Dictionary`2<string, Action`1<ITweet>> matchingTrackAndActions, Action onTrackFound);
    private void UpdateMatchesBasedOnSymbols(ITweet tweet, FilteredStreamMatcherConfig`1<string> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingTracksInSymbols(ITweet tweet, Dictionary`2<string, Action`1<ITweet>> matchingTrackAndActions, Action onTrackFound);
    private void UpdateMatchesBasedOnTweetLocation(ITweet tweet, FilteredStreamMatcherConfig`1<ILocation> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingLocations(ITweet tweet, Dictionary`2<ILocation, Action`1<ITweet>> matchingLocationAndActions, Action onTrackFound);
    private void UpdateMatchesBasedOnTweetCreator(ITweet tweet, FilteredStreamMatcherConfig`1<long> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingFollowersBasedOnTweetCreator(ITweet tweet, Dictionary`2<long, Action`1<ITweet>> matchingFollowersAndActions, Action onTrackFound);
    private void UpdateMatchesBasedOnTweetInReplyToUser(ITweet tweet, FilteredStreamMatcherConfig`1<long> config, MatchedTweetReceivedEventArgs result);
    private void GetMatchingFollowersBasedOnTweetReply(ITweet tweet, Dictionary`2<long, Action`1<ITweet>> matchingFollowersAndActions, Action onFollowersFound);
    private IEnumerable`1<KeyValuePair`2<ILocation, Action`1<ITweet>>> GetMatchedLocations(ITweet tweet);
    private IEnumerable`1<KeyValuePair`2<ILocation, Action`1<ITweet>>> GetMatchedLocations(ICoordinates[] coordinates);
    private IEnumerable`1<KeyValuePair`2<ILocation, Action`1<ITweet>>> GetMatchedLocations(ICoordinates coordinates);
    private void CallMultipleActions(T tweet, IEnumerable`1<Action`1<T>> actions);
}
public class Tweetinvi.Streams.FilterStreamTweetMatcherFactory : object {
    public sealed virtual IFilterStreamTweetMatcher Create(IStreamTrackManager`1<ITweet> streamTrackManager, Dictionary`2<ILocation, Action`1<ITweet>> locations, Dictionary`2<Nullable`1<long>, Action`1<ITweet>> followingUserIds);
}
public class Tweetinvi.Streams.Helpers.QueryGeneratorHelper : object {
    public static string GenerateFilterTrackRequest(List`1<string> tracks);
    public static string GenerateFilterFollowRequest(List`1<Nullable`1<long>> followUserIds);
    private static string GenerateLocationParameters(ILocation location, bool isLastLocation);
    public static string GenerateFilterLocationRequest(List`1<ILocation> locations);
}
public class Tweetinvi.Streams.Helpers.StreamResultGenerator : object {
    [CompilerGeneratedAttribute]
private EventHandler StreamStarted;
    [CompilerGeneratedAttribute]
private EventHandler StreamResumed;
    [CompilerGeneratedAttribute]
private EventHandler StreamPaused;
    [CompilerGeneratedAttribute]
private EventHandler`1<StreamStoppedEventArgs> StreamStopped;
    [CompilerGeneratedAttribute]
private EventHandler KeepAliveReceived;
    private IStreamTask _currentStreamTask;
    private IStreamTaskFactory _streamTaskFactory;
    private object _lockStream;
    private bool IsRunning { get; }
    public StreamState StreamState { get; }
    public StreamResultGenerator(IStreamTaskFactory streamTaskFactory);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StreamStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StreamStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StreamResumed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StreamResumed(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StreamPaused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StreamPaused(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StreamStopped(EventHandler`1<StreamStoppedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StreamStopped(EventHandler`1<StreamStoppedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_KeepAliveReceived(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_KeepAliveReceived(EventHandler value);
    private bool get_IsRunning();
    public sealed virtual StreamState get_StreamState();
    [AsyncStateMachineAttribute("Tweetinvi.Streams.Helpers.StreamResultGenerator/<StartAsync>d__23")]
public sealed virtual Task StartAsync(Action`1<string> onJsonReceivedCallback, Func`1<ITwitterRequest> createTwitterRequest);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.Helpers.StreamResultGenerator/<StartAsync>d__24")]
public sealed virtual Task StartAsync(Func`2<string, bool> onJsonReceivedCallback, Func`1<ITwitterRequest> createTwitterRequest);
    private void StreamTaskStarted(object sender, EventArgs eventArgs);
    private void StreamTaskStateChanged(object sender, StreamTaskStateChangedEventArgs args);
    public sealed virtual void ResumeStream();
    public sealed virtual void PauseStream();
    public sealed virtual void StopStream();
    public sealed virtual void StopStream(Exception exception, IDisconnectMessage disconnectMessage);
    private StreamStoppedEventArgs StopStreamAndUnsubscribeFromEvents();
}
public class Tweetinvi.Streams.Helpers.StreamTrackManager`1 : object {
    private bool _refreshTracking;
    private static Regex _matchWordRegex;
    private Dictionary`2<string, Action`1<T>> _tracks;
    private List`1<String[]> _tracksKeywords;
    [CompilerGeneratedAttribute]
private int <MaxTracks>k__BackingField;
    private HashSet`1<string> _uniqueKeywordsHashSet;
    private String[][] _tracksKeywordsArray;
    private Regex _matchingRegex;
    public Dictionary`2<string, Action`1<T>> Tracks { get; }
    public int TracksCount { get; }
    public int MaxTracks { get; }
    public StreamTrackManager`1(int maxTrack);
    private static StreamTrackManager`1();
    public sealed virtual Dictionary`2<string, Action`1<T>> get_Tracks();
    public sealed virtual int get_TracksCount();
    [CompilerGeneratedAttribute]
public sealed virtual int get_MaxTracks();
    public sealed virtual void AddTrack(string track, Action`1<T> trackReceived);
    public sealed virtual void RemoveTrack(string track);
    public sealed virtual bool ContainsTrack(string track);
    public sealed virtual void ClearTracks();
    private void RefreshTracking();
    public sealed virtual bool Matches(string input);
    public sealed virtual bool MatchesAll(string input);
    private List`1<string> _matchingCharacters(string input);
    public sealed virtual List`1<string> GetMatchingCharacters(string input);
    public sealed virtual List`1<string> GetMatchingTracks(string input);
    private List`1<Tuple`2<string, Action`1<T>>> _matchingTracks(string input);
    private String[] GetMatchingKeywords(string input);
    public sealed virtual List`1<Tuple`2<string, Action`1<T>>> GetMatchingTracksAndActions(string input);
    [CompilerGeneratedAttribute]
private bool <GetMatchingKeywords>b__27_0(Match match);
    [CompilerGeneratedAttribute]
private bool <GetMatchingKeywords>b__27_2(Match match);
}
public interface Tweetinvi.Streams.IFilterStreamTweetMatcher {
    public abstract virtual MatchedTweetReceivedEventArgs GetMatchingTweetEventArgsAndRaiseMatchingElements(ITweet tweet, string json, MatchOn matchOn);
}
public interface Tweetinvi.Streams.IFilterStreamTweetMatcherFactory {
    public abstract virtual IFilterStreamTweetMatcher Create(IStreamTrackManager`1<ITweet> streamTrackManager, Dictionary`2<ILocation, Action`1<ITweet>> locations, Dictionary`2<Nullable`1<long>, Action`1<ITweet>> followingUserIds);
}
public interface Tweetinvi.Streams.IStreamTask {
    public StreamState StreamState { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_StreamStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StreamStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StreamStateChanged(EventHandler`1<StreamTaskStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StreamStateChanged(EventHandler`1<StreamTaskStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_KeepAliveReceived(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_KeepAliveReceived(EventHandler value);
    public abstract virtual StreamState get_StreamState();
    public abstract virtual Task StartAsync();
    public abstract virtual void Resume();
    public abstract virtual void Pause();
    public abstract virtual void Stop();
}
public interface Tweetinvi.Streams.IStreamTaskFactory {
    public abstract virtual IStreamTask Create(Func`2<string, bool> onJsonReceivedCallback, Func`1<ITwitterRequest> createTwitterRequest);
}
public class Tweetinvi.Streams.Model.AccessRevokedInfo : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [JsonPropertyAttribute("client_application")]
private AccessRevokedClientApplication _accessRevokedClientApplication;
    [JsonPropertyAttribute("token")]
public string Token { get; private set; }
    [JsonIgnoreAttribute]
public long ApplicationId { get; }
    [JsonIgnoreAttribute]
public string ApplicationURL { get; }
    [JsonIgnoreAttribute]
public string ApplicationConsumerKey { get; }
    [JsonIgnoreAttribute]
public string ApplicationName { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Token();
    [CompilerGeneratedAttribute]
private void set_Token(string value);
    public sealed virtual long get_ApplicationId();
    public sealed virtual string get_ApplicationURL();
    public sealed virtual string get_ApplicationConsumerKey();
    public sealed virtual string get_ApplicationName();
}
public class Tweetinvi.Streams.Model.AccountActivity.AccountActivityFavoriteEventDTO : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserDTO <User>k__BackingField;
    [CompilerGeneratedAttribute]
private ITweetDTO <FavoritedTweet>k__BackingField;
    public string Id { get; public set; }
    [JsonPropertyAttribute("user")]
public IUserDTO User { get; public set; }
    [JsonPropertyAttribute("favorited_status")]
public ITweetDTO FavoritedTweet { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IUserDTO get_User();
    [CompilerGeneratedAttribute]
public void set_User(IUserDTO value);
    [CompilerGeneratedAttribute]
public ITweetDTO get_FavoritedTweet();
    [CompilerGeneratedAttribute]
public void set_FavoritedTweet(ITweetDTO value);
}
public class Tweetinvi.Streams.Model.AccountActivity.AccountActivityMessageCreatedEventDTO : BaseAccountActivityMessageEventDTO {
    [CompilerGeneratedAttribute]
private MessageEventDTO[] <MessageEvents>k__BackingField;
    [JsonPropertyAttribute("direct_message_events")]
public MessageEventDTO[] MessageEvents { get; public set; }
    [CompilerGeneratedAttribute]
public MessageEventDTO[] get_MessageEvents();
    [CompilerGeneratedAttribute]
public void set_MessageEvents(MessageEventDTO[] value);
}
public class Tweetinvi.Streams.Model.AccountActivity.AccountActivityTweetDeletedEventDTO : object {
    [CompilerGeneratedAttribute]
private AccountActivityTweetDeletedEventStatusDTO <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Timestamp>k__BackingField;
    [JsonPropertyAttribute("status")]
public AccountActivityTweetDeletedEventStatusDTO Status { get; public set; }
    [JsonPropertyAttribute("timestamp_ms")]
public long Timestamp { get; public set; }
    [CompilerGeneratedAttribute]
public AccountActivityTweetDeletedEventStatusDTO get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(AccountActivityTweetDeletedEventStatusDTO value);
    [CompilerGeneratedAttribute]
public long get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(long value);
}
public class Tweetinvi.Streams.Model.AccountActivity.AccountActivityTweetDeletedEventStatusDTO : object {
    [CompilerGeneratedAttribute]
private long <TweetId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [JsonPropertyAttribute("id")]
public long TweetId { get; public set; }
    [JsonPropertyAttribute("user_id")]
public long UserId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_TweetId();
    [CompilerGeneratedAttribute]
public void set_TweetId(long value);
    [CompilerGeneratedAttribute]
public long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
}
public class Tweetinvi.Streams.Model.AccountActivity.AccountActivityUserIsTypingMessageDTO : BaseAccountActivityMessageEventDTO {
    [CompilerGeneratedAttribute]
private ActivityStreamDirectMessageConversationEventDTO[] <TypingEvents>k__BackingField;
    [JsonPropertyAttribute("direct_message_indicate_typing_events")]
public ActivityStreamDirectMessageConversationEventDTO[] TypingEvents { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityStreamDirectMessageConversationEventDTO[] get_TypingEvents();
    [CompilerGeneratedAttribute]
public void set_TypingEvents(ActivityStreamDirectMessageConversationEventDTO[] value);
}
public class Tweetinvi.Streams.Model.AccountActivity.AccountActivityUserReadMessageConversationDTO : BaseAccountActivityMessageEventDTO {
    [CompilerGeneratedAttribute]
private ActivityStreamDirectMessageConversationEventDTO[] <MessageConversationReadEvents>k__BackingField;
    [JsonPropertyAttribute("direct_message_mark_read_events")]
public ActivityStreamDirectMessageConversationEventDTO[] MessageConversationReadEvents { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityStreamDirectMessageConversationEventDTO[] get_MessageConversationReadEvents();
    [CompilerGeneratedAttribute]
public void set_MessageConversationReadEvents(ActivityStreamDirectMessageConversationEventDTO[] value);
}
public class Tweetinvi.Streams.Model.AccountActivity.AccountActivityUserToUserEventDTO : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserDTO <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserDTO <Target>k__BackingField;
    public string Type { get; public set; }
    [JsonPropertyAttribute("created_timestamp")]
public string CreatedTimestamp { get; public set; }
    [JsonPropertyAttribute("source")]
public IUserDTO Source { get; public set; }
    [JsonPropertyAttribute("target")]
public IUserDTO Target { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_CreatedTimestamp();
    [CompilerGeneratedAttribute]
public void set_CreatedTimestamp(string value);
    [CompilerGeneratedAttribute]
public IUserDTO get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(IUserDTO value);
    [CompilerGeneratedAttribute]
public IUserDTO get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(IUserDTO value);
}
public class Tweetinvi.Streams.Model.AccountActivity.ActivityStreamAppIdentifierDTO : object {
    [CompilerGeneratedAttribute]
private long <AppId>k__BackingField;
    [JsonPropertyAttribute("app_id")]
public long AppId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_AppId();
    [CompilerGeneratedAttribute]
public void set_AppId(long value);
}
public class Tweetinvi.Streams.Model.AccountActivity.ActivityStreamDirectMessageConversationEventDTO : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreatedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SenderId>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityStreamTargetRecipientDTO <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastReadEventId>k__BackingField;
    [JsonPropertyAttribute("created_timestamp")]
[JsonConverterAttribute("Tweetinvi.Core.JsonConverters.JsonPropertyConverterRepository")]
public DateTimeOffset CreatedAt { get; public set; }
    [JsonPropertyAttribute("sender_id")]
public long SenderId { get; public set; }
    [JsonPropertyAttribute("target")]
public ActivityStreamTargetRecipientDTO Target { get; public set; }
    [JsonPropertyAttribute("last_read_event_id")]
public string LastReadEventId { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreatedAt();
    [CompilerGeneratedAttribute]
public void set_CreatedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public long get_SenderId();
    [CompilerGeneratedAttribute]
public void set_SenderId(long value);
    [CompilerGeneratedAttribute]
public ActivityStreamTargetRecipientDTO get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(ActivityStreamTargetRecipientDTO value);
    [CompilerGeneratedAttribute]
public string get_LastReadEventId();
    [CompilerGeneratedAttribute]
public void set_LastReadEventId(string value);
}
public class Tweetinvi.Streams.Model.AccountActivity.ActivityStreamTargetRecipientDTO : object {
    [CompilerGeneratedAttribute]
private long <RecipientId>k__BackingField;
    [JsonPropertyAttribute("recipient_id")]
public long RecipientId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_RecipientId();
    [CompilerGeneratedAttribute]
public void set_RecipientId(long value);
}
public class Tweetinvi.Streams.Model.AccountActivity.ActivityStreamUserIdentifierDTO : object {
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [JsonPropertyAttribute("user_id")]
public long UserId { get; public set; }
    [CompilerGeneratedAttribute]
public long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
}
public class Tweetinvi.Streams.Model.AccountActivity.ActivityStreamUserRevokedAppPermissionsDTO : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <DateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityStreamAppIdentifierDTO <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivityStreamUserIdentifierDTO <Source>k__BackingField;
    [JsonPropertyAttribute("date_time")]
public DateTimeOffset DateTime { get; public set; }
    [JsonPropertyAttribute("target")]
public ActivityStreamAppIdentifierDTO Target { get; public set; }
    [JsonPropertyAttribute("source")]
public ActivityStreamUserIdentifierDTO Source { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_DateTime();
    [CompilerGeneratedAttribute]
public void set_DateTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public ActivityStreamAppIdentifierDTO get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(ActivityStreamAppIdentifierDTO value);
    [CompilerGeneratedAttribute]
public ActivityStreamUserIdentifierDTO get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(ActivityStreamUserIdentifierDTO value);
}
public class Tweetinvi.Streams.Model.AccountActivity.BaseAccountActivityMessageEventDTO : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, App> <Apps>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, UserDTO> <UsersById>k__BackingField;
    [JsonPropertyAttribute("apps")]
public Dictionary`2<string, App> Apps { get; public set; }
    [JsonPropertyAttribute("users")]
public Dictionary`2<string, UserDTO> UsersById { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, App> get_Apps();
    [CompilerGeneratedAttribute]
public void set_Apps(Dictionary`2<string, App> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, UserDTO> get_UsersById();
    [CompilerGeneratedAttribute]
public void set_UsersById(Dictionary`2<string, UserDTO> value);
}
public class Tweetinvi.Streams.Model.DisconnectMessage : object {
    [CompilerGeneratedAttribute]
private int <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StreamName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Reason>k__BackingField;
    [JsonPropertyAttribute("code")]
public int Code { get; public set; }
    [JsonPropertyAttribute("stream_name")]
public string StreamName { get; public set; }
    [JsonPropertyAttribute("reason")]
public string Reason { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_Code();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Code(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StreamName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StreamName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Reason();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Reason(string value);
}
public class Tweetinvi.Streams.Model.TweetDeletedInfo : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserIdStr>k__BackingField;
    [JsonPropertyAttribute("id")]
public long Id { get; public set; }
    [JsonPropertyAttribute("id_str")]
public string IdStr { get; public set; }
    [JsonPropertyAttribute("user_id")]
public long UserId { get; public set; }
    [JsonPropertyAttribute("user_id_str")]
public string UserIdStr { get; public set; }
    [CompilerGeneratedAttribute]
public long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public string get_IdStr();
    [CompilerGeneratedAttribute]
public void set_IdStr(string value);
    [CompilerGeneratedAttribute]
public long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public string get_UserIdStr();
    [CompilerGeneratedAttribute]
public void set_UserIdStr(string value);
}
public class Tweetinvi.Streams.Model.TweetLocationDeletedInfo : object {
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UpToStatusId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpToStatusIdStr>k__BackingField;
    [JsonPropertyAttribute("user_id")]
public long UserId { get; public set; }
    [JsonPropertyAttribute("user_id_str")]
public string UserIdStr { get; public set; }
    [JsonPropertyAttribute("up_to_status_id")]
public long UpToStatusId { get; public set; }
    [JsonPropertyAttribute("up_to_status_id_str")]
public string UpToStatusIdStr { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserIdStr();
    [CompilerGeneratedAttribute]
public void set_UserIdStr(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_UpToStatusId();
    [CompilerGeneratedAttribute]
public void set_UpToStatusId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UpToStatusIdStr();
    [CompilerGeneratedAttribute]
public void set_UpToStatusIdStr(string value);
}
public class Tweetinvi.Streams.Model.TweetLocationRemovedInfo : object {
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserIdStr>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UpToStatusId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpToStatusIdStr>k__BackingField;
    [JsonPropertyAttribute("user_id")]
public long UserId { get; public set; }
    [JsonPropertyAttribute("user_id_str")]
public string UserIdStr { get; public set; }
    [JsonPropertyAttribute("up_to_status_id")]
public long UpToStatusId { get; public set; }
    [JsonPropertyAttribute("up_to_status_id_str")]
public string UpToStatusIdStr { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserIdStr();
    [CompilerGeneratedAttribute]
public void set_UserIdStr(string value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_UpToStatusId();
    [CompilerGeneratedAttribute]
public void set_UpToStatusId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UpToStatusIdStr();
    [CompilerGeneratedAttribute]
public void set_UpToStatusIdStr(string value);
}
public class Tweetinvi.Streams.Model.TweetWitheldInfo : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WitheldInCountries>k__BackingField;
    [JsonPropertyAttribute("id")]
public long Id { get; public set; }
    [JsonPropertyAttribute("user_id")]
public long UserId { get; public set; }
    [JsonPropertyAttribute("withheld_in_countries")]
public IEnumerable`1<string> WitheldInCountries { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public sealed virtual long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_WitheldInCountries();
    [CompilerGeneratedAttribute]
public void set_WitheldInCountries(IEnumerable`1<string> value);
}
public class Tweetinvi.Streams.Model.UserWitheldInfo : object {
    [CompilerGeneratedAttribute]
private long <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <WitheldInCountries>k__BackingField;
    [JsonPropertyAttribute("id")]
public long Id { get; public set; }
    [JsonPropertyAttribute("withheld_in_countries")]
public IEnumerable`1<string> WitheldInCountries { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(long value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_WitheldInCountries();
    [CompilerGeneratedAttribute]
public void set_WitheldInCountries(IEnumerable`1<string> value);
}
public class Tweetinvi.Streams.Model.WarningMessage : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [JsonPropertyAttribute("code")]
public string Code { get; public set; }
    [JsonPropertyAttribute("message")]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
public class Tweetinvi.Streams.Model.WarningMessageFallingBehind : WarningMessage {
    [CompilerGeneratedAttribute]
private int <PercentFull>k__BackingField;
    [JsonPropertyAttribute("percent_full")]
public int PercentFull { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual int get_PercentFull();
    [CompilerGeneratedAttribute]
public void set_PercentFull(int value);
}
public class Tweetinvi.Streams.Model.WarningMessageTooManyFollowers : WarningMessage {
    [CompilerGeneratedAttribute]
private long <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampInMs>k__BackingField;
    [JsonPropertyAttribute("user_id")]
public long UserId { get; public set; }
    [JsonPropertyAttribute("timestamp_ms")]
public string TimestampInMs { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual long get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(long value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TimestampInMs();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TimestampInMs(string value);
}
internal class Tweetinvi.Streams.Properties.Resources : object {
    public static string Stream_Filter;
    public static string Stream_IllegalMultipleStreams;
    public static string Stream_ObjectDelegateIsNull;
    public static string Stream_Sample;
    public static string TrackedStream_ModifyTracks_NotStoppedException_Description;
    private static Resources();
    public static string GetResourceByName(string resourceName);
}
public class Tweetinvi.Streams.SampleStream : TweetStream {
    public SampleStream(ITwitterClient twitterClient, IStreamResultGenerator streamResultGenerator, IJsonObjectConverter jsonObjectConverter, IJObjectStaticWrapper jObjectStaticWrapper, ITwitterClientFactories factories, ICreateSampleStreamParameters createSampleStreamParameters);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.SampleStream/<StartAsync>d__1")]
public sealed virtual Task StartAsync();
}
public class Tweetinvi.Streams.SampleStreamV2 : TweetStreamV2`1<TweetV2ReceivedEventArgs> {
    private ITwitterClient _client;
    private ITweetsV2QueryGenerator _tweetsV2QueryGenerator;
    public SampleStreamV2(ITwitterClient client, IStreamResultGenerator streamResultGenerator, ITweetsV2QueryGenerator tweetsV2QueryGenerator);
    public sealed virtual Task StartAsync();
    public sealed virtual Task StartAsync(IStartSampleStreamV2Parameters parameters);
    [CompilerGeneratedAttribute]
private TweetV2ReceivedEventArgs <StartAsync>b__4_0(string json);
}
public class Tweetinvi.Streams.StreaminviModule : object {
    public sealed virtual void Initialize(ITweetinviContainer container);
}
public class Tweetinvi.Streams.StreamTask : object {
    [CompilerGeneratedAttribute]
private EventHandler StreamStarted;
    [CompilerGeneratedAttribute]
private EventHandler`1<StreamTaskStateChangedEventArgs> StreamStateChanged;
    [CompilerGeneratedAttribute]
private EventHandler KeepAliveReceived;
    private static int STREAM_DISCONNECTED_DELAY;
    private static int STREAM_RESUME_DELAY;
    private Func`2<string, bool> _onJsonReceivedCallback;
    private Func`1<ITwitterRequest> _createTwitterRequest;
    private ITwitterExceptionFactory _twitterExceptionFactory;
    private IHttpClientWebHelper _httpClientWebHelper;
    private bool _isNew;
    private ITwitterRequest _twitterRequest;
    private StreamReader _currentStreamReader;
    private HttpClient _currentHttpClient;
    [CompilerGeneratedAttribute]
private StreamState <StreamState>k__BackingField;
    public StreamState StreamState { get; private set; }
    public StreamTask(Func`2<string, bool> onJsonReceivedCallback, Func`1<ITwitterRequest> createTwitterRequest, ITwitterExceptionFactory twitterExceptionFactory, IHttpClientWebHelper httpClientWebHelper);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StreamStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StreamStarted(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StreamStateChanged(EventHandler`1<StreamTaskStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StreamStateChanged(EventHandler`1<StreamTaskStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_KeepAliveReceived(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_KeepAliveReceived(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual StreamState get_StreamState();
    [CompilerGeneratedAttribute]
private void set_StreamState(StreamState value);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.StreamTask/<StartAsync>d__24")]
public sealed virtual Task StartAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Streams.StreamTask/<RunStreamAsync>d__25")]
private Task RunStreamAsync();
    private HttpClient GetHttpClient(ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.StreamTask/<GetStreamReaderAsync>d__27")]
private Task`1<StreamReader> GetStreamReaderAsync(HttpClient client, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.StreamTask/<GetJsonResponseFromReaderAsync>d__28")]
private static Task`1<string> GetJsonResponseFromReaderAsync(StreamReader reader, ITwitterRequest request);
    private bool TryHandleInvalidResponse(int numberOfRepeatedFailures);
    private Exception GetExceptionToThrow(Exception ex);
    public sealed virtual void Resume();
    public sealed virtual void Pause();
    public sealed virtual void Stop();
    private void SetStreamState(StreamState state, Exception exception);
}
public class Tweetinvi.Streams.StreamTaskFactory : object {
    private ITwitterExceptionFactory _twitterExceptionFactory;
    private IHttpClientWebHelper _httpClientWebHelper;
    public StreamTaskFactory(ITwitterExceptionFactory twitterExceptionFactory, IHttpClientWebHelper httpClientWebHelper);
    public sealed virtual IStreamTask Create(Func`2<string, bool> onJsonReceivedCallback, Func`1<ITwitterRequest> createTwitterRequest);
}
public class Tweetinvi.Streams.StreamTaskStateChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private StreamState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public StreamState State { get; public set; }
    public Exception Exception { get; public set; }
    public StreamTaskStateChangedEventArgs(StreamState state);
    [CompilerGeneratedAttribute]
public StreamState get_State();
    [CompilerGeneratedAttribute]
public void set_State(StreamState value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
}
public class Tweetinvi.Streams.TrackedStream : TwitterStream {
    [CompilerGeneratedAttribute]
private EventHandler`1<MatchedTweetReceivedEventArgs> TweetReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<MatchedTweetReceivedEventArgs> MatchingTweetReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetEventArgs> NonMatchingTweetReceived;
    private ITwitterClient _client;
    private IStreamTrackManager`1<ITweet> _streamTrackManager;
    private ITwitterClientFactories _factories;
    [CompilerGeneratedAttribute]
private EventHandler`1<StreamEventReceivedArgs> EventReceived;
    public int TracksCount { get; }
    public int MaxTracks { get; }
    public Dictionary`2<string, Action`1<ITweet>> Tracks { get; }
    public TrackedStream(ITwitterClient client, IStreamTrackManager`1<ITweet> streamTrackManager, IJsonObjectConverter jsonObjectConverter, IJObjectStaticWrapper jObjectStaticWrapper, IStreamResultGenerator streamResultGenerator, ITwitterClientFactories factories, ICreateTrackedTweetStreamParameters createTrackedTweetStreamParameters);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TweetReceived(EventHandler`1<MatchedTweetReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TweetReceived(EventHandler`1<MatchedTweetReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MatchingTweetReceived(EventHandler`1<MatchedTweetReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MatchingTweetReceived(EventHandler`1<MatchedTweetReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_NonMatchingTweetReceived(EventHandler`1<TweetEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_NonMatchingTweetReceived(EventHandler`1<TweetEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.TrackedStream/<StartAsync>d__16")]
public sealed virtual Task StartAsync(string url);
    protected void RaiseJsonObjectReceived(string json);
    public sealed virtual int get_TracksCount();
    public sealed virtual int get_MaxTracks();
    public sealed virtual Dictionary`2<string, Action`1<ITweet>> get_Tracks();
    public sealed virtual void AddTrack(string track, Action`1<ITweet> trackReceived);
    public sealed virtual void RemoveTrack(string track);
    public sealed virtual bool ContainsTrack(string track);
    public sealed virtual void ClearTracks();
    protected void RaiseTweetReceived(MatchedTweetReceivedEventArgs eventArgs);
    protected void RaiseMatchingTweetReceived(MatchedTweetReceivedEventArgs eventArgs);
    protected void RaiseNonMatchingTweetReceived(TweetEventArgs eventArgs);
}
public class Tweetinvi.Streams.TweetStream : TwitterStream {
    private ITwitterClient _client;
    private ITwitterClientFactories _factories;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetReceivedEventArgs> TweetReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<StreamEventReceivedArgs> EventReceived;
    public TweetStream(ITwitterClient client, IStreamResultGenerator streamResultGenerator, IJsonObjectConverter jsonObjectConverter, IJObjectStaticWrapper jObjectStaticWrapper, ITwitterClientFactories factories, ICreateTweetStreamParameters createTweetStreamParameters);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TweetReceived(EventHandler`1<TweetReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TweetReceived(EventHandler`1<TweetReceivedEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void add_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.TweetStream/<StartAsync>d__9")]
public sealed virtual Task StartAsync(string url);
}
public class Tweetinvi.Streams.TweetStreamV2`1 : object {
    private ITwitterClient _client;
    private IStreamResultGenerator _streamResultGenerator;
    [CompilerGeneratedAttribute]
private EventHandler`1<StreamEventReceivedArgs> EventReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<T> TweetReceived;
    public TweetStreamV2`1(ITwitterClient client, IStreamResultGenerator streamResultGenerator);
    [CompilerGeneratedAttribute]
public sealed virtual void add_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TweetReceived(EventHandler`1<T> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TweetReceived(EventHandler`1<T> value);
    [AsyncStateMachineAttribute("Tweetinvi.Streams.TweetStreamV2`1/<StartAsync>d__9")]
protected Task StartAsync(string url, Func`2<string, T> createResponse);
    public sealed virtual void StopStream();
}
public abstract class Tweetinvi.Streams.TwitterStream : object {
    [CompilerGeneratedAttribute]
private IStreamResultGenerator <_streamResultGenerator>k__BackingField;
    private IJsonObjectConverter _jsonObjectConverter;
    private IJObjectStaticWrapper _jObjectWrapper;
    private ICustomRequestParameters _customRequestParameters;
    private List`1<string> _filteredLanguages;
    private Dictionary`2<string, Action`1<JToken>> _streamEventsActions;
    [CompilerGeneratedAttribute]
private ITwitterExecutionContext <ExecutionContext>k__BackingField;
    private Nullable`1<TweetMode> _tweetMode;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetDeletedEvent> TweetDeleted;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetLocationDeletedEventArgs> TweetLocationInfoRemoved;
    [CompilerGeneratedAttribute]
private EventHandler`1<DisconnectedEventArgs> DisconnectMessageReceived;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetWitheldEventArgs> TweetWitheld;
    [CompilerGeneratedAttribute]
private EventHandler`1<UserWitheldEventArgs> UserWitheld;
    [CompilerGeneratedAttribute]
private EventHandler`1<LimitReachedEventArgs> LimitReached;
    [CompilerGeneratedAttribute]
private EventHandler`1<WarningFallingBehindEventArgs> WarningFallingBehindDetected;
    [CompilerGeneratedAttribute]
private EventHandler`1<UnsupportedMessageReceivedEvent> UnmanagedEventReceived;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <StallWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<StreamFilterLevel> <FilterLevel>k__BackingField;
    protected IStreamResultGenerator _streamResultGenerator { get; }
    public ITwitterExecutionContext ExecutionContext { get; public set; }
    public Nullable`1<TweetMode> TweetMode { get; public set; }
    public StreamState StreamState { get; }
    public String[] LanguageFilters { get; }
    public Nullable`1<bool> StallWarnings { get; public set; }
    public Nullable`1<StreamFilterLevel> FilterLevel { get; public set; }
    public List`1<Tuple`2<string, string>> CustomQueryParameters { get; }
    public string FormattedCustomQueryParameters { get; }
    protected TwitterStream(IStreamResultGenerator streamResultGenerator, IJsonObjectConverter jsonObjectConverter, IJObjectStaticWrapper jObjectWrapper, ICustomRequestParameters customRequestParameters);
    [CompilerGeneratedAttribute]
protected IStreamResultGenerator get__streamResultGenerator();
    [CompilerGeneratedAttribute]
public sealed virtual ITwitterExecutionContext get_ExecutionContext();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExecutionContext(ITwitterExecutionContext value);
    public sealed virtual Nullable`1<TweetMode> get_TweetMode();
    public sealed virtual void set_TweetMode(Nullable`1<TweetMode> value);
    private void InitializeStreamEventsActions();
    public sealed virtual void add_StreamStarted(EventHandler value);
    public sealed virtual void remove_StreamStarted(EventHandler value);
    public sealed virtual void add_StreamResumed(EventHandler value);
    public sealed virtual void remove_StreamResumed(EventHandler value);
    public sealed virtual void add_StreamPaused(EventHandler value);
    public sealed virtual void remove_StreamPaused(EventHandler value);
    public sealed virtual void add_StreamStopped(EventHandler`1<StreamStoppedEventArgs> value);
    public sealed virtual void remove_StreamStopped(EventHandler`1<StreamStoppedEventArgs> value);
    public sealed virtual void add_KeepAliveReceived(EventHandler value);
    public sealed virtual void remove_KeepAliveReceived(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TweetDeleted(EventHandler`1<TweetDeletedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TweetDeleted(EventHandler`1<TweetDeletedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TweetLocationInfoRemoved(EventHandler`1<TweetLocationDeletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TweetLocationInfoRemoved(EventHandler`1<TweetLocationDeletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DisconnectMessageReceived(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DisconnectMessageReceived(EventHandler`1<DisconnectedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TweetWitheld(EventHandler`1<TweetWitheldEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TweetWitheld(EventHandler`1<TweetWitheldEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_UserWitheld(EventHandler`1<UserWitheldEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UserWitheld(EventHandler`1<UserWitheldEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_LimitReached(EventHandler`1<LimitReachedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_LimitReached(EventHandler`1<LimitReachedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WarningFallingBehindDetected(EventHandler`1<WarningFallingBehindEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WarningFallingBehindDetected(EventHandler`1<WarningFallingBehindEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_UnmanagedEventReceived(EventHandler`1<UnsupportedMessageReceivedEvent> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_UnmanagedEventReceived(EventHandler`1<UnsupportedMessageReceivedEvent> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_EventReceived(EventHandler`1<StreamEventReceivedArgs> value);
    public sealed virtual StreamState get_StreamState();
    public sealed virtual void Resume();
    public sealed virtual void Pause();
    public sealed virtual void Stop();
    protected void StopStream(Exception ex);
    protected void AddBaseParametersToQuery(StringBuilder queryBuilder);
    public sealed virtual String[] get_LanguageFilters();
    public sealed virtual void AddLanguageFilter(string language);
    public sealed virtual void AddLanguageFilter(LanguageFilter language);
    public sealed virtual void RemoveLanguageFilter(string language);
    public sealed virtual void RemoveLanguageFilter(LanguageFilter language);
    public sealed virtual void ClearLanguageFilters();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_StallWarnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StallWarnings(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<StreamFilterLevel> get_FilterLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterLevel(Nullable`1<StreamFilterLevel> value);
    public sealed virtual List`1<Tuple`2<string, string>> get_CustomQueryParameters();
    public sealed virtual string get_FormattedCustomQueryParameters();
    public sealed virtual void AddCustomQueryParameter(string name, string value);
    public sealed virtual void ClearCustomQueryParameters();
    protected void TryInvokeGlobalStreamMessages(string json);
    protected bool IsEvent(string json);
    private void TryRaiseTweetDeleted(JToken jToken);
    private void TryRaiseTweetLocationRemoved(JToken jToken);
    private void TryRaiseDisconnectMessageReceived(JToken jToken);
    private void TryRaiseLimitReached(JToken jToken);
    private void TryRaiseTweetWitheld(JToken jToken);
    private void TryRaiseUserWitheld(JToken jToken);
    private void TryRaiseWarning(JToken jToken);
    private void TryRaiseFallingBehindWarning(JToken jsonWarning);
}
public class Tweetinvi.Streams.Webhooks.WebhookDispatcher : object {
    private IJObjectStaticWrapper _jObjectStaticWrapper;
    private List`1<IAccountActivityStream> _accountActivityStream;
    public IAccountActivityStream[] SubscribedAccountActivityStreams { get; }
    public WebhookDispatcher(IJObjectStaticWrapper jObjectStaticWrapper);
    public sealed virtual IAccountActivityStream[] get_SubscribedAccountActivityStreams();
    public sealed virtual void WebhookMessageReceived(IWebhookMessage message);
    public sealed virtual void SubscribeAccountActivityStream(IAccountActivityStream accountActivityStream);
    public sealed virtual void UnsubscribeAccountActivityStream(IAccountActivityStream accountActivityStream);
}
