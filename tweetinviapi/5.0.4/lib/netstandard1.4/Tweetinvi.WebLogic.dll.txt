public class Tweetinvi.WebLogic.HttpClientWebHelper : object {
    private IOAuthWebRequestGeneratorFactory _oAuthWebRequestGeneratorFactory;
    public HttpClientWebHelper(IOAuthWebRequestGeneratorFactory oAuthWebRequestGeneratorFactory);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.HttpClientWebHelper/<GetHttpResponseAsync>d__2")]
public sealed virtual Task`1<HttpResponseMessage> GetHttpResponseAsync(ITwitterQuery twitterQuery, ITwitterClientHandler handler);
    public sealed virtual HttpClient GetHttpClient(ITwitterQuery twitterQuery, ITwitterClientHandler twitterHandler);
}
[ExtensionAttribute]
public static class Tweetinvi.WebLogic.HttpMethodExtensions : object {
    [ExtensionAttribute]
public static HttpMethod ToTweetinviHttpMethod(HttpMethod method);
}
public interface Tweetinvi.WebLogic.IOAuthWebRequestGeneratorFactory {
    public abstract virtual IOAuthWebRequestGenerator Create();
    public abstract virtual IOAuthWebRequestGenerator Create(ITwitterRequest request);
}
public interface Tweetinvi.WebLogic.ITwitterRequestHandler {
    public abstract virtual Task`1<ITwitterResponse> ExecuteQueryAsync(ITwitterRequest request);
    public abstract virtual Task PrepareTwitterRequestAsync(ITwitterRequest request);
}
public class Tweetinvi.WebLogic.OAuthQueryParameter : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiredForSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiredForHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPartOfOAuthSecretKey>k__BackingField;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public bool RequiredForSignature { get; public set; }
    public bool RequiredForHeader { get; public set; }
    public bool IsPartOfOAuthSecretKey { get; public set; }
    public OAuthQueryParameter(string key, string value, bool requiredForSignature, bool requiredForHeader, bool isPartOfOAuthSecretKey);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Key(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequiredForSignature();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequiredForSignature(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_RequiredForHeader();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RequiredForHeader(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPartOfOAuthSecretKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsPartOfOAuthSecretKey(bool value);
}
public class Tweetinvi.WebLogic.OAuthWebRequestGenerator : object {
    private IWebHelper _webHelper;
    private Func`1<DateTime> _getUtcDateTime;
    public OAuthWebRequestGenerator(IWebHelper webHelper, Func`1<DateTime> getUtcDateTime);
    private string GenerateSignature(Uri uri, HttpMethod httpMethod, IEnumerable`1<IOAuthQueryParameter> queryParameters, Dictionary`2<string, string> urlParameters);
    private static IEnumerable`1<KeyValuePair`2<string, string>> GetSignatureParameters(IEnumerable`1<IOAuthQueryParameter> queryParameters, Dictionary`2<string, string> urlParameters);
    private static string CreateFormattedUrlParameters(IEnumerable`1<KeyValuePair`2<string, string>> signatureParameters);
    private static string CreateOAuthSecretKey(IEnumerable`1<IOAuthQueryParameter> oAuthQueryParameters);
    private static string CreateOAuthRequest(Uri uri, HttpMethod httpMethod, string urlParametersFormatted);
    private string GenerateHeader(Uri uri, HttpMethod httpMethod, ICollection`1<IOAuthQueryParameter> queryParameters, Dictionary`2<string, string> urlParameters);
    private static string CreateParametersFormattedForHeader(ICollection`1<IOAuthQueryParameter> queryParameters);
    private List`1<IOAuthQueryParameter> GenerateAdditionalHeaderParameters(IEnumerable`1<IOAuthQueryParameter> queryParameters);
    private static IEnumerable`1<IOAuthQueryParameter> GenerateConsumerParameters(IReadOnlyConsumerCredentials consumerCredentials);
    public sealed virtual IEnumerable`1<IOAuthQueryParameter> GenerateApplicationParameters(IReadOnlyConsumerCredentials temporaryCredentials, IAuthenticationRequest authRequest, IEnumerable`1<IOAuthQueryParameter> additionalParameters);
    public sealed virtual IEnumerable`1<IOAuthQueryParameter> GenerateParameters(IReadOnlyTwitterCredentials credentials, IEnumerable`1<IOAuthQueryParameter> additionalParameters);
    public sealed virtual IOAuthQueryParameter GenerateParameter(string key, string value, bool requiredForSignature, bool requiredForHeader, bool isPartOfOAuthSecretKey);
    public sealed virtual string GenerateAuthorizationHeader(Uri uri, HttpMethod httpMethod, IEnumerable`1<IOAuthQueryParameter> parameters);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.OAuthWebRequestGenerator/<GenerateAuthorizationHeaderAsync>d__16")]
public sealed virtual Task`1<string> GenerateAuthorizationHeaderAsync(Uri uri, HttpContent queryContent, HttpMethod httpMethod, IEnumerable`1<IOAuthQueryParameter> parameters);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.OAuthWebRequestGenerator/<SetTwitterQueryAuthorizationHeaderAsync>d__17")]
public sealed virtual Task`1<string> SetTwitterQueryAuthorizationHeaderAsync(ITwitterQuery twitterQuery);
}
public class Tweetinvi.WebLogic.OAuthWebRequestGeneratorFactory : object {
    private IWebHelper _webHelper;
    public OAuthWebRequestGeneratorFactory(IWebHelper webHelper);
    public sealed virtual IOAuthWebRequestGenerator Create();
    public sealed virtual IOAuthWebRequestGenerator Create(ITwitterRequest request);
}
public class Tweetinvi.WebLogic.TweetinviWebLogicModule : object {
    public sealed virtual void Initialize(ITweetinviContainer container);
}
public class Tweetinvi.WebLogic.TwitterClientHandler : HttpClientHandler {
    private Action`2<ITwitterQuery, HttpRequestMessage> _action;
    private Func`3<ITwitterQuery, HttpRequestMessage, string> _func;
    [CompilerGeneratedAttribute]
private IOAuthWebRequestGenerator <WebRequestGenerator>k__BackingField;
    private ITwitterQuery _twitterQuery;
    protected IOAuthWebRequestGenerator WebRequestGenerator { get; }
    public ITwitterQuery TwitterQuery { get; public set; }
    public TwitterClientHandler(IOAuthWebRequestGenerator oAuthWebRequestGenerator);
    public TwitterClientHandler(IOAuthWebRequestGenerator oAuthWebRequestGenerator, Action`2<ITwitterQuery, HttpRequestMessage> action);
    public TwitterClientHandler(IOAuthWebRequestGenerator oAuthWebRequestGenerator, Func`3<ITwitterQuery, HttpRequestMessage, string> func);
    [CompilerGeneratedAttribute]
protected IOAuthWebRequestGenerator get_WebRequestGenerator();
    public sealed virtual ITwitterQuery get_TwitterQuery();
    public sealed virtual void set_TwitterQuery(ITwitterQuery value);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.TwitterClientHandler/<SendAsync>d__13")]
protected virtual Task`1<HttpResponseMessage> SendAsync(ITwitterQuery twitterQuery, HttpRequestMessage request, CancellationToken cancellationToken);
    protected Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken, string authorizationHeader);
}
public class Tweetinvi.WebLogic.TwitterRequestHandler : object {
    private IRateLimitAwaiter _rateLimitAwaiter;
    private IRateLimitCacheManager _rateLimitCacheManager;
    private IRateLimitUpdaterFactory _rateLimitUpdaterFactory;
    private IWebRequestExecutor _webRequestExecutor;
    public TwitterRequestHandler(IRateLimitAwaiter rateLimitAwaiter, IRateLimitCacheManager rateLimitCacheManager, IRateLimitUpdaterFactory rateLimitUpdaterFactory, IWebRequestExecutor webRequestExecutor);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.TwitterRequestHandler/<ExecuteQueryAsync>d__5")]
public sealed virtual Task`1<ITwitterResponse> ExecuteQueryAsync(ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.TwitterRequestHandler/<PrepareTwitterRequestAsync>d__6")]
public sealed virtual Task PrepareTwitterRequestAsync(ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.TwitterRequestHandler/<WaitBeforeExecutingQueryAsync>d__7")]
private Task WaitBeforeExecutingQueryAsync(ITwitterRequest request);
    private static string CleanupQueryUrl(string query);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.TwitterRequestHandler/<QueryCompleted>d__9")]
private Task QueryCompleted(ITwitterRequest request, ITwitterResponse twitterResponse, IRateLimitUpdater rateLimitUpdater);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.TwitterRequestHandler/<HandleException>d__10")]
private Task HandleException(ITwitterRequest request, TwitterException exception, IRateLimitUpdater rateLimitUpdater);
}
public class Tweetinvi.WebLogic.TwitterResponse : object {
    [CompilerGeneratedAttribute]
private string <URL>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ResultStream>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSuccessStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IEnumerable`1<string>> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReasonPhrase>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Binary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    public string URL { get; public set; }
    public Stream ResultStream { get; public set; }
    public int StatusCode { get; public set; }
    public bool IsSuccessStatusCode { get; public set; }
    public Dictionary`2<string, IEnumerable`1<string>> Headers { get; public set; }
    public string ReasonPhrase { get; public set; }
    public Byte[] Binary { get; public set; }
    public string Content { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_URL();
    [CompilerGeneratedAttribute]
public sealed virtual void set_URL(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_ResultStream();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResultStream(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_StatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSuccessStatusCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsSuccessStatusCode(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Dictionary`2<string, IEnumerable`1<string>> get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Headers(Dictionary`2<string, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ReasonPhrase();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ReasonPhrase(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Byte[] get_Binary();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Binary(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Content(string value);
}
public class Tweetinvi.WebLogic.WebHelper : object {
    public sealed virtual Task`1<Stream> GetResponseStreamAsync(ITwitterRequest request);
    public sealed virtual Dictionary`2<string, string> GetURLParameters(string url);
    public sealed virtual Dictionary`2<string, string> GetUriParameters(Uri uri);
    public sealed virtual Dictionary`2<string, string> GetQueryParameters(string queryUrl);
    public sealed virtual string GetBaseURL(string url);
    public sealed virtual string GetBaseURL(Uri uri);
}
public class Tweetinvi.WebLogic.WebRequestExecutor : object {
    private ITwitterExceptionFactory _twitterExceptionFactory;
    private IHttpClientWebHelper _httpClientWebHelper;
    private IFactory`1<ITwitterResponse> _webRequestResultFactory;
    public WebRequestExecutor(ITwitterExceptionFactory twitterExceptionFactory, IHttpClientWebHelper httpClientWebHelper, IFactory`1<ITwitterResponse> webRequestResultFactory);
    public sealed virtual Task`1<ITwitterResponse> ExecuteQueryAsync(ITwitterRequest request, ITwitterClientHandler handler);
    public static Byte[] StreamToBinary(Stream stream);
    private ITwitterResponse CreateTwitterResponseFromHttpResponse(string url, HttpResponseMessage httpResponseMessage);
    [AsyncStateMachineAttribute("Tweetinvi.WebLogic.WebRequestExecutor/<ExecuteTwitterQuerySafelyAsync>d__7`1")]
private Task`1<T> ExecuteTwitterQuerySafelyAsync(ITwitterRequest request, Func`1<Task`1<T>> action);
}
