public class Tweetinvi.Credentials.AuthHttpHandlers.AuthHttpHandler : TwitterClientHandler {
    private IOAuthQueryParameter _queryParameter;
    private IAuthenticationRequest _authRequest;
    public AuthHttpHandler(IOAuthQueryParameter queryParameter, IAuthenticationRequest authRequest, IOAuthWebRequestGenerator oAuthWebRequestGenerator);
    protected virtual Task`1<HttpResponseMessage> SendAsync(ITwitterQuery twitterQuery, HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Tweetinvi.Credentials.AuthHttpHandlers.BearerHttpHandler : TwitterClientHandler {
    public BearerHttpHandler(IOAuthWebRequestGenerator oAuthWebRequestGenerator);
    protected virtual Task`1<HttpResponseMessage> SendAsync(ITwitterQuery twitterQuery, HttpRequestMessage request, CancellationToken cancellationToken);
    public static string GetBearerTokenAuthorizationHeader(IReadOnlyConsumerCredentials credentials);
}
public class Tweetinvi.Credentials.AuthHttpHandlers.InvalidateTokenHttpHandler : TwitterClientHandler {
    public InvalidateTokenHttpHandler(IOAuthWebRequestGenerator oAuthWebRequestGenerator);
    protected virtual Task`1<HttpResponseMessage> SendAsync(ITwitterQuery twitterQuery, HttpRequestMessage request, CancellationToken cancellationToken);
}
public class Tweetinvi.Credentials.CredentialsAccessor : object {
    [CompilerGeneratedAttribute]
private static ITwitterCredentials <StaticApplicationCredentials>k__BackingField;
    [ThreadStaticAttribute]
private static Nullable`1<bool> _currentThreadCredentialsInitialized;
    [ThreadStaticAttribute]
private static ITwitterCredentials _currentThreadCredentials;
    private static ITwitterCredentials StaticApplicationCredentials { get; private set; }
    public ITwitterCredentials ApplicationCredentials { get; public set; }
    public ITwitterCredentials CurrentThreadCredentials { get; public set; }
    [CompilerGeneratedAttribute]
private static ITwitterCredentials get_StaticApplicationCredentials();
    [CompilerGeneratedAttribute]
private static void set_StaticApplicationCredentials(ITwitterCredentials value);
    public sealed virtual ITwitterCredentials get_ApplicationCredentials();
    public sealed virtual void set_ApplicationCredentials(ITwitterCredentials value);
    public sealed virtual ITwitterCredentials get_CurrentThreadCredentials();
    public sealed virtual void set_CurrentThreadCredentials(ITwitterCredentials value);
    public sealed virtual T ExecuteOperationWithCredentials(ITwitterCredentials credentials, Func`1<T> operation);
    public sealed virtual void ExecuteOperationWithCredentials(ITwitterCredentials credentials, Action operation);
    private bool HasTheApplicationCredentialsBeenInitialized();
}
public class Tweetinvi.Credentials.Models.AuthenticationRequest : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsumerSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationSecret>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerifierCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorizationURL>k__BackingField;
    public string Id { get; public set; }
    public string ConsumerKey { get; public set; }
    public string ConsumerSecret { get; public set; }
    public string AuthorizationKey { get; public set; }
    public string AuthorizationSecret { get; public set; }
    public string VerifierCode { get; public set; }
    public string AuthorizationURL { get; public set; }
    public AuthenticationRequest(IReadOnlyConsumerCredentialsWithoutBearer consumerCredentials);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerKey();
    [CompilerGeneratedAttribute]
public void set_ConsumerKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConsumerSecret();
    [CompilerGeneratedAttribute]
public void set_ConsumerSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthorizationKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthorizationKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthorizationSecret();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthorizationSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VerifierCode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VerifierCode(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthorizationURL();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AuthorizationURL(string value);
    public virtual string ToString();
}
public class Tweetinvi.Credentials.RateLimit.RateLimitAwaiter : object {
    private IRateLimitCacheManager _rateLimitCacheManager;
    private ITaskDelayer _taskDelayer;
    public RateLimitAwaiter(IRateLimitCacheManager rateLimitCacheManager, ITaskDelayer taskDelayer);
    public sealed virtual Task WaitForCredentialsRateLimitAsync(ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitAwaiter/<WaitForCredentialsRateLimitAsync>d__4")]
public sealed virtual Task WaitForCredentialsRateLimitAsync(IWaitForCredentialsRateLimitParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitAwaiter/<WaitForCredentialsRateLimitAsync>d__5")]
public sealed virtual Task WaitForCredentialsRateLimitAsync(IEndpointRateLimit queryRateLimit, IReadOnlyTwitterCredentials credentials, ITwitterExecutionContext executionContext);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitAwaiter/<TimeToWaitBeforeTwitterRequestAsync>d__6")]
public sealed virtual Task`1<TimeSpan> TimeToWaitBeforeTwitterRequestAsync(string query, IReadOnlyTwitterCredentials credentials, ITwitterExecutionContext twitterExecutionContext);
    public sealed virtual TimeSpan GetTimeToWaitFromQueryRateLimit(IEndpointRateLimit queryRateLimit, ITwitterExecutionContext executionContext);
}
public class Tweetinvi.Credentials.RateLimit.RateLimitCache : object {
    private Dictionary`2<IReadOnlyTwitterCredentials, ICredentialsRateLimits> _credentialsRateLimits;
    private object _lockRefresh;
    private object _lockCredentialsRateLimitsDictionary;
    public sealed virtual Task ClearAsync(IReadOnlyTwitterCredentials credentials);
    public sealed virtual Task ClearAllAsync();
    public sealed virtual Task`1<ICredentialsRateLimits> GetCredentialsRateLimitsAsync(IReadOnlyTwitterCredentials credentials);
    public sealed virtual Task RefreshEntryAsync(IReadOnlyTwitterCredentials credentials, ICredentialsRateLimits newCredentialsRateLimits);
}
public class Tweetinvi.Credentials.RateLimit.RateLimitCacheManager : object {
    private IRateLimitHelper _rateLimitHelper;
    private IRateLimitCache _rateLimitCache;
    [CompilerGeneratedAttribute]
private IRateLimitsClient <RateLimitsClient>k__BackingField;
    public IRateLimitCache RateLimitCache { get; }
    public IRateLimitsClient RateLimitsClient { get; public set; }
    public RateLimitCacheManager(IRateLimitCache rateLimitCache, IRateLimitHelper rateLimitHelper);
    public virtual IRateLimitCache get_RateLimitCache();
    [CompilerGeneratedAttribute]
public virtual IRateLimitsClient get_RateLimitsClient();
    [CompilerGeneratedAttribute]
public virtual void set_RateLimitsClient(IRateLimitsClient value);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitCacheManager/<GetQueryRateLimitAsync>d__9")]
public virtual Task`1<IEndpointRateLimit> GetQueryRateLimitAsync(IGetEndpointRateLimitsParameters parameters, IReadOnlyTwitterCredentials credentials);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitCacheManager/<GetCredentialsRateLimitsAsync>d__10")]
public virtual Task`1<ICredentialsRateLimits> GetCredentialsRateLimitsAsync(IReadOnlyTwitterCredentials credentials);
    public virtual Task UpdateCredentialsRateLimitsAsync(IReadOnlyTwitterCredentials credentials, ICredentialsRateLimits credentialsRateLimits);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitCacheManager/<RefreshCredentialsRateLimitsAsync>d__12")]
public virtual Task`1<ICredentialsRateLimits> RefreshCredentialsRateLimitsAsync(IReadOnlyTwitterCredentials credentials);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitCacheManager/<GetTokenRateLimitsFromTwitterAsync>d__13")]
private Task`1<ICredentialsRateLimits> GetTokenRateLimitsFromTwitterAsync(IReadOnlyTwitterCredentials credentials);
    public virtual bool ShouldEndpointCacheBeUpdated(IEndpointRateLimit rateLimit);
}
public class Tweetinvi.Credentials.RateLimit.RateLimitHelper : object {
    private IWebHelper _webHelper;
    private IAttributeHelper _attributeHelper;
    public RateLimitHelper(IWebHelper webHelper, IAttributeHelper attributeHelper);
    public sealed virtual IEndpointRateLimit GetEndpointRateLimitFromQuery(string query, ICredentialsRateLimits rateLimits, bool createIfNotExist);
    private IEndpointRateLimit GetRateLimitFromProperty(PropertyInfo propertyInfo, ICredentialsRateLimits rateLimits);
    private bool IsEndpointURLMatchingQueryURL(string queryURL, TwitterEndpointAttribute twitterEndpoint);
}
public class Tweetinvi.Credentials.RateLimit.RateLimitUpdater : object {
    private IRateLimitCacheManager _rateLimitCacheManager;
    public RateLimitUpdater(IRateLimitCacheManager rateLimitCacheManager);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitUpdater/<QueryExecutedAsync>d__2")]
public sealed virtual Task QueryExecutedAsync(string query, ITwitterCredentials credentials, int numberOfRequests);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitUpdater/<QueryExecutedAsync>d__3")]
public sealed virtual Task QueryExecutedAsync(string query, ITwitterCredentials credentials, Dictionary`2<string, IEnumerable`1<string>> rateLimitHeaders);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.RateLimit.RateLimitUpdater/<ClearRateLimitsForQueryAsync>d__4")]
public sealed virtual Task ClearRateLimitsForQueryAsync(string query, IReadOnlyTwitterCredentials credentials);
}
public class Tweetinvi.Credentials.RateLimit.RateLimitUpdaterFactory : object {
    public sealed virtual IRateLimitUpdater Create(IRateLimitCacheManager rateLimitCacheManager);
}
public class Tweetinvi.Credentials.TweetinviCredentialsModule : object {
    public sealed virtual void Initialize(ITweetinviContainer container);
    private void RegisterRateLimitHandler(ITweetinviContainer container);
}
public class Tweetinvi.Credentials.TwitterAccessor : object {
    private ITwitterRequestHandler _twitterRequestHandler;
    private ITwitterResultFactory _twitterResultFactory;
    public TwitterAccessor(ITwitterRequestHandler twitterRequestHandler, ITwitterResultFactory twitterResultFactory);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.TwitterAccessor/<ExecuteRequestAsync>d__3")]
public sealed virtual Task`1<ITwitterResult> ExecuteRequestAsync(ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Credentials.TwitterAccessor/<ExecuteRequestAsync>d__4`1")]
public sealed virtual Task`1<ITwitterResult`1<T>> ExecuteRequestAsync(ITwitterRequest request);
    public sealed virtual Task PrepareTwitterRequestAsync(ITwitterRequest request);
}
