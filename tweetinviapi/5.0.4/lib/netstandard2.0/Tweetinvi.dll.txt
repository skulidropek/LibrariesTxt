public class Tweetinvi.Client.AccountActivityClient : object {
    private IAccountActivityRequester _accountActivityRequester;
    private ITwitterClient _client;
    public IAccountActivityClientParametersValidator ParametersValidator { get; }
    public AccountActivityClient(IAccountActivityRequester accountActivityRequester, ITwitterClient client);
    public sealed virtual IAccountActivityClientParametersValidator get_ParametersValidator();
    public sealed virtual IAccountActivityRequestHandler CreateRequestHandler();
    public sealed virtual Task`1<IWebhook> CreateAccountActivityWebhookAsync(string environment, string webhookUrl);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountActivityClient/<CreateAccountActivityWebhookAsync>d__7")]
public sealed virtual Task`1<IWebhook> CreateAccountActivityWebhookAsync(ICreateAccountActivityWebhookParameters parameters);
    public sealed virtual Task`1<IWebhookEnvironment[]> GetAccountActivityWebhookEnvironmentsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountActivityClient/<GetAccountActivityWebhookEnvironmentsAsync>d__9")]
public sealed virtual Task`1<IWebhookEnvironment[]> GetAccountActivityWebhookEnvironmentsAsync(IGetAccountActivityWebhookEnvironmentsParameters parameters);
    public sealed virtual Task`1<IWebhook[]> GetAccountActivityEnvironmentWebhooksAsync(string environment);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountActivityClient/<GetAccountActivityEnvironmentWebhooksAsync>d__11")]
public sealed virtual Task`1<IWebhook[]> GetAccountActivityEnvironmentWebhooksAsync(IGetAccountActivityEnvironmentWebhooksParameters parameters);
    public sealed virtual Task DeleteAccountActivityWebhookAsync(string environment, string webhookId);
    public sealed virtual Task DeleteAccountActivityWebhookAsync(string environment, IWebhook webhook);
    public sealed virtual Task DeleteAccountActivityWebhookAsync(IDeleteAccountActivityWebhookParameters parameters);
    public sealed virtual Task TriggerAccountActivityWebhookCRCAsync(string environment, string webhookId);
    public sealed virtual Task TriggerAccountActivityWebhookCRCAsync(ITriggerAccountActivityWebhookCRCParameters parameters);
    public sealed virtual Task SubscribeToAccountActivityAsync(string environment);
    public sealed virtual Task SubscribeToAccountActivityAsync(ISubscribeToAccountActivityParameters parameters);
    public sealed virtual Task`1<IWebhookSubscriptionsCount> CountAccountActivitySubscriptionsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountActivityClient/<CountAccountActivitySubscriptionsAsync>d__20")]
public sealed virtual Task`1<IWebhookSubscriptionsCount> CountAccountActivitySubscriptionsAsync(ICountAccountActivitySubscriptionsParameters parameters);
    public sealed virtual Task`1<bool> IsAccountSubscribedToAccountActivityAsync(string environment);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountActivityClient/<IsAccountSubscribedToAccountActivityAsync>d__22")]
public sealed virtual Task`1<bool> IsAccountSubscribedToAccountActivityAsync(IIsAccountSubscribedToAccountActivityParameters parameters);
    public sealed virtual Task`1<IWebhookEnvironmentSubscriptions> GetAccountActivitySubscriptionsAsync(string environment);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountActivityClient/<GetAccountActivitySubscriptionsAsync>d__24")]
public sealed virtual Task`1<IWebhookEnvironmentSubscriptions> GetAccountActivitySubscriptionsAsync(IGetAccountActivitySubscriptionsParameters parameters);
    public sealed virtual Task UnsubscribeFromAccountActivityAsync(string environment, long userId);
    public sealed virtual Task UnsubscribeFromAccountActivityAsync(IUnsubscribeFromAccountActivityParameters parameters);
    [CompilerGeneratedAttribute]
private IWebhookEnvironment <GetAccountActivityWebhookEnvironmentsAsync>b__9_0(IWebhookEnvironmentDTO x);
    [CompilerGeneratedAttribute]
private IWebhook <GetAccountActivityEnvironmentWebhooksAsync>b__11_0(IWebhookDTO x);
}
public class Tweetinvi.Client.AccountSettingsClient : object {
    private ITwitterClient _client;
    private IAccountSettingsRequester _accountRequester;
    public IAccountSettingsClientParametersValidator ParametersValidator { get; }
    public AccountSettingsClient(ITwitterClient client);
    public sealed virtual IAccountSettingsClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<IAccountSettings> GetAccountSettingsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountSettingsClient/<GetAccountSettingsAsync>d__6")]
public sealed virtual Task`1<IAccountSettings> GetAccountSettingsAsync(IGetAccountSettingsParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountSettingsClient/<UpdateAccountSettingsAsync>d__7")]
public sealed virtual Task`1<IAccountSettings> UpdateAccountSettingsAsync(IUpdateAccountSettingsParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountSettingsClient/<UpdateProfileAsync>d__8")]
public sealed virtual Task`1<IAuthenticatedUser> UpdateProfileAsync(IUpdateProfileParameters parameters);
    public sealed virtual Task`1<IUser> UpdateProfileImageAsync(Byte[] binary);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AccountSettingsClient/<UpdateProfileImageAsync>d__10")]
public sealed virtual Task`1<IUser> UpdateProfileImageAsync(IUpdateProfileImageParameters parameters);
    public sealed virtual Task UpdateProfileBannerAsync(Byte[] binary);
    public sealed virtual Task UpdateProfileBannerAsync(IUpdateProfileBannerParameters parameters);
    public sealed virtual Task RemoveProfileBannerAsync();
    public sealed virtual Task RemoveProfileBannerAsync(IRemoveProfileBannerParameters parameters);
}
public class Tweetinvi.Client.AuthClient : object {
    private TwitterClient _client;
    private IAuthRequester _authRequester;
    public IAuthClientParametersValidator ParametersValidator { get; }
    public AuthClient(TwitterClient client);
    public sealed virtual IAuthClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<string> CreateBearerTokenAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.AuthClient/<CreateBearerTokenAsync>d__6")]
public sealed virtual Task`1<string> CreateBearerTokenAsync(ICreateBearerTokenParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AuthClient/<InitializeClientBearerTokenAsync>d__7")]
public sealed virtual Task InitializeClientBearerTokenAsync();
    public sealed virtual Task`1<IAuthenticationRequest> RequestAuthenticationUrlAsync();
    public sealed virtual Task`1<IAuthenticationRequest> RequestAuthenticationUrlAsync(string callbackUrl);
    public sealed virtual Task`1<IAuthenticationRequest> RequestAuthenticationUrlAsync(Uri callbackUri);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AuthClient/<RequestAuthenticationUrlAsync>d__11")]
public sealed virtual Task`1<IAuthenticationRequest> RequestAuthenticationUrlAsync(IRequestAuthUrlParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.AuthClient/<RequestCredentialsAsync>d__12")]
public sealed virtual Task`1<ITwitterCredentials> RequestCredentialsAsync(IRequestCredentialsParameters parameters);
    public sealed virtual Task`1<ITwitterCredentials> RequestCredentialsFromVerifierCodeAsync(string verifierCode, IAuthenticationRequest authenticationRequest);
    public sealed virtual Task`1<ITwitterCredentials> RequestCredentialsFromCallbackUrlAsync(string callbackUrl, IAuthenticationRequest authenticationRequest);
    public sealed virtual Task`1<ITwitterCredentials> RequestCredentialsFromCallbackUrlAsync(Uri callbackUri, IAuthenticationRequest authenticationRequest);
    public sealed virtual Task`1<InvalidateTokenResponse> InvalidateBearerTokenAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.AuthClient/<InvalidateBearerTokenAsync>d__17")]
public sealed virtual Task`1<InvalidateTokenResponse> InvalidateBearerTokenAsync(IInvalidateBearerTokenParameters parameters);
    public sealed virtual Task`1<InvalidateTokenResponse> InvalidateAccessTokenAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.AuthClient/<InvalidateAccessTokenAsync>d__19")]
public sealed virtual Task`1<InvalidateTokenResponse> InvalidateAccessTokenAsync(IInvalidateAccessTokenParameters parameters);
}
public abstract class Tweetinvi.Client.BaseRequester : object {
    [CompilerGeneratedAttribute]
private ITwitterClient <TwitterClient>k__BackingField;
    private ITwitterClientEvents _twitterClientEvents;
    protected ITwitterClient TwitterClient { get; }
    protected BaseRequester(ITwitterClient client, ITwitterClientEvents twitterClientEvents);
    [CompilerGeneratedAttribute]
protected ITwitterClient get_TwitterClient();
    public ITwitterRequest CreateRequest();
    [AsyncStateMachineAttribute("Tweetinvi.Client.BaseRequester/<ExecuteRequestAsync>d__6")]
protected Task ExecuteRequestAsync(Func`1<Task> action, ITwitterRequest request);
    [AsyncStateMachineAttribute("Tweetinvi.Client.BaseRequester/<ExecuteRequestAsync>d__7")]
protected Task ExecuteRequestAsync(Func`2<ITwitterRequest, Task> action);
    [AsyncStateMachineAttribute("Tweetinvi.Client.BaseRequester/<ExecuteRequestAsync>d__8`1")]
protected Task`1<T> ExecuteRequestAsync(Func`2<ITwitterRequest, Task`1<T>> action);
    [AsyncStateMachineAttribute("Tweetinvi.Client.BaseRequester/<ExecuteRequestAsync>d__9`1")]
protected Task`1<T> ExecuteRequestAsync(Func`1<Task`1<T>> action, ITwitterRequest request);
}
public class Tweetinvi.Client.ExecuteClient : object {
    private IExecuteRequester _executeRequester;
    public ExecuteClient(IExecuteRequester executeRequester);
    public sealed virtual Task`1<ITwitterResult`1<T>> AdvanceRequestAsync(Action`1<ITwitterRequest> configureRequest);
    public sealed virtual Task`1<ITwitterResult> AdvanceRequestAsync(Action`1<ITwitterRequest> configureRequest);
    public sealed virtual Task`1<ITwitterResult`1<T>> RequestAsync(Action`1<ITwitterQuery> configureQuery);
    public sealed virtual Task`1<ITwitterResult> RequestAsync(Action`1<ITwitterQuery> configureQuery);
    public Task`1<ITwitterRequest> PrepareTwitterRequestAsync(Action`1<ITwitterQuery> configureQuery);
    public Task`1<ITwitterRequest> PrepareTwitterRequestAsync(Action`1<ITwitterRequest> configureRequest);
}
public class Tweetinvi.Client.HelpClient : object {
    private ITwitterClient _client;
    private IHelpRequester _helpRequester;
    public IHelpClientParametersValidator ParametersValidator { get; }
    public HelpClient(ITwitterClient client, IHelpRequester helpRequester);
    public sealed virtual IHelpClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<ITwitterConfiguration> GetTwitterConfigurationAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.HelpClient/<GetTwitterConfigurationAsync>d__6")]
public sealed virtual Task`1<ITwitterConfiguration> GetTwitterConfigurationAsync(IGetTwitterConfigurationParameters parameters);
    public sealed virtual Task`1<SupportedLanguage[]> GetSupportedLanguagesAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.HelpClient/<GetSupportedLanguagesAsync>d__8")]
public sealed virtual Task`1<SupportedLanguage[]> GetSupportedLanguagesAsync(IGetSupportedLanguagesParameters parameters);
    public sealed virtual Task`1<IPlace> GetPlaceAsync(string placeId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.HelpClient/<GetPlaceAsync>d__10")]
public sealed virtual Task`1<IPlace> GetPlaceAsync(IGetPlaceParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.HelpClient/<SearchGeoAsync>d__11")]
public sealed virtual Task`1<IPlace[]> SearchGeoAsync(IGeoSearchParameters parameters);
    public sealed virtual Task`1<IPlace[]> SearchGeoReverseAsync(ICoordinates coordinates);
    [AsyncStateMachineAttribute("Tweetinvi.Client.HelpClient/<SearchGeoReverseAsync>d__13")]
public sealed virtual Task`1<IPlace[]> SearchGeoReverseAsync(IGeoSearchReverseParameters parameters);
}
public interface Tweetinvi.Client.IBaseRequester {
}
public class Tweetinvi.Client.JsonClient : object {
    private ITweetinviJsonConverter _tweetinviJsonConverter;
    public JsonClient(ITweetinviJsonConverter tweetinviJsonConverter);
    public sealed virtual string Serialize(T obj);
    public sealed virtual string Serialize(TFrom obj);
    public sealed virtual T Deserialize(string json);
}
public class Tweetinvi.Client.ListsClient : object {
    private ITwitterListsRequester _twitterListsRequester;
    private ITwitterClient _client;
    public ITwitterListsClientParametersValidator ParametersValidator { get; }
    public ListsClient(ITwitterListsRequester twitterListsRequester, ITwitterClient client);
    public sealed virtual ITwitterListsClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<ITwitterList> CreateListAsync(string name);
    public sealed virtual Task`1<ITwitterList> CreateListAsync(string name, PrivacyMode privacyMode);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<CreateListAsync>d__7")]
public sealed virtual Task`1<ITwitterList> CreateListAsync(ICreateListParameters parameters);
    public sealed virtual Task`1<ITwitterList> GetListAsync(long listId);
    public sealed virtual Task`1<ITwitterList> GetListAsync(string slug, IUserIdentifier user);
    public sealed virtual Task`1<ITwitterList> GetListAsync(ITwitterListIdentifier listId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetListAsync>d__11")]
public sealed virtual Task`1<ITwitterList> GetListAsync(IGetListParameters parameters);
    public sealed virtual Task`1<ITwitterList[]> GetListsSubscribedByAccountAsync();
    public sealed virtual Task`1<ITwitterList[]> GetListsSubscribedByAccountAsync(IGetListsSubscribedByAccountParameters parameters);
    public sealed virtual Task`1<ITwitterList[]> GetListsSubscribedByUserAsync(long userId);
    public sealed virtual Task`1<ITwitterList[]> GetListsSubscribedByUserAsync(string username);
    public sealed virtual Task`1<ITwitterList[]> GetListsSubscribedByUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetListsSubscribedByUserAsync>d__17")]
public sealed virtual Task`1<ITwitterList[]> GetListsSubscribedByUserAsync(IGetListsSubscribedByUserParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<UpdateListAsync>d__18")]
public sealed virtual Task`1<ITwitterList> UpdateListAsync(IUpdateListParameters parameters);
    public sealed virtual Task`1<ITwitterList> DestroyListAsync(long listId);
    public sealed virtual Task`1<ITwitterList> DestroyListAsync(string slug, IUserIdentifier user);
    public sealed virtual Task`1<ITwitterList> DestroyListAsync(ITwitterListIdentifier list);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<DestroyListAsync>d__22")]
public sealed virtual Task`1<ITwitterList> DestroyListAsync(IDestroyListParameters parameters);
    public sealed virtual Task`1<ITwitterList[]> GetListsOwnedByAccountAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetListsOwnedByAccountAsync>d__24")]
public sealed virtual Task`1<ITwitterList[]> GetListsOwnedByAccountAsync(IGetListsOwnedByAccountParameters parameters);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetListsOwnedByAccountIterator();
    public sealed virtual ITwitterIterator`1<ITwitterList> GetListsOwnedByAccountIterator(IGetListsOwnedByAccountParameters parameters);
    public sealed virtual Task`1<ITwitterList[]> GetListsOwnedByUserAsync(long userId);
    public sealed virtual Task`1<ITwitterList[]> GetListsOwnedByUserAsync(string username);
    public sealed virtual Task`1<ITwitterList[]> GetListsOwnedByUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetListsOwnedByUserAsync>d__30")]
public sealed virtual Task`1<ITwitterList[]> GetListsOwnedByUserAsync(IGetListsOwnedByUserParameters parameters);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetListsOwnedByUserIterator(long userId);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetListsOwnedByUserIterator(string username);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetListsOwnedByUserIterator(IUser user);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetListsOwnedByUserIterator(IGetListsOwnedByUserParameters parameters);
    public sealed virtual Task`1<ITwitterList> AddMemberToListAsync(long listId, long userId);
    public sealed virtual Task`1<ITwitterList> AddMemberToListAsync(ITwitterListIdentifier list, long userId);
    public sealed virtual Task`1<ITwitterList> AddMemberToListAsync(ITwitterListIdentifier list, string username);
    public sealed virtual Task`1<ITwitterList> AddMemberToListAsync(ITwitterListIdentifier list, IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<AddMemberToListAsync>d__39")]
public sealed virtual Task`1<ITwitterList> AddMemberToListAsync(IAddMemberToListParameters parameters);
    public sealed virtual Task`1<ITwitterList> AddMembersToListAsync(long listId, IEnumerable`1<long> userIds);
    public sealed virtual Task`1<ITwitterList> AddMembersToListAsync(long listId, IEnumerable`1<string> usernames);
    public sealed virtual Task`1<ITwitterList> AddMembersToListAsync(long listId, IEnumerable`1<IUserIdentifier> users);
    public sealed virtual Task`1<ITwitterList> AddMembersToListAsync(ITwitterListIdentifier list, IEnumerable`1<long> userIds);
    public sealed virtual Task`1<ITwitterList> AddMembersToListAsync(ITwitterListIdentifier list, IEnumerable`1<string> usernames);
    public sealed virtual Task`1<ITwitterList> AddMembersToListAsync(ITwitterListIdentifier list, IEnumerable`1<IUserIdentifier> users);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<AddMembersToListAsync>d__46")]
public sealed virtual Task`1<ITwitterList> AddMembersToListAsync(IAddMembersToListParameters parameters);
    public sealed virtual Task`1<ITwitterList[]> GetAccountListMembershipsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetAccountListMembershipsAsync>d__48")]
public sealed virtual Task`1<ITwitterList[]> GetAccountListMembershipsAsync(IGetAccountListMembershipsParameters parameters);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetAccountListMembershipsIterator();
    public sealed virtual ITwitterIterator`1<ITwitterList> GetAccountListMembershipsIterator(IGetAccountListMembershipsParameters parameters);
    public sealed virtual Task`1<ITwitterList[]> GetUserListMembershipsAsync(long userId);
    public sealed virtual Task`1<ITwitterList[]> GetUserListMembershipsAsync(string username);
    public sealed virtual Task`1<ITwitterList[]> GetUserListMembershipsAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetUserListMembershipsAsync>d__54")]
public sealed virtual Task`1<ITwitterList[]> GetUserListMembershipsAsync(IGetUserListMembershipsParameters parameters);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListMembershipsIterator(long userId);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListMembershipsIterator(string username);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListMembershipsIterator(IUserIdentifier user);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListMembershipsIterator(IGetUserListMembershipsParameters parameters);
    public sealed virtual Task`1<IUser[]> GetMembersOfListAsync(long listId);
    public sealed virtual Task`1<IUser[]> GetMembersOfListAsync(ITwitterListIdentifier list);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetMembersOfListAsync>d__61")]
public sealed virtual Task`1<IUser[]> GetMembersOfListAsync(IGetMembersOfListParameters parameters);
    public sealed virtual ITwitterIterator`1<IUser> GetMembersOfListIterator(long listId);
    public sealed virtual ITwitterIterator`1<IUser> GetMembersOfListIterator(ITwitterListIdentifier list);
    public sealed virtual ITwitterIterator`1<IUser> GetMembersOfListIterator(IGetMembersOfListParameters parameters);
    public sealed virtual Task`1<bool> CheckIfUserIsMemberOfListAsync(long listId, long userId);
    public sealed virtual Task`1<bool> CheckIfUserIsMemberOfListAsync(long listId, string username);
    public sealed virtual Task`1<bool> CheckIfUserIsMemberOfListAsync(long listId, IUserIdentifier user);
    public sealed virtual Task`1<bool> CheckIfUserIsMemberOfListAsync(ITwitterListIdentifier list, long userId);
    public sealed virtual Task`1<bool> CheckIfUserIsMemberOfListAsync(ITwitterListIdentifier list, string username);
    public sealed virtual Task`1<bool> CheckIfUserIsMemberOfListAsync(ITwitterListIdentifier list, IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<CheckIfUserIsMemberOfListAsync>d__71")]
public sealed virtual Task`1<bool> CheckIfUserIsMemberOfListAsync(ICheckIfUserIsMemberOfListParameters parameters);
    public sealed virtual Task`1<ITwitterList> RemoveMemberFromListAsync(long listId, long userId);
    public sealed virtual Task`1<ITwitterList> RemoveMemberFromListAsync(long listId, string username);
    public sealed virtual Task`1<ITwitterList> RemoveMemberFromListAsync(long listId, IUserIdentifier user);
    public sealed virtual Task`1<ITwitterList> RemoveMemberFromListAsync(ITwitterListIdentifier list, long userId);
    public sealed virtual Task`1<ITwitterList> RemoveMemberFromListAsync(ITwitterListIdentifier list, string username);
    public sealed virtual Task`1<ITwitterList> RemoveMemberFromListAsync(ITwitterListIdentifier list, IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<RemoveMemberFromListAsync>d__78")]
public sealed virtual Task`1<ITwitterList> RemoveMemberFromListAsync(IRemoveMemberFromListParameters parameters);
    public sealed virtual Task`1<ITwitterList> RemoveMembersFromListAsync(long listId, IEnumerable`1<long> userIds);
    public sealed virtual Task`1<ITwitterList> RemoveMembersFromListAsync(long listId, IEnumerable`1<string> usernames);
    public sealed virtual Task`1<ITwitterList> RemoveMembersFromListAsync(long listId, IEnumerable`1<IUserIdentifier> users);
    public sealed virtual Task`1<ITwitterList> RemoveMembersFromListAsync(ITwitterListIdentifier list, IEnumerable`1<long> userIds);
    public sealed virtual Task`1<ITwitterList> RemoveMembersFromListAsync(ITwitterListIdentifier list, IEnumerable`1<string> usernames);
    public sealed virtual Task`1<ITwitterList> RemoveMembersFromListAsync(ITwitterListIdentifier list, IEnumerable`1<IUserIdentifier> users);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<RemoveMembersFromListAsync>d__85")]
public sealed virtual Task`1<ITwitterList> RemoveMembersFromListAsync(IRemoveMembersFromListParameters parameters);
    public sealed virtual Task`1<ITwitterList> SubscribeToListAsync(long listId);
    public sealed virtual Task`1<ITwitterList> SubscribeToListAsync(ITwitterListIdentifier list);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<SubscribeToListAsync>d__88")]
public sealed virtual Task`1<ITwitterList> SubscribeToListAsync(ISubscribeToListParameters parameters);
    public sealed virtual Task`1<ITwitterList> UnsubscribeFromListAsync(long listId);
    public sealed virtual Task`1<ITwitterList> UnsubscribeFromListAsync(ITwitterListIdentifier list);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<UnsubscribeFromListAsync>d__91")]
public sealed virtual Task`1<ITwitterList> UnsubscribeFromListAsync(IUnsubscribeFromListParameters parameters);
    public sealed virtual Task`1<IUser[]> GetListSubscribersAsync(long listId);
    public sealed virtual Task`1<IUser[]> GetListSubscribersAsync(ITwitterListIdentifier list);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetListSubscribersAsync>d__94")]
public sealed virtual Task`1<IUser[]> GetListSubscribersAsync(IGetListSubscribersParameters parameters);
    public sealed virtual ITwitterIterator`1<IUser> GetListSubscribersIterator(long listId);
    public sealed virtual ITwitterIterator`1<IUser> GetListSubscribersIterator(ITwitterListIdentifier list);
    public sealed virtual ITwitterIterator`1<IUser> GetListSubscribersIterator(IGetListSubscribersParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetAccountListSubscriptionsAsync>d__98")]
public sealed virtual Task`1<ITwitterList[]> GetAccountListSubscriptionsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetAccountListSubscriptionsAsync>d__99")]
public sealed virtual Task`1<ITwitterList[]> GetAccountListSubscriptionsAsync(IGetAccountListSubscriptionsParameters parameters);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetAccountListSubscriptionsIterator();
    public sealed virtual ITwitterIterator`1<ITwitterList> GetAccountListSubscriptionsIterator(IGetAccountListSubscriptionsParameters parameters);
    public sealed virtual Task`1<ITwitterList[]> GetUserListSubscriptionsAsync(long userId);
    public sealed virtual Task`1<ITwitterList[]> GetUserListSubscriptionsAsync(string username);
    public sealed virtual Task`1<ITwitterList[]> GetUserListSubscriptionsAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetUserListSubscriptionsAsync>d__105")]
public sealed virtual Task`1<ITwitterList[]> GetUserListSubscriptionsAsync(IGetUserListSubscriptionsParameters parameters);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListSubscriptionsIterator(long userId);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListSubscriptionsIterator(string username);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListSubscriptionsIterator(IUserIdentifier user);
    public sealed virtual ITwitterIterator`1<ITwitterList> GetUserListSubscriptionsIterator(IGetUserListSubscriptionsParameters parameters);
    private sealed virtual override Task`1<bool> Tweetinvi.Client.IListsClient.CheckIfUserIsSubscriberOfListAsync(long listId, long userId);
    public sealed virtual Task`1<bool> CheckIfUserIsSubscriberOfListAsync(long listId, string username);
    public sealed virtual Task`1<bool> CheckIfUserIsSubscriberOfListAsync(long listId, IUserIdentifier user);
    public sealed virtual Task`1<bool> CheckIfUserIsSubscriberOfListAsync(ITwitterListIdentifier list, long userId);
    public sealed virtual Task`1<bool> CheckIfUserIsSubscriberOfListAsync(ITwitterListIdentifier list, string username);
    public sealed virtual Task`1<bool> CheckIfUserIsSubscriberOfListAsync(ITwitterListIdentifier list, IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<CheckIfUserIsSubscriberOfListAsync>d__116")]
public sealed virtual Task`1<bool> CheckIfUserIsSubscriberOfListAsync(ICheckIfUserIsSubscriberOfListParameters parameters);
    public sealed virtual Task`1<ITweet[]> GetTweetsFromListAsync(long listId);
    public sealed virtual Task`1<ITweet[]> GetTweetsFromListAsync(ITwitterListIdentifier list);
    [AsyncStateMachineAttribute("Tweetinvi.Client.ListsClient/<GetTweetsFromListAsync>d__119")]
public sealed virtual Task`1<ITweet[]> GetTweetsFromListAsync(IGetTweetsFromListParameters parameters);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetTweetsFromListIterator(long listId);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetTweetsFromListIterator(ITwitterListIdentifier list);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetTweetsFromListIterator(IGetTweetsFromListParameters parameters);
    [CompilerGeneratedAttribute]
private ITwitterList[] <GetListsOwnedByAccountIterator>b__26_0(ITwitterResult`1<ITwitterListCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private ITwitterList <GetListsOwnedByAccountIterator>b__26_1(ITwitterListDTO dto);
    [CompilerGeneratedAttribute]
private ITwitterList[] <GetListsOwnedByUserIterator>b__34_0(ITwitterResult`1<ITwitterListCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private ITwitterList <GetListsOwnedByUserIterator>b__34_1(ITwitterListDTO dto);
    [CompilerGeneratedAttribute]
private ITwitterList[] <GetAccountListMembershipsIterator>b__50_0(ITwitterResult`1<ITwitterListCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private ITwitterList <GetAccountListMembershipsIterator>b__50_1(ITwitterListDTO dto);
    [CompilerGeneratedAttribute]
private ITwitterList[] <GetUserListMembershipsIterator>b__58_0(ITwitterResult`1<ITwitterListCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private ITwitterList <GetUserListMembershipsIterator>b__58_1(ITwitterListDTO dto);
    [CompilerGeneratedAttribute]
private IUser[] <GetMembersOfListIterator>b__64_0(ITwitterResult`1<IUserCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private IUser[] <GetListSubscribersIterator>b__97_0(ITwitterResult`1<IUserCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private ITwitterList[] <GetAccountListSubscriptionsIterator>b__101_0(ITwitterResult`1<ITwitterListCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private ITwitterList <GetAccountListSubscriptionsIterator>b__101_1(ITwitterListDTO dto);
    [CompilerGeneratedAttribute]
private ITwitterList[] <GetUserListSubscriptionsIterator>b__109_0(ITwitterResult`1<ITwitterListCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private ITweet[] <GetTweetsFromListIterator>b__122_0(ITwitterResult`1<ITweetDTO[]> twitterResult);
}
public class Tweetinvi.Client.MessagesClient : object {
    private ITwitterClient _client;
    private IMessageRequester _messageRequester;
    public IMessagesClientParametersValidator ParametersValidator { get; }
    public MessagesClient(ITwitterClient client, IMessageRequester messageRequester);
    public sealed virtual IMessagesClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<IMessage> PublishMessageAsync(string text, IUserIdentifier recipient);
    public sealed virtual Task`1<IMessage> PublishMessageAsync(string text, long recipientId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.MessagesClient/<PublishMessageAsync>d__7")]
public sealed virtual Task`1<IMessage> PublishMessageAsync(IPublishMessageParameters parameters);
    public sealed virtual Task`1<IMessage> GetMessageAsync(long messageId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.MessagesClient/<GetMessageAsync>d__9")]
public sealed virtual Task`1<IMessage> GetMessageAsync(IGetMessageParameters parameters);
    public sealed virtual Task`1<IMessage[]> GetMessagesAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.MessagesClient/<GetMessagesAsync>d__11")]
public sealed virtual Task`1<IMessage[]> GetMessagesAsync(IGetMessagesParameters parameters);
    public sealed virtual ITwitterIterator`1<IMessage> GetMessagesIterator();
    public sealed virtual ITwitterIterator`1<IMessage> GetMessagesIterator(IGetMessagesParameters parameters);
    public sealed virtual Task DestroyMessageAsync(long messageId);
    public sealed virtual Task DestroyMessageAsync(IMessage message);
    public sealed virtual Task DestroyMessageAsync(IDeleteMessageParameters parameters);
    [CompilerGeneratedAttribute]
private IMessage[] <GetMessagesIterator>b__13_0(ITwitterResult`1<IMessageCursorQueryResultDTO> twitterResult);
}
public class Tweetinvi.Client.RateLimitsClient : object {
    private ITwitterClient _client;
    private IRateLimitCacheManager _rateLimitCacheManager;
    private IRateLimitAwaiter _rateLimitAwaiter;
    private IHelpRequester _helpRequester;
    public RateLimitsClient(ITwitterClient client, IRateLimitCacheManager rateLimitCacheManager, IRateLimitAwaiter rateLimitAwaiter);
    [AsyncStateMachineAttribute("Tweetinvi.Client.RateLimitsClient/<InitializeRateLimitsManagerAsync>d__5")]
public sealed virtual Task InitializeRateLimitsManagerAsync();
    public sealed virtual Task`1<ICredentialsRateLimits> GetRateLimitsAsync();
    public sealed virtual Task`1<ICredentialsRateLimits> GetRateLimitsAsync(RateLimitsSource from);
    [AsyncStateMachineAttribute("Tweetinvi.Client.RateLimitsClient/<GetRateLimitsAsync>d__8")]
public sealed virtual Task`1<ICredentialsRateLimits> GetRateLimitsAsync(IGetRateLimitsParameters parameters);
    public sealed virtual Task`1<IEndpointRateLimit> GetEndpointRateLimitAsync(string url);
    public sealed virtual Task`1<IEndpointRateLimit> GetEndpointRateLimitAsync(string url, RateLimitsSource from);
    public sealed virtual Task`1<IEndpointRateLimit> GetEndpointRateLimitAsync(IGetEndpointRateLimitsParameters parameters);
    public sealed virtual Task WaitForQueryRateLimitAsync(string url);
    public sealed virtual Task WaitForQueryRateLimitAsync(string url, RateLimitsSource from);
    public sealed virtual Task WaitForQueryRateLimitAsync(IEndpointRateLimit endpointRateLimit);
    public sealed virtual Task ClearRateLimitCacheAsync(IReadOnlyTwitterCredentials credentials);
    public sealed virtual Task ClearRateLimitCacheAsync();
    public sealed virtual Task ClearAllRateLimitCacheAsync();
}
public class Tweetinvi.Client.RawExecutors : object {
    private IAuthRequester _authRequester;
    private IAccountSettingsRequester _accountSettingsRequester;
    private IHelpRequester _helpRequester;
    private ISearchRequester _searchRequester;
    private ITwitterListsRequester _listsRequester;
    private ITimelinesRequester _timelinesRequester;
    private ITrendsRequester _trendsRequester;
    private ITweetsRequester _tweetsRequester;
    private IUploadRequester _uploadRequester;
    private IUsersRequester _usersRequester;
    private IAccountActivityRequester _accountActivityRequester;
    private ISearchV2Requester _searchV2Requester;
    private ITweetsV2Requester _tweetsV2Requester;
    private IUsersV2Requester _usersV2Requester;
    public IAuthRequester Auth { get; }
    public IAccountSettingsRequester AccountSettings { get; }
    public IHelpRequester Help { get; }
    public ISearchRequester Search { get; }
    public ITwitterListsRequester Lists { get; }
    public ITimelinesRequester Timelines { get; }
    public ITrendsRequester Trends { get; }
    public ITweetsRequester Tweets { get; }
    public IUploadRequester Upload { get; }
    public IUsersRequester Users { get; }
    public IAccountActivityRequester AccountActivity { get; }
    public ISearchV2Requester SearchV2 { get; }
    public ITweetsV2Requester TweetsV2 { get; }
    public IUsersV2Requester UsersV2 { get; }
    public RawExecutors(IAccountActivityRequester accountActivityRequester, IAuthRequester authRequester, IAccountSettingsRequester accountSettingsRequester, IHelpRequester helpRequester, ISearchRequester searchRequester, ITwitterListsRequester listsRequester, ITimelinesRequester timelinesRequester, ITrendsRequester trendsRequester, ITweetsRequester tweetsRequester, IUploadRequester uploadRequester, IUsersRequester usersRequester, ISearchV2Requester searchV2Requester, ITweetsV2Requester tweetsV2Requester, IUsersV2Requester usersV2Requester);
    public sealed virtual IAuthRequester get_Auth();
    public sealed virtual IAccountSettingsRequester get_AccountSettings();
    public sealed virtual IHelpRequester get_Help();
    public sealed virtual ISearchRequester get_Search();
    public sealed virtual ITwitterListsRequester get_Lists();
    public sealed virtual ITimelinesRequester get_Timelines();
    public sealed virtual ITrendsRequester get_Trends();
    public sealed virtual ITweetsRequester get_Tweets();
    public sealed virtual IUploadRequester get_Upload();
    public sealed virtual IUsersRequester get_Users();
    public sealed virtual IAccountActivityRequester get_AccountActivity();
    public sealed virtual ISearchV2Requester get_SearchV2();
    public sealed virtual ITweetsV2Requester get_TweetsV2();
    public sealed virtual IUsersV2Requester get_UsersV2();
}
public class Tweetinvi.Client.Requesters.AccountActivityRequester : BaseRequester {
    private IAccountActivityClientRequiredParametersValidator _validator;
    private IAccountActivityController _accountActivityController;
    public AccountActivityRequester(ITwitterClient client, ITwitterClientEvents twitterClientEvents, IAccountActivityClientRequiredParametersValidator validator, IAccountActivityController accountActivityController);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookDTO>> CreateAccountActivityWebhookAsync(ICreateAccountActivityWebhookParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IGetAccountActivityWebhookEnvironmentsResultDTO>> GetAccountActivityWebhookEnvironmentsAsync(IGetAccountActivityWebhookEnvironmentsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookDTO[]>> GetAccountActivityEnvironmentWebhooksAsync(IGetAccountActivityEnvironmentWebhooksParameters parameters);
    public sealed virtual Task`1<ITwitterResult> DeleteAccountActivityWebhookAsync(IDeleteAccountActivityWebhookParameters parameters);
    public sealed virtual Task`1<ITwitterResult> TriggerAccountActivityWebhookCRCAsync(ITriggerAccountActivityWebhookCRCParameters parameters);
    public sealed virtual Task`1<ITwitterResult> SubscribeToAccountActivityAsync(ISubscribeToAccountActivityParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookSubscriptionsCount>> CountAccountActivitySubscriptionsAsync(ICountAccountActivitySubscriptionsParameters parameters);
    public sealed virtual Task`1<ITwitterResult> IsAccountSubscribedToAccountActivityAsync(IIsAccountSubscribedToAccountActivityParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IWebhookEnvironmentSubscriptionsDTO>> GetAccountActivitySubscriptionsAsync(IGetAccountActivitySubscriptionsParameters parameters);
    public sealed virtual Task`1<ITwitterResult> UnsubscribeFromAccountActivityAsync(IUnsubscribeFromAccountActivityParameters parameters);
}
public class Tweetinvi.Client.Requesters.AccountSettingsRequester : BaseRequester {
    private IAccountSettingsController _accountSettingsController;
    private IAccountSettingsClientRequiredParametersValidator _validator;
    public AccountSettingsRequester(ITwitterClient client, ITwitterClientEvents clientEvents, IAccountSettingsController accountSettingsController, IAccountSettingsClientRequiredParametersValidator validator);
    public sealed virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> GetAccountSettingsAsync(IGetAccountSettingsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IAccountSettingsDTO>> UpdateAccountSettingsAsync(IUpdateAccountSettingsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileAsync(IUpdateProfileParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UpdateProfileImageAsync(IUpdateProfileImageParameters parameters);
    public sealed virtual Task`1<ITwitterResult> UpdateProfileBannerAsync(IUpdateProfileBannerParameters parameters);
    public sealed virtual Task`1<ITwitterResult> RemoveProfileBannerAsync(IRemoveProfileBannerParameters parameters);
}
public class Tweetinvi.Client.Requesters.AuthRequester : BaseRequester {
    private IAuthController _authController;
    private IAuthClientRequiredParametersValidator _validator;
    public AuthRequester(ITwitterClient client, ITwitterClientEvents clientEvents, IAuthController authController, IAuthClientRequiredParametersValidator validator);
    public sealed virtual Task`1<ITwitterResult`1<CreateTokenResponseDTO>> CreateBearerTokenAsync(ICreateBearerTokenParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IAuthenticationRequest>> RequestAuthUrlAsync(IRequestAuthUrlParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterCredentials>> RequestCredentialsAsync(IRequestCredentialsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateBearerTokenAsync(IInvalidateBearerTokenParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<InvalidateTokenResponse>> InvalidateAccessTokenAsync(IInvalidateAccessTokenParameters parameters);
}
public class Tweetinvi.Client.Requesters.ExecuteRequester : BaseRequester {
    private ITwitterAccessor _accessor;
    public ExecuteRequester(ITwitterClient client, ITwitterClientEvents clientEvents, ITwitterAccessor accessor);
    public sealed virtual Task`1<ITwitterResult`1<T>> RequestAsync(Action`1<ITwitterRequest> configureRequest);
    public sealed virtual Task`1<ITwitterResult> RequestAsync(Action`1<ITwitterRequest> configureRequest);
    public sealed virtual Task`1<ITwitterResult`1<T>> RequestAsync(Action`1<ITwitterQuery> configureQuery);
    public sealed virtual Task`1<ITwitterResult> RequestAsync(Action`1<ITwitterQuery> configureQuery);
    public sealed virtual Task`1<ITwitterRequest> PrepareTwitterRequestAsync(Action`1<ITwitterQuery> configureQuery);
    public sealed virtual Task`1<ITwitterRequest> PrepareTwitterRequestAsync(Action`1<ITwitterRequest> configureRequest);
}
public class Tweetinvi.Client.Requesters.HelpRequester : BaseRequester {
    private IHelpController _helpController;
    private IHelpClientRequiredParametersValidator _validator;
    public HelpRequester(ITwitterClient client, ITwitterClientEvents clientEvents, IHelpController helpController, IHelpClientRequiredParametersValidator validator);
    public sealed virtual Task`1<ITwitterResult`1<CredentialsRateLimitsDTO>> GetRateLimitsAsync(IGetRateLimitsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterConfiguration>> GetTwitterConfigurationAsync(IGetTwitterConfigurationParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<SupportedLanguage[]>> GetSupportedLanguagesAsync(IGetSupportedLanguagesParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IPlace>> GetPlaceAsync(IGetPlaceParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoAsync(IGeoSearchParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<SearchGeoSearchResultDTO>> SearchGeoReverseAsync(IGeoSearchReverseParameters parameters);
}
public class Tweetinvi.Client.Requesters.MessageRequester : BaseRequester {
    private IMessageController _messageController;
    private IMessagesClientParametersValidator _messagesClientParametersValidator;
    public MessageRequester(ITwitterClient client, IMessageController messageController, IMessagesClientParametersValidator messagesClientParametersValidator, ITwitterClientEvents twitterClientEvents);
    public sealed virtual Task`1<ITwitterResult`1<ICreateMessageDTO>> PublishMessageAsync(IPublishMessageParameters parameters);
    public sealed virtual Task`1<ITwitterResult> DestroyMessageAsync(IDeleteMessageParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IGetMessageDTO>> GetMessageAsync(IGetMessageParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IMessageCursorQueryResultDTO>> GetMessagesIterator(IGetMessagesParameters parameters);
}
public class Tweetinvi.Client.Requesters.SearchRequester : BaseRequester {
    private ISearchController _searchController;
    private ISearchClientRequiredParametersValidator _validator;
    public SearchRequester(ISearchController searchController, ISearchClientRequiredParametersValidator validator, ITwitterClient client, ITwitterClientEvents twitterClientEvents);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ISearchResultsDTO>, Nullable`1<long>> GetSearchTweetsIterator(ISearchTweetsParameters parameters);
    public sealed virtual ITwitterPageIterator`2<IFilteredTwitterResult`1<UserDTO[]>, Nullable`1<int>> GetSearchUsersIterator(ISearchUsersParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> CreateSavedSearchAsync(ICreateSavedSearchParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> GetSavedSearchAsync(IGetSavedSearchParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO[]>> ListSavedSearchesAsync(IListSavedSearchesParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<SavedSearchDTO>> DestroySavedSearchAsync(IDestroySavedSearchParameters parameters);
}
public class Tweetinvi.Client.Requesters.TimelinesRequester : BaseRequester {
    private ITimelineController _timelineController;
    private ITimelineClientRequiredParametersValidator _validator;
    public TimelinesRequester(ITwitterClient client, ITwitterClientEvents clientEvents, ITimelineController timelineController, ITimelineClientRequiredParametersValidator validator);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetUserTimelineIterator(IGetUserTimelineParameters parameters);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetHomeTimelineIterator(IGetHomeTimelineParameters parameters);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetRetweetsOfMeTimelineIterator(IGetRetweetsOfMeTimelineParameters parameters);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetMentionsTimelineIterator(IGetMentionsTimelineParameters parameters);
}
public class Tweetinvi.Client.Requesters.TrendsRequester : BaseRequester {
    private ITrendsController _trendsController;
    private ITrendsClientRequiredParametersValidator _trendsClientRequiredParametersValidator;
    public TrendsRequester(ITrendsController trendsController, ITrendsClientRequiredParametersValidator trendsClientRequiredParametersValidator, ITwitterClient client, ITwitterClientEvents twitterClientEvents);
    public sealed virtual Task`1<ITwitterResult`1<IGetTrendsAtResult[]>> GetPlaceTrendsAtAsync(IGetTrendsAtParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendLocationsAsync(IGetTrendsLocationParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITrendLocation[]>> GetTrendsLocationCloseToAsync(IGetTrendsLocationCloseToParameters parameters);
}
public class Tweetinvi.Client.Requesters.TweetsRequester : BaseRequester {
    private ITweetController _tweetController;
    private ITweetsClientRequiredParametersValidator _tweetsClientRequiredParametersValidator;
    public TweetsRequester(ITwitterClient client, ITwitterClientEvents clientEvents, ITweetController tweetController, ITweetsClientRequiredParametersValidator tweetsClientRequiredParametersValidator);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> GetTweetAsync(IGetTweetParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetTweetsAsync(IGetTweetsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishTweetAsync(IPublishTweetParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyTweetAsync(IDestroyTweetParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO[]>> GetRetweetsAsync(IGetRetweetsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> PublishRetweetAsync(IPublishRetweetParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> DestroyRetweetAsync(IDestroyRetweetParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetRetweeterIdsIterator(IGetRetweeterIdsParameters parameters);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetUserFavoriteTweetsIterator(IGetUserFavoriteTweetsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> FavoriteTweetAsync(IFavoriteTweetParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITweetDTO>> UnfavoriteTweetAsync(IUnfavoriteTweetParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IOEmbedTweetDTO>> GetOEmbedTweetAsync(IGetOEmbedTweetParameters parameters);
}
public class Tweetinvi.Client.Requesters.TwitterListsRequester : BaseRequester {
    private ITwitterResultFactory _twitterResultFactory;
    private ITwitterClientFactories _factories;
    private ITwitterListController _twitterListController;
    private ITwitterListsClientRequiredParametersValidator _validator;
    public TwitterListsRequester(ITwitterClient client, ITwitterClientEvents clientEvents, ITwitterResultFactory twitterResultFactory, ITwitterClientFactories factories, ITwitterListController twitterListController, ITwitterListsClientRequiredParametersValidator validator);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CreateListAsync(ICreateListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> GetListAsync(IGetListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO[]>> GetListsSubscribedByUserAsync(IGetListsSubscribedByUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UpdateListAsync(IUpdateListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> DestroyListAsync(IDestroyListParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetListsOwnedByAccountIterator(IGetListsOwnedByAccountParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetListsOwnedByUserIterator(IGetListsOwnedByUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`2<ITwitterListDTO, ITwitterList>> AddMemberToListAsync(IAddMemberToListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`2<ITwitterListDTO, ITwitterList>> AddMembersToListAsync(IAddMembersToListParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetAccountListMembershipsIterator(IGetAccountListMembershipsParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListMembershipsIterator(IGetUserListMembershipsParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMembersOfListIterator(IGetMembersOfListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsAListMemberAsync(ICheckIfUserIsMemberOfListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMemberFromListAsync(IRemoveMemberFromListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> RemoveMembersFromListAsync(IRemoveMembersFromListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> SubscribeToListAsync(ISubscribeToListParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> UnsubscribeFromListAsync(IUnsubscribeFromListParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetListSubscribersIterator(IGetListSubscribersParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetAccountListSubscriptionsIterator(IGetAccountListSubscriptionsParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<ITwitterListCursorQueryResultDTO>> GetUserListSubscriptionsIterator(IGetUserListSubscriptionsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<ITwitterListDTO>> CheckIfUserIsSubscriberOfListAsync(ICheckIfUserIsSubscriberOfListParameters parameters);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<ITweetDTO[]>, Nullable`1<long>> GetTweetsFromListIterator(IGetTweetsFromListParameters parameters);
}
public class Tweetinvi.Client.Requesters.UploadRequester : BaseRequester {
    private IUploadClientRequiredParametersValidator _uploadClientRequiredParametersValidator;
    private IUploadQueryExecutor _uploadQueryExecutor;
    private IUploadMediaStatusQueryExecutor _uploadMediaStatusQueryExecutor;
    private IUploadHelper _uploadHelper;
    public UploadRequester(ITwitterClient client, ITwitterClientEvents clientEvents, IUploadClientRequiredParametersValidator uploadClientRequiredParametersValidator, IUploadQueryExecutor uploadQueryExecutor, IUploadMediaStatusQueryExecutor uploadMediaStatusQueryExecutor, IUploadHelper uploadHelper);
    public sealed virtual Task`1<IChunkUploadResult> UploadBinaryAsync(IUploadParameters parameters);
    public sealed virtual Task`1<ITwitterResult> AddMediaMetadataAsync(IAddMediaMetadataParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUploadedMediaInfo>> GetVideoProcessingStatusAsync(IMedia media);
    public sealed virtual Task WaitForMediaProcessingToGetAllMetadataAsync(IMedia media);
}
public class Tweetinvi.Client.Requesters.UsersRequester : BaseRequester {
    private IUserController _userController;
    private IUsersClientRequiredParametersValidator _validator;
    public UsersRequester(ITwitterClient client, ITwitterClientEvents clientEvents, IUserController userController, IUsersClientRequiredParametersValidator validator);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> GetAuthenticatedUserAsync(IGetAuthenticatedUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> GetUserAsync(IGetUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO[]>> GetUsersAsync(IGetUsersParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFriendIdsIterator(IGetFriendIdsParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetFollowerIdsIterator(IGetFollowerIdsParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> GetRelationshipBetweenAsync(IGetRelationshipBetweenParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> FollowUserAsync(IFollowUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipDetailsDTO>> UpdateRelationshipAsync(IUpdateRelationshipParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnfollowUserAsync(IUnfollowUserParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsRequestingFriendshipIterator(IGetUserIdsRequestingFriendshipParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetUserIdsYouRequestedToFollowIterator(IGetUserIdsYouRequestedToFollowParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> BlockUserAsync(IBlockUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnblockUserAsync(IUnblockUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> ReportUserForSpamAsync(IReportUserForSpamParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetBlockedUserIdsIterator(IGetBlockedUserIdsParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetBlockedUsersIterator(IGetBlockedUsersParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IRelationshipStateDTO[]>> GetRelationshipsWithAsync(IGetRelationshipsWithParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<Int64[]>> GetUserIdsWhoseRetweetsAreMutedAsync(IGetUserIdsWhoseRetweetsAreMutedParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IIdsCursorQueryResultDTO>> GetMutedUserIdsIterator(IGetMutedUserIdsParameters parameters);
    public sealed virtual ITwitterPageIterator`1<ITwitterResult`1<IUserCursorQueryResultDTO>> GetMutedUsersIterator(IGetMutedUsersParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> MuteUserAsync(IMuteUserParameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<IUserDTO>> UnmuteUserAsync(IUnmuteUserParameters parameters);
    public sealed virtual Task`1<Stream> GetProfileImageStream(IGetProfileImageParameters parameters);
}
public interface Tweetinvi.Client.Requesters.V2.IStreamsV2Requester {
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> GetRulesForFilteredStreamV2Async(IGetRulesForFilteredStreamV2Parameters parameters);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> AddRulesToFilteredStreamAsync(IAddRulesToFilteredStreamV2Parameters parameters);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> DeleteRulesFromFilteredStreamAsync(IDeleteRulesFromFilteredStreamV2Parameters parameters);
    public abstract virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> TestFilteredStreamRulesV2Async(IAddRulesToFilteredStreamV2Parameters parameters);
}
public class Tweetinvi.Client.Requesters.V2.SearchV2Requester : BaseRequester {
    private ISearchV2Controller _searchV2Controller;
    public SearchV2Requester(ITwitterClient client, ITwitterClientEvents twitterClientEvents, ISearchV2Controller searchV2Controller);
    public sealed virtual Task`1<ITwitterResult`1<SearchTweetsV2Response>> SearchTweetsAsync(ISearchTweetsV2Parameters parameters);
    public sealed virtual ITwitterPageIterator`2<ITwitterResult`1<SearchTweetsV2Response>, string> GetSearchTweetsV2Iterator(ISearchTweetsV2Parameters parameters);
}
public class Tweetinvi.Client.Requesters.V2.StreamsV2Requester : BaseRequester {
    private IStreamsV2Controller _streamsV2Controller;
    public StreamsV2Requester(ITwitterClient client, ITwitterClientEvents twitterClientEvents, IStreamsV2Controller streamsV2Controller);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> GetRulesForFilteredStreamV2Async(IGetRulesForFilteredStreamV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> AddRulesToFilteredStreamAsync(IAddRulesToFilteredStreamV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> DeleteRulesFromFilteredStreamAsync(IDeleteRulesFromFilteredStreamV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<FilteredStreamRulesV2Response>> TestFilteredStreamRulesV2Async(IAddRulesToFilteredStreamV2Parameters parameters);
}
public class Tweetinvi.Client.Requesters.V2.TweetsV2Requester : BaseRequester {
    private ITweetsV2Controller _tweetsV2Controller;
    public TweetsV2Requester(ITwitterClient client, ITwitterClientEvents twitterClientEvents, ITweetsV2Controller tweetsV2Controller);
    public sealed virtual Task`1<ITwitterResult`1<TweetV2Response>> GetTweetAsync(IGetTweetV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<TweetsV2Response>> GetTweetsAsync(IGetTweetsV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<TweetHideV2Response>> ChangeTweetReplyVisibilityAsync(IChangeTweetReplyVisibilityV2Parameters parameters);
}
public class Tweetinvi.Client.Requesters.V2.UsersV2Requester : BaseRequester {
    private IUsersV2Controller _usersV2Controller;
    public UsersV2Requester(ITwitterClient client, ITwitterClientEvents twitterClientEvents, IUsersV2Controller usersV2Controller);
    public sealed virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByIdV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByIdV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<UserV2Response>> GetUserAsync(IGetUserByNameV2Parameters parameters);
    public sealed virtual Task`1<ITwitterResult`1<UsersV2Response>> GetUsersAsync(IGetUsersByNameV2Parameters parameters);
}
public class Tweetinvi.Client.SearchClient : object {
    private ITwitterClient _client;
    public ISearchClientParametersValidator ParametersValidator { get; }
    public SearchClient(ITwitterClient client);
    public sealed virtual ISearchClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<ITweet[]> SearchTweetsAsync(string query);
    public sealed virtual Task`1<ITweet[]> SearchTweetsAsync(IGeoCode geoCode);
    [AsyncStateMachineAttribute("Tweetinvi.Client.SearchClient/<SearchTweetsAsync>d__6")]
public sealed virtual Task`1<ITweet[]> SearchTweetsAsync(ISearchTweetsParameters parameters);
    public sealed virtual Task`1<ISearchResults> SearchTweetsWithMetadataAsync(string query);
    [AsyncStateMachineAttribute("Tweetinvi.Client.SearchClient/<SearchTweetsWithMetadataAsync>d__8")]
public sealed virtual Task`1<ISearchResults> SearchTweetsWithMetadataAsync(ISearchTweetsParameters parameters);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetSearchTweetsIterator(string query);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetSearchTweetsIterator(ISearchTweetsParameters parameters);
    public sealed virtual ITweet[] FilterTweets(ITweet[] tweets, Nullable`1<OnlyGetTweetsThatAre> filter, bool tweetsMustContainGeoInformation);
    public sealed virtual Task`1<IUser[]> SearchUsersAsync(string query);
    [AsyncStateMachineAttribute("Tweetinvi.Client.SearchClient/<SearchUsersAsync>d__13")]
public sealed virtual Task`1<IUser[]> SearchUsersAsync(ISearchUsersParameters parameters);
    public sealed virtual ITwitterIterator`2<IUser, Nullable`1<int>> GetSearchUsersIterator(string query);
    public sealed virtual ITwitterIterator`2<IUser, Nullable`1<int>> GetSearchUsersIterator(ISearchUsersParameters parameters);
    public sealed virtual Task`1<ISavedSearch> CreateSavedSearchAsync(string query);
    [AsyncStateMachineAttribute("Tweetinvi.Client.SearchClient/<CreateSavedSearchAsync>d__17")]
public sealed virtual Task`1<ISavedSearch> CreateSavedSearchAsync(ICreateSavedSearchParameters parameters);
    public sealed virtual Task`1<ISavedSearch> GetSavedSearchAsync(long savedSearchId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.SearchClient/<GetSavedSearchAsync>d__19")]
public sealed virtual Task`1<ISavedSearch> GetSavedSearchAsync(IGetSavedSearchParameters parameters);
    public sealed virtual Task`1<ISavedSearch[]> ListSavedSearchesAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.SearchClient/<ListSavedSearchesAsync>d__21")]
public sealed virtual Task`1<ISavedSearch[]> ListSavedSearchesAsync(IListSavedSearchesParameters parameters);
    public sealed virtual Task`1<ISavedSearch> DestroySavedSearchAsync(long savedSearchId);
    public sealed virtual Task`1<ISavedSearch> DestroySavedSearchAsync(ISavedSearch savedSearch);
    [AsyncStateMachineAttribute("Tweetinvi.Client.SearchClient/<DestroySavedSearchAsync>d__24")]
public sealed virtual Task`1<ISavedSearch> DestroySavedSearchAsync(IDestroySavedSearchParameters parameters);
    [CompilerGeneratedAttribute]
private ITweet[] <GetSearchTweetsIterator>b__10_0(ITwitterResult`1<ISearchResultsDTO> twitterResult);
    [CompilerGeneratedAttribute]
private IUser[] <GetSearchUsersIterator>b__15_0(IFilteredTwitterResult`1<UserDTO[]> twitterResult);
}
public class Tweetinvi.Client.StreamsClient : object {
    private ITwitterClient _client;
    private IFactory`1<ISampleStream> _sampleStreamFactory;
    private IFactory`1<IFilteredStream> _filteredStreamFactory;
    private IFactory`1<ITrackedStream> _trackedStreamFactory;
    private IFactory`1<ITweetStream> _tweetStreamFactory;
    public StreamsClient(ITwitterClient client, IFactory`1<ISampleStream> sampleStreamFactory, IFactory`1<IFilteredStream> filteredStreamFactory, IFactory`1<ITrackedStream> trackedStreamFactory, IFactory`1<ITweetStream> tweetStreamFactory);
    public sealed virtual ISampleStream CreateSampleStream();
    public sealed virtual ISampleStream CreateSampleStream(ICreateSampleStreamParameters parameters);
    public sealed virtual IFilteredStream CreateFilteredStream();
    public sealed virtual IFilteredStream CreateFilteredStream(ICreateFilteredTweetStreamParameters parameters);
    public sealed virtual ITweetStream CreateTweetStream();
    public sealed virtual ITweetStream CreateTweetStream(ICreateTweetStreamParameters parameters);
    public sealed virtual ITrackedStream CreateTrackedTweetStream();
    public sealed virtual ITrackedStream CreateTrackedTweetStream(ICreateTrackedTweetStreamParameters parameters);
}
public class Tweetinvi.Client.TimelinesClient : object {
    private ITwitterClient _client;
    private ITimelinesRequester _timelinesRequester;
    public ITimelineClientParametersValidator ParametersValidator { get; }
    public TimelinesClient(ITwitterClient client);
    public sealed virtual ITimelineClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<ITweet[]> GetHomeTimelineAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.TimelinesClient/<GetHomeTimelineAsync>d__6")]
public sealed virtual Task`1<ITweet[]> GetHomeTimelineAsync(IGetHomeTimelineParameters parameters);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetHomeTimelineIterator();
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetHomeTimelineIterator(IGetHomeTimelineParameters parameters);
    public sealed virtual Task`1<ITweet[]> GetUserTimelineAsync(long userId);
    public sealed virtual Task`1<ITweet[]> GetUserTimelineAsync(string username);
    public sealed virtual Task`1<ITweet[]> GetUserTimelineAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TimelinesClient/<GetUserTimelineAsync>d__12")]
public sealed virtual Task`1<ITweet[]> GetUserTimelineAsync(IGetUserTimelineParameters parameters);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserTimelineIterator(long userId);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserTimelineIterator(string username);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserTimelineIterator(IUserIdentifier user);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserTimelineIterator(IGetUserTimelineParameters parameters);
    public sealed virtual Task`1<ITweet[]> GetMentionsTimelineAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.TimelinesClient/<GetMentionsTimelineAsync>d__18")]
public sealed virtual Task`1<ITweet[]> GetMentionsTimelineAsync(IGetMentionsTimelineParameters parameters);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetMentionsTimelineIterator();
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetMentionsTimelineIterator(IGetMentionsTimelineParameters parameters);
    public sealed virtual Task`1<ITweet[]> GetRetweetsOfMeTimelineAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.TimelinesClient/<GetRetweetsOfMeTimelineAsync>d__22")]
public sealed virtual Task`1<ITweet[]> GetRetweetsOfMeTimelineAsync(IGetRetweetsOfMeTimelineParameters parameters);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetRetweetsOfMeTimelineIterator();
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetRetweetsOfMeTimelineIterator(IGetRetweetsOfMeTimelineParameters parameters);
    [CompilerGeneratedAttribute]
private ITweet[] <GetHomeTimelineIterator>b__8_0(ITwitterResult`1<ITweetDTO[]> twitterResult);
    [CompilerGeneratedAttribute]
private ITweet[] <GetUserTimelineIterator>b__16_0(ITwitterResult`1<ITweetDTO[]> twitterResult);
    [CompilerGeneratedAttribute]
private ITweet[] <GetMentionsTimelineIterator>b__20_0(ITwitterResult`1<ITweetDTO[]> twitterResult);
    [CompilerGeneratedAttribute]
private ITweet[] <GetRetweetsOfMeTimelineIterator>b__24_0(ITwitterResult`1<ITweetDTO[]> twitterResult);
}
public class Tweetinvi.Client.Tools.TwitterClientFactories : object {
    private ITwitterClient _client;
    private IJsonObjectConverter _jsonObjectConverter;
    public TwitterClientFactories(ITwitterClient client, IJsonObjectConverter jsonObjectConverter);
    public sealed virtual IAccountSettings CreateAccountSettings(IAccountSettingsDTO dto);
    public sealed virtual ITwitterList CreateTwitterList(string json);
    public sealed virtual ITwitterList CreateTwitterList(ITwitterListDTO twitterListDTO);
    public sealed virtual ITwitterList[] CreateTwitterLists(IEnumerable`1<ITwitterListDTO> listDTOs);
    public sealed virtual IMessage CreateMessage(IMessageEventWithAppDTO messageEventWithAppDTO);
    public sealed virtual IMessage[] CreateMessages(IEnumerable`1<IMessageEventWithAppDTO> eventWithAppDTOs);
    public sealed virtual IMessage CreateMessage(IGetMessageDTO getMessageDTO);
    public sealed virtual IMessage CreateMessage(ICreateMessageDTO createMessageDTO);
    public sealed virtual IMessage CreateMessage(IMessageEventDTO messageEventDTO);
    public sealed virtual IMessage CreateMessage(IMessageEventDTO messageEventDTO, IApp app);
    public sealed virtual IMessage CreateMessage(string json);
    public sealed virtual IMessage CreateMessageFromMessageEventWithApp(string json);
    private IMessage _buildMessage(IMessageEventDTO messageEventDTO, IDictionary`2<long, IApp> apps);
    public sealed virtual IRelationshipState CreateRelationshipState(string json);
    public sealed virtual IRelationshipState CreateRelationshipState(IRelationshipStateDTO relationshipStateDTO);
    public sealed virtual IRelationshipState[] CreateRelationshipStates(IRelationshipStateDTO[] relationshipStateDTOs);
    public sealed virtual IRelationshipDetails CreateRelationshipDetails(string json);
    public sealed virtual IRelationshipDetails CreateRelationshipDetails(IRelationshipDetailsDTO dto);
    public sealed virtual ISavedSearch CreateSavedSearch(string json);
    public sealed virtual ISavedSearch CreateSavedSearch(ISavedSearchDTO savedSearchDTO);
    public sealed virtual ISearchResults CreateSearchResult(ISearchResultsDTO searchResultsDTO);
    public sealed virtual ITweet CreateTweet(string json);
    public sealed virtual ITweet CreateTweet(ITweetDTO tweetDTO);
    public sealed virtual ITweet[] CreateTweets(IEnumerable`1<ITweetDTO> tweetDTOs);
    public sealed virtual ITweetWithSearchMetadata CreateTweetWithSearchMetadata(ITweetWithSearchMetadataDTO tweetWithSearchMetadataDTO);
    public sealed virtual IOEmbedTweet CreateOEmbedTweet(string json);
    public sealed virtual IOEmbedTweet CreateOEmbedTweet(IOEmbedTweetDTO oEmbedTweetDTO);
    public sealed virtual IUser CreateUser(string json);
    public sealed virtual IUser CreateUser(IUserDTO userDTO);
    public sealed virtual IUser[] CreateUsers(IEnumerable`1<IUserDTO> usersDTO);
    public sealed virtual IAuthenticatedUser CreateAuthenticatedUser(string json);
    public sealed virtual IAuthenticatedUser CreateAuthenticatedUser(IUserDTO userDTO);
    public sealed virtual IWebhook CreateWebhook(string json);
    public sealed virtual IWebhook CreateWebhook(IWebhookDTO webhookDTO);
    public sealed virtual IWebhookEnvironment CreateWebhookEnvironment(string json);
    public sealed virtual IWebhookEnvironment CreateWebhookEnvironment(IWebhookEnvironmentDTO webhookEnvironmentDTO);
    public sealed virtual IWebhookEnvironmentSubscriptions CreateWebhookEnvironmentSubscriptions(string json);
    public sealed virtual IWebhookEnvironmentSubscriptions CreateWebhookEnvironmentSubscriptions(IWebhookEnvironmentSubscriptionsDTO webhookEnvironmentSubscriptionsDTO);
    public sealed virtual ITwitterConfiguration CreateTwitterConfiguration(string json);
    public sealed virtual ICredentialsRateLimits CreateRateLimits(string json);
    public sealed virtual ICredentialsRateLimits CreateRateLimits(CredentialsRateLimitsDTO dto);
    public sealed virtual ITwitterCredentials CreateTwitterCredentials(string json);
    public sealed virtual IConsumerOnlyCredentials CreateConsumerCredentials(string json);
    public sealed virtual IMedia CreateMedia(string json);
    public sealed virtual IUploadedMediaInfo CreateUploadedMediaInfo(string json);
    public sealed virtual ISearchResults CreateSearchResult(string json);
    public sealed virtual IAccountSettings CreateAccountSettings(string json);
    [CompilerGeneratedAttribute]
private IRelationshipState <CreateRelationshipStates>b__18_0(IRelationshipStateDTO dto);
}
public class Tweetinvi.Client.TrendsClient : object {
    private ITwitterClient _client;
    public ITrendsClientParametersValidator ParametersValidator { get; }
    public TrendsClient(ITwitterClient client);
    public sealed virtual ITrendsClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<IGetTrendsAtResult> GetPlaceTrendsAtAsync(long woeid);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TrendsClient/<GetPlaceTrendsAtAsync>d__5")]
public sealed virtual Task`1<IGetTrendsAtResult> GetPlaceTrendsAtAsync(IGetTrendsAtParameters parameters);
    public sealed virtual Task`1<ITrendLocation[]> GetTrendLocationsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.TrendsClient/<GetTrendLocationsAsync>d__7")]
public sealed virtual Task`1<ITrendLocation[]> GetTrendLocationsAsync(IGetTrendsLocationParameters parameters);
    public sealed virtual Task`1<ITrendLocation[]> GetTrendsLocationCloseToAsync(double latitude, double longitude);
    public sealed virtual Task`1<ITrendLocation[]> GetTrendsLocationCloseToAsync(ICoordinates coordinates);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TrendsClient/<GetTrendsLocationCloseToAsync>d__10")]
public sealed virtual Task`1<ITrendLocation[]> GetTrendsLocationCloseToAsync(IGetTrendsLocationCloseToParameters parameters);
}
public class Tweetinvi.Client.TweetsClient : object {
    private ITwitterClient _client;
    private ITweetsRequester _tweetsRequester;
    public ITweetsClientParametersValidator ParametersValidator { get; }
    public TweetsClient(ITwitterClient client);
    public sealed virtual ITweetsClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<ITweet> GetTweetAsync(long tweetId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<GetTweetAsync>d__6")]
public sealed virtual Task`1<ITweet> GetTweetAsync(IGetTweetParameters parameters);
    public sealed virtual Task`1<ITweet[]> GetTweetsAsync(Int64[] tweetIds);
    public sealed virtual Task`1<ITweet[]> GetTweetsAsync(ITweetIdentifier[] tweets);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<GetTweetsAsync>d__9")]
public sealed virtual Task`1<ITweet[]> GetTweetsAsync(IGetTweetsParameters parameters);
    public sealed virtual Task`1<ITweet> PublishTweetAsync(string text);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<PublishTweetAsync>d__11")]
public sealed virtual Task`1<ITweet> PublishTweetAsync(IPublishTweetParameters parameters);
    public sealed virtual Task DestroyTweetAsync(long tweetId);
    public sealed virtual Task DestroyTweetAsync(ITweetIdentifier tweet);
    public sealed virtual Task DestroyTweetAsync(ITweet tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<DestroyTweetAsync>d__15")]
public sealed virtual Task DestroyTweetAsync(ITweetDTO tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<DestroyTweetAsync>d__16")]
public sealed virtual Task DestroyTweetAsync(IDestroyTweetParameters parameters);
    public sealed virtual Task`1<ITweet[]> GetRetweetsAsync(long tweetId);
    public sealed virtual Task`1<ITweet[]> GetRetweetsAsync(ITweetIdentifier tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<GetRetweetsAsync>d__19")]
public sealed virtual Task`1<ITweet[]> GetRetweetsAsync(IGetRetweetsParameters parameters);
    public sealed virtual Task`1<ITweet> PublishRetweetAsync(long tweetId);
    public sealed virtual Task`1<ITweet> PublishRetweetAsync(ITweetIdentifier tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<PublishRetweetAsync>d__22")]
public sealed virtual Task`1<ITweet> PublishRetweetAsync(IPublishRetweetParameters parameters);
    public sealed virtual Task DestroyRetweetAsync(long retweetId);
    public sealed virtual Task DestroyRetweetAsync(ITweetIdentifier retweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<DestroyRetweetAsync>d__25")]
public sealed virtual Task DestroyRetweetAsync(IDestroyRetweetParameters parameters);
    public sealed virtual Task`1<Int64[]> GetRetweeterIdsAsync(long tweetId);
    public sealed virtual Task`1<Int64[]> GetRetweeterIdsAsync(ITweetIdentifier tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<GetRetweeterIdsAsync>d__28")]
public sealed virtual Task`1<Int64[]> GetRetweeterIdsAsync(IGetRetweeterIdsParameters parameters);
    public sealed virtual ITwitterIterator`1<long> GetRetweeterIdsIterator(long tweetId);
    public sealed virtual ITwitterIterator`1<long> GetRetweeterIdsIterator(ITweetIdentifier tweet);
    public sealed virtual ITwitterIterator`1<long> GetRetweeterIdsIterator(IGetRetweeterIdsParameters parameters);
    public sealed virtual Task`1<ITweet[]> GetUserFavoriteTweetsAsync(long userId);
    public sealed virtual Task`1<ITweet[]> GetUserFavoriteTweetsAsync(string username);
    public sealed virtual Task`1<ITweet[]> GetUserFavoriteTweetsAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<GetUserFavoriteTweetsAsync>d__35")]
public sealed virtual Task`1<ITweet[]> GetUserFavoriteTweetsAsync(IGetUserFavoriteTweetsParameters parameters);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserFavoriteTweetsIterator(long userId);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserFavoriteTweetsIterator(string username);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserFavoriteTweetsIterator(IUserIdentifier user);
    public sealed virtual ITwitterIterator`2<ITweet, Nullable`1<long>> GetUserFavoriteTweetsIterator(IGetUserFavoriteTweetsParameters parameters);
    public sealed virtual Task FavoriteTweetAsync(long tweetId);
    public sealed virtual Task FavoriteTweetAsync(ITweetIdentifier tweet);
    public sealed virtual Task FavoriteTweetAsync(ITweet tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<FavoriteTweetAsync>d__43")]
public sealed virtual Task FavoriteTweetAsync(ITweetDTO tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<FavoriteTweetAsync>d__44")]
public sealed virtual Task FavoriteTweetAsync(IFavoriteTweetParameters parameters);
    public sealed virtual Task UnfavoriteTweetAsync(long tweetId);
    public sealed virtual Task UnfavoriteTweetAsync(ITweetIdentifier tweet);
    public sealed virtual Task UnfavoriteTweetAsync(ITweet tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<UnfavoriteTweetAsync>d__48")]
public sealed virtual Task UnfavoriteTweetAsync(ITweetDTO tweet);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<UnfavoriteTweetAsync>d__49")]
public sealed virtual Task UnfavoriteTweetAsync(IUnfavoriteTweetParameters parameters);
    public sealed virtual Task`1<IOEmbedTweet> GetOEmbedTweetAsync(ITweetIdentifier tweet);
    public sealed virtual Task`1<IOEmbedTweet> GetOEmbedTweetAsync(long tweetId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.TweetsClient/<GetOEmbedTweetAsync>d__52")]
public sealed virtual Task`1<IOEmbedTweet> GetOEmbedTweetAsync(IGetOEmbedTweetParameters parameters);
    [CompilerGeneratedAttribute]
private ITweet[] <GetUserFavoriteTweetsIterator>b__39_0(ITwitterResult`1<ITweetDTO[]> twitterResult);
    [CompilerGeneratedAttribute]
private ITweet <GetUserFavoriteTweetsIterator>b__39_1(ITweetDTO x);
}
public class Tweetinvi.Client.UploadClient : object {
    private ITwitterClient _client;
    private IUploadRequester _uploadRequester;
    public IUploadClientParametersValidator ParametersValidator { get; }
    public UploadClient(ITwitterClient client);
    public sealed virtual IUploadClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<IMedia> UploadBinaryAsync(Byte[] binary);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UploadClient/<UploadBinaryAsync>d__6")]
public sealed virtual Task`1<IMedia> UploadBinaryAsync(IUploadParameters parameters);
    public sealed virtual Task`1<IMedia> UploadTweetImageAsync(Byte[] binary);
    public sealed virtual Task`1<IMedia> UploadTweetImageAsync(IUploadTweetImageParameters parameters);
    public sealed virtual Task`1<IMedia> UploadMessageImageAsync(Byte[] binary);
    public sealed virtual Task`1<IMedia> UploadMessageImageAsync(IUploadMessageImageParameters parameters);
    public sealed virtual Task`1<IMedia> UploadTweetVideoAsync(Byte[] binary);
    public sealed virtual Task`1<IMedia> UploadTweetVideoAsync(IUploadTweetVideoParameters parameters);
    public sealed virtual Task`1<IMedia> UploadMessageVideoAsync(Byte[] binary);
    public sealed virtual Task`1<IMedia> UploadMessageVideoAsync(IUploadMessageVideoParameters parameters);
    public sealed virtual Task AddMediaMetadataAsync(IMediaMetadata metadata);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UploadClient/<AddMediaMetadataAsync>d__16")]
public sealed virtual Task AddMediaMetadataAsync(IAddMediaMetadataParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UploadClient/<GetVideoProcessingStatusAsync>d__17")]
public sealed virtual Task`1<IUploadedMediaInfo> GetVideoProcessingStatusAsync(IMedia media);
    public sealed virtual Task WaitForMediaProcessingToGetAllMetadataAsync(IMedia media);
}
public class Tweetinvi.Client.UsersClient : object {
    private ITwitterClient _client;
    private IUsersRequester _usersRequester;
    private IMultiLevelCursorIteratorFactory _multiLevelCursorIteratorFactory;
    public IUsersClientParametersValidator ParametersValidator { get; }
    public UsersClient(ITwitterClient client, IMultiLevelCursorIteratorFactory multiLevelCursorIteratorFactory);
    public sealed virtual IUsersClientParametersValidator get_ParametersValidator();
    public sealed virtual Task`1<IAuthenticatedUser> GetAuthenticatedUserAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetAuthenticatedUserAsync>d__7")]
public sealed virtual Task`1<IAuthenticatedUser> GetAuthenticatedUserAsync(IGetAuthenticatedUserParameters parameters);
    public sealed virtual Task`1<IUser> GetUserAsync(long userId);
    public sealed virtual Task`1<IUser> GetUserAsync(string username);
    public sealed virtual Task`1<IUser> GetUserAsync(IUserIdentifier userIdentifier);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetUserAsync>d__11")]
public sealed virtual Task`1<IUser> GetUserAsync(IGetUserParameters parameters);
    public sealed virtual Task`1<IUser[]> GetUsersAsync(IEnumerable`1<long> userIds);
    public sealed virtual Task`1<IUser[]> GetUsersAsync(IEnumerable`1<string> usernames);
    public sealed virtual Task`1<IUser[]> GetUsersAsync(IEnumerable`1<IUserIdentifier> userIdentifiers);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetUsersAsync>d__15")]
public sealed virtual Task`1<IUser[]> GetUsersAsync(IGetUsersParameters parameters);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(long sourceUserId, long targetUserId);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(long sourceUserId, string targetUsername);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(long sourceUserId, IUserIdentifier targetUser);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(string sourceUsername, long targetUserId);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(string sourceUsername, string targetUsername);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(string sourceUsername, IUserIdentifier targetUser);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(IUserIdentifier sourceUser, long targetUserId);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(IUserIdentifier sourceUser, string targetUsername);
    public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(IUserIdentifier sourceUser, IUserIdentifier targetUser);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetRelationshipBetweenAsync>d__25")]
public sealed virtual Task`1<IRelationshipDetails> GetRelationshipBetweenAsync(IGetRelationshipBetweenParameters parameters);
    public sealed virtual Task`1<Int64[]> GetFriendIdsAsync(string username);
    public sealed virtual Task`1<Int64[]> GetFriendIdsAsync(long userId);
    public sealed virtual Task`1<Int64[]> GetFriendIdsAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetFriendIdsAsync>d__29")]
public sealed virtual Task`1<Int64[]> GetFriendIdsAsync(IGetFriendIdsParameters parameters);
    public sealed virtual ITwitterIterator`1<long> GetFriendIdsIterator(string username);
    public sealed virtual ITwitterIterator`1<long> GetFriendIdsIterator(long userId);
    public sealed virtual ITwitterIterator`1<long> GetFriendIdsIterator(IUserIdentifier userIdentifier);
    public sealed virtual ITwitterIterator`1<long> GetFriendIdsIterator(IGetFriendIdsParameters parameters);
    public sealed virtual Task`1<IUser[]> GetFriendsAsync(long userId);
    public sealed virtual Task`1<IUser[]> GetFriendsAsync(string username);
    public sealed virtual Task`1<IUser[]> GetFriendsAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetFriendsAsync>d__37")]
public sealed virtual Task`1<IUser[]> GetFriendsAsync(IGetFriendsParameters parameters);
    public sealed virtual IMultiLevelCursorIterator`2<long, IUser> GetFriendsIterator(IGetFriendsParameters parameters);
    public sealed virtual Task`1<Int64[]> GetFollowerIdsAsync(long userId);
    public sealed virtual Task`1<Int64[]> GetFollowerIdsAsync(string username);
    public sealed virtual Task`1<Int64[]> GetFollowerIdsAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetFollowerIdsAsync>d__42")]
public sealed virtual Task`1<Int64[]> GetFollowerIdsAsync(IGetFollowerIdsParameters parameters);
    public sealed virtual ITwitterIterator`1<long> GetFollowerIdsIterator(string username);
    public sealed virtual ITwitterIterator`1<long> GetFollowerIdsIterator(long userId);
    public sealed virtual ITwitterIterator`1<long> GetFollowerIdsIterator(IUserIdentifier userIdentifier);
    public sealed virtual ITwitterIterator`1<long> GetFollowerIdsIterator(IGetFollowerIdsParameters parameters);
    public sealed virtual Task`1<IUser[]> GetFollowersAsync(long userId);
    public sealed virtual Task`1<IUser[]> GetFollowersAsync(string username);
    public sealed virtual Task`1<IUser[]> GetFollowersAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetFollowersAsync>d__50")]
public sealed virtual Task`1<IUser[]> GetFollowersAsync(IGetFollowersParameters parameters);
    public sealed virtual IMultiLevelCursorIterator`2<long, IUser> GetFollowersIterator(IGetFollowersParameters parameters);
    public sealed virtual Task`1<IUser> BlockUserAsync(long userId);
    public sealed virtual Task`1<IUser> BlockUserAsync(string username);
    public sealed virtual Task`1<IUser> BlockUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<BlockUserAsync>d__55")]
public sealed virtual Task`1<IUser> BlockUserAsync(IBlockUserParameters parameters);
    public sealed virtual Task`1<IUser> UnblockUserAsync(long userId);
    public sealed virtual Task`1<IUser> UnblockUserAsync(string username);
    public sealed virtual Task`1<IUser> UnblockUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<UnblockUserAsync>d__59")]
public sealed virtual Task`1<IUser> UnblockUserAsync(IUnblockUserParameters parameters);
    public sealed virtual Task`1<IUser> ReportUserForSpamAsync(long userId);
    public sealed virtual Task`1<IUser> ReportUserForSpamAsync(string username);
    public sealed virtual Task`1<IUser> ReportUserForSpamAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<ReportUserForSpamAsync>d__63")]
public sealed virtual Task`1<IUser> ReportUserForSpamAsync(IReportUserForSpamParameters parameters);
    public sealed virtual Task`1<Int64[]> GetBlockedUserIdsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetBlockedUserIdsAsync>d__65")]
public sealed virtual Task`1<Int64[]> GetBlockedUserIdsAsync(IGetBlockedUserIdsParameters parameters);
    public sealed virtual ITwitterIterator`1<long> GetBlockedUserIdsIterator();
    public sealed virtual ITwitterIterator`1<long> GetBlockedUserIdsIterator(IGetBlockedUserIdsParameters parameters);
    public sealed virtual Task`1<IUser[]> GetBlockedUsersAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetBlockedUsersAsync>d__69")]
public sealed virtual Task`1<IUser[]> GetBlockedUsersAsync(IGetBlockedUsersParameters parameters);
    public sealed virtual ITwitterIterator`1<IUser> GetBlockedUsersIterator();
    public sealed virtual ITwitterIterator`1<IUser> GetBlockedUsersIterator(IGetBlockedUsersParameters parameters);
    public sealed virtual Task`1<IUser> FollowUserAsync(long userId);
    public sealed virtual Task`1<IUser> FollowUserAsync(string username);
    public sealed virtual Task`1<IUser> FollowUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<FollowUserAsync>d__75")]
public sealed virtual Task`1<IUser> FollowUserAsync(IFollowUserParameters parameters);
    public sealed virtual Task`1<IUser> UnfollowUserAsync(long userId);
    public sealed virtual Task`1<IUser> UnfollowUserAsync(string username);
    public sealed virtual Task`1<IUser> UnfollowUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<UnfollowUserAsync>d__79")]
public sealed virtual Task`1<IUser> UnfollowUserAsync(IUnfollowUserParameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<UpdateRelationshipAsync>d__80")]
public sealed virtual Task UpdateRelationshipAsync(IUpdateRelationshipParameters parameters);
    public sealed virtual Task`1<Int64[]> GetUserIdsRequestingFriendshipAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetUserIdsRequestingFriendshipAsync>d__82")]
public sealed virtual Task`1<Int64[]> GetUserIdsRequestingFriendshipAsync(IGetUserIdsRequestingFriendshipParameters parameters);
    public sealed virtual ITwitterIterator`1<long> GetUserIdsRequestingFriendshipIterator();
    public sealed virtual ITwitterIterator`1<long> GetUserIdsRequestingFriendshipIterator(IGetUserIdsRequestingFriendshipParameters parameters);
    public sealed virtual Task`1<IUser[]> GetUsersRequestingFriendshipAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetUsersRequestingFriendshipAsync>d__86")]
public sealed virtual Task`1<IUser[]> GetUsersRequestingFriendshipAsync(IGetUsersRequestingFriendshipParameters parameters);
    public sealed virtual IMultiLevelCursorIterator`2<long, IUser> GetUsersRequestingFriendshipIterator();
    public sealed virtual IMultiLevelCursorIterator`2<long, IUser> GetUsersRequestingFriendshipIterator(IGetUsersRequestingFriendshipParameters parameters);
    public sealed virtual Task`1<Int64[]> GetUserIdsYouRequestedToFollowAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetUserIdsYouRequestedToFollowAsync>d__90")]
public sealed virtual Task`1<Int64[]> GetUserIdsYouRequestedToFollowAsync(IGetUserIdsYouRequestedToFollowParameters parameters);
    public sealed virtual ITwitterIterator`1<long> GetUserIdsYouRequestedToFollowIterator();
    public sealed virtual ITwitterIterator`1<long> GetUserIdsYouRequestedToFollowIterator(IGetUserIdsYouRequestedToFollowParameters parameters);
    public sealed virtual Task`1<IUser[]> GetUsersYouRequestedToFollowAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetUsersYouRequestedToFollowAsync>d__94")]
public sealed virtual Task`1<IUser[]> GetUsersYouRequestedToFollowAsync(IGetUsersYouRequestedToFollowParameters parameters);
    public sealed virtual IMultiLevelCursorIterator`2<long, IUser> GetUsersYouRequestedToFollowIterator();
    public sealed virtual IMultiLevelCursorIterator`2<long, IUser> GetUsersYouRequestedToFollowIterator(IGetUsersYouRequestedToFollowParameters parameters);
    public sealed virtual Task`1<IUserDictionary`1<IRelationshipState>> GetRelationshipsWithAsync(Int64[] userIds);
    public sealed virtual Task`1<IUserDictionary`1<IRelationshipState>> GetRelationshipsWithAsync(String[] usernames);
    public sealed virtual Task`1<IUserDictionary`1<IRelationshipState>> GetRelationshipsWithAsync(IUserIdentifier[] users);
    public sealed virtual Task`1<IUserDictionary`1<IRelationshipState>> GetRelationshipsWithAsync(IUser[] users);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetRelationshipsWithAsync>d__101")]
public sealed virtual Task`1<IUserDictionary`1<IRelationshipState>> GetRelationshipsWithAsync(IGetRelationshipsWithParameters parameters);
    public sealed virtual Task`1<Int64[]> GetUserIdsWhoseRetweetsAreMutedAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetUserIdsWhoseRetweetsAreMutedAsync>d__103")]
public sealed virtual Task`1<Int64[]> GetUserIdsWhoseRetweetsAreMutedAsync(IGetUserIdsWhoseRetweetsAreMutedParameters parameters);
    public sealed virtual Task`1<Int64[]> GetMutedUserIdsAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetMutedUserIdsAsync>d__105")]
public sealed virtual Task`1<Int64[]> GetMutedUserIdsAsync(IGetMutedUserIdsParameters parameters);
    public sealed virtual ITwitterIterator`1<long> GetMutedUserIdsIterator();
    public sealed virtual ITwitterIterator`1<long> GetMutedUserIdsIterator(IGetMutedUserIdsParameters parameters);
    public sealed virtual Task`1<IUser[]> GetMutedUsersAsync();
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<GetMutedUsersAsync>d__109")]
public sealed virtual Task`1<IUser[]> GetMutedUsersAsync(IGetMutedUsersParameters parameters);
    public sealed virtual ITwitterIterator`1<IUser> GetMutedUsersIterator();
    public sealed virtual ITwitterIterator`1<IUser> GetMutedUsersIterator(IGetMutedUsersParameters parameters);
    public sealed virtual Task`1<IUser> MuteUserAsync(long userId);
    public sealed virtual Task`1<IUser> MuteUserAsync(string username);
    public sealed virtual Task`1<IUser> MuteUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<MuteUserAsync>d__115")]
public sealed virtual Task`1<IUser> MuteUserAsync(IMuteUserParameters parameters);
    public sealed virtual Task`1<IUser> UnmuteUserAsync(long userId);
    public sealed virtual Task`1<IUser> UnmuteUserAsync(string username);
    public sealed virtual Task`1<IUser> UnmuteUserAsync(IUserIdentifier user);
    [AsyncStateMachineAttribute("Tweetinvi.Client.UsersClient/<UnmuteUserAsync>d__119")]
public sealed virtual Task`1<IUser> UnmuteUserAsync(IUnmuteUserParameters parameters);
    public sealed virtual Task`1<Stream> GetProfileImageStreamAsync(string url);
    public sealed virtual Task`1<Stream> GetProfileImageStreamAsync(IUser user);
    public sealed virtual Task`1<Stream> GetProfileImageStreamAsync(IUserDTO user);
    public sealed virtual Task`1<Stream> GetProfileImageStreamAsync(IGetProfileImageParameters parameters);
    [CompilerGeneratedAttribute]
private IUser[] <GetBlockedUsersIterator>b__71_0(ITwitterResult`1<IUserCursorQueryResultDTO> pageResult);
    [CompilerGeneratedAttribute]
private IUser[] <GetMutedUsersIterator>b__111_0(ITwitterResult`1<IUserCursorQueryResultDTO> pageResult);
}
public class Tweetinvi.Client.V2.SearchV2Client : object {
    private ISearchV2Requester _searchV2Requester;
    public SearchV2Client(ISearchV2Requester searchV2Requester);
    public sealed virtual Task`1<SearchTweetsV2Response> SearchTweetsAsync(string query);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.SearchV2Client/<SearchTweetsAsync>d__3")]
public sealed virtual Task`1<SearchTweetsV2Response> SearchTweetsAsync(ISearchTweetsV2Parameters parameters);
    public sealed virtual ITwitterRequestIterator`2<SearchTweetsV2Response, string> GetSearchTweetsV2Iterator(string query);
    public sealed virtual ITwitterRequestIterator`2<SearchTweetsV2Response, string> GetSearchTweetsV2Iterator(ISearchTweetsV2Parameters parameters);
}
public class Tweetinvi.Client.V2.StreamsV2Client : object {
    private IFactory`1<ISampleStreamV2> _sampleStreamFactory;
    private IFactory`1<IFilteredStreamV2> _filteredStreamFactory;
    private IStreamsV2Requester _streamsV2Requester;
    public StreamsV2Client(IFactory`1<ISampleStreamV2> sampleStreamFactory, IFactory`1<IFilteredStreamV2> filteredStreamFactory, IStreamsV2Requester streamsV2Requester);
    public sealed virtual ISampleStreamV2 CreateSampleStream();
    public sealed virtual IFilteredStreamV2 CreateFilteredStream();
    public sealed virtual Task`1<FilteredStreamRulesV2Response> GetRulesForFilteredStreamV2Async();
    public sealed virtual Task`1<FilteredStreamRulesV2Response> GetRulesForFilteredStreamV2Async(String[] ruleIds);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.StreamsV2Client/<GetRulesForFilteredStreamV2Async>d__8")]
public sealed virtual Task`1<FilteredStreamRulesV2Response> GetRulesForFilteredStreamV2Async(IGetRulesForFilteredStreamV2Parameters parameters);
    public sealed virtual Task`1<FilteredStreamRulesV2Response> AddRulesToFilteredStreamAsync(FilteredStreamRuleConfig[] rulesToAdd);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.StreamsV2Client/<AddRulesToFilteredStreamAsync>d__10")]
public sealed virtual Task`1<FilteredStreamRulesV2Response> AddRulesToFilteredStreamAsync(IAddRulesToFilteredStreamV2Parameters parameters);
    public sealed virtual Task`1<FilteredStreamRulesV2Response> DeleteRulesFromFilteredStreamAsync(String[] ruleIdsToDelete);
    public sealed virtual Task`1<FilteredStreamRulesV2Response> DeleteRulesFromFilteredStreamAsync(FilteredStreamRuleV2[] rulesToDelete);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.StreamsV2Client/<DeleteRulesFromFilteredStreamAsync>d__13")]
public sealed virtual Task`1<FilteredStreamRulesV2Response> DeleteRulesFromFilteredStreamAsync(IDeleteRulesFromFilteredStreamV2Parameters parameters);
    public sealed virtual Task`1<FilteredStreamRulesV2Response> TestFilteredStreamRulesV2Async(FilteredStreamRuleConfig[] rulesToAdd);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.StreamsV2Client/<TestFilteredStreamRulesV2Async>d__15")]
public sealed virtual Task`1<FilteredStreamRulesV2Response> TestFilteredStreamRulesV2Async(IAddRulesToFilteredStreamV2Parameters parameters);
}
public class Tweetinvi.Client.V2.TweetsV2Client : object {
    private ITweetsV2Requester _tweetsV2Requester;
    public TweetsV2Client(ITweetsV2Requester tweetsV2Requester);
    public sealed virtual Task`1<TweetV2Response> GetTweetAsync(long tweetId);
    public sealed virtual Task`1<TweetV2Response> GetTweetAsync(string tweetId);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.TweetsV2Client/<GetTweetAsync>d__4")]
public sealed virtual Task`1<TweetV2Response> GetTweetAsync(IGetTweetV2Parameters parameters);
    public sealed virtual Task`1<TweetsV2Response> GetTweetsAsync(Int64[] tweetIds);
    public sealed virtual Task`1<TweetsV2Response> GetTweetsAsync(String[] tweetIds);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.TweetsV2Client/<GetTweetsAsync>d__7")]
public sealed virtual Task`1<TweetsV2Response> GetTweetsAsync(IGetTweetsV2Parameters parameters);
    public sealed virtual Task`1<TweetHideV2Response> ChangeTweetReplyVisibilityAsync(long tweetId, TweetReplyVisibility visibility);
    public sealed virtual Task`1<TweetHideV2Response> ChangeTweetReplyVisibilityAsync(string tweetId, TweetReplyVisibility visibility);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.TweetsV2Client/<ChangeTweetReplyVisibilityAsync>d__10")]
public sealed virtual Task`1<TweetHideV2Response> ChangeTweetReplyVisibilityAsync(IChangeTweetReplyVisibilityV2Parameters parameters);
}
public class Tweetinvi.Client.V2.UsersV2Client : object {
    private IUsersV2Requester _usersV2Requester;
    public UsersV2Client(IUsersV2Requester usersV2Requester);
    public sealed virtual Task`1<UserV2Response> GetUserByIdAsync(long userId);
    public sealed virtual Task`1<UserV2Response> GetUserByIdAsync(string userId);
    public sealed virtual Task`1<UserV2Response> GetUserByNameAsync(string username);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.UsersV2Client/<GetUserByIdAsync>d__5")]
public sealed virtual Task`1<UserV2Response> GetUserByIdAsync(IGetUserByIdV2Parameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.UsersV2Client/<GetUserByNameAsync>d__6")]
public sealed virtual Task`1<UserV2Response> GetUserByNameAsync(IGetUserByNameV2Parameters parameters);
    public sealed virtual Task`1<UsersV2Response> GetUsersByIdAsync(Int64[] userIds);
    public sealed virtual Task`1<UsersV2Response> GetUsersByIdAsync(String[] userIds);
    public sealed virtual Task`1<UsersV2Response> GetUsersByNameAsync(String[] usernames);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.UsersV2Client/<GetUsersByIdAsync>d__10")]
public sealed virtual Task`1<UsersV2Response> GetUsersByIdAsync(IGetUsersByIdV2Parameters parameters);
    [AsyncStateMachineAttribute("Tweetinvi.Client.V2.UsersV2Client/<GetUsersByNameAsync>d__11")]
public sealed virtual Task`1<UsersV2Response> GetUsersByNameAsync(IGetUsersByNameV2Parameters parameters);
}
public class Tweetinvi.Injectinvi.TweetinviContainer : object {
    private IContainer _container;
    private ContainerBuilder _containerBuilder;
    private List`1<ITweetinviModule> _moduleCatalog;
    [CompilerGeneratedAttribute]
private List`1<Action`1<ContainerBuilder>> <RegistrationActions>k__BackingField;
    [CompilerGeneratedAttribute]
private ITwitterClient <AssociatedClient>k__BackingField;
    private bool _isInitialized;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetinviContainerEventArgs> BeforeRegistrationCompletes;
    private object _lock;
    public List`1<Action`1<ContainerBuilder>> RegistrationActions { get; }
    public ITwitterClient AssociatedClient { get; public set; }
    public bool IsInitialized { get; public set; }
    public TweetinviContainer(ITweetinviContainer container);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<Action`1<ContainerBuilder>> get_RegistrationActions();
    [CompilerGeneratedAttribute]
public sealed virtual ITwitterClient get_AssociatedClient();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AssociatedClient(ITwitterClient value);
    public sealed virtual bool get_IsInitialized();
    public void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BeforeRegistrationCompletes(EventHandler`1<TweetinviContainerEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BeforeRegistrationCompletes(EventHandler`1<TweetinviContainerEventArgs> value);
    public sealed virtual void Initialize();
    public void BuildContainer();
    private void RegisterModules();
    private void InitializeModules();
    public virtual void RegisterType(RegistrationLifetime registrationLifetime);
    public virtual void RegisterGeneric(Type sourceType, Type targetType, RegistrationLifetime registrationLifetime);
    public virtual void RegisterInstance(Type targetType, object value);
    public sealed virtual void RegisterDecorator();
    public sealed virtual T Resolve(IConstructorNamedParameter[] parameters);
    [CompilerGeneratedAttribute]
private void <.ctor>b__15_0(Action`1<ContainerBuilder> register);
}
public static class Tweetinvi.Plugins : object {
    public static void Add();
}
public static class Tweetinvi.TweetinviContainer : object {
    public static ITweetinviContainer Container;
    [CompilerGeneratedAttribute]
private static EventHandler`1<TweetinviContainerEventArgs> BeforeRegistrationComplete;
    private static object _resolveLock;
    private static TweetinviContainer();
    [CompilerGeneratedAttribute]
public static void add_BeforeRegistrationComplete(EventHandler`1<TweetinviContainerEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_BeforeRegistrationComplete(EventHandler`1<TweetinviContainerEventArgs> value);
    private static void ContainerOnBeforeRegistrationCompletes(object sender, TweetinviContainerEventArgs args);
    public static void AddModule(ITweetinviModule module);
    public static T Resolve();
}
public static class Tweetinvi.TweetinviEvents : object {
    private static ITweetinviEvents _tweetinviEvents;
    private static TweetinviEvents();
    public static void SubscribeToClientEvents(ITwitterClient client);
    public static void UnsubscribeFromClientEvents(ITwitterClient client);
    public static void add_WaitingForRateLimit(EventHandler`1<WaitingForRateLimitEventArgs> value);
    public static void remove_WaitingForRateLimit(EventHandler`1<WaitingForRateLimitEventArgs> value);
    public static void add_BeforeWaitingForRequestRateLimits(EventHandler`1<BeforeExecutingRequestEventArgs> value);
    public static void remove_BeforeWaitingForRequestRateLimits(EventHandler`1<BeforeExecutingRequestEventArgs> value);
    public static void add_BeforeExecutingRequest(EventHandler`1<BeforeExecutingRequestEventArgs> value);
    public static void remove_BeforeExecutingRequest(EventHandler`1<BeforeExecutingRequestEventArgs> value);
    public static void add_AfterExecutingRequest(EventHandler`1<AfterExecutingQueryEventArgs> value);
    public static void remove_AfterExecutingRequest(EventHandler`1<AfterExecutingQueryEventArgs> value);
    public static void add_OnTwitterException(EventHandler`1<ITwitterException> value);
    public static void remove_OnTwitterException(EventHandler`1<ITwitterException> value);
}
public class Tweetinvi.TweetinviModule : object {
    public sealed virtual void Initialize(ITweetinviContainer container);
}
public class Tweetinvi.TwitterClient : object {
    private IReadOnlyTwitterCredentials _credentials;
    private ITweetinviContainer _tweetinviContainer;
    private ITwitterClientEvents _twitterClientEvents;
    [CompilerGeneratedAttribute]
private ITweetinviSettings <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthClient <Auth>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccountSettingsClient <AccountSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecuteClient <Execute>k__BackingField;
    [CompilerGeneratedAttribute]
private IHelpClient <Help>k__BackingField;
    [CompilerGeneratedAttribute]
private IListsClient <Lists>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessagesClient <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private IRateLimitsClient <RateLimits>k__BackingField;
    [CompilerGeneratedAttribute]
private ISearchClient <Search>k__BackingField;
    [CompilerGeneratedAttribute]
private IStreamsClient <Streams>k__BackingField;
    [CompilerGeneratedAttribute]
private ITimelinesClient <Timelines>k__BackingField;
    [CompilerGeneratedAttribute]
private ITrendsClient <Trends>k__BackingField;
    [CompilerGeneratedAttribute]
private ITweetsClient <Tweets>k__BackingField;
    [CompilerGeneratedAttribute]
private IUploadClient <Upload>k__BackingField;
    [CompilerGeneratedAttribute]
private IUsersClient <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccountActivityClient <AccountActivity>k__BackingField;
    [CompilerGeneratedAttribute]
private ISearchV2Client <SearchV2>k__BackingField;
    [CompilerGeneratedAttribute]
private ITweetsV2Client <TweetsV2>k__BackingField;
    [CompilerGeneratedAttribute]
private IUsersV2Client <UsersV2>k__BackingField;
    [CompilerGeneratedAttribute]
private IStreamsV2Client <StreamsV2>k__BackingField;
    [CompilerGeneratedAttribute]
private ITwitterClientFactories <Factories>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonClient <Json>k__BackingField;
    [CompilerGeneratedAttribute]
private IParametersValidator <ParametersValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IRawExecutors <Raw>k__BackingField;
    public IReadOnlyTwitterCredentials Credentials { get; public set; }
    public ITweetinviSettings Config { get; }
    public IAuthClient Auth { get; }
    public IAccountSettingsClient AccountSettings { get; }
    public IExecuteClient Execute { get; }
    public IHelpClient Help { get; }
    public IListsClient Lists { get; }
    public IMessagesClient Messages { get; }
    public IRateLimitsClient RateLimits { get; }
    public ISearchClient Search { get; }
    public IStreamsClient Streams { get; }
    public ITimelinesClient Timelines { get; }
    public ITrendsClient Trends { get; }
    public ITweetsClient Tweets { get; }
    public IUploadClient Upload { get; }
    public IUsersClient Users { get; }
    public IAccountActivityClient AccountActivity { get; }
    public ISearchV2Client SearchV2 { get; }
    public ITweetsV2Client TweetsV2 { get; }
    public IUsersV2Client UsersV2 { get; }
    public IStreamsV2Client StreamsV2 { get; }
    public IExternalClientEvents Events { get; }
    public ITwitterClientFactories Factories { get; }
    public IJsonClient Json { get; }
    public IParametersValidator ParametersValidator { get; }
    public IRawExecutors Raw { get; }
    public TwitterClient(IReadOnlyConsumerCredentials credentials);
    public TwitterClient(IReadOnlyTwitterCredentials credentials);
    public TwitterClient(string consumerKey, string consumerSecret);
    public TwitterClient(string consumerKey, string consumerSecret, string bearerToken);
    public TwitterClient(string consumerKey, string consumerSecret, string accessToken, string accessSecret);
    public TwitterClient(IReadOnlyTwitterCredentials credentials, TwitterClientParameters parameters);
    public sealed virtual IReadOnlyTwitterCredentials get_Credentials();
    public void set_Credentials(IReadOnlyTwitterCredentials value);
    [CompilerGeneratedAttribute]
public sealed virtual ITweetinviSettings get_Config();
    [CompilerGeneratedAttribute]
public sealed virtual IAuthClient get_Auth();
    [CompilerGeneratedAttribute]
public sealed virtual IAccountSettingsClient get_AccountSettings();
    [CompilerGeneratedAttribute]
public sealed virtual IExecuteClient get_Execute();
    [CompilerGeneratedAttribute]
public sealed virtual IHelpClient get_Help();
    [CompilerGeneratedAttribute]
public sealed virtual IListsClient get_Lists();
    [CompilerGeneratedAttribute]
public sealed virtual IMessagesClient get_Messages();
    [CompilerGeneratedAttribute]
public sealed virtual IRateLimitsClient get_RateLimits();
    [CompilerGeneratedAttribute]
public sealed virtual ISearchClient get_Search();
    [CompilerGeneratedAttribute]
public sealed virtual IStreamsClient get_Streams();
    [CompilerGeneratedAttribute]
public sealed virtual ITimelinesClient get_Timelines();
    [CompilerGeneratedAttribute]
public sealed virtual ITrendsClient get_Trends();
    [CompilerGeneratedAttribute]
public sealed virtual ITweetsClient get_Tweets();
    [CompilerGeneratedAttribute]
public sealed virtual IUploadClient get_Upload();
    [CompilerGeneratedAttribute]
public sealed virtual IUsersClient get_Users();
    [CompilerGeneratedAttribute]
public sealed virtual IAccountActivityClient get_AccountActivity();
    [CompilerGeneratedAttribute]
public sealed virtual ISearchV2Client get_SearchV2();
    [CompilerGeneratedAttribute]
public sealed virtual ITweetsV2Client get_TweetsV2();
    [CompilerGeneratedAttribute]
public sealed virtual IUsersV2Client get_UsersV2();
    [CompilerGeneratedAttribute]
public sealed virtual IStreamsV2Client get_StreamsV2();
    public sealed virtual IExternalClientEvents get_Events();
    [CompilerGeneratedAttribute]
public sealed virtual ITwitterClientFactories get_Factories();
    [CompilerGeneratedAttribute]
public sealed virtual IJsonClient get_Json();
    [CompilerGeneratedAttribute]
public sealed virtual IParametersValidator get_ParametersValidator();
    [CompilerGeneratedAttribute]
public sealed virtual IRawExecutors get_Raw();
    public sealed virtual ITwitterExecutionContext CreateTwitterExecutionContext();
    public sealed virtual ITwitterRequest CreateRequest();
}
public class Tweetinvi.TwitterClientParameters : object {
    [CompilerGeneratedAttribute]
private IRateLimitCache <RateLimitCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ITweetinviContainer <Container>k__BackingField;
    [CompilerGeneratedAttribute]
private ITweetinviSettings <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<TweetinviContainerEventArgs> BeforeRegistrationCompletes;
    public IRateLimitCache RateLimitCache { get; public set; }
    public ITweetinviContainer Container { get; public set; }
    public ITweetinviSettings Settings { get; public set; }
    [CompilerGeneratedAttribute]
public IRateLimitCache get_RateLimitCache();
    [CompilerGeneratedAttribute]
public void set_RateLimitCache(IRateLimitCache value);
    [CompilerGeneratedAttribute]
public ITweetinviContainer get_Container();
    [CompilerGeneratedAttribute]
public void set_Container(ITweetinviContainer value);
    [CompilerGeneratedAttribute]
public ITweetinviSettings get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(ITweetinviSettings value);
    [CompilerGeneratedAttribute]
public void add_BeforeRegistrationCompletes(EventHandler`1<TweetinviContainerEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_BeforeRegistrationCompletes(EventHandler`1<TweetinviContainerEventArgs> value);
    public void RaiseBeforeRegistrationCompletes(TweetinviContainerEventArgs args);
}
