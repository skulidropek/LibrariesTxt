public class UAParser.ClientInfo : object {
    [CompilerGeneratedAttribute]
private string <String>k__BackingField;
    [CompilerGeneratedAttribute]
private OS <OS>k__BackingField;
    [CompilerGeneratedAttribute]
private Device <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private UserAgent <UA>k__BackingField;
    public string String { get; }
    public OS OS { get; }
    public Device Device { get; }
    [ObsoleteAttribute("Mirrors the value of the UA property. Will be removed in future versions")]
public UserAgent UserAgent { get; }
    public UserAgent UA { get; }
    public ClientInfo(string inputString, OS os, Device device, UserAgent userAgent);
    [CompilerGeneratedAttribute]
public sealed virtual string get_String();
    [CompilerGeneratedAttribute]
public sealed virtual OS get_OS();
    [CompilerGeneratedAttribute]
public sealed virtual Device get_Device();
    public UserAgent get_UserAgent();
    [CompilerGeneratedAttribute]
public sealed virtual UserAgent get_UA();
    public virtual string ToString();
}
public class UAParser.Device : object {
    [CompilerGeneratedAttribute]
private string <Brand>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Model>k__BackingField;
    public bool IsSpider { get; }
    public string Brand { get; }
    public string Family { get; }
    public string Model { get; }
    public Device(string family, string brand, string model);
    public bool get_IsSpider();
    [CompilerGeneratedAttribute]
public string get_Brand();
    [CompilerGeneratedAttribute]
public string get_Family();
    [CompilerGeneratedAttribute]
public string get_Model();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class UAParser.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue Find(IDictionary`2<TKey, TValue> dictionary, TKey key);
}
public interface UAParser.IUAParserOutput {
    public string String { get; }
    public OS OS { get; }
    public Device Device { get; }
    public UserAgent UA { get; }
    public abstract virtual string get_String();
    public abstract virtual OS get_OS();
    public abstract virtual Device get_Device();
    public abstract virtual UserAgent get_UA();
}
internal class UAParser.MinimalYamlParser : object {
    private Dictionary`2<string, Mapping> _mappings;
    internal IDictionary`2<string, Mapping> Mappings { get; }
    public MinimalYamlParser(string yamlString);
    internal IDictionary`2<string, Mapping> get_Mappings();
    private void ReadIntoMappingModel(string yamlInputString);
    private static string ReadQuotedValue(string value);
    public IEnumerable`1<Dictionary`2<string, string>> ReadMapping(string mappingName);
}
public class UAParser.OS : object {
    [CompilerGeneratedAttribute]
private string <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Patch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PatchMinor>k__BackingField;
    public string Family { get; }
    public string Major { get; }
    public string Minor { get; }
    public string Patch { get; }
    public string PatchMinor { get; }
    public OS(string family, string major, string minor, string patch, string patchMinor);
    [CompilerGeneratedAttribute]
public string get_Family();
    [CompilerGeneratedAttribute]
public string get_Major();
    [CompilerGeneratedAttribute]
public string get_Minor();
    [CompilerGeneratedAttribute]
public string get_Patch();
    [CompilerGeneratedAttribute]
public string get_PatchMinor();
    public virtual string ToString();
}
public class UAParser.Parser : object {
    public static string Other;
    private Func`2<string, OS> _osParser;
    private Func`2<string, Device> _deviceParser;
    private Func`2<string, UserAgent> _userAgentParser;
    private Parser(MinimalYamlParser yamlParser, ParserOptions options);
    private static IEnumerable`1<T> Read(IEnumerable`1<Dictionary`2<string, string>> entries, Func`2<Func`2<string, string>, T> selector);
    public static Parser FromYaml(string yaml, ParserOptions parserOptions);
    public static Parser GetDefault(ParserOptions parserOptions);
    public ClientInfo Parse(string uaString);
    public OS ParseOS(string uaString);
    public Device ParseDevice(string uaString);
    public UserAgent ParseUserAgent(string uaString);
    private static Func`2<string, T> CreateParser(IEnumerable`1<Func`2<string, T>> parsers, T defaultValue);
    private static Func`2<string, TResult> CreateParser(IEnumerable`1<Func`2<string, T>> parsers, T defaultValue, Func`2<T, TResult> selector);
}
public class UAParser.ParserOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseCompiledRegex>k__BackingField;
    public bool UseCompiledRegex { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseCompiledRegex();
    [CompilerGeneratedAttribute]
public void set_UseCompiledRegex(bool value);
}
[ExtensionAttribute]
internal static class UAParser.RegexBinderBuilder : object {
    [ExtensionAttribute]
public static Func`3<Match, IEnumerator`1<int>, TResult> SelectMany(Func`3<Match, IEnumerator`1<int>, T1> binder, Func`2<T1, Func`3<Match, IEnumerator`1<int>, T2>> continuation, Func`3<T1, T2, TResult> projection);
}
[ExtensionAttribute]
internal static class UAParser.StringExtensions : object {
    [ExtensionAttribute]
public static string ReplaceFirstOccurence(string input, string search, string replacement);
}
public class UAParser.UserAgent : object {
    [CompilerGeneratedAttribute]
private string <Family>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Patch>k__BackingField;
    public string Family { get; }
    public string Major { get; }
    public string Minor { get; }
    public string Patch { get; }
    public UserAgent(string family, string major, string minor, string patch);
    [CompilerGeneratedAttribute]
public string get_Family();
    [CompilerGeneratedAttribute]
public string get_Major();
    [CompilerGeneratedAttribute]
public string get_Minor();
    [CompilerGeneratedAttribute]
public string get_Patch();
    public virtual string ToString();
}
internal static class UAParser.VersionString : object {
    public static string Format(String[] parts);
}
