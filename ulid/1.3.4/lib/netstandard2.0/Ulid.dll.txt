[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.RandomProvider : object {
    [ThreadStaticAttribute]
private static Random random;
    [ThreadStaticAttribute]
private static XorShift64 xorShift;
    public static Random GetRandom();
    private static Random CreateRandom();
    public static XorShift64 GetXorShift64();
    private static XorShift64 CreateXorShift64();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{ToString(),nq}")]
[TypeConverterAttribute("System.UlidTypeConverter")]
public class System.Ulid : ValueType {
    private static Char[] Base32Text;
    private static Byte[] Base32Bytes;
    private static Byte[] CharToBase32;
    private static DateTimeOffset UnixEpoch;
    public static Ulid MinValue;
    public static Ulid MaxValue;
    public static Ulid Empty;
    private byte timestamp0;
    private byte timestamp1;
    private byte timestamp2;
    private byte timestamp3;
    private byte timestamp4;
    private byte timestamp5;
    private byte randomness0;
    private byte randomness1;
    private byte randomness2;
    private byte randomness3;
    private byte randomness4;
    private byte randomness5;
    private byte randomness6;
    private byte randomness7;
    private byte randomness8;
    private byte randomness9;
    [IgnoreDataMemberAttribute]
public Byte[] Random { get; }
    [IgnoreDataMemberAttribute]
public DateTimeOffset Time { get; }
    internal Ulid(long timestampMilliseconds, XorShift64 random);
    internal Ulid(long timestampMilliseconds, ReadOnlySpan`1<byte> randomness);
    public Ulid(ReadOnlySpan`1<byte> bytes);
    internal Ulid(ReadOnlySpan`1<char> base32);
    public Ulid(Guid guid);
    private static Ulid();
    public Byte[] get_Random();
    public DateTimeOffset get_Time();
    public static Ulid NewUlid();
    public static Ulid NewUlid(DateTimeOffset timestamp);
    public static Ulid NewUlid(DateTimeOffset timestamp, ReadOnlySpan`1<byte> randomness);
    public static Ulid Parse(string base32);
    public static Ulid Parse(ReadOnlySpan`1<char> base32);
    public static Ulid Parse(ReadOnlySpan`1<byte> base32);
    public static bool TryParse(string base32, Ulid& ulid);
    public static bool TryParse(ReadOnlySpan`1<char> base32, Ulid& ulid);
    public static bool TryParse(ReadOnlySpan`1<byte> base32, Ulid& ulid);
    private static Ulid ParseCore(ReadOnlySpan`1<byte> base32);
    public Byte[] ToByteArray();
    public bool TryWriteBytes(Span`1<byte> destination);
    public string ToBase64(Base64FormattingOptions options);
    public bool TryWriteStringify(Span`1<byte> span);
    public bool TryWriteStringify(Span`1<char> span);
    public virtual string ToString();
    public bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public string ToString(string format, IFormatProvider formatProvider);
    public static Ulid Parse(string s, IFormatProvider provider);
    public static bool TryParse(string s, IFormatProvider provider, Ulid& result);
    public static Ulid Parse(ReadOnlySpan`1<char> s, IFormatProvider provider);
    public static bool TryParse(ReadOnlySpan`1<char> s, IFormatProvider provider, Ulid& result);
    public bool TryFormat(Span`1<byte> destination, Int32& bytesWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    public virtual int GetHashCode();
    private static bool EqualsCore(Ulid& left, Ulid& right);
    public sealed virtual bool Equals(Ulid other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(Ulid a, Ulid b);
    public static bool op_Inequality(Ulid a, Ulid b);
    private static int GetResult(byte me, byte them);
    public sealed virtual int CompareTo(Ulid other);
    public sealed virtual int CompareTo(object value);
    public static Guid op_Explicit(Ulid _this);
    public Guid ToGuid();
}
public class System.UlidTypeConverter : TypeConverter {
    private static Type StringType;
    private static Type GuidType;
    private static UlidTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.XorShift64 : object {
    private ulong x;
    public XorShift64(ulong seed);
    public ulong Next();
}
