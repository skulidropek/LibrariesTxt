[GeneratedCodeAttribute("Nerdbank.GitVersioning.Tasks", "3.6.139.59561")]
[ExcludeFromCodeCoverageAttribute]
internal static class ThisAssembly : object {
    internal static string AssemblyConfiguration;
    internal static string AssemblyFileVersion;
    internal static string AssemblyInformationalVersion;
    internal static string AssemblyName;
    internal static string AssemblyTitle;
    internal static string AssemblyVersion;
    internal static DateTime GitCommitDate;
    internal static string GitCommitId;
    internal static bool IsPrerelease;
    internal static bool IsPublicRelease;
    internal static string RootNamespace;
    private static ThisAssembly();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Core.Notifications.MenuRenderingNotification : object {
    [CompilerGeneratedAttribute]
private string <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private MenuItemCollection <Menu>k__BackingField;
    [CompilerGeneratedAttribute]
private FormCollection <QueryString>k__BackingField;
    public string NodeId { get; }
    public string TreeAlias { get; }
    public MenuItemCollection Menu { get; }
    public FormCollection QueryString { get; }
    public MenuRenderingNotification(string nodeId, MenuItemCollection menu, FormCollection queryString, string treeAlias);
    [CompilerGeneratedAttribute]
public string get_NodeId();
    [CompilerGeneratedAttribute]
public string get_TreeAlias();
    [CompilerGeneratedAttribute]
public MenuItemCollection get_Menu();
    [CompilerGeneratedAttribute]
public FormCollection get_QueryString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Core.Notifications.RootNodeRenderingNotification : object {
    [CompilerGeneratedAttribute]
private TreeNode <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private FormCollection <QueryString>k__BackingField;
    public TreeNode Node { get; }
    public string TreeAlias { get; }
    public FormCollection QueryString { get; }
    public RootNodeRenderingNotification(TreeNode node, FormCollection queryString, string treeAlias);
    [CompilerGeneratedAttribute]
public TreeNode get_Node();
    [CompilerGeneratedAttribute]
public string get_TreeAlias();
    [CompilerGeneratedAttribute]
public FormCollection get_QueryString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Core.Notifications.TreeNodesRenderingNotification : object {
    [CompilerGeneratedAttribute]
private TreeNodeCollection <Nodes>k__BackingField;
    [CompilerGeneratedAttribute]
private FormCollection <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeAlias>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public TreeNodeCollection Nodes { get; }
    public FormCollection QueryString { get; }
    public string TreeAlias { get; }
    [NullableAttribute("2")]
public string Id { get; }
    public TreeNodesRenderingNotification(TreeNodeCollection nodes, FormCollection queryString, string treeAlias, string id);
    [ObsoleteAttribute("Use ctor with all parameters")]
public TreeNodesRenderingNotification(TreeNodeCollection nodes, FormCollection queryString, string treeAlias);
    [CompilerGeneratedAttribute]
public TreeNodeCollection get_Nodes();
    [CompilerGeneratedAttribute]
public FormCollection get_QueryString();
    [CompilerGeneratedAttribute]
public string get_TreeAlias();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Id();
}
public class Umbraco.Cms.Web.BackOffice.ActionResults.JavaScriptResult : ContentResult {
    [NullableContextAttribute("2")]
public JavaScriptResult(string script);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.ActionResults.UmbracoErrorResult : ObjectResult {
    public UmbracoErrorResult(HttpStatusCode statusCode, string message);
    public UmbracoErrorResult(HttpStatusCode statusCode, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.AdminUsersHandler : MustSatisfyRequirementAuthorizationHandler`1<AdminUsersRequirement> {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IHttpContextAccessor _httpContextAccessor;
    private UserEditorAuthorizationHelper _userEditorAuthorizationHelper;
    private IUserService _userService;
    public AdminUsersHandler(IHttpContextAccessor httpContextAccessor, IUserService userService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, UserEditorAuthorizationHelper userEditorAuthorizationHelper);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, AdminUsersRequirement requirement);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsAuthorized>b__5_0(IUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.AdminUsersRequirement : object {
    [CompilerGeneratedAttribute]
private string <QueryStringName>k__BackingField;
    public string QueryStringName { get; }
    public AdminUsersRequirement(string queryStringName);
    [CompilerGeneratedAttribute]
public string get_QueryStringName();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.BackOfficeHandler : MustSatisfyRequirementAuthorizationHandler`1<BackOfficeRequirement> {
    private IBackOfficeSecurityAccessor _backOfficeSecurity;
    private IRuntimeState _runtimeState;
    public BackOfficeHandler(IBackOfficeSecurityAccessor backOfficeSecurity, IRuntimeState runtimeState);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, BackOfficeRequirement requirement);
}
public class Umbraco.Cms.Web.BackOffice.Authorization.BackOfficeRequirement : object {
    [CompilerGeneratedAttribute]
private bool <RequireApproval>k__BackingField;
    public bool RequireApproval { get; }
    public BackOfficeRequirement(bool requireApproval);
    [CompilerGeneratedAttribute]
public bool get_RequireApproval();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.ContentPermissionsPublishBranchHandler : MustSatisfyRequirementAuthorizationHandler`2<ContentPermissionsPublishBranchRequirement, IContent> {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private ContentPermissions _contentPermissions;
    private IEntityService _entityService;
    public ContentPermissionsPublishBranchHandler(IEntityService entityService, ContentPermissions contentPermissions, IBackOfficeSecurityAccessor backOfficeSecurityAccessor);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, ContentPermissionsPublishBranchRequirement requirement, IContent resource);
}
public class Umbraco.Cms.Web.BackOffice.Authorization.ContentPermissionsPublishBranchRequirement : object {
    [CompilerGeneratedAttribute]
private char <Permission>k__BackingField;
    public char Permission { get; }
    public ContentPermissionsPublishBranchRequirement(char permission);
    [CompilerGeneratedAttribute]
public char get_Permission();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.ContentPermissionsQueryStringHandler : PermissionsQueryStringHandler`1<ContentPermissionsQueryStringRequirement> {
    private ContentPermissions _contentPermissions;
    public ContentPermissionsQueryStringHandler(IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IHttpContextAccessor httpContextAccessor, IEntityService entityService, ContentPermissions contentPermissions);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, ContentPermissionsQueryStringRequirement requirement);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.ContentPermissionsQueryStringRequirement : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryStringName>k__BackingField;
    [CompilerGeneratedAttribute]
private char <PermissionToCheck>k__BackingField;
    public Nullable`1<int> NodeId { get; }
    public string QueryStringName { get; }
    public char PermissionToCheck { get; }
    public ContentPermissionsQueryStringRequirement(int nodeId, char permissionToCheck);
    [NullableContextAttribute("1")]
public ContentPermissionsQueryStringRequirement(char permissionToCheck, string paramName);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NodeId();
    [CompilerGeneratedAttribute]
public string get_QueryStringName();
    [CompilerGeneratedAttribute]
public char get_PermissionToCheck();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.ContentPermissionsResource : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<char> <PermissionsToCheck>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IContent <Content>k__BackingField;
    public Nullable`1<int> NodeId { get; }
    public IReadOnlyList`1<char> PermissionsToCheck { get; }
    [NullableAttribute("2")]
public IContent Content { get; }
    [NullableContextAttribute("2")]
public ContentPermissionsResource(IContent content, char permissionToCheck);
    public ContentPermissionsResource(IContent content, IReadOnlyList`1<char> permissionsToCheck);
    public ContentPermissionsResource(IContent content, int nodeId, IReadOnlyList`1<char> permissionsToCheck);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NodeId();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<char> get_PermissionsToCheck();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IContent get_Content();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.ContentPermissionsResourceHandler : MustSatisfyRequirementAuthorizationHandler`2<ContentPermissionsResourceRequirement, ContentPermissionsResource> {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private ContentPermissions _contentPermissions;
    public ContentPermissionsResourceHandler(IBackOfficeSecurityAccessor backOfficeSecurityAccessor, ContentPermissions contentPermissions);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, ContentPermissionsResourceRequirement requirement, ContentPermissionsResource resource);
}
public class Umbraco.Cms.Web.BackOffice.Authorization.ContentPermissionsResourceRequirement : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.DenyLocalLoginHandler : MustSatisfyRequirementAuthorizationHandler`1<DenyLocalLoginRequirement> {
    private IBackOfficeExternalLoginProviders _externalLogins;
    public DenyLocalLoginHandler(IBackOfficeExternalLoginProviders externalLogins);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, DenyLocalLoginRequirement requirement);
}
public class Umbraco.Cms.Web.BackOffice.Authorization.DenyLocalLoginRequirement : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.MediaPermissionsQueryStringHandler : PermissionsQueryStringHandler`1<MediaPermissionsQueryStringRequirement> {
    private MediaPermissions _mediaPermissions;
    public MediaPermissionsQueryStringHandler(IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IHttpContextAccessor httpContextAccessor, IEntityService entityService, MediaPermissions mediaPermissions);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, MediaPermissionsQueryStringRequirement requirement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.MediaPermissionsQueryStringRequirement : object {
    [CompilerGeneratedAttribute]
private string <QueryStringName>k__BackingField;
    public string QueryStringName { get; }
    public MediaPermissionsQueryStringRequirement(string paramName);
    [CompilerGeneratedAttribute]
public string get_QueryStringName();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.MediaPermissionsResource : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IMedia <Media>k__BackingField;
    public Nullable`1<int> NodeId { get; }
    public IMedia Media { get; }
    public MediaPermissionsResource(IMedia media);
    public MediaPermissionsResource(int nodeId);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NodeId();
    [CompilerGeneratedAttribute]
public IMedia get_Media();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.MediaPermissionsResourceHandler : MustSatisfyRequirementAuthorizationHandler`2<MediaPermissionsResourceRequirement, MediaPermissionsResource> {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private MediaPermissions _mediaPermissions;
    public MediaPermissionsResourceHandler(IBackOfficeSecurityAccessor backOfficeSecurityAccessor, MediaPermissions mediaPermissions);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, MediaPermissionsResourceRequirement requirement, MediaPermissionsResource resource);
}
public class Umbraco.Cms.Web.BackOffice.Authorization.MediaPermissionsResourceRequirement : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Umbraco.Cms.Web.BackOffice.Authorization.MustSatisfyRequirementAuthorizationHandler`1 : AuthorizationHandler`1<T> {
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Authorization.MustSatisfyRequirementAuthorizationHandler`1/<HandleRequirementAsync>d__0")]
protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, T requirement);
    protected abstract virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, T requirement);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Umbraco.Cms.Web.BackOffice.Authorization.MustSatisfyRequirementAuthorizationHandler`2 : AuthorizationHandler`2<T, TResource> {
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Authorization.MustSatisfyRequirementAuthorizationHandler`2/<HandleRequirementAsync>d__0")]
protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, T requirement, TResource resource);
    protected abstract virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, T requirement, TResource resource);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Umbraco.Cms.Web.BackOffice.Authorization.PermissionsQueryStringHandler`1 : MustSatisfyRequirementAuthorizationHandler`1<T> {
    [CompilerGeneratedAttribute]
private IBackOfficeSecurityAccessor <BackOfficeSecurityAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpContextAccessor <HttpContextAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityService <EntityService>k__BackingField;
    protected IBackOfficeSecurityAccessor BackOfficeSecurityAccessor { get; protected set; }
    protected IHttpContextAccessor HttpContextAccessor { get; protected set; }
    protected IEntityService EntityService { get; protected set; }
    public PermissionsQueryStringHandler`1(IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IHttpContextAccessor httpContextAccessor, IEntityService entityService);
    [CompilerGeneratedAttribute]
protected IBackOfficeSecurityAccessor get_BackOfficeSecurityAccessor();
    [CompilerGeneratedAttribute]
protected void set_BackOfficeSecurityAccessor(IBackOfficeSecurityAccessor value);
    [CompilerGeneratedAttribute]
protected IHttpContextAccessor get_HttpContextAccessor();
    [CompilerGeneratedAttribute]
protected void set_HttpContextAccessor(IHttpContextAccessor value);
    [CompilerGeneratedAttribute]
protected IEntityService get_EntityService();
    [CompilerGeneratedAttribute]
protected void set_EntityService(IEntityService value);
    protected bool TryParseNodeId(string argument, Int32& nodeId);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.SectionHandler : MustSatisfyRequirementAuthorizationHandler`1<SectionRequirement> {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    public SectionHandler(IBackOfficeSecurityAccessor backOfficeSecurityAccessor);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, SectionRequirement requirement);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsAuthorized>b__2_0(string app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.SectionRequirement : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <SectionAliases>k__BackingField;
    public IReadOnlyCollection`1<string> SectionAliases { get; }
    public SectionRequirement(String[] aliases);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_SectionAliases();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.TreeHandler : MustSatisfyRequirementAuthorizationHandler`1<TreeRequirement> {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private ITreeService _treeService;
    public TreeHandler(ITreeService treeService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, TreeRequirement requirement);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Tree <IsAuthorized>b__3_0(string x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsAuthorized>b__3_2(string app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.TreeRequirement : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <TreeAliases>k__BackingField;
    public IReadOnlyCollection`1<string> TreeAliases { get; }
    public TreeRequirement(String[] aliases);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_TreeAliases();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Authorization.UserGroupHandler : MustSatisfyRequirementAuthorizationHandler`1<UserGroupRequirement> {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IContentService _contentService;
    private IEntityService _entityService;
    private IHttpContextAccessor _httpContextAccessor;
    private IMediaService _mediaService;
    private IUserService _userService;
    public UserGroupHandler(IHttpContextAccessor httpContextAccessor, IUserService userService, IContentService contentService, IMediaService mediaService, IEntityService entityService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, AppCaches appCaches);
    protected virtual Task`1<bool> IsAuthorized(AuthorizationHandlerContext context, UserGroupRequirement requirement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Authorization.UserGroupRequirement : object {
    [CompilerGeneratedAttribute]
private string <QueryStringName>k__BackingField;
    public string QueryStringName { get; }
    public UserGroupRequirement(string queryStringName);
    [CompilerGeneratedAttribute]
public string get_QueryStringName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.AnalyticsController : UmbracoAuthorizedJsonController {
    private IMetricsConsentService _metricsConsentService;
    public AnalyticsController(IMetricsConsentService metricsConsentService);
    public TelemetryLevel GetConsentLevel();
    [HttpPostAttribute]
public IActionResult SetConsentLevel(TelemetryResource telemetryResource);
    public IEnumerable`1<TelemetryLevel> GetAllLevels();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AngularJsonOnlyConfigurationAttribute]
[IsBackOfficeAttribute]
[DisableBrowserCacheAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController : UmbracoApiControllerBase {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IBackOfficeTwoFactorOptions _backOfficeTwoFactorOptions;
    private IEmailSender _emailSender;
    private IBackOfficeExternalLoginProviders _externalAuthenticationOptions;
    private GlobalSettings _globalSettings;
    private IHostingEnvironment _hostingEnvironment;
    private IHttpContextAccessor _httpContextAccessor;
    private IIpResolver _ipResolver;
    private LinkGenerator _linkGenerator;
    private ILogger`1<AuthenticationController> _logger;
    private UserPasswordConfigurationSettings _passwordConfiguration;
    private SecuritySettings _securitySettings;
    private IBackOfficeSignInManager _signInManager;
    private ISmsSender _smsSender;
    private ILocalizedTextService _textService;
    private ITwoFactorLoginService _twoFactorLoginService;
    private IUmbracoMapper _umbracoMapper;
    private IBackOfficeUserManager _userManager;
    private IUserService _userService;
    private WebRoutingSettings _webRoutingSettings;
    [ActivatorUtilitiesConstructorAttribute]
public AuthenticationController(IBackOfficeSecurityAccessor backofficeSecurityAccessor, IBackOfficeUserManager backOfficeUserManager, IBackOfficeSignInManager signInManager, IUserService userService, ILocalizedTextService textService, IUmbracoMapper umbracoMapper, IOptionsSnapshot`1<GlobalSettings> globalSettings, IOptionsSnapshot`1<SecuritySettings> securitySettings, ILogger`1<AuthenticationController> logger, IIpResolver ipResolver, IOptionsSnapshot`1<UserPasswordConfigurationSettings> passwordConfiguration, IEmailSender emailSender, ISmsSender smsSender, IHostingEnvironment hostingEnvironment, LinkGenerator linkGenerator, IBackOfficeExternalLoginProviders externalAuthenticationOptions, IBackOfficeTwoFactorOptions backOfficeTwoFactorOptions, IHttpContextAccessor httpContextAccessor, IOptions`1<WebRoutingSettings> webRoutingSettings, ITwoFactorLoginService twoFactorLoginService);
    [AllowAnonymousAttribute]
[AuthorizeAttribute]
public IDictionary`2<string, object> GetPasswordConfig(int userId);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostVerifyInvite>d__22")]
[ValidateAngularAntiForgeryTokenAttribute]
[AuthorizeAttribute]
public Task`1<ActionResult`1<UserDisplay>> PostVerifyInvite(int id, string token);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostUnLinkLogin>d__23")]
[AuthorizeAttribute]
[ValidateAngularAntiForgeryTokenAttribute]
public Task`1<IActionResult> PostUnLinkLogin(UnLinkLoginModel unlinkLoginModel);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<GetRemainingTimeoutSeconds>d__24")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<double> GetRemainingTimeoutSeconds();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<IsAuthenticated>d__25")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<bool> IsAuthenticated();
    [NullableContextAttribute("2")]
[AuthorizeAttribute]
[SetAngularAntiForgeryTokensAttribute]
[CheckIfUserTicketDataIsStaleAttribute]
public UserDetail GetCurrentUser();
    [AuthorizeAttribute]
[AuthorizeAttribute]
[SetAngularAntiForgeryTokensAttribute]
[AllowAnonymousAttribute]
public ActionResult`1<UserDetail> GetCurrentInvitedUser();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostSetInvitedUserPassword>d__28")]
[AuthorizeAttribute]
[AuthorizeAttribute]
[SetAngularAntiForgeryTokensAttribute]
[AllowAnonymousAttribute]
public Task`1<ActionResult`1<UserDetail>> PostSetInvitedUserPassword(InvitePasswordModel invitePasswordModel);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostLogin>d__29")]
[SetAngularAntiForgeryTokensAttribute]
[AuthorizeAttribute]
public Task`1<ActionResult`1<UserDetail>> PostLogin(LoginModel loginModel);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostRequestPasswordReset>d__30")]
[SetAngularAntiForgeryTokensAttribute]
[AuthorizeAttribute]
public Task`1<IActionResult> PostRequestPasswordReset(RequestPasswordResetModel model);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<Get2FAProviders>d__31")]
[SetAngularAntiForgeryTokensAttribute]
[AllowAnonymousAttribute]
public Task`1<ActionResult`1<IEnumerable`1<string>>> Get2FAProviders();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostSend2FACode>d__32")]
[SetAngularAntiForgeryTokensAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> PostSend2FACode(string provider);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostVerify2FACode>d__33")]
[SetAngularAntiForgeryTokensAttribute]
[AllowAnonymousAttribute]
public Task`1<ActionResult`1<UserDetail>> PostVerify2FACode(Verify2FACodeModel model);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostSetPassword>d__34")]
[SetAngularAntiForgeryTokensAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> PostSetPassword(SetPasswordModel model);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.AuthenticationController/<PostLogout>d__35")]
[ValidateAngularAntiForgeryTokenAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> PostLogout();
    [NullableContextAttribute("2")]
private UserDetail GetUserDetail(IUser user);
    private string ConstructCallbackUrl(string userId, string code);
    private void AddModelErrors(IdentityResult result, string prefix);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeAssetsController : UmbracoAuthorizedJsonController {
    private IFileSystem _jsLibFileSystem;
    public BackOfficeAssetsController(IIOHelper ioHelper, IHostingEnvironment hostingEnvironment, ILoggerFactory loggerFactory, IOptionsSnapshot`1<GlobalSettings> globalSettings);
    [HttpGetAttribute]
public object GetSupportedLocales();
    private IEnumerable`1<string> GetLocales(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DisableBrowserCacheAttribute]
[UmbracoRequireHttpsAttribute]
[PluginControllerAttribute("UmbracoBackOffice")]
[IsBackOfficeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController : UmbracoController {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private BackOfficeServerVariables _backOfficeServerVariables;
    private IBackOfficeTwoFactorOptions _backOfficeTwoFactorOptions;
    private IBackOfficeExternalLoginProviders _externalLogins;
    private IGridConfig _gridConfig;
    private IHostingEnvironment _hostingEnvironment;
    private IHttpContextAccessor _httpContextAccessor;
    private IJsonSerializer _jsonSerializer;
    private ILogger`1<BackOfficeController> _logger;
    private IManifestParser _manifestParser;
    private IRuntimeMinifier _runtimeMinifier;
    private IRuntimeState _runtimeState;
    private IOptions`1<SecuritySettings> _securitySettings;
    private ServerVariablesParser _serverVariables;
    private IBackOfficeSignInManager _signInManager;
    private ILocalizedTextService _textService;
    private IBackOfficeUserManager _userManager;
    private GlobalSettings _globalSettings;
    [ActivatorUtilitiesConstructorAttribute]
public BackOfficeController(IBackOfficeUserManager userManager, IRuntimeState runtimeState, IRuntimeMinifier runtimeMinifier, IOptionsSnapshot`1<GlobalSettings> globalSettings, IHostingEnvironment hostingEnvironment, ILocalizedTextService textService, IGridConfig gridConfig, BackOfficeServerVariables backOfficeServerVariables, AppCaches appCaches, IBackOfficeSignInManager signInManager, IBackOfficeSecurityAccessor backofficeSecurityAccessor, ILogger`1<BackOfficeController> logger, IJsonSerializer jsonSerializer, IBackOfficeExternalLoginProviders externalLogins, IHttpContextAccessor httpContextAccessor, IBackOfficeTwoFactorOptions backOfficeTwoFactorOptions, IManifestParser manifestParser, ServerVariablesParser serverVariables, IOptions`1<SecuritySettings> securitySettings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<Default>d__20")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> Default();
    public ViewResult DefaultView();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<Login>d__22")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> Login();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<VerifyInvite>d__23")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> VerifyInvite(string invite);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<AuthorizeUpgrade>d__24")]
[HttpGetAttribute]
[StatusCodeResultAttribute("503")]
[AllowAnonymousAttribute]
public Task`1<IActionResult> AuthorizeUpgrade();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<Application>d__25")]
[MinifyJavaScriptResultAttribute]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> Application();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<LocalizedText>d__26")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<Dictionary`2<string, Dictionary`2<string, string>>> LocalizedText(string culture);
    [AuthorizeAttribute]
[AngularJsonOnlyConfigurationAttribute]
[HttpGetAttribute]
public IEnumerable`1<IGridEditorConfig> GetGridConfig();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<ServerVariables>d__28")]
[AuthorizeAttribute]
[MinifyJavaScriptResultAttribute]
public Task`1<JavaScriptResult> ServerVariables();
    [HttpPostAttribute]
[AllowAnonymousAttribute]
public ActionResult ExternalLogin(string provider, string redirectUrl);
    [AuthorizeAttribute]
[HttpPostAttribute]
public ActionResult LinkLogin(string provider);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<ValidatePasswordResetCode>d__31")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<IActionResult> ValidatePasswordResetCode(int userId, string resetCode);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<ExternalLinkLoginCallback>d__32")]
[AuthorizeAttribute]
[HttpGetAttribute]
public Task`1<IActionResult> ExternalLinkLoginCallback();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<RenderDefaultOrProcessExternalLoginAsync>d__33")]
private Task`1<IActionResult> RenderDefaultOrProcessExternalLoginAsync(AuthenticateResult authenticateResult, Func`1<IActionResult> defaultResponse);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeController/<ExternalSignInAsync>d__34")]
private Task`1<IActionResult> ExternalSignInAsync(ExternalLoginInfo loginInfo, Func`1<IActionResult> response);
    private RedirectResult RedirectToLocal(string returnUrl);
    private LocalRedirectResult RedirectToLogin(object values);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PrefixlessBodyModelValidatorAttribute]
[AppendCurrentEventMessagesAttribute]
public abstract class Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeNotificationsController : UmbracoAuthorizedJsonController {
    protected OkObjectResult Ok(string message);
    protected virtual ActionResult ValidationProblem(string errorMessage);
    protected ActionResult ValidationProblem(string errorHeader, string errorMessage);
    [NonActionAttribute]
public virtual ActionResult ValidationProblem();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeServerVariables : object {
    private LinkGenerator _linkGenerator;
    private IRuntimeState _runtimeState;
    private UmbracoFeatures _features;
    private GlobalSettings _globalSettings;
    private IUmbracoVersion _umbracoVersion;
    private ContentSettings _contentSettings;
    private TreeCollection _treeCollection;
    private IHttpContextAccessor _httpContextAccessor;
    private IHostingEnvironment _hostingEnvironment;
    private RuntimeSettings _runtimeSettings;
    private SecuritySettings _securitySettings;
    private IRuntimeMinifier _runtimeMinifier;
    private IBackOfficeExternalLoginProviders _externalLogins;
    private IImageUrlGenerator _imageUrlGenerator;
    private PreviewRoutes _previewRoutes;
    private IEmailSender _emailSender;
    private MemberPasswordConfigurationSettings _memberPasswordConfigurationSettings;
    private DataTypesSettings _dataTypesSettings;
    private ITempDataDictionaryFactory _tempDataDictionaryFactory;
    private MarketplaceSettings _marketplaceSettings;
    [ObsoleteAttribute("Use constructor that takes IOptionsMontior<DataTypeSettings>, scheduled for removal in V12")]
public BackOfficeServerVariables(LinkGenerator linkGenerator, IRuntimeState runtimeState, UmbracoFeatures features, IOptionsMonitor`1<GlobalSettings> globalSettings, IUmbracoVersion umbracoVersion, IOptionsMonitor`1<ContentSettings> contentSettings, IHttpContextAccessor httpContextAccessor, TreeCollection treeCollection, IHostingEnvironment hostingEnvironment, IOptionsMonitor`1<RuntimeSettings> runtimeSettings, IOptionsMonitor`1<SecuritySettings> securitySettings, IRuntimeMinifier runtimeMinifier, IBackOfficeExternalLoginProviders externalLogins, IImageUrlGenerator imageUrlGenerator, PreviewRoutes previewRoutes, IEmailSender emailSender, IOptionsMonitor`1<MemberPasswordConfigurationSettings> memberPasswordConfigurationSettings);
    [ObsoleteAttribute("Use constructor that takes ITempDataDictionaryFactory, scheduled for removal in V12")]
public BackOfficeServerVariables(LinkGenerator linkGenerator, IRuntimeState runtimeState, UmbracoFeatures features, IOptionsMonitor`1<GlobalSettings> globalSettings, IUmbracoVersion umbracoVersion, IOptionsMonitor`1<ContentSettings> contentSettings, IHttpContextAccessor httpContextAccessor, TreeCollection treeCollection, IHostingEnvironment hostingEnvironment, IOptionsMonitor`1<RuntimeSettings> runtimeSettings, IOptionsMonitor`1<SecuritySettings> securitySettings, IRuntimeMinifier runtimeMinifier, IBackOfficeExternalLoginProviders externalLogins, IImageUrlGenerator imageUrlGenerator, PreviewRoutes previewRoutes, IEmailSender emailSender, IOptionsMonitor`1<MemberPasswordConfigurationSettings> memberPasswordConfigurationSettings, IOptionsMonitor`1<DataTypesSettings> dataTypesSettings);
    [ObsoleteAttribute("Use constructor that takes IOptionsMonitor<MarketplaceSettings>, scheduled for removal in V13")]
public BackOfficeServerVariables(LinkGenerator linkGenerator, IRuntimeState runtimeState, UmbracoFeatures features, IOptionsMonitor`1<GlobalSettings> globalSettings, IUmbracoVersion umbracoVersion, IOptionsMonitor`1<ContentSettings> contentSettings, IHttpContextAccessor httpContextAccessor, TreeCollection treeCollection, IHostingEnvironment hostingEnvironment, IOptionsMonitor`1<RuntimeSettings> runtimeSettings, IOptionsMonitor`1<SecuritySettings> securitySettings, IRuntimeMinifier runtimeMinifier, IBackOfficeExternalLoginProviders externalLogins, IImageUrlGenerator imageUrlGenerator, PreviewRoutes previewRoutes, IEmailSender emailSender, IOptionsMonitor`1<MemberPasswordConfigurationSettings> memberPasswordConfigurationSettings, IOptionsMonitor`1<DataTypesSettings> dataTypesSettings, ITempDataDictionaryFactory tempDataDictionaryFactory);
    public BackOfficeServerVariables(LinkGenerator linkGenerator, IRuntimeState runtimeState, UmbracoFeatures features, IOptionsMonitor`1<GlobalSettings> globalSettings, IUmbracoVersion umbracoVersion, IOptionsMonitor`1<ContentSettings> contentSettings, IHttpContextAccessor httpContextAccessor, TreeCollection treeCollection, IHostingEnvironment hostingEnvironment, IOptionsMonitor`1<RuntimeSettings> runtimeSettings, IOptionsMonitor`1<SecuritySettings> securitySettings, IRuntimeMinifier runtimeMinifier, IBackOfficeExternalLoginProviders externalLogins, IImageUrlGenerator imageUrlGenerator, PreviewRoutes previewRoutes, IEmailSender emailSender, IOptionsMonitor`1<MemberPasswordConfigurationSettings> memberPasswordConfigurationSettings, IOptionsMonitor`1<DataTypesSettings> dataTypesSettings, ITempDataDictionaryFactory tempDataDictionaryFactory, IOptionsMonitor`1<MarketplaceSettings> marketplaceSettings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeServerVariables/<BareMinimumServerVariablesAsync>d__24")]
internal Task`1<Dictionary`2<string, object>> BareMinimumServerVariablesAsync();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeServerVariables/<GetServerVariablesAsync>d__25")]
internal Task`1<Dictionary`2<string, object>> GetServerVariablesAsync();
    private string GetMarketplaceUrl();
    [IteratorStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.BackOfficeServerVariables/<GetPluginTrees>d__28")]
private IEnumerable`1<PluginTree> GetPluginTrees();
    private Dictionary`2<string, object> GetApplicationState();
    private string GetMaxRequestLength();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__23_0(GlobalSettings x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__23_1(ContentSettings x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__23_2(RuntimeSettings x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__23_3(SecuritySettings x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__23_4(DataTypesSettings x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__23_5(MemberPasswordConfigurationSettings x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__23_6(MarketplaceSettings x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Controllers.BlockGridSampleHelper : object {
    private static string ContainerName;
    private IContentTypeService _contentTypeService;
    private IDataTypeService _dataTypeService;
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IPartialViewPopulator _partialViewPopulator;
    public BlockGridSampleHelper(IContentTypeService contentTypeService, IDataTypeService dataTypeService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IPartialViewPopulator partialViewPopulator);
    internal Dictionary`2<string, Udi> CreateSampleElements(Func`2<DocumentTypeSave, ActionResult`1<IContentType>> createElement, String& errorMessage);
    internal void CreateSamplePartialViews();
    [NullableContextAttribute("2")]
private EntityContainer GetOrCreateContainer();
    [NullableContextAttribute("2")]
private void FindDataTypes(IDataType& textBox, IDataType& tinyMce, IDataType& mediaPicker);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.CodeFileController : BackOfficeNotificationsController {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IFileService _fileService;
    private FileSystems _fileSystems;
    private GlobalSettings _globalSettings;
    private IHostingEnvironment _hostingEnvironment;
    private ILocalizedTextService _localizedTextService;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    private PartialViewSnippetCollection _partialViewSnippetCollection;
    private PartialViewMacroSnippetCollection _partialViewMacroSnippetCollection;
    [ActivatorUtilitiesConstructorAttribute]
public CodeFileController(IHostingEnvironment hostingEnvironment, FileSystems fileSystems, IFileService fileService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, ILocalizedTextService localizedTextService, IUmbracoMapper umbracoMapper, IShortStringHelper shortStringHelper, IOptionsSnapshot`1<GlobalSettings> globalSettings, PartialViewSnippetCollection partialViewSnippetCollection, PartialViewMacroSnippetCollection partialViewMacroSnippetCollection);
    [ObsoleteAttribute("Use ctor will all params. Scheduled for removal in V12.")]
public CodeFileController(IHostingEnvironment hostingEnvironment, FileSystems fileSystems, IFileService fileService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, ILocalizedTextService localizedTextService, IUmbracoMapper umbracoMapper, IShortStringHelper shortStringHelper, IOptionsSnapshot`1<GlobalSettings> globalSettings);
    [ValidationFilterAttribute]
public ActionResult`1<CodeFileDisplay> PostCreate(string type, CodeFileDisplay display);
    [HttpPostAttribute]
public ActionResult`1<CodeFileDisplay> PostCreateContainer(string type, string parentId, string name);
    public ActionResult`1<CodeFileDisplay> GetByPath(string type, string virtualPath);
    public ActionResult`1<IEnumerable`1<SnippetDisplay>> GetSnippets(string type);
    public ActionResult`1<CodeFileDisplay> GetScaffold(string type, string id, string snippetName);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult Delete(string type, string virtualPath);
    public ActionResult`1<CodeFileDisplay> PostSave(CodeFileDisplay display);
    public StylesheetRule[] PostExtractStylesheetRules(StylesheetData data);
    public string PostInterpolateStylesheetRules(StylesheetData data);
    private IScript CreateOrUpdateScript(CodeFileDisplay display);
    private IStylesheet CreateOrUpdateStylesheet(CodeFileDisplay display);
    private T CreateOrUpdateFile(CodeFileDisplay display, string extension, IFileSystem fileSystem, Func`2<string, T> getFileByName, Action`2<T, Nullable`1<int>> saveFile, Func`2<string, T> createFile);
    private Attempt`1<IPartialView> CreateOrUpdatePartialView(CodeFileDisplay display);
    private Attempt`1<IPartialView> CreateOrUpdatePartialViewMacro(CodeFileDisplay display);
    private Attempt`1<IPartialView> CreateOrUpdatePartialView(CodeFileDisplay display, string systemDirectory, Func`2<string, IPartialView> getView, Func`3<IPartialView, Nullable`1<int>, Attempt`1<IPartialView>> saveView, Func`4<IPartialView, string, Nullable`1<int>, Attempt`1<IPartialView>> createView);
    private string NormalizeVirtualPath(string virtualPath, string systemDirectory);
    [NullableContextAttribute("2")]
private string EnsureCorrectFileExtension(string value, string extension);
    private bool IsDirectory(string path, IFileSystem fileSystem);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private SnippetDisplay <GetSnippets>b__15_0(string snippet);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IScript <CreateOrUpdateScript>b__21_0(string name);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <CreateOrUpdateScript>b__21_1(IScript script, Nullable`1<int> userId);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IStylesheet <CreateOrUpdateStylesheet>b__22_0(string name);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <CreateOrUpdateStylesheet>b__22_1(IStylesheet stylesheet, Nullable`1<int> userId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetNiceUrl", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.ContentController : ContentControllerBase {
    private ActionCollection _actionCollection;
    private Lazy`1<IDictionary`2<string, ILanguage>> _allLangs;
    private IAuthorizationService _authorizationService;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IContentService _contentService;
    private IContentTypeService _contentTypeService;
    private IContentVersionService _contentVersionService;
    private IDataTypeService _dataTypeService;
    private IDomainService _domainService;
    private IFileService _fileService;
    private ILocalizationService _localizationService;
    private ILocalizedTextService _localizedTextService;
    private INotificationService _notificationService;
    private ICultureImpactFactory _cultureImpactFactory;
    private ILogger`1<ContentController> _logger;
    private PropertyEditorCollection _propertyEditors;
    private IPublishedUrlProvider _publishedUrlProvider;
    private ICoreScopeProvider _scopeProvider;
    private ISqlContext _sqlContext;
    private IUmbracoMapper _umbracoMapper;
    private IUserService _userService;
    private ContentSettings _contentSettings;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Domains>k__BackingField;
    [NullableAttribute("2")]
public object Domains { get; private set; }
    [ActivatorUtilitiesConstructorAttribute]
public ContentController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, PropertyEditorCollection propertyEditors, IContentService contentService, IUserService userService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IContentTypeService contentTypeService, IUmbracoMapper umbracoMapper, IPublishedUrlProvider publishedUrlProvider, IDomainService domainService, IDataTypeService dataTypeService, ILocalizationService localizationService, IFileService fileService, INotificationService notificationService, ActionCollection actionCollection, ISqlContext sqlContext, IJsonSerializer serializer, ICoreScopeProvider scopeProvider, IAuthorizationService authorizationService, IContentVersionService contentVersionService, ICultureImpactFactory cultureImpactFactory, IOptions`1<ContentSettings> contentSettings);
    [ObsoleteAttribute("Use constructor that accepts ContentSettings as a parameter, scheduled for removal in V13")]
public ContentController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, PropertyEditorCollection propertyEditors, IContentService contentService, IUserService userService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IContentTypeService contentTypeService, IUmbracoMapper umbracoMapper, IPublishedUrlProvider publishedUrlProvider, IDomainService domainService, IDataTypeService dataTypeService, ILocalizationService localizationService, IFileService fileService, INotificationService notificationService, ActionCollection actionCollection, ISqlContext sqlContext, IJsonSerializer serializer, ICoreScopeProvider scopeProvider, IAuthorizationService authorizationService, IContentVersionService contentVersionService, ICultureImpactFactory cultureImpactFactory);
    [ObsoleteAttribute("Use constructor that accepts ICultureImpactService as a parameter, scheduled for removal in V12")]
public ContentController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, PropertyEditorCollection propertyEditors, IContentService contentService, IUserService userService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IContentTypeService contentTypeService, IUmbracoMapper umbracoMapper, IPublishedUrlProvider publishedUrlProvider, IDomainService domainService, IDataTypeService dataTypeService, ILocalizationService localizationService, IFileService fileService, INotificationService notificationService, ActionCollection actionCollection, ISqlContext sqlContext, IJsonSerializer serializer, ICoreScopeProvider scopeProvider, IAuthorizationService authorizationService, IContentVersionService contentVersionService);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Domains();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Domains(object value);
    [FilterAllowedOutgoingContentAttribute("System.Collections.Generic.IEnumerable`1<Umbraco.Cms.Core.Models.ContentEditing.ContentItemDisplay>")]
public IEnumerable`1<ContentItemDisplay> GetByIds(Int32[] ids);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostSaveUserGroupPermissions>d__30")]
public Task`1<ActionResult`1<IEnumerable`1<AssignedUserGroupPermissions>>> PostSaveUserGroupPermissions(UserGroupPermissionsSave saveModel);
    [AuthorizeAttribute]
public ActionResult`1<IEnumerable`1<AssignedUserGroupPermissions>> GetDetailedPermissions(int contentId);
    private ActionResult`1<IEnumerable`1<AssignedUserGroupPermissions>> GetDetailedPermissions(IContent content, IEnumerable`1<IUserGroup> allUserGroups);
    public ActionResult`1<ContentItemDisplay> GetRecycleBin();
    public ActionResult`1<ContentItemDisplay> GetBlueprintById(int id);
    private static void SetupBlueprint(ContentItemDisplay content, IContent persistedContent);
    [OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public ActionResult`1<ContentItemDisplayWithSchedule> GetById(int id);
    [OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public ActionResult`1<ContentItemDisplayWithSchedule> GetById(Guid id);
    [OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public ActionResult`1<ContentItemDisplayWithSchedule> GetById(Udi id);
    [OutgoingEditorModelEventAttribute]
public ActionResult`1<ContentItemDisplay> GetEmpty(string contentTypeAlias, int parentId);
    [OutgoingEditorModelEventAttribute]
[HttpPostAttribute]
public ActionResult`1<IDictionary`2<string, ContentItemDisplay>> GetEmptyByAliases(ContentTypesByAliases contentTypesByAliases);
    [OutgoingEditorModelEventAttribute]
public ActionResult`1<ContentItemDisplay> GetEmptyByKey(Guid contentTypeKey, int parentId);
    private ContentItemDisplay GetEmptyInner(IContentType contentType, int parentId);
    private ContentItemDisplay CleanContentItemDisplay(ContentItemDisplay display);
    private IEnumerable`1<ContentItemDisplay> GetEmpties(IEnumerable`1<IContentType> contentTypes, int parentId);
    private ActionResult`1<IDictionary`2<Guid, ContentItemDisplay>> GetEmptyByKeysInternal(Guid[] contentTypeKeys, int parentId);
    [OutgoingEditorModelEventAttribute]
public ActionResult`1<IDictionary`2<Guid, ContentItemDisplay>> GetEmptyByKeys(Guid[] contentTypeKeys, int parentId);
    [HttpPostAttribute]
[OutgoingEditorModelEventAttribute]
public ActionResult`1<IDictionary`2<Guid, ContentItemDisplay>> GetEmptyByKeys(ContentTypesByKeys contentTypeByKeys);
    [OutgoingEditorModelEventAttribute]
public ActionResult`1<ContentItemDisplay> GetEmptyBlueprint(int blueprintId, int parentId);
    public IActionResult GetNiceUrl(int id);
    public IActionResult GetNiceUrl(Guid id);
    public IActionResult GetNiceUrl(Udi id);
    [FilterAllowedOutgoingContentAttribute("System.Collections.Generic.IEnumerable`1<Umbraco.Cms.Core.Models.ContentEditing.ContentItemBasic`1<Umbraco.Cms.Core.Models.ContentEditing.ContentPropertyBasic>>", "Items")]
public PagedResult`1<ContentItemBasic`1<ContentPropertyBasic>> GetChildren(int id, string includeProperties, int pageNumber, int pageSize, string orderBy, Direction orderDirection, bool orderBySystemField, string filter, string cultureName);
    [AuthorizeAttribute]
[HttpPostAttribute]
public ActionResult`1<SimpleNotificationModel> CreateBlueprintFromContent(int contentId, string name);
    [NullableContextAttribute("2")]
private bool EnsureUniqueName(string name, IContent content, string modelName);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostSaveBlueprint>d__55")]
[AuthorizeAttribute]
[FileUploadCleanupFilterAttribute("True")]
[ContentSaveValidationAttribute("True")]
public Task`1<ActionResult`1<ContentItemDisplay`1<ContentVariantDisplay>>> PostSaveBlueprint(ContentItemSave contentItem);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostSave>d__56")]
[FileUploadCleanupFilterAttribute("True")]
[ContentSaveValidationAttribute("False")]
[OutgoingEditorModelEventAttribute]
public Task`1<ActionResult`1<ContentItemDisplay`1<ContentVariantScheduleDisplay>>> PostSave(ContentItemSave contentItem);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostSaveInternal>d__57`1")]
private Task`1<ActionResult`1<ContentItemDisplay`1<TVariant>>> PostSaveInternal(ContentItemSave contentItem, Func`3<IContent, ContentScheduleCollection, OperationResult> saveMethod, Func`2<IContent, ContentItemDisplay`1<TVariant>> mapToDisplay);
    private void AddPublishStatusNotifications(IReadOnlyCollection`1<PublishResult> publishStatus, SimpleNotificationModel globalNotifications, Dictionary`2<string, SimpleNotificationModel> variantNotifications, String[] successfulCultures);
    private bool ValidateCriticalData(ContentItemSave contentItem, Int32& variantCount);
    private void SaveAndNotify(ContentItemSave contentItem, Func`3<IContent, ContentScheduleCollection, OperationResult> saveMethod, int variantCount, Dictionary`2<string, SimpleNotificationModel> notifications, SimpleNotificationModel globalNotifications, string savedContentHeaderLocalizationAlias, string invariantSavedLocalizationAlias, string variantSavedLocalizationAlias, string cultureForInvariantErrors, ContentScheduleCollection contentSchedule, Boolean& wasCancelled);
    private bool SaveSchedule(ContentItemSave contentItem, ContentScheduleCollection contentSchedule, SimpleNotificationModel globalNotifications);
    private bool SaveScheduleInvariant(ContentItemSave contentItem, ContentScheduleCollection contentSchedule, SimpleNotificationModel globalNotifications);
    private bool SaveScheduleVariant(ContentItemSave contentItem, ContentScheduleCollection contentSchedule);
    private static void AddSuccessNotification(IDictionary`2<string, SimpleNotificationModel> notifications, string culture, string segment, string header, string msg);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<ValidatePublishBranchPermissionsAsync>d__65")]
private Task`1<bool> ValidatePublishBranchPermissionsAsync(ContentItemSave contentItem);
    private IEnumerable`1<PublishResult> PublishBranchInternal(ContentItemSave contentItem, bool force, string cultureForInvariantErrors, Boolean& wasCancelled, String[]& successfulCultures);
    private PublishResult PublishInternal(ContentItemSave contentItem, string defaultCulture, string cultureForInvariantErrors, Boolean& wasCancelled, String[]& successfulCultures);
    private void AddDomainWarnings(IEnumerable`1<PublishResult> publishResults, String[] culturesPublished, SimpleNotificationModel globalNotifications);
    internal void AddDomainWarnings(IContent persistedContent, String[] culturesPublished, SimpleNotificationModel globalNotifications);
    private bool ValidatePublishingMandatoryLanguages(IReadOnlyCollection`1<ValueTuple`2<string, string>> variantsWithValidationErrors, ContentItemSave contentItem, IReadOnlyCollection`1<ContentVariantSave> variants, IReadOnlyList`1<string> mandatoryCultures, Func`2<ContentVariantSave, bool> publishingCheck);
    private bool PublishCulture(IContent persistentContent, IEnumerable`1<ContentVariantSave> cultureVariants, string defaultCulture);
    private IEnumerable`1<string> GetPublishedCulturesFromAncestors(IContent content);
    [NullableContextAttribute("2")]
private void AddVariantValidationError(string culture, string segment, string localizationArea, string localizationAlias, string cultureToken);
    [NullableContextAttribute("2")]
private string GetVariantName(string culture, string segment);
    [AuthorizeAttribute]
public IActionResult PostPublishById(int id);
    [AuthorizeAttribute]
public IActionResult PostPublishByIdAndCulture(PublishContent model);
    [AuthorizeAttribute]
[HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteBlueprint(int id);
    [AuthorizeAttribute]
[HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteById(int id);
    [HttpDeleteAttribute]
[HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult EmptyRecycleBin();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostSort>d__80")]
public Task`1<IActionResult> PostSort(ContentSortOrder sorted);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostMove>d__81")]
public Task`1<IActionResult> PostMove(MoveOrCopy move);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostCopy>d__82")]
public Task`1<ActionResult`1<IContent>> PostCopy(MoveOrCopy copy);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.ContentController/<PostUnpublish>d__83")]
[OutgoingEditorModelEventAttribute]
public Task`1<ActionResult`1<ContentItemDisplayWithSchedule>> PostUnpublish(UnpublishContent model);
    public ContentDomainsAndCulture GetCultureAndDomains(int id);
    [HttpPostAttribute]
public ActionResult`1<DomainSave> PostSaveLanguageAndDomains(DomainSave model);
    [NullableContextAttribute("0")]
private void HandleInvalidModelState(ContentItemDisplay`1<TVariant> display, string cultureForInvariantErrors);
    private void MapValuesForPersistence(ContentItemSave contentSave);
    private ActionResult`1<IContent> ValidateMoveOrCopy(MoveOrCopy model);
    private void AddMessageForPublishStatus(IReadOnlyCollection`1<PublishResult> statuses, INotificationModel display, String[] successfulCultures);
    [NullableContextAttribute("2")]
private ContentItemDisplay MapToDisplay(IContent content);
    [NullableContextAttribute("2")]
private ContentItemDisplayWithSchedule MapToDisplayWithSchedule(IContent content);
    [NullableContextAttribute("2")]
private ContentItemDisplay MapToDisplay(IContent content, Action`1<MapperContext> contextOptions);
    [AuthorizeAttribute]
public ActionResult`1<IEnumerable`1<NotifySetting>> GetNotificationOptions(int contentId);
    public IActionResult PostNotificationOptions(int contentId, String[] notifyOptions);
    [HttpGetAttribute]
[JsonCamelCaseFormatterAttribute]
public IActionResult GetPagedContentVersions(int contentId, int pageNumber, int pageSize, string culture);
    [HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult PostSetContentVersionPreventCleanup(int contentId, int versionId, bool preventCleanup);
    [HttpGetAttribute]
public IEnumerable`1<RollbackVersion> GetRollbackVersions(int contentId, string culture);
    [NullableContextAttribute("2")]
[HttpGetAttribute]
public ContentVariantDisplay GetRollbackVersion(int versionId, string culture);
    [AuthorizeAttribute]
[HttpPostAttribute]
public IActionResult PostRollbackContent(int contentId, int versionId, string culture);
    [CompilerGeneratedAttribute]
private IDictionary`2<string, ILanguage> <.ctor>b__22_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IContentType <GetEmptyByAliases>b__40_0(string alias);
    [CompilerGeneratedAttribute]
private OperationResult <PostSave>b__56_0(IContent content, ContentScheduleCollection contentSchedule);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, string> <MapValuesForPersistence>g__PropertyCultureAndSegment|87_0(IProperty property, ContentVariantSave variant);
    [CompilerGeneratedAttribute]
private void <MapToDisplay>b__90_0(MapperContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[JsonDateTimeFormatAttribute]
public abstract class Umbraco.Cms.Web.BackOffice.Controllers.ContentControllerBase : BackOfficeNotificationsController {
    private ILogger`1<ContentControllerBase> _logger;
    private IJsonSerializer _serializer;
    [CompilerGeneratedAttribute]
private ICultureDictionary <CultureDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggerFactory <LoggerFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IShortStringHelper <ShortStringHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventMessagesFactory <EventMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizedTextService <LocalizedTextService>k__BackingField;
    protected ICultureDictionary CultureDictionary { get; }
    protected ILoggerFactory LoggerFactory { get; }
    protected IShortStringHelper ShortStringHelper { get; }
    protected IEventMessagesFactory EventMessages { get; }
    protected ILocalizedTextService LocalizedTextService { get; }
    protected ContentControllerBase(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, IJsonSerializer serializer);
    [CompilerGeneratedAttribute]
protected ICultureDictionary get_CultureDictionary();
    [CompilerGeneratedAttribute]
protected ILoggerFactory get_LoggerFactory();
    [CompilerGeneratedAttribute]
protected IShortStringHelper get_ShortStringHelper();
    [CompilerGeneratedAttribute]
protected IEventMessagesFactory get_EventMessages();
    [CompilerGeneratedAttribute]
protected ILocalizedTextService get_LocalizedTextService();
    protected NotFoundObjectResult HandleContentNotFound(object id);
    internal void MapPropertyValuesForPersistence(TSaved contentItem, ContentPropertyCollectionDto dto, Func`3<TSaved, IProperty, object> getPropertyValue, Action`3<TSaved, IProperty, object> savePropertyValue, string culture);
    [NullableContextAttribute("2")]
protected TPersisted GetObjectFromRequest(Func`1<TPersisted> getFromService);
    internal static bool IsCreatingAction(ContentSaveAction action);
    protected void AddCancelMessage(INotificationModel display, string messageArea, string messageAlias, String[] messageParams);
    protected void AddCancelMessage(INotificationModel display, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PluginControllerAttribute("UmbracoApi")]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.ContentTypeController : ContentTypeControllerBase`1<IContentType> {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IContentService _contentService;
    private IContentTypeBaseServiceProvider _contentTypeBaseServiceProvider;
    private IContentTypeService _contentTypeService;
    private IDataTypeService _dataTypeService;
    private IFileService _fileService;
    private IHostingEnvironment _hostingEnvironment;
    private ILocalizedTextService _localizedTextService;
    private ILogger`1<ContentTypeController> _logger;
    private PackageDataInstallation _packageDataInstallation;
    private BlockGridSampleHelper _blockGridSampleHelper;
    private ICoreScopeProvider _coreScopeProvider;
    private PropertyEditorCollection _propertyEditors;
    private IEntityXmlSerializer _serializer;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    [ObsoleteAttribute("Use constructor that takes BlockGridSampleHelper as a parameter")]
public ContentTypeController(ICultureDictionary cultureDictionary, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService, IEntityXmlSerializer serializer, PropertyEditorCollection propertyEditors, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IDataTypeService dataTypeService, IShortStringHelper shortStringHelper, IFileService fileService, ILogger`1<ContentTypeController> logger, IContentService contentService, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, IHostingEnvironment hostingEnvironment, EditorValidatorCollection editorValidatorCollection, PackageDataInstallation packageDataInstallation);
    [ObsoleteAttribute("Please use constructor that takes an ICoreScopeProvider")]
public ContentTypeController(ICultureDictionary cultureDictionary, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService, IEntityXmlSerializer serializer, PropertyEditorCollection propertyEditors, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IDataTypeService dataTypeService, IShortStringHelper shortStringHelper, IFileService fileService, ILogger`1<ContentTypeController> logger, IContentService contentService, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, IHostingEnvironment hostingEnvironment, EditorValidatorCollection editorValidatorCollection, PackageDataInstallation packageDataInstallation, BlockGridSampleHelper blockGridSampleHelper);
    [ActivatorUtilitiesConstructorAttribute]
public ContentTypeController(ICultureDictionary cultureDictionary, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService, IEntityXmlSerializer serializer, PropertyEditorCollection propertyEditors, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IDataTypeService dataTypeService, IShortStringHelper shortStringHelper, IFileService fileService, ILogger`1<ContentTypeController> logger, IContentService contentService, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, IHostingEnvironment hostingEnvironment, EditorValidatorCollection editorValidatorCollection, PackageDataInstallation packageDataInstallation, BlockGridSampleHelper blockGridSampleHelper, ICoreScopeProvider coreScopeProvider);
    [AuthorizeAttribute]
public int GetCount();
    [HttpGetAttribute]
[AuthorizeAttribute]
public bool HasContentNodes(int id);
    [AuthorizeAttribute]
public ActionResult`1<DocumentTypeDisplay> GetById(int id);
    [AuthorizeAttribute]
public ActionResult`1<DocumentTypeDisplay> GetById(Guid id);
    [AuthorizeAttribute]
public ActionResult`1<DocumentTypeDisplay> GetById(Udi id);
    [HttpDeleteAttribute]
[HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult DeleteById(int id);
    [AuthorizeAttribute]
public IEnumerable`1<string> GetAllPropertyTypeAliases();
    [AuthorizeAttribute]
public IEnumerable`1<string> GetAllStandardFields();
    [HttpPostAttribute]
[AuthorizeAttribute]
public ActionResult GetAvailableCompositeContentTypes(GetAvailableCompositionsFilter filter);
    [HttpGetAttribute]
[AuthorizeAttribute]
public bool AllowsCultureVariation();
    [HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult GetWhereCompositionIsUsedInContentTypes(GetAvailableCompositionsFilter filter);
    [AuthorizeAttribute]
public ActionResult`1<ContentPropertyDisplay> GetPropertyTypeScaffold(int id);
    [HttpDeleteAttribute]
[HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult DeleteContainer(int id);
    [AuthorizeAttribute]
public IActionResult PostCreateContainer(int parentId, string name);
    [AuthorizeAttribute]
public IActionResult PostRenameContainer(int id, string name);
    [AuthorizeAttribute]
public ActionResult`1<DocumentTypeDisplay> PostSave(DocumentTypeSave contentTypeSave);
    [AuthorizeAttribute]
public ActionResult`1<TemplateDisplay> PostCreateDefaultTemplate(int id);
    [NullableContextAttribute("2")]
private ITemplate CreateTemplateForContentType(string contentTypeAlias, string contentTypeName);
    [NullableContextAttribute("2")]
[AuthorizeAttribute]
public DocumentTypeDisplay GetEmpty(int parentId);
    [AuthorizeAttribute]
public IEnumerable`1<ContentTypeBasic> GetAll();
    [AuthorizeAttribute]
[OutgoingEditorModelEventAttribute]
public IEnumerable`1<ContentTypeBasic> GetAllowedChildren(int contentId);
    [AuthorizeAttribute]
public IActionResult PostMove(MoveOrCopy move);
    [AuthorizeAttribute]
public IActionResult PostCopy(MoveOrCopy copy);
    [HttpGetAttribute]
[AuthorizeAttribute]
public IActionResult Export(int id);
    [HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult Import(string file);
    [HttpPostAttribute]
[AuthorizeAttribute]
public ActionResult`1<ContentTypeImportModel> Upload(List`1<IFormFile> file);
    [AuthorizeAttribute]
public ActionResult PostCreateBlockGridSample();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IContentType <PostSave>b__34_0(int i);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <PostSave>b__34_1(IContentType type);
    [CompilerGeneratedAttribute]
private void <PostSave>b__34_2(DocumentTypeSave ctSave);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ContentTypeBasic <GetAll>b__38_1(ContentTypeBasic basic);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IContentType <PostMove>b__40_0(int i);
    [CompilerGeneratedAttribute]
private Attempt`1<OperationResult`1<MoveOperationStatusType>> <PostMove>b__40_1(IContentType type, int i);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IContentType <PostCopy>b__41_0(int i);
    [CompilerGeneratedAttribute]
private Attempt`1<OperationResult`2<MoveOperationStatusType, IContentType>> <PostCopy>b__41_1(IContentType type, int i);
    [CompilerGeneratedAttribute]
private ActionResult`1<IContentType> <PostCreateBlockGridSample>b__45_0(DocumentTypeSave documentTypeSave);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IContentType <PostCreateBlockGridSample>b__45_1(int i);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <PostCreateBlockGridSample>b__45_2(IContentType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[PrefixlessBodyModelValidatorAttribute]
public abstract class Umbraco.Cms.Web.BackOffice.Controllers.ContentTypeControllerBase`1 : BackOfficeNotificationsController {
    private EditorValidatorCollection _editorValidatorCollection;
    [CompilerGeneratedAttribute]
private ICultureDictionary <CultureDictionary>k__BackingField;
    [CompilerGeneratedAttribute]
private IContentTypeService <ContentTypeService>k__BackingField;
    [CompilerGeneratedAttribute]
private IMediaTypeService <MediaTypeService>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberTypeService <MemberTypeService>k__BackingField;
    [CompilerGeneratedAttribute]
private IUmbracoMapper <UmbracoMapper>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizedTextService <LocalizedTextService>k__BackingField;
    protected ICultureDictionary CultureDictionary { get; }
    public IContentTypeService ContentTypeService { get; }
    public IMediaTypeService MediaTypeService { get; }
    public IMemberTypeService MemberTypeService { get; }
    public IUmbracoMapper UmbracoMapper { get; }
    public ILocalizedTextService LocalizedTextService { get; }
    protected ContentTypeControllerBase`1(ICultureDictionary cultureDictionary, EditorValidatorCollection editorValidatorCollection, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService);
    [CompilerGeneratedAttribute]
protected ICultureDictionary get_CultureDictionary();
    [CompilerGeneratedAttribute]
public IContentTypeService get_ContentTypeService();
    [CompilerGeneratedAttribute]
public IMediaTypeService get_MediaTypeService();
    [CompilerGeneratedAttribute]
public IMemberTypeService get_MemberTypeService();
    [CompilerGeneratedAttribute]
public IUmbracoMapper get_UmbracoMapper();
    [CompilerGeneratedAttribute]
public ILocalizedTextService get_LocalizedTextService();
    protected ActionResult`1<IEnumerable`1<Tuple`2<EntityBasic, bool>>> PerformGetAvailableCompositeContentTypes(int contentTypeId, UmbracoObjectTypes type, String[] filterContentTypes, String[] filterPropertyTypes, bool isElement);
    private IEnumerable`1<EntityContainer> GetEntityContainers(IContentTypeComposition contentType, UmbracoObjectTypes type);
    protected ActionResult`1<IEnumerable`1<EntityBasic>> PerformGetWhereCompositionIsUsedInContentTypes(int contentTypeId, UmbracoObjectTypes type);
    [NullableContextAttribute("2")]
protected string TranslateItem(string text);
    protected ActionResult`1<TContentType> PerformPostSave(TContentTypeSave contentTypeSave, Func`2<int, TContentType> getContentType, Action`1<TContentType> saveContentType, Action`1<TContentTypeSave> beforeCreateNew);
    private void ValidateExternalValidators(ModelStateDictionary modelState, object model);
    protected IActionResult PerformMove(MoveOrCopy move, Func`2<int, TContentType> getContentType, Func`3<TContentType, int, Attempt`1<OperationResult`1<MoveOperationStatusType>>> doMove);
    protected IActionResult PerformCopy(MoveOrCopy move, Func`2<int, TContentType> getContentType, Func`3<TContentType, int, Attempt`1<OperationResult`2<MoveOperationStatusType, TContentType>>> doCopy);
    private TContentTypeDisplay CreateCompositionValidationExceptionIfInvalid(TContentTypeSave contentTypeSave, TContentType composition);
    [NullableContextAttribute("0")]
public IContentTypeBaseService`1<T> GetContentTypeService();
    private void AddCompositionValidationErrors(TContentTypeSave contentTypeSave, IEnumerable`1<string> duplicatePropertyTypeAliases, IEnumerable`1<string> invalidPropertyGroupAliases);
    private TContentTypeDisplay CreateInvalidCompositionResponseException(Exception ex, TContentTypeSave contentTypeSave, TContentType ct, int ctId);
    private TContentTypeDisplay CreateModelStateValidationEror(int ctId, TContentTypeSave contentTypeSave, TContentType ct);
    [CompilerGeneratedAttribute]
private EntityBasic <PerformGetWhereCompositionIsUsedInContentTypes>g__TranslateName|22_0(EntityBasic e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.CurrentUserController : UmbracoAuthorizedJsonController {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IBackOfficeUserManager _backOfficeUserManager;
    private ContentSettings _contentSettings;
    private IHostingEnvironment _hostingEnvironment;
    private IImageUrlGenerator _imageUrlGenerator;
    private ILocalizedTextService _localizedTextService;
    private MediaFileManager _mediaFileManager;
    private IPasswordChanger`1<BackOfficeIdentityUser> _passwordChanger;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    private IUserDataService _userDataService;
    [NullableAttribute("2")]
private IFileStreamSecurityValidator _fileStreamSecurityValidator;
    private IUserService _userService;
    [ActivatorUtilitiesConstructorAttribute]
public CurrentUserController(MediaFileManager mediaFileManager, IOptionsSnapshot`1<ContentSettings> contentSettings, IHostingEnvironment hostingEnvironment, IImageUrlGenerator imageUrlGenerator, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IUserService userService, IUmbracoMapper umbracoMapper, IBackOfficeUserManager backOfficeUserManager, ILocalizedTextService localizedTextService, AppCaches appCaches, IShortStringHelper shortStringHelper, IPasswordChanger`1<BackOfficeIdentityUser> passwordChanger, IUserDataService userDataService, IFileStreamSecurityValidator fileStreamSecurityValidator);
    [ObsoleteAttribute("Use constructor overload that has fileStreamSecurityValidator, scheduled for removal in v14")]
public CurrentUserController(MediaFileManager mediaFileManager, IOptionsSnapshot`1<ContentSettings> contentSettings, IHostingEnvironment hostingEnvironment, IImageUrlGenerator imageUrlGenerator, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IUserService userService, IUmbracoMapper umbracoMapper, IBackOfficeUserManager backOfficeUserManager, ILocalizedTextService localizedTextService, AppCaches appCaches, IShortStringHelper shortStringHelper, IPasswordChanger`1<BackOfficeIdentityUser> passwordChanger, IUserDataService userDataService);
    [HttpPostAttribute]
public Dictionary`2<int, String[]> GetPermissions(Int32[] nodeIds);
    [HttpGetAttribute]
public bool HasPermission(string permissionToCheck, int nodeId);
    public IEnumerable`1<UserTourStatus> PostSetUserTour(UserTourStatus status);
    public IEnumerable`1<UserTourStatus> GetUserTours();
    public IEnumerable`1<UserData> GetUserData();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.CurrentUserController/<PostSetInvitedUserPassword>d__21")]
[AllowAnonymousAttribute]
[ObsoleteAttribute("This is no longer used and will be removed in future versions. Use the AuthenticationController.PostSetInvitedUserPassword instead.")]
public Task`1<ActionResult`1<UserDetail>> PostSetInvitedUserPassword(string newPassword);
    [AppendUserModifiedHeaderAttribute]
public IActionResult PostSetAvatar(IList`1<IFormFile> file);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.CurrentUserController/<PostChangePassword>d__23")]
public Task`1<ActionResult`1<ModelWithNotifications`1<string>>> PostChangePassword(ChangingPasswordModel changingPasswordModel);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.CurrentUserController/<GetCurrentUserLinkedLogins>d__24")]
[AuthorizeAttribute]
[ValidateAngularAntiForgeryTokenAttribute]
public Task`1<Dictionary`2<string, string>> GetCurrentUserLinkedLogins();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[ValidationFilterAttribute]
[AngularJsonOnlyConfigurationAttribute]
[IsBackOfficeAttribute]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.DashboardController : UmbracoApiController {
    private static HttpClient HttpClient;
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IDashboardService _dashboardService;
    private ContentDashboardSettings _dashboardSettings;
    private ILogger`1<DashboardController> _logger;
    private IShortStringHelper _shortStringHelper;
    private ISiteIdentifierService _siteIdentifierService;
    private IUmbracoVersion _umbracoVersion;
    [ActivatorUtilitiesConstructorAttribute]
public DashboardController(IBackOfficeSecurityAccessor backOfficeSecurityAccessor, AppCaches appCaches, ILogger`1<DashboardController> logger, IDashboardService dashboardService, IUmbracoVersion umbracoVersion, IShortStringHelper shortStringHelper, IOptionsSnapshot`1<ContentDashboardSettings> dashboardSettings, ISiteIdentifierService siteIdentifierService);
    private static DashboardController();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.DashboardController/<GetRemoteDashboardContent>d__10")]
[ValidateAngularAntiForgeryTokenAttribute]
public Task`1<JObject> GetRemoteDashboardContent(string section, string baseUrl);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.DashboardController/<GetRemoteDashboardCss>d__11")]
public Task`1<IActionResult> GetRemoteDashboardCss(string section, string baseUrl);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.DashboardController/<GetRemoteXml>d__12")]
public Task`1<IActionResult> GetRemoteXml(string site, string url);
    [ValidateAngularAntiForgeryTokenAttribute]
[OutgoingEditorModelEventAttribute]
public IEnumerable`1<Tab`1<IDashboardSlim>> GetDashboard(string section);
    private bool IsAllowedUrl(string url);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.DataTypeController : BackOfficeNotificationsController {
    private PropertyEditorCollection _propertyEditors;
    private IDataTypeService _dataTypeService;
    private ContentSettings _contentSettings;
    private IUmbracoMapper _umbracoMapper;
    private PropertyEditorCollection _propertyEditorCollection;
    private IContentTypeService _contentTypeService;
    private IMediaTypeService _mediaTypeService;
    private IMemberTypeService _memberTypeService;
    private ILocalizedTextService _localizedTextService;
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IConfigurationEditorJsonSerializer _serializer;
    private IDataTypeUsageService _dataTypeUsageService;
    [ObsoleteAttribute("Use constructor that takes IDataTypeUsageService, scheduled for removal in V12")]
public DataTypeController(PropertyEditorCollection propertyEditors, IDataTypeService dataTypeService, IOptionsSnapshot`1<ContentSettings> contentSettings, IUmbracoMapper umbracoMapper, PropertyEditorCollection propertyEditorCollection, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, ILocalizedTextService localizedTextService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IConfigurationEditorJsonSerializer serializer);
    [ActivatorUtilitiesConstructorAttribute]
public DataTypeController(PropertyEditorCollection propertyEditors, IDataTypeService dataTypeService, IOptionsSnapshot`1<ContentSettings> contentSettings, IUmbracoMapper umbracoMapper, PropertyEditorCollection propertyEditorCollection, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, ILocalizedTextService localizedTextService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IConfigurationEditorJsonSerializer serializer, IDataTypeUsageService dataTypeUsageService);
    public DataTypeDisplay GetByName(string name);
    public ActionResult`1<DataTypeDisplay> GetById(int id);
    public ActionResult`1<DataTypeDisplay> GetById(Guid id);
    public ActionResult`1<DataTypeDisplay> GetById(Udi id);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteById(int id);
    [NullableContextAttribute("2")]
public DataTypeDisplay GetEmpty(int parentId);
    public ActionResult`1<DataTypeDisplay> GetCustomListView(string contentTypeAlias);
    public DataTypeDisplay PostCreateCustomListView(string contentTypeAlias);
    public ActionResult`1<IEnumerable`1<DataTypeConfigurationFieldDisplay>> GetPreValues(string editorAlias, int dataTypeId);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteContainer(int id);
    public IActionResult PostCreateContainer(int parentId, string name);
    [DataTypeValidateAttribute]
public ActionResult`1<DataTypeDisplay> PostSave(DataTypeSave dataType);
    public IActionResult PostMove(MoveOrCopy move);
    public IActionResult PostCopy(MoveOrCopy copy);
    public IActionResult PostRenameContainer(int id, string name);
    public DataTypeReferences GetReferences(int id);
    [HttpGetAttribute]
public ActionResult`1<DataTypeHasValuesDisplay> HasValues(int id);
    private IEnumerable`1<ContentTypeReferences> GetContentTypeUsages(IEnumerable`1<IContentTypeBase> cts, IReadOnlyDictionary`2<Guid, IEnumerable`1<string>> usages);
    private IEnumerable`1<ContentTypeReferences> GetListViewContentTypeUsages(IEnumerable`1<IContentTypeBase> cts, IReadOnlyDictionary`2<Guid, IEnumerable`1<string>> usages);
    [AuthorizeAttribute]
public IEnumerable`1<DataTypeBasic> GetAll();
    [AuthorizeAttribute]
public IDictionary`2<string, IEnumerable`1<DataTypeBasic>> GetGroupedDataTypes();
    [AuthorizeAttribute]
public IDictionary`2<string, IEnumerable`1<DataTypeBasic>> GetGroupedPropertyEditors();
    [AuthorizeAttribute]
public IEnumerable`1<PropertyEditorBasic> GetAllPropertyEditors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.DictionaryController : BackOfficeNotificationsController {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private GlobalSettings _globalSettings;
    private ILocalizationService _localizationService;
    private ILocalizedTextService _localizedTextService;
    private ILogger`1<DictionaryController> _logger;
    private IUmbracoMapper _umbracoMapper;
    private IEntityXmlSerializer _serializer;
    private IHostingEnvironment _hostingEnvironment;
    private PackageDataInstallation _packageDataInstallation;
    [ActivatorUtilitiesConstructorAttribute]
public DictionaryController(ILogger`1<DictionaryController> logger, ILocalizationService localizationService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IOptionsSnapshot`1<GlobalSettings> globalSettings, ILocalizedTextService localizedTextService, IUmbracoMapper umbracoMapper, IEntityXmlSerializer serializer, IHostingEnvironment hostingEnvironment, PackageDataInstallation packageDataInstallation);
    [ObsoleteAttribute("Please use ctor that also takes an IEntityXmlSerializer, IHostingEnvironment & PackageDataInstallation instead, scheduled for removal in v12")]
public DictionaryController(ILogger`1<DictionaryController> logger, ILocalizationService localizationService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IOptionsSnapshot`1<GlobalSettings> globalSettings, ILocalizedTextService localizedTextService, IUmbracoMapper umbracoMapper);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteById(int id);
    [HttpPostAttribute]
public ActionResult`1<int> Create(int parentId, string key);
    public ActionResult`1<DictionaryDisplay> GetById(int id);
    public ActionResult`1<DictionaryDisplay> GetById(Guid id);
    public ActionResult`1<DictionaryDisplay> GetById(Udi id);
    public IActionResult PostMove(MoveOrCopy move);
    public ActionResult`1<DictionaryDisplay> PostSave(DictionarySave dictionary);
    public IEnumerable`1<DictionaryOverviewDisplay> GetList();
    private void GetChildItemsForList(IDictionaryItem dictionaryItem, int level, ICollection`1<DictionaryOverviewDisplay> list);
    public IActionResult ExportDictionary(int id, bool includeChildren);
    public IActionResult ImportDictionary(string file, int parentId);
    public ActionResult`1<DictionaryImportModel> Upload(IFormFile file);
    private static Func`2<IDictionaryItem, string> ItemSort();
    [CompilerGeneratedAttribute]
private void <GetList>g__BuildTree|18_0(int level, Nullable`1<Guid> parentId, <>c__DisplayClass18_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.ElementTypeController : UmbracoAuthorizedJsonController {
    private IContentTypeService _contentTypeService;
    public ElementTypeController(IContentTypeService contentTypeService);
    [HttpGetAttribute]
public IEnumerable`1<object> GetAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[ParameterSwapControllerActionSelectorAttribute("GetAncestors", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetPagedChildren", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetPath", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetUrlAndAnchors", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetByIds", "ids", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetUrl", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetUrlsByIds", "ids", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.EntityController : UmbracoAuthorizedJsonController {
    private static String[] _postFilterSplitStrings;
    private AppCaches _appCaches;
    private IDynamicRootService _dynamicRootService;
    private IVariationContextAccessor _variationContextAccessor;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IContentService _contentService;
    private IContentTypeService _contentTypeService;
    private IDataTypeService _dataTypeService;
    private IEntityService _entityService;
    private IFileService _fileService;
    private ILocalizationService _localizationService;
    private ILocalizedTextService _localizedTextService;
    private IMacroService _macroService;
    private IMediaTypeService _mediaTypeService;
    private IPublishedContentQuery _publishedContentQuery;
    private IPublishedUrlProvider _publishedUrlProvider;
    private SearchableTreeCollection _searchableTreeCollection;
    private IShortStringHelper _shortStringHelper;
    private ISqlContext _sqlContext;
    private UmbracoTreeSearcher _treeSearcher;
    private ITreeService _treeService;
    private IUmbracoMapper _umbracoMapper;
    private IUserService _userService;
    [ActivatorUtilitiesConstructorAttribute]
public EntityController(ITreeService treeService, UmbracoTreeSearcher treeSearcher, SearchableTreeCollection searchableTreeCollection, IPublishedContentQuery publishedContentQuery, IShortStringHelper shortStringHelper, IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IPublishedUrlProvider publishedUrlProvider, IContentService contentService, IUmbracoMapper umbracoMapper, IDataTypeService dataTypeService, ISqlContext sqlContext, ILocalizedTextService localizedTextService, IFileService fileService, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMacroService macroService, IUserService userService, ILocalizationService localizationService, AppCaches appCaches, IDynamicRootService dynamicRootService, IVariationContextAccessor variationContextAccessor);
    [ObsoleteAttribute("Use non-obsolete ctor. This will be removed in Umbraco 14.")]
public EntityController(ITreeService treeService, UmbracoTreeSearcher treeSearcher, SearchableTreeCollection searchableTreeCollection, IPublishedContentQuery publishedContentQuery, IShortStringHelper shortStringHelper, IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IPublishedUrlProvider publishedUrlProvider, IContentService contentService, IUmbracoMapper umbracoMapper, IDataTypeService dataTypeService, ISqlContext sqlContext, ILocalizedTextService localizedTextService, IFileService fileService, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMacroService macroService, IUserService userService, ILocalizationService localizationService, AppCaches appCaches);
    private static EntityController();
    public object GetSafeAlias(string value, bool camelCase);
    [HttpGetAttribute]
public IEnumerable`1<EntityBasic> Search(string query, UmbracoEntityTypes type, string searchFrom, Nullable`1<Guid> dataTypeKey);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.EntityController/<SearchAll>d__27")]
[HttpGetAttribute]
public Task`1<IDictionary`2<string, TreeSearchResult>> SearchAll(string query);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.EntityController/<ExecuteSearchAsync>d__28")]
private static Task`1<KeyValuePair`2<string, TreeSearchResult>> ExecuteSearchAsync(string query, string culture, KeyValuePair`2<string, SearchableApplicationTree> searchableTree, string rootNodeDisplayName);
    public IConvertToActionResult GetPath(int id, UmbracoEntityTypes type);
    public IConvertToActionResult GetPath(Guid id, UmbracoEntityTypes type);
    public IActionResult GetPath(Udi id, UmbracoEntityTypes type);
    public IActionResult GetUrl(Udi id, string culture);
    [HttpGetAttribute]
[HttpPostAttribute]
public IDictionary`2<int, string> GetUrlsByIds(Int32[] ids, UmbracoEntityTypes type, string culture);
    [HttpGetAttribute]
[HttpPostAttribute]
public IDictionary`2<Guid, string> GetUrlsByIds(Guid[] ids, UmbracoEntityTypes type, string culture);
    [HttpGetAttribute]
[HttpPostAttribute]
public IDictionary`2<Udi, string> GetUrlsByIds(Udi[] ids, UmbracoEntityTypes type, string culture);
    public IActionResult GetUrl(int id, UmbracoEntityTypes type, string culture);
    [ObsoleteAttribute("This will be removed in Umbraco 13. Use GetByXPath instead")]
public ActionResult`1<EntityBasic> GetByQuery(string query, int nodeContextId, UmbracoEntityTypes type);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.EntityController/<GetDynamicRootAsync>d__39")]
[HttpPostAttribute]
public Task`1<ActionResult`1<EntityBasic>> GetDynamicRootAsync(DynamicRootViewModel model);
    [ObsoleteAttribute("The current implementation of this method is suboptimal and will be removed entirely in a future version. Scheduled for removal in v14")]
public ActionResult`1<EntityBasic> GetByXPath(string query, int nodeContextId, Nullable`1<int> parentId, UmbracoEntityTypes type);
    private string ParseXPathQuery(string query, int id, Nullable`1<int> parentId);
    [HttpGetAttribute]
public ActionResult`1<UrlAndAnchors> GetUrlAndAnchors(Udi id, string culture);
    [HttpGetAttribute]
public UrlAndAnchors GetUrlAndAnchors(int id, string culture);
    [HttpGetAttribute]
[HttpPostAttribute]
public IEnumerable`1<string> GetAnchors(AnchorsModel model);
    public IEnumerable`1<EntityBasic> GetChildren(int id, UmbracoEntityTypes type, Nullable`1<Guid> dataTypeKey);
    public ActionResult`1<PagedResult`1<EntityBasic>> GetPagedChildren(string id, UmbracoEntityTypes type, int pageNumber, int pageSize, string orderBy, Direction orderDirection, string filter, Nullable`1<Guid> dataTypeKey);
    public ActionResult`1<PagedResult`1<EntityBasic>> GetPagedChildren(int id, UmbracoEntityTypes type, int pageNumber, int pageSize, string orderBy, Direction orderDirection, string filter, Nullable`1<Guid> dataTypeKey);
    private Int32[] GetStartNodeIds(UmbracoEntityTypes type);
    private String[] GetStartNodePaths(UmbracoEntityTypes type);
    public ActionResult`1<PagedResult`1<EntityBasic>> GetPagedDescendants(int id, UmbracoEntityTypes type, int pageNumber, int pageSize, string orderBy, Direction orderDirection, string filter, Nullable`1<Guid> dataTypeKey);
    private bool IsDataTypeIgnoringUserStartNodes(Nullable`1<Guid> dataTypeKey);
    public IEnumerable`1<EntityBasic> GetAncestors(int id, UmbracoEntityTypes type, FormCollection queryStrings);
    public ActionResult`1<IEnumerable`1<EntityBasic>> GetAncestors(Guid id, UmbracoEntityTypes type, FormCollection queryStrings);
    private IEnumerable`1<SearchResultEntity> ExamineSearch(string query, UmbracoEntityTypes entityType, string searchFrom, bool ignoreUserStartNodes);
    private IEnumerable`1<EntityBasic> GetResultForChildren(int id, UmbracoEntityTypes entityType);
    private IEnumerable`1<EntityBasic> GetResultForAncestors(int id, UmbracoEntityTypes entityType, FormCollection queryStrings);
    private IEnumerable`1<EntityBasic> GetResultForKeys(Guid[] keys, UmbracoEntityTypes entityType);
    private IEnumerable`1<EntityBasic> GetResultForIds(Int32[] ids, UmbracoEntityTypes entityType);
    private ActionResult`1<EntityBasic> GetResultForKey(Guid key, UmbracoEntityTypes entityType);
    private ActionResult`1<EntityBasic> GetResultForId(int id, UmbracoEntityTypes entityType);
    private static Nullable`1<UmbracoObjectTypes> ConvertToObjectType(UmbracoEntityTypes entityType);
    public IEnumerable`1<EntityBasic> GetAll(UmbracoEntityTypes type, string postFilter);
    [NullableContextAttribute("2")]
private IEnumerable`1<EntityBasic> GetResultForAll(UmbracoEntityTypes entityType, string postFilter);
    [NullableContextAttribute("2")]
private IEnumerable`1<T> ExecutePostFilter(IEnumerable`1<T> entities, string postFilter);
    [NullableContextAttribute("2")]
private static QueryCondition BuildQueryCondition(string postFilter);
    [NullableContextAttribute("2")]
private Func`2<object, EntityBasic> MapEntities(string culture);
    [NullableContextAttribute("2")]
private EntityBasic MapEntity(object entity, string culture);
    [NullableContextAttribute("2")]
private string ClientCulture();
    public ActionResult`1<EntityBasic> GetById(int id, UmbracoEntityTypes type);
    public ActionResult`1<EntityBasic> GetById(Guid id, UmbracoEntityTypes type);
    public ActionResult`1<EntityBasic> GetById(Udi id, UmbracoEntityTypes type);
    [HttpGetAttribute]
[HttpPostAttribute]
public ActionResult`1<IEnumerable`1<EntityBasic>> GetByIds(Int32[] ids, UmbracoEntityTypes type);
    [HttpGetAttribute]
[HttpPostAttribute]
public ActionResult`1<IEnumerable`1<EntityBasic>> GetByIds(Guid[] ids, UmbracoEntityTypes type);
    [HttpGetAttribute]
[HttpPostAttribute]
public ActionResult`1<IEnumerable`1<EntityBasic>> GetByIds(Udi[] ids, UmbracoEntityTypes type);
    private IEnumerable`1<EntityBasic> GetAllDictionaryItems();
    private static Func`2<IDictionaryItem, string> DictionaryItemSort();
    private void GetChildItemsForList(IDictionaryItem dictionaryItem, ICollection`1<EntityBasic> list);
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ParseXPathQuery>b__41_0(int nodeid);
    [CompilerGeneratedAttribute]
private bool <ParseXPathQuery>b__41_1(int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.ExamineManagementController : UmbracoAuthorizedJsonController {
    private IExamineManager _examineManager;
    private IIndexDiagnosticsFactory _indexDiagnosticsFactory;
    private IIndexRebuilder _indexRebuilder;
    private ILogger`1<ExamineManagementController> _logger;
    private IAppPolicyCache _runtimeCache;
    public ExamineManagementController(IExamineManager examineManager, ILogger`1<ExamineManagementController> logger, IIndexDiagnosticsFactory indexDiagnosticsFactory, AppCaches appCaches, IIndexRebuilder indexRebuilder);
    public IEnumerable`1<ExamineIndexModel> GetIndexerDetails();
    public IEnumerable`1<ExamineSearcherModel> GetSearcherDetails();
    public ActionResult`1<SearchResults> GetSearchResults(string searcherName, string query, int pageIndex, int pageSize);
    public ActionResult`1<ExamineIndexModel> PostCheckRebuildIndex(string indexName);
    public IActionResult PostRebuildIndex(string indexName);
    private ExamineIndexModel CreateModel(IIndex index);
    private ActionResult ValidateSearcher(string searcherName, ISearcher& searcher);
    private ActionResult ValidatePopulator(IIndex index);
    private ActionResult ValidateIndex(string indexName, IIndex& index);
    private void Indexer_IndexOperationComplete(object sender, EventArgs e);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ExamineIndexModel <GetIndexerDetails>b__6_0(IIndex index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.HelpController : UmbracoAuthorizedJsonController {
    [NullableAttribute("2")]
private static HttpClient _httpClient;
    private ILogger`1<HelpController> _logger;
    [NullableAttribute("2")]
private HelpPageSettings _helpPageSettings;
    [ActivatorUtilitiesConstructorAttribute]
public HelpController(ILogger`1<HelpController> logger, IOptionsMonitor`1<HelpPageSettings> helpPageSettings);
    private void ResetHelpPageSettings(HelpPageSettings settings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.HelpController/<GetContextHelpForPage>d__5")]
public Task`1<List`1<HelpPage>> GetContextHelpForPage(string section, string tree, string baseUrl);
    private bool IsAllowedUrl(string url);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DataContractAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.HelpPage : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[IsBackOfficeAttribute]
[UmbracoRequireHttpsAttribute]
[MiddlewareFilterAttribute("Umbraco.Cms.Web.BackOffice.Filters.UnhandledExceptionLoggerFilter")]
public class Umbraco.Cms.Web.BackOffice.Controllers.IconController : UmbracoApiController {
    private IIconService _iconService;
    public IconController(IIconService iconService);
    public IconModel GetIcon(string iconName);
    public IReadOnlyDictionary`2<string, string> GetIcons();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.ImagesController : UmbracoAuthorizedApiController {
    private MediaFileManager _mediaFileManager;
    private IImageUrlGenerator _imageUrlGenerator;
    private ContentSettings _contentSettings;
    [ObsoleteAttribute("Use non obsolete-constructor. Scheduled for removal in Umbraco 13.")]
public ImagesController(MediaFileManager mediaFileManager, IImageUrlGenerator imageUrlGenerator);
    [ActivatorUtilitiesConstructorAttribute]
public ImagesController(MediaFileManager mediaFileManager, IImageUrlGenerator imageUrlGenerator, IOptionsMonitor`1<ContentSettings> contentSettingsMonitor);
    public IActionResult GetBigThumbnail(string originalImagePath);
    public IActionResult GetResized(string imagePath, int width);
    private bool IsAllowed(string encodedImagePath);
    [NullableContextAttribute("2")]
public string GetProcessedImageUrl(string imagePath, Nullable`1<int> width, Nullable`1<int> height, Nullable`1<decimal> focalPointLeft, Nullable`1<decimal> focalPointTop, ImageCropMode mode, string cacheBusterValue, Nullable`1<decimal> cropX1, Nullable`1<decimal> cropX2, Nullable`1<decimal> cropY1, Nullable`1<decimal> cropY2);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__4_0(ContentSettings x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.ImageUrlGeneratorController : UmbracoAuthorizedJsonController {
    private IImageUrlGenerator _imageUrlGenerator;
    public ImageUrlGeneratorController(IImageUrlGenerator imageUrlGenerator);
    public string GetCropUrl(string mediaPath, Nullable`1<int> width, Nullable`1<int> height, Nullable`1<ImageCropMode> imageCropMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.LanguageController : UmbracoAuthorizedJsonController {
    private ILocalizationService _localizationService;
    private IUmbracoMapper _umbracoMapper;
    [ActivatorUtilitiesConstructorAttribute]
public LanguageController(ILocalizationService localizationService, IUmbracoMapper umbracoMapper);
    [HttpGetAttribute]
[AuthorizeAttribute]
public IDictionary`2<string, string> GetAllCultures();
    [HttpGetAttribute]
public IEnumerable`1<Language> GetAllLanguages();
    [HttpGetAttribute]
[AuthorizeAttribute]
public ActionResult`1<Language> GetLanguage(int id);
    [AuthorizeAttribute]
[HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteLanguage(int id);
    [AuthorizeAttribute]
[HttpPostAttribute]
public ActionResult`1<Language> SaveLanguage(Language language);
    private bool CreatesCycle(ILanguage language, IDictionary`2<int, ILanguage> languages);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.LogController : UmbracoAuthorizedJsonController {
    private AppCaches _appCaches;
    private IAuditService _auditService;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IImageUrlGenerator _imageUrlGenerator;
    private MediaFileManager _mediaFileManager;
    private ISqlContext _sqlContext;
    private IUmbracoMapper _umbracoMapper;
    private IUserService _userService;
    public LogController(MediaFileManager mediaFileSystem, IImageUrlGenerator imageUrlGenerator, IAuditService auditService, IUmbracoMapper umbracoMapper, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IUserService userService, AppCaches appCaches, ISqlContext sqlContext);
    [AuthorizeAttribute]
public PagedResult`1<AuditLog> GetPagedEntityLog(int id, int pageNumber, int pageSize, Direction orderDirection, Nullable`1<DateTime> sinceDate);
    public PagedResult`1<AuditLog> GetPagedCurrentUserLog(int pageNumber, int pageSize, Direction orderDirection, Nullable`1<DateTime> sinceDate);
    public IEnumerable`1<AuditLog> GetLog(AuditType logType, Nullable`1<DateTime> sinceDate);
    private IEnumerable`1<AuditLog> MapAvatarsAndNames(IEnumerable`1<AuditLog> items);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private String[] <MapAvatarsAndNames>b__12_2(IUser x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.LogViewerController : BackOfficeNotificationsController {
    private ILogLevelLoader _logLevelLoader;
    private ILogViewer _logViewer;
    [ActivatorUtilitiesConstructorAttribute]
public LogViewerController(ILogViewer logViewer, ILogLevelLoader logLevelLoader);
    private bool CanViewLogs(LogTimePeriod logTimePeriod);
    [HttpGetAttribute]
public bool GetCanViewLogs(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [HttpGetAttribute]
public ActionResult`1<int> GetNumberOfErrors(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [HttpGetAttribute]
public ActionResult`1<LogLevelCounts> GetLogLevelCounts(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [HttpGetAttribute]
public ActionResult`1<IEnumerable`1<LogTemplate>> GetMessageTemplates(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [HttpGetAttribute]
public ActionResult`1<PagedResult`1<LogMessage>> GetLogs(string orderDirection, int pageNumber, string filterExpression, String[] logLevels, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    private static LogTimePeriod GetTimePeriod(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [HttpGetAttribute]
public IEnumerable`1<SavedLogSearch> GetSavedSearches();
    [HttpPostAttribute]
public IEnumerable`1<SavedLogSearch> PostSavedSearch(SavedLogSearch item);
    [HttpPostAttribute]
public IEnumerable`1<SavedLogSearch> DeleteSavedSearch(SavedLogSearch item);
    [HttpGetAttribute]
public ReadOnlyDictionary`2<string, Nullable`1<LogEventLevel>> GetLogLevels();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.MacroRenderingController : UmbracoAuthorizedJsonController {
    private IUmbracoComponentRenderer _componentRenderer;
    private IMacroService _macroService;
    private IShortStringHelper _shortStringHelper;
    private ISiteDomainMapper _siteDomainHelper;
    private IUmbracoContextAccessor _umbracoContextAccessor;
    private IUmbracoMapper _umbracoMapper;
    private IVariationContextAccessor _variationContextAccessor;
    public MacroRenderingController(IUmbracoMapper umbracoMapper, IUmbracoComponentRenderer componentRenderer, IVariationContextAccessor variationContextAccessor, IMacroService macroService, IUmbracoContextAccessor umbracoContextAccessor, IShortStringHelper shortStringHelper, ISiteDomainMapper siteDomainHelper);
    public ActionResult`1<IEnumerable`1<MacroParameter>> GetMacroParameters(int macroId);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MacroRenderingController/<GetMacroResultAsHtmlForEditor>d__9")]
[HttpGetAttribute]
public Task`1<IActionResult> GetMacroResultAsHtmlForEditor(string macroAlias, int pageId, IDictionary`2<string, object> macroParams);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MacroRenderingController/<GetMacroResultAsHtmlForEditor>d__10")]
[HttpPostAttribute]
public Task`1<IActionResult> GetMacroResultAsHtmlForEditor(MacroParameterModel model);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MacroRenderingController/<GetMacroResultAsHtml>d__11")]
private Task`1<IActionResult> GetMacroResultAsHtml(string macroAlias, int pageId, IDictionary`2<string, object> macroParams);
    [HttpPostAttribute]
public IActionResult CreatePartialViewMacroWithFile(CreatePartialViewMacroWithFileModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.MacrosController : BackOfficeNotificationsController {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IHostingEnvironment _hostingEnvironment;
    private ILogger`1<MacrosController> _logger;
    private IMacroService _macroService;
    private ParameterEditorCollection _parameterEditorCollection;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    public MacrosController(ParameterEditorCollection parameterEditorCollection, IMacroService macroService, IShortStringHelper shortStringHelper, IBackOfficeSecurityAccessor backofficeSecurityAccessor, ILogger`1<MacrosController> logger, IHostingEnvironment hostingEnvironment, IUmbracoMapper umbracoMapper);
    [HttpPostAttribute]
public ActionResult`1<int> Create(string name);
    [HttpGetAttribute]
public ActionResult`1<MacroDisplay> GetById(int id);
    [HttpGetAttribute]
public ActionResult`1<MacroDisplay> GetById(Guid id);
    [HttpGetAttribute]
public ActionResult`1<MacroDisplay> GetById(Udi id);
    [HttpPostAttribute]
public IActionResult DeleteById(int id);
    [HttpPostAttribute]
public ActionResult`1<MacroDisplay> Save(MacroDisplay macroDisplay);
    public IEnumerable`1<string> GetPartialViews();
    public ParameterEditorCollection GetParameterEditors();
    public IDictionary`2<string, IEnumerable`1<IDataEditor>> GetGroupedParameterEditors();
    public IDataEditor GetParameterEditorByAlias(string alias);
    private IEnumerable`1<string> FindPartialViewsFiles();
    private IEnumerable`1<string> FindPartialViewFilesInViewsFolder();
    private IEnumerable`1<string> FindPartialViewFilesInPluginFolders();
    private IEnumerable`1<string> FindPartialViewFilesInFolder(string orgPath, string path, string prefixVirtualPath);
    private MacroDisplay MapToDisplay(IMacro macro);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetChildren", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.MediaController : ContentControllerBase {
    private static Semaphore _postAddFileSemaphore;
    private AppCaches _appCaches;
    [NullableAttribute("2")]
private IFileStreamSecurityValidator _fileStreamSecurityValidator;
    private IAuthorizationService _authorizationService;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private ContentSettings _contentSettings;
    private IContentTypeBaseServiceProvider _contentTypeBaseServiceProvider;
    private IDataTypeService _dataTypeService;
    private IEntityService _entityService;
    private IImageUrlGenerator _imageUrlGenerator;
    private ILocalizedTextService _localizedTextService;
    private ILogger`1<MediaController> _logger;
    private IMediaService _mediaService;
    private IMediaTypeService _mediaTypeService;
    private IRelationService _relationService;
    private IShortStringHelper _shortStringHelper;
    private ISqlContext _sqlContext;
    private IUmbracoMapper _umbracoMapper;
    [NullableAttribute("2")]
private Int32[] _userStartNodes;
    private PropertyEditorCollection _propertyEditors;
    private MediaFileManager _mediaFileManager;
    private MediaUrlGeneratorCollection _mediaUrlGenerators;
    private IHostingEnvironment _hostingEnvironment;
    protected Int32[] UserStartNodes { get; }
    [ActivatorUtilitiesConstructorAttribute]
public MediaController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, IOptionsSnapshot`1<ContentSettings> contentSettings, IMediaTypeService mediaTypeService, IMediaService mediaService, IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IUmbracoMapper umbracoMapper, IDataTypeService dataTypeService, ISqlContext sqlContext, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, IRelationService relationService, PropertyEditorCollection propertyEditors, MediaFileManager mediaFileManager, MediaUrlGeneratorCollection mediaUrlGenerators, IHostingEnvironment hostingEnvironment, IImageUrlGenerator imageUrlGenerator, IJsonSerializer serializer, IAuthorizationService authorizationService, AppCaches appCaches, IFileStreamSecurityValidator streamSecurityValidator);
    [ObsoleteAttribute("Use constructor overload that has fileStreamSecurityValidator, scheduled for removal in v14")]
public MediaController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, IOptionsSnapshot`1<ContentSettings> contentSettings, IMediaTypeService mediaTypeService, IMediaService mediaService, IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IUmbracoMapper umbracoMapper, IDataTypeService dataTypeService, ISqlContext sqlContext, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, IRelationService relationService, PropertyEditorCollection propertyEditors, MediaFileManager mediaFileManager, MediaUrlGeneratorCollection mediaUrlGenerators, IHostingEnvironment hostingEnvironment, IImageUrlGenerator imageUrlGenerator, IJsonSerializer serializer, IAuthorizationService authorizationService, AppCaches appCaches);
    private static MediaController();
    [OutgoingEditorModelEventAttribute]
public ActionResult`1<MediaItemDisplay> GetEmpty(string contentTypeAlias, int parentId);
    public MediaItemDisplay GetRecycleBin();
    [NullableContextAttribute("2")]
[OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public MediaItemDisplay GetById(int id);
    [NullableContextAttribute("2")]
[OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public MediaItemDisplay GetById(Guid id);
    [OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public ActionResult`1<MediaItemDisplay> GetById(Udi id);
    [FilterAllowedOutgoingMediaAttribute("System.Collections.Generic.IEnumerable`1<Umbraco.Cms.Core.Models.ContentEditing.MediaItemDisplay>", "")]
public IEnumerable`1<MediaItemDisplay> GetByIds(Int32[] ids);
    public PagedResult`1<ContentItemBasic`1<ContentPropertyBasic>> GetChildFolders(int id, int pageNumber, int pageSize);
    [FilterAllowedOutgoingMediaAttribute("System.Collections.Generic.IEnumerable`1<Umbraco.Cms.Core.Models.ContentEditing.ContentItemBasic`1<Umbraco.Cms.Core.Models.ContentEditing.ContentPropertyBasic>>", "")]
public IEnumerable`1<ContentItemBasic`1<ContentPropertyBasic>> GetRootMedia();
    [AuthorizeAttribute]
[HttpPostAttribute]
public IActionResult DeleteById(int id);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MediaController/<PostMove>d__29")]
public Task`1<IActionResult> PostMove(MoveOrCopy move);
    [FileUploadCleanupFilterAttribute("True")]
[MediaItemSaveValidationAttribute]
[OutgoingEditorModelEventAttribute]
public ActionResult`1<MediaItemDisplay> PostSave(MediaItemSave contentItem);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult EmptyRecycleBin();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MediaController/<PostSort>d__32")]
public Task`1<IActionResult> PostSort(ContentSortOrder sorted);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MediaController/<PostAddFolder>d__33")]
public Task`1<ActionResult`1<MediaItemDisplay>> PostAddFolder(PostedFolder folder);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MediaController/<PostAddFile>d__34")]
public Task`1<IActionResult> PostAddFile(string path, string currentFolder, string contentTypeAlias, List`1<IFormFile> file);
    private bool IsFolderCreationAllowedHere(int parentId);
    private IMedia FindInChildren(int mediaId, string nameToFind, string contentTypeAlias);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MediaController/<GetParentIdAsIntAsync>d__37")]
private Task`1<ActionResult`1<Nullable`1<int>>> GetParentIdAsIntAsync(string parentId, bool validatePermissions);
    private ActionResult`1<IMedia> ValidateMoveOrCopy(MoveOrCopy model);
    protected Int32[] get_UserStartNodes();
    [FilterAllowedOutgoingMediaAttribute("System.Collections.Generic.IEnumerable`1<Umbraco.Cms.Core.Models.ContentEditing.ContentItemBasic`1<Umbraco.Cms.Core.Models.ContentEditing.ContentPropertyBasic>>", "Items")]
public PagedResult`1<ContentItemBasic`1<ContentPropertyBasic>> GetChildren(int id, int pageNumber, int pageSize, string orderBy, Direction orderDirection, bool orderBySystemField, string filter);
    [FilterAllowedOutgoingMediaAttribute("System.Collections.Generic.IEnumerable`1<Umbraco.Cms.Core.Models.ContentEditing.ContentItemBasic`1<Umbraco.Cms.Core.Models.ContentEditing.ContentPropertyBasic>>", "Items")]
public ActionResult`1<PagedResult`1<ContentItemBasic`1<ContentPropertyBasic>>> GetChildren(Guid id, int pageNumber, int pageSize, string orderBy, Direction orderDirection, bool orderBySystemField, string filter);
    [FilterAllowedOutgoingMediaAttribute("System.Collections.Generic.IEnumerable`1<Umbraco.Cms.Core.Models.ContentEditing.ContentItemBasic`1<Umbraco.Cms.Core.Models.ContentEditing.ContentPropertyBasic>>", "Items")]
public ActionResult`1<PagedResult`1<ContentItemBasic`1<ContentPropertyBasic>>> GetChildren(Udi id, int pageNumber, int pageSize, string orderBy, Direction orderDirection, bool orderBySystemField, string filter);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private MediaItemDisplay <GetByIds>b__25_0(IMedia media);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.MediaPickerThreeController : ContentControllerBase {
    private IHostingEnvironment _hostingEnvironment;
    private ContentSettings _contentSettings;
    private IImageUrlGenerator _imageUrlGenerator;
    private IIOHelper _ioHelper;
    public MediaPickerThreeController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, IJsonSerializer serializer, IHostingEnvironment hostingEnvironment, IOptionsSnapshot`1<ContentSettings> contentSettings, IImageUrlGenerator imageUrlGenerator, IIOHelper ioHelper);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MediaPickerThreeController/<UploadMedia>d__5")]
[HttpPostAttribute]
public Task`1<IActionResult> UploadMedia(List`1<IFormFile> file);
    private string GetRelativePath(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PluginControllerAttribute("UmbracoApi")]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
[ParameterSwapControllerActionSelectorAttribute("GetAllowedChildren", "contentId", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.MediaTypeController : ContentTypeControllerBase`1<IMediaType> {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IContentTypeService _contentTypeService;
    private IEntityService _entityService;
    private ILocalizedTextService _localizedTextService;
    private IMediaService _mediaService;
    private IMediaTypeService _mediaTypeService;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    public MediaTypeController(ICultureDictionary cultureDictionary, EditorValidatorCollection editorValidatorCollection, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService, IShortStringHelper shortStringHelper, IEntityService entityService, IMediaService mediaService, IBackOfficeSecurityAccessor backofficeSecurityAccessor);
    public int GetCount();
    [AuthorizeAttribute]
public ActionResult`1<MediaTypeDisplay> GetById(int id);
    [AuthorizeAttribute]
public ActionResult`1<MediaTypeDisplay> GetById(Guid id);
    [AuthorizeAttribute]
public ActionResult`1<MediaTypeDisplay> GetById(Udi id);
    public IEnumerable`1<MediaTypeDisplay> GetAllFiltered(String[] aliases);
    [HttpDeleteAttribute]
[HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult DeleteById(int id);
    [HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult GetAvailableCompositeMediaTypes(GetAvailableCompositionsFilter filter);
    [HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult GetWhereCompositionIsUsedInContentTypes(GetAvailableCompositionsFilter filter);
    [NullableContextAttribute("2")]
[AuthorizeAttribute]
public MediaTypeDisplay GetEmpty(int parentId);
    [AuthorizeAttribute]
public IEnumerable`1<ContentTypeBasic> GetAll();
    [HttpDeleteAttribute]
[HttpPostAttribute]
[AuthorizeAttribute]
public IActionResult DeleteContainer(int id);
    [AuthorizeAttribute]
public IActionResult PostCreateContainer(int parentId, string name);
    [AuthorizeAttribute]
public IActionResult PostRenameContainer(int id, string name);
    [AuthorizeAttribute]
public ActionResult`1<MediaTypeDisplay> PostSave(MediaTypeSave contentTypeSave);
    [AuthorizeAttribute]
public IActionResult PostMove(MoveOrCopy move);
    [AuthorizeAttribute]
public IActionResult PostCopy(MoveOrCopy copy);
    [AuthorizeAttribute]
[OutgoingEditorModelEventAttribute]
public IEnumerable`1<ContentTypeBasic> GetAllowedChildren(int contentId);
    [AuthorizeAttribute]
public ActionResult`1<IEnumerable`1<ContentTypeBasic>> GetAllowedChildren(Guid contentId);
    [AuthorizeAttribute]
public ActionResult`1<IEnumerable`1<ContentTypeBasic>> GetAllowedChildren(Udi contentId);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IMediaType <PostSave>b__22_0(int i);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void <PostSave>b__22_1(IMediaType type);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IMediaType <PostMove>b__23_0(int i);
    [CompilerGeneratedAttribute]
private Attempt`1<OperationResult`1<MoveOperationStatusType>> <PostMove>b__23_1(IMediaType type, int i);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IMediaType <PostCopy>b__24_0(int i);
    [CompilerGeneratedAttribute]
private Attempt`1<OperationResult`2<MoveOperationStatusType, IMediaType>> <PostCopy>b__24_1(IMediaType type, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[OutgoingNoHyphenGuidFormatAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.MemberController : ContentControllerBase {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IDataTypeService _dataTypeService;
    private IJsonSerializer _jsonSerializer;
    private ILocalizedTextService _localizedTextService;
    private IMemberManager _memberManager;
    private IMemberService _memberService;
    private IMemberTypeService _memberTypeService;
    private IPasswordChanger`1<MemberIdentityUser> _passwordChanger;
    private PropertyEditorCollection _propertyEditors;
    private ICoreScopeProvider _scopeProvider;
    private ITwoFactorLoginService _twoFactorLoginService;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    [ActivatorUtilitiesConstructorAttribute]
public MemberController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, PropertyEditorCollection propertyEditors, IUmbracoMapper umbracoMapper, IMemberService memberService, IMemberTypeService memberTypeService, IMemberManager memberManager, IDataTypeService dataTypeService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IJsonSerializer jsonSerializer, IPasswordChanger`1<MemberIdentityUser> passwordChanger, ICoreScopeProvider scopeProvider, ITwoFactorLoginService twoFactorLoginService);
    [ObsoleteAttribute("Use constructor that also takes an ITwoFactorLoginService. Scheduled for removal in V13")]
public MemberController(ICultureDictionary cultureDictionary, ILoggerFactory loggerFactory, IShortStringHelper shortStringHelper, IEventMessagesFactory eventMessages, ILocalizedTextService localizedTextService, PropertyEditorCollection propertyEditors, IUmbracoMapper umbracoMapper, IMemberService memberService, IMemberTypeService memberTypeService, IMemberManager memberManager, IDataTypeService dataTypeService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, IJsonSerializer jsonSerializer, IPasswordChanger`1<MemberIdentityUser> passwordChanger, ICoreScopeProvider scopeProvider);
    public PagedResult`1<MemberBasic> GetPagedResults(int pageNumber, int pageSize, string orderBy, Direction orderDirection, bool orderBySystemField, string filter, string memberTypeAlias);
    public MemberListDisplay GetListNodeDisplay(string listName);
    [NullableContextAttribute("2")]
[OutgoingEditorModelEventAttribute]
public MemberDisplay GetByKey(Guid key);
    [NullableContextAttribute("2")]
[OutgoingEditorModelEventAttribute]
public ActionResult`1<MemberDisplay> GetEmpty(string contentTypeAlias);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MemberController/<PostSave>d__19")]
[FileUploadCleanupFilterAttribute("True")]
[OutgoingEditorModelEventAttribute]
[MemberSaveValidationAttribute]
public Task`1<ActionResult`1<MemberDisplay>> PostSave(MemberSave contentItem);
    private void MapPropertyValues(MemberSave contentItem);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MemberController/<CreateMemberAsync>d__21")]
private Task`1<ActionResult`1<bool>> CreateMemberAsync(MemberSave contentItem);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MemberController/<UpdateMemberAsync>d__22")]
private Task`1<ActionResult`1<bool>> UpdateMemberAsync(MemberSave contentItem);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MemberController/<ValidateMemberDataAsync>d__23")]
private Task`1<bool> ValidateMemberDataAsync(MemberSave contentItem);
    private string MapErrors(IEnumerable`1<IdentityError> result);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.MemberController/<AddOrUpdateRoles>d__25")]
private Task`1<ActionResult`1<bool>> AddOrUpdateRoles(IEnumerable`1<string> groups, MemberIdentityUser identityMember);
    [HttpPostAttribute]
public IActionResult DeleteByKey(Guid key);
    [HttpGetAttribute]
public IActionResult ExportMemberData(Guid key);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private MemberBasic <GetPagedResults>b__15_0(IMember x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.MemberGroupController : UmbracoAuthorizedJsonController {
    private ILocalizedTextService _localizedTextService;
    private IMemberGroupService _memberGroupService;
    private IUmbracoMapper _umbracoMapper;
    public MemberGroupController(IMemberGroupService memberGroupService, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService);
    public ActionResult`1<MemberGroupDisplay> GetById(int id);
    public ActionResult`1<MemberGroupDisplay> GetById(Guid id);
    public ActionResult`1<MemberGroupDisplay> GetById(Udi id);
    public IEnumerable`1<MemberGroupDisplay> GetByIds(Int32[] ids);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteById(int id);
    public IEnumerable`1<MemberGroupDisplay> GetAllGroups();
    [NullableContextAttribute("2")]
public MemberGroupDisplay GetEmpty();
    [NullableContextAttribute("2")]
public bool IsMemberGroupNameUnique(int id, string oldName, string newName);
    public ActionResult`1<MemberGroupDisplay> PostSave(MemberGroupSave saveModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.MemberTypeController : ContentTypeControllerBase`1<IMemberType> {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private ILocalizedTextService _localizedTextService;
    private IMemberTypeService _memberTypeService;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    public MemberTypeController(ICultureDictionary cultureDictionary, EditorValidatorCollection editorValidatorCollection, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IShortStringHelper shortStringHelper);
    public int GetCount();
    public ActionResult`1<MemberTypeDisplay> GetById(int id);
    public ActionResult`1<MemberTypeDisplay> GetById(Guid id);
    public ActionResult`1<MemberTypeDisplay> GetById(Udi id);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteById(int id);
    public IActionResult GetAvailableCompositeMemberTypes(int contentTypeId, String[] filterContentTypes, String[] filterPropertyTypes);
    public IActionResult GetWhereCompositionIsUsedInMemberTypes(int contentTypeId);
    [NullableContextAttribute("2")]
public MemberTypeDisplay GetEmpty();
    public ActionResult`1<MemberTypeDisplay> PostSave(MemberTypeSave contentTypeSave);
    [AuthorizeAttribute]
public IActionResult PostCopy(MoveOrCopy copy);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private IMemberType <PostCopy>b__15_0(int i);
    [CompilerGeneratedAttribute]
private Attempt`1<OperationResult`2<MoveOperationStatusType, IMemberType>> <PostCopy>b__15_1(IMemberType type, int i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.MemberTypeQueryController : BackOfficeNotificationsController {
    private IMemberTypeService _memberTypeService;
    private IUmbracoMapper _umbracoMapper;
    public MemberTypeQueryController(IMemberTypeService memberTypeService, IUmbracoMapper umbracoMapper);
    public IEnumerable`1<ContentTypeBasic> GetAllTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.PackageController : UmbracoAuthorizedJsonController {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private ILogger`1<PackageController> _logger;
    private PackageMigrationRunner _packageMigrationRunner;
    private IPackagingService _packagingService;
    public PackageController(IPackagingService packagingService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, PackageMigrationRunner packageMigrationRunner, ILogger`1<PackageController> logger);
    public IEnumerable`1<PackageDefinition> GetCreatedPackages();
    public ActionResult`1<PackageDefinition> GetCreatedPackageById(int id);
    public PackageDefinition GetEmpty();
    public ActionResult`1<PackageDefinition> PostSavePackage(PackageDefinition model);
    [HttpPostAttribute]
[HttpDeleteAttribute]
public IActionResult DeleteCreatedPackage(int packageId);
    [HttpPostAttribute]
public ActionResult`1<IEnumerable`1<InstalledPackage>> RunMigrations(string packageName);
    [HttpGetAttribute]
public IActionResult DownloadCreatedPackage(int id);
    public ActionResult`1<InstalledPackage> GetInstalledPackageByName(string packageName);
    public IEnumerable`1<InstalledPackage> GetInstalled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
internal class Umbraco.Cms.Web.BackOffice.Controllers.ParameterSwapControllerActionSelectorAttribute : Attribute {
    private string _actionName;
    private string _parameterName;
    private Type[] _supportedTypes;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    public int Order { get; public set; }
    public ParameterSwapControllerActionSelectorAttribute(string actionName, string parameterName, Type[] supportedTypes);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    public sealed virtual bool Accept(ActionConstraintContext context);
    private Nullable`1<ActionSelectorCandidate> SelectAction(ActionConstraintContext context);
    private bool TryBindFromUri(ActionConstraintContext context, Nullable`1& foundCandidate);
    private Nullable`1<ActionSelectorCandidate> MatchByType(Type idType, ActionConstraintContext context);
    private bool IsValidCandidate(ActionSelectorCandidate candidate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DisableBrowserCacheAttribute]
[AreaAttribute("UmbracoBackOffice")]
public class Umbraco.Cms.Web.BackOffice.Controllers.PreviewController : Controller {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private ICookieManager _cookieManager;
    private UmbracoFeatures _features;
    private GlobalSettings _globalSettings;
    private IHostingEnvironment _hostingEnvironment;
    private ILocalizationService _localizationService;
    private IPublishedSnapshotService _publishedSnapshotService;
    private IRuntimeMinifier _runtimeMinifier;
    private IUmbracoContextAccessor _umbracoContextAccessor;
    private ICompositeViewEngine _viewEngines;
    public PreviewController(UmbracoFeatures features, IOptionsSnapshot`1<GlobalSettings> globalSettings, IPublishedSnapshotService publishedSnapshotService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, ILocalizationService localizationService, IHostingEnvironment hostingEnvironment, ICookieManager cookieManager, IRuntimeMinifier runtimeMinifier, ICompositeViewEngine viewEngines, IUmbracoContextAccessor umbracoContextAccessor);
    [AuthorizeAttribute]
[DisableBrowserCacheAttribute]
public ActionResult Index(Nullable`1<int> id);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.PreviewController/<Application>d__12")]
[MinifyJavaScriptResultAttribute]
public Task`1<JavaScriptResult> Application();
    [AuthorizeAttribute]
public ActionResult Frame(int id, string culture);
    [NullableContextAttribute("2")]
public ActionResult EnterPreview(int id);
    public ActionResult End(string redir);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoBackOffice")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.PropertyTypeController : UmbracoAuthorizedJsonController {
    private IPropertyTypeUsageService _propertyTypeUsageService;
    public PropertyTypeController(IPropertyTypeUsageService propertyTypeUsageService);
    [HttpGetAttribute]
public ActionResult`1<PropertyTypeHasValuesDisplay> HasValues(string alias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.PublicAccessController : BackOfficeNotificationsController {
    private IContentService _contentService;
    private IEntityService _entityService;
    private IMemberRoleManager _memberRoleManager;
    private IMemberService _memberService;
    private IPublicAccessService _publicAccessService;
    private IUmbracoMapper _umbracoMapper;
    public PublicAccessController(IPublicAccessService publicAccessService, IContentService contentService, IEntityService entityService, IMemberService memberService, IUmbracoMapper umbracoMapper, IMemberRoleManager memberRoleManager);
    [AuthorizeAttribute]
[HttpGetAttribute]
public ActionResult`1<PublicAccess> GetPublicAccess(int contentId);
    [AuthorizeAttribute]
[HttpPostAttribute]
public IActionResult PostPublicAccess(int contentId, String[] groups, String[] usernames, int loginPageId, int errorPageId);
    [AuthorizeAttribute]
[HttpPostAttribute]
public IActionResult RemovePublicAccess(int contentId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.PublishedSnapshotCacheStatusController : UmbracoAuthorizedApiController {
    private DistributedCache _distributedCache;
    private IPublishedSnapshotService _publishedSnapshotService;
    private IPublishedSnapshotStatus _publishedSnapshotStatus;
    public PublishedSnapshotCacheStatusController(IPublishedSnapshotService publishedSnapshotService, IPublishedSnapshotStatus publishedSnapshotStatus, DistributedCache distributedCache);
    [HttpPostAttribute]
public string RebuildDbCache();
    [HttpGetAttribute]
public string GetStatus();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.PublishedSnapshotCacheStatusController/<Collect>d__6")]
[HttpGetAttribute]
public Task`1<string> Collect();
    [HttpPostAttribute]
public void ReloadCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Controllers.PublishedStatusController : UmbracoAuthorizedApiController {
    private IPublishedSnapshotStatus _publishedSnapshotStatus;
    public PublishedStatusController(IPublishedSnapshotStatus publishedSnapshotStatus);
    [HttpGetAttribute]
public string GetPublishedStatusUrl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.RedirectUrlManagementController : UmbracoAuthorizedApiController {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IConfigManipulator _configManipulator;
    private ILogger`1<RedirectUrlManagementController> _logger;
    private IRedirectUrlService _redirectUrlService;
    private IUmbracoMapper _umbracoMapper;
    private IOptionsMonitor`1<WebRoutingSettings> _webRoutingSettings;
    private bool IsEnabled { get; }
    public RedirectUrlManagementController(ILogger`1<RedirectUrlManagementController> logger, IOptionsMonitor`1<WebRoutingSettings> webRoutingSettings, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IRedirectUrlService redirectUrlService, IUmbracoMapper umbracoMapper, IConfigManipulator configManipulator);
    private bool get_IsEnabled();
    [HttpGetAttribute]
public IActionResult GetEnableState();
    [HttpGetAttribute]
public RedirectUrlSearchResult SearchRedirectUrls(string searchTerm, int page, int pageSize);
    [HttpGetAttribute]
public RedirectUrlSearchResult RedirectUrlsForContentItem(string contentUdi);
    [HttpPostAttribute]
public IActionResult DeleteRedirectUrl(Guid id);
    [HttpPostAttribute]
public IActionResult ToggleUrlTracker(bool disable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.RelationController : UmbracoAuthorizedJsonController {
    private IRelationService _relationService;
    private IUmbracoMapper _umbracoMapper;
    public RelationController(IUmbracoMapper umbracoMapper, IRelationService relationService);
    [NullableContextAttribute("2")]
public RelationDisplay GetById(int id);
    public IEnumerable`1<RelationDisplay> GetByChildId(int childId, string relationTypeAlias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.RelationTypeController : BackOfficeNotificationsController {
    private ILogger`1<RelationTypeController> _logger;
    private IRelationService _relationService;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    public RelationTypeController(ILogger`1<RelationTypeController> logger, IUmbracoMapper umbracoMapper, IRelationService relationService, IShortStringHelper shortStringHelper);
    public ActionResult`1<RelationTypeDisplay> GetById(int id);
    public ActionResult`1<RelationTypeDisplay> GetById(Guid id);
    public ActionResult`1<RelationTypeDisplay> GetById(Udi id);
    public PagedResult`1<RelationDisplay> GetPagedResults(int id, int pageNumber, int pageSize);
    public List`1<ObjectType> GetRelationObjectTypes();
    public ActionResult`1<int> PostCreate(RelationTypeSave relationType);
    public ActionResult`1<RelationTypeDisplay> PostSave(RelationTypeSave relationType);
    [HttpPostAttribute]
[HttpDeleteAttribute]
public IActionResult DeleteById(int id);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private RelationDisplay <GetPagedResults>b__8_0(IRelation x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.SectionController : UmbracoAuthorizedJsonController {
    private IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IControllerFactory _controllerFactory;
    private IDashboardService _dashboardService;
    private ILocalizedTextService _localizedTextService;
    private ISectionService _sectionService;
    private ITreeService _treeService;
    private IUmbracoMapper _umbracoMapper;
    public SectionController(IBackOfficeSecurityAccessor backofficeSecurityAccessor, ILocalizedTextService localizedTextService, IDashboardService dashboardService, ISectionService sectionService, ITreeService treeService, IUmbracoMapper umbracoMapper, IControllerFactory controllerFactory, IActionDescriptorCollectionProvider actionDescriptorCollectionProvider);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.SectionController/<GetSections>d__9")]
public Task`1<ActionResult`1<IEnumerable`1<Section>>> GetSections();
    private string GetRoutePathForFirstTree(TreeRootNode rootNode);
    public IEnumerable`1<Section> GetAllSections();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetAllSections>b__11_0(Section x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.StylesheetController : UmbracoAuthorizedJsonController {
    private IFileService _fileService;
    public StylesheetController(IFileService fileService);
    public IEnumerable`1<Stylesheet> GetAll();
    public IEnumerable`1<StylesheetRule> GetRulesByName(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[ParameterSwapControllerActionSelectorAttribute("GetById", "id", "Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Controllers.TemplateController : BackOfficeNotificationsController {
    private IDefaultViewContentProvider _defaultViewContentProvider;
    private IFileService _fileService;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    [ActivatorUtilitiesConstructorAttribute]
public TemplateController(IFileService fileService, IUmbracoMapper umbracoMapper, IShortStringHelper shortStringHelper, IDefaultViewContentProvider defaultViewContentProvider);
    public TemplateDisplay GetByAlias(string alias);
    public IEnumerable`1<EntityBasic> GetAll();
    public ActionResult`1<TemplateDisplay> GetById(int id);
    public ActionResult`1<TemplateDisplay> GetById(Guid id);
    public ActionResult`1<TemplateDisplay> GetById(Udi id);
    [HttpDeleteAttribute]
[HttpPostAttribute]
public IActionResult DeleteById(int id);
    [NullableContextAttribute("2")]
public TemplateDisplay GetScaffold(int id);
    public ActionResult`1<TemplateDisplay> PostSave(TemplateDisplay display);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[JsonCamelCaseFormatterAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.TemplateQueryController : UmbracoAuthorizedJsonController {
    private IContentTypeService _contentTypeService;
    private ILocalizedTextService _localizedTextService;
    private IPublishedContentQuery _publishedContentQuery;
    private IPublishedValueFallback _publishedValueFallback;
    private IVariationContextAccessor _variationContextAccessor;
    private IEnumerable`1<OperatorTerm> Terms { get; }
    private IEnumerable`1<PropertyModel> Properties { get; }
    public TemplateQueryController(IVariationContextAccessor variationContextAccessor, IPublishedContentQuery publishedContentQuery, ILocalizedTextService localizedTextService, IPublishedValueFallback publishedValueFallback, IContentTypeService contentTypeService);
    private IEnumerable`1<OperatorTerm> get_Terms();
    private IEnumerable`1<PropertyModel> get_Properties();
    public QueryResultModel PostTemplateQuery(QueryModel model);
    private IEnumerable`1<IPublishedContent> PostTemplateValue(QueryModel model, StringBuilder queryExpression);
    private object GetConstraintValue(QueryCondition condition);
    private IEnumerable`1<IPublishedContent> SortByDefaultPropertyValue(IEnumerable`1<IPublishedContent> contents, SortExpression sortExpression);
    public IEnumerable`1<ContentTypeModel> GetContentTypes();
    public IEnumerable`1<PropertyModel> GetAllowedProperties();
    public IEnumerable`1<object> GetFilterConditions();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <PostTemplateValue>b__11_0(IPublishedContent x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private ContentTypeModel <GetContentTypes>b__14_0(IContentType x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.TinyMceController : UmbracoAuthorizedApiController {
    private ContentSettings _contentSettings;
    private IHostingEnvironment _hostingEnvironment;
    private IImageUrlGenerator _imageUrlGenerator;
    private IIOHelper _ioHelper;
    private IShortStringHelper _shortStringHelper;
    private Dictionary`2<string, string> _fileContentTypeMappings;
    public TinyMceController(IHostingEnvironment hostingEnvironment, IShortStringHelper shortStringHelper, IOptionsSnapshot`1<ContentSettings> contentSettings, IIOHelper ioHelper, IImageUrlGenerator imageUrlGenerator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TinyMceController/<UploadImage>d__7")]
[HttpPostAttribute]
public Task`1<IActionResult> UploadImage(List`1<IFormFile> file);
    private string GetRelativePath(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.TourController : UmbracoAuthorizedJsonController {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IContentTypeService _contentTypeService;
    private TourFilterCollection _filters;
    private IWebHostEnvironment _webHostEnvironment;
    private TourSettings _tourSettings;
    [ActivatorUtilitiesConstructorAttribute]
public TourController(TourFilterCollection filters, IHostingEnvironment hostingEnvironment, IOptionsSnapshot`1<TourSettings> tourSettings, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IContentTypeService contentTypeService, IWebHostEnvironment webHostEnvironment);
    [ObsoleteAttribute("Use other ctor - Will be removed in Umbraco 13")]
public TourController(TourFilterCollection filters, IHostingEnvironment hostingEnvironment, IOptionsSnapshot`1<TourSettings> tourSettings, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IContentTypeService contentTypeService);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TourController/<GetTours>d__7")]
public Task`1<IEnumerable`1<BackOfficeTourFile>> GetTours();
    [IteratorStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TourController/<GetTourFiles>d__8")]
private IEnumerable`1<Tuple`2<IFileInfo, string>> GetTourFiles(IFileProvider fileProvider, string folder);
    [IteratorStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TourController/<GetToursFolderPaths>d__9")]
private static IEnumerable`1<string> GetToursFolderPaths(IFileProvider fileProvider, string path, string subDirName);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TourController/<GetToursForDoctype>d__10")]
public Task`1<IEnumerable`1<BackOfficeTour>> GetToursForDoctype(string doctypeAlias);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TourController/<TryParseTourFile>d__11")]
private Task TryParseTourFile(string tourFile, ICollection`1<BackOfficeTourFile> result, List`1<BackOfficeTourFilter> filters, List`1<BackOfficeTourFilter> aliasOnlyFilters, Stream fileStream, string pluginName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.TrackedReferencesController : BackOfficeNotificationsController {
    private ITrackedReferencesService _relationService;
    public TrackedReferencesController(ITrackedReferencesService relationService);
    public ActionResult`1<PagedResult`1<RelationItem>> GetPagedReferences(int id, int pageNumber, int pageSize, bool filterMustBeIsDependency);
    public ActionResult`1<PagedResult`1<RelationItem>> GetPagedDescendantsInReferences(int parentId, int pageNumber, int pageSize, bool filterMustBeIsDependency);
    [HttpGetAttribute]
[HttpPostAttribute]
public ActionResult`1<PagedResult`1<RelationItem>> GetPagedReferencedItems(Int32[] ids, int pageNumber, int pageSize, bool filterMustBeIsDependency);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Controllers.TwoFactorLoginController : UmbracoAuthorizedJsonController {
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private IBackOfficeSignInManager _backOfficeSignInManager;
    private IBackOfficeUserManager _backOfficeUserManager;
    private ILogger`1<TwoFactorLoginController> _logger;
    private ITwoFactorLoginService _twoFactorLoginService;
    private IOptionsSnapshot`1<TwoFactorLoginViewOptions> _twoFactorLoginViewOptions;
    public TwoFactorLoginController(IBackOfficeSecurityAccessor backOfficeSecurityAccessor, ILogger`1<TwoFactorLoginController> logger, ITwoFactorLoginService twoFactorLoginService, IBackOfficeSignInManager backOfficeSignInManager, IBackOfficeUserManager backOfficeUserManager, IOptionsSnapshot`1<TwoFactorLoginViewOptions> twoFactorLoginViewOptions);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TwoFactorLoginController/<GetEnabled2FAProvidersForCurrentUser>d__7")]
[HttpGetAttribute]
[AllowAnonymousAttribute]
public Task`1<ActionResult`1<IEnumerable`1<string>>> GetEnabled2FAProvidersForCurrentUser();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TwoFactorLoginController/<Get2FAProvidersForUser>d__8")]
[HttpGetAttribute]
public Task`1<ActionResult`1<IEnumerable`1<UserTwoFactorProviderModel>>> Get2FAProvidersForUser(int userId);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TwoFactorLoginController/<SetupInfo>d__9")]
[HttpGetAttribute]
public Task`1<ActionResult`1<object>> SetupInfo(string providerName);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TwoFactorLoginController/<ValidateAndSave>d__10")]
[HttpPostAttribute]
public Task`1<ActionResult`1<bool>> ValidateAndSave(string providerName, string secret, string code);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TwoFactorLoginController/<Disable>d__11")]
[HttpPostAttribute]
[AuthorizeAttribute]
public Task`1<ActionResult`1<bool>> Disable(string providerName, Guid userKey);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.TwoFactorLoginController/<DisableWithCode>d__12")]
[HttpPostAttribute]
public Task`1<ActionResult`1<bool>> DisableWithCode(string providerName, string code);
    [HttpGetAttribute]
public ActionResult`1<string> ViewPathForProviderName(string providerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AngularJsonOnlyConfigurationAttribute]
[JsonExceptionFilterAttribute]
[IsBackOfficeAttribute]
[UmbracoUserTimeoutFilterAttribute]
[AuthorizeAttribute]
[DisableBrowserCacheAttribute]
[UmbracoRequireHttpsAttribute]
[CheckIfUserTicketDataIsStaleAttribute]
[MiddlewareFilterAttribute("Umbraco.Cms.Web.BackOffice.Filters.UnhandledExceptionLoggerFilter")]
public abstract class Umbraco.Cms.Web.BackOffice.Controllers.UmbracoAuthorizedApiController : UmbracoApiController {
    protected virtual ActionResult ValidationProblem(IErrorModel model, ModelStateDictionary modelStateDictionary, int statusCode);
    [NonActionAttribute]
public virtual ActionResult ValidationProblem(ModelStateDictionary modelStateDictionary);
    [NullableContextAttribute("2")]
protected ValidationProblemDetails GetValidationProblemDetails(string detail, string instance, Nullable`1<int> statusCode, string title, string type, ModelStateDictionary modelStateDictionary);
    protected virtual ActionResult ValidationProblem(string errorMessage);
    protected virtual ActionResult ValidationProblem(object value, int statusCode);
    protected virtual ActionResult ValidationProblem(INotificationModel model, int statusCode);
}
[ValidateAngularAntiForgeryTokenAttribute]
public abstract class Umbraco.Cms.Web.BackOffice.Controllers.UmbracoAuthorizedJsonController : UmbracoAuthorizedApiController {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.Controllers.UpdateCheckController : UmbracoAuthorizedJsonController {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private ICookieManager _cookieManager;
    private GlobalSettings _globalSettings;
    private IUmbracoVersion _umbracoVersion;
    private IUpgradeService _upgradeService;
    public UpdateCheckController(IUpgradeService upgradeService, IUmbracoVersion umbracoVersion, ICookieManager cookieManager, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IOptionsSnapshot`1<GlobalSettings> globalSettings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.UpdateCheckController/<GetCheck>d__6")]
[UpdateCheckResponseFilterAttribute]
public Task`1<UpgradeCheckResponse> GetCheck();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Controllers.UserGroupEditorAuthorizationHelper : object {
    private AppCaches _appCaches;
    private IContentService _contentService;
    private IEntityService _entityService;
    private IMediaService _mediaService;
    private IUserService _userService;
    public UserGroupEditorAuthorizationHelper(IUserService userService, IContentService contentService, IMediaService mediaService, IEntityService entityService, AppCaches appCaches);
    public Attempt`1<string> AuthorizeGroupAccess(IUser currentUser, Int32[] groupIds);
    public Attempt`1<string> AuthorizeGroupAccess(IUser currentUser, String[] groupAliases);
    [NullableContextAttribute("2")]
public Attempt`1<string> AuthorizeSectionChanges(IUser currentUser, IEnumerable`1<string> existingSections, IEnumerable`1<string> proposedAllowedSections);
    [NullableContextAttribute("2")]
public Attempt`1<string> AuthorizeStartNodeChanges(IUser currentUser, Nullable`1<int> currentContentStartId, Nullable`1<int> proposedContentStartId, Nullable`1<int> currentMediaStartId, Nullable`1<int> proposedMediaStartId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[PrefixlessBodyModelValidatorAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.UserGroupsController : BackOfficeNotificationsController {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IContentService _contentService;
    private IEntityService _entityService;
    private ILocalizedTextService _localizedTextService;
    private IMediaService _mediaService;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    private IUserService _userService;
    public UserGroupsController(IUserService userService, IContentService contentService, IEntityService entityService, IMediaService mediaService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IUmbracoMapper umbracoMapper, ILocalizedTextService localizedTextService, IShortStringHelper shortStringHelper, AppCaches appCaches);
    [UserGroupValidateAttribute]
public ActionResult`1<UserGroupDisplay> PostSaveUserGroup(UserGroupSave userGroupSave);
    private void EnsureNonAdminUserIsInSavedUserGroup(UserGroupSave userGroupSave);
    [NullableContextAttribute("2")]
public UserGroupDisplay GetEmptyUserGroup();
    public IEnumerable`1<UserGroupBasic> GetUserGroups(bool onlyCurrentUserGroups);
    [AuthorizeAttribute]
public ActionResult`1<UserGroupDisplay> GetUserGroup(int id);
    [HttpPostAttribute]
[HttpDeleteAttribute]
[AuthorizeAttribute]
public IActionResult PostDeleteUserGroups(Int32[] userGroupIds);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
[PrefixlessBodyModelValidatorAttribute]
[IsCurrentUserModelFilterAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.UsersController : BackOfficeNotificationsController {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private ContentSettings _contentSettings;
    private IEmailSender _emailSender;
    private IBackOfficeExternalLoginProviders _externalLogins;
    private GlobalSettings _globalSettings;
    private IHostingEnvironment _hostingEnvironment;
    private IHttpContextAccessor _httpContextAccessor;
    [NullableAttribute("2")]
private IFileStreamSecurityValidator _fileStreamSecurityValidator;
    private IImageUrlGenerator _imageUrlGenerator;
    private LinkGenerator _linkGenerator;
    private ILocalizedTextService _localizedTextService;
    private ILogger`1<UsersController> _logger;
    private ILoggerFactory _loggerFactory;
    private MediaFileManager _mediaFileManager;
    private IPasswordChanger`1<BackOfficeIdentityUser> _passwordChanger;
    private SecuritySettings _securitySettings;
    private IShortStringHelper _shortStringHelper;
    private ISqlContext _sqlContext;
    private IUmbracoMapper _umbracoMapper;
    private UserEditorAuthorizationHelper _userEditorAuthorizationHelper;
    private IBackOfficeUserManager _userManager;
    private IUserService _userService;
    private WebRoutingSettings _webRoutingSettings;
    [ActivatorUtilitiesConstructorAttribute]
public UsersController(MediaFileManager mediaFileManager, IOptionsSnapshot`1<ContentSettings> contentSettings, IHostingEnvironment hostingEnvironment, ISqlContext sqlContext, IImageUrlGenerator imageUrlGenerator, IOptionsSnapshot`1<SecuritySettings> securitySettings, IEmailSender emailSender, IBackOfficeSecurityAccessor backofficeSecurityAccessor, AppCaches appCaches, IShortStringHelper shortStringHelper, IUserService userService, ILocalizedTextService localizedTextService, IUmbracoMapper umbracoMapper, IOptionsSnapshot`1<GlobalSettings> globalSettings, IBackOfficeUserManager backOfficeUserManager, ILoggerFactory loggerFactory, LinkGenerator linkGenerator, IBackOfficeExternalLoginProviders externalLogins, UserEditorAuthorizationHelper userEditorAuthorizationHelper, IPasswordChanger`1<BackOfficeIdentityUser> passwordChanger, IHttpContextAccessor httpContextAccessor, IOptions`1<WebRoutingSettings> webRoutingSettings, IFileStreamSecurityValidator fileStreamSecurityValidator);
    [ObsoleteAttribute("Use constructor overload that has fileStreamSecurityValidator, scheduled for removal in v14")]
public UsersController(MediaFileManager mediaFileManager, IOptionsSnapshot`1<ContentSettings> contentSettings, IHostingEnvironment hostingEnvironment, ISqlContext sqlContext, IImageUrlGenerator imageUrlGenerator, IOptionsSnapshot`1<SecuritySettings> securitySettings, IEmailSender emailSender, IBackOfficeSecurityAccessor backofficeSecurityAccessor, AppCaches appCaches, IShortStringHelper shortStringHelper, IUserService userService, ILocalizedTextService localizedTextService, IUmbracoMapper umbracoMapper, IOptionsSnapshot`1<GlobalSettings> globalSettings, IBackOfficeUserManager backOfficeUserManager, ILoggerFactory loggerFactory, LinkGenerator linkGenerator, IBackOfficeExternalLoginProviders externalLogins, UserEditorAuthorizationHelper userEditorAuthorizationHelper, IPasswordChanger`1<BackOfficeIdentityUser> passwordChanger, IHttpContextAccessor httpContextAccessor, IOptions`1<WebRoutingSettings> webRoutingSettings);
    public ActionResult`1<String[]> GetCurrentUserAvatarUrls();
    [AppendUserModifiedHeaderAttribute("id")]
[AuthorizeAttribute]
public IActionResult PostSetAvatar(int id, IList`1<IFormFile> file);
    internal static IActionResult PostSetAvatarInternal(IList`1<IFormFile> files, IUserService userService, IAppCache cache, MediaFileManager mediaFileManager, IShortStringHelper shortStringHelper, ContentSettings contentSettings, IHostingEnvironment hostingEnvironment, IImageUrlGenerator imageUrlGenerator, IFileStreamSecurityValidator fileStreamSecurityValidator, int id);
    [AppendUserModifiedHeaderAttribute("id")]
[AuthorizeAttribute]
public ActionResult`1<String[]> PostClearAvatar(int id);
    [OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public ActionResult`1<UserDisplay> GetById(int id);
    [OutgoingEditorModelEventAttribute]
[AuthorizeAttribute]
public ActionResult`1<IEnumerable`1<UserDisplay>> GetByIds(Int32[] ids);
    public PagedUserResult GetPagedUsers(int pageNumber, int pageSize, string orderBy, Direction orderDirection, String[] userGroups, UserState[] userStates, string filter);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.UsersController/<PostCreateUser>d__33")]
public Task`1<ActionResult`1<UserDisplay>> PostCreateUser(UserInvite userSave);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.UsersController/<PostInviteUser>d__34")]
public Task`1<ActionResult`1<UserDisplay>> PostInviteUser(UserInvite userSave);
    private IUser CheckUniqueEmail(string email, Func`2<IUser, bool> extraCheck);
    [NullableContextAttribute("2")]
private ActionResult`1<IUser> CheckUniqueUsername(string username, Func`2<IUser, bool> extraCheck);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.UsersController/<SendUserInviteEmailAsync>d__37")]
private Task SendUserInviteEmailAsync(UserBasic userDisplay, string from, string fromEmail, IUser to, string message);
    [OutgoingEditorModelEventAttribute]
public ActionResult`1<UserDisplay> PostSaveUser(UserSave userSave);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.UsersController/<PostChangePassword>d__39")]
public Task`1<ActionResult`1<ModelWithNotifications`1<string>>> PostChangePassword(ChangingPasswordModel changingPasswordModel);
    [AuthorizeAttribute]
public IActionResult PostDisableUsers(Int32[] userIds);
    [AuthorizeAttribute]
public IActionResult PostEnableUsers(Int32[] userIds);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.UsersController/<PostUnlockUsers>d__42")]
[AuthorizeAttribute]
public Task`1<IActionResult> PostUnlockUsers(Int32[] userIds);
    [AuthorizeAttribute]
public IActionResult PostSetUserGroupsOnUsers(String[] userGroupAliases, Int32[] userIds);
    [AuthorizeAttribute]
public IActionResult PostDeleteNonLoggedInUser(int id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Controllers.WebhookController : UmbracoAuthorizedJsonController {
    private IWebhookService _webhookService;
    private IUmbracoMapper _umbracoMapper;
    private WebhookEventCollection _webhookEventCollection;
    private IWebhookLogService _webhookLogService;
    private IWebhookPresentationFactory _webhookPresentationFactory;
    public WebhookController(IWebhookService webhookService, IUmbracoMapper umbracoMapper, WebhookEventCollection webhookEventCollection, IWebhookLogService webhookLogService, IWebhookPresentationFactory webhookPresentationFactory);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.WebhookController/<GetAll>d__6")]
[HttpGetAttribute]
public Task`1<IActionResult> GetAll(int skip, int take);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.WebhookController/<Update>d__7")]
[HttpPutAttribute]
public Task`1<IActionResult> Update(WebhookViewModel webhookViewModel);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.WebhookController/<Create>d__8")]
[HttpPostAttribute]
public Task`1<IActionResult> Create(WebhookViewModel webhookViewModel);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.WebhookController/<GetByKey>d__9")]
[HttpGetAttribute]
public Task`1<IActionResult> GetByKey(Guid key);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.WebhookController/<Delete>d__10")]
[HttpDeleteAttribute]
public Task`1<IActionResult> Delete(Guid key);
    [HttpGetAttribute]
public IActionResult GetEvents();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Controllers.WebhookController/<GetLogs>d__12")]
[HttpGetAttribute]
public Task`1<IActionResult> GetLogs(int skip, int take);
    private IActionResult WebhookOperationStatusResult(WebhookOperationStatus status);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Umbraco.Cms.Web.BackOffice.Extensions.ControllerContextExtensions : object {
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Extensions.ControllerContextExtensions/<InvokeAuthorizationFiltersForRequest>d__0")]
[ExtensionAttribute]
internal static Task`1<bool> InvokeAuthorizationFiltersForRequest(ControllerContext controllerContext, ActionContext actionContext);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Extensions.ControllerContextExtensions/<ExecuteAuthorizationFiltersAsync>d__1")]
private static Task`1<bool> ExecuteAuthorizationFiltersAsync(AuthorizationFilterContext authorizationFilterContext, IList`1<IAuthorizationFilter> authorizationFilters, IList`1<IAsyncAuthorizationFilter> asyncAuthorizationFilters);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.AppendCurrentEventMessagesAttribute : TypeFilterAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Filters.AppendUserModifiedHeaderAttribute : ActionFilterAttribute {
    [NullableAttribute("2")]
private string _userIdParameter;
    public AppendUserModifiedHeaderAttribute(string userIdParameter);
    public virtual void OnActionExecuting(ActionExecutingContext context);
    public static void AppendHeader(ActionExecutingContext context);
    [NullableContextAttribute("2")]
private int GetUserIdFromParameter(object parameterValue);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.CheckIfUserTicketDataIsStaleAttribute : TypeFilterAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Umbraco.Cms.Web.BackOffice.Filters.ContentModelValidator : object {
    [CompilerGeneratedAttribute]
private IPropertyValidationService <PropertyValidationService>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<ContentModelValidator> <Logger>k__BackingField;
    public IPropertyValidationService PropertyValidationService { get; }
    protected ILogger`1<ContentModelValidator> Logger { get; }
    protected ContentModelValidator(ILogger`1<ContentModelValidator> logger, IPropertyValidationService propertyValidationService);
    [CompilerGeneratedAttribute]
public IPropertyValidationService get_PropertyValidationService();
    [CompilerGeneratedAttribute]
protected ILogger`1<ContentModelValidator> get_Logger();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Umbraco.Cms.Web.BackOffice.Filters.ContentModelValidator`3 : ContentModelValidator {
    protected ContentModelValidator`3(ILogger`1<ContentModelValidator> logger, IPropertyValidationService propertyValidationService);
    public virtual bool ValidateExistingContent(TModelSave postedItem, ActionExecutingContext actionContext);
    public virtual bool ValidateProperties(TModelSave model, IContentProperties`1<ContentPropertyBasic> modelWithProperties, ActionExecutingContext actionContext);
    protected bool ValidateProperties(List`1<ContentPropertyBasic> postedProperties, List`1<IProperty> persistedProperties, ActionExecutingContext actionContext);
    [NullableContextAttribute("2")]
public virtual bool ValidatePropertiesData(TModelSave model, TModelWithProperties modelWithProperties, ContentPropertyCollectionDto dto, ModelStateDictionary modelState);
    protected virtual void ValidatePropertyValue(TModelSave model, TModelWithProperties modelWithProperties, IDataEditor editor, ContentPropertyDto property, object postedValue, ModelStateDictionary modelState);
    protected virtual void AddPropertyError(TModelSave model, TModelWithProperties modelWithProperties, IDataEditor editor, ContentPropertyDto property, ValidationResult validationResult, ModelStateDictionary modelState);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Umbraco.Cms.Web.BackOffice.Filters.ContentSaveModelValidator : ContentModelValidator`3<IContent, ContentItemSave, ContentVariantSave> {
    public ContentSaveModelValidator(ILogger`1<ContentSaveModelValidator> logger, IPropertyValidationService propertyValidationService);
}
public class Umbraco.Cms.Web.BackOffice.Filters.ContentSaveValidationAttribute : TypeFilterAttribute {
    public ContentSaveValidationAttribute(bool skipUserAccessValidation);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.DataTypeValidateAttribute : TypeFilterAttribute {
}
public class Umbraco.Cms.Web.BackOffice.Filters.FileUploadCleanupFilterAttribute : TypeFilterAttribute {
    public FileUploadCleanupFilterAttribute(bool incomingModel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Filters.FilterAllowedOutgoingContentAttribute : TypeFilterAttribute {
    internal FilterAllowedOutgoingContentAttribute(Type outgoingType);
    internal FilterAllowedOutgoingContentAttribute(Type outgoingType, char permissionToCheck);
    internal FilterAllowedOutgoingContentAttribute(Type outgoingType, string propertyName);
    internal FilterAllowedOutgoingContentAttribute(Type outgoingType, IUserService userService, IEntityService entityService);
    public FilterAllowedOutgoingContentAttribute(Type outgoingType, string propertyName, char permissionToCheck);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Filters.FilterAllowedOutgoingContentFilter : FilterAllowedOutgoingMediaFilter {
    private AppCaches _appCaches;
    private IEntityService _entityService;
    private char _permissionToCheck;
    private IUserService _userService;
    protected int RecycleBinId { get; }
    public FilterAllowedOutgoingContentFilter(Type outgoingType, string propertyName, char permissionToCheck, IUserService userService, IEntityService entityService, AppCaches appCaches, IBackOfficeSecurityAccessor backofficeSecurityAccessor);
    protected virtual int get_RecycleBinId();
    protected virtual void FilterItems(IUser user, IList items);
    protected virtual Int32[] GetUserStartNodes(IUser user);
    internal void FilterBasedOnPermissions(IList items, IUser user);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.FilterAllowedOutgoingMediaAttribute : TypeFilterAttribute {
    [NullableContextAttribute("1")]
public FilterAllowedOutgoingMediaAttribute(Type outgoingType, string propertyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Filters.FilterAllowedOutgoingMediaFilter : object {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IEntityService _entityService;
    private Type _outgoingType;
    private string _propertyName;
    protected int RecycleBinId { get; }
    public FilterAllowedOutgoingMediaFilter(IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, AppCaches appCaches, Type outgoingType, string propertyName);
    protected virtual int get_RecycleBinId();
    public sealed virtual void OnActionExecuted(ActionExecutedContext context);
    public sealed virtual void OnActionExecuting(ActionExecutingContext context);
    protected virtual Int32[] GetUserStartNodes(IUser user);
    protected virtual void FilterItems(IUser user, IList items);
    internal void FilterBasedOnStartNode(IList items, IUser user);
    private void SetValueForResponse(ObjectResult objectContent, object newVal);
    internal object GetValueFromResponse(ObjectResult objectContent);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.IsCurrentUserModelFilterAttribute : TypeFilterAttribute {
}
public class Umbraco.Cms.Web.BackOffice.Filters.JsonCamelCaseFormatterAttribute : TypeFilterAttribute {
}
internal class Umbraco.Cms.Web.BackOffice.Filters.MediaItemSaveValidationAttribute : TypeFilterAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Umbraco.Cms.Web.BackOffice.Filters.MediaSaveModelValidator : ContentModelValidator`3<IMedia, MediaItemSave, IContentProperties`1<ContentPropertyBasic>> {
    public MediaSaveModelValidator(ILogger`1<MediaSaveModelValidator> logger, IPropertyValidationService propertyValidationService);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Umbraco.Cms.Web.BackOffice.Filters.MemberSaveModelValidator : ContentModelValidator`3<IMember, MemberSave, IContentProperties`1<ContentPropertyBasic>> {
    [NullableAttribute("2")]
private IBackOfficeSecurity _backofficeSecurity;
    private IMemberService _memberService;
    private IMemberTypeService _memberTypeService;
    private IShortStringHelper _shortStringHelper;
    public MemberSaveModelValidator(ILogger`1<MemberSaveModelValidator> logger, IBackOfficeSecurity backofficeSecurity, IMemberTypeService memberTypeService, IMemberService memberService, IShortStringHelper shortStringHelper, IPropertyValidationService propertyValidationService);
    [NullableContextAttribute("2")]
public virtual bool ValidatePropertiesData(MemberSave model, IContentProperties`1<ContentPropertyBasic> modelWithProperties, ContentPropertyCollectionDto dto, ModelStateDictionary modelState);
    public virtual bool ValidateProperties(MemberSave model, IContentProperties`1<ContentPropertyBasic> modelWithProperties, ActionExecutingContext actionContext);
    internal bool ValidateUniqueLogin(MemberSave model);
    internal bool ValidateUniqueEmail(MemberSave model);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.MemberSaveValidationAttribute : TypeFilterAttribute {
}
public class Umbraco.Cms.Web.BackOffice.Filters.MinifyJavaScriptResultAttribute : ActionFilterAttribute {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Filters.MinifyJavaScriptResultAttribute/<OnResultExecutionAsync>d__0")]
public virtual Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.OutgoingEditorModelEventAttribute : TypeFilterAttribute {
}
public class Umbraco.Cms.Web.BackOffice.Filters.PrefixlessBodyModelValidatorAttribute : TypeFilterAttribute {
}
public class Umbraco.Cms.Web.BackOffice.Filters.SetAngularAntiForgeryTokensAttribute : TypeFilterAttribute {
}
public class Umbraco.Cms.Web.BackOffice.Filters.UmbracoRequireHttpsAttribute : RequireHttpsAttribute {
    [NullableContextAttribute("1")]
protected virtual void HandleNonHttpsRequest(AuthorizationFilterContext filterContext);
}
public class Umbraco.Cms.Web.BackOffice.Filters.UnhandledExceptionLoggerFilter : object {
    [NullableContextAttribute("1")]
public void Configure(IApplicationBuilder applicationBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Filters.UnhandledExceptionLoggerMiddleware : object {
    private ILogger`1<UnhandledExceptionLoggerMiddleware> _logger;
    public UnhandledExceptionLoggerMiddleware(ILogger`1<UnhandledExceptionLoggerMiddleware> logger);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Filters.UnhandledExceptionLoggerMiddleware/<InvokeAsync>d__2")]
public sealed virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
internal class Umbraco.Cms.Web.BackOffice.Filters.UserGroupValidateAttribute : TypeFilterAttribute {
}
public class Umbraco.Cms.Web.BackOffice.Filters.ValidateAngularAntiForgeryTokenAttribute : TypeFilterAttribute {
}
internal class Umbraco.Cms.Web.BackOffice.Filters.ValidationFilterAttribute : ActionFilterAttribute {
    [NullableContextAttribute("1")]
public virtual void OnActionExecuting(ActionExecutingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.HealthChecks.HealthCheckController : UmbracoAuthorizedJsonController {
    private HealthCheckCollection _checks;
    private IList`1<Guid> _disabledCheckIds;
    private ILogger`1<HealthCheckController> _logger;
    private IEventAggregator _eventAggregator;
    private HealthChecksSettings _healthChecksSettings;
    [ObsoleteAttribute("Use constructor that accepts IEventAggregator as a parameter, scheduled for removal in V14")]
public HealthCheckController(HealthCheckCollection checks, ILogger`1<HealthCheckController> logger, IOptions`1<HealthChecksSettings> healthChecksSettings);
    [ActivatorUtilitiesConstructorAttribute]
public HealthCheckController(HealthCheckCollection checks, ILogger`1<HealthCheckController> logger, IOptions`1<HealthChecksSettings> healthChecksSettings, IEventAggregator eventAggregator);
    public object GetAllHealthChecks();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.HealthChecks.HealthCheckController/<GetStatus>d__8")]
[HttpGetAttribute]
public Task`1<object> GetStatus(Guid id);
    [HttpPostAttribute]
public HealthCheckStatus ExecuteAction(HealthCheckAction action);
    private HealthCheck GetCheckById(Nullable`1<Guid> id);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetAllHealthChecks>b__7_0(HealthCheck x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Install.CreateUnattendedUserNotificationHandler : object {
    private IServiceScopeFactory _serviceScopeFactory;
    private IOptions`1<UnattendedSettings> _unattendedSettings;
    private IUserService _userService;
    public CreateUnattendedUserNotificationHandler(IOptions`1<UnattendedSettings> unattendedSettings, IUserService userService, IServiceScopeFactory serviceScopeFactory);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Install.CreateUnattendedUserNotificationHandler/<HandleAsync>d__4")]
public sealed virtual Task HandleAsync(UnattendedInstallNotification notification, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Will be replaced with a new API controller in the new backoffice api")]
[UmbracoApiControllerAttribute]
[AngularJsonOnlyConfigurationAttribute]
[InstallAuthorizeAttribute]
[AreaAttribute("UmbracoInstall")]
public class Umbraco.Cms.Web.BackOffice.Install.InstallApiController : ControllerBase {
    private DatabaseBuilder _databaseBuilder;
    private InstallStatusTracker _installStatusTracker;
    private InstallStepCollection _installSteps;
    private ILogger`1<InstallApiController> _logger;
    private IProfilingLogger _proflog;
    private IRuntime _runtime;
    [CompilerGeneratedAttribute]
private InstallHelper <InstallHelper>k__BackingField;
    internal InstallHelper InstallHelper { get; }
    [ObsoleteAttribute("Use the constructor without IBackOfficeUserManager & IBackOfficeSignInManager instead, scheduled for removal in v14")]
public InstallApiController(DatabaseBuilder databaseBuilder, IProfilingLogger proflog, ILogger`1<InstallApiController> logger, InstallHelper installHelper, InstallStepCollection installSteps, InstallStatusTracker installStatusTracker, IRuntime runtime, IBackOfficeUserManager backOfficeUserManager, IBackOfficeSignInManager backOfficeSignInManager);
    [ActivatorUtilitiesConstructorAttribute]
public InstallApiController(DatabaseBuilder databaseBuilder, IProfilingLogger proflog, ILogger`1<InstallApiController> logger, InstallHelper installHelper, InstallStepCollection installSteps, InstallStatusTracker installStatusTracker, IRuntime runtime);
    [CompilerGeneratedAttribute]
internal InstallHelper get_InstallHelper();
    public bool PostValidateDatabaseConnection(DatabaseModel databaseSettings);
    public InstallSetup GetSetup();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Install.InstallApiController/<CompleteInstall>d__13")]
[HttpPostAttribute]
public Task`1<ActionResult> CompleteInstall();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Install.InstallApiController/<PostPerformInstall>d__14")]
public Task`1<ActionResult`1<InstallProgressResultModel>> PostPerformInstall(InstallInstructions installModel);
    private static object GetInstruction(InstallInstructions installModel, InstallTrackingItem item, InstallSetupStep step);
    private string IterateSteps(InstallSetupStep current, Queue`1<InstallTrackingItem> queue, Guid installId, InstallInstructions installModel);
    internal bool StepRequiresExecution(InstallSetupStep step, object instruction);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Install.InstallApiController/<ExecuteStepAsync>d__18")]
internal Task`1<InstallSetupResult> ExecuteStepAsync(InstallSetupStep step, object instruction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Will be replaced with attribute routing in the new backoffice API")]
public class Umbraco.Cms.Web.BackOffice.Install.InstallAreaRoutes : object {
    private IHostingEnvironment _hostingEnvironment;
    private LinkGenerator _linkGenerator;
    private IRuntimeState _runtime;
    public InstallAreaRoutes(IRuntimeState runtime, IHostingEnvironment hostingEnvironment, LinkGenerator linkGenerator);
    public sealed virtual void CreateRoutes(IEndpointRouteBuilder endpoints);
}
public class Umbraco.Cms.Web.BackOffice.Install.InstallAuthorizeAttribute : TypeFilterAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Will no longer be required with the new backoffice API")]
[InstallAuthorizeAttribute]
[AreaAttribute("UmbracoInstall")]
public class Umbraco.Cms.Web.BackOffice.Install.InstallController : Controller {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private GlobalSettings _globalSettings;
    private IHostingEnvironment _hostingEnvironment;
    private InstallHelper _installHelper;
    private LinkGenerator _linkGenerator;
    private ILogger`1<InstallController> _logger;
    private IRuntimeState _runtime;
    private IRuntimeMinifier _runtimeMinifier;
    private IUmbracoVersion _umbracoVersion;
    public InstallController(IBackOfficeSecurityAccessor backofficeSecurityAccessor, InstallHelper installHelper, IRuntimeState runtime, IOptions`1<GlobalSettings> globalSettings, IRuntimeMinifier runtimeMinifier, IHostingEnvironment hostingEnvironment, IUmbracoVersion umbracoVersion, ILogger`1<InstallController> logger, LinkGenerator linkGenerator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Install.InstallController/<Index>d__10")]
[HttpGetAttribute]
[StatusCodeResultAttribute("503")]
public Task`1<ActionResult> Index();
    [HttpGetAttribute]
[IgnoreFromNotFoundSelectorPolicyAttribute]
public ActionResult Redirect();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Mapping.CommonTreeNodeMapper : object {
    private LinkGenerator _linkGenerator;
    public CommonTreeNodeMapper(LinkGenerator linkGenerator);
    public string GetTreeNodeUrl(IContentBase source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Mapping.ContentMapDefinition : object {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backOfficeSecurityAccessor;
    private ContentBasicSavedStateMapper`1<ContentPropertyBasic> _basicStateMapper;
    private CommonMapper _commonMapper;
    private CommonTreeNodeMapper _commonTreeNodeMapper;
    private IContentService _contentService;
    private IContentTypeService _contentTypeService;
    private ContentVariantMapper _contentVariantMapper;
    private ICultureDictionary _cultureDictionary;
    private IEntityService _entityService;
    private IFileService _fileService;
    private ILocalizationService _localizationService;
    private ILocalizedTextService _localizedTextService;
    private ILoggerFactory _loggerFactory;
    private IPublishedRouter _publishedRouter;
    private IPublishedUrlProvider _publishedUrlProvider;
    private ContentSavedStateMapper`1<ContentPropertyDisplay> _stateMapper;
    private TabsAndPropertiesMapper`1<IContent> _tabsAndPropertiesMapper;
    private IUmbracoContextAccessor _umbracoContextAccessor;
    private UriUtility _uriUtility;
    private IUserService _userService;
    private IVariationContextAccessor _variationContextAccessor;
    public ContentMapDefinition(CommonMapper commonMapper, CommonTreeNodeMapper commonTreeNodeMapper, ICultureDictionary cultureDictionary, ILocalizedTextService localizedTextService, IContentService contentService, IContentTypeService contentTypeService, IFileService fileService, IUmbracoContextAccessor umbracoContextAccessor, IPublishedRouter publishedRouter, ILocalizationService localizationService, ILoggerFactory loggerFactory, IUserService userService, IVariationContextAccessor variationContextAccessor, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, UriUtility uriUtility, IPublishedUrlProvider publishedUrlProvider, IEntityService entityService, IBackOfficeSecurityAccessor backOfficeSecurityAccessor, AppCaches appCaches);
    public sealed virtual void DefineMaps(IUmbracoMapper mapper);
    private void Map(ContentVariantScheduleDisplay source, ContentVariantDisplay target, MapperContext context);
    private void Map(ContentItemDisplay source, ContentItemDisplayWithSchedule target, MapperContext context);
    private void Map(ContentVariantDisplay source, ContentVariantScheduleDisplay target, MapperContext context);
    private static void Map(ContentItemDisplayWithSchedule source, ContentItemDisplay target, MapperContext context);
    private static void Map(IContent source, ContentPropertyCollectionDto target, MapperContext context);
    private void Map(IContent source, ContentItemDisplay`1<TVariant> target, MapperContext context);
    private void Map(IContent source, ContentVariantDisplay target, MapperContext context);
    private void Map(IContent source, ContentVariantScheduleDisplay target, MapperContext context);
    private void Map(IContent source, ContentItemBasic`1<ContentPropertyBasic> target, MapperContext context);
    private IEnumerable`1<string> GetActions(IContent source, IContent parent, MapperContext context);
    private UrlInfo[] GetUrls(IContent source);
    private DateTime GetUpdateDate(IContent source, MapperContext context);
    private string GetName(IContent source, MapperContext context);
    private bool DetermineIsChildOfListView(IContent source, IContent parent, MapperContext context);
    private Nullable`1<DateTime> GetScheduledDate(IContent source, ContentScheduleAction action, MapperContext context);
    private IDictionary`2<string, string> GetAllowedTemplates(IContent source);
    private string GetDefaultTemplate(IContent source);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetAllowedTemplates>b__39_2(ITemplate t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Mapping.MediaMapDefinition : object {
    private CommonMapper _commonMapper;
    private CommonTreeNodeMapper _commonTreeNodeMapper;
    private ContentSettings _contentSettings;
    private IMediaService _mediaService;
    private IMediaTypeService _mediaTypeService;
    private MediaUrlGeneratorCollection _mediaUrlGenerators;
    private TabsAndPropertiesMapper`1<IMedia> _tabsAndPropertiesMapper;
    public MediaMapDefinition(ICultureDictionary cultureDictionary, CommonMapper commonMapper, CommonTreeNodeMapper commonTreeNodeMapper, IMediaService mediaService, IMediaTypeService mediaTypeService, ILocalizedTextService localizedTextService, MediaUrlGeneratorCollection mediaUrlGenerators, IOptions`1<ContentSettings> contentSettings, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider);
    public sealed virtual void DefineMaps(IUmbracoMapper mapper);
    private static void Map(IMedia source, ContentPropertyCollectionDto target, MapperContext context);
    private void Map(IMedia source, MediaItemDisplay target, MapperContext context);
    private void Map(IMedia source, ContentItemBasic`1<ContentPropertyBasic> target, MapperContext context);
    private bool DetermineIsChildOfListView(IMedia source);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Mapping.MemberMapDefinition : object {
    private CommonMapper _commonMapper;
    private CommonTreeNodeMapper _commonTreeNodeMapper;
    private MemberTabsAndPropertiesMapper _tabsAndPropertiesMapper;
    public MemberMapDefinition(CommonMapper commonMapper, CommonTreeNodeMapper commonTreeNodeMapper, MemberTabsAndPropertiesMapper tabsAndPropertiesMapper);
    public sealed virtual void DefineMaps(IUmbracoMapper mapper);
    private void Map(IMember source, MemberDisplay target, MapperContext context);
    private void Map(IMember source, MemberBasic target, MapperContext context);
    private void Map(IMemberGroup source, MemberGroupDisplay target, MapperContext context);
    private void Map(UmbracoIdentityRole source, MemberGroupDisplay target, MapperContext context);
    private static void Map(IMember source, ContentPropertyCollectionDto target, MapperContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Mapping.WebhookMapDefinition : object {
    private IHostingEnvironment _hostingEnvironment;
    private ILocalizedTextService _localizedTextService;
    public WebhookMapDefinition(IHostingEnvironment hostingEnvironment, ILocalizedTextService localizedTextService);
    public sealed virtual void DefineMaps(IUmbracoMapper mapper);
    private void Map(WebhookViewModel source, IWebhook target, MapperContext context);
    private void Map(IWebhookEvent source, WebhookEventViewModel target, MapperContext context);
    private void Map(WebhookLog source, WebhookLogViewModel target, MapperContext context);
}
public class Umbraco.Cms.Web.BackOffice.Middleware.BackOfficeExternalLoginProviderErrorMiddleware : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Middleware.BackOfficeExternalLoginProviderErrorMiddleware/<InvokeAsync>d__0")]
public sealed virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Middleware.ConfigureGlobalOptionsForKeepAliveMiddlware : object {
    private IOptions`1<KeepAliveSettings> _keepAliveSettings;
    public ConfigureGlobalOptionsForKeepAliveMiddlware(IOptions`1<KeepAliveSettings> keepAliveSettings);
    public sealed virtual void PostConfigure(string name, GlobalSettings options);
}
public class Umbraco.Cms.Web.BackOffice.Middleware.KeepAliveMiddleware : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Middleware.KeepAliveMiddleware/<InvokeAsync>d__0")]
public sealed virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.ModelBinders.BlueprintItemBinder : ContentItemBinder {
    private IContentService _contentService;
    public BlueprintItemBinder(IJsonSerializer jsonSerializer, IUmbracoMapper umbracoMapper, IContentService contentService, IContentTypeService contentTypeService, IHostingEnvironment hostingEnvironment);
    protected virtual IContent GetExisting(ContentItemSave model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.ModelBinders.ContentItemBinder : object {
    private IContentService _contentService;
    private IContentTypeService _contentTypeService;
    private IHostingEnvironment _hostingEnvironment;
    private IJsonSerializer _jsonSerializer;
    private IUmbracoMapper _umbracoMapper;
    private ContentModelBinderHelper _modelBinderHelper;
    public ContentItemBinder(IJsonSerializer jsonSerializer, IUmbracoMapper umbracoMapper, IContentService contentService, IContentTypeService contentTypeService, IHostingEnvironment hostingEnvironment);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.ModelBinders.ContentItemBinder/<BindModelAsync>d__7")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    protected virtual IContent GetExisting(ContentItemSave model);
    private IContent CreateNew(ContentItemSave model);
    internal static void BindModel(ContentItemSave model, IContent persistedContent, ContentModelBinderHelper modelBinderHelper, IUmbracoMapper umbracoMapper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.ModelBinders.ContentModelBinderHelper : object {
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.ModelBinders.ContentModelBinderHelper/<BindModelFromMultipartRequestAsync>d__0`1")]
public Task`1<T> BindModelFromMultipartRequestAsync(IJsonSerializer jsonSerializer, IHostingEnvironment hostingEnvironment, ModelBindingContext bindingContext);
    public void MapPropertyValuesFromSaved(IContentProperties`1<ContentPropertyBasic> saveModel, ContentPropertyCollectionDto dto);
}
public class Umbraco.Cms.Web.BackOffice.ModelBinders.FromJsonPathAttribute : ModelBinderAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.ModelBinders.MediaItemBinder : object {
    private IHostingEnvironment _hostingEnvironment;
    private IJsonSerializer _jsonSerializer;
    private IMediaService _mediaService;
    private IMediaTypeService _mediaTypeService;
    private ContentModelBinderHelper _modelBinderHelper;
    private IUmbracoMapper _umbracoMapper;
    public MediaItemBinder(IJsonSerializer jsonSerializer, IHostingEnvironment hostingEnvironment, IMediaService mediaService, IUmbracoMapper umbracoMapper, IMediaTypeService mediaTypeService);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.ModelBinders.MediaItemBinder/<BindModelAsync>d__7")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    private IMedia GetExisting(MediaItemSave model);
    private IMedia CreateNew(MediaItemSave model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.ModelBinders.MemberBinder : object {
    private IHostingEnvironment _hostingEnvironment;
    private IJsonSerializer _jsonSerializer;
    private IMemberService _memberService;
    private IMemberTypeService _memberTypeService;
    private ContentModelBinderHelper _modelBinderHelper;
    private IShortStringHelper _shortStringHelper;
    private IUmbracoMapper _umbracoMapper;
    public MemberBinder(IJsonSerializer jsonSerializer, IHostingEnvironment hostingEnvironment, IShortStringHelper shortStringHelper, IUmbracoMapper umbracoMapper, IMemberService memberService, IMemberTypeService memberTypeService);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.ModelBinders.MemberBinder/<BindModelAsync>d__8")]
public sealed virtual Task BindModelAsync(ModelBindingContext bindingContext);
    private IMember GetExisting(MemberSave model);
    private IMember GetExisting(Guid key);
    private IMember CreateNew(MemberSave model);
    private void FilterMembershipProviderProperties(IContentTypeBase contentType);
    private void FilterContentTypeProperties(IContentTypeBase contentType, IEnumerable`1<string> exclude);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.ModelsBuilder.ContentTypeModelValidator : ContentTypeModelValidatorBase`2<DocumentTypeSave, PropertyTypeBasic> {
    public ContentTypeModelValidator(IOptions`1<ModelsBuilderSettings> config);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Umbraco.Cms.Web.BackOffice.ModelsBuilder.ContentTypeModelValidatorBase`2 : EditorValidator`1<TModel> {
    private IOptions`1<ModelsBuilderSettings> _config;
    public ContentTypeModelValidatorBase`2(IOptions`1<ModelsBuilderSettings> config);
    [IteratorStateMachineAttribute("Umbraco.Cms.Web.BackOffice.ModelsBuilder.ContentTypeModelValidatorBase`2/<Validate>d__2")]
protected virtual IEnumerable`1<ValidationResult> Validate(TModel model);
    private ValidationResult ValidateProperty(PropertyTypeBasic property, int groupIndex, int propertyIndex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.ModelsBuilder.DashboardReport : object {
    private ModelsBuilderSettings _config;
    private ModelsGenerationError _mbErrors;
    private OutOfDateModelsStatus _outOfDateModels;
    public DashboardReport(IOptions`1<ModelsBuilderSettings> config, OutOfDateModelsStatus outOfDateModels, ModelsGenerationError mbErrors);
    public bool CanGenerate();
    public bool AreModelsOutOfDate();
    [NullableContextAttribute("2")]
public string LastError();
    public string Text();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.ModelsBuilder.DisableModelsBuilderNotificationHandler : object {
    private UmbracoFeatures _features;
    public DisableModelsBuilderNotificationHandler(UmbracoFeatures features);
    public sealed virtual void Handle(UmbracoApplicationStartingNotification notification);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.ModelsBuilder.MediaTypeModelValidator : ContentTypeModelValidatorBase`2<MediaTypeSave, PropertyTypeBasic> {
    public MediaTypeModelValidator(IOptions`1<ModelsBuilderSettings> config);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.ModelsBuilder.MemberTypeModelValidator : ContentTypeModelValidatorBase`2<MemberTypeSave, MemberPropertyTypeBasic> {
    public MemberTypeModelValidator(IOptions`1<ModelsBuilderSettings> config);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.ModelsBuilder.ModelsBuilderDashboardController : UmbracoAuthorizedJsonController {
    private ModelsBuilderSettings _config;
    private DashboardReport _dashboardReport;
    private ModelsGenerationError _mbErrors;
    private IModelsGenerator _modelGenerator;
    private OutOfDateModelsStatus _outOfDateModels;
    [NullableAttribute("2")]
private ModelsGenerator _concreteModelGenerator;
    [ObsoleteAttribute("This constructor is obsolete and will be removed in v13. Use the constructor with IModelsGenerator instead.")]
[BrowsableAttribute("False")]
public ModelsBuilderDashboardController(IOptions`1<ModelsBuilderSettings> config, ModelsGenerator modelsGenerator, OutOfDateModelsStatus outOfDateModels, ModelsGenerationError mbErrors);
    [ObsoleteAttribute("This constructor is obsolete and will be removed in v13. Use the constructor with only IModelsGenerator instead.")]
[BrowsableAttribute("False")]
public ModelsBuilderDashboardController(IOptions`1<ModelsBuilderSettings> config, ModelsGenerator concreteModelGenerator, IModelsGenerator modelsGenerator, OutOfDateModelsStatus outOfDateModels, ModelsGenerationError mbErrors);
    [ActivatorUtilitiesConstructorAttribute]
public ModelsBuilderDashboardController(IOptions`1<ModelsBuilderSettings> config, IModelsGenerator modelsGenerator, OutOfDateModelsStatus outOfDateModels, ModelsGenerationError mbErrors);
    [HttpPostAttribute]
public IActionResult BuildModels();
    [HttpGetAttribute]
public ActionResult`1<OutOfDateStatus> GetModelsOutOfDateStatus();
    [HttpGetAttribute]
public ActionResult`1<Dashboard> GetDashboard();
    private Dashboard GetDashboardResult();
}
public class Umbraco.Cms.Web.BackOffice.ModelsBuilder.ModelsBuilderDashboardProvider : object {
    [NullableAttribute("1")]
private LinkGenerator _linkGenerator;
    [NullableContextAttribute("1")]
public ModelsBuilderDashboardProvider(LinkGenerator linkGenerator);
    [NullableContextAttribute("2")]
public sealed virtual string GetUrl();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Cms.Web.BackOffice.ModelsBuilder.UmbracoBuilderExtensions : object {
    [ExtensionAttribute]
internal static IUmbracoBuilder TryAddModelsBuilderDashboard(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder AddModelsBuilderDashboard(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder RemoveModelsBuilderDashboard(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder DisableModelsBuilderControllers(IUmbracoBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[AuthorizeAttribute]
public class Umbraco.Cms.Web.BackOffice.Profiling.WebProfilingController : UmbracoAuthorizedJsonController {
    private IHostingEnvironment _hosting;
    public WebProfilingController(IHostingEnvironment hosting);
    public object GetStatus();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
[ObsoleteAttribute("Nested content is obsolete, will be removed in V13")]
public class Umbraco.Cms.Web.BackOffice.PropertyEditors.NestedContentController : UmbracoAuthorizedJsonController {
    private IContentTypeService _contentTypeService;
    public NestedContentController(IContentTypeService contentTypeService);
    [HttpGetAttribute]
public IEnumerable`1<object> GetContentTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.PropertyEditors.RichTextPreValueController : UmbracoAuthorizedJsonController {
    private IOptions`1<RichTextEditorSettings> _richTextEditorSettings;
    public RichTextPreValueController(IOptions`1<RichTextEditorSettings> richTextEditorSettings);
    public RichTextEditorConfiguration GetConfiguration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.PropertyEditors.RteEmbedController : UmbracoAuthorizedJsonController {
    private EmbedProvidersCollection _embedCollection;
    private ILogger`1<RteEmbedController> _logger;
    public RteEmbedController(EmbedProvidersCollection embedCollection, ILogger`1<RteEmbedController> logger);
    public OEmbedResult GetEmbed(string url, int width, int height);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoApi")]
public class Umbraco.Cms.Web.BackOffice.PropertyEditors.TagsDataController : UmbracoAuthorizedApiController {
    private ITagQuery _tagQuery;
    public TagsDataController(ITagQuery tagQuery);
    [AllowHttpJsonConfigrationAttribute]
public IEnumerable`1<TagModel> GetTags(string tagGroup, string culture, string query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.PropertyEditors.Validation.ContentPropertyValidationResult : ValidationResult {
    private string _culture;
    private string _segment;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ComplexEditorValidationResult <ComplexEditorResults>k__BackingField;
    [NullableAttribute("2")]
public ComplexEditorValidationResult ComplexEditorResults { get; }
    public ContentPropertyValidationResult(ValidationResult nested, string culture, string segment);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ComplexEditorValidationResult get_ComplexEditorResults();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.PropertyEditors.Validation.ValidationResultConverter : JsonConverter {
    private string _culture;
    private string _segment;
    public ValidationResultConverter(string culture, string segment);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Routing.BackOfficeAreaRoutes : object {
    private UmbracoApiControllerTypeCollection _apiControllers;
    private GlobalSettings _globalSettings;
    private IHostingEnvironment _hostingEnvironment;
    private IRuntimeState _runtimeState;
    private string _umbracoPathSegment;
    public BackOfficeAreaRoutes(IOptions`1<GlobalSettings> globalSettings, IHostingEnvironment hostingEnvironment, IRuntimeState runtimeState, UmbracoApiControllerTypeCollection apiControllers);
    public sealed virtual void CreateRoutes(IEndpointRouteBuilder endpoints);
    private void MapMinimalBackOffice(IEndpointRouteBuilder endpoints);
    private void AutoRouteBackOfficeApiControllers(IEndpointRouteBuilder endpoints);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Routing.PreviewRoutes : object {
    private IRuntimeState _runtimeState;
    private string _umbracoPathSegment;
    public PreviewRoutes(IOptions`1<GlobalSettings> globalSettings, IHostingEnvironment hostingEnvironment, IRuntimeState runtimeState);
    public sealed virtual void CreateRoutes(IEndpointRouteBuilder endpoints);
    public string GetPreviewHubRoute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.AutoLinkSignInResult : SignInResult {
    [CompilerGeneratedAttribute]
private static AutoLinkSignInResult <FailedNotLinked>k__BackingField;
    [CompilerGeneratedAttribute]
private static AutoLinkSignInResult <FailedNoEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <Errors>k__BackingField;
    public static AutoLinkSignInResult FailedNotLinked { get; }
    public static AutoLinkSignInResult FailedNoEmail { get; }
    public IReadOnlyCollection`1<string> Errors { get; }
    public AutoLinkSignInResult(IReadOnlyCollection`1<string> errors);
    private static AutoLinkSignInResult();
    [CompilerGeneratedAttribute]
public static AutoLinkSignInResult get_FailedNotLinked();
    [CompilerGeneratedAttribute]
public static AutoLinkSignInResult get_FailedNoEmail();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Errors();
    public static AutoLinkSignInResult FailedException(string error);
    public static AutoLinkSignInResult FailedCreatingUser(IReadOnlyCollection`1<string> errors);
    public static AutoLinkSignInResult FailedLinkingUser(IReadOnlyCollection`1<string> errors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeAntiforgery : object {
    private IAntiforgery _internalAntiForgery;
    private CookieBuilder _angularCookieBuilder;
    [ObsoleteAttribute("Please use the constructor that accepts ILoggerFactory. Will be removed in V14.")]
public BackOfficeAntiforgery(IOptionsMonitor`1<GlobalSettings> globalSettings);
    public BackOfficeAntiforgery(IOptionsMonitor`1<GlobalSettings> globalSettings, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeAntiforgery/<ValidateRequestAsync>d__4")]
public sealed virtual Task`1<Attempt`1<string>> ValidateRequestAsync(HttpContext httpContext);
    public sealed virtual void GetAndStoreTokens(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeAuthenticationBuilder : AuthenticationBuilder {
    private Action`1<BackOfficeExternalLoginProviderOptions> _loginProviderOptions;
    public BackOfficeAuthenticationBuilder(IServiceCollection services, Action`1<BackOfficeExternalLoginProviderOptions> loginProviderOptions);
    public string SchemeForBackOffice(string scheme);
    public virtual AuthenticationBuilder AddRemoteScheme(string authenticationScheme, string displayName, Action`1<TOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeCookieManager : ChunkingCookieManager {
    private IBasicAuthService _basicAuthService;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _explicitPaths;
    private IRuntimeState _runtime;
    private IUmbracoContextAccessor _umbracoContextAccessor;
    private UmbracoRequestPaths _umbracoRequestPaths;
    public BackOfficeCookieManager(IUmbracoContextAccessor umbracoContextAccessor, IRuntimeState runtime, UmbracoRequestPaths umbracoRequestPaths, IBasicAuthService basicAuthService);
    public BackOfficeCookieManager(IUmbracoContextAccessor umbracoContextAccessor, IRuntimeState runtime, IEnumerable`1<string> explicitPaths, UmbracoRequestPaths umbracoRequestPaths, IBasicAuthService basicAuthService);
    private sealed virtual override string Microsoft.AspNetCore.Authentication.Cookies.ICookieManager.GetRequestCookie(HttpContext context, string key);
    public bool ShouldAuthenticateRequest(string absPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeExternalLoginProvider : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationType>k__BackingField;
    [CompilerGeneratedAttribute]
private BackOfficeExternalLoginProviderOptions <Options>k__BackingField;
    public string AuthenticationType { get; }
    public BackOfficeExternalLoginProviderOptions Options { get; }
    public BackOfficeExternalLoginProvider(string authenticationType, IOptionsMonitor`1<BackOfficeExternalLoginProviderOptions> properties);
    [CompilerGeneratedAttribute]
public string get_AuthenticationType();
    [CompilerGeneratedAttribute]
public BackOfficeExternalLoginProviderOptions get_Options();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(BackOfficeExternalLoginProvider other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeExternalLoginProviderOptions : object {
    private string _buttonStyle;
    [CompilerGeneratedAttribute]
private UuiButtonLook <ButtonLook>k__BackingField;
    [CompilerGeneratedAttribute]
private UuiButtonColor <ButtonColor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private ExternalSignInAutoLinkOptions <AutoLinkOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DenyLocalLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoRedirectLoginToExternalProvider>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <CustomBackOfficeView>k__BackingField;
    [ObsoleteAttribute("This is no longer used and will be removed in V15. Please set the ButtonLook and ButtonColor properties instead.")]
public string ButtonStyle { get; public set; }
    public UuiButtonLook ButtonLook { get; public set; }
    public UuiButtonColor ButtonColor { get; public set; }
    public string Icon { get; public set; }
    public ExternalSignInAutoLinkOptions AutoLinkOptions { get; public set; }
    public bool DenyLocalLogin { get; public set; }
    public bool AutoRedirectLoginToExternalProvider { get; public set; }
    [NullableAttribute("2")]
public string CustomBackOfficeView { get; public set; }
    public BackOfficeExternalLoginProviderOptions(string buttonStyle, string icon, ExternalSignInAutoLinkOptions autoLinkOptions, bool denyLocalLogin, bool autoRedirectLoginToExternalProvider, string customBackOfficeView);
    public string get_ButtonStyle();
    public void set_ButtonStyle(string value);
    [CompilerGeneratedAttribute]
public UuiButtonLook get_ButtonLook();
    [CompilerGeneratedAttribute]
public void set_ButtonLook(UuiButtonLook value);
    [CompilerGeneratedAttribute]
public UuiButtonColor get_ButtonColor();
    [CompilerGeneratedAttribute]
public void set_ButtonColor(UuiButtonColor value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public ExternalSignInAutoLinkOptions get_AutoLinkOptions();
    [CompilerGeneratedAttribute]
public void set_AutoLinkOptions(ExternalSignInAutoLinkOptions value);
    [CompilerGeneratedAttribute]
public bool get_DenyLocalLogin();
    [CompilerGeneratedAttribute]
public void set_DenyLocalLogin(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoRedirectLoginToExternalProvider();
    [CompilerGeneratedAttribute]
public void set_AutoRedirectLoginToExternalProvider(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_CustomBackOfficeView();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_CustomBackOfficeView(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeExternalLoginProviders : object {
    private IAuthenticationSchemeProvider _authenticationSchemeProvider;
    private Dictionary`2<string, BackOfficeExternalLoginProvider> _externalLogins;
    public BackOfficeExternalLoginProviders(IEnumerable`1<BackOfficeExternalLoginProvider> externalLogins, IAuthenticationSchemeProvider authenticationSchemeProvider);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeExternalLoginProviders/<GetAsync>d__3")]
public sealed virtual Task`1<BackOfficeExternaLoginProviderScheme> GetAsync(string authenticationType);
    [NullableContextAttribute("2")]
public sealed virtual string GetAutoLoginProvider();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeExternalLoginProviders/<GetBackOfficeProvidersAsync>d__5")]
public sealed virtual Task`1<IEnumerable`1<BackOfficeExternaLoginProviderScheme>> GetBackOfficeProvidersAsync();
    public sealed virtual bool HasDenyLocalLogin();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeExternalLoginsBuilder : object {
    private IServiceCollection _services;
    public BackOfficeExternalLoginsBuilder(IServiceCollection services);
    public BackOfficeExternalLoginsBuilder AddBackOfficeLogin(Action`1<BackOfficeAuthenticationBuilder> build, Action`1<BackOfficeExternalLoginProviderOptions> loginProviderOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeExternaLoginProviderScheme : object {
    [CompilerGeneratedAttribute]
private BackOfficeExternalLoginProvider <ExternalLoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthenticationScheme <AuthenticationScheme>k__BackingField;
    public BackOfficeExternalLoginProvider ExternalLoginProvider { get; }
    public AuthenticationScheme AuthenticationScheme { get; }
    public BackOfficeExternaLoginProviderScheme(BackOfficeExternalLoginProvider externalLoginProvider, AuthenticationScheme authenticationScheme);
    [CompilerGeneratedAttribute]
public BackOfficeExternalLoginProvider get_ExternalLoginProvider();
    [CompilerGeneratedAttribute]
public AuthenticationScheme get_AuthenticationScheme();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Security.BackOfficeSecureDataFormat : object {
    private TimeSpan _loginTimeout;
    private ISecureDataFormat`1<AuthenticationTicket> _ticketDataFormat;
    public BackOfficeSecureDataFormat(TimeSpan loginTimeout, ISecureDataFormat`1<AuthenticationTicket> ticketDataFormat);
    public sealed virtual string Protect(AuthenticationTicket data, string purpose);
    public sealed virtual string Protect(AuthenticationTicket data);
    [NullableContextAttribute("2")]
public sealed virtual AuthenticationTicket Unprotect(string protectedText);
    [NullableContextAttribute("2")]
public sealed virtual AuthenticationTicket Unprotect(string protectedText, string purpose);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeSecurityStampValidator : SecurityStampValidator`1<BackOfficeIdentityUser> {
    public BackOfficeSecurityStampValidator(IOptions`1<BackOfficeSecurityStampValidatorOptions> options, BackOfficeSignInManager signInManager, ISystemClock clock, ILoggerFactory logger);
}
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeSecurityStampValidatorOptions : SecurityStampValidatorOptions {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeSessionIdValidator : object {
    public static string CookieName;
    private GlobalSettings _globalSettings;
    private ISystemClock _systemClock;
    private IBackOfficeUserManager _userManager;
    public BackOfficeSessionIdValidator(ISystemClock systemClock, IOptionsSnapshot`1<GlobalSettings> globalSettings, IBackOfficeUserManager userManager);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeSessionIdValidator/<ValidateSessionAsync>d__5")]
public Task ValidateSessionAsync(TimeSpan validateInterval, CookieValidatePrincipalContext context);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeSessionIdValidator/<ValidateSessionAsync>d__6")]
private Task`1<bool> ValidateSessionAsync(TimeSpan validateInterval, HttpContext httpContext, ICookieManager cookieManager, ISystemClock systemClock, Nullable`1<DateTimeOffset> authTicketIssueDate, ClaimsIdentity currentIdentity);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.Security.BackOfficeSignInManager : UmbracoSignInManager`1<BackOfficeIdentityUser> {
    private IEventAggregator _eventAggregator;
    private IBackOfficeExternalLoginProviders _externalLogins;
    private GlobalSettings _globalSettings;
    private BackOfficeUserManager _userManager;
    protected string AuthenticationType { get; }
    protected string ExternalAuthenticationType { get; }
    protected string TwoFactorAuthenticationType { get; }
    protected string TwoFactorRememberMeAuthenticationType { get; }
    public BackOfficeSignInManager(BackOfficeUserManager userManager, IHttpContextAccessor contextAccessor, IBackOfficeExternalLoginProviders externalLogins, IUserClaimsPrincipalFactory`1<BackOfficeIdentityUser> claimsFactory, IOptions`1<IdentityOptions> optionsAccessor, IOptions`1<GlobalSettings> globalSettings, ILogger`1<SignInManager`1<BackOfficeIdentityUser>> logger, IAuthenticationSchemeProvider schemes, IUserConfirmation`1<BackOfficeIdentityUser> confirmation, IEventAggregator eventAggregator, IOptions`1<SecuritySettings> securitySettings, IRequestCache requestCache);
    [ObsoleteAttribute("Use non-obsolete constructor. This is scheduled for removal in V15.")]
public BackOfficeSignInManager(BackOfficeUserManager userManager, IHttpContextAccessor contextAccessor, IBackOfficeExternalLoginProviders externalLogins, IUserClaimsPrincipalFactory`1<BackOfficeIdentityUser> claimsFactory, IOptions`1<IdentityOptions> optionsAccessor, IOptions`1<GlobalSettings> globalSettings, ILogger`1<SignInManager`1<BackOfficeIdentityUser>> logger, IAuthenticationSchemeProvider schemes, IUserConfirmation`1<BackOfficeIdentityUser> confirmation, IEventAggregator eventAggregator, IOptions`1<SecuritySettings> securitySettings);
    [ObsoleteAttribute("Use non-obsolete constructor. This is scheduled for removal in V14.")]
public BackOfficeSignInManager(BackOfficeUserManager userManager, IHttpContextAccessor contextAccessor, IBackOfficeExternalLoginProviders externalLogins, IUserClaimsPrincipalFactory`1<BackOfficeIdentityUser> claimsFactory, IOptions`1<IdentityOptions> optionsAccessor, IOptions`1<GlobalSettings> globalSettings, ILogger`1<SignInManager`1<BackOfficeIdentityUser>> logger, IAuthenticationSchemeProvider schemes, IUserConfirmation`1<BackOfficeIdentityUser> confirmation, IEventAggregator eventAggregator);
    [ObsoleteAttribute("Use non-obsolete constructor. This is scheduled for removal in V14.")]
public BackOfficeSignInManager(BackOfficeUserManager userManager, IHttpContextAccessor contextAccessor, IBackOfficeExternalLoginProviders externalLogins, IUserClaimsPrincipalFactory`1<BackOfficeIdentityUser> claimsFactory, IOptions`1<IdentityOptions> optionsAccessor, IOptions`1<GlobalSettings> globalSettings, ILogger`1<SignInManager`1<BackOfficeIdentityUser>> logger, IAuthenticationSchemeProvider schemes, IUserConfirmation`1<BackOfficeIdentityUser> confirmation);
    protected virtual string get_AuthenticationType();
    protected virtual string get_ExternalAuthenticationType();
    protected virtual string get_TwoFactorAuthenticationType();
    protected virtual string get_TwoFactorRememberMeAuthenticationType();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeSignInManager/<ExternalLoginSignInAsync>d__16")]
public sealed virtual Task`1<SignInResult> ExternalLoginSignInAsync(ExternalLoginInfo loginInfo, bool isPersistent, bool bypassTwoFactor);
    [NullableContextAttribute("2")]
public virtual AuthenticationProperties ConfigureExternalAuthenticationProperties(string provider, string redirectUrl, string userId);
    public virtual Task`1<IEnumerable`1<AuthenticationScheme>> GetExternalAuthenticationSchemesAsync();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeSignInManager/<HandleSignIn>d__19")]
protected virtual Task`1<SignInResult> HandleSignIn(BackOfficeIdentityUser user, string username, SignInResult result);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeSignInManager/<AutoLinkAndSignInExternalAccount>d__20")]
private Task`1<SignInResult> AutoLinkAndSignInExternalAccount(ExternalLoginInfo loginInfo, ExternalSignInAutoLinkOptions autoLinkOptions);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeSignInManager/<LinkUser>d__21")]
private Task`1<SignInResult> LinkUser(BackOfficeIdentityUser autoLinkUser, ExternalLoginInfo loginInfo);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.BackOfficeSignInManager/<SignInOrTwoFactorAsync>d__22")]
protected virtual Task`1<SignInResult> SignInOrTwoFactorAsync(BackOfficeIdentityUser user, bool isPersistent, string loginProvider, bool bypassTwoFactor);
    protected void NotifyRequiresTwoFactor(BackOfficeIdentityUser user);
    private T Notify(BackOfficeIdentityUser currentUser, Func`2<BackOfficeIdentityUser, T> createNotification);
    private void LogFailedExternalLogin(ExternalLoginInfo loginInfo, BackOfficeIdentityUser user);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SignInResult> <>n__0(BackOfficeIdentityUser user, string username, SignInResult result);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SignInResult> <>n__1(BackOfficeIdentityUser user, bool isPersistent, string loginProvider, bool bypassTwoFactor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Security.BackOfficeUserManagerAuditer : object {
    private IAuditService _auditService;
    private IUserService _userService;
    public BackOfficeUserManagerAuditer(IAuditService auditService, IUserService userService);
    public sealed virtual void Handle(UserForgotPasswordChangedNotification notification);
    public sealed virtual void Handle(UserForgotPasswordRequestedNotification notification);
    public sealed virtual void Handle(UserLoginFailedNotification notification);
    public sealed virtual void Handle(UserLoginSuccessNotification notification);
    public sealed virtual void Handle(UserLogoutSuccessNotification notification);
    public sealed virtual void Handle(UserPasswordChangedNotification notification);
    public sealed virtual void Handle(UserPasswordResetNotification notification);
    private static string FormatEmail(IMembershipUser user);
    private void WriteAudit(string performingId, string affectedId, string ipAddress, string eventType, string eventDetails, string affectedDetails);
    private void WriteAudit(int performingId, string performingDetails, int affectedId, string ipAddress, string eventType, string eventDetails, string affectedDetails);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.ConfigureBackOfficeCookieOptions : object {
    private IBasicAuthService _basicAuthService;
    private IDataProtectionProvider _dataProtection;
    private GlobalSettings _globalSettings;
    private IHostingEnvironment _hostingEnvironment;
    private IIpResolver _ipResolver;
    private IRuntimeState _runtimeState;
    private SecuritySettings _securitySettings;
    private IServiceProvider _serviceProvider;
    private ISystemClock _systemClock;
    private IUmbracoContextAccessor _umbracoContextAccessor;
    private UmbracoRequestPaths _umbracoRequestPaths;
    private IUserService _userService;
    public ConfigureBackOfficeCookieOptions(IServiceProvider serviceProvider, IUmbracoContextAccessor umbracoContextAccessor, IOptions`1<SecuritySettings> securitySettings, IOptions`1<GlobalSettings> globalSettings, IHostingEnvironment hostingEnvironment, IRuntimeState runtimeState, IDataProtectionProvider dataProtection, IUserService userService, IIpResolver ipResolver, ISystemClock systemClock, UmbracoRequestPaths umbracoRequestPaths, IBasicAuthService basicAuthService);
    public sealed virtual void Configure(string name, CookieAuthenticationOptions options);
    public sealed virtual void Configure(CookieAuthenticationOptions options);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.ConfigureBackOfficeCookieOptions/<EnsureValidSessionId>d__15")]
private Task EnsureValidSessionId(CookieValidatePrincipalContext context);
    private void EnsureTicketRenewalIfKeepUserLoggedIn(CookieValidatePrincipalContext context);
    private bool IsRemainingSecondsRequest(CookieValidatePrincipalContext context);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Security.ConfigureBackOfficeCookieOptions/<<Configure>b__14_0>d")]
[CompilerGeneratedAttribute]
private Task <Configure>b__14_0(CookieValidatePrincipalContext ctx);
    [CompilerGeneratedAttribute]
private Task <Configure>b__14_1(CookieSigningInContext ctx);
    [CompilerGeneratedAttribute]
private Task <Configure>b__14_3(CookieSigningOutContext ctx);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.ConfigureBackOfficeIdentityOptions : object {
    private UserPasswordConfigurationSettings _userPasswordConfiguration;
    private SecuritySettings _securitySettings;
    [ObsoleteAttribute("Use the constructor that accepts SecuritySettings. Will be removed in V13.")]
public ConfigureBackOfficeIdentityOptions(IOptions`1<UserPasswordConfigurationSettings> userPasswordConfiguration);
    public ConfigureBackOfficeIdentityOptions(IOptions`1<UserPasswordConfigurationSettings> userPasswordConfiguration, IOptions`1<SecuritySettings> securitySettings);
    public sealed virtual void Configure(BackOfficeIdentityOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.ConfigureBackOfficeSecurityStampValidatorOptions : object {
    private SecuritySettings _securitySettings;
    public ConfigureBackOfficeSecurityStampValidatorOptions(IOptions`1<SecuritySettings> securitySettings);
    public sealed virtual void Configure(BackOfficeSecurityStampValidatorOptions options);
}
public class Umbraco.Cms.Web.BackOffice.Security.DefaultBackOfficeTwoFactorOptions : object {
    [NullableContextAttribute("1")]
public sealed virtual string GetTwoFactorView(string username);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.ExternalLoginSignInResult : SignInResult {
    [CompilerGeneratedAttribute]
private static ExternalLoginSignInResult <NotAllowed>k__BackingField;
    public static ExternalLoginSignInResult NotAllowed { get; }
    private static ExternalLoginSignInResult();
    [CompilerGeneratedAttribute]
public static ExternalLoginSignInResult get_NotAllowed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.ExternalSignInAutoLinkOptions : object {
    [NullableAttribute("2")]
private string _defaultCulture;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<BackOfficeIdentityUser, ExternalLoginInfo> <OnAutoLinking>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<BackOfficeIdentityUser, ExternalLoginInfo, bool> <OnExternalLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoLinkExternalAccount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowManualLinking>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DefaultUserGroups>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
public Action`2<BackOfficeIdentityUser, ExternalLoginInfo> OnAutoLinking { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IgnoreDataMemberAttribute]
public Func`3<BackOfficeIdentityUser, ExternalLoginInfo, bool> OnExternalLogin { get; public set; }
    public bool AutoLinkExternalAccount { get; }
    public bool AllowManualLinking { get; protected set; }
    public String[] DefaultUserGroups { get; }
    [NullableContextAttribute("2")]
public ExternalSignInAutoLinkOptions(bool autoLinkExternalAccount, String[] defaultUserGroups, string defaultCulture, bool allowManualLinking);
    [CompilerGeneratedAttribute]
public Action`2<BackOfficeIdentityUser, ExternalLoginInfo> get_OnAutoLinking();
    [CompilerGeneratedAttribute]
public void set_OnAutoLinking(Action`2<BackOfficeIdentityUser, ExternalLoginInfo> value);
    [CompilerGeneratedAttribute]
public Func`3<BackOfficeIdentityUser, ExternalLoginInfo, bool> get_OnExternalLogin();
    [CompilerGeneratedAttribute]
public void set_OnExternalLogin(Func`3<BackOfficeIdentityUser, ExternalLoginInfo, bool> value);
    [CompilerGeneratedAttribute]
public bool get_AutoLinkExternalAccount();
    [CompilerGeneratedAttribute]
public bool get_AllowManualLinking();
    [CompilerGeneratedAttribute]
protected void set_AllowManualLinking(bool value);
    [CompilerGeneratedAttribute]
public String[] get_DefaultUserGroups();
    public string GetUserAutoLinkCulture(GlobalSettings globalSettings);
}
[NullableContextAttribute("1")]
public interface Umbraco.Cms.Web.BackOffice.Security.IBackOfficeAntiforgery {
    public abstract virtual Task`1<Attempt`1<string>> ValidateRequestAsync(HttpContext httpContext);
    public abstract virtual void GetAndStoreTokens(HttpContext httpContext);
}
[NullableContextAttribute("1")]
public interface Umbraco.Cms.Web.BackOffice.Security.IBackOfficeExternalLoginProviders {
    public abstract virtual Task`1<BackOfficeExternaLoginProviderScheme> GetAsync(string authenticationType);
    public abstract virtual Task`1<IEnumerable`1<BackOfficeExternaLoginProviderScheme>> GetBackOfficeProvidersAsync();
    [NullableContextAttribute("2")]
public abstract virtual string GetAutoLoginProvider();
    public abstract virtual bool HasDenyLocalLogin();
}
[NullableContextAttribute("1")]
public interface Umbraco.Cms.Web.BackOffice.Security.IBackOfficeTwoFactorOptions {
    public abstract virtual string GetTwoFactorView(string username);
}
[ObsoleteAttribute("Not used anymore")]
public class Umbraco.Cms.Web.BackOffice.Security.NoopBackOfficeTwoFactorOptions : object {
    [NullableContextAttribute("1")]
public sealed virtual string GetTwoFactorView(string username);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Security.TwoFactorLoginViewOptions : object {
    [CompilerGeneratedAttribute]
private string <SetupViewPath>k__BackingField;
    public string SetupViewPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SetupViewPath();
    [CompilerGeneratedAttribute]
public void set_SetupViewPath(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Services.ConflictingRouteService : object {
    private TypeLoader _typeLoader;
    public ConflictingRouteService(TypeLoader typeLoader);
    public sealed virtual bool HasConflictingRoutes(String& controllerName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Services.IconService : object {
    private IAppPolicyCache _cache;
    private IHostingEnvironment _hostingEnvironment;
    private IWebHostEnvironment _webHostEnvironment;
    private GlobalSettings _globalSettings;
    [ObsoleteAttribute("Use other ctor - Will be removed in Umbraco 12")]
public IconService(IOptionsMonitor`1<GlobalSettings> globalSettings, IHostingEnvironment hostingEnvironment, AppCaches appCaches);
    public IconService(IOptionsMonitor`1<GlobalSettings> globalSettings, IHostingEnvironment hostingEnvironment, AppCaches appCaches, IWebHostEnvironment webHostEnvironment);
    public sealed virtual IReadOnlyDictionary`2<string, string> GetIcons();
    public sealed virtual IconModel GetIcon(string iconName);
    private IconModel GetIcon(FileInfo fileInfo);
    private IconModel CreateIconModel(string iconName, string iconPath);
    private IEnumerable`1<FileInfo> GetAllIconsFiles();
    [IteratorStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Services.IconService/<GetIconsFiles>d__11")]
private static IEnumerable`1<FileInfo> GetIconsFiles(IFileProvider fileProvider, string path);
    private IReadOnlyDictionary`2<string, string> GetIconDictionary();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__5_0(GlobalSettings x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, string> <GetIconDictionary>b__12_0();
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Will be moved to a new namespace in V14")]
public interface Umbraco.Cms.Web.BackOffice.Services.IWebhookPresentationFactory {
    public abstract virtual WebhookViewModel Create(IWebhook webhook);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Services.WebhookPresentationFactory : object {
    private WebhookEventCollection _webhookEventCollection;
    public WebhookPresentationFactory(WebhookEventCollection webhookEventCollection);
    public sealed virtual WebhookViewModel Create(IWebhook webhook);
    private WebhookEventViewModel Create(string alias);
}
[NullableContextAttribute("1")]
public interface Umbraco.Cms.Web.BackOffice.SignalR.IPreviewHub {
    public abstract virtual Task refreshed(int id);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Cms.Web.BackOffice.SignalR.PreviewHub : Hub`1<IPreviewHub> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.SignalR.PreviewHubUpdater : object {
    private Lazy`1<IHubContext`2<PreviewHub, IPreviewHub>> _hubContext;
    public PreviewHubUpdater(Lazy`1<IHubContext`2<PreviewHub, IPreviewHub>> hubContext);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.SignalR.PreviewHubUpdater/<HandleAsync>d__2")]
public sealed virtual Task HandleAsync(ContentCacheRefresherNotification args, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Telemetry.ExternalLoginTelemetryProvider : object {
    private IBackOfficeExternalLoginProviders _externalLoginProviders;
    public ExternalLoginTelemetryProvider(IBackOfficeExternalLoginProviders externalLoginProviders);
    [IteratorStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Telemetry.ExternalLoginTelemetryProvider/<GetInformation>d__2")]
public sealed virtual IEnumerable`1<UsageInformation> GetInformation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AngularJsonOnlyConfigurationAttribute]
[PluginControllerAttribute("UmbracoTrees")]
public class Umbraco.Cms.Web.BackOffice.Trees.ApplicationTreeController : UmbracoAuthorizedApiController {
    private ITreeService _treeService;
    private ISectionService _sectionService;
    private ILocalizedTextService _localizedTextService;
    private IControllerFactory _controllerFactory;
    private IActionDescriptorCollectionProvider _actionDescriptorCollectionProvider;
    public ApplicationTreeController(ITreeService treeService, ISectionService sectionService, ILocalizedTextService localizedTextService, IControllerFactory controllerFactory, IActionDescriptorCollectionProvider actionDescriptorCollectionProvider);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ApplicationTreeController/<GetApplicationTrees>d__6")]
public Task`1<ActionResult`1<TreeRootNode>> GetApplicationTrees(string application, string tree, FormCollection queryStrings, TreeUse use);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ApplicationTreeController/<TryGetRootNode>d__7")]
private Task`1<ActionResult`1<TreeNode>> TryGetRootNode(Tree tree, FormCollection querystring);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ApplicationTreeController/<GetTreeRootNode>d__8")]
private Task`1<ActionResult`1<TreeRootNode>> GetTreeRootNode(Tree tree, int id, FormCollection querystring);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ApplicationTreeController/<GetRootNode>d__9")]
private Task`1<ActionResult`1<TreeNode>> GetRootNode(Tree tree, FormCollection querystring);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ApplicationTreeController/<GetChildren>d__10")]
private Task`1<ActionResult`1<TreeNodeCollection>> GetChildren(Tree tree, int id, FormCollection querystring);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ApplicationTreeController/<GetApiControllerProxy>d__11")]
private Task`1<ActionResult`1<object>> GetApiControllerProxy(Type controllerType, string action, FormCollection querystring);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "contentBlueprints")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.ContentBlueprintTreeController : TreeController {
    private IContentService _contentService;
    private IContentTypeService _contentTypeService;
    private IEntityService _entityService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public ContentBlueprintTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IContentService contentService, IContentTypeService contentTypeService, IEntityService entityService, IEventAggregator eventAggregator);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("content", "content")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
[SearchableTreeAttribute("searchResultFormatter", "configureContentResult", "10")]
public class Umbraco.Cms.Web.BackOffice.Trees.ContentTreeController : ContentTreeControllerBase {
    private ActionCollection _actions;
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IContentService _contentService;
    private IEmailSender _emailSender;
    private IEntityService _entityService;
    private ILocalizationService _localizationService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    private IPublicAccessService _publicAccessService;
    private UmbracoTreeSearcher _treeSearcher;
    private IUserService _userService;
    [NullableAttribute("2")]
private Int32[] _userStartNodes;
    protected int RecycleBinId { get; }
    protected bool RecycleBinSmells { get; }
    protected Int32[] UserStartNodes { get; }
    protected UmbracoObjectTypes UmbracoObjectType { get; }
    public ContentTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, ILogger`1<ContentTreeController> logger, ActionCollection actionCollection, IUserService userService, IDataTypeService dataTypeService, UmbracoTreeSearcher treeSearcher, ActionCollection actions, IContentService contentService, IPublicAccessService publicAccessService, ILocalizationService localizationService, IEventAggregator eventAggregator, IEmailSender emailSender, AppCaches appCaches);
    protected virtual int get_RecycleBinId();
    protected virtual bool get_RecycleBinSmells();
    protected virtual Int32[] get_UserStartNodes();
    protected virtual UmbracoObjectTypes get_UmbracoObjectType();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ContentTreeController/<SearchAsync>d__21")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    protected virtual TreeNode GetSingleTreeNode(IEntitySlim entity, string parentId, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> PerformGetMenuForNode(string id, FormCollection queryStrings);
    protected virtual bool HasPathAccess(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<IEnumerable`1<IEntitySlim>> GetChildEntities(string id, FormCollection queryStrings);
    protected MenuItemCollection GetAllNodeMenuItems(IUmbracoEntity item);
    protected MenuItemCollection GetNodeMenuItemsForDeletedContent(IUmbracoEntity item);
    private void EnsureName(IEntitySlim entity, string culture);
    private void AddActionNode(IUmbracoEntity item, MenuItemCollection menu, bool hasSeparator, bool opensDialog, bool useLegacyIcon);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ContentTreeController/<SearchAsync>d__30")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom, string culture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Umbraco.Cms.Web.BackOffice.Trees.ContentTreeControllerBase : TreeController {
    private static Char[] Comma;
    private ActionCollection _actionCollection;
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IDataTypeService _dataTypeService;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, IEntitySlim> _entityCache;
    private IEntityService _entityService;
    private ILogger`1<ContentTreeControllerBase> _logger;
    private IUserService _userService;
    private Nullable`1<bool> _ignoreUserStartNodes;
    [CompilerGeneratedAttribute]
private IMenuItemCollectionFactory <MenuItemCollectionFactory>k__BackingField;
    public IMenuItemCollectionFactory MenuItemCollectionFactory { get; }
    protected int RecycleBinId { get; }
    protected bool RecycleBinSmells { get; }
    protected Int32[] UserStartNodes { get; }
    protected UmbracoObjectTypes UmbracoObjectType { get; }
    protected ContentTreeControllerBase(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, ILogger`1<ContentTreeControllerBase> logger, ActionCollection actionCollection, IUserService userService, IDataTypeService dataTypeService, IEventAggregator eventAggregator, AppCaches appCaches);
    private static ContentTreeControllerBase();
    [CompilerGeneratedAttribute]
public IMenuItemCollectionFactory get_MenuItemCollectionFactory();
    protected abstract virtual int get_RecycleBinId();
    protected abstract virtual bool get_RecycleBinSmells();
    protected abstract virtual Int32[] get_UserStartNodes();
    protected abstract virtual UmbracoObjectTypes get_UmbracoObjectType();
    public sealed virtual ActionResult`1<TreeNode> GetTreeNode(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected abstract virtual TreeNode GetSingleTreeNode(IEntitySlim entity, string parentId, FormCollection queryStrings);
    internal TreeNode GetSingleTreeNodeWithAccessCheck(IEntitySlim e, string parentId, FormCollection queryStrings, Int32[] startNodeIds, String[] startNodePaths);
    [NullableContextAttribute("2")]
private void GetUserStartNodes(Int32[]& startNodeIds, String[]& startNodePaths);
    protected virtual ActionResult`1<TreeNodeCollection> PerformGetTreeNodes(string id, FormCollection queryStrings);
    private int GetTopNodeId(IUmbracoEntity entity);
    protected abstract virtual ActionResult`1<MenuItemCollection> PerformGetMenuForNode(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<IEnumerable`1<IEntitySlim>> GetChildEntities(string id, FormCollection queryStrings);
    private IEnumerable`1<IEntitySlim> GetChildrenFromEntityService(int entityId);
    protected abstract virtual bool HasPathAccess(string id, FormCollection queryStrings);
    protected bool HasPathAccess(IUmbracoEntity entity, FormCollection queryStrings);
    protected sealed virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected bool ShouldRenderChildrenOfContainer(IEntitySlim e);
    private ActionResult`1<TreeNodeCollection> GetTreeNodesInternal(string id, FormCollection queryStrings);
    protected sealed virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    protected void FilterUserAllowedMenuItems(MenuItemCollection menuWithAllItems, IEnumerable`1<MenuItem> userAllowedMenuItems);
    internal IEnumerable`1<MenuItem> GetAllowedUserMenuItemsForNode(IUmbracoEntity dd);
    internal bool CanUserAccessNode(IUmbracoEntity doc, IEnumerable`1<MenuItem> allowedUserOptions, string culture);
    internal Tuple`2<Nullable`1<Guid>, Nullable`1<int>> GetIdentifierFromString(string id);
    internal IEntitySlim GetEntityFromId(string id);
    internal bool IgnoreUserStartNodes(FormCollection queryStrings);
    [CompilerGeneratedAttribute]
private IEntitySlim <GetEntityFromId>b__42_0(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "documentTypes")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.ContentTypeTreeController : TreeController {
    private IContentTypeService _contentTypeService;
    private IEntityService _entityService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    private UmbracoTreeSearcher _treeSearcher;
    public ContentTypeTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, UmbracoTreeSearcher treeSearcher, IMenuItemCollectionFactory menuItemCollectionFactory, IContentTypeService contentTypeService, IEntityService entityService, IEventAggregator eventAggregator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.ContentTypeTreeController/<SearchAsync>d__5")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "dataTypes")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.DataTypeTreeController : TreeController {
    private IDataTypeService _dataTypeService;
    private IEntityService _entityService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    private UmbracoTreeSearcher _treeSearcher;
    public DataTypeTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, UmbracoTreeSearcher treeSearcher, IMenuItemCollectionFactory menuItemCollectionFactory, IEntityService entityService, IDataTypeService dataTypeService, IEventAggregator eventAggregator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.DataTypeTreeController/<SearchAsync>d__5")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    private static IEnumerable`1<int> GetNonDeletableSystemDataTypeIds();
    private static IEnumerable`1<int> GetNonDeletableSystemListViewDataTypeIds();
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
[TreeAttribute("translation", "dictionary")]
public class Umbraco.Cms.Web.BackOffice.Trees.DictionaryTreeController : TreeController {
    private ILocalizationService _localizationService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public DictionaryTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, ILocalizationService localizationService, IEventAggregator eventAggregator);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    [CompilerGeneratedAttribute]
internal static Func`2<IDictionaryItem, string> <GetTreeNodes>g__ItemSort|4_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TreeAttribute]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.FilesTreeController : FileSystemTreeController {
    private static String[] ExtensionsStatic;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    protected IFileSystem FileSystem { get; }
    protected String[] Extensions { get; }
    protected string FileIcon { get; }
    public FilesTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IPhysicalFileSystem fileSystem, IEventAggregator eventAggregator);
    private static FilesTreeController();
    [CompilerGeneratedAttribute]
protected virtual IFileSystem get_FileSystem();
    protected virtual String[] get_Extensions();
    protected virtual string get_FileIcon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Umbraco.Cms.Web.BackOffice.Trees.FileSystemTreeController : TreeController {
    [CompilerGeneratedAttribute]
private IMenuItemCollectionFactory <MenuItemCollectionFactory>k__BackingField;
    [NullableAttribute("2")]
protected IFileSystem FileSystem { get; }
    protected IMenuItemCollectionFactory MenuItemCollectionFactory { get; }
    protected String[] Extensions { get; }
    protected string FileIcon { get; }
    protected FileSystemTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IEventAggregator eventAggregator);
    [NullableContextAttribute("2")]
protected abstract virtual IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
protected IMenuItemCollectionFactory get_MenuItemCollectionFactory();
    protected abstract virtual String[] get_Extensions();
    protected abstract virtual string get_FileIcon();
    protected virtual void OnRenderFileNode(TreeNode& treeNode);
    protected virtual void OnRenderFolderNode(TreeNode& treeNode);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual MenuItemCollection GetMenuForRootNode(FormCollection queryStrings);
    protected virtual MenuItemCollection GetMenuForFolder(string path, FormCollection queryStrings);
    protected virtual MenuItemCollection GetMenuForFile(string path, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GetTreeNodes>b__12_0(string x);
}
[NullableContextAttribute("1")]
public interface Umbraco.Cms.Web.BackOffice.Trees.ITreeNodeController {
    public abstract virtual ActionResult`1<TreeNode> GetTreeNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "languages")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.LanguageTreeController : TreeController {
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public LanguageTreeController(ILocalizedTextService textService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IEventAggregator eventAggregator, IMenuItemCollectionFactory menuItemCollectionFactory);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "logViewer")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.LogViewerTreeController : TreeController {
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public LogViewerTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IEventAggregator eventAggregator, IMenuItemCollectionFactory menuItemCollectionFactory);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "macros")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.MacrosTreeController : TreeController {
    private IMacroService _macroService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public MacrosTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IMacroService macroService, IEventAggregator eventAggregator);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("media", "media")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
[SearchableTreeAttribute("searchResultFormatter", "configureMediaResult", "20")]
public class Umbraco.Cms.Web.BackOffice.Trees.MediaTreeController : ContentTreeControllerBase {
    private AppCaches _appCaches;
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IEntityService _entityService;
    private IMediaService _mediaService;
    private UmbracoTreeSearcher _treeSearcher;
    [NullableAttribute("2")]
private Int32[] _userStartNodes;
    protected int RecycleBinId { get; }
    protected bool RecycleBinSmells { get; }
    protected Int32[] UserStartNodes { get; }
    protected UmbracoObjectTypes UmbracoObjectType { get; }
    public MediaTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IEntityService entityService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, ILogger`1<MediaTreeController> logger, ActionCollection actionCollection, IUserService userService, IDataTypeService dataTypeService, UmbracoTreeSearcher treeSearcher, IMediaService mediaService, IEventAggregator eventAggregator, AppCaches appCaches);
    protected virtual int get_RecycleBinId();
    protected virtual bool get_RecycleBinSmells();
    protected virtual Int32[] get_UserStartNodes();
    protected virtual UmbracoObjectTypes get_UmbracoObjectType();
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.MediaTreeController/<SearchAsync>d__15")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    protected virtual TreeNode GetSingleTreeNode(IEntitySlim entity, string parentId, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> PerformGetMenuForNode(string id, FormCollection queryStrings);
    protected virtual bool HasPathAccess(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "mediaTypes")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.MediaTypeTreeController : TreeController {
    private IEntityService _entityService;
    private IMediaTypeService _mediaTypeService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    private UmbracoTreeSearcher _treeSearcher;
    public MediaTypeTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, UmbracoTreeSearcher treeSearcher, IMenuItemCollectionFactory menuItemCollectionFactory, IMediaTypeService mediaTypeService, IEntityService entityService, IEventAggregator eventAggregator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.MediaTypeTreeController/<SearchAsync>d__5")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("member", "memberGroups")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.MemberGroupTreeController : MemberTypeAndGroupTreeControllerBase {
    private IMemberGroupService _memberGroupService;
    [ActivatorUtilitiesConstructorAttribute]
public MemberGroupTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IMemberGroupService memberGroupService, IEventAggregator eventAggregator, IMemberTypeService memberTypeService);
    [ObsoleteAttribute("Use ctor with all params")]
public MemberGroupTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IMemberGroupService memberGroupService, IEventAggregator eventAggregator);
    protected virtual IEnumerable`1<TreeNode> GetTreeNodesFromService(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("member", "member")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
[SearchableTreeAttribute("searchResultFormatter", "configureMemberResult")]
public class Umbraco.Cms.Web.BackOffice.Trees.MemberTreeController : TreeController {
    private IBackOfficeSecurityAccessor _backofficeSecurityAccessor;
    private IMemberService _memberService;
    private IMemberTypeService _memberTypeService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    private UmbracoTreeSearcher _treeSearcher;
    public MemberTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, UmbracoTreeSearcher treeSearcher, IMenuItemCollectionFactory menuItemCollectionFactory, IMemberService memberService, IMemberTypeService memberTypeService, IBackOfficeSecurityAccessor backofficeSecurityAccessor, IEventAggregator eventAggregator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.MemberTreeController/<SearchAsync>d__6")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    public sealed virtual ActionResult`1<TreeNode> GetTreeNode(string id, FormCollection queryStrings);
    protected ActionResult`1<TreeNode> GetSingleTreeNode(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public abstract class Umbraco.Cms.Web.BackOffice.Trees.MemberTypeAndGroupTreeControllerBase : TreeController {
    private IMemberTypeService _memberTypeService;
    [CompilerGeneratedAttribute]
private IMenuItemCollectionFactory <MenuItemCollectionFactory>k__BackingField;
    public IMenuItemCollectionFactory MenuItemCollectionFactory { get; }
    protected MemberTypeAndGroupTreeControllerBase(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IEventAggregator eventAggregator, IMemberTypeService memberTypeService);
    [CompilerGeneratedAttribute]
public IMenuItemCollectionFactory get_MenuItemCollectionFactory();
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    protected abstract virtual IEnumerable`1<TreeNode> GetTreeNodesFromService(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CoreTreeAttribute]
[AuthorizeAttribute]
[TreeAttribute("settings", "memberTypes")]
[PluginControllerAttribute("UmbracoTrees")]
public class Umbraco.Cms.Web.BackOffice.Trees.MemberTypeTreeController : MemberTypeAndGroupTreeControllerBase {
    private IMemberTypeService _memberTypeService;
    private UmbracoTreeSearcher _treeSearcher;
    public MemberTypeTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, UmbracoTreeSearcher treeSearcher, IMemberTypeService memberTypeService, IEventAggregator eventAggregator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.MemberTypeTreeController/<SearchAsync>d__3")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual IEnumerable`1<TreeNode> GetTreeNodesFromService(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("packages", "packages")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.PackagesTreeController : TreeController {
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public PackagesTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IEventAggregator eventAggregator);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TreeAttribute("settings", "partialViewMacros")]
[AuthorizeAttribute]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.PartialViewMacrosTreeController : PartialViewsTreeController {
    private static String[] ExtensionsStatic;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [NullableAttribute("2")]
protected IFileSystem FileSystem { get; }
    protected String[] Extensions { get; }
    protected string FileIcon { get; }
    public PartialViewMacrosTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, FileSystems fileSystems, IEventAggregator eventAggregator);
    private static PartialViewMacrosTreeController();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual IFileSystem get_FileSystem();
    protected virtual String[] get_Extensions();
    protected virtual string get_FileIcon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TreeAttribute("settings", "partialViews")]
[AuthorizeAttribute]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.PartialViewsTreeController : FileSystemTreeController {
    private static String[] ExtensionsStatic;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [NullableAttribute("2")]
protected IFileSystem FileSystem { get; }
    protected String[] Extensions { get; }
    protected string FileIcon { get; }
    public PartialViewsTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, FileSystems fileSystems, IEventAggregator eventAggregator);
    private static PartialViewsTreeController();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual IFileSystem get_FileSystem();
    protected virtual String[] get_Extensions();
    protected virtual string get_FileIcon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "relationTypes")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.RelationTypeTreeController : TreeController {
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    private IRelationService _relationService;
    public RelationTypeTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, IRelationService relationService, IEventAggregator eventAggregator);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CoreTreeAttribute]
[TreeAttribute("settings", "scripts")]
public class Umbraco.Cms.Web.BackOffice.Trees.ScriptsTreeController : FileSystemTreeController {
    private static String[] ExtensionsStatic;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [NullableAttribute("2")]
protected IFileSystem FileSystem { get; }
    protected String[] Extensions { get; }
    protected string FileIcon { get; }
    public ScriptsTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, FileSystems fileSystems, IEventAggregator eventAggregator);
    private static ScriptsTreeController();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual IFileSystem get_FileSystem();
    protected virtual String[] get_Extensions();
    protected virtual string get_FileIcon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.StaticFilesTreeController : TreeController {
    private static string AppPlugins;
    private static string Webroot;
    private IFileSystem _fileSystem;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public StaticFilesTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IEventAggregator eventAggregator, IPhysicalFileSystem fileSystem, IMenuItemCollectionFactory menuItemCollectionFactory);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CoreTreeAttribute]
[TreeAttribute("settings", "stylesheets")]
public class Umbraco.Cms.Web.BackOffice.Trees.StylesheetsTreeController : FileSystemTreeController {
    private static String[] ExtensionsStatic;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [NullableAttribute("2")]
protected IFileSystem FileSystem { get; }
    protected String[] Extensions { get; }
    protected string FileIcon { get; }
    public StylesheetsTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IMenuItemCollectionFactory menuItemCollectionFactory, FileSystems fileSystems, IEventAggregator eventAggregator);
    private static StylesheetsTreeController();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual IFileSystem get_FileSystem();
    protected virtual String[] get_Extensions();
    protected virtual string get_FileIcon();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "templates")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.TemplatesTreeController : TreeController {
    private IFileService _fileService;
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    private UmbracoTreeSearcher _treeSearcher;
    public TemplatesTreeController(UmbracoTreeSearcher treeSearcher, IMenuItemCollectionFactory menuItemCollectionFactory, ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IFileService fileService, IEventAggregator eventAggregator);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.TemplatesTreeController/<SearchAsync>d__4")]
public sealed virtual Task`1<EntitySearchResults> SearchAsync(string query, int pageSize, long pageIndex, string searchFrom);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    private EntitySlim FromTemplate(ITemplate template);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Umbraco.Cms.Web.BackOffice.Trees.TreeAttribute : Attribute {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <SectionAlias>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <TreeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeTitle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeUse <TreeUse>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingleNodeTree>k__BackingField;
    [NullableAttribute("1")]
public string SectionAlias { get; }
    [NullableAttribute("1")]
public string TreeAlias { get; }
    public string TreeTitle { get; public set; }
    public string TreeGroup { get; public set; }
    public TreeUse TreeUse { get; public set; }
    public int SortOrder { get; public set; }
    public bool IsSingleNodeTree { get; public set; }
    [NullableContextAttribute("1")]
public TreeAttribute(string sectionAlias, string treeAlias);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_SectionAlias();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TreeAlias();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TreeTitle();
    [CompilerGeneratedAttribute]
public void set_TreeTitle(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TreeGroup();
    [CompilerGeneratedAttribute]
public void set_TreeGroup(string value);
    [CompilerGeneratedAttribute]
public sealed virtual TreeUse get_TreeUse();
    [CompilerGeneratedAttribute]
public void set_TreeUse(TreeUse value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSingleNodeTree();
    [CompilerGeneratedAttribute]
public void set_IsSingleNodeTree(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Umbraco.Cms.Web.BackOffice.Trees.TreeCollectionBuilder : object {
    private List`1<Tree> _trees;
    public sealed virtual TreeCollection CreateCollection(IServiceProvider factory);
    public sealed virtual void RegisterWith(IServiceCollection services);
    public void AddTree(Tree treeDefinition);
    [NullableContextAttribute("0")]
public void AddTreeController();
    public void AddTreeController(Type controllerType);
    public void AddTreeControllers(IEnumerable`1<Type> controllerTypes);
    public void RemoveTree(Tree treeDefinition);
    [NullableContextAttribute("0")]
public void RemoveTreeController();
    public void RemoveTreeController(Type type);
    public void RemoveTreeControllers(IEnumerable`1<Type> controllerTypes);
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tree> <CreateCollection>b__1_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Umbraco.Cms.Web.BackOffice.Trees.TreeController : TreeControllerBase {
    private static ConcurrentDictionary`2<Type, TreeAttribute> _treeAttributeCache;
    private TreeAttribute _treeAttribute;
    [CompilerGeneratedAttribute]
private ILocalizedTextService <LocalizedTextService>k__BackingField;
    protected ILocalizedTextService LocalizedTextService { get; }
    [NullableAttribute("2")]
public string RootNodeDisplayName { get; }
    [NullableAttribute("2")]
public string TreeGroup { get; }
    public string TreeAlias { get; }
    [NullableAttribute("2")]
public string TreeTitle { get; }
    public TreeUse TreeUse { get; }
    public string SectionAlias { get; }
    public int SortOrder { get; }
    public bool IsSingleNodeTree { get; }
    protected TreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IEventAggregator eventAggregator);
    private static TreeController();
    [CompilerGeneratedAttribute]
protected ILocalizedTextService get_LocalizedTextService();
    [NullableContextAttribute("2")]
public virtual string get_RootNodeDisplayName();
    [NullableContextAttribute("2")]
public virtual string get_TreeGroup();
    public virtual string get_TreeAlias();
    [NullableContextAttribute("2")]
public virtual string get_TreeTitle();
    public virtual TreeUse get_TreeUse();
    public virtual string get_SectionAlias();
    public virtual int get_SortOrder();
    public virtual bool get_IsSingleNodeTree();
    private TreeAttribute GetTreeAttribute();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AngularJsonOnlyConfigurationAttribute]
public abstract class Umbraco.Cms.Web.BackOffice.Trees.TreeControllerBase : UmbracoAuthorizedApiController {
    private UmbracoApiControllerTypeCollection _apiControllers;
    private IEventAggregator _eventAggregator;
    [NullableAttribute("2")]
public string RootNodeDisplayName { get; }
    [NullableAttribute("2")]
public string TreeGroup { get; }
    public string TreeAlias { get; }
    [NullableAttribute("2")]
public string TreeTitle { get; }
    public TreeUse TreeUse { get; }
    public string SectionAlias { get; }
    public int SortOrder { get; }
    public bool IsSingleNodeTree { get; }
    protected TreeControllerBase(UmbracoApiControllerTypeCollection apiControllers, IEventAggregator eventAggregator);
    [NullableContextAttribute("2")]
public abstract virtual string get_RootNodeDisplayName();
    [NullableContextAttribute("2")]
public abstract virtual string get_TreeGroup();
    public abstract virtual string get_TreeAlias();
    [NullableContextAttribute("2")]
public abstract virtual string get_TreeTitle();
    public abstract virtual TreeUse get_TreeUse();
    public abstract virtual string get_SectionAlias();
    public abstract virtual int get_SortOrder();
    public abstract virtual bool get_IsSingleNodeTree();
    protected abstract virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected abstract virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.TreeControllerBase/<GetTreeNodesAsync>d__21")]
protected virtual Task`1<ActionResult`1<TreeNodeCollection>> GetTreeNodesAsync(string id, FormCollection queryStrings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.TreeControllerBase/<GetMenuForNodeAsync>d__22")]
protected virtual Task`1<ActionResult`1<MenuItemCollection>> GetMenuForNodeAsync(string id, FormCollection queryStrings);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.TreeControllerBase/<GetRootNode>d__23")]
public Task`1<ActionResult`1<TreeNode>> GetRootNode(FormCollection queryStrings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.TreeControllerBase/<GetNodes>d__24")]
public Task`1<ActionResult`1<TreeNodeCollection>> GetNodes(string id, FormCollection queryStrings);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.BackOffice.Trees.TreeControllerBase/<GetMenu>d__25")]
public Task`1<ActionResult`1<MenuItemCollection>> GetMenu(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected void AddQueryStringsToAdditionalData(TreeNode node, FormCollection queryStrings);
    protected bool IsDialog(FormCollection queryStrings);
    public TreeNode CreateTreeNode(string id, string parentId, FormCollection queryStrings, string title);
    public TreeNode CreateTreeNode(string id, string parentId, FormCollection queryStrings, string title, string icon);
    public TreeNode CreateTreeNode(string id, string parentId, FormCollection queryStrings, string title, string icon, string routePath);
    public TreeNode CreateTreeNode(IEntitySlim entity, Guid entityObjectType, string parentId, FormCollection queryStrings, bool hasChildren);
    public TreeNode CreateTreeNode(IUmbracoEntity entity, Guid entityObjectType, string parentId, FormCollection queryStrings, string icon, bool hasChildren);
    public TreeNode CreateTreeNode(string id, string parentId, FormCollection queryStrings, string title, string icon, bool hasChildren);
    public TreeNode CreateTreeNode(string id, string parentId, FormCollection queryStrings, string title, string icon, bool hasChildren, string routePath);
    public TreeNode CreateTreeNode(string id, string parentId, FormCollection queryStrings, string title, string icon, bool hasChildren, string routePath, Udi udi);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.BackOffice.Trees.TreeQueryStringParameters : ValueType {
    public static string Use;
    public static string Application;
    public static string StartNodeId;
    public static string DataTypeKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Cms.Web.BackOffice.Trees.UrlHelperExtensions : object {
    [ExtensionAttribute]
internal static string GetTreePathFromFilePath(IUrlHelper urlHelper, string virtualPath, string basePath);
    [ExtensionAttribute]
public static string GetTreeUrl(IUrlHelper urlHelper, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, Type treeType, string nodeId, FormCollection queryStrings);
    [ExtensionAttribute]
public static string GetMenuUrl(IUrlHelper urlHelper, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, Type treeType, string nodeId, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("users", "users")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.UserTreeController : TreeController {
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public UserTreeController(IMenuItemCollectionFactory menuItemCollectionFactory, ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IEventAggregator eventAggregator);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AuthorizeAttribute]
[TreeAttribute("settings", "webhooks")]
[PluginControllerAttribute("UmbracoTrees")]
[CoreTreeAttribute]
public class Umbraco.Cms.Web.BackOffice.Trees.WebhooksTreeController : TreeController {
    private IMenuItemCollectionFactory _menuItemCollectionFactory;
    public WebhooksTreeController(ILocalizedTextService localizedTextService, UmbracoApiControllerTypeCollection umbracoApiControllerTypeCollection, IEventAggregator eventAggregator, IMenuItemCollectionFactory menuItemCollectionFactory);
    protected virtual ActionResult`1<TreeNodeCollection> GetTreeNodes(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<MenuItemCollection> GetMenuForNode(string id, FormCollection queryStrings);
    protected virtual ActionResult`1<TreeNode> CreateRootNode(FormCollection queryStrings);
}
[NullableContextAttribute("1")]
public interface Umbraco.Cms.Web.Common.Security.IPasswordChanger`1 {
    [ObsoleteAttribute("Please use method that also takes a nullable IUser, scheduled for removal in v13")]
public abstract virtual Task`1<Attempt`1<PasswordChangedModel>> ChangePasswordWithIdentityAsync(ChangingPasswordModel passwordModel, IUmbracoUserManager`1<TUser> userMgr);
    public virtual Task`1<Attempt`1<PasswordChangedModel>> ChangePasswordWithIdentityAsync(ChangingPasswordModel passwordModel, IUmbracoUserManager`1<TUser> userMgr, IUser currentUser);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Umbraco.Cms.Web.Common.Security.PasswordChanger`1 : object {
    private ILogger`1<PasswordChanger`1<TUser>> _logger;
    public PasswordChanger`1(ILogger`1<PasswordChanger`1<TUser>> logger);
    public sealed virtual Task`1<Attempt`1<PasswordChangedModel>> ChangePasswordWithIdentityAsync(ChangingPasswordModel passwordModel, IUmbracoUserManager`1<TUser> userMgr);
    [AsyncStateMachineAttribute("Umbraco.Cms.Web.Common.Security.PasswordChanger`1/<ChangePasswordWithIdentityAsync>d__3")]
public sealed virtual Task`1<Attempt`1<PasswordChangedModel>> ChangePasswordWithIdentityAsync(ChangingPasswordModel changingPasswordModel, IUmbracoUserManager`1<TUser> userMgr, IUser currentUser);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.BackofficeLinkGeneratorExtensions : object {
    [ExtensionAttribute]
public static string GetInstallerUrl(LinkGenerator linkGenerator);
    [ExtensionAttribute]
public static string GetInstallerApiUrl(LinkGenerator linkGenerator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.HtmlHelperBackOfficeExtensions : object {
    [AsyncStateMachineAttribute("Umbraco.Extensions.HtmlHelperBackOfficeExtensions/<BareMinimumServerVariablesScriptAsync>d__0")]
[ExtensionAttribute]
public static Task`1<IHtmlContent> BareMinimumServerVariablesScriptAsync(IHtmlHelper html, BackOfficeServerVariables backOfficeServerVariables);
    [AsyncStateMachineAttribute("Umbraco.Extensions.HtmlHelperBackOfficeExtensions/<AngularValueExternalLoginInfoScriptAsync>d__1")]
[ExtensionAttribute]
[ObsoleteAttribute("This is deprecated and will be removed in V15")]
public static Task`1<IHtmlContent> AngularValueExternalLoginInfoScriptAsync(IHtmlHelper html, IBackOfficeExternalLoginProviders externalLogins, BackOfficeExternalLoginProviderErrors externalLoginErrors);
    [ExtensionAttribute]
[ObsoleteAttribute("This is deprecated and will be removed in V15")]
public static IHtmlContent AngularValueResetPasswordCodeInfoScript(IHtmlHelper html, object val);
    [AsyncStateMachineAttribute("Umbraco.Extensions.HtmlHelperBackOfficeExtensions/<AngularValueTinyMceAssetsAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IHtmlContent> AngularValueTinyMceAssetsAsync(IHtmlHelper html, IRuntimeMinifier runtimeMinifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.HttpContextExtensions : object {
    [ExtensionAttribute]
public static void SetExternalLoginProviderErrors(HttpContext httpContext, BackOfficeExternalLoginProviderErrors errors);
    [ExtensionAttribute]
public static BackOfficeExternalLoginProviderErrors GetExternalLoginProviderErrors(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.IdentityBuilderExtensions : object {
    [ExtensionAttribute]
public static IdentityBuilder AddUserManager(IdentityBuilder identityBuilder);
    [ExtensionAttribute]
public static IdentityBuilder AddSignInManager(IdentityBuilder identityBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.ModelStateExtensions : object {
    [ExtensionAttribute]
internal static void AddPropertyValidationError(ModelStateDictionary modelState, ValidationResult result, string propertyAlias, string culture, string segment);
    [ExtensionAttribute]
internal static void AddPropertyError(ModelStateDictionary modelState, ValidationResult result, string propertyAlias, string culture, string segment);
    [ExtensionAttribute]
internal static void AddVariantValidationError(ModelStateDictionary modelState, string culture, string segment, string errMsg);
    [ExtensionAttribute]
internal static IReadOnlyList`1<ValueTuple`2<string, string>> GetVariantsWithPropertyErrors(ModelStateDictionary modelState, string cultureForInvariantErrors);
    [ExtensionAttribute]
internal static IReadOnlyList`1<ValueTuple`2<string, string>> GetVariantsWithErrors(ModelStateDictionary modelState, string cultureForInvariantErrors);
    [ExtensionAttribute]
internal static void AddValidationError(ModelStateDictionary modelState, ValidationResult result, String[] parts);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.RuntimeMinifierExtensions : object {
    [AsyncStateMachineAttribute("Umbraco.Extensions.RuntimeMinifierExtensions/<GetScriptForLoadingBackOfficeAsync>d__0")]
[ExtensionAttribute]
public static Task`1<string> GetScriptForLoadingBackOfficeAsync(IRuntimeMinifier minifier, GlobalSettings globalSettings, IHostingEnvironment hostingEnvironment, IManifestParser manifestParser);
    [AsyncStateMachineAttribute("Umbraco.Extensions.RuntimeMinifierExtensions/<GetStylesheetInitializationAsync>d__1")]
private static Task`1<string> GetStylesheetInitializationAsync(IRuntimeMinifier minifier, IManifestParser manifestParser);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.UmbracoApplicationBuilderExtensions : object {
    [ExtensionAttribute]
public static IUmbracoApplicationBuilderContext UseBackOffice(IUmbracoApplicationBuilderContext builder);
    [ExtensionAttribute]
public static IUmbracoEndpointBuilderContext UseBackOfficeEndpoints(IUmbracoEndpointBuilderContext app);
    [ExtensionAttribute]
public static IUmbracoEndpointBuilderContext UseInstallerEndpoints(IUmbracoEndpointBuilderContext app);
    [ExtensionAttribute]
public static IUmbracoEndpointBuilderContext UseUmbracoPreviewEndpoints(IUmbracoEndpointBuilderContext app);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Umbraco.Extensions.UmbracoBuilderExtensions : object {
    [ExtensionAttribute]
public static IUmbracoBuilder AddBackOfficeAuthentication(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder AddBackOfficeAuthorizationPolicies(IUmbracoBuilder builder, string backOfficeAuthenticationScheme);
    [ExtensionAttribute]
private static void AddBackOfficeAuthorizationPoliciesInternal(IUmbracoBuilder builder, string backOfficeAuthenticationScheme);
    private static void CreatePolicies(AuthorizationOptions options, string backOfficeAuthenticationScheme);
    [ExtensionAttribute]
public static IUmbracoBuilder AddBackOfficeIdentity(IUmbracoBuilder builder);
    [ExtensionAttribute]
private static BackOfficeIdentityBuilder BuildUmbracoBackOfficeIdentity(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder AddBackOfficeExternalLogins(IUmbracoBuilder umbracoBuilder, Action`1<BackOfficeExternalLoginsBuilder> builder);
    [ExtensionAttribute]
public static BackOfficeIdentityBuilder AddTwoFactorProvider(BackOfficeIdentityBuilder identityBuilder, string providerName);
    [ExtensionAttribute]
private static IUmbracoBuilder AddSupplemenataryLocalizedTextFileSources(IUmbracoBuilder builder);
    private static IEnumerable`1<LocalizedTextServiceSupplementaryFileSource> GetSupplementaryFileSources(IWebHostEnvironment webHostEnvironment);
    [IteratorStateMachineAttribute("Umbraco.Extensions.UmbracoBuilderExtensions/<GetPluginLanguageFileSources>d__10")]
private static IEnumerable`1<LocalizedTextServiceSupplementaryFileSource> GetPluginLanguageFileSources(IFileProvider fileProvider, string folder, bool overwriteCoreKeys);
    [IteratorStateMachineAttribute("Umbraco.Extensions.UmbracoBuilderExtensions/<GetLangFolderPaths>d__11")]
private static IEnumerable`1<string> GetLangFolderPaths(IFileProvider fileProvider, string path);
    [ExtensionAttribute]
public static IUmbracoBuilder AddBackOffice(IUmbracoBuilder builder, Action`1<IMvcBuilder> configureMvc);
    [ExtensionAttribute]
public static IUmbracoBuilder AddUnattendedInstallInstallCreateUser(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder AddPreviewSupport(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static TreeCollectionBuilder Trees(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder AddBackOfficeCore(IUmbracoBuilder builder);
    [ExtensionAttribute]
public static IUmbracoBuilder AddControllersWithAmbiguousConstructors(IUmbracoBuilder builder);
}
[ExtensionAttribute]
public static class Umbraco.Extensions.WebMappingProfiles : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IUmbracoBuilder AddWebMappingProfiles(IUmbracoBuilder builder);
}
