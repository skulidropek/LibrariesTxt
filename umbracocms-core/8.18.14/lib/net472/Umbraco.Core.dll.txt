[ExtensionAttribute]
internal static class Umbraco.Core.AssemblyExtensions : object {
    [ExtensionAttribute]
public static FileInfo GetAssemblyFile(Assembly assembly);
    [ExtensionAttribute]
public static bool IsAppCodeAssembly(Assembly assembly);
    [ExtensionAttribute]
public static bool IsGlobalAsaxAssembly(Assembly assembly);
    [ExtensionAttribute]
public static FileInfo GetAssemblyFile(AssemblyName assemblyName);
}
public static class Umbraco.Core.Attempt : object {
    public static Attempt`1<TResult> Succeed(TResult result);
    public static Attempt`2<TResult, TStatus> SucceedWithStatus(TStatus status, TResult result);
    public static Attempt`1<TResult> Fail();
    public static Attempt`1<TResult> Fail(TResult result);
    public static Attempt`2<TResult, TStatus> FailWithStatus(TStatus status, TResult result);
    public static Attempt`1<TResult> Fail(TResult result, Exception exception);
    public static Attempt`2<TResult, TStatus> FailWithStatus(TStatus status, TResult result, Exception exception);
    public static Attempt`1<TResult> If(bool condition, TResult result);
    public static Attempt`2<TResult, TStatus> IfWithStatus(bool condition, TStatus succStatus, TStatus failStatus, TResult result);
}
public class Umbraco.Core.Attempt`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    private static Attempt`1<TResult> Failed;
    public bool Success { get; }
    public Exception Exception { get; }
    public TResult Result { get; }
    private Attempt`1(bool success, TResult result, Exception exception);
    private static Attempt`1();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Success();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TResult get_Result();
    public TResult ResultOr(TResult value);
    public static Attempt`1<TResult> Succeed();
    public static Attempt`1<TResult> Succeed(TResult result);
    public static Attempt`1<TResult> Fail();
    public static Attempt`1<TResult> Fail(Exception exception);
    public static Attempt`1<TResult> Fail(TResult result);
    public static Attempt`1<TResult> Fail(TResult result, Exception exception);
    public static Attempt`1<TResult> If(bool condition);
    public static Attempt`1<TResult> If(bool condition, TResult result);
    public static bool op_Implicit(Attempt`1<TResult> a);
}
public class Umbraco.Core.Attempt`2 : ValueType {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private TStatus <Status>k__BackingField;
    public bool Success { get; }
    public Exception Exception { get; }
    public TResult Result { get; }
    public TStatus Status { get; }
    private Attempt`2(bool success, TResult result, TStatus status, Exception exception);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Success();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TResult get_Result();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TStatus get_Status();
    public static Attempt`2<TResult, TStatus> Succeed(TStatus status);
    public static Attempt`2<TResult, TStatus> Succeed(TStatus status, TResult result);
    public static Attempt`2<TResult, TStatus> Fail(TStatus status);
    public static Attempt`2<TResult, TStatus> Fail(TStatus status, Exception exception);
    public static Attempt`2<TResult, TStatus> Fail(TStatus status, TResult result);
    public static Attempt`2<TResult, TStatus> Fail(TStatus status, TResult result, Exception exception);
    public static Attempt`2<TResult, TStatus> If(bool condition, TStatus succStatus, TStatus failStatus);
    public static Attempt`2<TResult, TStatus> If(bool condition, TStatus succStatus, TStatus failStatus, TResult result);
    public static bool op_Implicit(Attempt`2<TResult, TStatus> a);
}
public class Umbraco.Core.BindingRedirects : object {
    public static void Initialize();
    private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
}
[ExtensionAttribute]
public static class Umbraco.Core.Cache.AppCacheExtensions : object {
    [ExtensionAttribute]
public static T GetCacheItem(IAppPolicyCache provider, string cacheKey, Func`1<T> getCacheItem, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    [ExtensionAttribute]
public static void InsertCacheItem(IAppPolicyCache provider, string cacheKey, Func`1<T> getCacheItem, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetCacheItemsByKeySearch(IAppCache provider, string keyStartsWith);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetCacheItemsByKeyExpression(IAppCache provider, string regexString);
    [ExtensionAttribute]
public static T GetCacheItem(IAppCache provider, string cacheKey);
    [ExtensionAttribute]
public static T GetCacheItem(IAppCache provider, string cacheKey, Func`1<T> getCacheItem);
}
public class Umbraco.Core.Cache.AppCaches : object {
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private static AppCaches <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private static AppCaches <NoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IAppCache <RequestCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IAppPolicyCache <RuntimeCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolatedCaches <IsolatedCaches>k__BackingField;
    public static AppCaches Disabled { get; }
    public static AppCaches NoCache { get; }
    public IAppCache RequestCache { get; }
    public IAppPolicyCache RuntimeCache { get; }
    public IsolatedCaches IsolatedCaches { get; }
    public AppCaches(Cache cache);
    public AppCaches(IAppPolicyCache runtimeCache, IAppCache requestCache, IsolatedCaches isolatedCaches);
    private static AppCaches();
    [CompilerGeneratedAttribute]
public static AppCaches get_Disabled();
    [CompilerGeneratedAttribute]
public static AppCaches get_NoCache();
    [CompilerGeneratedAttribute]
public IAppCache get_RequestCache();
    [CompilerGeneratedAttribute]
public IAppPolicyCache get_RuntimeCache();
    [CompilerGeneratedAttribute]
public IsolatedCaches get_IsolatedCaches();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public abstract class Umbraco.Core.Cache.AppPolicedCacheDictionary`1 : object {
    private ConcurrentDictionary`2<TKey, IAppPolicyCache> _caches;
    internal Func`2<TKey, IAppPolicyCache> CacheFactory;
    private bool _disposedValue;
    protected AppPolicedCacheDictionary`1(Func`2<TKey, IAppPolicyCache> cacheFactory);
    public IAppPolicyCache GetOrCreate(TKey key);
    public Attempt`1<IAppPolicyCache> Get(TKey key);
    public void Remove(TKey key);
    public void RemoveAll();
    public void ClearCache(TKey key);
    public void ClearAllCaches();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private IAppPolicyCache <GetOrCreate>b__4_0(TKey k);
}
public static class Umbraco.Core.Cache.CacheKeys : object {
    public static string ApplicationsCacheKey;
    public static string TemplateFrontEndCacheKey;
    public static string MacroContentCacheKey;
    public static string MacroFromAliasCacheKey;
    public static string UserAllContentStartNodesPrefix;
    public static string UserAllMediaStartNodesPrefix;
    public static string UserMediaStartNodePathsPrefix;
    public static string UserContentStartNodePathsPrefix;
    public static string ContentRecycleBinCacheKey;
    public static string MediaRecycleBinCacheKey;
}
public abstract class Umbraco.Core.Cache.CacheRefresherBase`1 : object {
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TInstanceType, CacheRefresherEventArgs> CacheUpdated;
    [CompilerGeneratedAttribute]
private AppCaches <AppCaches>k__BackingField;
    protected TInstanceType This { get; }
    public Guid RefresherUniqueId { get; }
    public string Name { get; }
    protected AppCaches AppCaches { get; }
    protected CacheRefresherBase`1(AppCaches appCaches);
    [CompilerGeneratedAttribute]
public static void add_CacheUpdated(TypedEventHandler`2<TInstanceType, CacheRefresherEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_CacheUpdated(TypedEventHandler`2<TInstanceType, CacheRefresherEventArgs> value);
    protected abstract virtual TInstanceType get_This();
    public abstract virtual Guid get_RefresherUniqueId();
    public abstract virtual string get_Name();
    public virtual void RefreshAll();
    public virtual void Refresh(int id);
    public virtual void Refresh(Guid id);
    public virtual void Remove(int id);
    [CompilerGeneratedAttribute]
protected AppCaches get_AppCaches();
    protected void ClearAllIsolatedCacheByEntityType();
    protected static void OnCacheUpdated(TInstanceType sender, CacheRefresherEventArgs args);
}
[DefaultMemberAttribute("Item")]
public class Umbraco.Core.Cache.CacheRefresherCollection : BuilderCollectionBase`1<ICacheRefresher> {
    public ICacheRefresher Item { get; }
    public CacheRefresherCollection(IEnumerable`1<ICacheRefresher> items);
    public ICacheRefresher get_Item(Guid id);
}
public class Umbraco.Core.Cache.CacheRefresherCollectionBuilder : LazyCollectionBuilderBase`3<CacheRefresherCollectionBuilder, CacheRefresherCollection, ICacheRefresher> {
    protected CacheRefresherCollectionBuilder This { get; }
    protected virtual CacheRefresherCollectionBuilder get_This();
}
public class Umbraco.Core.Cache.CacheRefresherEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <MessageObject>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageType <MessageType>k__BackingField;
    public object MessageObject { get; private set; }
    public MessageType MessageType { get; private set; }
    public CacheRefresherEventArgs(object msgObject, MessageType type);
    [CompilerGeneratedAttribute]
public object get_MessageObject();
    [CompilerGeneratedAttribute]
private void set_MessageObject(object value);
    [CompilerGeneratedAttribute]
public MessageType get_MessageType();
    [CompilerGeneratedAttribute]
private void set_MessageType(MessageType value);
}
internal class Umbraco.Core.Cache.DeepCloneAppCache : object {
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private IAppPolicyCache <InnerCache>k__BackingField;
    public IAppPolicyCache InnerCache { get; }
    public DeepCloneAppCache(IAppPolicyCache innerCache);
    [CompilerGeneratedAttribute]
public IAppPolicyCache get_InnerCache();
    public sealed virtual object Get(string key);
    public sealed virtual object Get(string key, Func`1<object> factory);
    public sealed virtual IEnumerable`1<object> SearchByKey(string keyStartsWith);
    public sealed virtual IEnumerable`1<object> SearchByRegex(string regex);
    public sealed virtual object Get(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public sealed virtual void Insert(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public sealed virtual void Clear();
    public sealed virtual void Clear(string key);
    public sealed virtual void ClearOfType(string typeName);
    public sealed virtual void ClearOfType();
    public sealed virtual void ClearOfType(Func`3<string, T, bool> predicate);
    public sealed virtual void ClearByKey(string keyStartsWith);
    public sealed virtual void ClearByRegex(string regex);
    private static object CheckCloneableAndTracksChanges(object input);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class Umbraco.Core.Cache.DefaultRepositoryCachePolicy`2 : RepositoryCachePolicyBase`2<TEntity, TId> {
    private static TEntity[] s_emptyEntities;
    private RepositoryCachePolicyOptions _options;
    [CompilerGeneratedAttribute]
private string <EntityTypeCacheKey>k__BackingField;
    protected string EntityTypeCacheKey { get; }
    public DefaultRepositoryCachePolicy`2(IAppPolicyCache cache, IScopeAccessor scopeAccessor, RepositoryCachePolicyOptions options);
    private static DefaultRepositoryCachePolicy`2();
    protected string GetEntityCacheKey(int id);
    protected string GetEntityCacheKey(TId id);
    [CompilerGeneratedAttribute]
protected string get_EntityTypeCacheKey();
    protected virtual void InsertEntity(string cacheKey, TEntity entity);
    protected virtual void InsertEntities(TId[] ids, TEntity[] entities);
    public virtual void Create(TEntity entity, Action`1<TEntity> persistNew);
    public virtual void Update(TEntity entity, Action`1<TEntity> persistUpdated);
    public virtual void Delete(TEntity entity, Action`1<TEntity> persistDeleted);
    public virtual TEntity Get(TId id, Func`2<TId, TEntity> performGet, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public virtual TEntity GetCached(TId id);
    public virtual bool Exists(TId id, Func`2<TId, bool> performExists, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public virtual TEntity[] GetAll(TId[] ids, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public virtual void ClearAll();
}
public class Umbraco.Core.Cache.DictionaryAppCache : object {
    internal ConcurrentDictionary`2<string, object> Items;
    public virtual object Get(string key);
    public virtual object Get(string key, Func`1<object> factory);
    public virtual IEnumerable`1<object> SearchByKey(string keyStartsWith);
    public sealed virtual IEnumerable`1<object> SearchByRegex(string regex);
    public virtual void Clear();
    public virtual void Clear(string key);
    public virtual void ClearOfType(string typeName);
    public virtual void ClearOfType();
    public virtual void ClearOfType(Func`3<string, T, bool> predicate);
    public virtual void ClearByKey(string keyStartsWith);
    public virtual void ClearByRegex(string regex);
}
internal class Umbraco.Core.Cache.FastDictionaryAppCache : object {
    internal ConcurrentDictionary`2<string, Lazy`1<object>> Items;
    public sealed virtual object Get(string cacheKey);
    public sealed virtual object Get(string cacheKey, Func`1<object> getCacheItem);
    public sealed virtual IEnumerable`1<object> SearchByKey(string keyStartsWith);
    public sealed virtual IEnumerable`1<object> SearchByRegex(string regex);
    public sealed virtual void Clear();
    public sealed virtual void Clear(string key);
    public sealed virtual void ClearOfType(string typeName);
    public sealed virtual void ClearOfType();
    public sealed virtual void ClearOfType(Func`3<string, T, bool> predicate);
    public sealed virtual void ClearByKey(string keyStartsWith);
    public sealed virtual void ClearByRegex(string regex);
}
internal abstract class Umbraco.Core.Cache.FastDictionaryAppCacheBase : object {
    protected static string CacheItemPrefix;
    protected internal static object ValueNotCreated;
    private static FastDictionaryAppCacheBase();
    public virtual object Get(string key);
    public abstract virtual object Get(string key, Func`1<object> factory);
    public virtual IEnumerable`1<object> SearchByKey(string keyStartsWith);
    public virtual IEnumerable`1<object> SearchByRegex(string regex);
    public virtual void Clear();
    public virtual void Clear(string key);
    public virtual void ClearOfType(string typeName);
    public virtual void ClearOfType();
    public virtual void ClearOfType(Func`3<string, T, bool> predicate);
    public virtual void ClearByKey(string keyStartsWith);
    public virtual void ClearByRegex(string regex);
    protected abstract virtual IEnumerable`1<DictionaryEntry> GetDictionaryEntries();
    protected abstract virtual void RemoveEntry(string key);
    protected abstract virtual object GetEntry(string key);
    protected abstract virtual void EnterReadLock();
    protected abstract virtual void ExitReadLock();
    protected abstract virtual void EnterWriteLock();
    protected abstract virtual void ExitWriteLock();
    protected string GetCacheKey(string key);
    protected internal static Lazy`1<object> GetSafeLazy(Func`1<object> getCacheItem);
    protected internal static object GetSafeLazyValue(Lazy`1<object> lazy, bool onlyIfValueIsCreated);
}
internal class Umbraco.Core.Cache.FullDataSetRepositoryCachePolicy`2 : RepositoryCachePolicyBase`2<TEntity, TId> {
    private Func`2<TEntity, TId> _entityGetId;
    private bool _expires;
    protected static TId[] EmptyIds;
    public FullDataSetRepositoryCachePolicy`2(IAppPolicyCache cache, IScopeAccessor scopeAccessor, Func`2<TEntity, TId> entityGetId, bool expires);
    private static FullDataSetRepositoryCachePolicy`2();
    protected string GetEntityTypeCacheKey();
    protected void InsertEntities(TEntity[] entities);
    public virtual void Create(TEntity entity, Action`1<TEntity> persistNew);
    public virtual void Update(TEntity entity, Action`1<TEntity> persistUpdated);
    public virtual void Delete(TEntity entity, Action`1<TEntity> persistDeleted);
    public virtual TEntity Get(TId id, Func`2<TId, TEntity> performGet, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public virtual TEntity GetCached(TId id);
    public virtual bool Exists(TId id, Func`2<TId, bool> performExits, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public virtual TEntity[] GetAll(TId[] ids, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    internal IEnumerable`1<TEntity> GetAllCached(Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public virtual void ClearAll();
}
internal class Umbraco.Core.Cache.HttpRequestAppCache : FastDictionaryAppCacheBase {
    private HttpContextBase _context;
    private static string ContextItemsLockKey;
    private IDictionary ContextItems { get; }
    private bool HasContextItems { get; }
    public HttpRequestAppCache(HttpContextBase context);
    private IDictionary get_ContextItems();
    private bool get_HasContextItems();
    public virtual object Get(string key, Func`1<object> factory);
    protected virtual IEnumerable`1<DictionaryEntry> GetDictionaryEntries();
    protected virtual void RemoveEntry(string key);
    protected virtual object GetEntry(string key);
    protected virtual void EnterReadLock();
    protected virtual void EnterWriteLock();
    protected virtual void ExitReadLock();
    protected virtual void ExitWriteLock();
}
public interface Umbraco.Core.Cache.IAppCache {
    public abstract virtual object Get(string key);
    public abstract virtual object Get(string key, Func`1<object> factory);
    public abstract virtual IEnumerable`1<object> SearchByKey(string keyStartsWith);
    public abstract virtual IEnumerable`1<object> SearchByRegex(string regex);
    public abstract virtual void Clear();
    public abstract virtual void Clear(string key);
    public abstract virtual void ClearOfType(string typeName);
    public abstract virtual void ClearOfType();
    public abstract virtual void ClearOfType(Func`3<string, T, bool> predicate);
    public abstract virtual void ClearByKey(string keyStartsWith);
    public abstract virtual void ClearByRegex(string regex);
}
public interface Umbraco.Core.Cache.IAppPolicyCache {
    public abstract virtual object Get(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public abstract virtual void Insert(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
}
public interface Umbraco.Core.Cache.ICacheRefresher {
    public Guid RefresherUniqueId { get; }
    public string Name { get; }
    public abstract virtual Guid get_RefresherUniqueId();
    public abstract virtual string get_Name();
    public abstract virtual void RefreshAll();
    public abstract virtual void Refresh(int id);
    public abstract virtual void Remove(int id);
    public abstract virtual void Refresh(Guid id);
}
internal interface Umbraco.Core.Cache.ICacheRefresher`1 {
    public abstract virtual void Refresh(T instance);
    public abstract virtual void Remove(T instance);
}
internal interface Umbraco.Core.Cache.IJsonCacheRefresher {
    public abstract virtual void Refresh(string json);
}
internal interface Umbraco.Core.Cache.IPayloadCacheRefresher`1 {
    public abstract virtual void Refresh(TPayload[] payloads);
}
internal interface Umbraco.Core.Cache.IRepositoryCachePolicy`2 {
    public abstract virtual TEntity Get(TId id, Func`2<TId, TEntity> performGet, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public abstract virtual TEntity GetCached(TId id);
    public abstract virtual bool Exists(TId id, Func`2<TId, bool> performExists, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public abstract virtual void Create(TEntity entity, Action`1<TEntity> persistNew);
    public abstract virtual void Update(TEntity entity, Action`1<TEntity> persistUpdated);
    public abstract virtual void Delete(TEntity entity, Action`1<TEntity> persistDeleted);
    public abstract virtual TEntity[] GetAll(TId[] ids, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public abstract virtual void ClearAll();
}
public class Umbraco.Core.Cache.IsolatedCaches : AppPolicedCacheDictionary`1<Type> {
    public IsolatedCaches(Func`2<Type, IAppPolicyCache> cacheFactory);
    public IAppPolicyCache GetOrCreate();
    public Attempt`1<IAppPolicyCache> Get();
    public void ClearCache();
}
public abstract class Umbraco.Core.Cache.JsonCacheRefresherBase`1 : CacheRefresherBase`1<TInstanceType> {
    protected JsonCacheRefresherBase`1(AppCaches appCaches);
    public virtual void Refresh(string json);
}
public class Umbraco.Core.Cache.NoAppCache : object {
    [CompilerGeneratedAttribute]
private static NoAppCache <Instance>k__BackingField;
    public static NoAppCache Instance { get; }
    private static NoAppCache();
    [CompilerGeneratedAttribute]
public static NoAppCache get_Instance();
    public virtual object Get(string cacheKey);
    public virtual object Get(string cacheKey, Func`1<object> factory);
    public virtual IEnumerable`1<object> SearchByKey(string keyStartsWith);
    public sealed virtual IEnumerable`1<object> SearchByRegex(string regex);
    public sealed virtual object Get(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public sealed virtual void Insert(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public virtual void Clear();
    public virtual void Clear(string key);
    public virtual void ClearOfType(string typeName);
    public virtual void ClearOfType();
    public virtual void ClearOfType(Func`3<string, T, bool> predicate);
    public virtual void ClearByKey(string keyStartsWith);
    public virtual void ClearByRegex(string regex);
}
internal class Umbraco.Core.Cache.NoCacheRepositoryCachePolicy`2 : object {
    [CompilerGeneratedAttribute]
private static NoCacheRepositoryCachePolicy`2<TEntity, TId> <Instance>k__BackingField;
    public static NoCacheRepositoryCachePolicy`2<TEntity, TId> Instance { get; }
    private static NoCacheRepositoryCachePolicy`2();
    [CompilerGeneratedAttribute]
public static NoCacheRepositoryCachePolicy`2<TEntity, TId> get_Instance();
    public sealed virtual TEntity Get(TId id, Func`2<TId, TEntity> performGet, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public sealed virtual TEntity GetCached(TId id);
    public sealed virtual bool Exists(TId id, Func`2<TId, bool> performExists, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public sealed virtual void Create(TEntity entity, Action`1<TEntity> persistNew);
    public sealed virtual void Update(TEntity entity, Action`1<TEntity> persistUpdated);
    public sealed virtual void Delete(TEntity entity, Action`1<TEntity> persistDeleted);
    public sealed virtual TEntity[] GetAll(TId[] ids, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public sealed virtual void ClearAll();
}
public class Umbraco.Core.Cache.ObjectCacheAppCache : object {
    private ReaderWriterLockSlim _locker;
    private bool _disposedValue;
    [CompilerGeneratedAttribute]
private ObjectCache <MemoryCache>k__BackingField;
    internal ObjectCache MemoryCache { get; private set; }
    [CompilerGeneratedAttribute]
internal ObjectCache get_MemoryCache();
    [CompilerGeneratedAttribute]
private void set_MemoryCache(ObjectCache value);
    public sealed virtual object Get(string key);
    public sealed virtual object Get(string key, Func`1<object> factory);
    public sealed virtual IEnumerable`1<object> SearchByKey(string keyStartsWith);
    public sealed virtual IEnumerable`1<object> SearchByRegex(string regex);
    public sealed virtual object Get(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public sealed virtual void Insert(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public virtual void Clear();
    public virtual void Clear(string key);
    public virtual void ClearOfType(string typeName);
    public virtual void ClearOfType();
    public virtual void ClearOfType(Func`3<string, T, bool> predicate);
    public virtual void ClearByKey(string keyStartsWith);
    public virtual void ClearByRegex(string regex);
    private static CacheItemPolicy GetPolicy(Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public abstract class Umbraco.Core.Cache.PayloadCacheRefresherBase`2 : JsonCacheRefresherBase`1<TInstanceType> {
    protected PayloadCacheRefresherBase`2(AppCaches appCaches);
    protected virtual TPayload[] Deserialize(string json);
    public virtual void Refresh(string json);
    public virtual void Refresh(TPayload[] payloads);
}
internal abstract class Umbraco.Core.Cache.RepositoryCachePolicyBase`2 : object {
    private IAppPolicyCache _globalCache;
    private IScopeAccessor _scopeAccessor;
    protected IAppPolicyCache Cache { get; }
    protected RepositoryCachePolicyBase`2(IAppPolicyCache globalCache, IScopeAccessor scopeAccessor);
    protected IAppPolicyCache get_Cache();
    public abstract virtual TEntity Get(TId id, Func`2<TId, TEntity> performGet, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public abstract virtual TEntity GetCached(TId id);
    public abstract virtual bool Exists(TId id, Func`2<TId, bool> performExists, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public abstract virtual void Create(TEntity entity, Action`1<TEntity> persistNew);
    public abstract virtual void Update(TEntity entity, Action`1<TEntity> persistUpdated);
    public abstract virtual void Delete(TEntity entity, Action`1<TEntity> persistDeleted);
    public abstract virtual TEntity[] GetAll(TId[] ids, Func`2<TId[], IEnumerable`1<TEntity>> performGetAll);
    public abstract virtual void ClearAll();
}
internal class Umbraco.Core.Cache.RepositoryCachePolicyOptions : object {
    [CompilerGeneratedAttribute]
private Func`1<int> <PerformCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GetAllCacheValidateCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GetAllCacheAllowZeroCount>k__BackingField;
    public Func`1<int> PerformCount { get; public set; }
    public bool GetAllCacheValidateCount { get; public set; }
    public bool GetAllCacheAllowZeroCount { get; public set; }
    public RepositoryCachePolicyOptions(Func`1<int> performCount);
    [CompilerGeneratedAttribute]
public Func`1<int> get_PerformCount();
    [CompilerGeneratedAttribute]
public void set_PerformCount(Func`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_GetAllCacheValidateCount();
    [CompilerGeneratedAttribute]
public void set_GetAllCacheValidateCount(bool value);
    [CompilerGeneratedAttribute]
public bool get_GetAllCacheAllowZeroCount();
    [CompilerGeneratedAttribute]
public void set_GetAllCacheAllowZeroCount(bool value);
}
internal class Umbraco.Core.Cache.SingleItemsOnlyRepositoryCachePolicy`2 : DefaultRepositoryCachePolicy`2<TEntity, TId> {
    public SingleItemsOnlyRepositoryCachePolicy`2(IAppPolicyCache cache, IScopeAccessor scopeAccessor, RepositoryCachePolicyOptions options);
    protected virtual void InsertEntities(TId[] ids, TEntity[] entities);
}
public abstract class Umbraco.Core.Cache.TypedCacheRefresherBase`2 : CacheRefresherBase`1<TInstanceType> {
    protected TypedCacheRefresherBase`2(AppCaches appCaches);
    public virtual void Refresh(TEntityType instance);
    public virtual void Remove(TEntityType instance);
}
internal class Umbraco.Core.Cache.WebCachingAppCache : FastDictionaryAppCacheBase {
    private ReaderWriterLockSlim _locker;
    private Cache _cache;
    private bool _disposedValue;
    public WebCachingAppCache(Cache cache);
    public virtual object Get(string key, Func`1<object> factory);
    public sealed virtual object Get(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    public sealed virtual void Insert(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    protected virtual IEnumerable`1<DictionaryEntry> GetDictionaryEntries();
    protected virtual void RemoveEntry(string key);
    protected virtual object GetEntry(string key);
    protected virtual void EnterReadLock();
    protected virtual void EnterWriteLock();
    protected virtual void ExitReadLock();
    protected virtual void ExitWriteLock();
    private object GetInternal(string key, Func`1<object> factory, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    private void InsertInternal(string cacheKey, Func`1<object> getCacheItem, Nullable`1<TimeSpan> timeout, bool isSliding, CacheItemPriority priority, CacheItemRemovedCallback removedCallback, String[] dependentFiles);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[AttributeUsageAttribute("32767")]
internal class Umbraco.Core.CodeAnnotations.FriendlyNameAttribute : Attribute {
    private string _friendlyName;
    public FriendlyNameAttribute(string friendlyName);
    public virtual string ToString();
}
[AttributeUsageAttribute("256")]
internal class Umbraco.Core.CodeAnnotations.UmbracoObjectTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Guid <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ModelType>k__BackingField;
    public Guid ObjectId { get; private set; }
    public Type ModelType { get; private set; }
    public UmbracoObjectTypeAttribute(string objectId);
    public UmbracoObjectTypeAttribute(string objectId, Type modelType);
    [CompilerGeneratedAttribute]
public Guid get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(Guid value);
    [CompilerGeneratedAttribute]
public Type get_ModelType();
    [CompilerGeneratedAttribute]
private void set_ModelType(Type value);
}
[AttributeUsageAttribute("256")]
internal class Umbraco.Core.CodeAnnotations.UmbracoUdiTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <UdiType>k__BackingField;
    public string UdiType { get; private set; }
    public UmbracoUdiTypeAttribute(string udiType);
    [CompilerGeneratedAttribute]
public string get_UdiType();
    [CompilerGeneratedAttribute]
private void set_UdiType(string value);
}
public class Umbraco.Core.Collections.CompositeIntStringKey : ValueType {
    private int _key1;
    private string _key2;
    public CompositeIntStringKey(Nullable`1<int> key1, string key2);
    public sealed virtual bool Equals(CompositeIntStringKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CompositeIntStringKey key1, CompositeIntStringKey key2);
    public static bool op_Inequality(CompositeIntStringKey key1, CompositeIntStringKey key2);
}
public class Umbraco.Core.Collections.CompositeNStringNStringKey : ValueType {
    private string _key1;
    private string _key2;
    public CompositeNStringNStringKey(string key1, string key2);
    public sealed virtual bool Equals(CompositeNStringNStringKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CompositeNStringNStringKey key1, CompositeNStringNStringKey key2);
    public static bool op_Inequality(CompositeNStringNStringKey key1, CompositeNStringNStringKey key2);
}
public class Umbraco.Core.Collections.CompositeStringStringKey : ValueType {
    private string _key1;
    private string _key2;
    public CompositeStringStringKey(string key1, string key2);
    public sealed virtual bool Equals(CompositeStringStringKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CompositeStringStringKey key1, CompositeStringStringKey key2);
    public static bool op_Inequality(CompositeStringStringKey key1, CompositeStringStringKey key2);
}
internal class Umbraco.Core.Collections.CompositeTypeTypeKey : ValueType {
    [CompilerGeneratedAttribute]
private Type <Type1>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type2>k__BackingField;
    public Type Type1 { get; }
    public Type Type2 { get; }
    public CompositeTypeTypeKey(Type type1, Type type2);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_Type1();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_Type2();
    public sealed virtual bool Equals(CompositeTypeTypeKey other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(CompositeTypeTypeKey key1, CompositeTypeTypeKey key2);
    public static bool op_Inequality(CompositeTypeTypeKey key1, CompositeTypeTypeKey key2);
    public virtual int GetHashCode();
}
public class Umbraco.Core.Collections.ConcurrentHashSet`1 : object {
    private HashSet`1<T> _innerSet;
    private ReaderWriterLockSlim _instanceLocker;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Remove(T item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public bool TryAdd(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int index);
    private HashSet`1<T> GetThreadSafeClone();
    public void CopyTo(Array array, int index);
}
internal class Umbraco.Core.Collections.DeepCloneableList`1 : List`1<T> {
    private ListCloneBehavior _listCloneBehavior;
    public DeepCloneableList`1(ListCloneBehavior listCloneBehavior);
    public DeepCloneableList`1(IEnumerable`1<T> collection, ListCloneBehavior listCloneBehavior);
    public DeepCloneableList`1(IEnumerable`1<T> collection);
    public sealed virtual object DeepClone();
    public sealed virtual bool IsDirty();
    public sealed virtual bool WasDirty();
    public sealed virtual bool IsPropertyDirty(string propName);
    public sealed virtual bool WasPropertyDirty(string propertyName);
    public sealed virtual IEnumerable`1<string> GetDirtyProperties();
    public sealed virtual void ResetDirtyProperties();
    public sealed virtual void ResetWereDirtyProperties();
    public sealed virtual void ResetDirtyProperties(bool rememberDirty);
    public sealed virtual IEnumerable`1<string> GetWereDirtyProperties();
}
public class Umbraco.Core.Collections.EventClearingObservableCollection`1 : ObservableCollection`1<TValue> {
    private NotifyCollectionChangedEventHandler _changed;
    public EventClearingObservableCollection`1(List`1<TValue> list);
    public EventClearingObservableCollection`1(IEnumerable`1<TValue> collection);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void ClearCollectionChangedEvents();
}
internal enum Umbraco.Core.Collections.ListCloneBehavior : Enum {
    public int value__;
    public static ListCloneBehavior CloneOnce;
    public static ListCloneBehavior None;
    public static ListCloneBehavior Always;
}
[DefaultMemberAttribute("Item")]
public class Umbraco.Core.Collections.ObservableDictionary`2 : ObservableCollection`1<TValue> {
    [CompilerGeneratedAttribute]
private Dictionary`2<TKey, int> <Indecies>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<TValue, TKey> <KeySelector>k__BackingField;
    private NotifyCollectionChangedEventHandler _changed;
    protected Dictionary`2<TKey, int> Indecies { get; }
    protected Func`2<TValue, TKey> KeySelector { get; }
    public TValue Item { get; public set; }
    public IEnumerable`1<TKey> Keys { get; }
    public IEnumerable`1<TValue> Values { get; }
    private ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    private ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    public ObservableDictionary`2(Func`2<TValue, TKey> keySelector, IEqualityComparer`1<TKey> equalityComparer);
    [CompilerGeneratedAttribute]
protected Dictionary`2<TKey, int> get_Indecies();
    [CompilerGeneratedAttribute]
protected Func`2<TValue, TKey> get_KeySelector();
    protected virtual void InsertItem(int index, TValue item);
    protected virtual void ClearItems();
    protected virtual void RemoveItem(int index);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void ClearCollectionChangedEvents();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public bool Replace(TKey key, TValue value);
    public void ReplaceAll(IEnumerable`1<TValue> values);
    public sealed virtual bool Remove(TKey key);
    public void ChangeKey(TKey currentKey, TKey newKey);
    public sealed virtual bool TryGetValue(TKey key, TValue& val);
    public sealed virtual IEnumerable`1<TKey> get_Keys();
    public sealed virtual IEnumerable`1<TValue> get_Values();
    private sealed virtual override ICollection`1<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override ICollection`1<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    [IteratorStateMachineAttribute("Umbraco.Core.Collections.ObservableDictionary`2/<System-Collections-Generic-IEnumerable<System-Collections-Generic-KeyValuePair<TKey,TValue>>-GetEnumerator>d__34")]
private sealed virtual override IEnumerator`1<KeyValuePair`2<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
}
internal class Umbraco.Core.Collections.OrderedHashSet`1 : KeyedCollection`2<T, T> {
    private bool _keepOldest;
    public OrderedHashSet`1(bool keepOldest);
    protected virtual void InsertItem(int index, T item);
    protected virtual T GetKeyForItem(T item);
}
public class Umbraco.Core.Collections.StackQueue`1 : object {
    private LinkedList`1<T> _linkedList;
    public int Count { get; }
    public void Clear();
    public void Push(T obj);
    public void Enqueue(T obj);
    public T Pop();
    public T Dequeue();
    public T PeekStack();
    public T PeekQueue();
    public int get_Count();
}
public class Umbraco.Core.Collections.TopoGraph : object {
    internal static string CycleDependencyError;
    internal static string MissingDependencyError;
    public static Node`2<TKey, TItem> CreateNode(TKey key, TItem item, IEnumerable`1<TKey> dependencies);
}
public class Umbraco.Core.Collections.TopoGraph`2 : TopoGraph {
    private Func`2<TItem, TKey> _getKey;
    private Func`2<TItem, IEnumerable`1<TKey>> _getDependencies;
    private Dictionary`2<TKey, TItem> _items;
    public TopoGraph`2(Func`2<TItem, TKey> getKey, Func`2<TItem, IEnumerable`1<TKey>> getDependencies);
    public void AddItem(TItem item);
    public void AddItems(IEnumerable`1<TItem> items);
    public IEnumerable`1<TItem> GetSortedItems(bool throwOnCycle, bool throwOnMissing, bool reverse);
    private static bool Contains(TItem[] items, TItem item, int start, int count);
    private void Visit(TItem item, ISet`1<TItem> visited, TItem[] sorted, Int32& index, int incr, bool throwOnCycle, bool throwOnMissing);
    [IteratorStateMachineAttribute("Umbraco.Core.Collections.TopoGraph`2/<FindDependencies>d__9")]
private IEnumerable`1<TItem> FindDependencies(IEnumerable`1<TKey> keys, bool throwOnMissing);
}
internal class Umbraco.Core.Collections.TypeList`1 : object {
    private List`1<Type> _list;
    public void Add();
    public bool Contains(Type type);
}
public class Umbraco.Core.Compose.AuditEventsComponent : object {
    private IAuditService _auditService;
    private IUserService _userService;
    private IEntityService _entityService;
    internal static IUser UnknownUser { get; }
    private IUser CurrentPerformingUser { get; }
    private string PerformingIp { get; }
    public AuditEventsComponent(IAuditService auditService, IUserService userService, IEntityService entityService);
    public sealed virtual void Initialize();
    public sealed virtual void Terminate();
    internal static IUser get_UnknownUser();
    private IUser get_CurrentPerformingUser();
    private IUser GetPerformingUser(int userId);
    private string get_PerformingIp();
    private string FormatEmail(IMember member);
    private string FormatEmail(IUser user);
    private void OnRemovedRoles(IMemberService sender, RolesEventArgs args);
    private void OnAssignedRoles(IMemberService sender, RolesEventArgs args);
    private void OnMemberExported(IMemberService sender, ExportedMemberEventArgs exportedMemberEventArgs);
    private void OnSavedUserGroupWithUsers(IUserService sender, SaveEventArgs`1<UserGroupWithUsers> saveEventArgs);
    private void UserGroupPermissionAssigned(IUserService sender, SaveEventArgs`1<EntityPermission> saveEventArgs);
    private void OnSavedMember(IMemberService sender, SaveEventArgs`1<IMember> saveEventArgs);
    private void OnDeletedMember(IMemberService sender, DeleteEventArgs`1<IMember> deleteEventArgs);
    private void OnSavedUser(IUserService sender, SaveEventArgs`1<IUser> saveEventArgs);
    private void OnDeletedUser(IUserService sender, DeleteEventArgs`1<IUser> deleteEventArgs);
    private void WriteAudit(int performingId, int affectedId, string ipAddress, string eventType, string eventDetails, string affectedDetails);
    private void WriteAudit(IUser performingUser, int affectedId, string ipAddress, string eventType, string eventDetails);
    private void WriteAudit(int performingId, string performingDetails, int affectedId, string ipAddress, string eventType, string eventDetails, string affectedDetails);
}
public class Umbraco.Core.Compose.AuditEventsComposer : ComponentComposer`1<AuditEventsComponent> {
}
public class Umbraco.Core.Compose.ManifestWatcherComponent : object {
    private IRuntimeState _runtimeState;
    private ILogger _logger;
    private ManifestWatcher _mw;
    public ManifestWatcherComponent(IRuntimeState runtimeState, ILogger logger);
    public sealed virtual void Initialize();
    public sealed virtual void Terminate();
}
[RuntimeLevelAttribute]
public class Umbraco.Core.Compose.ManifestWatcherComposer : ComponentComposer`1<ManifestWatcherComponent> {
}
public class Umbraco.Core.Compose.RelateOnCopyComponent : object {
    public sealed virtual void Initialize();
    public sealed virtual void Terminate();
    private static void ContentServiceCopied(IContentService sender, CopyEventArgs`1<IContent> e);
}
[RuntimeLevelAttribute]
public class Umbraco.Core.Compose.RelateOnCopyComposer : ComponentComposer`1<RelateOnCopyComponent> {
}
public class Umbraco.Core.Compose.RelateOnTrashComponent : object {
    public sealed virtual void Initialize();
    public sealed virtual void Terminate();
    private static void ContentService_Moved(IContentService sender, MoveEventArgs`1<IContent> e);
    private static void MediaService_Moved(IMediaService sender, MoveEventArgs`1<IMedia> e);
    private static void ContentService_Trashed(IContentService sender, MoveEventArgs`1<IContent> e);
    private static void MediaService_Trashed(IMediaService sender, MoveEventArgs`1<IMedia> e);
}
[RuntimeLevelAttribute]
public class Umbraco.Core.Compose.RelateOnTrashComposer : ComponentComposer`1<RelateOnTrashComponent> {
}
public abstract class Umbraco.Core.Composing.BuilderCollectionBase`1 : object {
    private TItem[] _items;
    public int Count { get; }
    protected BuilderCollectionBase`1(IEnumerable`1<TItem> items);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class Umbraco.Core.Composing.CollectionBuilderBase`3 : object {
    private List`1<Type> _types;
    private object _locker;
    private Type[] _registeredTypes;
    protected Lifetime CollectionLifetime { get; }
    public IEnumerable`1<Type> GetTypes();
    public virtual void RegisterWith(IRegister register);
    protected virtual Lifetime get_CollectionLifetime();
    protected void Configure(Action`1<List`1<Type>> action);
    protected virtual IEnumerable`1<Type> GetRegisteringTypes(IEnumerable`1<Type> types);
    private void RegisterTypes(IRegister register);
    protected virtual IEnumerable`1<TItem> CreateItems(IFactory factory);
    protected virtual TItem CreateItem(IFactory factory, Type itemType);
    public virtual TCollection CreateCollection(IFactory factory);
    protected Type EnsureType(Type type, string action);
    public virtual bool Has();
    public virtual bool Has(Type type);
}
public class Umbraco.Core.Composing.ComponentCollection : BuilderCollectionBase`1<IComponent> {
    private static int LogThresholdMilliseconds;
    private IProfilingLogger _logger;
    public ComponentCollection(IEnumerable`1<IComponent> items, IProfilingLogger logger);
    public void Initialize();
    public void Terminate();
}
public class Umbraco.Core.Composing.ComponentCollectionBuilder : OrderedCollectionBuilderBase`3<ComponentCollectionBuilder, ComponentCollection, IComponent> {
    private static int LogThresholdMilliseconds;
    private IProfilingLogger _logger;
    protected ComponentCollectionBuilder This { get; }
    protected virtual ComponentCollectionBuilder get_This();
    protected virtual IEnumerable`1<IComponent> CreateItems(IFactory factory);
    protected virtual IComponent CreateItem(IFactory factory, Type itemType);
}
public abstract class Umbraco.Core.Composing.ComponentComposer`1 : object {
    public virtual void Compose(Composition composition);
}
[AttributeUsageAttribute("1028")]
public class Umbraco.Core.Composing.ComposeAfterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <RequiredType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Weak>k__BackingField;
    public Type RequiredType { get; }
    public Nullable`1<bool> Weak { get; }
    public ComposeAfterAttribute(Type requiredType);
    public ComposeAfterAttribute(Type requiredType, bool weak);
    [CompilerGeneratedAttribute]
public Type get_RequiredType();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Weak();
}
[AttributeUsageAttribute("1028")]
public class Umbraco.Core.Composing.ComposeBeforeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <RequiringType>k__BackingField;
    public Type RequiringType { get; }
    public ComposeBeforeAttribute(Type requiringType);
    [CompilerGeneratedAttribute]
public Type get_RequiringType();
}
public class Umbraco.Core.Composing.Composers : object {
    private Composition _composition;
    private IProfilingLogger _logger;
    private IEnumerable`1<Type> _composerTypes;
    private IEnumerable`1<Attribute> _enableDisableAttributes;
    private static int LogThresholdMilliseconds;
    [ObsoleteAttribute("This overload only gets the EnableComposer/DisableComposer attributes from the composerTypes assemblies.")]
public Composers(Composition composition, IEnumerable`1<Type> composerTypes, IProfilingLogger logger);
    public Composers(Composition composition, IEnumerable`1<Type> composerTypes, IEnumerable`1<Attribute> enableDisableAttributes, IProfilingLogger logger);
    public void Compose();
    internal IEnumerable`1<Type> PrepareComposerTypes();
    internal Dictionary`2<Type, List`1<Type>> GetRequirements(bool throwOnMissing);
    internal IEnumerable`1<Type> SortComposers(Dictionary`2<Type, List`1<Type>> requirements);
    internal static string GetComposersReport(Dictionary`2<Type, List`1<Type>> requirements);
    private static void EnableDisableComposers(IEnumerable`1<Attribute> enableDisableAttributes, ICollection`1<Type> types);
    private static void GatherRequirementsFromAfterAttribute(Type type, ICollection`1<Type> types, IDictionary`2<Type, List`1<Type>> requirements, bool throwOnMissing);
    private static void GatherRequirementsFromBeforeAttribute(Type type, ICollection`1<Type> types, IDictionary`2<Type, List`1<Type>> requirements);
    private IEnumerable`1<IComposer> InstantiateComposers(IEnumerable`1<Type> types);
    [CompilerGeneratedAttribute]
private bool <GetRequirements>b__10_0(Type x);
    [CompilerGeneratedAttribute]
internal static void <GetRequirements>g__GatherInterfaces|10_1(Type type, Func`2<TAttribute, Type> getTypeInAttribute, HashSet`1<Type> iset, List`1<Type> set2);
    [CompilerGeneratedAttribute]
internal static bool <GetComposersReport>g__HasReq|12_0(IEnumerable`1<Type> types, Type type);
    [CompilerGeneratedAttribute]
internal static void <EnableDisableComposers>g__UpdateEnableInfo|13_0(Type composerType, int weight2, Dictionary`2<Type, EnableInfo> enabled2, bool value, <>c__DisplayClass13_0& );
    [CompilerGeneratedAttribute]
internal static IComposer <InstantiateComposers>g__InstantiateComposer|16_0(Type type);
}
public class Umbraco.Core.Composing.Composition : object {
    private Dictionary`2<Type, ICollectionBuilder> _builders;
    private Dictionary`2<string, Action`1<IRegister>> _uniques;
    private IRegister _register;
    [CompilerGeneratedAttribute]
private IProfilingLogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeLoader <TypeLoader>k__BackingField;
    [CompilerGeneratedAttribute]
private IRuntimeState <RuntimeState>k__BackingField;
    [CompilerGeneratedAttribute]
private Configs <Configs>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Action> <OnCreatingFactory>k__BackingField;
    public IProfilingLogger Logger { get; }
    public TypeLoader TypeLoader { get; }
    public IRuntimeState RuntimeState { get; }
    public Configs Configs { get; }
    public object Concrete { get; }
    public Dictionary`2<string, Action> OnCreatingFactory { get; }
    public Composition(IRegister register, TypeLoader typeLoader, IProfilingLogger logger, IRuntimeState runtimeState, Configs configs);
    [CompilerGeneratedAttribute]
public IProfilingLogger get_Logger();
    [CompilerGeneratedAttribute]
public TypeLoader get_TypeLoader();
    [CompilerGeneratedAttribute]
public IRuntimeState get_RuntimeState();
    [CompilerGeneratedAttribute]
public Configs get_Configs();
    public sealed virtual object get_Concrete();
    public sealed virtual void Register(Type serviceType, Lifetime lifetime);
    public sealed virtual void Register(Type serviceType, Type implementingType, Lifetime lifetime);
    public sealed virtual void Register(Func`2<IFactory, TService> factory, Lifetime lifetime);
    public sealed virtual void Register(Type serviceType, object instance);
    public sealed virtual void RegisterFor(Lifetime lifetime);
    public sealed virtual void RegisterFor(Type implementingType, Lifetime lifetime);
    public sealed virtual void RegisterFor(Func`2<IFactory, TService> factory, Lifetime lifetime);
    public sealed virtual void RegisterFor(TService instance);
    public sealed virtual void RegisterAuto(Type serviceBaseType);
    public sealed virtual void ConfigureForWeb();
    public sealed virtual IFactory CreateFactory();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Action> get_OnCreatingFactory();
    private string GetUniqueName();
    private string GetUniqueName(Type serviceType);
    private string GetUniqueName();
    private string GetUniqueName(Type serviceType, Type targetType);
    public void RegisterUnique(Type serviceType);
    public void RegisterUnique(Type serviceType, Type implementingType);
    public void RegisterUnique(Func`2<IFactory, TService> factory);
    public void RegisterUnique(Type serviceType, object instance);
    public void RegisterUniqueFor();
    public void RegisterUniqueFor(Type implementingType);
    public void RegisterUniqueFor(Func`2<IFactory, TService> factory);
    public void RegisterUniqueFor(TService instance);
    public TBuilder WithCollectionBuilder();
}
[ExtensionAttribute]
public static class Umbraco.Core.Composing.CompositionExtensions.Configuration : object {
    [ExtensionAttribute]
public static Composition ComposeConfiguration(Composition composition);
}
[ExtensionAttribute]
public static class Umbraco.Core.Composing.CompositionExtensions.CoreMappingProfiles : object {
    [ExtensionAttribute]
public static Composition ComposeCoreMappingProfiles(Composition composition);
}
[ExtensionAttribute]
public static class Umbraco.Core.Composing.CompositionExtensions.FileSystems : object {
    [ExtensionAttribute]
public static Composition ComposeFileSystems(Composition composition);
}
[ExtensionAttribute]
public static class Umbraco.Core.Composing.CompositionExtensions.Repositories : object {
    [ExtensionAttribute]
public static Composition ComposeRepositories(Composition composition);
}
[ExtensionAttribute]
public static class Umbraco.Core.Composing.CompositionExtensions.Services : object {
    [ExtensionAttribute]
public static Composition ComposeServices(Composition composition);
    private static PackagesRepository CreatePackageRepository(IFactory factory, string packageRepoFileName);
    private static LocalizedTextServiceFileSources SourcesFactory(IFactory container);
}
public static class Umbraco.Core.Composing.Current : object {
    private static IFactory _factory;
    private static IRuntimeState _state;
    private static IShortStringHelper _shortStringHelper;
    private static ILogger _logger;
    private static IProfiler _profiler;
    private static IProfilingLogger _profilingLogger;
    private static IPublishedValueFallback _publishedValueFallback;
    private static Configs _configs;
    [CompilerGeneratedAttribute]
private static EventHandler Resetted;
    public static IFactory Factory { get; public set; }
    internal static bool HasFactory { get; }
    public static UmbracoMapper Mapper { get; }
    public static IShortStringHelper ShortStringHelper { get; }
    public static ILogger Logger { get; }
    public static IProfiler Profiler { get; }
    public static IProfilingLogger ProfilingLogger { get; }
    public static IRuntimeState RuntimeState { get; internal set; }
    public static TypeLoader TypeLoader { get; }
    public static Configs Configs { get; }
    public static IFileSystems FileSystems { get; }
    public static IMediaFileSystem MediaFileSystem { get; }
    public static UrlSegmentProviderCollection UrlSegmentProviders { get; }
    public static CacheRefresherCollection CacheRefreshers { get; }
    public static DataEditorCollection DataEditors { get; }
    public static DataValueReferenceFactoryCollection DataValueReferenceFactories { get; }
    public static PropertyEditorCollection PropertyEditors { get; }
    public static ParameterEditorCollection ParameterEditors { get; }
    internal static ManifestValueValidatorCollection ManifestValidators { get; }
    internal static PackageActionCollection PackageActions { get; }
    internal static IPackageActionRunner PackageActionRunner { get; }
    internal static PropertyValueConverterCollection PropertyValueConverters { get; }
    internal static IPublishedModelFactory PublishedModelFactory { get; }
    public static IServerMessenger ServerMessenger { get; }
    public static IServerRegistrar ServerRegistrar { get; }
    public static ICultureDictionaryFactory CultureDictionaryFactory { get; }
    public static AppCaches AppCaches { get; }
    public static ServiceContext Services { get; }
    public static IScopeProvider ScopeProvider { get; }
    public static ISqlContext SqlContext { get; }
    public static IPublishedContentTypeFactory PublishedContentTypeFactory { get; }
    public static IPublishedValueFallback PublishedValueFallback { get; }
    public static IVariationContextAccessor VariationContextAccessor { get; }
    public static IImageUrlGenerator ImageUrlGenerator { get; }
    public static IFactory get_Factory();
    public static void set_Factory(IFactory value);
    internal static bool get_HasFactory();
    public static void Reset();
    public static void UnlockConfigs();
    [CompilerGeneratedAttribute]
internal static void add_Resetted(EventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_Resetted(EventHandler value);
    public static UmbracoMapper get_Mapper();
    public static IShortStringHelper get_ShortStringHelper();
    public static ILogger get_Logger();
    public static IProfiler get_Profiler();
    public static IProfilingLogger get_ProfilingLogger();
    public static IRuntimeState get_RuntimeState();
    internal static void set_RuntimeState(IRuntimeState value);
    public static TypeLoader get_TypeLoader();
    public static Configs get_Configs();
    public static IFileSystems get_FileSystems();
    public static IMediaFileSystem get_MediaFileSystem();
    public static UrlSegmentProviderCollection get_UrlSegmentProviders();
    public static CacheRefresherCollection get_CacheRefreshers();
    public static DataEditorCollection get_DataEditors();
    public static DataValueReferenceFactoryCollection get_DataValueReferenceFactories();
    public static PropertyEditorCollection get_PropertyEditors();
    public static ParameterEditorCollection get_ParameterEditors();
    internal static ManifestValueValidatorCollection get_ManifestValidators();
    internal static PackageActionCollection get_PackageActions();
    internal static IPackageActionRunner get_PackageActionRunner();
    internal static PropertyValueConverterCollection get_PropertyValueConverters();
    internal static IPublishedModelFactory get_PublishedModelFactory();
    public static IServerMessenger get_ServerMessenger();
    public static IServerRegistrar get_ServerRegistrar();
    public static ICultureDictionaryFactory get_CultureDictionaryFactory();
    public static AppCaches get_AppCaches();
    public static ServiceContext get_Services();
    public static IScopeProvider get_ScopeProvider();
    public static ISqlContext get_SqlContext();
    public static IPublishedContentTypeFactory get_PublishedContentTypeFactory();
    public static IPublishedValueFallback get_PublishedValueFallback();
    public static IVariationContextAccessor get_VariationContextAccessor();
    public static IImageUrlGenerator get_ImageUrlGenerator();
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.Composing.DisableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <DisabledType>k__BackingField;
    public Type DisabledType { get; }
    public DisableAttribute(Type disabledType);
    [CompilerGeneratedAttribute]
public Type get_DisabledType();
}
[AttributeUsageAttribute("1")]
public class Umbraco.Core.Composing.DisableComposerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <DisabledType>k__BackingField;
    public Type DisabledType { get; }
    public DisableComposerAttribute(Type disabledType);
    [CompilerGeneratedAttribute]
public Type get_DisabledType();
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.Composing.EnableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <EnabledType>k__BackingField;
    public Type EnabledType { get; }
    public EnableAttribute(Type enabledType);
    [CompilerGeneratedAttribute]
public Type get_EnabledType();
}
[AttributeUsageAttribute("1")]
public class Umbraco.Core.Composing.EnableComposerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <EnabledType>k__BackingField;
    public Type EnabledType { get; }
    public EnableComposerAttribute(Type enabledType);
    [CompilerGeneratedAttribute]
public Type get_EnabledType();
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.Composing.HideFromTypeFinderAttribute : Attribute {
}
public interface Umbraco.Core.Composing.IBuilderCollection`1 {
    public int Count { get; }
    public abstract virtual int get_Count();
}
public interface Umbraco.Core.Composing.ICollectionBuilder {
    public abstract virtual void RegisterWith(IRegister register);
}
public interface Umbraco.Core.Composing.ICollectionBuilder`2 {
    public abstract virtual TCollection CreateCollection(IFactory factory);
}
public interface Umbraco.Core.Composing.IComponent {
    public abstract virtual void Initialize();
    public abstract virtual void Terminate();
}
public interface Umbraco.Core.Composing.IComposer {
    public abstract virtual void Compose(Composition composition);
}
public interface Umbraco.Core.Composing.ICoreComposer {
}
public interface Umbraco.Core.Composing.IDiscoverable {
}
public interface Umbraco.Core.Composing.IFactory {
    public object Concrete { get; }
    public abstract virtual object get_Concrete();
    public abstract virtual object GetInstance(Type type);
    public abstract virtual TService GetInstanceFor();
    public abstract virtual object TryGetInstance(Type type);
    public abstract virtual IEnumerable`1<object> GetAllInstances(Type serviceType);
    public abstract virtual IEnumerable`1<TService> GetAllInstances();
    public abstract virtual void Release(object instance);
    public abstract virtual IDisposable BeginScope();
    public abstract virtual void EnablePerWebRequestScope();
}
public interface Umbraco.Core.Composing.IRegister {
    public object Concrete { get; }
    public abstract virtual object get_Concrete();
    public abstract virtual void Register(Type serviceType, Lifetime lifetime);
    public abstract virtual void Register(Type serviceType, Type implementingType, Lifetime lifetime);
    public abstract virtual void Register(Func`2<IFactory, TService> factory, Lifetime lifetime);
    public abstract virtual void Register(Type serviceType, object instance);
    public abstract virtual void RegisterFor(Lifetime lifetime);
    public abstract virtual void RegisterFor(Type implementingType, Lifetime lifetime);
    public abstract virtual void RegisterFor(Func`2<IFactory, TService> factory, Lifetime lifetime);
    public abstract virtual void RegisterFor(TService instance);
    public abstract virtual void RegisterAuto(Type serviceBaseType);
    public abstract virtual void ConfigureForWeb();
    public abstract virtual IFactory CreateFactory();
}
[ComposeAfterAttribute("Umbraco.Core.Composing.ICoreComposer")]
public interface Umbraco.Core.Composing.IUserComposer {
}
public abstract class Umbraco.Core.Composing.LazyCollectionBuilderBase`3 : CollectionBuilderBase`3<TBuilder, TCollection, TItem> {
    private List`1<Func`1<IEnumerable`1<Type>>> _producers;
    private List`1<Type> _excluded;
    protected TBuilder This { get; }
    protected abstract virtual TBuilder get_This();
    public TBuilder Clear();
    public TBuilder Add();
    public TBuilder Add(Type type);
    public TBuilder Add(Func`1<IEnumerable`1<Type>> producer);
    public TBuilder Exclude();
    public TBuilder Exclude(Type type);
    protected virtual IEnumerable`1<Type> GetRegisteringTypes(IEnumerable`1<Type> types);
    [CompilerGeneratedAttribute]
private void <Clear>b__4_0(List`1<Type> types);
    [CompilerGeneratedAttribute]
private void <Exclude>b__8_0(List`1<Type> types);
    [CompilerGeneratedAttribute]
private Type <GetRegisteringTypes>b__10_1(Type x);
}
public enum Umbraco.Core.Composing.Lifetime : Enum {
    public int value__;
    public static Lifetime Transient;
    public static Lifetime Request;
    public static Lifetime Scope;
    public static Lifetime Singleton;
}
public class Umbraco.Core.Composing.LightInject.LightInjectContainer : object {
    private int _disposed;
    [CompilerGeneratedAttribute]
private ServiceContainer <Container>k__BackingField;
    protected ServiceContainer Container { get; }
    public object Concrete { get; }
    protected LightInjectContainer(ServiceContainer container);
    public static LightInjectContainer Create();
    protected static ServiceContainer CreateServiceContainer();
    [CompilerGeneratedAttribute]
protected ServiceContainer get_Container();
    public sealed virtual object get_Concrete();
    public sealed virtual void Dispose();
    public sealed virtual IFactory CreateFactory();
    private static string GetTargetedServiceName();
    public sealed virtual object GetInstance(Type type);
    public sealed virtual TService GetInstanceFor();
    public sealed virtual object TryGetInstance(Type type);
    public sealed virtual IEnumerable`1<T> GetAllInstances();
    public sealed virtual IEnumerable`1<object> GetAllInstances(Type type);
    public sealed virtual void Release(object instance);
    public sealed virtual void Register(Type serviceType, Lifetime lifetime);
    public sealed virtual void Register(Type serviceType, Type implementingType, Lifetime lifetime);
    public sealed virtual void Register(Func`2<IFactory, TService> factory, Lifetime lifetime);
    public sealed virtual void Register(Type serviceType, object instance);
    public sealed virtual void RegisterFor(Lifetime lifetime);
    public sealed virtual void RegisterFor(Type implementingType, Lifetime lifetime);
    public sealed virtual void RegisterFor(Func`2<IFactory, TService> factory, Lifetime lifetime);
    public sealed virtual void RegisterFor(TService instance);
    private ILifetime GetLifetime(Lifetime lifetime);
    public sealed virtual void RegisterAuto(Type serviceBaseType);
    public sealed virtual IDisposable BeginScope();
    public virtual void ConfigureForWeb();
    public sealed virtual void EnablePerWebRequestScope();
}
public class Umbraco.Core.Composing.LightInject.LightInjectException : Exception {
    private static string LightInjectUnableToResolveType;
    private static string LightInjectUnresolvedDependency;
    private static string LightInjectRequestedDependency;
    public LightInjectException(string message);
    public LightInjectException(string message, Exception innerException);
    protected LightInjectException(SerializationInfo info, StreamingContext context);
    public static void TryThrow(Exception e);
    public static void TryThrow(Exception e, Type implementingType);
    private static void WriteDetails(InvalidOperationException ex, StringBuilder sb);
}
public class Umbraco.Core.Composing.LightInject.MixedLightInjectScopeManagerProvider : object {
    private IScopeManagerProvider _provider;
    public void EnablePerWebRequestScope();
    public sealed virtual IScopeManager GetScopeManager(IServiceFactory factory);
}
public abstract class Umbraco.Core.Composing.OrderedCollectionBuilderBase`3 : CollectionBuilderBase`3<TBuilder, TCollection, TItem> {
    protected TBuilder This { get; }
    protected abstract virtual TBuilder get_This();
    public TBuilder Clear();
    public TBuilder Append();
    public TBuilder Append(Type type);
    public TBuilder Append(IEnumerable`1<Type> types);
    public TBuilder Insert(int index);
    public TBuilder Insert(Type type);
    public TBuilder Insert(int index, Type type);
    public TBuilder InsertBefore();
    public TBuilder InsertBefore(Type typeBefore, Type type);
    public TBuilder InsertAfter();
    public TBuilder InsertAfter(Type typeAfter, Type type);
    public TBuilder Remove();
    public TBuilder Remove(Type type);
    public TBuilder Replace();
    public TBuilder Replace(Type typeReplaced, Type type);
}
public static class Umbraco.Core.Composing.RegisterFactory : object {
    private static string CoreLightInjectContainerTypeName;
    private static string WebLightInjectContainerTypeName;
    public static IRegister Create();
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.Composing.RuntimeLevelAttribute : Attribute {
    [CompilerGeneratedAttribute]
private RuntimeLevel <MinLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeLevel <MaxLevel>k__BackingField;
    public RuntimeLevel MinLevel { get; public set; }
    public RuntimeLevel MaxLevel { get; public set; }
    [CompilerGeneratedAttribute]
public RuntimeLevel get_MinLevel();
    [CompilerGeneratedAttribute]
public void set_MinLevel(RuntimeLevel value);
    [CompilerGeneratedAttribute]
public RuntimeLevel get_MaxLevel();
    [CompilerGeneratedAttribute]
public void set_MaxLevel(RuntimeLevel value);
}
public abstract class Umbraco.Core.Composing.SetCollectionBuilderBase`3 : CollectionBuilderBase`3<TBuilder, TCollection, TItem> {
    protected TBuilder This { get; }
    protected abstract virtual TBuilder get_This();
    public TBuilder Clear();
    public TBuilder Add();
    public TBuilder Add(Type type);
    public TBuilder Add(IEnumerable`1<Type> types);
    public TBuilder Remove();
    public TBuilder Remove(Type type);
    public TBuilder Replace();
    public TBuilder Replace(Type typeReplaced, Type type);
}
public abstract class Umbraco.Core.Composing.TargetedServiceFactory`1 : object {
    private IFactory _factory;
    protected TargetedServiceFactory`1(IFactory factory);
    public TService For();
}
public abstract class Umbraco.Core.Composing.TypeCollectionBuilderBase`3 : object {
    private HashSet`1<Type> _types;
    protected TBuilder This { get; }
    protected abstract virtual TBuilder get_This();
    private static Type Validate(Type type, string action);
    public TBuilder Add(Type type);
    public TBuilder Add();
    public TBuilder Add(IEnumerable`1<Type> types);
    public TBuilder Remove(Type type);
    public TBuilder Remove();
    public sealed virtual TCollection CreateCollection(IFactory factory);
    public sealed virtual void RegisterWith(IRegister register);
}
public static class Umbraco.Core.Composing.TypeFinder : object {
    private static HashSet`1 modreq(System.Runtime.CompilerServices.IsVolatile) _localFilteredAssemblyCache;
    private static object LocalFilteredAssemblyCacheLocker;
    private static List`1<string> NotifiedLoadExceptionAssemblies;
    private static String[] _assembliesAcceptingLoadExceptions;
    private static Lazy`1<HashSet`1<Assembly>> AllAssemblies;
    internal static String[] KnownAssemblyExclusionFilter;
    private static String[] AssembliesAcceptingLoadExceptions { get; }
    private static TypeFinder();
    private static String[] get_AssembliesAcceptingLoadExceptions();
    private static bool AcceptsLoadExceptions(Assembly a);
    internal static HashSet`1<Assembly> GetAllAssemblies();
    internal static HashSet`1<Assembly> GetAssembliesWithKnownExclusions(IEnumerable`1<Assembly> excludeFromResults);
    private static IEnumerable`1<Assembly> GetFilteredAssemblies(IEnumerable`1<Assembly> excludeFromResults, String[] exclusionFilter);
    public static IEnumerable`1<Type> FindClassesOfTypeWithAttribute();
    public static IEnumerable`1<Type> FindClassesOfTypeWithAttribute(IEnumerable`1<Assembly> assemblies);
    public static IEnumerable`1<Type> FindClassesOfTypeWithAttribute(IEnumerable`1<Assembly> assemblies, bool onlyConcreteClasses);
    public static IEnumerable`1<Type> FindClassesOfTypeWithAttribute(Type assignTypeFrom, IEnumerable`1<Assembly> assemblies, bool onlyConcreteClasses);
    public static IEnumerable`1<Type> FindClassesOfType();
    public static IEnumerable`1<Type> FindClassesOfType(IEnumerable`1<Assembly> assemblies, bool onlyConcreteClasses);
    public static IEnumerable`1<Type> FindClassesOfType(IEnumerable`1<Assembly> assemblies);
    public static IEnumerable`1<Type> FindClassesWithAttribute(IEnumerable`1<Assembly> assemblies, bool onlyConcreteClasses);
    public static IEnumerable`1<Type> FindClassesWithAttribute(Type attributeType, IEnumerable`1<Assembly> assemblies, bool onlyConcreteClasses);
    public static IEnumerable`1<Type> FindClassesWithAttribute(IEnumerable`1<Assembly> assemblies);
    public static IEnumerable`1<Type> FindClassesWithAttribute();
    private static IEnumerable`1<Type> GetClassesWithAttribute(Type attributeType, IEnumerable`1<Assembly> assemblies, bool onlyConcreteClasses);
    private static IEnumerable`1<Type> GetClassesWithBaseType(Type baseType, IEnumerable`1<Assembly> assemblies, bool onlyConcreteClasses, Func`2<Type, bool> additionalFilter);
    internal static IEnumerable`1<Type> GetTypesWithFormattedException(Assembly a);
    private static void AppendCouldNotLoad(StringBuilder sb, Assembly a, bool getAll);
    private static void AppendLoaderException(StringBuilder sb, Exception loaderException);
    public static Type GetTypeByName(string typeName);
}
internal static class Umbraco.Core.Composing.TypeHelper : object {
    private static ConcurrentDictionary`2<Tuple`4<Type, bool, bool, bool>, PropertyInfo[]> GetPropertiesCache;
    private static ConcurrentDictionary`2<Type, FieldInfo[]> GetFieldsCache;
    private static Assembly[] EmptyAssemblies;
    private static TypeHelper();
    internal static IList CreateGenericEnumerableFromObject(object obj);
    public static bool IsOverride(MethodInfo m);
    public static Assembly[] GetReferencingAssemblies(Assembly assembly, IEnumerable`1<Assembly> assemblies);
    public static bool HasReference(Assembly assembly, string name);
    public static bool IsNonStaticClass(Type t);
    public static bool IsStaticClass(Type type);
    public static Attempt`1<Type> GetLowestBaseType(Type[] types);
    public static bool IsTypeAssignableFrom(Type contract, Type implementation);
    public static bool IsTypeAssignableFrom(Type implementation);
    public static bool IsTypeAssignableFrom(object implementation);
    public static bool IsValueType(Type implementation);
    public static bool IsImplicitValueType(Type implementation);
    public static PropertyInfo GetProperty(Type type, string name, bool mustRead, bool mustWrite, bool includeIndexed, bool caseSensitive);
    public static FieldInfo[] CachedDiscoverableFields(Type type);
    public static PropertyInfo[] CachedDiscoverableProperties(Type type, bool mustRead, bool mustWrite, bool includeIndexed);
    private static bool MatchGeneric(Type implementation, Type contract, IDictionary`2<string, Type> bindings);
    public static bool MatchType(Type implementation, Type contract);
    internal static bool MatchType(Type implementation, Type contract, IDictionary`2<string, Type> bindings, bool variance);
}
public class Umbraco.Core.Composing.TypeLoader : object {
    private static string CacheKey;
    private IAppPolicyCache _runtimeCache;
    private IProfilingLogger _logger;
    private Dictionary`2<CompositeTypeTypeKey, TypeList> _types;
    private object _locko;
    private object _timerLock;
    private Timer _timer;
    private bool _timing;
    private string _cachedAssembliesHash;
    private string _currentAssembliesHash;
    private IEnumerable`1<Assembly> _assemblies;
    private bool _reportedChange;
    private string _localTempPath;
    private Lazy`1<string> _fileBasePath;
    [CompilerGeneratedAttribute]
private bool <RequiresRescanning>k__BackingField;
    private static int ListFileOpenReadTimeout;
    private static int ListFileOpenWriteTimeout;
    private static int ListFileWriteThrottle;
    private static int ListFileCacheDuration;
    private static int FileDeleteTimeout;
    internal IEnumerable`1<Assembly> AssembliesToScan { get; internal set; }
    internal IEnumerable`1<TypeList> TypeLists { get; }
    private bool RequiresRescanning { get; }
    internal string CachedAssembliesHash { get; }
    private string CurrentAssembliesHash { get; }
    public TypeLoader(IAppPolicyCache runtimeCache, string localTempPath, IProfilingLogger logger);
    internal TypeLoader(IAppPolicyCache runtimeCache, string localTempPath, IProfilingLogger logger, bool detectChanges);
    internal IEnumerable`1<Assembly> get_AssembliesToScan();
    internal void set_AssembliesToScan(IEnumerable`1<Assembly> value);
    internal IEnumerable`1<TypeList> get_TypeLists();
    internal void AddTypeList(TypeList typeList);
    [CompilerGeneratedAttribute]
private bool get_RequiresRescanning();
    internal string get_CachedAssembliesHash();
    private string get_CurrentAssembliesHash();
    private void WriteCacheTypesHash();
    private static string GetFileHash(IEnumerable`1<Tuple`2<FileSystemInfo, bool>> filesAndFolders, IProfilingLogger logger);
    private static string RemoveCrLf(string s);
    internal static string GetFileHash(IEnumerable`1<FileSystemInfo> filesAndFolders, IProfilingLogger logger);
    internal Attempt`1<IEnumerable`1<string>> TryGetCached(Type baseType, Type attributeType);
    private Dictionary`2<Tuple`2<string, string>, IEnumerable`1<string>> ReadCacheSafe();
    internal Dictionary`2<Tuple`2<string, string>, IEnumerable`1<string>> ReadCache();
    internal string GetTypesListFilePath();
    private string GetTypesHashFilePath();
    private string GetFileBasePath();
    internal void WriteCache();
    internal void UpdateCache();
    public void ClearTypesCache();
    private Stream GetFileStream(string path, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, int timeoutMilliseconds);
    private void DeleteFile(string path, int timeoutMilliseconds);
    public IEnumerable`1<T> GetAssemblyAttributes();
    public IEnumerable`1<Attribute> GetAssemblyAttributes();
    public IEnumerable`1<Attribute> GetAssemblyAttributes(Type[] attributeTypes);
    public IEnumerable`1<Type> GetTypes(bool cache, IEnumerable`1<Assembly> specificAssemblies);
    public IEnumerable`1<Type> GetTypesWithAttribute(bool cache, IEnumerable`1<Assembly> specificAssemblies);
    public IEnumerable`1<Type> GetAttributedTypes(bool cache, IEnumerable`1<Assembly> specificAssemblies);
    private IEnumerable`1<Type> GetTypesInternal(Type baseType, Type attributeType, Func`1<IEnumerable`1<Type>> finder, string action, bool cache);
    private static string GetName(Type baseType, Type attributeType);
    private IEnumerable`1<Type> GetTypesInternalLocked(Type baseType, Type attributeType, Func`1<IEnumerable`1<Type>> finder, string action, bool cache);
    [CompilerGeneratedAttribute]
private void <UpdateCache>g__TimerRelease|46_0(object o);
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.Composing.WeightAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    public int Weight { get; }
    public WeightAttribute(int weight);
    [CompilerGeneratedAttribute]
public int get_Weight();
}
public abstract class Umbraco.Core.Composing.WeightedCollectionBuilderBase`3 : CollectionBuilderBase`3<TBuilder, TCollection, TItem> {
    private Dictionary`2<Type, int> _customWeights;
    [CompilerGeneratedAttribute]
private int <DefaultWeight>k__BackingField;
    protected TBuilder This { get; }
    public int DefaultWeight { get; public set; }
    protected abstract virtual TBuilder get_This();
    public TBuilder Clear();
    public TBuilder Add();
    public TBuilder Add(Type type);
    public TBuilder Add(IEnumerable`1<Type> types);
    public TBuilder Remove();
    public TBuilder Remove(Type type);
    public TBuilder SetWeight(int weight);
    protected virtual IEnumerable`1<Type> GetRegisteringTypes(IEnumerable`1<Type> types);
    [CompilerGeneratedAttribute]
public virtual int get_DefaultWeight();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultWeight(int value);
    protected virtual int GetWeight(Type type);
    [CompilerGeneratedAttribute]
private int <GetRegisteringTypes>b__10_0(Type t1, Type t2);
}
[ExtensionAttribute]
public static class Umbraco.Core.CompositionExtensions : object {
    [ExtensionAttribute]
public static CacheRefresherCollectionBuilder CacheRefreshers(Composition composition);
    [ExtensionAttribute]
public static MapDefinitionCollectionBuilder MapDefinitions(Composition composition);
    [ExtensionAttribute]
public static MapperCollectionBuilder Mappers(Composition composition);
    [ExtensionAttribute]
internal static PackageActionCollectionBuilder PackageActions(Composition composition);
    [ExtensionAttribute]
public static DataEditorCollectionBuilder DataEditors(Composition composition);
    [ExtensionAttribute]
public static DataValueReferenceFactoryCollectionBuilder DataValueReferenceFactories(Composition composition);
    [ExtensionAttribute]
public static PropertyValueConverterCollectionBuilder PropertyValueConverters(Composition composition);
    [ExtensionAttribute]
public static UrlSegmentProviderCollectionBuilder UrlSegmentProviders(Composition composition);
    [ExtensionAttribute]
internal static ManifestValueValidatorCollectionBuilder ManifestValueValidators(Composition composition);
    [ExtensionAttribute]
public static ManifestFilterCollectionBuilder ManifestFilters(Composition composition);
    [ExtensionAttribute]
public static ComponentCollectionBuilder Components(Composition composition);
    [ExtensionAttribute]
public static void SetCultureDictionaryFactory(Composition composition);
    [ExtensionAttribute]
public static void SetCultureDictionaryFactory(Composition composition, Func`2<IFactory, ICultureDictionaryFactory> factory);
    [ExtensionAttribute]
public static void SetCultureDictionaryFactory(Composition composition, ICultureDictionaryFactory factory);
    [ExtensionAttribute]
public static void SetPublishedContentModelFactory(Composition composition);
    [ExtensionAttribute]
public static void SetPublishedContentModelFactory(Composition composition, Func`2<IFactory, IPublishedModelFactory> factory);
    [ExtensionAttribute]
public static void SetPublishedContentModelFactory(Composition composition, IPublishedModelFactory factory);
    [ExtensionAttribute]
public static void SetServerRegistrar(Composition composition);
    [ExtensionAttribute]
public static void SetServerRegistrar(Composition composition, Func`2<IFactory, IServerRegistrar> factory);
    [ExtensionAttribute]
public static void SetServerRegistrar(Composition composition, IServerRegistrar registrar);
    [ExtensionAttribute]
public static void SetServerMessenger(Composition composition);
    [ExtensionAttribute]
public static void SetServerMessenger(Composition composition, Func`2<IFactory, IServerMessenger> factory);
    [ExtensionAttribute]
public static void SetServerMessenger(Composition composition, IServerMessenger registrar);
    [ExtensionAttribute]
public static void SetDatabaseServerMessengerOptions(Composition composition, Func`2<IFactory, DatabaseServerMessengerOptions> factory);
    [ExtensionAttribute]
public static void SetDatabaseServerMessengerOptions(Composition composition, DatabaseServerMessengerOptions options);
    [ExtensionAttribute]
public static void SetShortStringHelper(Composition composition);
    [ExtensionAttribute]
public static void SetShortStringHelper(Composition composition, Func`2<IFactory, IShortStringHelper> factory);
    [ExtensionAttribute]
public static void SetShortStringHelper(Composition composition, IShortStringHelper helper);
    [ExtensionAttribute]
public static void SetMediaFileSystem(Composition composition, Func`2<IFactory, IFileSystem> filesystemFactory);
    [ExtensionAttribute]
public static void SetMediaFileSystem(Composition composition, Func`1<IFileSystem> filesystemFactory);
    [ExtensionAttribute]
public static void SetLogViewer(Composition composition);
    [ExtensionAttribute]
public static void SetLogViewer(Composition composition, Func`2<IFactory, ILogViewer> factory);
    [ExtensionAttribute]
public static void SetLogViewer(Composition composition, ILogViewer viewer);
    [ExtensionAttribute]
public static void RegisterEssentials(Composition composition, ILogger logger, IProfiler profiler, IProfilingLogger profilingLogger, IMainDom mainDom, AppCaches appCaches, IUmbracoDatabaseFactory databaseFactory, TypeLoader typeLoader, IRuntimeState state);
    [ExtensionAttribute]
public static void RegisterFileSystem(Composition composition);
    [ExtensionAttribute]
public static void RegisterFileSystem(Composition composition);
    [ExtensionAttribute]
public static void RegisterUnique(Composition composition);
    [ExtensionAttribute]
public static void RegisterUnique(Composition composition);
    [ExtensionAttribute]
public static void RegisterUniqueFor(Composition composition);
    [ExtensionAttribute]
public static void RegisterUnique(Composition composition, TService instance);
}
[ExtensionAttribute]
public static class Umbraco.Core.ConfigsExtensions : object {
    [ExtensionAttribute]
public static IGlobalSettings Global(Configs configs);
    [ExtensionAttribute]
public static IUmbracoSettingsSection Settings(Configs configs);
    [ExtensionAttribute]
public static IHealthChecks HealthChecks(Configs configs);
    [ExtensionAttribute]
public static IGridConfig Grids(Configs configs);
    [ExtensionAttribute]
public static ICoreDebug CoreDebug(Configs configs);
    [ExtensionAttribute]
public static void AddCoreConfigs(Configs configs);
}
public class Umbraco.Core.Configuration.CaseInsensitiveEnumConfigConverter`1 : ConfigurationConverterBase {
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
internal class Umbraco.Core.Configuration.CommaDelimitedConfigurationElement : InnerTextConfigurationElement`1<CommaDelimitedStringCollection> {
    public CommaDelimitedStringCollection Value { get; }
    public virtual CommaDelimitedStringCollection get_Value();
    private sealed virtual override IEnumerator`1<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Umbraco.Core.Configuration.Configs : object {
    private Dictionary`2<Type, Lazy`1<object>> _configs;
    private Dictionary`2<Type, Action`1<IRegister>> _registerings;
    public TConfig GetConfig();
    public void Add(Func`1<TConfig> configFactory);
    public void Add(Func`2<IFactory, TConfig> configFactory);
    public void Add(string sectionName);
    private static TConfig GetConfig(string sectionName);
    public void RegisterWith(IRegister register);
}
internal class Umbraco.Core.Configuration.CoreDebug : object {
    [CompilerGeneratedAttribute]
private bool <LogUncompletedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpOnTimeoutThreadAbort>k__BackingField;
    public bool LogUncompletedScopes { get; }
    public bool DumpOnTimeoutThreadAbort { get; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_LogUncompletedScopes();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DumpOnTimeoutThreadAbort();
}
public class Umbraco.Core.Configuration.GlobalSettings : object {
    private string _localTempPath;
    private static string _reservedPaths;
    private static string _reservedUrls;
    private static int _sqlWriteLockTimeOut;
    internal static string StaticReservedPaths;
    internal static string StaticReservedUrls;
    [CompilerGeneratedAttribute]
private static Nullable`1<bool> <HasSmtpServer>k__BackingField;
    internal static Nullable`1<bool> HasSmtpServer { get; internal set; }
    public string ReservedUrls { get; internal set; }
    public string ReservedPaths { get; }
    public string ContentXmlFile { get; }
    public string Path { get; }
    public string IconsPath { get; }
    public string ConfigurationStatus { get; public set; }
    public static bool DebugMode { get; }
    public int TimeOutInMinutes { get; }
    public int VersionCheckPeriod { get; }
    public LocalTempStorage LocalTempStorageLocation { get; }
    public string LocalTempPath { get; }
    public string DefaultUILanguage { get; }
    public bool HideTopLevelNodeFromPath { get; }
    public bool UseHttps { get; }
    public bool SanitizeTinyMce { get; }
    public int SqlWriteLockTimeOut { get; }
    private static void ResetInternal();
    internal static void Reset();
    public static bool HasSmtpServerConfigured(string appPath);
    [CompilerGeneratedAttribute]
internal static Nullable`1<bool> get_HasSmtpServer();
    [CompilerGeneratedAttribute]
internal static void set_HasSmtpServer(Nullable`1<bool> value);
    public sealed virtual string get_ReservedUrls();
    internal void set_ReservedUrls(string value);
    public sealed virtual string get_ReservedPaths();
    public string get_ContentXmlFile();
    public sealed virtual string get_Path();
    public sealed virtual string get_IconsPath();
    public sealed virtual string get_ConfigurationStatus();
    public sealed virtual void set_ConfigurationStatus(string value);
    internal static void SaveSetting(string key, string value);
    internal static void RemoveSetting(string key);
    public static bool get_DebugMode();
    public sealed virtual int get_TimeOutInMinutes();
    public sealed virtual int get_VersionCheckPeriod();
    public sealed virtual LocalTempStorage get_LocalTempStorageLocation();
    public sealed virtual string get_LocalTempPath();
    public sealed virtual string get_DefaultUILanguage();
    public sealed virtual bool get_HideTopLevelNodeFromPath();
    public sealed virtual bool get_UseHttps();
    public sealed virtual bool get_SanitizeTinyMce();
    public sealed virtual int get_SqlWriteLockTimeOut();
    internal static int GetSqlWriteLockTimeoutFromConfigFile(ILogger logger);
}
[ExtensionAttribute]
public static class Umbraco.Core.Configuration.GlobalSettingsExtensions : object {
    private static string _mvcArea;
    [ExtensionAttribute]
public static string GetUmbracoMvcArea(IGlobalSettings globalSettings);
    [ExtensionAttribute]
internal static string GetUmbracoMvcAreaNoCache(IGlobalSettings globalSettings);
}
internal class Umbraco.Core.Configuration.Grid.GridConfig : object {
    [CompilerGeneratedAttribute]
private IGridEditorsConfig <EditorsConfig>k__BackingField;
    public IGridEditorsConfig EditorsConfig { get; }
    public GridConfig(ILogger logger, AppCaches appCaches, DirectoryInfo configFolder, ManifestParser manifestParser, bool isDebug);
    [CompilerGeneratedAttribute]
public sealed virtual IGridEditorsConfig get_EditorsConfig();
}
internal class Umbraco.Core.Configuration.Grid.GridEditorsConfig : object {
    private ILogger _logger;
    private AppCaches _appCaches;
    private DirectoryInfo _configFolder;
    private ManifestParser _manifestParser;
    private bool _isDebug;
    public IEnumerable`1<IGridEditorConfig> Editors { get; }
    public GridEditorsConfig(ILogger logger, AppCaches appCaches, DirectoryInfo configFolder, ManifestParser manifestParser, bool isDebug);
    public sealed virtual IEnumerable`1<IGridEditorConfig> get_Editors();
    [CompilerGeneratedAttribute]
private List`1<GridEditor> <get_Editors>g__GetResult|7_0();
}
public interface Umbraco.Core.Configuration.Grid.IGridConfig {
    public IGridEditorsConfig EditorsConfig { get; }
    public abstract virtual IGridEditorsConfig get_EditorsConfig();
}
public interface Umbraco.Core.Configuration.Grid.IGridEditorConfig {
    public string Name { get; }
    public string NameTemplate { get; }
    public string Alias { get; }
    public string View { get; }
    public string Render { get; }
    public string Icon { get; }
    public IDictionary`2<string, object> Config { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_NameTemplate();
    public abstract virtual string get_Alias();
    public abstract virtual string get_View();
    public abstract virtual string get_Render();
    public abstract virtual string get_Icon();
    public abstract virtual IDictionary`2<string, object> get_Config();
}
public interface Umbraco.Core.Configuration.Grid.IGridEditorsConfig {
    public IEnumerable`1<IGridEditorConfig> Editors { get; }
    public abstract virtual IEnumerable`1<IGridEditorConfig> get_Editors();
}
public class Umbraco.Core.Configuration.HealthChecks.DisabledHealthCheckElement : ConfigurationElement {
    private static string IdKey;
    private static string DisabledOnKey;
    private static string DisabledByKey;
    [ConfigurationPropertyAttribute("id")]
public Guid Id { get; }
    [ConfigurationPropertyAttribute("disabledOn")]
public DateTime DisabledOn { get; }
    [ConfigurationPropertyAttribute("disabledBy")]
public int DisabledBy { get; }
    public sealed virtual Guid get_Id();
    public sealed virtual DateTime get_DisabledOn();
    public sealed virtual int get_DisabledBy();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("Umbraco.Core.Configuration.HealthChecks.DisabledHealthCheckElement")]
public class Umbraco.Core.Configuration.HealthChecks.DisabledHealthChecksElementCollection : ConfigurationElementCollection {
    public DisabledHealthCheckElement Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public DisabledHealthCheckElement get_Item(string key);
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.HealthChecks.DisabledHealthChecksElementCollection/<System-Collections-Generic-IEnumerable<Umbraco-Core-Configuration-HealthChecks-IDisabledHealthCheck>-GetEnumerator>d__4")]
private sealed virtual override IEnumerator`1<IDisabledHealthCheck> System.Collections.Generic.IEnumerable<Umbraco.Core.Configuration.HealthChecks.IDisabledHealthCheck>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Umbraco.Core.Configuration.HealthChecks.HealthCheckNotificationSettingsElement : ConfigurationElement {
    private static string EnabledKey;
    private static string FirstRunTimeKey;
    private static string PeriodKey;
    private static string NotificationMethodsKey;
    private static string DisabledChecksKey;
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; }
    [ConfigurationPropertyAttribute("firstRunTime")]
public string FirstRunTime { get; }
    [ConfigurationPropertyAttribute("periodInHours")]
public int PeriodInHours { get; }
    [ConfigurationPropertyAttribute("notificationMethods")]
public NotificationMethodsElementCollection NotificationMethods { get; }
    [ConfigurationPropertyAttribute("disabledChecks")]
public DisabledHealthChecksElementCollection DisabledChecks { get; }
    private bool Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.Enabled { get; }
    private string Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.FirstRunTime { get; }
    private int Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.PeriodInHours { get; }
    private IReadOnlyDictionary`2<string, INotificationMethod> Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.NotificationMethods { get; }
    private IEnumerable`1<IDisabledHealthCheck> Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.DisabledChecks { get; }
    public bool get_Enabled();
    public string get_FirstRunTime();
    public int get_PeriodInHours();
    public NotificationMethodsElementCollection get_NotificationMethods();
    public DisabledHealthChecksElementCollection get_DisabledChecks();
    private sealed virtual override bool Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.get_Enabled();
    private sealed virtual override string Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.get_FirstRunTime();
    private sealed virtual override int Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.get_PeriodInHours();
    private sealed virtual override IReadOnlyDictionary`2<string, INotificationMethod> Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.get_NotificationMethods();
    private sealed virtual override IEnumerable`1<IDisabledHealthCheck> Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings.get_DisabledChecks();
}
public enum Umbraco.Core.Configuration.HealthChecks.HealthCheckNotificationVerbosity : Enum {
    public int value__;
    public static HealthCheckNotificationVerbosity Summary;
    public static HealthCheckNotificationVerbosity Detailed;
}
public class Umbraco.Core.Configuration.HealthChecks.HealthChecksSection : ConfigurationSection {
    private static string DisabledChecksKey;
    private static string NotificationSettingsKey;
    [ConfigurationPropertyAttribute("disabledChecks")]
public DisabledHealthChecksElementCollection DisabledChecks { get; }
    [ConfigurationPropertyAttribute("notificationSettings")]
public HealthCheckNotificationSettingsElement NotificationSettings { get; }
    private IEnumerable`1<IDisabledHealthCheck> Umbraco.Core.Configuration.HealthChecks.IHealthChecks.DisabledChecks { get; }
    private IHealthCheckNotificationSettings Umbraco.Core.Configuration.HealthChecks.IHealthChecks.NotificationSettings { get; }
    public DisabledHealthChecksElementCollection get_DisabledChecks();
    public HealthCheckNotificationSettingsElement get_NotificationSettings();
    private sealed virtual override IEnumerable`1<IDisabledHealthCheck> Umbraco.Core.Configuration.HealthChecks.IHealthChecks.get_DisabledChecks();
    private sealed virtual override IHealthCheckNotificationSettings Umbraco.Core.Configuration.HealthChecks.IHealthChecks.get_NotificationSettings();
}
public interface Umbraco.Core.Configuration.HealthChecks.IDisabledHealthCheck {
    public Guid Id { get; }
    public DateTime DisabledOn { get; }
    public int DisabledBy { get; }
    public abstract virtual Guid get_Id();
    public abstract virtual DateTime get_DisabledOn();
    public abstract virtual int get_DisabledBy();
}
public interface Umbraco.Core.Configuration.HealthChecks.IHealthCheckNotificationSettings {
    public bool Enabled { get; }
    public string FirstRunTime { get; }
    public int PeriodInHours { get; }
    public IReadOnlyDictionary`2<string, INotificationMethod> NotificationMethods { get; }
    public IEnumerable`1<IDisabledHealthCheck> DisabledChecks { get; }
    public abstract virtual bool get_Enabled();
    public abstract virtual string get_FirstRunTime();
    public abstract virtual int get_PeriodInHours();
    public abstract virtual IReadOnlyDictionary`2<string, INotificationMethod> get_NotificationMethods();
    public abstract virtual IEnumerable`1<IDisabledHealthCheck> get_DisabledChecks();
}
public interface Umbraco.Core.Configuration.HealthChecks.IHealthChecks {
    public IEnumerable`1<IDisabledHealthCheck> DisabledChecks { get; }
    public IHealthCheckNotificationSettings NotificationSettings { get; }
    public abstract virtual IEnumerable`1<IDisabledHealthCheck> get_DisabledChecks();
    public abstract virtual IHealthCheckNotificationSettings get_NotificationSettings();
}
public interface Umbraco.Core.Configuration.HealthChecks.INotificationMethod {
    public string Alias { get; }
    public bool Enabled { get; }
    public HealthCheckNotificationVerbosity Verbosity { get; }
    public bool FailureOnly { get; }
    public IReadOnlyDictionary`2<string, INotificationMethodSettings> Settings { get; }
    public abstract virtual string get_Alias();
    public abstract virtual bool get_Enabled();
    public abstract virtual HealthCheckNotificationVerbosity get_Verbosity();
    public abstract virtual bool get_FailureOnly();
    public abstract virtual IReadOnlyDictionary`2<string, INotificationMethodSettings> get_Settings();
}
public interface Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings {
    public string Key { get; }
    public string Value { get; }
    public abstract virtual string get_Key();
    public abstract virtual string get_Value();
}
public class Umbraco.Core.Configuration.HealthChecks.NotificationMethodElement : ConfigurationElement {
    private static string AliasKey;
    private static string EnabledKey;
    private static string VerbosityKey;
    private static string FailureonlyKey;
    private static string SettingsKey;
    [ConfigurationPropertyAttribute("alias")]
public string Alias { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; }
    [ConfigurationPropertyAttribute("verbosity")]
public HealthCheckNotificationVerbosity Verbosity { get; }
    [ConfigurationPropertyAttribute("failureOnly")]
public bool FailureOnly { get; }
    [ConfigurationPropertyAttribute("settings")]
public NotificationMethodSettingsElementCollection Settings { get; }
    private string Umbraco.Core.Configuration.HealthChecks.INotificationMethod.Alias { get; }
    private bool Umbraco.Core.Configuration.HealthChecks.INotificationMethod.Enabled { get; }
    private HealthCheckNotificationVerbosity Umbraco.Core.Configuration.HealthChecks.INotificationMethod.Verbosity { get; }
    private bool Umbraco.Core.Configuration.HealthChecks.INotificationMethod.FailureOnly { get; }
    private IReadOnlyDictionary`2<string, INotificationMethodSettings> Umbraco.Core.Configuration.HealthChecks.INotificationMethod.Settings { get; }
    public string get_Alias();
    public bool get_Enabled();
    public HealthCheckNotificationVerbosity get_Verbosity();
    public bool get_FailureOnly();
    public NotificationMethodSettingsElementCollection get_Settings();
    private sealed virtual override string Umbraco.Core.Configuration.HealthChecks.INotificationMethod.get_Alias();
    private sealed virtual override bool Umbraco.Core.Configuration.HealthChecks.INotificationMethod.get_Enabled();
    private sealed virtual override HealthCheckNotificationVerbosity Umbraco.Core.Configuration.HealthChecks.INotificationMethod.get_Verbosity();
    private sealed virtual override bool Umbraco.Core.Configuration.HealthChecks.INotificationMethod.get_FailureOnly();
    private sealed virtual override IReadOnlyDictionary`2<string, INotificationMethodSettings> Umbraco.Core.Configuration.HealthChecks.INotificationMethod.get_Settings();
}
[ConfigurationCollectionAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodElement")]
public class Umbraco.Core.Configuration.HealthChecks.NotificationMethodsElementCollection : ConfigurationElementCollection {
    private INotificationMethod System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.Item { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.Keys { get; }
    private IEnumerable`1<INotificationMethod> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.Values { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodsElementCollection/<System-Collections-Generic-IEnumerable<System-Collections-Generic-KeyValuePair<System-String,Umbraco-Core-Configuration-HealthChecks-INotificationMethod>>-GetEnumerator>d__2")]
private sealed virtual override IEnumerator`1<KeyValuePair`2<string, INotificationMethod>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>>.GetEnumerator();
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodsElementCollection/<System-Collections-Generic-IEnumerable<Umbraco-Core-Configuration-HealthChecks-INotificationMethod>-GetEnumerator>d__3")]
private sealed virtual override IEnumerator`1<INotificationMethod> System.Collections.Generic.IEnumerable<Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.ContainsKey(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.TryGetValue(string key, INotificationMethod& value);
    private sealed virtual override INotificationMethod System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.get_Item(string key);
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.get_Keys();
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodsElementCollection/<System-Collections-Generic-IReadOnlyDictionary<System-String,Umbraco-Core-Configuration-HealthChecks-INotificationMethod>-get_Values>d__11")]
private sealed virtual override IEnumerable`1<INotificationMethod> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethod>.get_Values();
}
public class Umbraco.Core.Configuration.HealthChecks.NotificationMethodSettingsElement : ConfigurationElement {
    private static string KeyKey;
    private static string ValueKey;
    [ConfigurationPropertyAttribute("key")]
public string Key { get; }
    [ConfigurationPropertyAttribute("value")]
public string Value { get; }
    public sealed virtual string get_Key();
    public sealed virtual string get_Value();
}
[ConfigurationCollectionAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodSettingsElement")]
public class Umbraco.Core.Configuration.HealthChecks.NotificationMethodSettingsElementCollection : ConfigurationElementCollection {
    private INotificationMethodSettings System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.Item { get; }
    private IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.Keys { get; }
    private IEnumerable`1<INotificationMethodSettings> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.Values { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodSettingsElementCollection/<System-Collections-Generic-IEnumerable<System-Collections-Generic-KeyValuePair<System-String,Umbraco-Core-Configuration-HealthChecks-INotificationMethodSettings>>-GetEnumerator>d__2")]
private sealed virtual override IEnumerator`1<KeyValuePair`2<string, INotificationMethodSettings>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>>.GetEnumerator();
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodSettingsElementCollection/<System-Collections-Generic-IEnumerable<Umbraco-Core-Configuration-HealthChecks-INotificationMethodSettings>-GetEnumerator>d__3")]
private sealed virtual override IEnumerator`1<INotificationMethodSettings> System.Collections.Generic.IEnumerable<Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.ContainsKey(string key);
    private sealed virtual override bool System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.TryGetValue(string key, INotificationMethodSettings& value);
    private sealed virtual override INotificationMethodSettings System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.get_Item(string key);
    private sealed virtual override IEnumerable`1<string> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.get_Keys();
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.HealthChecks.NotificationMethodSettingsElementCollection/<System-Collections-Generic-IReadOnlyDictionary<System-String,Umbraco-Core-Configuration-HealthChecks-INotificationMethodSettings>-get_Values>d__11")]
private sealed virtual override IEnumerable`1<INotificationMethodSettings> System.Collections.Generic.IReadOnlyDictionary<System.String,Umbraco.Core.Configuration.HealthChecks.INotificationMethodSettings>.get_Values();
}
public interface Umbraco.Core.Configuration.ICoreDebug {
    public bool DumpOnTimeoutThreadAbort { get; }
    public bool LogUncompletedScopes { get; }
    public abstract virtual bool get_DumpOnTimeoutThreadAbort();
    public abstract virtual bool get_LogUncompletedScopes();
}
public interface Umbraco.Core.Configuration.IGlobalSettings {
    public string ReservedUrls { get; }
    public string ReservedPaths { get; }
    public string Path { get; }
    public string IconsPath { get; }
    public string ConfigurationStatus { get; public set; }
    public int TimeOutInMinutes { get; }
    public string DefaultUILanguage { get; }
    public bool HideTopLevelNodeFromPath { get; }
    public bool UseHttps { get; }
    public int VersionCheckPeriod { get; }
    public LocalTempStorage LocalTempStorageLocation { get; }
    public string LocalTempPath { get; }
    public int SqlWriteLockTimeOut { get; }
    public bool SanitizeTinyMce { get; }
    public abstract virtual string get_ReservedUrls();
    public abstract virtual string get_ReservedPaths();
    public abstract virtual string get_Path();
    public abstract virtual string get_IconsPath();
    public abstract virtual string get_ConfigurationStatus();
    public abstract virtual void set_ConfigurationStatus(string value);
    public abstract virtual int get_TimeOutInMinutes();
    public abstract virtual string get_DefaultUILanguage();
    public abstract virtual bool get_HideTopLevelNodeFromPath();
    public abstract virtual bool get_UseHttps();
    public abstract virtual int get_VersionCheckPeriod();
    public abstract virtual LocalTempStorage get_LocalTempStorageLocation();
    public abstract virtual string get_LocalTempPath();
    public abstract virtual int get_SqlWriteLockTimeOut();
    public abstract virtual bool get_SanitizeTinyMce();
}
internal class Umbraco.Core.Configuration.InnerTextConfigurationElement`1 : RawXmlConfigurationElement {
    [CompilerGeneratedAttribute]
private string <RawValue>k__BackingField;
    public T Value { get; }
    internal string RawValue { get; internal set; }
    public InnerTextConfigurationElement`1(XElement rawXml);
    protected virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    public virtual T get_Value();
    [CompilerGeneratedAttribute]
internal string get_RawValue();
    [CompilerGeneratedAttribute]
internal void set_RawValue(string value);
    public static T op_Implicit(InnerTextConfigurationElement`1<T> m);
    public virtual string ToString();
}
public interface Umbraco.Core.Configuration.IUmbracoConfigurationSection {
}
public enum Umbraco.Core.Configuration.LocalTempStorage : Enum {
    public int value__;
    public static LocalTempStorage Unknown;
    public static LocalTempStorage Default;
    public static LocalTempStorage AspNetTemp;
    public static LocalTempStorage EnvironmentTemp;
}
internal class Umbraco.Core.Configuration.OptionalCommaDelimitedConfigurationElement : CommaDelimitedConfigurationElement {
    private CommaDelimitedConfigurationElement _wrapped;
    private String[] _defaultValue;
    public CommaDelimitedStringCollection Value { get; }
    public OptionalCommaDelimitedConfigurationElement(CommaDelimitedConfigurationElement wrapped, String[] defaultValue);
    public virtual CommaDelimitedStringCollection get_Value();
}
internal class Umbraco.Core.Configuration.OptionalInnerTextConfigurationElement`1 : InnerTextConfigurationElement`1<T> {
    private InnerTextConfigurationElement`1<T> _wrapped;
    private T _defaultValue;
    public T Value { get; }
    public OptionalInnerTextConfigurationElement`1(InnerTextConfigurationElement`1<T> wrapped, T defaultValue);
    public virtual T get_Value();
}
internal abstract class Umbraco.Core.Configuration.RawXmlConfigurationElement : ConfigurationElement {
    [CompilerGeneratedAttribute]
private XElement <RawXml>k__BackingField;
    protected XElement RawXml { get; private set; }
    protected RawXmlConfigurationElement(XElement rawXml);
    protected virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    [CompilerGeneratedAttribute]
protected XElement get_RawXml();
    [CompilerGeneratedAttribute]
private void set_RawXml(XElement value);
}
public abstract class Umbraco.Core.Configuration.UmbracoConfigurationSection : ConfigurationSection {
    protected bool IsPresent { get; }
    protected bool get_IsPresent();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.BackOfficeElement : UmbracoConfigurationElement {
    [ConfigurationPropertyAttribute("tours")]
internal TourConfigElement Tours { get; }
    private ITourSection Umbraco.Core.Configuration.UmbracoSettings.IBackOfficeSection.Tours { get; }
    [ConfigurationPropertyAttribute("id")]
internal string Id { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IBackOfficeSection.Id { get; }
    internal TourConfigElement get_Tours();
    private sealed virtual override ITourSection Umbraco.Core.Configuration.UmbracoSettings.IBackOfficeSection.get_Tours();
    internal string get_Id();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IBackOfficeSection.get_Id();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.CharCollection : ConfigurationElementCollection {
    internal void Add(CharElement c);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.UmbracoSettings.CharCollection/<System-Collections-Generic-IEnumerable<Umbraco-Core-Configuration-UmbracoSettings-IChar>-GetEnumerator>d__3")]
private sealed virtual override IEnumerator`1<IChar> System.Collections.Generic.IEnumerable<Umbraco.Core.Configuration.UmbracoSettings.IChar>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.CharElement : InnerTextConfigurationElement`1<string> {
    private string _char;
    private string _replacement;
    internal string Char { get; internal set; }
    internal string Replacement { get; internal set; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IChar.Char { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IChar.Replacement { get; }
    internal string get_Char();
    internal void set_Char(string value);
    internal string get_Replacement();
    internal void set_Replacement(string value);
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IChar.get_Char();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IChar.get_Replacement();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ContentElement : UmbracoConfigurationElement {
    private static string DefaultPreviewBadge;
    [ConfigurationPropertyAttribute("imaging")]
internal ContentImagingElement Imaging { get; }
    [ConfigurationPropertyAttribute("ResolveUrlsFromTextString")]
internal InnerTextConfigurationElement`1<bool> ResolveUrlsFromTextString { get; }
    public IEnumerable`1<IContentErrorPage> Error404Collection { get; }
    [ConfigurationPropertyAttribute("errors")]
internal ContentErrorsElement Errors { get; }
    [ConfigurationPropertyAttribute("notifications")]
internal NotificationsElement Notifications { get; }
    [ConfigurationPropertyAttribute("contentVersionCleanupPolicyGlobalSettings")]
internal ContentVersionCleanupPolicyGlobalSettingsElement ContentVersionCleanupPolicyGlobalSettingsElement { get; }
    [ConfigurationPropertyAttribute("PreviewBadge")]
internal InnerTextConfigurationElement`1<string> PreviewBadge { get; }
    [ConfigurationPropertyAttribute("MacroErrors")]
internal InnerTextConfigurationElement`1<MacroErrorBehaviour> MacroErrors { get; }
    [ConfigurationPropertyAttribute("disallowedUploadFiles")]
internal CommaDelimitedConfigurationElement DisallowedUploadFiles { get; }
    [ConfigurationPropertyAttribute("allowedMediaHosts")]
internal CommaDelimitedConfigurationElement AllowedMediaHosts { get; }
    [ConfigurationPropertyAttribute("allowedUploadFiles")]
internal CommaDelimitedConfigurationElement AllowedUploadFiles { get; }
    [ConfigurationPropertyAttribute("showDeprecatedPropertyEditors")]
internal InnerTextConfigurationElement`1<bool> ShowDeprecatedPropertyEditors { get; }
    [ConfigurationPropertyAttribute("loginBackgroundImage")]
internal InnerTextConfigurationElement`1<string> LoginBackgroundImage { get; }
    [ConfigurationPropertyAttribute("loginLogoImage")]
internal InnerTextConfigurationElement`1<string> LoginLogoImage { get; }
    [ConfigurationPropertyAttribute("hideBackofficeLogo")]
internal InnerTextConfigurationElement`1<bool> HideBackOfficeLogo { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.NotificationEmailAddress { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.DisableHtmlEmail { get; }
    private IEnumerable`1<string> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.ImageFileTypes { get; }
    private IEnumerable`1<IImagingAutoFillUploadField> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.ImageAutoFillProperties { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.ResolveUrlsFromTextString { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.PreviewBadge { get; }
    private MacroErrorBehaviour Umbraco.Core.Configuration.UmbracoSettings.IContentSection.MacroErrorBehaviour { get; }
    private IEnumerable`1<string> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.DisallowedUploadFiles { get; }
    private IEnumerable`1<string> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.AllowedUploadFiles { get; }
    private IContentVersionCleanupPolicyGlobalSettings Umbraco.Core.Configuration.UmbracoSettings.IContentSection.ContentVersionCleanupPolicyGlobalSettings { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.ShowDeprecatedPropertyEditors { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.LoginBackgroundImage { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.LoginLogoImage { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.HideBackOfficeLogo { get; }
    internal ContentImagingElement get_Imaging();
    internal InnerTextConfigurationElement`1<bool> get_ResolveUrlsFromTextString();
    public sealed virtual IEnumerable`1<IContentErrorPage> get_Error404Collection();
    internal ContentErrorsElement get_Errors();
    internal NotificationsElement get_Notifications();
    internal ContentVersionCleanupPolicyGlobalSettingsElement get_ContentVersionCleanupPolicyGlobalSettingsElement();
    internal InnerTextConfigurationElement`1<string> get_PreviewBadge();
    internal InnerTextConfigurationElement`1<MacroErrorBehaviour> get_MacroErrors();
    internal CommaDelimitedConfigurationElement get_DisallowedUploadFiles();
    internal CommaDelimitedConfigurationElement get_AllowedMediaHosts();
    internal CommaDelimitedConfigurationElement get_AllowedUploadFiles();
    internal InnerTextConfigurationElement`1<bool> get_ShowDeprecatedPropertyEditors();
    internal InnerTextConfigurationElement`1<string> get_LoginBackgroundImage();
    internal InnerTextConfigurationElement`1<string> get_LoginLogoImage();
    internal InnerTextConfigurationElement`1<bool> get_HideBackOfficeLogo();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_NotificationEmailAddress();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_DisableHtmlEmail();
    private sealed virtual override IEnumerable`1<string> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_ImageFileTypes();
    private sealed virtual override IEnumerable`1<IImagingAutoFillUploadField> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_ImageAutoFillProperties();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_ResolveUrlsFromTextString();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_PreviewBadge();
    private sealed virtual override MacroErrorBehaviour Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_MacroErrorBehaviour();
    private sealed virtual override IEnumerable`1<string> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_DisallowedUploadFiles();
    private sealed virtual override IEnumerable`1<string> Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_AllowedUploadFiles();
    private sealed virtual override IContentVersionCleanupPolicyGlobalSettings Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_ContentVersionCleanupPolicyGlobalSettings();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_ShowDeprecatedPropertyEditors();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_LoginBackgroundImage();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_LoginLogoImage();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.IContentSection.get_HideBackOfficeLogo();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ContentError404Collection : ConfigurationElementCollection {
    internal void Add(ContentErrorPageElement element);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.UmbracoSettings.ContentError404Collection/<System-Collections-Generic-IEnumerable<Umbraco-Core-Configuration-UmbracoSettings-ContentErrorPageElement>-GetEnumerator>d__3")]
private sealed virtual override IEnumerator`1<ContentErrorPageElement> System.Collections.Generic.IEnumerable<Umbraco.Core.Configuration.UmbracoSettings.ContentErrorPageElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ContentErrorPageElement : InnerTextConfigurationElement`1<string> {
    public bool HasContentId { get; }
    public bool HasContentKey { get; }
    public int ContentId { get; }
    public Guid ContentKey { get; }
    public string ContentXPath { get; }
    public string Culture { get; public set; }
    public ContentErrorPageElement(XElement rawXml);
    public sealed virtual bool get_HasContentId();
    public sealed virtual bool get_HasContentKey();
    public sealed virtual int get_ContentId();
    public sealed virtual Guid get_ContentKey();
    public sealed virtual string get_ContentXPath();
    public sealed virtual string get_Culture();
    public sealed virtual void set_Culture(string value);
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ContentErrorsElement : RawXmlConfigurationElement {
    public IEnumerable`1<IContentErrorPage> Error404Collection { get; }
    public IEnumerable`1<IContentErrorPage> get_Error404Collection();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ContentImagingElement : ConfigurationElement {
    private ImagingAutoFillPropertiesCollection _defaultImageAutoFill;
    [ConfigurationPropertyAttribute("imageFileTypes")]
internal CommaDelimitedConfigurationElement ImageFileTypes { get; }
    [ConfigurationCollectionAttribute("Umbraco.Core.Configuration.UmbracoSettings.ImagingAutoFillPropertiesCollection")]
[ConfigurationPropertyAttribute("autoFillImageProperties")]
internal ImagingAutoFillPropertiesCollection ImageAutoFillProperties { get; }
    internal CommaDelimitedConfigurationElement get_ImageFileTypes();
    internal static String[] GetDefaultImageFileTypes();
    internal ImagingAutoFillPropertiesCollection get_ImageAutoFillProperties();
    internal static ImagingAutoFillPropertiesCollection GetDefaultImageAutoFillProperties();
}
[ExtensionAttribute]
public static class Umbraco.Core.Configuration.UmbracoSettings.ContentSectionExtensions : object {
    [ExtensionAttribute]
public static bool IsImageFile(IContentSection contentConfig, string extension);
    [ExtensionAttribute]
public static bool IsFileAllowedForUpload(IContentSection contentSection, string extension);
    [ExtensionAttribute]
public static IImagingAutoFillUploadField GetConfig(IContentSection contentSection, string propertyTypeAlias);
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ContentVersionCleanupPolicyGlobalSettingsElement : UmbracoConfigurationElement {
    [ConfigurationPropertyAttribute("enable")]
public bool EnableCleanup { get; }
    [ConfigurationPropertyAttribute("keepAllVersionsNewerThanDays")]
public int KeepAllVersionsNewerThanDays { get; }
    [ConfigurationPropertyAttribute("keepLatestVersionPerDayForDays")]
public int KeepLatestVersionPerDayForDays { get; }
    public sealed virtual bool get_EnableCleanup();
    public sealed virtual int get_KeepAllVersionsNewerThanDays();
    public sealed virtual int get_KeepLatestVersionPerDayForDays();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IBackOfficeSection {
    public ITourSection Tours { get; }
    public string Id { get; }
    public abstract virtual ITourSection get_Tours();
    public abstract virtual string get_Id();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IChar {
    public string Char { get; }
    public string Replacement { get; }
    public abstract virtual string get_Char();
    public abstract virtual string get_Replacement();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IContentErrorPage {
    public int ContentId { get; }
    public Guid ContentKey { get; }
    public string ContentXPath { get; }
    public bool HasContentId { get; }
    public bool HasContentKey { get; }
    public string Culture { get; public set; }
    public abstract virtual int get_ContentId();
    public abstract virtual Guid get_ContentKey();
    public abstract virtual string get_ContentXPath();
    public abstract virtual bool get_HasContentId();
    public abstract virtual bool get_HasContentKey();
    public abstract virtual string get_Culture();
    public abstract virtual void set_Culture(string value);
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IContentSection {
    public string NotificationEmailAddress { get; }
    public bool DisableHtmlEmail { get; }
    public IEnumerable`1<string> ImageFileTypes { get; }
    public IEnumerable`1<IImagingAutoFillUploadField> ImageAutoFillProperties { get; }
    public bool ResolveUrlsFromTextString { get; }
    public IEnumerable`1<IContentErrorPage> Error404Collection { get; }
    public string PreviewBadge { get; }
    public MacroErrorBehaviour MacroErrorBehaviour { get; }
    public IEnumerable`1<string> DisallowedUploadFiles { get; }
    public IEnumerable`1<string> AllowedUploadFiles { get; }
    public IContentVersionCleanupPolicyGlobalSettings ContentVersionCleanupPolicyGlobalSettings { get; }
    public bool ShowDeprecatedPropertyEditors { get; }
    public string LoginBackgroundImage { get; }
    public string LoginLogoImage { get; }
    public bool HideBackOfficeLogo { get; }
    public abstract virtual string get_NotificationEmailAddress();
    public abstract virtual bool get_DisableHtmlEmail();
    public abstract virtual IEnumerable`1<string> get_ImageFileTypes();
    public abstract virtual IEnumerable`1<IImagingAutoFillUploadField> get_ImageAutoFillProperties();
    public abstract virtual bool get_ResolveUrlsFromTextString();
    public abstract virtual IEnumerable`1<IContentErrorPage> get_Error404Collection();
    public abstract virtual string get_PreviewBadge();
    public abstract virtual MacroErrorBehaviour get_MacroErrorBehaviour();
    public abstract virtual IEnumerable`1<string> get_DisallowedUploadFiles();
    public abstract virtual IEnumerable`1<string> get_AllowedUploadFiles();
    public abstract virtual IContentVersionCleanupPolicyGlobalSettings get_ContentVersionCleanupPolicyGlobalSettings();
    public abstract virtual bool get_ShowDeprecatedPropertyEditors();
    public abstract virtual string get_LoginBackgroundImage();
    public abstract virtual string get_LoginLogoImage();
    public abstract virtual bool get_HideBackOfficeLogo();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IContentVersionCleanupPolicyGlobalSettings {
    public bool EnableCleanup { get; }
    public int KeepAllVersionsNewerThanDays { get; }
    public int KeepLatestVersionPerDayForDays { get; }
    public abstract virtual bool get_EnableCleanup();
    public abstract virtual int get_KeepAllVersionsNewerThanDays();
    public abstract virtual int get_KeepLatestVersionPerDayForDays();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField {
    public string Alias { get; }
    public string WidthFieldAlias { get; }
    public string HeightFieldAlias { get; }
    public string LengthFieldAlias { get; }
    public string ExtensionFieldAlias { get; }
    public abstract virtual string get_Alias();
    public abstract virtual string get_WidthFieldAlias();
    public abstract virtual string get_HeightFieldAlias();
    public abstract virtual string get_LengthFieldAlias();
    public abstract virtual string get_ExtensionFieldAlias();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IKeepAliveSection {
    public bool DisableKeepAliveTask { get; }
    public string KeepAlivePingUrl { get; }
    public abstract virtual bool get_DisableKeepAliveTask();
    public abstract virtual string get_KeepAlivePingUrl();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.ILoggingSection {
    public int MaxLogAge { get; }
    public abstract virtual int get_MaxLogAge();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ImagingAutoFillPropertiesCollection : ConfigurationElementCollection {
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    internal void Add(ImagingAutoFillUploadFieldElement item);
    [IteratorStateMachineAttribute("Umbraco.Core.Configuration.UmbracoSettings.ImagingAutoFillPropertiesCollection/<System-Collections-Generic-IEnumerable<Umbraco-Core-Configuration-UmbracoSettings-IImagingAutoFillUploadField>-GetEnumerator>d__3")]
private sealed virtual override IEnumerator`1<IImagingAutoFillUploadField> System.Collections.Generic.IEnumerable<Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.ImagingAutoFillUploadFieldElement : UmbracoConfigurationElement {
    [ConfigurationPropertyAttribute("alias")]
public string Alias { get; public set; }
    [ConfigurationPropertyAttribute("widthFieldAlias")]
internal InnerTextConfigurationElement`1<string> WidthFieldAlias { get; }
    [ConfigurationPropertyAttribute("heightFieldAlias")]
internal InnerTextConfigurationElement`1<string> HeightFieldAlias { get; }
    [ConfigurationPropertyAttribute("lengthFieldAlias")]
internal InnerTextConfigurationElement`1<string> LengthFieldAlias { get; }
    [ConfigurationPropertyAttribute("extensionFieldAlias")]
internal InnerTextConfigurationElement`1<string> ExtensionFieldAlias { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.Alias { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.WidthFieldAlias { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.HeightFieldAlias { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.LengthFieldAlias { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.ExtensionFieldAlias { get; }
    public string get_Alias();
    public void set_Alias(string value);
    internal InnerTextConfigurationElement`1<string> get_WidthFieldAlias();
    internal InnerTextConfigurationElement`1<string> get_HeightFieldAlias();
    internal InnerTextConfigurationElement`1<string> get_LengthFieldAlias();
    internal InnerTextConfigurationElement`1<string> get_ExtensionFieldAlias();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.get_Alias();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.get_WidthFieldAlias();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.get_HeightFieldAlias();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.get_LengthFieldAlias();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.IImagingAutoFillUploadField.get_ExtensionFieldAlias();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection {
    public bool AddTrailingSlash { get; }
    public bool ConvertUrlsToAscii { get; }
    public bool TryConvertUrlsToAscii { get; }
    public IEnumerable`1<IChar> CharCollection { get; }
    public abstract virtual bool get_AddTrailingSlash();
    public abstract virtual bool get_ConvertUrlsToAscii();
    public abstract virtual bool get_TryConvertUrlsToAscii();
    public abstract virtual IEnumerable`1<IChar> get_CharCollection();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection {
    public bool KeepUserLoggedIn { get; }
    public bool HideDisabledUsersInBackoffice { get; }
    public bool AllowPasswordReset { get; }
    public string AuthCookieName { get; }
    public string AuthCookieDomain { get; }
    public bool UsernameIsEmail { get; }
    public abstract virtual bool get_KeepUserLoggedIn();
    public abstract virtual bool get_HideDisabledUsersInBackoffice();
    public abstract virtual bool get_AllowPasswordReset();
    public abstract virtual string get_AuthCookieName();
    public abstract virtual string get_AuthCookieDomain();
    public abstract virtual bool get_UsernameIsEmail();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.ITourSection {
    public bool EnableTours { get; }
    public abstract virtual bool get_EnableTours();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection {
    public IBackOfficeSection BackOffice { get; }
    public IContentSection Content { get; }
    public ISecuritySection Security { get; }
    public IRequestHandlerSection RequestHandler { get; }
    public ILoggingSection Logging { get; }
    public IWebRoutingSection WebRouting { get; }
    public IKeepAliveSection KeepAlive { get; }
    public abstract virtual IBackOfficeSection get_BackOffice();
    public abstract virtual IContentSection get_Content();
    public abstract virtual ISecuritySection get_Security();
    public abstract virtual IRequestHandlerSection get_RequestHandler();
    public abstract virtual ILoggingSection get_Logging();
    public abstract virtual IWebRoutingSection get_WebRouting();
    public abstract virtual IKeepAliveSection get_KeepAlive();
}
public interface Umbraco.Core.Configuration.UmbracoSettings.IWebRoutingSection {
    public bool TrySkipIisCustomErrors { get; }
    public bool InternalRedirectPreservesTemplate { get; }
    public bool DisableAlternativeTemplates { get; }
    public bool ValidateAlternativeTemplates { get; }
    public bool DisableFindContentByIdPath { get; }
    public bool DisableRedirectUrlTracking { get; }
    public string UrlProviderMode { get; }
    public string UmbracoApplicationUrl { get; }
    public abstract virtual bool get_TrySkipIisCustomErrors();
    public abstract virtual bool get_InternalRedirectPreservesTemplate();
    public abstract virtual bool get_DisableAlternativeTemplates();
    public abstract virtual bool get_ValidateAlternativeTemplates();
    public abstract virtual bool get_DisableFindContentByIdPath();
    public abstract virtual bool get_DisableRedirectUrlTracking();
    public abstract virtual string get_UrlProviderMode();
    public abstract virtual string get_UmbracoApplicationUrl();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.KeepAliveElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("disableKeepAliveTask")]
public bool DisableKeepAliveTask { get; }
    [ConfigurationPropertyAttribute("keepAlivePingUrl")]
public string KeepAlivePingUrl { get; }
    public sealed virtual bool get_DisableKeepAliveTask();
    public sealed virtual string get_KeepAlivePingUrl();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.LoggingElement : UmbracoConfigurationElement {
    [ConfigurationPropertyAttribute("maxLogAge")]
internal InnerTextConfigurationElement`1<int> MaxLogAge { get; }
    private int Umbraco.Core.Configuration.UmbracoSettings.ILoggingSection.MaxLogAge { get; }
    internal InnerTextConfigurationElement`1<int> get_MaxLogAge();
    private sealed virtual override int Umbraco.Core.Configuration.UmbracoSettings.ILoggingSection.get_MaxLogAge();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.NotificationsElement : UmbracoConfigurationElement {
    [ConfigurationPropertyAttribute("email")]
internal InnerTextConfigurationElement`1<string> NotificationEmailAddress { get; }
    [ConfigurationPropertyAttribute("disableHtmlEmail")]
internal InnerTextConfigurationElement`1<bool> DisableHtmlEmail { get; }
    internal InnerTextConfigurationElement`1<string> get_NotificationEmailAddress();
    internal InnerTextConfigurationElement`1<bool> get_DisableHtmlEmail();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.RequestHandlerElement : UmbracoConfigurationElement {
    private UrlReplacingElement _defaultUrlReplacing;
    [ConfigurationPropertyAttribute("addTrailingSlash")]
public InnerTextConfigurationElement`1<bool> AddTrailingSlash { get; }
    [ConfigurationPropertyAttribute("urlReplacing")]
public UrlReplacingElement UrlReplacing { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.AddTrailingSlash { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.ConvertUrlsToAscii { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.TryConvertUrlsToAscii { get; }
    private IEnumerable`1<IChar> Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.CharCollection { get; }
    public InnerTextConfigurationElement`1<bool> get_AddTrailingSlash();
    public UrlReplacingElement get_UrlReplacing();
    internal static CharCollection GetDefaultCharReplacements();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.get_AddTrailingSlash();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.get_ConvertUrlsToAscii();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.get_TryConvertUrlsToAscii();
    private sealed virtual override IEnumerable`1<IChar> Umbraco.Core.Configuration.UmbracoSettings.IRequestHandlerSection.get_CharCollection();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.SecurityElement : UmbracoConfigurationElement {
    [ConfigurationPropertyAttribute("keepUserLoggedIn")]
internal InnerTextConfigurationElement`1<bool> KeepUserLoggedIn { get; }
    [ConfigurationPropertyAttribute("hideDisabledUsersInBackoffice")]
internal InnerTextConfigurationElement`1<bool> HideDisabledUsersInBackoffice { get; }
    [ConfigurationPropertyAttribute("allowPasswordReset")]
internal InnerTextConfigurationElement`1<bool> AllowPasswordReset { get; }
    [ConfigurationPropertyAttribute("usernameIsEmail")]
internal InnerTextConfigurationElement`1<bool> UsernameIsEmail { get; }
    [ConfigurationPropertyAttribute("authCookieName")]
internal InnerTextConfigurationElement`1<string> AuthCookieName { get; }
    [ConfigurationPropertyAttribute("authCookieDomain")]
internal InnerTextConfigurationElement`1<string> AuthCookieDomain { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.KeepUserLoggedIn { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.HideDisabledUsersInBackoffice { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.AllowPasswordReset { get; }
    private bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.UsernameIsEmail { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.AuthCookieName { get; }
    private string Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.AuthCookieDomain { get; }
    internal InnerTextConfigurationElement`1<bool> get_KeepUserLoggedIn();
    internal InnerTextConfigurationElement`1<bool> get_HideDisabledUsersInBackoffice();
    internal InnerTextConfigurationElement`1<bool> get_AllowPasswordReset();
    internal InnerTextConfigurationElement`1<bool> get_UsernameIsEmail();
    internal InnerTextConfigurationElement`1<string> get_AuthCookieName();
    internal InnerTextConfigurationElement`1<string> get_AuthCookieDomain();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.get_KeepUserLoggedIn();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.get_HideDisabledUsersInBackoffice();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.get_AllowPasswordReset();
    private sealed virtual override bool Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.get_UsernameIsEmail();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.get_AuthCookieName();
    private sealed virtual override string Umbraco.Core.Configuration.UmbracoSettings.ISecuritySection.get_AuthCookieDomain();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.TourConfigElement : UmbracoConfigurationElement {
    [ConfigurationPropertyAttribute("enable")]
public bool EnableTours { get; }
    public sealed virtual bool get_EnableTours();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.UmbracoConfigurationElement : ConfigurationElement {
    private ConcurrentDictionary`2<string, RawXmlConfigurationElement> _rawElements;
    protected OptionalInnerTextConfigurationElement`1<T> GetOptionalTextElement(string name, T defaultVal);
    protected OptionalCommaDelimitedConfigurationElement GetOptionalDelimitedElement(string name, String[] defaultVal);
}
public class Umbraco.Core.Configuration.UmbracoSettings.UmbracoSettingsSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("backOffice")]
internal BackOfficeElement BackOffice { get; }
    [ConfigurationPropertyAttribute("content")]
internal ContentElement Content { get; }
    [ConfigurationPropertyAttribute("security")]
internal SecurityElement Security { get; }
    [ConfigurationPropertyAttribute("requestHandler")]
internal RequestHandlerElement RequestHandler { get; }
    [ConfigurationPropertyAttribute("logging")]
internal LoggingElement Logging { get; }
    [ConfigurationPropertyAttribute("web.routing")]
internal WebRoutingElement WebRouting { get; }
    [ConfigurationPropertyAttribute("keepAlive")]
internal KeepAliveElement KeepAlive { get; }
    private IContentSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.Content { get; }
    private ISecuritySection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.Security { get; }
    private IRequestHandlerSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.RequestHandler { get; }
    private IBackOfficeSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.BackOffice { get; }
    private ILoggingSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.Logging { get; }
    private IWebRoutingSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.WebRouting { get; }
    private IKeepAliveSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.KeepAlive { get; }
    internal BackOfficeElement get_BackOffice();
    internal ContentElement get_Content();
    internal SecurityElement get_Security();
    internal RequestHandlerElement get_RequestHandler();
    internal LoggingElement get_Logging();
    internal WebRoutingElement get_WebRouting();
    internal KeepAliveElement get_KeepAlive();
    private sealed virtual override IContentSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.get_Content();
    private sealed virtual override ISecuritySection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.get_Security();
    private sealed virtual override IRequestHandlerSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.get_RequestHandler();
    private sealed virtual override IBackOfficeSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.get_BackOffice();
    private sealed virtual override ILoggingSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.get_Logging();
    private sealed virtual override IWebRoutingSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.get_WebRouting();
    private sealed virtual override IKeepAliveSection Umbraco.Core.Configuration.UmbracoSettings.IUmbracoSettingsSection.get_KeepAlive();
}
internal class Umbraco.Core.Configuration.UmbracoSettings.UrlReplacingElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("removeDoubleDashes")]
internal bool RemoveDoubleDashes { get; }
    [ConfigurationPropertyAttribute("toAscii")]
internal string ConvertUrlsToAscii { get; }
    [ConfigurationCollectionAttribute("Umbraco.Core.Configuration.UmbracoSettings.CharCollection")]
[ConfigurationPropertyAttribute("")]
internal CharCollection CharCollection { get; internal set; }
    internal bool get_RemoveDoubleDashes();
    internal string get_ConvertUrlsToAscii();
    internal CharCollection get_CharCollection();
    internal void set_CharCollection(CharCollection value);
}
internal class Umbraco.Core.Configuration.UmbracoSettings.WebRoutingElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("trySkipIisCustomErrors")]
public bool TrySkipIisCustomErrors { get; }
    [ConfigurationPropertyAttribute("internalRedirectPreservesTemplate")]
public bool InternalRedirectPreservesTemplate { get; }
    [ConfigurationPropertyAttribute("disableAlternativeTemplates")]
public bool DisableAlternativeTemplates { get; }
    [ConfigurationPropertyAttribute("validateAlternativeTemplates")]
public bool ValidateAlternativeTemplates { get; }
    [ConfigurationPropertyAttribute("disableFindContentByIdPath")]
public bool DisableFindContentByIdPath { get; }
    [ConfigurationPropertyAttribute("disableRedirectUrlTracking")]
public bool DisableRedirectUrlTracking { get; }
    [ConfigurationPropertyAttribute("urlProviderMode")]
public string UrlProviderMode { get; }
    [ConfigurationPropertyAttribute("umbracoApplicationUrl")]
public string UmbracoApplicationUrl { get; }
    public sealed virtual bool get_TrySkipIisCustomErrors();
    public sealed virtual bool get_InternalRedirectPreservesTemplate();
    public sealed virtual bool get_DisableAlternativeTemplates();
    public sealed virtual bool get_ValidateAlternativeTemplates();
    public sealed virtual bool get_DisableFindContentByIdPath();
    public sealed virtual bool get_DisableRedirectUrlTracking();
    public sealed virtual string get_UrlProviderMode();
    public sealed virtual string get_UmbracoApplicationUrl();
}
public static class Umbraco.Core.Configuration.UmbracoVersion : object {
    [CompilerGeneratedAttribute]
private static Version <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private static Version <AssemblyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static Version <AssemblyFileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private static SemVersion <SemanticVersion>k__BackingField;
    public static Version Current { get; }
    public static string Comment { get; }
    public static Version AssemblyVersion { get; }
    public static Version AssemblyFileVersion { get; }
    public static SemVersion SemanticVersion { get; }
    public static SemVersion LocalVersion { get; }
    private static UmbracoVersion();
    [CompilerGeneratedAttribute]
public static Version get_Current();
    public static string get_Comment();
    [CompilerGeneratedAttribute]
public static Version get_AssemblyVersion();
    [CompilerGeneratedAttribute]
public static Version get_AssemblyFileVersion();
    [CompilerGeneratedAttribute]
public static SemVersion get_SemanticVersion();
    public static SemVersion get_LocalVersion();
}
public static class Umbraco.Core.Constants : object {
}
[ExtensionAttribute]
public static class Umbraco.Core.ContentExtensions : object {
    private static IMediaFileSystem _mediaFileSystem;
    private static PropertyEditorCollection _propertyEditors;
    private static PropertyEditorCollection PropertyEditors;
    private static IMediaFileSystem MediaFileSystem { get; }
    private static ContentExtensions();
    private static IMediaFileSystem get_MediaFileSystem();
    [ExtensionAttribute]
public static ContentStatus GetStatus(IContent content, string culture);
    [ExtensionAttribute]
internal static bool IsMoving(IContentBase entity);
    [ExtensionAttribute]
public static void SanitizeEntityPropertiesForXmlStorage(IContentBase entity);
    internal static bool HasChildren(IContentBase content, ServiceContext services);
    [ExtensionAttribute]
public static IEnumerable`1<Property> GetPropertiesByEditor(IContentBase content, string editorAlias);
    [ExtensionAttribute]
public static IEnumerable`1<Property> GetNonGroupedProperties(IContentBase content);
    [ExtensionAttribute]
public static IEnumerable`1<Property> GetPropertiesForGroup(IContentBase content, PropertyGroup propertyGroup);
    [ExtensionAttribute]
public static void SetValue(IContentBase content, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, string propertyTypeAlias, string filename, HttpPostedFileBase postedFile, string culture, string segment);
    [ExtensionAttribute]
public static void SetValue(IContentBase content, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, string propertyTypeAlias, string filename, Stream filestream, string culture, string segment);
    [ExtensionAttribute]
private static void SetUploadFile(IContentBase content, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, string propertyTypeAlias, string filename, Stream filestream, string culture, string segment);
    private static Property GetProperty(IContentBase content, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, string propertyTypeAlias);
    [ExtensionAttribute]
public static string StoreFile(IContentBase content, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider, string propertyTypeAlias, string filename, Stream filestream, string filepath);
    [ExtensionAttribute]
public static IProfile GetCreatorProfile(IMedia media, IUserService userService);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload that declares the IUserService to use")]
[EditorBrowsableAttribute("1")]
public static IProfile GetCreatorProfile(IContentBase content);
    [ExtensionAttribute]
public static IProfile GetCreatorProfile(IContentBase content, IUserService userService);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload that declares the IUserService to use")]
[EditorBrowsableAttribute("1")]
public static IProfile GetWriterProfile(IContent content);
    [ExtensionAttribute]
public static IProfile GetWriterProfile(IContent content, IUserService userService);
    [ExtensionAttribute]
public static IProfile GetWriterProfile(IMedia content, IUserService userService);
    [ExtensionAttribute]
internal static XElement ToDeepXml(IContent content, IEntityXmlSerializer serializer);
    [ExtensionAttribute]
public static XElement ToXml(IContent content, IEntityXmlSerializer serializer);
    [ExtensionAttribute]
public static XElement ToXml(IMedia media, IEntityXmlSerializer serializer);
    [ExtensionAttribute]
public static XElement ToXml(IMember member, IEntityXmlSerializer serializer);
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDirtyUserProperties(IContentBase entity);
    [ExtensionAttribute]
public static bool IsAnyUserPropertyDirty(IContentBase entity);
    [ExtensionAttribute]
public static bool WasAnyUserPropertyDirty(IContentBase entity);
}
[ExtensionAttribute]
public static class Umbraco.Core.ContentVariationExtensions : object {
    [ExtensionAttribute]
public static bool VariesByNothing(ISimpleContentType contentType);
    [ExtensionAttribute]
public static bool VariesByNothing(IContentTypeBase contentType);
    [ExtensionAttribute]
public static bool VariesByNothing(IPublishedContentType contentType);
    [ExtensionAttribute]
public static bool VariesByNothing(PropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesByNothing(IPublishedPropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesByNothing(ContentVariation variation);
    [ExtensionAttribute]
public static bool VariesByCulture(ISimpleContentType contentType);
    [ExtensionAttribute]
public static bool VariesByCulture(IContentTypeBase contentType);
    [ExtensionAttribute]
public static bool VariesByCulture(IPublishedContentType contentType);
    [ExtensionAttribute]
public static bool VariesByCulture(PropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesByCulture(IPublishedPropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesByCulture(ContentVariation variation);
    [ExtensionAttribute]
public static bool VariesBySegment(ISimpleContentType contentType);
    [ExtensionAttribute]
public static bool VariesBySegment(IContentTypeBase contentType);
    [ExtensionAttribute]
public static bool VariesBySegment(IPublishedContentType contentType);
    [ExtensionAttribute]
public static bool VariesBySegment(PropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesBySegment(IPublishedPropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesBySegment(ContentVariation variation);
    [ExtensionAttribute]
public static bool VariesByCultureAndSegment(ISimpleContentType contentType);
    [ExtensionAttribute]
public static bool VariesByCultureAndSegment(IContentTypeBase contentType);
    [ExtensionAttribute]
public static bool VariesByCultureAndSegment(IPublishedContentType contentType);
    [ExtensionAttribute]
public static bool VariesByCultureAndSegment(PropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesByCultureAndSegment(IPublishedPropertyType propertyType);
    [ExtensionAttribute]
public static bool VariesByCultureAndSegment(ContentVariation variation);
    [ExtensionAttribute]
public static void SetVariesBy(IContentTypeBase contentType, ContentVariation variation, bool value);
    [ExtensionAttribute]
public static void SetVariesBy(PropertyType propertyType, ContentVariation variation, bool value);
    [ExtensionAttribute]
public static ContentVariation SetFlag(ContentVariation variations, ContentVariation variation, bool value);
    [ExtensionAttribute]
public static bool ValidateVariation(ContentVariation variation, string culture, string segment, bool exact, bool wildcards, bool throwIfInvalid);
}
[ExtensionAttribute]
public static class Umbraco.Core.CryptoServiceProviderExtensions : object {
    [ExtensionAttribute]
public static int GetInt32(RNGCryptoServiceProvider provider, int minValue, int maxValue);
}
internal class Umbraco.Core.CustomBooleanTypeConverter : BooleanConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class Umbraco.Core.Dashboards.AccessRule : object {
    [CompilerGeneratedAttribute]
private AccessRuleType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public AccessRuleType Type { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual AccessRuleType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(AccessRuleType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(string value);
}
public enum Umbraco.Core.Dashboards.AccessRuleType : Enum {
    public int value__;
    public static AccessRuleType Unknown;
    public static AccessRuleType Grant;
    public static AccessRuleType Deny;
    public static AccessRuleType GrantBySection;
}
public class Umbraco.Core.Dashboards.ContentDashboardSettings : object {
    private static string DefaultContentDashboardPath;
    public bool AllowContentDashboardAccessToAllUsers { get; }
    public string ContentDashboardPath { get; }
    public string ContentDashboardUrlAllowlist { get; }
    public sealed virtual bool get_AllowContentDashboardAccessToAllUsers();
    public sealed virtual string get_ContentDashboardPath();
    public sealed virtual string get_ContentDashboardUrlAllowlist();
}
[DataContractAttribute]
public class Umbraco.Core.Dashboards.DashboardSlim : object {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <View>k__BackingField;
    public string Alias { get; public set; }
    public string View { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_View();
    [CompilerGeneratedAttribute]
public void set_View(string value);
}
public interface Umbraco.Core.Dashboards.IAccessRule {
    public AccessRuleType Type { get; public set; }
    public string Value { get; public set; }
    public abstract virtual AccessRuleType get_Type();
    public abstract virtual void set_Type(AccessRuleType value);
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
public interface Umbraco.Core.Dashboards.IContentDashboardSettings {
    public bool AllowContentDashboardAccessToAllUsers { get; }
    public string ContentDashboardPath { get; }
    public string ContentDashboardUrlAllowlist { get; }
    public abstract virtual bool get_AllowContentDashboardAccessToAllUsers();
    public abstract virtual string get_ContentDashboardPath();
    public abstract virtual string get_ContentDashboardUrlAllowlist();
}
public interface Umbraco.Core.Dashboards.IDashboard {
    [DataMemberAttribute]
public String[] Sections { get; }
    [DataMemberAttribute]
public IAccessRule[] AccessRules { get; }
    public abstract virtual String[] get_Sections();
    public abstract virtual IAccessRule[] get_AccessRules();
}
public interface Umbraco.Core.Dashboards.IDashboardSlim {
    [DataMemberAttribute]
public string Alias { get; }
    [DataMemberAttribute]
public string View { get; }
    public abstract virtual string get_Alias();
    public abstract virtual string get_View();
}
[ExtensionAttribute]
internal static class Umbraco.Core.DataTableExtensions : object {
    public static DataTable GenerateDataTable(string tableAlias, Func`2<string, IEnumerable`1<KeyValuePair`2<string, string>>> getHeaders, Func`1<IEnumerable`1<Tuple`2<IEnumerable`1<KeyValuePair`2<string, object>>, IEnumerable`1<KeyValuePair`2<string, object>>>>> rowData);
    internal static List`1<Tuple`2<IEnumerable`1<KeyValuePair`2<string, object>>, IEnumerable`1<KeyValuePair`2<string, object>>>> CreateTableData();
    internal static void AddRowData(List`1<Tuple`2<IEnumerable`1<KeyValuePair`2<string, object>>, IEnumerable`1<KeyValuePair`2<string, object>>>> rowData, IEnumerable`1<KeyValuePair`2<string, object>> standardVals, IEnumerable`1<KeyValuePair`2<string, object>> userVals);
    private static IDictionary`2<string, string> GetPropertyHeaders(string alias, Func`2<string, IEnumerable`1<KeyValuePair`2<string, string>>> getHeaders);
    [ExtensionAttribute]
private static void PopulateRow(DataTable dt, IDictionary`2<string, string> aliasesToNames, IEnumerable`1<KeyValuePair`2<string, object>> standardVals, IEnumerable`1<KeyValuePair`2<string, object>> userPropertyVals);
}
[ExtensionAttribute]
public static class Umbraco.Core.DateTimeExtensions : object {
    [ExtensionAttribute]
public static string ToIsoString(DateTime dt);
    [ExtensionAttribute]
public static DateTime TruncateTo(DateTime dt, DateTruncate truncateTo);
    [ExtensionAttribute]
public static int PeriodicMinutesFrom(DateTime fromDateTime, string scheduledTime);
    private static bool IsScheduledInRemainingDay(DateTime fromDateTime, int scheduledHour, int scheduledMinute);
}
[ExtensionAttribute]
public static class Umbraco.Core.DecimalExtensions : object {
    [ExtensionAttribute]
public static decimal Normalize(decimal value);
}
public class Umbraco.Core.DelegateEqualityComparer`1 : object {
    private Func`3<T, T, bool> _equals;
    private Func`2<T, int> _getHashcode;
    public DelegateEqualityComparer`1(Func`3<T, T, bool> equals, Func`2<T, int> getHashcode);
    public static DelegateEqualityComparer`1<T> CompareMember(Func`2<T, TMember> memberExpression);
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
[ExtensionAttribute]
public static class Umbraco.Core.DelegateExtensions : object {
    [ExtensionAttribute]
public static Attempt`1<T> RetryUntilSuccessOrTimeout(Func`1<Attempt`1<T>> task, TimeSpan timeout, TimeSpan pause);
    [ExtensionAttribute]
public static Attempt`1<T> RetryUntilSuccessOrMaxAttempts(Func`2<int, Attempt`1<T>> task, int totalAttempts, TimeSpan pause);
}
public abstract class Umbraco.Core.Deploy.ArtifactBase`1 : object {
    private Lazy`1<string> _checksum;
    private IEnumerable`1<ArtifactDependency> _dependencies;
    [CompilerGeneratedAttribute]
private TUdi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    private Udi Umbraco.Core.Deploy.IArtifactSignature.Udi { get; }
    public TUdi Udi { get; public set; }
    [JsonIgnoreAttribute]
public string Checksum { get; }
    public IEnumerable`1<ArtifactDependency> Dependencies { get; public set; }
    public string Name { get; public set; }
    public string Alias { get; public set; }
    protected ArtifactBase`1(TUdi udi, IEnumerable`1<ArtifactDependency> dependencies);
    protected abstract virtual string GetChecksum();
    private sealed virtual override Udi Umbraco.Core.Deploy.IArtifactSignature.get_Udi();
    [CompilerGeneratedAttribute]
public TUdi get_Udi();
    [CompilerGeneratedAttribute]
public void set_Udi(TUdi value);
    public sealed virtual string get_Checksum();
    public sealed virtual IEnumerable`1<ArtifactDependency> get_Dependencies();
    public void set_Dependencies(IEnumerable`1<ArtifactDependency> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
}
public class Umbraco.Core.Deploy.ArtifactDependency : object {
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Ordering>k__BackingField;
    [CompilerGeneratedAttribute]
private ArtifactDependencyMode <Mode>k__BackingField;
    public Udi Udi { get; private set; }
    public bool Ordering { get; private set; }
    public ArtifactDependencyMode Mode { get; private set; }
    public ArtifactDependency(Udi udi, bool ordering, ArtifactDependencyMode mode);
    [CompilerGeneratedAttribute]
public Udi get_Udi();
    [CompilerGeneratedAttribute]
private void set_Udi(Udi value);
    [CompilerGeneratedAttribute]
public bool get_Ordering();
    [CompilerGeneratedAttribute]
private void set_Ordering(bool value);
    [CompilerGeneratedAttribute]
public ArtifactDependencyMode get_Mode();
    [CompilerGeneratedAttribute]
private void set_Mode(ArtifactDependencyMode value);
}
public class Umbraco.Core.Deploy.ArtifactDependencyCollection : object {
    private Dictionary`2<Udi, ArtifactDependency> _dependencies;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual IEnumerator`1<ArtifactDependency> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(ArtifactDependency item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ArtifactDependency item);
    public sealed virtual void CopyTo(ArtifactDependency[] array, int arrayIndex);
    public sealed virtual bool Remove(ArtifactDependency item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
}
public enum Umbraco.Core.Deploy.ArtifactDependencyMode : Enum {
    public int value__;
    public static ArtifactDependencyMode Match;
    public static ArtifactDependencyMode Exist;
}
public abstract class Umbraco.Core.Deploy.ArtifactDeployState : object {
    [CompilerGeneratedAttribute]
private IServiceConnector <Connector>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NextPass>k__BackingField;
    public IArtifact Artifact { get; }
    public IServiceConnector Connector { get; public set; }
    public int NextPass { get; public set; }
    public static ArtifactDeployState`2<TArtifact, TEntity> Create(TArtifact art, TEntity entity, IServiceConnector connector, int nextPass);
    public IArtifact get_Artifact();
    protected abstract virtual IArtifact GetArtifactAsIArtifact();
    [CompilerGeneratedAttribute]
public IServiceConnector get_Connector();
    [CompilerGeneratedAttribute]
public void set_Connector(IServiceConnector value);
    [CompilerGeneratedAttribute]
public int get_NextPass();
    [CompilerGeneratedAttribute]
public void set_NextPass(int value);
}
public class Umbraco.Core.Deploy.ArtifactDeployState`2 : ArtifactDeployState {
    [CompilerGeneratedAttribute]
private TArtifact <Artifact>k__BackingField;
    [CompilerGeneratedAttribute]
private TEntity <Entity>k__BackingField;
    public TArtifact Artifact { get; public set; }
    public TEntity Entity { get; public set; }
    public ArtifactDeployState`2(TArtifact art, TEntity entity, IServiceConnector connector, int nextPass);
    [CompilerGeneratedAttribute]
public TArtifact get_Artifact();
    [CompilerGeneratedAttribute]
public void set_Artifact(TArtifact value);
    [CompilerGeneratedAttribute]
public TEntity get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(TEntity value);
    protected sealed virtual IArtifact GetArtifactAsIArtifact();
}
public class Umbraco.Core.Deploy.ArtifactSignature : object {
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ArtifactDependency> <Dependencies>k__BackingField;
    public Udi Udi { get; private set; }
    public string Checksum { get; private set; }
    public IEnumerable`1<ArtifactDependency> Dependencies { get; private set; }
    public ArtifactSignature(Udi udi, string checksum, IEnumerable`1<ArtifactDependency> dependencies);
    [CompilerGeneratedAttribute]
public sealed virtual Udi get_Udi();
    [CompilerGeneratedAttribute]
private void set_Udi(Udi value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Checksum();
    [CompilerGeneratedAttribute]
private void set_Checksum(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<ArtifactDependency> get_Dependencies();
    [CompilerGeneratedAttribute]
private void set_Dependencies(IEnumerable`1<ArtifactDependency> value);
}
public class Umbraco.Core.Deploy.Difference : object {
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    public string Title { get; public set; }
    public string Text { get; public set; }
    public string Category { get; public set; }
    public Difference(string title, string text, string category);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    public virtual string ToString();
}
public enum Umbraco.Core.Deploy.Direction : Enum {
    public int value__;
    public static Direction ToArtifact;
    public static Direction FromArtifact;
}
public interface Umbraco.Core.Deploy.IArtifact {
    public string Name { get; }
    public string Alias { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Alias();
}
public interface Umbraco.Core.Deploy.IArtifactSignature {
    public Udi Udi { get; }
    public string Checksum { get; }
    public IEnumerable`1<ArtifactDependency> Dependencies { get; }
    public abstract virtual Udi get_Udi();
    public abstract virtual string get_Checksum();
    public abstract virtual IEnumerable`1<ArtifactDependency> get_Dependencies();
}
public interface Umbraco.Core.Deploy.IDataTypeConfigurationConnector {
    public IEnumerable`1<string> PropertyEditorAliases { get; }
    public abstract virtual IEnumerable`1<string> get_PropertyEditorAliases();
    public abstract virtual string ToArtifact(IDataType dataType, ICollection`1<ArtifactDependency> dependencies);
    public abstract virtual object FromArtifact(IDataType dataType, string configuration);
}
public interface Umbraco.Core.Deploy.IDeployContext {
    public Guid SessionId { get; }
    public IFileSource FileSource { get; }
    public IDictionary`2<string, object> Items { get; }
    public abstract virtual Guid get_SessionId();
    public abstract virtual IFileSource get_FileSource();
    public abstract virtual int NextSeq();
    public abstract virtual IDictionary`2<string, object> get_Items();
    public abstract virtual T Item(string key);
}
public interface Umbraco.Core.Deploy.IFileSource {
    public abstract virtual Stream GetFileStream(StringUdi udi);
    public abstract virtual Task`1<Stream> GetFileStreamAsync(StringUdi udi, CancellationToken token);
    public abstract virtual string GetFileContent(StringUdi udi);
    public abstract virtual Task`1<string> GetFileContentAsync(StringUdi udi, CancellationToken token);
    public abstract virtual long GetFileLength(StringUdi udi);
    public abstract virtual Task`1<long> GetFileLengthAsync(StringUdi udi, CancellationToken token);
    public abstract virtual void GetFiles(IEnumerable`1<StringUdi> udis, IFileTypeCollection fileTypes);
    public abstract virtual Task GetFilesAsync(IEnumerable`1<StringUdi> udis, IFileTypeCollection fileTypes, CancellationToken token);
}
public interface Umbraco.Core.Deploy.IFileType {
    public bool CanSetPhysical { get; }
    public abstract virtual Stream GetStream(StringUdi udi);
    public abstract virtual Task`1<Stream> GetStreamAsync(StringUdi udi, CancellationToken token);
    public abstract virtual Stream GetChecksumStream(StringUdi udi);
    public abstract virtual long GetLength(StringUdi udi);
    public abstract virtual void SetStream(StringUdi udi, Stream stream);
    public abstract virtual Task SetStreamAsync(StringUdi udi, Stream stream, CancellationToken token);
    public abstract virtual bool get_CanSetPhysical();
    public abstract virtual void Set(StringUdi udi, string physicalPath, bool copy);
    public abstract virtual string GetPhysicalPath(StringUdi udi);
    public abstract virtual string GetVirtualPath(StringUdi udi);
}
[DefaultMemberAttribute("Item")]
public interface Umbraco.Core.Deploy.IFileTypeCollection {
    public IFileType Item { get; }
    public abstract virtual IFileType get_Item(string entityType);
    public abstract virtual bool Contains(string entityType);
}
public interface Umbraco.Core.Deploy.IGridCellValueConnector {
    public abstract virtual bool IsConnector(string view);
    public abstract virtual string GetValue(GridControl gridControl, ICollection`1<ArtifactDependency> dependencies);
    public abstract virtual void SetValue(GridControl gridControl);
}
public interface Umbraco.Core.Deploy.IImageSourceParser {
    public abstract virtual string ToArtifact(string value, ICollection`1<Udi> dependencies);
    public abstract virtual string FromArtifact(string value);
}
public interface Umbraco.Core.Deploy.ILocalLinkParser {
    public abstract virtual string ToArtifact(string value, ICollection`1<Udi> dependencies);
    public abstract virtual string FromArtifact(string value);
}
public interface Umbraco.Core.Deploy.IMacroParser {
    public abstract virtual string ToArtifact(string value, ICollection`1<Udi> dependencies);
    public abstract virtual string FromArtifact(string value);
    public abstract virtual string ReplaceAttributeValue(string value, string editorAlias, ICollection`1<Udi> dependencies, Direction direction);
}
public interface Umbraco.Core.Deploy.IServiceConnector {
    public abstract virtual IArtifact GetArtifact(Udi udi);
    public abstract virtual IArtifact GetArtifact(object entity);
    public abstract virtual ArtifactDeployState ProcessInit(IArtifact art, IDeployContext context);
    public abstract virtual void Process(ArtifactDeployState dart, IDeployContext context, int pass);
    public abstract virtual void Explode(UdiRange range, List`1<Udi> udis);
    public abstract virtual NamedUdiRange GetRange(Udi udi, string selector);
    public abstract virtual NamedUdiRange GetRange(string entityType, string sid, string selector);
    public abstract virtual bool Compare(IArtifact art1, IArtifact art2, ICollection`1<Difference> differences);
}
public interface Umbraco.Core.Deploy.IUniqueIdentifyingServiceConnector {
    public abstract virtual string GetUniqueIdentifier(IArtifact artifact);
}
public interface Umbraco.Core.Deploy.IValueConnector {
    public IEnumerable`1<string> PropertyEditorAliases { get; }
    public abstract virtual IEnumerable`1<string> get_PropertyEditorAliases();
    public abstract virtual string ToArtifact(object value, PropertyType propertyType, ICollection`1<ArtifactDependency> dependencies);
    public abstract virtual object FromArtifact(string value, PropertyType propertyType, object currentValue);
}
internal static class Umbraco.Core.Diagnostics.MiniDump : object {
    private static object LockO;
    private static MiniDump();
    private static bool MiniDumpWriteDump(IntPtr hProcess, UInt32 processId, SafeHandle hFile, UInt32 dumpType, MiniDumpExceptionInformation& expParam, IntPtr userStreamParam, IntPtr callbackParam);
    private static bool MiniDumpWriteDump(IntPtr hProcess, UInt32 processId, SafeHandle hFile, UInt32 dumpType, IntPtr expParam, IntPtr userStreamParam, IntPtr callbackParam);
    private static UInt32 GetCurrentThreadId();
    private static bool Write(SafeHandle fileHandle, Option options, bool withException);
    public static bool Dump(Option options, bool withException);
    public static bool OkToDump();
}
[DefaultMemberAttribute("Item")]
public interface Umbraco.Core.Dictionary.ICultureDictionary {
    public string Item { get; }
    public CultureInfo Culture { get; }
    public abstract virtual string get_Item(string key);
    public abstract virtual CultureInfo get_Culture();
    public abstract virtual IDictionary`2<string, string> GetChildren(string key);
}
public interface Umbraco.Core.Dictionary.ICultureDictionaryFactory {
    public abstract virtual ICultureDictionary CreateDictionary();
}
[ExtensionAttribute]
internal static class Umbraco.Core.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TVal GetOrCreate(IDictionary`2<TKey, TVal> dict, TKey key);
    [ExtensionAttribute]
public static bool TryUpdate(ConcurrentDictionary`2<TKey, TValue> dict, TKey key, Func`2<TValue, TValue> updateFactory);
    [ExtensionAttribute]
public static bool TryUpdateOptimisitic(ConcurrentDictionary`2<TKey, TValue> dict, TKey key, Func`2<TValue, TValue> updateFactory);
    [ExtensionAttribute]
public static IDictionary`2<TKeyOut, TValOut> ConvertTo(IDictionary d);
    [ExtensionAttribute]
public static IDictionary`2<TKeyOut, TValOut> ConvertTo(IDictionary d, Func`2<object, TKeyOut> keyConverter, Func`2<object, TValOut> valConverter);
    [ExtensionAttribute]
public static NameValueCollection ToNameValueCollection(IDictionary`2<string, string> d);
    [ExtensionAttribute]
public static void MergeLeft(T destination, IEnumerable`1<IDictionary`2<TK, TV>> sources, bool overwrite);
    [ExtensionAttribute]
public static void MergeLeft(T destination, IDictionary`2<TK, TV> source, bool overwrite);
    [ExtensionAttribute]
public static TVal GetValue(IDictionary`2<TKey, TVal> d, TKey key, TVal defaultValue);
    [ExtensionAttribute]
public static string GetValueAsString(IDictionary`2<TKey, TVal> d, TKey key);
    [ExtensionAttribute]
public static string GetValueAsString(IDictionary`2<TKey, TVal> d, TKey key, string defaultValue);
    [ExtensionAttribute]
public static bool ContainsKeyIgnoreCase(IDictionary`2<string, TValue> dictionary, string key);
    [ExtensionAttribute]
public static string ToQueryString(IDictionary`2<string, object> d);
    [ExtensionAttribute]
public static TValue GetValueIgnoreCase(IDictionary`2<string, TValue> dictionary, string key);
    [ExtensionAttribute]
public static TValue GetValueIgnoreCase(IDictionary`2<string, TValue> dictionary, string key, TValue defaultValue);
}
public abstract class Umbraco.Core.DisposableObjectSlim : object {
    private object _locko;
    [CompilerGeneratedAttribute]
private bool <Disposed>k__BackingField;
    public bool Disposed { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_Disposed();
    [CompilerGeneratedAttribute]
private void set_Disposed(bool value);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    protected virtual void DisposeResources();
}
public class Umbraco.Core.EmailSender : object {
    private bool _enableEvents;
    private static Lazy`1<bool> SmtpConfigured;
    [CompilerGeneratedAttribute]
private static EventHandler`1<SendEmailEventArgs> SendEmail;
    internal static bool CanSendRequiredEmail { get; }
    internal static bool EventHandlerRegistered { get; }
    internal EmailSender(bool enableEvents);
    private static EmailSender();
    public void Send(MailMessage message);
    [AsyncStateMachineAttribute("Umbraco.Core.EmailSender/<SendAsync>d__5")]
public sealed virtual Task SendAsync(MailMessage message);
    internal static bool get_CanSendRequiredEmail();
    internal static bool get_EventHandlerRegistered();
    [CompilerGeneratedAttribute]
internal static void add_SendEmail(EventHandler`1<SendEmailEventArgs> value);
    [CompilerGeneratedAttribute]
internal static void remove_SendEmail(EventHandler`1<SendEmailEventArgs> value);
    private static void OnSendEmail(SendEmailEventArgs e);
}
public static class Umbraco.Core.Enum`1 : object {
    private static List`1<T> Values;
    private static Dictionary`2<string, T> InsensitiveNameToValue;
    private static Dictionary`2<string, T> SensitiveNameToValue;
    private static Dictionary`2<int, T> IntToValue;
    private static Dictionary`2<T, string> ValueToName;
    private static Enum`1();
    public static bool IsDefined(T value);
    public static bool IsDefined(string value);
    public static bool IsDefined(int value);
    public static IEnumerable`1<T> GetValues();
    public static String[] GetNames();
    public static string GetName(T value);
    public static T Parse(string value, bool ignoreCase);
    public static bool TryParse(string value, T& returnValue, bool ignoreCase);
    public static Nullable`1<T> ParseOrNull(string value);
    public static Nullable`1<T> CastOrNull(int value);
}
[ExtensionAttribute]
public static class Umbraco.Core.EnumerableExtensions : object {
    [ExtensionAttribute]
internal static bool IsCollectionEmpty(IReadOnlyCollection`1<T> list);
    [ExtensionAttribute]
internal static bool HasDuplicates(IEnumerable`1<T> items, bool includeNull);
    [IteratorStateMachineAttribute("Umbraco.Core.EnumerableExtensions/<Yield>d__2`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Yield(T item);
    [IteratorStateMachineAttribute("Umbraco.Core.EnumerableExtensions/<InGroupsOf>d__3`1")]
[ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> InGroupsOf(IEnumerable`1<T> source, int groupSize);
    [IteratorStateMachineAttribute("Umbraco.Core.EnumerableExtensions/<SelectByGroups>d__4`2")]
[ExtensionAttribute]
public static IEnumerable`1<TResult> SelectByGroups(IEnumerable`1<TSource> source, Func`2<IEnumerable`1<TSource>, IEnumerable`1<TResult>> selector, int groupSize);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [IteratorStateMachineAttribute("Umbraco.Core.EnumerableExtensions/<Range>d__6`1")]
public static IEnumerable`1<T> Range(Func`2<int, T> factory, int count);
    [ExtensionAttribute]
public static void IfNotNull(IEnumerable`1<TItem> items, Action`1<TItem> action);
    [ExtensionAttribute]
public static bool ContainsAll(IEnumerable`1<TSource> source, IEnumerable`1<TSource> other);
    [ExtensionAttribute]
public static bool ContainsAny(IEnumerable`1<TSource> source, IEnumerable`1<TSource> other);
    [ExtensionAttribute]
public static void RemoveAll(IList`1<T> list, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static void RemoveAll(ICollection`1<T> list, Func`2<T, bool> predicate);
    [IteratorStateMachineAttribute("Umbraco.Core.EnumerableExtensions/<SelectRecursive>d__12`1")]
[ExtensionAttribute]
public static IEnumerable`1<TSource> SelectRecursive(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TSource>> recursiveSelector, int maxRecusionDepth);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> coll);
    [ExtensionAttribute]
public static IEnumerable`1<TBase> ForAllThatAre(IEnumerable`1<TBase> sequence, Action`1<TActual> projection);
    [ExtensionAttribute]
public static int FindIndex(IEnumerable`1<T> items, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static int FindIndex(IEnumerable`1<T> items, int startIndex, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item);
    [ExtensionAttribute]
public static bool UnsortedSequenceEqual(IEnumerable`1<T> source, IEnumerable`1<T> other);
    [ExtensionAttribute]
public static IEnumerable`1<TTarget> Transform(IEnumerable`1<TSource> source, Func`2<IEnumerable`1<TSource>, IEnumerable`1<TTarget>> transform);
    [ExtensionAttribute]
public static IEnumerable`1<T> EmptyNull(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static IEnumerable`1<T> OfTypes(IEnumerable`1<T> contents, Type[] types);
    [IteratorStateMachineAttribute("Umbraco.Core.EnumerableExtensions/<SkipLast>d__22`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> SkipLast(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Direction sortOrder);
}
[ExtensionAttribute]
public static class Umbraco.Core.EnumExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use Enum.HasFlag() or bitwise operations (if performance is important) instead.")]
public static bool HasFlagAll(T value, T flags);
    [ExtensionAttribute]
public static bool HasFlagAny(T value, T flags);
}
public class Umbraco.Core.Events.CancellableEnumerableObjectEventArgs`1 : CancellableObjectEventArgs`1<IEnumerable`1<TEventObject>> {
    public CancellableEnumerableObjectEventArgs`1(IEnumerable`1<TEventObject> eventObject, bool canCancel, EventMessages messages, IDictionary`2<string, object> additionalData);
    public CancellableEnumerableObjectEventArgs`1(IEnumerable`1<TEventObject> eventObject, bool canCancel, EventMessages eventMessages);
    public CancellableEnumerableObjectEventArgs`1(IEnumerable`1<TEventObject> eventObject, EventMessages eventMessages);
    public CancellableEnumerableObjectEventArgs`1(IEnumerable`1<TEventObject> eventObject, bool canCancel);
    public CancellableEnumerableObjectEventArgs`1(IEnumerable`1<TEventObject> eventObject);
    public sealed virtual bool Equals(CancellableEnumerableObjectEventArgs`1<TEventObject> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Umbraco.Core.Events.CancellableEventArgs : EventArgs {
    private bool _cancel;
    private IDictionary`2<string, object> _eventState;
    private static ReadOnlyDictionary`2<string, object> EmptyAdditionalData;
    [CompilerGeneratedAttribute]
private bool <CanCancel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventMessages <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlyDictionary`2<string, object> <AdditionalData>k__BackingField;
    public bool CanCancel { get; public set; }
    public bool Cancel { get; public set; }
    public EventMessages Messages { get; }
    public ReadOnlyDictionary`2<string, object> AdditionalData { get; internal set; }
    public IDictionary`2<string, object> EventState { get; internal set; }
    public CancellableEventArgs(bool canCancel, EventMessages messages, IDictionary`2<string, object> additionalData);
    public CancellableEventArgs(bool canCancel, EventMessages eventMessages);
    public CancellableEventArgs(bool canCancel);
    public CancellableEventArgs(EventMessages eventMessages);
    private static CancellableEventArgs();
    [CompilerGeneratedAttribute]
public bool get_CanCancel();
    [CompilerGeneratedAttribute]
public void set_CanCancel(bool value);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public void CancelOperation(EventMessage cancelationMessage);
    [CompilerGeneratedAttribute]
public EventMessages get_Messages();
    [CompilerGeneratedAttribute]
public ReadOnlyDictionary`2<string, object> get_AdditionalData();
    [CompilerGeneratedAttribute]
internal void set_AdditionalData(ReadOnlyDictionary`2<string, object> value);
    public IDictionary`2<string, object> get_EventState();
    internal void set_EventState(IDictionary`2<string, object> value);
    public sealed virtual bool Equals(CancellableEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CancellableEventArgs left, CancellableEventArgs right);
    public static bool op_Inequality(CancellableEventArgs left, CancellableEventArgs right);
}
public abstract class Umbraco.Core.Events.CancellableObjectEventArgs : CancellableEventArgs {
    [CompilerGeneratedAttribute]
private object <EventObject>k__BackingField;
    internal object EventObject { get; internal set; }
    protected CancellableObjectEventArgs(object eventObject, bool canCancel, EventMessages messages, IDictionary`2<string, object> additionalData);
    protected CancellableObjectEventArgs(object eventObject, bool canCancel, EventMessages eventMessages);
    protected CancellableObjectEventArgs(object eventObject, EventMessages eventMessages);
    protected CancellableObjectEventArgs(object eventObject, bool canCancel);
    protected CancellableObjectEventArgs(object eventObject);
    [CompilerGeneratedAttribute]
internal object get_EventObject();
    [CompilerGeneratedAttribute]
internal void set_EventObject(object value);
}
public class Umbraco.Core.Events.CancellableObjectEventArgs`1 : CancellableObjectEventArgs {
    protected TEventObject EventObject { get; protected set; }
    public CancellableObjectEventArgs`1(TEventObject eventObject, bool canCancel, EventMessages messages, IDictionary`2<string, object> additionalData);
    public CancellableObjectEventArgs`1(TEventObject eventObject, bool canCancel, EventMessages eventMessages);
    public CancellableObjectEventArgs`1(TEventObject eventObject, EventMessages eventMessages);
    public CancellableObjectEventArgs`1(TEventObject eventObject, bool canCancel);
    public CancellableObjectEventArgs`1(TEventObject eventObject);
    protected TEventObject get_EventObject();
    protected void set_EventObject(TEventObject value);
    public sealed virtual bool Equals(CancellableObjectEventArgs`1<TEventObject> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CancellableObjectEventArgs`1<TEventObject> left, CancellableObjectEventArgs`1<TEventObject> right);
    public static bool op_Inequality(CancellableObjectEventArgs`1<TEventObject> left, CancellableObjectEventArgs`1<TEventObject> right);
}
public class Umbraco.Core.Events.ContentCacheEventArgs : CancelEventArgs {
}
public class Umbraco.Core.Events.ContentPublishedEventArgs : PublishEventArgs`1<IContent> {
    public ContentPublishedEventArgs(IEnumerable`1<IContent> eventObject, bool canCancel, EventMessages eventMessages);
    public bool HasPublishedCulture(IContent content, string culture);
    public bool HasUnpublishedCulture(IContent content, string culture);
}
public class Umbraco.Core.Events.ContentPublishingEventArgs : PublishEventArgs`1<IContent> {
    public ContentPublishingEventArgs(IEnumerable`1<IContent> eventObject, EventMessages eventMessages);
    public bool IsPublishingCulture(IContent content, string culture);
    public bool IsUnpublishingCulture(IContent content, string culture);
}
public class Umbraco.Core.Events.ContentSavedEventArgs : SaveEventArgs`1<IContent> {
    public ContentSavedEventArgs(IEnumerable`1<IContent> eventObject, EventMessages messages, IDictionary`2<string, object> additionalData);
    public bool HasSavedCulture(IContent content, string culture);
}
public class Umbraco.Core.Events.ContentSavingEventArgs : SaveEventArgs`1<IContent> {
    public ContentSavingEventArgs(IEnumerable`1<IContent> eventObject, EventMessages eventMessages);
    public ContentSavingEventArgs(IContent eventObject, EventMessages eventMessages);
    public ContentSavedEventArgs ToContentSavedEventArgs();
    public ContentPublishedEventArgs ToContentPublishedEventArgs();
    public ContentPublishingEventArgs ToContentPublishingEventArgs();
    public bool IsSavingCulture(IContent content, string culture);
}
public class Umbraco.Core.Events.CopyEventArgs`1 : CancellableObjectEventArgs`1<TEntity> {
    [CompilerGeneratedAttribute]
private TEntity <Copy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RelateToOriginal>k__BackingField;
    public TEntity Copy { get; public set; }
    public TEntity Original { get; }
    public int ParentId { get; private set; }
    public bool RelateToOriginal { get; public set; }
    public CopyEventArgs`1(TEntity original, TEntity copy, bool canCancel, int parentId);
    public CopyEventArgs`1(TEntity eventObject, TEntity copy, int parentId);
    public CopyEventArgs`1(TEntity eventObject, TEntity copy, bool canCancel, int parentId, bool relateToOriginal);
    [CompilerGeneratedAttribute]
public TEntity get_Copy();
    [CompilerGeneratedAttribute]
public void set_Copy(TEntity value);
    public TEntity get_Original();
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
private void set_ParentId(int value);
    [CompilerGeneratedAttribute]
public bool get_RelateToOriginal();
    [CompilerGeneratedAttribute]
public void set_RelateToOriginal(bool value);
    public sealed virtual bool Equals(CopyEventArgs`1<TEntity> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(CopyEventArgs`1<TEntity> left, CopyEventArgs`1<TEntity> right);
    public static bool op_Inequality(CopyEventArgs`1<TEntity> left, CopyEventArgs`1<TEntity> right);
}
internal class Umbraco.Core.Events.DatabaseCreationEventArgs : CancelEventArgs {
}
public class Umbraco.Core.Events.DeleteEventArgs : CancellableEventArgs {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public int Id { get; private set; }
    public DeleteEventArgs(int id, bool canCancel, EventMessages eventMessages);
    public DeleteEventArgs(int id, bool canCancel);
    public DeleteEventArgs(int id);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    public sealed virtual bool Equals(DeleteEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DeleteEventArgs left, DeleteEventArgs right);
    public static bool op_Inequality(DeleteEventArgs left, DeleteEventArgs right);
}
[SupersedeEventAttribute("Umbraco.Core.Events.SaveEventArgs`1")]
[SupersedeEventAttribute("Umbraco.Core.Events.PublishEventArgs`1")]
[SupersedeEventAttribute("Umbraco.Core.Events.MoveEventArgs`1")]
[SupersedeEventAttribute("Umbraco.Core.Events.CopyEventArgs`1")]
public class Umbraco.Core.Events.DeleteEventArgs`1 : CancellableEnumerableObjectEventArgs`1<TEntity> {
    [CompilerGeneratedAttribute]
private List`1<string> <MediaFilesToDelete>k__BackingField;
    public IEnumerable`1<TEntity> DeletedEntities { get; internal set; }
    public List`1<string> MediaFilesToDelete { get; private set; }
    public DeleteEventArgs`1(IEnumerable`1<TEntity> eventObject, bool canCancel, EventMessages eventMessages);
    public DeleteEventArgs`1(IEnumerable`1<TEntity> eventObject, EventMessages eventMessages);
    public DeleteEventArgs`1(TEntity eventObject, EventMessages eventMessages);
    public DeleteEventArgs`1(TEntity eventObject, bool canCancel, EventMessages eventMessages);
    public DeleteEventArgs`1(IEnumerable`1<TEntity> eventObject, bool canCancel);
    public DeleteEventArgs`1(IEnumerable`1<TEntity> eventObject);
    public DeleteEventArgs`1(TEntity eventObject);
    public DeleteEventArgs`1(TEntity eventObject, bool canCancel);
    public IEnumerable`1<TEntity> get_DeletedEntities();
    internal void set_DeletedEntities(IEnumerable`1<TEntity> value);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<string> get_MediaFilesToDelete();
    [CompilerGeneratedAttribute]
private void set_MediaFilesToDelete(List`1<string> value);
    public sealed virtual bool Equals(DeleteEventArgs`1<TEntity> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DeleteEventArgs`1<TEntity> left, DeleteEventArgs`1<TEntity> right);
    public static bool op_Inequality(DeleteEventArgs`1<TEntity> left, DeleteEventArgs`1<TEntity> right);
}
public class Umbraco.Core.Events.DeleteRevisionsEventArgs : DeleteEventArgs {
    [CompilerGeneratedAttribute]
private bool <DeletePriorVersions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpecificVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateToRetain>k__BackingField;
    public bool DeletePriorVersions { get; }
    public int SpecificVersion { get; }
    public DateTime DateToRetain { get; }
    public bool IsDeletingSpecificRevision { get; }
    public DeleteRevisionsEventArgs(int id, bool canCancel, int specificVersion, bool deletePriorVersions, DateTime dateToRetain);
    public DeleteRevisionsEventArgs(int id, int specificVersion, bool deletePriorVersions, DateTime dateToRetain);
    [CompilerGeneratedAttribute]
public bool get_DeletePriorVersions();
    [CompilerGeneratedAttribute]
public int get_SpecificVersion();
    [CompilerGeneratedAttribute]
public DateTime get_DateToRetain();
    public bool get_IsDeletingSpecificRevision();
    public sealed virtual bool Equals(DeleteRevisionsEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DeleteRevisionsEventArgs left, DeleteRevisionsEventArgs right);
    public static bool op_Inequality(DeleteRevisionsEventArgs left, DeleteRevisionsEventArgs right);
}
internal class Umbraco.Core.Events.EventDefinition : EventDefinitionBase {
    private EventHandler _trackedEvent;
    private object _sender;
    private EventArgs _args;
    public EventDefinition(EventHandler trackedEvent, object sender, EventArgs args, string eventName);
    public virtual void RaiseEvent();
}
internal class Umbraco.Core.Events.EventDefinition`1 : EventDefinitionBase {
    private EventHandler`1<TEventArgs> _trackedEvent;
    private object _sender;
    private TEventArgs _args;
    public EventDefinition`1(EventHandler`1<TEventArgs> trackedEvent, object sender, TEventArgs args, string eventName);
    public virtual void RaiseEvent();
}
internal class Umbraco.Core.Events.EventDefinition`2 : EventDefinitionBase {
    private TypedEventHandler`2<TSender, TEventArgs> _trackedEvent;
    private TSender _sender;
    private TEventArgs _args;
    public EventDefinition`2(TypedEventHandler`2<TSender, TEventArgs> trackedEvent, TSender sender, TEventArgs args, string eventName);
    public virtual void RaiseEvent();
}
public abstract class Umbraco.Core.Events.EventDefinitionBase : object {
    [CompilerGeneratedAttribute]
private object <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    public object Sender { get; }
    public object Args { get; }
    public string EventName { get; }
    protected EventDefinitionBase(object sender, object args, string eventName);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Sender();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Args();
    [CompilerGeneratedAttribute]
public sealed virtual string get_EventName();
    public abstract virtual void RaiseEvent();
    public sealed virtual bool Equals(EventDefinitionBase other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(EventDefinitionBase left, EventDefinitionBase right);
    public static bool op_Inequality(EventDefinitionBase left, EventDefinitionBase right);
}
public enum Umbraco.Core.Events.EventDefinitionFilter : Enum {
    public int value__;
    public static EventDefinitionFilter All;
    public static EventDefinitionFilter FirstIn;
    public static EventDefinitionFilter LastIn;
}
[ExtensionAttribute]
public static class Umbraco.Core.Events.EventExtensions : object {
    [ExtensionAttribute]
public static bool IsRaisedEventCancelled(TypedEventHandler`2<TSender, TArgs> eventHandler, TArgs args, TSender sender);
    [ExtensionAttribute]
public static void RaiseEvent(TypedEventHandler`2<TSender, TArgs> eventHandler, TArgs args, TSender sender);
}
public class Umbraco.Core.Events.EventMessage : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private EventMessageType <MessageType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultEventMessage>k__BackingField;
    public string Category { get; private set; }
    public string Message { get; private set; }
    public EventMessageType MessageType { get; private set; }
    internal bool IsDefaultEventMessage { get; internal set; }
    public EventMessage(string category, string message, EventMessageType messageType);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public EventMessageType get_MessageType();
    [CompilerGeneratedAttribute]
private void set_MessageType(EventMessageType value);
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultEventMessage();
    [CompilerGeneratedAttribute]
internal void set_IsDefaultEventMessage(bool value);
}
public class Umbraco.Core.Events.EventMessages : DisposableObjectSlim {
    private List`1<EventMessage> _msgs;
    public int Count { get; }
    public void Add(EventMessage msg);
    public int get_Count();
    public IEnumerable`1<EventMessage> GetAll();
    protected virtual void DisposeResources();
}
public enum Umbraco.Core.Events.EventMessageType : Enum {
    public int value__;
    public static EventMessageType Default;
    public static EventMessageType Info;
    public static EventMessageType Error;
    public static EventMessageType Success;
    public static EventMessageType Warning;
}
internal class Umbraco.Core.Events.EventNameExtractor : object {
    private static ConcurrentDictionary`2<Type, EventInfoArgs[]> CandidateEvents;
    private static ConcurrentDictionary`2<Tuple`2<Type, Type>, String[]> MatchedEventNames;
    private static EventNameExtractor();
    public static Attempt`1<EventNameExtractorResult> FindEvent(Type senderType, Type argsType, Func`2<string, bool> exclude);
    internal static String[] FindEvents(Type senderType, Type argsType, Func`2<string, bool> exclude);
    public static Attempt`1<EventNameExtractorResult> FindEvent(object sender, object args, Func`2<string, bool> exclude);
    internal static bool MatchIngNames(string eventName);
    internal static bool MatchNonIngNames(string eventName);
}
internal enum Umbraco.Core.Events.EventNameExtractorError : Enum {
    public int value__;
    public static EventNameExtractorError NoneFound;
    public static EventNameExtractorError Ambiguous;
}
internal class Umbraco.Core.Events.EventNameExtractorResult : object {
    [CompilerGeneratedAttribute]
private Nullable`1<EventNameExtractorError> <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Nullable`1<EventNameExtractorError> Error { get; private set; }
    public string Name { get; private set; }
    public EventNameExtractorResult(string name);
    public EventNameExtractorResult(EventNameExtractorError error);
    [CompilerGeneratedAttribute]
public Nullable`1<EventNameExtractorError> get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(Nullable`1<EventNameExtractorError> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
internal class Umbraco.Core.Events.ExportedMemberEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberExportModel <Exported>k__BackingField;
    public IMember Member { get; }
    public MemberExportModel Exported { get; }
    public ExportedMemberEventArgs(IMember member, MemberExportModel exported);
    [CompilerGeneratedAttribute]
public IMember get_Member();
    [CompilerGeneratedAttribute]
public MemberExportModel get_Exported();
}
internal interface Umbraco.Core.Events.IDeletingMediaFilesEventArgs {
    public List`1<string> MediaFilesToDelete { get; }
    public abstract virtual List`1<string> get_MediaFilesToDelete();
}
public interface Umbraco.Core.Events.IEventDefinition {
    public object Sender { get; }
    public object Args { get; }
    public string EventName { get; }
    public abstract virtual object get_Sender();
    public abstract virtual object get_Args();
    public abstract virtual string get_EventName();
    public abstract virtual void RaiseEvent();
}
public interface Umbraco.Core.Events.IEventDispatcher {
    public abstract virtual bool DispatchCancelable(EventHandler eventHandler, object sender, CancellableEventArgs args, string name);
    public abstract virtual bool DispatchCancelable(EventHandler`1<TArgs> eventHandler, object sender, TArgs args, string name);
    public abstract virtual bool DispatchCancelable(TypedEventHandler`2<TSender, TArgs> eventHandler, TSender sender, TArgs args, string name);
    public abstract virtual void Dispatch(EventHandler eventHandler, object sender, EventArgs args, string name);
    public abstract virtual void Dispatch(EventHandler`1<TArgs> eventHandler, object sender, TArgs args, string name);
    public abstract virtual void Dispatch(TypedEventHandler`2<TSender, TArgs> eventHandler, TSender sender, TArgs args, string name);
    public abstract virtual void ScopeExit(bool completed);
    public abstract virtual IEnumerable`1<IEventDefinition> GetEvents(EventDefinitionFilter filter);
}
public interface Umbraco.Core.Events.IEventMessagesAccessor {
    public EventMessages EventMessages { get; public set; }
    public abstract virtual EventMessages get_EventMessages();
    public abstract virtual void set_EventMessages(EventMessages value);
}
public interface Umbraco.Core.Events.IEventMessagesFactory {
    public abstract virtual EventMessages Get();
    public abstract virtual EventMessages GetOrDefault();
}
public class Umbraco.Core.Events.ImportPackageEventArgs`1 : CancellableEnumerableObjectEventArgs`1<TEntity> {
    [CompilerGeneratedAttribute]
private IPackageInfo <PackageMetaData>k__BackingField;
    public IPackageInfo PackageMetaData { get; }
    public IEnumerable`1<TEntity> InstallationSummary { get; }
    public ImportPackageEventArgs`1(TEntity eventObject, IPackageInfo packageMetaData, bool canCancel);
    public ImportPackageEventArgs`1(TEntity eventObject, IPackageInfo packageMetaData);
    [CompilerGeneratedAttribute]
public IPackageInfo get_PackageMetaData();
    public IEnumerable`1<TEntity> get_InstallationSummary();
    public sealed virtual bool Equals(ImportPackageEventArgs`1<TEntity> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ImportPackageEventArgs`1<TEntity> left, ImportPackageEventArgs`1<TEntity> right);
    public static bool op_Inequality(ImportPackageEventArgs`1<TEntity> left, ImportPackageEventArgs`1<TEntity> right);
}
public class Umbraco.Core.Events.MacroErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacroSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private MacroErrorBehaviour <Behaviour>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Html>k__BackingField;
    public string Name { get; public set; }
    public string Alias { get; public set; }
    public string MacroSource { get; public set; }
    public Exception Exception { get; public set; }
    public MacroErrorBehaviour Behaviour { get; public set; }
    public string Html { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_MacroSource();
    [CompilerGeneratedAttribute]
public void set_MacroSource(string value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public MacroErrorBehaviour get_Behaviour();
    [CompilerGeneratedAttribute]
public void set_Behaviour(MacroErrorBehaviour value);
    [CompilerGeneratedAttribute]
public string get_Html();
    [CompilerGeneratedAttribute]
public void set_Html(string value);
}
public class Umbraco.Core.Events.MigrationEventArgs : CancellableObjectEventArgs`1<IList`1<Type>> {
    [CompilerGeneratedAttribute]
private SemVersion <ConfiguredSemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private SemVersion <TargetSemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private IMigrationContext <MigrationContext>k__BackingField;
    public IList`1<Type> MigrationsTypes { get; }
    public SemVersion ConfiguredSemVersion { get; }
    public SemVersion TargetSemVersion { get; }
    public string ProductName { get; }
    internal IMigrationContext MigrationContext { get; }
    public MigrationEventArgs(IList`1<Type> migrationTypes, SemVersion configuredVersion, SemVersion targetVersion, string productName, bool canCancel);
    internal MigrationEventArgs(IList`1<Type> migrationTypes, IMigrationContext migrationContext, SemVersion configuredVersion, SemVersion targetVersion, string productName, bool canCancel);
    public MigrationEventArgs(IList`1<Type> migrationTypes, SemVersion configuredVersion, SemVersion targetVersion, string productName);
    public IList`1<Type> get_MigrationsTypes();
    [CompilerGeneratedAttribute]
public SemVersion get_ConfiguredSemVersion();
    [CompilerGeneratedAttribute]
public SemVersion get_TargetSemVersion();
    [CompilerGeneratedAttribute]
public string get_ProductName();
    [CompilerGeneratedAttribute]
internal IMigrationContext get_MigrationContext();
    public sealed virtual bool Equals(MigrationEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(MigrationEventArgs left, MigrationEventArgs right);
    public static bool op_Inequality(MigrationEventArgs left, MigrationEventArgs right);
}
public class Umbraco.Core.Events.MoveEventArgs`1 : CancellableObjectEventArgs`1<TEntity> {
    private IEnumerable`1<MoveEventInfo`1<TEntity>> _moveInfoCollection;
    public IEnumerable`1<MoveEventInfo`1<TEntity>> MoveInfoCollection { get; public set; }
    public MoveEventArgs`1(bool canCancel, EventMessages eventMessages, MoveEventInfo`1[] moveInfo);
    public MoveEventArgs`1(EventMessages eventMessages, MoveEventInfo`1[] moveInfo);
    public MoveEventArgs`1(bool canCancel, MoveEventInfo`1[] moveInfo);
    public MoveEventArgs`1(MoveEventInfo`1[] moveInfo);
    public IEnumerable`1<MoveEventInfo`1<TEntity>> get_MoveInfoCollection();
    public void set_MoveInfoCollection(IEnumerable`1<MoveEventInfo`1<TEntity>> value);
    public sealed virtual bool Equals(MoveEventArgs`1<TEntity> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(MoveEventArgs`1<TEntity> left, MoveEventArgs`1<TEntity> right);
    public static bool op_Inequality(MoveEventArgs`1<TEntity> left, MoveEventArgs`1<TEntity> right);
}
public class Umbraco.Core.Events.MoveEventInfo`1 : object {
    [CompilerGeneratedAttribute]
private TEntity <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewParentId>k__BackingField;
    public TEntity Entity { get; public set; }
    public string OriginalPath { get; public set; }
    public int NewParentId { get; public set; }
    public MoveEventInfo`1(TEntity entity, string originalPath, int newParentId);
    [CompilerGeneratedAttribute]
public TEntity get_Entity();
    [CompilerGeneratedAttribute]
public void set_Entity(TEntity value);
    [CompilerGeneratedAttribute]
public string get_OriginalPath();
    [CompilerGeneratedAttribute]
public void set_OriginalPath(string value);
    [CompilerGeneratedAttribute]
public int get_NewParentId();
    [CompilerGeneratedAttribute]
public void set_NewParentId(int value);
    public sealed virtual bool Equals(MoveEventInfo`1<TEntity> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(MoveEventInfo`1<TEntity> left, MoveEventInfo`1<TEntity> right);
    public static bool op_Inequality(MoveEventInfo`1<TEntity> left, MoveEventInfo`1<TEntity> right);
}
public class Umbraco.Core.Events.NewEventArgs`1 : CancellableObjectEventArgs`1<TEntity> {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private TEntity <Parent>k__BackingField;
    public TEntity Entity { get; }
    public string Alias { get; private set; }
    public int ParentId { get; private set; }
    public TEntity Parent { get; private set; }
    public NewEventArgs`1(TEntity eventObject, bool canCancel, string alias, int parentId, EventMessages eventMessages);
    public NewEventArgs`1(TEntity eventObject, bool canCancel, string alias, TEntity parent, EventMessages eventMessages);
    public NewEventArgs`1(TEntity eventObject, string alias, int parentId, EventMessages eventMessages);
    public NewEventArgs`1(TEntity eventObject, string alias, TEntity parent, EventMessages eventMessages);
    public NewEventArgs`1(TEntity eventObject, bool canCancel, string alias, int parentId);
    public NewEventArgs`1(TEntity eventObject, bool canCancel, string alias, TEntity parent);
    public NewEventArgs`1(TEntity eventObject, string alias, int parentId);
    public NewEventArgs`1(TEntity eventObject, string alias, TEntity parent);
    public TEntity get_Entity();
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(string value);
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
private void set_ParentId(int value);
    [CompilerGeneratedAttribute]
public TEntity get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TEntity value);
    public sealed virtual bool Equals(NewEventArgs`1<TEntity> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(NewEventArgs`1<TEntity> left, NewEventArgs`1<TEntity> right);
    public static bool op_Inequality(NewEventArgs`1<TEntity> left, NewEventArgs`1<TEntity> right);
}
internal class Umbraco.Core.Events.PassThroughEventDispatcher : object {
    public sealed virtual bool DispatchCancelable(EventHandler eventHandler, object sender, CancellableEventArgs args, string eventName);
    public sealed virtual bool DispatchCancelable(EventHandler`1<TArgs> eventHandler, object sender, TArgs args, string eventName);
    public sealed virtual bool DispatchCancelable(TypedEventHandler`2<TSender, TArgs> eventHandler, TSender sender, TArgs args, string eventName);
    public sealed virtual void Dispatch(EventHandler eventHandler, object sender, EventArgs args, string eventName);
    public sealed virtual void Dispatch(EventHandler`1<TArgs> eventHandler, object sender, TArgs args, string eventName);
    public sealed virtual void Dispatch(TypedEventHandler`2<TSender, TArgs> eventHandler, TSender sender, TArgs args, string eventName);
    public sealed virtual IEnumerable`1<IEventDefinition> GetEvents(EventDefinitionFilter filter);
    public sealed virtual void ScopeExit(bool completed);
}
public class Umbraco.Core.Events.PublishEventArgs`1 : CancellableEnumerableObjectEventArgs`1<TEntity> {
    public IEnumerable`1<TEntity> PublishedEntities { get; }
    public PublishEventArgs`1(IEnumerable`1<TEntity> eventObject, bool canCancel, EventMessages eventMessages);
    public PublishEventArgs`1(IEnumerable`1<TEntity> eventObject, EventMessages eventMessages);
    public PublishEventArgs`1(TEntity eventObject, EventMessages eventMessages);
    public PublishEventArgs`1(TEntity eventObject, bool canCancel, EventMessages eventMessages);
    public PublishEventArgs`1(IEnumerable`1<TEntity> eventObject, bool canCancel, bool isAllPublished);
    public PublishEventArgs`1(IEnumerable`1<TEntity> eventObject);
    public PublishEventArgs`1(TEntity eventObject);
    public PublishEventArgs`1(TEntity eventObject, bool canCancel, bool isAllPublished);
    public IEnumerable`1<TEntity> get_PublishedEntities();
    public sealed virtual bool Equals(PublishEventArgs`1<TEntity> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(PublishEventArgs`1<TEntity> left, PublishEventArgs`1<TEntity> right);
    public static bool op_Inequality(PublishEventArgs`1<TEntity> left, PublishEventArgs`1<TEntity> right);
}
internal class Umbraco.Core.Events.QueuingEventDispatcher : QueuingEventDispatcherBase {
    private IMediaFileSystem _mediaFileSystem;
    private IMediaFileSystem MediaFileSystem { get; }
    protected virtual void ScopeExitCompleted();
    private IMediaFileSystem get_MediaFileSystem();
}
public abstract class Umbraco.Core.Events.QueuingEventDispatcherBase : object {
    private List`1<IEventDefinition> _events;
    private bool _raiseCancelable;
    private List`1<IEventDefinition> Events { get; }
    protected QueuingEventDispatcherBase(bool raiseCancelable);
    private List`1<IEventDefinition> get_Events();
    public sealed virtual bool DispatchCancelable(EventHandler eventHandler, object sender, CancellableEventArgs args, string eventName);
    public sealed virtual bool DispatchCancelable(EventHandler`1<TArgs> eventHandler, object sender, TArgs args, string eventName);
    public sealed virtual bool DispatchCancelable(TypedEventHandler`2<TSender, TArgs> eventHandler, TSender sender, TArgs args, string eventName);
    public sealed virtual void Dispatch(EventHandler eventHandler, object sender, EventArgs args, string eventName);
    public sealed virtual void Dispatch(EventHandler`1<TArgs> eventHandler, object sender, TArgs args, string eventName);
    public sealed virtual void Dispatch(TypedEventHandler`2<TSender, TArgs> eventHandler, TSender sender, TArgs args, string eventName);
    public sealed virtual IEnumerable`1<IEventDefinition> GetEvents(EventDefinitionFilter filter);
    internal static IEnumerable`1<IEventDefinition> FilterSupersededAndUpdateToLatestEntity(IReadOnlyList`1<IEventDefinition> events);
    private static void UpdateToLatestEntities(IEnumerable`1<Tuple`2<IEntity, EventDefinitionInfos>> entities, IEnumerable`1<CancellableObjectEventArgs> args);
    private static bool IsSuperceeded(IEntity entity, EventDefinitionInfos infos, List`1<Tuple`2<IEntity, EventDefinitionInfos>> entities);
    public sealed virtual void ScopeExit(bool completed);
    protected abstract virtual void ScopeExitCompleted();
}
public class Umbraco.Core.Events.RecycleBinEventArgs : CancellableEventArgs {
    [CompilerGeneratedAttribute]
private Guid <NodeObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecycleBinEmptiedSuccessfully>k__BackingField;
    public Guid NodeObjectType { get; }
    public bool RecycleBinEmptiedSuccessfully { get; public set; }
    public bool IsContentRecycleBin { get; }
    public bool IsMediaRecycleBin { get; }
    public RecycleBinEventArgs(Guid nodeObjectType, EventMessages eventMessages);
    public RecycleBinEventArgs(Guid nodeObjectType);
    [CompilerGeneratedAttribute]
public Guid get_NodeObjectType();
    [CompilerGeneratedAttribute]
public bool get_RecycleBinEmptiedSuccessfully();
    [CompilerGeneratedAttribute]
public void set_RecycleBinEmptiedSuccessfully(bool value);
    public bool get_IsContentRecycleBin();
    public bool get_IsMediaRecycleBin();
    public sealed virtual bool Equals(RecycleBinEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(RecycleBinEventArgs left, RecycleBinEventArgs right);
    public static bool op_Inequality(RecycleBinEventArgs left, RecycleBinEventArgs right);
}
public class Umbraco.Core.Events.RolesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Int32[] <MemberIds>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Roles>k__BackingField;
    public Int32[] MemberIds { get; public set; }
    public String[] Roles { get; public set; }
    public RolesEventArgs(Int32[] memberIds, String[] roles);
    [CompilerGeneratedAttribute]
public Int32[] get_MemberIds();
    [CompilerGeneratedAttribute]
public void set_MemberIds(Int32[] value);
    [CompilerGeneratedAttribute]
public String[] get_Roles();
    [CompilerGeneratedAttribute]
public void set_Roles(String[] value);
}
public class Umbraco.Core.Events.RollbackEventArgs`1 : CancellableObjectEventArgs`1<TEntity> {
    public TEntity Entity { get; }
    public RollbackEventArgs`1(TEntity eventObject, bool canCancel);
    public RollbackEventArgs`1(TEntity eventObject);
    public TEntity get_Entity();
}
public class Umbraco.Core.Events.SaveEventArgs`1 : CancellableEnumerableObjectEventArgs`1<TEntity> {
    public IEnumerable`1<TEntity> SavedEntities { get; }
    public SaveEventArgs`1(IEnumerable`1<TEntity> eventObject, bool canCancel, EventMessages messages, IDictionary`2<string, object> additionalData);
    public SaveEventArgs`1(IEnumerable`1<TEntity> eventObject, bool canCancel, EventMessages eventMessages);
    public SaveEventArgs`1(IEnumerable`1<TEntity> eventObject, EventMessages eventMessages);
    public SaveEventArgs`1(TEntity eventObject, bool canCancel, EventMessages messages, IDictionary`2<string, object> additionalData);
    public SaveEventArgs`1(TEntity eventObject, EventMessages eventMessages);
    public SaveEventArgs`1(TEntity eventObject, bool canCancel, EventMessages eventMessages);
    public SaveEventArgs`1(IEnumerable`1<TEntity> eventObject, bool canCancel);
    public SaveEventArgs`1(IEnumerable`1<TEntity> eventObject);
    public SaveEventArgs`1(TEntity eventObject);
    public SaveEventArgs`1(TEntity eventObject, bool canCancel);
    public IEnumerable`1<TEntity> get_SavedEntities();
}
internal class Umbraco.Core.Events.SendEmailEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private MailMessage <Message>k__BackingField;
    public MailMessage Message { get; private set; }
    public SendEmailEventArgs(MailMessage message);
    [CompilerGeneratedAttribute]
public MailMessage get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(MailMessage value);
}
public class Umbraco.Core.Events.SendToPublishEventArgs`1 : CancellableObjectEventArgs`1<TEntity> {
    public TEntity Entity { get; }
    public SendToPublishEventArgs`1(TEntity eventObject, bool canCancel);
    public SendToPublishEventArgs`1(TEntity eventObject);
    public TEntity get_Entity();
}
[AttributeUsageAttribute("4")]
internal class Umbraco.Core.Events.SupersedeEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <SupersededEventArgsType>k__BackingField;
    public Type SupersededEventArgsType { get; private set; }
    public SupersedeEventAttribute(Type supersededEventArgsType);
    [CompilerGeneratedAttribute]
public Type get_SupersededEventArgsType();
    [CompilerGeneratedAttribute]
private void set_SupersededEventArgsType(Type value);
}
internal class Umbraco.Core.Events.TransientEventMessagesFactory : object {
    public sealed virtual EventMessages Get();
    public sealed virtual EventMessages GetOrDefault();
}
public class Umbraco.Core.Events.TypedEventHandler`2 : MulticastDelegate {
    public TypedEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(TSender sender, TEventArgs e);
    public virtual IAsyncResult BeginInvoke(TSender sender, TEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Umbraco.Core.Events.UnattendedInstallEventArgs : CancelEventArgs {
}
public class Umbraco.Core.Events.UninstallPackageEventArgs : CancellableObjectEventArgs`1<IEnumerable`1<UninstallationSummary>> {
    public IEnumerable`1<UninstallationSummary> UninstallationSummary { get; }
    public UninstallPackageEventArgs(IEnumerable`1<UninstallationSummary> eventObject, bool canCancel);
    public IEnumerable`1<UninstallationSummary> get_UninstallationSummary();
}
public class Umbraco.Core.Events.UserGroupWithUsers : object {
    [CompilerGeneratedAttribute]
private IUserGroup <UserGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private IUser[] <AddedUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private IUser[] <RemovedUsers>k__BackingField;
    public IUserGroup UserGroup { get; }
    public IUser[] AddedUsers { get; }
    public IUser[] RemovedUsers { get; }
    public UserGroupWithUsers(IUserGroup userGroup, IUser[] addedUsers, IUser[] removedUsers);
    [CompilerGeneratedAttribute]
public IUserGroup get_UserGroup();
    [CompilerGeneratedAttribute]
public IUser[] get_AddedUsers();
    [CompilerGeneratedAttribute]
public IUser[] get_RemovedUsers();
}
[ObsoleteAttribute("Throw an ArgumentNullException when the parameter is null or an ArgumentException when its empty instead.")]
public class Umbraco.Core.Exceptions.ArgumentNullOrEmptyException : ArgumentNullException {
    public ArgumentNullOrEmptyException(string paramName);
    public ArgumentNullOrEmptyException(string paramName, string message);
    public ArgumentNullOrEmptyException(string message, Exception innerException);
    protected ArgumentNullOrEmptyException(SerializationInfo info, StreamingContext context);
}
public class Umbraco.Core.Exceptions.AuthorizationException : Exception {
    public AuthorizationException(string message);
    public AuthorizationException(string message, Exception innerException);
    protected AuthorizationException(SerializationInfo info, StreamingContext context);
}
public class Umbraco.Core.Exceptions.BootFailedException : Exception {
    public static string DefaultMessage;
    public BootFailedException(string message);
    public BootFailedException(string message, Exception innerException);
    protected BootFailedException(SerializationInfo info, StreamingContext context);
    public static void Rethrow(BootFailedException bootFailedException);
}
internal class Umbraco.Core.Exceptions.DataOperationException`1 : Exception {
    [CompilerGeneratedAttribute]
private T <Operation>k__BackingField;
    public T Operation { get; private set; }
    public DataOperationException`1(string message);
    public DataOperationException`1(string message, Exception innerException);
    public DataOperationException`1(T operation);
    public DataOperationException`1(T operation, string message);
    protected DataOperationException`1(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public T get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(T value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Umbraco.Core.Exceptions.InvalidCompositionException : Exception {
    [CompilerGeneratedAttribute]
private string <ContentTypeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AddedCompositionAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PropertyTypeAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PropertyGroupAliases>k__BackingField;
    public string ContentTypeAlias { get; }
    public string AddedCompositionAlias { get; }
    public String[] PropertyTypeAliases { get; }
    public String[] PropertyGroupAliases { get; }
    public InvalidCompositionException(string contentTypeAlias, String[] propertyTypeAliases);
    public InvalidCompositionException(string contentTypeAlias, string addedCompositionAlias, String[] propertyTypeAliases);
    public InvalidCompositionException(string contentTypeAlias, string addedCompositionAlias, String[] propertyTypeAliases, String[] propertyGroupAliases);
    public InvalidCompositionException(string message);
    public InvalidCompositionException(string message, Exception innerException);
    protected InvalidCompositionException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_ContentTypeAlias();
    [CompilerGeneratedAttribute]
public string get_AddedCompositionAlias();
    [CompilerGeneratedAttribute]
public String[] get_PropertyTypeAliases();
    [CompilerGeneratedAttribute]
public String[] get_PropertyGroupAliases();
    private static string FormatMessage(string contentTypeAlias, string addedCompositionAlias, String[] propertyTypeAliases, String[] propertyGroupAliases);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Umbraco.Core.Exceptions.PanicException : Exception {
    public PanicException(string message);
    public PanicException(string message, Exception innerException);
    protected PanicException(SerializationInfo info, StreamingContext context);
}
public class Umbraco.Core.Exceptions.UnattendedInstallException : Exception {
    public UnattendedInstallException(string message);
    public UnattendedInstallException(string message, Exception innerException);
    protected UnattendedInstallException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("If a method or operation is not, and will not be, implemented, it is invalid or not supported, so we should throw either an InvalidOperationException or NotSupportedException instead.")]
public class Umbraco.Core.Exceptions.WontImplementException : NotImplementedException {
    public WontImplementException(string message);
    public WontImplementException(string message, Exception inner);
    protected WontImplementException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
internal static class Umbraco.Core.ExpressionExtensions : object {
    public static Expression`1<Func`2<T, bool>> True();
    public static Expression`1<Func`2<T, bool>> False();
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> left, Expression`1<Func`2<T, bool>> right);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> left, Expression`1<Func`2<T, bool>> right);
}
[ExtensionAttribute]
internal static class Umbraco.Core.ExpressionHelper : object {
    private static ConcurrentDictionary`2<LambdaExpressionCacheKey, PropertyInfo> PropertyInfoCache;
    private static ExpressionHelper();
    [ExtensionAttribute]
public static PropertyInfo GetPropertyInfo(TSource source, Expression`1<Func`2<TSource, TProperty>> propertyLambda);
    public static PropertyInfo GetPropertyInfo(Expression`1<Func`2<TSource, TProperty>> propertyLambda);
    public static ValueTuple`2<MemberInfo, string> FindProperty(LambdaExpression lambda);
    public static IDictionary`2<string, object> GetMethodParams(Expression`1<Func`2<T1, T2>> fromExpression);
    public static MethodInfo GetMethodInfo(Expression`1<Action`1<T>> fromExpression);
    public static MethodInfo GetMethodInfo(Expression`1<Func`1<TReturn>> fromExpression);
    public static MethodInfo GetMethodInfo(Expression`1<Func`2<T1, T2>> fromExpression);
    public static MethodInfo GetMethod(Expression expression);
    public static MemberInfo GetMemberInfo(Expression`1<Func`2<T, TReturn>> fromExpression);
    [ExtensionAttribute]
public static bool IsMethodSignatureEqualTo(MethodInfo left, MethodInfo right);
    public static MemberInfo GetMember(Expression expression);
    public static MethodInfo GetStaticMethodInfo(Delegate fromMethodGroup);
    public static bool IsMethod(Expression expression);
    public static bool IsMember(Expression expression);
    public static bool IsConstant(Expression expression);
    public static object GetFirstValueFromArguments(IEnumerable`1<Expression> arguments);
    [CompilerGeneratedAttribute]
internal static void <FindProperty>g__Throw|3_0(<>c__DisplayClass3_0& );
}
[ExtensionAttribute]
public static class Umbraco.Core.FactoryExtensions : object {
    [ExtensionAttribute]
public static T GetInstance(IFactory factory);
    [ExtensionAttribute]
public static T TryGetInstance(IFactory factory);
    [ExtensionAttribute]
public static T CreateInstance(IFactory factory, Object[] args);
    [ExtensionAttribute]
public static object CreateInstance(IFactory factory, Type type, Object[] args);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Umbraco.Core.FileResources.Files : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string BlockingWebConfig { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_BlockingWebConfig();
}
[TypeConverterAttribute("Umbraco.Core.UdiTypeConverter")]
public class Umbraco.Core.GuidUdi : Udi {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    public Guid Guid { get; private set; }
    public bool IsRoot { get; }
    public GuidUdi(string entityType, Guid guid);
    public GuidUdi(Uri uriValue);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(Guid value);
    public static GuidUdi Parse(string s);
    public static bool TryParse(string s, GuidUdi& udi);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool get_IsRoot();
    public GuidUdi EnsureClosed();
}
internal static class Umbraco.Core.GuidUtils : object {
    private static Char[] Base32Table;
    private static GuidUtils();
    public static Guid Combine(Guid a, Guid b);
    public static string ToBase32String(Guid guid, int length);
}
internal class Umbraco.Core.HashCodeCombiner : object {
    private long _combinedHash;
    internal void AddInt(int i);
    internal void AddObject(object o);
    internal void AddDateTime(DateTime d);
    internal void AddString(string s);
    internal void AddCaseInsensitiveString(string s);
    internal void AddFileSystemItem(FileSystemInfo f);
    internal void AddFile(FileInfo f);
    internal void AddFolder(DirectoryInfo d);
    internal string GetCombinedHashCode();
}
[ExtensionAttribute]
internal static class Umbraco.Core.HashCodeHelper : object {
    public static int GetHashCode(T1 arg1, T2 arg2);
    public static int GetHashCode(T1 arg1, T2 arg2, T3 arg3);
    public static int GetHashCode(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    public static int GetHashCode(T[] list);
    public static int GetHashCode(IEnumerable`1<T> list);
    public static int GetHashCodeForOrderNoMatterCollection(IEnumerable`1<T> list);
    [ExtensionAttribute]
public static int CombineHashCode(int hashCode, T arg);
}
internal class Umbraco.Core.HashGenerator : DisposableObjectSlim {
    private MemoryStream _ms;
    private StreamWriter _writer;
    internal void AddInt(int i);
    internal void AddLong(long i);
    internal void AddObject(object o);
    internal void AddDateTime(DateTime d);
    internal void AddString(string s);
    internal void AddCaseInsensitiveString(string s);
    internal void AddFileSystemItem(FileSystemInfo f);
    internal void AddFile(FileInfo f);
    internal void AddFolder(DirectoryInfo d);
    internal string GenerateHash();
    protected virtual void DisposeResources();
}
public class Umbraco.Core.Help.HelpPageSettings : object {
    public string HelpPageUrlAllowList { get; }
    public sealed virtual string get_HelpPageUrlAllowList();
}
public interface Umbraco.Core.Help.IHelpPageSettings {
    public string HelpPageUrlAllowList { get; }
    public abstract virtual string get_HelpPageUrlAllowList();
}
internal static class Umbraco.Core.HexEncoder : object {
    private static Char[] HexLutBase;
    private static Char[] HexLutHi;
    private static Char[] HexLutLo;
    private static HexEncoder();
    public static string Encode(Byte[] bytes);
    public static string Encode(Byte[] bytes, char separator, int blockSize, int blockCount);
}
[ExtensionAttribute]
public static class Umbraco.Core.HttpContextExtensions : object {
    [ExtensionAttribute]
public static T GetContextItem(HttpContextBase httpContext, string key);
    [ExtensionAttribute]
public static T GetContextItem(HttpContext httpContext, string key);
    [ExtensionAttribute]
public static string GetCurrentRequestIpAddress(HttpContextBase httpContext);
}
public interface Umbraco.Core.ICompletable {
    public abstract virtual void Complete();
}
public interface Umbraco.Core.IDisposeOnRequestEnd {
}
public interface Umbraco.Core.IEmailSender {
    public abstract virtual Task SendAsync(MailMessage message);
}
[ExtensionAttribute]
public static class Umbraco.Core.IfExtensions : object {
    [ExtensionAttribute]
public static void IfNotNull(TItem item, Action`1<TItem> action);
    [ExtensionAttribute]
public static void IfTrue(bool predicate, Action action);
    [ExtensionAttribute]
public static TResult IfNotNull(TItem item, Func`2<TItem, TResult> action, TResult defaultValue);
    [ExtensionAttribute]
public static TItem IfNull(TItem item, Func`2<TItem, TItem> action);
}
public interface Umbraco.Core.IMainDom {
    public bool IsMainDom { get; }
    public abstract virtual bool get_IsMainDom();
    public abstract virtual bool Register(Action release, int weight);
    public abstract virtual bool Register(Action install, Action release, int weight);
}
[ExtensionAttribute]
public static class Umbraco.Core.IntExtensions : object {
    [ExtensionAttribute]
public static void Times(int n, Action`1<int> action);
    [ExtensionAttribute]
public static Guid ToGuid(int value);
}
[ObsoleteAttribute("Throw an UnauthorizedAccessException instead.")]
public class Umbraco.Core.IO.FileSecurityException : Exception {
    public FileSecurityException(string message);
    public FileSecurityException(string message, Exception innerException);
    protected FileSecurityException(SerializationInfo info, StreamingContext context);
}
[ExtensionAttribute]
public static class Umbraco.Core.IO.FileSystemExtensions : object {
    [ExtensionAttribute]
public static FileStream OpenReadWithRetry(FileInfo file, int maxRetries, int sleepPerRetryInMilliseconds);
    [ExtensionAttribute]
public static void CopyFile(IFileSystem fs, string path, string newPath);
    [ExtensionAttribute]
public static string GetExtension(IFileSystem fs, string path);
    [ExtensionAttribute]
public static string GetFileName(IFileSystem fs, string path);
    [ExtensionAttribute]
internal static void CreateFolder(IFileSystem fs, string folderPath);
    [ExtensionAttribute]
public static IFileSystem Unwrap(IFileSystem filesystem);
}
public class Umbraco.Core.IO.FileSystems : object {
    private IFactory _container;
    private ILogger _logger;
    private ConcurrentDictionary`2<Type, Lazy`1<IFileSystem>> _filesystems;
    private ShadowWrapper _macroPartialFileSystem;
    private ShadowWrapper _partialViewsFileSystem;
    private ShadowWrapper _stylesheetsFileSystem;
    private ShadowWrapper _scriptsFileSystem;
    private ShadowWrapper _mvcViewsFileSystem;
    private object _wkfsLock;
    private bool _wkfsInitialized;
    private object _wkfsObject;
    private List`1<ShadowWrapper> _shadowWrappers;
    private object _shadowLocker;
    private static string _shadowCurrentId;
    [CompilerGeneratedAttribute]
private Func`1<bool> <IsScoped>k__BackingField;
    private Dictionary`2<Type, string> _paths;
    internal Func`1<bool> IsScoped { get; internal set; }
    public IFileSystem MacroPartialsFileSystem { get; }
    public IFileSystem PartialViewsFileSystem { get; }
    public IFileSystem StylesheetsFileSystem { get; }
    public IFileSystem ScriptsFileSystem { get; }
    public IFileSystem MvcViewsFileSystem { get; }
    internal IReadOnlyDictionary`2<Type, string> Paths { get; }
    public FileSystems(IFactory container, ILogger logger);
    internal void Reset();
    internal static void ResetShadowId();
    [CompilerGeneratedAttribute]
internal Func`1<bool> get_IsScoped();
    [CompilerGeneratedAttribute]
internal void set_IsScoped(Func`1<bool> value);
    public sealed virtual IFileSystem get_MacroPartialsFileSystem();
    public sealed virtual IFileSystem get_PartialViewsFileSystem();
    public sealed virtual IFileSystem get_StylesheetsFileSystem();
    public sealed virtual IFileSystem get_ScriptsFileSystem();
    public sealed virtual IFileSystem get_MvcViewsFileSystem();
    private void EnsureWellKnownFileSystems();
    private object CreateWellKnownFileSystems();
    internal IReadOnlyDictionary`2<Type, string> get_Paths();
    public TFileSystem GetFileSystem(IFileSystem supporting);
    internal ICompletable Shadow();
    internal void BeginShadow(string id);
    internal void EndShadow(string id, bool completed);
    private ShadowWrapper CreateShadowWrapper(IFileSystem filesystem, string shadowPath);
}
public abstract class Umbraco.Core.IO.FileSystemWrapper : object {
    [CompilerGeneratedAttribute]
private IFileSystem <InnerFileSystem>k__BackingField;
    internal IFileSystem InnerFileSystem { get; internal set; }
    public bool CanAddPhysical { get; }
    protected FileSystemWrapper(IFileSystem innerFileSystem);
    [CompilerGeneratedAttribute]
internal IFileSystem get_InnerFileSystem();
    [CompilerGeneratedAttribute]
internal void set_InnerFileSystem(IFileSystem value);
    public virtual IEnumerable`1<string> GetDirectories(string path);
    public virtual void DeleteDirectory(string path);
    public virtual void DeleteDirectory(string path, bool recursive);
    public virtual bool DirectoryExists(string path);
    public virtual void AddFile(string path, Stream stream);
    public virtual void AddFile(string path, Stream stream, bool overrideExisting);
    public virtual IEnumerable`1<string> GetFiles(string path);
    public virtual IEnumerable`1<string> GetFiles(string path, string filter);
    public virtual Stream OpenFile(string path);
    public virtual void DeleteFile(string path);
    public virtual bool FileExists(string path);
    public virtual string GetRelativePath(string fullPathOrUrl);
    public virtual string GetFullPath(string path);
    public virtual string GetUrl(string path);
    public virtual DateTimeOffset GetLastModified(string path);
    public virtual DateTimeOffset GetCreated(string path);
    public virtual long GetSize(string path);
    public virtual bool get_CanAddPhysical();
    public virtual void AddFile(string path, string physicalPath, bool overrideIfExists, bool copy);
}
public interface Umbraco.Core.IO.IFileSystem {
    public bool CanAddPhysical { get; }
    public abstract virtual IEnumerable`1<string> GetDirectories(string path);
    public abstract virtual void DeleteDirectory(string path);
    public abstract virtual void DeleteDirectory(string path, bool recursive);
    public abstract virtual bool DirectoryExists(string path);
    public abstract virtual void AddFile(string path, Stream stream);
    public abstract virtual void AddFile(string path, Stream stream, bool overrideIfExists);
    public abstract virtual IEnumerable`1<string> GetFiles(string path);
    public abstract virtual IEnumerable`1<string> GetFiles(string path, string filter);
    public abstract virtual Stream OpenFile(string path);
    public abstract virtual void DeleteFile(string path);
    public abstract virtual bool FileExists(string path);
    public abstract virtual string GetRelativePath(string fullPathOrUrl);
    public abstract virtual string GetFullPath(string path);
    public abstract virtual string GetUrl(string path);
    public abstract virtual DateTimeOffset GetLastModified(string path);
    public abstract virtual DateTimeOffset GetCreated(string path);
    public abstract virtual long GetSize(string path);
    public abstract virtual bool get_CanAddPhysical();
    public abstract virtual void AddFile(string path, string physicalPath, bool overrideIfExists, bool copy);
}
public interface Umbraco.Core.IO.IFileSystems {
    public IFileSystem MacroPartialsFileSystem { get; }
    public IFileSystem PartialViewsFileSystem { get; }
    public IFileSystem StylesheetsFileSystem { get; }
    public IFileSystem ScriptsFileSystem { get; }
    public IFileSystem MvcViewsFileSystem { get; }
    public abstract virtual IFileSystem get_MacroPartialsFileSystem();
    public abstract virtual IFileSystem get_PartialViewsFileSystem();
    public abstract virtual IFileSystem get_StylesheetsFileSystem();
    public abstract virtual IFileSystem get_ScriptsFileSystem();
    public abstract virtual IFileSystem get_MvcViewsFileSystem();
}
public interface Umbraco.Core.IO.IMediaFileSystem {
    public abstract virtual void DeleteMediaFiles(IEnumerable`1<string> files);
    public abstract virtual string GetMediaPath(string filename, Guid cuid, Guid puid);
    public abstract virtual string GetMediaPath(string filename, string prevpath, Guid cuid, Guid puid);
    public abstract virtual string StoreFile(IContentBase content, PropertyType propertyType, string filename, Stream filestream, string oldpath);
    public abstract virtual string CopyFile(IContentBase content, PropertyType propertyType, string sourcepath);
}
public interface Umbraco.Core.IO.IMediaPathScheme {
    public abstract virtual string GetFilePath(IMediaFileSystem fileSystem, Guid itemGuid, Guid propertyGuid, string filename, string previous);
    public abstract virtual string GetDeleteDirectory(IMediaFileSystem fileSystem, string filepath);
}
[ExtensionAttribute]
public static class Umbraco.Core.IO.IOHelper : object {
    [CompilerGeneratedAttribute]
private static bool <ForceNotHosted>k__BackingField;
    private static string _rootDir;
    public static bool ForceNotHosted { get; public set; }
    public static bool IsHosted { get; }
    public static char DirSepChar { get; }
    private static IOHelper();
    [CompilerGeneratedAttribute]
public static bool get_ForceNotHosted();
    [CompilerGeneratedAttribute]
public static void set_ForceNotHosted(bool value);
    public static bool get_IsHosted();
    public static char get_DirSepChar();
    public static string FindFile(string virtualPath);
    public static string ResolveVirtualUrl(string path);
    public static string ResolveUrl(string virtualPath);
    public static Attempt`1<string> TryResolveUrl(string virtualPath);
    public static string MapPath(string path, bool useHttpContext);
    public static string MapPath(string path);
    internal static string ReturnPath(string settingsKey, string standardPath, bool useTilde);
    internal static string ReturnPath(string settingsKey, string standardPath);
    internal static bool VerifyEditPath(string filePath, string validDir);
    internal static bool VerifyEditPath(string filePath, IEnumerable`1<string> validDirs);
    internal static bool VerifyFileExtension(string filePath, IEnumerable`1<string> validFileExtensions);
    public static bool PathStartsWith(string path, string root, char separator);
    internal static string GetRootDirectorySafe();
    internal static string GetRootDirectoryBinFolder();
    internal static void SetRootDirectory(string rootPath);
    internal static string SafeFileName(string filePath);
    public static void EnsurePathExists(string path);
    [ExtensionAttribute]
internal static bool IsFullPath(string path);
    [ExtensionAttribute]
internal static string GetRelativePath(string path);
    [ExtensionAttribute]
internal static string EnsurePathIsApplicationRootPrefixed(string path);
}
public class Umbraco.Core.IO.MediaFileSystem : FileSystemWrapper {
    private IMediaPathScheme _mediaPathScheme;
    private IContentSection _contentConfig;
    private ILogger _logger;
    public MediaFileSystem(IFileSystem innerFileSystem, IContentSection contentConfig, IMediaPathScheme mediaPathScheme, ILogger logger);
    public sealed virtual void DeleteMediaFiles(IEnumerable`1<string> files);
    public sealed virtual string GetMediaPath(string filename, Guid cuid, Guid puid);
    public sealed virtual string GetMediaPath(string filename, string prevpath, Guid cuid, Guid puid);
    public sealed virtual string StoreFile(IContentBase content, PropertyType propertyType, string filename, Stream filestream, string oldpath);
    public sealed virtual string CopyFile(IContentBase content, PropertyType propertyType, string sourcepath);
    [CompilerGeneratedAttribute]
private void <DeleteMediaFiles>b__4_0(string file);
}
public class Umbraco.Core.IO.MediaPathSchemes.CombinedGuidsMediaPathScheme : object {
    public sealed virtual string GetFilePath(IMediaFileSystem fileSystem, Guid itemGuid, Guid propertyGuid, string filename, string previous);
    public sealed virtual string GetDeleteDirectory(IMediaFileSystem fileSystem, string filepath);
}
public class Umbraco.Core.IO.MediaPathSchemes.OriginalMediaPathScheme : object {
    private object _folderCounterLock;
    private long _folderCounter;
    private bool _folderCounterInitialized;
    public sealed virtual string GetFilePath(IMediaFileSystem fileSystem, Guid itemGuid, Guid propertyGuid, string filename, string previous);
    public sealed virtual string GetDeleteDirectory(IMediaFileSystem fileSystem, string filepath);
    private string GetNextDirectory(IFileSystem fileSystem);
    private void EnsureFolderCounterIsInitialized(IFileSystem fileSystem);
}
public class Umbraco.Core.IO.MediaPathSchemes.TwoGuidsMediaPathScheme : object {
    public sealed virtual string GetFilePath(IMediaFileSystem fileSystem, Guid itemGuid, Guid propertyGuid, string filename, string previous);
    public sealed virtual string GetDeleteDirectory(IMediaFileSystem fileSystem, string filepath);
}
public class Umbraco.Core.IO.MediaPathSchemes.UniqueMediaPathScheme : object {
    private static int DirectoryLength;
    public sealed virtual string GetFilePath(IMediaFileSystem fileSystem, Guid itemGuid, Guid propertyGuid, string filename, string previous);
    public sealed virtual string GetDeleteDirectory(IMediaFileSystem fileSystem, string filepath);
}
public class Umbraco.Core.IO.PhysicalFileSystem : object {
    private string _rootPath;
    private string _rootPathFwd;
    private string _rootUrl;
    public bool CanAddPhysical { get; }
    public PhysicalFileSystem(string virtualRoot);
    public PhysicalFileSystem(string rootPath, string rootUrl);
    public sealed virtual IEnumerable`1<string> GetDirectories(string path);
    public sealed virtual void DeleteDirectory(string path);
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void AddFile(string path, Stream stream);
    public sealed virtual void AddFile(string path, Stream stream, bool overrideExisting);
    public sealed virtual IEnumerable`1<string> GetFiles(string path);
    public sealed virtual IEnumerable`1<string> GetFiles(string path, string filter);
    public sealed virtual Stream OpenFile(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual bool FileExists(string path);
    public sealed virtual string GetRelativePath(string fullPathOrUrl);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual string GetUrl(string path);
    public sealed virtual DateTimeOffset GetLastModified(string path);
    public sealed virtual DateTimeOffset GetCreated(string path);
    public sealed virtual long GetSize(string path);
    public sealed virtual bool get_CanAddPhysical();
    public sealed virtual void AddFile(string path, string physicalPath, bool overrideIfExists, bool copy);
    protected virtual void EnsureDirectory(string path);
    protected string EnsureTrailingSeparator(string path);
    protected string EnsureDirectorySeparatorChar(string path);
    protected string EnsureUrlSeparatorChar(string path);
    protected void WithRetry(Action action);
}
internal class Umbraco.Core.IO.ShadowFileSystem : object {
    private IFileSystem _fs;
    private IFileSystem _sfs;
    private Dictionary`2<string, ShadowNode> _nodes;
    public IFileSystem Inner { get; }
    private Dictionary`2<string, ShadowNode> Nodes { get; }
    public bool CanAddPhysical { get; }
    public ShadowFileSystem(IFileSystem fs, IFileSystem sfs);
    public IFileSystem get_Inner();
    public void Complete();
    private Dictionary`2<string, ShadowNode> get_Nodes();
    private static string NormPath(string path);
    private static bool IsChild(string path, string input);
    private static bool IsDescendant(string path, string input);
    public sealed virtual IEnumerable`1<string> GetDirectories(string path);
    public sealed virtual void DeleteDirectory(string path);
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    private void Delete(string path, bool recurse);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void AddFile(string path, Stream stream);
    public sealed virtual void AddFile(string path, Stream stream, bool overrideIfExists);
    public sealed virtual IEnumerable`1<string> GetFiles(string path);
    public sealed virtual IEnumerable`1<string> GetFiles(string path, string filter);
    public sealed virtual Stream OpenFile(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual bool FileExists(string path);
    public sealed virtual string GetRelativePath(string fullPathOrUrl);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual string GetUrl(string path);
    public sealed virtual DateTimeOffset GetLastModified(string path);
    public sealed virtual DateTimeOffset GetCreated(string path);
    public sealed virtual long GetSize(string path);
    public sealed virtual bool get_CanAddPhysical();
    public sealed virtual void AddFile(string path, string physicalPath, bool overrideIfExists, bool copy);
}
internal class Umbraco.Core.IO.ShadowFileSystems : object {
    private FileSystems _fileSystems;
    private bool _completed;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; }
    public ShadowFileSystems(FileSystems fileSystems, string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    public sealed virtual void Complete();
    public sealed virtual void Dispose();
}
internal class Umbraco.Core.IO.ShadowWrapper : object {
    private static string ShadowFsPath;
    private Func`1<bool> _isScoped;
    private IFileSystem _innerFileSystem;
    private string _shadowPath;
    private ShadowFileSystem _shadowFileSystem;
    private string _shadowDir;
    public IFileSystem InnerFileSystem { get; }
    private IFileSystem FileSystem { get; }
    public bool CanAddPhysical { get; }
    public ShadowWrapper(IFileSystem innerFileSystem, string shadowPath, Func`1<bool> isScoped);
    private static ShadowWrapper();
    public static string CreateShadowId();
    internal void Shadow(string id);
    internal void UnShadow(bool complete);
    public IFileSystem get_InnerFileSystem();
    private IFileSystem get_FileSystem();
    public sealed virtual IEnumerable`1<string> GetDirectories(string path);
    public sealed virtual void DeleteDirectory(string path);
    public sealed virtual void DeleteDirectory(string path, bool recursive);
    public sealed virtual bool DirectoryExists(string path);
    public sealed virtual void AddFile(string path, Stream stream);
    public sealed virtual void AddFile(string path, Stream stream, bool overrideExisting);
    public sealed virtual IEnumerable`1<string> GetFiles(string path);
    public sealed virtual IEnumerable`1<string> GetFiles(string path, string filter);
    public sealed virtual Stream OpenFile(string path);
    public sealed virtual void DeleteFile(string path);
    public sealed virtual bool FileExists(string path);
    public sealed virtual string GetRelativePath(string fullPathOrUrl);
    public sealed virtual string GetFullPath(string path);
    public sealed virtual string GetUrl(string path);
    public sealed virtual DateTimeOffset GetLastModified(string path);
    public sealed virtual DateTimeOffset GetCreated(string path);
    public sealed virtual long GetSize(string path);
    public sealed virtual bool get_CanAddPhysical();
    public sealed virtual void AddFile(string path, string physicalPath, bool overrideIfExists, bool copy);
}
public class Umbraco.Core.IO.SupportingFileSystems : TargetedServiceFactory`1<IFileSystem> {
    public SupportingFileSystems(IFactory factory);
}
public class Umbraco.Core.IO.SystemDirectories : object {
    private static string _root;
    public static string Bin { get; }
    public static string Config { get; }
    public static string Data { get; }
    public static string LogFiles { get; }
    public static string TempData { get; }
    public static string TempFileUploads { get; }
    public static string TempImageUploads { get; }
    public static string Install { get; }
    public static string AppCode { get; }
    public static string AppPlugins { get; }
    public static string AppPluginIcons { get; }
    public static string MvcViews { get; }
    public static string PartialViews { get; }
    public static string MacroPartials { get; }
    public static string Media { get; }
    public static string Scripts { get; }
    public static string Css { get; }
    public static string Umbraco { get; }
    public static string Packages { get; }
    public static string Preview { get; }
    public static string Root { get; internal set; }
    public static string get_Bin();
    public static string get_Config();
    public static string get_Data();
    public static string get_LogFiles();
    public static string get_TempData();
    public static string get_TempFileUploads();
    public static string get_TempImageUploads();
    public static string get_Install();
    public static string get_AppCode();
    public static string get_AppPlugins();
    public static string get_AppPluginIcons();
    public static string get_MvcViews();
    public static string get_PartialViews();
    public static string get_MacroPartials();
    public static string get_Media();
    public static string get_Scripts();
    public static string get_Css();
    public static string get_Umbraco();
    public static string get_Packages();
    public static string get_Preview();
    public static string get_Root();
    internal static void set_Root(string value);
}
public class Umbraco.Core.IO.SystemFiles : object {
    public static string TinyMceConfig { get; }
    public static string UmbracoSettings { get; }
    public static string get_TinyMceConfig();
    public static string get_UmbracoSettings();
    public static string GetContentCacheXml(IGlobalSettings globalSettings);
}
public class Umbraco.Core.IO.ViewHelper : object {
    private IFileSystem _viewFileSystem;
    public ViewHelper(IFileSystem viewFileSystem);
    internal bool ViewExists(ITemplate t);
    internal string GetFileContents(ITemplate t);
    public string CreateView(ITemplate t, bool overWrite);
    public static string GetDefaultFileContent(string layoutPageAlias, string modelClassName, string modelNamespace, string modelNamespaceAlias);
    private string SaveTemplateToFile(ITemplate template);
    public string UpdateViewFile(ITemplate t, string currentAlias);
    public string ViewPath(string alias);
    private static string EnsureInheritedLayout(ITemplate template);
}
public interface Umbraco.Core.IRuntime {
    public IRuntimeState State { get; }
    public abstract virtual IFactory Boot(IRegister register);
    public abstract virtual IRuntimeState get_State();
    public abstract virtual void Terminate();
}
public interface Umbraco.Core.IRuntimeState {
    public Version Version { get; }
    public string VersionComment { get; }
    public SemVersion SemanticVersion { get; }
    public bool Debug { get; }
    public bool IsMainDom { get; }
    public ServerRole ServerRole { get; }
    public Uri ApplicationUrl { get; }
    public string ApplicationVirtualPath { get; }
    public RuntimeLevel Level { get; }
    public RuntimeLevelReason Reason { get; }
    public string CurrentMigrationState { get; }
    public string FinalMigrationState { get; }
    public BootFailedException BootFailedException { get; }
    public abstract virtual Version get_Version();
    public abstract virtual string get_VersionComment();
    public abstract virtual SemVersion get_SemanticVersion();
    public abstract virtual bool get_Debug();
    public abstract virtual bool get_IsMainDom();
    public abstract virtual ServerRole get_ServerRole();
    public abstract virtual Uri get_ApplicationUrl();
    public abstract virtual string get_ApplicationVirtualPath();
    public abstract virtual RuntimeLevel get_Level();
    public abstract virtual RuntimeLevelReason get_Reason();
    public abstract virtual string get_CurrentMigrationState();
    public abstract virtual string get_FinalMigrationState();
    public abstract virtual BootFailedException get_BootFailedException();
}
[ExtensionAttribute]
public static class Umbraco.Core.KeyValuePairExtensions : object {
    [ExtensionAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> kvp, TKey& key, TValue& value);
}
internal class Umbraco.Core.LambdaExpressionCacheKey : ValueType {
    public HashSet`1<string> ArgTypes;
    public string ReturnType;
    public string ExpressionAsString;
    private string _toString;
    public LambdaExpressionCacheKey(string returnType, string expression, String[] argTypes);
    public LambdaExpressionCacheKey(LambdaExpression obj);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Umbraco.Core.ListExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Zip(IEnumerable`1<T1> e1, IEnumerable`1<T2> e2, IEnumerable`1<T3> e3, Func`4<T1, T2, T3, TResult> resultSelector);
    [IteratorStateMachineAttribute("Umbraco.Core.ListExtensions/<ZipIterator>d__1`4")]
private static IEnumerable`1<TResult> ZipIterator(IEnumerable`1<T1> ie1, IEnumerable`1<T2> ie2, IEnumerable`1<T3> ie3, Func`4<T1, T2, T3, TResult> resultSelector);
}
public class Umbraco.Core.Logging.DebugDiagnosticsLogger : object {
    public sealed virtual bool IsEnabled(Type reporting, LogLevel level);
    public sealed virtual void Fatal(Type reporting, Exception exception, string message);
    public sealed virtual void Fatal(Type reporting, Exception exception);
    public sealed virtual void Fatal(Type reporting, string message);
    public sealed virtual void Fatal(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Fatal(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(Type reporting, Exception exception, string message);
    public sealed virtual void Error(Type reporting, Exception exception);
    public sealed virtual void Error(Type reporting, string message);
    public sealed virtual void Error(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Warn(Type reporting, string message);
    public sealed virtual void Warn(Type reporting, string message, Object[] propertyValues);
    public sealed virtual void Warn(Type reporting, Exception exception, string message);
    public sealed virtual void Warn(Type reporting, Exception exception, string message, Object[] propertyValues);
    public sealed virtual void Info(Type reporting, string message);
    public sealed virtual void Info(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Debug(Type reporting, string message);
    public sealed virtual void Debug(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Verbose(Type reporting, string message);
    public sealed virtual void Verbose(Type reporting, string messageTemplate, Object[] propertyValues);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Warn(Type reporting, string message, T0 propertyValue0);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0);
}
public class Umbraco.Core.Logging.DisposableTimer : DisposableObjectSlim {
    private ILogger _logger;
    private LogLevel _level;
    private Type _loggerType;
    private int _thresholdMilliseconds;
    private IDisposable _profilerStep;
    private string _endMessage;
    private string _failMessage;
    private Exception _failException;
    private bool _failed;
    private string _timingId;
    [CompilerGeneratedAttribute]
private Stopwatch <Stopwatch>k__BackingField;
    public Stopwatch Stopwatch { get; }
    internal DisposableTimer(ILogger logger, LogLevel level, IProfiler profiler, Type loggerType, string startMessage, string endMessage, string failMessage, int thresholdMilliseconds);
    public void Fail(string failMessage, Exception exception);
    [CompilerGeneratedAttribute]
public Stopwatch get_Stopwatch();
    protected virtual void DisposeResources();
}
public interface Umbraco.Core.Logging.ILogger {
    public abstract virtual bool IsEnabled(Type reporting, LogLevel level);
    public abstract virtual void Fatal(Type reporting, Exception exception, string message);
    public abstract virtual void Fatal(Type reporting, Exception exception);
    public abstract virtual void Fatal(Type reporting, string message);
    public abstract virtual void Fatal(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Fatal(Type reporting, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Error(Type reporting, Exception exception, string message);
    public abstract virtual void Error(Type reporting, Exception exception);
    public abstract virtual void Error(Type reporting, string message);
    public abstract virtual void Error(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Error(Type reporting, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Warn(Type reporting, string message);
    public abstract virtual void Warn(Type reporting, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Warn(Type reporting, Exception exception, string message);
    public abstract virtual void Warn(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Info(Type reporting, string message);
    public abstract virtual void Info(Type reporting, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Debug(Type reporting, string message);
    public abstract virtual void Debug(Type reporting, string messageTemplate, Object[] propertyValues);
    public abstract virtual void Verbose(Type reporting, string message);
    public abstract virtual void Verbose(Type reporting, string messageTemplate, Object[] propertyValues);
}
public interface Umbraco.Core.Logging.ILogger2 {
    public abstract virtual void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public abstract virtual void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public abstract virtual void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public abstract virtual void Warn(Type reporting, string message, T0 propertyValue0);
    public abstract virtual void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Info(Type reporting, string messageTemplate, T0 propertyValue0);
    public abstract virtual void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Debug(Type reporting, string messageTemplate, T0 propertyValue0);
    public abstract virtual void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Verbose(Type reporting, string messageTemplate, T0 propertyValue0);
    public abstract virtual void Error(Type reporting, string messageTemplate, T0 propertyValue0);
    public abstract virtual void Error(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Error(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Warn(string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public abstract virtual void Warn(string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Warn(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public abstract virtual void Warn(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
}
public interface Umbraco.Core.Logging.IProfiler {
    public abstract virtual string Render();
    public abstract virtual IDisposable Step(string name);
    public abstract virtual void Start();
    public abstract virtual void Stop(bool discardResults);
}
public interface Umbraco.Core.Logging.IProfilingLogger {
    public abstract virtual DisposableTimer TraceDuration(string startMessage);
    public abstract virtual DisposableTimer TraceDuration(string startMessage, string completeMessage, string failMessage);
    public abstract virtual DisposableTimer TraceDuration(Type loggerType, string startMessage, string completeMessage, string failMessage);
    public abstract virtual DisposableTimer DebugDuration(string startMessage);
    public abstract virtual DisposableTimer DebugDuration(string startMessage, string completeMessage, string failMessage, int thresholdMilliseconds);
    public abstract virtual DisposableTimer DebugDuration(Type loggerType, string startMessage, string completeMessage, string failMessage, int thresholdMilliseconds);
}
[ExtensionAttribute]
public static class Umbraco.Core.Logging.Logger2Extensions : object {
    [ExtensionAttribute]
public static void Debug(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Debug(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Debug(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Error(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Error(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Error(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Fatal(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Fatal(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Fatal(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Info(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Info(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Info(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Verbose(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Verbose(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Verbose(ILogger logger, Type reporting, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Type reporting, string message, T0 propertyValue0);
    [ExtensionAttribute]
public static void Error(ILogger logger, Exception exception, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Error(ILogger logger, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Error(ILogger logger, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Error(ILogger logger, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Error(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Error(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Exception exception, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Warn(ILogger logger, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Warn(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Warn(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Info(ILogger logger, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Info(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Info(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    [ExtensionAttribute]
public static void Debug(ILogger logger, string messageTemplate, T0 propertyValue0);
    [ExtensionAttribute]
public static void Debug(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    [ExtensionAttribute]
public static void Debug(ILogger logger, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
}
[ExtensionAttribute]
public static class Umbraco.Core.Logging.LoggerExtensions : object {
    [ExtensionAttribute]
public static bool IsEnabled(ILogger logger, LogLevel level);
    [ExtensionAttribute]
public static void Error(ILogger logger, Exception exception, string message);
    [ExtensionAttribute]
public static void Error(ILogger logger, Exception exception, string messageTemplate, Object[] propertyValues);
    [ExtensionAttribute]
public static void Error(ILogger logger, Exception exception);
    [ExtensionAttribute]
public static void Error(ILogger logger, string message);
    [ExtensionAttribute]
public static void Error(ILogger logger, string messageTemplate, Object[] propertyValues);
    [ExtensionAttribute]
public static void Warn(ILogger logger, string message);
    [ExtensionAttribute]
public static void Warn(ILogger logger, string messageTemplate, Object[] propertyValues);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Exception exception, string message);
    [ExtensionAttribute]
public static void Warn(ILogger logger, Exception exception, string messageTemplate, Object[] propertyValues);
    [ExtensionAttribute]
public static void Info(ILogger logger, string message);
    [ExtensionAttribute]
public static void Info(ILogger logger, string messageTemplate, Object[] propertyValues);
    [ExtensionAttribute]
public static void Debug(ILogger logger, string message);
    [ExtensionAttribute]
public static void Debug(ILogger logger, string messageTemplate, Object[] propertyValues);
    [ExtensionAttribute]
public static void Verbose(ILogger logger, string message);
    [ExtensionAttribute]
public static void Verbose(ILogger logger, string messageTemplate, Object[] propertyValues);
    [ExtensionAttribute]
public static void Fatal(ILogger logger, Exception exception, string message);
    [ExtensionAttribute]
public static void Fatal(ILogger logger, Exception exception, string messageTemplate, Object[] propertyValues);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Logging.LoggingTaskExtension : object {
    [ExtensionAttribute]
public static Task LogErrors(Task task, Action`2<string, Exception> logMethod);
    [ExtensionAttribute]
public static Task LogErrorsWaitable(Task task, Action`2<string, Exception> logMethod);
    private static void LogErrorsInner(Task task, Action`2<string, Exception> logAction);
}
public static class Umbraco.Core.Logging.LogHttpRequest : object {
    private static string RequestIdItemName;
    private static LogHttpRequest();
    public static bool TryGetCurrentHttpRequestId(Guid& requestId);
}
public enum Umbraco.Core.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Verbose;
    public static LogLevel Debug;
    public static LogLevel Information;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Fatal;
}
internal class Umbraco.Core.Logging.LogProfiler : object {
    private ILogger _logger;
    public LogProfiler(ILogger logger);
    public sealed virtual string Render();
    public sealed virtual IDisposable Step(string name);
    public sealed virtual void Start();
    public sealed virtual void Stop(bool discardResults);
}
public static class Umbraco.Core.Logging.MessageTemplates : object {
    private static Lazy`1<ILogger> MinimalLogger;
    private static MessageTemplates();
    public static string Render(string messageTemplate, Object[] args);
}
internal class Umbraco.Core.Logging.OwinLogger : object {
    private ILogger _logger;
    private Lazy`1<Type> _type;
    public OwinLogger(ILogger logger, Lazy`1<Type> type);
    public sealed virtual bool WriteCore(TraceEventType eventType, int eventId, object state, Exception exception, Func`3<object, Exception, string> formatter);
}
internal class Umbraco.Core.Logging.OwinLoggerFactory : object {
    public sealed virtual ILogger Create(string name);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Logging.ProfilerExtensions : object {
    [ExtensionAttribute]
internal static IDisposable Step(IProfiler profiler, string name);
    [ExtensionAttribute]
internal static IDisposable Step(IProfiler profiler, Type reporting, string name);
}
public class Umbraco.Core.Logging.ProfilingLogger : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IProfiler <Profiler>k__BackingField;
    public ILogger Logger { get; }
    public IProfiler Profiler { get; }
    public ProfilingLogger(ILogger logger, IProfiler profiler);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public IProfiler get_Profiler();
    public sealed virtual DisposableTimer TraceDuration(string startMessage);
    public sealed virtual DisposableTimer TraceDuration(string startMessage, string completeMessage, string failMessage);
    public sealed virtual DisposableTimer TraceDuration(Type loggerType, string startMessage, string completeMessage, string failMessage);
    public sealed virtual DisposableTimer DebugDuration(string startMessage);
    public sealed virtual DisposableTimer DebugDuration(string startMessage, string completeMessage, string failMessage, int thresholdMilliseconds);
    public sealed virtual DisposableTimer DebugDuration(Type loggerType, string startMessage, string completeMessage, string failMessage, int thresholdMilliseconds);
    public sealed virtual bool IsEnabled(Type reporting, LogLevel level);
    public sealed virtual void Fatal(Type reporting, Exception exception, string message);
    public sealed virtual void Fatal(Type reporting, Exception exception);
    public sealed virtual void Fatal(Type reporting, string message);
    public sealed virtual void Fatal(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Fatal(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(Type reporting, Exception exception, string message);
    public sealed virtual void Error(Type reporting, Exception exception);
    public sealed virtual void Error(Type reporting, string message);
    public sealed virtual void Error(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Warn(Type reporting, string message);
    public sealed virtual void Warn(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Warn(Type reporting, Exception exception, string message);
    public sealed virtual void Warn(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Info(Type reporting, string message);
    public sealed virtual void Info(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Debug(Type reporting, string message);
    public sealed virtual void Debug(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Verbose(Type reporting, string message);
    public sealed virtual void Verbose(Type reporting, string messageTemplate, Object[] propertyValues);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Warn(Type reporting, string message, T0 propertyValue0);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0);
}
internal class Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestIdEnricher : object {
    public static string HttpRequestIdPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Umbraco.Core.Logging.Serilog.Enrichers.HttpRequestNumberEnricher : object {
    public static string HttpRequestNumberPropertyName;
    private static int _lastRequestNumber;
    private static string RequestNumberItemName;
    private static HttpRequestNumberEnricher();
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Umbraco.Core.Logging.Serilog.Enrichers.HttpSessionIdEnricher : object {
    public static string HttpSessionIdPropertyName;
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
internal class Umbraco.Core.Logging.Serilog.Enrichers.Log4NetLevelMapperEnricher : object {
    public sealed virtual void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory);
}
[ExtensionAttribute]
public static class Umbraco.Core.Logging.Serilog.LoggerConfigExtensions : object {
    private static string AppDomainId;
    [ExtensionAttribute]
public static LoggerConfiguration MinimalConfiguration(LoggerConfiguration logConfig);
    [ExtensionAttribute]
public static LoggerConfiguration OutputDefaultTextFile(LoggerConfiguration logConfig, LogEventLevel minimumLevel, Nullable`1<int> retainedFileCount);
    [ExtensionAttribute]
public static LoggerConfiguration File(LoggerSinkConfiguration configuration, ITextFormatter formatter, string path, LogEventLevel restrictedToMinimumLevel, LoggingLevelSwitch levelSwitch, Nullable`1<long> fileSizeLimitBytes, Nullable`1<TimeSpan> flushToDiskInterval, RollingInterval rollingInterval, bool rollOnFileSizeLimit, Nullable`1<int> retainedFileCountLimit, Encoding encoding);
    [ExtensionAttribute]
public static LoggerConfiguration OutputDefaultJsonFile(LoggerConfiguration logConfig, LogEventLevel minimumLevel, Nullable`1<int> retainedFileCount);
    [ExtensionAttribute]
public static LoggerConfiguration ReadFromConfigFile(LoggerConfiguration logConfig);
    [ExtensionAttribute]
public static LoggerConfiguration ReadFromUserConfigFile(LoggerConfiguration logConfig);
}
public class Umbraco.Core.Logging.Serilog.SerilogLogger : object {
    public SerilogLogger(FileInfo logConfigFile);
    public SerilogLogger(LoggerConfiguration logConfig);
    public static SerilogLogger CreateWithDefaultConfiguration();
    private ILogger LoggerFor(Type reporting);
    private LogEventLevel MapLevel(LogLevel level);
    public sealed virtual bool IsEnabled(Type reporting, LogLevel level);
    public sealed virtual void Fatal(Type reporting, Exception exception, string message);
    public sealed virtual void Fatal(Type reporting, Exception exception);
    public sealed virtual void Fatal(Type reporting, string message);
    public sealed virtual void Fatal(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Fatal(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Fatal(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Error(Type reporting, Exception exception, string message);
    public sealed virtual void Error(Type reporting, Exception exception);
    public sealed virtual void Error(Type reporting, string message);
    public sealed virtual void Error(Type reporting, string messageTemplate, Object[] propertyValues);
    public sealed virtual void Error(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Error(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    private static void DumpThreadAborts(ILogger logger, LogEventLevel level, Exception exception, String& messageTemplate);
    private static bool IsMonitorEnterThreadAbortException(Exception exception);
    private static bool IsTimeoutThreadAbortException(Exception exception);
    public sealed virtual void Warn(Type reporting, string message);
    public sealed virtual void Warn(Type reporting, string message, Object[] propertyValues);
    public void Warn(Type reporting, string message, T0 propertyValue0);
    public sealed virtual void Warn(Type reporting, Exception exception, string message);
    public sealed virtual void Warn(Type reporting, Exception exception, string messageTemplate, Object[] propertyValues);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Warn(Type reporting, Exception exception, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Info(Type reporting, string message);
    public sealed virtual void Info(Type reporting, string messageTemplate, Object[] propertyValues);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Info(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Debug(Type reporting, string message);
    public sealed virtual void Debug(Type reporting, string messageTemplate, Object[] propertyValues);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Debug(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Verbose(Type reporting, string message);
    public sealed virtual void Verbose(Type reporting, string messageTemplate, Object[] propertyValues);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1);
    public void Verbose(Type reporting, string messageTemplate, T0 propertyValue0, T1 propertyValue1, T2 propertyValue2);
    public sealed virtual void Dispose();
}
internal class Umbraco.Core.Logging.Viewer.CountingFilter : object {
    [CompilerGeneratedAttribute]
private LogLevelCounts <Counts>k__BackingField;
    public LogLevelCounts Counts { get; }
    [CompilerGeneratedAttribute]
public LogLevelCounts get_Counts();
    public sealed virtual bool TakeLogEvent(LogEvent e);
}
internal class Umbraco.Core.Logging.Viewer.ErrorCounterFilter : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public sealed virtual bool TakeLogEvent(LogEvent e);
}
internal class Umbraco.Core.Logging.Viewer.ExpressionFilter : object {
    private Func`2<LogEvent, bool> _filter;
    private static string ExpressionOperators;
    public ExpressionFilter(string filterExpression);
    public sealed virtual bool TakeLogEvent(LogEvent e);
    private Func`2<LogEvent, bool> PerformMessageLikeFilter(string filterExpression);
}
public interface Umbraco.Core.Logging.Viewer.ILogFilter {
    public abstract virtual bool TakeLogEvent(LogEvent e);
}
public interface Umbraco.Core.Logging.Viewer.ILogViewer {
    public bool CanHandleLargeLogs { get; }
    public abstract virtual IReadOnlyList`1<SavedLogSearch> GetSavedSearches();
    public abstract virtual IReadOnlyList`1<SavedLogSearch> AddSavedSearch(string name, string query);
    public abstract virtual IReadOnlyList`1<SavedLogSearch> DeleteSavedSearch(string name, string query);
    public abstract virtual int GetNumberOfErrors(LogTimePeriod logTimePeriod);
    public abstract virtual LogLevelCounts GetLogLevelCounts(LogTimePeriod logTimePeriod);
    public abstract virtual IEnumerable`1<LogTemplate> GetMessageTemplates(LogTimePeriod logTimePeriod);
    public abstract virtual bool get_CanHandleLargeLogs();
    public abstract virtual bool CheckCanOpenLogs(LogTimePeriod logTimePeriod);
    public abstract virtual string GetLogLevel();
    public abstract virtual PagedResult`1<LogMessage> GetLogs(LogTimePeriod logTimePeriod, int pageNumber, int pageSize, Direction orderDirection, string filterExpression, String[] logLevels);
}
internal class Umbraco.Core.Logging.Viewer.JsonLogViewer : LogViewerSourceBase {
    private string _logsPath;
    private ILogger _logger;
    private static int FileSizeCap;
    public bool CanHandleLargeLogs { get; }
    public JsonLogViewer(ILogger logger, string logsPath, string searchPath);
    public virtual bool get_CanHandleLargeLogs();
    public virtual bool CheckCanOpenLogs(LogTimePeriod logTimePeriod);
    private string GetSearchPattern(DateTime day);
    protected virtual IReadOnlyList`1<LogEvent> GetLogs(LogTimePeriod logTimePeriod, ILogFilter filter, int skip, int take);
    private bool TryRead(LogEventReader reader, LogEvent& evt);
}
public class Umbraco.Core.Logging.Viewer.LogLevelCounts : object {
    [CompilerGeneratedAttribute]
private int <Information>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Fatal>k__BackingField;
    public int Information { get; public set; }
    public int Debug { get; public set; }
    public int Warning { get; public set; }
    public int Error { get; public set; }
    public int Fatal { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Information();
    [CompilerGeneratedAttribute]
public void set_Information(int value);
    [CompilerGeneratedAttribute]
public int get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(int value);
    [CompilerGeneratedAttribute]
public int get_Warning();
    [CompilerGeneratedAttribute]
public void set_Warning(int value);
    [CompilerGeneratedAttribute]
public int get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(int value);
    [CompilerGeneratedAttribute]
public int get_Fatal();
    [CompilerGeneratedAttribute]
public void set_Fatal(int value);
}
public class Umbraco.Core.Logging.Viewer.LogMessage : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private LogEventLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageTemplateText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RenderedMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, LogEventPropertyValue> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Exception>k__BackingField;
    public DateTimeOffset Timestamp { get; public set; }
    [JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public LogEventLevel Level { get; public set; }
    public string MessageTemplateText { get; public set; }
    public string RenderedMessage { get; public set; }
    public IReadOnlyDictionary`2<string, LogEventPropertyValue> Properties { get; public set; }
    public string Exception { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public LogEventLevel get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(LogEventLevel value);
    [CompilerGeneratedAttribute]
public string get_MessageTemplateText();
    [CompilerGeneratedAttribute]
public void set_MessageTemplateText(string value);
    [CompilerGeneratedAttribute]
public string get_RenderedMessage();
    [CompilerGeneratedAttribute]
public void set_RenderedMessage(string value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, LogEventPropertyValue> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IReadOnlyDictionary`2<string, LogEventPropertyValue> value);
    [CompilerGeneratedAttribute]
public string get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(string value);
}
public class Umbraco.Core.Logging.Viewer.LogTemplate : object {
    [CompilerGeneratedAttribute]
private string <MessageTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public string MessageTemplate { get; public set; }
    public int Count { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MessageTemplate();
    [CompilerGeneratedAttribute]
public void set_MessageTemplate(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
}
public class Umbraco.Core.Logging.Viewer.LogTimePeriod : object {
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public LogTimePeriod(DateTime startTime, DateTime endTime);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
    [CompilerGeneratedAttribute]
public DateTime get_EndTime();
}
[RuntimeLevelAttribute]
public class Umbraco.Core.Logging.Viewer.LogViewerComposer : object {
    public sealed virtual void Compose(Composition composition);
}
public abstract class Umbraco.Core.Logging.Viewer.LogViewerSourceBase : object {
    private string _searchesConfigPath;
    public bool CanHandleLargeLogs { get; }
    protected LogViewerSourceBase(string pathToSearches);
    public abstract virtual bool get_CanHandleLargeLogs();
    protected abstract virtual IReadOnlyList`1<LogEvent> GetLogs(LogTimePeriod logTimePeriod, ILogFilter filter, int skip, int take);
    public abstract virtual bool CheckCanOpenLogs(LogTimePeriod logTimePeriod);
    public virtual IReadOnlyList`1<SavedLogSearch> GetSavedSearches();
    public virtual IReadOnlyList`1<SavedLogSearch> AddSavedSearch(string name, string query);
    public virtual IReadOnlyList`1<SavedLogSearch> DeleteSavedSearch(string name, string query);
    public sealed virtual int GetNumberOfErrors(LogTimePeriod logTimePeriod);
    public sealed virtual string GetLogLevel();
    public sealed virtual LogLevelCounts GetLogLevelCounts(LogTimePeriod logTimePeriod);
    public sealed virtual IEnumerable`1<LogTemplate> GetMessageTemplates(LogTimePeriod logTimePeriod);
    public sealed virtual PagedResult`1<LogMessage> GetLogs(LogTimePeriod logTimePeriod, int pageNumber, int pageSize, Direction orderDirection, string filterExpression, String[] logLevels);
    private static void EnsureFileExists(string path, string contents);
}
internal class Umbraco.Core.Logging.Viewer.MessageTemplateFilter : object {
    public Dictionary`2<string, int> Counts;
    public sealed virtual bool TakeLogEvent(LogEvent e);
}
public class Umbraco.Core.Logging.Viewer.SavedLogSearch : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [JsonPropertyAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("query")]
public string Query { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
}
internal class Umbraco.Core.Logging.VoidProfiler : object {
    private VoidDisposable _disposable;
    public sealed virtual string Render();
    public sealed virtual IDisposable Step(string name);
    public sealed virtual void Start();
    public sealed virtual void Stop(bool discardResults);
}
public enum Umbraco.Core.Macros.MacroErrorBehaviour : Enum {
    public int value__;
    public static MacroErrorBehaviour Inline;
    public static MacroErrorBehaviour Silent;
    public static MacroErrorBehaviour Throw;
    public static MacroErrorBehaviour Content;
}
internal class Umbraco.Core.Manifest.DashboardAccessRuleConverter : JsonReadConverter`1<IAccessRule> {
    protected virtual IAccessRule Create(Type objectType, string path, JObject jObject);
    protected virtual void Deserialize(JObject jobject, IAccessRule target, JsonSerializer serializer);
    private void GetRule(AccessRule rule, JObject jobject, string name, AccessRuleType type);
}
internal class Umbraco.Core.Manifest.DataEditorConverter : JsonReadConverter`1<IDataEditor> {
    private ILogger _logger;
    public DataEditorConverter(ILogger logger);
    protected virtual IDataEditor Create(Type objectType, string path, JObject jobject);
    protected virtual void Deserialize(JObject jobject, IDataEditor target, JsonSerializer serializer);
    private static void PrepareForPropertyEditor(JObject jobject, DataEditor target);
    private static void PrepareForParameterEditor(JObject jobject, DataEditor target);
    private static JArray RewriteValidators(JObject validation);
}
public interface Umbraco.Core.Manifest.IManifestFilter {
    public abstract virtual void Filter(List`1<PackageManifest> manifests);
}
[DataContractAttribute]
public class Umbraco.Core.Manifest.ManifestContentAppDefinition : object {
    private string _view;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Show>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public int Weight { get; public set; }
    [DataMemberAttribute]
public string Icon { get; public set; }
    [DataMemberAttribute]
public string View { get; public set; }
    [DataMemberAttribute]
public String[] Show { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    public string get_View();
    public void set_View(string value);
    [CompilerGeneratedAttribute]
public String[] get_Show();
    [CompilerGeneratedAttribute]
public void set_Show(String[] value);
}
public class Umbraco.Core.Manifest.ManifestContentAppFactory : object {
    private ManifestContentAppDefinition _definition;
    private ContentApp _app;
    private ShowRule[] _showRules;
    public ManifestContentAppFactory(ManifestContentAppDefinition definition);
    public sealed virtual ContentApp GetContentAppFor(object o, IEnumerable`1<IReadOnlyUserGroup> userGroups);
}
public class Umbraco.Core.Manifest.ManifestDashboard : object {
    private string _view;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private IAccessRule[] <AccessRules>k__BackingField;
    [JsonPropertyAttribute]
public string Alias { get; public set; }
    [JsonPropertyAttribute]
[DefaultValueAttribute("100")]
public int Weight { get; public set; }
    [JsonPropertyAttribute]
public string View { get; public set; }
    [JsonPropertyAttribute("sections")]
public String[] Sections { get; public set; }
    [JsonPropertyAttribute("access")]
public IAccessRule[] AccessRules { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
    public sealed virtual string get_View();
    public void set_View(string value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Sections();
    [CompilerGeneratedAttribute]
public void set_Sections(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual IAccessRule[] get_AccessRules();
    [CompilerGeneratedAttribute]
public void set_AccessRules(IAccessRule[] value);
}
public class Umbraco.Core.Manifest.ManifestFilterCollection : BuilderCollectionBase`1<IManifestFilter> {
    public ManifestFilterCollection(IEnumerable`1<IManifestFilter> items);
    public void Filter(List`1<PackageManifest> manifests);
}
public class Umbraco.Core.Manifest.ManifestFilterCollectionBuilder : OrderedCollectionBuilderBase`3<ManifestFilterCollectionBuilder, ManifestFilterCollection, IManifestFilter> {
    protected ManifestFilterCollectionBuilder This { get; }
    protected Lifetime CollectionLifetime { get; }
    protected virtual ManifestFilterCollectionBuilder get_This();
    protected virtual Lifetime get_CollectionLifetime();
}
public class Umbraco.Core.Manifest.ManifestParser : object {
    private static string Utf8Preamble;
    private IAppPolicyCache _cache;
    private ILogger _logger;
    private ManifestValueValidatorCollection _validators;
    private ManifestFilterCollection _filters;
    private string _path;
    public string Path { get; public set; }
    public PackageManifest Manifest { get; }
    public ManifestParser(AppCaches appCaches, ManifestValueValidatorCollection validators, ManifestFilterCollection filters, ILogger logger);
    private ManifestParser(AppCaches appCaches, ManifestValueValidatorCollection validators, ManifestFilterCollection filters, string path, ILogger logger);
    private static ManifestParser();
    public string get_Path();
    public void set_Path(string value);
    public PackageManifest get_Manifest();
    internal IEnumerable`1<PackageManifest> GetManifests();
    private static PackageManifest MergeManifests(IEnumerable`1<PackageManifest> manifests);
    private IEnumerable`1<string> GetManifestFiles();
    private static string TrimPreamble(string text);
    internal PackageManifest ParseManifest(string text);
    internal IEnumerable`1<GridEditor> ParseGridEditors(string text);
    [CompilerGeneratedAttribute]
private PackageManifest <get_Manifest>b__12_0();
}
[DataContractAttribute]
public class Umbraco.Core.Manifest.ManifestSection : object {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Umbraco.Core.Manifest.ManifestWatcher : DisposableObjectSlim {
    private static object Locker;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isRestarting;
    private ILogger _logger;
    private List`1<FileSystemWatcher> _fws;
    public ManifestWatcher(ILogger logger);
    private static ManifestWatcher();
    public void Start(String[] packageFolders);
    private static bool IsWatchable(string folder);
    private void FswChanged(object sender, FileSystemEventArgs e);
    protected virtual void DisposeResources();
}
public class Umbraco.Core.Manifest.PackageManifest : object {
    private string _packageName;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Scripts>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Stylesheets>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataEditor[] <PropertyEditors>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataEditor[] <ParameterEditors>k__BackingField;
    [CompilerGeneratedAttribute]
private GridEditor[] <GridEditors>k__BackingField;
    [CompilerGeneratedAttribute]
private ManifestContentAppDefinition[] <ContentApps>k__BackingField;
    [CompilerGeneratedAttribute]
private ManifestDashboard[] <Dashboards>k__BackingField;
    [CompilerGeneratedAttribute]
private ManifestSection[] <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPackageTelemetry>k__BackingField;
    [JsonPropertyAttribute("name")]
public string PackageName { get; public set; }
    [JsonIgnoreAttribute]
public string Source { get; public set; }
    [JsonPropertyAttribute("javascript")]
public String[] Scripts { get; public set; }
    [JsonPropertyAttribute("css")]
public String[] Stylesheets { get; public set; }
    [JsonPropertyAttribute("propertyEditors")]
public IDataEditor[] PropertyEditors { get; public set; }
    [JsonPropertyAttribute("parameterEditors")]
public IDataEditor[] ParameterEditors { get; public set; }
    [JsonPropertyAttribute("gridEditors")]
public GridEditor[] GridEditors { get; public set; }
    [JsonPropertyAttribute("contentApps")]
public ManifestContentAppDefinition[] ContentApps { get; public set; }
    [JsonPropertyAttribute("dashboards")]
public ManifestDashboard[] Dashboards { get; public set; }
    [JsonPropertyAttribute("sections")]
public ManifestSection[] Sections { get; public set; }
    [JsonPropertyAttribute("version")]
public string Version { get; public set; }
    [JsonPropertyAttribute("allowPackageTelemetry")]
public bool AllowPackageTelemetry { get; public set; }
    public string get_PackageName();
    public void set_PackageName(string value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public String[] get_Scripts();
    [CompilerGeneratedAttribute]
public void set_Scripts(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Stylesheets();
    [CompilerGeneratedAttribute]
public void set_Stylesheets(String[] value);
    [CompilerGeneratedAttribute]
public IDataEditor[] get_PropertyEditors();
    [CompilerGeneratedAttribute]
public void set_PropertyEditors(IDataEditor[] value);
    [CompilerGeneratedAttribute]
public IDataEditor[] get_ParameterEditors();
    [CompilerGeneratedAttribute]
public void set_ParameterEditors(IDataEditor[] value);
    [CompilerGeneratedAttribute]
public GridEditor[] get_GridEditors();
    [CompilerGeneratedAttribute]
public void set_GridEditors(GridEditor[] value);
    [CompilerGeneratedAttribute]
public ManifestContentAppDefinition[] get_ContentApps();
    [CompilerGeneratedAttribute]
public void set_ContentApps(ManifestContentAppDefinition[] value);
    [CompilerGeneratedAttribute]
public ManifestDashboard[] get_Dashboards();
    [CompilerGeneratedAttribute]
public void set_Dashboards(ManifestDashboard[] value);
    [CompilerGeneratedAttribute]
public ManifestSection[] get_Sections();
    [CompilerGeneratedAttribute]
public void set_Sections(ManifestSection[] value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowPackageTelemetry();
    [CompilerGeneratedAttribute]
public void set_AllowPackageTelemetry(bool value);
}
internal class Umbraco.Core.Manifest.ValueValidatorConverter : JsonReadConverter`1<IValueValidator> {
    private ManifestValueValidatorCollection _validators;
    public ValueValidatorConverter(ManifestValueValidatorCollection validators);
    protected virtual IValueValidator Create(Type objectType, string path, JObject jObject);
}
public interface Umbraco.Core.Mapping.IMapDefinition {
    public abstract virtual void DefineMaps(UmbracoMapper mapper);
}
public class Umbraco.Core.Mapping.MapDefinitionCollection : BuilderCollectionBase`1<IMapDefinition> {
    public MapDefinitionCollection(IEnumerable`1<IMapDefinition> items);
}
public class Umbraco.Core.Mapping.MapDefinitionCollectionBuilder : SetCollectionBuilderBase`3<MapDefinitionCollectionBuilder, MapDefinitionCollection, IMapDefinition> {
    protected MapDefinitionCollectionBuilder This { get; }
    protected Lifetime CollectionLifetime { get; }
    protected virtual MapDefinitionCollectionBuilder get_This();
    protected virtual Lifetime get_CollectionLifetime();
}
public class Umbraco.Core.Mapping.MapperContext : object {
    private UmbracoMapper _mapper;
    private IDictionary`2<string, object> _items;
    public bool HasItems { get; }
    public IDictionary`2<string, object> Items { get; }
    public MapperContext(UmbracoMapper mapper);
    public bool get_HasItems();
    public IDictionary`2<string, object> get_Items();
    public TTarget Map(object source);
    public TTarget Map(TSource source);
    public TTarget Map(TSource source, TTarget target);
    public List`1<TTargetElement> MapEnumerable(IEnumerable`1<TSourceElement> source);
}
public class Umbraco.Core.Mapping.UmbracoMapper : object {
    private ConcurrentDictionary`2<Type, Dictionary`2<Type, Func`3<object, MapperContext, object>>> _ctors;
    private ConcurrentDictionary`2<Type, Dictionary`2<Type, Action`3<object, object, MapperContext>>> _maps;
    private IScopeProvider _scopeProvider;
    public UmbracoMapper(MapDefinitionCollection profiles, IScopeProvider scopeProvider);
    [ObsoleteAttribute("This constructor is no longer used and will be removed in future versions, use the other constructor instead")]
public UmbracoMapper(MapDefinitionCollection profiles);
    private static TTarget ThrowCtor(TSource source, MapperContext context);
    private static void Identity(TSource source, TTarget target, MapperContext context);
    public void Define();
    public void Define(Action`3<TSource, TTarget, MapperContext> map);
    public void Define(Func`3<TSource, MapperContext, TTarget> ctor);
    public void Define(Func`3<TSource, MapperContext, TTarget> ctor, Action`3<TSource, TTarget, MapperContext> map);
    private Dictionary`2<Type, Func`3<object, MapperContext, object>> DefineCtors(Type sourceType);
    private Dictionary`2<Type, Action`3<object, object, MapperContext>> DefineMaps(Type sourceType);
    public TTarget Map(object source);
    public TTarget Map(object source, Action`1<MapperContext> f);
    public TTarget Map(object source, MapperContext context);
    public TTarget Map(TSource source);
    public TTarget Map(TSource source, Action`1<MapperContext> f);
    public TTarget Map(TSource source, MapperContext context);
    private TTarget Map(object source, Type sourceType, MapperContext context);
    private TTarget MapEnumerableInternal(IEnumerable source, Type targetGenericArg, Func`3<object, MapperContext, object> ctor, Action`3<object, object, MapperContext> map, MapperContext context);
    public TTarget Map(TSource source, TTarget target);
    public TTarget Map(TSource source, TTarget target, Action`1<MapperContext> f);
    public TTarget Map(TSource source, TTarget target, MapperContext context);
    private Func`3<object, MapperContext, object> GetCtor(Type sourceType, Type targetType);
    private Action`3<object, object, MapperContext> GetMap(Type sourceType, Type targetType);
    private static bool IsEnumerableOrArrayOfType(Type type);
    private static Type GetEnumerableOrArrayTypeArgument(Type type);
    public List`1<TTargetElement> MapEnumerable(IEnumerable`1<TSourceElement> source);
    public List`1<TTargetElement> MapEnumerable(IEnumerable`1<TSourceElement> source, Action`1<MapperContext> f);
    public List`1<TTargetElement> MapEnumerable(IEnumerable`1<TSourceElement> source, MapperContext context);
}
public interface Umbraco.Core.Media.IEmbedProvider {
    public string ApiEndpoint { get; }
    public String[] UrlSchemeRegex { get; }
    public Dictionary`2<string, string> RequestParams { get; }
    public abstract virtual string get_ApiEndpoint();
    public abstract virtual String[] get_UrlSchemeRegex();
    public abstract virtual Dictionary`2<string, string> get_RequestParams();
    public abstract virtual string GetMarkup(string url, int maxWidth, int maxHeight);
}
public class Umbraco.Core.Media.OEmbedResult : object {
    [CompilerGeneratedAttribute]
private OEmbedStatus <OEmbedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDimensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Markup>k__BackingField;
    public OEmbedStatus OEmbedStatus { get; public set; }
    public bool SupportsDimensions { get; public set; }
    public string Markup { get; public set; }
    [CompilerGeneratedAttribute]
public OEmbedStatus get_OEmbedStatus();
    [CompilerGeneratedAttribute]
public void set_OEmbedStatus(OEmbedStatus value);
    [CompilerGeneratedAttribute]
public bool get_SupportsDimensions();
    [CompilerGeneratedAttribute]
public void set_SupportsDimensions(bool value);
    [CompilerGeneratedAttribute]
public string get_Markup();
    [CompilerGeneratedAttribute]
public void set_Markup(string value);
}
public enum Umbraco.Core.Media.OEmbedStatus : Enum {
    public int value__;
    public static OEmbedStatus NotSupported;
    public static OEmbedStatus Error;
    public static OEmbedStatus Success;
}
public class Umbraco.Core.Migrations.Expressions.Alter.AlterBuilder : object {
    private IMigrationContext _context;
    public AlterBuilder(IMigrationContext context);
    public sealed virtual IAlterTableBuilder Table(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Alter.Expressions.AlterColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnDefinition <Column>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public ColumnDefinition Column { get; public set; }
    public AlterColumnExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual ColumnDefinition get_Column();
    [CompilerGeneratedAttribute]
public virtual void set_Column(ColumnDefinition value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Alter.Expressions.AlterDefaultConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    public string ConstraintName { get; public set; }
    public object DefaultValue { get; public set; }
    public AlterDefaultConstraintExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConstraintName();
    [CompilerGeneratedAttribute]
public virtual void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Alter.Expressions.AlterTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public string TableName { get; public set; }
    public AlterTableExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    protected virtual string GetSql();
}
public interface Umbraco.Core.Migrations.Expressions.Alter.IAlterBuilder {
    public abstract virtual IAlterTableBuilder Table(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Alter.Table.AlterTableBuilder : ExpressionBuilderBase`2<AlterTableExpression, IAlterTableColumnOptionBuilder> {
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private ColumnDefinition <CurrentColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <CurrentForeignKey>k__BackingField;
    public ColumnDefinition CurrentColumn { get; public set; }
    public ForeignKeyDefinition CurrentForeignKey { get; public set; }
    public AlterTableBuilder(IMigrationContext context, AlterTableExpression expression);
    public sealed virtual void Do();
    [CompilerGeneratedAttribute]
public ColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_CurrentForeignKey();
    [CompilerGeneratedAttribute]
public void set_CurrentForeignKey(ForeignKeyDefinition value);
    public virtual ColumnDefinition GetColumnForType();
    public sealed virtual IAlterTableColumnOptionBuilder WithDefault(SystemMethods method);
    public sealed virtual IAlterTableColumnOptionBuilder WithDefaultValue(object value);
    public sealed virtual IAlterTableColumnOptionBuilder Identity();
    public sealed virtual IAlterTableColumnOptionBuilder Indexed();
    public sealed virtual IAlterTableColumnOptionBuilder Indexed(string indexName);
    public sealed virtual IAlterTableColumnOptionBuilder PrimaryKey();
    public sealed virtual IAlterTableColumnOptionBuilder PrimaryKey(string primaryKeyName);
    public sealed virtual IAlterTableColumnOptionBuilder Nullable();
    public sealed virtual IAlterTableColumnOptionBuilder NotNullable();
    public sealed virtual IAlterTableColumnOptionBuilder Unique();
    public sealed virtual IAlterTableColumnOptionBuilder Unique(string indexName);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder ForeignKey(string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder ForeignKey();
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
    public sealed virtual IAlterTableColumnTypeBuilder AddColumn(string name);
    public sealed virtual IAlterTableColumnTypeBuilder AlterColumn(string name);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder OnDelete(Rule rule);
    public sealed virtual IAlterTableColumnOptionForeignKeyCascadeBuilder OnUpdate(Rule rule);
    public sealed virtual IAlterTableColumnOptionBuilder OnDeleteOrUpdate(Rule rule);
}
public interface Umbraco.Core.Migrations.Expressions.Alter.Table.IAlterTableBuilder {
    public abstract virtual IAlterTableColumnTypeBuilder AddColumn(string name);
    public abstract virtual IAlterTableColumnTypeBuilder AlterColumn(string name);
}
public interface Umbraco.Core.Migrations.Expressions.Alter.Table.IAlterTableColumnOptionBuilder {
}
public interface Umbraco.Core.Migrations.Expressions.Alter.Table.IAlterTableColumnOptionForeignKeyCascadeBuilder {
}
public interface Umbraco.Core.Migrations.Expressions.Alter.Table.IAlterTableColumnTypeBuilder {
}
public class Umbraco.Core.Migrations.Expressions.Common.ExecutableBuilder : object {
    private IMigrationExpression _expression;
    public ExecutableBuilder(IMigrationExpression expression);
    public sealed virtual void Do();
}
public class Umbraco.Core.Migrations.Expressions.Common.Expressions.CreateColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumnDefinition <Column>k__BackingField;
    public string TableName { get; public set; }
    public ColumnDefinition Column { get; public set; }
    public CreateColumnExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public ColumnDefinition get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(ColumnDefinition value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Common.Expressions.CreateForeignKeyExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <ForeignKey>k__BackingField;
    public ForeignKeyDefinition ForeignKey { get; public set; }
    public CreateForeignKeyExpression(IMigrationContext context, ForeignKeyDefinition fkDef);
    public CreateForeignKeyExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_ForeignKey();
    [CompilerGeneratedAttribute]
public void set_ForeignKey(ForeignKeyDefinition value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Common.Expressions.CreateIndexExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private IndexDefinition <Index>k__BackingField;
    public IndexDefinition Index { get; public set; }
    public CreateIndexExpression(IMigrationContext context, IndexDefinition index);
    public CreateIndexExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public IndexDefinition get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(IndexDefinition value);
    protected virtual string GetSql();
}
public interface Umbraco.Core.Migrations.Expressions.Common.IColumnOptionBuilder`2 {
    public abstract virtual TNext WithDefault(SystemMethods method);
    public abstract virtual TNext WithDefaultValue(object value);
    public abstract virtual TNext Identity();
    public abstract virtual TNext Indexed();
    public abstract virtual TNext Indexed(string indexName);
    public abstract virtual TNext PrimaryKey();
    public abstract virtual TNext PrimaryKey(string primaryKeyName);
    public abstract virtual TNext Nullable();
    public abstract virtual TNext NotNullable();
    public abstract virtual TNext Unique();
    public abstract virtual TNext Unique(string indexName);
    public abstract virtual TNextFk ForeignKey(string primaryTableName, string primaryColumnName);
    public abstract virtual TNextFk ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public abstract virtual TNextFk ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public abstract virtual TNextFk ForeignKey();
    public abstract virtual TNextFk ReferencedBy(string foreignTableName, string foreignColumnName);
    public abstract virtual TNextFk ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public abstract virtual TNextFk ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
}
public interface Umbraco.Core.Migrations.Expressions.Common.IColumnTypeBuilder`1 {
    public abstract virtual TNext AsAnsiString();
    public abstract virtual TNext AsAnsiString(int size);
    public abstract virtual TNext AsBinary();
    public abstract virtual TNext AsBinary(int size);
    public abstract virtual TNext AsBoolean();
    public abstract virtual TNext AsByte();
    public abstract virtual TNext AsCurrency();
    public abstract virtual TNext AsDate();
    public abstract virtual TNext AsDateTime();
    public abstract virtual TNext AsDecimal();
    public abstract virtual TNext AsDecimal(int size, int precision);
    public abstract virtual TNext AsDouble();
    public abstract virtual TNext AsGuid();
    public abstract virtual TNext AsFixedLengthString(int size);
    public abstract virtual TNext AsFixedLengthAnsiString(int size);
    public abstract virtual TNext AsFloat();
    public abstract virtual TNext AsInt16();
    public abstract virtual TNext AsInt32();
    public abstract virtual TNext AsInt64();
    public abstract virtual TNext AsString();
    public abstract virtual TNext AsString(int size);
    public abstract virtual TNext AsTime();
    public abstract virtual TNext AsXml();
    public abstract virtual TNext AsXml(int size);
    public abstract virtual TNext AsCustom(string customType);
}
public interface Umbraco.Core.Migrations.Expressions.Common.IExecutableBuilder {
    public abstract virtual void Do();
}
public interface Umbraco.Core.Migrations.Expressions.Common.IForeignKeyCascadeBuilder`2 {
    public abstract virtual TNextFk OnDelete(Rule rule);
    public abstract virtual TNextFk OnUpdate(Rule rule);
    public abstract virtual TNext OnDeleteOrUpdate(Rule rule);
}
public class Umbraco.Core.Migrations.Expressions.Create.Column.CreateColumnBuilder : ExpressionBuilderBase`2<CreateColumnExpression, ICreateColumnOptionBuilder> {
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <CurrentForeignKey>k__BackingField;
    public ForeignKeyDefinition CurrentForeignKey { get; public set; }
    public CreateColumnBuilder(IMigrationContext context, CreateColumnExpression expression);
    public sealed virtual void Do();
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_CurrentForeignKey();
    [CompilerGeneratedAttribute]
public void set_CurrentForeignKey(ForeignKeyDefinition value);
    public virtual ColumnDefinition GetColumnForType();
    public sealed virtual ICreateColumnTypeBuilder OnTable(string name);
    public sealed virtual ICreateColumnOptionBuilder WithDefault(SystemMethods method);
    public sealed virtual ICreateColumnOptionBuilder WithDefaultValue(object value);
    public sealed virtual ICreateColumnOptionBuilder Identity();
    public sealed virtual ICreateColumnOptionBuilder Indexed();
    public sealed virtual ICreateColumnOptionBuilder Indexed(string indexName);
    public sealed virtual ICreateColumnOptionBuilder PrimaryKey();
    public sealed virtual ICreateColumnOptionBuilder PrimaryKey(string primaryKeyName);
    public sealed virtual ICreateColumnOptionBuilder Nullable();
    public sealed virtual ICreateColumnOptionBuilder NotNullable();
    public sealed virtual ICreateColumnOptionBuilder Unique();
    public sealed virtual ICreateColumnOptionBuilder Unique(string indexName);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder ForeignKey(string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder ForeignKey();
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder OnDelete(Rule rule);
    public sealed virtual ICreateColumnOptionForeignKeyCascadeBuilder OnUpdate(Rule rule);
    public sealed virtual ICreateColumnOptionBuilder OnDeleteOrUpdate(Rule rule);
}
public interface Umbraco.Core.Migrations.Expressions.Create.Column.ICreateColumnOnTableBuilder {
    public abstract virtual ICreateColumnTypeBuilder OnTable(string name);
}
public interface Umbraco.Core.Migrations.Expressions.Create.Column.ICreateColumnOptionBuilder {
}
public interface Umbraco.Core.Migrations.Expressions.Create.Column.ICreateColumnOptionForeignKeyCascadeBuilder {
}
public interface Umbraco.Core.Migrations.Expressions.Create.Column.ICreateColumnTypeBuilder {
}
public class Umbraco.Core.Migrations.Expressions.Create.Constraint.CreateConstraintBuilder : ExpressionBuilderBase`1<CreateConstraintExpression> {
    public CreateConstraintBuilder(CreateConstraintExpression expression);
    public sealed virtual ICreateConstraintColumnsBuilder OnTable(string tableName);
    public sealed virtual IExecutableBuilder Column(string columnName);
    public sealed virtual IExecutableBuilder Columns(String[] columnNames);
}
public interface Umbraco.Core.Migrations.Expressions.Create.Constraint.ICreateConstraintColumnsBuilder {
    public abstract virtual IExecutableBuilder Column(string columnName);
    public abstract virtual IExecutableBuilder Columns(String[] columnNames);
}
public interface Umbraco.Core.Migrations.Expressions.Create.Constraint.ICreateConstraintOnTableBuilder {
    public abstract virtual ICreateConstraintColumnsBuilder OnTable(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Create.CreateBuilder : object {
    private IMigrationContext _context;
    public CreateBuilder(IMigrationContext context);
    public sealed virtual IExecutableBuilder Table(bool withoutKeysAndIndexes);
    public sealed virtual IExecutableBuilder KeysAndIndexes();
    public sealed virtual IExecutableBuilder KeysAndIndexes(Type typeOfDto);
    public sealed virtual ICreateTableWithColumnBuilder Table(string tableName);
    public sealed virtual ICreateColumnOnTableBuilder Column(string columnName);
    public sealed virtual ICreateForeignKeyFromTableBuilder ForeignKey();
    public sealed virtual ICreateForeignKeyFromTableBuilder ForeignKey(string foreignKeyName);
    public sealed virtual ICreateIndexForTableBuilder Index();
    public sealed virtual ICreateIndexForTableBuilder Index(string indexName);
    public sealed virtual ICreateConstraintOnTableBuilder PrimaryKey();
    public sealed virtual ICreateConstraintOnTableBuilder PrimaryKey(bool clustered);
    public sealed virtual ICreateConstraintOnTableBuilder PrimaryKey(string primaryKeyName);
    public sealed virtual ICreateConstraintOnTableBuilder PrimaryKey(string primaryKeyName, bool clustered);
    public sealed virtual ICreateConstraintOnTableBuilder UniqueConstraint();
    public sealed virtual ICreateConstraintOnTableBuilder UniqueConstraint(string constraintName);
    public sealed virtual ICreateConstraintOnTableBuilder Constraint(string constraintName);
}
public class Umbraco.Core.Migrations.Expressions.Create.Expressions.CreateConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ConstraintDefinition <Constraint>k__BackingField;
    public ConstraintDefinition Constraint { get; }
    public CreateConstraintExpression(IMigrationContext context, ConstraintType constraint);
    [CompilerGeneratedAttribute]
public ConstraintDefinition get_Constraint();
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Create.Expressions.CreateTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ColumnDefinition> <Columns>k__BackingField;
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public IList`1<ColumnDefinition> Columns { get; public set; }
    public CreateTableExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual IList`1<ColumnDefinition> get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(IList`1<ColumnDefinition> value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Create.ForeignKey.CreateForeignKeyBuilder : ExpressionBuilderBase`1<CreateForeignKeyExpression> {
    public CreateForeignKeyBuilder(CreateForeignKeyExpression expression);
    public sealed virtual void Do();
    public sealed virtual ICreateForeignKeyForeignColumnBuilder FromTable(string table);
    public sealed virtual ICreateForeignKeyToTableBuilder ForeignColumn(string column);
    public sealed virtual ICreateForeignKeyToTableBuilder ForeignColumns(String[] columns);
    public sealed virtual ICreateForeignKeyPrimaryColumnBuilder ToTable(string table);
    public sealed virtual ICreateForeignKeyCascadeBuilder PrimaryColumn(string column);
    public sealed virtual ICreateForeignKeyCascadeBuilder PrimaryColumns(String[] columns);
    public sealed virtual ICreateForeignKeyCascadeBuilder OnDelete(Rule rule);
    public sealed virtual ICreateForeignKeyCascadeBuilder OnUpdate(Rule rule);
    public sealed virtual IExecutableBuilder OnDeleteOrUpdate(Rule rule);
}
public interface Umbraco.Core.Migrations.Expressions.Create.ForeignKey.ICreateForeignKeyCascadeBuilder {
    public abstract virtual ICreateForeignKeyCascadeBuilder OnDelete(Rule rule);
    public abstract virtual ICreateForeignKeyCascadeBuilder OnUpdate(Rule rule);
    public abstract virtual IExecutableBuilder OnDeleteOrUpdate(Rule rule);
}
public interface Umbraco.Core.Migrations.Expressions.Create.ForeignKey.ICreateForeignKeyForeignColumnBuilder {
    public abstract virtual ICreateForeignKeyToTableBuilder ForeignColumn(string column);
    public abstract virtual ICreateForeignKeyToTableBuilder ForeignColumns(String[] columns);
}
public interface Umbraco.Core.Migrations.Expressions.Create.ForeignKey.ICreateForeignKeyFromTableBuilder {
    public abstract virtual ICreateForeignKeyForeignColumnBuilder FromTable(string table);
}
public interface Umbraco.Core.Migrations.Expressions.Create.ForeignKey.ICreateForeignKeyPrimaryColumnBuilder {
    public abstract virtual ICreateForeignKeyCascadeBuilder PrimaryColumn(string column);
    public abstract virtual ICreateForeignKeyCascadeBuilder PrimaryColumns(String[] columns);
}
public interface Umbraco.Core.Migrations.Expressions.Create.ForeignKey.ICreateForeignKeyToTableBuilder {
    public abstract virtual ICreateForeignKeyPrimaryColumnBuilder ToTable(string table);
}
public interface Umbraco.Core.Migrations.Expressions.Create.ICreateBuilder {
    public abstract virtual IExecutableBuilder Table(bool withoutKeysAndIndexes);
    public abstract virtual IExecutableBuilder KeysAndIndexes();
    public abstract virtual IExecutableBuilder KeysAndIndexes(Type typeOfDto);
    public abstract virtual ICreateTableWithColumnBuilder Table(string tableName);
    public abstract virtual ICreateColumnOnTableBuilder Column(string columnName);
    public abstract virtual ICreateForeignKeyFromTableBuilder ForeignKey();
    public abstract virtual ICreateForeignKeyFromTableBuilder ForeignKey(string foreignKeyName);
    public abstract virtual ICreateIndexForTableBuilder Index();
    public abstract virtual ICreateIndexForTableBuilder Index(string indexName);
    public abstract virtual ICreateConstraintOnTableBuilder PrimaryKey();
    public abstract virtual ICreateConstraintOnTableBuilder PrimaryKey(string primaryKeyName);
    public abstract virtual ICreateConstraintOnTableBuilder PrimaryKey(bool clustered);
    public abstract virtual ICreateConstraintOnTableBuilder PrimaryKey(string primaryKeyName, bool clustered);
    public abstract virtual ICreateConstraintOnTableBuilder UniqueConstraint();
    public abstract virtual ICreateConstraintOnTableBuilder UniqueConstraint(string constraintName);
    public abstract virtual ICreateConstraintOnTableBuilder Constraint(string constraintName);
}
public class Umbraco.Core.Migrations.Expressions.Create.Index.CreateIndexBuilder : ExpressionBuilderBase`1<CreateIndexExpression> {
    [CompilerGeneratedAttribute]
private IndexColumnDefinition <CurrentColumn>k__BackingField;
    public IndexColumnDefinition CurrentColumn { get; public set; }
    public CreateIndexBuilder(CreateIndexExpression expression);
    public sealed virtual void Do();
    [CompilerGeneratedAttribute]
public IndexColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(IndexColumnDefinition value);
    public sealed virtual ICreateIndexOnColumnBuilder OnTable(string tableName);
    public sealed virtual ICreateIndexColumnOptionsBuilder OnColumn(string columnName);
    public sealed virtual ICreateIndexOptionsBuilder WithOptions();
    public sealed virtual ICreateIndexOnColumnBuilder Ascending();
    public sealed virtual ICreateIndexOnColumnBuilder Descending();
    private sealed virtual override ICreateIndexOnColumnBuilder Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexColumnOptionsBuilder.Unique();
    public sealed virtual ICreateIndexOnColumnBuilder NonClustered();
    public sealed virtual ICreateIndexOnColumnBuilder Clustered();
    private sealed virtual override ICreateIndexOnColumnBuilder Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexOptionsBuilder.Unique();
}
public interface Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexColumnOptionsBuilder {
    public abstract virtual ICreateIndexOnColumnBuilder Ascending();
    public abstract virtual ICreateIndexOnColumnBuilder Descending();
    public abstract virtual ICreateIndexOnColumnBuilder Unique();
}
public interface Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexForTableBuilder {
    public abstract virtual ICreateIndexOnColumnBuilder OnTable(string tableName);
}
public interface Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexOnColumnBuilder {
    public abstract virtual ICreateIndexColumnOptionsBuilder OnColumn(string columnName);
    public abstract virtual ICreateIndexOptionsBuilder WithOptions();
}
public interface Umbraco.Core.Migrations.Expressions.Create.Index.ICreateIndexOptionsBuilder {
    public abstract virtual ICreateIndexOnColumnBuilder Unique();
    public abstract virtual ICreateIndexOnColumnBuilder NonClustered();
    public abstract virtual ICreateIndexOnColumnBuilder Clustered();
}
public class Umbraco.Core.Migrations.Expressions.Create.KeysAndIndexes.CreateKeysAndIndexesBuilder : object {
    private IMigrationContext _context;
    private DatabaseType[] _supportedDatabaseTypes;
    [CompilerGeneratedAttribute]
private Type <TypeOfDto>k__BackingField;
    public Type TypeOfDto { get; public set; }
    public CreateKeysAndIndexesBuilder(IMigrationContext context, DatabaseType[] supportedDatabaseTypes);
    [CompilerGeneratedAttribute]
public Type get_TypeOfDto();
    [CompilerGeneratedAttribute]
public void set_TypeOfDto(Type value);
    public sealed virtual void Do();
    private void ExecuteSql(string sql);
}
public class Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableBuilder : ExpressionBuilderBase`2<CreateTableExpression, ICreateTableColumnOptionBuilder> {
    private IMigrationContext _context;
    [CompilerGeneratedAttribute]
private ColumnDefinition <CurrentColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <CurrentForeignKey>k__BackingField;
    public ColumnDefinition CurrentColumn { get; public set; }
    public ForeignKeyDefinition CurrentForeignKey { get; public set; }
    public CreateTableBuilder(IMigrationContext context, CreateTableExpression expression);
    public sealed virtual void Do();
    [CompilerGeneratedAttribute]
public ColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(ColumnDefinition value);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_CurrentForeignKey();
    [CompilerGeneratedAttribute]
public void set_CurrentForeignKey(ForeignKeyDefinition value);
    public virtual ColumnDefinition GetColumnForType();
    public sealed virtual ICreateTableColumnAsTypeBuilder WithColumn(string name);
    public sealed virtual ICreateTableColumnOptionBuilder WithDefault(SystemMethods method);
    public sealed virtual ICreateTableColumnOptionBuilder WithDefaultValue(object value);
    public sealed virtual ICreateTableColumnOptionBuilder Identity();
    public sealed virtual ICreateTableColumnOptionBuilder Indexed();
    public sealed virtual ICreateTableColumnOptionBuilder Indexed(string indexName);
    public sealed virtual ICreateTableColumnOptionBuilder PrimaryKey();
    public sealed virtual ICreateTableColumnOptionBuilder PrimaryKey(string primaryKeyName);
    public sealed virtual ICreateTableColumnOptionBuilder Nullable();
    public sealed virtual ICreateTableColumnOptionBuilder NotNullable();
    public sealed virtual ICreateTableColumnOptionBuilder Unique();
    public sealed virtual ICreateTableColumnOptionBuilder Unique(string indexName);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder ForeignKey(string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder ForeignKey(string foreignKeyName, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder ForeignKey(string foreignKeyName, string primaryTableSchema, string primaryTableName, string primaryColumnName);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder ForeignKey();
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignKeyName, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder ReferencedBy(string foreignKeyName, string foreignTableSchema, string foreignTableName, string foreignColumnName);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder OnDelete(Rule rule);
    public sealed virtual ICreateTableColumnOptionForeignKeyCascadeBuilder OnUpdate(Rule rule);
    public sealed virtual ICreateTableColumnOptionBuilder OnDeleteOrUpdate(Rule rule);
}
public class Umbraco.Core.Migrations.Expressions.Create.Table.CreateTableOfDtoBuilder : object {
    private IMigrationContext _context;
    private DatabaseType[] _supportedDatabaseTypes;
    [CompilerGeneratedAttribute]
private Type <TypeOfDto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WithoutKeysAndIndexes>k__BackingField;
    public Type TypeOfDto { get; public set; }
    public bool WithoutKeysAndIndexes { get; public set; }
    public CreateTableOfDtoBuilder(IMigrationContext context, DatabaseType[] supportedDatabaseTypes);
    [CompilerGeneratedAttribute]
public Type get_TypeOfDto();
    [CompilerGeneratedAttribute]
public void set_TypeOfDto(Type value);
    [CompilerGeneratedAttribute]
public bool get_WithoutKeysAndIndexes();
    [CompilerGeneratedAttribute]
public void set_WithoutKeysAndIndexes(bool value);
    public sealed virtual void Do();
    private void ExecuteSql(string sql);
}
public interface Umbraco.Core.Migrations.Expressions.Create.Table.ICreateTableColumnAsTypeBuilder {
}
public interface Umbraco.Core.Migrations.Expressions.Create.Table.ICreateTableColumnOptionBuilder {
}
public interface Umbraco.Core.Migrations.Expressions.Create.Table.ICreateTableColumnOptionForeignKeyCascadeBuilder {
}
public interface Umbraco.Core.Migrations.Expressions.Create.Table.ICreateTableWithColumnBuilder {
    public abstract virtual ICreateTableColumnAsTypeBuilder WithColumn(string name);
}
public class Umbraco.Core.Migrations.Expressions.Delete.Column.DeleteColumnBuilder : ExpressionBuilderBase`1<DeleteColumnExpression> {
    public DeleteColumnBuilder(DeleteColumnExpression expression);
    public sealed virtual IExecutableBuilder FromTable(string tableName);
    public sealed virtual IDeleteColumnBuilder Column(string columnName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.Column.IDeleteColumnBuilder {
    public abstract virtual IExecutableBuilder FromTable(string tableName);
    public abstract virtual IDeleteColumnBuilder Column(string columnName);
}
public class Umbraco.Core.Migrations.Expressions.Delete.Constraint.DeleteConstraintBuilder : ExpressionBuilderBase`1<DeleteConstraintExpression> {
    public DeleteConstraintBuilder(DeleteConstraintExpression expression);
    public sealed virtual IExecutableBuilder FromTable(string tableName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.Constraint.IDeleteConstraintBuilder {
    public abstract virtual IExecutableBuilder FromTable(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Delete.Data.DeleteDataBuilder : ExpressionBuilderBase`1<DeleteDataExpression> {
    public DeleteDataBuilder(DeleteDataExpression expression);
    public sealed virtual IExecutableBuilder IsNull(string columnName);
    public sealed virtual IDeleteDataBuilder Row(object dataAsAnonymousType);
    public sealed virtual IExecutableBuilder AllRows();
    public sealed virtual void Do();
    private static DeletionDataDefinition GetData(object dataAsAnonymousType);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.Data.IDeleteDataBuilder {
    public abstract virtual IDeleteDataBuilder Row(object dataAsAnonymousType);
    public abstract virtual IExecutableBuilder AllRows();
    public abstract virtual IExecutableBuilder IsNull(string columnName);
}
public class Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.DeleteDefaultConstraintBuilder : ExpressionBuilderBase`1<DeleteDefaultConstraintExpression> {
    private IMigrationContext _context;
    public DeleteDefaultConstraintBuilder(IMigrationContext context, DeleteDefaultConstraintExpression expression);
    public sealed virtual IDeleteDefaultConstraintOnColumnBuilder OnTable(string tableName);
    public sealed virtual IExecutableBuilder OnColumn(string columnName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnColumnBuilder {
    public abstract virtual IExecutableBuilder OnColumn(string columnName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.DefaultConstraint.IDeleteDefaultConstraintOnTableBuilder {
    public abstract virtual IDeleteDefaultConstraintOnColumnBuilder OnTable(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Delete.DeleteBuilder : object {
    private IMigrationContext _context;
    public DeleteBuilder(IMigrationContext context);
    public sealed virtual IExecutableBuilder Table(string tableName);
    public sealed virtual IExecutableBuilder KeysAndIndexes(bool local, bool foreign);
    public sealed virtual IExecutableBuilder KeysAndIndexes(string tableName, bool local, bool foreign);
    public sealed virtual IDeleteColumnBuilder Column(string columnName);
    public sealed virtual IDeleteForeignKeyFromTableBuilder ForeignKey();
    public sealed virtual IDeleteForeignKeyOnTableBuilder ForeignKey(string foreignKeyName);
    public sealed virtual IDeleteDataBuilder FromTable(string tableName);
    public sealed virtual IDeleteIndexForTableBuilder Index();
    public sealed virtual IDeleteIndexForTableBuilder Index(string indexName);
    public sealed virtual IDeleteConstraintBuilder PrimaryKey(string primaryKeyName);
    public sealed virtual IDeleteConstraintBuilder UniqueConstraint(string constraintName);
    public sealed virtual IDeleteDefaultConstraintOnTableBuilder DefaultConstraint();
}
public class Umbraco.Core.Migrations.Expressions.Delete.Expressions.DeleteColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ColumnNames>k__BackingField;
    public string TableName { get; public set; }
    public ICollection`1<string> ColumnNames { get; public set; }
    public DeleteColumnExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_ColumnNames();
    [CompilerGeneratedAttribute]
public void set_ColumnNames(ICollection`1<string> value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Delete.Expressions.DeleteConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ConstraintDefinition <Constraint>k__BackingField;
    public ConstraintDefinition Constraint { get; }
    public DeleteConstraintExpression(IMigrationContext context, ConstraintType type);
    [CompilerGeneratedAttribute]
public ConstraintDefinition get_Constraint();
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Delete.Expressions.DeleteDataExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllRows>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DeletionDataDefinition> <Rows>k__BackingField;
    public string TableName { get; public set; }
    public bool IsAllRows { get; public set; }
    public List`1<DeletionDataDefinition> Rows { get; }
    public DeleteDataExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsAllRows();
    [CompilerGeneratedAttribute]
public virtual void set_IsAllRows(bool value);
    [CompilerGeneratedAttribute]
public List`1<DeletionDataDefinition> get_Rows();
    protected virtual string GetSql();
    [CompilerGeneratedAttribute]
private string <GetSql>b__12_0(KeyValuePair`2<string, object> kvp);
}
public class Umbraco.Core.Migrations.Expressions.Delete.Expressions.DeleteDefaultConstraintExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDefaultConstraint>k__BackingField;
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    public string ConstraintName { get; public set; }
    public bool HasDefaultConstraint { get; public set; }
    public DeleteDefaultConstraintExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ConstraintName();
    [CompilerGeneratedAttribute]
public virtual void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_HasDefaultConstraint();
    [CompilerGeneratedAttribute]
public virtual void set_HasDefaultConstraint(bool value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Delete.Expressions.DeleteForeignKeyExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private ForeignKeyDefinition <ForeignKey>k__BackingField;
    public ForeignKeyDefinition ForeignKey { get; public set; }
    public DeleteForeignKeyExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public ForeignKeyDefinition get_ForeignKey();
    [CompilerGeneratedAttribute]
public void set_ForeignKey(ForeignKeyDefinition value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Delete.Expressions.DeleteIndexExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private IndexDefinition <Index>k__BackingField;
    public IndexDefinition Index { get; }
    public DeleteIndexExpression(IMigrationContext context);
    public DeleteIndexExpression(IMigrationContext context, IndexDefinition index);
    [CompilerGeneratedAttribute]
public IndexDefinition get_Index();
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Delete.Expressions.DeleteTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public string TableName { get; public set; }
    public DeleteTableExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.DeleteForeignKeyBuilder : ExpressionBuilderBase`1<DeleteForeignKeyExpression> {
    public DeleteForeignKeyBuilder(DeleteForeignKeyExpression expression);
    public sealed virtual IDeleteForeignKeyForeignColumnBuilder FromTable(string foreignTableName);
    public sealed virtual IDeleteForeignKeyToTableBuilder ForeignColumn(string column);
    public sealed virtual IDeleteForeignKeyToTableBuilder ForeignColumns(String[] columns);
    public sealed virtual IDeleteForeignKeyPrimaryColumnBuilder ToTable(string table);
    public sealed virtual IExecutableBuilder PrimaryColumn(string column);
    public sealed virtual IExecutableBuilder PrimaryColumns(String[] columns);
    public sealed virtual IExecutableBuilder OnTable(string foreignTableName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyForeignColumnBuilder {
    public abstract virtual IDeleteForeignKeyToTableBuilder ForeignColumn(string column);
    public abstract virtual IDeleteForeignKeyToTableBuilder ForeignColumns(String[] columns);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyFromTableBuilder {
    public abstract virtual IDeleteForeignKeyForeignColumnBuilder FromTable(string foreignTableName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyOnTableBuilder {
    public abstract virtual IExecutableBuilder OnTable(string foreignTableName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyPrimaryColumnBuilder {
    public abstract virtual IExecutableBuilder PrimaryColumn(string column);
    public abstract virtual IExecutableBuilder PrimaryColumns(String[] columns);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.ForeignKey.IDeleteForeignKeyToTableBuilder {
    public abstract virtual IDeleteForeignKeyPrimaryColumnBuilder ToTable(string table);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.IDeleteBuilder {
    public abstract virtual IExecutableBuilder Table(string tableName);
    public abstract virtual IExecutableBuilder KeysAndIndexes(bool local, bool foreign);
    public abstract virtual IExecutableBuilder KeysAndIndexes(string tableName, bool local, bool foreign);
    public abstract virtual IDeleteColumnBuilder Column(string columnName);
    public abstract virtual IDeleteForeignKeyFromTableBuilder ForeignKey();
    public abstract virtual IDeleteForeignKeyOnTableBuilder ForeignKey(string foreignKeyName);
    public abstract virtual IDeleteDataBuilder FromTable(string tableName);
    public abstract virtual IDeleteIndexForTableBuilder Index();
    public abstract virtual IDeleteIndexForTableBuilder Index(string indexName);
    public abstract virtual IDeleteConstraintBuilder PrimaryKey(string primaryKeyName);
    public abstract virtual IDeleteConstraintBuilder UniqueConstraint(string constraintName);
    public abstract virtual IDeleteDefaultConstraintOnTableBuilder DefaultConstraint();
}
public class Umbraco.Core.Migrations.Expressions.Delete.Index.DeleteIndexBuilder : ExpressionBuilderBase`1<DeleteIndexExpression> {
    [CompilerGeneratedAttribute]
private IndexColumnDefinition <CurrentColumn>k__BackingField;
    public IndexColumnDefinition CurrentColumn { get; public set; }
    public DeleteIndexBuilder(DeleteIndexExpression expression);
    public sealed virtual void Do();
    [CompilerGeneratedAttribute]
public IndexColumnDefinition get_CurrentColumn();
    [CompilerGeneratedAttribute]
public void set_CurrentColumn(IndexColumnDefinition value);
    public sealed virtual IDeleteIndexOnColumnBuilder OnTable(string tableName);
    public sealed virtual IExecutableBuilder OnColumn(string columnName);
    public sealed virtual IExecutableBuilder OnColumns(String[] columnNames);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.Index.IDeleteIndexForTableBuilder {
    public abstract virtual IDeleteIndexOnColumnBuilder OnTable(string tableName);
}
public interface Umbraco.Core.Migrations.Expressions.Delete.Index.IDeleteIndexOnColumnBuilder {
    [ObsoleteAttribute("I don't think this would ever be used when dropping an index, see DeleteIndexExpression.ToString")]
public abstract virtual IExecutableBuilder OnColumn(string columnName);
    [ObsoleteAttribute("I don't think this would ever be used when dropping an index, see DeleteIndexExpression.ToString")]
public abstract virtual IExecutableBuilder OnColumns(String[] columnNames);
}
public class Umbraco.Core.Migrations.Expressions.Delete.KeysAndIndexes.DeleteKeysAndIndexesBuilder : object {
    private IMigrationContext _context;
    private DatabaseType[] _supportedDatabaseTypes;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteLocal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteForeign>k__BackingField;
    public string TableName { get; public set; }
    public bool DeleteLocal { get; public set; }
    public bool DeleteForeign { get; public set; }
    private IDeleteBuilder Delete { get; }
    public DeleteKeysAndIndexesBuilder(IMigrationContext context, DatabaseType[] supportedDatabaseTypes);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_DeleteLocal();
    [CompilerGeneratedAttribute]
public void set_DeleteLocal(bool value);
    [CompilerGeneratedAttribute]
public bool get_DeleteForeign();
    [CompilerGeneratedAttribute]
public void set_DeleteForeign(bool value);
    public sealed virtual void Do();
    private IDeleteBuilder get_Delete();
}
public class Umbraco.Core.Migrations.Expressions.Execute.ExecuteBuilder : ExpressionBuilderBase`1<ExecuteSqlStatementExpression> {
    public ExecuteBuilder(IMigrationContext context);
    public sealed virtual void Do();
    public sealed virtual IExecutableBuilder Sql(string sqlStatement);
    public sealed virtual IExecutableBuilder Sql(Sql`1<ISqlContext> sql);
}
public class Umbraco.Core.Migrations.Expressions.Execute.Expressions.ExecuteSqlStatementExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <SqlStatement>k__BackingField;
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <SqlObject>k__BackingField;
    public string SqlStatement { get; public set; }
    public Sql`1<ISqlContext> SqlObject { get; public set; }
    public ExecuteSqlStatementExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_SqlStatement();
    [CompilerGeneratedAttribute]
public virtual void set_SqlStatement(string value);
    [CompilerGeneratedAttribute]
public virtual Sql`1<ISqlContext> get_SqlObject();
    [CompilerGeneratedAttribute]
public virtual void set_SqlObject(Sql`1<ISqlContext> value);
    public void ExecuteSqlObject();
    protected virtual string GetSql();
}
public interface Umbraco.Core.Migrations.Expressions.Execute.IExecuteBuilder {
    public abstract virtual IExecutableBuilder Sql(string sqlStatement);
    public abstract virtual IExecutableBuilder Sql(Sql`1<ISqlContext> sql);
}
public abstract class Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`1 : object {
    [CompilerGeneratedAttribute]
private TExpression <Expression>k__BackingField;
    public TExpression Expression { get; }
    protected ExpressionBuilderBase`1(TExpression expression);
    [CompilerGeneratedAttribute]
public TExpression get_Expression();
}
public abstract class Umbraco.Core.Migrations.Expressions.ExpressionBuilderBase`2 : ExpressionBuilderBase`1<TExpression> {
    private ColumnDefinition Column { get; }
    protected ExpressionBuilderBase`2(TExpression expression);
    public abstract virtual ColumnDefinition GetColumnForType();
    private ColumnDefinition get_Column();
    public sealed virtual TNext AsAnsiString();
    public sealed virtual TNext AsAnsiString(int size);
    public sealed virtual TNext AsBinary();
    public sealed virtual TNext AsBinary(int size);
    public sealed virtual TNext AsBoolean();
    public sealed virtual TNext AsByte();
    public sealed virtual TNext AsCurrency();
    public sealed virtual TNext AsDate();
    public sealed virtual TNext AsDateTime();
    public sealed virtual TNext AsDecimal();
    public sealed virtual TNext AsDecimal(int size, int precision);
    public sealed virtual TNext AsDouble();
    public sealed virtual TNext AsFixedLengthString(int size);
    public sealed virtual TNext AsFixedLengthAnsiString(int size);
    public sealed virtual TNext AsFloat();
    public sealed virtual TNext AsGuid();
    public sealed virtual TNext AsInt16();
    public sealed virtual TNext AsInt32();
    public sealed virtual TNext AsInt64();
    public sealed virtual TNext AsString();
    public sealed virtual TNext AsString(int size);
    public sealed virtual TNext AsTime();
    public sealed virtual TNext AsXml();
    public sealed virtual TNext AsXml(int size);
    public sealed virtual TNext AsCustom(string customType);
}
public interface Umbraco.Core.Migrations.Expressions.IFluentBuilder {
}
public class Umbraco.Core.Migrations.Expressions.Insert.Expressions.InsertDataExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnabledIdentityInsert>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InsertionDataDefinition> <Rows>k__BackingField;
    public string TableName { get; public set; }
    public bool EnabledIdentityInsert { get; public set; }
    public List`1<InsertionDataDefinition> Rows { get; }
    public InsertDataExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_EnabledIdentityInsert();
    [CompilerGeneratedAttribute]
public void set_EnabledIdentityInsert(bool value);
    [CompilerGeneratedAttribute]
public List`1<InsertionDataDefinition> get_Rows();
    protected virtual string GetSql();
}
public interface Umbraco.Core.Migrations.Expressions.Insert.IInsertBuilder {
    public abstract virtual IInsertIntoBuilder IntoTable(string tableName);
}
public interface Umbraco.Core.Migrations.Expressions.Insert.IInsertIntoBuilder {
    public abstract virtual IInsertIntoBuilder EnableIdentityInsert();
    public abstract virtual IInsertIntoBuilder Row(object dataAsAnonymousType);
}
public class Umbraco.Core.Migrations.Expressions.Insert.InsertBuilder : object {
    private IMigrationContext _context;
    public InsertBuilder(IMigrationContext context);
    public sealed virtual IInsertIntoBuilder IntoTable(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Insert.InsertIntoBuilder : ExpressionBuilderBase`1<InsertDataExpression> {
    public InsertIntoBuilder(InsertDataExpression expression);
    public sealed virtual void Do();
    public sealed virtual IInsertIntoBuilder EnableIdentityInsert();
    public sealed virtual IInsertIntoBuilder Row(object dataAsAnonymousType);
    private static InsertionDataDefinition GetData(object dataAsAnonymousType);
}
public interface Umbraco.Core.Migrations.Expressions.Rename.Column.IRenameColumnBuilder {
    public abstract virtual IRenameColumnToBuilder OnTable(string tableName);
}
public interface Umbraco.Core.Migrations.Expressions.Rename.Column.IRenameColumnToBuilder {
    public abstract virtual IExecutableBuilder To(string name);
}
public class Umbraco.Core.Migrations.Expressions.Rename.Column.RenameColumnBuilder : ExpressionBuilderBase`1<RenameColumnExpression> {
    public RenameColumnBuilder(RenameColumnExpression expression);
    public sealed virtual void Do();
    public sealed virtual IExecutableBuilder To(string name);
    public sealed virtual IRenameColumnToBuilder OnTable(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Rename.Expressions.RenameColumnExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string TableName { get; public set; }
    public string OldName { get; public set; }
    public string NewName { get; public set; }
    public RenameColumnExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual void set_OldName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    public virtual string Process(IMigrationContext context);
    protected virtual string GetSql();
}
public class Umbraco.Core.Migrations.Expressions.Rename.Expressions.RenameTableExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public string OldName { get; public set; }
    public string NewName { get; public set; }
    public RenameTableExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual void set_OldName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
    [CompilerGeneratedAttribute]
public virtual void set_NewName(string value);
    protected virtual string GetSql();
}
public interface Umbraco.Core.Migrations.Expressions.Rename.IRenameBuilder {
    public abstract virtual IRenameTableBuilder Table(string oldName);
    public abstract virtual IRenameColumnBuilder Column(string oldName);
}
public class Umbraco.Core.Migrations.Expressions.Rename.RenameBuilder : object {
    private IMigrationContext _context;
    public RenameBuilder(IMigrationContext context);
    public sealed virtual IRenameTableBuilder Table(string oldName);
    public sealed virtual IRenameColumnBuilder Column(string oldName);
}
public interface Umbraco.Core.Migrations.Expressions.Rename.Table.IRenameTableBuilder {
    public abstract virtual IExecutableBuilder To(string name);
}
public class Umbraco.Core.Migrations.Expressions.Rename.Table.RenameTableBuilder : ExpressionBuilderBase`1<RenameTableExpression> {
    public RenameTableBuilder(RenameTableExpression expression);
    public sealed virtual void Do();
    public sealed virtual IExecutableBuilder To(string name);
}
public class Umbraco.Core.Migrations.Expressions.Update.Expressions.UpdateDataExpression : MigrationExpressionBase {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, object>> <Set>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<KeyValuePair`2<string, object>> <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAllRows>k__BackingField;
    public string TableName { get; public set; }
    public List`1<KeyValuePair`2<string, object>> Set { get; public set; }
    public List`1<KeyValuePair`2<string, object>> Where { get; public set; }
    public bool IsAllRows { get; public set; }
    public UpdateDataExpression(IMigrationContext context);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, object>> get_Set();
    [CompilerGeneratedAttribute]
public void set_Set(List`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public List`1<KeyValuePair`2<string, object>> get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(List`1<KeyValuePair`2<string, object>> value);
    [CompilerGeneratedAttribute]
public bool get_IsAllRows();
    [CompilerGeneratedAttribute]
public void set_IsAllRows(bool value);
    protected virtual string GetSql();
    [CompilerGeneratedAttribute]
private string <GetSql>b__17_0(KeyValuePair`2<string, object> x);
    [CompilerGeneratedAttribute]
private string <GetSql>b__17_1(KeyValuePair`2<string, object> x);
}
public interface Umbraco.Core.Migrations.Expressions.Update.IUpdateBuilder {
    public abstract virtual IUpdateTableBuilder Table(string tableName);
}
public interface Umbraco.Core.Migrations.Expressions.Update.IUpdateTableBuilder {
    public abstract virtual IUpdateWhereBuilder Set(object dataAsAnonymousType);
}
public interface Umbraco.Core.Migrations.Expressions.Update.IUpdateWhereBuilder {
    public abstract virtual IExecutableBuilder Where(object dataAsAnonymousType);
    public abstract virtual IExecutableBuilder AllRows();
}
public class Umbraco.Core.Migrations.Expressions.Update.UpdateBuilder : object {
    private IMigrationContext _context;
    public UpdateBuilder(IMigrationContext context);
    public sealed virtual IUpdateTableBuilder Table(string tableName);
}
public class Umbraco.Core.Migrations.Expressions.Update.UpdateDataBuilder : ExpressionBuilderBase`1<UpdateDataExpression> {
    public UpdateDataBuilder(UpdateDataExpression expression);
    public sealed virtual void Do();
    public sealed virtual IUpdateWhereBuilder Set(object dataAsAnonymousType);
    public sealed virtual IExecutableBuilder Where(object dataAsAnonymousType);
    public sealed virtual IExecutableBuilder AllRows();
    private static List`1<KeyValuePair`2<string, object>> GetData(object dataAsAnonymousType);
}
public interface Umbraco.Core.Migrations.IMigration {
    public abstract virtual void Migrate();
}
public interface Umbraco.Core.Migrations.IMigrationBuilder {
    public abstract virtual IMigration Build(Type migrationType, IMigrationContext context);
}
public interface Umbraco.Core.Migrations.IMigrationContext {
    public ILogger Logger { get; }
    public IUmbracoDatabase Database { get; }
    public ISqlContext SqlContext { get; }
    public int Index { get; public set; }
    public bool BuildingExpression { get; public set; }
    public abstract virtual ILogger get_Logger();
    public abstract virtual IUmbracoDatabase get_Database();
    public abstract virtual ISqlContext get_SqlContext();
    public abstract virtual int get_Index();
    public abstract virtual void set_Index(int value);
    public abstract virtual bool get_BuildingExpression();
    public abstract virtual void set_BuildingExpression(bool value);
    public abstract virtual void AddPostMigration();
}
public interface Umbraco.Core.Migrations.IMigrationExpression {
    public abstract virtual string Process(IMigrationContext context);
    public abstract virtual void Execute();
}
public class Umbraco.Core.Migrations.IncompleteMigrationExpressionException : Exception {
    public IncompleteMigrationExpressionException(string message);
    public IncompleteMigrationExpressionException(string message, Exception innerException);
    protected IncompleteMigrationExpressionException(SerializationInfo info, StreamingContext context);
}
public class Umbraco.Core.Migrations.Install.DatabaseBuilder : object {
    private IUmbracoDatabaseFactory _databaseFactory;
    private IScopeProvider _scopeProvider;
    private IGlobalSettings _globalSettings;
    private IRuntimeState _runtime;
    private IMigrationBuilder _migrationBuilder;
    private IKeyValueService _keyValueService;
    private ILogger _logger;
    private DatabaseSchemaResult _databaseSchemaValidationResult;
    public static string EmbeddedDatabaseConnectionString;
    public bool IsDatabaseConfigured { get; }
    public bool CanConnectToDatabase { get; }
    public DatabaseBuilder(IScopeProvider scopeProvider, IGlobalSettings globalSettings, IUmbracoDatabaseFactory databaseFactory, IRuntimeState runtime, ILogger logger, IMigrationBuilder migrationBuilder, IKeyValueService keyValueService);
    public bool get_IsDatabaseConfigured();
    public bool get_CanConnectToDatabase();
    public bool CanConnect(string databaseType, string connectionString, string server, string database, string login, string password, bool integratedAuth);
    internal bool HasSomeNonDefaultUser();
    internal bool IsUmbracoInstalled();
    public void ConfigureEmbeddedDatabaseConnection();
    private static void ConfigureEmbeddedDatabaseConnection(IUmbracoDatabaseFactory factory, ILogger logger);
    public void ConfigureDatabaseConnection(string connectionString);
    public void ConfigureDatabaseConnection(string server, string databaseName, string user, string password, string databaseProvider);
    public static string GetDatabaseConnectionString(string server, string databaseName, string user, string password, string databaseProvider, String& providerName);
    public void ConfigureIntegratedSecurityDatabaseConnection(string server, string databaseName);
    public static string GetIntegratedSecurityDatabaseConnectionString(string server, string databaseName);
    public static string GetAzureConnectionString(string server, string databaseName, string user, string password);
    private static bool ServerStartsWithTcp(string server);
    private static void SaveConnectionString(string connectionString, string providerName, ILogger logger);
    private static void AddOrUpdateAttribute(XElement element, string name, string value);
    internal bool IsConnectionStringConfigured(ConnectionStringSettings databaseSettings);
    internal DatabaseSchemaResult ValidateSchema();
    private DatabaseSchemaResult ValidateSchema(IScope scope);
    public Result CreateSchemaAndData();
    private Result CreateSchemaAndData(IScope scope);
    public Result UpgradeSchemaAndData(MigrationPlan plan);
    private Attempt`1<Result> CheckReadyForInstall();
    private Result HandleInstallException(Exception ex);
}
internal class Umbraco.Core.Migrations.Install.DatabaseDataCreator : object {
    private IDatabase _database;
    private ILogger _logger;
    public DatabaseDataCreator(IDatabase database, ILogger logger);
    public void InitializeBaseData(string tableName);
    private void CreateNodeData();
    private void CreateLockData();
    private void CreateContentTypeData();
    private void CreateUserData();
    private void CreateUserGroupData();
    private void CreateUser2UserGroupData();
    private void CreateUserGroup2AppData();
    private void CreatePropertyTypeGroupData();
    private void CreatePropertyTypeData();
    private void CreateLanguageData();
    private void CreateContentChildTypeData();
    private void CreateDataTypeData();
    private void CreateRelationTypeData();
    internal static Guid CreateUniqueRelationTypeId(string alias, string name);
    private void CreateKeyValueData();
    [CompilerGeneratedAttribute]
private void <CreateNodeData>g__InsertDataTypeNodeDto|4_0(int id, int sortOrder, string uniqueId, string text);
    [CompilerGeneratedAttribute]
private void <CreateDataTypeData>g__InsertDataTypeDto|15_0(int id, string editorAlias, string dbType, string configuration);
}
public class Umbraco.Core.Migrations.Install.DatabaseSchemaCreator : object {
    private IUmbracoDatabase _database;
    private ILogger _logger;
    internal static List`1<Type> OrderedTables;
    [CompilerGeneratedAttribute]
private static DatabaseEventHandler BeforeCreation;
    [CompilerGeneratedAttribute]
private static DatabaseEventHandler AfterCreation;
    private ISqlSyntaxProvider SqlSyntax { get; }
    public DatabaseSchemaCreator(IUmbracoDatabase database, ILogger logger);
    private static DatabaseSchemaCreator();
    private ISqlSyntaxProvider get_SqlSyntax();
    internal void UninstallDatabaseSchema();
    public void InitializeDatabaseSchema();
    internal DatabaseSchemaResult ValidateSchema();
    internal DatabaseSchemaResult ValidateSchema(IEnumerable`1<Type> orderedTables);
    private void ValidateDbConstraints(DatabaseSchemaResult result);
    private void ValidateDbColumns(DatabaseSchemaResult result);
    private void ValidateDbTables(DatabaseSchemaResult result);
    private void ValidateDbIndexes(DatabaseSchemaResult result);
    [CompilerGeneratedAttribute]
internal static void add_BeforeCreation(DatabaseEventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_BeforeCreation(DatabaseEventHandler value);
    internal virtual void FireBeforeCreation(DatabaseCreationEventArgs e);
    [CompilerGeneratedAttribute]
internal static void add_AfterCreation(DatabaseEventHandler value);
    [CompilerGeneratedAttribute]
internal static void remove_AfterCreation(DatabaseEventHandler value);
    internal virtual void FireAfterCreation(DatabaseCreationEventArgs e);
    public bool TableExists(string tableName);
    public bool TableExists();
    internal void CreateTable(bool overwrite);
    internal void CreateTable(bool overwrite, Type modelType, DatabaseDataCreator dataCreation);
    public void DropTable(string tableName);
    [CompilerGeneratedAttribute]
private TableDefinition <ValidateSchema>b__9_1(Type x);
}
internal class Umbraco.Core.Migrations.Install.DatabaseSchemaResult : object {
    [CompilerGeneratedAttribute]
private List`1<Tuple`2<string, string>> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TableDefinition> <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<DbIndexDefinition> <IndexDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ValidTables>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ValidColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ValidConstraints>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ValidIndexes>k__BackingField;
    public List`1<Tuple`2<string, string>> Errors { get; }
    public List`1<TableDefinition> TableDefinitions { get; }
    internal List`1<DbIndexDefinition> IndexDefinitions { get; }
    public List`1<string> ValidTables { get; }
    public List`1<string> ValidColumns { get; }
    public List`1<string> ValidConstraints { get; }
    public List`1<string> ValidIndexes { get; }
    [CompilerGeneratedAttribute]
public List`1<Tuple`2<string, string>> get_Errors();
    [CompilerGeneratedAttribute]
public List`1<TableDefinition> get_TableDefinitions();
    [CompilerGeneratedAttribute]
internal List`1<DbIndexDefinition> get_IndexDefinitions();
    [CompilerGeneratedAttribute]
public List`1<string> get_ValidTables();
    [CompilerGeneratedAttribute]
public List`1<string> get_ValidColumns();
    [CompilerGeneratedAttribute]
public List`1<string> get_ValidConstraints();
    [CompilerGeneratedAttribute]
public List`1<string> get_ValidIndexes();
    public bool DetermineHasInstalledVersion();
    public string GetSummary();
}
public class Umbraco.Core.Migrations.MergeBuilder : object {
    private MigrationPlan _plan;
    private List`1<Type> _migrations;
    private string _withLast;
    private bool _with;
    internal MergeBuilder(MigrationPlan plan);
    public MergeBuilder To(string targetState);
    public MergeBuilder To(string targetState);
    public MergeBuilder To(string targetState, Type migration);
    public MergeBuilder With();
    public MigrationPlan As(string targetState);
}
public abstract class Umbraco.Core.Migrations.MigrationBase : object {
    [CompilerGeneratedAttribute]
private IMigrationContext <Context>k__BackingField;
    protected IMigrationContext Context { get; }
    protected ILogger Logger { get; }
    protected ISqlSyntaxProvider SqlSyntax { get; }
    protected IUmbracoDatabase Database { get; }
    protected DatabaseType DatabaseType { get; }
    public IAlterBuilder Alter { get; }
    public ICreateBuilder Create { get; }
    public IDeleteBuilder Delete { get; }
    public IExecuteBuilder Execute { get; }
    public IInsertBuilder Insert { get; }
    public IRenameBuilder Rename { get; }
    public IUpdateBuilder Update { get; }
    protected MigrationBase(IMigrationContext context);
    protected void AddColumn(string columnName);
    protected void AddColumnIfNotExists(IEnumerable`1<ColumnInfo> columns, string columnName);
    protected void AddColumn(string tableName, string columnName);
    protected void AddColumnIfNotExists(IEnumerable`1<ColumnInfo> columns, string tableName, string columnName);
    private void AddColumn(TableDefinition table, string tableName, string columnName);
    protected void AddColumn(string columnName, IEnumerable`1& sqls);
    protected void AddColumn(string tableName, string columnName, IEnumerable`1& sqls);
    private void AddColumn(TableDefinition table, string tableName, string columnName, IEnumerable`1& sqls);
    protected void AlterColumn(string tableName, string columnName);
    protected void ReplaceColumn(string tableName, string currentName, string newName);
    protected bool TableExists(string tableName);
    protected bool IndexExists(string indexName);
    protected bool ColumnExists(string tableName, string columnName);
    protected string ColumnType(string tableName, string columnName);
    [CompilerGeneratedAttribute]
protected IMigrationContext get_Context();
    protected ILogger get_Logger();
    protected ISqlSyntaxProvider get_SqlSyntax();
    protected IUmbracoDatabase get_Database();
    protected DatabaseType get_DatabaseType();
    protected Sql`1<ISqlContext> Sql();
    protected Sql`1<ISqlContext> Sql(string sql, Object[] args);
    public abstract virtual void Migrate();
    private sealed virtual override void Umbraco.Core.Migrations.IMigration.Migrate();
    private T BeginBuild(T builder);
    public IAlterBuilder get_Alter();
    public ICreateBuilder get_Create();
    public IDeleteBuilder get_Delete();
    public IExecuteBuilder get_Execute();
    public IInsertBuilder get_Insert();
    public IRenameBuilder get_Rename();
    public IUpdateBuilder get_Update();
}
public class Umbraco.Core.Migrations.MigrationBuilder : object {
    private IFactory _container;
    public MigrationBuilder(IFactory container);
    public sealed virtual IMigration Build(Type migrationType, IMigrationContext context);
}
internal class Umbraco.Core.Migrations.MigrationContext : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IUmbracoDatabase <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BuildingExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <PostMigrations>k__BackingField;
    public ILogger Logger { get; }
    public IUmbracoDatabase Database { get; }
    public ISqlContext SqlContext { get; }
    public int Index { get; public set; }
    public bool BuildingExpression { get; public set; }
    public List`1<Type> PostMigrations { get; }
    public MigrationContext(IUmbracoDatabase database, ILogger logger);
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual IUmbracoDatabase get_Database();
    public sealed virtual ISqlContext get_SqlContext();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Index();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Index(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BuildingExpression();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildingExpression(bool value);
    [CompilerGeneratedAttribute]
public List`1<Type> get_PostMigrations();
    public sealed virtual void AddPostMigration();
}
public abstract class Umbraco.Core.Migrations.MigrationExpressionBase : object {
    private bool _executed;
    private List`1<IMigrationExpression> _expressions;
    [CompilerGeneratedAttribute]
private IMigrationContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    protected IMigrationContext Context { get; }
    protected ILogger Logger { get; }
    protected ISqlSyntaxProvider SqlSyntax { get; }
    protected IUmbracoDatabase Database { get; }
    public DatabaseType DatabaseType { get; }
    public List`1<IMigrationExpression> Expressions { get; }
    internal string Name { get; internal set; }
    protected MigrationExpressionBase(IMigrationContext context);
    [CompilerGeneratedAttribute]
protected IMigrationContext get_Context();
    protected ILogger get_Logger();
    protected ISqlSyntaxProvider get_SqlSyntax();
    protected IUmbracoDatabase get_Database();
    public DatabaseType get_DatabaseType();
    public List`1<IMigrationExpression> get_Expressions();
    public virtual string Process(IMigrationContext context);
    protected virtual string GetSql();
    public sealed virtual void Execute();
    protected void Execute(Sql`1<ISqlContext> sql);
    private void ExecuteStatement(StringBuilder stmtBuilder);
    protected void AppendStatementSeparator(StringBuilder stmtBuilder);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    protected string GetQuotedValue(object val);
}
public class Umbraco.Core.Migrations.MigrationPlan : object {
    private Dictionary`2<string, Transition> _transitions;
    private List`1<Type> _postMigrationTypes;
    private string _prevState;
    private string _finalState;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IReadOnlyDictionary`2<string, Transition> Transitions { get; }
    public string Name { get; }
    public string InitialState { get; }
    public string FinalState { get; }
    public MigrationPlan(string name);
    public IReadOnlyDictionary`2<string, Transition> get_Transitions();
    [CompilerGeneratedAttribute]
public string get_Name();
    private MigrationPlan Add(string sourceState, string targetState, Type migration);
    public MigrationPlan To(string targetState);
    public MigrationPlan To(string targetState);
    public MigrationPlan To(string targetState, Type migration);
    public MigrationPlan From(string sourceState);
    public MigrationPlan ToWithReplace(string recoverState, string targetState);
    public MigrationPlan ToWithReplace(string recoverState, string targetState);
    public MigrationPlan ToWithClone(string startState, string endState, string targetState);
    protected virtual IEnumerable`1<Type> PreparePostMigrations(IEnumerable`1<Type> types);
    public virtual MigrationPlan AddPostMigration();
    public virtual string CreateRandomState();
    public MergeBuilder Merge();
    public virtual string get_InitialState();
    public string get_FinalState();
    public void Validate();
    protected virtual void ThrowOnUnknownInitialState(string state);
    public string Execute(IScope scope, string fromState, IMigrationBuilder migrationBuilder, ILogger logger);
    internal IReadOnlyList`1<string> FollowPath(string fromState, string toState);
}
public class Umbraco.Core.Migrations.NoopMigration : object {
    public sealed virtual void Migrate();
}
public interface Umbraco.Core.Migrations.PostMigrations.IPublishedSnapshotRebuilder {
    public abstract virtual void Rebuild();
}
public class Umbraco.Core.Migrations.PostMigrations.PublishedSnapshotRebuilder : object {
    public sealed virtual void Rebuild();
}
public class Umbraco.Core.Migrations.PostMigrations.RebuildPublishedSnapshot : object {
    private IPublishedSnapshotRebuilder _rebuilder;
    public RebuildPublishedSnapshot(IPublishedSnapshotRebuilder rebuilder);
    public sealed virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.Common.CreateKeysAndIndexes : MigrationBase {
    public CreateKeysAndIndexes(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.Common.DeleteKeysAndIndexes : MigrationBase {
    public DeleteKeysAndIndexes(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.UmbracoPlan : MigrationPlan {
    private static string InitPrefix;
    private static string InitSuffix;
    public string InitialState { get; }
    private static string GetInitState(SemVersion version);
    private static bool TryGetInitStateVersion(string state, String& version);
    public virtual string get_InitialState();
    protected virtual void ThrowOnUnknownInitialState(string state);
    protected void DefinePlan();
}
public class Umbraco.Core.Migrations.Upgrade.Upgrader : object {
    [CompilerGeneratedAttribute]
private MigrationPlan <Plan>k__BackingField;
    public string Name { get; }
    public MigrationPlan Plan { get; }
    public string StateValueKey { get; }
    public Upgrader(MigrationPlan plan);
    public string get_Name();
    [CompilerGeneratedAttribute]
public MigrationPlan get_Plan();
    public virtual string get_StateValueKey();
    public void Execute(IScopeProvider scopeProvider, IMigrationBuilder migrationBuilder, IKeyValueService keyValueService, ILogger logger);
    public virtual void BeforeMigrations(IScope scope, ILogger logger);
    public virtual void AfterMigrations(IScope scope, ILogger logger);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddContentNuTable : MigrationBase {
    public AddContentNuTable(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddContentTypeIsElementColumn : MigrationBase {
    public AddContentTypeIsElementColumn(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddLockObjects : MigrationBase {
    public AddLockObjects(IMigrationContext context);
    public virtual void Migrate();
    private void EnsureLockObject(int id, string name);
    internal static void EnsureLockObject(IUmbracoDatabase db, int id, string name);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddLogTableColumns : MigrationBase {
    public AddLogTableColumns(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddPackagesSectionAccess : MigrationBase {
    public AddPackagesSectionAccess(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddTypedLabels : MigrationBase {
    public AddTypedLabels(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddVariationTables1A : MigrationBase {
    public AddVariationTables1A(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.AddVariationTables2 : MigrationBase {
    public AddVariationTables2(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.ContentVariationMigration : MigrationBase {
    public ContentVariationMigration(IMigrationContext context);
    public virtual void Migrate();
    [CompilerGeneratedAttribute]
internal static byte <Migrate>g__GetNewValue|1_0(byte oldValue);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.ConvertRelatedLinksToMultiUrlPicker : MigrationBase {
    public ConvertRelatedLinksToMultiUrlPicker(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypeMigration : MigrationBase {
    private PreValueMigratorCollection _preValueMigrators;
    private PropertyEditorCollection _propertyEditors;
    private ILogger _logger;
    private static ISet`1<string> LegacyAliases;
    public DataTypeMigration(IMigrationContext context, PreValueMigratorCollection preValueMigrators, PropertyEditorCollection propertyEditors, ILogger logger);
    private static DataTypeMigration();
    public virtual void Migrate();
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.ContentPickerPreValueMigrator : DefaultPreValueMigrator {
    public virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.DecimalPreValueMigrator : DefaultPreValueMigrator {
    public virtual bool CanMigrate(string editorAlias);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.DefaultPreValueMigrator : object {
    public virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
    public sealed virtual object GetConfiguration(int dataTypeId, string editorAlias, Dictionary`2<string, PreValueDto> preValues);
    protected virtual IEnumerable`1<PreValueDto> GetPreValues(IEnumerable`1<PreValueDto> preValues);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.DropDownFlexiblePreValueMigrator : object {
    public sealed virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
    public sealed virtual object GetConfiguration(int dataTypeId, string editorAlias, Dictionary`2<string, PreValueDto> preValues);
}
public interface Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.IPreValueMigrator {
    public abstract virtual bool CanMigrate(string editorAlias);
    public abstract virtual string GetNewAlias(string editorAlias);
    public abstract virtual object GetConfiguration(int dataTypeId, string editorAlias, Dictionary`2<string, PreValueDto> preValues);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.ListViewPreValueMigrator : DefaultPreValueMigrator {
    public virtual bool CanMigrate(string editorAlias);
    protected virtual IEnumerable`1<PreValueDto> GetPreValues(IEnumerable`1<PreValueDto> preValues);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.MarkdownEditorPreValueMigrator : DefaultPreValueMigrator {
    public virtual bool CanMigrate(string editorAlias);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.MediaPickerPreValueMigrator : DefaultPreValueMigrator {
    private String[] _editors;
    public virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.NestedContentPreValueMigrator : DefaultPreValueMigrator {
    public virtual bool CanMigrate(string editorAlias);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
[TableNameAttribute("cmsDataTypePreValues")]
[ExplicitColumnsAttribute]
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.PreValueDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [ColumnAttribute("id")]
public int Id { get; public set; }
    [ColumnAttribute("datatypeNodeId")]
public int NodeId { get; public set; }
    [ColumnAttribute("alias")]
public string Alias { get; public set; }
    [ColumnAttribute("sortorder")]
public int SortOrder { get; public set; }
    [ColumnAttribute("value")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public abstract class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.PreValueMigratorBase : object {
    public abstract virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
    public abstract virtual object GetConfiguration(int dataTypeId, string editorAlias, Dictionary`2<string, PreValueDto> preValues);
    protected bool GetBoolValue(Dictionary`2<string, PreValueDto> preValues, string alias, bool defaultValue);
    protected decimal GetDecimalValue(Dictionary`2<string, PreValueDto> preValues, string alias, decimal defaultValue);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.PreValueMigratorCollection : BuilderCollectionBase`1<IPreValueMigrator> {
    private ILogger _logger;
    public PreValueMigratorCollection(IEnumerable`1<IPreValueMigrator> items, ILogger logger);
    public IPreValueMigrator GetMigrator(string editorAlias);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.PreValueMigratorCollectionBuilder : OrderedCollectionBuilderBase`3<PreValueMigratorCollectionBuilder, PreValueMigratorCollection, IPreValueMigrator> {
    protected PreValueMigratorCollectionBuilder This { get; }
    protected virtual PreValueMigratorCollectionBuilder get_This();
}
[RuntimeLevelAttribute]
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.PreValueMigratorComposer : object {
    public sealed virtual void Compose(Composition composition);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.RenamingPreValueMigrator : DefaultPreValueMigrator {
    private String[] _editors;
    public virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.RichTextPreValueMigrator : DefaultPreValueMigrator {
    public virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
    protected virtual object GetPreValueValue(PreValueDto preValue);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.UmbracoSliderPreValueMigrator : PreValueMigratorBase {
    public virtual bool CanMigrate(string editorAlias);
    public virtual object GetConfiguration(int dataTypeId, string editorAlias, Dictionary`2<string, PreValueDto> preValues);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DataTypes.ValueListPreValueMigrator : object {
    private String[] _editors;
    public sealed virtual bool CanMigrate(string editorAlias);
    public virtual string GetNewAlias(string editorAlias);
    public sealed virtual object GetConfiguration(int dataTypeId, string editorAlias, Dictionary`2<string, PreValueDto> preValues);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DropDownPropertyEditorsMigration : PropertyEditorsMigrationBase {
    public DropDownPropertyEditorsMigration(IMigrationContext context);
    public virtual void Migrate();
    private bool Migrate(IEnumerable`1<DataTypeDto> dataTypes);
    private void UpdateDataType(DataTypeDto dataType, ValueListConfiguration config, bool isMultiple);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DropMigrationsTable : MigrationBase {
    public DropMigrationsTable(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DropPreValueTable : MigrationBase {
    public DropPreValueTable(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DropTaskTables : MigrationBase {
    public DropTaskTables(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DropTemplateDesignColumn : MigrationBase {
    public DropTemplateDesignColumn(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.DropXmlTables : MigrationBase {
    public DropXmlTables(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.FallbackLanguage : MigrationBase {
    public FallbackLanguage(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.FixLanguageIsoCodeLength : MigrationBase {
    public FixLanguageIsoCodeLength(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.LanguageColumns : MigrationBase {
    public LanguageColumns(IMigrationContext context);
    public virtual void Migrate();
}
[DataContractAttribute]
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.LinkDto : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private GuidUdi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Target { get; public set; }
    [DataMemberAttribute]
public GuidUdi Udi { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public GuidUdi get_Udi();
    [CompilerGeneratedAttribute]
public void set_Udi(GuidUdi value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.MakeRedirectUrlVariant : MigrationBase {
    public MakeRedirectUrlVariant(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.MakeTagsVariant : MigrationBase {
    public MakeTagsVariant(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.MergeDateAndDateTimePropertyEditor : MigrationBase {
    public MergeDateAndDateTimePropertyEditor(IMigrationContext context);
    public virtual void Migrate();
    private List`1<DataTypeDto> GetDataTypes(string editorAlias);
}
[TableNameAttribute("cmsContentType")]
[PrimaryKeyAttribute("pk")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.Models.ContentTypeDto80 : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Thumbnail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAtRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDto <NodeDto>k__BackingField;
    [ColumnAttribute("pk")]
[PrimaryKeyColumnAttribute]
public int PrimaryKey { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[IndexAttribute("2")]
public int NodeId { get; public set; }
    [ColumnAttribute("alias")]
[NullSettingAttribute]
public string Alias { get; public set; }
    [ColumnAttribute("icon")]
[IndexAttribute("1")]
[NullSettingAttribute]
public string Icon { get; public set; }
    [ColumnAttribute("thumbnail")]
[ConstraintAttribute]
public string Thumbnail { get; public set; }
    [ColumnAttribute("description")]
[NullSettingAttribute]
[LengthAttribute("1500")]
public string Description { get; public set; }
    [ColumnAttribute("isContainer")]
[ConstraintAttribute]
public bool IsContainer { get; public set; }
    [ColumnAttribute("allowAtRoot")]
[ConstraintAttribute]
public bool AllowAtRoot { get; public set; }
    [ColumnAttribute("variations")]
[ConstraintAttribute]
public byte Variations { get; public set; }
    [ResultColumnAttribute]
public NodeDto NodeDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Thumbnail();
    [CompilerGeneratedAttribute]
public void set_Thumbnail(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsContainer();
    [CompilerGeneratedAttribute]
public void set_IsContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAtRoot();
    [CompilerGeneratedAttribute]
public void set_AllowAtRoot(bool value);
    [CompilerGeneratedAttribute]
public byte get_Variations();
    [CompilerGeneratedAttribute]
public void set_Variations(byte value);
    [CompilerGeneratedAttribute]
public NodeDto get_NodeDto();
    [CompilerGeneratedAttribute]
public void set_NodeDto(NodeDto value);
}
[TableNameAttribute("umbracoPropertyData")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.Models.PropertyDataDto80 : object {
    public static string TableName;
    public static int VarcharLength;
    public static int SegmentLength;
    private Nullable`1<decimal> _decimalValue;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PropertyTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IntegerValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DateValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VarcharValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextValue>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyTypeDto80 <PropertyTypeDto>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("versionId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentVersionDto")]
[IndexAttribute("2")]
public int VersionId { get; public set; }
    [ColumnAttribute("propertyTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Migrations.Upgrade.V_8_0_0.Models.PropertyTypeDto80")]
[IndexAttribute("1")]
public int PropertyTypeId { get; public set; }
    [ColumnAttribute("languageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
[IndexAttribute("1")]
[NullSettingAttribute]
public Nullable`1<int> LanguageId { get; public set; }
    [ColumnAttribute("segment")]
[IndexAttribute("1")]
[NullSettingAttribute]
[LengthAttribute("256")]
public string Segment { get; public set; }
    [ColumnAttribute("intValue")]
[NullSettingAttribute]
public Nullable`1<int> IntegerValue { get; public set; }
    [ColumnAttribute("decimalValue")]
[NullSettingAttribute]
public Nullable`1<decimal> DecimalValue { get; public set; }
    [ColumnAttribute("dateValue")]
[NullSettingAttribute]
public Nullable`1<DateTime> DateValue { get; public set; }
    [ColumnAttribute("varcharValue")]
[NullSettingAttribute]
[LengthAttribute("512")]
public string VarcharValue { get; public set; }
    [ColumnAttribute("textValue")]
[NullSettingAttribute]
[SpecialDbTypeAttribute("0")]
public string TextValue { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public PropertyTypeDto80 PropertyTypeDto { get; public set; }
    [IgnoreAttribute]
public object Value { get; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_VersionId();
    [CompilerGeneratedAttribute]
public void set_VersionId(int value);
    [CompilerGeneratedAttribute]
public int get_PropertyTypeId();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LanguageId();
    [CompilerGeneratedAttribute]
public void set_LanguageId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IntegerValue();
    [CompilerGeneratedAttribute]
public void set_IntegerValue(Nullable`1<int> value);
    public Nullable`1<decimal> get_DecimalValue();
    public void set_DecimalValue(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_DateValue();
    [CompilerGeneratedAttribute]
public void set_DateValue(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_VarcharValue();
    [CompilerGeneratedAttribute]
public void set_VarcharValue(string value);
    [CompilerGeneratedAttribute]
public string get_TextValue();
    [CompilerGeneratedAttribute]
public void set_TextValue(string value);
    [CompilerGeneratedAttribute]
public PropertyTypeDto80 get_PropertyTypeDto();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeDto(PropertyTypeDto80 value);
    public object get_Value();
    public PropertyDataDto80 Clone(int versionId);
    protected bool Equals(PropertyDataDto other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[TableNameAttribute("cmsPropertyType")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.Models.PropertyTypeDto80 : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PropertyTypeGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationRegExp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTypeDto <DataTypeDto>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("dataTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.DataTypeDto")]
public int DataTypeId { get; public set; }
    [ColumnAttribute("contentTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
public int ContentTypeId { get; public set; }
    [ColumnAttribute("propertyTypeGroupId")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.PropertyTypeGroupDto")]
public Nullable`1<int> PropertyTypeGroupId { get; public set; }
    [IndexAttribute("1")]
[ColumnAttribute("Alias")]
public string Alias { get; public set; }
    [ColumnAttribute("Name")]
[NullSettingAttribute]
public string Name { get; public set; }
    [ColumnAttribute("sortOrder")]
[ConstraintAttribute]
public int SortOrder { get; public set; }
    [ColumnAttribute("mandatory")]
[ConstraintAttribute]
public bool Mandatory { get; public set; }
    [ColumnAttribute("validationRegExp")]
[NullSettingAttribute]
public string ValidationRegExp { get; public set; }
    [ColumnAttribute("Description")]
[NullSettingAttribute]
[LengthAttribute("2000")]
public string Description { get; public set; }
    [ColumnAttribute("variations")]
[ConstraintAttribute]
public byte Variations { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public DataTypeDto DataTypeDto { get; public set; }
    [ColumnAttribute("UniqueID")]
[NullSettingAttribute]
[ConstraintAttribute]
[IndexAttribute("2")]
public Guid UniqueId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_DataTypeId();
    [CompilerGeneratedAttribute]
public void set_DataTypeId(int value);
    [CompilerGeneratedAttribute]
public int get_ContentTypeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PropertyTypeGroupId();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeGroupId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public bool get_Mandatory();
    [CompilerGeneratedAttribute]
public void set_Mandatory(bool value);
    [CompilerGeneratedAttribute]
public string get_ValidationRegExp();
    [CompilerGeneratedAttribute]
public void set_ValidationRegExp(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public byte get_Variations();
    [CompilerGeneratedAttribute]
public void set_Variations(byte value);
    [CompilerGeneratedAttribute]
public DataTypeDto get_DataTypeDto();
    [CompilerGeneratedAttribute]
public void set_DataTypeDto(DataTypeDto value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.PropertyEditorsMigration : MigrationBase {
    public PropertyEditorsMigration(IMigrationContext context);
    public virtual void Migrate();
    private void RenameDataType(string fromAlias, string toAlias, bool checkCollision);
}
public abstract class Umbraco.Core.Migrations.Upgrade.V_8_0_0.PropertyEditorsMigrationBase : MigrationBase {
    protected PropertyEditorsMigrationBase(IMigrationContext context);
    internal List`1<DataTypeDto> GetDataTypes(string editorAlias, bool strict);
    protected Int32[] ConvertStringValues(string val);
    internal bool UpdatePropertyDataDto(PropertyDataDto propData, ValueListConfiguration config, bool isMultiple);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.RadioAndCheckboxPropertyEditorsMigration : PropertyEditorsMigrationBase {
    public RadioAndCheckboxPropertyEditorsMigration(IMigrationContext context);
    public virtual void Migrate();
    private bool Migrate(IEnumerable`1<DataTypeDto> dataTypes, bool isMultiple);
    private void UpdateDataType(DataTypeDto dataType);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.RefactorMacroColumns : MigrationBase {
    public RefactorMacroColumns(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.RefactorVariantsModel : MigrationBase {
    public RefactorVariantsModel(IMigrationContext context);
    public virtual void Migrate();
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_0_0.RelatedLink : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Caption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Link>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInternal>k__BackingField;
    public Nullable`1<int> Id { get; internal set; }
    internal bool IsDeleted { get; internal set; }
    [JsonPropertyAttribute("caption")]
public string Caption { get; public set; }
    [JsonPropertyAttribute("link")]
public string Link { get; public set; }
    [JsonPropertyAttribute("newWindow")]
public bool NewWindow { get; public set; }
    [JsonPropertyAttribute("isInternal")]
public bool IsInternal { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal bool get_IsDeleted();
    [CompilerGeneratedAttribute]
internal void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public string get_Caption();
    [CompilerGeneratedAttribute]
public void set_Caption(string value);
    [CompilerGeneratedAttribute]
public string get_Link();
    [CompilerGeneratedAttribute]
public void set_Link(string value);
    [CompilerGeneratedAttribute]
public bool get_NewWindow();
    [CompilerGeneratedAttribute]
public void set_NewWindow(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInternal();
    [CompilerGeneratedAttribute]
public void set_IsInternal(bool value);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.RenameLabelAndRichTextPropertyEditorAliases : MigrationBase {
    public RenameLabelAndRichTextPropertyEditorAliases(IMigrationContext context);
    public virtual void Migrate();
    private void MigratePropertyEditorAlias(string oldAlias, string newAlias);
    private List`1<DataTypeDto> GetDataTypes(string editorAlias);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.RenameMediaVersionTable : MigrationBase {
    public RenameMediaVersionTable(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.RenameUmbracoDomainsTable : MigrationBase {
    public RenameUmbracoDomainsTable(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.SuperZero : MigrationBase {
    public SuperZero(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.TablesForScheduledPublishing : MigrationBase {
    public TablesForScheduledPublishing(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.TagsMigration : MigrationBase {
    public TagsMigration(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.TagsMigrationFix : MigrationBase {
    public TagsMigrationFix(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.UpdateDefaultMandatoryLanguage : MigrationBase {
    public UpdateDefaultMandatoryLanguage(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.UpdatePickerIntegerValuesToUdi : MigrationBase {
    public UpdatePickerIntegerValuesToUdi(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.UserForeignKeys : MigrationBase {
    public UserForeignKeys(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_0.VariantsMigration : MigrationBase {
    public VariantsMigration(IMigrationContext context);
    public virtual void Migrate();
    private void MigratePropertyData();
    private void CreatePropertyDataIndexes();
    private void MigrateContentAndPropertyTypes();
    private void MigrateContent();
    private void MigrateVersions();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_0_1.ChangeNuCacheJsonFormat : MigrationBase {
    public ChangeNuCacheJsonFormat(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_1_0.ConvertTinyMceAndGridMediaUrlsToLocalLink : MigrationBase {
    private IMediaService _mediaService;
    public ConvertTinyMceAndGridMediaUrlsToLocalLink(IMigrationContext context, IMediaService mediaService);
    public virtual void Migrate();
    private string UpdateMediaUrls(Regex mediaLinkPattern, string value, Boolean& changed);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_1_0.FixContentNuCascade : MigrationBase {
    public FixContentNuCascade(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_1_0.RenameUserLoginDtoDateIndex : MigrationBase {
    public RenameUserLoginDtoDateIndex(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_10_0.AddPropertyTypeLabelOnTopColumn : MigrationBase {
    public AddPropertyTypeLabelOnTopColumn(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_15_0.AddCmsContentNuByteColumn : MigrationBase {
    private static string TempTableName;
    public AddCmsContentNuByteColumn(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_15_0.UpdateCmsPropertyGroupIdSeed : MigrationBase {
    public UpdateCmsPropertyGroupIdSeed(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_15_0.UpgradedIncludeIndexes : MigrationBase {
    public UpgradedIncludeIndexes(IMigrationContext context);
    public virtual void Migrate();
    private void DeleteIndexes(String[] toDelete);
    private void CreateIndexes(String[] toCreate);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_17_0.AddPropertyTypeGroupColumns : MigrationBase {
    public AddPropertyTypeGroupColumns(IMigrationContext context);
    public virtual void Migrate();
    [IteratorStateMachineAttribute("Umbraco.Core.Migrations.Upgrade.V_8_17_0.AddPropertyTypeGroupColumns/<PopulateAliases>d__2")]
internal IEnumerable`1<PropertyTypeGroupDto> PopulateAliases(IEnumerable`1<PropertyTypeGroupDto> dtos);
}
internal class Umbraco.Core.Migrations.Upgrade.V_8_18_0.AddContentVersionCleanupFeature : MigrationBase {
    public AddContentVersionCleanupFeature(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_6_0.AddMainDomLock : MigrationBase {
    public AddMainDomLock(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_6_0.AddNewRelationTypes : MigrationBase {
    public AddNewRelationTypes(IMigrationContext context);
    public virtual void Migrate();
    private void CreateRelation(string alias, string name);
}
public class Umbraco.Core.Migrations.Upgrade.V_8_6_0.AddPropertyTypeValidationMessageColumns : MigrationBase {
    public AddPropertyTypeValidationMessageColumns(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_6_0.MissingContentVersionsIndexes : MigrationBase {
    private static string IndexName;
    public MissingContentVersionsIndexes(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_6_0.MissingDictionaryIndex : MigrationBase {
    public MissingDictionaryIndex(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_6_0.UpdateRelationTypeTable : MigrationBase {
    public UpdateRelationTypeTable(IMigrationContext context);
    public virtual void Migrate();
}
public class Umbraco.Core.Migrations.Upgrade.V_8_9_0.ExternalLoginTableUserData : MigrationBase {
    public ExternalLoginTableUserData(IMigrationContext context);
    public virtual void Migrate();
}
[DataContractAttribute]
internal class Umbraco.Core.Models.AuditEntry : EntityBase {
    private int _performingUserId;
    private string _performingDetails;
    private string _performingIp;
    private int _affectedUserId;
    private string _affectedDetails;
    private string _eventType;
    private string _eventDetails;
    public int PerformingUserId { get; public set; }
    public string PerformingDetails { get; public set; }
    public string PerformingIp { get; public set; }
    public DateTime EventDateUtc { get; public set; }
    public int AffectedUserId { get; public set; }
    public string AffectedDetails { get; public set; }
    public string EventType { get; public set; }
    public string EventDetails { get; public set; }
    public sealed virtual int get_PerformingUserId();
    public sealed virtual void set_PerformingUserId(int value);
    public sealed virtual string get_PerformingDetails();
    public sealed virtual void set_PerformingDetails(string value);
    public sealed virtual string get_PerformingIp();
    public sealed virtual void set_PerformingIp(string value);
    public sealed virtual DateTime get_EventDateUtc();
    public sealed virtual void set_EventDateUtc(DateTime value);
    public sealed virtual int get_AffectedUserId();
    public sealed virtual void set_AffectedUserId(int value);
    public sealed virtual string get_AffectedDetails();
    public sealed virtual void set_AffectedDetails(string value);
    public sealed virtual string get_EventType();
    public sealed virtual void set_EventType(string value);
    public sealed virtual string get_EventDetails();
    public sealed virtual void set_EventDetails(string value);
}
public class Umbraco.Core.Models.AuditItem : EntityBase {
    [CompilerGeneratedAttribute]
private AuditType <AuditType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    public AuditType AuditType { get; }
    public string EntityType { get; }
    public int UserId { get; }
    public string Comment { get; }
    public string Parameters { get; }
    public AuditItem(int objectId, AuditType type, int userId, string entityType, string comment, string parameters);
    [CompilerGeneratedAttribute]
public sealed virtual AuditType get_AuditType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_EntityType();
    [CompilerGeneratedAttribute]
public sealed virtual int get_UserId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Comment();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Parameters();
}
public enum Umbraco.Core.Models.AuditType : Enum {
    public int value__;
    public static AuditType New;
    public static AuditType Save;
    public static AuditType SaveVariant;
    public static AuditType Open;
    public static AuditType Delete;
    public static AuditType Publish;
    public static AuditType PublishVariant;
    public static AuditType SendToPublish;
    public static AuditType SendToPublishVariant;
    public static AuditType Unpublish;
    public static AuditType UnpublishVariant;
    public static AuditType Move;
    public static AuditType Copy;
    public static AuditType AssignDomain;
    public static AuditType PublicAccess;
    public static AuditType Sort;
    public static AuditType Notify;
    public static AuditType System;
    public static AuditType RollBack;
    public static AuditType PackagerInstall;
    public static AuditType PackagerUninstall;
    public static AuditType Custom;
    public static AuditType ContentVersionPreventCleanup;
    public static AuditType ContentVersionEnableCleanup;
}
public class Umbraco.Core.Models.Blocks.BlockEditorData : object {
    private string _propertyEditorAlias;
    [CompilerGeneratedAttribute]
private static BlockEditorData <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private BlockValue <BlockValue>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ContentAndSettingsReference> <References>k__BackingField;
    public static BlockEditorData Empty { get; }
    public JToken Layout { get; }
    public BlockValue BlockValue { get; }
    public List`1<ContentAndSettingsReference> References { get; }
    public BlockEditorData(string propertyEditorAlias, IEnumerable`1<ContentAndSettingsReference> references, BlockValue blockValue);
    private static BlockEditorData();
    [CompilerGeneratedAttribute]
public static BlockEditorData get_Empty();
    public JToken get_Layout();
    [CompilerGeneratedAttribute]
public BlockValue get_BlockValue();
    [CompilerGeneratedAttribute]
public List`1<ContentAndSettingsReference> get_References();
}
public abstract class Umbraco.Core.Models.Blocks.BlockEditorDataConverter : object {
    private string _propertyEditorAlias;
    protected BlockEditorDataConverter(string propertyEditorAlias);
    public BlockEditorData ConvertFrom(JToken json);
    public bool TryDeserialize(string json, BlockEditorData& blockEditorData);
    public BlockEditorData Deserialize(string json);
    private BlockEditorData Convert(BlockValue value);
    protected abstract virtual IEnumerable`1<ContentAndSettingsReference> GetBlockReferences(JToken jsonLayout);
}
public class Umbraco.Core.Models.Blocks.BlockItemData : object {
    [CompilerGeneratedAttribute]
private Guid <ContentTypeKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTypeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <RawPropertyValues>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, BlockPropertyValue> <PropertyValues>k__BackingField;
    [JsonPropertyAttribute("contentTypeKey")]
public Guid ContentTypeKey { get; public set; }
    [JsonIgnoreAttribute]
public string ContentTypeAlias { get; public set; }
    [JsonPropertyAttribute("udi")]
[JsonConverterAttribute("Umbraco.Core.Serialization.UdiJsonConverter")]
public Udi Udi { get; public set; }
    [JsonIgnoreAttribute]
public Guid Key { get; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> RawPropertyValues { get; public set; }
    [JsonIgnoreAttribute]
public IDictionary`2<string, BlockPropertyValue> PropertyValues { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_ContentTypeKey();
    [CompilerGeneratedAttribute]
public void set_ContentTypeKey(Guid value);
    [CompilerGeneratedAttribute]
public string get_ContentTypeAlias();
    [CompilerGeneratedAttribute]
public void set_ContentTypeAlias(string value);
    [CompilerGeneratedAttribute]
public Udi get_Udi();
    [CompilerGeneratedAttribute]
public void set_Udi(Udi value);
    public Guid get_Key();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_RawPropertyValues();
    [CompilerGeneratedAttribute]
public void set_RawPropertyValues(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, BlockPropertyValue> get_PropertyValues();
    [CompilerGeneratedAttribute]
public void set_PropertyValues(IDictionary`2<string, BlockPropertyValue> value);
}
public class Umbraco.Core.Models.Blocks.BlockListEditorDataConverter : BlockEditorDataConverter {
    protected virtual IEnumerable`1<ContentAndSettingsReference> GetBlockReferences(JToken jsonLayout);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Blocks.BlockListItem : object {
    [CompilerGeneratedAttribute]
private Udi <ContentUdi>k__BackingField;
    [CompilerGeneratedAttribute]
private IPublishedElement <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private Udi <SettingsUdi>k__BackingField;
    [CompilerGeneratedAttribute]
private IPublishedElement <Settings>k__BackingField;
    [DataMemberAttribute]
public Udi ContentUdi { get; }
    [DataMemberAttribute]
public IPublishedElement Content { get; }
    [DataMemberAttribute]
public Udi SettingsUdi { get; }
    [DataMemberAttribute]
public IPublishedElement Settings { get; }
    public BlockListItem(Udi contentUdi, IPublishedElement content, Udi settingsUdi, IPublishedElement settings);
    [CompilerGeneratedAttribute]
public sealed virtual Udi get_ContentUdi();
    [CompilerGeneratedAttribute]
public IPublishedElement get_Content();
    [CompilerGeneratedAttribute]
public Udi get_SettingsUdi();
    [CompilerGeneratedAttribute]
public sealed virtual IPublishedElement get_Settings();
}
public class Umbraco.Core.Models.Blocks.BlockListItem`1 : BlockListItem {
    [CompilerGeneratedAttribute]
private T <Content>k__BackingField;
    public T Content { get; }
    public BlockListItem`1(Udi contentUdi, T content, Udi settingsUdi, IPublishedElement settings);
    [CompilerGeneratedAttribute]
public T get_Content();
}
public class Umbraco.Core.Models.Blocks.BlockListItem`2 : BlockListItem`1<TContent> {
    [CompilerGeneratedAttribute]
private TSettings <Settings>k__BackingField;
    public TSettings Settings { get; }
    public BlockListItem`2(Udi contentUdi, TContent content, Udi settingsUdi, TSettings settings);
    [CompilerGeneratedAttribute]
public TSettings get_Settings();
}
public class Umbraco.Core.Models.Blocks.BlockListLayoutItem : object {
    [CompilerGeneratedAttribute]
private Udi <ContentUdi>k__BackingField;
    [CompilerGeneratedAttribute]
private Udi <SettingsUdi>k__BackingField;
    [JsonPropertyAttribute]
[JsonConverterAttribute("Umbraco.Core.Serialization.UdiJsonConverter")]
public Udi ContentUdi { get; public set; }
    [JsonPropertyAttribute]
[JsonConverterAttribute("Umbraco.Core.Serialization.UdiJsonConverter")]
public Udi SettingsUdi { get; public set; }
    [CompilerGeneratedAttribute]
public Udi get_ContentUdi();
    [CompilerGeneratedAttribute]
public void set_ContentUdi(Udi value);
    [CompilerGeneratedAttribute]
public Udi get_SettingsUdi();
    [CompilerGeneratedAttribute]
public void set_SettingsUdi(Udi value);
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class Umbraco.Core.Models.Blocks.BlockListModel : ReadOnlyCollection`1<BlockListItem> {
    [CompilerGeneratedAttribute]
private static BlockListModel <Empty>k__BackingField;
    public static BlockListModel Empty { get; }
    public BlockListItem Item { get; }
    public BlockListItem Item { get; }
    public BlockListModel(IList`1<BlockListItem> list);
    private static BlockListModel();
    [CompilerGeneratedAttribute]
public static BlockListModel get_Empty();
    public BlockListItem get_Item(Guid contentKey);
    public BlockListItem get_Item(Udi contentUdi);
}
public class Umbraco.Core.Models.Blocks.BlockValue : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, JToken> <Layout>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockItemData> <ContentData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BlockItemData> <SettingsData>k__BackingField;
    [JsonPropertyAttribute("layout")]
public IDictionary`2<string, JToken> Layout { get; public set; }
    [JsonPropertyAttribute("contentData")]
public List`1<BlockItemData> ContentData { get; public set; }
    [JsonPropertyAttribute("settingsData")]
public List`1<BlockItemData> SettingsData { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JToken> get_Layout();
    [CompilerGeneratedAttribute]
public void set_Layout(IDictionary`2<string, JToken> value);
    [CompilerGeneratedAttribute]
public List`1<BlockItemData> get_ContentData();
    [CompilerGeneratedAttribute]
public void set_ContentData(List`1<BlockItemData> value);
    [CompilerGeneratedAttribute]
public List`1<BlockItemData> get_SettingsData();
    [CompilerGeneratedAttribute]
public void set_SettingsData(List`1<BlockItemData> value);
}
public class Umbraco.Core.Models.Blocks.ContentAndSettingsReference : ValueType {
    [CompilerGeneratedAttribute]
private Udi <ContentUdi>k__BackingField;
    [CompilerGeneratedAttribute]
private Udi <SettingsUdi>k__BackingField;
    public Udi ContentUdi { get; }
    public Udi SettingsUdi { get; }
    public ContentAndSettingsReference(Udi contentUdi, Udi settingsUdi);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Udi get_ContentUdi();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Udi get_SettingsUdi();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ContentAndSettingsReference other);
    public virtual int GetHashCode();
    public static bool op_Equality(ContentAndSettingsReference left, ContentAndSettingsReference right);
    public static bool op_Inequality(ContentAndSettingsReference left, ContentAndSettingsReference right);
}
public interface Umbraco.Core.Models.Blocks.IBlockReference {
    public Udi ContentUdi { get; }
    public abstract virtual Udi get_ContentUdi();
}
public interface Umbraco.Core.Models.Blocks.IBlockReference`1 {
    public TSettings Settings { get; }
    public abstract virtual TSettings get_Settings();
}
[DataContractAttribute]
internal class Umbraco.Core.Models.Consent : EntityBase {
    private bool _current;
    private string _source;
    private string _context;
    private string _action;
    private ConsentState _state;
    private string _comment;
    [CompilerGeneratedAttribute]
private List`1<IConsent> <HistoryInternal>k__BackingField;
    public bool Current { get; public set; }
    public string Source { get; public set; }
    public string Context { get; public set; }
    public string Action { get; public set; }
    public ConsentState State { get; public set; }
    public string Comment { get; public set; }
    public IEnumerable`1<IConsent> History { get; }
    internal List`1<IConsent> HistoryInternal { get; internal set; }
    public sealed virtual bool get_Current();
    public void set_Current(bool value);
    public sealed virtual string get_Source();
    public void set_Source(string value);
    public sealed virtual string get_Context();
    public void set_Context(string value);
    public sealed virtual string get_Action();
    public void set_Action(string value);
    public sealed virtual ConsentState get_State();
    public void set_State(ConsentState value);
    public sealed virtual string get_Comment();
    public void set_Comment(string value);
    public sealed virtual IEnumerable`1<IConsent> get_History();
    [CompilerGeneratedAttribute]
internal List`1<IConsent> get_HistoryInternal();
    [CompilerGeneratedAttribute]
internal void set_HistoryInternal(List`1<IConsent> value);
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.ConsentExtensions : object {
    [ExtensionAttribute]
public static bool IsGranted(IConsent consent);
    [ExtensionAttribute]
public static bool IsRevoked(IConsent consent);
}
[FlagsAttribute]
public enum Umbraco.Core.Models.ConsentState : Enum {
    public int value__;
    public static ConsentState None;
    public static ConsentState Pending;
    public static ConsentState Granted;
    public static ConsentState Revoked;
}
[DataContractAttribute]
public class Umbraco.Core.Models.Content : ContentBase {
    private Nullable`1<int> _templateId;
    private ContentScheduleCollection _schedule;
    private bool _published;
    private PublishedState _publishedState;
    private HashSet`1<string> _editedCultures;
    private ContentCultureInfosCollection _publishInfos;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3<HashSet`1<string>, HashSet`1<string>, HashSet`1<string>> _currentPublishCultureChanges;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3<HashSet`1<string>, HashSet`1<string>, HashSet`1<string>> _previousPublishCultureChanges;
    [CompilerGeneratedAttribute]
private bool <Edited>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <PublishDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PublisherId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PublishTemplateId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PublishedVersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Blueprint>k__BackingField;
    [DoNotCloneAttribute]
public ContentScheduleCollection ContentSchedule { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> TemplateId { get; public set; }
    [DataMemberAttribute]
public bool Published { get; public set; }
    [DataMemberAttribute]
public PublishedState PublishedState { get; public set; }
    [IgnoreDataMemberAttribute]
public bool Edited { get; public set; }
    [IgnoreDataMemberAttribute]
public Nullable`1<DateTime> PublishDate { get; public set; }
    [IgnoreDataMemberAttribute]
public Nullable`1<int> PublisherId { get; public set; }
    [IgnoreDataMemberAttribute]
public Nullable`1<int> PublishTemplateId { get; public set; }
    [IgnoreDataMemberAttribute]
public string PublishName { get; public set; }
    [IgnoreDataMemberAttribute]
public IEnumerable`1<string> EditedCultures { get; public set; }
    [IgnoreDataMemberAttribute]
public IEnumerable`1<string> PublishedCultures { get; }
    [IgnoreDataMemberAttribute]
public ContentCultureInfosCollection PublishCultureInfos { get; public set; }
    [IgnoreDataMemberAttribute]
public int PublishedVersionId { get; public set; }
    [DataMemberAttribute]
public bool Blueprint { get; public set; }
    public Content(string name, IContent parent, IContentType contentType, string culture);
    public Content(string name, IContent parent, IContentType contentType, PropertyCollection properties, string culture);
    public Content(string name, int parentId, IContentType contentType, string culture);
    public Content(string name, int parentId, IContentType contentType, PropertyCollection properties, string culture);
    public sealed virtual ContentScheduleCollection get_ContentSchedule();
    public sealed virtual void set_ContentSchedule(ContentScheduleCollection value);
    private void ScheduleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual Nullable`1<int> get_TemplateId();
    public sealed virtual void set_TemplateId(Nullable`1<int> value);
    public sealed virtual bool get_Published();
    public sealed virtual void set_Published(bool value);
    public sealed virtual PublishedState get_PublishedState();
    public sealed virtual void set_PublishedState(PublishedState value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Edited();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Edited(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_PublishDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PublishDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PublisherId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PublisherId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PublishTemplateId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PublishTemplateId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PublishName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PublishName(string value);
    public sealed virtual IEnumerable`1<string> get_EditedCultures();
    public sealed virtual void set_EditedCultures(IEnumerable`1<string> value);
    public sealed virtual IEnumerable`1<string> get_PublishedCultures();
    public sealed virtual bool IsCulturePublished(string culture);
    public sealed virtual bool IsCultureEdited(string culture);
    public sealed virtual ContentCultureInfosCollection get_PublishCultureInfos();
    public sealed virtual void set_PublishCultureInfos(ContentCultureInfosCollection value);
    public sealed virtual string GetPublishName(string culture);
    public sealed virtual Nullable`1<DateTime> GetPublishDate(string culture);
    private void PublishNamesCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual int get_PublishedVersionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PublishedVersionId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Blueprint();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Blueprint(bool value);
    internal void ChangeContentType(IContentType contentType);
    internal void ChangeContentType(IContentType contentType, bool clearProperties);
    public virtual void ResetWereDirtyProperties();
    public virtual void ResetDirtyProperties(bool rememberDirty);
    public virtual bool IsPropertyDirty(string propertyName);
    public virtual bool WasPropertyDirty(string propertyName);
    public sealed virtual IContent DeepCloneWithResetIdentities();
    protected virtual void PerformDeepClone(object clone);
}
[DataContractAttribute]
[DebuggerDisplayAttribute("Id: {Id}, Name: {Name}, ContentType: {ContentType.Alias}")]
public abstract class Umbraco.Core.Models.ContentBase : TreeEntityBase {
    private int _contentTypeId;
    private int _writerId;
    private PropertyCollection _properties;
    private ContentCultureInfosCollection _cultureInfos;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<PropertyType> <AllPropertyTypes>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3<HashSet`1<string>, HashSet`1<string>, HashSet`1<string>> _currentCultureChanges;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3<HashSet`1<string>, HashSet`1<string>, HashSet`1<string>> _previousCultureChanges;
    [CompilerGeneratedAttribute]
private ISimpleContentType <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionId>k__BackingField;
    internal IReadOnlyList`1<PropertyType> AllPropertyTypes { get; }
    [IgnoreDataMemberAttribute]
public ISimpleContentType ContentType { get; private set; }
    [DataMemberAttribute]
public int WriterId { get; public set; }
    [IgnoreDataMemberAttribute]
public int VersionId { get; public set; }
    [DataMemberAttribute]
public int ContentTypeId { get; private set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public PropertyCollection Properties { get; public set; }
    public IEnumerable`1<string> AvailableCultures { get; }
    [DataMemberAttribute]
public ContentCultureInfosCollection CultureInfos { get; public set; }
    protected ContentBase(string name, int parentId, IContentTypeComposition contentType, PropertyCollection properties, string culture);
    protected ContentBase(string name, IContentBase parent, IContentTypeComposition contentType, PropertyCollection properties, string culture);
    private ContentBase(string name, IContentTypeComposition contentType, PropertyCollection properties, string culture);
    [CompilerGeneratedAttribute]
internal IReadOnlyList`1<PropertyType> get_AllPropertyTypes();
    [CompilerGeneratedAttribute]
public sealed virtual ISimpleContentType get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(ISimpleContentType value);
    internal void ChangeContentType(ISimpleContentType contentType);
    protected void PropertiesChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual int get_WriterId();
    public sealed virtual void set_WriterId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_VersionId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VersionId(int value);
    public sealed virtual int get_ContentTypeId();
    private void set_ContentTypeId(int value);
    public sealed virtual PropertyCollection get_Properties();
    public sealed virtual void set_Properties(PropertyCollection value);
    public sealed virtual IEnumerable`1<string> get_AvailableCultures();
    public sealed virtual bool IsCultureAvailable(string culture);
    public sealed virtual ContentCultureInfosCollection get_CultureInfos();
    public sealed virtual void set_CultureInfos(ContentCultureInfosCollection value);
    public sealed virtual string GetCultureName(string culture);
    public sealed virtual Nullable`1<DateTime> GetUpdateDate(string culture);
    public sealed virtual void SetCultureName(string name, string culture);
    private void ClearCultureInfo(string culture);
    private void CultureInfosCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public sealed virtual bool HasProperty(string propertyTypeAlias);
    public sealed virtual object GetValue(string propertyTypeAlias, string culture, string segment, bool published);
    public sealed virtual TValue GetValue(string propertyTypeAlias, string culture, string segment, bool published);
    public sealed virtual void SetValue(string propertyTypeAlias, object value, string culture, string segment);
    public virtual void ResetWereDirtyProperties();
    public virtual void ResetDirtyProperties(bool rememberDirty);
    public virtual bool IsDirty();
    public virtual bool WasDirty();
    public bool IsEntityDirty();
    public bool WasEntityDirty();
    public virtual bool IsPropertyDirty(string propertyName);
    public virtual bool WasPropertyDirty(string propertyName);
    public virtual IEnumerable`1<string> GetDirtyProperties();
    public virtual IEnumerable`1<string> GetWereDirtyProperties();
    protected virtual void PerformDeepClone(object clone);
}
public class Umbraco.Core.Models.ContentCultureInfos : BeingDirtyBase {
    private DateTime _date;
    private string _name;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    public string Culture { get; }
    public string Name { get; public set; }
    public DateTime Date { get; public set; }
    public ContentCultureInfos(string culture);
    internal ContentCultureInfos(ContentCultureInfos other);
    [CompilerGeneratedAttribute]
public string get_Culture();
    public string get_Name();
    public void set_Name(string value);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public sealed virtual object DeepClone();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ContentCultureInfos other);
    public virtual int GetHashCode();
    public void Deconstruct(String& culture, String& name);
    public void Deconstruct(String& culture, String& name, DateTime& date);
}
public class Umbraco.Core.Models.ContentCultureInfosCollection : ObservableDictionary`2<string, ContentCultureInfos> {
    public void AddOrUpdate(string culture, string name, DateTime date);
    public sealed virtual object DeepClone();
}
public class Umbraco.Core.Models.ContentDataIntegrityReport : object {
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<int, ContentDataIntegrityReportEntry> <DetectedIssues>k__BackingField;
    public bool Ok { get; }
    public IReadOnlyDictionary`2<int, ContentDataIntegrityReportEntry> DetectedIssues { get; }
    public IReadOnlyDictionary`2<int, ContentDataIntegrityReportEntry> FixedIssues { get; }
    public ContentDataIntegrityReport(IReadOnlyDictionary`2<int, ContentDataIntegrityReportEntry> detectedIssues);
    public bool get_Ok();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<int, ContentDataIntegrityReportEntry> get_DetectedIssues();
    public IReadOnlyDictionary`2<int, ContentDataIntegrityReportEntry> get_FixedIssues();
}
public class Umbraco.Core.Models.ContentDataIntegrityReportEntry : object {
    [CompilerGeneratedAttribute]
private IssueType <IssueType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Fixed>k__BackingField;
    public IssueType IssueType { get; }
    public bool Fixed { get; public set; }
    public ContentDataIntegrityReportEntry(IssueType issueType);
    [CompilerGeneratedAttribute]
public IssueType get_IssueType();
    [CompilerGeneratedAttribute]
public bool get_Fixed();
    [CompilerGeneratedAttribute]
public void set_Fixed(bool value);
}
public class Umbraco.Core.Models.ContentDataIntegrityReportOptions : object {
    [CompilerGeneratedAttribute]
private bool <FixIssues>k__BackingField;
    public bool FixIssues { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_FixIssues();
    [CompilerGeneratedAttribute]
public void set_FixIssues(bool value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.ContentEditing.ContentApp : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <View>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ViewModel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentAppBadge <Badge>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public int Weight { get; public set; }
    [DataMemberAttribute]
public string Icon { get; public set; }
    [DataMemberAttribute]
public string View { get; public set; }
    [DataMemberAttribute]
public object ViewModel { get; public set; }
    [DataMemberAttribute]
public bool Active { get; public set; }
    [DataMemberAttribute]
public ContentAppBadge Badge { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_View();
    [CompilerGeneratedAttribute]
public void set_View(string value);
    [CompilerGeneratedAttribute]
public object get_ViewModel();
    [CompilerGeneratedAttribute]
public void set_ViewModel(object value);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(bool value);
    [CompilerGeneratedAttribute]
public ContentAppBadge get_Badge();
    [CompilerGeneratedAttribute]
public void set_Badge(ContentAppBadge value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.ContentEditing.ContentAppBadge : object {
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentAppBadgeType <Type>k__BackingField;
    [DataMemberAttribute]
public int Count { get; public set; }
    [DataMemberAttribute]
public ContentAppBadgeType Type { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public ContentAppBadgeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ContentAppBadgeType value);
}
[DataContractAttribute]
[JsonConverterAttribute("Newtonsoft.Json.Converters.StringEnumConverter")]
public enum Umbraco.Core.Models.ContentEditing.ContentAppBadgeType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ContentAppBadgeType Default;
    [EnumMemberAttribute]
public static ContentAppBadgeType Warning;
    [EnumMemberAttribute]
public static ContentAppBadgeType Alert;
}
[DataContractAttribute]
public class Umbraco.Core.Models.ContentEditing.HistoryCleanup : BeingDirtyBase {
    private bool _preventCleanup;
    private Nullable`1<int> _keepAllVersionsNewerThanDays;
    private Nullable`1<int> _keepLatestVersionPerDayForDays;
    [DataMemberAttribute]
public bool PreventCleanup { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> KeepAllVersionsNewerThanDays { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> KeepLatestVersionPerDayForDays { get; public set; }
    public bool get_PreventCleanup();
    public void set_PreventCleanup(bool value);
    public Nullable`1<int> get_KeepAllVersionsNewerThanDays();
    public void set_KeepAllVersionsNewerThanDays(Nullable`1<int> value);
    public Nullable`1<int> get_KeepLatestVersionPerDayForDays();
    public void set_KeepLatestVersionPerDayForDays(Nullable`1<int> value);
}
public interface Umbraco.Core.Models.ContentEditing.IContentAppFactory {
    public abstract virtual ContentApp GetContentAppFor(object source, IEnumerable`1<IReadOnlyUserGroup> userGroups);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.ContentRepositoryExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<string> GetCulturesUnpublishing(IContent content);
    [ExtensionAttribute]
public static void CopyFrom(IContent content, IContent other, string culture);
    [ExtensionAttribute]
public static void SetPublishInfo(IContent content, string culture, string name, DateTime date);
    [ExtensionAttribute]
public static void AdjustDates(IContent content, DateTime date);
    [ExtensionAttribute]
public static void SetCultureEdited(IContent content, IEnumerable`1<string> cultures);
    [ExtensionAttribute]
public static void SetCultureInfo(IContentBase content, string culture, string name, DateTime date);
    [ExtensionAttribute]
public static bool PublishCulture(IContent content, CultureImpact impact);
    [ExtensionAttribute]
public static bool UnpublishCulture(IContent content, string culture);
    [ExtensionAttribute]
public static void ClearPublishInfos(IContent content);
    [ExtensionAttribute]
public static bool ClearPublishInfo(IContent content, string culture);
    [ExtensionAttribute]
public static void TouchCulture(IContentBase content, string culture);
}
[DataContractAttribute]
public class Umbraco.Core.Models.ContentSchedule : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentScheduleAction <Action>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; internal set; }
    [DataMemberAttribute]
public string Culture { get; }
    [DataMemberAttribute]
public DateTime Date { get; }
    [DataMemberAttribute]
public ContentScheduleAction Action { get; }
    public ContentSchedule(string culture, DateTime date, ContentScheduleAction action);
    public ContentSchedule(Guid id, string culture, DateTime date, ContentScheduleAction action);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public ContentScheduleAction get_Action();
    public virtual bool Equals(object obj);
    public bool Equals(ContentSchedule other);
    public sealed virtual object DeepClone();
}
public enum Umbraco.Core.Models.ContentScheduleAction : Enum {
    public int value__;
    public static ContentScheduleAction Release;
    public static ContentScheduleAction Expire;
}
public class Umbraco.Core.Models.ContentScheduleCollection : object {
    private Dictionary`2<string, SortedList`2<DateTime, ContentSchedule>> _schedule;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public IReadOnlyList`1<ContentSchedule> FullSchedule { get; }
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void ClearCollectionChangedEvents();
    private void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    public void Add(ContentSchedule schedule);
    public bool Add(Nullable`1<DateTime> releaseDate, Nullable`1<DateTime> expireDate);
    public bool Add(string culture, Nullable`1<DateTime> releaseDate, Nullable`1<DateTime> expireDate);
    public void Remove(ContentSchedule change);
    public void Clear(ContentScheduleAction action, Nullable`1<DateTime> changeDate);
    public void Clear(string culture, ContentScheduleAction action, Nullable`1<DateTime> date);
    public IReadOnlyList`1<ContentSchedule> GetPending(ContentScheduleAction action, DateTime date);
    public IEnumerable`1<ContentSchedule> GetSchedule(Nullable`1<ContentScheduleAction> action);
    public IEnumerable`1<ContentSchedule> GetSchedule(string culture, Nullable`1<ContentScheduleAction> action);
    public IReadOnlyList`1<ContentSchedule> get_FullSchedule();
    public sealed virtual object DeepClone();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ContentScheduleCollection other);
}
[DataContractAttribute]
public enum Umbraco.Core.Models.ContentStatus : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ContentStatus Unpublished;
    [EnumMemberAttribute]
public static ContentStatus Published;
    [EnumMemberAttribute]
public static ContentStatus Expired;
    [EnumMemberAttribute]
public static ContentStatus Trashed;
    [EnumMemberAttribute]
public static ContentStatus AwaitingRelease;
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.ContentTagsExtensions : object {
    [ExtensionAttribute]
public static void AssignTags(IContentBase content, string propertyTypeAlias, IEnumerable`1<string> tags, bool merge, string culture);
    [ExtensionAttribute]
public static void RemoveTags(IContentBase content, string propertyTypeAlias, IEnumerable`1<string> tags, string culture);
    [ExtensionAttribute]
private static Property GetTagProperty(IContentBase content, string propertyTypeAlias);
}
[DataContractAttribute]
public class Umbraco.Core.Models.ContentType : ContentTypeCompositionBase {
    public static bool SupportsPublishingConst;
    private int _defaultTemplate;
    private IEnumerable`1<ITemplate> _allowedTemplates;
    private static DelegateEqualityComparer`1<IEnumerable`1<ITemplate>> TemplateComparer;
    private HistoryCleanup _historyCleanup;
    public bool SupportsPublishing { get; }
    [IgnoreDataMemberAttribute]
public ITemplate DefaultTemplate { get; }
    [DataMemberAttribute]
internal int DefaultTemplateId { get; internal set; }
    [DataMemberAttribute]
public IEnumerable`1<ITemplate> AllowedTemplates { get; public set; }
    public HistoryCleanup HistoryCleanup { get; public set; }
    public ContentType(int parentId);
    public ContentType(IContentType parent, string alias);
    private static ContentType();
    public virtual ISimpleContentType ToSimple();
    public virtual bool get_SupportsPublishing();
    public sealed virtual ITemplate get_DefaultTemplate();
    internal int get_DefaultTemplateId();
    internal void set_DefaultTemplateId(int value);
    public sealed virtual IEnumerable`1<ITemplate> get_AllowedTemplates();
    public sealed virtual void set_AllowedTemplates(IEnumerable`1<ITemplate> value);
    public sealed virtual HistoryCleanup get_HistoryCleanup();
    public sealed virtual void set_HistoryCleanup(HistoryCleanup value);
    public sealed virtual bool IsAllowedTemplate(int templateId);
    public sealed virtual bool IsAllowedTemplate(string templateAlias);
    public sealed virtual void SetDefaultTemplate(ITemplate template);
    public sealed virtual bool RemoveTemplate(ITemplate template);
    private sealed virtual override IContentType Umbraco.Core.Models.IContentType.DeepCloneWithResetIdentities(string newAlias);
    public virtual bool IsDirty();
    [CompilerGeneratedAttribute]
private bool <get_DefaultTemplate>b__10_0(ITemplate x);
    [CompilerGeneratedAttribute]
private bool <set_AllowedTemplates>b__16_0(ITemplate x);
}
internal class Umbraco.Core.Models.ContentTypeAvailableCompositionsResult : object {
    [CompilerGeneratedAttribute]
private IContentTypeComposition <Composition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Allowed>k__BackingField;
    public IContentTypeComposition Composition { get; private set; }
    public bool Allowed { get; private set; }
    public ContentTypeAvailableCompositionsResult(IContentTypeComposition composition, bool allowed);
    [CompilerGeneratedAttribute]
public IContentTypeComposition get_Composition();
    [CompilerGeneratedAttribute]
private void set_Composition(IContentTypeComposition value);
    [CompilerGeneratedAttribute]
public bool get_Allowed();
    [CompilerGeneratedAttribute]
private void set_Allowed(bool value);
}
internal class Umbraco.Core.Models.ContentTypeAvailableCompositionsResults : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IContentTypeComposition> <Ancestors>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ContentTypeAvailableCompositionsResult> <Results>k__BackingField;
    public IEnumerable`1<IContentTypeComposition> Ancestors { get; private set; }
    public IEnumerable`1<ContentTypeAvailableCompositionsResult> Results { get; private set; }
    public ContentTypeAvailableCompositionsResults(IEnumerable`1<IContentTypeComposition> ancestors, IEnumerable`1<ContentTypeAvailableCompositionsResult> results);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IContentTypeComposition> get_Ancestors();
    [CompilerGeneratedAttribute]
private void set_Ancestors(IEnumerable`1<IContentTypeComposition> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ContentTypeAvailableCompositionsResult> get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(IEnumerable`1<ContentTypeAvailableCompositionsResult> value);
}
[DataContractAttribute]
[DebuggerDisplayAttribute("Id: {Id}, Name: {Name}, Alias: {Alias}")]
public abstract class Umbraco.Core.Models.ContentTypeBase : TreeEntityBase {
    private string _alias;
    private string _description;
    private string _icon;
    private string _thumbnail;
    private bool _allowedAsRoot;
    private bool _isContainer;
    private bool _isElement;
    private PropertyGroupCollection _propertyGroups;
    private PropertyTypeCollection _noGroupPropertyTypes;
    private IEnumerable`1<ContentTypeSort> _allowedContentTypes;
    private bool _hasPropertyTypeBeenRemoved;
    private ContentVariation _variations;
    private static DelegateEqualityComparer`1<IEnumerable`1<ContentTypeSort>> ContentTypeSortComparer;
    public bool SupportsPublishing { get; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string Icon { get; public set; }
    [DataMemberAttribute]
public string Thumbnail { get; public set; }
    [DataMemberAttribute]
public bool AllowedAsRoot { get; public set; }
    [DataMemberAttribute]
public bool IsContainer { get; public set; }
    [DataMemberAttribute]
public bool IsElement { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<ContentTypeSort> AllowedContentTypes { get; public set; }
    public ContentVariation Variations { get; public set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public PropertyGroupCollection PropertyGroups { get; public set; }
    [IgnoreDataMemberAttribute]
[DoNotCloneAttribute]
public IEnumerable`1<PropertyType> PropertyTypes { get; }
    [DoNotCloneAttribute]
public IEnumerable`1<PropertyType> NoGroupPropertyTypes { get; public set; }
    [IgnoreDataMemberAttribute]
internal bool HasPropertyTypeBeenRemoved { get; private set; }
    [IgnoreDataMemberAttribute]
internal PropertyTypeCollection PropertyTypeCollection { get; }
    protected ContentTypeBase(int parentId);
    protected ContentTypeBase(IContentTypeBase parent);
    protected ContentTypeBase(IContentTypeBase parent, string alias);
    private static ContentTypeBase();
    public abstract virtual ISimpleContentType ToSimple();
    public abstract virtual bool get_SupportsPublishing();
    protected void PropertyGroupsChanged(object sender, NotifyCollectionChangedEventArgs e);
    protected void PropertyTypesChanged(object sender, NotifyCollectionChangedEventArgs e);
    public virtual string get_Alias();
    public virtual void set_Alias(string value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual string get_Icon();
    public sealed virtual void set_Icon(string value);
    public sealed virtual string get_Thumbnail();
    public sealed virtual void set_Thumbnail(string value);
    public sealed virtual bool get_AllowedAsRoot();
    public sealed virtual void set_AllowedAsRoot(bool value);
    public sealed virtual bool get_IsContainer();
    public sealed virtual void set_IsContainer(bool value);
    public sealed virtual bool get_IsElement();
    public sealed virtual void set_IsElement(bool value);
    public sealed virtual IEnumerable`1<ContentTypeSort> get_AllowedContentTypes();
    public sealed virtual void set_AllowedContentTypes(IEnumerable`1<ContentTypeSort> value);
    public virtual ContentVariation get_Variations();
    public virtual void set_Variations(ContentVariation value);
    public sealed virtual bool SupportsVariation(string culture, string segment, bool wildcards);
    public sealed virtual bool SupportsPropertyVariation(string culture, string segment, bool wildcards);
    public sealed virtual PropertyGroupCollection get_PropertyGroups();
    public sealed virtual void set_PropertyGroups(PropertyGroupCollection value);
    public sealed virtual IEnumerable`1<PropertyType> get_PropertyTypes();
    public sealed virtual IEnumerable`1<PropertyType> get_NoGroupPropertyTypes();
    public sealed virtual void set_NoGroupPropertyTypes(IEnumerable`1<PropertyType> value);
    internal bool get_HasPropertyTypeBeenRemoved();
    private void set_HasPropertyTypeBeenRemoved(bool value);
    public abstract virtual bool PropertyTypeExists(string propertyTypeAlias);
    [ObsoleteAttribute("Use AddPropertyGroup(name, alias) instead to explicitly set the alias.")]
public abstract virtual bool AddPropertyGroup(string groupName);
    public abstract virtual bool AddPropertyGroup(string alias, string name);
    [ObsoleteAttribute("Use AddPropertyType(propertyType, groupAlias, groupName) instead to explicitly set the alias of the group (note the slighty different parameter order).")]
public abstract virtual bool AddPropertyType(PropertyType propertyType, string propertyGroupName);
    public abstract virtual bool AddPropertyType(PropertyType propertyType, string groupAlias, string groupName);
    public sealed virtual bool AddPropertyType(PropertyType propertyType);
    public sealed virtual bool MovePropertyType(string propertyTypeAlias, string propertyGroupName);
    public sealed virtual void RemovePropertyType(string propertyTypeAlias);
    public sealed virtual void RemovePropertyGroup(string propertyGroupName);
    internal PropertyTypeCollection get_PropertyTypeCollection();
    public virtual bool IsDirty();
    public virtual void ResetDirtyProperties();
    protected virtual void PerformDeepClone(object clone);
    public ContentTypeBase DeepCloneWithResetIdentities(string alias);
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.ContentTypeBaseExtensions : object {
    [ExtensionAttribute]
public static PublishedItemType GetItemType(IContentTypeBase contentType);
    [ExtensionAttribute]
internal static bool WasPropertyTypeVariationChanged(IContentTypeBase contentType);
    [ExtensionAttribute]
internal static bool WasPropertyTypeVariationChanged(IContentTypeBase contentType, IReadOnlyCollection`1& aliases);
}
[DataContractAttribute]
public abstract class Umbraco.Core.Models.ContentTypeCompositionBase : ContentTypeBase {
    private List`1<IContentTypeComposition> _contentTypeComposition;
    internal List`1<int> RemovedContentTypeKeyTracker;
    [DataMemberAttribute]
public IEnumerable`1<IContentTypeComposition> ContentTypeComposition { get; public set; }
    [IgnoreDataMemberAttribute]
public IEnumerable`1<PropertyGroup> CompositionPropertyGroups { get; }
    [IgnoreDataMemberAttribute]
public IEnumerable`1<PropertyType> CompositionPropertyTypes { get; }
    [IgnoreDataMemberAttribute]
internal IEnumerable`1<PropertyType> RawComposedPropertyTypes { get; }
    protected ContentTypeCompositionBase(int parentId);
    protected ContentTypeCompositionBase(IContentTypeComposition parent);
    protected ContentTypeCompositionBase(IContentTypeComposition parent, string alias);
    public sealed virtual IEnumerable`1<IContentTypeComposition> get_ContentTypeComposition();
    public sealed virtual void set_ContentTypeComposition(IEnumerable`1<IContentTypeComposition> value);
    public sealed virtual IEnumerable`1<PropertyGroup> get_CompositionPropertyGroups();
    public sealed virtual IEnumerable`1<PropertyType> get_CompositionPropertyTypes();
    internal IEnumerable`1<PropertyType> get_RawComposedPropertyTypes();
    private IEnumerable`1<PropertyType> GetRawComposedPropertyTypes(bool start);
    public sealed virtual bool AddContentType(IContentTypeComposition contentType);
    public sealed virtual bool RemoveContentType(string alias);
    public sealed virtual bool ContentTypeCompositionExists(string alias);
    public virtual bool PropertyTypeExists(string propertyTypeAlias);
    [ObsoleteAttribute("Use AddPropertyGroup(alias, name) instead to explicitly set the alias (note the slighty different parameter order).")]
public virtual bool AddPropertyGroup(string groupName);
    public virtual bool AddPropertyGroup(string alias, string name);
    private PropertyGroup AddAndReturnPropertyGroup(string alias, string name);
    [ObsoleteAttribute("Use AddPropertyType(propertyType, groupAlias, groupName) instead to explicitly set the alias of the group (note the slighty different parameter order).")]
public virtual bool AddPropertyType(PropertyType propertyType, string propertyGroupName);
    public virtual bool AddPropertyType(PropertyType propertyType, string groupAlias, string groupName);
    public sealed virtual IEnumerable`1<string> CompositionAliases();
    public sealed virtual IEnumerable`1<int> CompositionIds();
    protected virtual void PerformDeepClone(object clone);
    [CompilerGeneratedAttribute]
private void <get_CompositionPropertyGroups>g__AcquireProperty|9_0(PropertyType propertyType);
    [CompilerGeneratedAttribute]
private PropertyGroup <get_CompositionPropertyGroups>b__9_2(PropertyGroup group);
    [CompilerGeneratedAttribute]
private PropertyType <get_CompositionPropertyTypes>g__AcquireProperty|11_0(PropertyType propertyType);
}
public class Umbraco.Core.Models.ContentTypeSort : object {
    [CompilerGeneratedAttribute]
private Lazy`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public Lazy`1<int> Id { get; public set; }
    public int SortOrder { get; public set; }
    public string Alias { get; public set; }
    public ContentTypeSort(int id, int sortOrder);
    public ContentTypeSort(Lazy`1<int> id, int sortOrder, string alias);
    [CompilerGeneratedAttribute]
public Lazy`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Lazy`1<int> value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    public sealed virtual object DeepClone();
    protected bool Equals(ContentTypeSort other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum Umbraco.Core.Models.ContentVariation : Enum {
    public byte value__;
    public static ContentVariation Nothing;
    public static ContentVariation Culture;
    public static ContentVariation Segment;
    public static ContentVariation CultureAndSegment;
}
public class Umbraco.Core.Models.ContentVersionCleanupPolicySettings : object {
    [CompilerGeneratedAttribute]
private int <ContentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeepAllVersionsNewerThanDays>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeepLatestVersionPerDayForDays>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventCleanup>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Updated>k__BackingField;
    public int ContentTypeId { get; public set; }
    public Nullable`1<int> KeepAllVersionsNewerThanDays { get; public set; }
    public Nullable`1<int> KeepLatestVersionPerDayForDays { get; public set; }
    public bool PreventCleanup { get; public set; }
    public DateTime Updated { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ContentTypeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeepAllVersionsNewerThanDays();
    [CompilerGeneratedAttribute]
public void set_KeepAllVersionsNewerThanDays(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeepLatestVersionPerDayForDays();
    [CompilerGeneratedAttribute]
public void set_KeepLatestVersionPerDayForDays(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_PreventCleanup();
    [CompilerGeneratedAttribute]
public void set_PreventCleanup(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(DateTime value);
}
public class Umbraco.Core.Models.ContentVersionMeta : object {
    [CompilerGeneratedAttribute]
private int <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <VersionDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CurrentPublishedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CurrentDraftVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventCleanup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    public int ContentId { get; }
    public int ContentTypeId { get; }
    public int VersionId { get; }
    public int UserId { get; }
    public DateTime VersionDate { get; }
    public bool CurrentPublishedVersion { get; }
    public bool CurrentDraftVersion { get; }
    public bool PreventCleanup { get; }
    public string Username { get; }
    public ContentVersionMeta(int versionId, int contentId, int contentTypeId, int userId, DateTime versionDate, bool currentPublishedVersion, bool currentDraftVersion, bool preventCleanup, string username);
    [CompilerGeneratedAttribute]
public int get_ContentId();
    [CompilerGeneratedAttribute]
public int get_ContentTypeId();
    [CompilerGeneratedAttribute]
public int get_VersionId();
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public DateTime get_VersionDate();
    [CompilerGeneratedAttribute]
public bool get_CurrentPublishedVersion();
    [CompilerGeneratedAttribute]
public bool get_CurrentDraftVersion();
    [CompilerGeneratedAttribute]
public bool get_PreventCleanup();
    [CompilerGeneratedAttribute]
public string get_Username();
    public virtual string ToString();
}
internal class Umbraco.Core.Models.CultureImpact : object {
    [CompilerGeneratedAttribute]
private static CultureImpact <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static CultureImpact <Invariant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImpactsOnlyDefaultCulture>k__BackingField;
    public static CultureImpact All { get; }
    public static CultureImpact Invariant { get; }
    public string Culture { get; }
    public bool ImpactsAllCultures { get; }
    public bool ImpactsOnlyInvariantCulture { get; }
    public bool ImpactsExplicitCulture { get; }
    public bool ImpactsOnlyDefaultCulture { get; }
    public bool ImpactsInvariantProperties { get; }
    public bool ImpactsAlsoInvariantProperties { get; }
    public Behavior CultureBehavior { get; }
    private CultureImpact(string culture, bool isDefault);
    private static CultureImpact();
    public static string GetCultureForInvariantErrors(IContent content, String[] savingCultures, string defaultCulture);
    [CompilerGeneratedAttribute]
public static CultureImpact get_All();
    [CompilerGeneratedAttribute]
public static CultureImpact get_Invariant();
    public static CultureImpact Explicit(string culture, bool isDefault);
    public static CultureImpact Create(string culture, bool isDefault, IContent content);
    internal static bool TryCreate(string culture, bool isDefault, ContentVariation variation, bool throwOnFail, CultureImpact& impact);
    [CompilerGeneratedAttribute]
public string get_Culture();
    public bool get_ImpactsAllCultures();
    public bool get_ImpactsOnlyInvariantCulture();
    public bool get_ImpactsExplicitCulture();
    [CompilerGeneratedAttribute]
public bool get_ImpactsOnlyDefaultCulture();
    public bool get_ImpactsInvariantProperties();
    public bool get_ImpactsAlsoInvariantProperties();
    public Behavior get_CultureBehavior();
}
[DataContractAttribute]
public class Umbraco.Core.Models.DataType : TreeEntityBase {
    private IDataEditor _editor;
    private ValueStorageType _databaseType;
    private object _configuration;
    private bool _hasConfiguration;
    private string _configurationJson;
    [IgnoreDataMemberAttribute]
public IDataEditor Editor { get; public set; }
    [DataMemberAttribute]
public string EditorAlias { get; }
    [DataMemberAttribute]
public ValueStorageType DatabaseType { get; public set; }
    [DataMemberAttribute]
public object Configuration { get; public set; }
    public DataType(IDataEditor editor, int parentId);
    public sealed virtual IDataEditor get_Editor();
    public sealed virtual void set_Editor(IDataEditor value);
    public sealed virtual string get_EditorAlias();
    public sealed virtual ValueStorageType get_DatabaseType();
    public sealed virtual void set_DatabaseType(ValueStorageType value);
    public sealed virtual object get_Configuration();
    public sealed virtual void set_Configuration(object value);
    internal void SetLazyConfiguration(string configurationJson);
    internal Lazy`1<object> GetLazyConfiguration();
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.DataTypeExtensions : object {
    private static ISet`1<Guid> IdsOfBuildInDataTypes;
    private static DataTypeExtensions();
    [ExtensionAttribute]
public static T ConfigurationAs(IDataType dataType);
    [ExtensionAttribute]
internal static bool IsBuildInDataType(IDataType dataType);
    internal static bool IsBuildInDataType(Guid key);
}
public static class Umbraco.Core.Models.DeepCloneHelper : object {
    private static ConcurrentDictionary`2<Type, ClonePropertyInfo[]> PropCache;
    private static DeepCloneHelper();
    public static void DeepCloneRefProperties(IDeepCloneable input, IDeepCloneable output);
}
[DataContractAttribute]
public class Umbraco.Core.Models.DictionaryItem : EntityBase {
    [CompilerGeneratedAttribute]
private Func`2<int, ILanguage> <GetLanguage>k__BackingField;
    private Nullable`1<Guid> _parentId;
    private string _itemKey;
    private IEnumerable`1<IDictionaryTranslation> _translations;
    private static DelegateEqualityComparer`1<IEnumerable`1<IDictionaryTranslation>> DictionaryTranslationComparer;
    public Func`2<int, ILanguage> GetLanguage { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> ParentId { get; public set; }
    [DataMemberAttribute]
public string ItemKey { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<IDictionaryTranslation> Translations { get; public set; }
    public DictionaryItem(string itemKey);
    public DictionaryItem(Nullable`1<Guid> parentId, string itemKey);
    private static DictionaryItem();
    [CompilerGeneratedAttribute]
public Func`2<int, ILanguage> get_GetLanguage();
    [CompilerGeneratedAttribute]
public void set_GetLanguage(Func`2<int, ILanguage> value);
    public sealed virtual Nullable`1<Guid> get_ParentId();
    public sealed virtual void set_ParentId(Nullable`1<Guid> value);
    public sealed virtual string get_ItemKey();
    public sealed virtual void set_ItemKey(string value);
    public sealed virtual IEnumerable`1<IDictionaryTranslation> get_Translations();
    public sealed virtual void set_Translations(IEnumerable`1<IDictionaryTranslation> value);
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.DictionaryItemExtensions : object {
    [ExtensionAttribute]
public static string GetTranslatedValue(IDictionaryItem d, int languageId);
    [ExtensionAttribute]
public static string GetDefaultValue(IDictionaryItem d);
}
[DataContractAttribute]
public class Umbraco.Core.Models.DictionaryTranslation : EntityBase {
    [CompilerGeneratedAttribute]
private Func`2<int, ILanguage> <GetLanguage>k__BackingField;
    private ILanguage _language;
    private string _value;
    private int _languageId;
    internal Func`2<int, ILanguage> GetLanguage { get; internal set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public ILanguage Language { get; public set; }
    public int LanguageId { get; }
    [DataMemberAttribute]
public string Value { get; public set; }
    public DictionaryTranslation(ILanguage language, string value);
    public DictionaryTranslation(ILanguage language, string value, Guid uniqueId);
    internal DictionaryTranslation(int languageId, string value);
    internal DictionaryTranslation(int languageId, string value, Guid uniqueId);
    [CompilerGeneratedAttribute]
internal Func`2<int, ILanguage> get_GetLanguage();
    [CompilerGeneratedAttribute]
internal void set_GetLanguage(Func`2<int, ILanguage> value);
    public sealed virtual ILanguage get_Language();
    public sealed virtual void set_Language(ILanguage value);
    public sealed virtual int get_LanguageId();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    protected virtual void PerformDeepClone(object clone);
}
public class Umbraco.Core.Models.DoNotCloneAttribute : Attribute {
}
public class Umbraco.Core.Models.Editors.ContentPropertyData : object {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DataTypeConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ContentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PropertyTypeKey>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentPropertyFile[] <Files>k__BackingField;
    public object Value { get; }
    public object DataTypeConfiguration { get; }
    public Guid ContentKey { get; public set; }
    public Guid PropertyTypeKey { get; public set; }
    public ContentPropertyFile[] Files { get; public set; }
    public ContentPropertyData(object value, object dataTypeConfiguration);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public object get_DataTypeConfiguration();
    [CompilerGeneratedAttribute]
public Guid get_ContentKey();
    [CompilerGeneratedAttribute]
public void set_ContentKey(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_PropertyTypeKey();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeKey(Guid value);
    [CompilerGeneratedAttribute]
public ContentPropertyFile[] get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(ContentPropertyFile[] value);
}
public class Umbraco.Core.Models.Editors.ContentPropertyFile : object {
    [CompilerGeneratedAttribute]
private string <PropertyAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempFilePath>k__BackingField;
    public string PropertyAlias { get; public set; }
    public string Culture { get; public set; }
    public string Segment { get; public set; }
    public String[] Metadata { get; public set; }
    public string FileName { get; public set; }
    public string TempFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyAlias();
    [CompilerGeneratedAttribute]
public void set_PropertyAlias(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(string value);
    [CompilerGeneratedAttribute]
public String[] get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(String[] value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_TempFilePath();
    [CompilerGeneratedAttribute]
public void set_TempFilePath(string value);
}
public class Umbraco.Core.Models.Editors.UmbracoEntityReference : ValueType {
    private static UmbracoEntityReference _empty;
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelationTypeAlias>k__BackingField;
    public Udi Udi { get; }
    public string RelationTypeAlias { get; }
    public UmbracoEntityReference(Udi udi, string relationTypeAlias);
    public UmbracoEntityReference(Udi udi);
    private static UmbracoEntityReference();
    public static UmbracoEntityReference Empty();
    public static bool IsEmpty(UmbracoEntityReference reference);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Udi get_Udi();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_RelationTypeAlias();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(UmbracoEntityReference other);
    public virtual int GetHashCode();
    public static bool op_Equality(UmbracoEntityReference left, UmbracoEntityReference right);
    public static bool op_Inequality(UmbracoEntityReference left, UmbracoEntityReference right);
}
public class Umbraco.Core.Models.Entities.BeingDirty : BeingDirtyBase {
    public void SetPropertyValueAndDetectChanges(T value, T& valueRef, string propertyName, IEqualityComparer`1<T> comparer);
    public void OnPropertyChanged(string propertyName);
}
[DataContractAttribute]
public abstract class Umbraco.Core.Models.Entities.BeingDirtyBase : object {
    private bool _withChanges;
    private bool _withChangedEvent;
    private Dictionary`2<string, bool> _currentChanges;
    private Dictionary`2<string, bool> _savedChanges;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public virtual bool IsDirty();
    public virtual bool IsPropertyDirty(string propertyName);
    public virtual IEnumerable`1<string> GetDirtyProperties();
    public virtual void ResetDirtyProperties();
    public virtual bool WasDirty();
    public virtual bool WasPropertyDirty(string propertyName);
    public virtual void ResetWereDirtyProperties();
    public virtual void ResetDirtyProperties(bool rememberDirty);
    public virtual IEnumerable`1<string> GetWereDirtyProperties();
    [CompilerGeneratedAttribute]
public void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    public void DisableChangeTracking();
    public void EnableChangeTracking();
    protected void DisablePropertyChangedEvent();
    protected void EnablePropertyChangedEvent();
    protected void SetPropertyValueAndDetectChanges(T value, T& valueRef, string propertyName, IEqualityComparer`1<T> comparer);
    protected void DetectChanges(T value, T orig, string propertyName, IEqualityComparer`1<T> comparer, bool changed);
}
public class Umbraco.Core.Models.Entities.ContentEntitySlim : EntitySlim {
    [CompilerGeneratedAttribute]
private string <ContentTypeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTypeIcon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTypeThumbnail>k__BackingField;
    public string ContentTypeAlias { get; public set; }
    public string ContentTypeIcon { get; public set; }
    public string ContentTypeThumbnail { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentTypeAlias();
    [CompilerGeneratedAttribute]
public void set_ContentTypeAlias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentTypeIcon();
    [CompilerGeneratedAttribute]
public void set_ContentTypeIcon(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentTypeThumbnail();
    [CompilerGeneratedAttribute]
public void set_ContentTypeThumbnail(string value);
}
public class Umbraco.Core.Models.Entities.DocumentEntitySlim : ContentEntitySlim {
    private static IReadOnlyDictionary`2<string, string> Empty;
    private IReadOnlyDictionary`2<string, string> _cultureNames;
    private IEnumerable`1<string> _publishedCultures;
    private IEnumerable`1<string> _editedCultures;
    [CompilerGeneratedAttribute]
private ContentVariation <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Edited>k__BackingField;
    public IReadOnlyDictionary`2<string, string> CultureNames { get; public set; }
    public IEnumerable`1<string> PublishedCultures { get; public set; }
    public IEnumerable`1<string> EditedCultures { get; public set; }
    public ContentVariation Variations { get; public set; }
    public bool Published { get; public set; }
    public bool Edited { get; public set; }
    private static DocumentEntitySlim();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_CultureNames();
    public void set_CultureNames(IReadOnlyDictionary`2<string, string> value);
    public sealed virtual IEnumerable`1<string> get_PublishedCultures();
    public void set_PublishedCultures(IEnumerable`1<string> value);
    public sealed virtual IEnumerable`1<string> get_EditedCultures();
    public void set_EditedCultures(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual ContentVariation get_Variations();
    [CompilerGeneratedAttribute]
public void set_Variations(ContentVariation value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Edited();
    [CompilerGeneratedAttribute]
public void set_Edited(bool value);
}
[DataContractAttribute]
[DebuggerDisplayAttribute("Id: {Id}")]
public abstract class Umbraco.Core.Models.Entities.EntityBase : BeingDirtyBase {
    private bool _hasIdentity;
    private int _id;
    private Guid _key;
    private DateTime _createDate;
    private DateTime _updateDate;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeleteDate>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public Guid Key { get; public set; }
    [DataMemberAttribute]
public DateTime CreateDate { get; public set; }
    [DataMemberAttribute]
public DateTime UpdateDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> DeleteDate { get; public set; }
    [DataMemberAttribute]
public bool HasIdentity { get; }
    public sealed virtual int get_Id();
    public sealed virtual void set_Id(int value);
    public sealed virtual Guid get_Key();
    public sealed virtual void set_Key(Guid value);
    public sealed virtual DateTime get_CreateDate();
    public sealed virtual void set_CreateDate(DateTime value);
    public sealed virtual DateTime get_UpdateDate();
    public sealed virtual void set_UpdateDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_DeleteDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeleteDate(Nullable`1<DateTime> value);
    public virtual bool get_HasIdentity();
    internal virtual void ResetIdentity();
    public virtual bool Equals(EntityBase other);
    public virtual bool Equals(object obj);
    private bool SameIdentityAs(EntityBase other);
    public virtual int GetHashCode();
    public sealed virtual object DeepClone();
    protected virtual void PerformDeepClone(object clone);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.Entities.EntityExtensions : object {
    [ExtensionAttribute]
internal static void UpdatingEntity(IEntity entity);
    [ExtensionAttribute]
internal static void AddingEntity(IEntity entity);
}
public class Umbraco.Core.Models.Entities.EntitySlim : object {
    private IDictionary`2<string, object> _additionalData;
    public static IEntitySlim Root;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DeleteDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CreatorId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trashed>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <NodeObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasChildren>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainer>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public Guid Key { get; public set; }
    [DataMemberAttribute]
public DateTime CreateDate { get; public set; }
    [DataMemberAttribute]
public DateTime UpdateDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> DeleteDate { get; public set; }
    [DataMemberAttribute]
public bool HasIdentity { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public int CreatorId { get; public set; }
    [DataMemberAttribute]
public int ParentId { get; public set; }
    [DataMemberAttribute]
public int Level { get; public set; }
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public int SortOrder { get; public set; }
    [DataMemberAttribute]
public bool Trashed { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, object> AdditionalData { get; }
    [IgnoreDataMemberAttribute]
public bool HasAdditionalData { get; }
    [DataMemberAttribute]
public Guid NodeObjectType { get; public set; }
    [DataMemberAttribute]
public bool HasChildren { get; public set; }
    [DataMemberAttribute]
public bool IsContainer { get; public set; }
    private static EntitySlim();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Key(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_UpdateDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdateDate(DateTime value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_DeleteDate();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeleteDate(Nullable`1<DateTime> value);
    public sealed virtual bool get_HasIdentity();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CreatorId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CreatorId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_ParentId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentId(int value);
    public sealed virtual void SetParent(ITreeEntity parent);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Level();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Level(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_SortOrder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Trashed();
    [CompilerGeneratedAttribute]
public void set_Trashed(bool value);
    public sealed virtual IDictionary`2<string, object> get_AdditionalData();
    public sealed virtual bool get_HasAdditionalData();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_NodeObjectType();
    [CompilerGeneratedAttribute]
public void set_NodeObjectType(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasChildren();
    [CompilerGeneratedAttribute]
public void set_HasChildren(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsContainer();
    [CompilerGeneratedAttribute]
public virtual void set_IsContainer(bool value);
    public sealed virtual object DeepClone();
    public sealed virtual bool IsDirty();
    public sealed virtual bool IsPropertyDirty(string propName);
    public sealed virtual IEnumerable`1<string> GetDirtyProperties();
    public sealed virtual void ResetDirtyProperties();
    public sealed virtual bool WasDirty();
    public sealed virtual bool WasPropertyDirty(string propertyName);
    public sealed virtual void ResetWereDirtyProperties();
    public sealed virtual void ResetDirtyProperties(bool rememberDirty);
    public sealed virtual IEnumerable`1<string> GetWereDirtyProperties();
}
public interface Umbraco.Core.Models.Entities.ICanBeDirty {
    public abstract virtual bool IsDirty();
    public abstract virtual bool IsPropertyDirty(string propName);
    public abstract virtual IEnumerable`1<string> GetDirtyProperties();
    public abstract virtual void ResetDirtyProperties();
}
public interface Umbraco.Core.Models.Entities.IContentEntitySlim {
    public string ContentTypeAlias { get; }
    public string ContentTypeIcon { get; }
    public string ContentTypeThumbnail { get; }
    public abstract virtual string get_ContentTypeAlias();
    public abstract virtual string get_ContentTypeIcon();
    public abstract virtual string get_ContentTypeThumbnail();
}
public interface Umbraco.Core.Models.Entities.IDocumentEntitySlim {
    public IReadOnlyDictionary`2<string, string> CultureNames { get; }
    public IEnumerable`1<string> PublishedCultures { get; }
    public IEnumerable`1<string> EditedCultures { get; }
    public ContentVariation Variations { get; }
    public bool Published { get; }
    public bool Edited { get; }
    public abstract virtual IReadOnlyDictionary`2<string, string> get_CultureNames();
    public abstract virtual IEnumerable`1<string> get_PublishedCultures();
    public abstract virtual IEnumerable`1<string> get_EditedCultures();
    public abstract virtual ContentVariation get_Variations();
    public abstract virtual bool get_Published();
    public abstract virtual bool get_Edited();
}
public interface Umbraco.Core.Models.Entities.IEntity {
    public int Id { get; public set; }
    public Guid Key { get; public set; }
    public DateTime CreateDate { get; public set; }
    public DateTime UpdateDate { get; public set; }
    public Nullable`1<DateTime> DeleteDate { get; public set; }
    public bool HasIdentity { get; }
    public abstract virtual int get_Id();
    public abstract virtual void set_Id(int value);
    public abstract virtual Guid get_Key();
    public abstract virtual void set_Key(Guid value);
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual void set_CreateDate(DateTime value);
    public abstract virtual DateTime get_UpdateDate();
    public abstract virtual void set_UpdateDate(DateTime value);
    public abstract virtual Nullable`1<DateTime> get_DeleteDate();
    public abstract virtual void set_DeleteDate(Nullable`1<DateTime> value);
    public abstract virtual bool get_HasIdentity();
}
public interface Umbraco.Core.Models.Entities.IEntitySlim {
    public Guid NodeObjectType { get; }
    public bool HasChildren { get; }
    public bool IsContainer { get; }
    public abstract virtual Guid get_NodeObjectType();
    public abstract virtual bool get_HasChildren();
    public abstract virtual bool get_IsContainer();
}
public interface Umbraco.Core.Models.Entities.IHaveAdditionalData {
    public IDictionary`2<string, object> AdditionalData { get; }
    public bool HasAdditionalData { get; }
    public abstract virtual IDictionary`2<string, object> get_AdditionalData();
    public abstract virtual bool get_HasAdditionalData();
}
public interface Umbraco.Core.Models.Entities.IMediaEntitySlim {
    public string MediaPath { get; }
    public abstract virtual string get_MediaPath();
}
public interface Umbraco.Core.Models.Entities.IMemberEntitySlim {
}
public interface Umbraco.Core.Models.Entities.IRememberBeingDirty {
    public abstract virtual bool WasDirty();
    public abstract virtual bool WasPropertyDirty(string propertyName);
    public abstract virtual void ResetWereDirtyProperties();
    public abstract virtual void ResetDirtyProperties(bool rememberDirty);
    public abstract virtual IEnumerable`1<string> GetWereDirtyProperties();
}
public interface Umbraco.Core.Models.Entities.ITreeEntity {
    public string Name { get; public set; }
    public int CreatorId { get; public set; }
    public int ParentId { get; public set; }
    public int Level { get; public set; }
    public string Path { get; public set; }
    public int SortOrder { get; public set; }
    public bool Trashed { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_CreatorId();
    public abstract virtual void set_CreatorId(int value);
    public abstract virtual int get_ParentId();
    public abstract virtual void set_ParentId(int value);
    public abstract virtual void SetParent(ITreeEntity parent);
    public abstract virtual int get_Level();
    public abstract virtual void set_Level(int value);
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual int get_SortOrder();
    public abstract virtual void set_SortOrder(int value);
    public abstract virtual bool get_Trashed();
}
public interface Umbraco.Core.Models.Entities.IUmbracoEntity {
}
public interface Umbraco.Core.Models.Entities.IValueObject {
}
public class Umbraco.Core.Models.Entities.MediaEntitySlim : ContentEntitySlim {
    [CompilerGeneratedAttribute]
private string <MediaPath>k__BackingField;
    public string MediaPath { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_MediaPath();
    [CompilerGeneratedAttribute]
public void set_MediaPath(string value);
}
public class Umbraco.Core.Models.Entities.MemberEntitySlim : ContentEntitySlim {
}
public abstract class Umbraco.Core.Models.Entities.TreeEntityBase : EntityBase {
    private string _name;
    private int _creatorId;
    private int _parentId;
    private bool _hasParentId;
    private ITreeEntity _parent;
    private int _level;
    private string _path;
    private int _sortOrder;
    private bool _trashed;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public int CreatorId { get; public set; }
    [DataMemberAttribute]
public int ParentId { get; public set; }
    [DataMemberAttribute]
public int Level { get; public set; }
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public int SortOrder { get; public set; }
    [DataMemberAttribute]
public bool Trashed { get; public set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual int get_CreatorId();
    public sealed virtual void set_CreatorId(int value);
    public sealed virtual int get_ParentId();
    public sealed virtual void set_ParentId(int value);
    public sealed virtual void SetParent(ITreeEntity parent);
    public sealed virtual int get_Level();
    public sealed virtual void set_Level(int value);
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
    public sealed virtual int get_SortOrder();
    public sealed virtual void set_SortOrder(int value);
    public sealed virtual bool get_Trashed();
    public void set_Trashed(bool value);
}
public class Umbraco.Core.Models.Entities.TreeEntityPath : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public int Id { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class Umbraco.Core.Models.EntityContainer : TreeEntityBase {
    private Guid _containedObjectType;
    private static Dictionary`2<Guid, Guid> ObjectTypeMap;
    public Guid ContainedObjectType { get; }
    public Guid ContainerObjectType { get; }
    public EntityContainer(Guid containedObjectType);
    public EntityContainer(int id, Guid uniqueId, int parentId, string path, int level, int sortOrder, Guid containedObjectType, string name, int userId);
    private static EntityContainer();
    public Guid get_ContainedObjectType();
    public Guid get_ContainerObjectType();
    public static Guid GetContainerObjectType(Guid containedObjectType);
    public static Guid GetContainedObjectType(Guid containerObjectType);
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.EntityExtensions : object {
    [ExtensionAttribute]
public static object GetAdditionalDataValueIgnoreCase(IHaveAdditionalData entity, string key, object defaultValue);
}
[DataContractAttribute]
public abstract class Umbraco.Core.Models.File : EntityBase {
    private string _path;
    private string _originalPath;
    private string _content;
    [CompilerGeneratedAttribute]
private Func`2<File, string> <GetFileContent>k__BackingField;
    private string _alias;
    private string _name;
    [CompilerGeneratedAttribute]
private string <VirtualPath>k__BackingField;
    internal Func`2<File, string> GetFileContent { get; internal set; }
    [DataMemberAttribute]
public string Name { get; }
    [DataMemberAttribute]
public string Alias { get; }
    [DataMemberAttribute]
public string Path { get; public set; }
    public string OriginalPath { get; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public string Content { get; public set; }
    public string VirtualPath { get; public set; }
    protected File(string path, Func`2<File, string> getFileContent);
    [CompilerGeneratedAttribute]
internal Func`2<File, string> get_GetFileContent();
    [CompilerGeneratedAttribute]
internal void set_GetFileContent(Func`2<File, string> value);
    private static string SanitizePath(string path);
    public virtual string get_Name();
    public virtual string get_Alias();
    public virtual string get_Path();
    public virtual void set_Path(string value);
    public sealed virtual string get_OriginalPath();
    public sealed virtual void ResetOriginalPath();
    public virtual string get_Content();
    public virtual void set_Content(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_VirtualPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_VirtualPath(string value);
    protected virtual void DeepCloneNameAndAlias(File clone);
    protected virtual void PerformDeepClone(object clone);
}
internal class Umbraco.Core.Models.Folder : EntityBase {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; public set; }
    public Folder(string folderPath);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
public class Umbraco.Core.Models.GridValue : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GridSection> <Sections>k__BackingField;
    [JsonPropertyAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyAttribute("sections")]
public IEnumerable`1<GridSection> Sections { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GridSection> get_Sections();
    [CompilerGeneratedAttribute]
public void set_Sections(IEnumerable`1<GridSection> value);
}
public interface Umbraco.Core.Models.IAuditEntry {
    public int PerformingUserId { get; public set; }
    public string PerformingDetails { get; public set; }
    public string PerformingIp { get; public set; }
    public DateTime EventDateUtc { get; public set; }
    public int AffectedUserId { get; public set; }
    public string AffectedDetails { get; public set; }
    public string EventType { get; public set; }
    public string EventDetails { get; public set; }
    public abstract virtual int get_PerformingUserId();
    public abstract virtual void set_PerformingUserId(int value);
    public abstract virtual string get_PerformingDetails();
    public abstract virtual void set_PerformingDetails(string value);
    public abstract virtual string get_PerformingIp();
    public abstract virtual void set_PerformingIp(string value);
    public abstract virtual DateTime get_EventDateUtc();
    public abstract virtual void set_EventDateUtc(DateTime value);
    public abstract virtual int get_AffectedUserId();
    public abstract virtual void set_AffectedUserId(int value);
    public abstract virtual string get_AffectedDetails();
    public abstract virtual void set_AffectedDetails(string value);
    public abstract virtual string get_EventType();
    public abstract virtual void set_EventType(string value);
    public abstract virtual string get_EventDetails();
    public abstract virtual void set_EventDetails(string value);
}
public interface Umbraco.Core.Models.IAuditItem {
    public AuditType AuditType { get; }
    public string EntityType { get; }
    public int UserId { get; }
    public string Comment { get; }
    public string Parameters { get; }
    public abstract virtual AuditType get_AuditType();
    public abstract virtual string get_EntityType();
    public abstract virtual int get_UserId();
    public abstract virtual string get_Comment();
    public abstract virtual string get_Parameters();
}
public class Umbraco.Core.Models.IconModel : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SvgString>k__BackingField;
    public string Name { get; public set; }
    public string SvgString { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_SvgString();
    [CompilerGeneratedAttribute]
public void set_SvgString(string value);
}
public interface Umbraco.Core.Models.IConsent {
    public bool Current { get; }
    public string Source { get; }
    public string Context { get; }
    public string Action { get; }
    public ConsentState State { get; }
    public string Comment { get; }
    public IEnumerable`1<IConsent> History { get; }
    public abstract virtual bool get_Current();
    public abstract virtual string get_Source();
    public abstract virtual string get_Context();
    public abstract virtual string get_Action();
    public abstract virtual ConsentState get_State();
    public abstract virtual string get_Comment();
    public abstract virtual IEnumerable`1<IConsent> get_History();
}
public interface Umbraco.Core.Models.IContent {
    public ContentScheduleCollection ContentSchedule { get; public set; }
    public Nullable`1<int> TemplateId { get; public set; }
    public bool Published { get; public set; }
    public PublishedState PublishedState { get; public set; }
    public bool Edited { get; public set; }
    public int PublishedVersionId { get; public set; }
    public bool Blueprint { get; public set; }
    public Nullable`1<int> PublishTemplateId { get; public set; }
    public string PublishName { get; public set; }
    public Nullable`1<int> PublisherId { get; public set; }
    public Nullable`1<DateTime> PublishDate { get; public set; }
    public ContentCultureInfosCollection PublishCultureInfos { get; public set; }
    public IEnumerable`1<string> PublishedCultures { get; }
    public IEnumerable`1<string> EditedCultures { get; public set; }
    public abstract virtual ContentScheduleCollection get_ContentSchedule();
    public abstract virtual void set_ContentSchedule(ContentScheduleCollection value);
    public abstract virtual Nullable`1<int> get_TemplateId();
    public abstract virtual void set_TemplateId(Nullable`1<int> value);
    public abstract virtual bool get_Published();
    public abstract virtual void set_Published(bool value);
    public abstract virtual PublishedState get_PublishedState();
    public abstract virtual void set_PublishedState(PublishedState value);
    public abstract virtual bool get_Edited();
    public abstract virtual void set_Edited(bool value);
    public abstract virtual int get_PublishedVersionId();
    public abstract virtual void set_PublishedVersionId(int value);
    public abstract virtual bool get_Blueprint();
    public abstract virtual void set_Blueprint(bool value);
    public abstract virtual Nullable`1<int> get_PublishTemplateId();
    public abstract virtual void set_PublishTemplateId(Nullable`1<int> value);
    public abstract virtual string get_PublishName();
    public abstract virtual void set_PublishName(string value);
    public abstract virtual Nullable`1<int> get_PublisherId();
    public abstract virtual void set_PublisherId(Nullable`1<int> value);
    public abstract virtual Nullable`1<DateTime> get_PublishDate();
    public abstract virtual void set_PublishDate(Nullable`1<DateTime> value);
    public abstract virtual bool IsCulturePublished(string culture);
    public abstract virtual Nullable`1<DateTime> GetPublishDate(string culture);
    public abstract virtual bool IsCultureEdited(string culture);
    public abstract virtual string GetPublishName(string culture);
    public abstract virtual ContentCultureInfosCollection get_PublishCultureInfos();
    public abstract virtual void set_PublishCultureInfos(ContentCultureInfosCollection value);
    public abstract virtual IEnumerable`1<string> get_PublishedCultures();
    public abstract virtual IEnumerable`1<string> get_EditedCultures();
    public abstract virtual void set_EditedCultures(IEnumerable`1<string> value);
    public abstract virtual IContent DeepCloneWithResetIdentities();
}
public interface Umbraco.Core.Models.IContentBase {
    public int ContentTypeId { get; }
    public ISimpleContentType ContentType { get; }
    public int WriterId { get; public set; }
    public int VersionId { get; public set; }
    public ContentCultureInfosCollection CultureInfos { get; public set; }
    public IEnumerable`1<string> AvailableCultures { get; }
    public PropertyCollection Properties { get; public set; }
    public abstract virtual int get_ContentTypeId();
    public abstract virtual ISimpleContentType get_ContentType();
    public abstract virtual int get_WriterId();
    public abstract virtual void set_WriterId(int value);
    public abstract virtual int get_VersionId();
    public abstract virtual void set_VersionId(int value);
    public abstract virtual void SetCultureName(string value, string culture);
    public abstract virtual string GetCultureName(string culture);
    public abstract virtual ContentCultureInfosCollection get_CultureInfos();
    public abstract virtual void set_CultureInfos(ContentCultureInfosCollection value);
    public abstract virtual IEnumerable`1<string> get_AvailableCultures();
    public abstract virtual bool IsCultureAvailable(string culture);
    public abstract virtual Nullable`1<DateTime> GetUpdateDate(string culture);
    public abstract virtual PropertyCollection get_Properties();
    public abstract virtual void set_Properties(PropertyCollection value);
    public abstract virtual bool HasProperty(string propertyTypeAlias);
    public abstract virtual object GetValue(string propertyTypeAlias, string culture, string segment, bool published);
    public abstract virtual TValue GetValue(string propertyTypeAlias, string culture, string segment, bool published);
    public abstract virtual void SetValue(string propertyTypeAlias, object value, string culture, string segment);
}
public interface Umbraco.Core.Models.IContentType {
    public ITemplate DefaultTemplate { get; }
    public IEnumerable`1<ITemplate> AllowedTemplates { get; public set; }
    public HistoryCleanup HistoryCleanup { get; public set; }
    public abstract virtual ITemplate get_DefaultTemplate();
    public abstract virtual IEnumerable`1<ITemplate> get_AllowedTemplates();
    public abstract virtual void set_AllowedTemplates(IEnumerable`1<ITemplate> value);
    public abstract virtual HistoryCleanup get_HistoryCleanup();
    public abstract virtual void set_HistoryCleanup(HistoryCleanup value);
    public abstract virtual bool IsAllowedTemplate(int templateId);
    public abstract virtual bool IsAllowedTemplate(string templateAlias);
    public abstract virtual void SetDefaultTemplate(ITemplate template);
    public abstract virtual bool RemoveTemplate(ITemplate template);
    public abstract virtual IContentType DeepCloneWithResetIdentities(string newAlias);
}
public interface Umbraco.Core.Models.IContentTypeBase {
    public string Alias { get; public set; }
    public string Description { get; public set; }
    public string Icon { get; public set; }
    public string Thumbnail { get; public set; }
    public bool AllowedAsRoot { get; public set; }
    public bool IsContainer { get; public set; }
    public bool IsElement { get; public set; }
    public ContentVariation Variations { get; public set; }
    public IEnumerable`1<ContentTypeSort> AllowedContentTypes { get; public set; }
    public PropertyGroupCollection PropertyGroups { get; public set; }
    public IEnumerable`1<PropertyType> PropertyTypes { get; }
    public IEnumerable`1<PropertyType> NoGroupPropertyTypes { get; public set; }
    public abstract virtual string get_Alias();
    public abstract virtual void set_Alias(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_Icon();
    public abstract virtual void set_Icon(string value);
    public abstract virtual string get_Thumbnail();
    public abstract virtual void set_Thumbnail(string value);
    public abstract virtual bool get_AllowedAsRoot();
    public abstract virtual void set_AllowedAsRoot(bool value);
    public abstract virtual bool get_IsContainer();
    public abstract virtual void set_IsContainer(bool value);
    public abstract virtual bool get_IsElement();
    public abstract virtual void set_IsElement(bool value);
    public abstract virtual ContentVariation get_Variations();
    public abstract virtual void set_Variations(ContentVariation value);
    public abstract virtual bool SupportsVariation(string culture, string segment, bool wildcards);
    public abstract virtual bool SupportsPropertyVariation(string culture, string segment, bool wildcards);
    public abstract virtual IEnumerable`1<ContentTypeSort> get_AllowedContentTypes();
    public abstract virtual void set_AllowedContentTypes(IEnumerable`1<ContentTypeSort> value);
    public abstract virtual PropertyGroupCollection get_PropertyGroups();
    public abstract virtual void set_PropertyGroups(PropertyGroupCollection value);
    public abstract virtual IEnumerable`1<PropertyType> get_PropertyTypes();
    public abstract virtual IEnumerable`1<PropertyType> get_NoGroupPropertyTypes();
    public abstract virtual void set_NoGroupPropertyTypes(IEnumerable`1<PropertyType> value);
    public abstract virtual void RemovePropertyType(string propertyTypeAlias);
    public abstract virtual void RemovePropertyGroup(string propertyGroupName);
    public abstract virtual bool PropertyTypeExists(string propertyTypeAlias);
    [ObsoleteAttribute("Use AddPropertyType(propertyType, groupAlias, groupName) instead to explicitly set the alias of the group (note the slighty different parameter order).")]
public abstract virtual bool AddPropertyType(PropertyType propertyType, string propertyGroupName);
    public abstract virtual bool AddPropertyType(PropertyType propertyType, string groupAlias, string groupName);
    public abstract virtual bool AddPropertyType(PropertyType propertyType);
    [ObsoleteAttribute("Use AddPropertyGroup(alias, name) instead to explicitly set the alias (note the slighty different parameter order).")]
public abstract virtual bool AddPropertyGroup(string groupName);
    public abstract virtual bool AddPropertyGroup(string alias, string name);
    public abstract virtual bool MovePropertyType(string propertyTypeAlias, string propertyGroupName);
    public abstract virtual ISimpleContentType ToSimple();
}
public interface Umbraco.Core.Models.IContentTypeComposition {
    public IEnumerable`1<IContentTypeComposition> ContentTypeComposition { get; public set; }
    public IEnumerable`1<PropertyGroup> CompositionPropertyGroups { get; }
    public IEnumerable`1<PropertyType> CompositionPropertyTypes { get; }
    public abstract virtual IEnumerable`1<IContentTypeComposition> get_ContentTypeComposition();
    public abstract virtual void set_ContentTypeComposition(IEnumerable`1<IContentTypeComposition> value);
    public abstract virtual IEnumerable`1<PropertyGroup> get_CompositionPropertyGroups();
    public abstract virtual IEnumerable`1<PropertyType> get_CompositionPropertyTypes();
    public abstract virtual bool AddContentType(IContentTypeComposition contentType);
    public abstract virtual bool RemoveContentType(string alias);
    public abstract virtual bool ContentTypeCompositionExists(string alias);
    public abstract virtual IEnumerable`1<string> CompositionAliases();
    public abstract virtual IEnumerable`1<int> CompositionIds();
}
public interface Umbraco.Core.Models.IDataType {
    public IDataEditor Editor { get; public set; }
    public string EditorAlias { get; }
    public ValueStorageType DatabaseType { get; public set; }
    public object Configuration { get; public set; }
    public abstract virtual IDataEditor get_Editor();
    public abstract virtual void set_Editor(IDataEditor value);
    public abstract virtual string get_EditorAlias();
    public abstract virtual ValueStorageType get_DatabaseType();
    public abstract virtual void set_DatabaseType(ValueStorageType value);
    public abstract virtual object get_Configuration();
    public abstract virtual void set_Configuration(object value);
}
public interface Umbraco.Core.Models.IDeepCloneable {
    public abstract virtual object DeepClone();
}
public class Umbraco.Core.Models.Identity.BackOfficeIdentityUser : IdentityUser`4<int, IIdentityUserLogin, IdentityUserRole`1<string>, IdentityUserClaim`1<int>> {
    private string _email;
    private string _userName;
    private int _id;
    private bool _hasIdentity;
    private Nullable`1<DateTime> _lastLoginDateUtc;
    private bool _emailConfirmed;
    private string _name;
    private int _accessFailedCount;
    private string _passwordHash;
    private string _culture;
    private ObservableCollection`1<IIdentityUserLogin> _logins;
    private Lazy`1<IEnumerable`1<IIdentityUserLogin>> _getLogins;
    private IReadOnlyUserGroup[] _groups;
    private String[] _allowedSections;
    private Int32[] _startMediaIds;
    private Int32[] _startContentIds;
    private Nullable`1<DateTime> _lastPasswordChangeDateUtc;
    [CompilerGeneratedAttribute]
private Int32[] <CalculatedMediaStartNodeIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <CalculatedContentStartNodeIds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsApproved>k__BackingField;
    private EventClearingObservableCollection`1<IdentityUserRole`1<string>> _roles;
    private BeingDirty _beingDirty;
    private static DelegateEqualityComparer`1<IReadOnlyUserGroup[]> GroupsComparer;
    private static DelegateEqualityComparer`1<Int32[]> StartIdsComparer;
    public bool HasIdentity { get; }
    public Int32[] CalculatedMediaStartNodeIds { get; internal set; }
    public Int32[] CalculatedContentStartNodeIds { get; internal set; }
    public int Id { get; public set; }
    public string Email { get; public set; }
    public string UserName { get; public set; }
    public Nullable`1<DateTime> LastPasswordChangeDateUtc { get; public set; }
    public Nullable`1<DateTime> LastLoginDateUtc { get; public set; }
    public bool EmailConfirmed { get; public set; }
    public string Name { get; public set; }
    public int AccessFailedCount { get; public set; }
    public string PasswordHash { get; public set; }
    public Int32[] StartContentIds { get; public set; }
    public Int32[] StartMediaIds { get; public set; }
    public String[] AllowedSections { get; }
    public string Culture { get; public set; }
    public IReadOnlyUserGroup[] Groups { get; public set; }
    public bool LockoutEnabled { get; public set; }
    internal bool IsLockedOut { get; }
    internal bool IsApproved { get; internal set; }
    public ICollection`1<IIdentityUserLogin> Logins { get; }
    public ICollection`1<IdentityUserRole`1<string>> Roles { get; }
    private BackOfficeIdentityUser(IReadOnlyUserGroup[] groups);
    public BackOfficeIdentityUser(int userId, IEnumerable`1<IReadOnlyUserGroup> groups);
    private static BackOfficeIdentityUser();
    public static BackOfficeIdentityUser CreateNew(string username, string email, string culture);
    public bool get_HasIdentity();
    [CompilerGeneratedAttribute]
public Int32[] get_CalculatedMediaStartNodeIds();
    [CompilerGeneratedAttribute]
internal void set_CalculatedMediaStartNodeIds(Int32[] value);
    [CompilerGeneratedAttribute]
public Int32[] get_CalculatedContentStartNodeIds();
    [CompilerGeneratedAttribute]
internal void set_CalculatedContentStartNodeIds(Int32[] value);
    public virtual int get_Id();
    public virtual void set_Id(int value);
    public virtual string get_Email();
    public virtual void set_Email(string value);
    public virtual string get_UserName();
    public virtual void set_UserName(string value);
    public virtual Nullable`1<DateTime> get_LastPasswordChangeDateUtc();
    public virtual void set_LastPasswordChangeDateUtc(Nullable`1<DateTime> value);
    public virtual Nullable`1<DateTime> get_LastLoginDateUtc();
    public virtual void set_LastLoginDateUtc(Nullable`1<DateTime> value);
    public virtual bool get_EmailConfirmed();
    public virtual void set_EmailConfirmed(bool value);
    public string get_Name();
    public void set_Name(string value);
    public virtual int get_AccessFailedCount();
    public virtual void set_AccessFailedCount(int value);
    public virtual string get_PasswordHash();
    public virtual void set_PasswordHash(string value);
    public Int32[] get_StartContentIds();
    public void set_StartContentIds(Int32[] value);
    public Int32[] get_StartMediaIds();
    public void set_StartMediaIds(Int32[] value);
    public String[] get_AllowedSections();
    public string get_Culture();
    public void set_Culture(string value);
    public IReadOnlyUserGroup[] get_Groups();
    public void set_Groups(IReadOnlyUserGroup[] value);
    public virtual bool get_LockoutEnabled();
    public virtual void set_LockoutEnabled(bool value);
    internal bool get_IsLockedOut();
    [CompilerGeneratedAttribute]
internal bool get_IsApproved();
    [CompilerGeneratedAttribute]
internal void set_IsApproved(bool value);
    public virtual ICollection`1<IIdentityUserLogin> get_Logins();
    private void Logins_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void _roles_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    public void AddRole(string role);
    public virtual ICollection`1<IdentityUserRole`1<string>> get_Roles();
    public void SetLoginsCallback(Lazy`1<IEnumerable`1<IIdentityUserLogin>> callback);
    public sealed virtual bool IsDirty();
    public sealed virtual bool IsPropertyDirty(string propName);
    public sealed virtual IEnumerable`1<string> GetDirtyProperties();
    public sealed virtual void ResetDirtyProperties();
    public sealed virtual bool WasDirty();
    public sealed virtual bool WasPropertyDirty(string propertyName);
    public sealed virtual void ResetWereDirtyProperties();
    public sealed virtual void ResetDirtyProperties(bool rememberDirty);
    public sealed virtual IEnumerable`1<string> GetWereDirtyProperties();
    public void DisableChangeTracking();
    public void EnableChangeTracking();
    [CompilerGeneratedAttribute]
private IdentityUserRole`1<string> <set_Groups>b__70_0(IReadOnlyUserGroup x);
}
public class Umbraco.Core.Models.Identity.ExternalLogin : object {
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserData>k__BackingField;
    public string LoginProvider { get; }
    public string ProviderKey { get; }
    public string UserData { get; }
    public ExternalLogin(string loginProvider, string providerKey, string userData);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LoginProvider();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserData();
}
public class Umbraco.Core.Models.Identity.IdentityMapDefinition : object {
    private ILocalizedTextService _textService;
    private IEntityService _entityService;
    private IGlobalSettings _globalSettings;
    private AppCaches _appCaches;
    [ObsoleteAttribute("Use constructor specifying all dependencies")]
public IdentityMapDefinition(ILocalizedTextService textService, IEntityService entityService, IGlobalSettings globalSettings);
    public IdentityMapDefinition(ILocalizedTextService textService, IEntityService entityService, IGlobalSettings globalSettings, AppCaches appCaches);
    public sealed virtual void DefineMaps(UmbracoMapper mapper);
    private void Map(IUser source, BackOfficeIdentityUser target);
    private static string GetPasswordHash(string storedPass);
    [CompilerGeneratedAttribute]
private void <DefineMaps>b__6_1(IUser source, BackOfficeIdentityUser target, MapperContext context);
}
public class Umbraco.Core.Models.Identity.IdentityUser`4 : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastLoginDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmailConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PhoneNumberConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TwoFactorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LockoutEndDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastPasswordChangeDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockoutEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AccessFailedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TRole> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TClaim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<TLogin> <Logins>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    public Nullable`1<DateTime> LastLoginDateUtc { get; public set; }
    public string Email { get; public set; }
    public bool EmailConfirmed { get; public set; }
    public string PasswordHash { get; public set; }
    public string SecurityStamp { get; public set; }
    public string PhoneNumber { get; public set; }
    public bool PhoneNumberConfirmed { get; public set; }
    public bool TwoFactorEnabled { get; public set; }
    public Nullable`1<DateTime> LockoutEndDateUtc { get; public set; }
    public Nullable`1<DateTime> LastPasswordChangeDateUtc { get; public set; }
    public bool LockoutEnabled { get; public set; }
    public int AccessFailedCount { get; public set; }
    public ICollection`1<TRole> Roles { get; }
    public ICollection`1<TClaim> Claims { get; }
    public ICollection`1<TLogin> Logins { get; }
    public TKey Id { get; public set; }
    public string UserName { get; public set; }
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastLoginDateUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastLoginDateUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
public virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_EmailConfirmed();
    [CompilerGeneratedAttribute]
public virtual void set_EmailConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_PasswordHash();
    [CompilerGeneratedAttribute]
public virtual void set_PasswordHash(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SecurityStamp();
    [CompilerGeneratedAttribute]
public virtual void set_SecurityStamp(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_PhoneNumberConfirmed();
    [CompilerGeneratedAttribute]
public virtual void set_PhoneNumberConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_TwoFactorEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_TwoFactorEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LockoutEndDateUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LockoutEndDateUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastPasswordChangeDateUtc();
    [CompilerGeneratedAttribute]
public virtual void set_LastPasswordChangeDateUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public virtual bool get_LockoutEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_LockoutEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_AccessFailedCount();
    [CompilerGeneratedAttribute]
public virtual void set_AccessFailedCount(int value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TRole> get_Roles();
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TClaim> get_Claims();
    [CompilerGeneratedAttribute]
public virtual ICollection`1<TLogin> get_Logins();
    [CompilerGeneratedAttribute]
public virtual TKey get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(TKey value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
public virtual void set_UserName(string value);
}
public class Umbraco.Core.Models.Identity.IdentityUserClaim`1 : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimValue>k__BackingField;
    public int Id { get; public set; }
    public TKey UserId { get; public set; }
    public string ClaimType { get; public set; }
    public string ClaimValue { get; public set; }
    [CompilerGeneratedAttribute]
public virtual int get_Id();
    [CompilerGeneratedAttribute]
public virtual void set_Id(int value);
    [CompilerGeneratedAttribute]
public virtual TKey get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(TKey value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimType();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimValue();
    [CompilerGeneratedAttribute]
public virtual void set_ClaimValue(string value);
}
public class Umbraco.Core.Models.Identity.IdentityUserLogin : EntityBase {
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserData>k__BackingField;
    public string LoginProvider { get; public set; }
    public string ProviderKey { get; public set; }
    public int UserId { get; public set; }
    public string UserData { get; public set; }
    public IdentityUserLogin(string loginProvider, string providerKey, int userId);
    public IdentityUserLogin(int id, string loginProvider, string providerKey, int userId, DateTime createDate);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LoginProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ProviderKey(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_UserId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserData(string value);
}
public class Umbraco.Core.Models.Identity.IdentityUserRole`1 : object {
    [CompilerGeneratedAttribute]
private TKey <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <RoleId>k__BackingField;
    public TKey UserId { get; public set; }
    public TKey RoleId { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TKey get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(TKey value);
    [CompilerGeneratedAttribute]
public virtual TKey get_RoleId();
    [CompilerGeneratedAttribute]
public virtual void set_RoleId(TKey value);
}
public interface Umbraco.Core.Models.Identity.IExternalLogin {
    public string LoginProvider { get; }
    public string ProviderKey { get; }
    public string UserData { get; }
    public abstract virtual string get_LoginProvider();
    public abstract virtual string get_ProviderKey();
    public abstract virtual string get_UserData();
}
public interface Umbraco.Core.Models.Identity.IIdentityUserLogin {
    public string LoginProvider { get; public set; }
    public string ProviderKey { get; public set; }
    public int UserId { get; public set; }
    public abstract virtual string get_LoginProvider();
    public abstract virtual void set_LoginProvider(string value);
    public abstract virtual string get_ProviderKey();
    public abstract virtual void set_ProviderKey(string value);
    public abstract virtual int get_UserId();
    public abstract virtual void set_UserId(int value);
}
public interface Umbraco.Core.Models.Identity.IIdentityUserLoginExtended {
    public string UserData { get; public set; }
    public abstract virtual string get_UserData();
    public abstract virtual void set_UserData(string value);
}
public interface Umbraco.Core.Models.IDictionaryItem {
    [DataMemberAttribute]
public Nullable`1<Guid> ParentId { get; public set; }
    [DataMemberAttribute]
public string ItemKey { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<IDictionaryTranslation> Translations { get; public set; }
    public abstract virtual Nullable`1<Guid> get_ParentId();
    public abstract virtual void set_ParentId(Nullable`1<Guid> value);
    public abstract virtual string get_ItemKey();
    public abstract virtual void set_ItemKey(string value);
    public abstract virtual IEnumerable`1<IDictionaryTranslation> get_Translations();
    public abstract virtual void set_Translations(IEnumerable`1<IDictionaryTranslation> value);
}
public interface Umbraco.Core.Models.IDictionaryTranslation {
    [DataMemberAttribute]
public ILanguage Language { get; public set; }
    public int LanguageId { get; }
    [DataMemberAttribute]
public string Value { get; public set; }
    public abstract virtual ILanguage get_Language();
    public abstract virtual void set_Language(ILanguage value);
    public abstract virtual int get_LanguageId();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
}
public interface Umbraco.Core.Models.IDomain {
    public Nullable`1<int> LanguageId { get; public set; }
    public string DomainName { get; public set; }
    public Nullable`1<int> RootContentId { get; public set; }
    public bool IsWildcard { get; }
    public string LanguageIsoCode { get; }
    public abstract virtual Nullable`1<int> get_LanguageId();
    public abstract virtual void set_LanguageId(Nullable`1<int> value);
    public abstract virtual string get_DomainName();
    public abstract virtual void set_DomainName(string value);
    public abstract virtual Nullable`1<int> get_RootContentId();
    public abstract virtual void set_RootContentId(Nullable`1<int> value);
    public abstract virtual bool get_IsWildcard();
    public abstract virtual string get_LanguageIsoCode();
}
public interface Umbraco.Core.Models.IFile {
    public string Name { get; }
    public string Alias { get; }
    public string Path { get; public set; }
    public string OriginalPath { get; }
    public string Content { get; public set; }
    public string VirtualPath { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Alias();
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
    public abstract virtual string get_OriginalPath();
    public abstract virtual void ResetOriginalPath();
    public abstract virtual string get_Content();
    public abstract virtual void set_Content(string value);
    public abstract virtual string get_VirtualPath();
    public abstract virtual void set_VirtualPath(string value);
}
public interface Umbraco.Core.Models.IImageUrlGenerator {
    public abstract virtual string GetImageUrl(ImageUrlGenerationOptions options);
}
public interface Umbraco.Core.Models.ILanguage {
    [DataMemberAttribute]
public string IsoCode { get; public set; }
    [DataMemberAttribute]
public string CultureName { get; public set; }
    [IgnoreDataMemberAttribute]
public CultureInfo CultureInfo { get; }
    [DataMemberAttribute]
public bool IsDefault { get; public set; }
    [DataMemberAttribute]
public bool IsMandatory { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> FallbackLanguageId { get; public set; }
    public abstract virtual string get_IsoCode();
    public abstract virtual void set_IsoCode(string value);
    public abstract virtual string get_CultureName();
    public abstract virtual void set_CultureName(string value);
    public abstract virtual CultureInfo get_CultureInfo();
    public abstract virtual bool get_IsDefault();
    public abstract virtual void set_IsDefault(bool value);
    public abstract virtual bool get_IsMandatory();
    public abstract virtual void set_IsMandatory(bool value);
    public abstract virtual Nullable`1<int> get_FallbackLanguageId();
    public abstract virtual void set_FallbackLanguageId(Nullable`1<int> value);
}
public interface Umbraco.Core.Models.IMacro {
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public bool UseInEditor { get; public set; }
    [DataMemberAttribute]
public int CacheDuration { get; public set; }
    [DataMemberAttribute]
public bool CacheByPage { get; public set; }
    [DataMemberAttribute]
public bool CacheByMember { get; public set; }
    [DataMemberAttribute]
public bool DontRender { get; public set; }
    [DataMemberAttribute]
public string MacroSource { get; public set; }
    [DataMemberAttribute]
public MacroTypes MacroType { get; public set; }
    [DataMemberAttribute]
public MacroPropertyCollection Properties { get; }
    public abstract virtual string get_Alias();
    public abstract virtual void set_Alias(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual bool get_UseInEditor();
    public abstract virtual void set_UseInEditor(bool value);
    public abstract virtual int get_CacheDuration();
    public abstract virtual void set_CacheDuration(int value);
    public abstract virtual bool get_CacheByPage();
    public abstract virtual void set_CacheByPage(bool value);
    public abstract virtual bool get_CacheByMember();
    public abstract virtual void set_CacheByMember(bool value);
    public abstract virtual bool get_DontRender();
    public abstract virtual void set_DontRender(bool value);
    public abstract virtual string get_MacroSource();
    public abstract virtual void set_MacroSource(string value);
    public abstract virtual MacroTypes get_MacroType();
    public abstract virtual void set_MacroType(MacroTypes value);
    public abstract virtual MacroPropertyCollection get_Properties();
}
public interface Umbraco.Core.Models.IMacroProperty {
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public Guid Key { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public int SortOrder { get; public set; }
    [DataMemberAttribute]
public string EditorAlias { get; public set; }
    public abstract virtual int get_Id();
    public abstract virtual void set_Id(int value);
    public abstract virtual Guid get_Key();
    public abstract virtual void set_Key(Guid value);
    public abstract virtual string get_Alias();
    public abstract virtual void set_Alias(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_SortOrder();
    public abstract virtual void set_SortOrder(int value);
    public abstract virtual string get_EditorAlias();
    public abstract virtual void set_EditorAlias(string value);
}
public class Umbraco.Core.Models.ImageUrlGenerationOptions : object {
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Width>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Height>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <WidthRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<decimal> <HeightRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Quality>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageCropMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageCropAnchor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DefaultCrop>k__BackingField;
    [CompilerGeneratedAttribute]
private FocalPointPosition <FocalPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private CropCoordinates <Crop>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheBusterValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FurtherOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpScale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AnimationProcessMode>k__BackingField;
    public string ImageUrl { get; }
    public Nullable`1<int> Width { get; public set; }
    public Nullable`1<int> Height { get; public set; }
    public Nullable`1<decimal> WidthRatio { get; public set; }
    public Nullable`1<decimal> HeightRatio { get; public set; }
    public Nullable`1<int> Quality { get; public set; }
    public string ImageCropMode { get; public set; }
    public string ImageCropAnchor { get; public set; }
    public bool DefaultCrop { get; public set; }
    public FocalPointPosition FocalPoint { get; public set; }
    public CropCoordinates Crop { get; public set; }
    public string CacheBusterValue { get; public set; }
    public string FurtherOptions { get; public set; }
    public bool UpScale { get; public set; }
    public string AnimationProcessMode { get; public set; }
    public ImageUrlGenerationOptions(string imageUrl);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Width();
    [CompilerGeneratedAttribute]
public void set_Width(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Height();
    [CompilerGeneratedAttribute]
public void set_Height(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_WidthRatio();
    [CompilerGeneratedAttribute]
public void set_WidthRatio(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<decimal> get_HeightRatio();
    [CompilerGeneratedAttribute]
public void set_HeightRatio(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Quality();
    [CompilerGeneratedAttribute]
public void set_Quality(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ImageCropMode();
    [CompilerGeneratedAttribute]
public void set_ImageCropMode(string value);
    [CompilerGeneratedAttribute]
public string get_ImageCropAnchor();
    [CompilerGeneratedAttribute]
public void set_ImageCropAnchor(string value);
    [CompilerGeneratedAttribute]
public bool get_DefaultCrop();
    [CompilerGeneratedAttribute]
public void set_DefaultCrop(bool value);
    [CompilerGeneratedAttribute]
public FocalPointPosition get_FocalPoint();
    [CompilerGeneratedAttribute]
public void set_FocalPoint(FocalPointPosition value);
    [CompilerGeneratedAttribute]
public CropCoordinates get_Crop();
    [CompilerGeneratedAttribute]
public void set_Crop(CropCoordinates value);
    [CompilerGeneratedAttribute]
public string get_CacheBusterValue();
    [CompilerGeneratedAttribute]
public void set_CacheBusterValue(string value);
    [CompilerGeneratedAttribute]
public string get_FurtherOptions();
    [CompilerGeneratedAttribute]
public void set_FurtherOptions(string value);
    [CompilerGeneratedAttribute]
public bool get_UpScale();
    [CompilerGeneratedAttribute]
public void set_UpScale(bool value);
    [CompilerGeneratedAttribute]
public string get_AnimationProcessMode();
    [CompilerGeneratedAttribute]
public void set_AnimationProcessMode(string value);
}
public interface Umbraco.Core.Models.IMedia {
}
public interface Umbraco.Core.Models.IMediaType {
    public abstract virtual IMediaType DeepCloneWithResetIdentities(string newAlias);
}
public interface Umbraco.Core.Models.IMember {
    public string ContentTypeAlias { get; }
    public abstract virtual string get_ContentTypeAlias();
}
public interface Umbraco.Core.Models.IMemberGroup {
    public string Name { get; public set; }
    public int CreatorId { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_CreatorId();
    public abstract virtual void set_CreatorId(int value);
}
public interface Umbraco.Core.Models.IMemberType {
    public abstract virtual bool MemberCanEditProperty(string propertyTypeAlias);
    public abstract virtual bool MemberCanViewProperty(string propertyTypeAlias);
    public abstract virtual bool IsSensitiveProperty(string propertyTypeAlias);
    public abstract virtual void SetMemberCanEditProperty(string propertyTypeAlias, bool value);
    public abstract virtual void SetMemberCanViewProperty(string propertyTypeAlias, bool value);
    public abstract virtual void SetIsSensitiveProperty(string propertyTypeAlias, bool value);
}
public interface Umbraco.Core.Models.IMigrationEntry {
    public string MigrationName { get; public set; }
    public SemVersion Version { get; public set; }
    public abstract virtual string get_MigrationName();
    public abstract virtual void set_MigrationName(string value);
    public abstract virtual SemVersion get_Version();
    public abstract virtual void set_Version(SemVersion value);
}
public class Umbraco.Core.Models.InstallLog : object {
    [CompilerGeneratedAttribute]
private Guid <InstallId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUpgrade>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InstallCompleted>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Timestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionMajor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionMinor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionPatch>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionComment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbProvider>k__BackingField;
    public Guid InstallId { get; }
    public bool IsUpgrade { get; public set; }
    public bool InstallCompleted { get; public set; }
    public DateTime Timestamp { get; public set; }
    public int VersionMajor { get; }
    public int VersionMinor { get; }
    public int VersionPatch { get; }
    public string VersionComment { get; }
    public string Error { get; }
    public string UserAgent { get; }
    public string DbProvider { get; public set; }
    public InstallLog(Guid installId, bool isUpgrade, bool installCompleted, DateTime timestamp, int versionMajor, int versionMinor, int versionPatch, string versionComment, string error, string userAgent, string dbProvider);
    [CompilerGeneratedAttribute]
public Guid get_InstallId();
    [CompilerGeneratedAttribute]
public bool get_IsUpgrade();
    [CompilerGeneratedAttribute]
public void set_IsUpgrade(bool value);
    [CompilerGeneratedAttribute]
public bool get_InstallCompleted();
    [CompilerGeneratedAttribute]
public void set_InstallCompleted(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Timestamp();
    [CompilerGeneratedAttribute]
public void set_Timestamp(DateTime value);
    [CompilerGeneratedAttribute]
public int get_VersionMajor();
    [CompilerGeneratedAttribute]
public int get_VersionMinor();
    [CompilerGeneratedAttribute]
public int get_VersionPatch();
    [CompilerGeneratedAttribute]
public string get_VersionComment();
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public string get_DbProvider();
    [CompilerGeneratedAttribute]
public void set_DbProvider(string value);
}
public interface Umbraco.Core.Models.IPartialView {
    public PartialViewType ViewType { get; }
    public abstract virtual PartialViewType get_ViewType();
}
public interface Umbraco.Core.Models.IReadOnlyContentBase {
    public int Id { get; }
    public Guid Key { get; }
    public DateTime CreateDate { get; }
    public DateTime UpdateDate { get; }
    public string Name { get; }
    public int CreatorId { get; }
    public int ParentId { get; }
    public int Level { get; }
    public string Path { get; }
    public int SortOrder { get; }
    public int ContentTypeId { get; }
    public int WriterId { get; }
    public int VersionId { get; }
    public abstract virtual int get_Id();
    public abstract virtual Guid get_Key();
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual DateTime get_UpdateDate();
    public abstract virtual string get_Name();
    public abstract virtual int get_CreatorId();
    public abstract virtual int get_ParentId();
    public abstract virtual int get_Level();
    public abstract virtual string get_Path();
    public abstract virtual int get_SortOrder();
    public abstract virtual int get_ContentTypeId();
    public abstract virtual int get_WriterId();
    public abstract virtual int get_VersionId();
}
public interface Umbraco.Core.Models.IRedirectUrl {
    [DataMemberAttribute]
public int ContentId { get; public set; }
    [DataMemberAttribute]
public Guid ContentKey { get; public set; }
    [DataMemberAttribute]
public DateTime CreateDateUtc { get; public set; }
    [DataMemberAttribute]
public string Culture { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    public abstract virtual int get_ContentId();
    public abstract virtual void set_ContentId(int value);
    public abstract virtual Guid get_ContentKey();
    public abstract virtual void set_ContentKey(Guid value);
    public abstract virtual DateTime get_CreateDateUtc();
    public abstract virtual void set_CreateDateUtc(DateTime value);
    public abstract virtual string get_Culture();
    public abstract virtual void set_Culture(string value);
    public abstract virtual string get_Url();
    public abstract virtual void set_Url(string value);
}
public interface Umbraco.Core.Models.IRelation {
    [DataMemberAttribute]
public int ParentId { get; public set; }
    [DataMemberAttribute]
public Guid ParentObjectType { get; public set; }
    [DataMemberAttribute]
public int ChildId { get; public set; }
    [DataMemberAttribute]
public Guid ChildObjectType { get; public set; }
    [DataMemberAttribute]
public IRelationType RelationType { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [IgnoreDataMemberAttribute]
public int RelationTypeId { get; }
    public abstract virtual int get_ParentId();
    public abstract virtual void set_ParentId(int value);
    public abstract virtual Guid get_ParentObjectType();
    public abstract virtual void set_ParentObjectType(Guid value);
    public abstract virtual int get_ChildId();
    public abstract virtual void set_ChildId(int value);
    public abstract virtual Guid get_ChildObjectType();
    public abstract virtual void set_ChildObjectType(Guid value);
    public abstract virtual IRelationType get_RelationType();
    public abstract virtual void set_RelationType(IRelationType value);
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    public abstract virtual int get_RelationTypeId();
}
public interface Umbraco.Core.Models.IRelationType {
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public bool IsBidirectional { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> ParentObjectType { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> ChildObjectType { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Alias();
    public abstract virtual void set_Alias(string value);
    public abstract virtual bool get_IsBidirectional();
    public abstract virtual void set_IsBidirectional(bool value);
    public abstract virtual Nullable`1<Guid> get_ParentObjectType();
    public abstract virtual void set_ParentObjectType(Nullable`1<Guid> value);
    public abstract virtual Nullable`1<Guid> get_ChildObjectType();
    public abstract virtual void set_ChildObjectType(Nullable`1<Guid> value);
}
public interface Umbraco.Core.Models.IServerRegistration {
    public string ServerIdentity { get; public set; }
    public string ServerAddress { get; public set; }
    public bool IsActive { get; public set; }
    public bool IsMaster { get; public set; }
    public DateTime Registered { get; public set; }
    public DateTime Accessed { get; public set; }
    public abstract virtual string get_ServerIdentity();
    public abstract virtual void set_ServerIdentity(string value);
    public abstract virtual string get_ServerAddress();
    public abstract virtual void set_ServerAddress(string value);
    public abstract virtual bool get_IsActive();
    public abstract virtual void set_IsActive(bool value);
    public abstract virtual bool get_IsMaster();
    public abstract virtual void set_IsMaster(bool value);
    public abstract virtual DateTime get_Registered();
    public abstract virtual void set_Registered(DateTime value);
    public abstract virtual DateTime get_Accessed();
    public abstract virtual void set_Accessed(DateTime value);
}
public interface Umbraco.Core.Models.ISimpleContentType {
    public int Id { get; }
    public string Name { get; }
    public string Alias { get; }
    public ITemplate DefaultTemplate { get; }
    public ContentVariation Variations { get; }
    public string Icon { get; }
    public bool IsContainer { get; }
    public bool AllowedAsRoot { get; }
    public bool IsElement { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_Alias();
    public abstract virtual ITemplate get_DefaultTemplate();
    public abstract virtual ContentVariation get_Variations();
    public abstract virtual string get_Icon();
    public abstract virtual bool get_IsContainer();
    public abstract virtual bool get_AllowedAsRoot();
    public abstract virtual bool get_IsElement();
    public abstract virtual bool SupportsPropertyVariation(string culture, string segment, bool wildcards);
}
public interface Umbraco.Core.Models.ITag {
    [DataMemberAttribute]
public string Group { get; public set; }
    [DataMemberAttribute]
public string Text { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> LanguageId { get; public set; }
    public int NodeCount { get; }
    public abstract virtual string get_Group();
    public abstract virtual void set_Group(string value);
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual Nullable`1<int> get_LanguageId();
    public abstract virtual void set_LanguageId(Nullable`1<int> value);
    public abstract virtual int get_NodeCount();
}
public interface Umbraco.Core.Models.ITemplate {
    public string Name { get; public set; }
    public string Alias { get; public set; }
    public bool IsMasterTemplate { get; }
    public string MasterTemplateAlias { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Alias();
    public abstract virtual void set_Alias(string value);
    public abstract virtual bool get_IsMasterTemplate();
    public abstract virtual string get_MasterTemplateAlias();
    public abstract virtual void SetMasterTemplate(ITemplate masterTemplate);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Language : EntityBase {
    private string _isoCode;
    private string _cultureName;
    private bool _isDefaultVariantLanguage;
    private bool _mandatory;
    private Nullable`1<int> _fallbackLanguageId;
    [DataMemberAttribute]
public string IsoCode { get; public set; }
    [DataMemberAttribute]
public string CultureName { get; public set; }
    [IgnoreDataMemberAttribute]
public CultureInfo CultureInfo { get; }
    public bool IsDefault { get; public set; }
    public bool IsMandatory { get; public set; }
    public Nullable`1<int> FallbackLanguageId { get; public set; }
    public Language(string isoCode);
    public sealed virtual string get_IsoCode();
    public sealed virtual void set_IsoCode(string value);
    public sealed virtual string get_CultureName();
    public sealed virtual void set_CultureName(string value);
    public sealed virtual CultureInfo get_CultureInfo();
    public sealed virtual bool get_IsDefault();
    public sealed virtual void set_IsDefault(bool value);
    public sealed virtual bool get_IsMandatory();
    public sealed virtual void set_IsMandatory(bool value);
    public sealed virtual Nullable`1<int> get_FallbackLanguageId();
    public sealed virtual void set_FallbackLanguageId(Nullable`1<int> value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Macro : EntityBase {
    private string _alias;
    private string _name;
    private bool _useInEditor;
    private int _cacheDuration;
    private bool _cacheByPage;
    private bool _cacheByMember;
    private bool _dontRender;
    private string _macroSource;
    private MacroTypes _macroType;
    private MacroPropertyCollection _properties;
    private List`1<string> _addedProperties;
    private List`1<string> _removedProperties;
    internal IEnumerable`1<string> AddedProperties { get; }
    internal IEnumerable`1<string> RemovedProperties { get; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public bool UseInEditor { get; public set; }
    [DataMemberAttribute]
public int CacheDuration { get; public set; }
    [DataMemberAttribute]
public bool CacheByPage { get; public set; }
    [DataMemberAttribute]
public bool CacheByMember { get; public set; }
    [DataMemberAttribute]
public bool DontRender { get; public set; }
    [DataMemberAttribute]
public string MacroSource { get; public set; }
    [DataMemberAttribute]
public MacroTypes MacroType { get; public set; }
    [DataMemberAttribute]
public MacroPropertyCollection Properties { get; }
    public Macro(int id, Guid key, bool useInEditor, int cacheDuration, string alias, string name, bool cacheByPage, bool cacheByMember, bool dontRender, string macroSource, MacroTypes macroType);
    public Macro(string alias, string name, string macroSource, MacroTypes macroType, bool cacheByPage, bool cacheByMember, bool dontRender, bool useInEditor, int cacheDuration);
    private void PropertiesChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void PropertyDataChanged(object sender, PropertyChangedEventArgs e);
    public virtual void ResetDirtyProperties(bool rememberDirty);
    internal IEnumerable`1<string> get_AddedProperties();
    internal IEnumerable`1<string> get_RemovedProperties();
    public sealed virtual string get_Alias();
    public sealed virtual void set_Alias(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_UseInEditor();
    public sealed virtual void set_UseInEditor(bool value);
    public sealed virtual int get_CacheDuration();
    public sealed virtual void set_CacheDuration(int value);
    public sealed virtual bool get_CacheByPage();
    public sealed virtual void set_CacheByPage(bool value);
    public sealed virtual bool get_CacheByMember();
    public sealed virtual void set_CacheByMember(bool value);
    public sealed virtual bool get_DontRender();
    public sealed virtual void set_DontRender(bool value);
    public sealed virtual string get_MacroSource();
    public sealed virtual void set_MacroSource(string value);
    public sealed virtual MacroTypes get_MacroType();
    public sealed virtual void set_MacroType(MacroTypes value);
    public sealed virtual MacroPropertyCollection get_Properties();
    protected virtual void PerformDeepClone(object clone);
}
[DataContractAttribute]
public class Umbraco.Core.Models.MacroProperty : BeingDirtyBase {
    private Guid _key;
    private string _alias;
    private string _name;
    private int _sortOrder;
    private int _id;
    private string _editorAlias;
    [DataMemberAttribute]
public Guid Key { get; public set; }
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public int SortOrder { get; public set; }
    [DataMemberAttribute]
public string EditorAlias { get; public set; }
    public MacroProperty(string alias, string name, int sortOrder, string editorAlias);
    internal MacroProperty(int id, Guid key, string alias, string name, int sortOrder, string editorAlias);
    public sealed virtual Guid get_Key();
    public sealed virtual void set_Key(Guid value);
    public sealed virtual int get_Id();
    public sealed virtual void set_Id(int value);
    public sealed virtual string get_Alias();
    public sealed virtual void set_Alias(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual int get_SortOrder();
    public sealed virtual void set_SortOrder(int value);
    public sealed virtual string get_EditorAlias();
    public sealed virtual void set_EditorAlias(string value);
    public sealed virtual object DeepClone();
    protected bool Equals(MacroProperty other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Umbraco.Core.Models.MacroPropertyCollection : ObservableDictionary`2<string, IMacroProperty> {
    public sealed virtual object DeepClone();
    public void UpdateProperty(string currentAlias, string name, Nullable`1<int> sortOrder, string editorAlias, string newAlias);
}
[DataContractAttribute]
public enum Umbraco.Core.Models.MacroTypes : Enum {
    public int value__;
    [EnumMemberAttribute]
public static MacroTypes Unknown;
    [EnumMemberAttribute]
public static MacroTypes PartialView;
}
[DataContractAttribute]
public class Umbraco.Core.Models.Media : ContentBase {
    public Media(string name, IMedia parent, IMediaType contentType);
    public Media(string name, IMedia parent, IMediaType contentType, PropertyCollection properties);
    public Media(string name, int parentId, IMediaType contentType);
    public Media(string name, int parentId, IMediaType contentType, PropertyCollection properties);
    internal void ChangeContentType(IMediaType contentType);
    internal void ChangeContentType(IMediaType contentType, bool clearProperties);
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.MediaExtensions : object {
    [ExtensionAttribute]
public static string GetUrl(IMedia media, string propertyAlias, ILogger logger);
    [ExtensionAttribute]
public static String[] GetUrls(IMedia media, IContentSection contentSection, ILogger logger);
}
[DataContractAttribute]
public class Umbraco.Core.Models.MediaType : ContentTypeCompositionBase {
    public static bool SupportsPublishingConst;
    public bool SupportsPublishing { get; }
    public MediaType(int parentId);
    public MediaType(IMediaType parent);
    public MediaType(IMediaType parent, string alias);
    public virtual ISimpleContentType ToSimple();
    public virtual bool get_SupportsPublishing();
    private sealed virtual override IMediaType Umbraco.Core.Models.IMediaType.DeepCloneWithResetIdentities(string newAlias);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.MediaTypeExtensions : object {
    [ExtensionAttribute]
internal static bool IsSystemMediaType(IMediaType mediaType);
}
public class Umbraco.Core.Models.MediaWithCrops : PublishedContentWrapped {
    [CompilerGeneratedAttribute]
private ImageCropperValue <LocalCrops>k__BackingField;
    [ObsoleteAttribute("This instance now implements IPublishedContent by wrapping the media item, use the extension methods directly on MediaWithCrops or use the Content property to get the media item instead.")]
public IPublishedContent MediaItem { get; }
    public IPublishedContent Content { get; }
    public ImageCropperValue LocalCrops { get; }
    public MediaWithCrops(IPublishedContent content, ImageCropperValue localCrops);
    public IPublishedContent get_MediaItem();
    public IPublishedContent get_Content();
    [CompilerGeneratedAttribute]
public ImageCropperValue get_LocalCrops();
}
public class Umbraco.Core.Models.MediaWithCrops`1 : MediaWithCrops {
    [CompilerGeneratedAttribute]
private T <Content>k__BackingField;
    public T Content { get; }
    public MediaWithCrops`1(T content, ImageCropperValue localCrops);
    [CompilerGeneratedAttribute]
public T get_Content();
    public static T op_Implicit(MediaWithCrops`1<T> mediaWithCrops);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Member : ContentBase {
    private IDictionary`2<string, object> _additionalData;
    private string _username;
    private string _email;
    private string _rawPasswordValue;
    private object _providerUserKey;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LongStringPropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShortStringPropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IntegerPropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BoolPropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateTimePropertyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyTypeAlias>k__BackingField;
    [DataMemberAttribute]
public string Username { get; public set; }
    [DataMemberAttribute]
public string Email { get; public set; }
    [IgnoreDataMemberAttribute]
public string RawPasswordValue { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<string> Groups { get; public set; }
    [DataMemberAttribute]
public string PasswordQuestion { get; public set; }
    [IgnoreDataMemberAttribute]
public string RawPasswordAnswerValue { get; public set; }
    [DataMemberAttribute]
public string Comments { get; public set; }
    [DataMemberAttribute]
public bool IsApproved { get; public set; }
    [DataMemberAttribute]
public bool IsLockedOut { get; public set; }
    [DataMemberAttribute]
public DateTime LastLoginDate { get; public set; }
    [DataMemberAttribute]
public DateTime LastPasswordChangeDate { get; public set; }
    [DataMemberAttribute]
public DateTime LastLockoutDate { get; public set; }
    [DataMemberAttribute]
public int FailedPasswordAttempts { get; public set; }
    [DataMemberAttribute]
public string ContentTypeAlias { get; }
    [DataMemberAttribute]
public object ProviderUserKey { get; public set; }
    [IgnoreDataMemberAttribute]
internal string LongStringPropertyValue { get; internal set; }
    [IgnoreDataMemberAttribute]
internal string ShortStringPropertyValue { get; internal set; }
    [IgnoreDataMemberAttribute]
internal int IntegerPropertyValue { get; internal set; }
    [IgnoreDataMemberAttribute]
internal bool BoolPropertyValue { get; internal set; }
    [IgnoreDataMemberAttribute]
internal DateTime DateTimePropertyValue { get; internal set; }
    [IgnoreDataMemberAttribute]
internal string PropertyTypeAlias { get; internal set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public IDictionary`2<string, object> AdditionalData { get; }
    [IgnoreDataMemberAttribute]
public bool HasAdditionalData { get; }
    public Member(IMemberType contentType);
    public Member(string name, IMemberType contentType);
    public Member(string name, string email, string username, IMemberType contentType, bool isApproved);
    public Member(string name, string email, string username, string rawPasswordValue, IMemberType contentType);
    public Member(string name, string email, string username, string rawPasswordValue, IMemberType contentType, bool isApproved);
    public sealed virtual string get_Username();
    public sealed virtual void set_Username(string value);
    public sealed virtual string get_Email();
    public sealed virtual void set_Email(string value);
    public sealed virtual string get_RawPasswordValue();
    public sealed virtual void set_RawPasswordValue(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(IEnumerable`1<string> value);
    public sealed virtual string get_PasswordQuestion();
    public sealed virtual void set_PasswordQuestion(string value);
    public sealed virtual string get_RawPasswordAnswerValue();
    public sealed virtual void set_RawPasswordAnswerValue(string value);
    public sealed virtual string get_Comments();
    public sealed virtual void set_Comments(string value);
    public sealed virtual bool get_IsApproved();
    public sealed virtual void set_IsApproved(bool value);
    public sealed virtual bool get_IsLockedOut();
    public sealed virtual void set_IsLockedOut(bool value);
    public sealed virtual DateTime get_LastLoginDate();
    public sealed virtual void set_LastLoginDate(DateTime value);
    public sealed virtual DateTime get_LastPasswordChangeDate();
    public sealed virtual void set_LastPasswordChangeDate(DateTime value);
    public sealed virtual DateTime get_LastLockoutDate();
    public sealed virtual void set_LastLockoutDate(DateTime value);
    public sealed virtual int get_FailedPasswordAttempts();
    public sealed virtual void set_FailedPasswordAttempts(int value);
    public virtual string get_ContentTypeAlias();
    public virtual object get_ProviderUserKey();
    public virtual void set_ProviderUserKey(object value);
    [CompilerGeneratedAttribute]
internal string get_LongStringPropertyValue();
    [CompilerGeneratedAttribute]
internal void set_LongStringPropertyValue(string value);
    [CompilerGeneratedAttribute]
internal string get_ShortStringPropertyValue();
    [CompilerGeneratedAttribute]
internal void set_ShortStringPropertyValue(string value);
    [CompilerGeneratedAttribute]
internal int get_IntegerPropertyValue();
    [CompilerGeneratedAttribute]
internal void set_IntegerPropertyValue(int value);
    [CompilerGeneratedAttribute]
internal bool get_BoolPropertyValue();
    [CompilerGeneratedAttribute]
internal void set_BoolPropertyValue(bool value);
    [CompilerGeneratedAttribute]
internal DateTime get_DateTimePropertyValue();
    [CompilerGeneratedAttribute]
internal void set_DateTimePropertyValue(DateTime value);
    [CompilerGeneratedAttribute]
internal string get_PropertyTypeAlias();
    [CompilerGeneratedAttribute]
internal void set_PropertyTypeAlias(string value);
    private Attempt`1<T> WarnIfPropertyTypeNotFoundOnGet(string propertyAlias, string propertyName, T defaultVal);
    private bool WarnIfPropertyTypeNotFoundOnSet(string propertyAlias, string propertyName);
    public sealed virtual IDictionary`2<string, object> get_AdditionalData();
    public sealed virtual bool get_HasAdditionalData();
    [CompilerGeneratedAttribute]
internal static void <WarnIfPropertyTypeNotFoundOnGet>g__DoLog|79_0(string logPropertyAlias, string logPropertyName);
    [CompilerGeneratedAttribute]
internal static void <WarnIfPropertyTypeNotFoundOnSet>g__DoLog|80_0(string logPropertyAlias, string logPropertyName);
}
[DataContractAttribute]
public class Umbraco.Core.Models.MemberGroup : EntityBase {
    private IDictionary`2<string, object> _additionalData;
    private string _name;
    private int _creatorId;
    [DataMemberAttribute]
[DoNotCloneAttribute]
public IDictionary`2<string, object> AdditionalData { get; }
    [IgnoreDataMemberAttribute]
public bool HasAdditionalData { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public int CreatorId { get; public set; }
    public sealed virtual IDictionary`2<string, object> get_AdditionalData();
    public sealed virtual bool get_HasAdditionalData();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual int get_CreatorId();
    public sealed virtual void set_CreatorId(int value);
}
public class Umbraco.Core.Models.Membership.ContentPermissionSet : EntityPermissionSet {
    private IContent _content;
    [CompilerGeneratedAttribute]
private Guid <Umbraco.Core.Models.Entities.IEntity.Key>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Umbraco.Core.Models.Entities.IEntity.CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Umbraco.Core.Models.Entities.IEntity.UpdateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Umbraco.Core.Models.Entities.IEntity.DeleteDate>k__BackingField;
    public int EntityId { get; }
    private int Umbraco.Core.Models.Entities.IEntity.Id { get; private set; }
    private bool Umbraco.Core.Models.Entities.IEntity.HasIdentity { get; }
    private Guid Umbraco.Core.Models.Entities.IEntity.Key { get; private set; }
    private DateTime Umbraco.Core.Models.Entities.IEntity.CreateDate { get; private set; }
    private DateTime Umbraco.Core.Models.Entities.IEntity.UpdateDate { get; private set; }
    private Nullable`1<DateTime> Umbraco.Core.Models.Entities.IEntity.DeleteDate { get; private set; }
    public ContentPermissionSet(IContent content, EntityPermissionCollection permissionsSet);
    public virtual int get_EntityId();
    private sealed virtual override int Umbraco.Core.Models.Entities.IEntity.get_Id();
    private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_Id(int value);
    private sealed virtual override bool Umbraco.Core.Models.Entities.IEntity.get_HasIdentity();
    [CompilerGeneratedAttribute]
private sealed virtual override Guid Umbraco.Core.Models.Entities.IEntity.get_Key();
    [CompilerGeneratedAttribute]
private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_Key(Guid value);
    [CompilerGeneratedAttribute]
private sealed virtual override DateTime Umbraco.Core.Models.Entities.IEntity.get_CreateDate();
    [CompilerGeneratedAttribute]
private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
private sealed virtual override DateTime Umbraco.Core.Models.Entities.IEntity.get_UpdateDate();
    [CompilerGeneratedAttribute]
private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_UpdateDate(DateTime value);
    [CompilerGeneratedAttribute]
private sealed virtual override Nullable`1<DateTime> Umbraco.Core.Models.Entities.IEntity.get_DeleteDate();
    [CompilerGeneratedAttribute]
private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_DeleteDate(Nullable`1<DateTime> value);
    private sealed virtual override object Umbraco.Core.Models.IDeepCloneable.DeepClone();
}
public class Umbraco.Core.Models.Membership.EntityPermission : object {
    [CompilerGeneratedAttribute]
private int <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AssignedPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefaultPermissions>k__BackingField;
    public int EntityId { get; private set; }
    public int UserGroupId { get; private set; }
    public String[] AssignedPermissions { get; private set; }
    public bool IsDefaultPermissions { get; private set; }
    public EntityPermission(int groupId, int entityId, String[] assignedPermissions);
    public EntityPermission(int groupId, int entityId, String[] assignedPermissions, bool isDefaultPermissions);
    [CompilerGeneratedAttribute]
public int get_EntityId();
    [CompilerGeneratedAttribute]
private void set_EntityId(int value);
    [CompilerGeneratedAttribute]
public int get_UserGroupId();
    [CompilerGeneratedAttribute]
private void set_UserGroupId(int value);
    [CompilerGeneratedAttribute]
public String[] get_AssignedPermissions();
    [CompilerGeneratedAttribute]
private void set_AssignedPermissions(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPermissions();
    [CompilerGeneratedAttribute]
private void set_IsDefaultPermissions(bool value);
    public sealed virtual bool Equals(EntityPermission other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Umbraco.Core.Models.Membership.EntityPermissionCollection : HashSet`1<EntityPermission> {
    private Dictionary`2<int, String[]> _aggregateNodePermissions;
    private String[] _aggregatePermissions;
    public EntityPermissionCollection(IEnumerable`1<EntityPermission> collection);
    public IEnumerable`1<string> GetAllPermissions(int entityId);
    public IEnumerable`1<string> GetAllPermissions();
}
public class Umbraco.Core.Models.Membership.EntityPermissionSet : object {
    private static Lazy`1<EntityPermissionSet> EmptyInstance;
    [CompilerGeneratedAttribute]
private int <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityPermissionCollection <PermissionsSet>k__BackingField;
    public int EntityId { get; private set; }
    public EntityPermissionCollection PermissionsSet { get; private set; }
    public EntityPermissionSet(int entityId, EntityPermissionCollection permissionsSet);
    private static EntityPermissionSet();
    public static EntityPermissionSet Empty();
    [CompilerGeneratedAttribute]
public virtual int get_EntityId();
    [CompilerGeneratedAttribute]
private void set_EntityId(int value);
    [CompilerGeneratedAttribute]
public EntityPermissionCollection get_PermissionsSet();
    [CompilerGeneratedAttribute]
private void set_PermissionsSet(EntityPermissionCollection value);
    public IEnumerable`1<string> GetAllPermissions();
}
public interface Umbraco.Core.Models.Membership.IMembershipUser {
    public object ProviderUserKey { get; public set; }
    public string Username { get; public set; }
    public string Email { get; public set; }
    public string RawPasswordValue { get; public set; }
    public string PasswordQuestion { get; public set; }
    public string RawPasswordAnswerValue { get; public set; }
    public string Comments { get; public set; }
    public bool IsApproved { get; public set; }
    public bool IsLockedOut { get; public set; }
    public DateTime LastLoginDate { get; public set; }
    public DateTime LastPasswordChangeDate { get; public set; }
    public DateTime LastLockoutDate { get; public set; }
    public int FailedPasswordAttempts { get; public set; }
    public abstract virtual object get_ProviderUserKey();
    public abstract virtual void set_ProviderUserKey(object value);
    public abstract virtual string get_Username();
    public abstract virtual void set_Username(string value);
    public abstract virtual string get_Email();
    public abstract virtual void set_Email(string value);
    public abstract virtual string get_RawPasswordValue();
    public abstract virtual void set_RawPasswordValue(string value);
    public abstract virtual string get_PasswordQuestion();
    public abstract virtual void set_PasswordQuestion(string value);
    public abstract virtual string get_RawPasswordAnswerValue();
    public abstract virtual void set_RawPasswordAnswerValue(string value);
    public abstract virtual string get_Comments();
    public abstract virtual void set_Comments(string value);
    public abstract virtual bool get_IsApproved();
    public abstract virtual void set_IsApproved(bool value);
    public abstract virtual bool get_IsLockedOut();
    public abstract virtual void set_IsLockedOut(bool value);
    public abstract virtual DateTime get_LastLoginDate();
    public abstract virtual void set_LastLoginDate(DateTime value);
    public abstract virtual DateTime get_LastPasswordChangeDate();
    public abstract virtual void set_LastPasswordChangeDate(DateTime value);
    public abstract virtual DateTime get_LastLockoutDate();
    public abstract virtual void set_LastLockoutDate(DateTime value);
    public abstract virtual int get_FailedPasswordAttempts();
    public abstract virtual void set_FailedPasswordAttempts(int value);
}
public interface Umbraco.Core.Models.Membership.IProfile {
    public int Id { get; }
    public string Name { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_Name();
}
public interface Umbraco.Core.Models.Membership.IReadOnlyUserGroup {
    public string Name { get; }
    public string Icon { get; }
    public int Id { get; }
    public Nullable`1<int> StartContentId { get; }
    public Nullable`1<int> StartMediaId { get; }
    public string Alias { get; }
    public IEnumerable`1<string> Permissions { get; public set; }
    public IEnumerable`1<string> AllowedSections { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Icon();
    public abstract virtual int get_Id();
    public abstract virtual Nullable`1<int> get_StartContentId();
    public abstract virtual Nullable`1<int> get_StartMediaId();
    public abstract virtual string get_Alias();
    public abstract virtual IEnumerable`1<string> get_Permissions();
    public abstract virtual void set_Permissions(IEnumerable`1<string> value);
    public abstract virtual IEnumerable`1<string> get_AllowedSections();
}
public interface Umbraco.Core.Models.Membership.IUser {
    public UserState UserState { get; }
    public string Name { get; public set; }
    public int SessionTimeout { get; public set; }
    public Int32[] StartContentIds { get; public set; }
    public Int32[] StartMediaIds { get; public set; }
    public string Language { get; public set; }
    public Nullable`1<DateTime> EmailConfirmedDate { get; public set; }
    public Nullable`1<DateTime> InvitedDate { get; public set; }
    public IEnumerable`1<IReadOnlyUserGroup> Groups { get; }
    public IEnumerable`1<string> AllowedSections { get; }
    public IProfile ProfileData { get; }
    public string SecurityStamp { get; public set; }
    public string Avatar { get; public set; }
    public string TourData { get; public set; }
    public abstract virtual UserState get_UserState();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_SessionTimeout();
    public abstract virtual void set_SessionTimeout(int value);
    public abstract virtual Int32[] get_StartContentIds();
    public abstract virtual void set_StartContentIds(Int32[] value);
    public abstract virtual Int32[] get_StartMediaIds();
    public abstract virtual void set_StartMediaIds(Int32[] value);
    public abstract virtual string get_Language();
    public abstract virtual void set_Language(string value);
    public abstract virtual Nullable`1<DateTime> get_EmailConfirmedDate();
    public abstract virtual void set_EmailConfirmedDate(Nullable`1<DateTime> value);
    public abstract virtual Nullable`1<DateTime> get_InvitedDate();
    public abstract virtual void set_InvitedDate(Nullable`1<DateTime> value);
    public abstract virtual IEnumerable`1<IReadOnlyUserGroup> get_Groups();
    public abstract virtual void RemoveGroup(string group);
    public abstract virtual void ClearGroups();
    public abstract virtual void AddGroup(IReadOnlyUserGroup group);
    public abstract virtual IEnumerable`1<string> get_AllowedSections();
    public abstract virtual IProfile get_ProfileData();
    public abstract virtual string get_SecurityStamp();
    public abstract virtual void set_SecurityStamp(string value);
    public abstract virtual string get_Avatar();
    public abstract virtual void set_Avatar(string value);
    public abstract virtual string get_TourData();
    public abstract virtual void set_TourData(string value);
}
public interface Umbraco.Core.Models.Membership.IUserGroup {
    public string Alias { get; public set; }
    public Nullable`1<int> StartContentId { get; public set; }
    public Nullable`1<int> StartMediaId { get; public set; }
    public string Icon { get; public set; }
    public string Name { get; public set; }
    public IEnumerable`1<string> Permissions { get; public set; }
    public IEnumerable`1<string> AllowedSections { get; }
    public int UserCount { get; }
    public abstract virtual string get_Alias();
    public abstract virtual void set_Alias(string value);
    public abstract virtual Nullable`1<int> get_StartContentId();
    public abstract virtual void set_StartContentId(Nullable`1<int> value);
    public abstract virtual Nullable`1<int> get_StartMediaId();
    public abstract virtual void set_StartMediaId(Nullable`1<int> value);
    public abstract virtual string get_Icon();
    public abstract virtual void set_Icon(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual IEnumerable`1<string> get_Permissions();
    public abstract virtual void set_Permissions(IEnumerable`1<string> value);
    public abstract virtual IEnumerable`1<string> get_AllowedSections();
    public abstract virtual void RemoveAllowedSection(string sectionAlias);
    public abstract virtual void AddAllowedSection(string sectionAlias);
    public abstract virtual void ClearAllowedSections();
    public abstract virtual int get_UserCount();
}
public enum Umbraco.Core.Models.Membership.MemberCountType : Enum {
    public int value__;
    public static MemberCountType All;
    public static MemberCountType Online;
    public static MemberCountType LockedOut;
    public static MemberCountType Approved;
}
internal class Umbraco.Core.Models.Membership.MemberExportModel : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTypeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MemberExportProperty> <Properties>k__BackingField;
    public int Id { get; public set; }
    public Guid Key { get; public set; }
    public string Name { get; public set; }
    public string Username { get; public set; }
    public string Email { get; public set; }
    public List`1<string> Groups { get; public set; }
    public string ContentTypeAlias { get; public set; }
    public DateTime CreateDate { get; public set; }
    public DateTime UpdateDate { get; public set; }
    public List`1<MemberExportProperty> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ContentTypeAlias();
    [CompilerGeneratedAttribute]
public void set_ContentTypeAlias(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdateDate();
    [CompilerGeneratedAttribute]
public void set_UpdateDate(DateTime value);
    [CompilerGeneratedAttribute]
public List`1<MemberExportProperty> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(List`1<MemberExportProperty> value);
}
internal class Umbraco.Core.Models.Membership.MemberExportProperty : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <UpdateDate>k__BackingField;
    public int Id { get; public set; }
    public string Alias { get; public set; }
    public string Name { get; public set; }
    public object Value { get; public set; }
    public Nullable`1<DateTime> CreateDate { get; public set; }
    public Nullable`1<DateTime> UpdateDate { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_UpdateDate();
    [CompilerGeneratedAttribute]
public void set_UpdateDate(Nullable`1<DateTime> value);
}
public enum Umbraco.Core.Models.Membership.MembershipScenario : Enum {
    public int value__;
    public static MembershipScenario NativeUmbraco;
    public static MembershipScenario CustomProviderWithUmbracoLink;
    public static MembershipScenario StandaloneCustomProvider;
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.Membership.MembershipUserExtensions : object {
    private static Nullable`1<MembershipScenario> _scenario;
    [ExtensionAttribute]
internal static UmbracoMembershipMember AsConcreteMembershipUser(IMembershipUser member, string providerName, bool providerKeyAsGuid);
    [ExtensionAttribute]
internal static IMembershipUser AsIMember(UmbracoMembershipMember membershipMember);
    [ExtensionAttribute]
internal static MembershipScenario GetMembershipScenario(IMemberService memberService);
}
public class Umbraco.Core.Models.Membership.ReadOnlyUserGroup : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartMediaId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedSections>k__BackingField;
    public int Id { get; private set; }
    public string Name { get; private set; }
    public string Icon { get; private set; }
    public Nullable`1<int> StartContentId { get; private set; }
    public Nullable`1<int> StartMediaId { get; private set; }
    public string Alias { get; private set; }
    public IEnumerable`1<string> Permissions { get; public set; }
    public IEnumerable`1<string> AllowedSections { get; private set; }
    public ReadOnlyUserGroup(int id, string name, string icon, Nullable`1<int> startContentId, Nullable`1<int> startMediaId, string alias, IEnumerable`1<string> allowedSections, IEnumerable`1<string> permissions);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_StartContentId();
    [CompilerGeneratedAttribute]
private void set_StartContentId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_StartMediaId();
    [CompilerGeneratedAttribute]
private void set_StartMediaId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
private void set_Alias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Permissions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Permissions(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_AllowedSections();
    [CompilerGeneratedAttribute]
private void set_AllowedSections(IEnumerable`1<string> value);
    public sealed virtual bool Equals(ReadOnlyUserGroup other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ReadOnlyUserGroup left, ReadOnlyUserGroup right);
    public static bool op_Inequality(ReadOnlyUserGroup left, ReadOnlyUserGroup right);
}
internal class Umbraco.Core.Models.Membership.UmbracoMembershipMember : MembershipUser {
    private IMembershipUser _member;
    private string _userName;
    private object _providerUserKey;
    private string _passwordQuestion;
    private bool _isLockedOut;
    private DateTime _lastLockoutDate;
    private DateTime _creationDate;
    private DateTime _lastLoginDate;
    private DateTime _lastPasswordChangedDate;
    private string _providerName;
    private string _email;
    private string _comment;
    private bool _isApproved;
    private DateTime _lastActivityDate;
    internal IMembershipUser Member { get; }
    public string UserName { get; }
    public object ProviderUserKey { get; }
    public string Email { get; public set; }
    public string PasswordQuestion { get; }
    public string Comment { get; public set; }
    public bool IsApproved { get; public set; }
    public bool IsLockedOut { get; }
    public DateTime LastLockoutDate { get; }
    public DateTime CreationDate { get; }
    public DateTime LastLoginDate { get; public set; }
    public DateTime LastActivityDate { get; public set; }
    public DateTime LastPasswordChangedDate { get; }
    public string ProviderName { get; }
    public UmbracoMembershipMember(IMembershipUser member, string providerName, bool providerKeyAsGuid);
    internal IMembershipUser get_Member();
    public virtual string get_UserName();
    public virtual object get_ProviderUserKey();
    public virtual string get_Email();
    public virtual void set_Email(string value);
    public virtual string get_PasswordQuestion();
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public virtual bool get_IsApproved();
    public virtual void set_IsApproved(bool value);
    public virtual bool get_IsLockedOut();
    public virtual DateTime get_LastLockoutDate();
    public virtual DateTime get_CreationDate();
    public virtual DateTime get_LastLoginDate();
    public virtual void set_LastLoginDate(DateTime value);
    public virtual DateTime get_LastActivityDate();
    public virtual void set_LastActivityDate(DateTime value);
    public virtual DateTime get_LastPasswordChangedDate();
    public virtual string get_ProviderName();
}
internal class Umbraco.Core.Models.Membership.UmbracoMembershipUser`1 : MembershipUser {
    private T _user;
    public UmbracoMembershipUser`1(T user);
    public UmbracoMembershipUser`1(string providerName, string name, object providerUserKey, string email, string passwordQuestion, string comment, bool isApproved, bool isLockedOut, DateTime creationDate, DateTime lastLoginDate, DateTime lastActivityDate, DateTime lastPasswordChangedDate, DateTime lastLockoutDate, string fullName, string language, T user);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Membership.User : EntityBase {
    private string _name;
    private string _securityStamp;
    private string _avatar;
    private string _tourData;
    private int _sessionTimeout;
    private Int32[] _startContentIds;
    private Int32[] _startMediaIds;
    private int _failedLoginAttempts;
    private string _username;
    private Nullable`1<DateTime> _emailConfirmedDate;
    private Nullable`1<DateTime> _invitedDate;
    private string _email;
    private string _rawPasswordValue;
    private IEnumerable`1<string> _allowedSections;
    private HashSet`1<IReadOnlyUserGroup> _userGroups;
    private bool _isApproved;
    private bool _isLockedOut;
    private string _language;
    private DateTime _lastPasswordChangedDate;
    private DateTime _lastLoginDate;
    private DateTime _lastLockoutDate;
    private bool _defaultToLiveEditing;
    private IDictionary`2<string, object> _additionalData;
    private object _additionalDataLock;
    private static DelegateEqualityComparer`1<IEnumerable`1<int>> IntegerEnumerableComparer;
    [CompilerGeneratedAttribute]
private string <PasswordQuestion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawPasswordAnswerValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comments>k__BackingField;
    [DoNotCloneAttribute]
[IgnoreDataMemberAttribute]
internal List`1<IUserGroup> GroupsToSave;
    [IgnoreDataMemberAttribute]
public object ProviderUserKey { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> EmailConfirmedDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> InvitedDate { get; public set; }
    [DataMemberAttribute]
public string Username { get; public set; }
    [DataMemberAttribute]
public string Email { get; public set; }
    [DataMemberAttribute]
public string RawPasswordValue { get; public set; }
    [DataMemberAttribute]
public bool IsApproved { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsLockedOut { get; public set; }
    [IgnoreDataMemberAttribute]
public DateTime LastLoginDate { get; public set; }
    [IgnoreDataMemberAttribute]
public DateTime LastPasswordChangeDate { get; public set; }
    [IgnoreDataMemberAttribute]
public DateTime LastLockoutDate { get; public set; }
    [IgnoreDataMemberAttribute]
public int FailedPasswordAttempts { get; public set; }
    [IgnoreDataMemberAttribute]
public string PasswordQuestion { get; public set; }
    [IgnoreDataMemberAttribute]
public string RawPasswordAnswerValue { get; public set; }
    [IgnoreDataMemberAttribute]
public string Comments { get; public set; }
    public UserState UserState { get; }
    [DataMemberAttribute]
public string Name { get; public set; }
    public IEnumerable`1<string> AllowedSections { get; }
    public IProfile ProfileData { get; }
    [IgnoreDataMemberAttribute]
public string SecurityStamp { get; public set; }
    [DataMemberAttribute]
public string Avatar { get; public set; }
    [DataMemberAttribute]
public string TourData { get; public set; }
    [DataMemberAttribute]
public int SessionTimeout { get; public set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public Int32[] StartContentIds { get; public set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public Int32[] StartMediaIds { get; public set; }
    [DataMemberAttribute]
public string Language { get; public set; }
    [IgnoreDataMemberAttribute]
internal bool DefaultToLiveEditing { get; internal set; }
    [DataMemberAttribute]
public IEnumerable`1<IReadOnlyUserGroup> Groups { get; }
    [IgnoreDataMemberAttribute]
[DoNotCloneAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This should not be used, it's currently used for only a single edge case - should probably be removed for netcore")]
internal IDictionary`2<string, object> AdditionalData { get; }
    [IgnoreDataMemberAttribute]
[DoNotCloneAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Not used, will be removed in future versions")]
internal object AdditionalDataLock { get; }
    public User(string name, string email, string username, string rawPasswordValue);
    public User(int id, string name, string email, string username, string rawPasswordValue, IEnumerable`1<IReadOnlyUserGroup> userGroups, Int32[] startContentIds, Int32[] startMediaIds);
    private static User();
    public sealed virtual object get_ProviderUserKey();
    public sealed virtual void set_ProviderUserKey(object value);
    public sealed virtual Nullable`1<DateTime> get_EmailConfirmedDate();
    public sealed virtual void set_EmailConfirmedDate(Nullable`1<DateTime> value);
    public sealed virtual Nullable`1<DateTime> get_InvitedDate();
    public sealed virtual void set_InvitedDate(Nullable`1<DateTime> value);
    public sealed virtual string get_Username();
    public sealed virtual void set_Username(string value);
    public sealed virtual string get_Email();
    public sealed virtual void set_Email(string value);
    public sealed virtual string get_RawPasswordValue();
    public sealed virtual void set_RawPasswordValue(string value);
    public sealed virtual bool get_IsApproved();
    public sealed virtual void set_IsApproved(bool value);
    public sealed virtual bool get_IsLockedOut();
    public sealed virtual void set_IsLockedOut(bool value);
    public sealed virtual DateTime get_LastLoginDate();
    public sealed virtual void set_LastLoginDate(DateTime value);
    public sealed virtual DateTime get_LastPasswordChangeDate();
    public sealed virtual void set_LastPasswordChangeDate(DateTime value);
    public sealed virtual DateTime get_LastLockoutDate();
    public sealed virtual void set_LastLockoutDate(DateTime value);
    public sealed virtual int get_FailedPasswordAttempts();
    public sealed virtual void set_FailedPasswordAttempts(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PasswordQuestion();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PasswordQuestion(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RawPasswordAnswerValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RawPasswordAnswerValue(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Comments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Comments(string value);
    public sealed virtual UserState get_UserState();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IEnumerable`1<string> get_AllowedSections();
    public sealed virtual IProfile get_ProfileData();
    public sealed virtual string get_SecurityStamp();
    public sealed virtual void set_SecurityStamp(string value);
    public sealed virtual string get_Avatar();
    public sealed virtual void set_Avatar(string value);
    public sealed virtual string get_TourData();
    public sealed virtual void set_TourData(string value);
    public sealed virtual int get_SessionTimeout();
    public sealed virtual void set_SessionTimeout(int value);
    public sealed virtual Int32[] get_StartContentIds();
    public sealed virtual void set_StartContentIds(Int32[] value);
    public sealed virtual Int32[] get_StartMediaIds();
    public sealed virtual void set_StartMediaIds(Int32[] value);
    public sealed virtual string get_Language();
    public sealed virtual void set_Language(string value);
    internal bool get_DefaultToLiveEditing();
    internal void set_DefaultToLiveEditing(bool value);
    public sealed virtual IEnumerable`1<IReadOnlyUserGroup> get_Groups();
    public sealed virtual void RemoveGroup(string group);
    public sealed virtual void ClearGroups();
    public sealed virtual void AddGroup(IReadOnlyUserGroup group);
    internal IDictionary`2<string, object> get_AdditionalData();
    internal object get_AdditionalDataLock();
    protected virtual void PerformDeepClone(object clone);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Membership.UserGroup : EntityBase {
    private Nullable`1<int> _startContentId;
    private Nullable`1<int> _startMediaId;
    private string _alias;
    private string _icon;
    private string _name;
    private IEnumerable`1<string> _permissions;
    private List`1<string> _sectionCollection;
    private static DelegateEqualityComparer`1<IEnumerable`1<string>> StringEnumerableComparer;
    [CompilerGeneratedAttribute]
private int <UserCount>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> StartMediaId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> StartContentId { get; public set; }
    [DataMemberAttribute]
public string Icon { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<string> Permissions { get; public set; }
    public IEnumerable`1<string> AllowedSections { get; }
    public int UserCount { get; }
    public UserGroup(int userCount, string alias, string name, IEnumerable`1<string> permissions, string icon);
    private static UserGroup();
    public sealed virtual Nullable`1<int> get_StartMediaId();
    public sealed virtual void set_StartMediaId(Nullable`1<int> value);
    public sealed virtual Nullable`1<int> get_StartContentId();
    public sealed virtual void set_StartContentId(Nullable`1<int> value);
    public sealed virtual string get_Icon();
    public sealed virtual void set_Icon(string value);
    public sealed virtual string get_Alias();
    public sealed virtual void set_Alias(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual IEnumerable`1<string> get_Permissions();
    public sealed virtual void set_Permissions(IEnumerable`1<string> value);
    public sealed virtual IEnumerable`1<string> get_AllowedSections();
    public sealed virtual void RemoveAllowedSection(string sectionAlias);
    public sealed virtual void AddAllowedSection(string sectionAlias);
    public sealed virtual void ClearAllowedSections();
    [CompilerGeneratedAttribute]
public sealed virtual int get_UserCount();
    protected virtual void PerformDeepClone(object clone);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.Membership.UserGroupExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyUserGroup ToReadOnlyGroup(IUserGroup group);
    [ExtensionAttribute]
public static bool IsSystemUserGroup(IUserGroup group);
    [ExtensionAttribute]
public static bool IsSystemUserGroup(IReadOnlyUserGroup group);
    [ExtensionAttribute]
public static IReadOnlyUserGroup ToReadOnlyGroup(UserGroupDto group);
    [ExtensionAttribute]
private static bool IsSystemUserGroup(string groupAlias);
}
internal class Umbraco.Core.Models.Membership.UserProfile : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Id { get; private set; }
    public string Name { get; private set; }
    public UserProfile(int id, string name);
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public sealed virtual bool Equals(UserProfile other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UserProfile left, UserProfile right);
    public static bool op_Inequality(UserProfile left, UserProfile right);
}
public enum Umbraco.Core.Models.Membership.UserState : Enum {
    public int value__;
    public static UserState All;
    public static UserState Active;
    public static UserState Disabled;
    public static UserState LockedOut;
    public static UserState Invited;
    public static UserState Inactive;
}
[DataContractAttribute]
public class Umbraco.Core.Models.MemberType : ContentTypeCompositionBase {
    public static bool SupportsPublishingConst;
    private string _alias;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, MemberTypePropertyProfileAccess> <MemberTypePropertyTypes>k__BackingField;
    public bool SupportsPublishing { get; }
    public ContentVariation Variations { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
internal IDictionary`2<string, MemberTypePropertyProfileAccess> MemberTypePropertyTypes { get; private set; }
    public MemberType(int parentId);
    public MemberType(IContentTypeComposition parent);
    public MemberType(IContentTypeComposition parent, string alias);
    public virtual ISimpleContentType ToSimple();
    public virtual bool get_SupportsPublishing();
    public virtual ContentVariation get_Variations();
    public virtual void set_Variations(ContentVariation value);
    public virtual string get_Alias();
    public virtual void set_Alias(string value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<string, MemberTypePropertyProfileAccess> get_MemberTypePropertyTypes();
    [CompilerGeneratedAttribute]
private void set_MemberTypePropertyTypes(IDictionary`2<string, MemberTypePropertyProfileAccess> value);
    public sealed virtual bool MemberCanEditProperty(string propertyTypeAlias);
    public sealed virtual bool MemberCanViewProperty(string propertyTypeAlias);
    public sealed virtual bool IsSensitiveProperty(string propertyTypeAlias);
    public sealed virtual void SetMemberCanEditProperty(string propertyTypeAlias, bool value);
    public sealed virtual void SetMemberCanViewProperty(string propertyTypeAlias, bool value);
    public sealed virtual void SetIsSensitiveProperty(string propertyTypeAlias, bool value);
}
internal class Umbraco.Core.Models.MemberTypePropertyProfileAccess : object {
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEditable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitive>k__BackingField;
    public bool IsVisible { get; public set; }
    public bool IsEditable { get; public set; }
    public bool IsSensitive { get; public set; }
    public MemberTypePropertyProfileAccess(bool isVisible, bool isEditable, bool isSenstive);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEditable();
    [CompilerGeneratedAttribute]
public void set_IsEditable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSensitive();
    [CompilerGeneratedAttribute]
public void set_IsSensitive(bool value);
}
public class Umbraco.Core.Models.MigrationEntry : EntityBase {
    private string _migrationName;
    private SemVersion _version;
    public string MigrationName { get; public set; }
    public SemVersion Version { get; public set; }
    public MigrationEntry(int id, DateTime createDate, string migrationName, SemVersion version);
    public sealed virtual string get_MigrationName();
    public sealed virtual void set_MigrationName(string value);
    public sealed virtual SemVersion get_Version();
    public sealed virtual void set_Version(SemVersion value);
}
public class Umbraco.Core.Models.Notification : object {
    [CompilerGeneratedAttribute]
private int <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <EntityType>k__BackingField;
    public int EntityId { get; private set; }
    public int UserId { get; private set; }
    public string Action { get; private set; }
    public Guid EntityType { get; private set; }
    public Notification(int entityId, int userId, string action, Guid entityType);
    [CompilerGeneratedAttribute]
public int get_EntityId();
    [CompilerGeneratedAttribute]
private void set_EntityId(int value);
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
private void set_UserId(int value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(string value);
    [CompilerGeneratedAttribute]
public Guid get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(Guid value);
}
public class Umbraco.Core.Models.NotificationEmailBodyParams : object {
    [CompilerGeneratedAttribute]
private string <RecipientName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Summary>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditedUser>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SiteUrl>k__BackingField;
    public string RecipientName { get; }
    public string Action { get; }
    public string ItemName { get; }
    public string ItemId { get; }
    public string ItemUrl { get; }
    public string Summary { get; }
    public string EditedUser { get; }
    public string SiteUrl { get; }
    public NotificationEmailBodyParams(string recipientName, string action, string itemName, string itemId, string itemUrl, string editedUser, string siteUrl, string summary);
    [CompilerGeneratedAttribute]
public string get_RecipientName();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public string get_ItemName();
    [CompilerGeneratedAttribute]
public string get_ItemId();
    [CompilerGeneratedAttribute]
public string get_ItemUrl();
    [CompilerGeneratedAttribute]
public string get_Summary();
    [CompilerGeneratedAttribute]
public string get_EditedUser();
    [CompilerGeneratedAttribute]
public string get_SiteUrl();
}
public class Umbraco.Core.Models.NotificationEmailSubjectParams : object {
    [CompilerGeneratedAttribute]
private string <SiteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemName>k__BackingField;
    public string SiteUrl { get; }
    public string Action { get; }
    public string ItemName { get; }
    public NotificationEmailSubjectParams(string siteUrl, string action, string itemName);
    [CompilerGeneratedAttribute]
public string get_SiteUrl();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public string get_ItemName();
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.ObjectTypes : object {
    private static ConcurrentDictionary`2<UmbracoObjectTypes, Guid> UmbracoGuids;
    private static ConcurrentDictionary`2<UmbracoObjectTypes, string> UmbracoUdiTypes;
    private static ConcurrentDictionary`2<UmbracoObjectTypes, string> UmbracoFriendlyNames;
    private static ConcurrentDictionary`2<UmbracoObjectTypes, Type> UmbracoTypes;
    private static ConcurrentDictionary`2<Guid, string> GuidUdiTypes;
    private static ConcurrentDictionary`2<Guid, UmbracoObjectTypes> GuidObjectTypes;
    private static ConcurrentDictionary`2<Guid, Type> GuidTypes;
    private static ObjectTypes();
    private static FieldInfo GetEnumField(string name);
    private static FieldInfo GetEnumField(Guid guid);
    public static UmbracoObjectTypes GetUmbracoObjectType(string name);
    public static UmbracoObjectTypes GetUmbracoObjectType(Guid objectType);
    public static string GetUdiType(Guid objectType);
    public static Type GetClrType(Guid objectType);
    [ExtensionAttribute]
public static Guid GetGuid(UmbracoObjectTypes objectType);
    [ExtensionAttribute]
public static string GetUdiType(UmbracoObjectTypes objectType);
    [ExtensionAttribute]
public static string GetName(UmbracoObjectTypes objectType);
    [ExtensionAttribute]
public static string GetFriendlyName(UmbracoObjectTypes objectType);
    [ExtensionAttribute]
public static Type GetClrType(UmbracoObjectTypes objectType);
}
public enum Umbraco.Core.Models.Packaging.ActionRunAt : Enum {
    public int value__;
    public static ActionRunAt Undefined;
    public static ActionRunAt Install;
    public static ActionRunAt Uninstall;
}
public class Umbraco.Core.Models.Packaging.CompiledPackage : object {
    [CompilerGeneratedAttribute]
private FileInfo <PackageFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <License>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <UmbracoVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private RequirementsType <UmbracoVersionRequirementsType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Contributors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Readme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageView>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private PreInstallWarnings <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<CompiledPackageFile> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<XElement> <Macros>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<XElement> <Templates>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<XElement> <Stylesheets>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<XElement> <DataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<XElement> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<XElement> <DictionaryItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<XElement> <DocumentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<CompiledPackageDocument> <Documents>k__BackingField;
    public FileInfo PackageFile { get; public set; }
    public string Name { get; public set; }
    public string Version { get; public set; }
    public string Url { get; public set; }
    public string License { get; public set; }
    public string LicenseUrl { get; public set; }
    public Version UmbracoVersion { get; public set; }
    public RequirementsType UmbracoVersionRequirementsType { get; public set; }
    public string Author { get; public set; }
    public string AuthorUrl { get; public set; }
    public IList`1<string> Contributors { get; public set; }
    public string Readme { get; public set; }
    public string PackageView { get; public set; }
    public string IconUrl { get; public set; }
    public string Actions { get; public set; }
    public PreInstallWarnings Warnings { get; public set; }
    public List`1<CompiledPackageFile> Files { get; public set; }
    public IEnumerable`1<XElement> Macros { get; public set; }
    public IEnumerable`1<XElement> Templates { get; public set; }
    public IEnumerable`1<XElement> Stylesheets { get; public set; }
    public IEnumerable`1<XElement> DataTypes { get; public set; }
    public IEnumerable`1<XElement> Languages { get; public set; }
    public IEnumerable`1<XElement> DictionaryItems { get; public set; }
    public IEnumerable`1<XElement> DocumentTypes { get; public set; }
    public IEnumerable`1<CompiledPackageDocument> Documents { get; public set; }
    [CompilerGeneratedAttribute]
public FileInfo get_PackageFile();
    [CompilerGeneratedAttribute]
public void set_PackageFile(FileInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_License();
    [CompilerGeneratedAttribute]
public void set_License(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseUrl();
    [CompilerGeneratedAttribute]
public void set_LicenseUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_UmbracoVersion();
    [CompilerGeneratedAttribute]
public void set_UmbracoVersion(Version value);
    [CompilerGeneratedAttribute]
public RequirementsType get_UmbracoVersionRequirementsType();
    [CompilerGeneratedAttribute]
public void set_UmbracoVersionRequirementsType(RequirementsType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthorUrl();
    [CompilerGeneratedAttribute]
public void set_AuthorUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_Contributors();
    [CompilerGeneratedAttribute]
public void set_Contributors(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Readme();
    [CompilerGeneratedAttribute]
public void set_Readme(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PackageView();
    [CompilerGeneratedAttribute]
public void set_PackageView(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(string value);
    [CompilerGeneratedAttribute]
public PreInstallWarnings get_Warnings();
    [CompilerGeneratedAttribute]
public void set_Warnings(PreInstallWarnings value);
    [CompilerGeneratedAttribute]
public List`1<CompiledPackageFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(List`1<CompiledPackageFile> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<XElement> get_Macros();
    [CompilerGeneratedAttribute]
public void set_Macros(IEnumerable`1<XElement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<XElement> get_Templates();
    [CompilerGeneratedAttribute]
public void set_Templates(IEnumerable`1<XElement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<XElement> get_Stylesheets();
    [CompilerGeneratedAttribute]
public void set_Stylesheets(IEnumerable`1<XElement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<XElement> get_DataTypes();
    [CompilerGeneratedAttribute]
public void set_DataTypes(IEnumerable`1<XElement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<XElement> get_Languages();
    [CompilerGeneratedAttribute]
public void set_Languages(IEnumerable`1<XElement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<XElement> get_DictionaryItems();
    [CompilerGeneratedAttribute]
public void set_DictionaryItems(IEnumerable`1<XElement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<XElement> get_DocumentTypes();
    [CompilerGeneratedAttribute]
public void set_DocumentTypes(IEnumerable`1<XElement> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<CompiledPackageDocument> get_Documents();
    [CompilerGeneratedAttribute]
public void set_Documents(IEnumerable`1<CompiledPackageDocument> value);
}
public class Umbraco.Core.Models.Packaging.CompiledPackageDocument : object {
    [CompilerGeneratedAttribute]
private string <ImportMode>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <XmlData>k__BackingField;
    public string ImportMode { get; public set; }
    public XElement XmlData { get; public set; }
    public static CompiledPackageDocument Create(XElement xml);
    [CompilerGeneratedAttribute]
public string get_ImportMode();
    [CompilerGeneratedAttribute]
public void set_ImportMode(string value);
    [CompilerGeneratedAttribute]
public XElement get_XmlData();
    [CompilerGeneratedAttribute]
public void set_XmlData(XElement value);
}
public class Umbraco.Core.Models.Packaging.CompiledPackageFile : object {
    [CompilerGeneratedAttribute]
private string <OriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalName>k__BackingField;
    public string OriginalPath { get; public set; }
    public string UniqueFileName { get; public set; }
    public string OriginalName { get; public set; }
    public static CompiledPackageFile Create(XElement xml);
    [CompilerGeneratedAttribute]
public string get_OriginalPath();
    [CompilerGeneratedAttribute]
public void set_OriginalPath(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueFileName();
    [CompilerGeneratedAttribute]
public void set_UniqueFileName(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalName();
    [CompilerGeneratedAttribute]
public void set_OriginalName(string value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Packaging.InstallationSummary : object {
    [CompilerGeneratedAttribute]
private IPackageInfo <MetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDataType> <DataTypesInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILanguage> <LanguagesInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDictionaryItem> <DictionaryItemsInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMacro> <MacrosInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <FilesInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITemplate> <TemplatesInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IContentType> <DocumentTypesInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFile> <StylesheetsInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IContent> <ContentInstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ActionErrors>k__BackingField;
    public IPackageInfo MetaData { get; public set; }
    public IEnumerable`1<IDataType> DataTypesInstalled { get; public set; }
    public IEnumerable`1<ILanguage> LanguagesInstalled { get; public set; }
    public IEnumerable`1<IDictionaryItem> DictionaryItemsInstalled { get; public set; }
    public IEnumerable`1<IMacro> MacrosInstalled { get; public set; }
    public IEnumerable`1<string> FilesInstalled { get; public set; }
    public IEnumerable`1<ITemplate> TemplatesInstalled { get; public set; }
    public IEnumerable`1<IContentType> DocumentTypesInstalled { get; public set; }
    public IEnumerable`1<IFile> StylesheetsInstalled { get; public set; }
    public IEnumerable`1<IContent> ContentInstalled { get; public set; }
    public IEnumerable`1<PackageAction> Actions { get; public set; }
    public IEnumerable`1<string> ActionErrors { get; public set; }
    [CompilerGeneratedAttribute]
public IPackageInfo get_MetaData();
    [CompilerGeneratedAttribute]
public void set_MetaData(IPackageInfo value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDataType> get_DataTypesInstalled();
    [CompilerGeneratedAttribute]
public void set_DataTypesInstalled(IEnumerable`1<IDataType> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ILanguage> get_LanguagesInstalled();
    [CompilerGeneratedAttribute]
public void set_LanguagesInstalled(IEnumerable`1<ILanguage> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDictionaryItem> get_DictionaryItemsInstalled();
    [CompilerGeneratedAttribute]
public void set_DictionaryItemsInstalled(IEnumerable`1<IDictionaryItem> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMacro> get_MacrosInstalled();
    [CompilerGeneratedAttribute]
public void set_MacrosInstalled(IEnumerable`1<IMacro> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_FilesInstalled();
    [CompilerGeneratedAttribute]
public void set_FilesInstalled(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITemplate> get_TemplatesInstalled();
    [CompilerGeneratedAttribute]
public void set_TemplatesInstalled(IEnumerable`1<ITemplate> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IContentType> get_DocumentTypesInstalled();
    [CompilerGeneratedAttribute]
public void set_DocumentTypesInstalled(IEnumerable`1<IContentType> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFile> get_StylesheetsInstalled();
    [CompilerGeneratedAttribute]
public void set_StylesheetsInstalled(IEnumerable`1<IFile> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IContent> get_ContentInstalled();
    [CompilerGeneratedAttribute]
public void set_ContentInstalled(IEnumerable`1<IContent> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<PackageAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IEnumerable`1<PackageAction> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ActionErrors();
    [CompilerGeneratedAttribute]
public void set_ActionErrors(IEnumerable`1<string> value);
}
public interface Umbraco.Core.Models.Packaging.IPackageInfo {
    public string Name { get; }
    public string Version { get; }
    public string Url { get; }
    public string License { get; }
    public string LicenseUrl { get; }
    public Version UmbracoVersion { get; }
    public string Author { get; }
    public string AuthorUrl { get; }
    public IList`1<string> Contributors { get; }
    public string Readme { get; }
    public string PackageView { get; }
    public string IconUrl { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_Version();
    public abstract virtual string get_Url();
    public abstract virtual string get_License();
    public abstract virtual string get_LicenseUrl();
    public abstract virtual Version get_UmbracoVersion();
    public abstract virtual string get_Author();
    public abstract virtual string get_AuthorUrl();
    public abstract virtual IList`1<string> get_Contributors();
    public abstract virtual string get_Readme();
    public abstract virtual string get_PackageView();
    public abstract virtual string get_IconUrl();
}
[DataContractAttribute]
public class Umbraco.Core.Models.Packaging.PackageAction : object {
    private ActionRunAt _runAt;
    private Nullable`1<bool> _undo;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageName>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <XmlData>k__BackingField;
    public string Alias { get; public set; }
    public string PackageName { get; public set; }
    public ActionRunAt RunAt { get; public set; }
    public bool Undo { get; public set; }
    public XElement XmlData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_PackageName();
    [CompilerGeneratedAttribute]
public void set_PackageName(string value);
    public ActionRunAt get_RunAt();
    public void set_RunAt(ActionRunAt value);
    public bool get_Undo();
    public void set_Undo(bool value);
    [CompilerGeneratedAttribute]
public XElement get_XmlData();
    [CompilerGeneratedAttribute]
public void set_XmlData(XElement value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Packaging.PackageDefinition : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PackageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackagePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <UmbracoVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Contributors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <License>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Readme>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContentLoadChildNodes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Macros>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Languages>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DictionaryItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Templates>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DocumentTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Stylesheets>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Files>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PackageView>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DataTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IconUrl>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public Guid PackageId { get; public set; }
    [DataMemberAttribute]
[RequiredAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
[RequiredAttribute]
[UrlAttribute]
public string Url { get; public set; }
    [ReadOnlyAttribute("True")]
[DataMemberAttribute]
public string PackagePath { get; public set; }
    [DataMemberAttribute]
[RequiredAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public Version UmbracoVersion { get; public set; }
    [DataMemberAttribute]
[RequiredAttribute]
public string Author { get; public set; }
    [DataMemberAttribute]
[RequiredAttribute]
[UrlAttribute]
public string AuthorUrl { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Contributors { get; public set; }
    [DataMemberAttribute]
public string License { get; public set; }
    [DataMemberAttribute]
public string LicenseUrl { get; public set; }
    [DataMemberAttribute]
public string Readme { get; public set; }
    [DataMemberAttribute]
public bool ContentLoadChildNodes { get; public set; }
    [DataMemberAttribute]
public string ContentNodeId { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Macros { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Languages { get; public set; }
    [DataMemberAttribute]
public IList`1<string> DictionaryItems { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Templates { get; public set; }
    [DataMemberAttribute]
public IList`1<string> DocumentTypes { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Stylesheets { get; public set; }
    [DataMemberAttribute]
public IList`1<string> Files { get; public set; }
    [DataMemberAttribute]
public string PackageView { get; public set; }
    [DataMemberAttribute]
public string Actions { get; public set; }
    [DataMemberAttribute]
public IList`1<string> DataTypes { get; public set; }
    [DataMemberAttribute]
public string IconUrl { get; public set; }
    internal static PackageDefinition FromCompiledPackage(CompiledPackage compiled);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_PackageId();
    [CompilerGeneratedAttribute]
public void set_PackageId(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_PackagePath();
    [CompilerGeneratedAttribute]
public void set_PackagePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Version get_UmbracoVersion();
    [CompilerGeneratedAttribute]
public void set_UmbracoVersion(Version value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AuthorUrl();
    [CompilerGeneratedAttribute]
public void set_AuthorUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_Contributors();
    [CompilerGeneratedAttribute]
public void set_Contributors(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_License();
    [CompilerGeneratedAttribute]
public void set_License(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LicenseUrl();
    [CompilerGeneratedAttribute]
public void set_LicenseUrl(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Readme();
    [CompilerGeneratedAttribute]
public void set_Readme(string value);
    [CompilerGeneratedAttribute]
public bool get_ContentLoadChildNodes();
    [CompilerGeneratedAttribute]
public void set_ContentLoadChildNodes(bool value);
    [CompilerGeneratedAttribute]
public string get_ContentNodeId();
    [CompilerGeneratedAttribute]
public void set_ContentNodeId(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Macros();
    [CompilerGeneratedAttribute]
public void set_Macros(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Languages();
    [CompilerGeneratedAttribute]
public void set_Languages(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DictionaryItems();
    [CompilerGeneratedAttribute]
public void set_DictionaryItems(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Templates();
    [CompilerGeneratedAttribute]
public void set_Templates(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DocumentTypes();
    [CompilerGeneratedAttribute]
public void set_DocumentTypes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Stylesheets();
    [CompilerGeneratedAttribute]
public void set_Stylesheets(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PackageView();
    [CompilerGeneratedAttribute]
public void set_PackageView(string value);
    [CompilerGeneratedAttribute]
public string get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DataTypes();
    [CompilerGeneratedAttribute]
public void set_DataTypes(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IconUrl();
    [CompilerGeneratedAttribute]
public void set_IconUrl(string value);
}
public class Umbraco.Core.Models.Packaging.PreInstallWarnings : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <UnsecureFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <FilesReplaced>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMacro> <ConflictingMacros>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITemplate> <ConflictingTemplates>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFile> <ConflictingStylesheets>k__BackingField;
    public IEnumerable`1<string> UnsecureFiles { get; public set; }
    public IEnumerable`1<string> FilesReplaced { get; public set; }
    public IEnumerable`1<IMacro> ConflictingMacros { get; public set; }
    public IEnumerable`1<ITemplate> ConflictingTemplates { get; public set; }
    public IEnumerable`1<IFile> ConflictingStylesheets { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_UnsecureFiles();
    [CompilerGeneratedAttribute]
public void set_UnsecureFiles(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_FilesReplaced();
    [CompilerGeneratedAttribute]
public void set_FilesReplaced(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMacro> get_ConflictingMacros();
    [CompilerGeneratedAttribute]
public void set_ConflictingMacros(IEnumerable`1<IMacro> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITemplate> get_ConflictingTemplates();
    [CompilerGeneratedAttribute]
public void set_ConflictingTemplates(IEnumerable`1<ITemplate> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFile> get_ConflictingStylesheets();
    [CompilerGeneratedAttribute]
public void set_ConflictingStylesheets(IEnumerable`1<IFile> value);
}
public enum Umbraco.Core.Models.Packaging.RequirementsType : Enum {
    public int value__;
    public static RequirementsType Strict;
    public static RequirementsType Legacy;
}
[DataContractAttribute]
public class Umbraco.Core.Models.Packaging.UninstallationSummary : object {
    [CompilerGeneratedAttribute]
private IPackageInfo <MetaData>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDataType> <DataTypesUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILanguage> <LanguagesUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDictionaryItem> <DictionaryItemsUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMacro> <MacrosUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <FilesUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITemplate> <TemplatesUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IContentType> <DocumentTypesUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFile> <StylesheetsUninstalled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageAction> <Actions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ActionErrors>k__BackingField;
    public IPackageInfo MetaData { get; public set; }
    public IEnumerable`1<IDataType> DataTypesUninstalled { get; public set; }
    public IEnumerable`1<ILanguage> LanguagesUninstalled { get; public set; }
    public IEnumerable`1<IDictionaryItem> DictionaryItemsUninstalled { get; public set; }
    public IEnumerable`1<IMacro> MacrosUninstalled { get; public set; }
    public IEnumerable`1<string> FilesUninstalled { get; public set; }
    public IEnumerable`1<ITemplate> TemplatesUninstalled { get; public set; }
    public IEnumerable`1<IContentType> DocumentTypesUninstalled { get; public set; }
    public IEnumerable`1<IFile> StylesheetsUninstalled { get; public set; }
    public IEnumerable`1<PackageAction> Actions { get; public set; }
    public IEnumerable`1<string> ActionErrors { get; public set; }
    [CompilerGeneratedAttribute]
public IPackageInfo get_MetaData();
    [CompilerGeneratedAttribute]
public void set_MetaData(IPackageInfo value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDataType> get_DataTypesUninstalled();
    [CompilerGeneratedAttribute]
public void set_DataTypesUninstalled(IEnumerable`1<IDataType> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ILanguage> get_LanguagesUninstalled();
    [CompilerGeneratedAttribute]
public void set_LanguagesUninstalled(IEnumerable`1<ILanguage> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDictionaryItem> get_DictionaryItemsUninstalled();
    [CompilerGeneratedAttribute]
public void set_DictionaryItemsUninstalled(IEnumerable`1<IDictionaryItem> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IMacro> get_MacrosUninstalled();
    [CompilerGeneratedAttribute]
public void set_MacrosUninstalled(IEnumerable`1<IMacro> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_FilesUninstalled();
    [CompilerGeneratedAttribute]
public void set_FilesUninstalled(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITemplate> get_TemplatesUninstalled();
    [CompilerGeneratedAttribute]
public void set_TemplatesUninstalled(IEnumerable`1<ITemplate> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IContentType> get_DocumentTypesUninstalled();
    [CompilerGeneratedAttribute]
public void set_DocumentTypesUninstalled(IEnumerable`1<IContentType> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFile> get_StylesheetsUninstalled();
    [CompilerGeneratedAttribute]
public void set_StylesheetsUninstalled(IEnumerable`1<IFile> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<PackageAction> get_Actions();
    [CompilerGeneratedAttribute]
public void set_Actions(IEnumerable`1<PackageAction> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ActionErrors();
    [CompilerGeneratedAttribute]
public void set_ActionErrors(IEnumerable`1<string> value);
}
[DataContractAttribute]
public abstract class Umbraco.Core.Models.PagedResult : object {
    [CompilerGeneratedAttribute]
private long <PageNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalPages>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalItems>k__BackingField;
    [DataMemberAttribute]
public long PageNumber { get; private set; }
    [DataMemberAttribute]
public long PageSize { get; private set; }
    [DataMemberAttribute]
public long TotalPages { get; private set; }
    [DataMemberAttribute]
public long TotalItems { get; private set; }
    public PagedResult(long totalItems, long pageNumber, long pageSize);
    [CompilerGeneratedAttribute]
public long get_PageNumber();
    [CompilerGeneratedAttribute]
private void set_PageNumber(long value);
    [CompilerGeneratedAttribute]
public long get_PageSize();
    [CompilerGeneratedAttribute]
private void set_PageSize(long value);
    [CompilerGeneratedAttribute]
public long get_TotalPages();
    [CompilerGeneratedAttribute]
private void set_TotalPages(long value);
    [CompilerGeneratedAttribute]
public long get_TotalItems();
    [CompilerGeneratedAttribute]
private void set_TotalItems(long value);
    public int GetSkipSize();
}
[DataContractAttribute]
public class Umbraco.Core.Models.PagedResult`1 : PagedResult {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Items>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<T> Items { get; public set; }
    public PagedResult`1(long totalItems, long pageNumber, long pageSize);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<T> value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.PartialView : File {
    [CompilerGeneratedAttribute]
private PartialViewType <ViewType>k__BackingField;
    public PartialViewType ViewType { get; public set; }
    public PartialView(PartialViewType viewType, string path);
    internal PartialView(PartialViewType viewType, string path, Func`2<File, string> getFileContent);
    [CompilerGeneratedAttribute]
public sealed virtual PartialViewType get_ViewType();
    [CompilerGeneratedAttribute]
public void set_ViewType(PartialViewType value);
}
public enum Umbraco.Core.Models.PartialViewType : Enum {
    public byte value__;
    public static PartialViewType Unknown;
    public static PartialViewType PartialView;
    public static PartialViewType PartialViewMacro;
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.PathValidationExtensions : object {
    [ExtensionAttribute]
public static void ValidatePathWithException(NodeDto entity);
    [ExtensionAttribute]
public static bool ValidatePath(IUmbracoEntity entity);
    [ExtensionAttribute]
public static void EnsureValidPath(T entity, ILogger logger, Func`2<T, T> getParent, Action`1<T> update);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Property : EntityBase {
    private List`1<PropertyValue> _values;
    private PropertyValue _pvalue;
    private Dictionary`2<CompositeNStringNStringKey, PropertyValue> _vvalues;
    private static DelegateEqualityComparer`1<object> PropertyValueComparer;
    [CompilerGeneratedAttribute]
private PropertyType <PropertyType>k__BackingField;
    [IgnoreDataMemberAttribute]
public PropertyType PropertyType { get; private set; }
    [DataMemberAttribute]
public IReadOnlyCollection`1<PropertyValue> Values { get; public set; }
    [DataMemberAttribute]
public string Alias { get; }
    [IgnoreDataMemberAttribute]
internal int PropertyTypeId { get; }
    [IgnoreDataMemberAttribute]
internal ValueStorageType ValueStorageType { get; }
    public Property(PropertyType propertyType);
    public Property(int id, PropertyType propertyType);
    private static Property();
    [CompilerGeneratedAttribute]
public PropertyType get_PropertyType();
    [CompilerGeneratedAttribute]
private void set_PropertyType(PropertyType value);
    public IReadOnlyCollection`1<PropertyValue> get_Values();
    public void set_Values(IReadOnlyCollection`1<PropertyValue> value);
    public string get_Alias();
    internal int get_PropertyTypeId();
    internal ValueStorageType get_ValueStorageType();
    public object GetValue(string culture, string segment, bool published);
    private object GetPropertyValue(PropertyValue pvalue, bool published);
    internal void PublishValues(string culture, string segment);
    internal void UnpublishValues(string culture, string segment);
    private void PublishValue(PropertyValue pvalue);
    private void UnpublishValue(PropertyValue pvalue);
    public void SetValue(object value, string culture, string segment);
    internal void FactorySetValue(string culture, string segment, bool published, object value);
    private ValueTuple`2<PropertyValue, bool> GetPValue(bool create);
    private ValueTuple`2<PropertyValue, bool> GetPValue(string culture, string segment, bool create);
    protected virtual void PerformDeepClone(object clone);
    [CompilerGeneratedAttribute]
private bool <set_Values>b__14_0(PropertyValue x);
    [CompilerGeneratedAttribute]
private bool <set_Values>b__14_2(PropertyValue x);
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class Umbraco.Core.Models.PropertyCollection : KeyedCollection`2<string, Property> {
    private object _addLocker;
    [CompilerGeneratedAttribute]
private Func`2<Property, bool> <AdditionValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    internal Func`2<Property, bool> AdditionValidator { get; internal set; }
    internal Property Item { get; }
    internal PropertyCollection(Func`2<Property, bool> additionValidator);
    public PropertyCollection(IEnumerable`1<Property> properties);
    [CompilerGeneratedAttribute]
internal Func`2<Property, bool> get_AdditionValidator();
    [CompilerGeneratedAttribute]
internal void set_AdditionValidator(Func`2<Property, bool> value);
    internal void Reset(IEnumerable`1<Property> properties);
    protected virtual void SetItem(int index, Property property);
    protected virtual void RemoveItem(int index);
    protected virtual void InsertItem(int index, Property property);
    protected virtual void ClearItems();
    internal void Add(Property property);
    public int IndexOfKey(string key);
    protected virtual string GetKeyForItem(Property item);
    internal Property get_Item(PropertyType propertyType);
    public bool TryGetValue(string propertyTypeAlias, Property& property);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void ClearCollectionChangedEvents();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    protected internal void EnsurePropertyTypes(IEnumerable`1<PropertyType> propertyTypes);
    protected internal void EnsureCleanPropertyTypes(IEnumerable`1<PropertyType> propertyTypes);
    public sealed virtual object DeepClone();
}
[DataContractAttribute]
[DebuggerDisplayAttribute("Id: {Id}, Name: {Name}, Alias: {Alias}")]
public class Umbraco.Core.Models.PropertyGroup : EntityBase {
    internal PropertyGroupCollection Collection;
    private PropertyGroupType _type;
    private string _name;
    private string _alias;
    private int _sortOrder;
    private PropertyTypeCollection _propertyTypes;
    [DataMemberAttribute]
public PropertyGroupType Type { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public int SortOrder { get; public set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public PropertyTypeCollection PropertyTypes { get; public set; }
    public PropertyGroup(bool isPublishing);
    public PropertyGroup(PropertyTypeCollection propertyTypeCollection);
    private void PropertyTypesChanged(object sender, NotifyCollectionChangedEventArgs e);
    public PropertyGroupType get_Type();
    public void set_Type(PropertyGroupType value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Alias();
    public void set_Alias(string value);
    public int get_SortOrder();
    public void set_SortOrder(int value);
    public PropertyTypeCollection get_PropertyTypes();
    public void set_PropertyTypes(PropertyTypeCollection value);
    public sealed virtual bool Equals(PropertyGroup other);
    public virtual int GetHashCode();
    protected virtual void PerformDeepClone(object clone);
    [CompilerGeneratedAttribute]
private int <set_PropertyTypes>b__23_0();
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
public class Umbraco.Core.Models.PropertyGroupCollection : KeyedCollection`2<string, PropertyGroup> {
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public PropertyGroup Item { get; }
    public PropertyGroupCollection(IEnumerable`1<PropertyGroup> groups);
    internal void Reset(IEnumerable`1<PropertyGroup> groups);
    public PropertyGroup get_Item(string key);
    protected virtual void SetItem(int index, PropertyGroup item);
    protected virtual void RemoveItem(int index);
    protected virtual void InsertItem(int index, PropertyGroup item);
    protected virtual void ClearItems();
    internal void Add(PropertyGroup item);
    internal void ChangeKey(PropertyGroup item, string newKey);
    public bool Remove(string key);
    public bool Contains(string groupName);
    public bool Contains(int id);
    [ObsoleteAttribute("Use Remove(key) instead.")]
public void RemoveItem(string propertyGroupName);
    public int IndexOfKey(string key);
    public int IndexOfKey(int id);
    protected virtual string GetKeyForItem(PropertyGroup item);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void ClearCollectionChangedEvents();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    public sealed virtual object DeepClone();
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.PropertyGroupExtensions : object {
    private static char aliasSeparator;
    internal static string GetLocalAlias(string alias);
    internal static string GetParentAlias(string alias);
    [ExtensionAttribute]
public static string GetLocalAlias(PropertyGroup propertyGroup);
    [ExtensionAttribute]
public static void UpdateLocalAlias(PropertyGroup propertyGroup, string localAlias);
    [ExtensionAttribute]
public static string GetParentAlias(PropertyGroup propertyGroup);
    [ExtensionAttribute]
public static void UpdateParentAlias(PropertyGroup propertyGroup, string parentAlias);
}
public enum Umbraco.Core.Models.PropertyGroupType : Enum {
    public short value__;
    public static PropertyGroupType Group;
    public static PropertyGroupType Tab;
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.PropertyTagsExtensions : object {
    private static PropertyEditorCollection PropertyEditors { get; }
    private static IDataTypeService DataTypeService { get; }
    private static PropertyEditorCollection get_PropertyEditors();
    private static IDataTypeService get_DataTypeService();
    [ExtensionAttribute]
internal static TagConfiguration GetTagConfiguration(Property property);
    [ExtensionAttribute]
public static void AssignTags(Property property, IEnumerable`1<string> tags, bool merge, string culture);
    [ExtensionAttribute]
private static void AssignTags(Property property, IEnumerable`1<string> tags, bool merge, TagsStorageType storageType, char delimiter, string culture);
    [ExtensionAttribute]
public static void RemoveTags(Property property, IEnumerable`1<string> tags, string culture);
    [ExtensionAttribute]
private static void RemoveTags(Property property, IEnumerable`1<string> tags, TagsStorageType storageType, char delimiter, string culture);
    [ExtensionAttribute]
internal static IEnumerable`1<string> GetTagsValue(Property property, string culture);
    [ExtensionAttribute]
private static IEnumerable`1<string> GetTagsValue(Property property, TagsStorageType storageType, char delimiter, string culture);
    [ExtensionAttribute]
internal static void SetTagsValue(Property property, object value, TagConfiguration tagConfiguration, string culture);
    private static void SetTagsValue(Property property, object value, TagsStorageType storageType, char delimiter, string culture);
}
[DataContractAttribute]
[DebuggerDisplayAttribute("Id: {Id}, Name: {Name}, Alias: {Alias}")]
public class Umbraco.Core.Models.PropertyType : EntityBase {
    private bool _forceValueStorageType;
    private string _name;
    private string _alias;
    private string _description;
    private int _dataTypeId;
    private Guid _dataTypeKey;
    private Lazy`1<int> _propertyGroupId;
    private string _propertyEditorAlias;
    private ValueStorageType _valueStorageType;
    private bool _mandatory;
    private string _mandatoryMessage;
    private int _sortOrder;
    private string _validationRegExp;
    private string _validationRegExpMessage;
    private ContentVariation _variations;
    private bool _labelOnTop;
    [CompilerGeneratedAttribute]
private bool <SupportsPublishing>k__BackingField;
    public bool SupportsPublishing { get; internal set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public int DataTypeId { get; public set; }
    [DataMemberAttribute]
public Guid DataTypeKey { get; public set; }
    [DataMemberAttribute]
public string PropertyEditorAlias { get; public set; }
    [DataMemberAttribute]
internal ValueStorageType ValueStorageType { get; internal set; }
    [DataMemberAttribute]
[DoNotCloneAttribute]
public Lazy`1<int> PropertyGroupId { get; public set; }
    [DataMemberAttribute]
public bool Mandatory { get; public set; }
    [DataMemberAttribute]
public string MandatoryMessage { get; public set; }
    [DataMemberAttribute]
public bool LabelOnTop { get; public set; }
    [DataMemberAttribute]
public int SortOrder { get; public set; }
    [DataMemberAttribute]
public string ValidationRegExp { get; public set; }
    [DataMemberAttribute]
public string ValidationRegExpMessage { get; public set; }
    public ContentVariation Variations { get; public set; }
    public PropertyType(IDataType dataType);
    public PropertyType(IDataType dataType, string propertyTypeAlias);
    public PropertyType(string propertyEditorAlias, ValueStorageType valueStorageType);
    public PropertyType(string propertyEditorAlias, ValueStorageType valueStorageType, string propertyTypeAlias);
    internal PropertyType(string propertyEditorAlias, ValueStorageType valueStorageType, bool forceValueStorageType, string propertyTypeAlias);
    [CompilerGeneratedAttribute]
public bool get_SupportsPublishing();
    [CompilerGeneratedAttribute]
internal void set_SupportsPublishing(bool value);
    public string get_Name();
    public void set_Name(string value);
    public virtual string get_Alias();
    public virtual void set_Alias(string value);
    public string get_Description();
    public void set_Description(string value);
    public int get_DataTypeId();
    public void set_DataTypeId(int value);
    public Guid get_DataTypeKey();
    public void set_DataTypeKey(Guid value);
    public string get_PropertyEditorAlias();
    public void set_PropertyEditorAlias(string value);
    internal ValueStorageType get_ValueStorageType();
    internal void set_ValueStorageType(ValueStorageType value);
    public Lazy`1<int> get_PropertyGroupId();
    public void set_PropertyGroupId(Lazy`1<int> value);
    public bool get_Mandatory();
    public void set_Mandatory(bool value);
    public string get_MandatoryMessage();
    public void set_MandatoryMessage(string value);
    public bool get_LabelOnTop();
    public void set_LabelOnTop(bool value);
    public int get_SortOrder();
    public void set_SortOrder(int value);
    public string get_ValidationRegExp();
    public void set_ValidationRegExp(string value);
    public string get_ValidationRegExpMessage();
    public void set_ValidationRegExpMessage(string value);
    public ContentVariation get_Variations();
    public void set_Variations(ContentVariation value);
    public bool SupportsVariation(string culture, string segment, bool wildcards);
    public Property CreateProperty();
    public bool IsOfExpectedPropertyType(object value);
    public bool IsValueAssignable(object value);
    public object ConvertAssignedValue(object value);
    public bool TryConvertAssignedValue(object value, Object& converted);
    private bool TryConvertAssignedValue(object value, bool throwOnError, Object& converted);
    private static void ThrowTypeException(object value, Type expected, string alias);
    private static string SanitizeAlias(string value);
    public sealed virtual bool Equals(PropertyType other);
    public virtual int GetHashCode();
    protected virtual void PerformDeepClone(object clone);
    [CompilerGeneratedAttribute]
private int <PerformDeepClone>b__81_0();
}
[DataContractAttribute]
public class Umbraco.Core.Models.PropertyTypeCollection : KeyedCollection`2<string, PropertyType> {
    [CompilerGeneratedAttribute]
private bool <SupportsPublishing>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public bool SupportsPublishing { get; }
    internal PropertyTypeCollection(bool supportsPublishing);
    public PropertyTypeCollection(bool supportsPublishing, IEnumerable`1<PropertyType> properties);
    [CompilerGeneratedAttribute]
public bool get_SupportsPublishing();
    internal void Reset(IEnumerable`1<PropertyType> properties);
    protected virtual void SetItem(int index, PropertyType item);
    protected virtual void RemoveItem(int index);
    protected virtual void InsertItem(int index, PropertyType item);
    protected virtual void ClearItems();
    internal void Add(PropertyType item);
    private void Item_PropertyChanged(object sender, PropertyChangedEventArgs e);
    public bool Contains(string propertyAlias);
    public bool RemoveItem(string propertyTypeAlias);
    public int IndexOfKey(string key);
    protected virtual string GetKeyForItem(PropertyType item);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public void ClearCollectionChangedEvents();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    public sealed virtual object DeepClone();
}
[DataContractAttribute]
public class Umbraco.Core.Models.PublicAccessEntry : EntityBase {
    private EventClearingObservableCollection`1<PublicAccessRule> _ruleCollection;
    private int _protectedNodeId;
    private int _noAccessNodeId;
    private int _loginNodeId;
    private List`1<Guid> _removedRules;
    internal IEnumerable`1<Guid> RemovedRules { get; }
    public IEnumerable`1<PublicAccessRule> Rules { get; }
    [DataMemberAttribute]
public int LoginNodeId { get; public set; }
    [DataMemberAttribute]
public int NoAccessNodeId { get; public set; }
    [DataMemberAttribute]
public int ProtectedNodeId { get; public set; }
    public PublicAccessEntry(IContent protectedNode, IContent loginNode, IContent noAccessNode, IEnumerable`1<PublicAccessRule> ruleCollection);
    public PublicAccessEntry(Guid id, int protectedNodeId, int loginNodeId, int noAccessNodeId, IEnumerable`1<PublicAccessRule> ruleCollection);
    private void _ruleCollection_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    internal IEnumerable`1<Guid> get_RemovedRules();
    public IEnumerable`1<PublicAccessRule> get_Rules();
    public PublicAccessRule AddRule(string ruleValue, string ruleType);
    public void RemoveRule(PublicAccessRule rule);
    public void ClearRules();
    internal void ClearRemovedRules();
    public int get_LoginNodeId();
    public void set_LoginNodeId(int value);
    public int get_NoAccessNodeId();
    public void set_NoAccessNodeId(int value);
    public int get_ProtectedNodeId();
    public void set_ProtectedNodeId(int value);
    public virtual void ResetDirtyProperties(bool rememberDirty);
    protected virtual void PerformDeepClone(object clone);
}
[DataContractAttribute]
public class Umbraco.Core.Models.PublicAccessRule : EntityBase {
    private string _ruleValue;
    private string _ruleType;
    [CompilerGeneratedAttribute]
private Guid <AccessEntryId>k__BackingField;
    public Guid AccessEntryId { get; internal set; }
    public string RuleValue { get; public set; }
    public string RuleType { get; public set; }
    public PublicAccessRule(Guid id, Guid accessEntryId);
    [CompilerGeneratedAttribute]
public Guid get_AccessEntryId();
    [CompilerGeneratedAttribute]
internal void set_AccessEntryId(Guid value);
    public string get_RuleValue();
    public void set_RuleValue(string value);
    public string get_RuleType();
    public void set_RuleType(string value);
}
public class Umbraco.Core.Models.PublishedContent.Fallback : ValueType {
    private Int32[] _values;
    public static int None;
    public static int DefaultValue;
    public static int Language;
    public static int Ancestors;
    public static Fallback ToDefaultValue { get; }
    public static Fallback ToLanguage { get; }
    public static Fallback ToAncestors { get; }
    private Fallback(Int32[] values);
    public static Fallback To(Int32[] values);
    public static Fallback get_ToDefaultValue();
    public static Fallback get_ToLanguage();
    public static Fallback get_ToAncestors();
    public sealed virtual IEnumerator`1<int> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public interface Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory {
    public object SyncRoot { get; }
    public abstract virtual object get_SyncRoot();
    public abstract virtual void Refresh();
}
public interface Umbraco.Core.Models.PublishedContent.ILivePublishedModelFactory2 {
    public bool Enabled { get; }
    public abstract virtual void Reset();
    public abstract virtual bool get_Enabled();
}
public class Umbraco.Core.Models.PublishedContent.IndexedArrayItem`1 : object {
    [CompilerGeneratedAttribute]
private TContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalCount>k__BackingField;
    public TContent Content { get; }
    public int Index { get; }
    public int TotalCount { get; internal set; }
    public IndexedArrayItem`1(TContent content, int index);
    [CompilerGeneratedAttribute]
public TContent get_Content();
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public int get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(int value);
    public bool IsFirst();
    public HtmlString IsFirst(string valueIfTrue);
    public HtmlString IsFirst(string valueIfTrue, string valueIfFalse);
    public bool IsNotFirst();
    public HtmlString IsNotFirst(string valueIfTrue);
    public HtmlString IsNotFirst(string valueIfTrue, string valueIfFalse);
    public bool IsIndex(int index);
    public HtmlString IsIndex(int index, string valueIfTrue);
    public HtmlString IsIndex(int index, string valueIfTrue, string valueIfFalse);
    public bool IsModZero(int modulus);
    public HtmlString IsModZero(int modulus, string valueIfTrue);
    public HtmlString IsModZero(int modulus, string valueIfTrue, string valueIfFalse);
    public bool IsNotModZero(int modulus);
    public HtmlString IsNotModZero(int modulus, string valueIfTrue);
    public HtmlString IsNotModZero(int modulus, string valueIfTrue, string valueIfFalse);
    public bool IsNotIndex(int index);
    public HtmlString IsNotIndex(int index, string valueIfTrue);
    public HtmlString IsNotIndex(int index, string valueIfTrue, string valueIfFalse);
    public bool IsLast();
    public HtmlString IsLast(string valueIfTrue);
    public HtmlString IsLast(string valueIfTrue, string valueIfFalse);
    public bool IsNotLast();
    public HtmlString IsNotLast(string valueIfTrue);
    public HtmlString IsNotLast(string valueIfTrue, string valueIfFalse);
    public bool IsEven();
    public HtmlString IsEven(string valueIfTrue);
    public HtmlString IsEven(string valueIfTrue, string valueIfFalse);
    public bool IsOdd();
    public HtmlString IsOdd(string valueIfTrue);
    public HtmlString IsOdd(string valueIfTrue, string valueIfFalse);
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedContent {
    public int Id { get; }
    public string Name { get; }
    public string UrlSegment { get; }
    public int SortOrder { get; }
    public int Level { get; }
    public string Path { get; }
    public Nullable`1<int> TemplateId { get; }
    public int CreatorId { get; }
    [ObsoleteAttribute("Use CreatorName(IUserService) extension instead")]
public string CreatorName { get; }
    public DateTime CreateDate { get; }
    public int WriterId { get; }
    [ObsoleteAttribute("Use WriterName(IUserService) extension instead")]
public string WriterName { get; }
    public DateTime UpdateDate { get; }
    [ObsoleteAttribute("Use the Url() extension instead")]
public string Url { get; }
    public IReadOnlyDictionary`2<string, PublishedCultureInfo> Cultures { get; }
    public PublishedItemType ItemType { get; }
    public IPublishedContent Parent { get; }
    public IEnumerable`1<IPublishedContent> Children { get; }
    public IEnumerable`1<IPublishedContent> ChildrenForAllCultures { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_Name();
    public abstract virtual string get_UrlSegment();
    public abstract virtual int get_SortOrder();
    public abstract virtual int get_Level();
    public abstract virtual string get_Path();
    public abstract virtual Nullable`1<int> get_TemplateId();
    public abstract virtual int get_CreatorId();
    public abstract virtual string get_CreatorName();
    public abstract virtual DateTime get_CreateDate();
    public abstract virtual int get_WriterId();
    public abstract virtual string get_WriterName();
    public abstract virtual DateTime get_UpdateDate();
    public abstract virtual string get_Url();
    public abstract virtual IReadOnlyDictionary`2<string, PublishedCultureInfo> get_Cultures();
    public abstract virtual PublishedItemType get_ItemType();
    public abstract virtual bool IsDraft(string culture);
    public abstract virtual bool IsPublished(string culture);
    public abstract virtual IPublishedContent get_Parent();
    public abstract virtual IEnumerable`1<IPublishedContent> get_Children();
    public abstract virtual IEnumerable`1<IPublishedContent> get_ChildrenForAllCultures();
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedContentType {
    public int Id { get; }
    public string Alias { get; }
    public PublishedItemType ItemType { get; }
    public HashSet`1<string> CompositionAliases { get; }
    public ContentVariation Variations { get; }
    public bool IsElement { get; }
    public IEnumerable`1<IPublishedPropertyType> PropertyTypes { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_Alias();
    public abstract virtual PublishedItemType get_ItemType();
    public abstract virtual HashSet`1<string> get_CompositionAliases();
    public abstract virtual ContentVariation get_Variations();
    public abstract virtual bool get_IsElement();
    public abstract virtual IEnumerable`1<IPublishedPropertyType> get_PropertyTypes();
    public abstract virtual int GetPropertyIndex(string alias);
    public abstract virtual IPublishedPropertyType GetPropertyType(string alias);
    public abstract virtual IPublishedPropertyType GetPropertyType(int index);
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedContentType2 {
    public Guid Key { get; }
    public abstract virtual Guid get_Key();
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedContentTypeFactory {
    public abstract virtual IPublishedContentType CreateContentType(IContentTypeComposition contentType);
    public abstract virtual IPublishedPropertyType CreatePropertyType(IPublishedContentType contentType, PropertyType propertyType);
    public abstract virtual IPublishedPropertyType CreatePropertyType(IPublishedContentType contentType, string propertyTypeAlias, int dataTypeId, ContentVariation variations);
    public abstract virtual IPublishedPropertyType CreateCorePropertyType(IPublishedContentType contentType, string propertyTypeAlias, int dataTypeId, ContentVariation variations);
    public abstract virtual PublishedDataType GetDataType(int id);
    public abstract virtual void NotifyDataTypeChanges(Int32[] ids);
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedElement {
    public IPublishedContentType ContentType { get; }
    public Guid Key { get; }
    public IEnumerable`1<IPublishedProperty> Properties { get; }
    public abstract virtual IPublishedContentType get_ContentType();
    public abstract virtual Guid get_Key();
    public abstract virtual IEnumerable`1<IPublishedProperty> get_Properties();
    public abstract virtual IPublishedProperty GetProperty(string alias);
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedModelFactory {
    public abstract virtual IPublishedElement CreateModel(IPublishedElement element);
    public abstract virtual IList CreateModelList(string alias);
    public abstract virtual Type MapModelType(Type type);
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedProperty {
    public IPublishedPropertyType PropertyType { get; }
    public string Alias { get; }
    public abstract virtual IPublishedPropertyType get_PropertyType();
    public abstract virtual string get_Alias();
    public abstract virtual bool HasValue(string culture, string segment);
    public abstract virtual object GetSourceValue(string culture, string segment);
    public abstract virtual object GetValue(string culture, string segment);
    public abstract virtual object GetXPathValue(string culture, string segment);
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedPropertyType {
    public IPublishedContentType ContentType { get; }
    public PublishedDataType DataType { get; }
    public string Alias { get; }
    public string EditorAlias { get; }
    public bool IsUserProperty { get; }
    public ContentVariation Variations { get; }
    public PropertyCacheLevel CacheLevel { get; }
    public Type ModelClrType { get; }
    public Type ClrType { get; }
    public abstract virtual IPublishedContentType get_ContentType();
    public abstract virtual PublishedDataType get_DataType();
    public abstract virtual string get_Alias();
    public abstract virtual string get_EditorAlias();
    public abstract virtual bool get_IsUserProperty();
    public abstract virtual ContentVariation get_Variations();
    public abstract virtual Nullable`1<bool> IsValue(object value, PropertyValueLevel level);
    public abstract virtual PropertyCacheLevel get_CacheLevel();
    public abstract virtual object ConvertSourceToInter(IPublishedElement owner, object source, bool preview);
    public abstract virtual object ConvertInterToObject(IPublishedElement owner, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public abstract virtual object ConvertInterToXPath(IPublishedElement owner, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public abstract virtual Type get_ModelClrType();
    public abstract virtual Type get_ClrType();
}
public interface Umbraco.Core.Models.PublishedContent.IPublishedValueFallback {
    public abstract virtual bool TryGetValue(IPublishedProperty property, string culture, string segment, Fallback fallback, object defaultValue, Object& value);
    public abstract virtual bool TryGetValue(IPublishedProperty property, string culture, string segment, Fallback fallback, T defaultValue, T& value);
    public abstract virtual bool TryGetValue(IPublishedElement content, string alias, string culture, string segment, Fallback fallback, object defaultValue, Object& value);
    public abstract virtual bool TryGetValue(IPublishedElement content, string alias, string culture, string segment, Fallback fallback, T defaultValue, T& value);
    public abstract virtual bool TryGetValue(IPublishedContent content, string alias, string culture, string segment, Fallback fallback, object defaultValue, Object& value, IPublishedProperty& noValueProperty);
    public abstract virtual bool TryGetValue(IPublishedContent content, string alias, string culture, string segment, Fallback fallback, T defaultValue, T& value, IPublishedProperty& noValueProperty);
}
public interface Umbraco.Core.Models.PublishedContent.IVariationContextAccessor {
    public VariationContext VariationContext { get; public set; }
    public abstract virtual VariationContext get_VariationContext();
    public abstract virtual void set_VariationContext(VariationContext value);
}
public class Umbraco.Core.Models.PublishedContent.ModelType : Type {
    [CompilerGeneratedAttribute]
private string <ContentTypeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <GUID>k__BackingField;
    public string ContentTypeAlias { get; }
    public Type UnderlyingSystemType { get; }
    public Type BaseType { get; }
    public string Name { get; }
    public Guid GUID { get; }
    public Module Module { get; }
    public Assembly Assembly { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string AssemblyQualifiedName { get; }
    private ModelType(string contentTypeAlias);
    [CompilerGeneratedAttribute]
public string get_ContentTypeAlias();
    public virtual string ToString();
    public static ModelType For(string alias);
    public static Type Map(Type type, Dictionary`2<string, Type> modelTypes);
    public static Type Map(Type type, Dictionary`2<string, Type> modelTypes, bool dictionaryIsInvariant);
    public static string MapToName(Type type, Dictionary`2<string, string> map);
    private static string MapToName(Type type, Dictionary`2<string, string> map, bool dictionaryIsInvariant);
    public static bool Equals(Type t1, Type t2);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual Type[] GetInterfaces();
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Type GetElementType();
    protected virtual bool HasElementTypeImpl();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    protected virtual bool IsCOMObjectImpl();
    public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    public virtual Type get_UnderlyingSystemType();
    public virtual Type get_BaseType();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual Guid get_GUID();
    public virtual Module get_Module();
    public virtual Assembly get_Assembly();
    public virtual string get_FullName();
    public virtual string get_Namespace();
    public virtual string get_AssemblyQualifiedName();
    public virtual Type MakeArrayType();
}
internal class Umbraco.Core.Models.PublishedContent.ModelTypeArrayType : Type {
    private Type _elementType;
    [CompilerGeneratedAttribute]
private string <ContentTypeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <GUID>k__BackingField;
    public string ContentTypeAlias { get; }
    public Type UnderlyingSystemType { get; }
    public Type BaseType { get; }
    public string Name { get; }
    public Guid GUID { get; }
    public Module Module { get; }
    public Assembly Assembly { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string AssemblyQualifiedName { get; }
    public ModelTypeArrayType(ModelType type);
    [CompilerGeneratedAttribute]
public string get_ContentTypeAlias();
    public virtual string ToString();
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual Type[] GetInterfaces();
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Type GetElementType();
    protected virtual bool HasElementTypeImpl();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    protected virtual bool IsCOMObjectImpl();
    public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    public virtual Type get_UnderlyingSystemType();
    public virtual Type get_BaseType();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual Guid get_GUID();
    public virtual Module get_Module();
    public virtual Assembly get_Assembly();
    public virtual string get_FullName();
    public virtual string get_Namespace();
    public virtual string get_AssemblyQualifiedName();
    public virtual int GetArrayRank();
}
public class Umbraco.Core.Models.PublishedContent.NoopPublishedModelFactory : object {
    public sealed virtual IPublishedElement CreateModel(IPublishedElement element);
    public sealed virtual IList CreateModelList(string alias);
    public sealed virtual Type MapModelType(Type type);
}
public class Umbraco.Core.Models.PublishedContent.NoopPublishedValueFallback : object {
    public sealed virtual bool TryGetValue(IPublishedProperty property, string culture, string segment, Fallback fallback, object defaultValue, Object& value);
    public sealed virtual bool TryGetValue(IPublishedProperty property, string culture, string segment, Fallback fallback, T defaultValue, T& value);
    public sealed virtual bool TryGetValue(IPublishedElement content, string alias, string culture, string segment, Fallback fallback, object defaultValue, Object& value);
    public sealed virtual bool TryGetValue(IPublishedElement content, string alias, string culture, string segment, Fallback fallback, T defaultValue, T& value);
    public sealed virtual bool TryGetValue(IPublishedContent content, string alias, string culture, string segment, Fallback fallback, object defaultValue, Object& value, IPublishedProperty& noValueProperty);
    public sealed virtual bool TryGetValue(IPublishedContent content, string alias, string culture, string segment, Fallback fallback, T defaultValue, T& value, IPublishedProperty& noValueProperty);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.PublishedContent.PublishedContentExtensionsForModels : object {
    [ExtensionAttribute]
public static IPublishedContent CreateModel(IPublishedContent content);
}
public abstract class Umbraco.Core.Models.PublishedContent.PublishedContentModel : PublishedContentWrapped {
    protected PublishedContentModel(IPublishedContent content);
}
[DebuggerDisplayAttribute("{Alias}")]
public class Umbraco.Core.Models.PublishedContent.PublishedContentType : object {
    private IPublishedPropertyType[] _propertyTypes;
    private Dictionary`2<string, int> _indexes;
    private static Dictionary`2<string, int> BuiltinMemberProperties;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private PublishedItemType <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <CompositionAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentVariation <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsElement>k__BackingField;
    public Guid Key { get; }
    public int Id { get; }
    public string Alias { get; }
    public PublishedItemType ItemType { get; }
    public HashSet`1<string> CompositionAliases { get; }
    public ContentVariation Variations { get; }
    public IEnumerable`1<IPublishedPropertyType> PropertyTypes { get; }
    public bool IsElement { get; }
    public PublishedContentType(IContentTypeComposition contentType, IPublishedContentTypeFactory factory);
    public PublishedContentType(Guid key, int id, string alias, PublishedItemType itemType, IEnumerable`1<string> compositionAliases, IEnumerable`1<PublishedPropertyType> propertyTypes, ContentVariation variations, bool isElement);
    [ObsoleteAttribute("Use the overload specifying a key instead")]
public PublishedContentType(int id, string alias, PublishedItemType itemType, IEnumerable`1<string> compositionAliases, IEnumerable`1<PublishedPropertyType> propertyTypes, ContentVariation variations, bool isElement);
    public PublishedContentType(Guid key, int id, string alias, PublishedItemType itemType, IEnumerable`1<string> compositionAliases, Func`2<IPublishedContentType, IEnumerable`1<IPublishedPropertyType>> propertyTypes, ContentVariation variations, bool isElement);
    [ObsoleteAttribute("Use the overload specifying a key instead")]
public PublishedContentType(int id, string alias, PublishedItemType itemType, IEnumerable`1<string> compositionAliases, Func`2<IPublishedContentType, IEnumerable`1<IPublishedPropertyType>> propertyTypes, ContentVariation variations, bool isElement);
    private PublishedContentType(Guid key, int id, string alias, PublishedItemType itemType, IEnumerable`1<string> compositionAliases, ContentVariation variations, bool isElement);
    private static PublishedContentType();
    private void InitializeIndexes();
    private void EnsureMemberProperties(List`1<IPublishedPropertyType> propertyTypes, IPublishedContentTypeFactory factory);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public sealed virtual PublishedItemType get_ItemType();
    [CompilerGeneratedAttribute]
public sealed virtual HashSet`1<string> get_CompositionAliases();
    [CompilerGeneratedAttribute]
public sealed virtual ContentVariation get_Variations();
    public sealed virtual IEnumerable`1<IPublishedPropertyType> get_PropertyTypes();
    public sealed virtual int GetPropertyIndex(string alias);
    public virtual IPublishedPropertyType GetPropertyType(string alias);
    public virtual IPublishedPropertyType GetPropertyType(int index);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsElement();
}
internal class Umbraco.Core.Models.PublishedContent.PublishedContentTypeConverter : TypeConverter {
    private static Type[] ConvertingTypes;
    private static PublishedContentTypeConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.PublishedContent.PublishedContentTypeExtensions : object {
    [ExtensionAttribute]
public static bool TryGetKey(IPublishedContentType publishedContentType, Guid& key);
}
internal class Umbraco.Core.Models.PublishedContent.PublishedContentTypeFactory : object {
    private IPublishedModelFactory _publishedModelFactory;
    private PropertyValueConverterCollection _propertyValueConverters;
    private IDataTypeService _dataTypeService;
    private object _publishedDataTypesLocker;
    private Dictionary`2<int, PublishedDataType> _publishedDataTypes;
    public PublishedContentTypeFactory(IPublishedModelFactory publishedModelFactory, PropertyValueConverterCollection propertyValueConverters, IDataTypeService dataTypeService);
    public sealed virtual IPublishedContentType CreateContentType(IContentTypeComposition contentType);
    internal IPublishedContentType CreateContentType(Guid key, int id, string alias, Func`2<IPublishedContentType, IEnumerable`1<IPublishedPropertyType>> propertyTypes, ContentVariation variations, bool isElement);
    internal IPublishedContentType CreateContentType(Guid key, int id, string alias, IEnumerable`1<string> compositionAliases, Func`2<IPublishedContentType, IEnumerable`1<IPublishedPropertyType>> propertyTypes, ContentVariation variations, bool isElement);
    public sealed virtual IPublishedPropertyType CreatePropertyType(IPublishedContentType contentType, PropertyType propertyType);
    public sealed virtual IPublishedPropertyType CreatePropertyType(IPublishedContentType contentType, string propertyTypeAlias, int dataTypeId, ContentVariation variations);
    public sealed virtual IPublishedPropertyType CreateCorePropertyType(IPublishedContentType contentType, string propertyTypeAlias, int dataTypeId, ContentVariation variations);
    internal IPublishedPropertyType CreatePropertyType(string propertyTypeAlias, int dataTypeId, bool umbraco, ContentVariation variations);
    public sealed virtual PublishedDataType GetDataType(int id);
    public sealed virtual void NotifyDataTypeChanges(Int32[] ids);
    private PublishedDataType CreatePublishedDataType(IDataType dataType);
}
[DebuggerDisplayAttribute("{Id}: {Name} ({ContentType?.Alias})")]
public abstract class Umbraco.Core.Models.PublishedContent.PublishedContentWrapped : object {
    private IPublishedContent _content;
    public IPublishedContentType ContentType { get; }
    public Guid Key { get; }
    public int Id { get; }
    public string Name { get; }
    public string UrlSegment { get; }
    public int SortOrder { get; }
    public int Level { get; }
    public string Path { get; }
    public Nullable`1<int> TemplateId { get; }
    public int CreatorId { get; }
    public string CreatorName { get; }
    public DateTime CreateDate { get; }
    public int WriterId { get; }
    public string WriterName { get; }
    public DateTime UpdateDate { get; }
    [ObsoleteAttribute("Use the Url() extension instead")]
public string Url { get; }
    public IReadOnlyDictionary`2<string, PublishedCultureInfo> Cultures { get; }
    public PublishedItemType ItemType { get; }
    public IPublishedContent Parent { get; }
    public IEnumerable`1<IPublishedContent> Children { get; }
    public IEnumerable`1<IPublishedContent> ChildrenForAllCultures { get; }
    public IEnumerable`1<IPublishedProperty> Properties { get; }
    protected PublishedContentWrapped(IPublishedContent content);
    public IPublishedContent Unwrap();
    public virtual IPublishedContentType get_ContentType();
    public sealed virtual Guid get_Key();
    public virtual int get_Id();
    public virtual string get_Name();
    public virtual string get_UrlSegment();
    public virtual int get_SortOrder();
    public virtual int get_Level();
    public virtual string get_Path();
    public virtual Nullable`1<int> get_TemplateId();
    public virtual int get_CreatorId();
    public virtual string get_CreatorName();
    public virtual DateTime get_CreateDate();
    public virtual int get_WriterId();
    public virtual string get_WriterName();
    public virtual DateTime get_UpdateDate();
    public virtual string get_Url();
    public sealed virtual IReadOnlyDictionary`2<string, PublishedCultureInfo> get_Cultures();
    public virtual PublishedItemType get_ItemType();
    public virtual bool IsDraft(string culture);
    public virtual bool IsPublished(string culture);
    public virtual IPublishedContent get_Parent();
    public virtual IEnumerable`1<IPublishedContent> get_Children();
    public virtual IEnumerable`1<IPublishedContent> get_ChildrenForAllCultures();
    public virtual IEnumerable`1<IPublishedProperty> get_Properties();
    public virtual IPublishedProperty GetProperty(string alias);
}
[DebuggerDisplayAttribute("{Culture}")]
public class Umbraco.Core.Models.PublishedContent.PublishedCultureInfo : object {
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlSegment>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    public string Culture { get; }
    internal string Name { get; }
    internal string UrlSegment { get; }
    public DateTime Date { get; }
    public PublishedCultureInfo(string culture, string name, string urlSegment, DateTime date);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal string get_UrlSegment();
    [CompilerGeneratedAttribute]
public DateTime get_Date();
}
[DebuggerDisplayAttribute("{EditorAlias}")]
public class Umbraco.Core.Models.PublishedContent.PublishedDataType : object {
    private Lazy`1<object> _lazyConfiguration;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditorAlias>k__BackingField;
    public int Id { get; }
    public string EditorAlias { get; }
    public object Configuration { get; }
    internal PublishedDataType(int id, string editorAlias, Lazy`1<object> lazyConfiguration);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_EditorAlias();
    public object get_Configuration();
    public T ConfigurationAs();
}
public abstract class Umbraco.Core.Models.PublishedContent.PublishedElementModel : PublishedElementWrapped {
    protected PublishedElementModel(IPublishedElement content);
}
public abstract class Umbraco.Core.Models.PublishedContent.PublishedElementWrapped : object {
    private IPublishedElement _content;
    public IPublishedContentType ContentType { get; }
    public Guid Key { get; }
    public IEnumerable`1<IPublishedProperty> Properties { get; }
    protected PublishedElementWrapped(IPublishedElement content);
    public IPublishedElement Unwrap();
    public sealed virtual IPublishedContentType get_ContentType();
    public sealed virtual Guid get_Key();
    public sealed virtual IEnumerable`1<IPublishedProperty> get_Properties();
    public sealed virtual IPublishedProperty GetProperty(string alias);
}
public enum Umbraco.Core.Models.PublishedContent.PublishedItemType : Enum {
    public int value__;
    public static PublishedItemType Unknown;
    public static PublishedItemType Element;
    public static PublishedItemType Content;
    public static PublishedItemType Media;
    public static PublishedItemType Member;
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.Models.PublishedContent.PublishedModelAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ContentTypeAlias>k__BackingField;
    public string ContentTypeAlias { get; }
    public PublishedModelAttribute(string contentTypeAlias);
    [CompilerGeneratedAttribute]
public string get_ContentTypeAlias();
}
public class Umbraco.Core.Models.PublishedContent.PublishedModelFactory : object {
    private Dictionary`2<string, ModelInfo> _modelInfos;
    private Dictionary`2<string, Type> _modelTypeMap;
    public PublishedModelFactory(IEnumerable`1<Type> types);
    public sealed virtual IPublishedElement CreateModel(IPublishedElement element);
    public sealed virtual IList CreateModelList(string alias);
    public sealed virtual Type MapModelType(Type type);
}
[DebuggerDisplayAttribute("{Alias} ({PropertyType?.EditorAlias})")]
internal abstract class Umbraco.Core.Models.PublishedContent.PublishedPropertyBase : object {
    [CompilerGeneratedAttribute]
private IPublishedPropertyType <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyCacheLevel <ReferenceCacheLevel>k__BackingField;
    public IPublishedPropertyType PropertyType { get; }
    public PropertyCacheLevel ReferenceCacheLevel { get; }
    public string Alias { get; }
    protected PublishedPropertyBase(IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel);
    private static void ValidateCacheLevel(PropertyCacheLevel cacheLevel, bool validateUnknown);
    [CompilerGeneratedAttribute]
public sealed virtual IPublishedPropertyType get_PropertyType();
    [CompilerGeneratedAttribute]
public PropertyCacheLevel get_ReferenceCacheLevel();
    public sealed virtual string get_Alias();
    public abstract virtual bool HasValue(string culture, string segment);
    public abstract virtual object GetSourceValue(string culture, string segment);
    public abstract virtual object GetValue(string culture, string segment);
    public abstract virtual object GetXPathValue(string culture, string segment);
}
[DebuggerDisplayAttribute("{Alias} ({EditorAlias})")]
public class Umbraco.Core.Models.PublishedContent.PublishedPropertyType : object {
    private IPublishedModelFactory _publishedModelFactory;
    private PropertyValueConverterCollection _propertyValueConverters;
    private object _locker;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _initialized;
    private IPropertyValueConverter _converter;
    private PropertyCacheLevel _cacheLevel;
    private Type _modelClrType;
    private Type _clrType;
    [CompilerGeneratedAttribute]
private IPublishedContentType <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private PublishedDataType <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUserProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentVariation <Variations>k__BackingField;
    public IPublishedContentType ContentType { get; internal set; }
    public PublishedDataType DataType { get; }
    public string Alias { get; }
    public string EditorAlias { get; }
    public bool IsUserProperty { get; }
    public ContentVariation Variations { get; }
    public PropertyCacheLevel CacheLevel { get; }
    public Type ModelClrType { get; }
    public Type ClrType { get; }
    public PublishedPropertyType(IPublishedContentType contentType, PropertyType propertyType, PropertyValueConverterCollection propertyValueConverters, IPublishedModelFactory publishedModelFactory, IPublishedContentTypeFactory factory);
    public PublishedPropertyType(IPublishedContentType contentType, string propertyTypeAlias, int dataTypeId, bool isUserProperty, ContentVariation variations, PropertyValueConverterCollection propertyValueConverters, IPublishedModelFactory publishedModelFactory, IPublishedContentTypeFactory factory);
    public PublishedPropertyType(string propertyTypeAlias, int dataTypeId, bool isUserProperty, ContentVariation variations, PropertyValueConverterCollection propertyValueConverters, IPublishedModelFactory publishedModelFactory, IPublishedContentTypeFactory factory);
    [CompilerGeneratedAttribute]
public sealed virtual IPublishedContentType get_ContentType();
    [CompilerGeneratedAttribute]
internal void set_ContentType(IPublishedContentType value);
    [CompilerGeneratedAttribute]
public sealed virtual PublishedDataType get_DataType();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    public sealed virtual string get_EditorAlias();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsUserProperty();
    [CompilerGeneratedAttribute]
public sealed virtual ContentVariation get_Variations();
    private void Initialize();
    private void InitializeLocked();
    public sealed virtual Nullable`1<bool> IsValue(object value, PropertyValueLevel level);
    public sealed virtual PropertyCacheLevel get_CacheLevel();
    public sealed virtual object ConvertSourceToInter(IPublishedElement owner, object source, bool preview);
    public sealed virtual object ConvertInterToObject(IPublishedElement owner, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public sealed virtual object ConvertInterToXPath(IPublishedElement owner, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public sealed virtual Type get_ModelClrType();
    public sealed virtual Type get_ClrType();
}
[DebuggerDisplayAttribute("{Content?.Name} ({Score})")]
public class Umbraco.Core.Models.PublishedContent.PublishedSearchResult : object {
    [CompilerGeneratedAttribute]
private IPublishedContent <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Score>k__BackingField;
    public IPublishedContent Content { get; }
    public float Score { get; }
    public PublishedSearchResult(IPublishedContent content, float score);
    [CompilerGeneratedAttribute]
public IPublishedContent get_Content();
    [CompilerGeneratedAttribute]
public float get_Score();
}
internal class Umbraco.Core.Models.PublishedContent.RawValueProperty : PublishedPropertyBase {
    private object _sourceValue;
    private Lazy`1<object> _objectValue;
    private Lazy`1<object> _xpathValue;
    public RawValueProperty(IPublishedPropertyType propertyType, IPublishedElement content, object sourceValue, bool isPreviewing);
    public virtual object GetSourceValue(string culture, string segment);
    public virtual bool HasValue(string culture, string segment);
    public virtual object GetValue(string culture, string segment);
    public virtual object GetXPathValue(string culture, string segment);
}
public class Umbraco.Core.Models.PublishedContent.ThreadCultureVariationContextAccessor : object {
    private ConcurrentDictionary`2<string, VariationContext> _contexts;
    public VariationContext VariationContext { get; public set; }
    public sealed virtual VariationContext get_VariationContext();
    public sealed virtual void set_VariationContext(VariationContext value);
}
public enum Umbraco.Core.Models.PublishedContent.UrlMode : Enum {
    public int value__;
    public static UrlMode Default;
    public static UrlMode Relative;
    public static UrlMode Absolute;
    public static UrlMode Auto;
}
public class Umbraco.Core.Models.PublishedContent.VariationContext : object {
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    public string Culture { get; }
    public string Segment { get; }
    public VariationContext(string culture, string segment);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public string get_Segment();
    public virtual string GetSegment(int contentId);
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.PublishedContent.VariationContextAccessorExtensions : object {
    [ExtensionAttribute]
public static void ContextualizeVariation(IVariationContextAccessor variationContextAccessor, ContentVariation variations, String& culture, String& segment);
    [ExtensionAttribute]
public static void ContextualizeVariation(IVariationContextAccessor variationContextAccessor, ContentVariation variations, int contentId, String& culture, String& segment);
    [ExtensionAttribute]
private static void ContextualizeVariation(IVariationContextAccessor variationContextAccessor, ContentVariation variations, Nullable`1<int> contentId, String& culture, String& segment);
}
public enum Umbraco.Core.Models.PublishedState : Enum {
    public int value__;
    public static PublishedState Published;
    public static PublishedState Unpublished;
    public static PublishedState Publishing;
    public static PublishedState Unpublishing;
}
public class Umbraco.Core.Models.Range`1 : object {
    [CompilerGeneratedAttribute]
private T <Minimum>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Maximum>k__BackingField;
    public T Minimum { get; public set; }
    public T Maximum { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(T value);
    [CompilerGeneratedAttribute]
public T get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(T value);
    public virtual string ToString();
    public string ToString(string format, string formatRange, IFormatProvider provider);
    public string ToString(string format, IFormatProvider provider);
    public bool IsValid();
    public bool ContainsValue(T value);
    public bool IsInsideRange(Range`1<T> range);
    public bool ContainsRange(Range`1<T> range);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Range`1<T> other);
    public bool Equals(T minimum, T maximum);
    public virtual int GetHashCode();
}
internal class Umbraco.Core.Models.ReadOnlyContentBaseAdapter : ValueType {
    private IContentBase _content;
    public int Id { get; }
    public Guid Key { get; }
    public DateTime CreateDate { get; }
    public DateTime UpdateDate { get; }
    public string Name { get; }
    public int CreatorId { get; }
    public int ParentId { get; }
    public int Level { get; }
    public string Path { get; }
    public int SortOrder { get; }
    public int ContentTypeId { get; }
    public int WriterId { get; }
    public int VersionId { get; }
    private ReadOnlyContentBaseAdapter(IContentBase content);
    public static ReadOnlyContentBaseAdapter Create(IContentBase content);
    public sealed virtual int get_Id();
    public sealed virtual Guid get_Key();
    public sealed virtual DateTime get_CreateDate();
    public sealed virtual DateTime get_UpdateDate();
    public sealed virtual string get_Name();
    public sealed virtual int get_CreatorId();
    public sealed virtual int get_ParentId();
    public sealed virtual int get_Level();
    public sealed virtual string get_Path();
    public sealed virtual int get_SortOrder();
    public sealed virtual int get_ContentTypeId();
    public sealed virtual int get_WriterId();
    public sealed virtual int get_VersionId();
}
[DataContractAttribute]
public class Umbraco.Core.Models.RedirectUrl : EntityBase {
    private int _contentId;
    private Guid _contentKey;
    private DateTime _createDateUtc;
    private string _culture;
    private string _url;
    public int ContentId { get; public set; }
    public Guid ContentKey { get; public set; }
    public DateTime CreateDateUtc { get; public set; }
    public string Culture { get; public set; }
    public string Url { get; public set; }
    public sealed virtual int get_ContentId();
    public sealed virtual void set_ContentId(int value);
    public sealed virtual Guid get_ContentKey();
    public sealed virtual void set_ContentKey(Guid value);
    public sealed virtual DateTime get_CreateDateUtc();
    public sealed virtual void set_CreateDateUtc(DateTime value);
    public sealed virtual string get_Culture();
    public sealed virtual void set_Culture(string value);
    public sealed virtual string get_Url();
    public sealed virtual void set_Url(string value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Relation : EntityBase {
    private int _parentId;
    private int _childId;
    private IRelationType _relationType;
    private string _comment;
    [CompilerGeneratedAttribute]
private Guid <ParentObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ChildObjectType>k__BackingField;
    [DataMemberAttribute]
public int ParentId { get; public set; }
    [DataMemberAttribute]
public Guid ParentObjectType { get; public set; }
    [DataMemberAttribute]
public int ChildId { get; public set; }
    [DataMemberAttribute]
public Guid ChildObjectType { get; public set; }
    [DataMemberAttribute]
public IRelationType RelationType { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [IgnoreDataMemberAttribute]
public int RelationTypeId { get; }
    public Relation(int parentId, int childId, IRelationType relationType);
    public Relation(int parentId, int childId, Guid parentObjectType, Guid childObjectType, IRelationType relationType);
    public sealed virtual int get_ParentId();
    public sealed virtual void set_ParentId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ParentObjectType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ParentObjectType(Guid value);
    public sealed virtual int get_ChildId();
    public sealed virtual void set_ChildId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_ChildObjectType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ChildObjectType(Guid value);
    public sealed virtual IRelationType get_RelationType();
    public sealed virtual void set_RelationType(IRelationType value);
    public sealed virtual string get_Comment();
    public sealed virtual void set_Comment(string value);
    public sealed virtual int get_RelationTypeId();
}
[DataContractAttribute]
public class Umbraco.Core.Models.RelationType : EntityBase {
    private string _name;
    private string _alias;
    private bool _isBidirectional;
    private Nullable`1<Guid> _parentObjectType;
    private Nullable`1<Guid> _childObjectType;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    [DataMemberAttribute]
public bool IsBidirectional { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> ParentObjectType { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> ChildObjectType { get; public set; }
    [ObsoleteAttribute("This constructor is no longer used and will be removed in future versions, use one of the other constructors instead")]
public RelationType(string alias, string name);
    public RelationType(string name, string alias, bool isBidrectional, Nullable`1<Guid> parentObjectType, Nullable`1<Guid> childObjectType);
    [ObsoleteAttribute("This constructor is no longer used and will be removed in future versions, use one of the other constructors instead")]
public RelationType(Guid childObjectType, Guid parentObjectType, string alias);
    [ObsoleteAttribute("This constructor is no longer used and will be removed in future versions, use one of the other constructors instead")]
public RelationType(Guid childObjectType, Guid parentObjectType, string alias, string name);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_Alias();
    public sealed virtual void set_Alias(string value);
    public sealed virtual bool get_IsBidirectional();
    public sealed virtual void set_IsBidirectional(bool value);
    public sealed virtual Nullable`1<Guid> get_ParentObjectType();
    public sealed virtual void set_ParentObjectType(Nullable`1<Guid> value);
    public sealed virtual Nullable`1<Guid> get_ChildObjectType();
    public sealed virtual void set_ChildObjectType(Nullable`1<Guid> value);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Models.RelationTypeExtensions : object {
    [ExtensionAttribute]
internal static bool IsSystemRelationType(IRelationType relationType);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Script : File {
    public bool HasIdentity { get; }
    public Script(string path);
    internal Script(string path, Func`2<File, string> getFileContent);
    public virtual bool get_HasIdentity();
}
public interface Umbraco.Core.Models.Sections.ISection {
    public string Alias { get; }
    public string Name { get; }
    public abstract virtual string get_Alias();
    public abstract virtual string get_Name();
}
public class Umbraco.Core.Models.ServerRegistration : EntityBase {
    private string _serverAddress;
    private string _serverIdentity;
    private bool _isActive;
    private bool _isMaster;
    public string ServerAddress { get; public set; }
    public string ServerIdentity { get; public set; }
    public bool IsActive { get; public set; }
    public bool IsMaster { get; public set; }
    public DateTime Registered { get; public set; }
    public DateTime Accessed { get; public set; }
    public ServerRegistration(int id, string serverAddress, string serverIdentity, DateTime registered, DateTime accessed, bool isActive, bool isMaster);
    public ServerRegistration(string serverAddress, string serverIdentity, DateTime registered);
    public sealed virtual string get_ServerAddress();
    public sealed virtual void set_ServerAddress(string value);
    public sealed virtual string get_ServerIdentity();
    public sealed virtual void set_ServerIdentity(string value);
    public sealed virtual bool get_IsActive();
    public sealed virtual void set_IsActive(bool value);
    public sealed virtual bool get_IsMaster();
    public sealed virtual void set_IsMaster(bool value);
    public sealed virtual DateTime get_Registered();
    public sealed virtual void set_Registered(DateTime value);
    public sealed virtual DateTime get_Accessed();
    public sealed virtual void set_Accessed(DateTime value);
    public virtual string ToString();
}
public class Umbraco.Core.Models.SimpleContentType : object {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private ITemplate <DefaultTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentVariation <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowedAsRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsElement>k__BackingField;
    public string Alias { get; }
    public int Id { get; }
    public Guid Key { get; }
    public ITemplate DefaultTemplate { get; }
    public ContentVariation Variations { get; }
    public string Icon { get; }
    public bool IsContainer { get; }
    public string Name { get; }
    public bool AllowedAsRoot { get; }
    public bool IsElement { get; }
    private string Umbraco.Core.Models.Entities.ITreeEntity.Name { get; private set; }
    private int Umbraco.Core.Models.Entities.IEntity.Id { get; private set; }
    private bool Umbraco.Core.Models.Entities.IEntity.HasIdentity { get; }
    private Guid Umbraco.Core.Models.Entities.IEntity.Key { get; private set; }
    private int Umbraco.Core.Models.Entities.ITreeEntity.CreatorId { get; private set; }
    private int Umbraco.Core.Models.Entities.ITreeEntity.ParentId { get; private set; }
    private int Umbraco.Core.Models.Entities.ITreeEntity.Level { get; private set; }
    private string Umbraco.Core.Models.Entities.ITreeEntity.Path { get; private set; }
    private int Umbraco.Core.Models.Entities.ITreeEntity.SortOrder { get; private set; }
    private bool Umbraco.Core.Models.Entities.ITreeEntity.Trashed { get; }
    private DateTime Umbraco.Core.Models.Entities.IEntity.CreateDate { get; private set; }
    private DateTime Umbraco.Core.Models.Entities.IEntity.UpdateDate { get; private set; }
    private Nullable`1<DateTime> Umbraco.Core.Models.Entities.IEntity.DeleteDate { get; private set; }
    public SimpleContentType(IContentType contentType);
    public SimpleContentType(IMediaType mediaType);
    public SimpleContentType(IMemberType memberType);
    private SimpleContentType(IContentTypeBase contentType);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Id();
    [CompilerGeneratedAttribute]
public Guid get_Key();
    [CompilerGeneratedAttribute]
public sealed virtual ITemplate get_DefaultTemplate();
    [CompilerGeneratedAttribute]
public sealed virtual ContentVariation get_Variations();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Icon();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsContainer();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowedAsRoot();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsElement();
    public sealed virtual bool SupportsPropertyVariation(string culture, string segment, bool wildcards);
    protected bool Equals(SimpleContentType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override string Umbraco.Core.Models.Entities.ITreeEntity.get_Name();
    private sealed virtual override void Umbraco.Core.Models.Entities.ITreeEntity.set_Name(string value);
    private sealed virtual override int Umbraco.Core.Models.Entities.IEntity.get_Id();
    private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_Id(int value);
    private sealed virtual override bool Umbraco.Core.Models.Entities.IEntity.get_HasIdentity();
    private sealed virtual override Guid Umbraco.Core.Models.Entities.IEntity.get_Key();
    private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_Key(Guid value);
    private sealed virtual override int Umbraco.Core.Models.Entities.ITreeEntity.get_CreatorId();
    private sealed virtual override void Umbraco.Core.Models.Entities.ITreeEntity.set_CreatorId(int value);
    private sealed virtual override int Umbraco.Core.Models.Entities.ITreeEntity.get_ParentId();
    private sealed virtual override void Umbraco.Core.Models.Entities.ITreeEntity.set_ParentId(int value);
    private sealed virtual override int Umbraco.Core.Models.Entities.ITreeEntity.get_Level();
    private sealed virtual override void Umbraco.Core.Models.Entities.ITreeEntity.set_Level(int value);
    private sealed virtual override string Umbraco.Core.Models.Entities.ITreeEntity.get_Path();
    private sealed virtual override void Umbraco.Core.Models.Entities.ITreeEntity.set_Path(string value);
    private sealed virtual override int Umbraco.Core.Models.Entities.ITreeEntity.get_SortOrder();
    private sealed virtual override void Umbraco.Core.Models.Entities.ITreeEntity.set_SortOrder(int value);
    private sealed virtual override bool Umbraco.Core.Models.Entities.ITreeEntity.get_Trashed();
    private sealed virtual override DateTime Umbraco.Core.Models.Entities.IEntity.get_CreateDate();
    private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_CreateDate(DateTime value);
    private sealed virtual override DateTime Umbraco.Core.Models.Entities.IEntity.get_UpdateDate();
    private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_UpdateDate(DateTime value);
    private sealed virtual override Nullable`1<DateTime> Umbraco.Core.Models.Entities.IEntity.get_DeleteDate();
    private sealed virtual override void Umbraco.Core.Models.Entities.IEntity.set_DeleteDate(Nullable`1<DateTime> value);
    private sealed virtual override void Umbraco.Core.Models.Entities.ITreeEntity.SetParent(ITreeEntity parent);
    private sealed virtual override object Umbraco.Core.Models.IDeepCloneable.DeepClone();
    private sealed virtual override bool Umbraco.Core.Models.Entities.IRememberBeingDirty.WasDirty();
    private sealed virtual override bool Umbraco.Core.Models.Entities.IRememberBeingDirty.WasPropertyDirty(string propertyName);
    private sealed virtual override void Umbraco.Core.Models.Entities.IRememberBeingDirty.ResetWereDirtyProperties();
    private sealed virtual override void Umbraco.Core.Models.Entities.IRememberBeingDirty.ResetDirtyProperties(bool rememberDirty);
    private sealed virtual override IEnumerable`1<string> Umbraco.Core.Models.Entities.IRememberBeingDirty.GetWereDirtyProperties();
    private sealed virtual override bool Umbraco.Core.Models.Entities.ICanBeDirty.IsDirty();
    private sealed virtual override bool Umbraco.Core.Models.Entities.ICanBeDirty.IsPropertyDirty(string propName);
    private sealed virtual override IEnumerable`1<string> Umbraco.Core.Models.Entities.ICanBeDirty.GetDirtyProperties();
    private sealed virtual override void Umbraco.Core.Models.Entities.ICanBeDirty.ResetDirtyProperties();
}
[DataContractAttribute]
public class Umbraco.Core.Models.Stylesheet : File {
    private Lazy`1<List`1<StylesheetProperty>> _properties;
    public string Content { get; public set; }
    [IgnoreDataMemberAttribute]
public IEnumerable`1<StylesheetProperty> Properties { get; }
    public bool HasIdentity { get; }
    public Stylesheet(string path);
    internal Stylesheet(string path, Func`2<File, string> getFileContent);
    private void InitializeProperties();
    private void Property_PropertyChanged(object sender, PropertyChangedEventArgs e);
    public virtual string get_Content();
    public virtual void set_Content(string value);
    public IEnumerable`1<StylesheetProperty> get_Properties();
    public void AddProperty(StylesheetProperty property);
    public void RemoveProperty(string name);
    public virtual bool get_HasIdentity();
    [CompilerGeneratedAttribute]
private bool <InitializeProperties>b__3_4(StylesheetRule x);
    [CompilerGeneratedAttribute]
private List`1<StylesheetProperty> <InitializeProperties>b__3_0();
    [CompilerGeneratedAttribute]
private StylesheetProperty <InitializeProperties>b__3_7(StylesheetRule statement);
}
[DataContractAttribute]
public class Umbraco.Core.Models.StylesheetProperty : BeingDirtyBase {
    private string _alias;
    private string _value;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public string Alias { get; public set; }
    public string Value { get; public set; }
    public StylesheetProperty(string name, string alias, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public string get_Alias();
    public void set_Alias(string value);
    public string get_Value();
    public void set_Value(string value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.Tag : EntityBase {
    private string _group;
    private string _text;
    private Nullable`1<int> _languageId;
    [CompilerGeneratedAttribute]
private int <NodeCount>k__BackingField;
    public string Group { get; public set; }
    public string Text { get; public set; }
    public Nullable`1<int> LanguageId { get; public set; }
    public int NodeCount { get; internal set; }
    public Tag(int id, string group, string text, Nullable`1<int> languageId);
    public sealed virtual string get_Group();
    public sealed virtual void set_Group(string value);
    public sealed virtual string get_Text();
    public sealed virtual void set_Text(string value);
    public sealed virtual Nullable`1<int> get_LanguageId();
    public sealed virtual void set_LanguageId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_NodeCount();
    [CompilerGeneratedAttribute]
internal void set_NodeCount(int value);
}
public enum Umbraco.Core.Models.TaggableObjectTypes : Enum {
    public int value__;
    public static TaggableObjectTypes All;
    public static TaggableObjectTypes Content;
    public static TaggableObjectTypes Media;
    public static TaggableObjectTypes Member;
}
public class Umbraco.Core.Models.TaggedEntity : object {
    [CompilerGeneratedAttribute]
private int <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TaggedProperty> <TaggedProperties>k__BackingField;
    public int EntityId { get; }
    public IEnumerable`1<TaggedProperty> TaggedProperties { get; }
    public TaggedEntity(int entityId, IEnumerable`1<TaggedProperty> taggedProperties);
    [CompilerGeneratedAttribute]
public int get_EntityId();
    [CompilerGeneratedAttribute]
public IEnumerable`1<TaggedProperty> get_TaggedProperties();
}
public class Umbraco.Core.Models.TaggedProperty : object {
    [CompilerGeneratedAttribute]
private int <PropertyTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyTypeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITag> <Tags>k__BackingField;
    public int PropertyTypeId { get; }
    public string PropertyTypeAlias { get; }
    public IEnumerable`1<ITag> Tags { get; }
    public TaggedProperty(int propertyTypeId, string propertyTypeAlias, IEnumerable`1<ITag> tags);
    [CompilerGeneratedAttribute]
public int get_PropertyTypeId();
    [CompilerGeneratedAttribute]
public string get_PropertyTypeAlias();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITag> get_Tags();
}
public enum Umbraco.Core.Models.TagsStorageType : Enum {
    public int value__;
    public static TagsStorageType Csv;
    public static TagsStorageType Json;
}
[DataContractAttribute]
public class Umbraco.Core.Models.Template : File {
    private string _alias;
    private string _name;
    private string _masterTemplateAlias;
    private Lazy`1<int> _masterTemplateId;
    [CompilerGeneratedAttribute]
private bool <IsMasterTemplate>k__BackingField;
    [DataMemberAttribute]
public Lazy`1<int> MasterTemplateId { get; public set; }
    public string MasterTemplateAlias { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Alias { get; public set; }
    public bool IsMasterTemplate { get; internal set; }
    public Template(string name, string alias);
    internal Template(string name, string alias, Func`2<File, string> getFileContent);
    public Lazy`1<int> get_MasterTemplateId();
    public void set_MasterTemplateId(Lazy`1<int> value);
    public sealed virtual string get_MasterTemplateAlias();
    public void set_MasterTemplateAlias(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_Alias();
    public sealed virtual void set_Alias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMasterTemplate();
    [CompilerGeneratedAttribute]
internal void set_IsMasterTemplate(bool value);
    public sealed virtual void SetMasterTemplate(ITemplate masterTemplate);
    protected virtual void DeepCloneNameAndAlias(File clone);
}
public class Umbraco.Core.Models.TemplateNode : object {
    [CompilerGeneratedAttribute]
private ITemplate <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TemplateNode> <Children>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateNode <Parent>k__BackingField;
    public ITemplate Template { get; public set; }
    public IEnumerable`1<TemplateNode> Children { get; public set; }
    public TemplateNode Parent { get; public set; }
    public TemplateNode(ITemplate template);
    [CompilerGeneratedAttribute]
public ITemplate get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(ITemplate value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TemplateNode> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(IEnumerable`1<TemplateNode> value);
    [CompilerGeneratedAttribute]
public TemplateNode get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(TemplateNode value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.TemplateOnDisk : Template {
    [CompilerGeneratedAttribute]
private bool <IsOnDisk>k__BackingField;
    public bool IsOnDisk { get; public set; }
    public string Content { get; public set; }
    public TemplateOnDisk(string name, string alias);
    [CompilerGeneratedAttribute]
public bool get_IsOnDisk();
    [CompilerGeneratedAttribute]
public void set_IsOnDisk(bool value);
    public virtual string get_Content();
    public virtual void set_Content(string value);
}
[DataContractAttribute]
public class Umbraco.Core.Models.UmbracoDomain : EntityBase {
    private Nullable`1<int> _contentId;
    private Nullable`1<int> _languageId;
    private string _domainName;
    [CompilerGeneratedAttribute]
private string <LanguageIsoCode>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> LanguageId { get; public set; }
    [DataMemberAttribute]
public string DomainName { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> RootContentId { get; public set; }
    public bool IsWildcard { get; }
    public string LanguageIsoCode { get; internal set; }
    public UmbracoDomain(string domainName);
    public UmbracoDomain(string domainName, string languageIsoCode);
    public sealed virtual Nullable`1<int> get_LanguageId();
    public sealed virtual void set_LanguageId(Nullable`1<int> value);
    public sealed virtual string get_DomainName();
    public sealed virtual void set_DomainName(string value);
    public sealed virtual Nullable`1<int> get_RootContentId();
    public sealed virtual void set_RootContentId(Nullable`1<int> value);
    public sealed virtual bool get_IsWildcard();
    [CompilerGeneratedAttribute]
public sealed virtual string get_LanguageIsoCode();
    [CompilerGeneratedAttribute]
internal void set_LanguageIsoCode(string value);
}
public enum Umbraco.Core.Models.UmbracoObjectTypes : Enum {
    public int value__;
    public static UmbracoObjectTypes Unknown;
    [UmbracoObjectTypeAttribute("EA7D8624-4CFE-4578-A871-24AA946BF34D")]
[FriendlyNameAttribute("Root")]
public static UmbracoObjectTypes ROOT;
    [UmbracoObjectTypeAttribute("C66BA18E-EAF3-4CFF-8A22-41B16D66A972", "Umbraco.Core.Models.IContent")]
[FriendlyNameAttribute("Document")]
[UmbracoUdiTypeAttribute("document")]
public static UmbracoObjectTypes Document;
    [UmbracoObjectTypeAttribute("B796F64C-1F99-4FFB-B886-4BF4BC011A9C", "Umbraco.Core.Models.IMedia")]
[FriendlyNameAttribute("Media")]
[UmbracoUdiTypeAttribute("media")]
public static UmbracoObjectTypes Media;
    [UmbracoObjectTypeAttribute("9B5416FB-E72F-45A9-A07B-5A9A2709CE43", "Umbraco.Core.Models.IMemberType")]
[FriendlyNameAttribute("Member Type")]
[UmbracoUdiTypeAttribute("member-type")]
public static UmbracoObjectTypes MemberType;
    [UmbracoObjectTypeAttribute("6FBDE604-4178-42CE-A10B-8A2600A2F07D", "Umbraco.Core.Models.ITemplate")]
[FriendlyNameAttribute("Template")]
[UmbracoUdiTypeAttribute("template")]
public static UmbracoObjectTypes Template;
    [UmbracoObjectTypeAttribute("366E63B9-880F-4E13-A61C-98069B029728")]
[FriendlyNameAttribute("Member Group")]
[UmbracoUdiTypeAttribute("member-group")]
public static UmbracoObjectTypes MemberGroup;
    [UmbracoObjectTypeAttribute("4EA4382B-2F5A-4C2B-9587-AE9B3CF3602E", "Umbraco.Core.Models.IMediaType")]
[FriendlyNameAttribute("Media Type")]
[UmbracoUdiTypeAttribute("media-type")]
public static UmbracoObjectTypes MediaType;
    [UmbracoObjectTypeAttribute("A2CB7800-F571-4787-9638-BC48539A0EFB", "Umbraco.Core.Models.IContentType")]
[FriendlyNameAttribute("Document Type")]
[UmbracoUdiTypeAttribute("document-type")]
public static UmbracoObjectTypes DocumentType;
    [UmbracoObjectTypeAttribute("01BB7FF2-24DC-4C0C-95A2-C24EF72BBAC8")]
[FriendlyNameAttribute("Recycle Bin")]
public static UmbracoObjectTypes RecycleBin;
    [UmbracoObjectTypeAttribute("9F68DA4F-A3A8-44C2-8226-DCBD125E4840")]
[FriendlyNameAttribute("Stylesheet")]
[UmbracoUdiTypeAttribute("stylesheet")]
public static UmbracoObjectTypes Stylesheet;
    [UmbracoObjectTypeAttribute("39EB0F98-B348-42A1-8662-E7EB18487560", "Umbraco.Core.Models.IMember")]
[FriendlyNameAttribute("Member")]
[UmbracoUdiTypeAttribute("member")]
public static UmbracoObjectTypes Member;
    [UmbracoObjectTypeAttribute("30A2A501-1978-4DDB-A57B-F7EFED43BA3C", "Umbraco.Core.Models.IDataType")]
[FriendlyNameAttribute("Data Type")]
[UmbracoUdiTypeAttribute("data-type")]
public static UmbracoObjectTypes DataType;
    [UmbracoObjectTypeAttribute("2F7A2769-6B0B-4468-90DD-AF42D64F7F16")]
[FriendlyNameAttribute("Document Type Container")]
[UmbracoUdiTypeAttribute("document-type-container")]
public static UmbracoObjectTypes DocumentTypeContainer;
    [UmbracoObjectTypeAttribute("42AEF799-B288-4744-9B10-BE144B73CDC4")]
[FriendlyNameAttribute("Media Type Container")]
[UmbracoUdiTypeAttribute("media-type-container")]
public static UmbracoObjectTypes MediaTypeContainer;
    [UmbracoObjectTypeAttribute("521231E3-8B37-469C-9F9D-51AFC91FEB7B")]
[FriendlyNameAttribute("Data Type Container")]
[UmbracoUdiTypeAttribute("data-type-container")]
public static UmbracoObjectTypes DataTypeContainer;
    [UmbracoObjectTypeAttribute("B1988FAD-8675-4F47-915A-B3A602BC5D8D")]
[FriendlyNameAttribute("Relation Type")]
[UmbracoUdiTypeAttribute("relation-type")]
public static UmbracoObjectTypes RelationType;
    [UmbracoObjectTypeAttribute("F5A9F787-6593-46F0-B8FF-BFD9BCA9F6BB")]
[FriendlyNameAttribute("Form")]
public static UmbracoObjectTypes FormsForm;
    [UmbracoObjectTypeAttribute("42D7BF9B-A362-4FEE-B45A-674D5C064B70")]
[FriendlyNameAttribute("PreValue")]
public static UmbracoObjectTypes FormsPreValue;
    [UmbracoObjectTypeAttribute("CFED6CE4-9359-443E-9977-9956FEB1D867")]
[FriendlyNameAttribute("DataSource")]
public static UmbracoObjectTypes FormsDataSource;
    [UmbracoObjectTypeAttribute("6B05D05B-EC78-49BE-A4E4-79E274F07A77")]
[FriendlyNameAttribute("Language")]
public static UmbracoObjectTypes Language;
    [UmbracoObjectTypeAttribute("6EBEF410-03AA-48CF-A792-E1C1CB087ACA", "Umbraco.Core.Models.IContent")]
[FriendlyNameAttribute("DocumentBlueprint")]
[UmbracoUdiTypeAttribute("document-blueprint")]
public static UmbracoObjectTypes DocumentBlueprint;
    [UmbracoObjectTypeAttribute("92849B1E-3904-4713-9356-F646F87C25F4")]
[FriendlyNameAttribute("Identifier Reservation")]
public static UmbracoObjectTypes IdReservation;
}
public class Umbraco.Core.Models.UpgradeResult : object {
    [CompilerGeneratedAttribute]
private string <UpgradeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpgradeUrl>k__BackingField;
    public string UpgradeType { get; }
    public string Comment { get; }
    public string UpgradeUrl { get; }
    public UpgradeResult(string upgradeType, string comment, string upgradeUrl);
    [CompilerGeneratedAttribute]
public string get_UpgradeType();
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public string get_UpgradeUrl();
}
[ExtensionAttribute]
public static class Umbraco.Core.Models.UserExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetPermissions(IUser user, string path, IUserService userService);
    [ExtensionAttribute]
public static bool HasSectionAccess(IUser user, string app);
    [ExtensionAttribute]
public static bool IsSuper(IUser user);
    [ExtensionAttribute]
public static bool IsAdmin(IUser user);
    [ExtensionAttribute]
internal static String[] GetUserAvatarUrls(IUser user, IAppCache cache);
    [ExtensionAttribute]
public static CultureInfo GetUserCulture(IUser user, ILocalizedTextService textService, IGlobalSettings globalSettings);
    internal static CultureInfo GetUserCulture(string userLanguage, ILocalizedTextService textService, IGlobalSettings globalSettings);
    [ExtensionAttribute]
internal static bool HasContentRootAccess(IUser user, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
internal static bool HasContentBinAccess(IUser user, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
internal static bool HasMediaRootAccess(IUser user, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
internal static bool HasMediaBinAccess(IUser user, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
internal static bool HasPathAccess(IUser user, IContent content, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
internal static bool HasPathAccess(IUser user, IMedia media, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
internal static bool HasContentPathAccess(IUser user, IUmbracoEntity entity, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
internal static bool HasMediaPathAccess(IUser user, IUmbracoEntity entity, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
public static bool HasAccessToSensitiveData(IUser user);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload specifying all parameters instead")]
public static Int32[] CalculateContentStartNodeIds(IUser user, IEntityService entityService);
    [ExtensionAttribute]
public static Int32[] CalculateContentStartNodeIds(IUser user, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload specifying all parameters instead")]
public static Int32[] CalculateMediaStartNodeIds(IUser user, IEntityService entityService);
    [ExtensionAttribute]
public static Int32[] CalculateMediaStartNodeIds(IUser user, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload specifying all parameters instead")]
public static String[] GetMediaStartNodePaths(IUser user, IEntityService entityService);
    [ExtensionAttribute]
public static String[] GetMediaStartNodePaths(IUser user, IEntityService entityService, AppCaches appCaches);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload specifying all parameters instead")]
public static String[] GetContentStartNodePaths(IUser user, IEntityService entityService);
    [ExtensionAttribute]
public static String[] GetContentStartNodePaths(IUser user, IEntityService entityService, AppCaches appCaches);
    private static bool StartsWithPath(string test, string path);
    private static string GetBinPath(UmbracoObjectTypes objectType);
    internal static Int32[] CombineStartNodes(UmbracoObjectTypes objectType, Int32[] groupSn, Int32[] userSn, IEntityService entityService);
}
public class Umbraco.Core.Models.Validation.RequiredForPersistenceAttribute : RequiredAttribute {
    internal static bool HasRequiredValuesForPersistence(object model);
}
[DataContractAttribute]
public enum Umbraco.Core.Models.ValueStorageType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ValueStorageType Ntext;
    [EnumMemberAttribute]
public static ValueStorageType Nvarchar;
    [EnumMemberAttribute]
public static ValueStorageType Integer;
    [EnumMemberAttribute]
public static ValueStorageType Date;
    [EnumMemberAttribute]
public static ValueStorageType Decimal;
}
public class Umbraco.Core.MonitorLock : object {
    private object _locker;
    private bool _entered;
    public MonitorLock(object locker);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class Umbraco.Core.NamedUdiRange : UdiRange {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public NamedUdiRange(Udi udi, string selector);
    public NamedUdiRange(Udi udi, string name, string selector);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[ExtensionAttribute]
internal static class Umbraco.Core.NameValueCollectionExtensions : object {
    [IteratorStateMachineAttribute("Umbraco.Core.NameValueCollectionExtensions/<AsEnumerable>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<KeyValuePair`2<string, string>> AsEnumerable(NameValueCollection nvc);
    [ExtensionAttribute]
public static bool ContainsKey(NameValueCollection collection, string key);
    [ExtensionAttribute]
public static T GetValue(NameValueCollection collection, string key, T defaultIfNotFound);
}
internal class Umbraco.Core.NetworkHelper : object {
    public static string FileSafeMachineName { get; }
    public static string MachineName { get; }
    public static string get_FileSafeMachineName();
    public static string get_MachineName();
}
[ExtensionAttribute]
public static class Umbraco.Core.ObjectExtensions : object {
    private static ConcurrentDictionary`2<Type, Dictionary`2<string, object>> ToObjectTypes;
    private static ConcurrentDictionary`2<Type, Type> NullableGenericCache;
    private static ConcurrentDictionary`2<CompositeTypeTypeKey, TypeConverter> InputTypeConverterCache;
    private static ConcurrentDictionary`2<CompositeTypeTypeKey, TypeConverter> DestinationTypeConverterCache;
    private static ConcurrentDictionary`2<CompositeTypeTypeKey, bool> AssignableTypeCache;
    private static ConcurrentDictionary`2<Type, bool> BoolConvertCache;
    private static Char[] NumberDecimalSeparatorsToNormalize;
    private static CustomBooleanTypeConverter CustomBooleanTypeConverter;
    private static ObjectExtensions();
    [ExtensionAttribute]
public static IEnumerable`1<T> AsEnumerableOfOne(T input);
    [ExtensionAttribute]
public static void DisposeIfDisposable(object input);
    [ExtensionAttribute]
internal static T SafeCast(object input);
    [ExtensionAttribute]
public static Attempt`1<T> TryConvertTo(object input);
    [ExtensionAttribute]
public static Attempt`1<object> TryConvertTo(object input, Type target);
    [ExtensionAttribute]
private static Nullable`1<Attempt`1<object>> TryConvertToFromString(string input, Type target);
    [ExtensionAttribute]
internal static void CheckThrowObjectDisposed(IDisposable disposable, bool isDisposed, string objectname);
    [ExtensionAttribute]
public static IDictionary`2<string, TVal> ToDictionary(T o, Expression`1[] ignoreProperties);
    [ExtensionAttribute]
public static IDictionary`2<string, TVal> ToDictionary(object o, String[] ignoreProperties);
    public static Dictionary`2<string, object> ToObjectDictionary(T obj, Func`2<PropertyInfo, string> namer);
    [ExtensionAttribute]
internal static string ToDebugString(object obj, int levels);
    [ExtensionAttribute]
internal static Attempt`1<string> TryConvertToXmlString(object value, Type type);
    [ExtensionAttribute]
internal static string ToXmlString(object value, Type type);
    [ExtensionAttribute]
internal static string ToXmlString(object value);
    private static string GetEnumPropertyDebugString(object enumItem, int levels);
    private static string GetPropertyDebugString(PropertyInfo propertyInfo, object obj, int levels);
    [ExtensionAttribute]
internal static Guid AsGuid(object value);
    private static string NormalizeNumberDecimalSeparator(string s);
    private static TypeConverter GetCachedSourceTypeConverter(Type source, Type target);
    private static TypeConverter GetCachedTargetTypeConverter(Type source, Type target);
    private static Type GetCachedGenericNullableType(Type type);
    private static bool GetCachedCanAssign(object input, Type source, Type target);
    private static bool GetCachedCanConvertToBoolean(Type type);
    [CompilerGeneratedAttribute]
internal static string <ToObjectDictionary>g__DefaultNamer|17_0(PropertyInfo property);
}
public class Umbraco.Core.PackageActions.AllowDoctype : object {
    public sealed virtual bool Execute(string packageName, XElement xmlData);
    public sealed virtual bool Undo(string packageName, XElement xmlData);
    public sealed virtual string Alias();
}
public interface Umbraco.Core.PackageActions.IPackageAction {
    public abstract virtual bool Execute(string packageName, XElement xmlData);
    public abstract virtual string Alias();
    public abstract virtual bool Undo(string packageName, XElement xmlData);
}
public class Umbraco.Core.PackageActions.PackageActionCollection : BuilderCollectionBase`1<IPackageAction> {
    public PackageActionCollection(IEnumerable`1<IPackageAction> items);
}
internal class Umbraco.Core.PackageActions.PackageActionCollectionBuilder : LazyCollectionBuilderBase`3<PackageActionCollectionBuilder, PackageActionCollection, IPackageAction> {
    protected PackageActionCollectionBuilder This { get; }
    protected virtual PackageActionCollectionBuilder get_This();
}
public class Umbraco.Core.PackageActions.PublishRootDocument : object {
    public sealed virtual bool Execute(string packageName, XElement xmlData);
    public sealed virtual bool Undo(string packageName, XElement xmlData);
    public sealed virtual string Alias();
}
internal class Umbraco.Core.Packaging.CompiledPackageXmlParser : object {
    private ConflictingPackageData _conflictingPackageData;
    public CompiledPackageXmlParser(ConflictingPackageData conflictingPackageData);
    public CompiledPackage ToCompiledPackage(XDocument xml, FileInfo packageFile, string applicationRootFolder);
    private PreInstallWarnings GetPreInstallWarnings(CompiledPackage package, string applicationRootFolder);
    public ValueTuple`2[] ExtractSourceDestinationFileInformation(IEnumerable`1<CompiledPackageFile> packageFiles);
    private IEnumerable`1<string> FindFilesToBeReplaced(IEnumerable`1<ValueTuple`2<string, string>> sourceDestination, string applicationRootFolder);
    private IEnumerable`1<string> FindUnsecureFiles(IEnumerable`1<ValueTuple`2<string, string>> sourceDestinationPair);
    private bool IsFileDestinationUnsecure(string destination);
    private static string PrepareAsFilePathElement(string pathElement);
    private static string UpdatePathPlaceholders(string path);
    public static IEnumerable`1<PackageAction> GetPackageActions(XElement actionsElement, string packageName);
    [CompilerGeneratedAttribute]
private bool <FindUnsecureFiles>b__6_0(ValueTuple`2<string, string> sd);
}
internal class Umbraco.Core.Packaging.ConflictingPackageData : object {
    private IMacroService _macroService;
    private IFileService _fileService;
    public ConflictingPackageData(IMacroService macroService, IFileService fileService);
    public IEnumerable`1<IFile> FindConflictingStylesheets(IEnumerable`1<XElement> stylesheetNodes);
    public IEnumerable`1<ITemplate> FindConflictingTemplates(IEnumerable`1<XElement> templateNodes);
    public IEnumerable`1<IMacro> FindConflictingMacros(IEnumerable`1<XElement> macroNodes);
    [CompilerGeneratedAttribute]
private IFile <FindConflictingStylesheets>b__3_0(XElement n);
    [CompilerGeneratedAttribute]
private ITemplate <FindConflictingTemplates>b__4_0(XElement n);
    [CompilerGeneratedAttribute]
private IMacro <FindConflictingMacros>b__5_0(XElement n);
}
public interface Umbraco.Core.Packaging.ICreatedPackagesRepository {
    public abstract virtual string ExportPackage(PackageDefinition definition);
}
public interface Umbraco.Core.Packaging.IInstalledPackagesRepository {
}
public interface Umbraco.Core.Packaging.IPackageActionRunner {
    public abstract virtual bool RunPackageAction(string packageName, string actionAlias, XElement actionXml, IEnumerable`1& errors);
    public abstract virtual bool UndoPackageAction(string packageName, string actionAlias, XElement actionXml, IEnumerable`1& errors);
}
public interface Umbraco.Core.Packaging.IPackageDefinitionRepository {
    public abstract virtual IEnumerable`1<PackageDefinition> GetAll();
    public abstract virtual PackageDefinition GetById(int id);
    public abstract virtual void Delete(int id);
    public abstract virtual bool SavePackage(PackageDefinition definition);
}
public interface Umbraco.Core.Packaging.IPackageInstallation {
    public abstract virtual UninstallationSummary UninstallPackage(PackageDefinition packageDefinition, int userId);
    public abstract virtual InstallationSummary InstallPackageData(PackageDefinition packageDefinition, CompiledPackage compiledPackage, int userId);
    public abstract virtual IEnumerable`1<string> InstallPackageFiles(PackageDefinition packageDefinition, CompiledPackage compiledPackage, int userId);
    public abstract virtual CompiledPackage ReadPackage(FileInfo packageFile);
}
internal class Umbraco.Core.Packaging.PackageActionRunner : object {
    private ILogger _logger;
    private PackageActionCollection _packageActions;
    public PackageActionRunner(ILogger logger, PackageActionCollection packageActions);
    public sealed virtual bool RunPackageAction(string packageName, string actionAlias, XElement actionXml, IEnumerable`1& errors);
    public sealed virtual bool UndoPackageAction(string packageName, string actionAlias, XElement actionXml, IEnumerable`1& errors);
}
internal class Umbraco.Core.Packaging.PackageDataInstallation : object {
    private ILogger _logger;
    private IFileService _fileService;
    private IMacroService _macroService;
    private ILocalizationService _localizationService;
    private IDataTypeService _dataTypeService;
    private PropertyEditorCollection _propertyEditors;
    private IScopeProvider _scopeProvider;
    private IEntityService _entityService;
    private IContentTypeService _contentTypeService;
    private IContentService _contentService;
    public PackageDataInstallation(ILogger logger, IFileService fileService, IMacroService macroService, ILocalizationService localizationService, IDataTypeService dataTypeService, IEntityService entityService, IContentTypeService contentTypeService, IContentService contentService, PropertyEditorCollection propertyEditors, IScopeProvider scopeProvider);
    public UninstallationSummary UninstallPackageData(PackageDefinition package, int userId);
    public InstallationSummary InstallPackageData(CompiledPackage compiledPackage, int userId);
    public IReadOnlyList`1<IContent> ImportContent(IEnumerable`1<CompiledPackageDocument> docs, IDictionary`2<string, IContentType> importedDocumentTypes, int userId);
    public IEnumerable`1<IContent> ImportContent(CompiledPackageDocument packageDocument, int parentId, IDictionary`2<string, IContentType> importedDocumentTypes, int userId);
    private IEnumerable`1<IContent> ParseDocumentRootXml(IEnumerable`1<XElement> roots, int parentId, IDictionary`2<string, IContentType> importedContentTypes);
    private IEnumerable`1<IContent> CreateContentFromXml(IEnumerable`1<XElement> children, IContent parent, IDictionary`2<string, IContentType> importedContentTypes);
    private IContent CreateContentFromXml(XElement element, IContentType contentType, IContent parent, int parentId);
    public IReadOnlyList`1<IContentType> ImportDocumentType(XElement docTypeElement, int userId);
    public IReadOnlyList`1<IContentType> ImportDocumentTypes(IEnumerable`1<XElement> docTypeElements, int userId);
    public IReadOnlyList`1<IContentType> ImportDocumentTypes(IReadOnlyCollection`1<XElement> unsortedDocumentTypes, bool importStructure, int userId);
    private Dictionary`2<string, int> CreateContentTypeFolderStructure(IEnumerable`1<XElement> unsortedDocumentTypes);
    private EntityContainer CreateContentTypeChildFolder(string folderName, IUmbracoEntity current);
    private IContentType CreateContentTypeFromXml(XElement documentType, IReadOnlyDictionary`2<string, IContentType> importedContentTypes);
    private IContentType UpdateContentTypeFromXml(XElement documentType, IContentType contentType, IReadOnlyDictionary`2<string, IContentType> importedContentTypes);
    private void UpdateHistoryCleanupPolicy(IContentType contentType, XElement element);
    private void UpdateContentTypesAllowedTemplates(IContentType contentType, XElement allowedTemplatesElement, XElement defaultTemplateElement);
    private void UpdateContentTypesPropertyGroups(IContentType contentType, XElement propertyGroupsContainer);
    private void UpdateContentTypesProperties(IContentType contentType, XElement genericPropertiesElement);
    private IContentType UpdateContentTypesStructure(IContentType contentType, XElement structureElement, IReadOnlyDictionary`2<string, IContentType> importedContentTypes);
    private IContentType FindContentTypeByAlias(string contentTypeAlias);
    public IReadOnlyList`1<IDataType> ImportDataTypes(IReadOnlyCollection`1<XElement> dataTypeElements, int userId);
    private Dictionary`2<string, int> CreateDataTypeFolderStructure(IEnumerable`1<XElement> datatypeElements);
    private EntityContainer CreateDataTypeChildFolder(string folderName, IUmbracoEntity current);
    public IReadOnlyList`1<IDictionaryItem> ImportDictionaryItems(IEnumerable`1<XElement> dictionaryItemElementList, int userId);
    private IReadOnlyList`1<IDictionaryItem> ImportDictionaryItems(IEnumerable`1<XElement> dictionaryItemElementList, List`1<ILanguage> languages, Nullable`1<Guid> parentId, int userId);
    private IEnumerable`1<IDictionaryItem> ImportDictionaryItem(XElement dictionaryItemElement, List`1<ILanguage> languages, Nullable`1<Guid> parentId, int userId);
    private IDictionaryItem GetAndUpdateDictionaryItem(string key, XElement dictionaryItemElement, List`1<ILanguage> languages);
    private static DictionaryItem CreateNewDictionaryItem(string key, XElement dictionaryItemElement, List`1<ILanguage> languages, Nullable`1<Guid> parentId);
    private static bool DictionaryValueIsNew(IEnumerable`1<IDictionaryTranslation> translations, XElement valueElement);
    private static void AddDictionaryTranslation(ICollection`1<IDictionaryTranslation> translations, XElement valueElement, IEnumerable`1<ILanguage> languages);
    public IReadOnlyList`1<ILanguage> ImportLanguages(IEnumerable`1<XElement> languageElements, int userId);
    public IReadOnlyList`1<IMacro> ImportMacros(IEnumerable`1<XElement> macroElements, int userId);
    private IMacro ParseMacroElement(XElement macroElement);
    public IReadOnlyList`1<IFile> ImportStylesheets(IEnumerable`1<XElement> stylesheetElements, int userId);
    public IEnumerable`1<ITemplate> ImportTemplate(XElement templateElement, int userId);
    public IReadOnlyList`1<ITemplate> ImportTemplates(IReadOnlyCollection`1<XElement> templateElements, int userId);
    private string ViewPath(string alias);
}
public class Umbraco.Core.Packaging.PackageDefinitionXmlParser : object {
    private ILogger _logger;
    public PackageDefinitionXmlParser(ILogger logger);
    public PackageDefinition ToPackageDefinition(XElement xml);
    public XElement ToXml(PackageDefinition def);
}
internal class Umbraco.Core.Packaging.PackageExtraction : object {
    public string ReadTextFileFromArchive(FileInfo packageFile, string fileToRead, String& directoryInPackage);
    private static void CheckPackageExists(FileInfo packageFile);
    public void CopyFileFromArchive(FileInfo packageFile, string fileInPackageName, string destinationfilePath);
    public void CopyFilesFromArchive(FileInfo packageFile, IEnumerable`1<ValueTuple`2<string, string>> sourceDestination);
    public IEnumerable`1<string> FindMissingFiles(FileInfo packageFile, IEnumerable`1<string> expectedFiles);
    public IEnumerable`1<string> FindDuplicateFileNames(FileInfo packageFile);
    [IteratorStateMachineAttribute("Umbraco.Core.Packaging.PackageExtraction/<ReadFilesFromArchive>d__6")]
public IEnumerable`1<Byte[]> ReadFilesFromArchive(FileInfo packageFile, IEnumerable`1<string> filesToGet);
    private void ReadZipfileEntries(FileInfo packageFile, Func`2<ZipArchiveEntry, bool> entryFunc, bool skipsDirectories);
}
internal class Umbraco.Core.Packaging.PackageFileInstallation : object {
    private CompiledPackageXmlParser _parser;
    private IProfilingLogger _logger;
    private PackageExtraction _packageExtraction;
    public PackageFileInstallation(CompiledPackageXmlParser parser, IProfilingLogger logger);
    public IEnumerable`1<string> InstallFiles(CompiledPackage compiledPackage, FileInfo packageFile, string targetRootFolder);
    public IEnumerable`1<string> UninstallFiles(PackageDefinition package);
    private static IEnumerable`1<ValueTuple`2<string, string>> AppendRootToDestination(string applicationRootFolder, IEnumerable`1<ValueTuple`2<string, string>> sourceDestination);
}
internal class Umbraco.Core.Packaging.PackageInstallation : object {
    private PackageExtraction _packageExtraction;
    private PackageDataInstallation _packageDataInstallation;
    private PackageFileInstallation _packageFileInstallation;
    private CompiledPackageXmlParser _parser;
    private IPackageActionRunner _packageActionRunner;
    private DirectoryInfo _applicationRootFolder;
    public PackageInstallation(PackageDataInstallation packageDataInstallation, PackageFileInstallation packageFileInstallation, CompiledPackageXmlParser parser, IPackageActionRunner packageActionRunner, DirectoryInfo applicationRootFolder);
    public sealed virtual CompiledPackage ReadPackage(FileInfo packageFile);
    public sealed virtual IEnumerable`1<string> InstallPackageFiles(PackageDefinition packageDefinition, CompiledPackage compiledPackage, int userId);
    public sealed virtual UninstallationSummary UninstallPackage(PackageDefinition package, int userId);
    public sealed virtual InstallationSummary InstallPackageData(PackageDefinition packageDefinition, CompiledPackage compiledPackage, int userId);
    [IteratorStateMachineAttribute("Umbraco.Core.Packaging.PackageInstallation/<RunPackageActions>d__11")]
private IEnumerable`1<string> RunPackageActions(PackageDefinition packageDefinition, IEnumerable`1<PackageAction> actions);
    [IteratorStateMachineAttribute("Umbraco.Core.Packaging.PackageInstallation/<UndoPackageActions>d__12")]
private IEnumerable`1<string> UndoPackageActions(IPackageInfo packageDefinition, IEnumerable`1<PackageAction> actions);
    private XDocument GetConfigXmlDoc(FileInfo packageFile);
    private void ValidatePackageFile(FileInfo packageFile, CompiledPackage package);
}
public enum Umbraco.Core.Packaging.PackageInstallType : Enum {
    public int value__;
    public static PackageInstallType AlreadyInstalled;
    public static PackageInstallType NewInstall;
    public static PackageInstallType Upgrade;
}
internal class Umbraco.Core.Packaging.PackagesRepository : object {
    private IContentService _contentService;
    private IContentTypeService _contentTypeService;
    private IDataTypeService _dataTypeService;
    private IFileService _fileService;
    private IMacroService _macroService;
    private ILocalizationService _languageService;
    private IEntityXmlSerializer _serializer;
    private ILogger _logger;
    private string _packageRepositoryFileName;
    private string _mediaFolderPath;
    private string _packagesFolderPath;
    private string _tempFolderPath;
    private PackageDefinitionXmlParser _parser;
    private string CreatedPackagesFile { get; }
    public PackagesRepository(IContentService contentService, IContentTypeService contentTypeService, IDataTypeService dataTypeService, IFileService fileService, IMacroService macroService, ILocalizationService languageService, IEntityXmlSerializer serializer, ILogger logger, string packageRepositoryFileName, string tempFolderPath, string packagesFolderPath, string mediaFolderPath);
    private string get_CreatedPackagesFile();
    [IteratorStateMachineAttribute("Umbraco.Core.Packaging.PackagesRepository/<GetAll>d__16")]
public sealed virtual IEnumerable`1<PackageDefinition> GetAll();
    public sealed virtual PackageDefinition GetById(int id);
    public sealed virtual void Delete(int id);
    public sealed virtual bool SavePackage(PackageDefinition definition);
    public sealed virtual string ExportPackage(PackageDefinition definition);
    private void ValidatePackage(PackageDefinition definition);
    private void PackageDataTypes(PackageDefinition definition, XContainer root);
    private void PackageLanguages(PackageDefinition definition, XContainer root);
    private void PackageDictionaryItems(PackageDefinition definition, XContainer root);
    private void PackageMacros(PackageDefinition definition, XContainer root, XContainer filesXml, string temporaryPath);
    private void PackageStylesheets(PackageDefinition definition, XContainer root);
    private void PackageTemplates(PackageDefinition definition, XContainer root);
    private void PackageDocumentTypes(PackageDefinition definition, XContainer root);
    private void PackageDocumentsAndTags(PackageDefinition definition, XContainer root);
    private static void ZipPackage(string path, string savePath);
    private static void AppendFileToPackage(string path, string packageDirectory, XContainer filesXml);
    private static void ProcessDirectory(DirectoryInfo directory, string dirPath, string packageDirectory, XContainer filesXml);
    private static void AppendFileXml(FileInfo file, string filePath, string packageDirectory, XContainer filesXml);
    private XElement GetMacroXml(int macroId, IMacro& macro);
    private XElement GetStylesheetXml(string name, bool includeProperties);
    private void AddDocumentType(IContentType dt, HashSet`1<IContentType> dtl);
    private static XElement GetPackageInfoXml(PackageDefinition definition);
    private static XDocument CreateCompiledPackageXml(XElement& root, XElement& files);
    private XDocument EnsureStorage(String& packagesFile);
}
[DefaultMemberAttribute("Item")]
internal abstract class Umbraco.Core.Persistence.BulkDataReader : object {
    private DataTable _schemaTable;
    private List`1<SqlBulkCopyColumnMapping> _columnMappings;
    private static Dictionary`2<SqlDbType, List`1<string>> AllowedOptionalColumnCombinations;
    private static string IsIdentitySchemaColumn;
    private static string DataTypeNameSchemaColumn;
    private static string XmlSchemaCollectionDatabaseSchemaColumn;
    private static string XmlSchemaCollectionOwningSchemaSchemaColumn;
    private static string XmlSchemaCollectionNameSchemaColumn;
    private bool _isOpen;
    private bool _disposed;
    public ReadOnlyCollection`1<SqlBulkCopyColumnMapping> ColumnMappings { get; }
    protected string SchemaName { get; }
    protected string TableName { get; }
    public int Depth { get; }
    public int FieldCount { get; }
    public bool IsClosed { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    private static BulkDataReader();
    public ReadOnlyCollection`1<SqlBulkCopyColumnMapping> get_ColumnMappings();
    protected abstract virtual string get_SchemaName();
    protected abstract virtual string get_TableName();
    protected abstract virtual void AddSchemaTableRows();
    protected void AddSchemaTableRow(string columnName, Nullable`1<int> columnSize, Nullable`1<short> numericPrecision, Nullable`1<short> numericScale, bool isUnique, bool isKey, bool allowDbNull, SqlDbType providerType, string udtSchema, string udtType, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName);
    public sealed virtual int get_Depth();
    public sealed virtual int get_FieldCount();
    public sealed virtual bool get_IsClosed();
    public sealed virtual object get_Item(int i);
    public sealed virtual object get_Item(string name);
    public virtual int get_RecordsAffected();
    public sealed virtual void Close();
    public sealed virtual bool GetBoolean(int i);
    public sealed virtual byte GetByte(int i);
    public sealed virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public sealed virtual char GetChar(int i);
    public sealed virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public sealed virtual IDataReader GetData(int i);
    public sealed virtual string GetDataTypeName(int i);
    public sealed virtual DateTime GetDateTime(int i);
    public DateTimeOffset GetDateTimeOffset(int i);
    public sealed virtual decimal GetDecimal(int i);
    public sealed virtual double GetDouble(int i);
    public sealed virtual Type GetFieldType(int i);
    public sealed virtual float GetFloat(int i);
    public sealed virtual Guid GetGuid(int i);
    public sealed virtual short GetInt16(int i);
    public sealed virtual int GetInt32(int i);
    public sealed virtual long GetInt64(int i);
    public sealed virtual string GetName(int i);
    public sealed virtual int GetOrdinal(string name);
    public sealed virtual DataTable GetSchemaTable();
    public sealed virtual string GetString(int i);
    public TimeSpan GetTimeSpan(int i);
    public abstract virtual object GetValue(int i);
    public sealed virtual int GetValues(Object[] values);
    public sealed virtual bool IsDBNull(int i);
    public sealed virtual bool NextResult();
    public abstract virtual bool Read();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
[AttributeUsageAttribute("128")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Default>k__BackingField;
    public string Name { get; public set; }
    public object Default { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(object value);
}
[AttributeUsageAttribute("128")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute : ReferencesAttribute {
    [CompilerGeneratedAttribute]
private Rule <OnDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    public Rule OnDelete { get; public set; }
    public Rule OnUpdate { get; public set; }
    public string Name { get; public set; }
    public string Column { get; public set; }
    public ForeignKeyAttribute(Type type);
    [CompilerGeneratedAttribute]
public Rule get_OnDelete();
    [CompilerGeneratedAttribute]
public void set_OnDelete(Rule value);
    [CompilerGeneratedAttribute]
public Rule get_OnUpdate();
    [CompilerGeneratedAttribute]
public void set_OnUpdate(Rule value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
}
[AttributeUsageAttribute("128")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexTypes <IndexType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IncludeColumns>k__BackingField;
    public string Name { get; public set; }
    public IndexTypes IndexType { get; private set; }
    public string ForColumns { get; public set; }
    public string IncludeColumns { get; public set; }
    public IndexAttribute(IndexTypes indexType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IndexTypes get_IndexType();
    [CompilerGeneratedAttribute]
private void set_IndexType(IndexTypes value);
    [CompilerGeneratedAttribute]
public string get_ForColumns();
    [CompilerGeneratedAttribute]
public void set_ForColumns(string value);
    [CompilerGeneratedAttribute]
public string get_IncludeColumns();
    [CompilerGeneratedAttribute]
public void set_IncludeColumns(string value);
}
public enum Umbraco.Core.Persistence.DatabaseAnnotations.IndexTypes : Enum {
    public int value__;
    public static IndexTypes Clustered;
    public static IndexTypes NonClustered;
    public static IndexTypes UniqueNonClustered;
}
[AttributeUsageAttribute("128")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.LengthAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    public int Length { get; private set; }
    public LengthAttribute(int length);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(int value);
}
[AttributeUsageAttribute("128")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.NullSettingAttribute : Attribute {
    [CompilerGeneratedAttribute]
private NullSettings <NullSetting>k__BackingField;
    public NullSettings NullSetting { get; public set; }
    [CompilerGeneratedAttribute]
public NullSettings get_NullSetting();
    [CompilerGeneratedAttribute]
public void set_NullSetting(NullSettings value);
}
public enum Umbraco.Core.Persistence.DatabaseAnnotations.NullSettings : Enum {
    public int value__;
    public static NullSettings Null;
    public static NullSettings NotNull;
}
[AttributeUsageAttribute("128")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Clustered>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OnColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IdentitySeed>k__BackingField;
    public bool Clustered { get; public set; }
    public bool AutoIncrement { get; public set; }
    public string Name { get; public set; }
    public string OnColumns { get; public set; }
    public int IdentitySeed { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Clustered();
    [CompilerGeneratedAttribute]
public void set_Clustered(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoIncrement();
    [CompilerGeneratedAttribute]
public void set_AutoIncrement(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OnColumns();
    [CompilerGeneratedAttribute]
public void set_OnColumns(string value);
    [CompilerGeneratedAttribute]
public int get_IdentitySeed();
    [CompilerGeneratedAttribute]
public void set_IdentitySeed(int value);
}
[AttributeUsageAttribute("132")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.ReferencesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; public set; }
    public ReferencesAttribute(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
[AttributeUsageAttribute("128")]
public class Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private SpecialDbTypes <DatabaseType>k__BackingField;
    public SpecialDbTypes DatabaseType { get; private set; }
    public SpecialDbTypeAttribute(SpecialDbTypes databaseType);
    [CompilerGeneratedAttribute]
public SpecialDbTypes get_DatabaseType();
    [CompilerGeneratedAttribute]
private void set_DatabaseType(SpecialDbTypes value);
}
public enum Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypes : Enum {
    public int value__;
    public static SpecialDbTypes NTEXT;
    public static SpecialDbTypes NCHAR;
    public static SpecialDbTypes NVARCHARMAX;
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.ColumnDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DbType> <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSpecialDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private SpecialDbTypes <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Seeding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIndexed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryKeyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryKeyColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private ModificationType <ModificationType>k__BackingField;
    public string Name { get; public set; }
    public Nullable`1<DbType> Type { get; public set; }
    public Type PropertyType { get; public set; }
    public bool HasSpecialDbType { get; public set; }
    public SpecialDbTypes DbType { get; public set; }
    public int Seeding { get; public set; }
    public int Size { get; public set; }
    public int Precision { get; public set; }
    public string CustomType { get; public set; }
    public object DefaultValue { get; public set; }
    public string ConstraintName { get; public set; }
    public bool IsForeignKey { get; public set; }
    public bool IsIdentity { get; public set; }
    public bool IsIndexed { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public string PrimaryKeyName { get; public set; }
    public string PrimaryKeyColumns { get; public set; }
    public bool IsNullable { get; public set; }
    public bool IsUnique { get; public set; }
    public string TableName { get; public set; }
    public ModificationType ModificationType { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DbType> get_Type();
    [CompilerGeneratedAttribute]
public virtual void set_Type(Nullable`1<DbType> value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public bool get_HasSpecialDbType();
    [CompilerGeneratedAttribute]
public void set_HasSpecialDbType(bool value);
    [CompilerGeneratedAttribute]
public SpecialDbTypes get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(SpecialDbTypes value);
    [CompilerGeneratedAttribute]
public virtual int get_Seeding();
    [CompilerGeneratedAttribute]
public virtual void set_Seeding(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Size();
    [CompilerGeneratedAttribute]
public virtual void set_Size(int value);
    [CompilerGeneratedAttribute]
public virtual int get_Precision();
    [CompilerGeneratedAttribute]
public virtual void set_Precision(int value);
    [CompilerGeneratedAttribute]
public virtual string get_CustomType();
    [CompilerGeneratedAttribute]
public virtual void set_CustomType(string value);
    [CompilerGeneratedAttribute]
public virtual object get_DefaultValue();
    [CompilerGeneratedAttribute]
public virtual void set_DefaultValue(object value);
    [CompilerGeneratedAttribute]
public virtual string get_ConstraintName();
    [CompilerGeneratedAttribute]
public virtual void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsForeignKey();
    [CompilerGeneratedAttribute]
public virtual void set_IsForeignKey(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public virtual void set_IsIdentity(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsIndexed();
    [CompilerGeneratedAttribute]
public virtual void set_IsIndexed(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
public virtual void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryKeyName();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKeyName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryKeyColumns();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKeyColumns(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsUnique();
    [CompilerGeneratedAttribute]
public virtual void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual ModificationType get_ModificationType();
    [CompilerGeneratedAttribute]
public virtual void set_ModificationType(ModificationType value);
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.ConstraintDefinition : object {
    private ConstraintType _constraintType;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    public ICollection`1<string> Columns;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKeyClustered>k__BackingField;
    public bool IsPrimaryKeyConstraint { get; }
    public bool IsUniqueConstraint { get; }
    public bool IsNonUniqueConstraint { get; }
    public string SchemaName { get; public set; }
    public string ConstraintName { get; public set; }
    public string TableName { get; public set; }
    public bool IsPrimaryKeyClustered { get; public set; }
    public ConstraintDefinition(ConstraintType type);
    public bool get_IsPrimaryKeyConstraint();
    public bool get_IsUniqueConstraint();
    public bool get_IsNonUniqueConstraint();
    [CompilerGeneratedAttribute]
public string get_SchemaName();
    [CompilerGeneratedAttribute]
public void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public void set_ConstraintName(string value);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKeyClustered();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryKeyClustered(bool value);
}
public enum Umbraco.Core.Persistence.DatabaseModelDefinitions.ConstraintType : Enum {
    public int value__;
    public static ConstraintType PrimaryKey;
    public static ConstraintType Unique;
    public static ConstraintType NonUnique;
}
internal class Umbraco.Core.Persistence.DatabaseModelDefinitions.DbIndexDefinition : object {
    [CompilerGeneratedAttribute]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsUnique>k__BackingField;
    public string IndexName { get; }
    public string TableName { get; }
    public string ColumnName { get; }
    public bool IsUnique { get; }
    public DbIndexDefinition(Tuple`4<string, string, string, bool> data);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public bool get_IsUnique();
}
internal static class Umbraco.Core.Persistence.DatabaseModelDefinitions.DefinitionFactory : object {
    public static TableDefinition GetTableDefinition(Type modelType, ISqlSyntaxProvider sqlSyntax);
    public static ColumnDefinition GetColumnDefinition(Type modelType, PropertyInfo propertyInfo, string columnName, string tableName, ISqlSyntaxProvider sqlSyntax);
    public static ForeignKeyDefinition GetForeignKeyDefinition(Type modelType, PropertyInfo propertyInfo, ForeignKeyAttribute attribute, string columnName, string tableName);
    public static IndexDefinition GetIndexDefinition(Type modelType, PropertyInfo propertyInfo, IndexAttribute attribute, string columnName, string tableName);
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.DeletionDataDefinition : List`1<KeyValuePair`2<string, object>> {
}
public enum Umbraco.Core.Persistence.DatabaseModelDefinitions.Direction : Enum {
    public int value__;
    public static Direction Ascending;
    public static Direction Descending;
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.ForeignKeyDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForeignTableSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryTable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryTableSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <OnDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private Rule <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <ForeignColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <PrimaryColumns>k__BackingField;
    public string Name { get; public set; }
    public string ForeignTable { get; public set; }
    public string ForeignTableSchema { get; public set; }
    public string PrimaryTable { get; public set; }
    public string PrimaryTableSchema { get; public set; }
    public Rule OnDelete { get; public set; }
    public Rule OnUpdate { get; public set; }
    public ICollection`1<string> ForeignColumns { get; public set; }
    public ICollection`1<string> PrimaryColumns { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ForeignTable();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignTable(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ForeignTableSchema();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignTableSchema(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryTable();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryTable(string value);
    [CompilerGeneratedAttribute]
public virtual string get_PrimaryTableSchema();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryTableSchema(string value);
    [CompilerGeneratedAttribute]
public virtual Rule get_OnDelete();
    [CompilerGeneratedAttribute]
public virtual void set_OnDelete(Rule value);
    [CompilerGeneratedAttribute]
public virtual Rule get_OnUpdate();
    [CompilerGeneratedAttribute]
public virtual void set_OnUpdate(Rule value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<string> get_ForeignColumns();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignColumns(ICollection`1<string> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<string> get_PrimaryColumns();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryColumns(ICollection`1<string> value);
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.IndexColumnDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Direction <Direction>k__BackingField;
    public string Name { get; public set; }
    public Direction Direction { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Direction get_Direction();
    [CompilerGeneratedAttribute]
public virtual void set_Direction(Direction value);
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.IndexDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IndexColumnDefinition> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IndexColumnDefinition> <IncludeColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexTypes <IndexType>k__BackingField;
    public string Name { get; public set; }
    public string SchemaName { get; public set; }
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    public ICollection`1<IndexColumnDefinition> Columns { get; public set; }
    public ICollection`1<IndexColumnDefinition> IncludeColumns { get; public set; }
    public IndexTypes IndexType { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_TableName();
    [CompilerGeneratedAttribute]
public virtual void set_TableName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ColumnName();
    [CompilerGeneratedAttribute]
public virtual void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IndexColumnDefinition> get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(ICollection`1<IndexColumnDefinition> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IndexColumnDefinition> get_IncludeColumns();
    [CompilerGeneratedAttribute]
public virtual void set_IncludeColumns(ICollection`1<IndexColumnDefinition> value);
    [CompilerGeneratedAttribute]
public IndexTypes get_IndexType();
    [CompilerGeneratedAttribute]
public void set_IndexType(IndexTypes value);
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.InsertionDataDefinition : List`1<KeyValuePair`2<string, object>> {
}
public enum Umbraco.Core.Persistence.DatabaseModelDefinitions.ModificationType : Enum {
    public int value__;
    public static ModificationType Create;
    public static ModificationType Alter;
    public static ModificationType Drop;
    public static ModificationType Rename;
    public static ModificationType Insert;
    public static ModificationType Update;
    public static ModificationType Delete;
}
public enum Umbraco.Core.Persistence.DatabaseModelDefinitions.SystemMethods : Enum {
    public int value__;
    public static SystemMethods NewGuid;
    public static SystemMethods CurrentDateTime;
}
public class Umbraco.Core.Persistence.DatabaseModelDefinitions.TableDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ColumnDefinition> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<ForeignKeyDefinition> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IndexDefinition> <Indexes>k__BackingField;
    public string Name { get; public set; }
    public string SchemaName { get; public set; }
    public ICollection`1<ColumnDefinition> Columns { get; public set; }
    public ICollection`1<ForeignKeyDefinition> ForeignKeys { get; public set; }
    public ICollection`1<IndexDefinition> Indexes { get; public set; }
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SchemaName();
    [CompilerGeneratedAttribute]
public virtual void set_SchemaName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<ColumnDefinition> get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(ICollection`1<ColumnDefinition> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<ForeignKeyDefinition> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignKeys(ICollection`1<ForeignKeyDefinition> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IndexDefinition> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual void set_Indexes(ICollection`1<IndexDefinition> value);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.DbCommandExtensions : object {
    [ExtensionAttribute]
public static IDbCommand UnwrapUmbraco(IDbCommand command);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.DbConnectionExtensions : object {
    public static string DetectProviderNameFromConnectionString(string connectionString);
    public static bool IsConnectionAvailable(string connectionString, string providerName);
    [ExtensionAttribute]
public static bool IsAvailable(IDbConnection connection);
    [ExtensionAttribute]
internal static IDbConnection UnwrapUmbraco(IDbConnection connection);
    [ExtensionAttribute]
public static string GetConnStringExSecurityInfo(IDbConnection connection);
}
[TableNameAttribute("umbracoAccess")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.AccessDto : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LoginNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NoAccessNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AccessRuleDto> <Rules>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public Guid Id { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[IndexAttribute("2")]
public int NodeId { get; public set; }
    [ColumnAttribute("loginNodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int LoginNodeId { get; public set; }
    [ColumnAttribute("noAccessNodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int NoAccessNodeId { get; public set; }
    [ColumnAttribute("createDate")]
[ConstraintAttribute]
public DateTime CreateDate { get; public set; }
    [ColumnAttribute("updateDate")]
[ConstraintAttribute]
public DateTime UpdateDate { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public List`1<AccessRuleDto> Rules { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public int get_LoginNodeId();
    [CompilerGeneratedAttribute]
public void set_LoginNodeId(int value);
    [CompilerGeneratedAttribute]
public int get_NoAccessNodeId();
    [CompilerGeneratedAttribute]
public void set_NoAccessNodeId(int value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdateDate();
    [CompilerGeneratedAttribute]
public void set_UpdateDate(DateTime value);
    [CompilerGeneratedAttribute]
public List`1<AccessRuleDto> get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(List`1<AccessRuleDto> value);
}
[TableNameAttribute("umbracoAccessRule")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.AccessRuleDto : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <AccessId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuleType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdateDate>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public Guid Id { get; public set; }
    [ColumnAttribute("accessId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.AccessDto")]
public Guid AccessId { get; public set; }
    [ColumnAttribute("ruleValue")]
[IndexAttribute("2")]
public string RuleValue { get; public set; }
    [ColumnAttribute("ruleType")]
public string RuleType { get; public set; }
    [ColumnAttribute("createDate")]
[ConstraintAttribute]
public DateTime CreateDate { get; public set; }
    [ColumnAttribute("updateDate")]
[ConstraintAttribute]
public DateTime UpdateDate { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_AccessId();
    [CompilerGeneratedAttribute]
public void set_AccessId(Guid value);
    [CompilerGeneratedAttribute]
public string get_RuleValue();
    [CompilerGeneratedAttribute]
public void set_RuleValue(string value);
    [CompilerGeneratedAttribute]
public string get_RuleType();
    [CompilerGeneratedAttribute]
public void set_RuleType(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdateDate();
    [CompilerGeneratedAttribute]
public void set_UpdateDate(DateTime value);
}
[TableNameAttribute("umbracoAudit")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.AuditEntryDto : object {
    public static int IpLength;
    public static int EventTypeLength;
    public static int DetailsLength;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PerformingUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PerformingDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PerformingIp>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EventDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AffectedUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AffectedDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventDetails>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("performingUserId")]
public int PerformingUserId { get; public set; }
    [ColumnAttribute("performingDetails")]
[NullSettingAttribute]
[LengthAttribute("1024")]
public string PerformingDetails { get; public set; }
    [ColumnAttribute("performingIp")]
[NullSettingAttribute]
[LengthAttribute("64")]
public string PerformingIp { get; public set; }
    [ColumnAttribute("eventDateUtc")]
[ConstraintAttribute]
public DateTime EventDateUtc { get; public set; }
    [ColumnAttribute("affectedUserId")]
public int AffectedUserId { get; public set; }
    [ColumnAttribute("affectedDetails")]
[NullSettingAttribute]
[LengthAttribute("1024")]
public string AffectedDetails { get; public set; }
    [ColumnAttribute("eventType")]
[LengthAttribute("256")]
public string EventType { get; public set; }
    [ColumnAttribute("eventDetails")]
[NullSettingAttribute]
[LengthAttribute("1024")]
public string EventDetails { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_PerformingUserId();
    [CompilerGeneratedAttribute]
public void set_PerformingUserId(int value);
    [CompilerGeneratedAttribute]
public string get_PerformingDetails();
    [CompilerGeneratedAttribute]
public void set_PerformingDetails(string value);
    [CompilerGeneratedAttribute]
public string get_PerformingIp();
    [CompilerGeneratedAttribute]
public void set_PerformingIp(string value);
    [CompilerGeneratedAttribute]
public DateTime get_EventDateUtc();
    [CompilerGeneratedAttribute]
public void set_EventDateUtc(DateTime value);
    [CompilerGeneratedAttribute]
public int get_AffectedUserId();
    [CompilerGeneratedAttribute]
public void set_AffectedUserId(int value);
    [CompilerGeneratedAttribute]
public string get_AffectedDetails();
    [CompilerGeneratedAttribute]
public void set_AffectedDetails(string value);
    [CompilerGeneratedAttribute]
public string get_EventType();
    [CompilerGeneratedAttribute]
public void set_EventType(string value);
    [CompilerGeneratedAttribute]
public string get_EventDetails();
    [CompilerGeneratedAttribute]
public void set_EventDetails(string value);
}
internal class Umbraco.Core.Persistence.Dtos.AxisDefintionDto : object {
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [ColumnAttribute("nodeId")]
public int NodeId { get; public set; }
    [ColumnAttribute("alias")]
public string Alias { get; public set; }
    [ColumnAttribute("ParentID")]
public int ParentId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(int value);
}
[TableNameAttribute("umbracoCacheInstruction")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.CacheInstructionDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UtcStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Instructions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InstructionCount>k__BackingField;
    [ColumnAttribute("id")]
[NullSettingAttribute]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("utcStamp")]
[NullSettingAttribute]
public DateTime UtcStamp { get; public set; }
    [ColumnAttribute("jsonInstruction")]
[SpecialDbTypeAttribute("0")]
[NullSettingAttribute]
public string Instructions { get; public set; }
    [ColumnAttribute("originated")]
[NullSettingAttribute]
[LengthAttribute("500")]
public string OriginIdentity { get; public set; }
    [ColumnAttribute("instructionCount")]
[NullSettingAttribute]
[ConstraintAttribute]
public int InstructionCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public DateTime get_UtcStamp();
    [CompilerGeneratedAttribute]
public void set_UtcStamp(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Instructions();
    [CompilerGeneratedAttribute]
public void set_Instructions(string value);
    [CompilerGeneratedAttribute]
public string get_OriginIdentity();
    [CompilerGeneratedAttribute]
public void set_OriginIdentity(string value);
    [CompilerGeneratedAttribute]
public int get_InstructionCount();
    [CompilerGeneratedAttribute]
public void set_InstructionCount(int value);
}
internal class Umbraco.Core.Persistence.Dtos.ColumnInSchemaDto : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OrdinalPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataType>k__BackingField;
    [ColumnAttribute("TABLE_NAME")]
public string TableName { get; public set; }
    [ColumnAttribute("COLUMN_NAME")]
public string ColumnName { get; public set; }
    [ColumnAttribute("ORDINAL_POSITION")]
public int OrdinalPosition { get; public set; }
    [ColumnAttribute("COLUMN_DEFAULT")]
public string ColumnDefault { get; public set; }
    [ColumnAttribute("IS_NULLABLE")]
public string IsNullable { get; public set; }
    [ColumnAttribute("DATA_TYPE")]
public string DataType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public int get_OrdinalPosition();
    [CompilerGeneratedAttribute]
public void set_OrdinalPosition(int value);
    [CompilerGeneratedAttribute]
public string get_ColumnDefault();
    [CompilerGeneratedAttribute]
public void set_ColumnDefault(string value);
    [CompilerGeneratedAttribute]
public string get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(string value);
    [CompilerGeneratedAttribute]
public string get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(string value);
}
[TableNameAttribute("umbracoConsent")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
public class Umbraco.Core.Persistence.Dtos.ConsentDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("current")]
public bool Current { get; public set; }
    [ColumnAttribute("source")]
[LengthAttribute("512")]
public string Source { get; public set; }
    [ColumnAttribute("context")]
[LengthAttribute("128")]
public string Context { get; public set; }
    [ColumnAttribute("action")]
[LengthAttribute("512")]
public string Action { get; public set; }
    [ColumnAttribute("createDate")]
[ConstraintAttribute]
public DateTime CreateDate { get; public set; }
    [ColumnAttribute("state")]
public int State { get; public set; }
    [ColumnAttribute("comment")]
[NullSettingAttribute]
public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public bool get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(bool value);
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public string get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public int get_State();
    [CompilerGeneratedAttribute]
public void set_State(int value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
internal class Umbraco.Core.Persistence.Dtos.ConstraintPerColumnDto : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [ColumnAttribute("TABLE_NAME")]
public string TableName { get; public set; }
    [ColumnAttribute("COLUMN_NAME")]
public string ColumnName { get; public set; }
    [ColumnAttribute("CONSTRAINT_NAME")]
public string ConstraintName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public void set_ConstraintName(string value);
}
internal class Umbraco.Core.Persistence.Dtos.ConstraintPerTableDto : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConstraintName>k__BackingField;
    [ColumnAttribute("TABLE_NAME")]
public string TableName { get; public set; }
    [ColumnAttribute("CONSTRAINT_NAME")]
public string ConstraintName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ConstraintName();
    [CompilerGeneratedAttribute]
public void set_ConstraintName(string value);
}
[TableNameAttribute("umbracoContent")]
[PrimaryKeyAttribute("nodeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDto <NodeDto>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentVersionDto <ContentVersionDto>k__BackingField;
    [ColumnAttribute("nodeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("contentTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
public int ContentTypeId { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public NodeDto NodeDto { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentVersionDto ContentVersionDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public int get_ContentTypeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeId(int value);
    [CompilerGeneratedAttribute]
public NodeDto get_NodeDto();
    [CompilerGeneratedAttribute]
public void set_NodeDto(NodeDto value);
    [CompilerGeneratedAttribute]
public ContentVersionDto get_ContentVersionDto();
    [CompilerGeneratedAttribute]
public void set_ContentVersionDto(ContentVersionDto value);
}
[TableNameAttribute("cmsContentNu")]
[PrimaryKeyAttribute("nodeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentNuDto : object {
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Rv>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <RawData>k__BackingField;
    [ColumnAttribute("nodeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("published")]
public bool Published { get; public set; }
    [ColumnAttribute("data")]
[SpecialDbTypeAttribute("0")]
[NullSettingAttribute]
public string Data { get; public set; }
    [ColumnAttribute("rv")]
public long Rv { get; public set; }
    [ColumnAttribute("dataRaw")]
[NullSettingAttribute]
public Byte[] RawData { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public bool get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(bool value);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(string value);
    [CompilerGeneratedAttribute]
public long get_Rv();
    [CompilerGeneratedAttribute]
public void set_Rv(long value);
    [CompilerGeneratedAttribute]
public Byte[] get_RawData();
    [CompilerGeneratedAttribute]
public void set_RawData(Byte[] value);
}
[TableNameAttribute("umbracoContentSchedule")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentScheduleDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public Guid Id { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("languageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
[NullSettingAttribute]
public Nullable`1<int> LanguageId { get; public set; }
    [ColumnAttribute("date")]
public DateTime Date { get; public set; }
    [ColumnAttribute("action")]
public string Action { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LanguageId();
    [CompilerGeneratedAttribute]
public void set_LanguageId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
}
[TableNameAttribute("cmsContentType2ContentType")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentType2ContentTypeDto : object {
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildId>k__BackingField;
    [ColumnAttribute("parentContentTypeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int ParentId { get; public set; }
    [ColumnAttribute("childContentTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int ChildId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(int value);
    [CompilerGeneratedAttribute]
public int get_ChildId();
    [CompilerGeneratedAttribute]
public void set_ChildId(int value);
}
[TableNameAttribute("cmsContentTypeAllowedContentType")]
[PrimaryKeyAttribute("Id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentTypeAllowedContentTypeDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AllowedId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentTypeDto <ContentTypeDto>k__BackingField;
    [ColumnAttribute("Id")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("AllowedId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
public int AllowedId { get; public set; }
    [ColumnAttribute("SortOrder")]
[ConstraintAttribute]
public int SortOrder { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentTypeDto ContentTypeDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_AllowedId();
    [CompilerGeneratedAttribute]
public void set_AllowedId(int value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public ContentTypeDto get_ContentTypeDto();
    [CompilerGeneratedAttribute]
public void set_ContentTypeDto(ContentTypeDto value);
}
[TableNameAttribute("cmsContentType")]
[PrimaryKeyAttribute("pk")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentTypeDto : object {
    public static string TableName;
    private string _alias;
    [CompilerGeneratedAttribute]
private int <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Thumbnail>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsContainer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsElement>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowAtRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDto <NodeDto>k__BackingField;
    [ColumnAttribute("pk")]
[PrimaryKeyColumnAttribute]
public int PrimaryKey { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[IndexAttribute("2")]
public int NodeId { get; public set; }
    [ColumnAttribute("alias")]
[NullSettingAttribute]
public string Alias { get; public set; }
    [ColumnAttribute("icon")]
[IndexAttribute("1")]
[NullSettingAttribute]
public string Icon { get; public set; }
    [ColumnAttribute("thumbnail")]
[ConstraintAttribute]
public string Thumbnail { get; public set; }
    [ColumnAttribute("description")]
[NullSettingAttribute]
[LengthAttribute("1500")]
public string Description { get; public set; }
    [ColumnAttribute("isContainer")]
[ConstraintAttribute]
public bool IsContainer { get; public set; }
    [ColumnAttribute("isElement")]
[ConstraintAttribute]
public bool IsElement { get; public set; }
    [ColumnAttribute("allowAtRoot")]
[ConstraintAttribute]
public bool AllowAtRoot { get; public set; }
    [ColumnAttribute("variations")]
[ConstraintAttribute]
public byte Variations { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public NodeDto NodeDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    public string get_Alias();
    public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Thumbnail();
    [CompilerGeneratedAttribute]
public void set_Thumbnail(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsContainer();
    [CompilerGeneratedAttribute]
public void set_IsContainer(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsElement();
    [CompilerGeneratedAttribute]
public void set_IsElement(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAtRoot();
    [CompilerGeneratedAttribute]
public void set_AllowAtRoot(bool value);
    [CompilerGeneratedAttribute]
public byte get_Variations();
    [CompilerGeneratedAttribute]
public void set_Variations(byte value);
    [CompilerGeneratedAttribute]
public NodeDto get_NodeDto();
    [CompilerGeneratedAttribute]
public void set_NodeDto(NodeDto value);
}
[TableNameAttribute("cmsDocumentType")]
[PrimaryKeyAttribute("contentTypeNodeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentTypeTemplateDto : object {
    [CompilerGeneratedAttribute]
private int <ContentTypeNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TemplateNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentTypeDto <ContentTypeDto>k__BackingField;
    [ColumnAttribute("contentTypeNodeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int ContentTypeNodeId { get; public set; }
    [ColumnAttribute("templateNodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.TemplateDto")]
public int TemplateNodeId { get; public set; }
    [ColumnAttribute("IsDefault")]
[ConstraintAttribute]
public bool IsDefault { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentTypeDto ContentTypeDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ContentTypeNodeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeNodeId(int value);
    [CompilerGeneratedAttribute]
public int get_TemplateNodeId();
    [CompilerGeneratedAttribute]
public void set_TemplateNodeId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public ContentTypeDto get_ContentTypeDto();
    [CompilerGeneratedAttribute]
public void set_ContentTypeDto(ContentTypeDto value);
}
[TableNameAttribute("umbracoContentVersionCleanupPolicy")]
[PrimaryKeyAttribute("contentTypeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentVersionCleanupPolicyDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <ContentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeepAllVersionsNewerThanDays>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeepLatestVersionPerDayForDays>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventCleanup>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Updated>k__BackingField;
    [ColumnAttribute("contentTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
public int ContentTypeId { get; public set; }
    [ColumnAttribute("keepAllVersionsNewerThanDays")]
[NullSettingAttribute]
public Nullable`1<int> KeepAllVersionsNewerThanDays { get; public set; }
    [ColumnAttribute("keepLatestVersionPerDayForDays")]
[NullSettingAttribute]
public Nullable`1<int> KeepLatestVersionPerDayForDays { get; public set; }
    [ColumnAttribute("preventCleanup")]
public bool PreventCleanup { get; public set; }
    [ColumnAttribute("updated")]
public DateTime Updated { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ContentTypeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeepAllVersionsNewerThanDays();
    [CompilerGeneratedAttribute]
public void set_KeepAllVersionsNewerThanDays(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeepLatestVersionPerDayForDays();
    [CompilerGeneratedAttribute]
public void set_KeepLatestVersionPerDayForDays(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_PreventCleanup();
    [CompilerGeneratedAttribute]
public void set_PreventCleanup(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(DateTime value);
}
[TableNameAttribute("umbracoContentVersionCultureVariation")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentVersionCultureVariationDto : object {
    public static string TableName;
    private Nullable`1<int> _updateUserId;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdateDate>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("versionId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentVersionDto")]
[IndexAttribute("2")]
public int VersionId { get; public set; }
    [ColumnAttribute("languageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
[IndexAttribute("1")]
public int LanguageId { get; public set; }
    [IgnoreAttribute]
public string Culture { get; public set; }
    [ColumnAttribute("name")]
public string Name { get; public set; }
    [ColumnAttribute("date")]
public DateTime UpdateDate { get; public set; }
    [ColumnAttribute("availableUserId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
[NullSettingAttribute]
public Nullable`1<int> UpdateUserId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_VersionId();
    [CompilerGeneratedAttribute]
public void set_VersionId(int value);
    [CompilerGeneratedAttribute]
public int get_LanguageId();
    [CompilerGeneratedAttribute]
public void set_LanguageId(int value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdateDate();
    [CompilerGeneratedAttribute]
public void set_UpdateDate(DateTime value);
    public Nullable`1<int> get_UpdateUserId();
    public void set_UpdateUserId(Nullable`1<int> value);
}
[TableNameAttribute("umbracoContentVersion")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ContentVersionDto : object {
    public static string TableName;
    private Nullable`1<int> _userId;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <VersionDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentDto <ContentDto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreventCleanup>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentDto")]
[IndexAttribute("1")]
public int NodeId { get; public set; }
    [ColumnAttribute("versionDate")]
[ConstraintAttribute]
public DateTime VersionDate { get; public set; }
    [ColumnAttribute("userId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
[NullSettingAttribute]
public Nullable`1<int> UserId { get; public set; }
    [ColumnAttribute("current")]
[IndexAttribute("1")]
public bool Current { get; public set; }
    [ColumnAttribute("text")]
[NullSettingAttribute]
public string Text { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentDto ContentDto { get; public set; }
    [ColumnAttribute("preventCleanup")]
[ConstraintAttribute]
public bool PreventCleanup { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public DateTime get_VersionDate();
    [CompilerGeneratedAttribute]
public void set_VersionDate(DateTime value);
    public Nullable`1<int> get_UserId();
    public void set_UserId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_Current();
    [CompilerGeneratedAttribute]
public void set_Current(bool value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public ContentDto get_ContentDto();
    [CompilerGeneratedAttribute]
public void set_ContentDto(ContentDto value);
    [CompilerGeneratedAttribute]
public bool get_PreventCleanup();
    [CompilerGeneratedAttribute]
public void set_PreventCleanup(bool value);
}
[TableNameAttribute("umbracoDataType")]
[PrimaryKeyAttribute("nodeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.DataTypeDto : object {
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditorAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDto <NodeDto>k__BackingField;
    [ColumnAttribute("nodeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("propertyEditorAlias")]
public string EditorAlias { get; public set; }
    [ColumnAttribute("dbType")]
[LengthAttribute("50")]
public string DbType { get; public set; }
    [ColumnAttribute("config")]
[SpecialDbTypeAttribute("0")]
[NullSettingAttribute]
public string Configuration { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public NodeDto NodeDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_EditorAlias();
    [CompilerGeneratedAttribute]
public void set_EditorAlias(string value);
    [CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public NodeDto get_NodeDto();
    [CompilerGeneratedAttribute]
public void set_NodeDto(NodeDto value);
}
internal class Umbraco.Core.Persistence.Dtos.DefaultConstraintPerColumnDto : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Definition>k__BackingField;
    [ColumnAttribute("TABLE_NAME")]
public string TableName { get; public set; }
    [ColumnAttribute("COLUMN_NAME")]
public string ColumnName { get; public set; }
    [ColumnAttribute("NAME")]
public string Name { get; public set; }
    [ColumnAttribute("DEFINITION")]
public string Definition { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Definition();
    [CompilerGeneratedAttribute]
public void set_Definition(string value);
}
internal class Umbraco.Core.Persistence.Dtos.DefinedIndexDto : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IndexName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Unique>k__BackingField;
    [ColumnAttribute("TABLE_NAME")]
public string TableName { get; public set; }
    [ColumnAttribute("INDEX_NAME")]
public string IndexName { get; public set; }
    [ColumnAttribute("COLUMN_NAME")]
public string ColumnName { get; public set; }
    [ColumnAttribute("UNIQUE")]
public short Unique { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_IndexName();
    [CompilerGeneratedAttribute]
public void set_IndexName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public short get_Unique();
    [CompilerGeneratedAttribute]
public void set_Unique(short value);
}
[TableNameAttribute("cmsDictionary")]
[PrimaryKeyAttribute("pk")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.DictionaryDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LanguageTextDto> <LanguageTextDtos>k__BackingField;
    [ColumnAttribute("pk")]
[PrimaryKeyColumnAttribute]
public int PrimaryKey { get; public set; }
    [ColumnAttribute("id")]
[IndexAttribute("2")]
public Guid UniqueId { get; public set; }
    [ColumnAttribute("parent")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.DictionaryDto")]
[IndexAttribute("1")]
public Nullable`1<Guid> Parent { get; public set; }
    [ColumnAttribute("key")]
[LengthAttribute("450")]
[IndexAttribute("1")]
public string Key { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public List`1<LanguageTextDto> LanguageTextDtos { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public List`1<LanguageTextDto> get_LanguageTextDtos();
    [CompilerGeneratedAttribute]
public void set_LanguageTextDtos(List`1<LanguageTextDto> value);
}
[TableNameAttribute("umbracoDocumentCultureVariation")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.DocumentCultureVariationDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Edited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Available>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[IndexAttribute("2")]
public int NodeId { get; public set; }
    [ColumnAttribute("languageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
[IndexAttribute("1")]
public int LanguageId { get; public set; }
    [IgnoreAttribute]
public string Culture { get; public set; }
    [ColumnAttribute("edited")]
public bool Edited { get; public set; }
    [ColumnAttribute("available")]
public bool Available { get; public set; }
    [ColumnAttribute("published")]
public bool Published { get; public set; }
    [ColumnAttribute("name")]
[NullSettingAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public int get_LanguageId();
    [CompilerGeneratedAttribute]
public void set_LanguageId(int value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public bool get_Edited();
    [CompilerGeneratedAttribute]
public void set_Edited(bool value);
    [CompilerGeneratedAttribute]
public bool get_Available();
    [CompilerGeneratedAttribute]
public void set_Available(bool value);
    [CompilerGeneratedAttribute]
public bool get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[TableNameAttribute("umbracoDocument")]
[PrimaryKeyAttribute("nodeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.DocumentDto : object {
    private static string TableName;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Edited>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentDto <ContentDto>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentVersionDto <DocumentVersionDto>k__BackingField;
    [CompilerGeneratedAttribute]
private DocumentVersionDto <PublishedVersionDto>k__BackingField;
    [ColumnAttribute("nodeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("published")]
[IndexAttribute("1")]
public bool Published { get; public set; }
    [ColumnAttribute("edited")]
public bool Edited { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentDto ContentDto { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public DocumentVersionDto DocumentVersionDto { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public DocumentVersionDto PublishedVersionDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public bool get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(bool value);
    [CompilerGeneratedAttribute]
public bool get_Edited();
    [CompilerGeneratedAttribute]
public void set_Edited(bool value);
    [CompilerGeneratedAttribute]
public ContentDto get_ContentDto();
    [CompilerGeneratedAttribute]
public void set_ContentDto(ContentDto value);
    [CompilerGeneratedAttribute]
public DocumentVersionDto get_DocumentVersionDto();
    [CompilerGeneratedAttribute]
public void set_DocumentVersionDto(DocumentVersionDto value);
    [CompilerGeneratedAttribute]
public DocumentVersionDto get_PublishedVersionDto();
    [CompilerGeneratedAttribute]
public void set_PublishedVersionDto(DocumentVersionDto value);
}
[TableNameAttribute("umbracoDocument")]
[PrimaryKeyAttribute("versionId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.DocumentPublishedReadOnlyDto : object {
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <VersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Newest>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <VersionDate>k__BackingField;
    [ColumnAttribute("nodeId")]
public int NodeId { get; public set; }
    [ColumnAttribute("published")]
public bool Published { get; public set; }
    [ColumnAttribute("versionId")]
public Guid VersionId { get; public set; }
    [ColumnAttribute("newest")]
public bool Newest { get; public set; }
    [ColumnAttribute("updateDate")]
public DateTime VersionDate { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public bool get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(bool value);
    [CompilerGeneratedAttribute]
public Guid get_VersionId();
    [CompilerGeneratedAttribute]
public void set_VersionId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_Newest();
    [CompilerGeneratedAttribute]
public void set_Newest(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_VersionDate();
    [CompilerGeneratedAttribute]
public void set_VersionDate(DateTime value);
}
[TableNameAttribute("umbracoDocumentVersion")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.DocumentVersionDto : object {
    private static string TableName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TemplateId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Published>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentVersionDto <ContentVersionDto>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentVersionDto")]
public int Id { get; public set; }
    [ColumnAttribute("templateId")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.TemplateDto")]
public Nullable`1<int> TemplateId { get; public set; }
    [ColumnAttribute("published")]
public bool Published { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentVersionDto ContentVersionDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TemplateId();
    [CompilerGeneratedAttribute]
public void set_TemplateId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(bool value);
    [CompilerGeneratedAttribute]
public ContentVersionDto get_ContentVersionDto();
    [CompilerGeneratedAttribute]
public void set_ContentVersionDto(ContentVersionDto value);
}
[TableNameAttribute("umbracoDomain")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.DomainDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DefaultLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RootStructureId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DomainName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsoCode>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("domainDefaultLanguage")]
[NullSettingAttribute]
public Nullable`1<int> DefaultLanguage { get; public set; }
    [ColumnAttribute("domainRootStructureID")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public Nullable`1<int> RootStructureId { get; public set; }
    [ColumnAttribute("domainName")]
public string DomainName { get; public set; }
    [ResultColumnAttribute("languageISOCode")]
public string IsoCode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DefaultLanguage();
    [CompilerGeneratedAttribute]
public void set_DefaultLanguage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RootStructureId();
    [CompilerGeneratedAttribute]
public void set_RootStructureId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_DomainName();
    [CompilerGeneratedAttribute]
public void set_DomainName(string value);
    [CompilerGeneratedAttribute]
public string get_IsoCode();
    [CompilerGeneratedAttribute]
public void set_IsoCode(string value);
}
[TableNameAttribute("umbracoExternalLogin")]
[ExplicitColumnsAttribute]
[PrimaryKeyAttribute("Id")]
internal class Umbraco.Core.Persistence.Dtos.ExternalLoginDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserData>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("userId")]
public int UserId { get; public set; }
    [ColumnAttribute("loginProvider")]
[LengthAttribute("4000")]
[NullSettingAttribute]
public string LoginProvider { get; public set; }
    [ColumnAttribute("providerKey")]
[LengthAttribute("4000")]
[NullSettingAttribute]
public string ProviderKey { get; public set; }
    [ColumnAttribute("createDate")]
[ConstraintAttribute]
public DateTime CreateDate { get; public set; }
    [ColumnAttribute("userData")]
[NullSettingAttribute]
[SpecialDbTypeAttribute("0")]
public string UserData { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(int value);
    [CompilerGeneratedAttribute]
public string get_LoginProvider();
    [CompilerGeneratedAttribute]
public void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderKey();
    [CompilerGeneratedAttribute]
public void set_ProviderKey(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_UserData();
    [CompilerGeneratedAttribute]
public void set_UserData(string value);
}
[TableNameAttribute("umbracoKeyValue")]
[PrimaryKeyAttribute("key")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.KeyValueDto : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Updated>k__BackingField;
    [ColumnAttribute("key")]
[LengthAttribute("256")]
[PrimaryKeyColumnAttribute]
public string Key { get; public set; }
    [ColumnAttribute("value")]
[NullSettingAttribute]
public string Value { get; public set; }
    [ColumnAttribute("updated")]
[ConstraintAttribute]
public DateTime Updated { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Updated();
    [CompilerGeneratedAttribute]
public void set_Updated(DateTime value);
}
[TableNameAttribute("umbracoLanguage")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.LanguageDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IsoCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CultureName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FallbackLanguageId>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public short Id { get; public set; }
    [ColumnAttribute("languageISOCode")]
[IndexAttribute("2")]
[NullSettingAttribute]
[LengthAttribute("14")]
public string IsoCode { get; public set; }
    [ColumnAttribute("languageCultureName")]
[NullSettingAttribute]
[LengthAttribute("100")]
public string CultureName { get; public set; }
    [ColumnAttribute("isDefaultVariantLang")]
[ConstraintAttribute]
public bool IsDefault { get; public set; }
    [ColumnAttribute("mandatory")]
[ConstraintAttribute]
public bool IsMandatory { get; public set; }
    [ColumnAttribute("fallbackLanguageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
[IndexAttribute("1")]
[NullSettingAttribute]
public Nullable`1<int> FallbackLanguageId { get; public set; }
    [CompilerGeneratedAttribute]
public short get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(short value);
    [CompilerGeneratedAttribute]
public string get_IsoCode();
    [CompilerGeneratedAttribute]
public void set_IsoCode(string value);
    [CompilerGeneratedAttribute]
public string get_CultureName();
    [CompilerGeneratedAttribute]
public void set_CultureName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMandatory();
    [CompilerGeneratedAttribute]
public void set_IsMandatory(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FallbackLanguageId();
    [CompilerGeneratedAttribute]
public void set_FallbackLanguageId(Nullable`1<int> value);
}
[TableNameAttribute("cmsLanguageText")]
[PrimaryKeyAttribute("pk")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.LanguageTextDto : object {
    [CompilerGeneratedAttribute]
private int <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [ColumnAttribute("pk")]
[PrimaryKeyColumnAttribute]
public int PrimaryKey { get; public set; }
    [ColumnAttribute("languageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
public int LanguageId { get; public set; }
    [ColumnAttribute("UniqueId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.DictionaryDto")]
public Guid UniqueId { get; public set; }
    [ColumnAttribute("value")]
[LengthAttribute("1000")]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(int value);
    [CompilerGeneratedAttribute]
public int get_LanguageId();
    [CompilerGeneratedAttribute]
public void set_LanguageId(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
[TableNameAttribute("umbracoLock")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.LockDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("value")]
[NullSettingAttribute]
public int Value { get; public set; }
    [ColumnAttribute("name")]
[NullSettingAttribute]
[LengthAttribute("64")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[TableNameAttribute("umbracoLog")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.LogDto : object {
    public static string TableName;
    private Nullable`1<int> _userId;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Datestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("userId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
[NullSettingAttribute]
public Nullable`1<int> UserId { get; public set; }
    [ColumnAttribute("NodeId")]
[IndexAttribute("1")]
public int NodeId { get; public set; }
    [ColumnAttribute("entityType")]
[LengthAttribute("50")]
[NullSettingAttribute]
public string EntityType { get; public set; }
    [ColumnAttribute("Datestamp")]
[ConstraintAttribute]
public DateTime Datestamp { get; public set; }
    [ColumnAttribute("logHeader")]
[LengthAttribute("50")]
public string Header { get; public set; }
    [ColumnAttribute("logComment")]
[NullSettingAttribute]
[LengthAttribute("4000")]
public string Comment { get; public set; }
    [ColumnAttribute("parameters")]
[NullSettingAttribute]
[LengthAttribute("500")]
public string Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    public Nullable`1<int> get_UserId();
    public void set_UserId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Datestamp();
    [CompilerGeneratedAttribute]
public void set_Datestamp(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Header();
    [CompilerGeneratedAttribute]
public void set_Header(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(string value);
}
[TableNameAttribute("cmsMacro")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.MacroDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseInEditor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RefreshRate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheByPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CachePersonalized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DontRender>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MacroSource>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MacroType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MacroPropertyDto> <MacroPropertyDtos>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("uniqueId")]
[IndexAttribute("2")]
public Guid UniqueId { get; public set; }
    [ColumnAttribute("macroUseInEditor")]
[ConstraintAttribute]
public bool UseInEditor { get; public set; }
    [ColumnAttribute("macroRefreshRate")]
[ConstraintAttribute]
public int RefreshRate { get; public set; }
    [ColumnAttribute("macroAlias")]
[IndexAttribute("2")]
public string Alias { get; public set; }
    [ColumnAttribute("macroName")]
[NullSettingAttribute]
public string Name { get; public set; }
    [ColumnAttribute("macroCacheByPage")]
[ConstraintAttribute]
public bool CacheByPage { get; public set; }
    [ColumnAttribute("macroCachePersonalized")]
[ConstraintAttribute]
public bool CachePersonalized { get; public set; }
    [ColumnAttribute("macroDontRender")]
[ConstraintAttribute]
public bool DontRender { get; public set; }
    [ColumnAttribute("macroSource")]
[NullSettingAttribute]
public string MacroSource { get; public set; }
    [ColumnAttribute("macroType")]
[NullSettingAttribute]
public int MacroType { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public List`1<MacroPropertyDto> MacroPropertyDtos { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_UseInEditor();
    [CompilerGeneratedAttribute]
public void set_UseInEditor(bool value);
    [CompilerGeneratedAttribute]
public int get_RefreshRate();
    [CompilerGeneratedAttribute]
public void set_RefreshRate(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_CacheByPage();
    [CompilerGeneratedAttribute]
public void set_CacheByPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_CachePersonalized();
    [CompilerGeneratedAttribute]
public void set_CachePersonalized(bool value);
    [CompilerGeneratedAttribute]
public bool get_DontRender();
    [CompilerGeneratedAttribute]
public void set_DontRender(bool value);
    [CompilerGeneratedAttribute]
public string get_MacroSource();
    [CompilerGeneratedAttribute]
public void set_MacroSource(string value);
    [CompilerGeneratedAttribute]
public int get_MacroType();
    [CompilerGeneratedAttribute]
public void set_MacroType(int value);
    [CompilerGeneratedAttribute]
public List`1<MacroPropertyDto> get_MacroPropertyDtos();
    [CompilerGeneratedAttribute]
public void set_MacroPropertyDtos(List`1<MacroPropertyDto> value);
}
[TableNameAttribute("cmsMacroProperty")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.MacroPropertyDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditorAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Macro>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("uniquePropertyId")]
[IndexAttribute("2")]
public Guid UniqueId { get; public set; }
    [ColumnAttribute("editorAlias")]
public string EditorAlias { get; public set; }
    [ColumnAttribute("macro")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.MacroDto")]
[IndexAttribute("2")]
public int Macro { get; public set; }
    [ColumnAttribute("macroPropertySortOrder")]
[ConstraintAttribute]
public byte SortOrder { get; public set; }
    [ColumnAttribute("macroPropertyAlias")]
[LengthAttribute("50")]
public string Alias { get; public set; }
    [ColumnAttribute("macroPropertyName")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public string get_EditorAlias();
    [CompilerGeneratedAttribute]
public void set_EditorAlias(string value);
    [CompilerGeneratedAttribute]
public int get_Macro();
    [CompilerGeneratedAttribute]
public void set_Macro(int value);
    [CompilerGeneratedAttribute]
public byte get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(byte value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
internal class Umbraco.Core.Persistence.Dtos.MediaDto : object {
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentDto <ContentDto>k__BackingField;
    [CompilerGeneratedAttribute]
private MediaVersionDto <MediaVersionDto>k__BackingField;
    public int NodeId { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentDto ContentDto { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public MediaVersionDto MediaVersionDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public ContentDto get_ContentDto();
    [CompilerGeneratedAttribute]
public void set_ContentDto(ContentDto value);
    [CompilerGeneratedAttribute]
public MediaVersionDto get_MediaVersionDto();
    [CompilerGeneratedAttribute]
public void set_MediaVersionDto(MediaVersionDto value);
}
[TableNameAttribute("umbracoMediaVersion")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.MediaVersionDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentVersionDto <ContentVersionDto>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentVersionDto")]
[IndexAttribute("2")]
public int Id { get; public set; }
    [ColumnAttribute("path")]
[NullSettingAttribute]
public string Path { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentVersionDto ContentVersionDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public ContentVersionDto get_ContentVersionDto();
    [CompilerGeneratedAttribute]
public void set_ContentVersionDto(ContentVersionDto value);
}
[TableNameAttribute("cmsMember2MemberGroup")]
[PrimaryKeyAttribute("Member")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.Member2MemberGroupDto : object {
    [CompilerGeneratedAttribute]
private int <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MemberGroup>k__BackingField;
    [ColumnAttribute("Member")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.MemberDto")]
public int Member { get; public set; }
    [ColumnAttribute("MemberGroup")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int MemberGroup { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(int value);
    [CompilerGeneratedAttribute]
public int get_MemberGroup();
    [CompilerGeneratedAttribute]
public void set_MemberGroup(int value);
}
[TableNameAttribute("cmsMember")]
[PrimaryKeyAttribute("nodeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.MemberDto : object {
    private static string TableName;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentDto <ContentDto>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentVersionDto <ContentVersionDto>k__BackingField;
    [ColumnAttribute("nodeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("Email")]
[LengthAttribute("1000")]
[ConstraintAttribute]
public string Email { get; public set; }
    [ColumnAttribute("LoginName")]
[LengthAttribute("1000")]
[ConstraintAttribute]
[IndexAttribute("1")]
public string LoginName { get; public set; }
    [ColumnAttribute("Password")]
[LengthAttribute("1000")]
[ConstraintAttribute]
public string Password { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentDto ContentDto { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public ContentVersionDto ContentVersionDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_LoginName();
    [CompilerGeneratedAttribute]
public void set_LoginName(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public ContentDto get_ContentDto();
    [CompilerGeneratedAttribute]
public void set_ContentDto(ContentDto value);
    [CompilerGeneratedAttribute]
public ContentVersionDto get_ContentVersionDto();
    [CompilerGeneratedAttribute]
public void set_ContentVersionDto(ContentVersionDto value);
}
[TableNameAttribute("cmsMemberType")]
[PrimaryKeyAttribute("pk")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.MemberPropertyTypeDto : object {
    [CompilerGeneratedAttribute]
private int <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PropertyTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ViewOnProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitive>k__BackingField;
    [ColumnAttribute("pk")]
[PrimaryKeyColumnAttribute]
public int PrimaryKey { get; public set; }
    [ColumnAttribute("NodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("propertytypeId")]
public int PropertyTypeId { get; public set; }
    [ColumnAttribute("memberCanEdit")]
[ConstraintAttribute]
public bool CanEdit { get; public set; }
    [ColumnAttribute("viewOnProfile")]
[ConstraintAttribute]
public bool ViewOnProfile { get; public set; }
    [ColumnAttribute("isSensitive")]
[ConstraintAttribute]
public bool IsSensitive { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public int get_PropertyTypeId();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeId(int value);
    [CompilerGeneratedAttribute]
public bool get_CanEdit();
    [CompilerGeneratedAttribute]
public void set_CanEdit(bool value);
    [CompilerGeneratedAttribute]
public bool get_ViewOnProfile();
    [CompilerGeneratedAttribute]
public void set_ViewOnProfile(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSensitive();
    [CompilerGeneratedAttribute]
public void set_IsSensitive(bool value);
}
[TableNameAttribute("umbracoNode")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.NodeDto : object {
    public static string TableName;
    public static int NodeIdSeed;
    private Nullable`1<int> _userId;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Trashed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <NodeObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int NodeId { get; public set; }
    [ColumnAttribute("uniqueId")]
[NullSettingAttribute]
[IndexAttribute("2")]
[ConstraintAttribute]
public Guid UniqueId { get; public set; }
    [ColumnAttribute("parentId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[IndexAttribute("1")]
public int ParentId { get; public set; }
    [ColumnAttribute("level")]
[IndexAttribute("1")]
public short Level { get; public set; }
    [ColumnAttribute("path")]
[LengthAttribute("150")]
[IndexAttribute("1")]
public string Path { get; public set; }
    [ColumnAttribute("sortOrder")]
public int SortOrder { get; public set; }
    [ColumnAttribute("trashed")]
[ConstraintAttribute]
[IndexAttribute("1")]
public bool Trashed { get; public set; }
    [ColumnAttribute("nodeUser")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
[NullSettingAttribute]
public Nullable`1<int> UserId { get; public set; }
    [ColumnAttribute("text")]
[NullSettingAttribute]
public string Text { get; public set; }
    [ColumnAttribute("nodeObjectType")]
[NullSettingAttribute]
[IndexAttribute("1")]
public Nullable`1<Guid> NodeObjectType { get; public set; }
    [ColumnAttribute("createDate")]
[ConstraintAttribute]
public DateTime CreateDate { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(int value);
    [CompilerGeneratedAttribute]
public short get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(short value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public bool get_Trashed();
    [CompilerGeneratedAttribute]
public void set_Trashed(bool value);
    public Nullable`1<int> get_UserId();
    public void set_UserId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_NodeObjectType();
    [CompilerGeneratedAttribute]
public void set_NodeObjectType(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
}
[TableNameAttribute("umbracoPropertyData")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.PropertyDataDto : object {
    public static string TableName;
    public static int VarcharLength;
    public static int SegmentLength;
    private Nullable`1<decimal> _decimalValue;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PropertyTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Segment>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IntegerValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <DateValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VarcharValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TextValue>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyTypeDto <PropertyTypeDto>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("versionId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentVersionDto")]
[IndexAttribute("2")]
public int VersionId { get; public set; }
    [ColumnAttribute("propertyTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.PropertyTypeDto")]
[IndexAttribute("1")]
public int PropertyTypeId { get; public set; }
    [ColumnAttribute("languageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
[IndexAttribute("1")]
[NullSettingAttribute]
public Nullable`1<int> LanguageId { get; public set; }
    [ColumnAttribute("segment")]
[IndexAttribute("1")]
[NullSettingAttribute]
[LengthAttribute("256")]
public string Segment { get; public set; }
    [ColumnAttribute("intValue")]
[NullSettingAttribute]
public Nullable`1<int> IntegerValue { get; public set; }
    [ColumnAttribute("decimalValue")]
[NullSettingAttribute]
public Nullable`1<decimal> DecimalValue { get; public set; }
    [ColumnAttribute("dateValue")]
[NullSettingAttribute]
public Nullable`1<DateTime> DateValue { get; public set; }
    [ColumnAttribute("varcharValue")]
[NullSettingAttribute]
[LengthAttribute("512")]
public string VarcharValue { get; public set; }
    [ColumnAttribute("textValue")]
[NullSettingAttribute]
[SpecialDbTypeAttribute("0")]
public string TextValue { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public PropertyTypeDto PropertyTypeDto { get; public set; }
    [IgnoreAttribute]
public object Value { get; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_VersionId();
    [CompilerGeneratedAttribute]
public void set_VersionId(int value);
    [CompilerGeneratedAttribute]
public int get_PropertyTypeId();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LanguageId();
    [CompilerGeneratedAttribute]
public void set_LanguageId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Segment();
    [CompilerGeneratedAttribute]
public void set_Segment(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IntegerValue();
    [CompilerGeneratedAttribute]
public void set_IntegerValue(Nullable`1<int> value);
    public Nullable`1<decimal> get_DecimalValue();
    public void set_DecimalValue(Nullable`1<decimal> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_DateValue();
    [CompilerGeneratedAttribute]
public void set_DateValue(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_VarcharValue();
    [CompilerGeneratedAttribute]
public void set_VarcharValue(string value);
    [CompilerGeneratedAttribute]
public string get_TextValue();
    [CompilerGeneratedAttribute]
public void set_TextValue(string value);
    [CompilerGeneratedAttribute]
public PropertyTypeDto get_PropertyTypeDto();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeDto(PropertyTypeDto value);
    public object get_Value();
    public PropertyDataDto Clone(int versionId);
    protected bool Equals(PropertyDataDto other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class Umbraco.Core.Persistence.Dtos.PropertyTypeCommonDto : PropertyTypeDto {
    [CompilerGeneratedAttribute]
private bool <CanEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ViewOnProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitive>k__BackingField;
    [ColumnAttribute("memberCanEdit")]
public bool CanEdit { get; public set; }
    [ColumnAttribute("viewOnProfile")]
public bool ViewOnProfile { get; public set; }
    [ColumnAttribute("isSensitive")]
public bool IsSensitive { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CanEdit();
    [CompilerGeneratedAttribute]
public void set_CanEdit(bool value);
    [CompilerGeneratedAttribute]
public bool get_ViewOnProfile();
    [CompilerGeneratedAttribute]
public void set_ViewOnProfile(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSensitive();
    [CompilerGeneratedAttribute]
public void set_IsSensitive(bool value);
}
[TableNameAttribute("cmsPropertyType")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.PropertyTypeDto : object {
    private string _alias;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PropertyTypeGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MandatoryMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationRegExp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationRegExpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LabelOnTop>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Variations>k__BackingField;
    [CompilerGeneratedAttribute]
private DataTypeDto <DataTypeDto>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("dataTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.DataTypeDto")]
public int DataTypeId { get; public set; }
    [ColumnAttribute("contentTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
public int ContentTypeId { get; public set; }
    [ColumnAttribute("propertyTypeGroupId")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.PropertyTypeGroupDto")]
public Nullable`1<int> PropertyTypeGroupId { get; public set; }
    [IndexAttribute("1")]
[ColumnAttribute("Alias")]
public string Alias { get; public set; }
    [ColumnAttribute("Name")]
[NullSettingAttribute]
public string Name { get; public set; }
    [ColumnAttribute("sortOrder")]
[ConstraintAttribute]
public int SortOrder { get; public set; }
    [ColumnAttribute("mandatory")]
[ConstraintAttribute]
public bool Mandatory { get; public set; }
    [ColumnAttribute("mandatoryMessage")]
[NullSettingAttribute]
[LengthAttribute("500")]
public string MandatoryMessage { get; public set; }
    [ColumnAttribute("validationRegExp")]
[NullSettingAttribute]
public string ValidationRegExp { get; public set; }
    [ColumnAttribute("validationRegExpMessage")]
[NullSettingAttribute]
[LengthAttribute("500")]
public string ValidationRegExpMessage { get; public set; }
    [ColumnAttribute("Description")]
[NullSettingAttribute]
[LengthAttribute("2000")]
public string Description { get; public set; }
    [ColumnAttribute("labelOnTop")]
[ConstraintAttribute]
public bool LabelOnTop { get; public set; }
    [ColumnAttribute("variations")]
[ConstraintAttribute]
public byte Variations { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public DataTypeDto DataTypeDto { get; public set; }
    [ColumnAttribute("UniqueID")]
[NullSettingAttribute]
[ConstraintAttribute]
[IndexAttribute("2")]
public Guid UniqueId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_DataTypeId();
    [CompilerGeneratedAttribute]
public void set_DataTypeId(int value);
    [CompilerGeneratedAttribute]
public int get_ContentTypeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PropertyTypeGroupId();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeGroupId(Nullable`1<int> value);
    public string get_Alias();
    public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public bool get_Mandatory();
    [CompilerGeneratedAttribute]
public void set_Mandatory(bool value);
    [CompilerGeneratedAttribute]
public string get_MandatoryMessage();
    [CompilerGeneratedAttribute]
public void set_MandatoryMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ValidationRegExp();
    [CompilerGeneratedAttribute]
public void set_ValidationRegExp(string value);
    [CompilerGeneratedAttribute]
public string get_ValidationRegExpMessage();
    [CompilerGeneratedAttribute]
public void set_ValidationRegExpMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_LabelOnTop();
    [CompilerGeneratedAttribute]
public void set_LabelOnTop(bool value);
    [CompilerGeneratedAttribute]
public byte get_Variations();
    [CompilerGeneratedAttribute]
public void set_Variations(byte value);
    [CompilerGeneratedAttribute]
public DataTypeDto get_DataTypeDto();
    [CompilerGeneratedAttribute]
public void set_DataTypeDto(DataTypeDto value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
}
[TableNameAttribute("cmsPropertyTypeGroup")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.PropertyTypeGroupDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentTypeNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PropertyTypeDto> <PropertyTypeDtos>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("uniqueID")]
[NullSettingAttribute]
[ConstraintAttribute]
[IndexAttribute("2")]
public Guid UniqueId { get; public set; }
    [ColumnAttribute("contenttypeNodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentTypeDto")]
public int ContentTypeNodeId { get; public set; }
    [ColumnAttribute("type")]
[ConstraintAttribute]
public short Type { get; public set; }
    [ColumnAttribute("text")]
public string Text { get; public set; }
    [ColumnAttribute("alias")]
public string Alias { get; public set; }
    [ColumnAttribute("sortorder")]
public int SortOrder { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public List`1<PropertyTypeDto> PropertyTypeDtos { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public int get_ContentTypeNodeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeNodeId(int value);
    [CompilerGeneratedAttribute]
public short get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(short value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public List`1<PropertyTypeDto> get_PropertyTypeDtos();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeDtos(List`1<PropertyTypeDto> value);
}
[TableNameAttribute("cmsPropertyTypeGroup")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.PropertyTypeGroupReadOnlyDto : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentTypeNodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [ColumnAttribute("PropertyTypeGroupId")]
public Nullable`1<int> Id { get; public set; }
    [ColumnAttribute("PropertyGroupName")]
public string Text { get; public set; }
    [ColumnAttribute("PropertyGroupSortOrder")]
public int SortOrder { get; public set; }
    [ColumnAttribute("contenttypeNodeId")]
public int ContentTypeNodeId { get; public set; }
    [ColumnAttribute("PropertyGroupUniqueID")]
public Guid UniqueId { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public int get_ContentTypeNodeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeNodeId(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
}
[TableNameAttribute("cmsPropertyType")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.PropertyTypeReadOnlyDto : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DataTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentTypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PropertyTypeGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Mandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MandatoryMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationRegExp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidationRegExpMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LabelOnTop>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanEdit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ViewOnProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyEditorAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DbType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [ColumnAttribute("PropertyTypeId")]
public Nullable`1<int> Id { get; public set; }
    [ColumnAttribute("dataTypeId")]
public int DataTypeId { get; public set; }
    [ColumnAttribute("contentTypeId")]
public int ContentTypeId { get; public set; }
    [ColumnAttribute("PropertyTypesGroupId")]
public Nullable`1<int> PropertyTypeGroupId { get; public set; }
    [ColumnAttribute("Alias")]
public string Alias { get; public set; }
    [ColumnAttribute("Name")]
public string Name { get; public set; }
    [ColumnAttribute("PropertyTypeSortOrder")]
public int SortOrder { get; public set; }
    [ColumnAttribute("mandatory")]
public bool Mandatory { get; public set; }
    [ColumnAttribute("mandatoryMessage")]
public string MandatoryMessage { get; public set; }
    [ColumnAttribute("validationRegExp")]
public string ValidationRegExp { get; public set; }
    [ColumnAttribute("validationRegExpMessage")]
public string ValidationRegExpMessage { get; public set; }
    [ColumnAttribute("Description")]
public string Description { get; public set; }
    [ColumnAttribute("labelOnTop")]
public bool LabelOnTop { get; public set; }
    [ColumnAttribute("memberCanEdit")]
public bool CanEdit { get; public set; }
    [ColumnAttribute("viewOnProfile")]
public bool ViewOnProfile { get; public set; }
    [ColumnAttribute("isSensitive")]
public bool IsSensitive { get; public set; }
    [ColumnAttribute("propertyEditorAlias")]
public string PropertyEditorAlias { get; public set; }
    [ColumnAttribute("dbType")]
public string DbType { get; public set; }
    [ColumnAttribute("UniqueID")]
public Guid UniqueId { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_DataTypeId();
    [CompilerGeneratedAttribute]
public void set_DataTypeId(int value);
    [CompilerGeneratedAttribute]
public int get_ContentTypeId();
    [CompilerGeneratedAttribute]
public void set_ContentTypeId(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PropertyTypeGroupId();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeGroupId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(int value);
    [CompilerGeneratedAttribute]
public bool get_Mandatory();
    [CompilerGeneratedAttribute]
public void set_Mandatory(bool value);
    [CompilerGeneratedAttribute]
public string get_MandatoryMessage();
    [CompilerGeneratedAttribute]
public void set_MandatoryMessage(string value);
    [CompilerGeneratedAttribute]
public string get_ValidationRegExp();
    [CompilerGeneratedAttribute]
public void set_ValidationRegExp(string value);
    [CompilerGeneratedAttribute]
public string get_ValidationRegExpMessage();
    [CompilerGeneratedAttribute]
public void set_ValidationRegExpMessage(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_LabelOnTop();
    [CompilerGeneratedAttribute]
public void set_LabelOnTop(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanEdit();
    [CompilerGeneratedAttribute]
public void set_CanEdit(bool value);
    [CompilerGeneratedAttribute]
public bool get_ViewOnProfile();
    [CompilerGeneratedAttribute]
public void set_ViewOnProfile(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSensitive();
    [CompilerGeneratedAttribute]
public void set_IsSensitive(bool value);
    [CompilerGeneratedAttribute]
public string get_PropertyEditorAlias();
    [CompilerGeneratedAttribute]
public void set_PropertyEditorAlias(string value);
    [CompilerGeneratedAttribute]
public string get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(string value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
}
[TableNameAttribute("umbracoRedirectUrl")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.RedirectUrlDto : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ContentKey>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDateUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlHash>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public Guid Id { get; public set; }
    [ResultColumnAttribute]
public int ContentId { get; public set; }
    [ColumnAttribute("contentKey")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public Guid ContentKey { get; public set; }
    [ColumnAttribute("createDateUtc")]
[NullSettingAttribute]
public DateTime CreateDateUtc { get; public set; }
    [ColumnAttribute("url")]
[NullSettingAttribute]
public string Url { get; public set; }
    [ColumnAttribute("culture")]
[NullSettingAttribute]
public string Culture { get; public set; }
    [ColumnAttribute("urlHash")]
[NullSettingAttribute]
[IndexAttribute("2")]
[LengthAttribute("40")]
public string UrlHash { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public int get_ContentId();
    [CompilerGeneratedAttribute]
public void set_ContentId(int value);
    [CompilerGeneratedAttribute]
public Guid get_ContentKey();
    [CompilerGeneratedAttribute]
public void set_ContentKey(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDateUtc();
    [CompilerGeneratedAttribute]
public void set_CreateDateUtc(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public void set_Culture(string value);
    [CompilerGeneratedAttribute]
public string get_UrlHash();
    [CompilerGeneratedAttribute]
public void set_UrlHash(string value);
}
[TableNameAttribute("umbracoRelation")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.RelationDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChildId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelationType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Datetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ParentObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ChildObjectType>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("parentId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[IndexAttribute("2")]
public int ParentId { get; public set; }
    [ColumnAttribute("childId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int ChildId { get; public set; }
    [ColumnAttribute("relType")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.RelationTypeDto")]
public int RelationType { get; public set; }
    [ColumnAttribute("datetime")]
[ConstraintAttribute]
public DateTime Datetime { get; public set; }
    [ColumnAttribute("comment")]
[LengthAttribute("1000")]
public string Comment { get; public set; }
    [ResultColumnAttribute]
[ColumnAttribute("parentObjectType")]
public Guid ParentObjectType { get; public set; }
    [ResultColumnAttribute]
[ColumnAttribute("childObjectType")]
public Guid ChildObjectType { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(int value);
    [CompilerGeneratedAttribute]
public int get_ChildId();
    [CompilerGeneratedAttribute]
public void set_ChildId(int value);
    [CompilerGeneratedAttribute]
public int get_RelationType();
    [CompilerGeneratedAttribute]
public void set_RelationType(int value);
    [CompilerGeneratedAttribute]
public DateTime get_Datetime();
    [CompilerGeneratedAttribute]
public void set_Datetime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public Guid get_ParentObjectType();
    [CompilerGeneratedAttribute]
public void set_ParentObjectType(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ChildObjectType();
    [CompilerGeneratedAttribute]
public void set_ChildObjectType(Guid value);
}
[TableNameAttribute("umbracoRelationType")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.RelationTypeDto : object {
    public static int NodeIdSeed;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Dual>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ParentObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ChildObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("typeUniqueId")]
[IndexAttribute("2")]
public Guid UniqueId { get; public set; }
    [ColumnAttribute("dual")]
public bool Dual { get; public set; }
    [ColumnAttribute("parentObjectType")]
[NullSettingAttribute]
public Nullable`1<Guid> ParentObjectType { get; public set; }
    [ColumnAttribute("childObjectType")]
[NullSettingAttribute]
public Nullable`1<Guid> ChildObjectType { get; public set; }
    [ColumnAttribute("name")]
[NullSettingAttribute]
[IndexAttribute("2")]
public string Name { get; public set; }
    [ColumnAttribute("alias")]
[NullSettingAttribute]
[LengthAttribute("100")]
[IndexAttribute("2")]
public string Alias { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_Dual();
    [CompilerGeneratedAttribute]
public void set_Dual(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ParentObjectType();
    [CompilerGeneratedAttribute]
public void set_ParentObjectType(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ChildObjectType();
    [CompilerGeneratedAttribute]
public void set_ChildObjectType(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
}
[TableNameAttribute("umbracoServer")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.ServerRegistrationDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateRegistered>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateAccessed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMaster>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("address")]
[LengthAttribute("500")]
public string ServerAddress { get; public set; }
    [ColumnAttribute("computerName")]
[LengthAttribute("255")]
[IndexAttribute("2")]
public string ServerIdentity { get; public set; }
    [ColumnAttribute("registeredDate")]
[ConstraintAttribute]
public DateTime DateRegistered { get; public set; }
    [ColumnAttribute("lastNotifiedDate")]
public DateTime DateAccessed { get; public set; }
    [ColumnAttribute("isActive")]
[IndexAttribute("1")]
public bool IsActive { get; public set; }
    [ColumnAttribute("isMaster")]
public bool IsMaster { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_ServerAddress();
    [CompilerGeneratedAttribute]
public void set_ServerAddress(string value);
    [CompilerGeneratedAttribute]
public string get_ServerIdentity();
    [CompilerGeneratedAttribute]
public void set_ServerIdentity(string value);
    [CompilerGeneratedAttribute]
public DateTime get_DateRegistered();
    [CompilerGeneratedAttribute]
public void set_DateRegistered(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_DateAccessed();
    [CompilerGeneratedAttribute]
public void set_DateAccessed(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
public void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMaster();
    [CompilerGeneratedAttribute]
public void set_IsMaster(bool value);
}
[TableNameAttribute("cmsTags")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.TagDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LanguageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeCount>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("group")]
[LengthAttribute("100")]
public string Group { get; public set; }
    [ColumnAttribute("languageId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.LanguageDto")]
[IndexAttribute("1")]
[NullSettingAttribute]
public Nullable`1<int> LanguageId { get; public set; }
    [ColumnAttribute("tag")]
[LengthAttribute("200")]
[IndexAttribute("2")]
public string Text { get; public set; }
    [ResultColumnAttribute("NodeCount")]
public int NodeCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LanguageId();
    [CompilerGeneratedAttribute]
public void set_LanguageId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
    [CompilerGeneratedAttribute]
public int get_NodeCount();
    [CompilerGeneratedAttribute]
public void set_NodeCount(int value);
}
[TableNameAttribute("cmsTagRelationship")]
[PrimaryKeyAttribute("nodeId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.TagRelationshipDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TagId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PropertyTypeId>k__BackingField;
    [ColumnAttribute("nodeId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.ContentDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("tagId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.TagDto")]
public int TagId { get; public set; }
    [ColumnAttribute("propertyTypeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.PropertyTypeDto")]
public int PropertyTypeId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public int get_TagId();
    [CompilerGeneratedAttribute]
public void set_TagId(int value);
    [CompilerGeneratedAttribute]
public int get_PropertyTypeId();
    [CompilerGeneratedAttribute]
public void set_PropertyTypeId(int value);
}
[TableNameAttribute("cmsTemplate")]
[PrimaryKeyAttribute("pk")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.TemplateDto : object {
    [CompilerGeneratedAttribute]
private int <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private NodeDto <NodeDto>k__BackingField;
    [ColumnAttribute("pk")]
[PrimaryKeyColumnAttribute]
public int PrimaryKey { get; public set; }
    [ColumnAttribute("nodeId")]
[IndexAttribute("2")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("alias")]
[LengthAttribute("100")]
[NullSettingAttribute]
public string Alias { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public NodeDto NodeDto { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PrimaryKey();
    [CompilerGeneratedAttribute]
public void set_PrimaryKey(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public NodeDto get_NodeDto();
    [CompilerGeneratedAttribute]
public void set_NodeDto(NodeDto value);
}
[TableNameAttribute("umbracoUser2NodeNotify")]
[PrimaryKeyAttribute("userId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.User2NodeNotifyDto : object {
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [ColumnAttribute("userId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
public int UserId { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int NodeId { get; public set; }
    [ColumnAttribute("action")]
[SpecialDbTypeAttribute("1")]
[LengthAttribute("1")]
public string Action { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
}
[TableNameAttribute("umbracoUser2UserGroup")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.User2UserGroupDto : object {
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserGroupId>k__BackingField;
    [ColumnAttribute("userId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
public int UserId { get; public set; }
    [ColumnAttribute("userGroupId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserGroupDto")]
public int UserGroupId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(int value);
    [CompilerGeneratedAttribute]
public int get_UserGroupId();
    [CompilerGeneratedAttribute]
public void set_UserGroupId(int value);
}
[TableNameAttribute("umbracoUser")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.UserDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoConsole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Login>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStampToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FailedLoginAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastLockoutDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastPasswordChangeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastLoginDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EmailConfirmedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <InvitedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Avatar>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TourData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UserGroupDto> <UserGroupDtos>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<UserStartNodeDto> <UserStartNodeDtos>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("userDisabled")]
[ConstraintAttribute]
public bool Disabled { get; public set; }
    [ColumnAttribute("userNoConsole")]
[ConstraintAttribute]
public bool NoConsole { get; public set; }
    [ColumnAttribute("userName")]
public string UserName { get; public set; }
    [ColumnAttribute("userLogin")]
[LengthAttribute("125")]
[IndexAttribute("1")]
public string Login { get; public set; }
    [ColumnAttribute("userPassword")]
[LengthAttribute("500")]
public string Password { get; public set; }
    [ColumnAttribute("passwordConfig")]
[NullSettingAttribute]
[LengthAttribute("500")]
public string PasswordConfig { get; public set; }
    [ColumnAttribute("userEmail")]
public string Email { get; public set; }
    [ColumnAttribute("userLanguage")]
[NullSettingAttribute]
[LengthAttribute("10")]
public string UserLanguage { get; public set; }
    [ColumnAttribute("securityStampToken")]
[NullSettingAttribute]
[LengthAttribute("255")]
public string SecurityStampToken { get; public set; }
    [ColumnAttribute("failedLoginAttempts")]
[NullSettingAttribute]
public Nullable`1<int> FailedLoginAttempts { get; public set; }
    [ColumnAttribute("lastLockoutDate")]
[NullSettingAttribute]
public Nullable`1<DateTime> LastLockoutDate { get; public set; }
    [ColumnAttribute("lastPasswordChangeDate")]
[NullSettingAttribute]
public Nullable`1<DateTime> LastPasswordChangeDate { get; public set; }
    [ColumnAttribute("lastLoginDate")]
[NullSettingAttribute]
public Nullable`1<DateTime> LastLoginDate { get; public set; }
    [ColumnAttribute("emailConfirmedDate")]
[NullSettingAttribute]
public Nullable`1<DateTime> EmailConfirmedDate { get; public set; }
    [ColumnAttribute("invitedDate")]
[NullSettingAttribute]
public Nullable`1<DateTime> InvitedDate { get; public set; }
    [ColumnAttribute("createDate")]
[NullSettingAttribute]
[ConstraintAttribute]
public DateTime CreateDate { get; public set; }
    [ColumnAttribute("updateDate")]
[NullSettingAttribute]
[ConstraintAttribute]
public DateTime UpdateDate { get; public set; }
    [ColumnAttribute("avatar")]
[NullSettingAttribute]
[LengthAttribute("500")]
public string Avatar { get; public set; }
    [ColumnAttribute("tourData")]
[NullSettingAttribute]
[SpecialDbTypeAttribute("0")]
public string TourData { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public List`1<UserGroupDto> UserGroupDtos { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public HashSet`1<UserStartNodeDto> UserStartNodeDtos { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoConsole();
    [CompilerGeneratedAttribute]
public void set_NoConsole(bool value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_Login();
    [CompilerGeneratedAttribute]
public void set_Login(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_PasswordConfig();
    [CompilerGeneratedAttribute]
public void set_PasswordConfig(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public string get_UserLanguage();
    [CompilerGeneratedAttribute]
public void set_UserLanguage(string value);
    [CompilerGeneratedAttribute]
public string get_SecurityStampToken();
    [CompilerGeneratedAttribute]
public void set_SecurityStampToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FailedLoginAttempts();
    [CompilerGeneratedAttribute]
public void set_FailedLoginAttempts(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastLockoutDate();
    [CompilerGeneratedAttribute]
public void set_LastLockoutDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastPasswordChangeDate();
    [CompilerGeneratedAttribute]
public void set_LastPasswordChangeDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastLoginDate();
    [CompilerGeneratedAttribute]
public void set_LastLoginDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EmailConfirmedDate();
    [CompilerGeneratedAttribute]
public void set_EmailConfirmedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_InvitedDate();
    [CompilerGeneratedAttribute]
public void set_InvitedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdateDate();
    [CompilerGeneratedAttribute]
public void set_UpdateDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Avatar();
    [CompilerGeneratedAttribute]
public void set_Avatar(string value);
    [CompilerGeneratedAttribute]
public string get_TourData();
    [CompilerGeneratedAttribute]
public void set_TourData(string value);
    [CompilerGeneratedAttribute]
public List`1<UserGroupDto> get_UserGroupDtos();
    [CompilerGeneratedAttribute]
public void set_UserGroupDtos(List`1<UserGroupDto> value);
    [CompilerGeneratedAttribute]
public HashSet`1<UserStartNodeDto> get_UserStartNodeDtos();
    [CompilerGeneratedAttribute]
public void set_UserStartNodeDtos(HashSet`1<UserStartNodeDto> value);
}
[TableNameAttribute("umbracoUserGroup2App")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.UserGroup2AppDto : object {
    [CompilerGeneratedAttribute]
private int <UserGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppAlias>k__BackingField;
    [ColumnAttribute("userGroupId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserGroupDto")]
public int UserGroupId { get; public set; }
    [ColumnAttribute("app")]
[LengthAttribute("50")]
public string AppAlias { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UserGroupId();
    [CompilerGeneratedAttribute]
public void set_UserGroupId(int value);
    [CompilerGeneratedAttribute]
public string get_AppAlias();
    [CompilerGeneratedAttribute]
public void set_AppAlias(string value);
}
[TableNameAttribute("umbracoUserGroup2NodePermission")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.UserGroup2NodePermissionDto : object {
    [CompilerGeneratedAttribute]
private int <UserGroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Permission>k__BackingField;
    [ColumnAttribute("userGroupId")]
[PrimaryKeyColumnAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserGroupDto")]
public int UserGroupId { get; public set; }
    [ColumnAttribute("nodeId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
[IndexAttribute("1")]
public int NodeId { get; public set; }
    [ColumnAttribute("permission")]
public string Permission { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UserGroupId();
    [CompilerGeneratedAttribute]
public void set_UserGroupId(int value);
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public string get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(string value);
}
[TableNameAttribute("umbracoUserGroup")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.UserGroupDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdateDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartContentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <StartMediaId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UserGroup2AppDto> <UserGroup2AppDtos>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserCount>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("userGroupAlias")]
[LengthAttribute("200")]
[IndexAttribute("2")]
public string Alias { get; public set; }
    [ColumnAttribute("userGroupName")]
[LengthAttribute("200")]
[IndexAttribute("2")]
public string Name { get; public set; }
    [ColumnAttribute("userGroupDefaultPermissions")]
[LengthAttribute("50")]
[NullSettingAttribute]
public string DefaultPermissions { get; public set; }
    [ColumnAttribute("createDate")]
[NullSettingAttribute]
[ConstraintAttribute]
public DateTime CreateDate { get; public set; }
    [ColumnAttribute("updateDate")]
[NullSettingAttribute]
[ConstraintAttribute]
public DateTime UpdateDate { get; public set; }
    [ColumnAttribute("icon")]
[NullSettingAttribute]
public string Icon { get; public set; }
    [ColumnAttribute("startContentId")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public Nullable`1<int> StartContentId { get; public set; }
    [ColumnAttribute("startMediaId")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public Nullable`1<int> StartMediaId { get; public set; }
    [ResultColumnAttribute]
[ReferenceAttribute]
public List`1<UserGroup2AppDto> UserGroup2AppDtos { get; public set; }
    [ResultColumnAttribute]
public int UserCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultPermissions();
    [CompilerGeneratedAttribute]
public void set_DefaultPermissions(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreateDate();
    [CompilerGeneratedAttribute]
public void set_CreateDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdateDate();
    [CompilerGeneratedAttribute]
public void set_UpdateDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartContentId();
    [CompilerGeneratedAttribute]
public void set_StartContentId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_StartMediaId();
    [CompilerGeneratedAttribute]
public void set_StartMediaId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public List`1<UserGroup2AppDto> get_UserGroup2AppDtos();
    [CompilerGeneratedAttribute]
public void set_UserGroup2AppDtos(List`1<UserGroup2AppDto> value);
    [CompilerGeneratedAttribute]
public int get_UserCount();
    [CompilerGeneratedAttribute]
public void set_UserCount(int value);
}
[TableNameAttribute("umbracoUserLogin")]
[PrimaryKeyAttribute("sessionId")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.UserLoginDto : object {
    public static string TableName;
    [CompilerGeneratedAttribute]
private Guid <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LoggedInUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastValidatedUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LoggedOutUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [ColumnAttribute("sessionId")]
[PrimaryKeyColumnAttribute]
public Guid SessionId { get; public set; }
    [ColumnAttribute("userId")]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
public int UserId { get; public set; }
    [ColumnAttribute("loggedInUtc")]
[NullSettingAttribute]
public DateTime LoggedInUtc { get; public set; }
    [ColumnAttribute("lastValidatedUtc")]
[NullSettingAttribute]
[IndexAttribute("1")]
public DateTime LastValidatedUtc { get; public set; }
    [ColumnAttribute("loggedOutUtc")]
[NullSettingAttribute]
public Nullable`1<DateTime> LoggedOutUtc { get; public set; }
    [ColumnAttribute("ipAddress")]
[NullSettingAttribute]
public string IpAddress { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(Guid value);
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(int value);
    [CompilerGeneratedAttribute]
public DateTime get_LoggedInUtc();
    [CompilerGeneratedAttribute]
public void set_LoggedInUtc(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastValidatedUtc();
    [CompilerGeneratedAttribute]
public void set_LastValidatedUtc(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LoggedOutUtc();
    [CompilerGeneratedAttribute]
public void set_LoggedOutUtc(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
}
internal class Umbraco.Core.Persistence.Dtos.UserNotificationDto : object {
    [CompilerGeneratedAttribute]
private int <NodeId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <NodeObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [ColumnAttribute("nodeId")]
public int NodeId { get; public set; }
    [ColumnAttribute("userId")]
public int UserId { get; public set; }
    [ColumnAttribute("nodeObjectType")]
public Guid NodeObjectType { get; public set; }
    [ColumnAttribute("action")]
public string Action { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NodeId();
    [CompilerGeneratedAttribute]
public void set_NodeId(int value);
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(int value);
    [CompilerGeneratedAttribute]
public Guid get_NodeObjectType();
    [CompilerGeneratedAttribute]
public void set_NodeObjectType(Guid value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
}
[TableNameAttribute("umbracoUserStartNode")]
[PrimaryKeyAttribute("id")]
[ExplicitColumnsAttribute]
internal class Umbraco.Core.Persistence.Dtos.UserStartNodeDto : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartNode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartNodeType>k__BackingField;
    [ColumnAttribute("id")]
[PrimaryKeyColumnAttribute]
public int Id { get; public set; }
    [ColumnAttribute("userId")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.UserDto")]
public int UserId { get; public set; }
    [ColumnAttribute("startNode")]
[NullSettingAttribute]
[ForeignKeyAttribute("Umbraco.Core.Persistence.Dtos.NodeDto")]
public int StartNode { get; public set; }
    [ColumnAttribute("startNodeType")]
[NullSettingAttribute]
[IndexAttribute("2")]
public int StartNodeType { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(int value);
    [CompilerGeneratedAttribute]
public int get_StartNode();
    [CompilerGeneratedAttribute]
public void set_StartNode(int value);
    [CompilerGeneratedAttribute]
public int get_StartNodeType();
    [CompilerGeneratedAttribute]
public void set_StartNodeType(int value);
    public sealed virtual bool Equals(UserStartNodeDto other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UserStartNodeDto left, UserStartNodeDto right);
    public static bool op_Inequality(UserStartNodeDto left, UserStartNodeDto right);
}
[ObsoleteAttribute("Instead of throwing an exception, return null or an HTTP 404 status code instead.")]
public class Umbraco.Core.Persistence.EntityNotFoundException : Exception {
    [CompilerGeneratedAttribute]
private object <Id>k__BackingField;
    public object Id { get; private set; }
    public EntityNotFoundException(object id, string message);
    public EntityNotFoundException(string message);
    public EntityNotFoundException(string message, Exception innerException);
    protected EntityNotFoundException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public object get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(object value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
internal static class Umbraco.Core.Persistence.Factories.AuditEntryFactory : object {
    public static IEnumerable`1<IAuditEntry> BuildEntities(IEnumerable`1<AuditEntryDto> dtos);
    public static IAuditEntry BuildEntity(AuditEntryDto dto);
    public static AuditEntryDto BuildDto(IAuditEntry entity);
}
internal static class Umbraco.Core.Persistence.Factories.ConsentFactory : object {
    public static IEnumerable`1<IConsent> BuildEntities(IEnumerable`1<ConsentDto> dtos);
    public static ConsentDto BuildDto(IConsent entity);
}
internal class Umbraco.Core.Persistence.Factories.ContentBaseFactory : object {
    public static Content BuildEntity(DocumentDto dto, IContentType contentType);
    public static Media BuildEntity(ContentDto dto, IMediaType contentType);
    public static Member BuildEntity(MemberDto dto, IMemberType contentType);
    public static DocumentDto BuildDto(IContent entity, Guid objectType);
    public static IEnumerable`1<ValueTuple`2<ContentSchedule, ContentScheduleDto>> BuildScheduleDto(IContent entity, ILanguageRepository languageRepository);
    public static MediaDto BuildDto(PropertyEditorCollection propertyEditors, IMedia entity);
    public static MemberDto BuildDto(IMember entity);
    private static ContentDto BuildContentDto(IContentBase entity, Guid objectType);
    private static NodeDto BuildNodeDto(IContentBase entity, Guid objectType);
    private static ContentVersionDto BuildContentVersionDto(IContentBase entity, ContentDto contentDto);
    private static DocumentVersionDto BuildDocumentVersionDto(IContent entity, ContentDto contentDto);
    private static MediaVersionDto BuildMediaVersionDto(PropertyEditorCollection propertyEditors, IMedia entity, ContentDto contentDto);
}
internal static class Umbraco.Core.Persistence.Factories.ContentTypeFactory : object {
    public static IContentType BuildContentTypeEntity(ContentTypeDto dto);
    public static IMediaType BuildMediaTypeEntity(ContentTypeDto dto);
    public static IMemberType BuildMemberTypeEntity(ContentTypeDto dto);
    public static IEnumerable`1<MemberPropertyTypeDto> BuildMemberPropertyTypeDtos(IMemberType entity);
    private static void BuildCommonEntity(ContentTypeBase entity, ContentTypeDto dto, bool setVariations);
    public static ContentTypeDto BuildContentTypeDto(IContentTypeBase entity);
    private static NodeDto BuildNodeDto(IUmbracoEntity entity, Guid nodeObjectType);
}
internal static class Umbraco.Core.Persistence.Factories.DataTypeFactory : object {
    public static IDataType BuildEntity(DataTypeDto dto, PropertyEditorCollection editors, ILogger logger);
    public static DataTypeDto BuildDto(IDataType entity);
    private static NodeDto BuildNodeDto(IDataType entity);
}
internal static class Umbraco.Core.Persistence.Factories.DictionaryItemFactory : object {
    public static IDictionaryItem BuildEntity(DictionaryDto dto);
    public static DictionaryDto BuildDto(IDictionaryItem entity);
    private static List`1<LanguageTextDto> BuildLanguageTextDtos(IDictionaryItem entity);
}
internal static class Umbraco.Core.Persistence.Factories.DictionaryTranslationFactory : object {
    public static IDictionaryTranslation BuildEntity(LanguageTextDto dto, Guid uniqueId);
    public static LanguageTextDto BuildDto(IDictionaryTranslation entity, Guid uniqueId);
}
internal static class Umbraco.Core.Persistence.Factories.ExternalLoginFactory : object {
    public static IIdentityUserLoginExtended BuildEntity(ExternalLoginDto dto);
    public static ExternalLoginDto BuildDto(IIdentityUserLogin entity);
    public static ExternalLoginDto BuildDto(int userId, IExternalLogin entity, Nullable`1<int> id);
}
internal static class Umbraco.Core.Persistence.Factories.LanguageFactory : object {
    public static ILanguage BuildEntity(LanguageDto dto);
    public static LanguageDto BuildDto(ILanguage entity);
}
internal static class Umbraco.Core.Persistence.Factories.MacroFactory : object {
    public static IMacro BuildEntity(MacroDto dto);
    public static MacroDto BuildDto(IMacro entity);
    private static List`1<MacroPropertyDto> BuildPropertyDtos(IMacro entity);
}
internal static class Umbraco.Core.Persistence.Factories.MemberGroupFactory : object {
    private static Guid _nodeObjectTypeId;
    private static MemberGroupFactory();
    public static IMemberGroup BuildEntity(NodeDto dto);
    public static NodeDto BuildDto(IMemberGroup entity);
}
internal static class Umbraco.Core.Persistence.Factories.PropertyFactory : object {
    public static IEnumerable`1<Property> BuildEntities(PropertyType[] propertyTypes, IReadOnlyCollection`1<PropertyDataDto> dtos, int publishedVersionId, ILanguageRepository languageRepository);
    private static PropertyDataDto BuildDto(int versionId, Property property, Nullable`1<int> languageId, string segment, object value);
    public static IEnumerable`1<PropertyDataDto> BuildDtos(ContentVariation contentVariation, int currentVersionId, int publishedVersionId, IEnumerable`1<Property> properties, ILanguageRepository languageRepository, Boolean& edited, HashSet`1& editedCultures);
}
internal static class Umbraco.Core.Persistence.Factories.PropertyGroupFactory : object {
    public static IEnumerable`1<PropertyGroup> BuildEntity(IEnumerable`1<PropertyTypeGroupDto> groupDtos, bool isPublishing, int contentTypeId, DateTime createDate, DateTime updateDate, Func`4<string, ValueStorageType, string, PropertyType> propertyTypeCtor);
    public static IEnumerable`1<PropertyTypeGroupDto> BuildDto(IEnumerable`1<PropertyGroup> entity);
    internal static PropertyTypeGroupDto BuildGroupDto(PropertyGroup propertyGroup, int contentTypeId);
    internal static PropertyTypeDto BuildPropertyTypeDto(int groupId, PropertyType propertyType, int contentTypeId);
}
internal static class Umbraco.Core.Persistence.Factories.PublicAccessEntryFactory : object {
    public static PublicAccessEntry BuildEntity(AccessDto dto);
    public static AccessDto BuildDto(PublicAccessEntry entity);
}
internal static class Umbraco.Core.Persistence.Factories.RelationFactory : object {
    public static IRelation BuildEntity(RelationDto dto, IRelationType relationType);
    public static RelationDto BuildDto(IRelation entity);
}
internal static class Umbraco.Core.Persistence.Factories.RelationTypeFactory : object {
    public static IRelationType BuildEntity(RelationTypeDto dto);
    public static RelationTypeDto BuildDto(IRelationType entity);
}
internal static class Umbraco.Core.Persistence.Factories.ServerRegistrationFactory : object {
    public static ServerRegistration BuildEntity(ServerRegistrationDto dto);
    public static ServerRegistrationDto BuildDto(IServerRegistration entity);
}
internal static class Umbraco.Core.Persistence.Factories.TagFactory : object {
    public static ITag BuildEntity(TagDto dto);
    public static TagDto BuildDto(ITag entity);
}
internal static class Umbraco.Core.Persistence.Factories.TemplateFactory : object {
    public static Template BuildEntity(TemplateDto dto, IEnumerable`1<IUmbracoEntity> childDefinitions, Func`2<File, string> getFileContent);
    public static TemplateDto BuildDto(Template entity, Nullable`1<Guid> nodeObjectTypeId, int primaryKey);
    private static NodeDto BuildNodeDto(Template entity, Nullable`1<Guid> nodeObjectTypeId);
}
internal static class Umbraco.Core.Persistence.Factories.UserFactory : object {
    public static IUser BuildEntity(UserDto dto);
    public static UserDto BuildDto(IUser entity);
}
internal static class Umbraco.Core.Persistence.Factories.UserGroupFactory : object {
    public static IUserGroup BuildEntity(UserGroupDto dto);
    public static UserGroupDto BuildDto(IUserGroup entity);
}
internal class Umbraco.Core.Persistence.FaultHandling.FaultHandlingDbCommand : DbCommand {
    private RetryDbConnection _connection;
    private DbCommand _inner;
    private RetryPolicy _cmdRetryPolicy;
    [CompilerGeneratedAttribute]
private bool <DesignTimeVisible>k__BackingField;
    public DbCommand Inner { get; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    public bool DesignTimeVisible { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public FaultHandlingDbCommand(RetryDbConnection connection, DbCommand command, RetryPolicy cmdRetryPolicy);
    public DbCommand get_Inner();
    protected virtual void Dispose(bool disposing);
    public virtual void Cancel();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    [CompilerGeneratedAttribute]
public virtual bool get_DesignTimeVisible();
    [CompilerGeneratedAttribute]
public virtual void set_DesignTimeVisible(bool value);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    private T Execute(Func`1<T> f);
    public virtual void Prepare();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    [CompilerGeneratedAttribute]
private int <ExecuteNonQuery>b__31_0();
    [CompilerGeneratedAttribute]
private object <ExecuteScalar>b__32_0();
}
public interface Umbraco.Core.Persistence.FaultHandling.ITransientErrorDetectionStrategy {
    public abstract virtual bool IsTransient(Exception ex);
}
internal class Umbraco.Core.Persistence.FaultHandling.RetryDbConnection : DbConnection {
    private DbConnection _inner;
    private RetryPolicy _conRetryPolicy;
    private RetryPolicy _cmdRetryPolicy;
    public DbConnection Inner { get; }
    public string ConnectionString { get; public set; }
    protected bool CanRaiseEvents { get; }
    public int ConnectionTimeout { get; }
    public string DataSource { get; }
    public string Database { get; }
    public string ServerVersion { get; }
    public ConnectionState State { get; }
    public RetryDbConnection(DbConnection connection, RetryPolicy conRetryPolicy, RetryPolicy cmdRetryPolicy);
    public DbConnection get_Inner();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    protected virtual bool get_CanRaiseEvents();
    public virtual void ChangeDatabase(string databaseName);
    public virtual void Close();
    public virtual int get_ConnectionTimeout();
    protected virtual DbCommand CreateDbCommand();
    public virtual string get_DataSource();
    public virtual string get_Database();
    protected virtual void Dispose(bool disposing);
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public virtual void Open();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    private void StateChangeHandler(object sender, StateChangeEventArgs stateChangeEventArguments);
    public void Ensure();
}
public class Umbraco.Core.Persistence.FaultHandling.RetryingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <CurrentRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <LastException>k__BackingField;
    public int CurrentRetryCount { get; private set; }
    public TimeSpan Delay { get; private set; }
    public Exception LastException { get; private set; }
    public RetryingEventArgs(int currentRetryCount, TimeSpan delay, Exception lastException);
    [CompilerGeneratedAttribute]
public int get_CurrentRetryCount();
    [CompilerGeneratedAttribute]
private void set_CurrentRetryCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
private void set_Delay(TimeSpan value);
    [CompilerGeneratedAttribute]
public Exception get_LastException();
    [CompilerGeneratedAttribute]
private void set_LastException(Exception value);
}
public class Umbraco.Core.Persistence.FaultHandling.RetryLimitExceededException : Exception {
    public RetryLimitExceededException(string message);
    public RetryLimitExceededException(Exception innerException);
    public RetryLimitExceededException(string message, Exception innerException);
    private RetryLimitExceededException(SerializationInfo info, StreamingContext context);
}
public class Umbraco.Core.Persistence.FaultHandling.RetryPolicy : object {
    public static RetryPolicy NoRetry;
    public static RetryPolicy DefaultFixed;
    public static RetryPolicy DefaultProgressive;
    public static RetryPolicy DefaultExponential;
    [CompilerGeneratedAttribute]
private EventHandler`1<RetryingEventArgs> Retrying;
    [CompilerGeneratedAttribute]
private RetryStrategy <RetryStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransientErrorDetectionStrategy <ErrorDetectionStrategy>k__BackingField;
    public RetryStrategy RetryStrategy { get; private set; }
    public ITransientErrorDetectionStrategy ErrorDetectionStrategy { get; private set; }
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan retryInterval);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    private static RetryPolicy();
    [CompilerGeneratedAttribute]
public void add_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Retrying(EventHandler`1<RetryingEventArgs> value);
    [CompilerGeneratedAttribute]
public RetryStrategy get_RetryStrategy();
    [CompilerGeneratedAttribute]
private void set_RetryStrategy(RetryStrategy value);
    [CompilerGeneratedAttribute]
public ITransientErrorDetectionStrategy get_ErrorDetectionStrategy();
    [CompilerGeneratedAttribute]
private void set_ErrorDetectionStrategy(ITransientErrorDetectionStrategy value);
    public virtual void ExecuteAction(Action action);
    public virtual TResult ExecuteAction(Func`1<TResult> func);
    protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay);
}
public static class Umbraco.Core.Persistence.FaultHandling.RetryPolicyFactory : object {
    public static RetryPolicy GetDefaultSqlConnectionRetryPolicyByConnectionString(string connectionString);
    public static RetryPolicy GetDefaultSqlConnectionRetryPolicy();
    public static RetryPolicy GetDefaultSqlAzureConnectionRetryPolicy();
    public static RetryPolicy GetDefaultSqlCommandRetryPolicyByConnectionString(string connectionString);
    public static RetryPolicy GetDefaultSqlCommandRetryPolicy();
    public static RetryPolicy GetDefaultSqlAzureCommandRetryPolicy();
}
public abstract class Umbraco.Core.Persistence.FaultHandling.RetryStrategy : object {
    public static int DefaultClientRetryCount;
    public static TimeSpan DefaultClientBackoff;
    public static TimeSpan DefaultMaxBackoff;
    public static TimeSpan DefaultMinBackoff;
    public static TimeSpan DefaultRetryInterval;
    public static TimeSpan DefaultRetryIncrement;
    public static bool DefaultFirstFastRetry;
    public static RetryStrategy NoRetry;
    public static RetryStrategy DefaultFixed;
    public static RetryStrategy DefaultProgressive;
    public static RetryStrategy DefaultExponential;
    [CompilerGeneratedAttribute]
private bool <FastFirstRetry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool FastFirstRetry { get; public set; }
    public string Name { get; private set; }
    protected RetryStrategy(string name, bool firstFastRetry);
    private static RetryStrategy();
    [CompilerGeneratedAttribute]
public bool get_FastFirstRetry();
    [CompilerGeneratedAttribute]
public void set_FastFirstRetry(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public abstract virtual ShouldRetry GetShouldRetry();
}
public class Umbraco.Core.Persistence.FaultHandling.ShouldRetry : MulticastDelegate {
    public ShouldRetry(object object, IntPtr method);
    public virtual bool Invoke(int retryCount, Exception lastException, TimeSpan& delay);
    public virtual IAsyncResult BeginInvoke(int retryCount, Exception lastException, TimeSpan& delay, AsyncCallback callback, object object);
    public virtual bool EndInvoke(TimeSpan& delay, IAsyncResult result);
}
public class Umbraco.Core.Persistence.FaultHandling.Strategies.ExponentialBackoff : RetryStrategy {
    private int retryCount;
    private TimeSpan minBackoff;
    private TimeSpan maxBackoff;
    private TimeSpan deltaBackoff;
    public ExponentialBackoff(int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoff(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff);
    public ExponentialBackoff(string name, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__8_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
public class Umbraco.Core.Persistence.FaultHandling.Strategies.FixedInterval : RetryStrategy {
    private int retryCount;
    private TimeSpan retryInterval;
    public FixedInterval(int retryCount);
    public FixedInterval(int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval);
    public FixedInterval(string name, int retryCount, TimeSpan retryInterval, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__7_1(int currentRetryCount, Exception lastException, TimeSpan& interval);
}
public class Umbraco.Core.Persistence.FaultHandling.Strategies.Incremental : RetryStrategy {
    private int retryCount;
    private TimeSpan initialInterval;
    private TimeSpan increment;
    public Incremental(int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment);
    public Incremental(string name, int retryCount, TimeSpan initialInterval, TimeSpan increment, bool firstFastRetry);
    public virtual ShouldRetry GetShouldRetry();
    [CompilerGeneratedAttribute]
private bool <GetShouldRetry>b__7_0(int currentRetryCount, Exception lastException, TimeSpan& retryInterval);
}
public class Umbraco.Core.Persistence.FaultHandling.Strategies.NetworkConnectivityErrorDetectionStrategy : object {
    public sealed virtual bool IsTransient(Exception ex);
}
public class Umbraco.Core.Persistence.FaultHandling.Strategies.SqlAzureTransientErrorDetectionStrategy : object {
    public sealed virtual bool IsTransient(Exception ex);
}
public enum Umbraco.Core.Persistence.FaultHandling.ThrottledResourceType : Enum {
    public int value__;
    public static ThrottledResourceType PhysicalDatabaseSpace;
    public static ThrottledResourceType PhysicalLogSpace;
    public static ThrottledResourceType LogWriteIoDelay;
    public static ThrottledResourceType DataReadIoDelay;
    public static ThrottledResourceType Cpu;
    public static ThrottledResourceType DatabaseSize;
    public static ThrottledResourceType WorkerThreads;
    public static ThrottledResourceType Internal;
    public static ThrottledResourceType Unknown;
}
public class Umbraco.Core.Persistence.FaultHandling.ThrottlingCondition : object {
    public static int ThrottlingErrorNumber;
    private IList`1<Tuple`2<ThrottledResourceType, ThrottlingType>> throttledResources;
    private static Regex sqlErrorCodeRegEx;
    [CompilerGeneratedAttribute]
private ThrottlingMode <ThrottlingMode>k__BackingField;
    public static ThrottlingCondition Unknown { get; }
    public ThrottlingMode ThrottlingMode { get; private set; }
    public IEnumerable`1<Tuple`2<ThrottledResourceType, ThrottlingType>> ThrottledResources { get; }
    public bool IsThrottledOnDataSpace { get; }
    public bool IsThrottledOnLogSpace { get; }
    public bool IsThrottledOnLogWrite { get; }
    public bool IsThrottledOnDataRead { get; }
    public bool IsThrottledOnCpu { get; }
    public bool IsThrottledOnDatabaseSize { get; }
    public bool IsThrottledOnWorkerThreads { get; }
    public bool IsUnknown { get; }
    private static ThrottlingCondition();
    public static ThrottlingCondition get_Unknown();
    [CompilerGeneratedAttribute]
public ThrottlingMode get_ThrottlingMode();
    [CompilerGeneratedAttribute]
private void set_ThrottlingMode(ThrottlingMode value);
    public IEnumerable`1<Tuple`2<ThrottledResourceType, ThrottlingType>> get_ThrottledResources();
    public bool get_IsThrottledOnDataSpace();
    public bool get_IsThrottledOnLogSpace();
    public bool get_IsThrottledOnLogWrite();
    public bool get_IsThrottledOnDataRead();
    public bool get_IsThrottledOnCpu();
    public bool get_IsThrottledOnDatabaseSize();
    public bool get_IsThrottledOnWorkerThreads();
    public bool get_IsUnknown();
    public static ThrottlingCondition FromException(SqlException ex);
    public static ThrottlingCondition FromError(SqlError error);
    public static ThrottlingCondition FromReasonCode(int reasonCode);
    public virtual string ToString();
}
public enum Umbraco.Core.Persistence.FaultHandling.ThrottlingMode : Enum {
    public int value__;
    public static ThrottlingMode NoThrottling;
    public static ThrottlingMode RejectUpdateInsert;
    public static ThrottlingMode RejectAllWrites;
    public static ThrottlingMode RejectAll;
    public static ThrottlingMode Unknown;
}
public enum Umbraco.Core.Persistence.FaultHandling.ThrottlingType : Enum {
    public int value__;
    public static ThrottlingType None;
    public static ThrottlingType Soft;
    public static ThrottlingType Hard;
    public static ThrottlingType Unknown;
}
public interface Umbraco.Core.Persistence.IQueryRepository`1 {
    public abstract virtual IEnumerable`1<TEntity> Get(IQuery`1<TEntity> query);
    public abstract virtual int Count(IQuery`1<TEntity> query);
}
public interface Umbraco.Core.Persistence.IReadRepository`2 {
    public abstract virtual TEntity Get(TId id);
    public abstract virtual IEnumerable`1<TEntity> GetMany(TId[] ids);
    public abstract virtual bool Exists(TId id);
}
public interface Umbraco.Core.Persistence.IReadWriteQueryRepository`2 {
}
public interface Umbraco.Core.Persistence.IRepository {
}
public interface Umbraco.Core.Persistence.ISqlContext {
    public ISqlSyntaxProvider SqlSyntax { get; }
    public DatabaseType DatabaseType { get; }
    public SqlTemplates Templates { get; }
    public IPocoDataFactory PocoDataFactory { get; }
    public IMapperCollection Mappers { get; }
    public abstract virtual ISqlSyntaxProvider get_SqlSyntax();
    public abstract virtual DatabaseType get_DatabaseType();
    public abstract virtual Sql`1<ISqlContext> Sql();
    public abstract virtual Sql`1<ISqlContext> Sql(string sql, Object[] args);
    public abstract virtual IQuery`1<T> Query();
    public abstract virtual SqlTemplates get_Templates();
    public abstract virtual IPocoDataFactory get_PocoDataFactory();
    public abstract virtual IMapperCollection get_Mappers();
}
public interface Umbraco.Core.Persistence.IUmbracoDatabase {
    public ISqlContext SqlContext { get; }
    public string InstanceId { get; }
    public bool InTransaction { get; }
    public abstract virtual ISqlContext get_SqlContext();
    public abstract virtual string get_InstanceId();
    public abstract virtual bool get_InTransaction();
    public abstract virtual void AddParameter(DbCommand cmd, PocoColumn column, object value);
}
public interface Umbraco.Core.Persistence.IUmbracoDatabaseFactory {
    public bool Configured { get; }
    public bool Initialized { get; }
    public string ConnectionString { get; }
    public string ProviderName { get; }
    public bool CanConnect { get; }
    public ISqlContext SqlContext { get; }
    public abstract virtual IUmbracoDatabase CreateDatabase();
    public abstract virtual bool get_Configured();
    public abstract virtual bool get_Initialized();
    public abstract virtual string get_ConnectionString();
    public abstract virtual string get_ProviderName();
    public abstract virtual bool get_CanConnect();
    public abstract virtual void Configure(string connectionString, string providerName);
    public abstract virtual ISqlContext get_SqlContext();
    public abstract virtual void ConfigureForUpgrade();
}
public interface Umbraco.Core.Persistence.IWriteRepository`1 {
    public abstract virtual void Save(TEntity entity);
    public abstract virtual void Delete(TEntity entity);
}
internal class Umbraco.Core.Persistence.LocalDb : object {
    private int _version;
    private bool _hasVersion;
    private string _exe;
    public int Version { get; }
    public bool IsAvailable { get; }
    public int get_Version();
    private void EnsureVersion();
    public bool get_IsAvailable();
    private void EnsureAvailable();
    private void DetectVersion();
    public String[] GetInstances();
    public bool InstanceExists(string instanceName);
    public bool CreateInstance(string instanceName);
    public bool DropInstance(string instanceName);
    public bool StopInstance(string instanceName);
    public bool StartInstance(string instanceName);
    public Instance GetInstance(string instanceName);
    public void CopyDatabaseFiles(string databaseName, string filesPath, string targetDatabaseName, string targetFilesPath, string sourceExtension, string targetExtension, bool overwrite, bool delete);
    public bool DatabaseFilesExist(string databaseName, string filesPath, string extension);
    private static void GetDatabaseFiles(string databaseName, string filesPath, String& logName, String& baseFilename, String& baseLogFilename, String& mdfFilename, String& ldfFilename);
    private int ExecuteSqlLocalDb(string args, String& output, String& error);
    private static string QuotedName(string name, char quote);
}
[MapperForAttribute("Umbraco.Core.Models.PublicAccessEntry")]
public class Umbraco.Core.Persistence.Mappers.AccessMapper : BaseMapper {
    public AccessMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.IAuditEntry")]
[MapperForAttribute("Umbraco.Core.Models.AuditEntry")]
public class Umbraco.Core.Persistence.Mappers.AuditEntryMapper : BaseMapper {
    public AuditEntryMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.AuditItem")]
[MapperForAttribute("Umbraco.Core.Models.IAuditItem")]
public class Umbraco.Core.Persistence.Mappers.AuditItemMapper : BaseMapper {
    public AuditItemMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
public abstract class Umbraco.Core.Persistence.Mappers.BaseMapper : object {
    private Lazy`1<ISqlContext> _sqlContext;
    private object _definedLock;
    private ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> _maps;
    private ISqlSyntaxProvider _sqlSyntax;
    private bool _defined;
    protected BaseMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected abstract virtual void DefineMaps();
    internal string Map(string propertyName);
    protected void DefineMap(string sourceName, string targetName);
}
[MapperForAttribute("Umbraco.Core.Models.IConsent")]
[MapperForAttribute("Umbraco.Core.Models.Consent")]
public class Umbraco.Core.Persistence.Mappers.ConsentMapper : BaseMapper {
    public ConsentMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Content")]
[MapperForAttribute("Umbraco.Core.Models.IContent")]
public class Umbraco.Core.Persistence.Mappers.ContentMapper : BaseMapper {
    public ContentMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.ContentType")]
[MapperForAttribute("Umbraco.Core.Models.IContentType")]
public class Umbraco.Core.Persistence.Mappers.ContentTypeMapper : BaseMapper {
    public ContentTypeMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.DataType")]
[MapperForAttribute("Umbraco.Core.Models.IDataType")]
public class Umbraco.Core.Persistence.Mappers.DataTypeMapper : BaseMapper {
    public DataTypeMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.DictionaryItem")]
[MapperForAttribute("Umbraco.Core.Models.IDictionaryItem")]
public class Umbraco.Core.Persistence.Mappers.DictionaryMapper : BaseMapper {
    public DictionaryMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.DictionaryTranslation")]
[MapperForAttribute("Umbraco.Core.Models.IDictionaryTranslation")]
public class Umbraco.Core.Persistence.Mappers.DictionaryTranslationMapper : BaseMapper {
    public DictionaryTranslationMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.IDomain")]
[MapperForAttribute("Umbraco.Core.Models.UmbracoDomain")]
public class Umbraco.Core.Persistence.Mappers.DomainMapper : BaseMapper {
    public DomainMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Identity.IIdentityUserLogin")]
[MapperForAttribute("Umbraco.Core.Models.Identity.IdentityUserLogin")]
public class Umbraco.Core.Persistence.Mappers.ExternalLoginMapper : BaseMapper {
    public ExternalLoginMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[DefaultMemberAttribute("Item")]
public interface Umbraco.Core.Persistence.Mappers.IMapperCollection {
    public BaseMapper Item { get; }
    public abstract virtual BaseMapper get_Item(Type type);
}
[MapperForAttribute("Umbraco.Core.Models.ILanguage")]
[MapperForAttribute("Umbraco.Core.Models.Language")]
public class Umbraco.Core.Persistence.Mappers.LanguageMapper : BaseMapper {
    public LanguageMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Macro")]
[MapperForAttribute("Umbraco.Core.Models.IMacro")]
internal class Umbraco.Core.Persistence.Mappers.MacroMapper : BaseMapper {
    public MacroMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[DefaultMemberAttribute("Item")]
public class Umbraco.Core.Persistence.Mappers.MapperCollection : BuilderCollectionBase`1<BaseMapper> {
    private ConcurrentDictionary`2<Type, BaseMapper> _index;
    public BaseMapper Item { get; }
    public MapperCollection(IEnumerable`1<BaseMapper> items);
    public sealed virtual BaseMapper get_Item(Type type);
}
public class Umbraco.Core.Persistence.Mappers.MapperCollectionBuilder : SetCollectionBuilderBase`3<MapperCollectionBuilder, MapperCollection, BaseMapper> {
    private ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> _maps;
    protected MapperCollectionBuilder This { get; }
    protected virtual MapperCollectionBuilder get_This();
    public virtual void RegisterWith(IRegister register);
    protected virtual BaseMapper CreateItem(IFactory factory, Type itemType);
    public MapperCollectionBuilder AddCoreMappers();
}
[AttributeUsageAttribute("4")]
internal class Umbraco.Core.Persistence.Mappers.MapperForAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <EntityType>k__BackingField;
    public Type EntityType { get; private set; }
    public MapperForAttribute(Type entityType);
    [CompilerGeneratedAttribute]
public Type get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(Type value);
}
[MapperForAttribute("Umbraco.Core.Models.IMedia")]
[MapperForAttribute("Umbraco.Core.Models.Media")]
public class Umbraco.Core.Persistence.Mappers.MediaMapper : BaseMapper {
    public MediaMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.IMediaType")]
[MapperForAttribute("Umbraco.Core.Models.MediaType")]
public class Umbraco.Core.Persistence.Mappers.MediaTypeMapper : BaseMapper {
    public MediaTypeMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.IMemberGroup")]
[MapperForAttribute("Umbraco.Core.Models.MemberGroup")]
public class Umbraco.Core.Persistence.Mappers.MemberGroupMapper : BaseMapper {
    public MemberGroupMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.IMember")]
[MapperForAttribute("Umbraco.Core.Models.Member")]
public class Umbraco.Core.Persistence.Mappers.MemberMapper : BaseMapper {
    public MemberMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.MemberType")]
[MapperForAttribute("Umbraco.Core.Models.IMemberType")]
public class Umbraco.Core.Persistence.Mappers.MemberTypeMapper : BaseMapper {
    public MemberTypeMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
public class Umbraco.Core.Persistence.Mappers.PocoMapper : DefaultMapper {
    public virtual Func`2<object, object> GetToDbConverter(Type destType, MemberInfo sourceMemberInfo);
}
[MapperForAttribute("Umbraco.Core.Models.PropertyGroup")]
public class Umbraco.Core.Persistence.Mappers.PropertyGroupMapper : BaseMapper {
    public PropertyGroupMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Property")]
public class Umbraco.Core.Persistence.Mappers.PropertyMapper : BaseMapper {
    public PropertyMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.PropertyType")]
public class Umbraco.Core.Persistence.Mappers.PropertyTypeMapper : BaseMapper {
    public PropertyTypeMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.IRelation")]
[MapperForAttribute("Umbraco.Core.Models.Relation")]
public class Umbraco.Core.Persistence.Mappers.RelationMapper : BaseMapper {
    public RelationMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.RelationType")]
[MapperForAttribute("Umbraco.Core.Models.IRelationType")]
public class Umbraco.Core.Persistence.Mappers.RelationTypeMapper : BaseMapper {
    public RelationTypeMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.ServerRegistration")]
[MapperForAttribute("Umbraco.Core.Models.IServerRegistration")]
internal class Umbraco.Core.Persistence.Mappers.ServerRegistrationMapper : BaseMapper {
    public ServerRegistrationMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.ISimpleContentType")]
[MapperForAttribute("Umbraco.Core.Models.SimpleContentType")]
public class Umbraco.Core.Persistence.Mappers.SimpleContentTypeMapper : BaseMapper {
    public SimpleContentTypeMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Tag")]
[MapperForAttribute("Umbraco.Core.Models.ITag")]
public class Umbraco.Core.Persistence.Mappers.TagMapper : BaseMapper {
    public TagMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Template")]
[MapperForAttribute("Umbraco.Core.Models.ITemplate")]
public class Umbraco.Core.Persistence.Mappers.TemplateMapper : BaseMapper {
    public TemplateMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Entities.IUmbracoEntity")]
public class Umbraco.Core.Persistence.Mappers.UmbracoEntityMapper : BaseMapper {
    public UmbracoEntityMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Membership.IUserGroup")]
[MapperForAttribute("Umbraco.Core.Models.Membership.UserGroup")]
public class Umbraco.Core.Persistence.Mappers.UserGroupMapper : BaseMapper {
    public UserGroupMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[MapperForAttribute("Umbraco.Core.Models.Membership.IUser")]
[MapperForAttribute("Umbraco.Core.Models.Membership.User")]
public class Umbraco.Core.Persistence.Mappers.UserMapper : BaseMapper {
    public UserMapper(Lazy`1<ISqlContext> sqlContext, ConcurrentDictionary`2<Type, ConcurrentDictionary`2<string, string>> maps);
    protected virtual void DefineMaps();
}
[ExtensionAttribute]
public static class Umbraco.Core.Persistence.NPocoDatabaseExtensions : object {
    public static void ConfigureNPocoBulkExtensions();
    [ExtensionAttribute]
public static void BulkInsertRecordsWithTransaction(IUmbracoDatabase database, IEnumerable`1<T> records, bool useNativeBulkInsert);
    [ExtensionAttribute]
public static int BulkInsertRecords(IUmbracoDatabase database, IEnumerable`1<T> records, bool useNativeBulkInsert);
    private static int BulkInsertRecordsWithCommands(IUmbracoDatabase database, T[] records);
    [ExtensionAttribute]
internal static IDbCommand[] GenerateBulkInsertCommands(IUmbracoDatabase database, T[] records);
    private static bool IncludeColumn(PocoData pocoData, KeyValuePair`2<string, PocoColumn> column);
    internal static int BulkInsertRecordsSqlCe(IUmbracoDatabase database, PocoData pocoData, IEnumerable`1<T> records);
    internal static int BulkInsertRecordsSqlServer(IUmbracoDatabase database, PocoData pocoData, IEnumerable`1<T> records);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.NPocoDatabaseExtensions/<QueryPaged>d__8`1")]
[ExtensionAttribute]
internal static IEnumerable`1<T> QueryPaged(IDatabase database, long pageSize, Sql sql, Sql sqlCount);
    [ExtensionAttribute]
internal static IEnumerable`1<T> QueryPaged(IDatabase database, long pageSize, Sql sql);
    [ExtensionAttribute]
internal static RecordPersistenceType InsertOrUpdate(IUmbracoDatabase db, T poco);
    [ExtensionAttribute]
internal static RecordPersistenceType InsertOrUpdate(IUmbracoDatabase db, T poco, string updateCommand, object updateArgs);
    public static string EscapeAtSymbols(string value);
    private static TConnection GetTypedConnection(IDbConnection connection);
    private static TTransaction GetTypedTransaction(IDbTransaction transaction);
    private static TCommand GetTypedCommand(IDbCommand command);
    [ExtensionAttribute]
public static void TruncateTable(IDatabase db, ISqlSyntaxProvider sqlSyntax, string tableName);
    [ExtensionAttribute]
public static IsolationLevel GetCurrentTransactionIsolationLevel(IDatabase database);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> FetchByGroups(IDatabase db, IEnumerable`1<TSource> source, int groupSize, Func`2<IEnumerable`1<TSource>, Sql`1<ISqlContext>> sqlFactory);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.NPocoDatabaseTypeExtensions : object {
    [ExtensionAttribute]
public static bool IsSqlServer(DatabaseType databaseType);
    [ExtensionAttribute]
public static bool IsSqlServer2008OrLater(DatabaseType databaseType);
    [ExtensionAttribute]
public static bool IsSqlServer2012OrLater(DatabaseType databaseType);
    [ExtensionAttribute]
public static bool IsSqlCe(DatabaseType databaseType);
    [ExtensionAttribute]
public static bool IsSqlServerOrCe(DatabaseType databaseType);
}
[ExtensionAttribute]
public static class Umbraco.Core.Persistence.NPocoSqlExtensions : object {
    private static SqlInspectionUtilities _sqlInspector;
    private static SqlInspectionUtilities SqlInspector { get; }
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Where(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, bool>> predicate, string alias);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Where(Sql`1<ISqlContext> sql, Expression`1<Func`3<TDto1, TDto2, bool>> predicate, string alias1, string alias2);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> WhereIn(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field, IEnumerable values);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> WhereIn(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field, Sql`1<ISqlContext> values);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> WhereNotIn(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field, IEnumerable values);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> WhereNotIn(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field, Sql`1<ISqlContext> values);
    [ExtensionAttribute]
public static Sql WhereAnyIn(Sql`1<ISqlContext> sql, Expression`1[] fields, IEnumerable values);
    [ExtensionAttribute]
private static Sql`1<ISqlContext> WhereIn(Sql`1<ISqlContext> sql, Expression`1<Func`2<T, object>> fieldSelector, Sql valuesSql, bool not);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> WhereAny(Sql`1<ISqlContext> sql, Func`2[] predicates);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> WhereNotNull(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field, string tableAlias);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> WhereNull(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field, string tableAlias, bool not);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> From(Sql`1<ISqlContext> sql, string alias);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> OrderBy(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> OrderBy(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> OrderByDescending(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> OrderByDescending(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> OrderByDescending(Sql`1<ISqlContext> sql, String[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> GroupBy(Sql`1<ISqlContext> sql, Expression`1<Func`2<TDto, object>> field);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> GroupBy(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndBy(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndByDescending(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> CrossJoin(Sql`1<ISqlContext> sql, string alias);
    [ExtensionAttribute]
public static SqlJoinClause`1<ISqlContext, ISqlContext> InnerJoin(Sql`1<ISqlContext> sql, string alias);
    [ExtensionAttribute]
public static SqlJoinClause`1<ISqlContext, ISqlContext> LeftJoin(Sql`1<ISqlContext> sql, string alias);
    [ExtensionAttribute]
public static SqlJoinClause`1<ISqlContext, ISqlContext> LeftJoin(Sql`1<ISqlContext> sql, Func`2<Sql`1<ISqlContext>, Sql`1<ISqlContext>> nestedJoin, string alias);
    [ExtensionAttribute]
public static SqlJoinClause`1<ISqlContext, ISqlContext> RightJoin(Sql`1<ISqlContext> sql, string alias);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> On(SqlJoinClause`1<ISqlContext, ISqlContext> sqlJoin, Expression`1<Func`2<TLeft, object>> leftField, Expression`1<Func`2<TRight, object>> rightField);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> On(SqlJoinClause`1<ISqlContext, ISqlContext> sqlJoin, Func`2<Sql`1<ISqlContext>, Sql`1<ISqlContext>> on);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> On(SqlJoinClause`1<ISqlContext, ISqlContext> sqlJoin, Expression`1<Func`3<TDto1, TDto2, bool>> predicate, string aliasLeft, string aliasRight);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> On(SqlJoinClause`1<ISqlContext, ISqlContext> sqlJoin, Expression`1<Func`4<TDto1, TDto2, TDto3, bool>> predicate, string aliasLeft, string aliasRight, string aliasOther);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> SelectTop(Sql`1<ISqlContext> sql, int count);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> SelectCount(Sql`1<ISqlContext> sql, string alias);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> SelectCount(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> SelectCount(Sql`1<ISqlContext> sql, string alias, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> SelectAll(Sql`1<ISqlContext> sql);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Select(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> SelectDistinct(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Select(Sql`1<ISqlContext> sql, string tableAlias, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndSelect(Sql`1<ISqlContext> sql, String[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndSelect(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndSelect(Sql`1<ISqlContext> sql, string tableAlias, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndSelectCount(Sql`1<ISqlContext> sql, string alias);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndSelectCount(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> AndSelectCount(Sql`1<ISqlContext> sql, string alias, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Select(Sql`1<ISqlContext> sql, Func`2<SqlRef`1<TDto>, SqlRef`1<TDto>> reference);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Select(Sql`1<ISqlContext> sql, Func`2<SqlRef`1<TDto>, SqlRef`1<TDto>> reference, Func`2<Sql`1<ISqlContext>, Sql`1<ISqlContext>> sqlexpr);
    [ExtensionAttribute]
public static string Columns(Sql`1<ISqlContext> sql, Expression`1[] fields);
    [ExtensionAttribute]
public static string Columns(Sql`1<ISqlContext> sql, string alias, Expression`1[] fields);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Delete(Sql`1<ISqlContext> sql);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Delete(Sql`1<ISqlContext> sql);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Update(Sql`1<ISqlContext> sql);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Update(Sql`1<ISqlContext> sql);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> Update(Sql`1<ISqlContext> sql, Func`2<SqlUpd`1<TDto>, SqlUpd`1<TDto>> updates);
    [ExtensionAttribute]
public static Sql`1<ISqlContext> ForUpdate(Sql`1<ISqlContext> sql);
    private static SqlInspectionUtilities get_SqlInspector();
    [ExtensionAttribute]
internal static string GetAliasedField(Sql`1<ISqlContext> sql, string field);
    [ExtensionAttribute]
private static String[] GetColumns(Sql`1<ISqlContext> sql, string tableAlias, string referenceName, Expression`1[] columnExpressions, bool withAlias);
    private static string GetColumn(DatabaseType dbType, string tableName, string columnName, string columnAlias, string referenceName);
    [ExtensionAttribute]
private static string GetTableName(Type type);
    [ExtensionAttribute]
private static string GetColumnName(PropertyInfo column);
    [ExtensionAttribute]
internal static string ToText(Sql sql);
    [ExtensionAttribute]
internal static void ToText(Sql sql, StringBuilder text);
    internal static void ToText(string sql, Object[] arguments, StringBuilder text);
}
internal class Umbraco.Core.Persistence.PocoDataDataReader`2 : BulkDataReader {
    private MicrosoftSqlSyntaxProviderBase`1<TSyntax> _sqlSyntaxProvider;
    private TableDefinition _tableDefinition;
    private PocoColumn[] _readerColumns;
    private IEnumerator`1<T> _enumerator;
    private ColumnDefinition[] _columnDefinitions;
    private int _recordsAffected;
    protected string SchemaName { get; }
    protected string TableName { get; }
    public int RecordsAffected { get; }
    public PocoDataDataReader`2(IEnumerable`1<T> dataSource, PocoData pd, MicrosoftSqlSyntaxProviderBase`1<TSyntax> sqlSyntaxProvider);
    protected virtual string get_SchemaName();
    protected virtual string get_TableName();
    public virtual int get_RecordsAffected();
    protected virtual void AddSchemaTableRows();
    public virtual object GetValue(int i);
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
}
internal class Umbraco.Core.Persistence.Querying.CachedExpression : Expression {
    private string _visitResult;
    [CompilerGeneratedAttribute]
private Expression <InnerExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Visited>k__BackingField;
    public Expression InnerExpression { get; private set; }
    public string VisitResult { get; public set; }
    public bool Visited { get; private set; }
    [CompilerGeneratedAttribute]
public Expression get_InnerExpression();
    [CompilerGeneratedAttribute]
private void set_InnerExpression(Expression value);
    public string get_VisitResult();
    public void set_VisitResult(string value);
    [CompilerGeneratedAttribute]
public bool get_Visited();
    [CompilerGeneratedAttribute]
private void set_Visited(bool value);
    public void Wrap(Expression expression);
}
internal abstract class Umbraco.Core.Persistence.Querying.ExpressionVisitorBase : object {
    [CompilerGeneratedAttribute]
private bool <Visited>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlSyntaxProvider <SqlSyntax>k__BackingField;
    protected List`1<object> SqlParameters;
    protected bool Visited { get; protected set; }
    protected ISqlSyntaxProvider SqlSyntax { get; }
    protected ExpressionVisitorBase(ISqlSyntaxProvider sqlSyntax);
    [CompilerGeneratedAttribute]
protected bool get_Visited();
    [CompilerGeneratedAttribute]
protected void set_Visited(bool value);
    [CompilerGeneratedAttribute]
protected ISqlSyntaxProvider get_SqlSyntax();
    public Object[] GetSqlParameters();
    public virtual string Visit(Expression expression);
    protected abstract virtual string VisitMemberAccess(MemberExpression m);
    protected virtual string VisitLambda(LambdaExpression lambda);
    protected virtual string VisitBinary(BinaryExpression b);
    protected virtual List`1<object> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    protected virtual string VisitNew(NewExpression newExpression);
    protected virtual string VisitParameter(ParameterExpression p);
    protected virtual string VisitConstant(ConstantExpression c);
    protected virtual string VisitUnary(UnaryExpression u);
    private string VisitNot(Expression exp);
    private string VisitNotNot(Expression exp);
    protected virtual string VisitNewArray(NewArrayExpression na);
    protected virtual List`1<object> VisitNewArrayFromExpressionList(NewArrayExpression na);
    protected virtual string BindOperant(ExpressionType e);
    protected virtual string VisitMethodCall(MethodCallExpression m);
    public virtual string GetQuotedTableName(string tableName);
    public virtual string GetQuotedColumnName(string columnName);
    public virtual string GetQuotedName(string name);
    protected string HandleStringComparison(string col, string val, string verb, TextColumnType columnType);
    public virtual string EscapeParam(object paramValue, ISqlSyntaxProvider sqlSyntax);
    protected virtual string RemoveQuote(string exp);
}
public interface Umbraco.Core.Persistence.Querying.IQuery`1 {
    public abstract virtual IQuery`1<T> Where(Expression`1<Func`2<T, bool>> predicate);
    public abstract virtual IEnumerable`1<Tuple`2<string, Object[]>> GetWhereClauses();
    public abstract virtual IQuery`1<T> WhereIn(Expression`1<Func`2<T, object>> fieldSelector, IEnumerable values);
    public abstract virtual IQuery`1<T> WhereAny(IEnumerable`1<Expression`1<Func`2<T, bool>>> predicates);
}
internal class Umbraco.Core.Persistence.Querying.ModelToSqlExpressionVisitor`1 : ExpressionVisitorBase {
    private IMapperCollection _mappers;
    private BaseMapper _mapper;
    public ModelToSqlExpressionVisitor`1(ISqlSyntaxProvider sqlSyntax, IMapperCollection mappers);
    protected virtual string VisitMemberAccess(MemberExpression m);
    private static bool EndsWithConstant(MemberExpression m);
}
internal class Umbraco.Core.Persistence.Querying.PocoToSqlExpressionVisitor`1 : ExpressionVisitorBase {
    private PocoData _pd;
    private string _alias;
    public PocoToSqlExpressionVisitor`1(ISqlContext sqlContext, string alias);
    protected virtual string VisitMethodCall(MethodCallExpression m);
    protected virtual string VisitMemberAccess(MemberExpression m);
    protected virtual string GetFieldName(PocoData pocoData, string name, string alias);
}
internal class Umbraco.Core.Persistence.Querying.PocoToSqlExpressionVisitor`2 : ExpressionVisitorBase {
    private PocoData _pocoData1;
    private PocoData _pocoData2;
    private string _alias1;
    private string _alias2;
    private string _parameterName1;
    private string _parameterName2;
    public PocoToSqlExpressionVisitor`2(ISqlContext sqlContext, string alias1, string alias2);
    protected virtual string VisitLambda(LambdaExpression lambda);
    protected virtual string VisitMemberAccess(MemberExpression m);
    protected virtual string GetFieldName(PocoData pocoData, string name, string alias);
}
internal class Umbraco.Core.Persistence.Querying.PocoToSqlExpressionVisitor`3 : ExpressionVisitorBase {
    private PocoData _pocoData1;
    private PocoData _pocoData2;
    private PocoData _pocoData3;
    private string _alias1;
    private string _alias2;
    private string _alias3;
    private string _parameterName1;
    private string _parameterName2;
    private string _parameterName3;
    public PocoToSqlExpressionVisitor`3(ISqlContext sqlContext, string alias1, string alias2, string alias3);
    protected virtual string VisitLambda(LambdaExpression lambda);
    protected virtual string VisitMemberAccess(MemberExpression m);
    protected virtual string GetFieldName(PocoData pocoData, string name, string alias);
}
public class Umbraco.Core.Persistence.Querying.Query`1 : object {
    private ISqlContext _sqlContext;
    private List`1<Tuple`2<string, Object[]>> _wheres;
    public Query`1(ISqlContext sqlContext);
    public virtual IQuery`1<T> Where(Expression`1<Func`2<T, bool>> predicate);
    public virtual IQuery`1<T> WhereIn(Expression`1<Func`2<T, object>> fieldSelector, IEnumerable values);
    public virtual IQuery`1<T> WhereAny(IEnumerable`1<Expression`1<Func`2<T, bool>>> predicates);
    public sealed virtual IEnumerable`1<Tuple`2<string, Object[]>> GetWhereClauses();
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.Querying.QueryExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Tuple`2<string, Object[]>> GetWhereClauses(IQuery`1<T> query);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.Querying.SqlExpressionExtensions : object {
    [ExtensionAttribute]
public static bool SqlNullableEquals(Nullable`1<T> value, Nullable`1<T> other, T fallbackValue);
    [ExtensionAttribute]
public static bool SqlIn(IEnumerable`1<T> collection, T item);
    [ExtensionAttribute]
public static bool SqlWildcard(string str, string txt, TextColumnType columnType);
    [ExtensionAttribute]
public static bool SqlContains(string str, string txt, TextColumnType columnType);
    [ExtensionAttribute]
public static bool SqlEquals(string str, string txt, TextColumnType columnType);
    [ExtensionAttribute]
public static bool SqlStartsWith(string str, string txt, TextColumnType columnType);
    [ExtensionAttribute]
public static bool SqlEndsWith(string str, string txt, TextColumnType columnType);
}
internal class Umbraco.Core.Persistence.Querying.SqlTranslator`1 : object {
    private Sql`1<ISqlContext> _sql;
    public SqlTranslator`1(Sql`1<ISqlContext> sql, IQuery`1<T> query);
    public Sql`1<ISqlContext> Translate();
    public virtual string ToString();
}
public enum Umbraco.Core.Persistence.Querying.StringPropertyMatchType : Enum {
    public int value__;
    public static StringPropertyMatchType Exact;
    public static StringPropertyMatchType Contains;
    public static StringPropertyMatchType StartsWith;
    public static StringPropertyMatchType EndsWith;
    public static StringPropertyMatchType Wildcard;
}
public enum Umbraco.Core.Persistence.Querying.TextColumnType : Enum {
    public int value__;
    public static TextColumnType NVarchar;
    public static TextColumnType NText;
}
public enum Umbraco.Core.Persistence.Querying.ValuePropertyMatchType : Enum {
    public int value__;
    public static ValuePropertyMatchType Exact;
    public static ValuePropertyMatchType GreaterThan;
    public static ValuePropertyMatchType LessThan;
    public static ValuePropertyMatchType GreaterThanOrEqualTo;
    public static ValuePropertyMatchType LessThanOrEqualTo;
}
internal enum Umbraco.Core.Persistence.RecordPersistenceType : Enum {
    public int value__;
    public static RecordPersistenceType Insert;
    public static RecordPersistenceType Update;
    public static RecordPersistenceType Delete;
}
public interface Umbraco.Core.Persistence.Repositories.IAuditEntryRepository {
    public abstract virtual IEnumerable`1<IAuditEntry> GetPage(long pageIndex, int pageCount, Int64& records);
    public abstract virtual bool IsAvailable();
}
public interface Umbraco.Core.Persistence.Repositories.IAuditRepository {
    public abstract virtual void CleanLogs(int maximumAgeOfLogsInMinutes);
    public abstract virtual IEnumerable`1<IAuditItem> GetPagedResultsByQuery(IQuery`1<IAuditItem> query, long pageIndex, int pageSize, Int64& totalRecords, Direction orderDirection, AuditType[] auditTypeFilter, IQuery`1<IAuditItem> customFilter);
    public abstract virtual IEnumerable`1<IAuditItem> Get(AuditType type, IQuery`1<IAuditItem> query);
}
public interface Umbraco.Core.Persistence.Repositories.IConsentRepository {
    public abstract virtual void ClearCurrent(string source, string context, string action);
}
public interface Umbraco.Core.Persistence.Repositories.IContentRepository`2 {
    public int RecycleBinId { get; }
    public abstract virtual IEnumerable`1<TEntity> GetAllVersions(int nodeId);
    public abstract virtual IEnumerable`1<TEntity> GetAllVersionsSlim(int nodeId, int skip, int take);
    public abstract virtual IEnumerable`1<int> GetVersionIds(int id, int topRows);
    public abstract virtual TEntity GetVersion(int versionId);
    public abstract virtual void DeleteVersion(int versionId);
    public abstract virtual void DeleteVersions(int nodeId, DateTime versionDate);
    public abstract virtual int get_RecycleBinId();
    public abstract virtual IEnumerable`1<TEntity> GetRecycleBin();
    public abstract virtual int Count(string contentTypeAlias);
    public abstract virtual int CountChildren(int parentId, string contentTypeAlias);
    public abstract virtual int CountDescendants(int parentId, string contentTypeAlias);
    public abstract virtual IEnumerable`1<TEntity> GetPage(IQuery`1<TEntity> query, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<TEntity> filter, Ordering ordering);
    public abstract virtual ContentDataIntegrityReport CheckDataIntegrity(ContentDataIntegrityReportOptions options);
}
public interface Umbraco.Core.Persistence.Repositories.IContentTypeCommonRepository {
    public abstract virtual IEnumerable`1<IContentTypeComposition> GetAllTypes();
    public abstract virtual void ClearCache();
}
public interface Umbraco.Core.Persistence.Repositories.IContentTypeRepository {
    public abstract virtual IEnumerable`1<IContentType> GetByQuery(IQuery`1<PropertyType> query);
    public abstract virtual IEnumerable`1<string> GetAllPropertyTypeAliases();
    public abstract virtual IEnumerable`1<string> GetAllContentTypeAliases(Guid[] objectTypes);
    public abstract virtual IEnumerable`1<int> GetAllContentTypeIds(String[] aliases);
}
public interface Umbraco.Core.Persistence.Repositories.IContentTypeRepositoryBase`1 {
    public abstract virtual TItem Get(string alias);
    public abstract virtual IEnumerable`1<MoveEventInfo`1<TItem>> Move(TItem moving, EntityContainer container);
    public abstract virtual string GetUniqueAlias(string alias);
    public abstract virtual bool HasContainerInPath(string contentPath);
    public abstract virtual bool HasContainerInPath(Int32[] ids);
    public abstract virtual bool HasContentNodes(int id);
}
public interface Umbraco.Core.Persistence.Repositories.IDataTypeContainerRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IDataTypeRepository {
    public abstract virtual IEnumerable`1<MoveEventInfo`1<IDataType>> Move(IDataType toMove, EntityContainer container);
    public abstract virtual IReadOnlyDictionary`2<Udi, IEnumerable`1<string>> FindUsages(int id);
}
public interface Umbraco.Core.Persistence.Repositories.IDictionaryRepository {
    public abstract virtual IDictionaryItem Get(Guid uniqueId);
    public abstract virtual IDictionaryItem Get(string key);
    public abstract virtual IEnumerable`1<IDictionaryItem> GetDictionaryItemDescendants(Nullable`1<Guid> parentId);
    public abstract virtual Dictionary`2<string, Guid> GetDictionaryItemKeyMap();
}
public interface Umbraco.Core.Persistence.Repositories.IDocumentBlueprintRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IDocumentRepository {
    public abstract virtual void ClearSchedule(DateTime date);
    public abstract virtual void ClearSchedule(DateTime date, ContentScheduleAction action);
    public abstract virtual bool HasContentForExpiration(DateTime date);
    public abstract virtual bool HasContentForRelease(DateTime date);
    public abstract virtual IEnumerable`1<IContent> GetContentForExpiration(DateTime date);
    public abstract virtual IEnumerable`1<IContent> GetContentForRelease(DateTime date);
    public abstract virtual int CountPublished(string contentTypeAlias);
    public abstract virtual bool IsPathPublished(IContent content);
    public abstract virtual void ReplaceContentPermissions(EntityPermissionSet permissionSet);
    public abstract virtual void AssignEntityPermission(IContent entity, char permission, IEnumerable`1<int> groupIds);
    public abstract virtual EntityPermissionCollection GetPermissionsForEntity(int entityId);
    public abstract virtual void AddOrUpdatePermissions(ContentPermissionSet permission);
    public abstract virtual bool RecycleBinSmells();
}
public interface Umbraco.Core.Persistence.Repositories.IDocumentTypeContainerRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IDocumentVersionRepository {
    public abstract virtual IReadOnlyCollection`1<ContentVersionMeta> GetDocumentVersionsEligibleForCleanup();
    public abstract virtual IReadOnlyCollection`1<ContentVersionCleanupPolicySettings> GetCleanupPolicies();
    public abstract virtual IEnumerable`1<ContentVersionMeta> GetPagedItemsByContentId(int contentId, long pageIndex, int pageSize, Int64& totalRecords, Nullable`1<int> languageId);
    public abstract virtual void DeleteVersions(IEnumerable`1<int> versionIds);
    public abstract virtual void SetPreventCleanup(int versionId, bool preventCleanup);
    public abstract virtual ContentVersionMeta Get(int versionId);
}
public interface Umbraco.Core.Persistence.Repositories.IDomainRepository {
    public abstract virtual IDomain GetByName(string domainName);
    public abstract virtual bool Exists(string domainName);
    public abstract virtual IEnumerable`1<IDomain> GetAll(bool includeWildcards);
    public abstract virtual IEnumerable`1<IDomain> GetAssignedDomains(int contentId, bool includeWildcards);
}
public interface Umbraco.Core.Persistence.Repositories.IEntityContainerRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IEntityRepository {
    public abstract virtual IEntitySlim Get(int id);
    public abstract virtual IEntitySlim Get(Guid key);
    public abstract virtual IEntitySlim Get(int id, Guid objectTypeId);
    public abstract virtual IEntitySlim Get(Guid key, Guid objectTypeId);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Int32[] ids);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Guid[] keys);
    public abstract virtual IEnumerable`1<IEntitySlim> GetByQuery(IQuery`1<IUmbracoEntity> query);
    public abstract virtual IEnumerable`1<IEntitySlim> GetByQuery(IQuery`1<IUmbracoEntity> query, Guid objectType);
    public abstract virtual UmbracoObjectTypes GetObjectType(int id);
    public abstract virtual UmbracoObjectTypes GetObjectType(Guid key);
    public abstract virtual IEnumerable`1<TreeEntityPath> GetAllPaths(Guid objectType, Int32[] ids);
    public abstract virtual IEnumerable`1<TreeEntityPath> GetAllPaths(Guid objectType, Guid[] keys);
    public abstract virtual bool Exists(int id);
    public abstract virtual bool Exists(Guid key);
    public abstract virtual IEnumerable`1<IEntitySlim> GetPagedResultsByQuery(IQuery`1<IUmbracoEntity> query, Guid[] objectTypes, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering, Action`1<Sql`1<ISqlContext>> sqlCustomization);
    public abstract virtual IEnumerable`1<IEntitySlim> GetPagedResultsByQuery(IQuery`1<IUmbracoEntity> query, Guid objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
}
public interface Umbraco.Core.Persistence.Repositories.IExternalLoginRepository {
    [ObsoleteAttribute("Use the overload specifying IIdentityUserLoginExtended instead")]
public abstract virtual void SaveUserLogins(int memberId, IEnumerable`1<UserLoginInfo> logins);
    public abstract virtual void Save(int userId, IEnumerable`1<IExternalLogin> logins);
    public abstract virtual void DeleteUserLogins(int memberId);
}
public interface Umbraco.Core.Persistence.Repositories.IInstallationRepository {
    public abstract virtual Task SaveInstallLogAsync(InstallLog installLog);
}
public interface Umbraco.Core.Persistence.Repositories.ILanguageRepository {
    public abstract virtual ILanguage GetByIsoCode(string isoCode);
    public abstract virtual Nullable`1<int> GetIdByIsoCode(string isoCode, bool throwOnNotFound);
    public abstract virtual string GetIsoCodeById(Nullable`1<int> id, bool throwOnNotFound);
    public abstract virtual string GetDefaultIsoCode();
    public abstract virtual Nullable`1<int> GetDefaultId();
}
public interface Umbraco.Core.Persistence.Repositories.IMacroRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IMediaRepository {
    public abstract virtual IMedia GetMediaByPath(string mediaPath);
    public abstract virtual bool RecycleBinSmells();
}
public interface Umbraco.Core.Persistence.Repositories.IMediaTypeContainerRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IMediaTypeRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IMemberGroupRepository {
    public abstract virtual IMemberGroup Get(Guid uniqueId);
    public abstract virtual IMemberGroup GetByName(string name);
    public abstract virtual IMemberGroup CreateIfNotExists(string roleName);
    public abstract virtual IEnumerable`1<IMemberGroup> GetMemberGroupsForMember(int memberId);
    public abstract virtual IEnumerable`1<IMemberGroup> GetMemberGroupsForMember(string username);
    public abstract virtual void AssignRoles(String[] usernames, String[] roleNames);
    public abstract virtual void DissociateRoles(String[] usernames, String[] roleNames);
    public abstract virtual void AssignRoles(Int32[] memberIds, String[] roleNames);
    public abstract virtual void DissociateRoles(Int32[] memberIds, String[] roleNames);
    public abstract virtual Int32[] GetMemberIds(String[] names);
}
public interface Umbraco.Core.Persistence.Repositories.IMemberRepository {
    public abstract virtual IMember GetByUsername(string username);
    public abstract virtual IEnumerable`1<IMember> FindMembersInRole(string roleName, string usernameToMatch, StringPropertyMatchType matchType);
    public abstract virtual IEnumerable`1<IMember> GetByMemberGroup(string groupName);
    public abstract virtual bool Exists(string username);
    public abstract virtual int GetCountByQuery(IQuery`1<IMember> query);
    public abstract virtual void SetLastLogin(string username, DateTime date);
}
public interface Umbraco.Core.Persistence.Repositories.IMemberTypeRepository {
}
internal class Umbraco.Core.Persistence.Repositories.Implement.AuditEntryRepository : NPocoRepositoryBase`2<int, IAuditEntry> {
    protected Guid NodeObjectTypeId { get; }
    public AuditEntryRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual IAuditEntry PerformGet(int id);
    protected virtual IEnumerable`1<IAuditEntry> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IAuditEntry> PerformGetByQuery(IQuery`1<IAuditEntry> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual void PersistNewItem(IAuditEntry entity);
    protected virtual void PersistUpdatedItem(IAuditEntry entity);
    public sealed virtual IEnumerable`1<IAuditEntry> GetPage(long pageIndex, int pageCount, Int64& records);
    public sealed virtual bool IsAvailable();
}
internal class Umbraco.Core.Persistence.Repositories.Implement.AuditRepository : NPocoRepositoryBase`2<int, IAuditItem> {
    protected Guid NodeObjectTypeId { get; }
    public AuditRepository(IScopeAccessor scopeAccessor, ILogger logger);
    protected virtual void PersistNewItem(IAuditItem entity);
    protected virtual void PersistUpdatedItem(IAuditItem entity);
    protected virtual IAuditItem PerformGet(int id);
    protected virtual IEnumerable`1<IAuditItem> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IAuditItem> PerformGetByQuery(IQuery`1<IAuditItem> query);
    public sealed virtual IEnumerable`1<IAuditItem> Get(AuditType type, IQuery`1<IAuditItem> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    public sealed virtual void CleanLogs(int maximumAgeOfLogsInMinutes);
    public sealed virtual IEnumerable`1<IAuditItem> GetPagedResultsByQuery(IQuery`1<IAuditItem> query, long pageIndex, int pageSize, Int64& totalRecords, Direction orderDirection, AuditType[] auditTypeFilter, IQuery`1<IAuditItem> customFilter);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.ConsentRepository : NPocoRepositoryBase`2<int, IConsent> {
    protected Guid NodeObjectTypeId { get; }
    public ConsentRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual IConsent PerformGet(int id);
    protected virtual IEnumerable`1<IConsent> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IConsent> PerformGetByQuery(IQuery`1<IConsent> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual void PersistNewItem(IConsent entity);
    protected virtual void PersistUpdatedItem(IConsent entity);
    public sealed virtual void ClearCurrent(string source, string context, string action);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase : object {
    public static bool ThrowOnWarning;
}
internal abstract class Umbraco.Core.Persistence.Repositories.Implement.ContentRepositoryBase`3 : NPocoRepositoryBase`2<TId, TEntity> {
    private Lazy`1<PropertyEditorCollection> _propertyEditors;
    private DataValueReferenceFactoryCollection _dataValueReferenceFactories;
    [CompilerGeneratedAttribute]
private ILanguageRepository <LanguageRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationRepository <RelationRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IRelationTypeRepository <RelationTypeRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TRepository, ScopedEntityEventArgs<TId, TEntity, TRepository>> ScopedEntityRefresh;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TRepository, ScopedEntityEventArgs<TId, TEntity, TRepository>> ScopeEntityRemove;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TRepository, ScopedVersionEventArgs<TId, TEntity, TRepository>> ScopeVersionRemove;
    protected TRepository This { get; }
    protected ILanguageRepository LanguageRepository { get; }
    protected IRelationRepository RelationRepository { get; }
    protected IRelationTypeRepository RelationTypeRepository { get; }
    protected PropertyEditorCollection PropertyEditors { get; }
    public int RecycleBinId { get; }
    protected ContentRepositoryBase`3(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, ILanguageRepository languageRepository, IRelationRepository relationRepository, IRelationTypeRepository relationTypeRepository, Lazy`1<PropertyEditorCollection> propertyEditors, DataValueReferenceFactoryCollection dataValueReferenceFactories);
    protected abstract virtual TRepository get_This();
    [CompilerGeneratedAttribute]
protected ILanguageRepository get_LanguageRepository();
    [CompilerGeneratedAttribute]
protected IRelationRepository get_RelationRepository();
    [CompilerGeneratedAttribute]
protected IRelationTypeRepository get_RelationTypeRepository();
    protected PropertyEditorCollection get_PropertyEditors();
    public abstract virtual TEntity GetVersion(int versionId);
    public abstract virtual IEnumerable`1<TEntity> GetAllVersions(int nodeId);
    public virtual IEnumerable`1<TEntity> GetAllVersionsSlim(int nodeId, int skip, int take);
    public virtual IEnumerable`1<int> GetVersionIds(int nodeId, int maxRows);
    public virtual void DeleteVersion(int versionId);
    public virtual void DeleteVersions(int nodeId, DateTime versionDate);
    protected abstract virtual void PerformDeleteVersion(int id, int versionId);
    public sealed virtual int CountDescendants(int parentId, string contentTypeAlias);
    public sealed virtual int CountChildren(int parentId, string contentTypeAlias);
    public sealed virtual int Count(string contentTypeAlias);
    protected void SetEntityTags(IContentBase entity, ITagRepository tagRepo);
    protected void ClearEntityTags(IContentBase entity, ITagRepository tagRepo);
    private Sql`1<ISqlContext> PreparePageSql(Sql`1<ISqlContext> sql, Sql`1<ISqlContext> filterSql, Ordering ordering);
    private void ApplyOrdering(Sql`1& sql, Ordering ordering);
    protected virtual string ApplySystemOrdering(Sql`1& sql, Ordering ordering);
    private string ApplyCustomOrdering(Sql`1& sql, Ordering ordering);
    public abstract virtual IEnumerable`1<TEntity> GetPage(IQuery`1<TEntity> query, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<TEntity> filter, Ordering ordering);
    public sealed virtual ContentDataIntegrityReport CheckDataIntegrity(ContentDataIntegrityReportOptions options);
    private static void AppendNodeToFix(IDictionary`2<int, List`1<NodeDto>> nodesToRebuild, NodeDto node);
    protected IEnumerable`1<TEntity> GetPage(IQuery`1<TEntity> query, long pageIndex, int pageSize, Int64& totalRecords, Func`2<List`1<TDto>, IEnumerable`1<TEntity>> mapDtos, Sql`1<ISqlContext> filter, Ordering ordering);
    protected IDictionary`2<int, PropertyCollection> GetPropertyCollections(List`1<TempContent`1<TId, TEntity, TRepository, T>> temps);
    private IDictionary`2<int, PropertyCollection> GetPropertyCollections(List`1<TempContent`1<TId, TEntity, TRepository, T>> temps, IEnumerable`1<PropertyDataDto> allPropertyDataDtos);
    protected string InsertBefore(Sql`1<ISqlContext> s, string atToken, string insert);
    protected string InsertBefore(string s, string atToken, string insert);
    protected Sql`1<ISqlContext> InsertJoins(Sql`1<ISqlContext> sql, Sql`1<ISqlContext> joins);
    private string GetAliasedField(string field, Sql sql);
    protected string GetQuotedFieldName(string tableName, string fieldName);
    [CompilerGeneratedAttribute]
public static void add_ScopedEntityRefresh(TypedEventHandler`2<TRepository, ScopedEntityEventArgs<TId, TEntity, TRepository>> value);
    [CompilerGeneratedAttribute]
public static void remove_ScopedEntityRefresh(TypedEventHandler`2<TRepository, ScopedEntityEventArgs<TId, TEntity, TRepository>> value);
    [CompilerGeneratedAttribute]
public static void add_ScopeEntityRemove(TypedEventHandler`2<TRepository, ScopedEntityEventArgs<TId, TEntity, TRepository>> value);
    [CompilerGeneratedAttribute]
public static void remove_ScopeEntityRemove(TypedEventHandler`2<TRepository, ScopedEntityEventArgs<TId, TEntity, TRepository>> value);
    [CompilerGeneratedAttribute]
public static void add_ScopeVersionRemove(TypedEventHandler`2<TRepository, ScopedVersionEventArgs<TId, TEntity, TRepository>> value);
    [CompilerGeneratedAttribute]
public static void remove_ScopeVersionRemove(TypedEventHandler`2<TRepository, ScopedVersionEventArgs<TId, TEntity, TRepository>> value);
    internal static void ClearScopeEvents();
    protected void OnUowRefreshedEntity(ScopedEntityEventArgs<TId, TEntity, TRepository> args);
    protected void OnUowRemovingEntity(ScopedEntityEventArgs<TId, TEntity, TRepository> args);
    protected void OnUowRemovingVersion(ScopedVersionEventArgs<TId, TEntity, TRepository> args);
    protected abstract virtual Sql`1<ISqlContext> GetBaseQuery(QueryType queryType);
    protected virtual string EnsureUniqueNodeName(int parentId, string nodeName, int id);
    protected virtual int GetNewChildSortOrder(int parentId, int first);
    protected virtual NodeDto GetParentNodeDto(int parentId);
    protected virtual int GetReservedId(Guid uniqueId);
    public abstract virtual int get_RecycleBinId();
    public virtual IEnumerable`1<TEntity> GetRecycleBin();
    protected void PersistRelations(TEntity entity);
    protected void InsertPropertyValues(TEntity entity, int publishedVersionId, Boolean& edited, HashSet`1& editedCultures);
    protected void ReplacePropertyValues(TEntity entity, int versionId, int publishedVersionId, Boolean& edited, HashSet`1& editedCultures);
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <GetPropertyCollections>b__36_0(IEnumerable`1<int> batch);
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <GetPropertyCollections>b__36_2(IEnumerable`1<int> batch);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.ContentTypeCommonRepository : object {
    private static string CacheKey;
    private AppCaches _appCaches;
    private IScopeAccessor _scopeAccessor;
    private ITemplateRepository _templateRepository;
    private IScope AmbientScope { get; }
    private IUmbracoDatabase Database { get; }
    private ISqlContext SqlContext { get; }
    public ContentTypeCommonRepository(IScopeAccessor scopeAccessor, ITemplateRepository templateRepository, AppCaches appCaches);
    private IScope get_AmbientScope();
    private IUmbracoDatabase get_Database();
    private ISqlContext get_SqlContext();
    private Sql`1<ISqlContext> Sql();
    public sealed virtual IEnumerable`1<IContentTypeComposition> GetAllTypes();
    public sealed virtual void ClearCache();
    private IEnumerable`1<IContentTypeComposition> GetAllTypesInternal();
    private void MapHistoryCleanup(Dictionary`2<int, IContentTypeComposition> contentTypes);
    private void MapTemplates(Dictionary`2<int, IContentTypeComposition> contentTypes);
    private void MapComposition(IDictionary`2<int, IContentTypeComposition> contentTypes);
    private void MapGroupsAndProperties(IDictionary`2<int, IContentTypeComposition> contentTypes);
    private PropertyGroup MapPropertyGroup(PropertyTypeGroupDto dto, bool isPublishing);
    private PropertyType MapPropertyType(IContentTypeComposition contentType, PropertyTypeCommonDto dto, IDictionary`2<string, PropertyType> builtinProperties);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepository : ContentTypeRepositoryBase`1<IContentType> {
    protected bool SupportsPublishing { get; }
    protected Guid NodeObjectTypeId { get; }
    public ContentTypeRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, IContentTypeCommonRepository commonRepository, ILanguageRepository languageRepository);
    protected virtual bool get_SupportsPublishing();
    protected virtual IRepositoryCachePolicy`2<IContentType, int> CreateCachePolicy();
    protected virtual IContentType PerformGet(int id);
    protected virtual IContentType PerformGet(Guid id);
    protected virtual IContentType PerformGet(string alias);
    protected virtual bool PerformExists(Guid id);
    protected virtual IEnumerable`1<IContentType> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IContentType> PerformGetAll(Guid[] ids);
    protected virtual IEnumerable`1<IContentType> PerformGetByQuery(IQuery`1<IContentType> query);
    public sealed virtual IEnumerable`1<IContentType> GetByQuery(IQuery`1<PropertyType> query);
    protected IEnumerable`1<int> PerformGetByQuery(IQuery`1<PropertyType> query);
    public sealed virtual IEnumerable`1<string> GetAllPropertyTypeAliases();
    public sealed virtual IEnumerable`1<string> GetAllContentTypeAliases(Guid[] objectTypes);
    public sealed virtual IEnumerable`1<int> GetAllContentTypeIds(String[] aliases);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistDeletedItem(IContentType entity);
    protected virtual void PersistNewItem(IContentType entity);
    protected void PersistTemplates(IContentType entity, bool clearAll);
    protected virtual void PersistUpdatedItem(IContentType entity);
    private void PersistHistoryCleanup(IContentType entity);
}
internal abstract class Umbraco.Core.Persistence.Repositories.Implement.ContentTypeRepositoryBase`1 : NPocoRepositoryBase`2<int, TEntity> {
    [CompilerGeneratedAttribute]
private IContentTypeCommonRepository <CommonRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ILanguageRepository <LanguageRepository>k__BackingField;
    protected IContentTypeCommonRepository CommonRepository { get; }
    protected ILanguageRepository LanguageRepository { get; }
    protected bool SupportsPublishing { get; }
    protected ContentTypeRepositoryBase`1(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, IContentTypeCommonRepository commonRepository, ILanguageRepository languageRepository);
    [CompilerGeneratedAttribute]
protected IContentTypeCommonRepository get_CommonRepository();
    [CompilerGeneratedAttribute]
protected ILanguageRepository get_LanguageRepository();
    protected abstract virtual bool get_SupportsPublishing();
    public sealed virtual IEnumerable`1<MoveEventInfo`1<TEntity>> Move(TEntity moving, EntityContainer container);
    protected virtual PropertyType CreatePropertyType(string propertyEditorAlias, ValueStorageType storageType, string propertyTypeAlias);
    protected virtual void PersistDeletedItem(TEntity entity);
    protected void PersistNewBaseContentType(IContentTypeComposition entity);
    protected void PersistUpdatedBaseContentType(IContentTypeComposition entity);
    private void CorrectPropertyTypeVariations(IContentTypeComposition entity);
    private void ValidateVariations(IContentTypeComposition entity);
    private IEnumerable`1<IContentTypeComposition> GetImpactedContentTypes(IContentTypeComposition contentType, IEnumerable`1<IContentTypeComposition> all);
    private Dictionary`2<int, ValueTuple`2<ContentVariation, ContentVariation>> GetPropertyVariationChanges(IEnumerable`1<PropertyType> propertyTypes);
    private void Clear301Redirects(IContentTypeComposition contentType);
    private void ClearScheduledPublishing(IContentTypeComposition contentType);
    private int GetDefaultLanguageId();
    private void MovePropertyTypeVariantData(IDictionary`2<int, ValueTuple`2<ContentVariation, ContentVariation>> propertyTypeChanges, IEnumerable`1<IContentTypeComposition> impacted);
    private void MoveContentTypeVariantData(IContentTypeComposition contentType, ContentVariation fromVariation, ContentVariation toVariation);
    private void CopyTagData(Nullable`1<int> sourceLanguageId, Nullable`1<int> targetLanguageId, IReadOnlyCollection`1<int> propertyTypeIds, IReadOnlyCollection`1<int> contentTypeIds);
    private void CopyPropertyData(Nullable`1<int> sourceLanguageId, Nullable`1<int> targetLanguageId, IReadOnlyCollection`1<int> propertyTypeIds, IReadOnlyCollection`1<int> contentTypeIds);
    private void RenormalizeDocumentEditedFlags(IReadOnlyCollection`1<int> propertyTypeIds, IReadOnlyCollection`1<int> contentTypeIds);
    private static bool IsPropertyValueChanged(PropertyValueVersionDto<TEntity> pubRow, PropertyValueVersionDto<TEntity> row);
    private void DeletePropertyType(int contentTypeId, int propertyTypeId);
    protected void ValidateAlias(PropertyType pt);
    protected void ValidateAlias(TEntity entity);
    private void AssignDataTypeFromPropertyEditor(PropertyType propertyType);
    protected abstract virtual TEntity PerformGet(Guid id);
    protected abstract virtual TEntity PerformGet(string alias);
    protected abstract virtual IEnumerable`1<TEntity> PerformGetAll(Guid[] ids);
    protected abstract virtual bool PerformExists(Guid id);
    public sealed virtual TEntity Get(string alias);
    public sealed virtual TEntity Get(Guid id);
    private sealed virtual override IEnumerable`1<TEntity> Umbraco.Core.Persistence.IReadRepository<System.Guid,TEntity>.GetMany(Guid[] ids);
    public sealed virtual bool Exists(Guid id);
    public sealed virtual string GetUniqueAlias(string alias);
    public sealed virtual bool HasContainerInPath(string contentPath);
    public sealed virtual bool HasContainerInPath(Int32[] ids);
    public sealed virtual bool HasContentNodes(int id);
    protected virtual IEnumerable`1<string> GetDeleteClauses();
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DataTypeContainerRepository : EntityContainerRepository {
    public DataTypeContainerRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DataTypeRepository : NPocoRepositoryBase`2<int, IDataType> {
    private Lazy`1<PropertyEditorCollection> _editors;
    protected Guid NodeObjectTypeId { get; }
    public DataTypeRepository(IScopeAccessor scopeAccessor, AppCaches cache, Lazy`1<PropertyEditorCollection> editors, ILogger logger);
    protected virtual IDataType PerformGet(int id);
    protected virtual IEnumerable`1<IDataType> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IDataType> PerformGetByQuery(IQuery`1<IDataType> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IDataType entity);
    protected virtual void PersistUpdatedItem(IDataType entity);
    protected virtual void PersistDeletedItem(IDataType entity);
    public sealed virtual IEnumerable`1<MoveEventInfo`1<IDataType>> Move(IDataType toMove, EntityContainer container);
    public sealed virtual IReadOnlyDictionary`2<Udi, IEnumerable`1<string>> FindUsages(int id);
    private string EnsureUniqueNodeName(string nodeName, int id);
    [CompilerGeneratedAttribute]
private IDataType <PerformGetAll>b__3_1(DataTypeDto x);
    [CompilerGeneratedAttribute]
private IDataType <PerformGetByQuery>b__4_0(DataTypeDto x);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DictionaryRepository : NPocoRepositoryBase`2<int, IDictionaryItem> {
    protected Guid NodeObjectTypeId { get; }
    public DictionaryRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual IRepositoryCachePolicy`2<IDictionaryItem, int> CreateCachePolicy();
    protected virtual IDictionaryItem PerformGet(int id);
    protected virtual IEnumerable`1<IDictionaryItem> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IDictionaryItem> PerformGetByQuery(IQuery`1<IDictionaryItem> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IDictionaryItem entity);
    protected virtual void PersistUpdatedItem(IDictionaryItem entity);
    protected virtual void PersistDeletedItem(IDictionaryItem entity);
    private void RecursiveDelete(Guid parentId);
    protected IDictionaryItem ConvertFromDto(DictionaryDto dto);
    public sealed virtual IDictionaryItem Get(Guid uniqueId);
    public sealed virtual IDictionaryItem Get(string key);
    private IEnumerable`1<IDictionaryItem> GetRootDictionaryItems();
    public sealed virtual Dictionary`2<string, Guid> GetDictionaryItemKeyMap();
    public sealed virtual IEnumerable`1<IDictionaryItem> GetDictionaryItemDescendants(Nullable`1<Guid> parentId);
    [CompilerGeneratedAttribute]
private object <GetDictionaryItemKeyMap>b__18_0(string x);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DocumentBlueprintRepository : DocumentRepository {
    protected bool EnsureUniqueNaming { get; }
    protected Guid NodeObjectTypeId { get; }
    public DocumentBlueprintRepository(IScopeAccessor scopeAccessor, AppCaches appCaches, ILogger logger, IContentTypeRepository contentTypeRepository, ITemplateRepository templateRepository, ITagRepository tagRepository, ILanguageRepository languageRepository, IRelationRepository relationRepository, IRelationTypeRepository relationTypeRepository, Lazy`1<PropertyEditorCollection> propertyEditorCollection, DataValueReferenceFactoryCollection dataValueReferenceFactories);
    protected virtual bool get_EnsureUniqueNaming();
    protected virtual Guid get_NodeObjectTypeId();
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository : ContentRepositoryBase`3<int, IContent, DocumentRepository> {
    private IContentTypeRepository _contentTypeRepository;
    private ITemplateRepository _templateRepository;
    private ITagRepository _tagRepository;
    private AppCaches _appCaches;
    private PermissionRepository`1<IContent> _permissionRepository;
    private ContentByGuidReadRepository _contentByGuidReadRepository;
    private IScopeAccessor _scopeAccessor;
    [CompilerGeneratedAttribute]
private bool <EnsureUniqueNaming>k__BackingField;
    protected DocumentRepository This { get; }
    protected bool EnsureUniqueNaming { get; }
    private PermissionRepository`1<IContent> PermissionRepository { get; }
    protected Guid NodeObjectTypeId { get; }
    private string VariantNameSqlExpression { get; }
    public int RecycleBinId { get; }
    private SqlTemplate SqlEnsureVariantNamesAreUnique { get; }
    public DocumentRepository(IScopeAccessor scopeAccessor, AppCaches appCaches, ILogger logger, IContentTypeRepository contentTypeRepository, ITemplateRepository templateRepository, ITagRepository tagRepository, ILanguageRepository languageRepository, IRelationRepository relationRepository, IRelationTypeRepository relationTypeRepository, Lazy`1<PropertyEditorCollection> propertyEditors, DataValueReferenceFactoryCollection dataValueReferenceFactories);
    protected virtual DocumentRepository get_This();
    [CompilerGeneratedAttribute]
protected virtual bool get_EnsureUniqueNaming();
    private PermissionRepository`1<IContent> get_PermissionRepository();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual IContent PerformGet(int id);
    protected virtual IEnumerable`1<IContent> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IContent> PerformGetByQuery(IQuery`1<IContent> query);
    private void AddGetByQueryOrderBy(Sql`1<ISqlContext> sql);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(QueryType queryType);
    private string get_VariantNameSqlExpression();
    protected Sql`1<ISqlContext> GetBaseQuery(QueryType queryType, bool current);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    public virtual IEnumerable`1<IContent> GetAllVersions(int nodeId);
    public virtual IEnumerable`1<IContent> GetAllVersionsSlim(int nodeId, int skip, int take);
    public virtual IContent GetVersion(int versionId);
    public virtual void DeleteVersion(int versionId);
    public virtual void DeleteVersions(int nodeId, DateTime versionDate);
    protected virtual void PerformDeleteVersion(int id, int versionId);
    protected virtual void PersistNewItem(IContent entity);
    protected virtual void PersistUpdatedItem(IContent entity);
    private void PersistContentSchedule(IContent content, bool update);
    protected virtual void PersistDeletedItem(IContent entity);
    public sealed virtual int CountPublished(string contentTypeAlias);
    public sealed virtual void ReplaceContentPermissions(EntityPermissionSet permissionSet);
    public sealed virtual void AssignEntityPermission(IContent entity, char permission, IEnumerable`1<int> groupIds);
    public sealed virtual EntityPermissionCollection GetPermissionsForEntity(int entityId);
    public sealed virtual void AddOrUpdatePermissions(ContentPermissionSet permission);
    public virtual IEnumerable`1<IContent> GetPage(IQuery`1<IContent> query, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public sealed virtual bool IsPathPublished(IContent content);
    public virtual int get_RecycleBinId();
    public sealed virtual bool RecycleBinSmells();
    public sealed virtual IContent Get(Guid id);
    private sealed virtual override IEnumerable`1<IContent> Umbraco.Core.Persistence.IReadRepository<System.Guid,Umbraco.Core.Models.IContent>.GetMany(Guid[] ids);
    public sealed virtual bool Exists(Guid id);
    public sealed virtual void ClearSchedule(DateTime date);
    public sealed virtual void ClearSchedule(DateTime date, ContentScheduleAction action);
    private Sql GetSqlForHasScheduling(ContentScheduleAction action, DateTime date);
    public sealed virtual bool HasContentForExpiration(DateTime date);
    public sealed virtual bool HasContentForRelease(DateTime date);
    public sealed virtual IEnumerable`1<IContent> GetContentForRelease(DateTime date);
    public sealed virtual IEnumerable`1<IContent> GetContentForExpiration(DateTime date);
    protected virtual string ApplySystemOrdering(Sql`1& sql, Ordering ordering);
    private IEnumerable`1<IContent> MapDtosToContent(List`1<DocumentDto> dtos, bool withCache, bool loadProperties, bool loadTemplates, bool loadSchedule, bool loadVariants);
    private IContent MapDtoToContent(DocumentDto dto);
    private IDictionary`2<int, ContentScheduleCollection> GetContentSchedule(Int32[] contentIds);
    private void SetVariations(Content content, IDictionary`2<int, List`1<ContentVariation>> contentVariations, IDictionary`2<int, List`1<DocumentVariation>> documentVariations);
    private IDictionary`2<int, List`1<ContentVariation>> GetContentVariations(List`1<TempContent`1<int, IContent, DocumentRepository, T>> temps);
    private IDictionary`2<int, List`1<DocumentVariation>> GetDocumentVariations(List`1<TempContent`1<int, IContent, DocumentRepository, T>> temps);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository/<GetContentVariationDtos>d__66")]
private IEnumerable`1<ContentVersionCultureVariationDto> GetContentVariationDtos(IContent content, bool publishing);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.DocumentRepository/<GetDocumentVariationDtos>d__67")]
private IEnumerable`1<DocumentCultureVariationDto> GetDocumentVariationDtos(IContent content, HashSet`1<string> editedCultures);
    private void SanitizeNames(IContent content, bool publishing);
    private void EnsureInvariantNameExists(IContent content);
    private void EnsureInvariantNameIsUnique(IContent content);
    protected virtual string EnsureUniqueNodeName(int parentId, string nodeName, int id);
    private SqlTemplate get_SqlEnsureVariantNamesAreUnique();
    private void EnsureVariantNamesAreUnique(IContent content, bool publishing);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IContent> <GetPage>b__43_0(List`1<DocumentDto> x);
    [CompilerGeneratedAttribute]
private bool <RecycleBinSmells>b__47_0();
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <GetContentSchedule>b__62_0(IEnumerable`1<int> batch);
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <GetContentVariations>b__64_0(IEnumerable`1<int> batch);
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <GetDocumentVariations>b__65_1(IEnumerable`1<int> batch);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DocumentTypeContainerRepository : EntityContainerRepository {
    public DocumentTypeContainerRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DocumentVersionRepository : object {
    private IScopeAccessor _scopeAccessor;
    public DocumentVersionRepository(IScopeAccessor scopeAccessor);
    public sealed virtual IReadOnlyCollection`1<ContentVersionMeta> GetDocumentVersionsEligibleForCleanup();
    public sealed virtual IReadOnlyCollection`1<ContentVersionCleanupPolicySettings> GetCleanupPolicies();
    public sealed virtual IEnumerable`1<ContentVersionMeta> GetPagedItemsByContentId(int contentId, long pageIndex, int pageSize, Int64& totalRecords, Nullable`1<int> languageId);
    public sealed virtual void DeleteVersions(IEnumerable`1<int> versionIds);
    public sealed virtual void SetPreventCleanup(int versionId, bool preventCleanup);
    public sealed virtual ContentVersionMeta Get(int versionId);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.DomainRepository : NPocoRepositoryBase`2<int, IDomain> {
    protected Guid NodeObjectTypeId { get; }
    public DomainRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual IRepositoryCachePolicy`2<IDomain, int> CreateCachePolicy();
    protected virtual IDomain PerformGet(int id);
    protected virtual IEnumerable`1<IDomain> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IDomain> PerformGetByQuery(IQuery`1<IDomain> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IDomain entity);
    protected virtual void PersistUpdatedItem(IDomain entity);
    public sealed virtual IDomain GetByName(string domainName);
    public sealed virtual bool Exists(string domainName);
    public sealed virtual IEnumerable`1<IDomain> GetAll(bool includeWildcards);
    public sealed virtual IEnumerable`1<IDomain> GetAssignedDomains(int contentId, bool includeWildcards);
    private IDomain ConvertFromDto(DomainDto dto);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.EntityContainerRepository : NPocoRepositoryBase`2<int, EntityContainer> {
    private Guid _containerObjectType;
    protected Guid NodeObjectTypeId { get; }
    public EntityContainerRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, Guid containerObjectType);
    protected virtual IRepositoryCachePolicy`2<EntityContainer, int> CreateCachePolicy();
    protected virtual EntityContainer PerformGet(int id);
    public EntityContainer Get(Guid id);
    public IEnumerable`1<EntityContainer> Get(string name, int level);
    protected virtual IEnumerable`1<EntityContainer> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<EntityContainer> PerformGetByQuery(IQuery`1<EntityContainer> query);
    private static EntityContainer CreateEntity(NodeDto nodeDto);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistDeletedItem(EntityContainer entity);
    protected virtual void PersistNewItem(EntityContainer entity);
    protected virtual void PersistUpdatedItem(EntityContainer entity);
    private void EnsureContainerType(EntityContainer entity);
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <PerformGetAll>b__6_0(IEnumerable`1<int> batch);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.EntityRepository : object {
    private IScopeAccessor _scopeAccessor;
    protected IUmbracoDatabase Database { get; }
    protected ISqlSyntaxProvider SqlSyntax { get; }
    public EntityRepository(IScopeAccessor scopeAccessor);
    protected IUmbracoDatabase get_Database();
    protected Sql`1<ISqlContext> Sql();
    protected ISqlSyntaxProvider get_SqlSyntax();
    public sealed virtual IEnumerable`1<IEntitySlim> GetPagedResultsByQuery(IQuery`1<IUmbracoEntity> query, Guid objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IEntitySlim> GetPagedResultsByQuery(IQuery`1<IUmbracoEntity> query, Guid[] objectTypes, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering, Action`1<Sql`1<ISqlContext>> sqlCustomization);
    public sealed virtual IEntitySlim Get(Guid key);
    private IEntitySlim GetEntity(Sql`1<ISqlContext> sql, bool isContent, bool isMedia, bool isMember);
    public sealed virtual IEntitySlim Get(Guid key, Guid objectTypeId);
    public sealed virtual IEntitySlim Get(int id);
    public sealed virtual IEntitySlim Get(int id, Guid objectTypeId);
    public sealed virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Int32[] ids);
    public sealed virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Guid[] keys);
    private IEnumerable`1<IEntitySlim> GetEntities(Sql`1<ISqlContext> sql, bool isContent, bool isMedia, bool isMember);
    private IEnumerable`1<IEntitySlim> PerformGetAll(Guid objectType, Action`1<Sql`1<ISqlContext>> filter);
    public sealed virtual IEnumerable`1<TreeEntityPath> GetAllPaths(Guid objectType, Int32[] ids);
    public sealed virtual IEnumerable`1<TreeEntityPath> GetAllPaths(Guid objectType, Guid[] keys);
    private IEnumerable`1<TreeEntityPath> PerformGetAllPaths(Guid objectType, Action`1<Sql`1<ISqlContext>> filter);
    public sealed virtual IEnumerable`1<IEntitySlim> GetByQuery(IQuery`1<IUmbracoEntity> query);
    public sealed virtual IEnumerable`1<IEntitySlim> GetByQuery(IQuery`1<IUmbracoEntity> query, Guid objectType);
    public sealed virtual UmbracoObjectTypes GetObjectType(int id);
    public sealed virtual UmbracoObjectTypes GetObjectType(Guid key);
    public sealed virtual bool Exists(Guid key);
    public sealed virtual bool Exists(int id);
    private DocumentEntitySlim BuildVariants(DocumentEntitySlim entity);
    private IEnumerable`1<DocumentEntitySlim> BuildVariants(IEnumerable`1<DocumentEntitySlim> entities);
    protected Sql`1<ISqlContext> GetVariantInfos(IEnumerable`1<int> ids);
    protected Sql`1<ISqlContext> GetFullSqlForEntityType(bool isContent, bool isMedia, bool isMember, Guid objectType, Guid uniqueId);
    protected Sql`1<ISqlContext> GetFullSqlForEntityType(bool isContent, bool isMedia, bool isMember, Guid objectType, int nodeId);
    protected Sql`1<ISqlContext> GetFullSqlForEntityType(bool isContent, bool isMedia, bool isMember, Guid objectType, Action`1<Sql`1<ISqlContext>> filter);
    protected Sql`1<ISqlContext> GetBase(bool isContent, bool isMedia, bool isMember, Action`1<Sql`1<ISqlContext>> filter, bool isCount);
    protected Sql`1<ISqlContext> GetBaseWhere(bool isContent, bool isMedia, bool isMember, bool isCount, Action`1<Sql`1<ISqlContext>> filter, Guid[] objectTypes);
    protected Sql`1<ISqlContext> GetBaseWhere(bool isContent, bool isMedia, bool isMember, bool isCount, int id);
    protected Sql`1<ISqlContext> GetBaseWhere(bool isContent, bool isMedia, bool isMember, bool isCount, Guid uniqueId);
    protected Sql`1<ISqlContext> GetBaseWhere(bool isContent, bool isMedia, bool isMember, bool isCount, Guid objectType, int nodeId);
    protected Sql`1<ISqlContext> GetBaseWhere(bool isContent, bool isMedia, bool isMember, bool isCount, Guid objectType, Guid uniqueId);
    protected Sql`1<ISqlContext> AddGroupBy(bool isContent, bool isMedia, bool isMember, Sql`1<ISqlContext> sql, bool defaultSort);
    private void ApplyOrdering(Sql`1& sql, Ordering ordering);
    private EntitySlim BuildEntity(BaseDto dto);
    private static void BuildEntity(EntitySlim entity, BaseDto dto);
    private static void BuildContentEntity(ContentEntitySlim entity, BaseDto dto);
    private MediaEntitySlim BuildMediaEntity(BaseDto dto);
    private DocumentEntitySlim BuildDocumentEntity(BaseDto dto);
    private MemberEntitySlim BuildMemberEntity(BaseDto dto);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.ExternalLoginRepository : NPocoRepositoryBase`2<int, IIdentityUserLogin> {
    protected Guid NodeObjectTypeId { get; }
    public ExternalLoginRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    public sealed virtual void DeleteUserLogins(int memberId);
    public sealed virtual void Save(int userId, IEnumerable`1<IExternalLogin> logins);
    public sealed virtual void SaveUserLogins(int memberId, IEnumerable`1<UserLoginInfo> logins);
    protected virtual IIdentityUserLogin PerformGet(int id);
    protected virtual IEnumerable`1<IIdentityUserLogin> PerformGetAll(Int32[] ids);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.ExternalLoginRepository/<PerformGetAllOnIds>d__6")]
private IEnumerable`1<IIdentityUserLogin> PerformGetAllOnIds(Int32[] ids);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.ExternalLoginRepository/<ConvertFromDtos>d__7")]
private IEnumerable`1<IIdentityUserLogin> ConvertFromDtos(IEnumerable`1<ExternalLoginDto> dtos);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.ExternalLoginRepository/<PerformGetByQuery>d__8")]
protected virtual IEnumerable`1<IIdentityUserLogin> PerformGetByQuery(IQuery`1<IIdentityUserLogin> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IIdentityUserLogin entity);
    protected virtual void PersistUpdatedItem(IIdentityUserLogin entity);
}
internal abstract class Umbraco.Core.Persistence.Repositories.Implement.FileRepository`2 : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    protected IFileSystem FileSystem { get; }
    protected FileRepository`2(IFileSystem fileSystem);
    [CompilerGeneratedAttribute]
protected IFileSystem get_FileSystem();
    public virtual void AddFolder(string folderPath);
    public virtual void DeleteFolder(string folderPath);
    public virtual void Save(TEntity entity);
    public virtual void Delete(TEntity entity);
    public abstract virtual TEntity Get(TId id);
    public abstract virtual IEnumerable`1<TEntity> GetMany(TId[] ids);
    public virtual bool Exists(TId id);
    public void PersistNewItem(IEntity entity);
    public void PersistUpdatedItem(IEntity entity);
    public void PersistDeletedItem(IEntity entity);
    internal virtual void PersistNewFolder(Folder entity);
    internal virtual void PersistDeletedFolder(Folder entity);
    protected virtual void PersistNewItem(TEntity entity);
    protected virtual void PersistUpdatedItem(TEntity entity);
    protected virtual void PersistDeletedItem(TEntity entity);
    protected virtual Stream GetContentStream(string content);
    protected IEnumerable`1<string> FindAllFiles(string path, string filter);
    protected string GetFileContent(string filename);
    public sealed virtual long GetFileSize(string filename);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.InstallationRepository : object {
    private static HttpClient _httpClient;
    private static string RestApiInstallUrl;
    [AsyncStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.InstallationRepository/<SaveInstallLogAsync>d__2")]
public sealed virtual Task SaveInstallLogAsync(InstallLog installLog);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.LanguageRepository : NPocoRepositoryBase`2<int, ILanguage> {
    private Dictionary`2<string, int> _codeIdMap;
    private Dictionary`2<int, string> _idCodeMap;
    private FullDataSetRepositoryCachePolicy`2<ILanguage, int> TypedCachePolicy { get; }
    protected Guid NodeObjectTypeId { get; }
    public LanguageRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual IRepositoryCachePolicy`2<ILanguage, int> CreateCachePolicy();
    private FullDataSetRepositoryCachePolicy`2<ILanguage, int> get_TypedCachePolicy();
    protected virtual ILanguage PerformGet(int id);
    protected virtual IEnumerable`1<ILanguage> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<ILanguage> PerformGetByQuery(IQuery`1<ILanguage> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(ILanguage entity);
    protected virtual void PersistUpdatedItem(ILanguage entity);
    protected virtual void PersistDeletedItem(ILanguage entity);
    protected ILanguage ConvertFromDto(LanguageDto dto);
    public sealed virtual ILanguage GetByIsoCode(string isoCode);
    public sealed virtual Nullable`1<int> GetIdByIsoCode(string isoCode, bool throwOnNotFound);
    public sealed virtual string GetIsoCodeById(Nullable`1<int> id, bool throwOnNotFound);
    public sealed virtual string GetDefaultIsoCode();
    public sealed virtual Nullable`1<int> GetDefaultId();
    private ILanguage GetDefault();
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.Repositories.Implement.LanguageRepositoryExtensions : object {
    [ExtensionAttribute]
public static bool IsDefault(ILanguageRepository repo, string culture);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.MacroRepository : NPocoRepositoryBase`2<int, IMacro> {
    protected Guid NodeObjectTypeId { get; }
    public MacroRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual IMacro PerformGet(int id);
    public sealed virtual IMacro Get(Guid id);
    private IMacro GetBySql(Sql sql);
    public sealed virtual IEnumerable`1<IMacro> GetMany(Guid[] ids);
    public sealed virtual bool Exists(Guid id);
    protected virtual IEnumerable`1<IMacro> PerformGetAll(Int32[] ids);
    private IEnumerable`1<IMacro> GetAllNoIds();
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.MacroRepository/<ConvertFromDtos>d__8")]
private IEnumerable`1<IMacro> ConvertFromDtos(IEnumerable`1<MacroDto> dtos);
    protected virtual IEnumerable`1<IMacro> PerformGetByQuery(IQuery`1<IMacro> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    private Sql`1<ISqlContext> GetBaseQuery();
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IMacro entity);
    protected virtual void PersistUpdatedItem(IMacro entity);
    [CompilerGeneratedAttribute]
private IMacro <PerformGetByQuery>b__9_1(MacroDto x);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.MediaRepository : ContentRepositoryBase`3<int, IMedia, MediaRepository> {
    private AppCaches _cache;
    private IMediaTypeRepository _mediaTypeRepository;
    private ITagRepository _tagRepository;
    private MediaByGuidReadRepository _mediaByGuidReadRepository;
    protected MediaRepository This { get; }
    protected Guid NodeObjectTypeId { get; }
    public int RecycleBinId { get; }
    public MediaRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, IMediaTypeRepository mediaTypeRepository, ITagRepository tagRepository, ILanguageRepository languageRepository, IRelationRepository relationRepository, IRelationTypeRepository relationTypeRepository, Lazy`1<PropertyEditorCollection> propertyEditorCollection, DataValueReferenceFactoryCollection dataValueReferenceFactories);
    protected virtual MediaRepository get_This();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual IMedia PerformGet(int id);
    protected virtual IEnumerable`1<IMedia> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IMedia> PerformGetByQuery(IQuery`1<IMedia> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(QueryType queryType);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(QueryType queryType, bool current, bool joinMediaVersion);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    public virtual IEnumerable`1<IMedia> GetAllVersions(int nodeId);
    public virtual IMedia GetVersion(int versionId);
    public sealed virtual IMedia GetMediaByPath(string mediaPath);
    protected virtual void PerformDeleteVersion(int id, int versionId);
    protected virtual void PersistNewItem(IMedia entity);
    protected virtual void PersistUpdatedItem(IMedia entity);
    protected virtual void PersistDeletedItem(IMedia entity);
    public virtual int get_RecycleBinId();
    public sealed virtual bool RecycleBinSmells();
    public sealed virtual IMedia Get(Guid id);
    private sealed virtual override IEnumerable`1<IMedia> Umbraco.Core.Persistence.IReadRepository<System.Guid,Umbraco.Core.Models.IMedia>.GetMany(Guid[] ids);
    public sealed virtual bool Exists(Guid id);
    public virtual IEnumerable`1<IMedia> GetPage(IQuery`1<IMedia> query, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    private IEnumerable`1<IMedia> MapDtosToContent(List`1<ContentDto> dtos, bool withCache);
    private IMedia MapDtoToContent(ContentDto dto);
    [CompilerGeneratedAttribute]
private bool <RecycleBinSmells>b__26_0();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMedia> <GetPage>b__31_0(List`1<ContentDto> x);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.MediaTypeContainerRepository : EntityContainerRepository {
    public MediaTypeContainerRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.MediaTypeRepository : ContentTypeRepositoryBase`1<IMediaType> {
    protected bool SupportsPublishing { get; }
    protected Guid NodeObjectTypeId { get; }
    public MediaTypeRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, IContentTypeCommonRepository commonRepository, ILanguageRepository languageRepository);
    protected virtual bool get_SupportsPublishing();
    protected virtual IRepositoryCachePolicy`2<IMediaType, int> CreateCachePolicy();
    protected virtual IMediaType PerformGet(int id);
    protected virtual IMediaType PerformGet(Guid id);
    protected virtual bool PerformExists(Guid id);
    protected virtual IMediaType PerformGet(string alias);
    protected virtual IEnumerable`1<IMediaType> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IMediaType> PerformGetAll(Guid[] ids);
    protected virtual IEnumerable`1<IMediaType> PerformGetByQuery(IQuery`1<IMediaType> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IMediaType entity);
    protected virtual void PersistUpdatedItem(IMediaType entity);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.MemberGroupRepository : NPocoRepositoryBase`2<int, IMemberGroup> {
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberGroupRepository, SaveEventArgs`1<IMemberGroup>> SavingMemberGroup;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberGroupRepository, SaveEventArgs`1<IMemberGroup>> SavedMemberGroup;
    protected Guid NodeObjectTypeId { get; }
    public MemberGroupRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual IMemberGroup PerformGet(int id);
    protected virtual IEnumerable`1<IMemberGroup> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IMemberGroup> PerformGetByQuery(IQuery`1<IMemberGroup> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IMemberGroup entity);
    protected virtual void PersistUpdatedItem(IMemberGroup entity);
    public sealed virtual IMemberGroup Get(Guid uniqueId);
    public sealed virtual IMemberGroup GetByName(string name);
    public sealed virtual IMemberGroup CreateIfNotExists(string roleName);
    public sealed virtual IEnumerable`1<IMemberGroup> GetMemberGroupsForMember(int memberId);
    public sealed virtual IEnumerable`1<IMemberGroup> GetMemberGroupsForMember(string username);
    public sealed virtual Int32[] GetMemberIds(String[] usernames);
    public sealed virtual void AssignRoles(String[] usernames, String[] roleNames);
    public sealed virtual void DissociateRoles(String[] usernames, String[] roleNames);
    public sealed virtual void AssignRoles(Int32[] memberIds, String[] roleNames);
    public void AssignRolesInternal(Int32[] memberIds, String[] roleNames);
    public sealed virtual void DissociateRoles(Int32[] memberIds, String[] roleNames);
    private void DissociateRolesInternal(Int32[] memberIds, String[] roleNames);
    [CompilerGeneratedAttribute]
internal static void add_SavingMemberGroup(TypedEventHandler`2<IMemberGroupRepository, SaveEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
internal static void remove_SavingMemberGroup(TypedEventHandler`2<IMemberGroupRepository, SaveEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
internal static void add_SavedMemberGroup(TypedEventHandler`2<IMemberGroupRepository, SaveEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
internal static void remove_SavedMemberGroup(TypedEventHandler`2<IMemberGroupRepository, SaveEventArgs`1<IMemberGroup>> value);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.MemberRepository : ContentRepositoryBase`3<int, IMember, MemberRepository> {
    private IMemberTypeRepository _memberTypeRepository;
    private ITagRepository _tagRepository;
    private IMemberGroupRepository _memberGroupRepository;
    private IRepositoryCachePolicy`2<IMember, string> _memberByUsernameCachePolicy;
    protected MemberRepository This { get; }
    public int RecycleBinId { get; }
    protected Guid NodeObjectTypeId { get; }
    public MemberRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, IMemberTypeRepository memberTypeRepository, IMemberGroupRepository memberGroupRepository, ITagRepository tagRepository, ILanguageRepository languageRepository, IRelationRepository relationRepository, IRelationTypeRepository relationTypeRepository, Lazy`1<PropertyEditorCollection> propertyEditors, DataValueReferenceFactoryCollection dataValueReferenceFactories);
    protected virtual MemberRepository get_This();
    public virtual int get_RecycleBinId();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual IMember PerformGet(int id);
    protected virtual IEnumerable`1<IMember> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IMember> PerformGetByQuery(IQuery`1<IMember> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(QueryType queryType);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(QueryType queryType, bool current);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected Sql`1<ISqlContext> GetNodeIdQueryWithPropertyData();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    public virtual IEnumerable`1<IMember> GetAllVersions(int nodeId);
    public virtual IMember GetVersion(int versionId);
    protected virtual void PerformDeleteVersion(int id, int versionId);
    protected virtual void PersistNewItem(IMember entity);
    protected virtual void PersistUpdatedItem(IMember entity);
    protected virtual void PersistDeletedItem(IMember entity);
    public sealed virtual IEnumerable`1<IMember> FindMembersInRole(string roleName, string usernameToMatch, StringPropertyMatchType matchType);
    public sealed virtual IEnumerable`1<IMember> GetByMemberGroup(string groupName);
    public sealed virtual bool Exists(string username);
    public sealed virtual int GetCountByQuery(IQuery`1<IMember> query);
    public sealed virtual void SetLastLogin(string username, DateTime date);
    public virtual IEnumerable`1<IMember> GetPage(IQuery`1<IMember> query, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMember> filter, Ordering ordering);
    protected virtual string ApplySystemOrdering(Sql`1& sql, Ordering ordering);
    private IEnumerable`1<IMember> MapDtosToContent(List`1<MemberDto> dtos, bool withCache);
    private IMember MapDtoToContent(MemberDto dto);
    public sealed virtual IMember GetByUsername(string username);
    private IMember PerformGetByUsername(string username);
    private IEnumerable`1<IMember> PerformGetAllByUsername(String[] usernames);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IMember> <GetPage>b__31_0(List`1<MemberDto> x);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.MemberTypeRepository : ContentTypeRepositoryBase`1<IMemberType> {
    protected bool SupportsPublishing { get; }
    protected Guid NodeObjectTypeId { get; }
    public MemberTypeRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, IContentTypeCommonRepository commonRepository, ILanguageRepository languageRepository);
    protected virtual bool get_SupportsPublishing();
    protected virtual IRepositoryCachePolicy`2<IMemberType, int> CreateCachePolicy();
    protected virtual IMemberType PerformGet(int id);
    protected virtual IMemberType PerformGet(Guid id);
    protected virtual IEnumerable`1<IMemberType> PerformGetAll(Guid[] ids);
    protected virtual bool PerformExists(Guid id);
    protected virtual IMemberType PerformGet(string alias);
    protected virtual IEnumerable`1<IMemberType> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IMemberType> PerformGetByQuery(IQuery`1<IMemberType> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected Sql`1<ISqlContext> GetSubquery();
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IMemberType entity);
    protected virtual void PersistUpdatedItem(IMemberType entity);
    protected virtual PropertyType CreatePropertyType(string propertyEditorAlias, ValueStorageType storageType, string propertyTypeAlias);
    private static void EnsureExplicitDataTypeForBuiltInProperties(IContentTypeBase memberType);
}
public class Umbraco.Core.Persistence.Repositories.Implement.NotificationsRepository : object {
    private IScopeAccessor _scopeAccessor;
    private IScope AmbientScope { get; }
    public NotificationsRepository(IScopeAccessor scopeAccessor);
    private IScope get_AmbientScope();
    public sealed virtual IEnumerable`1<Notification> GetUsersNotifications(IEnumerable`1<int> userIds, string action, IEnumerable`1<int> nodeIds, Guid objectType);
    public sealed virtual IEnumerable`1<Notification> GetUserNotifications(IUser user);
    public sealed virtual IEnumerable`1<Notification> SetNotifications(IUser user, IEntity entity, String[] actions);
    public sealed virtual IEnumerable`1<Notification> GetEntityNotifications(IEntity entity);
    public sealed virtual int DeleteNotifications(IEntity entity);
    public sealed virtual int DeleteNotifications(IUser user);
    public sealed virtual int DeleteNotifications(IUser user, IEntity entity);
    public sealed virtual Notification CreateNotification(IUser user, IEntity entity, string action);
}
internal abstract class Umbraco.Core.Persistence.Repositories.Implement.NPocoRepositoryBase`2 : RepositoryBase`2<TId, TEntity> {
    protected IUmbracoDatabase Database { get; }
    protected ISqlContext SqlContext { get; }
    protected ISqlSyntaxProvider SqlSyntax { get; }
    protected Guid NodeObjectTypeId { get; }
    protected NPocoRepositoryBase`2(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected IUmbracoDatabase get_Database();
    protected ISqlContext get_SqlContext();
    protected Sql`1<ISqlContext> Sql();
    protected Sql`1<ISqlContext> Sql(string sql, Object[] args);
    protected ISqlSyntaxProvider get_SqlSyntax();
    protected IQuery`1<T> Query();
    protected abstract virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected abstract virtual string GetBaseWhereClause();
    protected abstract virtual IEnumerable`1<string> GetDeleteClauses();
    protected abstract virtual Guid get_NodeObjectTypeId();
    protected abstract virtual void PersistNewItem(TEntity entity);
    protected abstract virtual void PersistUpdatedItem(TEntity entity);
    protected virtual bool PerformExists(TId id);
    protected virtual int PerformCount(IQuery`1<TEntity> query);
    protected virtual void PersistDeletedItem(TEntity entity);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.PartialViewMacroRepository : PartialViewRepository {
    protected PartialViewType ViewType { get; }
    public PartialViewMacroRepository(IFileSystems fileSystems);
    protected virtual PartialViewType get_ViewType();
}
internal class Umbraco.Core.Persistence.Repositories.Implement.PartialViewRepository : FileRepository`2<string, IPartialView> {
    private static List`1<string> ValidExtensions;
    protected PartialViewType ViewType { get; }
    public PartialViewRepository(IFileSystems fileSystems);
    protected PartialViewRepository(IFileSystem fileSystem);
    private static PartialViewRepository();
    protected virtual PartialViewType get_ViewType();
    public virtual IPartialView Get(string id);
    public virtual void Save(IPartialView entity);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.PartialViewRepository/<GetMany>d__6")]
public virtual IEnumerable`1<IPartialView> GetMany(String[] ids);
    public virtual bool ValidatePartialView(IPartialView partialView);
    public sealed virtual Stream GetFileContentStream(string filepath);
    public sealed virtual void SetFileContent(string filepath, Stream content);
    protected virtual Stream GetContentStream(string content);
    [CompilerGeneratedAttribute]
private string <Get>b__4_0(File file);
    [CompilerGeneratedAttribute]
private string <Save>b__5_0(File file);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.PermissionRepository`1 : NPocoRepositoryBase`2<int, ContentPermissionSet> {
    protected Guid NodeObjectTypeId { get; }
    public PermissionRepository`1(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    public EntityPermissionCollection GetPermissionsForEntities(Int32[] groupIds, Int32[] entityIds);
    public IEnumerable`1<EntityPermission> GetPermissionsForEntities(Int32[] entityIds);
    public EntityPermissionCollection GetPermissionsForEntity(int entityId);
    public void ReplacePermissions(int groupId, IEnumerable`1<char> permissions, Int32[] entityIds);
    public void AssignPermission(int groupId, char permission, Int32[] entityIds);
    public void AssignEntityPermission(TEntity entity, char permission, IEnumerable`1<int> groupIds);
    public void ReplaceEntityPermissions(EntityPermissionSet permissionSet);
    protected virtual ContentPermissionSet PerformGet(int id);
    protected virtual IEnumerable`1<ContentPermissionSet> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<ContentPermissionSet> PerformGetByQuery(IQuery`1<ContentPermissionSet> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistDeletedItem(ContentPermissionSet entity);
    protected virtual void PersistNewItem(ContentPermissionSet entity);
    protected virtual void PersistUpdatedItem(ContentPermissionSet entity);
    private static EntityPermissionCollection ConvertToPermissionList(IEnumerable`1<UserGroup2NodePermissionDto> result);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.PublicAccessRepository : NPocoRepositoryBase`2<Guid, PublicAccessEntry> {
    protected Guid NodeObjectTypeId { get; }
    public PublicAccessRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual IRepositoryCachePolicy`2<PublicAccessEntry, Guid> CreateCachePolicy();
    protected virtual PublicAccessEntry PerformGet(Guid id);
    protected virtual IEnumerable`1<PublicAccessEntry> PerformGetAll(Guid[] ids);
    protected virtual IEnumerable`1<PublicAccessEntry> PerformGetByQuery(IQuery`1<PublicAccessEntry> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(PublicAccessEntry entity);
    protected virtual void PersistUpdatedItem(PublicAccessEntry entity);
    protected virtual Guid GetEntityId(PublicAccessEntry entity);
}
internal enum Umbraco.Core.Persistence.Repositories.Implement.QueryType : Enum {
    public int value__;
    public static QueryType Single;
    public static QueryType Many;
    public static QueryType Ids;
    public static QueryType Count;
}
internal class Umbraco.Core.Persistence.Repositories.Implement.RedirectUrlRepository : NPocoRepositoryBase`2<Guid, IRedirectUrl> {
    protected Guid NodeObjectTypeId { get; }
    public RedirectUrlRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual int PerformCount(IQuery`1<IRedirectUrl> query);
    protected virtual bool PerformExists(Guid id);
    protected virtual IRedirectUrl PerformGet(Guid id);
    protected virtual IEnumerable`1<IRedirectUrl> PerformGetAll(Guid[] ids);
    protected virtual IEnumerable`1<IRedirectUrl> PerformGetByQuery(IQuery`1<IRedirectUrl> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IRedirectUrl entity);
    protected virtual void PersistUpdatedItem(IRedirectUrl entity);
    private static RedirectUrlDto Map(IRedirectUrl redirectUrl);
    private static IRedirectUrl Map(RedirectUrlDto dto);
    public sealed virtual IRedirectUrl Get(string url, Guid contentKey, string culture);
    public sealed virtual void DeleteAll();
    public sealed virtual void DeleteContentUrls(Guid contentKey);
    public sealed virtual void Delete(Guid id);
    public sealed virtual IRedirectUrl GetMostRecentUrl(string url);
    public sealed virtual IRedirectUrl GetMostRecentUrl(string url, string culture);
    public sealed virtual IEnumerable`1<IRedirectUrl> GetContentUrls(Guid contentKey);
    public sealed virtual IEnumerable`1<IRedirectUrl> GetAllUrls(long pageIndex, int pageSize, Int64& total);
    public sealed virtual IEnumerable`1<IRedirectUrl> GetAllUrls(int rootContentId, long pageIndex, int pageSize, Int64& total);
    public sealed virtual IEnumerable`1<IRedirectUrl> SearchUrls(string searchTerm, long pageIndex, int pageSize, Int64& total);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.RelationRepository : NPocoRepositoryBase`2<int, IRelation> {
    private IRelationTypeRepository _relationTypeRepository;
    private IEntityRepository _entityRepository;
    protected Guid NodeObjectTypeId { get; }
    public RelationRepository(IScopeAccessor scopeAccessor, ILogger logger, IRelationTypeRepository relationTypeRepository, IEntityRepository entityRepository);
    protected virtual IRelation PerformGet(int id);
    protected virtual IEnumerable`1<IRelation> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IRelation> PerformGetByQuery(IQuery`1<IRelation> query);
    private IEnumerable`1<IRelation> DtosToEntities(IEnumerable`1<RelationDto> dtos);
    private static IRelation DtoToEntity(RelationDto dto, IRelationType relationType);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IRelation entity);
    protected virtual void PersistUpdatedItem(IRelation entity);
    private void SqlJoinRelations(Sql`1<ISqlContext> sql);
    public sealed virtual IEnumerable`1<IUmbracoEntity> GetPagedParentEntitiesByChildId(int childId, long pageIndex, int pageSize, Int64& totalRecords, Guid[] entityTypes);
    public sealed virtual IEnumerable`1<IUmbracoEntity> GetPagedChildEntitiesByParentId(int parentId, long pageIndex, int pageSize, Int64& totalRecords, Guid[] entityTypes);
    public sealed virtual void Save(IEnumerable`1<IRelation> relations);
    public sealed virtual IEnumerable`1<IRelation> GetPagedRelationsByQuery(IQuery`1<IRelation> query, long pageIndex, int pageSize, Int64& totalRecords, Ordering ordering);
    public sealed virtual void DeleteByParent(int parentId, String[] relationTypeAliases);
    private void PopulateObjectTypes(IRelation[] entities);
    private void ApplyOrdering(Sql`1& sql, Ordering ordering);
    [CompilerGeneratedAttribute]
private IRelation <DtosToEntities>b__6_0(RelationDto x);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.RelationTypeRepository : NPocoRepositoryBase`2<int, IRelationType> {
    protected Guid NodeObjectTypeId { get; }
    public RelationTypeRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual IRepositoryCachePolicy`2<IRelationType, int> CreateCachePolicy();
    protected virtual IRelationType PerformGet(int id);
    public sealed virtual IRelationType Get(Guid id);
    public sealed virtual bool Exists(Guid id);
    protected virtual IEnumerable`1<IRelationType> PerformGetAll(Int32[] ids);
    public sealed virtual IEnumerable`1<IRelationType> GetMany(Guid[] ids);
    protected virtual IEnumerable`1<IRelationType> PerformGetByQuery(IQuery`1<IRelationType> query);
    private static IRelationType DtoToEntity(RelationTypeDto dto);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IRelationType entity);
    protected virtual void PersistUpdatedItem(IRelationType entity);
    private void CheckNullObjectTypeValues(IRelationType entity);
}
internal abstract class Umbraco.Core.Persistence.Repositories.Implement.RepositoryBase`2 : object {
    private IRepositoryCachePolicy`2<TEntity, TId> _cachePolicy;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private AppCaches <AppCaches>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopeAccessor <ScopeAccessor>k__BackingField;
    private IQuery`1<TEntity> _hasIdQuery;
    private static RepositoryCachePolicyOptions _defaultOptions;
    protected ILogger Logger { get; }
    protected AppCaches AppCaches { get; }
    protected IAppPolicyCache GlobalIsolatedCache { get; }
    protected IScopeAccessor ScopeAccessor { get; }
    protected IScope AmbientScope { get; }
    protected IAppPolicyCache IsolatedCache { get; }
    protected RepositoryCachePolicyOptions DefaultOptions { get; }
    protected IRepositoryCachePolicy`2<TEntity, TId> CachePolicy { get; }
    protected RepositoryBase`2(IScopeAccessor scopeAccessor, AppCaches appCaches, ILogger logger);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected AppCaches get_AppCaches();
    protected IAppPolicyCache get_GlobalIsolatedCache();
    [CompilerGeneratedAttribute]
protected IScopeAccessor get_ScopeAccessor();
    protected IScope get_AmbientScope();
    protected virtual TId GetEntityId(TEntity entity);
    protected IAppPolicyCache get_IsolatedCache();
    protected virtual RepositoryCachePolicyOptions get_DefaultOptions();
    protected IRepositoryCachePolicy`2<TEntity, TId> get_CachePolicy();
    protected virtual IRepositoryCachePolicy`2<TEntity, TId> CreateCachePolicy();
    public sealed virtual void Save(TEntity entity);
    public virtual void Delete(TEntity entity);
    protected abstract virtual TEntity PerformGet(TId id);
    protected abstract virtual IEnumerable`1<TEntity> PerformGetAll(TId[] ids);
    protected abstract virtual IEnumerable`1<TEntity> PerformGetByQuery(IQuery`1<TEntity> query);
    protected abstract virtual bool PerformExists(TId id);
    protected abstract virtual int PerformCount(IQuery`1<TEntity> query);
    protected abstract virtual void PersistNewItem(TEntity item);
    protected abstract virtual void PersistUpdatedItem(TEntity item);
    protected abstract virtual void PersistDeletedItem(TEntity item);
    public sealed virtual TEntity Get(TId id);
    public sealed virtual IEnumerable`1<TEntity> GetMany(TId[] ids);
    public sealed virtual IEnumerable`1<TEntity> Get(IQuery`1<TEntity> query);
    public sealed virtual bool Exists(TId id);
    public sealed virtual int Count(IQuery`1<TEntity> query);
    [CompilerGeneratedAttribute]
private int <get_DefaultOptions>b__21_0();
}
internal static class Umbraco.Core.Persistence.Repositories.Implement.RepositoryCacheKeys : object {
    private static Dictionary`2<Type, string> s_keys;
    private static RepositoryCacheKeys();
    public static string GetKey();
    public static string GetKey(TId id);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.ScriptRepository : FileRepository`2<string, Script> {
    private IContentSection _contentConfig;
    public ScriptRepository(IFileSystems fileSystems, IContentSection contentConfig);
    public virtual Script Get(string id);
    public virtual void Save(Script entity);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.ScriptRepository/<GetMany>d__4")]
public virtual IEnumerable`1<Script> GetMany(String[] ids);
    public sealed virtual bool ValidateScript(Script script);
    public sealed virtual Stream GetFileContentStream(string filepath);
    public sealed virtual void SetFileContent(string filepath, Stream content);
    [CompilerGeneratedAttribute]
private string <Get>b__2_0(File file);
    [CompilerGeneratedAttribute]
private string <Save>b__3_0(File file);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.ServerRegistrationRepository : NPocoRepositoryBase`2<int, IServerRegistration> {
    protected Guid NodeObjectTypeId { get; }
    public ServerRegistrationRepository(IScopeAccessor scopeAccessor, ILogger logger);
    protected virtual IRepositoryCachePolicy`2<IServerRegistration, int> CreateCachePolicy();
    public void ClearCache();
    protected virtual int PerformCount(IQuery`1<IServerRegistration> query);
    protected virtual bool PerformExists(int id);
    protected virtual IServerRegistration PerformGet(int id);
    protected virtual IEnumerable`1<IServerRegistration> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IServerRegistration> PerformGetByQuery(IQuery`1<IServerRegistration> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IServerRegistration entity);
    protected virtual void PersistUpdatedItem(IServerRegistration entity);
    public sealed virtual void DeactiveStaleServers(TimeSpan staleTimeout);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.SimilarNodeName : object {
    private int _numPos;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Id { get; public set; }
    public string Name { get; public set; }
    public int NumPos { get; }
    public int NumVal { get; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public int get_NumPos();
    public int get_NumVal();
    public static string GetUniqueName(IEnumerable`1<SimilarNodeName> names, int nodeId, string nodeName);
}
internal abstract class Umbraco.Core.Persistence.Repositories.Implement.SimpleGetRepository`3 : NPocoRepositoryBase`2<TId, TEntity> {
    protected Guid NodeObjectTypeId { get; }
    protected SimpleGetRepository`3(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected abstract virtual TEntity ConvertToEntity(TDto dto);
    protected abstract virtual object GetBaseWhereClauseArguments(TId id);
    protected abstract virtual string GetWhereInClauseForGetAll();
    protected virtual IEnumerable`1<TDto> PerformFetch(Sql sql);
    protected virtual TEntity PerformGet(TId id);
    protected virtual IEnumerable`1<TEntity> PerformGetAll(TId[] ids);
    protected sealed virtual IEnumerable`1<TEntity> PerformGetByQuery(IQuery`1<TEntity> query);
    protected sealed virtual IEnumerable`1<string> GetDeleteClauses();
    protected sealed virtual Guid get_NodeObjectTypeId();
    protected sealed virtual void PersistNewItem(TEntity entity);
    protected sealed virtual void PersistUpdatedItem(TEntity entity);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.StylesheetRepository : FileRepository`2<string, Stylesheet> {
    private static List`1<string> ValidExtensions;
    public StylesheetRepository(IFileSystems fileSystems);
    private static StylesheetRepository();
    public virtual Stylesheet Get(string id);
    public virtual void Save(Stylesheet entity);
    [IteratorStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.StylesheetRepository/<GetMany>d__3")]
public virtual IEnumerable`1<Stylesheet> GetMany(String[] ids);
    public IEnumerable`1<Stylesheet> GetStylesheetsAtPath(string rootPath);
    public sealed virtual bool ValidateStylesheet(Stylesheet stylesheet);
    public sealed virtual Stream GetFileContentStream(string filepath);
    public sealed virtual void SetFileContent(string filepath, Stream content);
    public sealed virtual long GetFileSize(string filepath);
    [CompilerGeneratedAttribute]
private string <Get>b__1_0(File file);
    [CompilerGeneratedAttribute]
private string <Save>b__2_0(File file);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.TagRepository : NPocoRepositoryBase`2<int, ITag> {
    protected Guid NodeObjectTypeId { get; }
    public TagRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger);
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual ITag PerformGet(int id);
    protected virtual IEnumerable`1<ITag> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<ITag> PerformGetByQuery(IQuery`1<ITag> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    private Sql`1<ISqlContext> GetBaseQuery();
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual void PersistNewItem(ITag entity);
    protected virtual void PersistUpdatedItem(ITag entity);
    public sealed virtual void Assign(int contentId, int propertyTypeId, IEnumerable`1<ITag> tags, bool replaceTags);
    public sealed virtual void Remove(int contentId, int propertyTypeId, IEnumerable`1<ITag> tags);
    public sealed virtual void RemoveAll(int contentId, int propertyTypeId);
    public sealed virtual void RemoveAll(int contentId);
    private string GetTagSet(IEnumerable`1<ITag> tags);
    public sealed virtual TaggedEntity GetTaggedEntityByKey(Guid key);
    public sealed virtual TaggedEntity GetTaggedEntityById(int id);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedEntitiesByTagGroup(TaggableObjectTypes objectType, string group, string culture);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedEntitiesByTag(TaggableObjectTypes objectType, string tag, string group, string culture);
    private Sql`1<ISqlContext> GetTaggedEntitiesSql(TaggableObjectTypes objectType, string culture);
    private static IEnumerable`1<TaggedEntity> Map(IEnumerable`1<TaggedEntityDto> dtos);
    public sealed virtual IEnumerable`1<ITag> GetTagsForEntityType(TaggableObjectTypes objectType, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForEntity(int contentId, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForEntity(Guid contentId, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForProperty(int contentId, string propertyTypeAlias, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForProperty(Guid contentId, string propertyTypeAlias, string group, string culture);
    private Sql`1<ISqlContext> GetTagsSql(string culture, bool withGrouping);
    private Sql`1<ISqlContext> AddTagsSqlWhere(Sql`1<ISqlContext> sql, string culture);
    private IEnumerable`1<ITag> ExecuteTagsQuery(Sql sql);
    private Guid GetNodeObjectType(TaggableObjectTypes type);
    [CompilerGeneratedAttribute]
private Sql`1<ISqlContext> <PerformGetAll>b__4_0(IEnumerable`1<int> batch);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.TemplateRepository : NPocoRepositoryBase`2<int, ITemplate> {
    private IFileSystem _viewsFileSystem;
    private ViewHelper _viewHelper;
    protected Guid NodeObjectTypeId { get; }
    public TemplateRepository(IScopeAccessor scopeAccessor, AppCaches cache, ILogger logger, IFileSystems fileSystems);
    protected virtual IRepositoryCachePolicy`2<ITemplate, int> CreateCachePolicy();
    protected virtual ITemplate PerformGet(int id);
    protected virtual IEnumerable`1<ITemplate> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<ITemplate> PerformGetByQuery(IQuery`1<ITemplate> query);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(ITemplate entity);
    protected virtual void PersistUpdatedItem(ITemplate entity);
    private void SaveFile(Template template, string originalAlias);
    protected virtual void PersistDeletedItem(ITemplate entity);
    private IEnumerable`1<IUmbracoEntity> GetAxisDefinitions(TemplateDto[] templates);
    private ITemplate MapFromDto(TemplateDto dto, IUmbracoEntity[] axisDefinitions);
    private void SetVirtualPath(ITemplate template);
    private string GetFileContent(ITemplate template, bool init);
    private string GetFileContent(ITemplate template, IFileSystem fs, string filename, bool init);
    private string GetFileContent(IFileSystem fs, string filename);
    public sealed virtual Stream GetFileContentStream(string filepath);
    public sealed virtual void SetFileContent(string filepath, Stream content);
    public sealed virtual long GetFileSize(string filepath);
    private IFileSystem GetFileSystem(string filepath);
    public sealed virtual ITemplate Get(string alias);
    public sealed virtual IEnumerable`1<ITemplate> GetAll(String[] aliases);
    public sealed virtual IEnumerable`1<ITemplate> GetChildren(int masterTemplateId);
    public sealed virtual IEnumerable`1<ITemplate> GetChildren(string alias);
    public sealed virtual IEnumerable`1<ITemplate> GetDescendants(int masterTemplateId);
    public sealed virtual IEnumerable`1<ITemplate> GetDescendants(string alias);
    private void AddChildren(ITemplate[] all, List`1<ITemplate> descendants, string masterAlias);
    public sealed virtual bool ValidateTemplate(ITemplate template);
    private static IEnumerable`1<TemplateNode> CreateChildren(TemplateNode parent, IEnumerable`1<ITemplate> childTemplates, ITemplate[] allTemplates);
    private void EnsureValidAlias(ITemplate template);
    private bool AliasAlreadExists(ITemplate template);
    private string EnsureUniqueAlias(ITemplate template, int attempts);
    [CompilerGeneratedAttribute]
private string <PersistNewItem>b__12_0(File file);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.Repositories.Implement.TupleExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Map(Tuple`2<List`1<T1>, List`1<T2>> t, Func`3<T1, T2, TResult> relator);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Map(Tuple`3<List`1<T1>, List`1<T2>, List`1<T3>> t, Func`4<T1, T2, T3, TResult> relator);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.UpgradeCheckRepository : object {
    private static HttpClient _httpClient;
    private static string RestApiUpgradeChecklUrl;
    [AsyncStateMachineAttribute("Umbraco.Core.Persistence.Repositories.Implement.UpgradeCheckRepository/<CheckUpgradeAsync>d__2")]
public sealed virtual Task`1<UpgradeResult> CheckUpgradeAsync(SemVersion version);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.UserGroupRepository : NPocoRepositoryBase`2<int, IUserGroup> {
    private UserGroupWithUsersRepository _userGroupWithUsersRepository;
    private PermissionRepository`1<IContent> _permissionRepository;
    public static string GetByAliasCacheKeyPrefix;
    protected Guid NodeObjectTypeId { get; }
    public UserGroupRepository(IScopeAccessor scopeAccessor, AppCaches appCaches, ILogger logger);
    public static string GetByAliasCacheKey(string alias);
    public sealed virtual IUserGroup Get(string alias);
    public sealed virtual IEnumerable`1<IUserGroup> GetGroupsAssignedToSection(string sectionAlias);
    public sealed virtual void AddOrUpdateGroupWithUsers(IUserGroup userGroup, Int32[] userIds);
    public sealed virtual EntityPermissionCollection GetPermissions(Int32[] groupIds, Int32[] entityIds);
    public sealed virtual EntityPermissionCollection GetPermissions(IReadOnlyUserGroup[] groups, bool fallbackToDefaultPermissions, Int32[] nodeIds);
    public sealed virtual void ReplaceGroupPermissions(int groupId, IEnumerable`1<char> permissions, Int32[] entityIds);
    public sealed virtual void AssignGroupPermission(int groupId, char permission, Int32[] entityIds);
    protected virtual IUserGroup PerformGet(int id);
    protected virtual IEnumerable`1<IUserGroup> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IUserGroup> PerformGetByQuery(IQuery`1<IUserGroup> query);
    protected Sql`1<ISqlContext> GetBaseQuery(QueryType type);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    private static void AppendGroupBy(Sql`1<ISqlContext> sql);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IUserGroup entity);
    protected virtual void PersistUpdatedItem(IUserGroup entity);
    private void PersistAllowedSections(IUserGroup entity);
}
internal class Umbraco.Core.Persistence.Repositories.Implement.UserRepository : NPocoRepositoryBase`2<int, IUser> {
    private IMapperCollection _mapperCollection;
    private IGlobalSettings _globalSettings;
    private IRuntimeState _runtimeState;
    private string _passwordConfigJson;
    private bool _passwordConfigInitialized;
    private string PasswordConfigJson { get; }
    protected Guid NodeObjectTypeId { get; }
    public UserRepository(IScopeAccessor scopeAccessor, AppCaches appCaches, ILogger logger, IMapperCollection mapperCollection, IGlobalSettings globalSettings, IRuntimeState runtimeState);
    internal UserRepository(IScopeAccessor scopeAccessor, AppCaches appCaches, ILogger logger, IMapperCollection mapperCollection, IDictionary`2<string, string> passwordConfig, IGlobalSettings globalSettings, IRuntimeState runtimeState);
    private string get_PasswordConfigJson();
    protected virtual IUser PerformGet(int id);
    public sealed virtual IUser GetByUsername(string username, bool includeSecurityData);
    public sealed virtual IUser Get(int id, bool includeSecurityData);
    public sealed virtual IProfile GetProfile(string username);
    public sealed virtual IProfile GetProfile(int id);
    public sealed virtual IDictionary`2<UserState, int> GetUserStates();
    public sealed virtual Guid CreateLoginSession(int userId, string requestingIpAddress, bool cleanStaleSessions);
    public sealed virtual bool ValidateLoginSession(int userId, Guid sessionId);
    public sealed virtual int ClearLoginSessions(int userId);
    public sealed virtual int ClearLoginSessions(TimeSpan timespan);
    public sealed virtual void ClearLoginSession(Guid sessionId);
    protected virtual IEnumerable`1<IUser> PerformGetAll(Int32[] ids);
    protected virtual IEnumerable`1<IUser> PerformGetByQuery(IQuery`1<IUser> query);
    private IUser GetWith(Action`1<Sql`1<ISqlContext>> with, bool includeReferences);
    private UserDto GetDtoWith(Action`1<Sql`1<ISqlContext>> with, bool includeReferences);
    private List`1<UserDto> GetDtosWith(Action`1<Sql`1<ISqlContext>> with, bool includeReferences);
    private void PerformGetReferencedDtos(List`1<UserDto> dtos);
    protected virtual Sql`1<ISqlContext> GetBaseQuery(bool isCount);
    private static void AddGroupLeftJoin(Sql`1<ISqlContext> sql);
    private Sql`1<ISqlContext> GetBaseQuery(string columns);
    protected virtual string GetBaseWhereClause();
    protected virtual IEnumerable`1<string> GetDeleteClauses();
    protected virtual Guid get_NodeObjectTypeId();
    protected virtual void PersistNewItem(IUser entity);
    protected virtual void PersistUpdatedItem(IUser entity);
    private void AddingOrUpdateStartNodes(IEntity entity, IEnumerable`1<UserStartNodeDto> current, StartNodeTypeValue startNodeType, Int32[] entityStartIds);
    public sealed virtual int GetCountByQuery(IQuery`1<IUser> query);
    public sealed virtual bool Exists(string username);
    public sealed virtual IEnumerable`1<IUser> GetAllInGroup(int groupId);
    public sealed virtual IEnumerable`1<IUser> GetAllNotInGroup(int groupId);
    private IEnumerable`1<IUser> GetAllInOrNotInGroup(int groupId, bool include);
    public sealed virtual IEnumerable`1<IUser> GetPagedResultsByQuery(IQuery`1<IUser> query, long pageIndex, int pageSize, Int64& totalRecords, Expression`1<Func`2<IUser, object>> orderBy, Direction orderDirection, String[] includeUserGroups, String[] excludeUserGroups, UserState[] userState, IQuery`1<IUser> filter);
    private Sql`1<ISqlContext> ApplyFilter(Sql`1<ISqlContext> sql, Sql`1<ISqlContext> filterSql, bool hasWhereClause);
    private Sql`1<ISqlContext> ApplySort(Sql`1<ISqlContext> sql, Expression`1<Func`2<IUser, object>> orderBy, Direction orderDirection);
    internal IEnumerable`1<IUser> GetNextUsers(int id, int count);
    private IEnumerable`1<IUser> ConvertFromDtos(IEnumerable`1<UserDto> dtos);
}
public interface Umbraco.Core.Persistence.Repositories.INotificationsRepository {
    public abstract virtual Notification CreateNotification(IUser user, IEntity entity, string action);
    public abstract virtual int DeleteNotifications(IUser user);
    public abstract virtual int DeleteNotifications(IEntity entity);
    public abstract virtual int DeleteNotifications(IUser user, IEntity entity);
    public abstract virtual IEnumerable`1<Notification> GetEntityNotifications(IEntity entity);
    public abstract virtual IEnumerable`1<Notification> GetUserNotifications(IUser user);
    public abstract virtual IEnumerable`1<Notification> GetUsersNotifications(IEnumerable`1<int> userIds, string action, IEnumerable`1<int> nodeIds, Guid objectType);
    public abstract virtual IEnumerable`1<Notification> SetNotifications(IUser user, IEntity entity, String[] actions);
}
public interface Umbraco.Core.Persistence.Repositories.IPartialViewMacroRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IPartialViewRepository {
    public abstract virtual void AddFolder(string folderPath);
    public abstract virtual void DeleteFolder(string folderPath);
    public abstract virtual bool ValidatePartialView(IPartialView partialView);
    public abstract virtual Stream GetFileContentStream(string filepath);
    public abstract virtual void SetFileContent(string filepath, Stream content);
    public abstract virtual long GetFileSize(string filepath);
}
public interface Umbraco.Core.Persistence.Repositories.IPublicAccessRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IRedirectUrlRepository {
    public abstract virtual IRedirectUrl Get(string url, Guid contentKey, string culture);
    public abstract virtual void Delete(Guid id);
    public abstract virtual void DeleteAll();
    public abstract virtual void DeleteContentUrls(Guid contentKey);
    public abstract virtual IRedirectUrl GetMostRecentUrl(string url);
    public abstract virtual IRedirectUrl GetMostRecentUrl(string url, string culture);
    public abstract virtual IEnumerable`1<IRedirectUrl> GetContentUrls(Guid contentKey);
    public abstract virtual IEnumerable`1<IRedirectUrl> GetAllUrls(long pageIndex, int pageSize, Int64& total);
    public abstract virtual IEnumerable`1<IRedirectUrl> GetAllUrls(int rootContentId, long pageIndex, int pageSize, Int64& total);
    public abstract virtual IEnumerable`1<IRedirectUrl> SearchUrls(string searchTerm, long pageIndex, int pageSize, Int64& total);
}
public interface Umbraco.Core.Persistence.Repositories.IRelationRepository {
    public abstract virtual IEnumerable`1<IRelation> GetPagedRelationsByQuery(IQuery`1<IRelation> query, long pageIndex, int pageSize, Int64& totalRecords, Ordering ordering);
    public abstract virtual void Save(IEnumerable`1<IRelation> relations);
    public abstract virtual void DeleteByParent(int parentId, String[] relationTypeAliases);
    public abstract virtual IEnumerable`1<IUmbracoEntity> GetPagedParentEntitiesByChildId(int childId, long pageIndex, int pageSize, Int64& totalRecords, Guid[] entityTypes);
    public abstract virtual IEnumerable`1<IUmbracoEntity> GetPagedChildEntitiesByParentId(int parentId, long pageIndex, int pageSize, Int64& totalRecords, Guid[] entityTypes);
}
public interface Umbraco.Core.Persistence.Repositories.IRelationTypeRepository {
}
public interface Umbraco.Core.Persistence.Repositories.IScriptRepository {
    public abstract virtual bool ValidateScript(Script script);
    public abstract virtual Stream GetFileContentStream(string filepath);
    public abstract virtual void SetFileContent(string filepath, Stream content);
    public abstract virtual long GetFileSize(string filepath);
}
public interface Umbraco.Core.Persistence.Repositories.IServerRegistrationRepository {
    public abstract virtual void DeactiveStaleServers(TimeSpan staleTimeout);
}
public interface Umbraco.Core.Persistence.Repositories.IStylesheetRepository {
    public abstract virtual bool ValidateStylesheet(Stylesheet stylesheet);
    public abstract virtual Stream GetFileContentStream(string filepath);
    public abstract virtual void SetFileContent(string filepath, Stream content);
    public abstract virtual long GetFileSize(string filepath);
}
public interface Umbraco.Core.Persistence.Repositories.ITagRepository {
    public abstract virtual void Assign(int contentId, int propertyTypeId, IEnumerable`1<ITag> tags, bool replaceTags);
    public abstract virtual void Remove(int contentId, int propertyTypeId, IEnumerable`1<ITag> tags);
    public abstract virtual void RemoveAll(int contentId);
    public abstract virtual void RemoveAll(int contentId, int propertyTypeId);
    public abstract virtual TaggedEntity GetTaggedEntityByKey(Guid key);
    public abstract virtual TaggedEntity GetTaggedEntityById(int id);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedEntitiesByTagGroup(TaggableObjectTypes objectType, string group, string culture);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedEntitiesByTag(TaggableObjectTypes objectType, string tag, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForEntityType(TaggableObjectTypes objectType, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForEntity(int contentId, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForEntity(Guid contentId, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForProperty(int contentId, string propertyTypeAlias, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForProperty(Guid contentId, string propertyTypeAlias, string group, string culture);
}
public interface Umbraco.Core.Persistence.Repositories.ITemplateRepository {
    public abstract virtual ITemplate Get(string alias);
    public abstract virtual IEnumerable`1<ITemplate> GetAll(String[] aliases);
    public abstract virtual IEnumerable`1<ITemplate> GetChildren(int masterTemplateId);
    public abstract virtual IEnumerable`1<ITemplate> GetChildren(string alias);
    public abstract virtual IEnumerable`1<ITemplate> GetDescendants(int masterTemplateId);
    public abstract virtual IEnumerable`1<ITemplate> GetDescendants(string alias);
    public abstract virtual bool ValidateTemplate(ITemplate template);
    public abstract virtual Stream GetFileContentStream(string filepath);
    public abstract virtual void SetFileContent(string filepath, Stream content);
    public abstract virtual long GetFileSize(string filepath);
}
public interface Umbraco.Core.Persistence.Repositories.IUpgradeCheckRepository {
    public abstract virtual Task`1<UpgradeResult> CheckUpgradeAsync(SemVersion version);
}
public interface Umbraco.Core.Persistence.Repositories.IUserGroupRepository {
    public abstract virtual IUserGroup Get(string alias);
    public abstract virtual IEnumerable`1<IUserGroup> GetGroupsAssignedToSection(string sectionAlias);
    public abstract virtual void AddOrUpdateGroupWithUsers(IUserGroup userGroup, Int32[] userIds);
    public abstract virtual EntityPermissionCollection GetPermissions(Int32[] groupIds, Int32[] entityIds);
    public abstract virtual EntityPermissionCollection GetPermissions(IReadOnlyUserGroup[] groups, bool fallbackToDefaultPermissions, Int32[] nodeIds);
    public abstract virtual void ReplaceGroupPermissions(int groupId, IEnumerable`1<char> permissions, Int32[] entityIds);
    public abstract virtual void AssignGroupPermission(int groupId, char permission, Int32[] entityIds);
}
public interface Umbraco.Core.Persistence.Repositories.IUserRepository {
    public abstract virtual int GetCountByQuery(IQuery`1<IUser> query);
    public abstract virtual bool Exists(string username);
    public abstract virtual IEnumerable`1<IUser> GetAllInGroup(int groupId);
    public abstract virtual IEnumerable`1<IUser> GetAllNotInGroup(int groupId);
    public abstract virtual IEnumerable`1<IUser> GetPagedResultsByQuery(IQuery`1<IUser> query, long pageIndex, int pageSize, Int64& totalRecords, Expression`1<Func`2<IUser, object>> orderBy, Direction orderDirection, String[] includeUserGroups, String[] excludeUserGroups, UserState[] userState, IQuery`1<IUser> filter);
    public abstract virtual IUser GetByUsername(string username, bool includeSecurityData);
    public abstract virtual IUser Get(int id, bool includeSecurityData);
    public abstract virtual IProfile GetProfile(string username);
    public abstract virtual IProfile GetProfile(int id);
    public abstract virtual IDictionary`2<UserState, int> GetUserStates();
    public abstract virtual Guid CreateLoginSession(int userId, string requestingIpAddress, bool cleanStaleSessions);
    public abstract virtual bool ValidateLoginSession(int userId, Guid sessionId);
    public abstract virtual int ClearLoginSessions(int userId);
    public abstract virtual int ClearLoginSessions(TimeSpan timespan);
    public abstract virtual void ClearLoginSession(Guid sessionId);
}
internal class Umbraco.Core.Persistence.SqlCeImageMapper : DefaultMapper {
    public virtual Func`2<object, object> GetToDbConverter(Type destType, MemberInfo sourceMemberInfo);
    public virtual Func`2<object, object> GetParameterConverter(DbCommand dbCommand, Type sourceType);
}
public class Umbraco.Core.Persistence.SqlContext : object {
    private Lazy`1<IMapperCollection> _mappers;
    [CompilerGeneratedAttribute]
private ISqlSyntaxProvider <SqlSyntax>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseType <DatabaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlTemplates <Templates>k__BackingField;
    [CompilerGeneratedAttribute]
private IPocoDataFactory <PocoDataFactory>k__BackingField;
    public ISqlSyntaxProvider SqlSyntax { get; }
    public DatabaseType DatabaseType { get; }
    public SqlTemplates Templates { get; }
    public IPocoDataFactory PocoDataFactory { get; }
    public IMapperCollection Mappers { get; }
    public SqlContext(ISqlSyntaxProvider sqlSyntax, DatabaseType databaseType, IPocoDataFactory pocoDataFactory, IMapperCollection mappers);
    public SqlContext(ISqlSyntaxProvider sqlSyntax, DatabaseType databaseType, IPocoDataFactory pocoDataFactory, Lazy`1<IMapperCollection> mappers);
    [CompilerGeneratedAttribute]
public sealed virtual ISqlSyntaxProvider get_SqlSyntax();
    [CompilerGeneratedAttribute]
public sealed virtual DatabaseType get_DatabaseType();
    public sealed virtual Sql`1<ISqlContext> Sql();
    public sealed virtual Sql`1<ISqlContext> Sql(string sql, Object[] args);
    public sealed virtual IQuery`1<T> Query();
    [CompilerGeneratedAttribute]
public sealed virtual SqlTemplates get_Templates();
    [CompilerGeneratedAttribute]
public sealed virtual IPocoDataFactory get_PocoDataFactory();
    public sealed virtual IMapperCollection get_Mappers();
}
[ExtensionAttribute]
public static class Umbraco.Core.Persistence.SqlContextExtensions : object {
    [ExtensionAttribute]
public static ValueTuple`2<string, Object[]> VisitDto(ISqlContext sqlContext, Expression`1<Func`2<TDto, object>> expression, string alias);
    [ExtensionAttribute]
public static ValueTuple`2<string, Object[]> VisitDto(ISqlContext sqlContext, Expression`1<Func`2<TDto, TOut>> expression, string alias);
    [ExtensionAttribute]
public static ValueTuple`2<string, Object[]> VisitDto(ISqlContext sqlContext, Expression`1<Func`3<TDto1, TDto2, object>> expression, string alias1, string alias2);
    [ExtensionAttribute]
public static ValueTuple`2<string, Object[]> VisitDto(ISqlContext sqlContext, Expression`1<Func`3<TDto1, TDto2, TOut>> expression, string alias1, string alias2);
    [ExtensionAttribute]
public static ValueTuple`2<string, Object[]> VisitModel(ISqlContext sqlContext, Expression`1<Func`2<TModel, object>> expression);
    [ExtensionAttribute]
public static string VisitModelField(ISqlContext sqlContext, Expression`1<Func`2<TModel, object>> field);
}
public class Umbraco.Core.Persistence.SqlSyntax.ColumnInfo : object {
    [CompilerGeneratedAttribute]
private string <TableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Ordinal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataType>k__BackingField;
    public string TableName { get; public set; }
    public string ColumnName { get; public set; }
    public int Ordinal { get; public set; }
    public string ColumnDefault { get; public set; }
    public bool IsNullable { get; public set; }
    public string DataType { get; public set; }
    public ColumnInfo(string tableName, string columnName, int ordinal, string columnDefault, string isNullable, string dataType);
    public ColumnInfo(string tableName, string columnName, int ordinal, string isNullable, string dataType);
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public int get_Ordinal();
    [CompilerGeneratedAttribute]
public void set_Ordinal(int value);
    [CompilerGeneratedAttribute]
public string get_ColumnDefault();
    [CompilerGeneratedAttribute]
public void set_ColumnDefault(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public void set_IsNullable(bool value);
    [CompilerGeneratedAttribute]
public string get_DataType();
    [CompilerGeneratedAttribute]
public void set_DataType(string value);
}
public class Umbraco.Core.Persistence.SqlSyntax.DbTypes : object {
    public DbType DbType;
    public string TextDefinition;
    public bool ShouldQuoteValue;
    public Dictionary`2<Type, string> ColumnTypeMap;
    public Dictionary`2<Type, DbType> ColumnDbTypeMap;
    public void Set(DbType dbType, string fieldDefinition);
}
public interface Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider {
    public string CreateTable { get; }
    public string DropTable { get; }
    public string AddColumn { get; }
    public string DropColumn { get; }
    public string AlterColumn { get; }
    public string RenameColumn { get; }
    public string RenameTable { get; }
    public string CreateSchema { get; }
    public string AlterSchema { get; }
    public string DropSchema { get; }
    public string CreateIndex { get; }
    public string DropIndex { get; }
    public string InsertData { get; }
    public string UpdateData { get; }
    public string DeleteData { get; }
    public string TruncateTable { get; }
    public string CreateConstraint { get; }
    public string DeleteConstraint { get; }
    public string DeleteDefaultConstraint { get; }
    public Regex AliasRegex { get; }
    public string ConvertIntegerToOrderableString { get; }
    public string ConvertDateToOrderableString { get; }
    public string ConvertDecimalToOrderableString { get; }
    public IsolationLevel DefaultIsolationLevel { get; }
    public abstract virtual string EscapeString(string val);
    public abstract virtual string GetWildcardPlaceholder();
    public abstract virtual string GetStringColumnEqualComparison(string column, int paramIndex, TextColumnType columnType);
    public abstract virtual string GetStringColumnWildcardComparison(string column, int paramIndex, TextColumnType columnType);
    public abstract virtual string GetConcat(String[] args);
    public abstract virtual string GetQuotedTableName(string tableName);
    public abstract virtual string GetQuotedColumnName(string columnName);
    public abstract virtual string GetQuotedName(string name);
    public abstract virtual bool DoesTableExist(IDatabase db, string tableName);
    public abstract virtual string GetIndexType(IndexTypes indexTypes);
    public abstract virtual string GetSpecialDbType(SpecialDbTypes dbTypes);
    public abstract virtual string get_CreateTable();
    public abstract virtual string get_DropTable();
    public abstract virtual string get_AddColumn();
    public abstract virtual string get_DropColumn();
    public abstract virtual string get_AlterColumn();
    public abstract virtual string get_RenameColumn();
    public abstract virtual string get_RenameTable();
    public abstract virtual string get_CreateSchema();
    public abstract virtual string get_AlterSchema();
    public abstract virtual string get_DropSchema();
    public abstract virtual string get_CreateIndex();
    public abstract virtual string get_DropIndex();
    public abstract virtual string get_InsertData();
    public abstract virtual string get_UpdateData();
    public abstract virtual string get_DeleteData();
    public abstract virtual string get_TruncateTable();
    public abstract virtual string get_CreateConstraint();
    public abstract virtual string get_DeleteConstraint();
    public abstract virtual string get_DeleteDefaultConstraint();
    public abstract virtual string FormatDateTime(DateTime date, bool includeTime);
    public abstract virtual string Format(TableDefinition table);
    public abstract virtual string Format(IEnumerable`1<ColumnDefinition> columns);
    public abstract virtual List`1<string> Format(IEnumerable`1<IndexDefinition> indexes);
    public abstract virtual List`1<string> Format(IEnumerable`1<ForeignKeyDefinition> foreignKeys);
    public abstract virtual string FormatPrimaryKey(TableDefinition table);
    public abstract virtual string GetQuotedValue(string value);
    public abstract virtual string Format(ColumnDefinition column);
    public abstract virtual string Format(ColumnDefinition column, string tableName, IEnumerable`1& sqls);
    public abstract virtual string Format(IndexDefinition index);
    public abstract virtual string Format(ForeignKeyDefinition foreignKey);
    public abstract virtual string FormatColumnRename(string tableName, string oldName, string newName);
    public abstract virtual string FormatTableRename(string oldName, string newName);
    public abstract virtual Regex get_AliasRegex();
    public abstract virtual Sql`1<ISqlContext> SelectTop(Sql`1<ISqlContext> sql, int top);
    public abstract virtual bool SupportsClustered();
    public abstract virtual bool SupportsIdentityInsert();
    public abstract virtual string get_ConvertIntegerToOrderableString();
    public abstract virtual string get_ConvertDateToOrderableString();
    public abstract virtual string get_ConvertDecimalToOrderableString();
    public abstract virtual IsolationLevel get_DefaultIsolationLevel();
    public abstract virtual IEnumerable`1<string> GetTablesInSchema(IDatabase db);
    public abstract virtual IEnumerable`1<ColumnInfo> GetColumnsInSchema(IDatabase db);
    public abstract virtual IEnumerable`1<Tuple`2<string, string>> GetConstraintsPerTable(IDatabase db);
    public abstract virtual IEnumerable`1<Tuple`3<string, string, string>> GetConstraintsPerColumn(IDatabase db);
    public abstract virtual IEnumerable`1<Tuple`4<string, string, string, bool>> GetDefinedIndexes(IDatabase db);
    public abstract virtual bool TryGetDefaultConstraint(IDatabase db, string tableName, string columnName, String& constraintName);
    public abstract virtual void ReadLock(IDatabase db, Int32[] lockIds);
    public abstract virtual void WriteLock(IDatabase db, Int32[] lockIds);
}
public interface Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider2 {
    public abstract virtual void ReadLock(IDatabase db, TimeSpan timeout, int lockId);
    public abstract virtual void WriteLock(IDatabase db, TimeSpan timeout, int lockId);
}
public abstract class Umbraco.Core.Persistence.SqlSyntax.MicrosoftSqlSyntaxProviderBase`1 : SqlSyntaxProviderBase`1<TSyntax> {
    public string RenameTable { get; }
    public string AddColumn { get; }
    public virtual string get_RenameTable();
    public virtual string get_AddColumn();
    public virtual string GetQuotedTableName(string tableName);
    public virtual string GetQuotedColumnName(string columnName);
    public virtual string GetQuotedName(string name);
    public virtual string GetStringColumnEqualComparison(string column, int paramIndex, TextColumnType columnType);
    public virtual string GetStringColumnWildcardComparison(string column, int paramIndex, TextColumnType columnType);
    public virtual SqlDbType GetSqlDbType(Type clrType);
    public virtual SqlDbType GetSqlDbType(DbType dbType);
}
public class Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider : MicrosoftSqlSyntaxProviderBase`1<SqlCeSyntaxProvider> {
    public string TruncateTable { get; }
    public IsolationLevel DefaultIsolationLevel { get; }
    public string DeleteDefaultConstraint { get; }
    public string DropIndex { get; }
    public string CreateIndex { get; }
    public virtual Sql`1<ISqlContext> SelectTop(Sql`1<ISqlContext> sql, int top);
    public virtual bool SupportsClustered();
    public virtual string get_TruncateTable();
    public virtual string GetIndexType(IndexTypes indexTypes);
    public virtual string GetConcat(String[] args);
    public virtual IsolationLevel get_DefaultIsolationLevel();
    public virtual string FormatColumnRename(string tableName, string oldName, string newName);
    public virtual string FormatTableRename(string oldName, string newName);
    public virtual string FormatPrimaryKey(TableDefinition table);
    public virtual IEnumerable`1<string> GetTablesInSchema(IDatabase db);
    public virtual IEnumerable`1<ColumnInfo> GetColumnsInSchema(IDatabase db);
    public virtual IEnumerable`1<Tuple`2<string, string>> GetConstraintsPerTable(IDatabase db);
    public virtual IEnumerable`1<Tuple`3<string, string, string>> GetConstraintsPerColumn(IDatabase db);
    public virtual IEnumerable`1<Tuple`4<string, string, string, bool>> GetDefinedIndexes(IDatabase db);
    public virtual bool TryGetDefaultConstraint(IDatabase db, string tableName, string columnName, String& constraintName);
    public virtual bool DoesTableExist(IDatabase db, string tableName);
    public virtual void WriteLock(IDatabase db, TimeSpan timeout, int lockId);
    public virtual void WriteLock(IDatabase db, Int32[] lockIds);
    private static void ObtainWriteLock(IDatabase db, TimeSpan timeout, int lockId);
    public virtual void ReadLock(IDatabase db, TimeSpan timeout, int lockId);
    public virtual void ReadLock(IDatabase db, Int32[] lockIds);
    private static void ObtainReadLock(IDatabase db, Nullable`1<TimeSpan> timeout, int lockId);
    protected virtual string FormatIdentity(ColumnDefinition column);
    private static string GetIdentityString(ColumnDefinition column);
    protected virtual string FormatSystemMethods(SystemMethods systemMethod);
    public virtual string get_DeleteDefaultConstraint();
    public virtual string get_DropIndex();
    public virtual string get_CreateIndex();
    public virtual string Format(IndexDefinition index);
    public virtual string GetSpecialDbType(SpecialDbTypes dbTypes);
    public virtual SqlDbType GetSqlDbType(DbType dbType);
    [CompilerGeneratedAttribute]
private string <Format>b__34_0(IndexColumnDefinition x);
}
public class Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider : MicrosoftSqlSyntaxProviderBase`1<SqlServerSyntaxProvider> {
    [CompilerGeneratedAttribute]
private ServerVersionInfo <ServerVersion>k__BackingField;
    internal ServerVersionInfo ServerVersion { get; private set; }
    public IsolationLevel DefaultIsolationLevel { get; }
    public string DeleteDefaultConstraint { get; }
    public string DropIndex { get; }
    public string RenameColumn { get; }
    public string CreateIndex { get; }
    [CompilerGeneratedAttribute]
internal ServerVersionInfo get_ServerVersion();
    [CompilerGeneratedAttribute]
private void set_ServerVersion(ServerVersionInfo value);
    private static VersionName MapProductVersion(string productVersion);
    internal ServerVersionInfo GetSetVersion(string connectionString, string providerName, ILogger logger);
    public IEnumerable`1<Tuple`4<string, string, string, string>> GetDefaultConstraintsPerColumn(IDatabase db);
    public virtual IEnumerable`1<string> GetTablesInSchema(IDatabase db);
    public virtual IsolationLevel get_DefaultIsolationLevel();
    public virtual IEnumerable`1<ColumnInfo> GetColumnsInSchema(IDatabase db);
    public virtual IEnumerable`1<Tuple`2<string, string>> GetConstraintsPerTable(IDatabase db);
    public virtual IEnumerable`1<Tuple`3<string, string, string>> GetConstraintsPerColumn(IDatabase db);
    public virtual IEnumerable`1<Tuple`4<string, string, string, bool>> GetDefinedIndexes(IDatabase db);
    public virtual bool TryGetDefaultConstraint(IDatabase db, string tableName, string columnName, String& constraintName);
    public virtual bool DoesTableExist(IDatabase db, string tableName);
    public virtual void WriteLock(IDatabase db, TimeSpan timeout, int lockId);
    public virtual void WriteLock(IDatabase db, Int32[] lockIds);
    private static void ObtainWriteLock(IDatabase db, TimeSpan timeout, int lockId);
    public virtual void ReadLock(IDatabase db, TimeSpan timeout, int lockId);
    public virtual void ReadLock(IDatabase db, Int32[] lockIds);
    private static void ObtainReadLock(IDatabase db, Nullable`1<TimeSpan> timeout, int lockId);
    public virtual string FormatColumnRename(string tableName, string oldName, string newName);
    public virtual string FormatTableRename(string oldName, string newName);
    protected virtual string FormatIdentity(ColumnDefinition column);
    public virtual Sql`1<ISqlContext> SelectTop(Sql`1<ISqlContext> sql, int top);
    private static string GetIdentityString(ColumnDefinition column);
    protected virtual string FormatSystemMethods(SystemMethods systemMethod);
    public virtual string get_DeleteDefaultConstraint();
    public virtual string get_DropIndex();
    public virtual string get_RenameColumn();
    public virtual string get_CreateIndex();
    public virtual string Format(IndexDefinition index);
    [CompilerGeneratedAttribute]
internal static string <GetSetVersion>g__GetString|8_0(IDataReader reader, int ordinal, string defaultValue);
    [CompilerGeneratedAttribute]
internal static int <GetSetVersion>g__GetInt32|8_1(IDataReader reader, int ordinal, int defaultValue);
    [CompilerGeneratedAttribute]
private string <Format>b__39_0(IndexColumnDefinition x);
    [CompilerGeneratedAttribute]
private string <Format>b__39_1(IndexColumnDefinition x);
}
internal enum Umbraco.Core.Persistence.SqlSyntax.SqlServerVersionName : Enum {
    public int value__;
    public static SqlServerVersionName Invalid;
    public static SqlServerVersionName V7;
    public static SqlServerVersionName V2000;
    public static SqlServerVersionName V2005;
    public static SqlServerVersionName V2008;
    public static SqlServerVersionName V2012;
    public static SqlServerVersionName V2014;
    public static SqlServerVersionName V2016;
    public static SqlServerVersionName Other;
}
public abstract class Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderBase`1 : object {
    [CompilerGeneratedAttribute]
private Regex <AliasRegex>k__BackingField;
    public string StringLengthNonUnicodeColumnDefinitionFormat;
    public string StringLengthUnicodeColumnDefinitionFormat;
    public string DecimalColumnDefinitionFormat;
    public string DefaultValueFormat;
    public int DefaultStringLength;
    public int DefaultDecimalPrecision;
    public int DefaultDecimalScale;
    public string StringColumnDefinition;
    public string StringLengthColumnDefinitionFormat;
    public string AutoIncrementDefinition;
    public string IntColumnDefinition;
    public string LongColumnDefinition;
    public string GuidColumnDefinition;
    public string BoolColumnDefinition;
    public string RealColumnDefinition;
    public string DecimalColumnDefinition;
    public string BlobColumnDefinition;
    public string DateTimeColumnDefinition;
    public string TimeColumnDefinition;
    [CompilerGeneratedAttribute]
private IList`1<Func`2<ColumnDefinition, string>> <ClauseOrder>k__BackingField;
    protected DbTypes DbTypeMap;
    public Regex AliasRegex { get; }
    protected IList`1<Func`2<ColumnDefinition, string>> ClauseOrder { get; }
    public IsolationLevel DefaultIsolationLevel { get; }
    public string DeleteDefaultConstraint { get; }
    public string CreateTable { get; }
    public string DropTable { get; }
    public string AddColumn { get; }
    public string DropColumn { get; }
    public string AlterColumn { get; }
    public string RenameColumn { get; }
    public string RenameTable { get; }
    public string CreateSchema { get; }
    public string AlterSchema { get; }
    public string DropSchema { get; }
    public string CreateIndex { get; }
    public string DropIndex { get; }
    public string InsertData { get; }
    public string UpdateData { get; }
    public string DeleteData { get; }
    public string TruncateTable { get; }
    public string CreateConstraint { get; }
    public string DeleteConstraint { get; }
    public string CreateForeignKeyConstraint { get; }
    public string CreateDefaultConstraint { get; }
    public string ConvertIntegerToOrderableString { get; }
    public string ConvertDateToOrderableString { get; }
    public string ConvertDecimalToOrderableString { get; }
    [CompilerGeneratedAttribute]
public sealed virtual Regex get_AliasRegex();
    public sealed virtual string GetWildcardPlaceholder();
    [CompilerGeneratedAttribute]
protected IList`1<Func`2<ColumnDefinition, string>> get_ClauseOrder();
    protected void InitColumnTypeMap();
    public virtual string EscapeString(string val);
    public virtual string GetStringColumnEqualComparison(string column, int paramIndex, TextColumnType columnType);
    public virtual string GetStringColumnWildcardComparison(string column, int paramIndex, TextColumnType columnType);
    public virtual string GetConcat(String[] args);
    public virtual string GetQuotedTableName(string tableName);
    public virtual string GetQuotedColumnName(string columnName);
    public virtual string GetQuotedName(string name);
    public virtual string GetQuotedValue(string value);
    public virtual string GetIndexType(IndexTypes indexTypes);
    public virtual string GetSpecialDbType(SpecialDbTypes dbTypes);
    public abstract virtual IsolationLevel get_DefaultIsolationLevel();
    public virtual IEnumerable`1<string> GetTablesInSchema(IDatabase db);
    public virtual IEnumerable`1<ColumnInfo> GetColumnsInSchema(IDatabase db);
    public virtual IEnumerable`1<Tuple`2<string, string>> GetConstraintsPerTable(IDatabase db);
    public virtual IEnumerable`1<Tuple`3<string, string, string>> GetConstraintsPerColumn(IDatabase db);
    public abstract virtual IEnumerable`1<Tuple`4<string, string, string, bool>> GetDefinedIndexes(IDatabase db);
    public abstract virtual bool TryGetDefaultConstraint(IDatabase db, string tableName, string columnName, String& constraintName);
    public abstract virtual void ReadLock(IDatabase db, Int32[] lockIds);
    public abstract virtual void WriteLock(IDatabase db, Int32[] lockIds);
    public abstract virtual void ReadLock(IDatabase db, TimeSpan timeout, int lockId);
    public abstract virtual void WriteLock(IDatabase db, TimeSpan timeout, int lockId);
    public virtual bool DoesTableExist(IDatabase db, string tableName);
    public virtual bool SupportsClustered();
    public virtual bool SupportsIdentityInsert();
    public virtual string FormatDateTime(DateTime date, bool includeTime);
    public virtual string Format(TableDefinition table);
    public virtual List`1<string> Format(IEnumerable`1<IndexDefinition> indexes);
    public virtual string Format(IndexDefinition index);
    public virtual List`1<string> Format(IEnumerable`1<ForeignKeyDefinition> foreignKeys);
    public virtual string Format(ForeignKeyDefinition foreignKey);
    public virtual string Format(IEnumerable`1<ColumnDefinition> columns);
    public virtual string Format(ColumnDefinition column);
    public virtual string Format(ColumnDefinition column, string tableName, IEnumerable`1& sqls);
    public virtual string FormatPrimaryKey(TableDefinition table);
    public virtual string FormatColumnRename(string tableName, string oldName, string newName);
    public virtual string FormatTableRename(string oldName, string newName);
    protected virtual string FormatCascade(string onWhat, Rule rule);
    protected virtual string FormatString(ColumnDefinition column);
    protected virtual string FormatType(ColumnDefinition column);
    protected virtual string FormatNullable(ColumnDefinition column);
    protected virtual string FormatConstraint(ColumnDefinition column);
    protected virtual string FormatDefaultValue(ColumnDefinition column);
    protected virtual string FormatPrimaryKey(ColumnDefinition column);
    protected abstract virtual string FormatSystemMethods(SystemMethods systemMethod);
    protected abstract virtual string FormatIdentity(ColumnDefinition column);
    public abstract virtual Sql`1<ISqlContext> SelectTop(Sql`1<ISqlContext> sql, int top);
    public virtual string get_DeleteDefaultConstraint();
    public virtual string get_CreateTable();
    public virtual string get_DropTable();
    public virtual string get_AddColumn();
    public virtual string get_DropColumn();
    public virtual string get_AlterColumn();
    public virtual string get_RenameColumn();
    public virtual string get_RenameTable();
    public virtual string get_CreateSchema();
    public virtual string get_AlterSchema();
    public virtual string get_DropSchema();
    public virtual string get_CreateIndex();
    public virtual string get_DropIndex();
    public virtual string get_InsertData();
    public virtual string get_UpdateData();
    public virtual string get_DeleteData();
    public virtual string get_TruncateTable();
    public virtual string get_CreateConstraint();
    public virtual string get_DeleteConstraint();
    public virtual string get_CreateForeignKeyConstraint();
    public virtual string get_CreateDefaultConstraint();
    public virtual string get_ConvertIntegerToOrderableString();
    public virtual string get_ConvertDateToOrderableString();
    public virtual string get_ConvertDecimalToOrderableString();
    [CompilerGeneratedAttribute]
private string <Format>b__57_0(IndexColumnDefinition x);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<DbIndexDefinition> GetDefinedIndexesDefinitions(ISqlSyntaxProvider sql, IDatabase db);
    [ExtensionAttribute]
public static string GetQuotedColumn(ISqlSyntaxProvider sql, string tableName, string columnName);
    [ExtensionAttribute]
public static Sql GetDeleteSubquery(ISqlSyntaxProvider sqlProvider, string tableName, string columnName, Sql subQuery, WhereInType whereInType);
}
internal enum Umbraco.Core.Persistence.SqlSyntax.WhereInType : Enum {
    public int value__;
    public static WhereInType In;
    public static WhereInType NotIn;
}
[ExtensionAttribute]
public static class Umbraco.Core.Persistence.SqlSyntaxExtensions : object {
    [ExtensionAttribute]
private static string GetTableName(Type type);
    [ExtensionAttribute]
private static string GetColumnName(PropertyInfo column);
    [ExtensionAttribute]
public static string GetFieldName(ISqlSyntaxProvider sqlSyntax, Expression`1<Func`2<TDto, object>> fieldSelector, string tableAlias);
}
public class Umbraco.Core.Persistence.SqlTemplate : object {
    private ISqlContext _sqlContext;
    private string _sql;
    private Dictionary`2<int, object> _args;
    internal SqlTemplate(ISqlContext sqlContext, string sql, Object[] args);
    public Sql`1<ISqlContext> Sql();
    public Sql`1<ISqlContext> Sql(Object[] args);
    public Sql`1<ISqlContext> SqlNamed(object nargs);
    internal string ToText();
    public static object Arg(string name);
    public static T Arg(string name);
    public static IEnumerable`1<T> ArgIn(string name);
}
public class Umbraco.Core.Persistence.SqlTemplates : object {
    private ConcurrentDictionary`2<string, SqlTemplate> _templates;
    private ISqlContext _sqlContext;
    public SqlTemplates(ISqlContext sqlContext);
    internal void Clear();
    public SqlTemplate Get(string key, Func`2<Sql`1<ISqlContext>, Sql`1<ISqlContext>> sqlBuilder);
}
public class Umbraco.Core.Persistence.UmbracoDatabase : Database {
    private ILogger _logger;
    private RetryPolicy _connectionRetryPolicy;
    private RetryPolicy _commandRetryPolicy;
    private Guid _instanceGuid;
    [CompilerGeneratedAttribute]
private ISqlContext <SqlContext>k__BackingField;
    private bool _enableCount;
    private string _instanceId;
    private static bool EnableSqlTraceDefault;
    [CompilerGeneratedAttribute]
private bool <InTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableSqlTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SqlCount>k__BackingField;
    private DbCommand _cmd;
    public ISqlContext SqlContext { get; }
    public string InstanceId { get; }
    public bool InTransaction { get; private set; }
    internal bool EnableSqlTrace { get; internal set; }
    internal bool EnableSqlCount { get; internal set; }
    internal int SqlCount { get; private set; }
    public UmbracoDatabase(string connectionString, ISqlContext sqlContext, DbProviderFactory provider, ILogger logger, RetryPolicy connectionRetryPolicy, RetryPolicy commandRetryPolicy);
    internal UmbracoDatabase(DbConnection connection, ISqlContext sqlContext, ILogger logger);
    private void Init();
    [CompilerGeneratedAttribute]
public sealed virtual ISqlContext get_SqlContext();
    public virtual DbCommand CreateCommand(DbConnection connection, CommandType commandType, string sql, Object[] args);
    public sealed virtual void AddParameter(DbCommand cmd, PocoColumn column, object value);
    public sealed virtual string get_InstanceId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_InTransaction();
    [CompilerGeneratedAttribute]
private void set_InTransaction(bool value);
    protected virtual void OnBeginTransaction();
    protected virtual void OnAbortTransaction();
    protected virtual void OnCompleteTransaction();
    [CompilerGeneratedAttribute]
internal bool get_EnableSqlTrace();
    [CompilerGeneratedAttribute]
internal void set_EnableSqlTrace(bool value);
    internal bool get_EnableSqlCount();
    internal void set_EnableSqlCount(bool value);
    [CompilerGeneratedAttribute]
internal int get_SqlCount();
    [CompilerGeneratedAttribute]
private void set_SqlCount(int value);
    protected virtual DbConnection OnConnectionOpened(DbConnection connection);
    protected virtual void OnException(Exception ex);
    protected virtual void OnExecutingCommand(DbCommand cmd);
    private string CommandToString(DbCommand cmd);
    private string CommandToString(string sql, Object[] args);
    protected virtual void OnExecutedCommand(DbCommand cmd);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Persistence.UmbracoDatabaseExtensions : object {
    [ExtensionAttribute]
public static UmbracoDatabase AsUmbracoDatabase(IUmbracoDatabase database);
    [ExtensionAttribute]
public static bool HasTable(IUmbracoDatabase database, string tableName);
    [ExtensionAttribute]
public static bool IsDatabaseEmpty(IUmbracoDatabase database);
    [ExtensionAttribute]
public static DatabaseSchemaResult ValidateSchema(IUmbracoDatabase database, ILogger logger);
    [ExtensionAttribute]
public static bool IsUmbracoInstalled(IUmbracoDatabase database, ILogger logger);
}
internal class Umbraco.Core.Persistence.UmbracoDatabaseFactory : DisposableObjectSlim {
    private Lazy`1<IMapperCollection> _mappers;
    private ILogger _logger;
    private object _lock;
    private DatabaseFactory _npocoDatabaseFactory;
    private IPocoDataFactory _pocoDataFactory;
    private string _connectionString;
    private string _providerName;
    private DbProviderFactory _dbProviderFactory;
    private DatabaseType _databaseType;
    private ISqlSyntaxProvider _sqlSyntax;
    private RetryPolicy _connectionRetryPolicy;
    private RetryPolicy _commandRetryPolicy;
    private MapperCollection _pocoMappers;
    private SqlContext _sqlContext;
    private bool _upgrading;
    private bool _initialized;
    public bool Configured { get; }
    public bool Initialized { get; }
    public string ConnectionString { get; }
    public string ProviderName { get; }
    public bool CanConnect { get; }
    public ISqlContext SqlContext { get; }
    public UmbracoDatabaseFactory(ILogger logger, Lazy`1<IMapperCollection> mappers);
    public UmbracoDatabaseFactory(string connectionStringName, ILogger logger, Lazy`1<IMapperCollection> mappers);
    public UmbracoDatabaseFactory(string connectionString, string providerName, ILogger logger, Lazy`1<IMapperCollection> mappers);
    public sealed virtual bool get_Configured();
    public sealed virtual bool get_Initialized();
    public sealed virtual string get_ConnectionString();
    public sealed virtual string get_ProviderName();
    public sealed virtual bool get_CanConnect();
    private void UpdateSqlServerDatabaseType();
    public sealed virtual ISqlContext get_SqlContext();
    public sealed virtual void ConfigureForUpgrade();
    public sealed virtual void Configure(string connectionString, string providerName);
    private void EnsureInitialized();
    private SqlContext Initialize();
    public sealed virtual IUmbracoDatabase CreateDatabase();
    private InitializedPocoDataBuilder GetPocoDataFactoryResolver(Type type, IPocoDataFactory factory);
    private ISqlSyntaxProvider GetSqlSyntaxProvider(string providerName);
    private UmbracoDatabase CreateDatabaseInstance();
    protected virtual void DisposeResources();
    internal void ResetForTests();
}
internal class Umbraco.Core.Persistence.UmbracoPocoDataBuilder : PocoDataBuilder {
    private bool _upgrading;
    public UmbracoPocoDataBuilder(Type type, MapperCollection mapper, bool upgrading);
    protected virtual ColumnInfo GetColumnInfo(MemberInfo mi, Type type);
}
public class Umbraco.Core.PropertyEditors.ColorPickerConfiguration : ValueListConfiguration {
    [CompilerGeneratedAttribute]
private bool <UseLabel>k__BackingField;
    [ConfigurationFieldAttribute("useLabel", "Include labels?", "boolean")]
public bool UseLabel { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseLabel();
    [CompilerGeneratedAttribute]
public void set_UseLabel(bool value);
}
internal class Umbraco.Core.PropertyEditors.ComplexPropertyEditorContentEventHandler : object {
    private string _editorAlias;
    private Func`3<string, bool, string> _formatPropertyValue;
    private bool _disposedValue;
    public ComplexPropertyEditorContentEventHandler(string editorAlias, Func`3<string, bool, string> formatPropertyValue);
    private void ContentService_Copying(IContentService sender, CopyEventArgs`1<IContent> e);
    private void ContentService_Saving(IContentService sender, ContentSavingEventArgs e);
    private void UpdatePropertyValues(IEnumerable`1<Property> props, bool onlyMissingKeys);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Umbraco.Core.PropertyEditors.ConfigurationEditor : object {
    private IDictionary`2<string, object> _defaultConfiguration;
    [CompilerGeneratedAttribute]
private List`1<ConfigurationField> <Fields>k__BackingField;
    [CompilerGeneratedAttribute]
private static JsonSerializerSettings <ConfigurationJsonSettings>k__BackingField;
    [JsonPropertyAttribute("fields")]
public List`1<ConfigurationField> Fields { get; }
    [JsonPropertyAttribute("defaultConfig")]
public IDictionary`2<string, object> DefaultConfiguration { get; internal set; }
    public object DefaultConfigurationObject { get; }
    public static JsonSerializerSettings ConfigurationJsonSettings { get; }
    protected ConfigurationEditor(List`1<ConfigurationField> fields);
    private static ConfigurationEditor();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ConfigurationField> get_Fields();
    protected ConfigurationField Field(string name);
    public static TConfiguration ConfigurationAs(object obj);
    public static string ToDatabase(object configuration);
    public virtual IDictionary`2<string, object> get_DefaultConfiguration();
    internal virtual void set_DefaultConfiguration(IDictionary`2<string, object> value);
    public virtual object get_DefaultConfigurationObject();
    public virtual bool IsConfiguration(object obj);
    public virtual object FromDatabase(string configurationJson);
    public virtual object FromConfigurationEditor(IDictionary`2<string, object> editorValues, object configuration);
    public virtual IDictionary`2<string, object> ToConfigurationEditor(object configuration);
    public virtual IDictionary`2<string, object> ToValueEditor(object configuration);
    [CompilerGeneratedAttribute]
public static JsonSerializerSettings get_ConfigurationJsonSettings();
}
public abstract class Umbraco.Core.PropertyEditors.ConfigurationEditor`1 : ConfigurationEditor {
    public IDictionary`2<string, object> DefaultConfiguration { get; }
    public object DefaultConfigurationObject { get; }
    private static List`1<ConfigurationField> DiscoverFields();
    public virtual IDictionary`2<string, object> get_DefaultConfiguration();
    public virtual object get_DefaultConfigurationObject();
    public virtual bool IsConfiguration(object obj);
    public virtual object FromDatabase(string configuration);
    public sealed virtual object FromConfigurationEditor(IDictionary`2<string, object> editorValues, object configuration);
    public virtual TConfiguration FromConfigurationEditor(IDictionary`2<string, object> editorValues, TConfiguration configuration);
    public sealed virtual IDictionary`2<string, object> ToConfigurationEditor(object configuration);
    public virtual Dictionary`2<string, object> ToConfigurationEditor(TConfiguration configuration);
    [CompilerGeneratedAttribute]
internal static string <ToConfigurationEditor>g__FieldNamer|11_0(PropertyInfo property);
}
public class Umbraco.Core.PropertyEditors.ConfigurationField : object {
    private string _view;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IValueValidator> <Validators>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Config>k__BackingField;
    [JsonPropertyAttribute]
public string Key { get; public set; }
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonIgnoreAttribute]
public string PropertyName { get; public set; }
    [JsonIgnoreAttribute]
public Type PropertyType { get; public set; }
    [JsonPropertyAttribute("description")]
public string Description { get; public set; }
    [JsonPropertyAttribute("hideLabel")]
public bool HideLabel { get; public set; }
    [JsonPropertyAttribute]
public string View { get; public set; }
    [JsonPropertyAttribute("validation")]
public List`1<IValueValidator> Validators { get; }
    [JsonPropertyAttribute("config")]
public IDictionary`2<string, object> Config { get; public set; }
    public ConfigurationField(IValueValidator[] validators);
    private ConfigurationField(List`1<IValueValidator> validators);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_HideLabel();
    [CompilerGeneratedAttribute]
public void set_HideLabel(bool value);
    public string get_View();
    public void set_View(string value);
    [CompilerGeneratedAttribute]
public List`1<IValueValidator> get_Validators();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(IDictionary`2<string, object> value);
}
[AttributeUsageAttribute("132")]
public class Umbraco.Core.PropertyEditors.ConfigurationFieldAttribute : Attribute {
    private Type _type;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <View>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Settable`1<bool> <HideLabelSettable>k__BackingField;
    public string Key { get; }
    public string Name { get; }
    public string View { get; }
    public string Description { get; public set; }
    public bool HideLabel { get; public set; }
    public Settable`1<bool> HideLabelSettable { get; }
    public Type Type { get; public set; }
    public ConfigurationFieldAttribute(Type type);
    public ConfigurationFieldAttribute(string key, string name, string view);
    public ConfigurationFieldAttribute(string name, string view);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_View();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public bool get_HideLabel();
    public void set_HideLabel(bool value);
    [CompilerGeneratedAttribute]
public Settable`1<bool> get_HideLabelSettable();
    public Type get_Type();
    public void set_Type(Type value);
}
[ExtensionAttribute]
public static class Umbraco.Core.PropertyEditors.ConfigurationFieldsExtensions : object {
    [ExtensionAttribute]
public static void Add(List`1<ConfigurationField> fields, string key, string name, string description, string view, IDictionary`2<string, object> config);
}
[DebuggerDisplayAttribute("{DebuggerDisplay(),nq}")]
[HideFromTypeFinderAttribute]
public class Umbraco.Core.PropertyEditors.DataEditor : object {
    private IDictionary`2<string, object> _defaultConfiguration;
    [CompilerGeneratedAttribute]
private DataEditorAttribute <Attribute>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private EditorType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    [CompilerGeneratedAttribute]
private IDataValueEditor <ExplicitValueEditor>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationEditor <ExplicitConfigurationEditor>k__BackingField;
    protected DataEditorAttribute Attribute { get; }
    protected ILogger Logger { get; }
    [JsonPropertyAttribute]
public string Alias { get; internal set; }
    [JsonIgnoreAttribute]
public EditorType Type { get; }
    [JsonPropertyAttribute]
public string Name { get; internal set; }
    [JsonPropertyAttribute("icon")]
public string Icon { get; internal set; }
    [JsonPropertyAttribute("group")]
public string Group { get; internal set; }
    [JsonIgnoreAttribute]
public bool IsDeprecated { get; }
    [JsonPropertyAttribute("editor")]
public IDataValueEditor ExplicitValueEditor { get; public set; }
    [JsonPropertyAttribute("config")]
public IConfigurationEditor ExplicitConfigurationEditor { get; public set; }
    [JsonPropertyAttribute("defaultConfig")]
public IDictionary`2<string, object> DefaultConfiguration { get; public set; }
    public IPropertyIndexValueFactory PropertyIndexValueFactory { get; }
    public DataEditor(ILogger logger, EditorType type);
    [CompilerGeneratedAttribute]
protected DataEditorAttribute get_Attribute();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
internal void set_Alias(string value);
    [CompilerGeneratedAttribute]
public sealed virtual EditorType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Icon();
    [CompilerGeneratedAttribute]
internal void set_Icon(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Group();
    [CompilerGeneratedAttribute]
internal void set_Group(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDeprecated();
    public sealed virtual IDataValueEditor GetValueEditor();
    public virtual IDataValueEditor GetValueEditor(object configuration);
    [CompilerGeneratedAttribute]
public IDataValueEditor get_ExplicitValueEditor();
    [CompilerGeneratedAttribute]
public void set_ExplicitValueEditor(IDataValueEditor value);
    public sealed virtual IConfigurationEditor GetConfigurationEditor();
    [CompilerGeneratedAttribute]
public IConfigurationEditor get_ExplicitConfigurationEditor();
    [CompilerGeneratedAttribute]
public void set_ExplicitConfigurationEditor(IConfigurationEditor value);
    public sealed virtual IDictionary`2<string, object> get_DefaultConfiguration();
    public void set_DefaultConfiguration(IDictionary`2<string, object> value);
    public virtual IPropertyIndexValueFactory get_PropertyIndexValueFactory();
    protected virtual IDataValueEditor CreateValueEditor();
    protected virtual IConfigurationEditor CreateConfigurationEditor();
    protected virtual string DebuggerDisplay();
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.PropertyEditors.DataEditorAttribute : Attribute {
    private string _valueType;
    public static string NullView;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private EditorType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <View>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeprecated>k__BackingField;
    public string Alias { get; }
    public EditorType Type { get; }
    public string Name { get; }
    public string View { get; }
    public string ValueType { get; public set; }
    public bool HideLabel { get; public set; }
    public string Icon { get; public set; }
    public string Group { get; public set; }
    public bool IsDeprecated { get; public set; }
    public DataEditorAttribute(string alias, string name);
    public DataEditorAttribute(string alias, string name, string view);
    public DataEditorAttribute(string alias, EditorType type, string name);
    public DataEditorAttribute(string alias, EditorType type, string name, string view);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
public EditorType get_Type();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_View();
    public string get_ValueType();
    public void set_ValueType(string value);
    [CompilerGeneratedAttribute]
public bool get_HideLabel();
    [CompilerGeneratedAttribute]
public void set_HideLabel(bool value);
    [CompilerGeneratedAttribute]
public string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDeprecated();
    [CompilerGeneratedAttribute]
public void set_IsDeprecated(bool value);
}
public class Umbraco.Core.PropertyEditors.DataEditorCollection : BuilderCollectionBase`1<IDataEditor> {
    public DataEditorCollection(IEnumerable`1<IDataEditor> items);
}
public class Umbraco.Core.PropertyEditors.DataEditorCollectionBuilder : LazyCollectionBuilderBase`3<DataEditorCollectionBuilder, DataEditorCollection, IDataEditor> {
    protected DataEditorCollectionBuilder This { get; }
    protected virtual DataEditorCollectionBuilder get_This();
}
public class Umbraco.Core.PropertyEditors.DataValueEditor : object {
    private string _view;
    [CompilerGeneratedAttribute]
private object <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IValueValidator> <Validators>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HideLabel>k__BackingField;
    public object Configuration { get; public set; }
    [JsonPropertyAttribute]
public string View { get; public set; }
    [JsonPropertyAttribute("valueType")]
public string ValueType { get; public set; }
    [JsonPropertyAttribute("validation")]
public List`1<IValueValidator> Validators { get; private set; }
    public IValueRequiredValidator RequiredValidator { get; }
    public IValueFormatValidator FormatValidator { get; }
    [JsonPropertyAttribute("hideLabel")]
public bool HideLabel { get; public set; }
    public bool IsReadOnly { get; }
    public DataValueEditor(string view, IValueValidator[] validators);
    public DataValueEditor(DataEditorAttribute attribute);
    [CompilerGeneratedAttribute]
public virtual object get_Configuration();
    [CompilerGeneratedAttribute]
public virtual void set_Configuration(object value);
    public sealed virtual string get_View();
    public void set_View(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ValueType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ValueType(string value);
    public sealed virtual IEnumerable`1<ValidationResult> Validate(object value, bool required, string format);
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IValueValidator> get_Validators();
    [CompilerGeneratedAttribute]
private void set_Validators(List`1<IValueValidator> value);
    public virtual IValueRequiredValidator get_RequiredValidator();
    public virtual IValueFormatValidator get_FormatValidator();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideLabel();
    [CompilerGeneratedAttribute]
public void set_HideLabel(bool value);
    public virtual bool get_IsReadOnly();
    internal Attempt`1<object> TryConvertValueToCrlType(object value);
    public virtual object FromEditor(ContentPropertyData editorValue, object currentValue);
    public virtual object ToEditor(Property property, IDataTypeService dataTypeService, string culture, string segment);
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.DataValueEditor/<ConvertDbToXml>d__33")]
public sealed virtual IEnumerable`1<XElement> ConvertDbToXml(Property property, IDataTypeService dataTypeService, ILocalizationService localizationService, bool published);
    public sealed virtual XNode ConvertDbToXml(PropertyType propertyType, object value, IDataTypeService dataTypeService);
    public virtual string ConvertDbToString(PropertyType propertyType, object value, IDataTypeService dataTypeService);
}
public class Umbraco.Core.PropertyEditors.DataValueReferenceFactoryCollection : BuilderCollectionBase`1<IDataValueReferenceFactory> {
    public DataValueReferenceFactoryCollection(IEnumerable`1<IDataValueReferenceFactory> items);
    public IEnumerable`1<UmbracoEntityReference> GetAllReferences(PropertyCollection properties, PropertyEditorCollection propertyEditors);
}
public class Umbraco.Core.PropertyEditors.DataValueReferenceFactoryCollectionBuilder : OrderedCollectionBuilderBase`3<DataValueReferenceFactoryCollectionBuilder, DataValueReferenceFactoryCollection, IDataValueReferenceFactory> {
    protected DataValueReferenceFactoryCollectionBuilder This { get; }
    protected virtual DataValueReferenceFactoryCollectionBuilder get_This();
}
public class Umbraco.Core.PropertyEditors.DateTimeConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OffsetTime>k__BackingField;
    [ConfigurationFieldAttribute("format", "Date format", "textstring")]
public string Format { get; public set; }
    [ConfigurationFieldAttribute("offsetTime", "Offset time", "boolean")]
public bool OffsetTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public bool get_OffsetTime();
    [CompilerGeneratedAttribute]
public void set_OffsetTime(bool value);
}
public class Umbraco.Core.PropertyEditors.DefaultPropertyIndexValueFactory : object {
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.DefaultPropertyIndexValueFactory/<GetIndexValues>d__0")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<object>>> GetIndexValues(Property property, string culture, string segment, bool published);
}
[AttributeUsageAttribute("4")]
internal class Umbraco.Core.PropertyEditors.DefaultPropertyValueConverterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <DefaultConvertersToShadow>k__BackingField;
    public Type[] DefaultConvertersToShadow { get; }
    public DefaultPropertyValueConverterAttribute(Type[] convertersToShadow);
    [CompilerGeneratedAttribute]
public Type[] get_DefaultConvertersToShadow();
}
public class Umbraco.Core.PropertyEditors.DropDownFlexibleConfiguration : ValueListConfiguration {
    [CompilerGeneratedAttribute]
private bool <Multiple>k__BackingField;
    [ConfigurationFieldAttribute("multiple", "Enable multiple choice", "boolean")]
public bool Multiple { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Multiple();
    [CompilerGeneratedAttribute]
public void set_Multiple(bool value);
}
[FlagsAttribute]
public enum Umbraco.Core.PropertyEditors.EditorType : Enum {
    public int value__;
    public static EditorType Nothing;
    public static EditorType PropertyValue;
    public static EditorType MacroParameter;
}
public class Umbraco.Core.PropertyEditors.EyeDropperColorPickerConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <ShowAlpha>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPalette>k__BackingField;
    [ConfigurationFieldAttribute("showAlpha", "Show alpha", "boolean")]
public bool ShowAlpha { get; public set; }
    [ConfigurationFieldAttribute("showPalette", "Show palette", "boolean")]
public bool ShowPalette { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ShowAlpha();
    [CompilerGeneratedAttribute]
public void set_ShowAlpha(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShowPalette();
    [CompilerGeneratedAttribute]
public void set_ShowPalette(bool value);
}
public class Umbraco.Core.PropertyEditors.GridEditor : object {
    private string _view;
    private string _render;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Config>k__BackingField;
    [JsonPropertyAttribute]
public string Name { get; public set; }
    [JsonPropertyAttribute("nameTemplate")]
public string NameTemplate { get; public set; }
    [JsonPropertyAttribute]
public string Alias { get; public set; }
    [JsonPropertyAttribute]
public string View { get; public set; }
    [JsonPropertyAttribute("render")]
public string Render { get; public set; }
    [JsonPropertyAttribute]
public string Icon { get; public set; }
    [JsonPropertyAttribute("config")]
public IDictionary`2<string, object> Config { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_NameTemplate();
    [CompilerGeneratedAttribute]
public void set_NameTemplate(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Alias();
    [CompilerGeneratedAttribute]
public void set_Alias(string value);
    public sealed virtual string get_View();
    public void set_View(string value);
    public sealed virtual string get_Render();
    public void set_Render(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Icon();
    [CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, object> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(IDictionary`2<string, object> value);
    protected bool Equals(GridEditor other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface Umbraco.Core.PropertyEditors.IConfigurationEditor {
    public List`1<ConfigurationField> Fields { get; }
    public IDictionary`2<string, object> DefaultConfiguration { get; }
    public object DefaultConfigurationObject { get; }
    public abstract virtual List`1<ConfigurationField> get_Fields();
    public abstract virtual IDictionary`2<string, object> get_DefaultConfiguration();
    public abstract virtual object get_DefaultConfigurationObject();
    public abstract virtual bool IsConfiguration(object obj);
    public abstract virtual object FromDatabase(string configurationJson);
    public abstract virtual object FromConfigurationEditor(IDictionary`2<string, object> editorValues, object configuration);
    public abstract virtual IDictionary`2<string, object> ToConfigurationEditor(object configuration);
    public abstract virtual IDictionary`2<string, object> ToValueEditor(object configuration);
}
public interface Umbraco.Core.PropertyEditors.IConfigureValueType {
    public string ValueType { get; }
    public abstract virtual string get_ValueType();
}
public interface Umbraco.Core.PropertyEditors.IDataEditor {
    public string Alias { get; }
    public EditorType Type { get; }
    public string Name { get; }
    public string Icon { get; }
    public string Group { get; }
    public bool IsDeprecated { get; }
    public IDictionary`2<string, object> DefaultConfiguration { get; }
    public IPropertyIndexValueFactory PropertyIndexValueFactory { get; }
    public abstract virtual string get_Alias();
    public abstract virtual EditorType get_Type();
    public abstract virtual string get_Name();
    public abstract virtual string get_Icon();
    public abstract virtual string get_Group();
    public abstract virtual bool get_IsDeprecated();
    public abstract virtual IDataValueEditor GetValueEditor();
    public abstract virtual IDataValueEditor GetValueEditor(object configuration);
    public abstract virtual IDictionary`2<string, object> get_DefaultConfiguration();
    public abstract virtual IConfigurationEditor GetConfigurationEditor();
    public abstract virtual IPropertyIndexValueFactory get_PropertyIndexValueFactory();
}
public interface Umbraco.Core.PropertyEditors.IDataEditorWithMediaPath {
    public abstract virtual string GetMediaPath(object value);
}
public interface Umbraco.Core.PropertyEditors.IDataValueEditor {
    public string View { get; }
    public string ValueType { get; public set; }
    public bool IsReadOnly { get; }
    public bool HideLabel { get; }
    public List`1<IValueValidator> Validators { get; }
    public abstract virtual string get_View();
    public abstract virtual string get_ValueType();
    public abstract virtual void set_ValueType(string value);
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_HideLabel();
    public abstract virtual IEnumerable`1<ValidationResult> Validate(object value, bool required, string format);
    public abstract virtual List`1<IValueValidator> get_Validators();
    public abstract virtual object FromEditor(ContentPropertyData editorValue, object currentValue);
    public abstract virtual object ToEditor(Property property, IDataTypeService dataTypeService, string culture, string segment);
    public abstract virtual IEnumerable`1<XElement> ConvertDbToXml(Property property, IDataTypeService dataTypeService, ILocalizationService localizationService, bool published);
    public abstract virtual XNode ConvertDbToXml(PropertyType propertyType, object value, IDataTypeService dataTypeService);
    public abstract virtual string ConvertDbToString(PropertyType propertyType, object value, IDataTypeService dataTypeService);
}
public interface Umbraco.Core.PropertyEditors.IDataValueReference {
    public abstract virtual IEnumerable`1<UmbracoEntityReference> GetReferences(object value);
}
public interface Umbraco.Core.PropertyEditors.IDataValueReferenceFactory {
    public abstract virtual bool IsForEditor(IDataEditor dataEditor);
    public abstract virtual IDataValueReference GetDataValueReference();
}
internal interface Umbraco.Core.PropertyEditors.IIgnoreUserStartNodesConfig {
    public bool IgnoreUserStartNodes { get; public set; }
    public abstract virtual bool get_IgnoreUserStartNodes();
    public abstract virtual void set_IgnoreUserStartNodes(bool value);
}
public class Umbraco.Core.PropertyEditors.ImageCropperConfiguration : object {
    [CompilerGeneratedAttribute]
private Crop[] <Crops>k__BackingField;
    [ConfigurationFieldAttribute("crops", "Define crops", "views/propertyeditors/imagecropper/imagecropper.prevalues.html")]
public Crop[] Crops { get; public set; }
    [CompilerGeneratedAttribute]
public Crop[] get_Crops();
    [CompilerGeneratedAttribute]
public void set_Crops(Crop[] value);
}
[ExtensionAttribute]
internal static class Umbraco.Core.PropertyEditors.ImageCropperConfigurationExtensions : object {
    [ExtensionAttribute]
public static void ApplyConfiguration(ImageCropperValue imageCropperValue, ImageCropperConfiguration configuration);
}
public interface Umbraco.Core.PropertyEditors.IManifestValueValidator {
    public string ValidationName { get; }
    public abstract virtual string get_ValidationName();
}
public interface Umbraco.Core.PropertyEditors.IPropertyCacheCompression {
    public abstract virtual bool IsCompressed(IReadOnlyContentBase content, string propertyTypeAlias, bool published);
}
public interface Umbraco.Core.PropertyEditors.IPropertyCacheCompressionOptions {
    public abstract virtual bool IsCompressed(IReadOnlyContentBase content, PropertyType propertyType, IDataEditor dataEditor, bool published);
}
public interface Umbraco.Core.PropertyEditors.IPropertyIndexValueFactory {
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, IEnumerable`1<object>>> GetIndexValues(Property property, string culture, string segment, bool published);
}
public interface Umbraco.Core.PropertyEditors.IPropertyValueConverter {
    public abstract virtual bool IsConverter(IPublishedPropertyType propertyType);
    public abstract virtual Nullable`1<bool> IsValue(object value, PropertyValueLevel level);
    public abstract virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public abstract virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public abstract virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public abstract virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public abstract virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
public interface Umbraco.Core.PropertyEditors.IValueFormatValidator {
    public abstract virtual IEnumerable`1<ValidationResult> ValidateFormat(object value, string valueType, string format);
}
public interface Umbraco.Core.PropertyEditors.IValueRequiredValidator {
    public abstract virtual IEnumerable`1<ValidationResult> ValidateRequired(object value, string valueType);
}
public interface Umbraco.Core.PropertyEditors.IValueValidator {
    public abstract virtual IEnumerable`1<ValidationResult> Validate(object value, string valueType, object dataTypeConfiguration);
}
public class Umbraco.Core.PropertyEditors.LabelConfiguration : object {
    [CompilerGeneratedAttribute]
private string <ValueType>k__BackingField;
    [ConfigurationFieldAttribute("umbracoDataValueType", "Value type", "valuetype")]
public string ValueType { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ValueType();
    [CompilerGeneratedAttribute]
public void set_ValueType(string value);
}
public class Umbraco.Core.PropertyEditors.LabelConfigurationEditor : ConfigurationEditor`1<LabelConfiguration> {
    public virtual LabelConfiguration FromConfigurationEditor(IDictionary`2<string, object> editorValues, LabelConfiguration configuration);
}
[DataEditorAttribute("Umbraco.Label", "Label", "readonlyvalue")]
public class Umbraco.Core.PropertyEditors.LabelPropertyEditor : DataEditor {
    public LabelPropertyEditor(ILogger logger);
    protected virtual IDataValueEditor CreateValueEditor();
    protected virtual IConfigurationEditor CreateConfigurationEditor();
}
public class Umbraco.Core.PropertyEditors.ManifestValueValidatorCollection : BuilderCollectionBase`1<IManifestValueValidator> {
    public ManifestValueValidatorCollection(IEnumerable`1<IManifestValueValidator> items);
    public IManifestValueValidator Create(string name);
}
internal class Umbraco.Core.PropertyEditors.ManifestValueValidatorCollectionBuilder : LazyCollectionBuilderBase`3<ManifestValueValidatorCollectionBuilder, ManifestValueValidatorCollection, IManifestValueValidator> {
    protected ManifestValueValidatorCollectionBuilder This { get; }
    protected virtual ManifestValueValidatorCollectionBuilder get_This();
}
internal class Umbraco.Core.PropertyEditors.NoopPropertyCacheCompressionOptions : object {
    public sealed virtual bool IsCompressed(IReadOnlyContentBase content, PropertyType propertyType, IDataEditor dataEditor, bool published);
}
[DefaultMemberAttribute("Item")]
public class Umbraco.Core.PropertyEditors.ParameterEditorCollection : BuilderCollectionBase`1<IDataEditor> {
    public IDataEditor Item { get; }
    public ParameterEditorCollection(DataEditorCollection dataEditors, ManifestParser manifestParser);
    public virtual IDataEditor get_Item(string alias);
    public virtual bool TryGet(string alias, IDataEditor& editor);
}
internal class Umbraco.Core.PropertyEditors.PropertyCacheCompression : object {
    private IPropertyCacheCompressionOptions _compressionOptions;
    private IReadOnlyDictionary`2<int, IContentTypeComposition> _contentTypes;
    private PropertyEditorCollection _propertyEditors;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`3<int, string, bool>, bool> _isCompressedCache;
    public PropertyCacheCompression(IPropertyCacheCompressionOptions compressionOptions, IReadOnlyDictionary`2<int, IContentTypeComposition> contentTypes, PropertyEditorCollection propertyEditors, ConcurrentDictionary`2<ValueTuple`3<int, string, bool>, bool> compressedStoragePropertyEditorCache);
    public sealed virtual bool IsCompressed(IReadOnlyContentBase content, string alias, bool published);
}
public enum Umbraco.Core.PropertyEditors.PropertyCacheLevel : Enum {
    public int value__;
    public static PropertyCacheLevel Unknown;
    public static PropertyCacheLevel Element;
    public static PropertyCacheLevel Elements;
    public static PropertyCacheLevel Snapshot;
    public static PropertyCacheLevel None;
}
[DefaultMemberAttribute("Item")]
public class Umbraco.Core.PropertyEditors.PropertyEditorCollection : BuilderCollectionBase`1<IDataEditor> {
    public IDataEditor Item { get; }
    public PropertyEditorCollection(DataEditorCollection dataEditors, ManifestParser manifestParser);
    public PropertyEditorCollection(DataEditorCollection dataEditors);
    public virtual IDataEditor get_Item(string alias);
    public virtual bool TryGet(string alias, IDataEditor& editor);
}
[ExtensionAttribute]
public static class Umbraco.Core.PropertyEditors.PropertyEditorTagsExtensions : object {
    [ExtensionAttribute]
public static bool IsTagsEditor(IDataEditor editor);
    [ExtensionAttribute]
public static TagsPropertyEditorAttribute GetTagAttribute(IDataEditor editor);
}
public abstract class Umbraco.Core.PropertyEditors.PropertyValueConverterBase : object {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Nullable`1<bool> IsValue(object value, PropertyValueLevel level);
    [ObsoleteAttribute("This method is not part of the IPropertyValueConverter contract, therefore not used and will be removed in future versions; use IsValue instead.")]
public virtual bool HasValue(IPublishedProperty property, string culture, string segment);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
public class Umbraco.Core.PropertyEditors.PropertyValueConverterCollection : BuilderCollectionBase`1<IPropertyValueConverter> {
    private object _locker;
    private Dictionary`2<IPropertyValueConverter, Type[]> _defaultConverters;
    private Dictionary`2<IPropertyValueConverter, Type[]> DefaultConverters { get; }
    public PropertyValueConverterCollection(IEnumerable`1<IPropertyValueConverter> items);
    private Dictionary`2<IPropertyValueConverter, Type[]> get_DefaultConverters();
    internal bool IsDefault(IPropertyValueConverter converter);
    internal bool Shadows(IPropertyValueConverter shadowing, IPropertyValueConverter shadowed);
}
public class Umbraco.Core.PropertyEditors.PropertyValueConverterCollectionBuilder : OrderedCollectionBuilderBase`3<PropertyValueConverterCollectionBuilder, PropertyValueConverterCollection, IPropertyValueConverter> {
    protected PropertyValueConverterCollectionBuilder This { get; }
    protected virtual PropertyValueConverterCollectionBuilder get_This();
}
public enum Umbraco.Core.PropertyEditors.PropertyValueLevel : Enum {
    public int value__;
    public static PropertyValueLevel Source;
    public static PropertyValueLevel Inter;
    public static PropertyValueLevel Object;
}
public class Umbraco.Core.PropertyEditors.SliderConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <EnableRange>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <InitialValue>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <InitialValue2>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MinimumValue>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <MaximumValue>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <StepIncrements>k__BackingField;
    [ConfigurationFieldAttribute("enableRange", "Enable range", "boolean")]
public bool EnableRange { get; public set; }
    [ConfigurationFieldAttribute("initVal1", "Initial value", "number")]
public decimal InitialValue { get; public set; }
    [ConfigurationFieldAttribute("initVal2", "Initial value 2", "number")]
public decimal InitialValue2 { get; public set; }
    [ConfigurationFieldAttribute("minVal", "Minimum value", "number")]
public decimal MinimumValue { get; public set; }
    [ConfigurationFieldAttribute("maxVal", "Maximum value", "number")]
public decimal MaximumValue { get; public set; }
    [ConfigurationFieldAttribute("step", "Step increments", "number")]
public decimal StepIncrements { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_EnableRange();
    [CompilerGeneratedAttribute]
public void set_EnableRange(bool value);
    [CompilerGeneratedAttribute]
public decimal get_InitialValue();
    [CompilerGeneratedAttribute]
public void set_InitialValue(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_InitialValue2();
    [CompilerGeneratedAttribute]
public void set_InitialValue2(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MinimumValue();
    [CompilerGeneratedAttribute]
public void set_MinimumValue(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_MaximumValue();
    [CompilerGeneratedAttribute]
public void set_MaximumValue(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_StepIncrements();
    [CompilerGeneratedAttribute]
public void set_StepIncrements(decimal value);
}
public class Umbraco.Core.PropertyEditors.TagConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private TagsStorageType <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [ConfigurationFieldAttribute("group", "Tag group", "requiredfield")]
public string Group { get; public set; }
    [ConfigurationFieldAttribute("storageType", "Storage Type", "views/propertyeditors/tags/tags.prevalues.html")]
public TagsStorageType StorageType { get; public set; }
    public char Delimiter { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(string value);
    [CompilerGeneratedAttribute]
public TagsStorageType get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(TagsStorageType value);
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.PropertyEditors.TagsPropertyEditorAttribute : Attribute {
    [CompilerGeneratedAttribute]
private TagsStorageType <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private char <Delimiter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TagGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TagsConfigurationProviderType>k__BackingField;
    public TagsStorageType StorageType { get; public set; }
    public char Delimiter { get; public set; }
    public bool ReplaceTags { get; public set; }
    public string TagGroup { get; public set; }
    public Type TagsConfigurationProviderType { get; }
    public TagsPropertyEditorAttribute(Type tagsConfigurationProvider);
    [CompilerGeneratedAttribute]
public TagsStorageType get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(TagsStorageType value);
    [CompilerGeneratedAttribute]
public char get_Delimiter();
    [CompilerGeneratedAttribute]
public void set_Delimiter(char value);
    [CompilerGeneratedAttribute]
public bool get_ReplaceTags();
    [CompilerGeneratedAttribute]
public void set_ReplaceTags(bool value);
    [CompilerGeneratedAttribute]
public string get_TagGroup();
    [CompilerGeneratedAttribute]
public void set_TagGroup(string value);
    [CompilerGeneratedAttribute]
public Type get_TagsConfigurationProviderType();
}
internal class Umbraco.Core.PropertyEditors.UnPublishedContentPropertyCacheCompressionOptions : object {
    public sealed virtual bool IsCompressed(IReadOnlyContentBase content, PropertyType propertyType, IDataEditor dataEditor, bool published);
}
internal class Umbraco.Core.PropertyEditors.Validators.DecimalValidator : object {
    public string ValidationName { get; }
    public sealed virtual string get_ValidationName();
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.Validators.DecimalValidator/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(object value, string valueType, object dataTypeConfiguration);
}
internal class Umbraco.Core.PropertyEditors.Validators.DelimitedValueValidator : object {
    [CompilerGeneratedAttribute]
private JObject <Configuration>k__BackingField;
    public string ValidationName { get; }
    public JObject Configuration { get; public set; }
    public sealed virtual string get_ValidationName();
    [CompilerGeneratedAttribute]
public JObject get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(JObject value);
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.Validators.DelimitedValueValidator/<Validate>d__6")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(object value, string valueType, object dataTypeConfiguration);
}
internal class Umbraco.Core.PropertyEditors.Validators.EmailValidator : object {
    public string ValidationName { get; }
    public sealed virtual string get_ValidationName();
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.Validators.EmailValidator/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(object value, string valueType, object dataTypeConfiguration);
}
internal class Umbraco.Core.PropertyEditors.Validators.IntegerValidator : object {
    public string ValidationName { get; }
    public sealed virtual string get_ValidationName();
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.Validators.IntegerValidator/<Validate>d__2")]
public sealed virtual IEnumerable`1<ValidationResult> Validate(object value, string valueType, object dataTypeConfiguration);
}
internal class Umbraco.Core.PropertyEditors.Validators.RegexValidator : object {
    private ILocalizedTextService _textService;
    private string _regex;
    public string ValidationName { get; }
    public string Configuration { get; public set; }
    public RegexValidator(ILocalizedTextService textService, string regex);
    public sealed virtual string get_ValidationName();
    public string get_Configuration();
    public void set_Configuration(string value);
    public sealed virtual IEnumerable`1<ValidationResult> Validate(object value, string valueType, object dataTypeConfiguration);
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.Validators.RegexValidator/<ValidateFormat>d__10")]
public sealed virtual IEnumerable`1<ValidationResult> ValidateFormat(object value, string valueType, string format);
}
internal class Umbraco.Core.PropertyEditors.Validators.RequiredValidator : object {
    private ILocalizedTextService _textService;
    public string ValidationName { get; }
    public RequiredValidator(ILocalizedTextService textService);
    public sealed virtual string get_ValidationName();
    public sealed virtual IEnumerable`1<ValidationResult> Validate(object value, string valueType, object dataTypeConfiguration);
    [IteratorStateMachineAttribute("Umbraco.Core.PropertyEditors.Validators.RequiredValidator/<ValidateRequired>d__6")]
public sealed virtual IEnumerable`1<ValidationResult> ValidateRequired(object value, string valueType);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.CheckboxListValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel cacheLevel, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.ColorPickerValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    private bool UseLabel(IPublishedPropertyType propertyType);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.DatePickerValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.DecimalValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.EmailAddressValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel cacheLevel, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Core.PropertyEditors.ValueConverters.GridValueConverter : JsonValueConverter {
    private IGridConfig _config;
    public GridValueConverter(PropertyEditorCollection propertyEditors, IGridConfig config);
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    private JArray GetArray(JObject obj, string propertyName);
}
[JsonConverterAttribute("Umbraco.Core.Serialization.NoTypeConverterJsonConverter`1<Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue>")]
[TypeConverterAttribute("Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueTypeConverter")]
[DataContractAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValue : object {
    [CompilerGeneratedAttribute]
private string <Src>k__BackingField;
    [CompilerGeneratedAttribute]
private ImageCropperFocalPoint <FocalPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ImageCropperCrop> <Crops>k__BackingField;
    [DataMemberAttribute]
public string Src { get; public set; }
    [DataMemberAttribute]
public ImageCropperFocalPoint FocalPoint { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<ImageCropperCrop> Crops { get; public set; }
    private IEnumerable`1<ImageCropperCrop> ComparableCrops { get; }
    [CompilerGeneratedAttribute]
public string get_Src();
    [CompilerGeneratedAttribute]
public void set_Src(string value);
    [CompilerGeneratedAttribute]
public ImageCropperFocalPoint get_FocalPoint();
    [CompilerGeneratedAttribute]
public void set_FocalPoint(ImageCropperFocalPoint value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ImageCropperCrop> get_Crops();
    [CompilerGeneratedAttribute]
public void set_Crops(IEnumerable`1<ImageCropperCrop> value);
    public virtual string ToString();
    public sealed virtual string ToHtmlString();
    public ImageCropperCrop GetCrop(string alias);
    internal ImageUrlGenerationOptions GetCropBaseOptions(string url, ImageCropperCrop crop, bool defaultCrop, bool preferFocalPoint);
    [ObsoleteAttribute("Use the overload that takes an IImageUrlGenerator")]
public string GetCropUrl(string alias, bool useCropDimensions, bool useFocalPoint, string cacheBusterValue);
    public string GetCropUrl(string alias, IImageUrlGenerator imageUrlGenerator, bool useCropDimensions, bool useFocalPoint, string cacheBusterValue);
    [ObsoleteAttribute("Use the overload that takes an IImageUrlGenerator")]
public string GetCropUrl(int width, int height, bool useFocalPoint, string cacheBusterValue);
    public string GetCropUrl(int width, int height, IImageUrlGenerator imageUrlGenerator, bool useFocalPoint, string cacheBusterValue);
    public bool HasFocalPoint();
    public bool HasCrops();
    public bool HasCrop(string alias);
    public bool HasImage();
    internal ImageCropperValue Merge(ImageCropperValue imageCropperValue);
    public static void Prune(JObject value);
    public sealed virtual bool Equals(ImageCropperValue other);
    public virtual bool Equals(object obj);
    private static bool Equals(ImageCropperValue left, ImageCropperValue right);
    private IEnumerable`1<ImageCropperCrop> get_ComparableCrops();
    public static bool op_Equality(ImageCropperValue left, ImageCropperValue right);
    public static bool op_Inequality(ImageCropperValue left, ImageCropperValue right);
    public virtual int GetHashCode();
}
[DefaultPropertyValueConverterAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueConverter : PropertyValueConverterBase {
    private static JsonSerializerSettings ImageCropperValueJsonSerializerSettings;
    private static ImageCropperValueConverter();
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
public class Umbraco.Core.PropertyEditors.ValueConverters.ImageCropperValueTypeConverter : TypeConverter {
    private static Type[] ConvertableTypes;
    private static ImageCropperValueTypeConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.IntegerValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.JsonValueConverter : PropertyValueConverterBase {
    private PropertyEditorCollection _propertyEditors;
    private String[] ExcludedPropertyEditors;
    public JsonValueConverter(PropertyEditorCollection propertyEditors);
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.LabelValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.MarkdownEditorValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.MemberGroupPickerValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.MultipleTextStringValueConverter : PropertyValueConverterBase {
    private static String[] NewLineDelimiters;
    private static MultipleTextStringValueConverter();
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.MustBeStringValueConverter : PropertyValueConverterBase {
    private static String[] Aliases;
    private static MustBeStringValueConverter();
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.RadioButtonListValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.SliderValueConverter : PropertyValueConverterBase {
    private IDataTypeService _dataTypeService;
    private static ConcurrentDictionary`2<int, bool> Storages;
    public SliderValueConverter(IDataTypeService dataTypeService);
    private static SliderValueConverter();
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel cacheLevel, object source, bool preview);
    private bool IsRangeDataType(int dataTypeId);
    internal static void ClearCaches();
    [CompilerGeneratedAttribute]
private bool <IsRangeDataType>b__6_0(int id);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.TagsValueConverter : PropertyValueConverterBase {
    private IDataTypeService _dataTypeService;
    private static ConcurrentDictionary`2<int, bool> Storages;
    public TagsValueConverter(IDataTypeService dataTypeService);
    private static TagsValueConverter();
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel cacheLevel, object source, bool preview);
    private bool JsonStorageType(int dataTypeId);
    internal static void ClearCaches();
    [CompilerGeneratedAttribute]
private bool <JsonStorageType>b__7_0(int id);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.TextStringValueConverter : PropertyValueConverterBase {
    private static String[] PropertyTypeAliases;
    private static TextStringValueConverter();
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.TinyMceValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
    public virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.UploadPropertyConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertIntermediateToObject(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel cacheLevel, object source, bool preview);
}
[DefaultPropertyValueConverterAttribute]
public class Umbraco.Core.PropertyEditors.ValueConverters.YesNoValueConverter : PropertyValueConverterBase {
    public virtual bool IsConverter(IPublishedPropertyType propertyType);
    public virtual Type GetPropertyValueType(IPublishedPropertyType propertyType);
    public virtual PropertyCacheLevel GetPropertyCacheLevel(IPublishedPropertyType propertyType);
    public virtual object ConvertSourceToIntermediate(IPublishedElement owner, IPublishedPropertyType propertyType, object source, bool preview);
    public virtual object ConvertIntermediateToXPath(IPublishedElement owner, IPublishedPropertyType propertyType, PropertyCacheLevel referenceCacheLevel, object inter, bool preview);
}
public class Umbraco.Core.PropertyEditors.ValueListConfiguration : object {
    [CompilerGeneratedAttribute]
private List`1<ValueListItem> <Items>k__BackingField;
    [ConfigurationFieldAttribute("items", "Configure", "multivalues")]
public List`1<ValueListItem> Items { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<ValueListItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<ValueListItem> value);
}
public static class Umbraco.Core.PropertyEditors.ValueTypes : object {
    private static HashSet`1<string> Values;
    public static string Date;
    public static string DateTime;
    public static string Decimal;
    public static string Integer;
    public static string Bigint;
    public static string Json;
    public static string Text;
    public static string Time;
    public static string String;
    public static string Xml;
    private static ValueTypes();
    public static bool IsValue(string s);
    public static ValueStorageType ToStorageType(string valueType);
}
[HideFromTypeFinderAttribute]
public class Umbraco.Core.PropertyEditors.VoidEditor : DataEditor {
    public VoidEditor(string aliasSuffix, ILogger logger);
    public VoidEditor(ILogger logger);
}
[ExtensionAttribute]
public static class Umbraco.Core.PublishedContentExtensions : object {
    private static IVariationContextAccessor VariationContextAccessor { get; }
    private static IVariationContextAccessor get_VariationContextAccessor();
    [ExtensionAttribute]
public static bool HasCulture(IPublishedContent content, string culture);
    [ExtensionAttribute]
public static bool IsInvariantOrHasCulture(IPublishedContent content, string culture);
    [ExtensionAttribute]
internal static IEnumerable`1<T> WhereIsInvariantOrHasCulture(IEnumerable`1<T> contents, string culture);
    [ExtensionAttribute]
public static string Name(IPublishedContent content, string culture);
    [ExtensionAttribute]
public static string UrlSegment(IPublishedContent content, string culture);
    [ExtensionAttribute]
public static DateTime CultureDate(IPublishedContent content, string culture);
    [ExtensionAttribute]
public static IEnumerable`1<IPublishedContent> Children(IPublishedContent content, string culture);
}
[ExtensionAttribute]
public static class Umbraco.Core.PublishedModelFactoryExtensions : object {
    [ExtensionAttribute]
public static bool IsLiveFactory(IPublishedModelFactory factory);
    [ExtensionAttribute]
public static bool IsLiveFactoryEnabled(IPublishedModelFactory factory);
    [ExtensionAttribute]
[ObsoleteAttribute("This method is no longer used or necessary and will be removed from future")]
[EditorBrowsableAttribute("1")]
public static void WithSafeLiveFactory(IPublishedModelFactory factory, Action action);
    [ExtensionAttribute]
internal static void WithSafeLiveFactoryReset(IPublishedModelFactory factory, Action action);
}
[ObsoleteAttribute("Use ReaderWriterLockSlim directly. This will be removed in future versions.")]
public class Umbraco.Core.ReadLock : object {
    private ReaderWriterLockSlim _rwLock;
    public ReadLock(ReaderWriterLockSlim rwLock);
    private sealed virtual override void System.IDisposable.Dispose();
}
[ExtensionAttribute]
public static class Umbraco.Core.ReflectionUtilities : object {
    internal static AssemblyBuilderAccess DefaultAssemblyBuilderAccess;
    internal static AssemblyBuilderAccess NoAssembly;
    private static MethodInfo _convertMethod;
    private static MethodInfo _getTypeFromHandle;
    internal static Func`2<TArg0, TInstance> GetCtor();
    internal static Func`3<TArg0, TArg1, TInstance> GetCtor();
    internal static TMethod GetMethod(MethodInfo method);
    internal static TMethod GetMethod(MethodInfo method);
    internal static TMethod GetMethod(string methodName);
    private static void GetMethodParms(Type[]& parameterTypes, Type& returnType);
    private static void GetMethodParms(Type[]& parameterTypes, Type& returnType);
    private static TMethod GetStaticMethod(MethodInfo method, string methodName, Type type, Type[] parameterTypes, Type returnType);
    private static TMethod GetMethod(MethodInfo method, string methodName, Type type, Type[] parameterTypes, Type returnType);
    internal static TLambda Compile(Expression`1<TLambda> expr, AssemblyBuilderAccess access);
    internal static Action CompileToDelegate(Expression`1<Action> expr, AssemblyBuilderAccess access);
    internal static Action`1<T1> CompileToDelegate(Expression`1<Action`1<T1>> expr, AssemblyBuilderAccess access);
    internal static Action`2<T1, T2> CompileToDelegate(Expression`1<Action`2<T1, T2>> expr, AssemblyBuilderAccess access);
    internal static Action`3<T1, T2, T3> CompileToDelegate(Expression`1<Action`3<T1, T2, T3>> expr, AssemblyBuilderAccess access);
    internal static Func`1<TResult> CompileToDelegate(Expression`1<Func`1<TResult>> expr, AssemblyBuilderAccess access);
    internal static Func`2<T1, TResult> CompileToDelegate(Expression`1<Func`2<T1, TResult>> expr, AssemblyBuilderAccess access);
    internal static Func`3<T1, T2, TResult> CompileToDelegate(Expression`1<Func`3<T1, T2, TResult>> expr, AssemblyBuilderAccess access);
    internal static Func`4<T1, T2, T3, TResult> CompileToDelegate(Expression`1<Func`4<T1, T2, T3, TResult>> expr, AssemblyBuilderAccess access);
    internal static TMethod CompileToDelegate(Expression`1<TMethod> expr, AssemblyBuilderAccess access);
    internal static TMethod[] CompileToDelegates(Expression`1[] exprs);
    internal static TMethod[] CompileToDelegates(AssemblyBuilderAccess access, Expression`1[] exprs);
    private static TypeBuilder CreateTypeBuilder(AssemblyBuilderAccess access);
    public static Func`2<TDeclaring, TValue> EmitFieldGetter(string fieldName);
    public static Action`2<TDeclaring, TValue> EmitFieldSetter(string fieldName);
    public static ValueTuple`2<Func`2<TDeclaring, TValue>, Action`2<TDeclaring, TValue>> EmitFieldGetterAndSetter(string fieldName);
    private static FieldInfo GetField(string fieldName);
    private static Func`2<TDeclaring, TValue> EmitFieldGetter(FieldInfo field);
    private static Action`2<TDeclaring, TValue> EmitFieldSetter(FieldInfo field);
    public static Func`2<TDeclaring, TValue> EmitPropertyGetter(string propertyName, bool mustExist);
    public static Action`2<TDeclaring, TValue> EmitPropertySetter(string propertyName, bool mustExist);
    public static ValueTuple`2<Func`2<TDeclaring, TValue>, Action`2<TDeclaring, TValue>> EmitPropertyGetterAndSetter(string propertyName, bool mustExist);
    public static Func`2<TDeclaring, TValue> EmitPropertyGetter(PropertyInfo propertyInfo);
    public static Action`2<TDeclaring, TValue> EmitPropertySetter(PropertyInfo propertyInfo);
    public static ValueTuple`2<Func`2<TDeclaring, TValue>, Action`2<TDeclaring, TValue>> EmitPropertyGetterAndSetter(PropertyInfo propertyInfo);
    public static Action`2<TDeclaring, TValue> EmitPropertySetterUnsafe(PropertyInfo propertyInfo);
    public static TLambda EmitConstructor(bool mustExist, Type declaring);
    public static TLambda EmitConstructor(ConstructorInfo ctor);
    private static TLambda EmitConstructorSafe(Type[] lambdaParameters, Type returned, ConstructorInfo ctor);
    public static TLambda EmitConstructorUnsafe(ConstructorInfo ctor);
    private static TLambda EmitConstructor(Type declaring, Type[] lambdaParameters, ConstructorInfo ctor);
    public static TLambda EmitMethod(string methodName, bool mustExist);
    public static TLambda EmitMethod(Type declaring, string methodName, bool mustExist);
    public static TLambda EmitMethod(MethodInfo method);
    public static TLambda EmitMethodUnsafe(MethodInfo method);
    public static TLambda EmitMethod(string methodName, bool mustExist);
    private static TLambda EmitMethod(Type lambdaDeclaring, Type lambdaReturned, Type[] lambdaParameters, MethodInfo method);
    private static ValueTuple`3<Type, Type[], Type> AnalyzeLambda(bool isStatic, bool isFunction);
    private static ValueTuple`3<Type, Type[], Type> AnalyzeLambda(bool isStatic, Boolean& isFunction);
    private static ValueTuple`2<DynamicMethod, ILGenerator> CreateIlGenerator(Module module, Type[] arguments, Type returned);
    private static Type[] GetParameters(ConstructorInfo ctor);
    private static Type[] GetParameters(MethodInfo method, bool withDeclaring);
    private static void EmitLdargs(ILGenerator ilgen, Type[] lambdaArgTypes, Type[] methodArgTypes);
    private static void EmitInputAdapter(ILGenerator ilgen, Type inputType, Type methodParamType);
    [ExtensionAttribute]
private static void Convert(ILGenerator ilgen, Type type);
    private static void EmitOutputAdapter(ILGenerator ilgen, Type outputType, Type methodReturnedType);
    private static void ThrowInvalidLambda(string methodName, Type returned, Type[] args);
    [ExtensionAttribute]
private static void CallMethod(ILGenerator ilgen, MethodInfo method);
    [ExtensionAttribute]
private static void Return(ILGenerator ilgen);
}
[ExtensionAttribute]
public static class Umbraco.Core.RegisterExtensions : object {
    [ExtensionAttribute]
public static void Register(IRegister register, Lifetime lifetime);
    [ExtensionAttribute]
public static void RegisterFor(IRegister register, Lifetime lifetime);
    [ExtensionAttribute]
public static void Register(IRegister register, Lifetime lifetime);
    [ExtensionAttribute]
public static void Register(IRegister register, TService instance);
    [ExtensionAttribute]
public static void RegisterAuto(IRegister register);
}
public class Umbraco.Core.Runtime.CoreInitialComponent : object {
    public sealed virtual void Initialize();
    public sealed virtual void Terminate();
}
[ComposeBeforeAttribute("Umbraco.Core.Composing.ICoreComposer")]
public class Umbraco.Core.Runtime.CoreInitialComposer : ComponentComposer`1<CoreInitialComponent> {
    public virtual void Compose(Composition composition);
}
public class Umbraco.Core.Runtime.CoreRuntime : object {
    private ComponentCollection _components;
    private IFactory _factory;
    private RuntimeState _state;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IProfiler <Profiler>k__BackingField;
    [CompilerGeneratedAttribute]
private IProfilingLogger <ProfilingLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IMainDom <MainDom>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRuntime, UnattendedInstallEventArgs> UnattendedInstalled;
    protected ILogger Logger { get; private set; }
    protected IProfiler Profiler { get; private set; }
    protected IProfilingLogger ProfilingLogger { get; private set; }
    public IRuntimeState State { get; }
    public IMainDom MainDom { get; private set; }
    public CoreRuntime(ILogger logger, IMainDom mainDom);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
protected IProfiler get_Profiler();
    [CompilerGeneratedAttribute]
private void set_Profiler(IProfiler value);
    [CompilerGeneratedAttribute]
protected IProfilingLogger get_ProfilingLogger();
    [CompilerGeneratedAttribute]
private void set_ProfilingLogger(IProfilingLogger value);
    public sealed virtual IRuntimeState get_State();
    [CompilerGeneratedAttribute]
public IMainDom get_MainDom();
    [CompilerGeneratedAttribute]
private void set_MainDom(IMainDom value);
    public virtual IFactory Boot(IRegister register);
    protected virtual IFactory Boot(IRegister register, DisposableTimer timer);
    private void CoreRuntime_UnattendedInstalled(IRuntime sender, UnattendedInstallEventArgs e);
    private void DoUnattendedInstall(IUmbracoDatabaseFactory databaseFactory);
    private void DoUnattendedUpgrade(DatabaseBuilder databaseBuilder);
    protected virtual void ConfigureUnhandledException();
    protected virtual void ConfigureApplicationRootPath();
    private bool AcquireMainDom(IMainDom mainDom);
    internal virtual void DetermineRuntimeLevel(IUmbracoDatabaseFactory databaseFactory, IProfilingLogger profilingLogger);
    private IEnumerable`1<Type> ResolveComposerTypes(TypeLoader typeLoader);
    public virtual void Terminate();
    public virtual void Compose(Composition composition);
    protected virtual IEnumerable`1<Type> GetComposerTypes(TypeLoader typeLoader);
    [ObsoleteAttribute("Don't use this method, the logger should be injected into the CoreRuntime")]
protected virtual ILogger GetLogger();
    protected virtual IProfiler GetProfiler();
    protected virtual AppCaches GetAppCaches();
    protected virtual string GetApplicationRootPath();
    protected internal virtual IUmbracoDatabaseFactory GetDatabaseFactory();
    protected virtual Configs GetConfigs();
    [CompilerGeneratedAttribute]
public static void add_UnattendedInstalled(TypedEventHandler`2<IRuntime, UnattendedInstallEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_UnattendedInstalled(TypedEventHandler`2<IRuntime, UnattendedInstallEventArgs> value);
    [CompilerGeneratedAttribute]
private IMainDom <Boot>b__24_0();
    [CompilerGeneratedAttribute]
private IServerRegistrar <Boot>b__24_1();
    [CompilerGeneratedAttribute]
private void <ConfigureUnhandledException>b__28_0(object _, UnhandledExceptionEventArgs args);
    [CompilerGeneratedAttribute]
private IMapperCollection <GetDatabaseFactory>b__40_0();
}
public interface Umbraco.Core.Runtime.IMainDomLock {
    public abstract virtual Task`1<bool> AcquireLockAsync(int millisecondsTimeout);
    public abstract virtual Task ListenAsync();
}
public class Umbraco.Core.Runtime.MainDom : object {
    private ILogger _logger;
    private IMainDomLock _mainDomLock;
    private object _locko;
    private bool _isInitialized;
    private bool _isMainDom;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _signaled;
    private List`1<KeyValuePair`2<int, Action>> _callbacks;
    private static int LockTimeoutMilliseconds;
    private Task _listenTask;
    private Task _listenCompleteTask;
    private bool disposedValue;
    public bool IsMainDom { get; }
    public MainDom(ILogger logger, IMainDomLock systemLock);
    public sealed virtual bool Register(Action release, int weight);
    public sealed virtual bool Register(Action install, Action release, int weight);
    private void OnSignal(string source);
    private bool Acquire();
    public sealed virtual bool get_IsMainDom();
    private sealed virtual override void System.Web.Hosting.IRegisteredObject.Stop(bool immediate);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public static string GetMainDomId();
    [CompilerGeneratedAttribute]
private void <Acquire>b__14_0(Task t);
    [CompilerGeneratedAttribute]
private bool <get_IsMainDom>b__16_0();
}
internal class Umbraco.Core.Runtime.MainDomSemaphoreLock : object {
    private SystemLock _systemLock;
    private EventWaitHandle _signal;
    private ILogger _logger;
    private IDisposable _lockRelease;
    private bool disposedValue;
    public MainDomSemaphoreLock(ILogger logger);
    public sealed virtual Task ListenAsync();
    public sealed virtual Task`1<bool> AcquireLockAsync(int millisecondsTimeout);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public class Umbraco.Core.Runtime.SqlMainDomLock : object {
    private TimeSpan _lockTimeout;
    private string _lockId;
    private static string MainDomKeyPrefix;
    private static string UpdatedSuffix;
    private ILogger _logger;
    private CancellationTokenSource _cancellationTokenSource;
    private SqlServerSyntaxProvider _sqlServerSyntax;
    private bool _mainDomChanging;
    private UmbracoDatabaseFactory _dbFactory;
    private bool _errorDuringAcquiring;
    private object _locker;
    private bool _hasTable;
    [CompilerGeneratedAttribute]
private string <MainDomKey>k__BackingField;
    private bool _disposedValue;
    private string MainDomKey { get; }
    public SqlMainDomLock(ILogger logger, string connectionStringName);
    [AsyncStateMachineAttribute("Umbraco.Core.Runtime.SqlMainDomLock/<AcquireLockAsync>d__13")]
public sealed virtual Task`1<bool> AcquireLockAsync(int millisecondsTimeout);
    public sealed virtual Task ListenAsync();
    [CompilerGeneratedAttribute]
private string get_MainDomKey();
    private void ListeningLoop();
    private Task`1<bool> WaitForExistingAsync(string tempId, int millisecondsTimeout);
    private Nullable`1<bool> TryAcquire(IUmbracoDatabase db, string tempId, string updatedTempId);
    private bool AcquireWhenMaxWaitTimeElapsed(IUmbracoDatabase db);
    private RecordPersistenceType InsertLockRecord(string id, IUmbracoDatabase db);
    private bool IsMainDomValue(string val, IUmbracoDatabase db);
    private bool IsLockTimeoutException(SqlException sqlException);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public enum Umbraco.Core.RuntimeLevel : Enum {
    public int value__;
    public static RuntimeLevel BootFailed;
    public static RuntimeLevel Unknown;
    public static RuntimeLevel Boot;
    public static RuntimeLevel Install;
    public static RuntimeLevel Upgrade;
    public static RuntimeLevel Run;
}
public enum Umbraco.Core.RuntimeLevelReason : Enum {
    public int value__;
    public static RuntimeLevelReason Unknown;
    public static RuntimeLevelReason BootFailedCannotDowngrade;
    public static RuntimeLevelReason BootFailedCannotConnectToDatabase;
    public static RuntimeLevelReason BootFailedCannotCheckUpgradeState;
    public static RuntimeLevelReason BootFailedOnException;
    public static RuntimeLevelReason InstallNoVersion;
    public static RuntimeLevelReason InstallNoDatabase;
    public static RuntimeLevelReason InstallMissingDatabase;
    public static RuntimeLevelReason InstallEmptyDatabase;
    public static RuntimeLevelReason UpgradeOldVersion;
    public static RuntimeLevelReason UpgradeMigrations;
    public static RuntimeLevelReason Run;
}
public static class Umbraco.Core.RuntimeOptions : object {
    private static List`1<Action`1<IProfilingLogger>> _onBoot;
    private static List`1<Action`4<Composition, AppCaches, TypeLoader, IUmbracoDatabaseFactory>> _onEssentials;
    private static Nullable`1<bool> _installMissingDatabase;
    private static Nullable`1<bool> _installEmptyDatabase;
    private static Nullable`1<bool> _installUnattended;
    private static Nullable`1<bool> _upgradeUnattended;
    public static bool InstallMissingDatabase { get; public set; }
    [ObsoleteAttribute("This setting is no longer used and will be removed in future versions. If a database connection string is configured and the database is empty Umbraco will be installed during the installation sequence.")]
[EditorBrowsableAttribute("1")]
public static bool InstallEmptyDatabase { get; public set; }
    public static bool InstallUnattended { get; public set; }
    public static bool UpgradeUnattended { get; public set; }
    private static bool BoolSetting(string key, bool missing);
    public static bool get_InstallMissingDatabase();
    public static void set_InstallMissingDatabase(bool value);
    public static bool get_InstallEmptyDatabase();
    public static void set_InstallEmptyDatabase(bool value);
    public static bool get_InstallUnattended();
    public static void set_InstallUnattended(bool value);
    public static bool get_UpgradeUnattended();
    public static void set_UpgradeUnattended(bool value);
    internal static void DoRuntimeBoot(IProfilingLogger logger);
    internal static void DoRuntimeEssentials(Composition composition, AppCaches appCaches, TypeLoader typeLoader, IUmbracoDatabaseFactory databaseFactory);
    public static void OnRuntimeBoot(Action`1<IProfilingLogger> action);
    public static void OnRuntimeEssentials(Action`4<Composition, AppCaches, TypeLoader, IUmbracoDatabaseFactory> action);
}
internal class Umbraco.Core.RuntimeState : object {
    private ILogger _logger;
    private IUmbracoSettingsSection _settings;
    private IGlobalSettings _globalSettings;
    private ConcurrentHashSet`1<string> _applicationUrls;
    private Lazy`1<IMainDom> _mainDom;
    private Lazy`1<IServerRegistrar> _serverRegistrar;
    [CompilerGeneratedAttribute]
private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ApplicationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationVirtualPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentMigrationState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FinalMigrationState>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeLevelReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private BootFailedException <BootFailedException>k__BackingField;
    private IServerRegistrar ServerRegistrar { get; }
    public IMainDom MainDom { get; }
    public Version Version { get; }
    public string VersionComment { get; }
    public SemVersion SemanticVersion { get; }
    public bool Debug { get; }
    public bool IsMainDom { get; }
    public ServerRole ServerRole { get; }
    public Uri ApplicationUrl { get; private set; }
    public string ApplicationVirtualPath { get; }
    public string CurrentMigrationState { get; internal set; }
    public string FinalMigrationState { get; internal set; }
    public RuntimeLevel Level { get; internal set; }
    public RuntimeLevelReason Reason { get; internal set; }
    public BootFailedException BootFailedException { get; internal set; }
    public RuntimeState(ILogger logger, IUmbracoSettingsSection settings, IGlobalSettings globalSettings, Lazy`1<IMainDom> mainDom, Lazy`1<IServerRegistrar> serverRegistrar);
    private IServerRegistrar get_ServerRegistrar();
    public IMainDom get_MainDom();
    public sealed virtual Version get_Version();
    public sealed virtual string get_VersionComment();
    public sealed virtual SemVersion get_SemanticVersion();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Debug();
    public sealed virtual bool get_IsMainDom();
    public sealed virtual ServerRole get_ServerRole();
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_ApplicationUrl();
    [CompilerGeneratedAttribute]
private void set_ApplicationUrl(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationVirtualPath();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CurrentMigrationState();
    [CompilerGeneratedAttribute]
internal void set_CurrentMigrationState(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FinalMigrationState();
    [CompilerGeneratedAttribute]
internal void set_FinalMigrationState(string value);
    [CompilerGeneratedAttribute]
public sealed virtual RuntimeLevel get_Level();
    [CompilerGeneratedAttribute]
internal void set_Level(RuntimeLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual RuntimeLevelReason get_Reason();
    [CompilerGeneratedAttribute]
internal void set_Reason(RuntimeLevelReason value);
    internal void EnsureApplicationUrl(HttpRequestBase request);
    [CompilerGeneratedAttribute]
public sealed virtual BootFailedException get_BootFailedException();
    [CompilerGeneratedAttribute]
internal void set_BootFailedException(BootFailedException value);
    public void DetermineRuntimeLevel(IUmbracoDatabaseFactory databaseFactory);
    private UmbracoDatabaseState GetUmbracoDatabaseState(IUmbracoDatabaseFactory databaseFactory);
    private bool TryDbConnect(IUmbracoDatabaseFactory databaseFactory);
    private bool DoesUmbracoRequireUpgrade(IUmbracoDatabase database);
}
internal class Umbraco.Core.SafeCallContext : object {
    private static List`1<Func`1<object>> EnterFuncs;
    private static List`1<Action`1<object>> ExitActions;
    private static int _count;
    private List`1<object> _objects;
    private bool _disposed;
    private static SafeCallContext();
    public static void Register(Func`1<object> enterFunc, Action`1<object> exitAction);
    public static void Clear();
    public sealed virtual void Dispose();
    internal static void Reset();
}
public interface Umbraco.Core.Scoping.IInstanceIdentifiable {
    public Guid InstanceId { get; }
    public abstract virtual Guid get_InstanceId();
}
public interface Umbraco.Core.Scoping.IScope {
    public IUmbracoDatabase Database { get; }
    public ISqlContext SqlContext { get; }
    public EventMessages Messages { get; }
    public IEventDispatcher Events { get; }
    public RepositoryCacheMode RepositoryCacheMode { get; }
    public IsolatedCaches IsolatedCaches { get; }
    public abstract virtual IUmbracoDatabase get_Database();
    public abstract virtual ISqlContext get_SqlContext();
    public abstract virtual EventMessages get_Messages();
    public abstract virtual IEventDispatcher get_Events();
    public abstract virtual RepositoryCacheMode get_RepositoryCacheMode();
    public abstract virtual IsolatedCaches get_IsolatedCaches();
    public abstract virtual bool Complete();
    public abstract virtual void ReadLock(Int32[] lockIds);
    public abstract virtual void WriteLock(Int32[] lockIds);
}
public interface Umbraco.Core.Scoping.IScope2 {
    public abstract virtual void WriteLock(TimeSpan timeout, int lockId);
    public abstract virtual void ReadLock(TimeSpan timeout, int lockId);
}
public interface Umbraco.Core.Scoping.IScopeAccessor {
    public IScope AmbientScope { get; }
    public abstract virtual IScope get_AmbientScope();
}
public interface Umbraco.Core.Scoping.IScopeContext {
    public abstract virtual void Enlist(string key, Action`1<bool> action, int priority);
    public abstract virtual T Enlist(string key, Func`1<T> creator, Action`2<bool, T> action, int priority);
    public abstract virtual T GetEnlisted(string key);
}
public interface Umbraco.Core.Scoping.IScopeProvider {
    public IScopeContext Context { get; }
    public ISqlContext SqlContext { get; }
    public abstract virtual IScope CreateScope(IsolationLevel isolationLevel, RepositoryCacheMode repositoryCacheMode, IEventDispatcher eventDispatcher, Nullable`1<bool> scopeFileSystems, bool callContext, bool autoComplete);
    public abstract virtual IScope CreateDetachedScope(IsolationLevel isolationLevel, RepositoryCacheMode repositoryCacheMode, IEventDispatcher eventDispatcher, Nullable`1<bool> scopeFileSystems);
    public abstract virtual void AttachScope(IScope scope, bool callContext);
    public abstract virtual IScope DetachScope();
    public abstract virtual IScopeContext get_Context();
    public abstract virtual ISqlContext get_SqlContext();
}
public enum Umbraco.Core.Scoping.RepositoryCacheMode : Enum {
    public int value__;
    public static RepositoryCacheMode Unspecified;
    public static RepositoryCacheMode Default;
    public static RepositoryCacheMode Scoped;
    public static RepositoryCacheMode None;
}
internal class Umbraco.Core.Scoping.Scope : object {
    private ScopeProvider _scopeProvider;
    private ILogger _logger;
    private ICoreDebug _coreDebug;
    private IsolationLevel _isolationLevel;
    private RepositoryCacheMode _repositoryCacheMode;
    private Nullable`1<bool> _scopeFileSystem;
    private bool _autoComplete;
    private bool _callContext;
    private bool _disposed;
    private Nullable`1<bool> _completed;
    private IsolatedCaches _isolatedCaches;
    private IUmbracoDatabase _database;
    private EventMessages _messages;
    private ICompletable _fscope;
    private IEventDispatcher _eventDispatcher;
    private object _dictionaryLocker;
    private object _lockQueueLocker;
    private HashSet`1<int> _readLocks;
    private HashSet`1<int> _writeLocks;
    private Dictionary`2<Guid, Dictionary`2<int, int>> _readLocksDictionary;
    private Dictionary`2<Guid, Dictionary`2<int, int>> _writeLocksDictionary;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private StackQueue`1<ValueTuple`4<LockType, TimeSpan, Guid, int>> _queuedLocks;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Detachable>k__BackingField;
    [CompilerGeneratedAttribute]
private Scope <ParentScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Attached>k__BackingField;
    [CompilerGeneratedAttribute]
private Scope <OrigScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeContext <OrigContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeContext <Context>k__BackingField;
    public Guid InstanceId { get; }
    public ISqlContext SqlContext { get; }
    public bool CallContext { get; public set; }
    public bool ScopedFileSystems { get; }
    public RepositoryCacheMode RepositoryCacheMode { get; }
    public IsolatedCaches IsolatedCaches { get; }
    public bool Detachable { get; }
    public Scope ParentScope { get; public set; }
    public bool Attached { get; public set; }
    public Scope OrigScope { get; public set; }
    public ScopeContext OrigContext { get; public set; }
    public ScopeContext Context { get; }
    public IsolationLevel IsolationLevel { get; }
    public IUmbracoDatabase Database { get; }
    public IUmbracoDatabase DatabaseOrNull { get; }
    public EventMessages Messages { get; }
    public EventMessages MessagesOrNull { get; }
    public IEventDispatcher Events { get; }
    private Scope(ScopeProvider scopeProvider, ILogger logger, FileSystems fileSystems, Scope parent, ScopeContext scopeContext, bool detachable, ICoreDebug coreDebug, IsolationLevel isolationLevel, RepositoryCacheMode repositoryCacheMode, IEventDispatcher eventDispatcher, Nullable`1<bool> scopeFileSystems, bool callContext, bool autoComplete);
    public Scope(ScopeProvider scopeProvider, ILogger logger, FileSystems fileSystems, bool detachable, ScopeContext scopeContext, ICoreDebug coreDebug, IsolationLevel isolationLevel, RepositoryCacheMode repositoryCacheMode, IEventDispatcher eventDispatcher, Nullable`1<bool> scopeFileSystems, bool callContext, bool autoComplete);
    public Scope(ScopeProvider scopeProvider, ILogger logger, FileSystems fileSystems, Scope parent, ICoreDebug coreDebug, IsolationLevel isolationLevel, RepositoryCacheMode repositoryCacheMode, IEventDispatcher eventDispatcher, Nullable`1<bool> scopeFileSystems, bool callContext, bool autoComplete);
    internal Dictionary`2<Guid, Dictionary`2<int, int>> GetReadLocks();
    internal Dictionary`2<Guid, Dictionary`2<int, int>> GetWriteLocks();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_InstanceId();
    public sealed virtual ISqlContext get_SqlContext();
    public bool get_CallContext();
    public void set_CallContext(bool value);
    public bool get_ScopedFileSystems();
    public sealed virtual RepositoryCacheMode get_RepositoryCacheMode();
    public sealed virtual IsolatedCaches get_IsolatedCaches();
    [CompilerGeneratedAttribute]
public bool get_Detachable();
    [CompilerGeneratedAttribute]
public Scope get_ParentScope();
    [CompilerGeneratedAttribute]
public void set_ParentScope(Scope value);
    [CompilerGeneratedAttribute]
public bool get_Attached();
    [CompilerGeneratedAttribute]
public void set_Attached(bool value);
    [CompilerGeneratedAttribute]
public Scope get_OrigScope();
    [CompilerGeneratedAttribute]
public void set_OrigScope(Scope value);
    [CompilerGeneratedAttribute]
public ScopeContext get_OrigContext();
    [CompilerGeneratedAttribute]
public void set_OrigContext(ScopeContext value);
    [CompilerGeneratedAttribute]
public ScopeContext get_Context();
    public IsolationLevel get_IsolationLevel();
    public sealed virtual IUmbracoDatabase get_Database();
    public IUmbracoDatabase get_DatabaseOrNull();
    public sealed virtual EventMessages get_Messages();
    public EventMessages get_MessagesOrNull();
    public sealed virtual IEventDispatcher get_Events();
    public sealed virtual bool Complete();
    public void Reset();
    public void ChildCompleted(Nullable`1<bool> completed);
    private void EnsureDbLocks();
    private void EnsureNotDisposed();
    public sealed virtual void Dispose();
    private string GenerateUnclearedScopesLogMessage();
    private void WriteLockDictionaryToString(Dictionary`2<Guid, Dictionary`2<int, int>> dict, StringBuilder builder, string dictName);
    private void DisposeLastScope();
    private void RobustExit(bool completed, bool onException);
    private static void TryFinally(Action[] actions);
    private static void TryFinally(int index, Action[] actions);
    private void IncrementLock(int lockId, Guid instanceId, Dictionary`2& locks);
    private void ClearLocks(Guid instanceId);
    public void EagerReadLock(Int32[] lockIds);
    public sealed virtual void ReadLock(Int32[] lockIds);
    public void EagerReadLock(TimeSpan timeout, int lockId);
    public sealed virtual void ReadLock(TimeSpan timeout, int lockId);
    public void EagerWriteLock(Int32[] lockIds);
    public sealed virtual void WriteLock(Int32[] lockIds);
    public void EagerWriteLock(TimeSpan timeout, int lockId);
    public sealed virtual void WriteLock(TimeSpan timeout, int lockId);
    public void LazyReadLockInner(Guid instanceId, Int32[] lockIds);
    public void LazyReadLockInner(Guid instanceId, TimeSpan timeout, int lockId);
    public void LazyWriteLockInner(Guid instanceId, Int32[] lockIds);
    public void LazyWriteLockInner(Guid instanceId, TimeSpan timeout, int lockId);
    private void LazyLockInner(LockType lockType, Guid instanceId, Int32[] lockIds);
    private void LazyLockInner(LockType lockType, Guid instanceId, TimeSpan timeout, int lockId);
    private void EagerReadLockInner(IUmbracoDatabase db, Guid instanceId, Nullable`1<TimeSpan> timeout, Int32[] lockIds);
    private void EagerWriteLockInner(IUmbracoDatabase db, Guid instanceId, Nullable`1<TimeSpan> timeout, Int32[] lockIds);
    private void LockInner(IUmbracoDatabase db, Guid instanceId, Dictionary`2& locks, HashSet`1& locksSet, Action`2<IUmbracoDatabase, int> obtainLock, Action`3<IUmbracoDatabase, int, TimeSpan> obtainLockTimeout, Nullable`1<TimeSpan> timeout, Int32[] lockIds);
    private void ObtainReadLock(IUmbracoDatabase db, int lockId);
    private void ObtainTimeoutReadLock(IUmbracoDatabase db, int lockId, TimeSpan timeout);
    private void ObtainWriteLock(IUmbracoDatabase db, int lockId);
    private void ObtainTimeoutWriteLock(IUmbracoDatabase db, int lockId, TimeSpan timeout);
}
internal class Umbraco.Core.Scoping.ScopeContext : object {
    private Dictionary`2<string, IEnlistedObject> _enlisted;
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    public Guid InstanceId { get; }
    private IDictionary`2<string, IEnlistedObject> Enlisted { get; }
    public void ScopeExit(bool completed);
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_InstanceId();
    private IDictionary`2<string, IEnlistedObject> get_Enlisted();
    public sealed virtual void Enlist(string key, Action`1<bool> action, int priority);
    public sealed virtual T Enlist(string key, Func`1<T> creator, Action`2<bool, T> action, int priority);
    public sealed virtual T GetEnlisted(string key);
}
public abstract class Umbraco.Core.Scoping.ScopeContextualBase : object {
    private bool _scoped;
    public static T Get(IScopeProvider scopeProvider, string key, Func`2<bool, T> ctor);
    public sealed virtual void Dispose();
    public abstract virtual void Release(bool completed);
}
internal class Umbraco.Core.Scoping.ScopeProvider : object {
    private ILogger _logger;
    private ICoreDebug _coreDebug;
    private FileSystems _fileSystems;
    [CompilerGeneratedAttribute]
private IUmbracoDatabaseFactory <DatabaseFactory>k__BackingField;
    private static object StaticCallContextObjectsLock;
    private static Dictionary`2<Guid, object> StaticCallContextObjects;
    [CompilerGeneratedAttribute]
private static Func`1<IDictionary> <HttpContextItemsGetter>k__BackingField;
    internal static string ContextItemKey;
    internal static string ScopeItemKey;
    internal static string ScopeRefItemKey;
    private ScopeReference _scopeReference;
    public IUmbracoDatabaseFactory DatabaseFactory { get; }
    public ISqlContext SqlContext { get; }
    internal static Func`1<IDictionary> HttpContextItemsGetter { get; internal set; }
    private static IDictionary HttpContextItems { get; }
    public ScopeContext AmbientContext { get; public set; }
    private IScope Umbraco.Core.Scoping.IScopeAccessor.AmbientScope { get; }
    public Scope AmbientScope { get; public set; }
    public IScopeContext Context { get; }
    public ScopeProvider(IUmbracoDatabaseFactory databaseFactory, FileSystems fileSystems, ILogger logger, ICoreDebug coreDebug);
    private static ScopeProvider();
    [CompilerGeneratedAttribute]
public IUmbracoDatabaseFactory get_DatabaseFactory();
    public sealed virtual ISqlContext get_SqlContext();
    private static T GetCallContextObject(string key);
    private static void SetCallContextObject(string key, IInstanceIdentifiable value);
    [CompilerGeneratedAttribute]
internal static Func`1<IDictionary> get_HttpContextItemsGetter();
    [CompilerGeneratedAttribute]
internal static void set_HttpContextItemsGetter(Func`1<IDictionary> value);
    private static IDictionary get_HttpContextItems();
    public static T GetHttpContextObject(string key, bool required);
    private static bool SetHttpContextObject(string key, object value, bool required);
    public ScopeContext get_AmbientContext();
    [ObsoleteAttribute("This setter is not used and will be removed in future versions")]
[EditorBrowsableAttribute("1")]
public void set_AmbientContext(ScopeContext value);
    private sealed virtual override IScope Umbraco.Core.Scoping.IScopeAccessor.get_AmbientScope();
    public Scope get_AmbientScope();
    public void set_AmbientScope(Scope value);
    public void SetAmbient(Scope scope, ScopeContext context);
    public sealed virtual IScope CreateDetachedScope(IsolationLevel isolationLevel, RepositoryCacheMode repositoryCacheMode, IEventDispatcher eventDispatcher, Nullable`1<bool> scopeFileSystems);
    public sealed virtual void AttachScope(IScope other, bool callContext);
    public sealed virtual IScope DetachScope();
    public sealed virtual IScope CreateScope(IsolationLevel isolationLevel, RepositoryCacheMode repositoryCacheMode, IEventDispatcher eventDispatcher, Nullable`1<bool> scopeFileSystems, bool callContext, bool autoComplete);
    public void Reset();
    public sealed virtual IScopeContext get_Context();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__3_0();
}
internal class Umbraco.Core.Scoping.ScopeReference : object {
    private ScopeProvider _scopeProvider;
    public ScopeReference(ScopeProvider scopeProvider);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Umbraco.Core.Security.AuthenticationExtensions : object {
    private static ConcurrentDictionary`2<string, CultureInfo> UserCultures;
    private static AuthenticationExtensions();
    [ExtensionAttribute]
internal static UmbracoBackOfficeIdentity GetUmbracoIdentity(IPrincipal user);
    [ExtensionAttribute]
internal static void EnsureCulture(IIdentity identity);
}
public class Umbraco.Core.Security.BackOfficeUserStore : DisposableObjectSlim {
    private IUserService _userService;
    private IMemberTypeService _memberTypeService;
    private IEntityService _entityService;
    private IExternalLoginService _externalLoginService;
    private IGlobalSettings _globalSettings;
    private UmbracoMapper _mapper;
    private AppCaches _appCaches;
    private bool _disposed;
    [ObsoleteAttribute("Use the constructor specifying all dependencies")]
public BackOfficeUserStore(IUserService userService, IMemberTypeService memberTypeService, IEntityService entityService, IExternalLoginService externalLoginService, IGlobalSettings globalSettings, MembershipProviderBase usersMembershipProvider, UmbracoMapper mapper);
    public BackOfficeUserStore(IUserService userService, IMemberTypeService memberTypeService, IEntityService entityService, IExternalLoginService externalLoginService, IGlobalSettings globalSettings, MembershipProviderBase usersMembershipProvider, UmbracoMapper mapper, AppCaches appCaches);
    protected virtual void DisposeResources();
    public sealed virtual Task CreateAsync(BackOfficeIdentityUser user);
    public sealed virtual Task UpdateAsync(BackOfficeIdentityUser user);
    public sealed virtual Task DeleteAsync(BackOfficeIdentityUser user);
    [AsyncStateMachineAttribute("Umbraco.Core.Security.BackOfficeUserStore/<FindByIdAsync>d__14")]
public sealed virtual Task`1<BackOfficeIdentityUser> FindByIdAsync(int userId);
    [AsyncStateMachineAttribute("Umbraco.Core.Security.BackOfficeUserStore/<FindByNameAsync>d__15")]
public sealed virtual Task`1<BackOfficeIdentityUser> FindByNameAsync(string userName);
    public sealed virtual Task SetPasswordHashAsync(BackOfficeIdentityUser user, string passwordHash);
    public sealed virtual Task`1<string> GetPasswordHashAsync(BackOfficeIdentityUser user);
    public sealed virtual Task`1<bool> HasPasswordAsync(BackOfficeIdentityUser user);
    public sealed virtual Task SetEmailAsync(BackOfficeIdentityUser user, string email);
    public sealed virtual Task`1<string> GetEmailAsync(BackOfficeIdentityUser user);
    public sealed virtual Task`1<bool> GetEmailConfirmedAsync(BackOfficeIdentityUser user);
    public sealed virtual Task SetEmailConfirmedAsync(BackOfficeIdentityUser user, bool confirmed);
    public sealed virtual Task`1<BackOfficeIdentityUser> FindByEmailAsync(string email);
    public sealed virtual Task AddLoginAsync(BackOfficeIdentityUser user, UserLoginInfo login);
    public sealed virtual Task RemoveLoginAsync(BackOfficeIdentityUser user, UserLoginInfo login);
    public sealed virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(BackOfficeIdentityUser user);
    public sealed virtual Task`1<BackOfficeIdentityUser> FindAsync(UserLoginInfo login);
    public sealed virtual Task AddToRoleAsync(BackOfficeIdentityUser user, string roleName);
    public sealed virtual Task RemoveFromRoleAsync(BackOfficeIdentityUser user, string roleName);
    public sealed virtual Task`1<IList`1<string>> GetRolesAsync(BackOfficeIdentityUser user);
    public sealed virtual Task`1<bool> IsInRoleAsync(BackOfficeIdentityUser user, string roleName);
    public sealed virtual Task SetSecurityStampAsync(BackOfficeIdentityUser user, string stamp);
    public sealed virtual Task`1<string> GetSecurityStampAsync(BackOfficeIdentityUser user);
    private BackOfficeIdentityUser AssignLoginsCallback(BackOfficeIdentityUser user);
    public virtual Task SetTwoFactorEnabledAsync(BackOfficeIdentityUser user, bool enabled);
    public virtual Task`1<bool> GetTwoFactorEnabledAsync(BackOfficeIdentityUser user);
    public sealed virtual Task`1<DateTimeOffset> GetLockoutEndDateAsync(BackOfficeIdentityUser user);
    public sealed virtual Task SetLockoutEndDateAsync(BackOfficeIdentityUser user, DateTimeOffset lockoutEnd);
    public sealed virtual Task`1<int> IncrementAccessFailedCountAsync(BackOfficeIdentityUser user);
    public sealed virtual Task ResetAccessFailedCountAsync(BackOfficeIdentityUser user);
    public sealed virtual Task`1<int> GetAccessFailedCountAsync(BackOfficeIdentityUser user);
    public sealed virtual Task`1<bool> GetLockoutEnabledAsync(BackOfficeIdentityUser user);
    public sealed virtual Task SetLockoutEnabledAsync(BackOfficeIdentityUser user, bool enabled);
    private bool UpdateMemberProperties(IUser user, BackOfficeIdentityUser identityUser);
    private void ThrowIfDisposed();
    public sealed virtual Task`1<bool> ValidateSessionIdAsync(int userId, string sessionId);
}
internal class Umbraco.Core.Security.BackOfficeUserValidator`1 : UserValidator`2<T, int> {
    public BackOfficeUserValidator`1(UserManager`2<T, int> manager);
    [AsyncStateMachineAttribute("Umbraco.Core.Security.BackOfficeUserValidator`1/<ValidateAsync>d__1")]
public virtual Task`1<IdentityResult> ValidateAsync(T item);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__0(T item);
}
internal class Umbraco.Core.Security.ContentPermissionsHelper : object {
    public static ContentAccess CheckPermissions(IContent content, IUser user, IUserService userService, IEntityService entityService, AppCaches appCaches, Char[] permissionsToCheck);
    public static ContentAccess CheckPermissions(IUmbracoEntity entity, IUser user, IUserService userService, IEntityService entityService, AppCaches appCaches, Char[] permissionsToCheck);
    public static ContentAccess CheckPermissions(int nodeId, IUser user, IUserService userService, IEntityService entityService, AppCaches appCaches, IUmbracoEntity& entity, Char[] permissionsToCheck);
    public static ContentAccess CheckPermissions(int nodeId, IUser user, IUserService userService, IContentService contentService, IEntityService entityService, AppCaches appCaches, IContent& contentItem, Char[] permissionsToCheck);
    private static bool CheckPermissionsPath(string path, IUser user, IUserService userService, Char[] permissionsToCheck);
    public static bool HasPathAccess(string path, Int32[] startNodeIds, int recycleBinId);
    internal static bool IsInBranchOfStartNode(string path, Int32[] startNodeIds, String[] startNodePaths, Boolean& hasPathAccess);
}
public class Umbraco.Core.Security.EmailService : object {
    private string _notificationEmailAddress;
    private IEmailSender _defaultEmailSender;
    public EmailService(string notificationEmailAddress, IEmailSender defaultEmailSender);
    [AsyncStateMachineAttribute("Umbraco.Core.Security.EmailService/<SendAsync>d__3")]
public sealed virtual Task SendAsync(IdentityMessage message);
}
public class Umbraco.Core.Security.FileStreamSecurityValidator : object {
    private IEnumerable`1<IFileStreamSecurityAnalyzer> _fileAnalyzers;
    public FileStreamSecurityValidator(IEnumerable`1<IFileStreamSecurityAnalyzer> fileAnalyzers);
    public sealed virtual bool IsConsideredSafe(Stream fileStream);
}
public interface Umbraco.Core.Security.IFileStreamSecurityAnalyzer {
    public abstract virtual bool ShouldHandle(Stream fileStream);
    public abstract virtual bool IsConsideredSafe(Stream fileStream);
}
public interface Umbraco.Core.Security.IFileStreamSecurityValidator {
    public abstract virtual bool IsConsideredSafe(Stream fileStream);
}
public interface Umbraco.Core.Security.IHtmlSanitizer {
    public abstract virtual string Sanitize(string html);
}
public interface Umbraco.Core.Security.IMarkdownSanitizer {
    public abstract virtual string Sanitize(string markdown);
}
public interface Umbraco.Core.Security.IMembershipProviderPasswordHasher {
    public MembershipProviderBase MembershipProvider { get; }
    public abstract virtual MembershipProviderBase get_MembershipProvider();
}
public interface Umbraco.Core.Security.IUmbracoMemberTypeMembershipProvider {
    public string LockPropertyTypeAlias { get; }
    public string LastLockedOutPropertyTypeAlias { get; }
    public string FailedPasswordAttemptsPropertyTypeAlias { get; }
    public string ApprovedPropertyTypeAlias { get; }
    public string CommentPropertyTypeAlias { get; }
    public string LastLoginPropertyTypeAlias { get; }
    public string LastPasswordChangedPropertyTypeAlias { get; }
    public string PasswordRetrievalQuestionPropertyTypeAlias { get; }
    public string PasswordRetrievalAnswerPropertyTypeAlias { get; }
    public abstract virtual string get_LockPropertyTypeAlias();
    public abstract virtual string get_LastLockedOutPropertyTypeAlias();
    public abstract virtual string get_FailedPasswordAttemptsPropertyTypeAlias();
    public abstract virtual string get_ApprovedPropertyTypeAlias();
    public abstract virtual string get_CommentPropertyTypeAlias();
    public abstract virtual string get_LastLoginPropertyTypeAlias();
    public abstract virtual string get_LastPasswordChangedPropertyTypeAlias();
    public abstract virtual string get_PasswordRetrievalQuestionPropertyTypeAlias();
    public abstract virtual string get_PasswordRetrievalAnswerPropertyTypeAlias();
}
public interface Umbraco.Core.Security.IUserAwarePasswordHasher`2 {
    public abstract virtual string HashPassword(TUser user, string password);
    public abstract virtual PasswordVerificationResult VerifyHashedPassword(TUser user, string hashedPassword, string providedPassword);
}
public interface Umbraco.Core.Security.IUserSessionStore`2 {
    public abstract virtual Task`1<bool> ValidateSessionIdAsync(int userId, string sessionId);
}
internal interface Umbraco.Core.Security.IUsersMembershipProvider {
}
internal class Umbraco.Core.Security.MachineKeyGenerator : object {
    public string GenerateConfigurationBlock();
    public string GenerateHMACSHA256ValidationKey();
    public string GenerateAESDecryptionKey();
    private string GenerateKey(int len);
}
public abstract class Umbraco.Core.Security.MembershipProviderBase : MembershipProvider {
    private string _applicationName;
    private bool _enablePasswordReset;
    private bool _enablePasswordRetrieval;
    private int _maxInvalidPasswordAttempts;
    private int _minRequiredNonAlphanumericCharacters;
    private int _minRequiredPasswordLength;
    private int _passwordAttemptWindow;
    private MembershipPasswordFormat _passwordFormat;
    private string _passwordStrengthRegularExpression;
    private bool _requiresQuestionAndAnswer;
    private bool _requiresUniqueEmail;
    private string _customHashAlgorithmType;
    [CompilerGeneratedAttribute]
private bool <UseLegacyEncoding>k__BackingField;
    public int DefaultMinPasswordLength { get; }
    public int DefaultMinNonAlphanumericChars { get; }
    public bool DefaultUseLegacyEncoding { get; }
    public bool AllowManuallyChangingPassword { get; }
    public bool UseLegacyEncoding { get; private set; }
    public bool EnablePasswordReset { get; }
    public bool EnablePasswordRetrieval { get; }
    public int MaxInvalidPasswordAttempts { get; }
    public int MinRequiredNonAlphanumericCharacters { get; }
    public int MinRequiredPasswordLength { get; }
    public int PasswordAttemptWindow { get; }
    public MembershipPasswordFormat PasswordFormat { get; }
    public string PasswordStrengthRegularExpression { get; }
    public bool RequiresQuestionAndAnswer { get; }
    public bool RequiresUniqueEmail { get; }
    public string ApplicationName { get; public set; }
    public string HashPasswordForStorage(string password);
    public bool VerifyPassword(string password, string hashedPassword);
    public virtual int get_DefaultMinPasswordLength();
    public virtual int get_DefaultMinNonAlphanumericChars();
    public virtual bool get_DefaultUseLegacyEncoding();
    public virtual bool get_AllowManuallyChangingPassword();
    protected virtual Attempt`1<string> GetRawPassword(string username);
    [CompilerGeneratedAttribute]
public bool get_UseLegacyEncoding();
    [CompilerGeneratedAttribute]
private void set_UseLegacyEncoding(bool value);
    public virtual bool get_EnablePasswordReset();
    public virtual bool get_EnablePasswordRetrieval();
    public virtual int get_MaxInvalidPasswordAttempts();
    public virtual int get_MinRequiredNonAlphanumericCharacters();
    public virtual int get_MinRequiredPasswordLength();
    public virtual int get_PasswordAttemptWindow();
    public virtual MembershipPasswordFormat get_PasswordFormat();
    public virtual string get_PasswordStrengthRegularExpression();
    public virtual bool get_RequiresQuestionAndAnswer();
    public virtual bool get_RequiresUniqueEmail();
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual void Initialize(string name, NameValueCollection config);
    protected virtual void OnValidatingPassword(ValidatePasswordEventArgs e);
    public virtual bool ChangePassword(string username, string oldPassword, string newPassword);
    protected abstract virtual bool PerformChangePassword(string username, string oldPassword, string newPassword);
    public virtual bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
    protected abstract virtual bool PerformChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
    public virtual MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    protected MembershipCreateStatus ValidateNewUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey);
    protected abstract virtual MembershipUser PerformCreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public virtual string GetPassword(string username, string answer);
    protected abstract virtual string PerformGetPassword(string username, string answer);
    public virtual string ResetPassword(string username, string answer);
    protected abstract virtual string PerformResetPassword(string username, string answer, string generatedPassword);
    protected internal static Attempt`1<PasswordValidityError> IsPasswordValid(string password, int minRequiredNonAlphanumericChars, string strengthRegex, int minLength);
    internal static string GetDefaultAppName();
    internal static int GetIntValue(NameValueCollection config, string valueName, int defaultValue, bool zeroAllowed, int maxValueAllowed);
    protected internal string FormatPasswordForStorage(string pass, string salt);
    internal static bool IsEmailValid(string email);
    protected internal string EncryptOrHashPassword(string pass, string salt);
    protected internal bool CheckPassword(string password, string dbPassword);
    protected internal string EncryptOrHashNewPassword(string newPassword, String& salt);
    protected internal string DecryptPassword(string pass);
    internal string StoredPassword(string storedString, String& salt);
    protected internal static string GenerateSalt();
    protected internal HashAlgorithm GetHashAlgorithm(string password);
    protected string LegacyEncodePassword(string password);
    protected string LegacyUnEncodePassword(string encodedPassword);
    public virtual string ToString();
    protected string GetCurrentRequestIpAddress();
}
[ExtensionAttribute]
public static class Umbraco.Core.Security.MembershipProviderExtensions : object {
    [ExtensionAttribute]
internal static bool CanResetPassword(MembershipProvider provider, IUserService userService);
    [ExtensionAttribute]
internal static MembershipUserCollection FindUsersByName(MembershipProvider provider, string usernameToMatch);
    [ExtensionAttribute]
internal static MembershipUserCollection FindUsersByEmail(MembershipProvider provider, string emailToMatch);
    [ExtensionAttribute]
internal static MembershipUser CreateUser(MembershipProvider provider, string username, string password, string email);
    public static MembershipProvider GetMembersMembershipProvider();
    public static MembershipProvider GetUsersMembershipProvider();
    [ExtensionAttribute]
public static MembershipUser GetCurrentUserOnline(MembershipProvider membershipProvider);
    [ExtensionAttribute]
internal static MembershipUser GetCurrentUser(MembershipProvider membershipProvider);
    [ExtensionAttribute]
internal static string GetCurrentUserName(MembershipProvider membershipProvider);
    [ExtensionAttribute]
public static bool IsUmbracoUsersProvider(MembershipProvider membershipProvider);
    [ExtensionAttribute]
public static bool IsUmbracoMembershipProvider(MembershipProvider membershipProvider);
    [ExtensionAttribute]
public static UmbracoMembershipProviderBase AsUmbracoMembershipProvider(MembershipProvider membershipProvider);
}
public class Umbraco.Core.Security.MembershipProviderPasswordHasher : object {
    [CompilerGeneratedAttribute]
private MembershipProviderBase <MembershipProvider>k__BackingField;
    public MembershipProviderBase MembershipProvider { get; private set; }
    public MembershipProviderPasswordHasher(MembershipProviderBase provider);
    [CompilerGeneratedAttribute]
public sealed virtual MembershipProviderBase get_MembershipProvider();
    [CompilerGeneratedAttribute]
private void set_MembershipProvider(MembershipProviderBase value);
    public sealed virtual string HashPassword(string password);
    public sealed virtual PasswordVerificationResult VerifyHashedPassword(string hashedPassword, string providedPassword);
}
public class Umbraco.Core.Security.MembershipProviderPasswordValidator : PasswordValidator {
    [CompilerGeneratedAttribute]
private MembershipProvider <Provider>k__BackingField;
    public MembershipProvider Provider { get; private set; }
    public MembershipProviderPasswordValidator(MembershipProvider provider);
    [CompilerGeneratedAttribute]
public MembershipProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(MembershipProvider value);
    [AsyncStateMachineAttribute("Umbraco.Core.Security.MembershipProviderPasswordValidator/<ValidateAsync>d__5")]
public virtual Task`1<IdentityResult> ValidateAsync(string item);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__0(string item);
}
public class Umbraco.Core.Security.NoopHtmlSanitizer : object {
    public sealed virtual string Sanitize(string html);
}
public class Umbraco.Core.Security.NoopMarkdownSanitizer : object {
    public sealed virtual string Sanitize(string markdown);
}
public class Umbraco.Core.Security.UmbracoBackOfficeIdentity : ClaimsIdentity {
    public static string Issuer;
    private Int32[] _startContentNodes;
    private Int32[] _startMediaNodes;
    private String[] _allowedApplications;
    public static IEnumerable`1<string> RequiredBackOfficeIdentityClaimTypes { get; }
    public string AuthenticationType { get; }
    public Int32[] StartContentNodes { get; }
    public Int32[] StartMediaNodes { get; }
    public String[] AllowedApplications { get; }
    public int Id { get; }
    public string RealName { get; }
    public string Username { get; }
    public string Culture { get; }
    public string SessionId { get; public set; }
    public string SecurityStamp { get; }
    public String[] Roles { get; }
    public UmbracoBackOfficeIdentity(int userId, string username, string realName, IEnumerable`1<int> startContentNodes, IEnumerable`1<int> startMediaNodes, string culture, string sessionId, string securityStamp, IEnumerable`1<string> allowedApps, IEnumerable`1<string> roles);
    public UmbracoBackOfficeIdentity(ClaimsIdentity childIdentity, int userId, string username, string realName, IEnumerable`1<int> startContentNodes, IEnumerable`1<int> startMediaNodes, string culture, string sessionId, string securityStamp, IEnumerable`1<string> allowedApps, IEnumerable`1<string> roles);
    private UmbracoBackOfficeIdentity(ClaimsIdentity identity);
    public static UmbracoBackOfficeIdentity FromClaimsIdentity(ClaimsIdentity identity);
    public static IEnumerable`1<string> get_RequiredBackOfficeIdentityClaimTypes();
    private void AddRequiredClaims(int userId, string username, string realName, IEnumerable`1<int> startContentNodes, IEnumerable`1<int> startMediaNodes, string culture, string sessionId, string securityStamp, IEnumerable`1<string> allowedApps, IEnumerable`1<string> roles);
    public virtual string get_AuthenticationType();
    public Int32[] get_StartContentNodes();
    public Int32[] get_StartMediaNodes();
    public String[] get_AllowedApplications();
    public int get_Id();
    public string get_RealName();
    public string get_Username();
    public string get_Culture();
    public string get_SessionId();
    public void set_SessionId(string value);
    public string get_SecurityStamp();
    public String[] get_Roles();
}
internal class Umbraco.Core.Security.UmbracoEmailMessage : IdentityMessage {
    [CompilerGeneratedAttribute]
private IEmailSender <MailSender>k__BackingField;
    public IEmailSender MailSender { get; private set; }
    public UmbracoEmailMessage(IEmailSender mailSender);
    [CompilerGeneratedAttribute]
public IEmailSender get_MailSender();
    [CompilerGeneratedAttribute]
private void set_MailSender(IEmailSender value);
}
public abstract class Umbraco.Core.Security.UmbracoMembershipProviderBase : MembershipProviderBase {
    public string DefaultMemberTypeAlias { get; }
    public abstract virtual string get_DefaultMemberTypeAlias();
    protected sealed virtual MembershipUser PerformCreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public MembershipUser CreateUser(string memberTypeAlias, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    protected abstract virtual MembershipUser PerformCreateUser(string memberTypeAlias, string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public virtual string ToString();
}
public class Umbraco.Core.Security.UserAwareMembershipProviderPasswordHasher : MembershipProviderPasswordHasher {
    public UserAwareMembershipProviderPasswordHasher(MembershipProviderBase provider);
    public sealed virtual string HashPassword(BackOfficeIdentityUser user, string password);
    public sealed virtual PasswordVerificationResult VerifyHashedPassword(BackOfficeIdentityUser user, string hashedPassword, string providedPassword);
}
[ExtensionAttribute]
public static class Umbraco.Core.SemVersionExtensions : object {
    [ExtensionAttribute]
public static string ToSemanticString(SemVersion semVersion);
}
public abstract class Umbraco.Core.Serialization.AbstractSerializationService : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFormatter> <Formatters>k__BackingField;
    public IEnumerable`1<IFormatter> Formatters { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFormatter> get_Formatters();
    [CompilerGeneratedAttribute]
public void set_Formatters(IEnumerable`1<IFormatter> value);
    public abstract virtual object FromStream(Stream input, Type outputType, string intent);
    public abstract virtual IStreamedResult ToStream(object input, string intent);
}
internal class Umbraco.Core.Serialization.AutoInterningStringConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Umbraco.Core.Serialization.AutoInterningStringKeyCaseInsensitiveDictionaryConverter`1 : CaseInsensitiveDictionaryConverter`1<TValue> {
    public AutoInterningStringKeyCaseInsensitiveDictionaryConverter`1(StringComparer comparer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class Umbraco.Core.Serialization.CaseInsensitiveDictionaryConverter`1 : CustomCreationConverter`1<IDictionary> {
    private StringComparer _comparer;
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public CaseInsensitiveDictionaryConverter`1(StringComparer comparer);
    public virtual bool get_CanWrite();
    public virtual bool get_CanRead();
    public virtual bool CanConvert(Type objectType);
    public virtual IDictionary Create(Type objectType);
}
internal class Umbraco.Core.Serialization.ForceInt32Converter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
public class Umbraco.Core.Serialization.Formatter : object {
    public string Intent { get; }
    public ISerializer Serializer { get; }
    public sealed virtual string get_Intent();
    public sealed virtual ISerializer get_Serializer();
}
public class Umbraco.Core.Serialization.FuzzyBooleanConverter : JsonConverter {
    public bool CanWrite { get; }
    public bool CanRead { get; }
    public virtual bool get_CanWrite();
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual bool get_CanRead();
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public interface Umbraco.Core.Serialization.IFormatter {
    public string Intent { get; }
    public ISerializer Serializer { get; }
    public abstract virtual string get_Intent();
    public abstract virtual ISerializer get_Serializer();
}
public interface Umbraco.Core.Serialization.ISerializer {
    public abstract virtual object FromStream(Stream input, Type outputType);
    public abstract virtual IStreamedResult ToStream(object input);
}
public interface Umbraco.Core.Serialization.IStreamedResult {
    public Stream ResultStream { get; }
    public bool Success { get; }
    public abstract virtual Stream get_ResultStream();
    public abstract virtual bool get_Success();
}
internal class Umbraco.Core.Serialization.JsonNetSerializer : object {
    private JsonSerializerSettings _settings;
    public sealed virtual object FromStream(Stream input, Type outputType);
    public sealed virtual IStreamedResult ToStream(object input);
}
internal abstract class Umbraco.Core.Serialization.JsonReadConverter`1 : JsonConverter {
    protected abstract virtual T Create(Type objectType, string path, JObject jObject);
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    protected virtual void Deserialize(JObject jobject, T target, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
internal class Umbraco.Core.Serialization.JsonToStringConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
public class Umbraco.Core.Serialization.KnownTypeUdiJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal class Umbraco.Core.Serialization.NoTypeConverterJsonConverter`1 : JsonConverter {
    private static IContractResolver resolver;
    private static JsonSerializerSettings JsonSerializerSettings;
    private static NoTypeConverterJsonConverter`1();
    public virtual bool CanConvert(Type objectType);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
}
[ExtensionAttribute]
public static class Umbraco.Core.Serialization.SerializationExtensions : object {
    [ExtensionAttribute]
public static T FromJson(AbstractSerializationService service, string json, string intent);
    [ExtensionAttribute]
public static T FromJson(ISerializer serializer, string json, string intent);
    [ExtensionAttribute]
public static object FromJson(ISerializer serializer, string json, Type outputType);
    [ExtensionAttribute]
public static object FromJson(AbstractSerializationService service, string json, Type outputType, string intent);
    [ExtensionAttribute]
public static string ToJson(AbstractSerializationService service, object input, string intent);
}
public class Umbraco.Core.Serialization.SerializationService : AbstractSerializationService {
    private ISerializer _serializer;
    public SerializationService(ISerializer serializer);
    public virtual object FromStream(Stream input, Type outputType, string intent);
    public virtual IStreamedResult ToStream(object input, string intent);
}
public class Umbraco.Core.Serialization.StreamedResult : object {
    [CompilerGeneratedAttribute]
private Stream <ResultStream>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    public Stream ResultStream { get; protected set; }
    public bool Success { get; protected set; }
    internal StreamedResult(Stream stream, bool success);
    [CompilerGeneratedAttribute]
public sealed virtual Stream get_ResultStream();
    [CompilerGeneratedAttribute]
protected void set_ResultStream(Stream value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Success();
    [CompilerGeneratedAttribute]
protected void set_Success(bool value);
}
[ExtensionAttribute]
public static class Umbraco.Core.Serialization.StreamResultExtensions : object {
    [ExtensionAttribute]
public static string ToJsonString(Stream stream);
    [ExtensionAttribute]
public static XDocument ToXDoc(Stream stream);
}
public class Umbraco.Core.Serialization.UdiJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
public class Umbraco.Core.Serialization.UdiRangeJsonConverter : JsonConverter {
    public virtual bool CanConvert(Type objectType);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
[ExtensionAttribute]
public static class Umbraco.Core.ServiceContextExtensions : object {
    [ExtensionAttribute]
public static IContentTypeBaseService`1<T> GetContentTypeService(ServiceContext services);
}
public class Umbraco.Core.Services.Changes.ContentTypeChange`1 : object {
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private ContentTypeChangeTypes <ChangeTypes>k__BackingField;
    public TItem Item { get; }
    public ContentTypeChangeTypes ChangeTypes { get; internal set; }
    public ContentTypeChange`1(TItem item, ContentTypeChangeTypes changeTypes);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
public ContentTypeChangeTypes get_ChangeTypes();
    [CompilerGeneratedAttribute]
internal void set_ChangeTypes(ContentTypeChangeTypes value);
    public EventArgs<TItem> ToEventArgs(ContentTypeChange`1<TItem> change);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Services.Changes.ContentTypeChangeExtensions : object {
    [ExtensionAttribute]
public static EventArgs<TItem> ToEventArgs(IEnumerable`1<ContentTypeChange`1<TItem>> changes);
    [ExtensionAttribute]
public static bool HasType(ContentTypeChangeTypes change, ContentTypeChangeTypes type);
    [ExtensionAttribute]
public static bool HasTypesAll(ContentTypeChangeTypes change, ContentTypeChangeTypes types);
    [ExtensionAttribute]
public static bool HasTypesAny(ContentTypeChangeTypes change, ContentTypeChangeTypes types);
    [ExtensionAttribute]
public static bool HasTypesNone(ContentTypeChangeTypes change, ContentTypeChangeTypes types);
}
[FlagsAttribute]
public enum Umbraco.Core.Services.Changes.ContentTypeChangeTypes : Enum {
    public byte value__;
    public static ContentTypeChangeTypes None;
    public static ContentTypeChangeTypes Create;
    public static ContentTypeChangeTypes RefreshMain;
    public static ContentTypeChangeTypes RefreshOther;
    public static ContentTypeChangeTypes Remove;
}
public enum Umbraco.Core.Services.Changes.DomainChangeTypes : Enum {
    public byte value__;
    public static DomainChangeTypes None;
    public static DomainChangeTypes RefreshAll;
    public static DomainChangeTypes Refresh;
    public static DomainChangeTypes Remove;
}
public class Umbraco.Core.Services.Changes.TreeChange`1 : object {
    [CompilerGeneratedAttribute]
private TItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private TreeChangeTypes <ChangeTypes>k__BackingField;
    public TItem Item { get; }
    public TreeChangeTypes ChangeTypes { get; }
    public TreeChange`1(TItem changedItem, TreeChangeTypes changeTypes);
    [CompilerGeneratedAttribute]
public TItem get_Item();
    [CompilerGeneratedAttribute]
public TreeChangeTypes get_ChangeTypes();
    public EventArgs<TItem> ToEventArgs();
}
[ExtensionAttribute]
public static class Umbraco.Core.Services.Changes.TreeChangeExtensions : object {
    [ExtensionAttribute]
internal static EventArgs<TItem> ToEventArgs(IEnumerable`1<TreeChange`1<TItem>> changes);
    [ExtensionAttribute]
public static bool HasType(TreeChangeTypes change, TreeChangeTypes type);
    [ExtensionAttribute]
public static bool HasTypesAll(TreeChangeTypes change, TreeChangeTypes types);
    [ExtensionAttribute]
public static bool HasTypesAny(TreeChangeTypes change, TreeChangeTypes types);
    [ExtensionAttribute]
public static bool HasTypesNone(TreeChangeTypes change, TreeChangeTypes types);
}
[FlagsAttribute]
public enum Umbraco.Core.Services.Changes.TreeChangeTypes : Enum {
    public byte value__;
    public static TreeChangeTypes None;
    public static TreeChangeTypes RefreshAll;
    public static TreeChangeTypes RefreshNode;
    public static TreeChangeTypes RefreshBranch;
    public static TreeChangeTypes Remove;
}
[ExtensionAttribute]
public static class Umbraco.Core.Services.ContentServiceExtensions : object {
    private static Regex AnchorRegex;
    private static ContentServiceExtensions();
    [ExtensionAttribute]
internal static IEnumerable`1<string> GetAnchorValuesFromRTEs(IContentService contentService, int id, string culture);
    [ExtensionAttribute]
internal static IEnumerable`1<string> GetAnchorValuesFromRTEContent(IContentService contentService, string rteContent);
    [ExtensionAttribute]
public static IEnumerable`1<IContent> GetByIds(IContentService contentService, IEnumerable`1<Udi> ids);
    [ExtensionAttribute]
public static IContent CreateContent(IContentService contentService, string name, Udi parentId, string contentTypeAlias, int userId);
    [ExtensionAttribute]
public static void RemoveContentPermissions(IContentService contentService, int contentId);
}
[ExtensionAttribute]
public static class Umbraco.Core.Services.ContentTypeServiceExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IContentType> GetAllElementTypes(IContentTypeService contentTypeService);
    [ExtensionAttribute]
internal static ContentTypeAvailableCompositionsResults GetAvailableCompositeContentTypes(IContentTypeService ctService, IContentTypeComposition source, IContentTypeComposition[] allContentTypes, String[] filterContentTypes, String[] filterPropertyTypes, bool isElement);
    private static IContentTypeComposition[] GetAncestors(IContentTypeComposition ctype, IContentTypeComposition[] allContentTypes);
    private static IEnumerable`1<IContentTypeComposition> GetDirectOrIndirect(IContentTypeComposition ctype);
}
[ExtensionAttribute]
internal static class Umbraco.Core.Services.DateTypeServiceExtensions : object {
    [ExtensionAttribute]
public static bool IsDataTypeIgnoringUserStartNodes(IDataTypeService dataTypeService, Guid key);
}
public interface Umbraco.Core.Services.IAuditService {
    public abstract virtual void Add(AuditType type, int userId, int objectId, string entityType, string comment, string parameters);
    public abstract virtual IEnumerable`1<IAuditItem> GetLogs(int objectId);
    public abstract virtual IEnumerable`1<IAuditItem> GetUserLogs(int userId, AuditType type, Nullable`1<DateTime> sinceDate);
    public abstract virtual IEnumerable`1<IAuditItem> GetLogs(AuditType type, Nullable`1<DateTime> sinceDate);
    public abstract virtual void CleanLogs(int maximumAgeOfLogsInMinutes);
    public abstract virtual IEnumerable`1<IAuditItem> GetPagedItemsByEntity(int entityId, long pageIndex, int pageSize, Int64& totalRecords, Direction orderDirection, AuditType[] auditTypeFilter, IQuery`1<IAuditItem> customFilter);
    public abstract virtual IEnumerable`1<IAuditItem> GetPagedItemsByUser(int userId, long pageIndex, int pageSize, Int64& totalRecords, Direction orderDirection, AuditType[] auditTypeFilter, IQuery`1<IAuditItem> customFilter);
    public abstract virtual IAuditEntry Write(int performingUserId, string perfomingDetails, string performingIp, DateTime eventDateUtc, int affectedUserId, string affectedDetails, string eventType, string eventDetails);
}
public interface Umbraco.Core.Services.IConsentService {
    public abstract virtual IConsent RegisterConsent(string source, string context, string action, ConsentState state, string comment);
    public abstract virtual IEnumerable`1<IConsent> LookupConsent(string source, string context, string action, bool sourceStartsWith, bool contextStartsWith, bool actionStartsWith, bool includeHistory);
}
public interface Umbraco.Core.Services.IContentService {
    public abstract virtual IContent GetBlueprintById(int id);
    public abstract virtual IContent GetBlueprintById(Guid id);
    public abstract virtual IEnumerable`1<IContent> GetBlueprintsForContentTypes(Int32[] documentTypeId);
    public abstract virtual void SaveBlueprint(IContent content, int userId);
    public abstract virtual void DeleteBlueprint(IContent content, int userId);
    public abstract virtual IContent CreateContentFromBlueprint(IContent blueprint, string name, int userId);
    public abstract virtual void DeleteBlueprintsOfType(int contentTypeId, int userId);
    public abstract virtual void DeleteBlueprintsOfTypes(IEnumerable`1<int> contentTypeIds, int userId);
    public abstract virtual IContent GetById(int id);
    public abstract virtual IContent GetById(Guid key);
    public abstract virtual IEnumerable`1<IContent> GetByIds(IEnumerable`1<int> ids);
    public abstract virtual IEnumerable`1<IContent> GetByIds(IEnumerable`1<Guid> ids);
    public abstract virtual IEnumerable`1<IContent> GetByLevel(int level);
    public abstract virtual IContent GetParent(int id);
    public abstract virtual IContent GetParent(IContent content);
    public abstract virtual IEnumerable`1<IContent> GetAncestors(int id);
    public abstract virtual IEnumerable`1<IContent> GetAncestors(IContent content);
    public abstract virtual IEnumerable`1<IContent> GetVersions(int id);
    public abstract virtual IEnumerable`1<IContent> GetVersionsSlim(int id, int skip, int take);
    public abstract virtual IEnumerable`1<int> GetVersionIds(int id, int topRows);
    public abstract virtual IContent GetVersion(int versionId);
    public abstract virtual IEnumerable`1<IContent> GetRootContent();
    public abstract virtual IEnumerable`1<IContent> GetContentForExpiration(DateTime date);
    public abstract virtual IEnumerable`1<IContent> GetContentForRelease(DateTime date);
    public abstract virtual IEnumerable`1<IContent> GetPagedContentInRecycleBin(long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IContent> GetPagedChildren(int id, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IContent> GetPagedDescendants(int id, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IContent> GetPagedOfType(int contentTypeId, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IContent> GetPagedOfTypes(Int32[] contentTypeIds, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public abstract virtual int Count(string documentTypeAlias);
    public abstract virtual int CountPublished(string documentTypeAlias);
    public abstract virtual int CountChildren(int parentId, string documentTypeAlias);
    public abstract virtual int CountDescendants(int parentId, string documentTypeAlias);
    public abstract virtual bool HasChildren(int id);
    public abstract virtual OperationResult Save(IContent content, int userId, bool raiseEvents);
    public abstract virtual OperationResult Save(IEnumerable`1<IContent> contents, int userId, bool raiseEvents);
    public abstract virtual OperationResult Delete(IContent content, int userId);
    public abstract virtual void DeleteOfType(int documentTypeId, int userId);
    public abstract virtual void DeleteOfTypes(IEnumerable`1<int> contentTypeIds, int userId);
    public abstract virtual void DeleteVersions(int id, DateTime date, int userId);
    public abstract virtual void DeleteVersion(int id, int versionId, bool deletePriorVersions, int userId);
    public abstract virtual void Move(IContent content, int parentId, int userId);
    public abstract virtual IContent Copy(IContent content, int parentId, bool relateToOriginal, int userId);
    public abstract virtual IContent Copy(IContent content, int parentId, bool relateToOriginal, bool recursive, int userId);
    public abstract virtual OperationResult MoveToRecycleBin(IContent content, int userId);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use EmptyRecycleBin with explicit indication of user ID instead")]
public abstract virtual OperationResult EmptyRecycleBin();
    public abstract virtual OperationResult EmptyRecycleBin(int userId);
    public abstract virtual bool RecycleBinSmells();
    public abstract virtual OperationResult Sort(IEnumerable`1<IContent> items, int userId, bool raiseEvents);
    public abstract virtual OperationResult Sort(IEnumerable`1<int> ids, int userId, bool raiseEvents);
    public abstract virtual PublishResult SaveAndPublish(IContent content, string culture, int userId, bool raiseEvents);
    public abstract virtual PublishResult SaveAndPublish(IContent content, String[] cultures, int userId, bool raiseEvents);
    public abstract virtual IEnumerable`1<PublishResult> SaveAndPublishBranch(IContent content, bool force, string culture, int userId);
    public abstract virtual IEnumerable`1<PublishResult> SaveAndPublishBranch(IContent content, bool force, String[] cultures, int userId);
    public abstract virtual PublishResult Unpublish(IContent content, string culture, int userId);
    public abstract virtual bool IsPathPublishable(IContent content);
    public abstract virtual bool IsPathPublished(IContent content);
    public abstract virtual bool SendToPublication(IContent content, int userId);
    public abstract virtual IEnumerable`1<PublishResult> PerformScheduledPublish(DateTime date);
    public abstract virtual EntityPermissionCollection GetPermissions(IContent content);
    public abstract virtual void SetPermissions(EntityPermissionSet permissionSet);
    public abstract virtual void SetPermission(IContent entity, char permission, IEnumerable`1<int> groupIds);
    public abstract virtual IContent Create(string name, Guid parentId, string documentTypeAlias, int userId);
    public abstract virtual IContent Create(string name, int parentId, string documentTypeAlias, int userId);
    public abstract virtual IContent Create(string name, int parentId, IContentType contentType, int userId);
    public abstract virtual IContent Create(string name, IContent parent, string documentTypeAlias, int userId);
    public abstract virtual IContent CreateAndSave(string name, int parentId, string contentTypeAlias, int userId);
    public abstract virtual IContent CreateAndSave(string name, IContent parent, string contentTypeAlias, int userId);
    public abstract virtual OperationResult Rollback(int id, int versionId, string culture, int userId);
}
public interface Umbraco.Core.Services.IContentServiceBase {
    public abstract virtual ContentDataIntegrityReport CheckDataIntegrity(ContentDataIntegrityReportOptions options);
}
public interface Umbraco.Core.Services.IContentTypeBaseService {
    public abstract virtual IContentTypeComposition Get(int id);
}
public interface Umbraco.Core.Services.IContentTypeBaseService`1 {
    public abstract virtual TItem Get(int id);
    public abstract virtual TItem Get(Guid key);
    public abstract virtual TItem Get(string alias);
    public abstract virtual int Count();
    public abstract virtual bool HasContentNodes(int id);
    public abstract virtual IEnumerable`1<TItem> GetAll(Int32[] ids);
    public abstract virtual IEnumerable`1<TItem> GetAll(IEnumerable`1<Guid> ids);
    public abstract virtual IEnumerable`1<TItem> GetDescendants(int id, bool andSelf);
    public abstract virtual IEnumerable`1<TItem> GetComposedOf(int id);
    public abstract virtual IEnumerable`1<TItem> GetChildren(int id);
    public abstract virtual IEnumerable`1<TItem> GetChildren(Guid id);
    public abstract virtual bool HasChildren(int id);
    public abstract virtual bool HasChildren(Guid id);
    public abstract virtual void Save(TItem item, int userId);
    public abstract virtual void Save(IEnumerable`1<TItem> items, int userId);
    public abstract virtual void Delete(TItem item, int userId);
    public abstract virtual void Delete(IEnumerable`1<TItem> item, int userId);
    public abstract virtual Attempt`1<String[]> ValidateComposition(TItem compo);
    public abstract virtual bool HasContainerInPath(string contentPath);
    public abstract virtual bool HasContainerInPath(Int32[] ids);
    public abstract virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> CreateContainer(int parentContainerId, string name, int userId);
    public abstract virtual Attempt`1<OperationResult> SaveContainer(EntityContainer container, int userId);
    public abstract virtual EntityContainer GetContainer(int containerId);
    public abstract virtual EntityContainer GetContainer(Guid containerId);
    public abstract virtual IEnumerable`1<EntityContainer> GetContainers(Int32[] containerIds);
    public abstract virtual IEnumerable`1<EntityContainer> GetContainers(TItem contentType);
    public abstract virtual IEnumerable`1<EntityContainer> GetContainers(string folderName, int level);
    public abstract virtual Attempt`1<OperationResult> DeleteContainer(int containerId, int userId);
    public abstract virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> RenameContainer(int id, string name, int userId);
    public abstract virtual Attempt`1<OperationResult`1<MoveOperationStatusType>> Move(TItem moving, int containerId);
    public abstract virtual Attempt`1<OperationResult`2<MoveOperationStatusType, TItem>> Copy(TItem copying, int containerId);
    public abstract virtual TItem Copy(TItem original, string alias, string name, int parentId);
    public abstract virtual TItem Copy(TItem original, string alias, string name, TItem parent);
}
public interface Umbraco.Core.Services.IContentTypeBaseServiceProvider {
    public abstract virtual IContentTypeBaseService For(IContentBase contentBase);
    public abstract virtual IContentTypeComposition GetContentTypeOf(IContentBase contentBase);
}
public interface Umbraco.Core.Services.IContentTypeService {
    public abstract virtual IEnumerable`1<string> GetAllPropertyTypeAliases();
    public abstract virtual IEnumerable`1<string> GetAllContentTypeAliases(Guid[] objectTypes);
    public abstract virtual IEnumerable`1<int> GetAllContentTypeIds(String[] aliases);
}
public interface Umbraco.Core.Services.IContentVersionCleanupPolicy {
    public abstract virtual IEnumerable`1<ContentVersionMeta> Apply(DateTime asAtDate, IEnumerable`1<ContentVersionMeta> items);
}
public interface Umbraco.Core.Services.IContentVersionService {
    public abstract virtual IReadOnlyCollection`1<ContentVersionMeta> PerformContentVersionCleanup(DateTime asAtDate);
    public abstract virtual IEnumerable`1<ContentVersionMeta> GetPagedContentVersions(int contentId, long pageIndex, int pageSize, Int64& totalRecords, string culture);
    public abstract virtual void SetPreventCleanup(int versionId, bool preventCleanup, int userId);
}
public interface Umbraco.Core.Services.IDataTypeService {
    public abstract virtual IReadOnlyDictionary`2<Udi, IEnumerable`1<string>> GetReferences(int id);
    public abstract virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> CreateContainer(int parentId, string name, int userId);
    public abstract virtual Attempt`1<OperationResult> SaveContainer(EntityContainer container, int userId);
    public abstract virtual EntityContainer GetContainer(int containerId);
    public abstract virtual EntityContainer GetContainer(Guid containerId);
    public abstract virtual IEnumerable`1<EntityContainer> GetContainers(string folderName, int level);
    public abstract virtual IEnumerable`1<EntityContainer> GetContainers(IDataType dataType);
    public abstract virtual IEnumerable`1<EntityContainer> GetContainers(Int32[] containerIds);
    public abstract virtual Attempt`1<OperationResult> DeleteContainer(int containerId, int userId);
    public abstract virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> RenameContainer(int id, string name, int userId);
    public abstract virtual IDataType GetDataType(string name);
    public abstract virtual IDataType GetDataType(int id);
    public abstract virtual IDataType GetDataType(Guid id);
    public abstract virtual IEnumerable`1<IDataType> GetAll(Int32[] ids);
    public abstract virtual void Save(IDataType dataType, int userId);
    public abstract virtual void Save(IEnumerable`1<IDataType> dataTypeDefinitions, int userId);
    public abstract virtual void Save(IEnumerable`1<IDataType> dataTypeDefinitions, int userId, bool raiseEvents);
    public abstract virtual void Delete(IDataType dataType, int userId);
    public abstract virtual IEnumerable`1<IDataType> GetByEditorAlias(string propertyEditorAlias);
    public abstract virtual Attempt`1<OperationResult`1<MoveOperationStatusType>> Move(IDataType toMove, int parentId);
}
public class Umbraco.Core.Services.IdkMap : object {
    private IScopeProvider _scopeProvider;
    private ReaderWriterLockSlim _locker;
    private Dictionary`2<int, TypedId`1<Guid>> _id2Key;
    private Dictionary`2<Guid, TypedId`1<int>> _key2Id;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<UmbracoObjectTypes, ValueTuple`2<Func`2<int, Guid>, Func`2<Guid, int>>> _dictionary;
    private bool _disposedValue;
    public IdkMap(IScopeProvider scopeProvider);
    internal void SetMapper(UmbracoObjectTypes umbracoObjectType, Func`2<int, Guid> id2key, Func`2<Guid, int> key2id);
    internal void Populate(IEnumerable`1<ValueTuple`2<int, Guid>> pairs, UmbracoObjectTypes umbracoObjectType);
    public Attempt`1<int> GetIdForKey(Guid key, UmbracoObjectTypes umbracoObjectType);
    public Attempt`1<int> GetIdForUdi(Udi udi);
    public Attempt`1<Udi> GetUdiForId(int id, UmbracoObjectTypes umbracoObjectType);
    public Attempt`1<Guid> GetKeyForId(int id, UmbracoObjectTypes umbracoObjectType);
    private static Guid GetNodeObjectTypeGuid(UmbracoObjectTypes umbracoObjectType);
    public void ClearCache();
    public void ClearCache(int id);
    public void ClearCache(Guid key);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
public interface Umbraco.Core.Services.IDomainService {
    public abstract virtual bool Exists(string domainName);
    public abstract virtual Attempt`1<OperationResult> Delete(IDomain domain);
    public abstract virtual IDomain GetByName(string name);
    public abstract virtual IDomain GetById(int id);
    public abstract virtual IEnumerable`1<IDomain> GetAll(bool includeWildcards);
    public abstract virtual IEnumerable`1<IDomain> GetAssignedDomains(int contentId, bool includeWildcards);
    public abstract virtual Attempt`1<OperationResult> Save(IDomain domainEntity);
}
public interface Umbraco.Core.Services.IEntityService {
    public abstract virtual IEntitySlim Get(int id);
    public abstract virtual IEntitySlim Get(Guid key);
    public abstract virtual IEntitySlim Get(int id, UmbracoObjectTypes objectType);
    public abstract virtual IEntitySlim Get(Guid key, UmbracoObjectTypes objectType);
    public abstract virtual IEntitySlim Get(int id);
    public abstract virtual IEntitySlim Get(Guid key);
    public abstract virtual bool Exists(int id);
    public abstract virtual bool Exists(Guid key);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll();
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(Int32[] ids);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(UmbracoObjectTypes objectType);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(UmbracoObjectTypes objectType, Int32[] ids);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Int32[] ids);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(Guid[] keys);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(UmbracoObjectTypes objectType, Guid[] keys);
    public abstract virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Guid[] keys);
    public abstract virtual IEnumerable`1<IEntitySlim> GetRootEntities(UmbracoObjectTypes objectType);
    public abstract virtual IEntitySlim GetParent(int id);
    public abstract virtual IEntitySlim GetParent(int id, UmbracoObjectTypes objectType);
    public abstract virtual IEnumerable`1<IEntitySlim> GetChildren(int id);
    public abstract virtual IEnumerable`1<IEntitySlim> GetChildren(int id, UmbracoObjectTypes objectType);
    public abstract virtual IEnumerable`1<IEntitySlim> GetDescendants(int id);
    public abstract virtual IEnumerable`1<IEntitySlim> GetDescendants(int id, UmbracoObjectTypes objectType);
    public abstract virtual IEnumerable`1<IEntitySlim> GetPagedChildren(int id, UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IEntitySlim> GetPagedDescendants(int id, UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IEntitySlim> GetPagedDescendants(IEnumerable`1<int> ids, UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IEntitySlim> GetPagedDescendants(UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering, bool includeTrashed);
    public abstract virtual UmbracoObjectTypes GetObjectType(int id);
    public abstract virtual UmbracoObjectTypes GetObjectType(Guid key);
    public abstract virtual UmbracoObjectTypes GetObjectType(IUmbracoEntity entity);
    public abstract virtual Type GetEntityType(int id);
    public abstract virtual Attempt`1<int> GetId(Guid key, UmbracoObjectTypes objectType);
    public abstract virtual Attempt`1<int> GetId(Udi udi);
    public abstract virtual Attempt`1<Guid> GetKey(int id, UmbracoObjectTypes umbracoObjectType);
    public abstract virtual IEnumerable`1<TreeEntityPath> GetAllPaths(UmbracoObjectTypes objectType, Int32[] ids);
    public abstract virtual IEnumerable`1<TreeEntityPath> GetAllPaths(UmbracoObjectTypes objectType, Guid[] keys);
    public abstract virtual int ReserveId(Guid key);
}
public interface Umbraco.Core.Services.IEntityXmlSerializer {
    public abstract virtual XElement Serialize(IContent content, bool published, bool withDescendants);
    public abstract virtual XElement Serialize(IMedia media, bool withDescendants);
    public abstract virtual XElement Serialize(IMember member);
    public abstract virtual XElement Serialize(IEnumerable`1<IDataType> dataTypeDefinitions);
    public abstract virtual XElement Serialize(IDataType dataType);
    public abstract virtual XElement Serialize(IEnumerable`1<IDictionaryItem> dictionaryItem, bool includeChildren);
    public abstract virtual XElement Serialize(IDictionaryItem dictionaryItem, bool includeChildren);
    public abstract virtual XElement Serialize(Stylesheet stylesheet);
    public abstract virtual XElement Serialize(IEnumerable`1<ILanguage> languages);
    public abstract virtual XElement Serialize(ILanguage language);
    public abstract virtual XElement Serialize(ITemplate template);
    public abstract virtual XElement Serialize(IEnumerable`1<ITemplate> templates);
    public abstract virtual XElement Serialize(IMediaType mediaType);
    public abstract virtual XElement Serialize(IEnumerable`1<IMacro> macros);
    public abstract virtual XElement Serialize(IMacro macro);
    public abstract virtual XElement Serialize(IContentType contentType);
}
public interface Umbraco.Core.Services.IExternalLoginService {
    public abstract virtual IEnumerable`1<IIdentityUserLogin> GetAll(int userId);
    [ObsoleteAttribute("Use the overload specifying loginProvider and providerKey instead")]
public abstract virtual IEnumerable`1<IIdentityUserLogin> Find(UserLoginInfo login);
    public abstract virtual IEnumerable`1<IIdentityUserLogin> Find(string loginProvider, string providerKey);
    [ObsoleteAttribute("Use the Save method instead")]
public abstract virtual void SaveUserLogins(int userId, IEnumerable`1<UserLoginInfo> logins);
    public abstract virtual void Save(int userId, IEnumerable`1<IExternalLogin> logins);
    public abstract virtual void Save(IIdentityUserLoginExtended login);
    public abstract virtual void DeleteUserLogins(int userId);
}
public interface Umbraco.Core.Services.IFileService {
    public abstract virtual IEnumerable`1<string> GetPartialViewSnippetNames(String[] filterNames);
    public abstract virtual void CreatePartialViewFolder(string folderPath);
    public abstract virtual void CreatePartialViewMacroFolder(string folderPath);
    public abstract virtual void DeletePartialViewFolder(string folderPath);
    public abstract virtual void DeletePartialViewMacroFolder(string folderPath);
    public abstract virtual IPartialView GetPartialView(string path);
    public abstract virtual IPartialView GetPartialViewMacro(string path);
    public abstract virtual IEnumerable`1<IPartialView> GetPartialViewMacros(String[] names);
    public abstract virtual Attempt`1<IPartialView> CreatePartialView(IPartialView partialView, string snippetName, int userId);
    public abstract virtual Attempt`1<IPartialView> CreatePartialViewMacro(IPartialView partialView, string snippetName, int userId);
    public abstract virtual bool DeletePartialView(string path, int userId);
    public abstract virtual bool DeletePartialViewMacro(string path, int userId);
    public abstract virtual Attempt`1<IPartialView> SavePartialView(IPartialView partialView, int userId);
    public abstract virtual Attempt`1<IPartialView> SavePartialViewMacro(IPartialView partialView, int userId);
    public abstract virtual bool ValidatePartialView(PartialView partialView);
    public abstract virtual bool ValidatePartialViewMacro(PartialView partialView);
    public abstract virtual IEnumerable`1<Stylesheet> GetStylesheets(String[] names);
    public abstract virtual Stylesheet GetStylesheetByName(string name);
    public abstract virtual void SaveStylesheet(Stylesheet stylesheet, int userId);
    public abstract virtual void DeleteStylesheet(string path, int userId);
    public abstract virtual bool ValidateStylesheet(Stylesheet stylesheet);
    public abstract virtual IEnumerable`1<Script> GetScripts(String[] names);
    public abstract virtual Script GetScriptByName(string name);
    public abstract virtual void SaveScript(Script script, int userId);
    public abstract virtual void DeleteScript(string path, int userId);
    public abstract virtual bool ValidateScript(Script script);
    public abstract virtual void CreateScriptFolder(string folderPath);
    public abstract virtual void DeleteScriptFolder(string folderPath);
    public abstract virtual void CreateStyleSheetFolder(string folderPath);
    public abstract virtual void DeleteStyleSheetFolder(string folderPath);
    public abstract virtual IEnumerable`1<ITemplate> GetTemplates(String[] aliases);
    public abstract virtual IEnumerable`1<ITemplate> GetTemplates(int masterTemplateId);
    public abstract virtual ITemplate GetTemplate(string alias);
    public abstract virtual ITemplate GetTemplate(int id);
    public abstract virtual ITemplate GetTemplate(Guid id);
    public abstract virtual IEnumerable`1<ITemplate> GetTemplateDescendants(string alias);
    public abstract virtual IEnumerable`1<ITemplate> GetTemplateDescendants(int masterTemplateId);
    public abstract virtual IEnumerable`1<ITemplate> GetTemplateChildren(string alias);
    public abstract virtual IEnumerable`1<ITemplate> GetTemplateChildren(int masterTemplateId);
    public abstract virtual void SaveTemplate(ITemplate template, int userId);
    public abstract virtual Attempt`1<OperationResult`2<OperationResultType, ITemplate>> CreateTemplateForContentType(string contentTypeAlias, string contentTypeName, int userId);
    public abstract virtual ITemplate CreateTemplateWithIdentity(string name, string alias, string content, ITemplate masterTemplate, int userId);
    public abstract virtual void DeleteTemplate(string alias, int userId);
    public abstract virtual bool ValidateTemplate(ITemplate template);
    public abstract virtual void SaveTemplate(IEnumerable`1<ITemplate> templates, int userId);
    public abstract virtual Stream GetTemplateFileContentStream(string filepath);
    public abstract virtual void SetTemplateFileContent(string filepath, Stream content);
    public abstract virtual long GetTemplateFileSize(string filepath);
    public abstract virtual Stream GetStylesheetFileContentStream(string filepath);
    public abstract virtual void SetStylesheetFileContent(string filepath, Stream content);
    public abstract virtual long GetStylesheetFileSize(string filepath);
    public abstract virtual Stream GetScriptFileContentStream(string filepath);
    public abstract virtual void SetScriptFileContent(string filepath, Stream content);
    public abstract virtual long GetScriptFileSize(string filepath);
    public abstract virtual Stream GetPartialViewMacroFileContentStream(string filepath);
    public abstract virtual void SetPartialViewMacroFileContent(string filepath, Stream content);
    public abstract virtual long GetPartialViewMacroFileSize(string filepath);
    public abstract virtual Stream GetPartialViewFileContentStream(string filepath);
    public abstract virtual void SetPartialViewFileContent(string filepath, Stream content);
    public abstract virtual long GetPartialViewFileSize(string filepath);
    public abstract virtual string GetPartialViewMacroSnippetContent(string snippetName);
    public abstract virtual string GetPartialViewSnippetContent(string snippetName);
}
public interface Umbraco.Core.Services.IIconService {
    public abstract virtual IconModel GetIcon(string iconName);
    [ObsoleteAttribute("This method should not be used - use GetIcons instead")]
[EditorBrowsableAttribute("1")]
public abstract virtual IList`1<IconModel> GetAllIcons();
    public abstract virtual IReadOnlyDictionary`2<string, string> GetIcons();
}
public interface Umbraco.Core.Services.IInstallationService {
    public abstract virtual Task LogInstall(InstallLog installLog);
}
public interface Umbraco.Core.Services.IKeyValueService {
    public abstract virtual string GetValue(string key);
    public abstract virtual void SetValue(string key, string value);
    public abstract virtual void SetValue(string key, string originValue, string newValue);
    public abstract virtual bool TrySetValue(string key, string originValue, string newValue);
}
public interface Umbraco.Core.Services.ILocalizationService {
    public abstract virtual void AddOrUpdateDictionaryValue(IDictionaryItem item, ILanguage language, string value);
    public abstract virtual IDictionaryItem CreateDictionaryItemWithIdentity(string key, Nullable`1<Guid> parentId, string defaultValue);
    public abstract virtual IDictionaryItem GetDictionaryItemById(int id);
    public abstract virtual IDictionaryItem GetDictionaryItemById(Guid id);
    public abstract virtual IDictionaryItem GetDictionaryItemByKey(string key);
    public abstract virtual IEnumerable`1<IDictionaryItem> GetDictionaryItemChildren(Guid parentId);
    public abstract virtual IEnumerable`1<IDictionaryItem> GetDictionaryItemDescendants(Nullable`1<Guid> parentId);
    public abstract virtual IEnumerable`1<IDictionaryItem> GetRootDictionaryItems();
    public abstract virtual bool DictionaryItemExists(string key);
    public abstract virtual void Save(IDictionaryItem dictionaryItem, int userId);
    public abstract virtual void Delete(IDictionaryItem dictionaryItem, int userId);
    public abstract virtual ILanguage GetLanguageById(int id);
    public abstract virtual ILanguage GetLanguageByIsoCode(string isoCode);
    public abstract virtual Nullable`1<int> GetLanguageIdByIsoCode(string isoCode);
    public abstract virtual string GetLanguageIsoCodeById(int id);
    public abstract virtual string GetDefaultLanguageIsoCode();
    public abstract virtual Nullable`1<int> GetDefaultLanguageId();
    public abstract virtual IEnumerable`1<ILanguage> GetAllLanguages();
    public abstract virtual void Save(ILanguage language, int userId);
    public abstract virtual void Delete(ILanguage language, int userId);
    public abstract virtual Dictionary`2<string, Guid> GetDictionaryItemKeyMap();
}
public interface Umbraco.Core.Services.ILocalizedTextService {
    [ObsoleteAttribute("Use LocalizedTextServiceExtensions.Localize or ILocalizedTextService2.Localize instead")]
public abstract virtual string Localize(string key, CultureInfo culture, IDictionary`2<string, string> tokens);
    public abstract virtual IDictionary`2<string, string> GetAllStoredValues(CultureInfo culture);
    public abstract virtual IEnumerable`1<CultureInfo> GetSupportedCultures();
    public abstract virtual CultureInfo ConvertToSupportedCultureWithRegionCode(CultureInfo currentCulture);
}
public interface Umbraco.Core.Services.ILocalizedTextService2 {
    public abstract virtual string Localize(string area, string alias, CultureInfo culture, IDictionary`2<string, string> tokens);
    public abstract virtual IDictionary`2<string, IDictionary`2<string, string>> GetAllStoredValuesByAreaAndAlias(CultureInfo culture);
}
public interface Umbraco.Core.Services.IMacroService {
    public abstract virtual IMacro GetByAlias(string alias);
    public abstract virtual IEnumerable`1<IMacro> GetAll();
    public abstract virtual IEnumerable`1<IMacro> GetAll(Int32[] ids);
    public abstract virtual IEnumerable`1<IMacro> GetAll(Guid[] ids);
    public abstract virtual IMacro GetById(int id);
    public abstract virtual IMacro GetById(Guid id);
    public abstract virtual void Delete(IMacro macro, int userId);
    public abstract virtual void Save(IMacro macro, int userId);
}
public interface Umbraco.Core.Services.IMediaService {
    public abstract virtual int CountNotTrashed(string contentTypeAlias);
    public abstract virtual int Count(string mediaTypeAlias);
    public abstract virtual int CountChildren(int parentId, string mediaTypeAlias);
    public abstract virtual int CountDescendants(int parentId, string mediaTypeAlias);
    public abstract virtual IEnumerable`1<IMedia> GetByIds(IEnumerable`1<int> ids);
    public abstract virtual IEnumerable`1<IMedia> GetByIds(IEnumerable`1<Guid> ids);
    public abstract virtual IMedia CreateMedia(string name, Guid parentId, string mediaTypeAlias, int userId);
    public abstract virtual IMedia CreateMedia(string name, int parentId, string mediaTypeAlias, int userId);
    public abstract virtual IMedia CreateMedia(string name, IMedia parent, string mediaTypeAlias, int userId);
    public abstract virtual IMedia GetById(int id);
    public abstract virtual IEnumerable`1<IMedia> GetPagedChildren(int id, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IMedia> GetPagedDescendants(int id, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IMedia> GetPagedOfType(int contentTypeId, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IMedia> GetPagedOfTypes(Int32[] contentTypeIds, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public abstract virtual IEnumerable`1<IMedia> GetRootMedia();
    public abstract virtual IEnumerable`1<IMedia> GetPagedMediaInRecycleBin(long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public abstract virtual Attempt`1<OperationResult> Move(IMedia media, int parentId, int userId);
    public abstract virtual Attempt`1<OperationResult> MoveToRecycleBin(IMedia media, int userId);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use EmptyRecycleBin with explicit indication of user ID instead")]
public abstract virtual OperationResult EmptyRecycleBin();
    public abstract virtual OperationResult EmptyRecycleBin(int userId);
    public abstract virtual bool RecycleBinSmells();
    public abstract virtual void DeleteMediaOfType(int mediaTypeId, int userId);
    public abstract virtual void DeleteMediaOfTypes(IEnumerable`1<int> mediaTypeIds, int userId);
    public abstract virtual Attempt`1<OperationResult> Delete(IMedia media, int userId);
    public abstract virtual Attempt`1<OperationResult> Save(IMedia media, int userId, bool raiseEvents);
    public abstract virtual Attempt`1<OperationResult> Save(IEnumerable`1<IMedia> medias, int userId, bool raiseEvents);
    public abstract virtual IMedia GetById(Guid key);
    public abstract virtual IEnumerable`1<IMedia> GetByLevel(int level);
    public abstract virtual IMedia GetVersion(int versionId);
    public abstract virtual IEnumerable`1<IMedia> GetVersions(int id);
    public abstract virtual bool HasChildren(int id);
    public abstract virtual void DeleteVersions(int id, DateTime versionDate, int userId);
    public abstract virtual void DeleteVersion(int id, int versionId, bool deletePriorVersions, int userId);
    public abstract virtual IMedia GetMediaByPath(string mediaPath);
    public abstract virtual IEnumerable`1<IMedia> GetAncestors(int id);
    public abstract virtual IEnumerable`1<IMedia> GetAncestors(IMedia media);
    public abstract virtual IMedia GetParent(int id);
    public abstract virtual IMedia GetParent(IMedia media);
    public abstract virtual bool Sort(IEnumerable`1<IMedia> items, int userId, bool raiseEvents);
    public abstract virtual IMedia CreateMediaWithIdentity(string name, IMedia parent, string mediaTypeAlias, int userId);
    public abstract virtual IMedia CreateMediaWithIdentity(string name, int parentId, string mediaTypeAlias, int userId);
    public abstract virtual Stream GetMediaFileContentStream(string filepath);
    public abstract virtual void SetMediaFileContent(string filepath, Stream content);
    public abstract virtual void DeleteMediaFile(string filepath);
    public abstract virtual long GetMediaFileSize(string filepath);
}
public interface Umbraco.Core.Services.IMediaTypeService {
}
public interface Umbraco.Core.Services.IMemberGroupService {
    public abstract virtual IEnumerable`1<IMemberGroup> GetAll();
    public abstract virtual IMemberGroup GetById(int id);
    public abstract virtual IMemberGroup GetById(Guid id);
    public abstract virtual IEnumerable`1<IMemberGroup> GetByIds(IEnumerable`1<int> ids);
    public abstract virtual IMemberGroup GetByName(string name);
    public abstract virtual void Save(IMemberGroup memberGroup, bool raiseEvents);
    public abstract virtual void Delete(IMemberGroup memberGroup);
}
public interface Umbraco.Core.Services.IMemberService {
    public abstract virtual IEnumerable`1<IMember> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, string memberTypeAlias, string filter);
    public abstract virtual IEnumerable`1<IMember> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, bool orderBySystemField, string memberTypeAlias, string filter);
    public abstract virtual IMember CreateMember(string username, string email, string name, string memberTypeAlias);
    public abstract virtual IMember CreateMember(string username, string email, string name, IMemberType memberType);
    public abstract virtual IMember CreateMemberWithIdentity(string username, string email, string name, string memberTypeAlias);
    public abstract virtual IMember CreateMemberWithIdentity(string username, string email, string name, IMemberType memberType);
    public abstract virtual void SavePassword(IMember member, string password);
    public abstract virtual int Count(string memberTypeAlias);
    public abstract virtual bool Exists(int id);
    public abstract virtual IMember GetByKey(Guid id);
    public abstract virtual IMember GetById(int id);
    public abstract virtual IEnumerable`1<IMember> GetMembersByMemberType(string memberTypeAlias);
    public abstract virtual IEnumerable`1<IMember> GetMembersByMemberType(int memberTypeId);
    public abstract virtual IEnumerable`1<IMember> GetMembersByGroup(string memberGroupName);
    public abstract virtual IEnumerable`1<IMember> GetAllMembers(Int32[] ids);
    public abstract virtual void DeleteMembersOfType(int memberTypeId);
    public abstract virtual IEnumerable`1<IMember> FindMembersByDisplayName(string displayNameToMatch, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public abstract virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, string value, StringPropertyMatchType matchType);
    public abstract virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, int value, ValuePropertyMatchType matchType);
    public abstract virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, bool value);
    public abstract virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, DateTime value, ValuePropertyMatchType matchType);
}
public interface Umbraco.Core.Services.IMembershipMemberService {
    public abstract virtual IMember CreateMemberWithIdentity(string username, string email, IMemberType memberType);
}
public interface Umbraco.Core.Services.IMembershipMemberService`1 {
    public abstract virtual int GetCount(MemberCountType countType);
    public abstract virtual bool Exists(string username);
    public abstract virtual T CreateWithIdentity(string username, string email, string passwordValue, string memberTypeAlias);
    public abstract virtual T CreateWithIdentity(string username, string email, string passwordValue, string memberTypeAlias, bool isApproved);
    public abstract virtual T GetByProviderKey(object id);
    public abstract virtual T GetByEmail(string email);
    public abstract virtual T GetByUsername(string username);
    public abstract virtual void Delete(T membershipUser);
    public abstract virtual void SetLastLogin(string username, DateTime date);
    public abstract virtual void Save(T entity, bool raiseEvents);
    public abstract virtual void Save(IEnumerable`1<T> entities, bool raiseEvents);
    public abstract virtual string GetDefaultMemberType();
    public abstract virtual IEnumerable`1<T> FindByEmail(string emailStringToMatch, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public abstract virtual IEnumerable`1<T> FindByUsername(string login, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public abstract virtual IEnumerable`1<T> GetAll(long pageIndex, int pageSize, Int64& totalRecords);
}
public interface Umbraco.Core.Services.IMembershipRoleService`1 {
    public abstract virtual void AddRole(string roleName);
    public abstract virtual IEnumerable`1<string> GetAllRoles();
    public abstract virtual IEnumerable`1<string> GetAllRoles(int memberId);
    public abstract virtual IEnumerable`1<string> GetAllRoles(string username);
    public abstract virtual IEnumerable`1<int> GetAllRolesIds();
    public abstract virtual IEnumerable`1<int> GetAllRolesIds(int memberId);
    public abstract virtual IEnumerable`1<int> GetAllRolesIds(string username);
    public abstract virtual IEnumerable`1<T> GetMembersInRole(string roleName);
    public abstract virtual IEnumerable`1<T> FindMembersInRole(string roleName, string usernameToMatch, StringPropertyMatchType matchType);
    public abstract virtual bool DeleteRole(string roleName, bool throwIfBeingUsed);
    public abstract virtual void AssignRole(string username, string roleName);
    public abstract virtual void AssignRoles(String[] usernames, String[] roleNames);
    public abstract virtual void DissociateRole(string username, string roleName);
    public abstract virtual void DissociateRoles(String[] usernames, String[] roleNames);
    public abstract virtual void AssignRole(int memberId, string roleName);
    public abstract virtual void AssignRoles(Int32[] memberIds, String[] roleNames);
    public abstract virtual void DissociateRole(int memberId, string roleName);
    public abstract virtual void DissociateRoles(Int32[] memberIds, String[] roleNames);
}
public interface Umbraco.Core.Services.IMembershipUserService {
    public abstract virtual IUser CreateUserWithIdentity(string username, string email);
}
public interface Umbraco.Core.Services.IMemberTypeService {
    public abstract virtual string GetDefault();
}
public class Umbraco.Core.Services.Implement.AuditService : ScopeRepositoryService {
    private Lazy`1<bool> _isAvailable;
    private IAuditRepository _auditRepository;
    private IAuditEntryRepository _auditEntryRepository;
    public AuditService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IAuditRepository auditRepository, IAuditEntryRepository auditEntryRepository);
    public sealed virtual void Add(AuditType type, int userId, int objectId, string entityType, string comment, string parameters);
    public sealed virtual IEnumerable`1<IAuditItem> GetLogs(int objectId);
    public sealed virtual IEnumerable`1<IAuditItem> GetUserLogs(int userId, AuditType type, Nullable`1<DateTime> sinceDate);
    public sealed virtual IEnumerable`1<IAuditItem> GetLogs(AuditType type, Nullable`1<DateTime> sinceDate);
    public sealed virtual void CleanLogs(int maximumAgeOfLogsInMinutes);
    public sealed virtual IEnumerable`1<IAuditItem> GetPagedItemsByEntity(int entityId, long pageIndex, int pageSize, Int64& totalRecords, Direction orderDirection, AuditType[] auditTypeFilter, IQuery`1<IAuditItem> customFilter);
    public sealed virtual IEnumerable`1<IAuditItem> GetPagedItemsByUser(int userId, long pageIndex, int pageSize, Int64& totalRecords, Direction orderDirection, AuditType[] auditTypeFilter, IQuery`1<IAuditItem> customFilter);
    public sealed virtual IAuditEntry Write(int performingUserId, string perfomingDetails, string performingIp, DateTime eventDateUtc, int affectedUserId, string affectedDetails, string eventType, string eventDetails);
    internal IEnumerable`1<IAuditEntry> GetAll();
    internal IEnumerable`1<IAuditEntry> GetPage(long pageIndex, int pageCount, Int64& records);
    private bool DetermineIsAvailable();
}
internal class Umbraco.Core.Services.Implement.ConsentService : ScopeRepositoryService {
    private IConsentRepository _consentRepository;
    public ConsentService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IConsentRepository consentRepository);
    public sealed virtual IConsent RegisterConsent(string source, string context, string action, ConsentState state, string comment);
    public sealed virtual IEnumerable`1<IConsent> LookupConsent(string source, string context, string action, bool sourceStartsWith, bool contextStartsWith, bool actionStartsWith, bool includeHistory);
}
public class Umbraco.Core.Services.Implement.ContentService : RepositoryService {
    private IDocumentRepository _documentRepository;
    private IEntityRepository _entityRepository;
    private IAuditRepository _auditRepository;
    private IContentTypeRepository _contentTypeRepository;
    private IDocumentBlueprintRepository _documentBlueprintRepository;
    private ILanguageRepository _languageRepository;
    private IQuery`1<IContent> _queryNotTrashed;
    private Lazy`1<PropertyValidationService> _propertyValidationService;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, DeleteRevisionsEventArgs> DeletingVersions;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, DeleteRevisionsEventArgs> DeletedVersions;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> Sorting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> Sorted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, ContentSavingEventArgs> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, ContentSavedEventArgs> Saved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, CopyEventArgs`1<IContent>> Copying;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, CopyEventArgs`1<IContent>> Copied;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> Trashing;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> Trashed;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> Moving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> Moved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, RollbackEventArgs`1<IContent>> RollingBack;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, RollbackEventArgs`1<IContent>> RolledBack;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, SendToPublishEventArgs`1<IContent>> SendingToPublish;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, SendToPublishEventArgs`1<IContent>> SentToPublish;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, RecycleBinEventArgs> EmptyingRecycleBin;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, RecycleBinEventArgs> EmptiedRecycleBin;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, ContentPublishingEventArgs> Publishing;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, ContentPublishedEventArgs> Published;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, PublishEventArgs`1<IContent>> Unpublishing;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, PublishEventArgs`1<IContent>> Unpublished;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, EventArgs<IContent>> TreeChanged;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> SavedBlueprint;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> DeletedBlueprint;
    private static String[] ArrayOfOneNullString;
    private IQuery`1<IContent> QueryNotTrashed { get; }
    public ContentService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IDocumentRepository documentRepository, IEntityRepository entityRepository, IAuditRepository auditRepository, IContentTypeRepository contentTypeRepository, IDocumentBlueprintRepository documentBlueprintRepository, ILanguageRepository languageRepository);
    private static ContentService();
    private IQuery`1<IContent> get_QueryNotTrashed();
    public sealed virtual int CountPublished(string contentTypeAlias);
    public sealed virtual int Count(string contentTypeAlias);
    public sealed virtual int CountChildren(int parentId, string contentTypeAlias);
    public sealed virtual int CountDescendants(int parentId, string contentTypeAlias);
    public sealed virtual void SetPermissions(EntityPermissionSet permissionSet);
    public sealed virtual void SetPermission(IContent entity, char permission, IEnumerable`1<int> groupIds);
    public sealed virtual EntityPermissionCollection GetPermissions(IContent content);
    public sealed virtual IContent Create(string name, Guid parentId, string contentTypeAlias, int userId);
    public sealed virtual IContent Create(string name, int parentId, string contentTypeAlias, int userId);
    public sealed virtual IContent Create(string name, int parentId, IContentType contentType, int userId);
    public sealed virtual IContent Create(string name, IContent parent, string contentTypeAlias, int userId);
    public sealed virtual IContent CreateAndSave(string name, int parentId, string contentTypeAlias, int userId);
    public sealed virtual IContent CreateAndSave(string name, IContent parent, string contentTypeAlias, int userId);
    private void CreateContent(IScope scope, IContent content, int userId, bool withIdentity);
    public sealed virtual IContent GetById(int id);
    public sealed virtual IEnumerable`1<IContent> GetByIds(IEnumerable`1<int> ids);
    public sealed virtual IContent GetById(Guid key);
    public sealed virtual IEnumerable`1<IContent> GetByIds(IEnumerable`1<Guid> ids);
    public sealed virtual IEnumerable`1<IContent> GetPagedOfType(int contentTypeId, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IContent> GetPagedOfTypes(Int32[] contentTypeIds, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IContent> GetByLevel(int level);
    public sealed virtual IContent GetVersion(int versionId);
    public sealed virtual IEnumerable`1<IContent> GetVersions(int id);
    public sealed virtual IEnumerable`1<IContent> GetVersionsSlim(int id, int skip, int take);
    public sealed virtual IEnumerable`1<int> GetVersionIds(int id, int maxRows);
    public sealed virtual IEnumerable`1<IContent> GetAncestors(int id);
    public sealed virtual IEnumerable`1<IContent> GetAncestors(IContent content);
    public IEnumerable`1<IContent> GetPublishedChildren(int id);
    public sealed virtual IEnumerable`1<IContent> GetPagedChildren(int id, long pageIndex, int pageSize, Int64& totalChildren, IQuery`1<IContent> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IContent> GetPagedDescendants(int id, long pageIndex, int pageSize, Int64& totalChildren, IQuery`1<IContent> filter, Ordering ordering);
    private IQuery`1<IContent> GetPagedDescendantQuery(string contentPath);
    private IEnumerable`1<IContent> GetPagedLocked(IQuery`1<IContent> query, long pageIndex, int pageSize, Int64& totalChildren, IQuery`1<IContent> filter, Ordering ordering);
    public sealed virtual IContent GetParent(int id);
    public sealed virtual IContent GetParent(IContent content);
    public sealed virtual IEnumerable`1<IContent> GetRootContent();
    internal IEnumerable`1<IContent> GetAllPublished();
    public sealed virtual IEnumerable`1<IContent> GetContentForExpiration(DateTime date);
    public sealed virtual IEnumerable`1<IContent> GetContentForRelease(DateTime date);
    public sealed virtual IEnumerable`1<IContent> GetPagedContentInRecycleBin(long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IContent> filter, Ordering ordering);
    public sealed virtual bool HasChildren(int id);
    public sealed virtual bool IsPathPublishable(IContent content);
    public sealed virtual bool IsPathPublished(IContent content);
    public sealed virtual OperationResult Save(IContent content, int userId, bool raiseEvents);
    public sealed virtual OperationResult Save(IEnumerable`1<IContent> contents, int userId, bool raiseEvents);
    public sealed virtual PublishResult SaveAndPublish(IContent content, string culture, int userId, bool raiseEvents);
    public sealed virtual PublishResult SaveAndPublish(IContent content, String[] cultures, int userId, bool raiseEvents);
    public sealed virtual PublishResult Unpublish(IContent content, string culture, int userId);
    internal PublishResult CommitDocumentChanges(IContent content, int userId, bool raiseEvents);
    private PublishResult CommitDocumentChangesInternal(IScope scope, IContent content, ContentSavingEventArgs saveEventArgs, IReadOnlyCollection`1<ILanguage> allLangs, int userId, bool raiseEvents, bool branchOne, bool branchRoot);
    public sealed virtual IEnumerable`1<PublishResult> PerformScheduledPublish(DateTime date);
    private void PerformScheduledPublishingExpiration(DateTime date, List`1<PublishResult> results, EventMessages evtMsgs, Lazy`1<List`1<ILanguage>> allLangs);
    private void PerformScheduledPublishingRelease(DateTime date, List`1<PublishResult> results, EventMessages evtMsgs, Lazy`1<List`1<ILanguage>> allLangs);
    private bool SaveAndPublishBranch_PublishCultures(IContent content, HashSet`1<string> culturesToPublish, IReadOnlyCollection`1<ILanguage> allLangs);
    private HashSet`1<string> SaveAndPublishBranch_ShouldPublish(HashSet`1& cultures, string c, bool published, bool edited, bool isRoot, bool force);
    public sealed virtual IEnumerable`1<PublishResult> SaveAndPublishBranch(IContent content, bool force, string culture, int userId);
    public sealed virtual IEnumerable`1<PublishResult> SaveAndPublishBranch(IContent content, bool force, String[] cultures, int userId);
    internal IEnumerable`1<PublishResult> SaveAndPublishBranch(IContent document, bool force, Func`2<IContent, HashSet`1<string>> shouldPublish, Func`4<IContent, HashSet`1<string>, IReadOnlyCollection`1<ILanguage>, bool> publishCultures, int userId);
    private PublishResult SaveAndPublishBranchItem(IScope scope, IContent document, Func`2<IContent, HashSet`1<string>> shouldPublish, Func`4<IContent, HashSet`1<string>, IReadOnlyCollection`1<ILanguage>, bool> publishCultures, bool isRoot, ICollection`1<IContent> publishedDocuments, EventMessages evtMsgs, int userId, IReadOnlyCollection`1<ILanguage> allLangs);
    public sealed virtual OperationResult Delete(IContent content, int userId);
    private void DeleteLocked(IScope scope, IContent content);
    public sealed virtual void DeleteVersions(int id, DateTime versionDate, int userId);
    public sealed virtual void DeleteVersion(int id, int versionId, bool deletePriorVersions, int userId);
    public sealed virtual OperationResult MoveToRecycleBin(IContent content, int userId);
    public sealed virtual void Move(IContent content, int parentId, int userId);
    private void PerformMoveLocked(IContent content, int parentId, IContent parent, int userId, ICollection`1<ValueTuple`2<IContent, string>> moves, Nullable`1<bool> trash);
    private void PerformMoveContentLocked(IContent content, int userId, Nullable`1<bool> trash);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use EmptyRecycleBin with explicit indication of user ID instead")]
public sealed virtual OperationResult EmptyRecycleBin();
    public sealed virtual OperationResult EmptyRecycleBin(int userId);
    public sealed virtual bool RecycleBinSmells();
    public sealed virtual IContent Copy(IContent content, int parentId, bool relateToOriginal, int userId);
    public sealed virtual IContent Copy(IContent content, int parentId, bool relateToOriginal, bool recursive, int userId);
    public sealed virtual bool SendToPublication(IContent content, int userId);
    public sealed virtual OperationResult Sort(IEnumerable`1<IContent> items, int userId, bool raiseEvents);
    public sealed virtual OperationResult Sort(IEnumerable`1<int> ids, int userId, bool raiseEvents);
    private OperationResult Sort(IScope scope, IContent[] itemsA, int userId, EventMessages evtMsgs, bool raiseEvents);
    public sealed virtual ContentDataIntegrityReport CheckDataIntegrity(ContentDataIntegrityReportOptions options);
    internal IEnumerable`1<IContent> GetPublishedDescendants(IContent content);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.Implement.ContentService/<GetPublishedDescendantsLocked>d__88")]
internal IEnumerable`1<IContent> GetPublishedDescendantsLocked(IContent content);
    private void Audit(AuditType type, int userId, int objectId, string message, string parameters);
    private bool IsDefaultCulture(IReadOnlyCollection`1<ILanguage> langs, string culture);
    private bool IsMandatoryCulture(IReadOnlyCollection`1<ILanguage> langs, string culture);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingVersions(TypedEventHandler`2<IContentService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingVersions(TypedEventHandler`2<IContentService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedVersions(TypedEventHandler`2<IContentService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedVersions(TypedEventHandler`2<IContentService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Sorting(TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Sorting(TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Sorted(TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Sorted(TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IContentService, ContentSavingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IContentService, ContentSavingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IContentService, ContentSavedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IContentService, ContentSavedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Copying(TypedEventHandler`2<IContentService, CopyEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Copying(TypedEventHandler`2<IContentService, CopyEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Copied(TypedEventHandler`2<IContentService, CopyEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Copied(TypedEventHandler`2<IContentService, CopyEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Trashing(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Trashing(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Trashed(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Trashed(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Moving(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moving(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Moved(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moved(TypedEventHandler`2<IContentService, MoveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_RollingBack(TypedEventHandler`2<IContentService, RollbackEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_RollingBack(TypedEventHandler`2<IContentService, RollbackEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_RolledBack(TypedEventHandler`2<IContentService, RollbackEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_RolledBack(TypedEventHandler`2<IContentService, RollbackEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_SendingToPublish(TypedEventHandler`2<IContentService, SendToPublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_SendingToPublish(TypedEventHandler`2<IContentService, SendToPublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_SentToPublish(TypedEventHandler`2<IContentService, SendToPublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_SentToPublish(TypedEventHandler`2<IContentService, SendToPublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_EmptyingRecycleBin(TypedEventHandler`2<IContentService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_EmptyingRecycleBin(TypedEventHandler`2<IContentService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_EmptiedRecycleBin(TypedEventHandler`2<IContentService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_EmptiedRecycleBin(TypedEventHandler`2<IContentService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Publishing(TypedEventHandler`2<IContentService, ContentPublishingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Publishing(TypedEventHandler`2<IContentService, ContentPublishingEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Published(TypedEventHandler`2<IContentService, ContentPublishedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_Published(TypedEventHandler`2<IContentService, ContentPublishedEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Unpublishing(TypedEventHandler`2<IContentService, PublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Unpublishing(TypedEventHandler`2<IContentService, PublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_Unpublished(TypedEventHandler`2<IContentService, PublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_Unpublished(TypedEventHandler`2<IContentService, PublishEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_TreeChanged(TypedEventHandler`2<IContentService, EventArgs<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_TreeChanged(TypedEventHandler`2<IContentService, EventArgs<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedBlueprint(TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedBlueprint(TypedEventHandler`2<IContentService, SaveEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedBlueprint(TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedBlueprint(TypedEventHandler`2<IContentService, DeleteEventArgs`1<IContent>> value);
    private PublishResult StrategyCanPublish(IScope scope, IContent content, bool checkPath, IReadOnlyList`1<string> culturesPublishing, IReadOnlyCollection`1<string> culturesUnpublishing, EventMessages evtMsgs, ContentSavingEventArgs savingEventArgs, IReadOnlyCollection`1<ILanguage> allLangs);
    private PublishResult StrategyPublish(IContent content, IReadOnlyCollection`1<string> culturesPublishing, IReadOnlyCollection`1<string> culturesUnpublishing, EventMessages evtMsgs);
    private PublishResult StrategyCanUnpublish(IScope scope, IContent content, EventMessages evtMsgs);
    private PublishResult StrategyUnpublish(IContent content, EventMessages evtMsgs);
    public sealed virtual void DeleteOfTypes(IEnumerable`1<int> contentTypeIds, int userId);
    public sealed virtual void DeleteOfType(int contentTypeId, int userId);
    private IContentType GetContentType(IScope scope, string contentTypeAlias);
    private IContentType GetContentType(string contentTypeAlias);
    public sealed virtual IContent GetBlueprintById(int id);
    public sealed virtual IContent GetBlueprintById(Guid id);
    public sealed virtual void SaveBlueprint(IContent content, int userId);
    public sealed virtual void DeleteBlueprint(IContent content, int userId);
    public sealed virtual IContent CreateContentFromBlueprint(IContent blueprint, string name, int userId);
    public sealed virtual IEnumerable`1<IContent> GetBlueprintsForContentTypes(Int32[] contentTypeId);
    public sealed virtual void DeleteBlueprintsOfTypes(IEnumerable`1<int> contentTypeIds, int userId);
    public sealed virtual void DeleteBlueprintsOfType(int contentTypeId, int userId);
    public sealed virtual OperationResult Rollback(int id, int versionId, string culture, int userId);
    public sealed virtual IReadOnlyCollection`1<ContentVersionMeta> PerformContentVersionCleanup(DateTime asAtDate);
    public sealed virtual IEnumerable`1<ContentVersionMeta> GetPagedContentVersions(int contentId, long pageIndex, int pageSize, Int64& totalRecords, string culture);
    public sealed virtual void SetPreventCleanup(int versionId, bool preventCleanup, int userId);
    private IReadOnlyCollection`1<ContentVersionMeta> CleanupDocumentVersions(DateTime asAtDate);
    [CompilerGeneratedAttribute]
private List`1<ILanguage> <PerformScheduledPublish>b__60_0();
    [CompilerGeneratedAttribute]
private void <DeleteLocked>g__DoDelete|70_0(IContent c, <>c__DisplayClass70_0& );
}
public class Umbraco.Core.Services.Implement.ContentTypeBaseServiceProvider : object {
    private IContentTypeService _contentTypeService;
    private IMediaTypeService _mediaTypeService;
    private IMemberTypeService _memberTypeService;
    public ContentTypeBaseServiceProvider(IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IMemberTypeService memberTypeService);
    public sealed virtual IContentTypeBaseService For(IContentBase contentBase);
    public sealed virtual IContentTypeComposition GetContentTypeOf(IContentBase contentBase);
}
public class Umbraco.Core.Services.Implement.ContentTypeService : ContentTypeServiceBase`3<IContentTypeRepository, IContentType, IContentTypeService> {
    [CompilerGeneratedAttribute]
private Int32[] <ReadLockIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <WriteLockIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IContentService <ContentService>k__BackingField;
    protected IContentTypeService This { get; }
    protected Int32[] ReadLockIds { get; }
    protected Int32[] WriteLockIds { get; }
    private IContentService ContentService { get; }
    protected Guid ContainedObjectType { get; }
    public ContentTypeService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IContentService contentService, IContentTypeRepository repository, IAuditRepository auditRepository, IDocumentTypeContainerRepository entityContainerRepository, IEntityRepository entityRepository);
    protected virtual IContentTypeService get_This();
    [CompilerGeneratedAttribute]
protected virtual Int32[] get_ReadLockIds();
    [CompilerGeneratedAttribute]
protected virtual Int32[] get_WriteLockIds();
    [CompilerGeneratedAttribute]
private IContentService get_ContentService();
    protected virtual Guid get_ContainedObjectType();
    protected virtual void DeleteItemsOfTypes(IEnumerable`1<int> typeIds);
    public sealed virtual IEnumerable`1<string> GetAllPropertyTypeAliases();
    public sealed virtual IEnumerable`1<string> GetAllContentTypeAliases(Guid[] guids);
    public sealed virtual IEnumerable`1<int> GetAllContentTypeIds(String[] aliases);
}
public abstract class Umbraco.Core.Services.Implement.ContentTypeServiceBase : ScopeRepositoryService {
    protected ContentTypeServiceBase(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory);
}
public abstract class Umbraco.Core.Services.Implement.ContentTypeServiceBase`2 : ContentTypeServiceBase {
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, EventArgs<TItem>> Changed;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, EventArgs<TItem>> ScopedRefreshedEntity;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, SaveEventArgs`1<TItem>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, SaveEventArgs`1<TItem>> Saved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, DeleteEventArgs`1<TItem>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, DeleteEventArgs`1<TItem>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, MoveEventArgs`1<TItem>> Moving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, MoveEventArgs`1<TItem>> Moved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, SaveEventArgs`1<EntityContainer>> SavingContainer;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, SaveEventArgs`1<EntityContainer>> SavedContainer;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, DeleteEventArgs`1<EntityContainer>> DeletingContainer;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<TService, DeleteEventArgs`1<EntityContainer>> DeletedContainer;
    protected TService This { get; }
    protected ContentTypeServiceBase`2(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory);
    protected abstract virtual TService get_This();
    [CompilerGeneratedAttribute]
internal static void add_Changed(TypedEventHandler`2<TService, EventArgs<TItem>> value);
    [CompilerGeneratedAttribute]
internal static void remove_Changed(TypedEventHandler`2<TService, EventArgs<TItem>> value);
    [CompilerGeneratedAttribute]
public static void add_ScopedRefreshedEntity(TypedEventHandler`2<TService, EventArgs<TItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_ScopedRefreshedEntity(TypedEventHandler`2<TService, EventArgs<TItem>> value);
    internal static void ClearScopeEvents();
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<TService, SaveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<TService, SaveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<TService, SaveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<TService, SaveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<TService, DeleteEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<TService, DeleteEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<TService, DeleteEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<TService, DeleteEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void add_Moving(TypedEventHandler`2<TService, MoveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moving(TypedEventHandler`2<TService, MoveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void add_Moved(TypedEventHandler`2<TService, MoveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moved(TypedEventHandler`2<TService, MoveEventArgs`1<TItem>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingContainer(TypedEventHandler`2<TService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingContainer(TypedEventHandler`2<TService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedContainer(TypedEventHandler`2<TService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedContainer(TypedEventHandler`2<TService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingContainer(TypedEventHandler`2<TService, DeleteEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingContainer(TypedEventHandler`2<TService, DeleteEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedContainer(TypedEventHandler`2<TService, DeleteEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedContainer(TypedEventHandler`2<TService, DeleteEventArgs`1<EntityContainer>> value);
    protected void OnChanged(IScope scope, EventArgs<TItem> args);
    protected void OnUowRefreshedEntity(EventArgs<TItem> args);
    protected bool OnSavingCancelled(IScope scope, SaveEventArgs`1<TItem> args);
    protected void OnSaved(IScope scope, SaveEventArgs`1<TItem> args);
    protected bool OnDeletingCancelled(IScope scope, DeleteEventArgs`1<TItem> args);
    protected void OnDeleted(IScope scope, DeleteEventArgs`1<TItem> args);
    protected bool OnMovingCancelled(IScope scope, MoveEventArgs`1<TItem> args);
    protected void OnMoved(IScope scope, MoveEventArgs`1<TItem> args);
    protected bool OnSavingContainerCancelled(IScope scope, SaveEventArgs`1<EntityContainer> args);
    protected void OnSavedContainer(IScope scope, SaveEventArgs`1<EntityContainer> args);
    protected bool OnRenamingContainerCancelled(IScope scope, SaveEventArgs`1<EntityContainer> args);
    protected void OnRenamedContainer(IScope scope, SaveEventArgs`1<EntityContainer> args);
    protected bool OnDeletingContainerCancelled(IScope scope, DeleteEventArgs`1<EntityContainer> args);
    protected void OnDeletedContainer(IScope scope, DeleteEventArgs`1<EntityContainer> args);
}
public abstract class Umbraco.Core.Services.Implement.ContentTypeServiceBase`3 : ContentTypeServiceBase`2<TItem, TService> {
    private IAuditRepository _auditRepository;
    private IEntityContainerRepository _containerRepository;
    private IEntityRepository _entityRepository;
    [CompilerGeneratedAttribute]
private TRepository <Repository>k__BackingField;
    protected TRepository Repository { get; }
    protected Int32[] WriteLockIds { get; }
    protected Int32[] ReadLockIds { get; }
    protected Guid ContainedObjectType { get; }
    protected Guid ContainerObjectType { get; }
    protected ContentTypeServiceBase`3(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, TRepository repository, IAuditRepository auditRepository, IEntityContainerRepository containerRepository, IEntityRepository entityRepository);
    [CompilerGeneratedAttribute]
protected TRepository get_Repository();
    protected abstract virtual Int32[] get_WriteLockIds();
    protected abstract virtual Int32[] get_ReadLockIds();
    public sealed virtual Attempt`1<String[]> ValidateComposition(TItem compo);
    protected void ValidateLocked(TItem compositionContentType);
    internal IEnumerable`1<ContentTypeChange`1<TItem>> ComposeContentTypeChanges(TItem[] contentTypes);
    private static void AddChange(ICollection`1<ContentTypeChange`1<TItem>> changes, TItem contentType, ContentTypeChangeTypes changeTypes);
    private sealed virtual override IContentTypeComposition Umbraco.Core.Services.IContentTypeBaseService.Get(int id);
    public sealed virtual TItem Get(int id);
    public sealed virtual TItem Get(string alias);
    public sealed virtual TItem Get(Guid id);
    public sealed virtual IEnumerable`1<TItem> GetAll(Int32[] ids);
    public sealed virtual IEnumerable`1<TItem> GetAll(IEnumerable`1<Guid> ids);
    public sealed virtual IEnumerable`1<TItem> GetChildren(int id);
    public sealed virtual IEnumerable`1<TItem> GetChildren(Guid id);
    public sealed virtual bool HasChildren(int id);
    public sealed virtual bool HasChildren(Guid id);
    public sealed virtual bool HasContainerInPath(string contentPath);
    public sealed virtual bool HasContainerInPath(Int32[] ids);
    public sealed virtual IEnumerable`1<TItem> GetDescendants(int id, bool andSelf);
    public IEnumerable`1<TItem> GetComposedOf(int id, IEnumerable`1<TItem> all);
    public sealed virtual IEnumerable`1<TItem> GetComposedOf(int id);
    public sealed virtual int Count();
    public sealed virtual bool HasContentNodes(int id);
    public sealed virtual void Save(TItem item, int userId);
    public sealed virtual void Save(IEnumerable`1<TItem> items, int userId);
    public sealed virtual void Delete(TItem item, int userId);
    public sealed virtual void Delete(IEnumerable`1<TItem> items, int userId);
    protected abstract virtual void DeleteItemsOfTypes(IEnumerable`1<int> typeIds);
    public sealed virtual TItem Copy(TItem original, string alias, string name, int parentId);
    public sealed virtual TItem Copy(TItem original, string alias, string name, TItem parent);
    public sealed virtual Attempt`1<OperationResult`2<MoveOperationStatusType, TItem>> Copy(TItem copying, int containerId);
    public sealed virtual Attempt`1<OperationResult`1<MoveOperationStatusType>> Move(TItem moving, int containerId);
    protected abstract virtual Guid get_ContainedObjectType();
    protected Guid get_ContainerObjectType();
    public sealed virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> CreateContainer(int parentId, string name, int userId);
    public sealed virtual Attempt`1<OperationResult> SaveContainer(EntityContainer container, int userId);
    public sealed virtual EntityContainer GetContainer(int containerId);
    public sealed virtual EntityContainer GetContainer(Guid containerId);
    public sealed virtual IEnumerable`1<EntityContainer> GetContainers(Int32[] containerIds);
    public sealed virtual IEnumerable`1<EntityContainer> GetContainers(TItem item);
    public sealed virtual IEnumerable`1<EntityContainer> GetContainers(string name, int level);
    public sealed virtual Attempt`1<OperationResult> DeleteContainer(int containerId, int userId);
    public sealed virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> RenameContainer(int id, string name, int userId);
    private void Audit(AuditType type, int userId, int objectId);
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Delete>b__35_0(TItem xx);
    [CompilerGeneratedAttribute]
private IEnumerable`1<TItem> <Delete>b__35_2(TItem x);
}
public class Umbraco.Core.Services.Implement.DataTypeService : ScopeRepositoryService {
    private IDataTypeRepository _dataTypeRepository;
    private IDataTypeContainerRepository _dataTypeContainerRepository;
    private IContentTypeRepository _contentTypeRepository;
    private IAuditRepository _auditRepository;
    private IEntityRepository _entityRepository;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<EntityContainer>> SavingContainer;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<EntityContainer>> SavedContainer;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<EntityContainer>> DeletingContainer;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<EntityContainer>> DeletedContainer;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<IDataType>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<IDataType>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<IDataType>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<IDataType>> Saved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, MoveEventArgs`1<IDataType>> Moving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDataTypeService, MoveEventArgs`1<IDataType>> Moved;
    public DataTypeService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IDataTypeRepository dataTypeRepository, IDataTypeContainerRepository dataTypeContainerRepository, IAuditRepository auditRepository, IEntityRepository entityRepository, IContentTypeRepository contentTypeRepository);
    public sealed virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> CreateContainer(int parentId, string name, int userId);
    public sealed virtual EntityContainer GetContainer(int containerId);
    public sealed virtual EntityContainer GetContainer(Guid containerId);
    public sealed virtual IEnumerable`1<EntityContainer> GetContainers(string name, int level);
    public sealed virtual IEnumerable`1<EntityContainer> GetContainers(IDataType dataType);
    public sealed virtual IEnumerable`1<EntityContainer> GetContainers(Int32[] containerIds);
    public sealed virtual Attempt`1<OperationResult> SaveContainer(EntityContainer container, int userId);
    public sealed virtual Attempt`1<OperationResult> DeleteContainer(int containerId, int userId);
    public sealed virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> RenameContainer(int id, string name, int userId);
    public sealed virtual IDataType GetDataType(string name);
    public sealed virtual IDataType GetDataType(int id);
    public sealed virtual IDataType GetDataType(Guid id);
    public sealed virtual IEnumerable`1<IDataType> GetByEditorAlias(string propertyEditorAlias);
    public sealed virtual IEnumerable`1<IDataType> GetAll(Int32[] ids);
    public sealed virtual Attempt`1<OperationResult`1<MoveOperationStatusType>> Move(IDataType toMove, int parentId);
    public sealed virtual void Save(IDataType dataType, int userId);
    public sealed virtual void Save(IEnumerable`1<IDataType> dataTypeDefinitions, int userId);
    public sealed virtual void Save(IEnumerable`1<IDataType> dataTypeDefinitions, int userId, bool raiseEvents);
    public sealed virtual void Delete(IDataType dataType, int userId);
    public sealed virtual IReadOnlyDictionary`2<Udi, IEnumerable`1<string>> GetReferences(int id);
    private void Audit(AuditType type, int userId, int objectId);
    [CompilerGeneratedAttribute]
public static void add_SavingContainer(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingContainer(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedContainer(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedContainer(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingContainer(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingContainer(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedContainer(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedContainer(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<EntityContainer>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IDataTypeService, DeleteEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IDataTypeService, SaveEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void add_Moving(TypedEventHandler`2<IDataTypeService, MoveEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moving(TypedEventHandler`2<IDataTypeService, MoveEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void add_Moved(TypedEventHandler`2<IDataTypeService, MoveEventArgs`1<IDataType>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moved(TypedEventHandler`2<IDataTypeService, MoveEventArgs`1<IDataType>> value);
}
public class Umbraco.Core.Services.Implement.DefaultContentVersionCleanupPolicy : object {
    private IContentSection _contentSection;
    private IScopeProvider _scopeProvider;
    private IDocumentVersionRepository _documentVersionRepository;
    public DefaultContentVersionCleanupPolicy(IContentSection contentSection, IScopeProvider scopeProvider, IDocumentVersionRepository documentVersionRepository);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.Implement.DefaultContentVersionCleanupPolicy/<Apply>d__4")]
public sealed virtual IEnumerable`1<ContentVersionMeta> Apply(DateTime asAtDate, IEnumerable`1<ContentVersionMeta> items);
    private ContentVersionCleanupPolicySettings GetOverridePolicy(ContentVersionMeta version, IDictionary`2<int, ContentVersionCleanupPolicySettings> overrides);
}
public class Umbraco.Core.Services.Implement.DomainService : ScopeRepositoryService {
    private IDomainRepository _domainRepository;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDomainService, DeleteEventArgs`1<IDomain>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDomainService, DeleteEventArgs`1<IDomain>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDomainService, SaveEventArgs`1<IDomain>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IDomainService, SaveEventArgs`1<IDomain>> Saved;
    public DomainService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IDomainRepository domainRepository);
    public sealed virtual bool Exists(string domainName);
    public sealed virtual Attempt`1<OperationResult> Delete(IDomain domain);
    public sealed virtual IDomain GetByName(string name);
    public sealed virtual IDomain GetById(int id);
    public sealed virtual IEnumerable`1<IDomain> GetAll(bool includeWildcards);
    public sealed virtual IEnumerable`1<IDomain> GetAssignedDomains(int contentId, bool includeWildcards);
    public sealed virtual Attempt`1<OperationResult> Save(IDomain domainEntity);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IDomainService, DeleteEventArgs`1<IDomain>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IDomainService, DeleteEventArgs`1<IDomain>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IDomainService, DeleteEventArgs`1<IDomain>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IDomainService, DeleteEventArgs`1<IDomain>> value);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IDomainService, SaveEventArgs`1<IDomain>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IDomainService, SaveEventArgs`1<IDomain>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IDomainService, SaveEventArgs`1<IDomain>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IDomainService, SaveEventArgs`1<IDomain>> value);
}
public class Umbraco.Core.Services.Implement.EntityService : ScopeRepositoryService {
    private IEntityRepository _entityRepository;
    private Dictionary`2<string, UmbracoObjectTypes> _objectTypes;
    private IQuery`1<IUmbracoEntity> _queryRootEntity;
    private IdkMap _idkMap;
    private IQuery`1<IUmbracoEntity> QueryRootEntity { get; }
    public EntityService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IdkMap idkMap, IEntityRepository entityRepository);
    private IQuery`1<IUmbracoEntity> get_QueryRootEntity();
    private UmbracoObjectTypes GetObjectType(Type type);
    public sealed virtual IEntitySlim Get(int id);
    public sealed virtual IEntitySlim Get(Guid key);
    public virtual IEntitySlim Get(int id, UmbracoObjectTypes objectType);
    public sealed virtual IEntitySlim Get(Guid key, UmbracoObjectTypes objectType);
    public virtual IEntitySlim Get(int id);
    public virtual IEntitySlim Get(Guid key);
    public sealed virtual bool Exists(int id);
    public sealed virtual bool Exists(Guid key);
    public virtual IEnumerable`1<IEntitySlim> GetAll();
    public virtual IEnumerable`1<IEntitySlim> GetAll(Int32[] ids);
    public virtual IEnumerable`1<IEntitySlim> GetAll(UmbracoObjectTypes objectType);
    public virtual IEnumerable`1<IEntitySlim> GetAll(UmbracoObjectTypes objectType, Int32[] ids);
    public virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType);
    public virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Int32[] ids);
    public virtual IEnumerable`1<IEntitySlim> GetAll(Guid[] keys);
    public sealed virtual IEnumerable`1<IEntitySlim> GetAll(UmbracoObjectTypes objectType, Guid[] keys);
    public virtual IEnumerable`1<IEntitySlim> GetAll(Guid objectType, Guid[] keys);
    public virtual IEnumerable`1<IEntitySlim> GetRootEntities(UmbracoObjectTypes objectType);
    public virtual IEntitySlim GetParent(int id);
    public virtual IEntitySlim GetParent(int id, UmbracoObjectTypes objectType);
    public virtual IEnumerable`1<IEntitySlim> GetChildren(int parentId);
    public virtual IEnumerable`1<IEntitySlim> GetChildren(int parentId, UmbracoObjectTypes objectType);
    public virtual IEnumerable`1<IEntitySlim> GetDescendants(int id);
    public virtual IEnumerable`1<IEntitySlim> GetDescendants(int id, UmbracoObjectTypes objectType);
    public sealed virtual IEnumerable`1<IEntitySlim> GetPagedChildren(int id, UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IEntitySlim> GetPagedDescendants(int id, UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IEntitySlim> GetPagedDescendants(IEnumerable`1<int> ids, UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IEntitySlim> GetPagedDescendants(UmbracoObjectTypes objectType, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IUmbracoEntity> filter, Ordering ordering, bool includeTrashed);
    public virtual UmbracoObjectTypes GetObjectType(int id);
    public virtual UmbracoObjectTypes GetObjectType(Guid key);
    public virtual UmbracoObjectTypes GetObjectType(IUmbracoEntity entity);
    public virtual Type GetEntityType(int id);
    public sealed virtual Attempt`1<int> GetId(Guid key, UmbracoObjectTypes objectType);
    public sealed virtual Attempt`1<int> GetId(Udi udi);
    public sealed virtual Attempt`1<Guid> GetKey(int id, UmbracoObjectTypes umbracoObjectType);
    public virtual IEnumerable`1<TreeEntityPath> GetAllPaths(UmbracoObjectTypes objectType, Int32[] ids);
    public virtual IEnumerable`1<TreeEntityPath> GetAllPaths(UmbracoObjectTypes objectType, Guid[] keys);
    public sealed virtual int ReserveId(Guid key);
}
internal class Umbraco.Core.Services.Implement.EntityXmlSerializer : object {
    private IContentTypeService _contentTypeService;
    private IMediaService _mediaService;
    private IContentService _contentService;
    private IDataTypeService _dataTypeService;
    private IUserService _userService;
    private ILocalizationService _localizationService;
    private UrlSegmentProviderCollection _urlSegmentProviders;
    public EntityXmlSerializer(IContentService contentService, IMediaService mediaService, IDataTypeService dataTypeService, IUserService userService, ILocalizationService localizationService, IContentTypeService contentTypeService, UrlSegmentProviderCollection urlSegmentProviders);
    public sealed virtual XElement Serialize(IContent content, bool published, bool withDescendants);
    public sealed virtual XElement Serialize(IMedia media, bool withDescendants);
    public sealed virtual XElement Serialize(IMember member);
    public sealed virtual XElement Serialize(IEnumerable`1<IDataType> dataTypeDefinitions);
    public sealed virtual XElement Serialize(IDataType dataType);
    public sealed virtual XElement Serialize(IEnumerable`1<IDictionaryItem> dictionaryItem, bool includeChildren);
    public sealed virtual XElement Serialize(IDictionaryItem dictionaryItem, bool includeChildren);
    private XElement Serialize(IDictionaryItem dictionaryItem);
    public sealed virtual XElement Serialize(Stylesheet stylesheet);
    public sealed virtual XElement Serialize(IEnumerable`1<ILanguage> languages);
    public sealed virtual XElement Serialize(ILanguage language);
    public sealed virtual XElement Serialize(ITemplate template);
    public sealed virtual XElement Serialize(IEnumerable`1<ITemplate> templates);
    public sealed virtual XElement Serialize(IMediaType mediaType);
    public sealed virtual XElement Serialize(IEnumerable`1<IMacro> macros);
    public sealed virtual XElement Serialize(IMacro macro);
    public sealed virtual XElement Serialize(IContentType contentType);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.Implement.EntityXmlSerializer/<SerializePropertyTypes>d__25")]
private IEnumerable`1<XElement> SerializePropertyTypes(IEnumerable`1<PropertyType> propertyTypes, IEnumerable`1<PropertyGroup> propertyGroups);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.Implement.EntityXmlSerializer/<SerializePropertyGroups>d__26")]
private IEnumerable`1<XElement> SerializePropertyGroups(IEnumerable`1<PropertyGroup> propertyGroups);
    private XElement SerializeCleanupPolicy(HistoryCleanup cleanupPolicy);
    private XElement SerializeContentBase(IContentBase contentBase, string urlValue, string nodeName, bool published);
    private IEnumerable`1<XElement> SerializeProperty(Property property, bool published);
    private void SerializeChildren(IEnumerable`1<IContent> children, XElement xml, bool published);
    private void SerializeChildren(IEnumerable`1<IMedia> children, XElement xml);
}
public class Umbraco.Core.Services.Implement.ExternalLoginService : ScopeRepositoryService {
    private IExternalLoginRepository _externalLoginRepository;
    public ExternalLoginService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IExternalLoginRepository externalLoginRepository);
    public sealed virtual IEnumerable`1<IIdentityUserLogin> GetAll(int userId);
    [ObsoleteAttribute("Use the overload specifying loginProvider and providerKey instead")]
public sealed virtual IEnumerable`1<IIdentityUserLogin> Find(UserLoginInfo login);
    public sealed virtual IEnumerable`1<IIdentityUserLogin> Find(string loginProvider, string providerKey);
    [ObsoleteAttribute("Use the Save method instead")]
public sealed virtual void SaveUserLogins(int userId, IEnumerable`1<UserLoginInfo> logins);
    public sealed virtual void Save(int userId, IEnumerable`1<IExternalLogin> logins);
    public sealed virtual void Save(IIdentityUserLoginExtended login);
    public sealed virtual void DeleteUserLogins(int userId);
}
public class Umbraco.Core.Services.Implement.FileService : ScopeRepositoryService {
    private IStylesheetRepository _stylesheetRepository;
    private IScriptRepository _scriptRepository;
    private ITemplateRepository _templateRepository;
    private IPartialViewRepository _partialViewRepository;
    private IPartialViewMacroRepository _partialViewMacroRepository;
    private IAuditRepository _auditRepository;
    private static string PartialViewHeader;
    private static string PartialViewMacroHeader;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<ITemplate>> DeletingTemplate;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<ITemplate>> DeletedTemplate;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<Script>> DeletingScript;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<Script>> DeletedScript;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<Stylesheet>> DeletingStylesheet;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<Stylesheet>> DeletedStylesheet;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<ITemplate>> SavingTemplate;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<ITemplate>> SavedTemplate;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<Script>> SavingScript;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<Script>> SavedScript;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<Stylesheet>> SavingStylesheet;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<Stylesheet>> SavedStylesheet;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<IPartialView>> SavingPartialView;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, SaveEventArgs`1<IPartialView>> SavedPartialView;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, NewEventArgs`1<IPartialView>> CreatingPartialView;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, NewEventArgs`1<IPartialView>> CreatedPartialView;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<IPartialView>> DeletingPartialView;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IFileService, DeleteEventArgs`1<IPartialView>> DeletedPartialView;
    public FileService(IScopeProvider uowProvider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IStylesheetRepository stylesheetRepository, IScriptRepository scriptRepository, ITemplateRepository templateRepository, IPartialViewRepository partialViewRepository, IPartialViewMacroRepository partialViewMacroRepository, IAuditRepository auditRepository);
    public sealed virtual IEnumerable`1<Stylesheet> GetStylesheets(String[] names);
    public sealed virtual Stylesheet GetStylesheetByName(string name);
    public sealed virtual void SaveStylesheet(Stylesheet stylesheet, int userId);
    public sealed virtual void DeleteStylesheet(string path, int userId);
    public sealed virtual bool ValidateStylesheet(Stylesheet stylesheet);
    public sealed virtual void CreateStyleSheetFolder(string folderPath);
    public sealed virtual void DeleteStyleSheetFolder(string folderPath);
    public sealed virtual Stream GetStylesheetFileContentStream(string filepath);
    public sealed virtual void SetStylesheetFileContent(string filepath, Stream content);
    public sealed virtual long GetStylesheetFileSize(string filepath);
    public sealed virtual IEnumerable`1<Script> GetScripts(String[] names);
    public sealed virtual Script GetScriptByName(string name);
    public sealed virtual void SaveScript(Script script, int userId);
    public sealed virtual void DeleteScript(string path, int userId);
    public sealed virtual bool ValidateScript(Script script);
    public sealed virtual void CreateScriptFolder(string folderPath);
    public sealed virtual void DeleteScriptFolder(string folderPath);
    public sealed virtual Stream GetScriptFileContentStream(string filepath);
    public sealed virtual void SetScriptFileContent(string filepath, Stream content);
    public sealed virtual long GetScriptFileSize(string filepath);
    public sealed virtual Attempt`1<OperationResult`2<OperationResultType, ITemplate>> CreateTemplateForContentType(string contentTypeAlias, string contentTypeName, int userId);
    public sealed virtual ITemplate CreateTemplateWithIdentity(string name, string alias, string content, ITemplate masterTemplate, int userId);
    public sealed virtual IEnumerable`1<ITemplate> GetTemplates(String[] aliases);
    public sealed virtual IEnumerable`1<ITemplate> GetTemplates(int masterTemplateId);
    public sealed virtual ITemplate GetTemplate(string alias);
    public sealed virtual ITemplate GetTemplate(int id);
    public sealed virtual ITemplate GetTemplate(Guid id);
    public sealed virtual IEnumerable`1<ITemplate> GetTemplateDescendants(string alias);
    public sealed virtual IEnumerable`1<ITemplate> GetTemplateDescendants(int masterTemplateId);
    public sealed virtual IEnumerable`1<ITemplate> GetTemplateChildren(string alias);
    public sealed virtual IEnumerable`1<ITemplate> GetTemplateChildren(int masterTemplateId);
    public sealed virtual void SaveTemplate(ITemplate template, int userId);
    public sealed virtual void SaveTemplate(IEnumerable`1<ITemplate> templates, int userId);
    public sealed virtual void DeleteTemplate(string alias, int userId);
    public sealed virtual bool ValidateTemplate(ITemplate template);
    public sealed virtual Stream GetTemplateFileContentStream(string filepath);
    public sealed virtual void SetTemplateFileContent(string filepath, Stream content);
    public sealed virtual long GetTemplateFileSize(string filepath);
    private string GetViewContent(string fileName);
    public sealed virtual IEnumerable`1<string> GetPartialViewSnippetNames(String[] filterNames);
    public sealed virtual void DeletePartialViewFolder(string folderPath);
    public sealed virtual void DeletePartialViewMacroFolder(string folderPath);
    public sealed virtual IPartialView GetPartialView(string path);
    public sealed virtual IPartialView GetPartialViewMacro(string path);
    public sealed virtual IEnumerable`1<IPartialView> GetPartialViewMacros(String[] names);
    public sealed virtual Attempt`1<IPartialView> CreatePartialView(IPartialView partialView, string snippetName, int userId);
    public sealed virtual Attempt`1<IPartialView> CreatePartialViewMacro(IPartialView partialView, string snippetName, int userId);
    private Attempt`1<IPartialView> CreatePartialViewMacro(IPartialView partialView, PartialViewType partialViewType, string snippetName, int userId);
    public sealed virtual bool DeletePartialView(string path, int userId);
    public sealed virtual bool DeletePartialViewMacro(string path, int userId);
    private bool DeletePartialViewMacro(string path, PartialViewType partialViewType, int userId);
    public sealed virtual Attempt`1<IPartialView> SavePartialView(IPartialView partialView, int userId);
    public sealed virtual Attempt`1<IPartialView> SavePartialViewMacro(IPartialView partialView, int userId);
    private Attempt`1<IPartialView> SavePartialView(IPartialView partialView, PartialViewType partialViewType, int userId);
    public sealed virtual bool ValidatePartialView(PartialView partialView);
    public sealed virtual bool ValidatePartialViewMacro(PartialView partialView);
    internal string StripPartialViewHeader(string contents);
    internal Attempt`1<string> TryGetSnippetPath(string fileName);
    public sealed virtual Stream GetPartialViewMacroFileContentStream(string filepath);
    public sealed virtual void SetPartialViewMacroFileContent(string filepath, Stream content);
    public sealed virtual Stream GetPartialViewFileContentStream(string filepath);
    public sealed virtual void SetPartialViewFileContent(string filepath, Stream content);
    public sealed virtual void CreatePartialViewFolder(string folderPath);
    public sealed virtual void CreatePartialViewMacroFolder(string folderPath);
    public sealed virtual long GetPartialViewMacroFileSize(string filepath);
    public sealed virtual long GetPartialViewFileSize(string filepath);
    private IPartialViewRepository GetPartialViewRepository(PartialViewType partialViewType);
    public sealed virtual string GetPartialViewSnippetContent(string snippetName);
    public sealed virtual string GetPartialViewMacroSnippetContent(string snippetName);
    private string GetPartialViewMacroSnippetContent(string snippetName, PartialViewType partialViewType);
    private void Audit(AuditType type, int userId, int objectId, string entityType);
    [CompilerGeneratedAttribute]
public static void add_DeletingTemplate(TypedEventHandler`2<IFileService, DeleteEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingTemplate(TypedEventHandler`2<IFileService, DeleteEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedTemplate(TypedEventHandler`2<IFileService, DeleteEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedTemplate(TypedEventHandler`2<IFileService, DeleteEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingScript(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingScript(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedScript(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedScript(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingStylesheet(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingStylesheet(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedStylesheet(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedStylesheet(TypedEventHandler`2<IFileService, DeleteEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingTemplate(TypedEventHandler`2<IFileService, SaveEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingTemplate(TypedEventHandler`2<IFileService, SaveEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedTemplate(TypedEventHandler`2<IFileService, SaveEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedTemplate(TypedEventHandler`2<IFileService, SaveEventArgs`1<ITemplate>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingScript(TypedEventHandler`2<IFileService, SaveEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingScript(TypedEventHandler`2<IFileService, SaveEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedScript(TypedEventHandler`2<IFileService, SaveEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedScript(TypedEventHandler`2<IFileService, SaveEventArgs`1<Script>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingStylesheet(TypedEventHandler`2<IFileService, SaveEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingStylesheet(TypedEventHandler`2<IFileService, SaveEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedStylesheet(TypedEventHandler`2<IFileService, SaveEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedStylesheet(TypedEventHandler`2<IFileService, SaveEventArgs`1<Stylesheet>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingPartialView(TypedEventHandler`2<IFileService, SaveEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingPartialView(TypedEventHandler`2<IFileService, SaveEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedPartialView(TypedEventHandler`2<IFileService, SaveEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedPartialView(TypedEventHandler`2<IFileService, SaveEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void add_CreatingPartialView(TypedEventHandler`2<IFileService, NewEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void remove_CreatingPartialView(TypedEventHandler`2<IFileService, NewEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void add_CreatedPartialView(TypedEventHandler`2<IFileService, NewEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void remove_CreatedPartialView(TypedEventHandler`2<IFileService, NewEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingPartialView(TypedEventHandler`2<IFileService, DeleteEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingPartialView(TypedEventHandler`2<IFileService, DeleteEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedPartialView(TypedEventHandler`2<IFileService, DeleteEventArgs`1<IPartialView>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedPartialView(TypedEventHandler`2<IFileService, DeleteEventArgs`1<IPartialView>> value);
}
public class Umbraco.Core.Services.Implement.InstallationService : object {
    private IInstallationRepository _installationRepository;
    public InstallationService(IInstallationRepository installationRepository);
    [AsyncStateMachineAttribute("Umbraco.Core.Services.Implement.InstallationService/<LogInstall>d__2")]
public sealed virtual Task LogInstall(InstallLog installLog);
}
internal class Umbraco.Core.Services.Implement.KeyValueService : object {
    private object _initialock;
    private IScopeProvider _scopeProvider;
    private ILogger _logger;
    private bool _initialized;
    public KeyValueService(IScopeProvider scopeProvider, ILogger logger);
    private void EnsureInitialized();
    private void Initialize();
    public sealed virtual string GetValue(string key);
    public sealed virtual void SetValue(string key, string value);
    public sealed virtual void SetValue(string key, string originValue, string newValue);
    public sealed virtual bool TrySetValue(string key, string originValue, string newValue);
    internal static string GetValue(IUmbracoDatabase database, string key);
}
public class Umbraco.Core.Services.Implement.LocalizationService : ScopeRepositoryService {
    private IDictionaryRepository _dictionaryRepository;
    private ILanguageRepository _languageRepository;
    private IAuditRepository _auditRepository;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<ILanguage>> DeletingLanguage;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<ILanguage>> DeletedLanguage;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<IDictionaryItem>> DeletingDictionaryItem;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<IDictionaryItem>> DeletedDictionaryItem;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<IDictionaryItem>> SavingDictionaryItem;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<IDictionaryItem>> SavedDictionaryItem;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<ILanguage>> SavingLanguage;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<ILanguage>> SavedLanguage;
    public LocalizationService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IDictionaryRepository dictionaryRepository, IAuditRepository auditRepository, ILanguageRepository languageRepository);
    public sealed virtual void AddOrUpdateDictionaryValue(IDictionaryItem item, ILanguage language, string value);
    public sealed virtual IDictionaryItem CreateDictionaryItemWithIdentity(string key, Nullable`1<Guid> parentId, string defaultValue);
    public sealed virtual IDictionaryItem GetDictionaryItemById(int id);
    public sealed virtual IDictionaryItem GetDictionaryItemById(Guid id);
    public sealed virtual IDictionaryItem GetDictionaryItemByKey(string key);
    public sealed virtual IEnumerable`1<IDictionaryItem> GetDictionaryItemChildren(Guid parentId);
    public sealed virtual IEnumerable`1<IDictionaryItem> GetDictionaryItemDescendants(Nullable`1<Guid> parentId);
    public sealed virtual IEnumerable`1<IDictionaryItem> GetRootDictionaryItems();
    public sealed virtual bool DictionaryItemExists(string key);
    public sealed virtual void Save(IDictionaryItem dictionaryItem, int userId);
    public sealed virtual void Delete(IDictionaryItem dictionaryItem, int userId);
    public sealed virtual ILanguage GetLanguageById(int id);
    public sealed virtual ILanguage GetLanguageByIsoCode(string isoCode);
    public sealed virtual Nullable`1<int> GetLanguageIdByIsoCode(string isoCode);
    public sealed virtual string GetLanguageIsoCodeById(int id);
    public sealed virtual string GetDefaultLanguageIsoCode();
    public sealed virtual Nullable`1<int> GetDefaultLanguageId();
    public sealed virtual IEnumerable`1<ILanguage> GetAllLanguages();
    public sealed virtual void Save(ILanguage language, int userId);
    private bool CreatesCycle(ILanguage language, IDictionary`2<int, ILanguage> languages);
    public sealed virtual void Delete(ILanguage language, int userId);
    private void Audit(AuditType type, string message, int userId, int objectId, string entityType);
    private void EnsureDictionaryItemLanguageCallback(IDictionaryItem d);
    public sealed virtual Dictionary`2<string, Guid> GetDictionaryItemKeyMap();
    [CompilerGeneratedAttribute]
public static void add_DeletingLanguage(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<ILanguage>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingLanguage(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<ILanguage>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedLanguage(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<ILanguage>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedLanguage(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<ILanguage>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingDictionaryItem(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingDictionaryItem(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedDictionaryItem(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedDictionaryItem(TypedEventHandler`2<ILocalizationService, DeleteEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingDictionaryItem(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingDictionaryItem(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedDictionaryItem(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedDictionaryItem(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<IDictionaryItem>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingLanguage(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<ILanguage>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingLanguage(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<ILanguage>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedLanguage(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<ILanguage>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedLanguage(TypedEventHandler`2<ILocalizationService, SaveEventArgs`1<ILanguage>> value);
}
public class Umbraco.Core.Services.Implement.LocalizedTextService : object {
    private ILogger _logger;
    private Lazy`1<LocalizedTextServiceFileSources> _fileSources;
    private Lazy`1<IDictionary`2<CultureInfo, IDictionary`2<string, IDictionary`2<string, string>>>> _dictionarySourceLazy;
    private Lazy`1<IDictionary`2<CultureInfo, IDictionary`2<string, string>>> _noAreaDictionarySourceLazy;
    private Char[] _splitter;
    private IDictionary`2<CultureInfo, IDictionary`2<string, IDictionary`2<string, string>>> _dictionarySource { get; }
    private IDictionary`2<CultureInfo, IDictionary`2<string, string>> _noAreaDictionarySource { get; }
    public LocalizedTextService(Lazy`1<LocalizedTextServiceFileSources> fileSources, ILogger logger);
    public LocalizedTextService(IDictionary`2<CultureInfo, Lazy`1<XDocument>> source, ILogger logger);
    public LocalizedTextService(IDictionary`2<CultureInfo, IDictionary`2<string, IDictionary`2<string, string>>> source, ILogger logger);
    private IDictionary`2<CultureInfo, IDictionary`2<string, IDictionary`2<string, string>>> get__dictionarySource();
    private IDictionary`2<CultureInfo, IDictionary`2<string, string>> get__noAreaDictionarySource();
    private IDictionary`2<CultureInfo, IDictionary`2<string, string>> FileSourcesToNoAreaDictionarySources(LocalizedTextServiceFileSources fileSources);
    private IDictionary`2<CultureInfo, IDictionary`2<string, string>> XmlSourceToNoAreaDictionary(IDictionary`2<CultureInfo, Lazy`1<XDocument>> xmlSources);
    private IDictionary`2<CultureInfo, IDictionary`2<string, IDictionary`2<string, string>>> FileSourcesToAreaDictionarySources(LocalizedTextServiceFileSources fileSources);
    private IDictionary`2<CultureInfo, IDictionary`2<string, IDictionary`2<string, string>>> XmlSourcesToAreaDictionary(IDictionary`2<CultureInfo, Lazy`1<XDocument>> xmlSources);
    public sealed virtual string Localize(string key, CultureInfo culture, IDictionary`2<string, string> tokens);
    public sealed virtual string Localize(string area, string alias, CultureInfo culture, IDictionary`2<string, string> tokens);
    public sealed virtual IDictionary`2<string, string> GetAllStoredValues(CultureInfo culture);
    private Dictionary`2<string, IDictionary`2<string, string>> GetAreaStoredTranslations(IDictionary`2<CultureInfo, Lazy`1<XDocument>> xmlSource, CultureInfo cult);
    private Dictionary`2<string, string> GetNoAreaStoredTranslations(IDictionary`2<CultureInfo, Lazy`1<XDocument>> xmlSource, CultureInfo cult);
    private Dictionary`2<string, IDictionary`2<string, string>> GetAreaStoredTranslations(IDictionary`2<CultureInfo, IDictionary`2<string, IDictionary`2<string, string>>> dictionarySource, CultureInfo cult);
    public sealed virtual IEnumerable`1<CultureInfo> GetSupportedCultures();
    public sealed virtual CultureInfo ConvertToSupportedCultureWithRegionCode(CultureInfo currentCulture);
    private string GetFromDictionarySource(CultureInfo culture, string area, string key, IDictionary`2<string, string> tokens);
    internal static string ParseTokens(string value, IDictionary`2<string, string> tokens);
    public sealed virtual IDictionary`2<string, IDictionary`2<string, string>> GetAllStoredValuesByAreaAndAlias(CultureInfo culture);
}
public class Umbraco.Core.Services.Implement.LocalizedTextServiceFileSources : object {
    private ILogger _logger;
    private IAppPolicyCache _cache;
    private IEnumerable`1<LocalizedTextServiceSupplementaryFileSource> _supplementFileSources;
    private DirectoryInfo _fileSourceFolder;
    private Dictionary`2<string, CultureInfo> _twoLetterCultureConverter;
    private Lazy`1<Dictionary`2<CultureInfo, Lazy`1<XDocument>>> _xmlSources;
    public LocalizedTextServiceFileSources(ILogger logger, AppCaches appCaches, DirectoryInfo fileSourceFolder, IEnumerable`1<LocalizedTextServiceSupplementaryFileSource> supplementFileSources);
    public LocalizedTextServiceFileSources(ILogger logger, AppCaches appCaches, DirectoryInfo fileSourceFolder);
    public IDictionary`2<CultureInfo, Lazy`1<XDocument>> GetXmlSources();
    public Attempt`1<CultureInfo> TryConvert2LetterCultureTo4Letter(string twoLetterCulture);
    public Attempt`1<string> TryConvert4LetterCultureTo2Letter(CultureInfo culture);
    private void MergeSupplementaryFiles(CultureInfo culture, XDocument xMasterDoc);
    private void MergeChildKeys(XElement source, XElement destination, bool overwrite);
    [CompilerGeneratedAttribute]
private Dictionary`2<CultureInfo, Lazy`1<XDocument>> <.ctor>b__6_0();
}
public class Umbraco.Core.Services.Implement.LocalizedTextServiceSupplementaryFileSource : object {
    [CompilerGeneratedAttribute]
private FileInfo <File>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverwriteCoreKeys>k__BackingField;
    public FileInfo File { get; private set; }
    public bool OverwriteCoreKeys { get; private set; }
    public LocalizedTextServiceSupplementaryFileSource(FileInfo file, bool overwriteCoreKeys);
    [CompilerGeneratedAttribute]
public FileInfo get_File();
    [CompilerGeneratedAttribute]
private void set_File(FileInfo value);
    [CompilerGeneratedAttribute]
public bool get_OverwriteCoreKeys();
    [CompilerGeneratedAttribute]
private void set_OverwriteCoreKeys(bool value);
}
public class Umbraco.Core.Services.Implement.MacroService : ScopeRepositoryService {
    private IMacroRepository _macroRepository;
    private IAuditRepository _auditRepository;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMacroService, DeleteEventArgs`1<IMacro>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMacroService, DeleteEventArgs`1<IMacro>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMacroService, SaveEventArgs`1<IMacro>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMacroService, SaveEventArgs`1<IMacro>> Saved;
    public MacroService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IMacroRepository macroRepository, IAuditRepository auditRepository);
    public sealed virtual IMacro GetByAlias(string alias);
    public sealed virtual IEnumerable`1<IMacro> GetAll();
    public sealed virtual IEnumerable`1<IMacro> GetAll(Int32[] ids);
    public sealed virtual IEnumerable`1<IMacro> GetAll(Guid[] ids);
    public sealed virtual IMacro GetById(int id);
    public sealed virtual IMacro GetById(Guid id);
    public sealed virtual void Delete(IMacro macro, int userId);
    public sealed virtual void Save(IMacro macro, int userId);
    private void Audit(AuditType type, int userId, int objectId);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IMacroService, DeleteEventArgs`1<IMacro>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IMacroService, DeleteEventArgs`1<IMacro>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IMacroService, DeleteEventArgs`1<IMacro>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IMacroService, DeleteEventArgs`1<IMacro>> value);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IMacroService, SaveEventArgs`1<IMacro>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IMacroService, SaveEventArgs`1<IMacro>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IMacroService, SaveEventArgs`1<IMacro>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IMacroService, SaveEventArgs`1<IMacro>> value);
}
public class Umbraco.Core.Services.Implement.MediaService : ScopeRepositoryService {
    private IMediaRepository _mediaRepository;
    private IMediaTypeRepository _mediaTypeRepository;
    private IAuditRepository _auditRepository;
    private IEntityRepository _entityRepository;
    private IMediaFileSystem _mediaFileSystem;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, DeleteEventArgs`1<IMedia>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, DeleteEventArgs`1<IMedia>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, DeleteRevisionsEventArgs> DeletingVersions;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, DeleteRevisionsEventArgs> DeletedVersions;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, SaveEventArgs`1<IMedia>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, SaveEventArgs`1<IMedia>> Saved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> Trashing;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> Trashed;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> Moving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> Moved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, RecycleBinEventArgs> EmptyingRecycleBin;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, RecycleBinEventArgs> EmptiedRecycleBin;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMediaService, EventArgs<IMedia>> TreeChanged;
    public MediaService(IScopeProvider provider, IMediaFileSystem mediaFileSystem, ILogger logger, IEventMessagesFactory eventMessagesFactory, IMediaRepository mediaRepository, IAuditRepository auditRepository, IMediaTypeRepository mediaTypeRepository, IEntityRepository entityRepository);
    public sealed virtual int Count(string mediaTypeAlias);
    public sealed virtual int CountNotTrashed(string mediaTypeAlias);
    public sealed virtual int CountChildren(int parentId, string mediaTypeAlias);
    public sealed virtual int CountDescendants(int parentId, string mediaTypeAlias);
    public sealed virtual IMedia CreateMedia(string name, Guid parentId, string mediaTypeAlias, int userId);
    public sealed virtual IMedia CreateMedia(string name, int parentId, string mediaTypeAlias, int userId);
    public IMedia CreateMedia(string name, string mediaTypeAlias, int userId);
    public sealed virtual IMedia CreateMedia(string name, IMedia parent, string mediaTypeAlias, int userId);
    public sealed virtual IMedia CreateMediaWithIdentity(string name, int parentId, string mediaTypeAlias, int userId);
    public sealed virtual IMedia CreateMediaWithIdentity(string name, IMedia parent, string mediaTypeAlias, int userId);
    private void CreateMedia(IScope scope, Media media, IMedia parent, int userId, bool withIdentity);
    public sealed virtual IMedia GetById(int id);
    public sealed virtual IEnumerable`1<IMedia> GetByIds(IEnumerable`1<int> ids);
    public sealed virtual IMedia GetById(Guid key);
    public sealed virtual IEnumerable`1<IMedia> GetByIds(IEnumerable`1<Guid> ids);
    public sealed virtual IEnumerable`1<IMedia> GetPagedOfType(int contentTypeId, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IMedia> GetPagedOfTypes(Int32[] contentTypeIds, long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IMedia> GetByLevel(int level);
    public sealed virtual IMedia GetVersion(int versionId);
    public sealed virtual IEnumerable`1<IMedia> GetVersions(int id);
    public sealed virtual IEnumerable`1<IMedia> GetAncestors(int id);
    public sealed virtual IEnumerable`1<IMedia> GetAncestors(IMedia media);
    public sealed virtual IEnumerable`1<IMedia> GetPagedChildren(int id, long pageIndex, int pageSize, Int64& totalChildren, IQuery`1<IMedia> filter, Ordering ordering);
    public sealed virtual IEnumerable`1<IMedia> GetPagedDescendants(int id, long pageIndex, int pageSize, Int64& totalChildren, IQuery`1<IMedia> filter, Ordering ordering);
    private IQuery`1<IMedia> GetPagedDescendantQuery(string mediaPath);
    private IEnumerable`1<IMedia> GetPagedLocked(IQuery`1<IMedia> query, long pageIndex, int pageSize, Int64& totalChildren, IQuery`1<IMedia> filter, Ordering ordering);
    public sealed virtual IMedia GetParent(int id);
    public sealed virtual IMedia GetParent(IMedia media);
    public sealed virtual IEnumerable`1<IMedia> GetRootMedia();
    public sealed virtual IEnumerable`1<IMedia> GetPagedMediaInRecycleBin(long pageIndex, int pageSize, Int64& totalRecords, IQuery`1<IMedia> filter, Ordering ordering);
    public sealed virtual bool HasChildren(int id);
    public sealed virtual IMedia GetMediaByPath(string mediaPath);
    public sealed virtual Attempt`1<OperationResult> Save(IMedia media, int userId, bool raiseEvents);
    public sealed virtual Attempt`1<OperationResult> Save(IEnumerable`1<IMedia> medias, int userId, bool raiseEvents);
    public sealed virtual Attempt`1<OperationResult> Delete(IMedia media, int userId);
    private void DeleteLocked(IScope scope, IMedia media);
    public sealed virtual void DeleteVersions(int id, DateTime versionDate, int userId);
    private void DeleteVersions(IScope scope, bool wlock, int id, DateTime versionDate, int userId);
    public sealed virtual void DeleteVersion(int id, int versionId, bool deletePriorVersions, int userId);
    public sealed virtual Attempt`1<OperationResult> MoveToRecycleBin(IMedia media, int userId);
    public sealed virtual Attempt`1<OperationResult> Move(IMedia media, int parentId, int userId);
    private void PerformMoveLocked(IMedia media, int parentId, IMedia parent, int userId, ICollection`1<ValueTuple`2<IMedia, string>> moves, Nullable`1<bool> trash);
    private void PerformMoveMediaLocked(IMedia media, int userId, Nullable`1<bool> trash);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use EmptyRecycleBin with explicit indication of user ID instead")]
public sealed virtual OperationResult EmptyRecycleBin();
    public sealed virtual OperationResult EmptyRecycleBin(int userId);
    public sealed virtual bool RecycleBinSmells();
    public sealed virtual bool Sort(IEnumerable`1<IMedia> items, int userId, bool raiseEvents);
    public sealed virtual ContentDataIntegrityReport CheckDataIntegrity(ContentDataIntegrityReportOptions options);
    private void Audit(AuditType type, int userId, int objectId, string message);
    public sealed virtual Stream GetMediaFileContentStream(string filepath);
    public sealed virtual void SetMediaFileContent(string filepath, Stream stream);
    public sealed virtual void DeleteMediaFile(string filepath);
    public sealed virtual long GetMediaFileSize(string filepath);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IMediaService, DeleteEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IMediaService, DeleteEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IMediaService, DeleteEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IMediaService, DeleteEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingVersions(TypedEventHandler`2<IMediaService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingVersions(TypedEventHandler`2<IMediaService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedVersions(TypedEventHandler`2<IMediaService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedVersions(TypedEventHandler`2<IMediaService, DeleteRevisionsEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IMediaService, SaveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IMediaService, SaveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IMediaService, SaveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IMediaService, SaveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_Trashing(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Trashing(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_Trashed(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Trashed(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_Moving(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moving(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_Moved(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_Moved(TypedEventHandler`2<IMediaService, MoveEventArgs`1<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void add_EmptyingRecycleBin(TypedEventHandler`2<IMediaService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_EmptyingRecycleBin(TypedEventHandler`2<IMediaService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_EmptiedRecycleBin(TypedEventHandler`2<IMediaService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_EmptiedRecycleBin(TypedEventHandler`2<IMediaService, RecycleBinEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_TreeChanged(TypedEventHandler`2<IMediaService, EventArgs<IMedia>> value);
    [CompilerGeneratedAttribute]
public static void remove_TreeChanged(TypedEventHandler`2<IMediaService, EventArgs<IMedia>> value);
    public sealed virtual void DeleteMediaOfTypes(IEnumerable`1<int> mediaTypeIds, int userId);
    public sealed virtual void DeleteMediaOfType(int mediaTypeId, int userId);
    private IMediaType GetMediaType(string mediaTypeAlias);
    [CompilerGeneratedAttribute]
private void <DeleteLocked>g__DoDelete|41_0(IMedia c, <>c__DisplayClass41_0& );
}
public class Umbraco.Core.Services.Implement.MediaTypeService : ContentTypeServiceBase`3<IMediaTypeRepository, IMediaType, IMediaTypeService> {
    [CompilerGeneratedAttribute]
private Int32[] <ReadLockIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <WriteLockIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IMediaService <MediaService>k__BackingField;
    protected IMediaTypeService This { get; }
    protected Int32[] ReadLockIds { get; }
    protected Int32[] WriteLockIds { get; }
    private IMediaService MediaService { get; }
    protected Guid ContainedObjectType { get; }
    public MediaTypeService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IMediaService mediaService, IMediaTypeRepository mediaTypeRepository, IAuditRepository auditRepository, IMediaTypeContainerRepository entityContainerRepository, IEntityRepository entityRepository);
    protected virtual IMediaTypeService get_This();
    [CompilerGeneratedAttribute]
protected virtual Int32[] get_ReadLockIds();
    [CompilerGeneratedAttribute]
protected virtual Int32[] get_WriteLockIds();
    [CompilerGeneratedAttribute]
private IMediaService get_MediaService();
    protected virtual Guid get_ContainedObjectType();
    protected virtual void DeleteItemsOfTypes(IEnumerable`1<int> typeIds);
}
public class Umbraco.Core.Services.Implement.MemberGroupService : RepositoryService {
    private IMemberGroupRepository _memberGroupRepository;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberGroupService, DeleteEventArgs`1<IMemberGroup>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberGroupService, DeleteEventArgs`1<IMemberGroup>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberGroupService, SaveEventArgs`1<IMemberGroup>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberGroupService, SaveEventArgs`1<IMemberGroup>> Saved;
    public MemberGroupService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IMemberGroupRepository memberGroupRepository);
    private void MemberGroupRepository_SavingMemberGroup(IMemberGroupRepository sender, SaveEventArgs`1<IMemberGroup> e);
    private void MemberGroupRepository_SavedMemberGroup(IMemberGroupRepository sender, SaveEventArgs`1<IMemberGroup> e);
    public sealed virtual IEnumerable`1<IMemberGroup> GetAll();
    public sealed virtual IEnumerable`1<IMemberGroup> GetByIds(IEnumerable`1<int> ids);
    public sealed virtual IMemberGroup GetById(int id);
    public sealed virtual IMemberGroup GetById(Guid id);
    public sealed virtual IMemberGroup GetByName(string name);
    public sealed virtual void Save(IMemberGroup memberGroup, bool raiseEvents);
    public sealed virtual void Delete(IMemberGroup memberGroup);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IMemberGroupService, DeleteEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IMemberGroupService, DeleteEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IMemberGroupService, DeleteEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IMemberGroupService, DeleteEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IMemberGroupService, SaveEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IMemberGroupService, SaveEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IMemberGroupService, SaveEventArgs`1<IMemberGroup>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IMemberGroupService, SaveEventArgs`1<IMemberGroup>> value);
}
public class Umbraco.Core.Services.Implement.MemberService : ScopeRepositoryService {
    private IMemberRepository _memberRepository;
    private IMemberTypeRepository _memberTypeRepository;
    private IMemberGroupRepository _memberGroupRepository;
    private IAuditRepository _auditRepository;
    private IMemberGroupService _memberGroupService;
    private IMediaFileSystem _mediaFileSystem;
    [CompilerGeneratedAttribute]
private MembershipProviderBase <MembershipProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberService, DeleteEventArgs`1<IMember>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberService, DeleteEventArgs`1<IMember>> Deleted;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberService, SaveEventArgs`1<IMember>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberService, SaveEventArgs`1<IMember>> Saved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberService, RolesEventArgs> AssignedRoles;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberService, RolesEventArgs> RemovedRoles;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IMemberService, ExportedMemberEventArgs> Exported;
    internal MembershipProviderBase MembershipProvider { get; internal set; }
    public MemberService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IMemberGroupService memberGroupService, IMediaFileSystem mediaFileSystem, IMemberRepository memberRepository, IMemberTypeRepository memberTypeRepository, IMemberGroupRepository memberGroupRepository, IAuditRepository auditRepository);
    [CompilerGeneratedAttribute]
internal MembershipProviderBase get_MembershipProvider();
    [CompilerGeneratedAttribute]
internal void set_MembershipProvider(MembershipProviderBase value);
    public sealed virtual int GetCount(MemberCountType countType);
    public sealed virtual int Count(string memberTypeAlias);
    public sealed virtual IMember CreateMember(string username, string email, string name, string memberTypeAlias);
    public sealed virtual IMember CreateMember(string username, string email, string name, IMemberType memberType);
    private sealed virtual override IMember Umbraco.Core.Services.IMembershipMemberService<Umbraco.Core.Models.IMember>.CreateWithIdentity(string username, string email, string passwordValue, string memberTypeAlias);
    private sealed virtual override IMember Umbraco.Core.Services.IMembershipMemberService<Umbraco.Core.Models.IMember>.CreateWithIdentity(string username, string email, string passwordValue, string memberTypeAlias, bool isApproved);
    public IMember CreateMemberWithIdentity(string username, string email, string memberTypeAlias);
    public IMember CreateMemberWithIdentity(string username, string email, string memberTypeAlias, bool isApproved);
    public sealed virtual IMember CreateMemberWithIdentity(string username, string email, string name, string memberTypeAlias);
    public IMember CreateMemberWithIdentity(string username, string email, string name, string memberTypeAlias, bool isApproved);
    public IMember CreateMemberWithIdentity(string username, string email, string name, string passwordValue, string memberTypeAlias, bool isApproved);
    public sealed virtual IMember CreateMemberWithIdentity(string username, string email, IMemberType memberType);
    public IMember CreateMemberWithIdentity(string username, string email, IMemberType memberType, bool isApproved);
    public sealed virtual IMember CreateMemberWithIdentity(string username, string email, string name, IMemberType memberType);
    public IMember CreateMemberWithIdentity(string username, string email, string name, IMemberType memberType, bool isApproved);
    private IMember CreateMemberWithIdentity(string username, string email, string name, string passwordValue, IMemberType memberType, bool isApproved);
    private void CreateMember(IScope scope, Member member, int userId, bool withIdentity);
    public sealed virtual IMember GetById(int id);
    public sealed virtual IMember GetByKey(Guid id);
    public sealed virtual IEnumerable`1<IMember> GetAll(long pageIndex, int pageSize, Int64& totalRecords);
    public sealed virtual IEnumerable`1<IMember> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, string memberTypeAlias, string filter);
    public sealed virtual IEnumerable`1<IMember> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, bool orderBySystemField, string memberTypeAlias, string filter);
    public sealed virtual IMember GetByProviderKey(object id);
    public sealed virtual IMember GetByEmail(string email);
    public sealed virtual IMember GetByUsername(string username);
    public sealed virtual IEnumerable`1<IMember> GetMembersByMemberType(string memberTypeAlias);
    public sealed virtual IEnumerable`1<IMember> GetMembersByMemberType(int memberTypeId);
    public sealed virtual IEnumerable`1<IMember> GetMembersByGroup(string memberGroupName);
    public sealed virtual IEnumerable`1<IMember> GetAllMembers(Int32[] ids);
    public sealed virtual IEnumerable`1<IMember> FindMembersByDisplayName(string displayNameToMatch, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public sealed virtual IEnumerable`1<IMember> FindByEmail(string emailStringToMatch, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public sealed virtual IEnumerable`1<IMember> FindByUsername(string login, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public sealed virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, string value, StringPropertyMatchType matchType);
    public sealed virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, int value, ValuePropertyMatchType matchType);
    public sealed virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, bool value);
    public sealed virtual IEnumerable`1<IMember> GetMembersByPropertyValue(string propertyTypeAlias, DateTime value, ValuePropertyMatchType matchType);
    public sealed virtual bool Exists(int id);
    public sealed virtual bool Exists(string username);
    public sealed virtual void SetLastLogin(string username, DateTime date);
    public sealed virtual void Save(IMember member, bool raiseEvents);
    public sealed virtual void Save(IEnumerable`1<IMember> members, bool raiseEvents);
    public sealed virtual void Delete(IMember member);
    private void DeleteLocked(IScope scope, IMember member, DeleteEventArgs`1<IMember> args);
    public sealed virtual void AddRole(string roleName);
    public sealed virtual IEnumerable`1<string> GetAllRoles();
    public sealed virtual IEnumerable`1<string> GetAllRoles(int memberId);
    public sealed virtual IEnumerable`1<string> GetAllRoles(string username);
    public sealed virtual IEnumerable`1<int> GetAllRolesIds();
    public sealed virtual IEnumerable`1<int> GetAllRolesIds(int memberId);
    public sealed virtual IEnumerable`1<int> GetAllRolesIds(string username);
    public sealed virtual IEnumerable`1<IMember> GetMembersInRole(string roleName);
    public sealed virtual IEnumerable`1<IMember> FindMembersInRole(string roleName, string usernameToMatch, StringPropertyMatchType matchType);
    public sealed virtual bool DeleteRole(string roleName, bool throwIfBeingUsed);
    public sealed virtual void AssignRole(string username, string roleName);
    public sealed virtual void AssignRoles(String[] usernames, String[] roleNames);
    public sealed virtual void DissociateRole(string username, string roleName);
    public sealed virtual void DissociateRoles(String[] usernames, String[] roleNames);
    public sealed virtual void AssignRole(int memberId, string roleName);
    public sealed virtual void AssignRoles(Int32[] memberIds, String[] roleNames);
    public sealed virtual void DissociateRole(int memberId, string roleName);
    public sealed virtual void DissociateRoles(Int32[] memberIds, String[] roleNames);
    private void Audit(AuditType type, int userId, int objectId, string message);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IMemberService, DeleteEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IMemberService, DeleteEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IMemberService, DeleteEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IMemberService, DeleteEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IMemberService, SaveEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IMemberService, SaveEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IMemberService, SaveEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IMemberService, SaveEventArgs`1<IMember>> value);
    [CompilerGeneratedAttribute]
public static void add_AssignedRoles(TypedEventHandler`2<IMemberService, RolesEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_AssignedRoles(TypedEventHandler`2<IMemberService, RolesEventArgs> value);
    [CompilerGeneratedAttribute]
public static void add_RemovedRoles(TypedEventHandler`2<IMemberService, RolesEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_RemovedRoles(TypedEventHandler`2<IMemberService, RolesEventArgs> value);
    [CompilerGeneratedAttribute]
internal static void add_Exported(TypedEventHandler`2<IMemberService, ExportedMemberEventArgs> value);
    [CompilerGeneratedAttribute]
internal static void remove_Exported(TypedEventHandler`2<IMemberService, ExportedMemberEventArgs> value);
    public sealed virtual void SavePassword(IMember member, string password);
    internal static IMember CreateGenericMembershipProviderMember(string name, string email, string username, string password);
    internal MemberExportModel ExportMember(Guid key);
    private static IEnumerable`1<MemberExportProperty> GetPropertyExportItems(IMember member);
    public sealed virtual void DeleteMembersOfType(int memberTypeId);
    private IMemberType GetMemberType(IScope scope, string memberTypeAlias);
    private IMemberType GetMemberType(string memberTypeAlias);
    public sealed virtual string GetDefaultMemberType();
}
public class Umbraco.Core.Services.Implement.MemberTypeService : ContentTypeServiceBase`3<IMemberTypeRepository, IMemberType, IMemberTypeService> {
    private IMemberTypeRepository _memberTypeRepository;
    [CompilerGeneratedAttribute]
private Int32[] <ReadLockIds>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <WriteLockIds>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberService <MemberService>k__BackingField;
    protected IMemberTypeService This { get; }
    protected Int32[] ReadLockIds { get; }
    protected Int32[] WriteLockIds { get; }
    private IMemberService MemberService { get; }
    protected Guid ContainedObjectType { get; }
    public MemberTypeService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IMemberService memberService, IMemberTypeRepository memberTypeRepository, IAuditRepository auditRepository, IEntityRepository entityRepository);
    protected virtual IMemberTypeService get_This();
    [CompilerGeneratedAttribute]
protected virtual Int32[] get_ReadLockIds();
    [CompilerGeneratedAttribute]
protected virtual Int32[] get_WriteLockIds();
    [CompilerGeneratedAttribute]
private IMemberService get_MemberService();
    protected virtual Guid get_ContainedObjectType();
    protected virtual void DeleteItemsOfTypes(IEnumerable`1<int> typeIds);
    public sealed virtual string GetDefault();
}
public class Umbraco.Core.Services.Implement.NotificationService : object {
    private IScopeProvider _uowProvider;
    private IUserService _userService;
    private IContentService _contentService;
    private ILocalizationService _localizationService;
    private INotificationsRepository _notificationsRepository;
    private IGlobalSettings _globalSettings;
    private IContentSection _contentSection;
    private ILogger _logger;
    private static object Locker;
    private static BlockingCollection`1<NotificationRequest> Queue;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _running;
    internal static Action`3<SmtpClient, MailMessage, ILogger> Sendmail;
    public NotificationService(IScopeProvider provider, IUserService userService, IContentService contentService, ILocalizationService localizationService, ILogger logger, INotificationsRepository notificationsRepository, IGlobalSettings globalSettings, IContentSection contentSection);
    private static NotificationService();
    private IContentBase GetPreviousVersion(int contentId);
    public sealed virtual void SendNotifications(IUser operatingUser, IEnumerable`1<IContent> entities, string action, string actionName, Uri siteUri, Func`2<ValueTuple`2<IUser, NotificationEmailSubjectParams>, string> createSubject, Func`2<ValueTuple`3<IUser, NotificationEmailBodyParams, bool>, string> createBody);
    private IEnumerable`1<Notification> GetUsersNotifications(IEnumerable`1<int> userIds, string action, IEnumerable`1<int> nodeIds, Guid objectType);
    public sealed virtual IEnumerable`1<Notification> GetUserNotifications(IUser user);
    public sealed virtual IEnumerable`1<Notification> GetUserNotifications(IUser user, string path);
    public IEnumerable`1<Notification> FilterUserNotificationsByPath(IEnumerable`1<Notification> userNotifications, string path);
    public sealed virtual IEnumerable`1<Notification> GetEntityNotifications(IEntity entity);
    public sealed virtual void DeleteNotifications(IEntity entity);
    public sealed virtual void DeleteNotifications(IUser user);
    public sealed virtual void DeleteNotifications(IUser user, IEntity entity);
    public sealed virtual IEnumerable`1<Notification> SetNotifications(IUser user, IEntity entity, String[] actions);
    public sealed virtual Notification CreateNotification(IUser user, IEntity entity, string action);
    private NotificationRequest CreateNotificationRequest(IUser performingUser, IUser mailingUser, IContent content, IContentBase oldDoc, string actionName, Uri siteUri, Func`2<ValueTuple`2<IUser, NotificationEmailSubjectParams>, string> createSubject, Func`2<ValueTuple`3<IUser, NotificationEmailBodyParams, bool>, string> createBody);
    private string ReplaceLinks(string text, Uri siteUri);
    private static void ReplaceHtmlSymbols(String& oldString);
    private void Enqueue(NotificationRequest notification);
    private void Process(BlockingCollection`1<NotificationRequest> notificationRequests);
}
public class Umbraco.Core.Services.Implement.PackagingService : object {
    private IPackageInstallation _packageInstallation;
    private IAuditService _auditService;
    private ICreatedPackagesRepository _createdPackages;
    private IInstalledPackagesRepository _installedPackages;
    private static HttpClient _httpClient;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IPackagingService, ImportPackageEventArgs`1<string>> ImportingPackage;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IPackagingService, ImportPackageEventArgs`1<InstallationSummary>> ImportedPackage;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IPackagingService, UninstallPackageEventArgs> UninstalledPackage;
    public PackagingService(IAuditService auditService, ICreatedPackagesRepository createdPackages, IInstalledPackagesRepository installedPackages, IPackageInstallation packageInstallation);
    [AsyncStateMachineAttribute("Umbraco.Core.Services.Implement.PackagingService/<FetchPackageFileAsync>d__6")]
public sealed virtual Task`1<FileInfo> FetchPackageFileAsync(Guid packageId, Version umbracoVersion, int userId);
    public sealed virtual CompiledPackage GetCompiledPackageInfo(FileInfo packageFile);
    public sealed virtual IEnumerable`1<string> InstallCompiledPackageFiles(PackageDefinition packageDefinition, FileInfo packageFile, int userId);
    public sealed virtual InstallationSummary InstallCompiledPackageData(PackageDefinition packageDefinition, FileInfo packageFile, int userId);
    public sealed virtual UninstallationSummary UninstallPackage(string packageName, int userId);
    public sealed virtual void DeleteCreatedPackage(int id, int userId);
    public sealed virtual IEnumerable`1<PackageDefinition> GetAllCreatedPackages();
    public sealed virtual PackageDefinition GetCreatedPackageById(int id);
    public sealed virtual bool SaveCreatedPackage(PackageDefinition definition);
    public sealed virtual string ExportCreatedPackage(PackageDefinition definition);
    public sealed virtual IEnumerable`1<PackageDefinition> GetAllInstalledPackages();
    public sealed virtual PackageDefinition GetInstalledPackageById(int id);
    public sealed virtual IEnumerable`1<PackageDefinition> GetInstalledPackageByName(string name);
    public sealed virtual PackageInstallType GetPackageInstallType(string packageName, SemVersion packageVersion, PackageDefinition& alreadyInstalled);
    public sealed virtual bool SaveInstalledPackage(PackageDefinition definition);
    public sealed virtual void DeleteInstalledPackage(int packageId, int userId);
    [CompilerGeneratedAttribute]
public static void add_ImportingPackage(TypedEventHandler`2<IPackagingService, ImportPackageEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public static void remove_ImportingPackage(TypedEventHandler`2<IPackagingService, ImportPackageEventArgs`1<string>> value);
    [CompilerGeneratedAttribute]
public static void add_ImportedPackage(TypedEventHandler`2<IPackagingService, ImportPackageEventArgs`1<InstallationSummary>> value);
    [CompilerGeneratedAttribute]
public static void remove_ImportedPackage(TypedEventHandler`2<IPackagingService, ImportPackageEventArgs`1<InstallationSummary>> value);
    [CompilerGeneratedAttribute]
public static void add_UninstalledPackage(TypedEventHandler`2<IPackagingService, UninstallPackageEventArgs> value);
    [CompilerGeneratedAttribute]
public static void remove_UninstalledPackage(TypedEventHandler`2<IPackagingService, UninstallPackageEventArgs> value);
}
public class Umbraco.Core.Services.Implement.PublicAccessService : ScopeRepositoryService {
    private IPublicAccessRepository _publicAccessRepository;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IPublicAccessService, SaveEventArgs`1<PublicAccessEntry>> Saving;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IPublicAccessService, SaveEventArgs`1<PublicAccessEntry>> Saved;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IPublicAccessService, DeleteEventArgs`1<PublicAccessEntry>> Deleting;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IPublicAccessService, DeleteEventArgs`1<PublicAccessEntry>> Deleted;
    public PublicAccessService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IPublicAccessRepository publicAccessRepository);
    public sealed virtual IEnumerable`1<PublicAccessEntry> GetAll();
    public sealed virtual PublicAccessEntry GetEntryForContent(IContent content);
    public sealed virtual PublicAccessEntry GetEntryForContent(string contentPath);
    public sealed virtual Attempt`1<PublicAccessEntry> IsProtected(IContent content);
    public sealed virtual Attempt`1<PublicAccessEntry> IsProtected(string contentPath);
    public sealed virtual Attempt`1<OperationResult`2<OperationResultType, PublicAccessEntry>> AddRule(IContent content, string ruleType, string ruleValue);
    public sealed virtual Attempt`1<OperationResult> RemoveRule(IContent content, string ruleType, string ruleValue);
    public sealed virtual Attempt`1<OperationResult> Save(PublicAccessEntry entry);
    public sealed virtual Attempt`1<OperationResult> Delete(PublicAccessEntry entry);
    [CompilerGeneratedAttribute]
public static void add_Saving(TypedEventHandler`2<IPublicAccessService, SaveEventArgs`1<PublicAccessEntry>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saving(TypedEventHandler`2<IPublicAccessService, SaveEventArgs`1<PublicAccessEntry>> value);
    [CompilerGeneratedAttribute]
public static void add_Saved(TypedEventHandler`2<IPublicAccessService, SaveEventArgs`1<PublicAccessEntry>> value);
    [CompilerGeneratedAttribute]
public static void remove_Saved(TypedEventHandler`2<IPublicAccessService, SaveEventArgs`1<PublicAccessEntry>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleting(TypedEventHandler`2<IPublicAccessService, DeleteEventArgs`1<PublicAccessEntry>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleting(TypedEventHandler`2<IPublicAccessService, DeleteEventArgs`1<PublicAccessEntry>> value);
    [CompilerGeneratedAttribute]
public static void add_Deleted(TypedEventHandler`2<IPublicAccessService, DeleteEventArgs`1<PublicAccessEntry>> value);
    [CompilerGeneratedAttribute]
public static void remove_Deleted(TypedEventHandler`2<IPublicAccessService, DeleteEventArgs`1<PublicAccessEntry>> value);
}
internal class Umbraco.Core.Services.Implement.RedirectUrlService : ScopeRepositoryService {
    private IRedirectUrlRepository _redirectUrlRepository;
    public RedirectUrlService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IRedirectUrlRepository redirectUrlRepository);
    public sealed virtual void Register(string url, Guid contentKey, string culture);
    public sealed virtual void Delete(IRedirectUrl redirectUrl);
    public sealed virtual void Delete(Guid id);
    public sealed virtual void DeleteContentRedirectUrls(Guid contentKey);
    public sealed virtual void DeleteAll();
    public sealed virtual IRedirectUrl GetMostRecentRedirectUrl(string url);
    public sealed virtual IEnumerable`1<IRedirectUrl> GetContentRedirectUrls(Guid contentKey);
    public sealed virtual IEnumerable`1<IRedirectUrl> GetAllRedirectUrls(long pageIndex, int pageSize, Int64& total);
    public sealed virtual IEnumerable`1<IRedirectUrl> GetAllRedirectUrls(int rootContentId, long pageIndex, int pageSize, Int64& total);
    public sealed virtual IEnumerable`1<IRedirectUrl> SearchRedirectUrls(string searchTerm, long pageIndex, int pageSize, Int64& total);
    public sealed virtual IRedirectUrl GetMostRecentRedirectUrl(string url, string culture);
}
public class Umbraco.Core.Services.Implement.RelationService : ScopeRepositoryService {
    private IEntityService _entityService;
    private IRelationRepository _relationRepository;
    private IRelationTypeRepository _relationTypeRepository;
    private IAuditRepository _auditRepository;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelation>> DeletingRelation;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelation>> DeletedRelation;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelation>> SavingRelation;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelation>> SavedRelation;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelationType>> DeletingRelationType;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelationType>> DeletedRelationType;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelationType>> SavingRelationType;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelationType>> SavedRelationType;
    public RelationService(IScopeProvider uowProvider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IEntityService entityService, IRelationRepository relationRepository, IRelationTypeRepository relationTypeRepository, IAuditRepository auditRepository);
    public sealed virtual IRelation GetById(int id);
    public sealed virtual IRelationType GetRelationTypeById(int id);
    public sealed virtual IRelationType GetRelationTypeById(Guid id);
    public sealed virtual IRelationType GetRelationTypeByAlias(string alias);
    public sealed virtual IEnumerable`1<IRelation> GetAllRelations(Int32[] ids);
    public sealed virtual IEnumerable`1<IRelation> GetAllRelationsByRelationType(IRelationType relationType);
    public sealed virtual IEnumerable`1<IRelation> GetAllRelationsByRelationType(int relationTypeId);
    public sealed virtual IEnumerable`1<IRelationType> GetAllRelationTypes(Int32[] ids);
    public sealed virtual IEnumerable`1<IRelation> GetByParentId(int id);
    public sealed virtual IEnumerable`1<IRelation> GetByParentId(int id, string relationTypeAlias);
    public sealed virtual IEnumerable`1<IRelation> GetByParent(IUmbracoEntity parent);
    public sealed virtual IEnumerable`1<IRelation> GetByParent(IUmbracoEntity parent, string relationTypeAlias);
    public sealed virtual IEnumerable`1<IRelation> GetByChildId(int id);
    public sealed virtual IEnumerable`1<IRelation> GetByChildId(int id, string relationTypeAlias);
    public sealed virtual IEnumerable`1<IRelation> GetByChild(IUmbracoEntity child);
    public sealed virtual IEnumerable`1<IRelation> GetByChild(IUmbracoEntity child, string relationTypeAlias);
    public sealed virtual IEnumerable`1<IRelation> GetByParentOrChildId(int id);
    public sealed virtual IEnumerable`1<IRelation> GetByParentOrChildId(int id, string relationTypeAlias);
    public sealed virtual IEnumerable`1<IRelation> GetByRelationTypeName(string relationTypeName);
    public sealed virtual IEnumerable`1<IRelation> GetByRelationTypeAlias(string relationTypeAlias);
    public sealed virtual IEnumerable`1<IRelation> GetByRelationTypeId(int relationTypeId);
    public sealed virtual IEnumerable`1<IRelation> GetPagedByRelationTypeId(int relationTypeId, long pageIndex, int pageSize, Int64& totalRecords, Ordering ordering);
    public sealed virtual IUmbracoEntity GetChildEntityFromRelation(IRelation relation);
    public sealed virtual IUmbracoEntity GetParentEntityFromRelation(IRelation relation);
    public sealed virtual Tuple`2<IUmbracoEntity, IUmbracoEntity> GetEntitiesFromRelation(IRelation relation);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.Implement.RelationService/<GetChildEntitiesFromRelations>d__30")]
public sealed virtual IEnumerable`1<IUmbracoEntity> GetChildEntitiesFromRelations(IEnumerable`1<IRelation> relations);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.Implement.RelationService/<GetParentEntitiesFromRelations>d__31")]
public sealed virtual IEnumerable`1<IUmbracoEntity> GetParentEntitiesFromRelations(IEnumerable`1<IRelation> relations);
    public sealed virtual IEnumerable`1<IUmbracoEntity> GetPagedParentEntitiesByChildId(int id, long pageIndex, int pageSize, Int64& totalChildren, UmbracoObjectTypes[] entityTypes);
    public sealed virtual IEnumerable`1<IUmbracoEntity> GetPagedChildEntitiesByParentId(int id, long pageIndex, int pageSize, Int64& totalChildren, UmbracoObjectTypes[] entityTypes);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.Implement.RelationService/<GetEntitiesFromRelations>d__34")]
public sealed virtual IEnumerable`1<Tuple`2<IUmbracoEntity, IUmbracoEntity>> GetEntitiesFromRelations(IEnumerable`1<IRelation> relations);
    public sealed virtual IRelation Relate(int parentId, int childId, IRelationType relationType);
    public sealed virtual IRelation Relate(IUmbracoEntity parent, IUmbracoEntity child, IRelationType relationType);
    public sealed virtual IRelation Relate(int parentId, int childId, string relationTypeAlias);
    public sealed virtual IRelation Relate(IUmbracoEntity parent, IUmbracoEntity child, string relationTypeAlias);
    public sealed virtual bool HasRelations(IRelationType relationType);
    public sealed virtual bool IsRelated(int id);
    public sealed virtual bool AreRelated(int parentId, int childId);
    public sealed virtual bool AreRelated(int parentId, int childId, string relationTypeAlias);
    public bool AreRelated(int parentId, int childId, IRelationType relationType);
    public sealed virtual bool AreRelated(IUmbracoEntity parent, IUmbracoEntity child);
    public sealed virtual bool AreRelated(IUmbracoEntity parent, IUmbracoEntity child, string relationTypeAlias);
    public sealed virtual void Save(IRelation relation);
    public sealed virtual void Save(IEnumerable`1<IRelation> relations);
    public sealed virtual void Save(IRelationType relationType);
    public sealed virtual void Delete(IRelation relation);
    public sealed virtual void Delete(IRelationType relationType);
    public sealed virtual void DeleteRelationsOfType(IRelationType relationType);
    private IRelationType GetRelationType(string relationTypeAlias);
    private IEnumerable`1<IRelation> GetRelationsByListOfTypeIds(IEnumerable`1<int> relationTypeIds);
    private void Audit(AuditType type, int userId, int objectId, string message);
    [CompilerGeneratedAttribute]
public static void add_DeletingRelation(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingRelation(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedRelation(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedRelation(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingRelation(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingRelation(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedRelation(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedRelation(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelation>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingRelationType(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelationType>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingRelationType(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelationType>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedRelationType(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelationType>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedRelationType(TypedEventHandler`2<IRelationService, DeleteEventArgs`1<IRelationType>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingRelationType(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelationType>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingRelationType(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelationType>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedRelationType(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelationType>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedRelationType(TypedEventHandler`2<IRelationService, SaveEventArgs`1<IRelationType>> value);
}
public abstract class Umbraco.Core.Services.Implement.RepositoryService : object {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IEventMessagesFactory <EventMessagesFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopeProvider <ScopeProvider>k__BackingField;
    protected ILogger Logger { get; }
    protected IEventMessagesFactory EventMessagesFactory { get; }
    protected IScopeProvider ScopeProvider { get; }
    protected RepositoryService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory);
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IEventMessagesFactory get_EventMessagesFactory();
    [CompilerGeneratedAttribute]
protected IScopeProvider get_ScopeProvider();
    protected IQuery`1<T> Query();
}
public abstract class Umbraco.Core.Services.Implement.ScopeRepositoryService : RepositoryService {
    protected ScopeRepositoryService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory);
}
public class Umbraco.Core.Services.Implement.ServerRegistrationService : ScopeRepositoryService {
    private IServerRegistrationRepository _serverRegistrationRepository;
    private static string CurrentServerIdentityValue;
    private ServerRole _currentServerRole;
    public string CurrentServerIdentity { get; }
    public ServerRegistrationService(IScopeProvider scopeProvider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IServerRegistrationRepository serverRegistrationRepository);
    private static ServerRegistrationService();
    public sealed virtual void TouchServer(string serverAddress, string serverIdentity, TimeSpan staleTimeout);
    public sealed virtual void DeactiveServer(string serverIdentity);
    public sealed virtual void DeactiveStaleServers(TimeSpan staleTimeout);
    public sealed virtual IEnumerable`1<IServerRegistration> GetActiveServers(bool refresh);
    public sealed virtual string get_CurrentServerIdentity();
    public sealed virtual ServerRole GetCurrentServerRole();
}
public class Umbraco.Core.Services.Implement.TagService : ScopeRepositoryService {
    private ITagRepository _tagRepository;
    public TagService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, ITagRepository tagRepository);
    public sealed virtual TaggedEntity GetTaggedEntityById(int id);
    public sealed virtual TaggedEntity GetTaggedEntityByKey(Guid key);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedContentByTagGroup(string group, string culture);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedContentByTag(string tag, string group, string culture);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedMediaByTagGroup(string group, string culture);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedMediaByTag(string tag, string group, string culture);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedMembersByTagGroup(string group, string culture);
    public sealed virtual IEnumerable`1<TaggedEntity> GetTaggedMembersByTag(string tag, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetAllTags(string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetAllContentTags(string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetAllMediaTags(string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetAllMemberTags(string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForProperty(int contentId, string propertyTypeAlias, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForEntity(int contentId, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForProperty(Guid contentId, string propertyTypeAlias, string group, string culture);
    public sealed virtual IEnumerable`1<ITag> GetTagsForEntity(Guid contentId, string group, string culture);
}
public class Umbraco.Core.Services.Implement.UserService : ScopeRepositoryService {
    private IUserRepository _userRepository;
    private IUserGroupRepository _userGroupRepository;
    private IGlobalSettings _globalSettings;
    private bool _isUpgrading;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, SaveEventArgs`1<IUser>> SavingUser;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, SaveEventArgs`1<IUser>> SavedUser;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUser>> DeletingUser;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUser>> DeletedUser;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, SaveEventArgs`1<UserGroupWithUsers>> SavingUserGroup;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, SaveEventArgs`1<UserGroupWithUsers>> SavedUserGroup;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUserGroup>> DeletingUserGroup;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUserGroup>> DeletedUserGroup;
    [CompilerGeneratedAttribute]
private static TypedEventHandler`2<IUserService, SaveEventArgs`1<EntityPermission>> UserGroupPermissionsAssigned;
    public UserService(IScopeProvider provider, ILogger logger, IEventMessagesFactory eventMessagesFactory, IRuntimeState runtimeState, IUserRepository userRepository, IUserGroupRepository userGroupRepository, IGlobalSettings globalSettings);
    public sealed virtual bool Exists(string username);
    public sealed virtual IUser CreateUserWithIdentity(string username, string email);
    private sealed virtual override IUser Umbraco.Core.Services.IMembershipMemberService<Umbraco.Core.Models.Membership.IUser>.CreateWithIdentity(string username, string email, string passwordValue, string memberTypeAlias);
    private sealed virtual override IUser Umbraco.Core.Services.IMembershipMemberService<Umbraco.Core.Models.Membership.IUser>.CreateWithIdentity(string username, string email, string passwordValue, string memberTypeAlias, bool isApproved);
    private IUser CreateUserWithIdentity(string username, string email, string passwordValue, bool isApproved);
    public IUser GetById(int id);
    public sealed virtual IUser GetByProviderKey(object id);
    public sealed virtual IUser GetByEmail(string email);
    public sealed virtual IUser GetByUsername(string username);
    public sealed virtual void Delete(IUser membershipUser);
    public sealed virtual void Delete(IUser user, bool deletePermanently);
    private sealed virtual override void Umbraco.Core.Services.IMembershipMemberService<Umbraco.Core.Models.Membership.IUser>.SetLastLogin(string username, DateTime date);
    public sealed virtual void Save(IUser entity, bool raiseEvents);
    public sealed virtual void Save(IEnumerable`1<IUser> entities, bool raiseEvents);
    public sealed virtual string GetDefaultMemberType();
    public sealed virtual IEnumerable`1<IUser> FindByEmail(string emailStringToMatch, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public sealed virtual IEnumerable`1<IUser> FindByUsername(string login, long pageIndex, int pageSize, Int64& totalRecords, StringPropertyMatchType matchType);
    public sealed virtual int GetCount(MemberCountType countType);
    public sealed virtual Guid CreateLoginSession(int userId, string requestingIpAddress);
    public sealed virtual int ClearLoginSessions(int userId);
    public sealed virtual void ClearLoginSession(Guid sessionId);
    public sealed virtual bool ValidateLoginSession(int userId, Guid sessionId);
    public sealed virtual IDictionary`2<UserState, int> GetUserStates();
    public sealed virtual IEnumerable`1<IUser> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, UserState[] userState, String[] userGroups, string filter);
    public sealed virtual IEnumerable`1<IUser> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, UserState[] userState, String[] includeUserGroups, String[] excludeUserGroups, IQuery`1<IUser> filter);
    public sealed virtual IEnumerable`1<IUser> GetAll(long pageIndex, int pageSize, Int64& totalRecords);
    internal IEnumerable`1<IUser> GetNextUsers(int id, int count);
    public sealed virtual IEnumerable`1<IUser> GetAllInGroup(int groupId);
    public sealed virtual IEnumerable`1<IUser> GetAllNotInGroup(int groupId);
    public sealed virtual IProfile GetProfileById(int id);
    public sealed virtual IProfile GetProfileByUserName(string username);
    public sealed virtual IUser GetUserById(int id);
    public sealed virtual IEnumerable`1<IUser> GetUsersById(Int32[] ids);
    public sealed virtual void ReplaceUserGroupPermissions(int groupId, IEnumerable`1<char> permissions, Int32[] entityIds);
    public sealed virtual void AssignUserGroupPermission(int groupId, char permission, Int32[] entityIds);
    public sealed virtual IEnumerable`1<IUserGroup> GetAllUserGroups(Int32[] ids);
    public sealed virtual IEnumerable`1<IUserGroup> GetUserGroupsByAlias(String[] aliases);
    public sealed virtual IUserGroup GetUserGroupByAlias(string alias);
    public sealed virtual IUserGroup GetUserGroupById(int id);
    public sealed virtual void Save(IUserGroup userGroup, Int32[] userIds, bool raiseEvents);
    public sealed virtual void DeleteUserGroup(IUserGroup userGroup);
    public sealed virtual void DeleteSectionFromAllUserGroups(string sectionAlias);
    public sealed virtual EntityPermissionCollection GetPermissions(IUser user, Int32[] nodeIds);
    private IEnumerable`1<EntityPermission> GetPermissions(IReadOnlyUserGroup[] groups, bool fallbackToDefaultPermissions, Int32[] nodeIds);
    public sealed virtual EntityPermissionCollection GetPermissions(IUserGroup[] groups, bool fallbackToDefaultPermissions, Int32[] nodeIds);
    public sealed virtual EntityPermissionSet GetPermissionsForPath(IUser user, string path);
    public sealed virtual EntityPermissionSet GetPermissionsForPath(IUserGroup[] groups, string path, bool fallbackToDefaultPermissions);
    private EntityPermissionCollection GetPermissionsForPath(IReadOnlyUserGroup[] groups, Int32[] pathIds, bool fallbackToDefaultPermissions);
    internal static EntityPermissionSet CalculatePermissionsForPathForUser(EntityPermission[] groupPermissions, Int32[] pathIds);
    internal static EntityPermission GetPermissionsForPathForGroup(IEnumerable`1<EntityPermission> pathPermissions, Int32[] pathIds, bool fallbackToDefaultPermissions);
    public static bool TryGetAssignedPermissionsForNode(IList`1<EntityPermission> permissions, int nodeId, String& assignedPermissions);
    private static void AddAdditionalPermissions(List`1<string> assignedPermissions, String[] additionalPermissions);
    [CompilerGeneratedAttribute]
public static void add_SavingUser(TypedEventHandler`2<IUserService, SaveEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingUser(TypedEventHandler`2<IUserService, SaveEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedUser(TypedEventHandler`2<IUserService, SaveEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedUser(TypedEventHandler`2<IUserService, SaveEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingUser(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingUser(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedUser(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedUser(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUser>> value);
    [CompilerGeneratedAttribute]
public static void add_SavingUserGroup(TypedEventHandler`2<IUserService, SaveEventArgs`1<UserGroupWithUsers>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavingUserGroup(TypedEventHandler`2<IUserService, SaveEventArgs`1<UserGroupWithUsers>> value);
    [CompilerGeneratedAttribute]
public static void add_SavedUserGroup(TypedEventHandler`2<IUserService, SaveEventArgs`1<UserGroupWithUsers>> value);
    [CompilerGeneratedAttribute]
public static void remove_SavedUserGroup(TypedEventHandler`2<IUserService, SaveEventArgs`1<UserGroupWithUsers>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletingUserGroup(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUserGroup>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletingUserGroup(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUserGroup>> value);
    [CompilerGeneratedAttribute]
public static void add_DeletedUserGroup(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUserGroup>> value);
    [CompilerGeneratedAttribute]
public static void remove_DeletedUserGroup(TypedEventHandler`2<IUserService, DeleteEventArgs`1<IUserGroup>> value);
    [CompilerGeneratedAttribute]
internal static void add_UserGroupPermissionsAssigned(TypedEventHandler`2<IUserService, SaveEventArgs`1<EntityPermission>> value);
    [CompilerGeneratedAttribute]
internal static void remove_UserGroupPermissionsAssigned(TypedEventHandler`2<IUserService, SaveEventArgs`1<EntityPermission>> value);
}
public interface Umbraco.Core.Services.INotificationService {
    public abstract virtual void SendNotifications(IUser operatingUser, IEnumerable`1<IContent> entities, string action, string actionName, Uri siteUri, Func`2<ValueTuple`2<IUser, NotificationEmailSubjectParams>, string> createSubject, Func`2<ValueTuple`3<IUser, NotificationEmailBodyParams, bool>, string> createBody);
    public abstract virtual IEnumerable`1<Notification> GetUserNotifications(IUser user);
    public abstract virtual IEnumerable`1<Notification> GetUserNotifications(IUser user, string path);
    public abstract virtual IEnumerable`1<Notification> GetEntityNotifications(IEntity entity);
    public abstract virtual void DeleteNotifications(IEntity entity);
    public abstract virtual void DeleteNotifications(IUser user);
    public abstract virtual void DeleteNotifications(IUser user, IEntity entity);
    public abstract virtual IEnumerable`1<Notification> SetNotifications(IUser user, IEntity entity, String[] actions);
    public abstract virtual Notification CreateNotification(IUser user, IEntity entity, string action);
}
public interface Umbraco.Core.Services.IPackagingService {
    public abstract virtual CompiledPackage GetCompiledPackageInfo(FileInfo packageFile);
    public abstract virtual IEnumerable`1<string> InstallCompiledPackageFiles(PackageDefinition packageDefinition, FileInfo packageFile, int userId);
    public abstract virtual InstallationSummary InstallCompiledPackageData(PackageDefinition packageDefinition, FileInfo packageFile, int userId);
    public abstract virtual UninstallationSummary UninstallPackage(string packageName, int userId);
    public abstract virtual IEnumerable`1<PackageDefinition> GetAllInstalledPackages();
    public abstract virtual PackageDefinition GetInstalledPackageById(int id);
    public abstract virtual IEnumerable`1<PackageDefinition> GetInstalledPackageByName(string name);
    public abstract virtual PackageInstallType GetPackageInstallType(string packageName, SemVersion packageVersion, PackageDefinition& alreadyInstalled);
    public abstract virtual void DeleteInstalledPackage(int packageId, int userId);
    public abstract virtual bool SaveInstalledPackage(PackageDefinition definition);
    public abstract virtual IEnumerable`1<PackageDefinition> GetAllCreatedPackages();
    public abstract virtual PackageDefinition GetCreatedPackageById(int id);
    public abstract virtual void DeleteCreatedPackage(int id, int userId);
    public abstract virtual bool SaveCreatedPackage(PackageDefinition definition);
    public abstract virtual string ExportCreatedPackage(PackageDefinition definition);
    public abstract virtual Task`1<FileInfo> FetchPackageFileAsync(Guid packageId, Version umbracoVersion, int userId);
}
public interface Umbraco.Core.Services.IPublicAccessService {
    public abstract virtual IEnumerable`1<PublicAccessEntry> GetAll();
    public abstract virtual PublicAccessEntry GetEntryForContent(IContent content);
    public abstract virtual PublicAccessEntry GetEntryForContent(string contentPath);
    public abstract virtual Attempt`1<PublicAccessEntry> IsProtected(IContent content);
    public abstract virtual Attempt`1<PublicAccessEntry> IsProtected(string contentPath);
    public abstract virtual Attempt`1<OperationResult`2<OperationResultType, PublicAccessEntry>> AddRule(IContent content, string ruleType, string ruleValue);
    public abstract virtual Attempt`1<OperationResult> RemoveRule(IContent content, string ruleType, string ruleValue);
    public abstract virtual Attempt`1<OperationResult> Save(PublicAccessEntry entry);
    public abstract virtual Attempt`1<OperationResult> Delete(PublicAccessEntry entry);
}
public interface Umbraco.Core.Services.IRedirectUrlService {
    public abstract virtual void Register(string url, Guid contentKey, string culture);
    public abstract virtual void DeleteContentRedirectUrls(Guid contentKey);
    public abstract virtual void Delete(IRedirectUrl redirectUrl);
    public abstract virtual void Delete(Guid id);
    public abstract virtual void DeleteAll();
    public abstract virtual IRedirectUrl GetMostRecentRedirectUrl(string url);
    public abstract virtual IRedirectUrl GetMostRecentRedirectUrl(string url, string culture);
    public abstract virtual IEnumerable`1<IRedirectUrl> GetContentRedirectUrls(Guid contentKey);
    public abstract virtual IEnumerable`1<IRedirectUrl> GetAllRedirectUrls(long pageIndex, int pageSize, Int64& total);
    public abstract virtual IEnumerable`1<IRedirectUrl> GetAllRedirectUrls(int rootContentId, long pageIndex, int pageSize, Int64& total);
    public abstract virtual IEnumerable`1<IRedirectUrl> SearchRedirectUrls(string searchTerm, long pageIndex, int pageSize, Int64& total);
}
public interface Umbraco.Core.Services.IRelationService {
    public abstract virtual IRelation GetById(int id);
    public abstract virtual IRelationType GetRelationTypeById(int id);
    public abstract virtual IRelationType GetRelationTypeById(Guid id);
    public abstract virtual IRelationType GetRelationTypeByAlias(string alias);
    public abstract virtual IEnumerable`1<IRelation> GetAllRelations(Int32[] ids);
    public abstract virtual IEnumerable`1<IRelation> GetAllRelationsByRelationType(IRelationType relationType);
    public abstract virtual IEnumerable`1<IRelation> GetAllRelationsByRelationType(int relationTypeId);
    public abstract virtual IEnumerable`1<IRelationType> GetAllRelationTypes(Int32[] ids);
    public abstract virtual IEnumerable`1<IRelation> GetByParentId(int id);
    public abstract virtual IEnumerable`1<IRelation> GetByParentId(int id, string relationTypeAlias);
    public abstract virtual IEnumerable`1<IRelation> GetByParent(IUmbracoEntity parent);
    public abstract virtual IEnumerable`1<IRelation> GetByParent(IUmbracoEntity parent, string relationTypeAlias);
    public abstract virtual IEnumerable`1<IRelation> GetByChildId(int id);
    public abstract virtual IEnumerable`1<IRelation> GetByChildId(int id, string relationTypeAlias);
    public abstract virtual IEnumerable`1<IRelation> GetByChild(IUmbracoEntity child);
    public abstract virtual IEnumerable`1<IRelation> GetByChild(IUmbracoEntity child, string relationTypeAlias);
    public abstract virtual IEnumerable`1<IRelation> GetByParentOrChildId(int id);
    public abstract virtual IEnumerable`1<IRelation> GetByParentOrChildId(int id, string relationTypeAlias);
    public abstract virtual IEnumerable`1<IRelation> GetByRelationTypeName(string relationTypeName);
    public abstract virtual IEnumerable`1<IRelation> GetByRelationTypeAlias(string relationTypeAlias);
    public abstract virtual IEnumerable`1<IRelation> GetByRelationTypeId(int relationTypeId);
    public abstract virtual IEnumerable`1<IRelation> GetPagedByRelationTypeId(int relationTypeId, long pageIndex, int pageSize, Int64& totalRecords, Ordering ordering);
    public abstract virtual IUmbracoEntity GetChildEntityFromRelation(IRelation relation);
    public abstract virtual IUmbracoEntity GetParentEntityFromRelation(IRelation relation);
    public abstract virtual Tuple`2<IUmbracoEntity, IUmbracoEntity> GetEntitiesFromRelation(IRelation relation);
    public abstract virtual IEnumerable`1<IUmbracoEntity> GetChildEntitiesFromRelations(IEnumerable`1<IRelation> relations);
    public abstract virtual IEnumerable`1<IUmbracoEntity> GetParentEntitiesFromRelations(IEnumerable`1<IRelation> relations);
    public abstract virtual IEnumerable`1<IUmbracoEntity> GetPagedParentEntitiesByChildId(int id, long pageIndex, int pageSize, Int64& totalChildren, UmbracoObjectTypes[] entityTypes);
    public abstract virtual IEnumerable`1<IUmbracoEntity> GetPagedChildEntitiesByParentId(int id, long pageIndex, int pageSize, Int64& totalChildren, UmbracoObjectTypes[] entityTypes);
    public abstract virtual IEnumerable`1<Tuple`2<IUmbracoEntity, IUmbracoEntity>> GetEntitiesFromRelations(IEnumerable`1<IRelation> relations);
    public abstract virtual IRelation Relate(int parentId, int childId, IRelationType relationType);
    public abstract virtual IRelation Relate(IUmbracoEntity parent, IUmbracoEntity child, IRelationType relationType);
    public abstract virtual IRelation Relate(int parentId, int childId, string relationTypeAlias);
    public abstract virtual IRelation Relate(IUmbracoEntity parent, IUmbracoEntity child, string relationTypeAlias);
    public abstract virtual bool HasRelations(IRelationType relationType);
    public abstract virtual bool IsRelated(int id);
    public abstract virtual bool AreRelated(int parentId, int childId);
    public abstract virtual bool AreRelated(IUmbracoEntity parent, IUmbracoEntity child);
    public abstract virtual bool AreRelated(IUmbracoEntity parent, IUmbracoEntity child, string relationTypeAlias);
    public abstract virtual bool AreRelated(int parentId, int childId, string relationTypeAlias);
    public abstract virtual void Save(IRelation relation);
    public abstract virtual void Save(IEnumerable`1<IRelation> relations);
    public abstract virtual void Save(IRelationType relationType);
    public abstract virtual void Delete(IRelation relation);
    public abstract virtual void Delete(IRelationType relationType);
    public abstract virtual void DeleteRelationsOfType(IRelationType relationType);
}
public interface Umbraco.Core.Services.IServerRegistrationService {
    public string CurrentServerIdentity { get; }
    public abstract virtual void TouchServer(string serverAddress, string serverIdentity, TimeSpan staleTimeout);
    public abstract virtual void DeactiveServer(string serverIdentity);
    public abstract virtual void DeactiveStaleServers(TimeSpan staleTimeout);
    public abstract virtual IEnumerable`1<IServerRegistration> GetActiveServers(bool refresh);
    public abstract virtual string get_CurrentServerIdentity();
    public abstract virtual ServerRole GetCurrentServerRole();
}
public interface Umbraco.Core.Services.IService {
}
public interface Umbraco.Core.Services.ITagService {
    public abstract virtual TaggedEntity GetTaggedEntityById(int id);
    public abstract virtual TaggedEntity GetTaggedEntityByKey(Guid key);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedContentByTagGroup(string group, string culture);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedContentByTag(string tag, string group, string culture);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedMediaByTagGroup(string group, string culture);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedMediaByTag(string tag, string group, string culture);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedMembersByTagGroup(string group, string culture);
    public abstract virtual IEnumerable`1<TaggedEntity> GetTaggedMembersByTag(string tag, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetAllTags(string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetAllContentTags(string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetAllMediaTags(string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetAllMemberTags(string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForProperty(int contentId, string propertyTypeAlias, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForEntity(int contentId, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForProperty(Guid contentId, string propertyTypeAlias, string group, string culture);
    public abstract virtual IEnumerable`1<ITag> GetTagsForEntity(Guid contentId, string group, string culture);
}
public interface Umbraco.Core.Services.IUpgradeService {
    public abstract virtual Task`1<UpgradeResult> CheckUpgrade(SemVersion version);
}
public interface Umbraco.Core.Services.IUserService {
    public abstract virtual Guid CreateLoginSession(int userId, string requestingIpAddress);
    public abstract virtual bool ValidateLoginSession(int userId, Guid sessionId);
    public abstract virtual void ClearLoginSession(Guid sessionId);
    public abstract virtual int ClearLoginSessions(int userId);
    public abstract virtual IDictionary`2<UserState, int> GetUserStates();
    public abstract virtual IEnumerable`1<IUser> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, UserState[] userState, String[] includeUserGroups, String[] excludeUserGroups, IQuery`1<IUser> filter);
    public abstract virtual IEnumerable`1<IUser> GetAll(long pageIndex, int pageSize, Int64& totalRecords, string orderBy, Direction orderDirection, UserState[] userState, String[] userGroups, string filter);
    public abstract virtual void Delete(IUser user, bool deletePermanently);
    public abstract virtual IProfile GetProfileById(int id);
    public abstract virtual IProfile GetProfileByUserName(string username);
    public abstract virtual IUser GetUserById(int id);
    public abstract virtual IEnumerable`1<IUser> GetUsersById(Int32[] ids);
    public abstract virtual void DeleteSectionFromAllUserGroups(string sectionAlias);
    public abstract virtual EntityPermissionCollection GetPermissions(IUser user, Int32[] nodeIds);
    public abstract virtual EntityPermissionCollection GetPermissions(IUserGroup[] groups, bool fallbackToDefaultPermissions, Int32[] nodeIds);
    public abstract virtual EntityPermissionSet GetPermissionsForPath(IUser user, string path);
    public abstract virtual EntityPermissionSet GetPermissionsForPath(IUserGroup[] groups, string path, bool fallbackToDefaultPermissions);
    public abstract virtual void ReplaceUserGroupPermissions(int groupId, IEnumerable`1<char> permissions, Int32[] entityIds);
    public abstract virtual void AssignUserGroupPermission(int groupId, char permission, Int32[] entityIds);
    public abstract virtual IEnumerable`1<IUser> GetAllInGroup(int groupId);
    public abstract virtual IEnumerable`1<IUser> GetAllNotInGroup(int groupId);
    public abstract virtual IEnumerable`1<IUserGroup> GetAllUserGroups(Int32[] ids);
    public abstract virtual IEnumerable`1<IUserGroup> GetUserGroupsByAlias(String[] alias);
    public abstract virtual IUserGroup GetUserGroupByAlias(string name);
    public abstract virtual IUserGroup GetUserGroupById(int id);
    public abstract virtual void Save(IUserGroup userGroup, Int32[] userIds, bool raiseEvents);
    public abstract virtual void DeleteUserGroup(IUserGroup userGroup);
}
[ExtensionAttribute]
public static class Umbraco.Core.Services.LocalizedTextServiceExtensions : object {
    private static ICultureDictionary _cultureDictionary;
    private static ICultureDictionary CultureDictionary { get; }
    [ExtensionAttribute]
public static string Localize(ILocalizedTextService manager, string area, string alias, CultureInfo culture);
    [ExtensionAttribute]
public static string Localize(ILocalizedTextService manager, string area, string alias);
    [ExtensionAttribute]
public static string Localize(ILocalizedTextService manager, string area, string alias, String[] tokens);
    [ExtensionAttribute]
public static string Localize(ILocalizedTextService manager, string area, string alias, CultureInfo culture, String[] tokens);
    [ExtensionAttribute]
public static string Localize(ILocalizedTextService manager, string area, string alias, CultureInfo culture, IDictionary`2<string, string> tokens);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload specifying an area and alias instead of key")]
public static string Localize(ILocalizedTextService manager, string key, String[] tokens);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload specifying an area and alias instead of key")]
public static string Localize(ILocalizedTextService manager, string key, IDictionary`2<string, string> tokens);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the overload specifying an area and alias instead of key")]
public static string Localize(ILocalizedTextService manager, string key, CultureInfo culture, String[] tokens);
    internal static IDictionary`2<string, string> ConvertToDictionaryVars(String[] variables);
    [ExtensionAttribute]
internal static string UmbracoDictionaryTranslate(ILocalizedTextService manager, string text);
    [ExtensionAttribute]
private static string UmbracoDictionaryTranslate(ILocalizedTextService manager, string text, ICultureDictionary cultureDictionary);
    private static ICultureDictionary get_CultureDictionary();
}
[ExtensionAttribute]
public static class Umbraco.Core.Services.MediaServiceExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IMedia> GetByIds(IMediaService mediaService, IEnumerable`1<Udi> ids);
    [ExtensionAttribute]
public static IMedia CreateMedia(IMediaService mediaService, string name, Udi parentId, string mediaTypeAlias, int userId);
}
public enum Umbraco.Core.Services.MoveOperationStatusType : Enum {
    public byte value__;
    public static MoveOperationStatusType Success;
    public static MoveOperationStatusType FailedParentNotFound;
    public static MoveOperationStatusType FailedCancelledByEvent;
    public static MoveOperationStatusType FailedNotAllowedByPath;
}
public class Umbraco.Core.Services.OperationResult : OperationResult`1<OperationResultType> {
    public OperationResult(OperationResultType result, EventMessages eventMessages);
    public static OperationResult Succeed(EventMessages eventMessages);
    public static OperationResult Cancel(EventMessages eventMessages);
}
public class Umbraco.Core.Services.OperationResult`1 : object {
    [CompilerGeneratedAttribute]
private TResultType <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private EventMessages <EventMessages>k__BackingField;
    public bool Success { get; }
    public TResultType Result { get; }
    public EventMessages EventMessages { get; }
    public OperationResult`1(TResultType result, EventMessages eventMessages);
    private static OperationResult`1();
    public bool get_Success();
    [CompilerGeneratedAttribute]
public TResultType get_Result();
    [CompilerGeneratedAttribute]
public EventMessages get_EventMessages();
}
public class Umbraco.Core.Services.OperationResult`2 : OperationResult`1<TResultType> {
    [CompilerGeneratedAttribute]
private TEntity <Entity>k__BackingField;
    public TEntity Entity { get; }
    public OperationResult`2(TResultType result, EventMessages eventMessages);
    public OperationResult`2(TResultType result, EventMessages eventMessages, TEntity entity);
    [CompilerGeneratedAttribute]
public TEntity get_Entity();
}
public enum Umbraco.Core.Services.OperationResultType : Enum {
    public byte value__;
    public static OperationResultType Success;
    public static OperationResultType Failed;
    public static OperationResultType FailedCannot;
    public static OperationResultType FailedCancelledByEvent;
    public static OperationResultType FailedExceptionThrown;
    public static OperationResultType NoOperation;
}
public class Umbraco.Core.Services.Ordering : object {
    private static Ordering DefaultOrdering;
    [CompilerGeneratedAttribute]
private string <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private Direction <Direction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCustomField>k__BackingField;
    public string OrderBy { get; }
    public Direction Direction { get; }
    public string Culture { get; }
    public bool IsCustomField { get; }
    public bool IsEmpty { get; }
    public bool IsInvariant { get; }
    public Ordering(string orderBy, Direction direction, string culture, bool isCustomField);
    private static Ordering();
    public static Ordering By(string orderBy, Direction direction, string culture, bool isCustomField);
    public static Ordering ByDefault();
    [CompilerGeneratedAttribute]
public string get_OrderBy();
    [CompilerGeneratedAttribute]
public Direction get_Direction();
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public bool get_IsCustomField();
    public bool get_IsEmpty();
    public bool get_IsInvariant();
}
internal class Umbraco.Core.Services.PropertyValidationService : object {
    private PropertyEditorCollection _propertyEditors;
    private IDataTypeService _dataTypeService;
    private ILocalizedTextService _textService;
    public PropertyValidationService(PropertyEditorCollection propertyEditors, IDataTypeService dataTypeService, ILocalizedTextService textService);
    public IEnumerable`1<ValidationResult> ValidatePropertyValue(PropertyType propertyType, object postedValue);
    [IteratorStateMachineAttribute("Umbraco.Core.Services.PropertyValidationService/<ValidatePropertyValue>d__6")]
internal static IEnumerable`1<ValidationResult> ValidatePropertyValue(ILocalizedTextService textService, IDataEditor editor, IDataType dataType, object postedValue, bool isRequired, string validationRegExp, string isRequiredMessage, string validationRegExpMessage);
    public bool IsPropertyDataValid(IContent content, Property[]& invalidProperties, CultureImpact impact);
    public bool IsPropertyValid(Property property, string culture, string segment);
    private bool IsValidPropertyValue(Property property, object value);
    private bool IsPropertyValueValid(PropertyType propertyType, object value);
}
[ExtensionAttribute]
public static class Umbraco.Core.Services.PublicAccessServiceExtensions : object {
    [ExtensionAttribute]
public static bool RenameMemberGroupRoleRules(IPublicAccessService publicAccessService, string oldRolename, string newRolename);
    [ExtensionAttribute]
public static bool HasAccess(IPublicAccessService publicAccessService, int documentId, IContentService contentService, string username, IEnumerable`1<string> currentMemberRoles);
    [ExtensionAttribute]
public static bool HasAccess(IPublicAccessService publicAccessService, string path, MembershipUser member, RoleProvider roleProvider);
    [ExtensionAttribute]
public static bool HasAccess(IPublicAccessService publicAccessService, string path, string username, Func`2<string, IEnumerable`1<string>> rolesCallback);
    private static bool HasAccess(PublicAccessEntry entry, string username, IEnumerable`1<string> roles);
}
public class Umbraco.Core.Services.PublishResult : OperationResult`2<PublishResultType, IContent> {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Property> <InvalidProperties>k__BackingField;
    public IContent Content { get; }
    public IEnumerable`1<Property> InvalidProperties { get; public set; }
    public PublishResult(PublishResultType resultType, EventMessages eventMessages, IContent content);
    public PublishResult(EventMessages eventMessages, IContent content);
    public IContent get_Content();
    [CompilerGeneratedAttribute]
public IEnumerable`1<Property> get_InvalidProperties();
    [CompilerGeneratedAttribute]
public void set_InvalidProperties(IEnumerable`1<Property> value);
}
public enum Umbraco.Core.Services.PublishResultType : Enum {
    public byte value__;
    public static PublishResultType SuccessPublish;
    public static PublishResultType SuccessPublishCulture;
    public static PublishResultType SuccessPublishAlready;
    public static PublishResultType SuccessUnpublish;
    public static PublishResultType SuccessUnpublishAlready;
    public static PublishResultType SuccessUnpublishCulture;
    public static PublishResultType SuccessUnpublishMandatoryCulture;
    public static PublishResultType SuccessUnpublishLastCulture;
    public static PublishResultType SuccessMixedCulture;
    public static PublishResultType FailedPublish;
    public static PublishResultType FailedPublishPathNotPublished;
    public static PublishResultType FailedPublishHasExpired;
    public static PublishResultType FailedPublishAwaitingRelease;
    public static PublishResultType FailedPublishCultureHasExpired;
    public static PublishResultType FailedPublishCultureAwaitingRelease;
    public static PublishResultType FailedPublishIsTrashed;
    public static PublishResultType FailedPublishCancelledByEvent;
    public static PublishResultType FailedPublishContentInvalid;
    public static PublishResultType FailedPublishNothingToPublish;
    public static PublishResultType FailedPublishMandatoryCultureMissing;
    public static PublishResultType FailedPublishConcurrencyViolation;
    public static PublishResultType FailedUnpublish;
    public static PublishResultType FailedUnpublishCancelledByEvent;
}
public class Umbraco.Core.Services.ServiceContext : object {
    private Lazy`1<IPublicAccessService> _publicAccessService;
    private Lazy`1<IDomainService> _domainService;
    private Lazy`1<IAuditService> _auditService;
    private Lazy`1<ILocalizedTextService> _localizedTextService;
    private Lazy`1<ITagService> _tagService;
    private Lazy`1<IContentService> _contentService;
    private Lazy`1<IUserService> _userService;
    private Lazy`1<IMemberService> _memberService;
    private Lazy`1<IMediaService> _mediaService;
    private Lazy`1<IContentTypeService> _contentTypeService;
    private Lazy`1<IMediaTypeService> _mediaTypeService;
    private Lazy`1<IDataTypeService> _dataTypeService;
    private Lazy`1<IFileService> _fileService;
    private Lazy`1<ILocalizationService> _localizationService;
    private Lazy`1<IPackagingService> _packagingService;
    private Lazy`1<IServerRegistrationService> _serverRegistrationService;
    private Lazy`1<IEntityService> _entityService;
    private Lazy`1<IRelationService> _relationService;
    private Lazy`1<IMacroService> _macroService;
    private Lazy`1<IMemberTypeService> _memberTypeService;
    private Lazy`1<IMemberGroupService> _memberGroupService;
    private Lazy`1<INotificationService> _notificationService;
    private Lazy`1<IExternalLoginService> _externalLoginService;
    private Lazy`1<IRedirectUrlService> _redirectUrlService;
    private Lazy`1<IConsentService> _consentService;
    private Lazy`1<IContentTypeBaseServiceProvider> _contentTypeBaseServiceProvider;
    public IPublicAccessService PublicAccessService { get; }
    public IDomainService DomainService { get; }
    public IAuditService AuditService { get; }
    public ILocalizedTextService TextService { get; }
    public INotificationService NotificationService { get; }
    public IServerRegistrationService ServerRegistrationService { get; }
    public ITagService TagService { get; }
    public IMacroService MacroService { get; }
    public IEntityService EntityService { get; }
    public IRelationService RelationService { get; }
    public IContentService ContentService { get; }
    public IContentTypeService ContentTypeService { get; }
    public IMediaTypeService MediaTypeService { get; }
    public IDataTypeService DataTypeService { get; }
    public IFileService FileService { get; }
    public ILocalizationService LocalizationService { get; }
    public IMediaService MediaService { get; }
    public IPackagingService PackagingService { get; }
    public IUserService UserService { get; }
    public IMemberService MemberService { get; }
    public IMemberTypeService MemberTypeService { get; }
    public IMemberGroupService MemberGroupService { get; }
    public IExternalLoginService ExternalLoginService { get; }
    public IRedirectUrlService RedirectUrlService { get; }
    public IConsentService ConsentService { get; }
    public IContentTypeBaseServiceProvider ContentTypeBaseServices { get; }
    public ServiceContext(Lazy`1<IPublicAccessService> publicAccessService, Lazy`1<IDomainService> domainService, Lazy`1<IAuditService> auditService, Lazy`1<ILocalizedTextService> localizedTextService, Lazy`1<ITagService> tagService, Lazy`1<IContentService> contentService, Lazy`1<IUserService> userService, Lazy`1<IMemberService> memberService, Lazy`1<IMediaService> mediaService, Lazy`1<IContentTypeService> contentTypeService, Lazy`1<IMediaTypeService> mediaTypeService, Lazy`1<IDataTypeService> dataTypeService, Lazy`1<IFileService> fileService, Lazy`1<ILocalizationService> localizationService, Lazy`1<IPackagingService> packagingService, Lazy`1<IServerRegistrationService> serverRegistrationService, Lazy`1<IEntityService> entityService, Lazy`1<IRelationService> relationService, Lazy`1<IMacroService> macroService, Lazy`1<IMemberTypeService> memberTypeService, Lazy`1<IMemberGroupService> memberGroupService, Lazy`1<INotificationService> notificationService, Lazy`1<IExternalLoginService> externalLoginService, Lazy`1<IRedirectUrlService> redirectUrlService, Lazy`1<IConsentService> consentService, Lazy`1<IContentTypeBaseServiceProvider> contentTypeBaseServiceProvider);
    public static ServiceContext CreatePartial(IContentService contentService, IMediaService mediaService, IContentTypeService contentTypeService, IMediaTypeService mediaTypeService, IDataTypeService dataTypeService, IFileService fileService, ILocalizationService localizationService, IPackagingService packagingService, IEntityService entityService, IRelationService relationService, IMemberGroupService memberGroupService, IMemberTypeService memberTypeService, IMemberService memberService, IUserService userService, ITagService tagService, INotificationService notificationService, ILocalizedTextService localizedTextService, IAuditService auditService, IDomainService domainService, IMacroService macroService, IPublicAccessService publicAccessService, IExternalLoginService externalLoginService, IServerRegistrationService serverRegistrationService, IRedirectUrlService redirectUrlService, IConsentService consentService, IContentTypeBaseServiceProvider contentTypeBaseServiceProvider);
    public IPublicAccessService get_PublicAccessService();
    public IDomainService get_DomainService();
    public IAuditService get_AuditService();
    public ILocalizedTextService get_TextService();
    public INotificationService get_NotificationService();
    public IServerRegistrationService get_ServerRegistrationService();
    public ITagService get_TagService();
    public IMacroService get_MacroService();
    public IEntityService get_EntityService();
    public IRelationService get_RelationService();
    public IContentService get_ContentService();
    public IContentTypeService get_ContentTypeService();
    public IMediaTypeService get_MediaTypeService();
    public IDataTypeService get_DataTypeService();
    public IFileService get_FileService();
    public ILocalizationService get_LocalizationService();
    public IMediaService get_MediaService();
    public IPackagingService get_PackagingService();
    public IUserService get_UserService();
    public IMemberService get_MemberService();
    public IMemberTypeService get_MemberTypeService();
    public IMemberGroupService get_MemberGroupService();
    public IExternalLoginService get_ExternalLoginService();
    public IRedirectUrlService get_RedirectUrlService();
    public IConsentService get_ConsentService();
    public IContentTypeBaseServiceProvider get_ContentTypeBaseServices();
    [CompilerGeneratedAttribute]
internal static Lazy`1<T> <CreatePartial>g__Lazy|27_0(T service);
}
[ExtensionAttribute]
public static class Umbraco.Core.Services.UserServiceExtensions : object {
    [ExtensionAttribute]
public static EntityPermission GetPermissions(IUserService userService, IUser user, string path);
    [ExtensionAttribute]
public static EntityPermissionCollection GetPermissions(IUserService service, IUserGroup group, bool fallbackToDefaultPermissions, Int32[] nodeIds);
    [ExtensionAttribute]
public static EntityPermissionSet GetPermissionsForPath(IUserService service, IUserGroup group, string path, bool fallbackToDefaultPermissions);
    [ExtensionAttribute]
public static void RemoveUserGroupPermissions(IUserService userService, int groupId, Int32[] entityIds);
    [ExtensionAttribute]
public static void RemoveUserGroupPermissions(IUserService userService, int groupId);
    [ExtensionAttribute]
internal static IUser CreateUserMappingForCustomProvider(IUserService userService, MembershipUser member);
    [ExtensionAttribute]
internal static String[] GetAssignedPermissions(IUserService userService, IUser user, int nodeId);
    [ExtensionAttribute]
internal static IEnumerable`1<IProfile> GetProfilesById(IUserService userService, Int32[] ids);
}
public class Umbraco.Core.Settable`1 : object {
    private T _value;
    [CompilerGeneratedAttribute]
private bool <HasValue>k__BackingField;
    public bool HasValue { get; private set; }
    public T Value { get; }
    public void Set(T value);
    public void Set(Settable`1<T> other);
    public void Clear();
    [CompilerGeneratedAttribute]
public bool get_HasValue();
    [CompilerGeneratedAttribute]
private void set_HasValue(bool value);
    public T get_Value();
    public T ValueOrDefault();
    public T ValueOrDefault(T defaultValue);
    public virtual string ToString();
}
public class Umbraco.Core.SimpleMainDom : object {
    private object _locko;
    private List`1<KeyValuePair`2<int, Action>> _callbacks;
    private bool _isStopping;
    [CompilerGeneratedAttribute]
private bool <IsMainDom>k__BackingField;
    public bool IsMainDom { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsMainDom();
    [CompilerGeneratedAttribute]
private void set_IsMainDom(bool value);
    public sealed virtual bool Register(Action release, int weight);
    public sealed virtual bool Register(Action install, Action release, int weight);
    public void Stop();
}
[ExtensionAttribute]
public static class Umbraco.Core.StringExtensions : object {
    private static char DefaultEscapedStringEscapeChar;
    private static Char[] ToCSharpHexDigitLower;
    private static Char[] ToCSharpEscapeChars;
    internal static Lazy`1<Regex> Whitespace;
    internal static String[] JsonEmpties;
    private static Char[] CleanForXssChars;
    private static Lazy`1<Regex> InvalidXmlChars;
    internal static Guid UrlNamespace;
    private static StringExtensions();
    [ExtensionAttribute]
internal static Int32[] GetIdsFromPathReversed(string path);
    [ExtensionAttribute]
internal static string StripWhitespace(string txt);
    [ExtensionAttribute]
internal static string StripFileExtension(string fileName);
    [ExtensionAttribute]
public static string GetFileExtension(string file);
    [ExtensionAttribute]
internal static Attempt`1<string> DetectIsJavaScriptPath(string input);
    [ExtensionAttribute]
public static bool DetectIsJson(string input);
    [ExtensionAttribute]
internal static bool DetectIsEmptyJson(string input);
    [ExtensionAttribute]
internal static object ConvertToJsonIfPossible(string input);
    [ExtensionAttribute]
internal static string ReplaceNonAlphanumericChars(string input, string replacement);
    [ExtensionAttribute]
internal static string ReplaceNonAlphanumericChars(string input, char replacement);
    [ExtensionAttribute]
public static string CleanForXss(string input, Char[] ignoreFromClean);
    [ExtensionAttribute]
public static string ExceptChars(string str, HashSet`1<char> toExclude);
    [ExtensionAttribute]
internal static Stream GenerateStreamFromString(string s);
    [ExtensionAttribute]
internal static string AppendQueryStringToUrl(string url, String[] queryStrings);
    [ExtensionAttribute]
public static string EncryptWithMachineKey(string value);
    [ExtensionAttribute]
public static string DecryptWithMachineKey(string value);
    [ExtensionAttribute]
public static string MakePluralName(string name);
    [ExtensionAttribute]
public static bool IsVowel(char c);
    [ExtensionAttribute]
public static string Trim(string value, string forRemoving);
    [ExtensionAttribute]
public static string EncodeJsString(string s);
    [ExtensionAttribute]
public static string TrimEnd(string value, string forRemoving);
    [ExtensionAttribute]
public static string TrimStart(string value, string forRemoving);
    [ExtensionAttribute]
public static string EnsureStartsWith(string input, string toStartWith);
    [ExtensionAttribute]
public static string EnsureStartsWith(string input, char value);
    [ExtensionAttribute]
public static string EnsureEndsWith(string input, char value);
    [ExtensionAttribute]
public static string EnsureEndsWith(string input, string toEndWith);
    [ExtensionAttribute]
public static bool IsLowerCase(char ch);
    [ExtensionAttribute]
public static bool IsUpperCase(char ch);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string value);
    [ExtensionAttribute]
public static string IfNullOrWhiteSpace(string str, string defaultValue);
    [ExtensionAttribute]
public static IList`1<string> ToDelimitedList(string list, string delimiter);
    [ExtensionAttribute]
public static bool EnumTryParse(string strType, bool ignoreCase, T& result);
    [ExtensionAttribute]
public static T EnumParse(string strType, bool ignoreCase);
    [ExtensionAttribute]
public static string StripHtml(string text);
    [ExtensionAttribute]
public static Guid EncodeAsGuid(string input);
    [ExtensionAttribute]
public static string ConvertToHex(string input);
    [ExtensionAttribute]
public static string DecodeFromHex(string hexValue);
    [ExtensionAttribute]
public static string ToUrlBase64(string input);
    [ExtensionAttribute]
public static string FromUrlBase64(string input);
    [ExtensionAttribute]
public static string InvariantFormat(string format, Object[] args);
    [ExtensionAttribute]
public static string ToInvariantString(int str);
    [ExtensionAttribute]
public static string ToInvariantString(long str);
    [ExtensionAttribute]
public static bool InvariantEquals(string compare, string compareTo);
    [ExtensionAttribute]
public static bool InvariantStartsWith(string compare, string compareTo);
    [ExtensionAttribute]
public static bool InvariantEndsWith(string compare, string compareTo);
    [ExtensionAttribute]
public static bool InvariantContains(string compare, string compareTo);
    [ExtensionAttribute]
public static bool InvariantContains(IEnumerable`1<string> compare, string compareTo);
    [ExtensionAttribute]
public static int InvariantIndexOf(string s, string value);
    [ExtensionAttribute]
public static int InvariantLastIndexOf(string s, string value);
    [ExtensionAttribute]
public static T ParseInto(string val);
    [ExtensionAttribute]
public static object ParseInto(string val, Type type);
    [ExtensionAttribute]
public static string GenerateHash(string str);
    [ExtensionAttribute]
internal static string GenerateHash(string str);
    [ExtensionAttribute]
internal static string GenerateHash(string str, string hashType);
    internal static Byte[] UrlTokenDecode(string input);
    internal static string UrlTokenEncode(Byte[] input);
    [ExtensionAttribute]
public static string NormaliseDirectoryPath(string currentFolder);
    [ExtensionAttribute]
public static string Truncate(string text, int maxLength, string suffix);
    [ExtensionAttribute]
public static string StripNewLines(string input);
    [ExtensionAttribute]
public static string ToSingleLine(string text);
    [ExtensionAttribute]
public static string OrIfNullOrWhiteSpace(string input, string alternative);
    [ExtensionAttribute]
public static string ToFirstUpper(string input);
    [ExtensionAttribute]
public static string ToFirstLower(string input);
    [ExtensionAttribute]
public static string ToFirstUpper(string input, CultureInfo culture);
    [ExtensionAttribute]
public static string ToFirstLower(string input, CultureInfo culture);
    [ExtensionAttribute]
public static string ToFirstUpperInvariant(string input);
    [ExtensionAttribute]
public static string ToFirstLowerInvariant(string input);
    [ExtensionAttribute]
public static string ReplaceMany(string text, IDictionary`2<string, string> replacements);
    [ExtensionAttribute]
public static string ReplaceMany(string text, Char[] chars, char replacement);
    [ExtensionAttribute]
public static string ToSafeAlias(string alias);
    [ExtensionAttribute]
public static string ToSafeAlias(string alias, bool camel);
    [ExtensionAttribute]
public static string ToSafeAlias(string alias, string culture);
    [ExtensionAttribute]
public static string ToUrlSegment(string text);
    [ExtensionAttribute]
public static string ToUrlSegment(string text, string culture);
    [ExtensionAttribute]
public static string ToCleanString(string text, CleanStringType stringType);
    [ExtensionAttribute]
public static string ToCleanString(string text, CleanStringType stringType, char separator);
    [ExtensionAttribute]
public static string ToCleanString(string text, CleanStringType stringType, string culture);
    [ExtensionAttribute]
public static string ToCleanString(string text, CleanStringType stringType, char separator, string culture);
    [ExtensionAttribute]
public static string SplitPascalCasing(string phrase);
    [ExtensionAttribute]
internal static string SpaceCamelCasing(string phrase);
    [ExtensionAttribute]
public static string ToSafeFileName(string text);
    [ExtensionAttribute]
public static string ToSafeFileName(string text, string culture);
    [ExtensionAttribute]
public static string Replace(string source, string oldString, string newString, StringComparison stringComparison);
    [ExtensionAttribute]
public static string ToCSharpString(string s);
    [ExtensionAttribute]
public static string EscapeRegexSpecialCharacters(string text);
    [ExtensionAttribute]
public static bool ContainsAny(string haystack, IEnumerable`1<string> needles, StringComparison comparison);
    [ExtensionAttribute]
public static bool CsvContains(string csv, string value);
    [ExtensionAttribute]
public static string ToFriendlyName(string fileName);
    [ExtensionAttribute]
internal static string ToValidXmlString(string text);
    [ExtensionAttribute]
internal static Guid ToGuid(string text);
    internal static Guid CreateGuidFromHash(Guid namespaceId, string name, int version);
    internal static void SwapByteOrder(Byte[] guid);
    private static void SwapBytes(Byte[] guid, int left, int right);
    [ExtensionAttribute]
public static string NullOrWhiteSpaceAsNull(string text);
    [IteratorStateMachineAttribute("Umbraco.Core.StringExtensions/<EscapedSplit>d__103")]
[ExtensionAttribute]
public static IEnumerable`1<string> EscapedSplit(string value, char splitChar, char escapeChar);
}
[FlagsAttribute]
public enum Umbraco.Core.Strings.CleanStringType : Enum {
    public int value__;
    public static CleanStringType None;
    public static CleanStringType CaseMask;
    public static CleanStringType PascalCase;
    public static CleanStringType CamelCase;
    public static CleanStringType Unchanged;
    public static CleanStringType LowerCase;
    public static CleanStringType UpperCase;
    public static CleanStringType UmbracoCase;
    public static CleanStringType CodeMask;
    public static CleanStringType Utf8;
    public static CleanStringType Ascii;
    public static CleanStringType TryAscii;
    public static CleanStringType RoleMask;
    public static CleanStringType UrlSegment;
    public static CleanStringType Alias;
    public static CleanStringType FileName;
    public static CleanStringType ConvertCase;
    public static CleanStringType UnderscoreAlias;
}
[ExtensionAttribute]
internal static class Umbraco.Core.Strings.ContentBaseExtensions : object {
    [ExtensionAttribute]
public static string GetUrlSegment(IContentBase content, IEnumerable`1<IUrlSegmentProvider> urlSegmentProviders, string culture);
}
internal class Umbraco.Core.Strings.Css.StylesheetHelper : object {
    private static string RuleRegexFormat;
    public static IEnumerable`1<StylesheetRule> ParseRules(string input);
    public static string ReplaceRule(string input, string oldRuleName, StylesheetRule rule);
    public static string AppendRule(string input, StylesheetRule rule);
}
internal class Umbraco.Core.Strings.Css.StylesheetRule : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Styles>k__BackingField;
    public string Name { get; public set; }
    public string Selector { get; public set; }
    public string Styles { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
public void set_Selector(string value);
    [CompilerGeneratedAttribute]
public string get_Styles();
    [CompilerGeneratedAttribute]
public void set_Styles(string value);
    public virtual string ToString();
}
public class Umbraco.Core.Strings.DefaultShortStringHelper : object {
    private DefaultShortStringHelperConfig _config;
    private static Char[] InvalidFileNameChars;
    private static byte StateBreak;
    private static byte StateUp;
    private static byte StateWord;
    private static byte StateAcronym;
    public DefaultShortStringHelper(IUmbracoSettingsSection settings);
    public DefaultShortStringHelper(DefaultShortStringHelperConfig config);
    private static DefaultShortStringHelper();
    public static bool IsValidFileNameChar(char c);
    public virtual string CleanStringForSafeAlias(string text);
    public virtual string CleanStringForSafeAlias(string text, string culture);
    public virtual string CleanStringForUrlSegment(string text);
    public virtual string CleanStringForUrlSegment(string text, string culture);
    public virtual string CleanStringForSafeFileName(string text);
    public virtual string CleanStringForSafeFileName(string text, string culture);
    public sealed virtual string CleanString(string text, CleanStringType stringType);
    public sealed virtual string CleanString(string text, CleanStringType stringType, char separator);
    public sealed virtual string CleanString(string text, CleanStringType stringType, string culture);
    public sealed virtual string CleanString(string text, CleanStringType stringType, char separator, string culture);
    protected virtual string CleanString(string text, CleanStringType stringType, string culture, Nullable`1<char> separator);
    private static string RemoveSurrogatePairs(string text);
    internal string CleanCodeString(string text, CleanStringType caseType, char separator, string culture, Config config);
    internal void CopyTerm(string input, int ipos, Char[] output, Int32& opos, int len, CleanStringType caseType, string culture, bool isAcronym);
    public virtual string SplitPascalCasing(string text, char separator);
}
public class Umbraco.Core.Strings.DefaultShortStringHelperConfig : object {
    private Dictionary`2<string, Dictionary`2<CleanStringType, Config>> _configs;
    [CompilerGeneratedAttribute]
private string <DefaultCulture>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <UrlReplaceCharacters>k__BackingField;
    public string DefaultCulture { get; public set; }
    public Dictionary`2<string, string> UrlReplaceCharacters { get; public set; }
    public DefaultShortStringHelperConfig Clone();
    [CompilerGeneratedAttribute]
public string get_DefaultCulture();
    [CompilerGeneratedAttribute]
public void set_DefaultCulture(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_UrlReplaceCharacters();
    [CompilerGeneratedAttribute]
public void set_UrlReplaceCharacters(Dictionary`2<string, string> value);
    public DefaultShortStringHelperConfig WithConfig(Config config);
    public DefaultShortStringHelperConfig WithConfig(CleanStringType stringRole, Config config);
    public DefaultShortStringHelperConfig WithConfig(string culture, CleanStringType stringRole, Config config);
    public DefaultShortStringHelperConfig WithDefault(IUmbracoSettingsSection umbracoSettings);
    internal Config For(CleanStringType stringType, string culture);
    public string ApplyUrlReplaceCharacters(string s);
    public static string CutMaxLength(string text, int length);
}
public class Umbraco.Core.Strings.DefaultUrlSegmentProvider : object {
    public sealed virtual string GetUrlSegment(IContentBase content, string culture);
    private static string GetUrlSegmentSource(IContentBase content, string culture);
}
internal class Umbraco.Core.Strings.Diff : object {
    public static Item[] DiffText(string textA, string textB);
    public static Item[] DiffText1(string textA, string textB);
    public static Item[] DiffText(string textA, string textB, bool trimSpace, bool ignoreSpace, bool ignoreCase);
    private static Int32[] DiffCharCodes(string aText, bool ignoreCase);
    private static void Optimize(DiffData data);
    public static Item[] DiffInt(Int32[] arrayA, Int32[] arrayB);
    private static Int32[] DiffCodes(string aText, IDictionary h, bool trimSpace, bool ignoreSpace, bool ignoreCase);
    private static Smsrd Sms(DiffData dataA, int lowerA, int upperA, DiffData dataB, int lowerB, int upperB, Int32[] downVector, Int32[] upVector);
    private static void Lcs(DiffData dataA, int lowerA, int upperA, DiffData dataB, int lowerB, int upperB, Int32[] downVector, Int32[] upVector);
    private static Item[] CreateDiffs(DiffData dataA, DiffData dataB);
}
public interface Umbraco.Core.Strings.IShortStringHelper {
    public abstract virtual string CleanStringForSafeAlias(string text);
    public abstract virtual string CleanStringForSafeAlias(string text, string culture);
    public abstract virtual string CleanStringForUrlSegment(string text);
    public abstract virtual string CleanStringForUrlSegment(string text, string culture);
    public abstract virtual string CleanStringForSafeFileName(string text);
    public abstract virtual string CleanStringForSafeFileName(string text, string culture);
    public abstract virtual string SplitPascalCasing(string text, char separator);
    public abstract virtual string CleanString(string text, CleanStringType stringType);
    public abstract virtual string CleanString(string text, CleanStringType stringType, char separator);
    public abstract virtual string CleanString(string text, CleanStringType stringType, string culture);
    public abstract virtual string CleanString(string text, CleanStringType stringType, char separator, string culture);
}
public interface Umbraco.Core.Strings.IUrlSegmentProvider {
    public abstract virtual string GetUrlSegment(IContentBase content, string culture);
}
public class Umbraco.Core.Strings.UrlSegmentProviderCollection : BuilderCollectionBase`1<IUrlSegmentProvider> {
    public UrlSegmentProviderCollection(IEnumerable`1<IUrlSegmentProvider> items);
}
public class Umbraco.Core.Strings.UrlSegmentProviderCollectionBuilder : OrderedCollectionBuilderBase`3<UrlSegmentProviderCollectionBuilder, UrlSegmentProviderCollection, IUrlSegmentProvider> {
    protected UrlSegmentProviderCollectionBuilder This { get; }
    protected virtual UrlSegmentProviderCollectionBuilder get_This();
}
internal static class Umbraco.Core.Strings.Utf8ToAsciiConverter : object {
    public static string ToAsciiString(string text, char fail);
    public static Char[] ToAsciiCharArray(string text, char fail);
    private static int ToAscii(Char[] input, Char[] output, char fail);
    private static void ToAscii(Char[] input, int ipos, Char[] output, Int32& opos, char fail);
}
[TypeConverterAttribute("Umbraco.Core.UdiTypeConverter")]
public class Umbraco.Core.StringUdi : Udi {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    public string Id { get; private set; }
    public bool IsRoot { get; }
    public StringUdi(string entityType, string id);
    public StringUdi(Uri uriValue);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    private static string EscapeUriString(string s);
    public static StringUdi Parse(string s);
    public static bool TryParse(string s, StringUdi& udi);
    public virtual bool get_IsRoot();
    public StringUdi EnsureClosed();
}
public static class Umbraco.Core.Sync.ApplicationUrlHelper : object {
    private static Type TypeOfApplicationUrlHelper;
    [CompilerGeneratedAttribute]
private static Func`2<HttpRequestBase, string> <ApplicationUrlProvider>k__BackingField;
    public static Func`2<HttpRequestBase, string> ApplicationUrlProvider { get; public set; }
    private static ApplicationUrlHelper();
    [CompilerGeneratedAttribute]
public static Func`2<HttpRequestBase, string> get_ApplicationUrlProvider();
    [CompilerGeneratedAttribute]
public static void set_ApplicationUrlProvider(Func`2<HttpRequestBase, string> value);
    internal static string GetApplicationUrl(ILogger logger, IGlobalSettings globalSettings, IUmbracoSettingsSection settings, IServerRegistrar serverRegistrar, HttpRequestBase request);
    internal static string TryGetApplicationUrl(IUmbracoSettingsSection settings, ILogger logger, IGlobalSettings globalSettings, IServerRegistrar serverRegistrar);
    public static string GetApplicationUrlFromCurrentRequest(HttpRequestBase request, IGlobalSettings globalSettings);
    public static Uri GetApplicationUriUncached(HttpRequestBase request, IUmbracoSettingsSection umbracoSettingsSection, IGlobalSettings globalSettings);
}
public class Umbraco.Core.Sync.DatabaseServerMessenger : ServerMessengerBase {
    private IRuntimeState _runtime;
    private ManualResetEvent _syncIdle;
    private object _locko;
    private IProfilingLogger _profilingLogger;
    private ISqlContext _sqlContext;
    private Lazy`1<string> _distCacheFilePath;
    private int _lastId;
    private DateTime _lastSync;
    private DateTime _lastPruned;
    private bool _syncing;
    private bool _released;
    private Lazy`1<SyncBootState> _getSyncBootState;
    [CompilerGeneratedAttribute]
private DatabaseServerMessengerOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IScopeProvider <ScopeProvider>k__BackingField;
    protected static string LocalIdentity;
    public DatabaseServerMessengerOptions Options { get; }
    protected ILogger Logger { get; }
    protected IScopeProvider ScopeProvider { get; }
    private string DistCacheFilePath { get; }
    public DatabaseServerMessenger(IRuntimeState runtime, IScopeProvider scopeProvider, ISqlContext sqlContext, IProfilingLogger proflog, IGlobalSettings globalSettings, bool distributedEnabled, DatabaseServerMessengerOptions options);
    private static DatabaseServerMessenger();
    [CompilerGeneratedAttribute]
public DatabaseServerMessengerOptions get_Options();
    [CompilerGeneratedAttribute]
protected ILogger get_Logger();
    [CompilerGeneratedAttribute]
protected IScopeProvider get_ScopeProvider();
    protected Sql`1<ISqlContext> Sql();
    private string get_DistCacheFilePath();
    protected virtual bool RequiresDistributed(ICacheRefresher refresher, MessageType dispatchType);
    protected virtual void DeliverRemote(ICacheRefresher refresher, MessageType messageType, IEnumerable`1<object> ids, string json);
    [ObsoleteAttribute("This is no longer used and will be removed in future versions")]
protected void Boot();
    private SyncBootState BootInternal();
    private SyncBootState Initialize(IUmbracoDatabase database);
    protected internal void Sync();
    private void ProcessDatabaseInstructions(IUmbracoDatabase database);
    private bool ProcessDatabaseInstructions(IReadOnlyCollection`1<RefreshInstruction> instructionBatch, CacheInstructionDto dto, HashSet`1<RefreshInstruction> processed, Int32& lastId);
    private void PruneOldInstructions(IUmbracoDatabase database);
    private void EnsureInstructions(IUmbracoDatabase database);
    private void ReadLastSynced();
    private void SaveLastSynced(int id);
    private static int GetProcessId();
    private string GetDistCacheFilePath(IGlobalSettings globalSettings);
    public virtual SyncBootState GetSyncBootState();
    private static ICacheRefresher GetRefresher(Guid id);
    private static IJsonCacheRefresher GetJsonRefresher(Guid id);
    private static IJsonCacheRefresher GetJsonRefresher(ICacheRefresher refresher);
    private static List`1<RefreshInstruction> GetAllInstructions(IEnumerable`1<JToken> jsonArray);
    private bool NotifyRefreshers(IEnumerable`1<RefreshInstruction> instructions, HashSet`1<RefreshInstruction> processed);
    private static void RefreshAll(Guid uniqueIdentifier);
    private static void RefreshByGuid(Guid uniqueIdentifier, Guid id);
    private static void RefreshById(Guid uniqueIdentifier, int id);
    private static void RefreshByIds(Guid uniqueIdentifier, string jsonIds);
    private static void RefreshByJson(Guid uniqueIdentifier, string jsonPayload);
    private static void RemoveById(Guid uniqueIdentifier, int id);
    [CompilerGeneratedAttribute]
private void <BootInternal>b__28_0();
}
public class Umbraco.Core.Sync.DatabaseServerMessengerOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxProcessingInstructionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Action> <InitializingCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DaysToRetainInstructions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThrottleSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PruneThrottleSeconds>k__BackingField;
    public int MaxProcessingInstructionCount { get; public set; }
    [ObsoleteAttribute("This should not be used. If initialization calls need to be invoked on a cold boot, use the ISyncBootStateAccessor.Booting event.")]
[EditorBrowsableAttribute("1")]
public IEnumerable`1<Action> InitializingCallbacks { get; public set; }
    public int DaysToRetainInstructions { get; public set; }
    public int ThrottleSeconds { get; public set; }
    public int PruneThrottleSeconds { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxProcessingInstructionCount();
    [CompilerGeneratedAttribute]
public void set_MaxProcessingInstructionCount(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Action> get_InitializingCallbacks();
    [CompilerGeneratedAttribute]
public void set_InitializingCallbacks(IEnumerable`1<Action> value);
    [CompilerGeneratedAttribute]
public int get_DaysToRetainInstructions();
    [CompilerGeneratedAttribute]
public void set_DaysToRetainInstructions(int value);
    [CompilerGeneratedAttribute]
public int get_ThrottleSeconds();
    [CompilerGeneratedAttribute]
public void set_ThrottleSeconds(int value);
    [CompilerGeneratedAttribute]
public int get_PruneThrottleSeconds();
    [CompilerGeneratedAttribute]
public void set_PruneThrottleSeconds(int value);
}
public class Umbraco.Core.Sync.DatabaseServerRegistrar : object {
    private Lazy`1<IServerRegistrationService> _registrationService;
    [CompilerGeneratedAttribute]
private DatabaseServerRegistrarOptions <Options>k__BackingField;
    public DatabaseServerRegistrarOptions Options { get; }
    public IEnumerable`1<IServerAddress> Registrations { get; }
    public DatabaseServerRegistrar(Lazy`1<IServerRegistrationService> registrationService, DatabaseServerRegistrarOptions options);
    [CompilerGeneratedAttribute]
public DatabaseServerRegistrarOptions get_Options();
    public sealed virtual IEnumerable`1<IServerAddress> get_Registrations();
    public sealed virtual ServerRole GetCurrentServerRole();
    public sealed virtual string GetCurrentServerUmbracoApplicationUrl();
}
public class Umbraco.Core.Sync.DatabaseServerRegistrarOptions : object {
    [CompilerGeneratedAttribute]
private int <RecurringSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StaleServerTimeout>k__BackingField;
    public int RecurringSeconds { get; public set; }
    public TimeSpan StaleServerTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RecurringSeconds();
    [CompilerGeneratedAttribute]
public void set_RecurringSeconds(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StaleServerTimeout();
    [CompilerGeneratedAttribute]
public void set_StaleServerTimeout(TimeSpan value);
}
public interface Umbraco.Core.Sync.IServerAddress {
    public string ServerAddress { get; }
    public abstract virtual string get_ServerAddress();
}
public interface Umbraco.Core.Sync.IServerMessenger {
    public abstract virtual void PerformRefresh(ICacheRefresher refresher, TPayload[] payload);
    public abstract virtual void PerformRefresh(ICacheRefresher refresher, string jsonPayload);
    public abstract virtual void PerformRefresh(ICacheRefresher refresher, Func`2<T, int> getNumericId, T[] instances);
    public abstract virtual void PerformRefresh(ICacheRefresher refresher, Func`2<T, Guid> getGuidId, T[] instances);
    public abstract virtual void PerformRemove(ICacheRefresher refresher, Func`2<T, int> getNumericId, T[] instances);
    public abstract virtual void PerformRemove(ICacheRefresher refresher, Int32[] numericIds);
    public abstract virtual void PerformRefresh(ICacheRefresher refresher, Int32[] numericIds);
    public abstract virtual void PerformRefresh(ICacheRefresher refresher, Guid[] guidIds);
    public abstract virtual void PerformRefreshAll(ICacheRefresher refresher);
}
public interface Umbraco.Core.Sync.IServerRegistrar {
    public IEnumerable`1<IServerAddress> Registrations { get; }
    public abstract virtual IEnumerable`1<IServerAddress> get_Registrations();
    public abstract virtual ServerRole GetCurrentServerRole();
    public abstract virtual string GetCurrentServerUmbracoApplicationUrl();
}
public interface Umbraco.Core.Sync.ISyncBootStateAccessor {
    public abstract virtual SyncBootState GetSyncBootState();
}
public enum Umbraco.Core.Sync.MessageType : Enum {
    public int value__;
    public static MessageType RefreshAll;
    public static MessageType RefreshById;
    public static MessageType RefreshByJson;
    public static MessageType RemoveById;
    public static MessageType RefreshByInstance;
    public static MessageType RemoveByInstance;
    public static MessageType RefreshByPayload;
}
public class Umbraco.Core.Sync.NonRuntimeLevelBootStateAccessor : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<SyncBootState> Booting;
    [CompilerGeneratedAttribute]
public void add_Booting(EventHandler`1<SyncBootState> value);
    [CompilerGeneratedAttribute]
public void remove_Booting(EventHandler`1<SyncBootState> value);
    public sealed virtual SyncBootState GetSyncBootState();
}
public class Umbraco.Core.Sync.RefreshInstruction : object {
    [CompilerGeneratedAttribute]
private RefreshMethodType <RefreshType>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RefresherId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <GuidId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IntId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonIds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <JsonIdCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JsonPayload>k__BackingField;
    public RefreshMethodType RefreshType { get; public set; }
    public Guid RefresherId { get; public set; }
    public Guid GuidId { get; public set; }
    public int IntId { get; public set; }
    public string JsonIds { get; public set; }
    public int JsonIdCount { get; public set; }
    public string JsonPayload { get; public set; }
    public RefreshInstruction(Guid refresherId, RefreshMethodType refreshType, Guid guidId, int intId, string jsonIds, string jsonPayload);
    private RefreshInstruction(ICacheRefresher refresher, RefreshMethodType refreshType);
    private RefreshInstruction(ICacheRefresher refresher, RefreshMethodType refreshType, Guid guidId);
    private RefreshInstruction(ICacheRefresher refresher, RefreshMethodType refreshType, int intId);
    private RefreshInstruction(ICacheRefresher refresher, RefreshMethodType refreshType, string json, int idCount);
    public static IEnumerable`1<RefreshInstruction> GetInstructions(ICacheRefresher refresher, MessageType messageType, IEnumerable`1<object> ids, Type idType, string json);
    [CompilerGeneratedAttribute]
public RefreshMethodType get_RefreshType();
    [CompilerGeneratedAttribute]
public void set_RefreshType(RefreshMethodType value);
    [CompilerGeneratedAttribute]
public Guid get_RefresherId();
    [CompilerGeneratedAttribute]
public void set_RefresherId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_GuidId();
    [CompilerGeneratedAttribute]
public void set_GuidId(Guid value);
    [CompilerGeneratedAttribute]
public int get_IntId();
    [CompilerGeneratedAttribute]
public void set_IntId(int value);
    [CompilerGeneratedAttribute]
public string get_JsonIds();
    [CompilerGeneratedAttribute]
public void set_JsonIds(string value);
    [CompilerGeneratedAttribute]
public int get_JsonIdCount();
    [CompilerGeneratedAttribute]
public void set_JsonIdCount(int value);
    [CompilerGeneratedAttribute]
public string get_JsonPayload();
    [CompilerGeneratedAttribute]
public void set_JsonPayload(string value);
    protected bool Equals(RefreshInstruction other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(RefreshInstruction left, RefreshInstruction right);
    public static bool op_Inequality(RefreshInstruction left, RefreshInstruction right);
}
public class Umbraco.Core.Sync.RefreshInstructionEnvelope : object {
    [CompilerGeneratedAttribute]
private ICacheRefresher <Refresher>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<RefreshInstruction> <Instructions>k__BackingField;
    public ICacheRefresher Refresher { get; public set; }
    public IEnumerable`1<RefreshInstruction> Instructions { get; public set; }
    public RefreshInstructionEnvelope(ICacheRefresher refresher, IEnumerable`1<RefreshInstruction> instructions);
    [CompilerGeneratedAttribute]
public ICacheRefresher get_Refresher();
    [CompilerGeneratedAttribute]
public void set_Refresher(ICacheRefresher value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<RefreshInstruction> get_Instructions();
    [CompilerGeneratedAttribute]
public void set_Instructions(IEnumerable`1<RefreshInstruction> value);
}
public enum Umbraco.Core.Sync.RefreshMethodType : Enum {
    public int value__;
    public static RefreshMethodType RefreshAll;
    public static RefreshMethodType RefreshByGuid;
    public static RefreshMethodType RefreshById;
    public static RefreshMethodType RefreshByIds;
    public static RefreshMethodType RefreshByJson;
    public static RefreshMethodType RemoveById;
}
public abstract class Umbraco.Core.Sync.ServerMessengerBase : object {
    [CompilerGeneratedAttribute]
private bool <DistributedEnabled>k__BackingField;
    protected bool DistributedEnabled { get; protected set; }
    protected ServerMessengerBase(bool distributedEnabled);
    [CompilerGeneratedAttribute]
protected bool get_DistributedEnabled();
    [CompilerGeneratedAttribute]
protected void set_DistributedEnabled(bool value);
    protected virtual bool RequiresDistributed(ICacheRefresher refresher, MessageType messageType);
    protected static bool GetArrayType(IEnumerable`1<object> ids, Type& arrayType);
    public sealed virtual void PerformRefresh(ICacheRefresher refresher, TPayload[] payload);
    public sealed virtual void PerformRefresh(ICacheRefresher refresher, string jsonPayload);
    public sealed virtual void PerformRefresh(ICacheRefresher refresher, Func`2<T, int> getNumericId, T[] instances);
    public sealed virtual void PerformRefresh(ICacheRefresher refresher, Func`2<T, Guid> getGuidId, T[] instances);
    public sealed virtual void PerformRemove(ICacheRefresher refresher, Func`2<T, int> getNumericId, T[] instances);
    public sealed virtual void PerformRemove(ICacheRefresher refresher, Int32[] numericIds);
    public sealed virtual void PerformRefresh(ICacheRefresher refresher, Int32[] numericIds);
    public sealed virtual void PerformRefresh(ICacheRefresher refresher, Guid[] guidIds);
    public sealed virtual void PerformRefreshAll(ICacheRefresher refresher);
    protected void DeliverLocal(ICacheRefresher refresher, TPayload[] payload);
    protected void DeliverLocal(ICacheRefresher refresher, MessageType messageType, IEnumerable`1<object> ids, string json);
    protected void DeliverLocal(ICacheRefresher refresher, MessageType messageType, Func`2<T, object> getId, IEnumerable`1<T> instances);
    protected abstract virtual void DeliverRemote(ICacheRefresher refresher, MessageType messageType, IEnumerable`1<object> ids, string json);
    protected virtual void Deliver(ICacheRefresher refresher, TPayload[] payload);
    protected virtual void Deliver(ICacheRefresher refresher, MessageType messageType, IEnumerable`1<object> ids, string json);
    protected virtual void Deliver(ICacheRefresher refresher, MessageType messageType, Func`2<T, object> getId, IEnumerable`1<T> instances);
}
public enum Umbraco.Core.Sync.ServerRole : Enum {
    public byte value__;
    public static ServerRole Unknown;
    public static ServerRole Single;
    public static ServerRole Replica;
    public static ServerRole Master;
}
public class Umbraco.Core.Sync.SingleServerRegistrar : object {
    private IRuntimeState _runtime;
    private Lazy`1<IServerAddress[]> _registrations;
    public IEnumerable`1<IServerAddress> Registrations { get; }
    public SingleServerRegistrar(IRuntimeState runtime);
    public sealed virtual IEnumerable`1<IServerAddress> get_Registrations();
    public sealed virtual ServerRole GetCurrentServerRole();
    public sealed virtual string GetCurrentServerUmbracoApplicationUrl();
    [CompilerGeneratedAttribute]
private IServerAddress[] <.ctor>b__4_0();
}
public enum Umbraco.Core.Sync.SyncBootState : Enum {
    public int value__;
    public static SyncBootState Unknown;
    public static SyncBootState ColdBoot;
    public static SyncBootState WarmBoot;
}
internal class Umbraco.Core.SystemLock : object {
    private SemaphoreSlim _semaphore;
    private Semaphore _semaphore2;
    private IDisposable _releaser;
    private Task`1<IDisposable> _releaserTask;
    public SystemLock(string name);
    private IDisposable CreateReleaser();
    public IDisposable Lock();
    public IDisposable Lock(int millisecondsTimeout);
}
public static class Umbraco.Core.SystemUtilities : object {
    private static bool _knowTrustLevel;
    private static AspNetHostingPermissionLevel _trustLevel;
    public static AspNetHostingPermissionLevel GetCurrentTrustLevel();
}
public interface Umbraco.Core.Telemetry.ISiteIdentifierService {
    public abstract virtual bool TryGetSiteIdentifier(Guid& siteIdentifier);
    public abstract virtual bool TryGetOrCreateSiteIdentifier(Guid& siteIdentifier);
    public abstract virtual bool TryCreateSiteIdentifier(Guid& createdGuid);
}
public interface Umbraco.Core.Telemetry.ITelemetryService {
    public abstract virtual bool TryGetTelemetryReportData(TelemetryReportData& telemetryReportData);
}
[DataContractAttribute]
public class Umbraco.Core.Telemetry.Models.PackageTelemetry : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[DataContractAttribute]
public class Umbraco.Core.Telemetry.Models.TelemetryReportData : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PackageTelemetry> <Packages>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<PackageTelemetry> Packages { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<PackageTelemetry> get_Packages();
    [CompilerGeneratedAttribute]
public void set_Packages(IEnumerable`1<PackageTelemetry> value);
}
internal class Umbraco.Core.Telemetry.TelemetryService : object {
    private ISiteIdentifierService _siteIdentifierService;
    private ManifestParser _manifestParser;
    public TelemetryService(ManifestParser manifestParser, ISiteIdentifierService siteIdentifierService);
    public sealed virtual bool TryGetTelemetryReportData(TelemetryReportData& telemetryReportData);
    private IEnumerable`1<PackageTelemetry> GetPackageTelemetry();
}
[ExtensionAttribute]
internal static class Umbraco.Core.ThreadExtensions : object {
    [ExtensionAttribute]
public static void SanitizeThreadCulture(Thread thread);
}
[ExtensionAttribute]
public static class Umbraco.Core.TypeExtensions : object {
    [ExtensionAttribute]
internal static Attempt`1<object> GetMemberIgnoreCase(Type type, object target, string memberName);
    [ExtensionAttribute]
public static object GetDefaultValue(Type t);
    [ExtensionAttribute]
internal static MethodInfo GetGenericMethod(Type type, string name, Type[] parameterTypes);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static T GetCustomAttribute(Type type, bool inherit);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetCustomAttributes(Type type, bool inherited);
    [ExtensionAttribute]
internal static bool HasParameters(MethodInfo method, Type[] parameterTypes);
    [IteratorStateMachineAttribute("Umbraco.Core.TypeExtensions/<GetBaseTypes>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type, bool andSelf);
    [ExtensionAttribute]
public static IEnumerable`1<MethodInfo> AllMethods(Type target);
    [ExtensionAttribute]
public static bool IsEnumerable(Type type);
    [ExtensionAttribute]
public static bool IsOfGenericType(Type type, Type genericType);
    [ExtensionAttribute]
public static bool TryGetGenericArguments(Type type, Type genericType, Type[]& genericArgType);
    [ExtensionAttribute]
public static PropertyInfo[] GetAllProperties(Type type);
    [ExtensionAttribute]
public static PropertyInfo[] GetPublicProperties(Type type);
    [ExtensionAttribute]
public static bool IsType(Type actualType);
    [ExtensionAttribute]
public static bool Inherits(Type type);
    [ExtensionAttribute]
public static bool Inherits(Type type, Type tbase);
    [ExtensionAttribute]
public static bool Implements(Type type);
    [ExtensionAttribute]
public static TAttribute FirstAttribute(Type type);
    [ExtensionAttribute]
public static TAttribute FirstAttribute(Type type, bool inherit);
    [ExtensionAttribute]
public static TAttribute FirstAttribute(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static TAttribute FirstAttribute(PropertyInfo propertyInfo, bool inherit);
    [ExtensionAttribute]
public static IEnumerable`1<TAttribute> MultipleAttribute(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IEnumerable`1<TAttribute> MultipleAttribute(PropertyInfo propertyInfo, bool inherit);
    [ExtensionAttribute]
public static string GetFullNameWithAssembly(Type type);
    [ExtensionAttribute]
public static bool IsAssignableFromGtd(Type type, Type c);
    [ExtensionAttribute]
internal static Type GetEnumeratedType(Type type);
}
[ExtensionAttribute]
internal static class Umbraco.Core.TypeLoaderExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetDataEditors(TypeLoader mgr);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetCacheRefreshers(TypeLoader mgr);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetPackageActions(TypeLoader mgr);
}
[TypeConverterAttribute("Umbraco.Core.UdiTypeConverter")]
public abstract class Umbraco.Core.Udi : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _scanned;
    private static object ScanLocker;
    private static ConcurrentDictionary`2<string, UdiType> _udiTypes;
    private static ConcurrentDictionary`2<string, Udi> RootUdis;
    internal Uri UriValue;
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    public string EntityType { get; private set; }
    public bool IsRoot { get; }
    protected Udi(string entityType, string stringValue);
    protected Udi(Uri uriValue);
    private static Udi();
    internal static void ResetUdiTypes();
    [CompilerGeneratedAttribute]
public string get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(string value);
    public sealed virtual int CompareTo(Udi other);
    public virtual string ToString();
    public static Udi Parse(string s);
    public static Udi Parse(string s, bool knownTypes);
    public static bool TryParse(string s, Udi& udi);
    public static bool TryParse(string s, bool knownTypes, Udi& udi);
    private static bool ParseInternal(string s, bool tryParse, bool knownTypes, Udi& udi);
    private static Udi GetRootUdi(string entityType);
    private static void EnsureScanForUdiTypes();
    public static Udi Create(string entityType);
    public static Udi Create(string entityType, string id);
    public static Udi Create(string entityType, Guid id);
    internal static Udi Create(Uri uri);
    public void EnsureType(String[] validTypes);
    public abstract virtual bool get_IsRoot();
    public Udi EnsureNotRoot();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Udi udi1, Udi udi2);
    public static bool op_Inequality(Udi udi1, Udi udi2);
}
[AttributeUsageAttribute("4")]
public class Umbraco.Core.UdiDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private UdiType <UdiType>k__BackingField;
    public string EntityType { get; private set; }
    public UdiType UdiType { get; private set; }
    public UdiDefinitionAttribute(string entityType, UdiType udiType);
    [CompilerGeneratedAttribute]
public string get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(string value);
    [CompilerGeneratedAttribute]
public UdiType get_UdiType();
    [CompilerGeneratedAttribute]
private void set_UdiType(UdiType value);
}
[ExtensionAttribute]
public static class Umbraco.Core.UdiGetterExtensions : object {
    [ExtensionAttribute]
public static GuidUdi GetUdi(ITemplate entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IContentType entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IMediaType entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IMemberType entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IMemberGroup entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IContentTypeComposition entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IDataType entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(EntityContainer entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IMedia entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IContent entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IMember entity);
    [ExtensionAttribute]
public static StringUdi GetUdi(Stylesheet entity);
    [ExtensionAttribute]
public static StringUdi GetUdi(Script entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IDictionaryItem entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IMacro entity);
    [ExtensionAttribute]
public static StringUdi GetUdi(IPartialView entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IContentBase entity);
    [ExtensionAttribute]
public static GuidUdi GetUdi(IRelationType entity);
    [ExtensionAttribute]
public static StringUdi GetUdi(ILanguage entity);
    [ExtensionAttribute]
public static Udi GetUdi(IEntity entity);
}
public class Umbraco.Core.UdiRange : object {
    private Uri _uriValue;
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Selector>k__BackingField;
    public Udi Udi { get; private set; }
    public string Selector { get; private set; }
    public string EntityType { get; }
    public UdiRange(Udi udi, string selector);
    [CompilerGeneratedAttribute]
public Udi get_Udi();
    [CompilerGeneratedAttribute]
private void set_Udi(Udi value);
    [CompilerGeneratedAttribute]
public string get_Selector();
    [CompilerGeneratedAttribute]
private void set_Selector(string value);
    public string get_EntityType();
    public static UdiRange Parse(string s);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UdiRange range1, UdiRange range2);
    public static bool op_Inequality(UdiRange range1, UdiRange range2);
}
public enum Umbraco.Core.UdiType : Enum {
    public int value__;
    public static UdiType Unknown;
    public static UdiType GuidUdi;
    public static UdiType StringUdi;
}
internal class Umbraco.Core.UdiTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[ObsoleteAttribute("Use ReaderWriterLockSlim directly. This will be removed in future versions.")]
public class Umbraco.Core.UpgradeableReadLock : object {
    private ReaderWriterLockSlim _rwLock;
    private bool _upgraded;
    public UpgradeableReadLock(ReaderWriterLockSlim rwLock);
    public void UpgradeToWriteLock();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Umbraco.Core.UpgradeService : object {
    private IUpgradeCheckRepository _upgradeCheckRepository;
    public UpgradeService(IUpgradeCheckRepository upgradeCheckRepository);
    [AsyncStateMachineAttribute("Umbraco.Core.UpgradeService/<CheckUpgrade>d__2")]
public sealed virtual Task`1<UpgradeResult> CheckUpgrade(SemVersion version);
}
[ExtensionAttribute]
public static class Umbraco.Core.UriExtensions : object {
    internal static HashSet`1<string> NonClientSideRequestExtensions;
    private static UriExtensions();
    [ExtensionAttribute]
internal static bool IsBackOfficeRequest(Uri url, string applicationPath, IGlobalSettings globalSettings);
    [ExtensionAttribute]
internal static bool IsInstallerRequest(Uri url);
    [ExtensionAttribute]
internal static bool IsDefaultBackOfficeRequest(Uri url, IGlobalSettings globalSettings);
    [ExtensionAttribute]
internal static bool IsClientSideRequest(Uri url);
    [ExtensionAttribute]
public static Uri Rewrite(Uri uri, string path);
    [ExtensionAttribute]
public static Uri Rewrite(Uri uri, string path, string query);
    [ExtensionAttribute]
public static string GetSafeAbsolutePath(Uri uri);
    [ExtensionAttribute]
public static string GetAbsolutePathDecoded(Uri uri);
    [ExtensionAttribute]
public static string GetSafeAbsolutePathDecoded(Uri uri);
    [ExtensionAttribute]
public static Uri EndPathWithSlash(Uri uri);
    [ExtensionAttribute]
public static Uri TrimPathEndSlash(Uri uri);
    [ExtensionAttribute]
public static Uri MakeAbsolute(Uri uri, Uri baseUri);
    [ExtensionAttribute]
private static string GetSafeQuery(Uri uri);
    [ExtensionAttribute]
public static Uri WithoutPort(Uri uri);
    [ExtensionAttribute]
public static Uri ReplaceHost(Uri uri, string host);
}
[ExtensionAttribute]
internal static class Umbraco.Core.VersionExtensions : object {
    [ExtensionAttribute]
public static Version GetVersion(SemVersion semVersion, int maxParts);
    [ExtensionAttribute]
public static Version SubtractRevision(Version version);
    private static Version FromList(IList`1<int> parts);
}
[ExtensionAttribute]
internal static class Umbraco.Core.WaitHandleExtensions : object {
    [ExtensionAttribute]
public static Task WaitOneAsync(WaitHandle handle, int millisecondsTimeout);
}
[ObsoleteAttribute("Use ReaderWriterLockSlim directly. This will be removed in future versions.")]
public class Umbraco.Core.WriteLock : object {
    private ReaderWriterLockSlim _rwLock;
    public WriteLock(ReaderWriterLockSlim rwLock);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class Umbraco.Core.Xml.DynamicContext : XsltContext {
    private IDictionary`2<string, IXsltContextVariable> _variables;
    public bool Whitespace { get; }
    public DynamicContext(NameTable table);
    public DynamicContext(XmlNamespaceManager context);
    public DynamicContext(XmlNamespaceManager context, NameTable table);
    public virtual int CompareDocument(string baseUri, string nextbaseUri);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string uri);
    public virtual bool PreserveWhitespace(XPathNavigator node);
    public virtual bool get_Whitespace();
    public static XPathExpression Compile(string xpath);
    public void AddVariable(string name, object value);
    public virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] argTypes);
    public virtual IXsltContextVariable ResolveVariable(string prefix, string name);
}
internal class Umbraco.Core.Xml.UmbracoXPathPathSyntaxParser : object {
    public static string ParseXPathQuery(string xpathExpression, Nullable`1<int> nodeContextId, Func`2<int, IEnumerable`1<string>> getPath, Func`2<int, bool> publishedContentExists);
}
public class Umbraco.Core.Xml.XmlHelper : object {
    public static void SetAttribute(XmlDocument xml, XmlNode n, string name, string value);
    public static bool IsXmlWhitespace(string s);
    public static XPathDocument CreateXPathDocument(string xml);
    public static bool TryCreateXPathDocument(string xml, XPathDocument& doc);
    public static bool TryCreateXPathDocumentFromPropertyValue(object value, XPathDocument& doc);
    internal static void SortNodes(XmlNode parentNode, string childNodesXPath, Func`2<XmlNode, int> orderBy);
    internal static bool SortNode(XmlNode parentNode, string childNodesXPath, XmlNode node, Func`2<XmlNode, int> orderBy);
    public static XmlDocument OpenAsXmlDocument(string filePath);
    public static XmlAttribute AddAttribute(XmlDocument xd, string name, string value);
    public static XmlNode AddTextNode(XmlDocument xd, string name, string value);
    public static XmlNode SetTextNode(XmlDocument xd, XmlNode parent, string name, string value);
    public static XmlNode SetInnerXmlNode(XmlDocument xd, XmlNode parent, string name, string value);
    public static XmlNode AddCDataNode(XmlDocument xd, string name, string value);
    public static XmlNode SetCDataNode(XmlDocument xd, XmlNode parent, string name, string value);
    internal static string GetNodeValue(XmlNode n);
    public static bool CouldItBeXml(string xml);
    internal static XmlDocument Split(string data, String[] separator, string rootName, string elementName);
    internal static XmlDocument Split(XmlDocument xml, string data, String[] separator, string rootName, string elementName);
    internal static Dictionary`2<string, string> GetAttributesFromElement(string tag);
}
public static class Umbraco.Core.Xml.XmlNamespaces : object {
    public static string Xml;
    public static string XmlNs;
    public static string XmlNsPrefix;
    public static string Xsi;
    public static string Xsd;
}
internal class Umbraco.Core.Xml.XmlNodeListFactory : object {
    public static XmlNodeList CreateNodeList(XPathNodeIterator iterator);
}
internal interface Umbraco.Core.Xml.XPath.INavigableContent {
    public int Id { get; }
    public int ParentId { get; }
    public INavigableContentType Type { get; }
    public IList`1<int> ChildIds { get; }
    public abstract virtual int get_Id();
    public abstract virtual int get_ParentId();
    public abstract virtual INavigableContentType get_Type();
    public abstract virtual IList`1<int> get_ChildIds();
    public abstract virtual object Value(int index);
}
internal interface Umbraco.Core.Xml.XPath.INavigableContentType {
    public string Name { get; }
    public INavigableFieldType[] FieldTypes { get; }
    public abstract virtual string get_Name();
    public abstract virtual INavigableFieldType[] get_FieldTypes();
}
internal interface Umbraco.Core.Xml.XPath.INavigableFieldType {
    public string Name { get; }
    public Func`2<object, string> XmlStringConverter { get; }
    public abstract virtual string get_Name();
    public abstract virtual Func`2<object, string> get_XmlStringConverter();
}
internal interface Umbraco.Core.Xml.XPath.INavigableSource {
    public int LastAttributeIndex { get; }
    public INavigableContent Root { get; }
    public abstract virtual INavigableContent Get(int id);
    public abstract virtual int get_LastAttributeIndex();
    public abstract virtual INavigableContent get_Root();
}
internal class Umbraco.Core.Xml.XPath.MacroNavigator : XPathNavigator {
    private XmlNameTable _nameTable;
    private MacroRoot _macro;
    private State _state;
    public bool IsEmptyElement { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string BaseURI { get; }
    public XmlNameTable NameTable { get; }
    public string NamespaceURI { get; }
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string Value { get; }
    internal State InternalState { get; }
    public MacroNavigator(IEnumerable`1<MacroParameter> parameters);
    private MacroNavigator(MacroRoot macro, XmlNameTable nameTable, State state);
    [ConditionalAttribute("DEBUG")]
private void DebugEnter(string name);
    [ConditionalAttribute("DEBUG")]
private void DebugCreate(MacroNavigator nav);
    [ConditionalAttribute("DEBUG")]
private void DebugReturn();
    [ConditionalAttribute("DEBUG")]
private void DebugReturn(bool value);
    [ConditionalAttribute("DEBUG")]
private void DebugReturn(string format, Object[] args);
    [ConditionalAttribute("DEBUG")]
private void DebugState(string s);
    public virtual XPathNavigator Clone();
    public virtual bool get_IsEmptyElement();
    public virtual bool IsSamePosition(XPathNavigator nav);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual bool MoveTo(XPathNavigator nav);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual string get_BaseURI();
    public virtual XmlNameTable get_NameTable();
    public virtual string get_NamespaceURI();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual string get_Value();
    private static bool IsDoc(XPathNavigator nav);
    internal State get_InternalState();
}
internal class Umbraco.Core.Xml.XPath.NavigableNavigator : XPathNavigator {
    private XmlNameTable _nameTable;
    private INavigableSource _source;
    private int _lastAttributeIndex;
    private State _state;
    private int _maxDepth;
    private ConcurrentDictionary`2<int, INavigableContent> _contents;
    public object UnderlyingObject { get; }
    public bool IsEmptyElement { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string BaseURI { get; }
    public XmlNameTable NameTable { get; }
    public string NamespaceURI { get; }
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string Value { get; }
    internal State InternalState { get; }
    public NavigableNavigator(INavigableSource source, int rootId, int maxDepth);
    private NavigableNavigator(NavigableNavigator orig, State state, int maxDepth);
    [ConditionalAttribute("DEBUGNAVIGATOR")]
private void DebugEnter(string name);
    [ConditionalAttribute("DEBUGNAVIGATOR")]
private void DebugCreate(NavigableNavigator nav);
    [ConditionalAttribute("DEBUGNAVIGATOR")]
private void DebugReturn();
    [ConditionalAttribute("DEBUGNAVIGATOR")]
private void DebugReturn(bool value);
    [ConditionalAttribute("DEBUGNAVIGATOR")]
private void DebugReturn(string format, Object[] args);
    [ConditionalAttribute("DEBUGNAVIGATOR")]
private void DebugState(string s);
    private INavigableContent SourceGet(int id);
    public virtual object get_UnderlyingObject();
    public virtual XPathNavigator Clone();
    public XPathNavigator CloneWithNewRoot(string id, int maxDepth);
    public XPathNavigator CloneWithNewRoot(int id, int maxDepth);
    public virtual bool get_IsEmptyElement();
    public virtual bool IsSamePosition(XPathNavigator nav);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual bool MoveTo(XPathNavigator nav);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToFirstChild();
    private bool MoveToFirstChildElement();
    private bool MoveToFirstChildProperty();
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToParent();
    private bool MoveToParentElement();
    public virtual void MoveToRoot();
    public virtual string get_BaseURI();
    public virtual XmlNameTable get_NameTable();
    public virtual string get_NamespaceURI();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual string get_Value();
    internal State get_InternalState();
    [CompilerGeneratedAttribute]
private INavigableContent <SourceGet>b__14_0(int x);
    [CompilerGeneratedAttribute]
private bool <get_IsEmptyElement>b__21_0(int x);
    [CompilerGeneratedAttribute]
private INavigableContent <MoveToFirstChildElement>b__30_0(int id);
}
public class Umbraco.Core.Xml.XPath.RenamedRootNavigator : XPathNavigator {
    private XPathNavigator _navigator;
    private string _rootName;
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNameTable NameTable { get; }
    public string NamespaceURI { get; }
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string Value { get; }
    public RenamedRootNavigator(XPathNavigator navigator, string rootName);
    public virtual string get_BaseURI();
    public virtual XPathNavigator Clone();
    public virtual bool get_IsEmptyElement();
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual string get_LocalName();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToNext();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToParent();
    public virtual bool MoveToPrevious();
    public virtual string get_Name();
    public virtual XmlNameTable get_NameTable();
    public virtual string get_NamespaceURI();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual string get_Value();
}
[ExtensionAttribute]
internal static class Umbraco.Core.Xml.XPathNavigatorExtensions : object {
    [ExtensionAttribute]
public static XPathNodeIterator Select(XPathNavigator navigator, string expression, XPathVariable[] variables);
    [ExtensionAttribute]
public static XPathNodeIterator Select(XPathNavigator navigator, XPathExpression expression, XPathVariable[] variables);
}
public class Umbraco.Core.Xml.XPathVariable : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; private set; }
    public XPathVariable(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
}
[ExtensionAttribute]
internal static class Umbraco.Core.XmlExtensions : object {
    [ExtensionAttribute]
public static bool HasAttribute(XmlAttributeCollection attributes, string attributeName);
    [ExtensionAttribute]
public static XmlNodeList SelectNodes(XmlNode source, string expression, IEnumerable`1<XPathVariable> variables);
    [ExtensionAttribute]
public static XmlNodeList SelectNodes(XmlNode source, XPathExpression expression, IEnumerable`1<XPathVariable> variables);
    [ExtensionAttribute]
public static XmlNodeList SelectNodes(XmlNode source, string expression, XPathVariable[] variables);
    [ExtensionAttribute]
public static XmlNodeList SelectNodes(XmlNode source, XPathExpression expression, XPathVariable[] variables);
    [ExtensionAttribute]
public static XmlNode SelectSingleNode(XmlNode source, string expression, IEnumerable`1<XPathVariable> variables);
    [ExtensionAttribute]
public static XmlNode SelectSingleNode(XmlNode source, XPathExpression expression, IEnumerable`1<XPathVariable> variables);
    [ExtensionAttribute]
public static XmlNode SelectSingleNode(XmlNode source, string expression, XPathVariable[] variables);
    [ExtensionAttribute]
public static XmlNode SelectSingleNode(XmlNode source, XPathExpression expression, XPathVariable[] variables);
    [ExtensionAttribute]
public static XmlDocument ToXmlDocument(XDocument xDocument);
    [ExtensionAttribute]
public static XDocument ToXDocument(XmlDocument xmlDocument);
    [ExtensionAttribute]
public static XmlNode ToXmlElement(XContainer xElement);
    [ExtensionAttribute]
public static XElement ToXElement(XmlNode xmlElement);
    [ExtensionAttribute]
public static T AttributeValue(XElement xml, string attributeName);
    [ExtensionAttribute]
public static T AttributeValue(XmlNode xml, string attributeName);
    [ExtensionAttribute]
public static XElement GetXElement(XmlNode node);
    [ExtensionAttribute]
public static XmlNode GetXmlNode(XContainer element);
    [ExtensionAttribute]
public static XmlNode GetXmlNode(XContainer element, XmlDocument xmlDoc);
    [ExtensionAttribute]
public static string ToDataString(XElement xml);
}
