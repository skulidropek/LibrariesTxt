public enum Unchase.Swashbuckle.AspNetCore.Extensions.Extensions.DescriptionSources : Enum {
    public int value__;
    public static DescriptionSources DescriptionAttributes;
    public static DescriptionSources XmlComments;
    public static DescriptionSources DescriptionAttributesThenXmlComments;
}
[ExtensionAttribute]
internal static class Unchase.Swashbuckle.AspNetCore.Extensions.Extensions.EnumTypeExtensions : object {
    private static string GetDescriptionFromEnumOption(Type enumOptionType, object enumOption);
    [ExtensionAttribute]
private static string GetFieldAttributeDescription(Type enumType, object enumField, int attributeNumber);
    internal static List`1<ValueTuple`2<object, OpenApiString>> GetEnumValuesDescription(Type enumType, DescriptionSources descriptionSource, IEnumerable`1<XPathNavigator> xmlNavigators, bool includeRemarks);
    private static string TryGetMemberComments(MemberInfo memberInfo, IEnumerable`1<XPathNavigator> xmlNavigators, bool includeRemarks);
    private static string GetNodeNameForMember(MemberInfo memberInfo);
    private static string QualifiedNameFor(Type type, bool expandGenericArgs);
    [ExtensionAttribute]
internal static string AddEnumValuesDescription(OpenApiSchema schema, string xEnumNamesAlias, string xEnumDescriptionsAlias, bool includeDescriptionFromAttribute, string newLine);
}
[ExtensionAttribute]
public static class Unchase.Swashbuckle.AspNetCore.Extensions.Extensions.OpenApiDocumentExtensions : object {
    [ExtensionAttribute]
public static OpenApiDocument RemovePathsAndComponentsWithoutAcceptedRolesFor(OpenApiDocument openApiDoc, Func`2<TController, string> actionNameSelector, IReadOnlyList`1<string> acceptedRoles);
    [ExtensionAttribute]
public static OpenApiDocument RemovePathsAndComponentsWithoutAcceptedRolesFor(OpenApiDocument openApiDoc, string actionName, IReadOnlyList`1<string> acceptedRoles);
    [ExtensionAttribute]
public static OpenApiDocument RemovePathsAndComponentsWithoutAcceptedRolesForController(OpenApiDocument openApiDoc, IReadOnlyList`1<string> acceptedRoles);
}
[ExtensionAttribute]
public static class Unchase.Swashbuckle.AspNetCore.Extensions.Extensions.SwaggerGenOptionsExtensions : object {
    [ExtensionAttribute]
public static SwaggerGenOptions ChangeAllResponsesByHttpStatusCode(SwaggerGenOptions swaggerGenOptions, int httpStatusCode, string responseDescription, ResponseExampleOptions responseExampleOption, T responseExample);
    [ExtensionAttribute]
public static SwaggerGenOptions ChangeAllResponsesByHttpStatusCode(SwaggerGenOptions swaggerGenOptions, HttpStatusCode httpStatusCode, string responseDescription, ResponseExampleOptions responseExampleOption, T responseExample);
    [ExtensionAttribute]
public static SwaggerGenOptions AddEnumsWithValuesFixFilters(SwaggerGenOptions swaggerGenOptions, Action`1<FixEnumsOptions> configureOptions);
    [ExtensionAttribute]
public static SwaggerGenOptions IncludeXmlCommentsWithRemarks(SwaggerGenOptions swaggerGenOptions, Func`1<XPathDocument> xmlDocFactory, bool includeControllerXmlComments, Type[] excludedTypes);
    [ExtensionAttribute]
public static SwaggerGenOptions IncludeXmlCommentsWithRemarks(SwaggerGenOptions swaggerGenOptions, string filePath, bool includeControllerXmlComments, Type[] excludedTypes);
    [ExtensionAttribute]
public static SwaggerGenOptions IncludeXmlCommentsWithRemarks(SwaggerGenOptions swaggerGenOptions, Func`1<XPathDocument> xmlDocFactory, bool includeControllerXmlComments, Func`1<Type[]> excludedTypesFunc);
    [ExtensionAttribute]
public static SwaggerGenOptions IncludeXmlCommentsWithRemarks(SwaggerGenOptions swaggerGenOptions, string filePath, bool includeControllerXmlComments, Func`1<Type[]> excludedTypesFunc);
    [ExtensionAttribute]
public static SwaggerGenOptions IncludeXmlCommentsFromInheritDocs(SwaggerGenOptions swaggerGenOptions, bool includeRemarks, Type[] excludedTypes);
    [CompilerGeneratedAttribute]
internal static void <AddEnumsWithValuesFixFilters>g__EmptyAction|2_0(FixEnumsOptions x);
}
[ExtensionAttribute]
internal static class Unchase.Swashbuckle.AspNetCore.Extensions.Extensions.XmlCommentsExtensions : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private static string ExampleTag;
    [ExtensionAttribute]
internal static Type GetTargetRecursive(Type type, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, string cref);
    private static Type[] GetTargets(Type type, string cref);
    [ExtensionAttribute]
internal static MemberInfo GetTargetRecursive(MemberInfo memberInfo, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, string cref);
    private static MemberInfo[] GetTargets(MemberInfo memberInfo, string cref);
    [ExtensionAttribute]
internal static void ApplyPropertyComments(OpenApiSchema schema, MemberInfo memberInfo, List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks, Type[] excludedTypes);
    internal static XPathNavigator GetMemberXmlNode(string memberName, List`1<XPathDocument> documents);
}
internal static class Unchase.Swashbuckle.AspNetCore.Extensions.Factories.ApiDescriptionFactory : object {
    internal static ApiDescription Create(Type controllerType, MethodInfo methodInfo, string groupName, string httpMethod, string relativePath, IEnumerable`1<ApiParameterDescription> parameterDescriptions, IEnumerable`1<ApiRequestFormat> supportedRequestFormats, IEnumerable`1<ApiResponseType> supportedResponseTypes);
    internal static ApiDescription Create(Type controllerType, string actionName, string groupName, string httpMethod, string relativePath, IEnumerable`1<ApiParameterDescription> parameterDescriptions, IEnumerable`1<ApiRequestFormat> supportedRequestFormats, IEnumerable`1<ApiResponseType> supportedResponseTypes);
    internal static ApiDescription Create(Func`2<TController, string> actionNameSelector, string groupName, string httpMethod, string relativePath, IEnumerable`1<ApiParameterDescription> parameterDescriptions, IEnumerable`1<ApiRequestFormat> supportedRequestFormats, IEnumerable`1<ApiResponseType> supportedResponseTypes);
    internal static ApiDescription Create(MethodInfo methodInfo, string groupName, string httpMethod, string relativePath, IEnumerable`1<ApiParameterDescription> parameterDescriptions, IEnumerable`1<ApiRequestFormat> supportedRequestFormats, IEnumerable`1<ApiResponseType> supportedResponseTypes);
    private static ActionDescriptor CreateActionDescriptor(MethodInfo methodInfo);
    private static ParameterDescriptor CreateParameterDescriptor(ParameterInfo parameterInfo);
}
public static class Unchase.Swashbuckle.AspNetCore.Extensions.Factories.ModelMetadataFactory : object {
    public static ModelMetadata CreateForType(Type type);
    public static ModelMetadata CreateForProperty(Type containingType, string propertyName);
    public static ModelMetadata CreateForParameter(ParameterInfo parameter);
}
public class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.AppendActionCountToTagSummaryDocumentFilter : object {
    private string _messageTemplate;
    public AppendActionCountToTagSummaryDocumentFilter(string messageTemplate);
    public sealed virtual void Apply(OpenApiDocument openApiDoc, DocumentFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.ChangeResponseByHttpStatusCodeDocumentFilter`1 : object {
    private int _httpStatusCode;
    private string _responseDescription;
    private ResponseExampleOptions _responseExampleOption;
    private T _responseExample;
    public ChangeResponseByHttpStatusCodeDocumentFilter`1(int httpStatusCode, string responseDescription, ResponseExampleOptions responseExampleOption, T responseExample);
    public sealed virtual void Apply(OpenApiDocument swaggerDoc, DocumentFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.DisplayEnumsWithValuesDocumentFilter : object {
    private bool _applyFiler;
    private bool _includeDescriptionFromAttribute;
    private string _xEnumNamesAlias;
    private string _xEnumDescriptionsAlias;
    private string _newLine;
    public DisplayEnumsWithValuesDocumentFilter(IOptions`1<FixEnumsOptions> options, Action`1<FixEnumsOptions> configureOptions);
    public sealed virtual void Apply(OpenApiDocument openApiDoc, DocumentFilterContext context);
}
public class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.HidePathsAndDefinitionsByRolesDocumentFilter : object {
    private IEnumerable`1<string> _acceptedRoles;
    public HidePathsAndDefinitionsByRolesDocumentFilter(IEnumerable`1<string> acceptedRoles);
    private static List`1<string> GetRequiredDefinitions(IDictionary`2<string, OpenApiSchema> schemas, OpenApiReference reference);
    internal static void RemovePathsAndComponents(OpenApiDocument openApiDoc, IDictionary`2<ValueTuple`2<MethodInfo, Type>, string> paths, IDictionary`2<string, OpenApiSchema> schemas, IReadOnlyList`1<string> acceptedRoles);
    public sealed virtual void Apply(OpenApiDocument openApiDoc, DocumentFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.InheritDocOperationFilter : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private static string ExampleTag;
    private static string ParamTag;
    private static string ParamXPath;
    private bool _includeRemarks;
    private List`1<XPathDocument> _documents;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<string, string>> _inheritedDocs;
    private Type[] _excludedTypes;
    public InheritDocOperationFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks);
    public InheritDocOperationFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiOperation operation, OperationFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.InheritDocParameterFilter : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private static string ExampleTag;
    private bool _includeRemarks;
    private List`1<XPathDocument> _documents;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<string, string>> _inheritedDocs;
    private Type[] _excludedTypes;
    public InheritDocParameterFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks);
    public InheritDocParameterFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiParameter parameter, ParameterFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.InheritDocRequestBodyFilter : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private static string ExampleTag;
    private bool _includeRemarks;
    private List`1<XPathDocument> _documents;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<string, string>> _inheritedDocs;
    private Type[] _excludedTypes;
    public InheritDocRequestBodyFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks);
    public InheritDocRequestBodyFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiRequestBody requestBody, RequestBodyFilterContext context);
    private void ApplyForType(OpenApiRequestBody requestBody, RequestBodyFilterContext context, Type type);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.InheritDocSchemaFilter : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private static string ExampleTag;
    private bool _includeRemarks;
    private List`1<XPathDocument> _documents;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<string, string>> _inheritedDocs;
    private Type[] _excludedTypes;
    public InheritDocSchemaFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks);
    public InheritDocSchemaFilter(List`1<XPathDocument> documents, Dictionary`2<string, ValueTuple`2<string, string>> inheritedDocs, bool includeRemarks, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiSchema schema, SchemaFilterContext context);
}
public enum Unchase.Swashbuckle.AspNetCore.Extensions.Filters.ResponseExampleOptions : Enum {
    public int value__;
    public static ResponseExampleOptions Clear;
    public static ResponseExampleOptions AddNew;
    public static ResponseExampleOptions None;
}
public class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.TagOrderByNameDocumentFilter : object {
    public sealed virtual void Apply(OpenApiDocument swaggerDoc, DocumentFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.XEnumNamesParameterFilter : object {
    private bool _includeXEnumDescriptions;
    private bool _includeXEnumRemarks;
    private string _xEnumNamesAlias;
    private string _xEnumDescriptionsAlias;
    private bool _includeDescriptionFromAttribute;
    private string _newLine;
    private DescriptionSources _descriptionSources;
    private bool _applyFiler;
    private HashSet`1<XPathNavigator> _xmlNavigators;
    public XEnumNamesParameterFilter(IOptions`1<FixEnumsOptions> options, Action`1<FixEnumsOptions> configureOptions);
    public sealed virtual void Apply(OpenApiParameter parameter, ParameterFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.XEnumNamesSchemaFilter : object {
    private bool _includeXEnumDescriptions;
    private bool _includeXEnumRemarks;
    private string _xEnumNamesAlias;
    private string _xEnumDescriptionsAlias;
    private string _newLine;
    private DescriptionSources _descriptionSources;
    private bool _applyFiler;
    private HashSet`1<XPathNavigator> _xmlNavigators;
    public XEnumNamesSchemaFilter(IOptions`1<FixEnumsOptions> options, Action`1<FixEnumsOptions> configureOptions);
    public sealed virtual void Apply(OpenApiSchema schema, SchemaFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.XmlCommentsWithRemarksDocumentFilter : object {
    private static string MemberXPath;
    private static string SummaryTag;
    private static string RemarksTag;
    private XPathNavigator _xmlNavigator;
    private Type[] _excludedTypes;
    public XmlCommentsWithRemarksDocumentFilter(XPathDocument xmlDoc, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiDocument swaggerDoc, DocumentFilterContext context);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.XmlCommentsWithRemarksParameterFilter : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private XPathNavigator _xmlNavigator;
    private Type[] _excludedTypes;
    public XmlCommentsWithRemarksParameterFilter(XPathDocument xmlDoc, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiParameter parameter, ParameterFilterContext context);
    private void ApplyPropertyTags(OpenApiParameter parameter, PropertyInfo propertyInfo);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.XmlCommentsWithRemarksRequestBodyFilter : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private XPathNavigator _xmlNavigator;
    private Type[] _excludedTypes;
    public XmlCommentsWithRemarksRequestBodyFilter(XPathDocument xmlDoc, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiRequestBody requestBody, RequestBodyFilterContext context);
    private void ApplyPropertyTags(OpenApiRequestBody requestBody, PropertyInfo propertyInfo);
}
internal class Unchase.Swashbuckle.AspNetCore.Extensions.Filters.XmlCommentsWithRemarksSchemaFilter : object {
    private static string SummaryTag;
    private static string RemarksTag;
    private XPathNavigator _xmlNavigator;
    private Type[] _excludedTypes;
    public XmlCommentsWithRemarksSchemaFilter(XPathDocument xmlDoc, Type[] excludedTypes);
    public sealed virtual void Apply(OpenApiSchema schema, SchemaFilterContext context);
    private void ApplyTypeTags(OpenApiSchema schema, Type type);
    private void ApplyFieldOrPropertyTags(OpenApiSchema schema, MemberInfo fieldOrPropertyInfo);
}
public class Unchase.Swashbuckle.AspNetCore.Extensions.Options.FixEnumsOptions : object {
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IncludedXmlCommentsPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDescriptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeXEnumRemarks>k__BackingField;
    [CompilerGeneratedAttribute]
private DescriptionSources <DescriptionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplySchemaFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyParameterFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ApplyDocumentFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XEnumNamesAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XEnumDescriptionsAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewLine>k__BackingField;
    public HashSet`1<string> IncludedXmlCommentsPaths { get; }
    public bool IncludeDescriptions { get; public set; }
    public bool IncludeXEnumRemarks { get; public set; }
    public DescriptionSources DescriptionSource { get; public set; }
    public bool ApplySchemaFilter { get; public set; }
    public bool ApplyParameterFilter { get; public set; }
    public bool ApplyDocumentFilter { get; public set; }
    public string XEnumNamesAlias { get; public set; }
    public string XEnumDescriptionsAlias { get; public set; }
    public string NewLine { get; public set; }
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_IncludedXmlCommentsPaths();
    [CompilerGeneratedAttribute]
public bool get_IncludeDescriptions();
    [CompilerGeneratedAttribute]
public void set_IncludeDescriptions(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeXEnumRemarks();
    [CompilerGeneratedAttribute]
public void set_IncludeXEnumRemarks(bool value);
    [CompilerGeneratedAttribute]
public DescriptionSources get_DescriptionSource();
    [CompilerGeneratedAttribute]
public void set_DescriptionSource(DescriptionSources value);
    [CompilerGeneratedAttribute]
public bool get_ApplySchemaFilter();
    [CompilerGeneratedAttribute]
public void set_ApplySchemaFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_ApplyParameterFilter();
    [CompilerGeneratedAttribute]
public void set_ApplyParameterFilter(bool value);
    [CompilerGeneratedAttribute]
public bool get_ApplyDocumentFilter();
    [CompilerGeneratedAttribute]
public void set_ApplyDocumentFilter(bool value);
    [CompilerGeneratedAttribute]
public string get_XEnumNamesAlias();
    [CompilerGeneratedAttribute]
public void set_XEnumNamesAlias(string value);
    [CompilerGeneratedAttribute]
public string get_XEnumDescriptionsAlias();
    [CompilerGeneratedAttribute]
public void set_XEnumDescriptionsAlias(string value);
    [CompilerGeneratedAttribute]
public string get_NewLine();
    [CompilerGeneratedAttribute]
public void set_NewLine(string value);
}
[ExtensionAttribute]
public static class Unchase.Swashbuckle.AspNetCore.Extensions.Options.FixEnumsOptionsExtensions : object {
    [ExtensionAttribute]
public static FixEnumsOptions IncludeXmlCommentsFrom(FixEnumsOptions options, string fullPath);
}
