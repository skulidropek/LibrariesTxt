[ExtensionAttribute]
internal static class Unity.Microsoft.DependencyInjection.Configuration : object {
    [ExtensionAttribute]
internal static IUnityContainer AddServices(IUnityContainer container, IServiceCollection services);
    [ExtensionAttribute]
internal static void Register(IUnityContainer container, ServiceDescriptor serviceDescriptor, ILifetimeContainer lifetime);
    [ExtensionAttribute]
internal static LifetimeManager GetLifetime(ServiceDescriptor serviceDescriptor, ILifetimeContainer lifetime);
    [ExtensionAttribute]
internal static bool CanResolve(IUnityContainer container, Type type);
}
[ExtensionAttribute]
public static class Unity.Microsoft.DependencyInjection.HostingExtension : object {
    private static ServiceProviderFactory _factory;
    [ExtensionAttribute]
public static IHostBuilder UseUnityServiceProvider(IHostBuilder hostBuilder, IUnityContainer container);
    [ExtensionAttribute]
public static IWebHostBuilder UseUnityServiceProvider(IWebHostBuilder hostBuilder, IUnityContainer container);
}
public class Unity.Microsoft.DependencyInjection.Lifetime.InjectionSingletonLifetimeManager : ContainerControlledLifetimeManager {
    private ILifetimeContainer _container;
    public InjectionSingletonLifetimeManager(ILifetimeContainer container);
    protected virtual void SynchronizedSetValue(object newValue, ILifetimeContainer container);
    protected virtual LifetimeManager OnCreateLifetimeManager();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private void <SynchronizedSetValue>b__2_0();
}
internal class Unity.Microsoft.DependencyInjection.Lifetime.InjectionTransientLifetimeManager : LifetimeManager {
    public bool InUse { get; public set; }
    public virtual void SetValue(object newValue, ILifetimeContainer container);
    protected virtual LifetimeManager OnCreateLifetimeManager();
    public virtual bool get_InUse();
    public virtual void set_InUse(bool value);
    public virtual string ToString();
}
internal class Unity.Microsoft.DependencyInjection.Lifetime.ServiceProviderLifetimeManager : LifetimeManager {
    private IServiceProvider _serviceProvider;
    public ServiceProviderLifetimeManager(IServiceProvider serviceProvider);
    public virtual object GetValue(ILifetimeContainer container);
    protected virtual LifetimeManager OnCreateLifetimeManager();
}
internal class Unity.Microsoft.DependencyInjection.MdiExtension : UnityContainerExtension {
    public ILifetimeContainer Lifetime { get; }
    protected virtual void Initialize();
    public ILifetimeContainer get_Lifetime();
}
public class Unity.Microsoft.DependencyInjection.ServiceProvider : object {
    private IUnityContainer _container;
    private IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceScope.ServiceProvider { get; }
    internal ServiceProvider(IUnityContainer container);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual object GetRequiredService(Type serviceType);
    public sealed virtual IServiceScope CreateScope();
    private sealed virtual override IServiceProvider Microsoft.Extensions.DependencyInjection.IServiceScope.get_ServiceProvider();
    public static IServiceProvider ConfigureServices(IServiceCollection services);
    public static UnityContainer op_Explicit(ServiceProvider c);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Unity.Microsoft.DependencyInjection.ServiceProviderExtensions : object {
    [ExtensionAttribute]
public static IServiceProvider BuildServiceProvider(IServiceCollection services, bool validateScopes);
    [ExtensionAttribute]
public static IServiceProvider BuildServiceProvider(IServiceCollection services, IUnityContainer container);
    [ExtensionAttribute]
public static IServiceProvider BuildServiceProvider(IUnityContainer container, IServiceCollection services);
}
public class Unity.Microsoft.DependencyInjection.ServiceProviderFactory : object {
    private IUnityContainer _container;
    public ServiceProviderFactory(IUnityContainer container);
    public sealed virtual IServiceProvider CreateServiceProvider(IUnityContainer container);
    private sealed virtual override IUnityContainer Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<Unity.IUnityContainer>.CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IServiceCollection containerBuilder);
    private sealed virtual override IServiceCollection Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<Microsoft.Extensions.DependencyInjection.IServiceCollection>.CreateBuilder(IServiceCollection services);
    private IUnityContainer CreateServiceProviderContainer(IServiceCollection services);
}
