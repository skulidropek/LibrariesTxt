public class Unity.AspNet.Mvc.PerRequestLifetimeManager : LifetimeManager {
    private object _lifetimeKey;
    public virtual object GetValue(ILifetimeContainer container);
    public virtual void SetValue(object newValue, ILifetimeContainer container);
    public virtual void RemoveValue(ILifetimeContainer container);
    protected virtual LifetimeManager OnCreateLifetimeManager();
}
public class Unity.AspNet.Mvc.UnityDependencyResolver : object {
    private IUnityContainer _container;
    public UnityDependencyResolver(IUnityContainer container);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IEnumerable`1<object> GetServices(Type serviceType);
}
public class Unity.AspNet.Mvc.UnityFilterAttributeFilterProvider : FilterAttributeFilterProvider {
    private IUnityContainer _container;
    public UnityFilterAttributeFilterProvider(IUnityContainer container);
    protected virtual IEnumerable`1<FilterAttribute> GetActionAttributes(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
    protected virtual IEnumerable`1<FilterAttribute> GetControllerAttributes(ControllerContext controllerContext, ActionDescriptor actionDescriptor);
}
public class Unity.AspNet.Mvc.UnityPerRequestHttpModule : object {
    private static object ModuleKey;
    private static UnityPerRequestHttpModule();
    internal static object GetValue(object lifetimeManagerKey);
    internal static void SetValue(object lifetimeManagerKey, object value);
    public sealed virtual void Dispose();
    public sealed virtual void Init(HttpApplication context);
    private void OnEndRequest(object sender, EventArgs e);
    private static Dictionary`2<object, object> GetDictionary(HttpContext context);
}
