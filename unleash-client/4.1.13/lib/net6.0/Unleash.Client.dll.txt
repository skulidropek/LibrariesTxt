internal static class MetricsMetadata : object {
    internal static string GetPlatformName();
    internal static string GetPlatformName(string frameworkDescription);
    internal static string GetPlatformVersion();
    internal static string GetPlatformVersion(string frameworkDescription);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
public interface Unleash.ClientFactory.IUnleashClientFactory {
    public abstract virtual IUnleash CreateClient(UnleashSettings settings, bool synchronousInitialization, IStrategy[] strategies);
    public abstract virtual Task`1<IUnleash> CreateClientAsync(UnleashSettings settings, bool synchronousInitialization, IStrategy[] strategies);
}
public class Unleash.ClientFactory.UnleashClientFactory : object {
    private static TaskFactory TaskFactory;
    private static UnleashClientFactory();
    public sealed virtual IUnleash CreateClient(UnleashSettings settings, bool synchronousInitialization, IStrategy[] strategies);
    [AsyncStateMachineAttribute("Unleash.ClientFactory.UnleashClientFactory/<CreateClientAsync>d__2")]
public sealed virtual Task`1<IUnleash> CreateClientAsync(UnleashSettings settings, bool synchronousInitialization, IStrategy[] strategies);
}
internal class Unleash.Communication.FetchTogglesResult : object {
    [CompilerGeneratedAttribute]
private ToggleCollection <ToggleCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Etag>k__BackingField;
    public ToggleCollection ToggleCollection { get; public set; }
    public bool HasChanged { get; public set; }
    public string Etag { get; public set; }
    [CompilerGeneratedAttribute]
public ToggleCollection get_ToggleCollection();
    [CompilerGeneratedAttribute]
public void set_ToggleCollection(ToggleCollection value);
    [CompilerGeneratedAttribute]
public bool get_HasChanged();
    [CompilerGeneratedAttribute]
public void set_HasChanged(bool value);
    [CompilerGeneratedAttribute]
public string get_Etag();
    [CompilerGeneratedAttribute]
public void set_Etag(string value);
}
internal interface Unleash.Communication.IUnleashApiClient {
    public abstract virtual Task`1<FetchTogglesResult> FetchToggles(string etag, CancellationToken cancellationToken, bool throwOnFail);
    public abstract virtual Task`1<bool> RegisterClient(ClientRegistration registration, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> SendMetrics(ThreadSafeMetricsBucket metrics, CancellationToken cancellationToken);
}
internal class Unleash.Communication.UnleashApiClient : object {
    private static ILog Logger;
    private HttpClient httpClient;
    private IJsonSerializer jsonSerializer;
    private UnleashApiClientRequestHeaders clientRequestHeaders;
    private EventCallbackConfig eventConfig;
    private string projectId;
    private int featureRequestsToSkip;
    private int featureRequestsSkipped;
    private int metricsRequestsToSkip;
    private int metricsRequestsSkipped;
    private Int32[] backoffResponses;
    private Int32[] configurationErrorResponses;
    public UnleashApiClient(HttpClient httpClient, IJsonSerializer jsonSerializer, UnleashApiClientRequestHeaders clientRequestHeaders, EventCallbackConfig eventConfig, string projectId);
    private static UnleashApiClient();
    [AsyncStateMachineAttribute("Unleash.Communication.UnleashApiClient/<FetchToggles>d__13")]
public sealed virtual Task`1<FetchTogglesResult> FetchToggles(string etag, CancellationToken cancellationToken, bool throwOnFail);
    [AsyncStateMachineAttribute("Unleash.Communication.UnleashApiClient/<HandleErrorResponse>d__14")]
private Task`1<FetchTogglesResult> HandleErrorResponse(HttpResponseMessage response, string resourceUri, bool shouldThrow);
    private void Backoff(HttpResponseMessage response);
    private void ConfigurationError(HttpResponseMessage response, string requestUri);
    [AsyncStateMachineAttribute("Unleash.Communication.UnleashApiClient/<HandleSuccessResponse>d__17")]
private Task`1<FetchTogglesResult> HandleSuccessResponse(HttpResponseMessage response, string etag);
    [AsyncStateMachineAttribute("Unleash.Communication.UnleashApiClient/<RegisterClient>d__18")]
public sealed virtual Task`1<bool> RegisterClient(ClientRegistration registration, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Unleash.Communication.UnleashApiClient/<SendMetrics>d__19")]
public sealed virtual Task`1<bool> SendMetrics(ThreadSafeMetricsBucket metrics, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Unleash.Communication.UnleashApiClient/<HandleMetricsErrorResponse>d__20")]
private Task HandleMetricsErrorResponse(HttpResponseMessage response, string requestUri);
    private void HandleMetricsSuccessResponse(HttpResponseMessage response);
    private static void SetRequestHeaders(HttpRequestMessage requestMessage, UnleashApiClientRequestHeaders headers);
    private static void SetCustomHeaders(HttpRequestMessage requestMessage, Dictionary`2<string, string> headers);
}
internal class Unleash.Communication.UnleashApiClientRequestHeaders : object {
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceTag>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CustomHttpHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnleashCustomHttpHeaderProvider <CustomHttpHeaderProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SupportedSpecVersion>k__BackingField;
    public string AppName { get; public set; }
    public string InstanceTag { get; public set; }
    public Dictionary`2<string, string> CustomHttpHeaders { get; public set; }
    public IUnleashCustomHttpHeaderProvider CustomHttpHeaderProvider { get; public set; }
    public string SupportedSpecVersion { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceTag();
    [CompilerGeneratedAttribute]
public void set_InstanceTag(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomHttpHeaders();
    [CompilerGeneratedAttribute]
public void set_CustomHttpHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IUnleashCustomHttpHeaderProvider get_CustomHttpHeaderProvider();
    [CompilerGeneratedAttribute]
public void set_CustomHttpHeaderProvider(IUnleashCustomHttpHeaderProvider value);
    [CompilerGeneratedAttribute]
public string get_SupportedSpecVersion();
    [CompilerGeneratedAttribute]
internal void set_SupportedSpecVersion(string value);
}
internal class Unleash.DefaultCustomHttpHeaderProvider : object {
    public Dictionary`2<string, string> CustomHeaders { get; }
    public sealed virtual Dictionary`2<string, string> get_CustomHeaders();
}
public class Unleash.DefaultHttpClientFactory : object {
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ServicePointConnectionLeaseTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CustomDefaultHttpHeaders>k__BackingField;
    private static ConcurrentDictionary`2<string, HttpClient> _httpClientCache;
    public TimeSpan Timeout { get; public set; }
    public TimeSpan ServicePointConnectionLeaseTimeout { get; public set; }
    public Dictionary`2<string, string> CustomDefaultHttpHeaders { get; public set; }
    private static DefaultHttpClientFactory();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ServicePointConnectionLeaseTimeout();
    [CompilerGeneratedAttribute]
public void set_ServicePointConnectionLeaseTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomDefaultHttpHeaders();
    [CompilerGeneratedAttribute]
public void set_CustomDefaultHttpHeaders(Dictionary`2<string, string> value);
    public sealed virtual HttpClient Create(Uri unleashApiUri);
    protected virtual HttpClient CreateHttpClientInstance(Uri unleashApiUri);
    protected virtual void ConfigureHttpClient(HttpClient httpClient);
    protected virtual void ConfigureServicePoint(ServicePoint servicePoint);
    protected virtual void ConfigureDefaultRequestHeaders(HttpRequestHeaders headers);
}
public class Unleash.DefaultUnleash : object {
    private static ILog Logger;
    private static UnknownStrategy UnknownStrategy;
    private static int InitializedInstanceCount;
    private static int ErrorOnInstanceCount;
    private static IStrategy[] DefaultStrategies;
    private UnleashSettings settings;
    private Dictionary`2<string, IStrategy> strategyMap;
    internal UnleashServices services;
    private WarnOnce warnOnce;
    [CompilerGeneratedAttribute]
private EventCallbackConfig <EventConfig>k__BackingField;
    [ObsoleteAttribute("This property will be removed in the next major release", "False")]
public ICollection`1<FeatureToggle> FeatureToggles { get; }
    private EventCallbackConfig EventConfig { get; }
    public DefaultUnleash(UnleashSettings settings, IStrategy[] strategies);
    [ObsoleteAttribute("Will be removed in the next major version", "False")]
public DefaultUnleash(UnleashSettings settings, bool overrideDefaultStrategies, IStrategy[] strategies);
    private static DefaultUnleash();
    public sealed virtual ICollection`1<FeatureToggle> get_FeatureToggles();
    [CompilerGeneratedAttribute]
private EventCallbackConfig get_EventConfig();
    public sealed virtual bool IsEnabled(string toggleName);
    public sealed virtual bool IsEnabled(string toggleName, bool defaultSetting);
    public sealed virtual bool IsEnabled(string toggleName, UnleashContext context);
    public sealed virtual bool IsEnabled(string toggleName, UnleashContext context, bool defaultSetting);
    private FeatureEvaluationResult CheckIsEnabled(string toggleName, UnleashContext context, bool defaultSetting, Variant defaultVariant);
    private bool DetermineIsEnabledAndStrategy(string toggleName, FeatureToggle featureToggle, UnleashContext enhancedContext, bool defaultSetting, ActivationStrategy& strategy);
    private bool ParentDependenciesAreSatisfied(FeatureToggle featureToggle, UnleashContext context);
    private bool DependenciesSatisfied(FeatureToggle featureToggle, Dependency dependency, UnleashContext context);
    private Variant DetermineVariant(bool enabled, FeatureToggle featureToggle, ActivationStrategy strategy, UnleashContext context, Variant defaultVariant);
    public sealed virtual Variant GetVariant(string toggleName);
    public sealed virtual Variant GetVariant(string toggleName, Variant defaultVariant);
    public Variant GetVariant(string toggleName, UnleashContext context);
    public sealed virtual Variant GetVariant(string toggleName, UnleashContext context, Variant defaultValue);
    [ObsoleteAttribute("Will be removed in the next major version", "False")]
public sealed virtual IEnumerable`1<VariantDefinition> GetVariants(string toggleName);
    [ObsoleteAttribute("Will be removed in the next major version", "False")]
public sealed virtual IEnumerable`1<VariantDefinition> GetVariants(string toggleName, UnleashContext context);
    private FeatureToggle GetToggle(string toggleName);
    private void RegisterCount(string toggleName, bool enabled);
    private void RegisterVariant(string toggleName, Variant variant);
    private static IStrategy[] SelectStrategies(IStrategy[] strategies, bool overrideDefaultStrategies);
    private static Dictionary`2<string, IStrategy> BuildStrategyMap(IStrategy[] strategies);
    private IStrategy GetStrategyOrUnknown(string strategy);
    [IteratorStateMachineAttribute("Unleash.DefaultUnleash/<ResolveConstraints>d__37")]
private IEnumerable`1<Constraint> ResolveConstraints(ActivationStrategy activationStrategy);
    public sealed virtual void ConfigureEvents(Action`1<EventCallbackConfig> callback);
    private void EmitImpressionEvent(string type, UnleashContext context, bool enabled, string name, string variant);
    public sealed virtual void Dispose();
}
internal class Unleash.DefaultUnleashContextProvider : object {
    [CompilerGeneratedAttribute]
private UnleashContext <Context>k__BackingField;
    public UnleashContext Context { get; }
    public DefaultUnleashContextProvider(UnleashContext context);
    [CompilerGeneratedAttribute]
public sealed virtual UnleashContext get_Context();
}
public class Unleash.Events.ErrorEvent : object {
    [CompilerGeneratedAttribute]
private ErrorType <ErrorType>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<HttpStatusCode> <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    public ErrorType ErrorType { get; public set; }
    public Exception Error { get; public set; }
    public Nullable`1<HttpStatusCode> StatusCode { get; internal set; }
    public string Resource { get; internal set; }
    [CompilerGeneratedAttribute]
public ErrorType get_ErrorType();
    [CompilerGeneratedAttribute]
public void set_ErrorType(ErrorType value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Exception value);
    [CompilerGeneratedAttribute]
public Nullable`1<HttpStatusCode> get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(Nullable`1<HttpStatusCode> value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
internal void set_Resource(string value);
}
public enum Unleash.Events.ErrorType : Enum {
    public int value__;
    public static ErrorType Client;
    public static ErrorType TogglesBackup;
    public static ErrorType Bootstrap;
    public static ErrorType ImpressionEvent;
    public static ErrorType FileCache;
}
public interface Unleash.IHttpClientFactory {
    public abstract virtual HttpClient Create(Uri unleashApiUri);
}
public class Unleash.Internal.ActivationStrategy : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Constraint> <Constraints>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <Segments>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<VariantDefinition> <Variants>k__BackingField;
    public string Name { get; }
    public Dictionary`2<string, string> Parameters { get; }
    public List`1<Constraint> Constraints { get; }
    public List`1<int> Segments { get; }
    public List`1<VariantDefinition> Variants { get; }
    public ActivationStrategy(string name, Dictionary`2<string, string> parameters, List`1<Constraint> constraints, List`1<int> segments, List`1<VariantDefinition> variants);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Parameters();
    [CompilerGeneratedAttribute]
public List`1<Constraint> get_Constraints();
    [CompilerGeneratedAttribute]
public List`1<int> get_Segments();
    [CompilerGeneratedAttribute]
public List`1<VariantDefinition> get_Variants();
}
internal class Unleash.Internal.CachedFilesLoader : object {
    private static ILog Logger;
    private IJsonSerializer jsonSerializer;
    private IFileSystem fileSystem;
    private IToggleBootstrapProvider toggleBootstrapProvider;
    private EventCallbackConfig eventConfig;
    private string toggleFile;
    private string etagFile;
    private bool bootstrapOverride;
    public CachedFilesLoader(IJsonSerializer jsonSerializer, IFileSystem fileSystem, IToggleBootstrapProvider toggleBootstrapProvider, EventCallbackConfig eventConfig, string toggleFile, string etagFile, bool bootstrapOverride);
    private static CachedFilesLoader();
    public CachedFilesResult EnsureExistsAndLoad();
    [CompilerGeneratedAttribute]
private string <EnsureExistsAndLoad>b__9_0();
    [CompilerGeneratedAttribute]
private string <EnsureExistsAndLoad>b__9_1();
    [CompilerGeneratedAttribute]
private string <EnsureExistsAndLoad>b__9_2();
    [CompilerGeneratedAttribute]
private string <EnsureExistsAndLoad>b__9_3();
}
public class Unleash.Internal.Constraint : object {
    [CompilerGeneratedAttribute]
private string <ContextName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Operator>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CaseInsensitive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Inverted>k__BackingField;
    public string ContextName { get; private set; }
    public string Operator { get; private set; }
    public String[] Values { get; private set; }
    public string Value { get; internal set; }
    public bool CaseInsensitive { get; private set; }
    public bool Inverted { get; private set; }
    public Constraint(string contextName, string operator, bool caseInsensitive, bool inverted, string value, String[] values);
    [CompilerGeneratedAttribute]
public string get_ContextName();
    [CompilerGeneratedAttribute]
private void set_ContextName(string value);
    [CompilerGeneratedAttribute]
public string get_Operator();
    [CompilerGeneratedAttribute]
private void set_Operator(string value);
    [CompilerGeneratedAttribute]
public String[] get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(String[] value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(string value);
    [CompilerGeneratedAttribute]
public bool get_CaseInsensitive();
    [CompilerGeneratedAttribute]
private void set_CaseInsensitive(bool value);
    [CompilerGeneratedAttribute]
public bool get_Inverted();
    [CompilerGeneratedAttribute]
private void set_Inverted(bool value);
}
public class Unleash.Internal.Dependency : object {
    [CompilerGeneratedAttribute]
private string <Feature>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Variants>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public string Feature { get; }
    public String[] Variants { get; }
    public bool Enabled { get; }
    public Dependency(string feature, String[] variants, Nullable`1<bool> enabled);
    [CompilerGeneratedAttribute]
public string get_Feature();
    [CompilerGeneratedAttribute]
public String[] get_Variants();
    [CompilerGeneratedAttribute]
public bool get_Enabled();
}
internal class Unleash.Internal.DynamicJsonLibraryChooser : object {
    private static List`1<IDynamicJsonSerializer> DynamicJsonSerializers;
    private static DynamicJsonLibraryChooser();
    internal static IJsonSerializer CheckIfJsonSerializerCanBeInitialized(IJsonSerializer jsonSerializer);
}
public class Unleash.Internal.EventCallbackConfig : object {
    [CompilerGeneratedAttribute]
private Action`1<ImpressionEvent> <ImpressionEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<ErrorEvent> <ErrorEvent>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<TogglesUpdatedEvent> <TogglesUpdatedEvent>k__BackingField;
    public Action`1<ImpressionEvent> ImpressionEvent { get; public set; }
    public Action`1<ErrorEvent> ErrorEvent { get; public set; }
    public Action`1<TogglesUpdatedEvent> TogglesUpdatedEvent { get; public set; }
    [CompilerGeneratedAttribute]
public Action`1<ImpressionEvent> get_ImpressionEvent();
    [CompilerGeneratedAttribute]
public void set_ImpressionEvent(Action`1<ImpressionEvent> value);
    [CompilerGeneratedAttribute]
public Action`1<ErrorEvent> get_ErrorEvent();
    [CompilerGeneratedAttribute]
public void set_ErrorEvent(Action`1<ErrorEvent> value);
    [CompilerGeneratedAttribute]
public Action`1<TogglesUpdatedEvent> get_TogglesUpdatedEvent();
    [CompilerGeneratedAttribute]
public void set_TogglesUpdatedEvent(Action`1<TogglesUpdatedEvent> value);
    public void RaiseError(ErrorEvent evt);
    public void RaiseTogglesUpdated(TogglesUpdatedEvent evt);
}
internal class Unleash.Internal.FeatureEvaluationResult : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    public bool Enabled { get; public set; }
    public Variant Variant { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
}
public class Unleash.Internal.FeatureToggle : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImpressionData>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ActivationStrategy> <Strategies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<VariantDefinition> <Variants>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Dependency> <Dependencies>k__BackingField;
    public string Name { get; }
    public string Type { get; }
    public bool Enabled { get; }
    public bool ImpressionData { get; }
    public List`1<ActivationStrategy> Strategies { get; }
    public List`1<VariantDefinition> Variants { get; }
    public List`1<Dependency> Dependencies { get; }
    public FeatureToggle(string name, string type, bool enabled, bool impressionData, List`1<ActivationStrategy> strategies, List`1<VariantDefinition> variants, List`1<Dependency> dependencies);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public bool get_ImpressionData();
    [CompilerGeneratedAttribute]
public List`1<ActivationStrategy> get_Strategies();
    [CompilerGeneratedAttribute]
public List`1<VariantDefinition> get_Variants();
    [CompilerGeneratedAttribute]
public List`1<Dependency> get_Dependencies();
    public virtual string ToString();
}
internal class Unleash.Internal.FileSystem : object {
    private Encoding encoding;
    public FileSystem(Encoding encoding);
    public sealed virtual bool FileExists(string path);
    public sealed virtual Stream FileOpenRead(string path);
    public sealed virtual Stream FileOpenCreate(string path);
    public sealed virtual void WriteAllText(string path, string content);
    public sealed virtual string ReadAllText(string path);
}
internal interface Unleash.Internal.IFileSystem {
    public abstract virtual bool FileExists(string path);
    public abstract virtual Stream FileOpenRead(string path);
    public abstract virtual Stream FileOpenCreate(string path);
    public abstract virtual void WriteAllText(string path, string content);
    public abstract virtual string ReadAllText(string path);
}
public class Unleash.Internal.ImpressionEvent : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private UnleashContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Variant>k__BackingField;
    public string Type { get; public set; }
    public string EventId { get; public set; }
    public UnleashContext Context { get; public set; }
    public bool Enabled { get; public set; }
    public string FeatureName { get; public set; }
    public string Variant { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(string value);
    [CompilerGeneratedAttribute]
public UnleashContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(UnleashContext value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public void set_FeatureName(string value);
    [CompilerGeneratedAttribute]
public string get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(string value);
}
internal interface Unleash.Internal.IObjectLock`1 {
    public T Instance { get; public set; }
    public abstract virtual T get_Instance();
    public abstract virtual void set_Instance(T value);
}
public interface Unleash.Internal.IToggleBootstrapProvider {
    [ObsoleteAttribute("Will be replaced in the next major version", "False")]
public abstract virtual ToggleCollection Read();
}
public class Unleash.Internal.Operator : object {
    public static string IN;
    public static string NOT_IN;
    public static string STR_ENDS_WITH;
    public static string STR_STARTS_WITH;
    public static string STR_CONTAINS;
    public static string NUM_EQ;
    public static string NUM_GT;
    public static string NUM_GTE;
    public static string NUM_LT;
    public static string NUM_LTE;
    public static string DATE_AFTER;
    public static string DATE_BEFORE;
    public static string SEMVER_EQ;
    public static string SEMVER_GT;
    public static string SEMVER_LT;
}
internal class Unleash.Internal.ReaderWriterLockSlimOf`1 : object {
    private ReaderWriterLockSlim lock;
    private T instance;
    public T Instance { get; public set; }
    public int CurrentReadCount { get; }
    public ReaderWriterLockSlimOf`1(LockRecursionPolicy recursionPolicy);
    public sealed virtual T get_Instance();
    public sealed virtual void set_Instance(T value);
    public int get_CurrentReadCount();
    public sealed virtual void Dispose();
}
public class Unleash.Internal.Segment : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Constraint> <Constraints>k__BackingField;
    public int Id { get; }
    public List`1<Constraint> Constraints { get; }
    public Segment(int id, List`1<Constraint> constraints);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public List`1<Constraint> get_Constraints();
}
internal class Unleash.Internal.ThreadSafeToggleCollection : ReaderWriterLockSlimOf`1<ToggleCollection> {
}
public class Unleash.Internal.ToggleCollection : object {
    public int Version;
    private Dictionary`2<string, FeatureToggle> togglesCache;
    private Dictionary`2<int, Segment> segmentsCache;
    [CompilerGeneratedAttribute]
private ICollection`1<FeatureToggle> <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<Segment> <Segments>k__BackingField;
    public ICollection`1<FeatureToggle> Features { get; }
    public ICollection`1<Segment> Segments { get; }
    public ToggleCollection(ICollection`1<FeatureToggle> features, ICollection`1<Segment> segments);
    [CompilerGeneratedAttribute]
public ICollection`1<FeatureToggle> get_Features();
    [CompilerGeneratedAttribute]
public ICollection`1<Segment> get_Segments();
    public FeatureToggle GetToggleByName(string name);
    public Segment GetSegmentById(int id);
}
public class Unleash.Internal.TogglesUpdatedEvent : object {
    [CompilerGeneratedAttribute]
private DateTime <UpdatedOn>k__BackingField;
    public DateTime UpdatedOn { get; public set; }
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedOn();
    [CompilerGeneratedAttribute]
public void set_UpdatedOn(DateTime value);
}
[ExtensionAttribute]
internal static class Unleash.Internal.UnleashExtensions : object {
    private static ILog Logger;
    private static UnleashExtensions();
    [ExtensionAttribute]
internal static void AddContentTypeJson(HttpContentHeaders headers);
    [ExtensionAttribute]
internal static string ConvertToString(Stream stream);
    [ExtensionAttribute]
internal static void SafeTimerChange(Timer timer, int dueTime, int period, Boolean& disposeEnded);
    [ExtensionAttribute]
internal static void SafeTimerChange(Timer timer, TimeSpan dueTime, TimeSpan period, Boolean& disposeEnded);
    [ExtensionAttribute]
internal static Stream ConvertToStream(string s);
    internal static string GetLocalIpAddress();
}
internal class Unleash.Internal.UnleashSettingsValidator : object {
    public void Validate(UnleashSettings settings);
}
public class Unleash.Internal.Variant : object {
    public static Variant DISABLED_VARIANT;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Payload <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FeatureEnabled>k__BackingField;
    public string Name { get; }
    public Payload Payload { get; }
    public bool IsEnabled { get; }
    public bool FeatureEnabled { get; internal set; }
    public Variant(string name, Payload payload, bool enabled, bool feature_enabled);
    private static Variant();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Payload get_Payload();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public bool get_FeatureEnabled();
    [CompilerGeneratedAttribute]
internal void set_FeatureEnabled(bool value);
}
public interface Unleash.IUnleash {
    [ObsoleteAttribute("Will be removed in the next major version", "False")]
public ICollection`1<FeatureToggle> FeatureToggles { get; }
    public abstract virtual ICollection`1<FeatureToggle> get_FeatureToggles();
    public abstract virtual bool IsEnabled(string toggleName);
    public abstract virtual bool IsEnabled(string toggleName, bool defaultSetting);
    public abstract virtual bool IsEnabled(string toggleName, UnleashContext context);
    public abstract virtual bool IsEnabled(string toggleName, UnleashContext context, bool defaultSetting);
    public abstract virtual Variant GetVariant(string toggleName);
    public abstract virtual Variant GetVariant(string toggleName, Variant defaultValue);
    public abstract virtual Variant GetVariant(string toggleName, UnleashContext context, Variant defaultValue);
    [ObsoleteAttribute("Will be removed in the next major version", "False")]
public abstract virtual IEnumerable`1<VariantDefinition> GetVariants(string toggleName);
    [ObsoleteAttribute("Will be removed in the next major version", "False")]
public abstract virtual IEnumerable`1<VariantDefinition> GetVariants(string toggleName, UnleashContext context);
    public abstract virtual void ConfigureEvents(Action`1<EventCallbackConfig> config);
}
public interface Unleash.IUnleashContextProvider {
    public UnleashContext Context { get; }
    public abstract virtual UnleashContext get_Context();
}
public interface Unleash.IUnleashCustomHttpHeaderProvider {
    public Dictionary`2<string, string> CustomHeaders { get; }
    public abstract virtual Dictionary`2<string, string> get_CustomHeaders();
}
internal interface Unleash.Logging.ILog {
    public abstract virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
}
public interface Unleash.Logging.ILogProvider {
    public abstract virtual Logger GetLogger(string name);
    public abstract virtual IDisposable OpenNestedContext(string message);
    public abstract virtual IDisposable OpenMappedContext(string key, object value, bool destructure);
}
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Unleash.Logging.LogExtensions : object {
    [ExtensionAttribute]
public static void Debug(ILog logger, Func`1<string> messageFunc, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Error(ILog logger, Func`1<string> messageFunc, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Fatal(ILog logger, Func`1<string> messageFunc, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Info(ILog logger, Func`1<string> messageFunc, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Trace(ILog logger, Func`1<string> messageFunc, Exception exception, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILog logger, Func`1<string> messageFunc, Exception exception, Object[] args);
    private static void Log(ILog logger, LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] args);
    private static void GuardAgainstNullLogger(ILog logger);
    internal static Func`1<string> WrapLogSafeInternal(LoggerExecutionWrapper logger, Func`1<string> messageFunc);
}
public class Unleash.Logging.Logger : MulticastDelegate {
    public Logger(object object, IntPtr method);
    public virtual bool Invoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
    public virtual IAsyncResult BeginInvoke(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
[ExcludeFromCodeCoverageAttribute]
internal class Unleash.Logging.LoggerExecutionWrapper : object {
    private Logger _logger;
    private ICallSiteExtension _callsiteLogger;
    private Func`1<bool> _getIsDisabled;
    internal static string FailedToGenerateLogMessage;
    private Func`1<string> _lastExtensionMethod;
    internal Logger WrappedLogger { get; }
    internal LoggerExecutionWrapper(Logger logger, Func`1<bool> getIsDisabled);
    internal Logger get_WrappedLogger();
    public sealed virtual bool Log(LogLevel logLevel, Func`1<string> messageFunc, Exception exception, Object[] formatParameters);
}
public enum Unleash.Logging.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warn;
    public static LogLevel Error;
    public static LogLevel Fatal;
}
[ExcludeFromCodeCoverageAttribute]
public static class Unleash.Logging.LogProvider : object {
    private static string NullLogProvider;
    [DynamicAttribute]
private static object s_currentLogProvider;
    private static Action`1<ILogProvider> s_onCurrentLogProviderSet;
    private static Lazy`1<ILogProvider> s_resolvedLogProvider;
    [CompilerGeneratedAttribute]
private static bool <IsDisabled>k__BackingField;
    internal static List`1<Tuple`2<IsLoggerAvailable, CreateLogProvider>> LogProviderResolvers;
    public static bool IsDisabled { get; public set; }
    unknown static Action`1<ILogProvider> OnCurrentLogProviderSet {internal set; }
    internal static ILogProvider CurrentLogProvider { get; }
    private static LogProvider();
    public static void SetCurrentLogProvider(ILogProvider logProvider);
    [CompilerGeneratedAttribute]
public static bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public static void set_IsDisabled(bool value);
    internal static void set_OnCurrentLogProviderSet(Action`1<ILogProvider> value);
    internal static ILogProvider get_CurrentLogProvider();
    internal static ILog For();
    internal static ILog GetCurrentClassLogger();
    internal static ILog GetLogger(Type type, string fallbackTypeName);
    internal static ILog GetLogger(string name);
    internal static IDisposable OpenNestedContext(string message);
    internal static IDisposable OpenMappedContext(string key, object value, bool destructure);
    private static void RaiseOnCurrentLogProviderSet();
    internal static ILogProvider ResolveLogProvider();
    internal static ILogProvider ForceResolveLogProvider();
}
[ExcludeFromCodeCoverageAttribute]
internal class Unleash.Logging.LogProviders.DisposableAction : object {
    private Action _onDispose;
    public DisposableAction(Action onDispose);
    public sealed virtual void Dispose();
}
[ExcludeFromCodeCoverageAttribute]
internal class Unleash.Logging.LogProviders.EntLibLogProvider : LogProviderBase {
    private static string TypeTemplate;
    private static bool s_providerIsAvailableOverride;
    private static Type LogEntryType;
    private static Type LoggerType;
    private static Type TraceEventTypeType;
    private static Action`3<string, string, int> WriteLogEntry;
    private static Func`3<string, int, bool> ShouldLogEntry;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static EntLibLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    private static Action`3<string, string, int> GetWriteLogEntry();
    private static Func`3<string, int, bool> GetShouldLogEntry();
    private static MemberInitExpression GetWriteLogExpression(Expression message, Expression severityParameter, ParameterExpression logNameParameter);
}
[ExcludeFromCodeCoverageAttribute]
internal class Unleash.Logging.LogProviders.Log4NetLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static Log4NetLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
[ExcludeFromCodeCoverageAttribute]
internal static class Unleash.Logging.LogProviders.LogMessageFormatter : object {
    private static Regex Pattern;
    private static LogMessageFormatter();
    public static Func`1<string> SimulateStructuredLogging(Func`1<string> messageBuilder, Object[] formatParameters);
    private static string ReplaceFirst(string text, string search, string replace);
    public static string FormatStructuredMessage(string targetMessage, Object[] formatParameters, IEnumerable`1& patternMatches);
}
[ExcludeFromCodeCoverageAttribute]
internal abstract class Unleash.Logging.LogProviders.LogProviderBase : object {
    private Lazy`1<OpenNdc> _lazyOpenNdcMethod;
    private Lazy`1<OpenMdc> _lazyOpenMdcMethod;
    private static IDisposable NoopDisposableInstance;
    private static LogProviderBase();
    public abstract virtual Logger GetLogger(string name);
    public sealed virtual IDisposable OpenNestedContext(string message);
    public sealed virtual IDisposable OpenMappedContext(string key, object value, bool destructure);
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
}
[ExcludeFromCodeCoverageAttribute]
internal class Unleash.Logging.LogProviders.LoupeLogProvider : LogProviderBase {
    private static bool s_providerIsAvailableOverride;
    private WriteDelegate _logWriteDelegate;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static LoupeLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    private static Type GetLogManagerType();
    private static WriteDelegate GetLogWriteDelegate();
}
[ExcludeFromCodeCoverageAttribute]
internal class Unleash.Logging.LogProviders.NLogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static NLogLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    public static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetGetLoggerMethodCall();
}
[ExcludeFromCodeCoverageAttribute]
internal class Unleash.Logging.LogProviders.SerilogLogProvider : LogProviderBase {
    private Func`2<string, object> _getLoggerByNameDelegate;
    private static bool s_providerIsAvailableOverride;
    private static Func`4<string, object, bool, IDisposable> _pushProperty;
    public static bool ProviderIsAvailableOverride { get; public set; }
    private static SerilogLogProvider();
    public static bool get_ProviderIsAvailableOverride();
    public static void set_ProviderIsAvailableOverride(bool value);
    public virtual Logger GetLogger(string name);
    internal static bool IsLoggerAvailable();
    protected virtual OpenNdc GetOpenNdcMethod();
    protected virtual OpenMdc GetOpenMdcMethod();
    private static Func`4<string, object, bool, IDisposable> GetPushProperty();
    private static Type GetLogManagerType();
    private static Func`2<string, object> GetForContextMethodCall();
}
[ExcludeFromCodeCoverageAttribute]
internal static class Unleash.Logging.LogProviders.TraceEventTypeValues : object {
    internal static Type Type;
    internal static int Verbose;
    internal static int Information;
    internal static int Warning;
    internal static int Error;
    internal static int Critical;
    private static TraceEventTypeValues();
}
[ExtensionAttribute]
[ExcludeFromCodeCoverageAttribute]
internal static class Unleash.Logging.LogProviders.TypeExtensions : object {
    [ExtensionAttribute]
internal static ConstructorInfo GetConstructorPortable(Type type, Type[] types);
    [ExtensionAttribute]
internal static MethodInfo GetMethodPortable(Type type, string name);
    [ExtensionAttribute]
internal static MethodInfo GetMethodPortable(Type type, string name, Type[] types);
    [ExtensionAttribute]
internal static PropertyInfo GetPropertyPortable(Type type, string name);
    [ExtensionAttribute]
internal static IEnumerable`1<FieldInfo> GetFieldsPortable(Type type);
    [ExtensionAttribute]
internal static Type GetBaseTypePortable(Type type);
    [ExtensionAttribute]
internal static object CreateDelegate(MethodInfo methodInfo, Type delegateType);
    [ExtensionAttribute]
internal static Assembly GetAssemblyPortable(Type type);
}
internal class Unleash.Metrics.ClientMetrics : object {
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private MetricsBucket <Bucket>k__BackingField;
    public string AppName { get; public set; }
    public string InstanceId { get; public set; }
    public MetricsBucket Bucket { get; public set; }
    public string PlatformName { get; }
    public string PlatformVersion { get; }
    public string YggdrasilVersion { get; }
    public string SpecVersion { get; }
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public MetricsBucket get_Bucket();
    [CompilerGeneratedAttribute]
public void set_Bucket(MetricsBucket value);
    public string get_PlatformName();
    public string get_PlatformVersion();
    public string get_YggdrasilVersion();
    public string get_SpecVersion();
}
internal class Unleash.Metrics.ClientRegistration : object {
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Strategies>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Interval>k__BackingField;
    public string AppName { get; public set; }
    public string InstanceId { get; public set; }
    public string SdkVersion { get; public set; }
    public List`1<string> Strategies { get; public set; }
    public DateTimeOffset Started { get; public set; }
    public long Interval { get; public set; }
    public string PlatformName { get; }
    public string PlatformVersion { get; }
    public string YggdrasilVersion { get; }
    public string SpecVersion { get; }
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceId();
    [CompilerGeneratedAttribute]
public void set_InstanceId(string value);
    [CompilerGeneratedAttribute]
public string get_SdkVersion();
    [CompilerGeneratedAttribute]
public void set_SdkVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Strategies();
    [CompilerGeneratedAttribute]
public void set_Strategies(List`1<string> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Started();
    [CompilerGeneratedAttribute]
public void set_Started(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public long get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(long value);
    public string get_PlatformName();
    public string get_PlatformVersion();
    public string get_YggdrasilVersion();
    public string get_SpecVersion();
}
internal class Unleash.Metrics.MetricsBucket : object {
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<string, ToggleCount> <Toggles>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <Stop>k__BackingField;
    public ConcurrentDictionary`2<string, ToggleCount> Toggles { get; public set; }
    public DateTimeOffset Start { get; public set; }
    public DateTimeOffset Stop { get; public set; }
    [CompilerGeneratedAttribute]
public ConcurrentDictionary`2<string, ToggleCount> get_Toggles();
    [CompilerGeneratedAttribute]
public void set_Toggles(ConcurrentDictionary`2<string, ToggleCount> value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_Stop();
    [CompilerGeneratedAttribute]
public void set_Stop(DateTimeOffset value);
}
internal class Unleash.Metrics.ThreadSafeMetricsBucket : object {
    private long missedRegistrations;
    private MetricsBucket metricsBucket;
    private ReaderWriterLockSlim lock;
    public long MissedRegistrations { get; }
    public ThreadSafeMetricsBucket(MetricsBucket metricsBucket);
    public long get_MissedRegistrations();
    public void RegisterCount(string toggleName, bool active);
    public void RegisterCount(string toggleName, string variantName);
    private void WithToggleCount(string toggleName, Action`1<ToggleCount> action);
    public IDisposable StopCollectingMetrics(MetricsBucket& bucket);
    private sealed virtual override void System.IDisposable.Dispose();
    private void ResetCounters();
}
internal class Unleash.Metrics.ToggleCount : object {
    private long yes;
    private long no;
    private ConcurrentDictionary`2<string, long> variants;
    public long Yes { get; }
    public long No { get; }
    public ConcurrentDictionary`2<string, long> Variants { get; }
    public long get_Yes();
    public long get_No();
    public ConcurrentDictionary`2<string, long> get_Variants();
    public void Register(bool active);
    public void Register(string variantName);
    public void Reset();
}
internal class Unleash.Scheduling.ClientMetricsBackgroundTask : object {
    private static ILog Logger;
    private IUnleashApiClient apiClient;
    private UnleashSettings settings;
    private ThreadSafeMetricsBucket metricsBucket;
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExecuteDuringStartup>k__BackingField;
    public string Name { get; }
    public TimeSpan Interval { get; public set; }
    public bool ExecuteDuringStartup { get; public set; }
    public ClientMetricsBackgroundTask(IUnleashApiClient apiClient, UnleashSettings settings, ThreadSafeMetricsBucket metricsBucket);
    private static ClientMetricsBackgroundTask();
    [AsyncStateMachineAttribute("Unleash.Scheduling.ClientMetricsBackgroundTask/<ExecuteAsync>d__5")]
public sealed virtual Task ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExecuteDuringStartup();
    [CompilerGeneratedAttribute]
public void set_ExecuteDuringStartup(bool value);
}
internal class Unleash.Scheduling.ClientRegistrationBackgroundTask : object {
    private static ILog Logger;
    private IUnleashApiClient apiClient;
    private UnleashSettings settings;
    private List`1<string> strategies;
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExecuteDuringStartup>k__BackingField;
    public string Name { get; }
    public TimeSpan Interval { get; public set; }
    public bool ExecuteDuringStartup { get; public set; }
    public ClientRegistrationBackgroundTask(IUnleashApiClient apiClient, UnleashSettings settings, List`1<string> strategies);
    private static ClientRegistrationBackgroundTask();
    [AsyncStateMachineAttribute("Unleash.Scheduling.ClientRegistrationBackgroundTask/<ExecuteAsync>d__5")]
public sealed virtual Task ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExecuteDuringStartup();
    [CompilerGeneratedAttribute]
public void set_ExecuteDuringStartup(bool value);
}
internal class Unleash.Scheduling.FetchFeatureTogglesTask : object {
    private static ILog Logger;
    private string toggleFile;
    private string etagFile;
    private IFileSystem fileSystem;
    private EventCallbackConfig eventConfig;
    private IUnleashApiClient apiClient;
    private IJsonSerializer jsonSerializer;
    private ThreadSafeToggleCollection toggleCollection;
    private bool throwOnInitialLoadFail;
    private bool ready;
    [CompilerGeneratedAttribute]
private string <Etag>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExecuteDuringStartup>k__BackingField;
    internal string Etag { get; internal set; }
    public string Name { get; }
    public TimeSpan Interval { get; public set; }
    public bool ExecuteDuringStartup { get; public set; }
    public FetchFeatureTogglesTask(IUnleashApiClient apiClient, ThreadSafeToggleCollection toggleCollection, IJsonSerializer jsonSerializer, IFileSystem fileSystem, EventCallbackConfig eventConfig, string toggleFile, string etagFile, bool throwOnInitialLoadFail);
    private static FetchFeatureTogglesTask();
    [CompilerGeneratedAttribute]
internal string get_Etag();
    [CompilerGeneratedAttribute]
internal void set_Etag(string value);
    [AsyncStateMachineAttribute("Unleash.Scheduling.FetchFeatureTogglesTask/<ExecuteAsync>d__15")]
public sealed virtual Task ExecuteAsync(CancellationToken cancellationToken);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual TimeSpan get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(TimeSpan value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ExecuteDuringStartup();
    [CompilerGeneratedAttribute]
public void set_ExecuteDuringStartup(bool value);
    [CompilerGeneratedAttribute]
private string <ExecuteAsync>b__15_1();
    [CompilerGeneratedAttribute]
private string <ExecuteAsync>b__15_2();
}
public interface Unleash.Scheduling.IUnleashScheduledTask {
    public string Name { get; }
    public TimeSpan Interval { get; }
    public bool ExecuteDuringStartup { get; }
    public abstract virtual Task ExecuteAsync(CancellationToken cancellationToken);
    public abstract virtual string get_Name();
    public abstract virtual TimeSpan get_Interval();
    public abstract virtual bool get_ExecuteDuringStartup();
}
public interface Unleash.Scheduling.IUnleashScheduledTaskManager {
    public abstract virtual void Configure(IEnumerable`1<IUnleashScheduledTask> tasks, CancellationToken cancellationToken);
}
internal class Unleash.Scheduling.SystemTimerScheduledTaskManager : object {
    private static ILog Logger;
    private Dictionary`2<string, Timer> timers;
    private bool disposeEnded;
    private static SystemTimerScheduledTaskManager();
    public sealed virtual void Configure(IEnumerable`1<IUnleashScheduledTask> tasks, CancellationToken cancellationToken);
    private void ConfigureTask(IUnleashScheduledTask task, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
internal class Unleash.Serialization.DynamicNewtonsoftJsonSerializer : object {
    private Encoding encoding;
    private Type jsonTextWriterType;
    private Type jsonTextReaderType;
    [DynamicAttribute]
private object serializer;
    public string NugetPackageName { get; }
    public sealed virtual string get_NugetPackageName();
    public sealed virtual bool TryLoad();
    public sealed virtual T Deserialize(Stream stream);
    public sealed virtual void Serialize(Stream stream, T instance);
}
internal interface Unleash.Serialization.IDynamicJsonSerializer {
    public string NugetPackageName { get; }
    public abstract virtual string get_NugetPackageName();
    public abstract virtual bool TryLoad();
}
public interface Unleash.Serialization.IJsonSerializer {
    public abstract virtual T Deserialize(Stream stream);
    public abstract virtual void Serialize(Stream stream, T instance);
}
public static class Unleash.Serialization.JsonSerializerTester : object {
    private static ToggleCollection Toggles;
    private static JsonSerializerTester();
    public static void Assert(IJsonSerializer serializer);
}
public class Unleash.Strategies.ApplicationHostnameStrategy : object {
    public static string HostNamesParam;
    protected string NameConst;
    private string hostname;
    public string Name { get; }
    private static ApplicationHostnameStrategy();
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.Strategies.Constraints.DateConstraintOperator : object {
    public sealed virtual bool Evaluate(Constraint constraint, UnleashContext context);
    private bool Eval(string operator, DateTimeOffset constraintDate, DateTimeOffset contextDate);
}
public interface Unleash.Strategies.Constraints.IConstraintOperator {
    public abstract virtual bool Evaluate(Constraint constraint, UnleashContext context);
}
public class Unleash.Strategies.Constraints.NumberConstraintOperator : object {
    public sealed virtual bool Evaluate(Constraint constraint, UnleashContext context);
    private bool Eval(string operator, double constraintNumber, double contextNumber);
}
public class Unleash.Strategies.Constraints.SemverConstraintOperator : object {
    private static ILog Logger;
    private static SemverConstraintOperator();
    public sealed virtual bool Evaluate(Constraint constraint, UnleashContext context);
    private bool Eval(string operator, SemanticVersion contextSemver, SemanticVersion constraintSemver);
}
public class Unleash.Strategies.Constraints.StringConstraintOperator : object {
    public sealed virtual bool Evaluate(Constraint constraint, UnleashContext context);
    private bool Eval(string operator, string value, string contextValue, bool caseInsensitive);
}
public class Unleash.Strategies.ConstraintUtils : object {
    private static Dictionary`2<string, IConstraintOperator> operators;
    private static ConstraintUtils();
    public static bool Validate(IEnumerable`1<Constraint> constraints, UnleashContext context);
    private static bool ValidateConstraint(Constraint constraint, UnleashContext context);
}
public class Unleash.Strategies.DefaultStrategy : object {
    private static string StrategyName;
    public string Name { get; }
    private static DefaultStrategy();
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.Strategies.FlexibleRolloutStrategy : object {
    protected static string Percentage;
    protected static string GroupId;
    private Func`1<string> randomGenerator;
    public string Name { get; }
    public FlexibleRolloutStrategy(Func`1<string> randomGenerator);
    private static FlexibleRolloutStrategy();
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    private string GetStickiness(Dictionary`2<string, string> parameters);
    private string ResolveStickiness(string stickiness, UnleashContext context);
}
public class Unleash.Strategies.GradualRolloutRandomStrategy : object {
    private static string Percentage;
    private static string StrategyName;
    private Random random;
    public string Name { get; }
    public GradualRolloutRandomStrategy(int seed);
    private static GradualRolloutRandomStrategy();
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.Strategies.GradualRolloutSessionIdStrategy : object {
    public static string Percentage;
    public static string GroupId;
    public string Name { get; }
    private static GradualRolloutSessionIdStrategy();
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.Strategies.GradualRolloutUserIdStrategy : object {
    public static string PercentageConst;
    public static string GroupIdConst;
    public string Name { get; }
    private static GradualRolloutUserIdStrategy();
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public interface Unleash.Strategies.IStrategy {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public abstract virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.Strategies.RemoteAddressStrategy : object {
    private static ILog Logger;
    internal static string PARAM;
    public string Name { get; }
    private static RemoteAddressStrategy();
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    private List`1<IPCIDRAddressRange> ToAddressRanges(List`1<string> ipAddresses);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
internal class Unleash.Strategies.StrategyUtils : object {
    public static int GetNormalizedNumber(string identifier, string groupId, UInt32 randomSeed, int normalizer);
    public static int GetPercentage(string percentage);
    public static bool IsEnabled(IStrategy strategy, Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.Strategies.UnknownStrategy : object {
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.Strategies.UserWithIdStrategy : object {
    internal string UserIdsConst;
    public string Name { get; }
    public sealed virtual string get_Name();
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context);
    public sealed virtual bool IsEnabled(Dictionary`2<string, string> parameters, UnleashContext context, IEnumerable`1<Constraint> constraints);
}
public class Unleash.UnleashContext : object {
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CurrentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Properties>k__BackingField;
    public string AppName { get; public set; }
    public string Environment { get; public set; }
    public string UserId { get; public set; }
    public string SessionId { get; public set; }
    public string RemoteAddress { get; public set; }
    public Nullable`1<DateTimeOffset> CurrentTime { get; public set; }
    public Dictionary`2<string, string> Properties { get; public set; }
    public UnleashContext(string appName, string environment, string userId, string sessionId, string remoteAddress, Nullable`1<DateTimeOffset> currentTime, Dictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
public void set_UserId(string value);
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public string get_RemoteAddress();
    [CompilerGeneratedAttribute]
public void set_RemoteAddress(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CurrentTime();
    [CompilerGeneratedAttribute]
public void set_CurrentTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, string> value);
    public string GetByName(string contextName);
    public UnleashContext ApplyStaticFields(UnleashSettings settings);
    internal static Builder New();
}
public class Unleash.UnleashException : Exception {
    public UnleashException(string message);
    public UnleashException(string message, Exception inner);
    protected UnleashException(SerializationInfo info, StreamingContext context);
}
internal class Unleash.UnleashServices : object {
    private CancellationTokenSource cancellationTokenSource;
    private IUnleashScheduledTaskManager scheduledTaskManager;
    public static string supportedSpecVersion;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnleashContextProvider <ContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadSafeToggleCollection <ToggleCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMetricsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ThreadSafeMetricsBucket <MetricsBucket>k__BackingField;
    [CompilerGeneratedAttribute]
private FetchFeatureTogglesTask <FetchFeatureTogglesTask>k__BackingField;
    internal CancellationToken CancellationToken { get; }
    internal IUnleashContextProvider ContextProvider { get; }
    internal ThreadSafeToggleCollection ToggleCollection { get; }
    internal bool IsMetricsDisabled { get; }
    internal ThreadSafeMetricsBucket MetricsBucket { get; }
    internal FetchFeatureTogglesTask FetchFeatureTogglesTask { get; }
    public UnleashServices(UnleashSettings settings, EventCallbackConfig eventConfig, Dictionary`2<string, IStrategy> strategyMap);
    [CompilerGeneratedAttribute]
internal CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
internal IUnleashContextProvider get_ContextProvider();
    [CompilerGeneratedAttribute]
internal ThreadSafeToggleCollection get_ToggleCollection();
    [CompilerGeneratedAttribute]
internal bool get_IsMetricsDisabled();
    [CompilerGeneratedAttribute]
internal ThreadSafeMetricsBucket get_MetricsBucket();
    [CompilerGeneratedAttribute]
internal FetchFeatureTogglesTask get_FetchFeatureTogglesTask();
    public sealed virtual void Dispose();
}
public class Unleash.UnleashSettings : object {
    internal Encoding Encoding;
    internal string FeatureToggleFilename;
    internal string EtagFilename;
    [CompilerGeneratedAttribute]
private string <SdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <UnleashApi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <FetchTogglesInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SendMetricsInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<string> <LocalStorageFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CustomHttpHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnleashCustomHttpHeaderProvider <UnleashCustomHttpHeaderProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnleashContextProvider <UnleashContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonSerializer <JsonSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpClientFactory <HttpClientFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnleashScheduledTaskManager <ScheduledTaskManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnleashApiClient <UnleashApiClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IToggleBootstrapProvider <ToggleBootstrapProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BootstrapOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ScheduleFeatureToggleFetchImmediatly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThrowOnInitialFetchFail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableSingletonWarning>k__BackingField;
    public string SdkVersion { get; }
    public Uri UnleashApi { get; public set; }
    public string AppName { get; public set; }
    [ObsoleteAttribute("No longer supported in recent versions of Unleash, scope API token accordingly instead. Will be removed in the next major version", "False")]
public string Environment { get; public set; }
    public string InstanceTag { get; public set; }
    [ObsoleteAttribute("No longer supported in recent versions of Unleash, scope API token accordingly instead. Will be removed in the next major version", "False")]
public string ProjectId { get; public set; }
    public TimeSpan FetchTogglesInterval { get; public set; }
    public Nullable`1<TimeSpan> SendMetricsInterval { get; public set; }
    public Func`1<string> LocalStorageFolder { get; public set; }
    public Dictionary`2<string, string> CustomHttpHeaders { get; public set; }
    public IUnleashCustomHttpHeaderProvider UnleashCustomHttpHeaderProvider { get; public set; }
    public IUnleashContextProvider UnleashContextProvider { get; public set; }
    public IJsonSerializer JsonSerializer { get; public set; }
    public IHttpClientFactory HttpClientFactory { get; public set; }
    public IUnleashScheduledTaskManager ScheduledTaskManager { get; public set; }
    internal IUnleashApiClient UnleashApiClient { get; internal set; }
    internal IFileSystem FileSystem { get; internal set; }
    public IToggleBootstrapProvider ToggleBootstrapProvider { get; public set; }
    public bool BootstrapOverride { get; public set; }
    internal bool ScheduleFeatureToggleFetchImmediatly { get; internal set; }
    internal bool ThrowOnInitialFetchFail { get; internal set; }
    internal bool DisableSingletonWarning { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_SdkVersion();
    [CompilerGeneratedAttribute]
public Uri get_UnleashApi();
    [CompilerGeneratedAttribute]
public void set_UnleashApi(Uri value);
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public void set_AppName(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_InstanceTag();
    [CompilerGeneratedAttribute]
public void set_InstanceTag(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(string value);
    [CompilerGeneratedAttribute]
public TimeSpan get_FetchTogglesInterval();
    [CompilerGeneratedAttribute]
public void set_FetchTogglesInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_SendMetricsInterval();
    [CompilerGeneratedAttribute]
public void set_SendMetricsInterval(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Func`1<string> get_LocalStorageFolder();
    [CompilerGeneratedAttribute]
public void set_LocalStorageFolder(Func`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomHttpHeaders();
    [CompilerGeneratedAttribute]
public void set_CustomHttpHeaders(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IUnleashCustomHttpHeaderProvider get_UnleashCustomHttpHeaderProvider();
    [CompilerGeneratedAttribute]
public void set_UnleashCustomHttpHeaderProvider(IUnleashCustomHttpHeaderProvider value);
    [CompilerGeneratedAttribute]
public IUnleashContextProvider get_UnleashContextProvider();
    [CompilerGeneratedAttribute]
public void set_UnleashContextProvider(IUnleashContextProvider value);
    [CompilerGeneratedAttribute]
public IJsonSerializer get_JsonSerializer();
    [CompilerGeneratedAttribute]
public void set_JsonSerializer(IJsonSerializer value);
    [CompilerGeneratedAttribute]
public IHttpClientFactory get_HttpClientFactory();
    [CompilerGeneratedAttribute]
public void set_HttpClientFactory(IHttpClientFactory value);
    [CompilerGeneratedAttribute]
public IUnleashScheduledTaskManager get_ScheduledTaskManager();
    [CompilerGeneratedAttribute]
public void set_ScheduledTaskManager(IUnleashScheduledTaskManager value);
    [CompilerGeneratedAttribute]
internal IUnleashApiClient get_UnleashApiClient();
    [CompilerGeneratedAttribute]
internal void set_UnleashApiClient(IUnleashApiClient value);
    [CompilerGeneratedAttribute]
internal IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
internal void set_FileSystem(IFileSystem value);
    [CompilerGeneratedAttribute]
public IToggleBootstrapProvider get_ToggleBootstrapProvider();
    [CompilerGeneratedAttribute]
public void set_ToggleBootstrapProvider(IToggleBootstrapProvider value);
    [CompilerGeneratedAttribute]
public bool get_BootstrapOverride();
    [CompilerGeneratedAttribute]
public void set_BootstrapOverride(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ScheduleFeatureToggleFetchImmediatly();
    [CompilerGeneratedAttribute]
internal void set_ScheduleFeatureToggleFetchImmediatly(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ThrowOnInitialFetchFail();
    [CompilerGeneratedAttribute]
internal void set_ThrowOnInitialFetchFail(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DisableSingletonWarning();
    [CompilerGeneratedAttribute]
internal void set_DisableSingletonWarning(bool value);
    private static string GetSdkVersion();
    private static string GetDefaultInstanceTag();
    public virtual string ToString();
    public string GetFeatureToggleFilePath();
    public string GetFeatureToggleETagFilePath();
    private string PrependFileName(string filename);
    public void UseBootstrapUrlProvider(string path, bool shouldThrowOnError, Dictionary`2<string, string> customHeaders);
    public void UseBootstrapFileProvider(string path);
}
public class Unleash.Utilities.FetchingToggleBootstrapUrlFailedException : UnleashException {
    [CompilerGeneratedAttribute]
private HttpStatusCode <StatusCode>k__BackingField;
    public HttpStatusCode StatusCode { get; public set; }
    public FetchingToggleBootstrapUrlFailedException(string errorMessage, HttpStatusCode statusCode);
    public FetchingToggleBootstrapUrlFailedException(HttpStatusCode statusCode);
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
}
internal class Unleash.Utilities.IPCIDRAddressRange : object {
    private int cidrCount;
    private IPAddress baseIPAddress;
    public IPCIDRAddressRange(string address);
    public bool Contains(IPAddress remoteAddress);
}
public class Unleash.Utilities.ToggleBootstrapFileProvider : object {
    private string filePath;
    private UnleashSettings settings;
    internal ToggleBootstrapFileProvider(string filePath, UnleashSettings settings);
    [ObsoleteAttribute("Will be replaced in the next major version", "False")]
public sealed virtual ToggleCollection Read();
}
public class Unleash.Utilities.ToggleBootstrapUrlProvider : object {
    private static ILog Logger;
    private CancellationTokenSource cancellationTokenSource;
    private HttpClient client;
    private UnleashSettings settings;
    private string path;
    private bool throwOnFail;
    private Dictionary`2<string, string> customHeaders;
    public ToggleBootstrapUrlProvider(string path, HttpClient client, UnleashSettings settings, bool throwOnFail, Dictionary`2<string, string> customHeaders);
    private static ToggleBootstrapUrlProvider();
    [ObsoleteAttribute("Will be replaced in the next major version", "False")]
public sealed virtual ToggleCollection Read();
    [AsyncStateMachineAttribute("Unleash.Utilities.ToggleBootstrapUrlProvider/<FetchFile>d__9")]
private Task`1<ToggleCollection> FetchFile();
    [CompilerGeneratedAttribute]
private Task`1<ToggleCollection> <Read>b__8_0();
}
internal class Unleash.Utilities.WarnOnce : object {
    private ILog logger;
    private HashSet`1<string> seen;
    public WarnOnce(ILog logger);
    public void Warn(string key, string message);
}
public class Unleash.Variants.Payload : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Type { get; private set; }
    public string Value { get; private set; }
    public Payload(string type, string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Unleash.Variants.VariantDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Weight>k__BackingField;
    [CompilerGeneratedAttribute]
private Payload <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<VariantOverride> <Overrides>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Stickiness>k__BackingField;
    public string Name { get; public set; }
    public int Weight { get; public set; }
    public Payload Payload { get; public set; }
    public ICollection`1<VariantOverride> Overrides { get; public set; }
    public string Stickiness { get; public set; }
    public VariantDefinition(string name, int weight, Payload payload, ICollection`1<VariantOverride> overrides, string stickiness);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Weight();
    [CompilerGeneratedAttribute]
public void set_Weight(int value);
    [CompilerGeneratedAttribute]
public Payload get_Payload();
    [CompilerGeneratedAttribute]
public void set_Payload(Payload value);
    [CompilerGeneratedAttribute]
public ICollection`1<VariantOverride> get_Overrides();
    [CompilerGeneratedAttribute]
public void set_Overrides(ICollection`1<VariantOverride> value);
    [CompilerGeneratedAttribute]
public string get_Stickiness();
    [CompilerGeneratedAttribute]
public void set_Stickiness(string value);
    public Variant ToVariant();
}
public class Unleash.Variants.VariantOverride : object {
    [CompilerGeneratedAttribute]
private string <ContextName>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Values>k__BackingField;
    public string ContextName { get; }
    public String[] Values { get; }
    public VariantOverride(string contextName, String[] values);
    [CompilerGeneratedAttribute]
public string get_ContextName();
    [CompilerGeneratedAttribute]
public String[] get_Values();
}
internal class Unleash.Variants.VariantUtils : object {
    public static UInt32 VARIANT_NORMALIZATION_SEED;
    private static VariantUtils();
    public static Variant SelectVariant(string groupId, UnleashContext context, List`1<VariantDefinition> variantDefinitions, Dictionary`2<string, string> strategyParameters);
    public static Variant SelectVariant(FeatureToggle feature, UnleashContext context, Variant defaultVariant);
    private static Func`2<VariantOverride, bool> OverrideMatchesContext(UnleashContext context);
    private static string GetIdentifier(UnleashContext context, string stickiness);
    private static string GetRandomValue();
}
