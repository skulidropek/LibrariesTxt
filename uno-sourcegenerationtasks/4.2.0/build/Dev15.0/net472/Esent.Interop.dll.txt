public abstract class Microsoft.Isam.Esent.EsentException : Exception {
    protected EsentException(string message);
    protected EsentException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.Isam.Esent.Interop.Api : object {
    private static ErrorHandler HandleError;
    private static Encoding AsciiDecoder;
    [CompilerGeneratedAttribute]
private static IJetApi <Impl>k__BackingField;
    internal static IJetApi Impl { get; internal set; }
    private static Api();
    internal static void add_HandleError(ErrorHandler value);
    internal static void remove_HandleError(ErrorHandler value);
    [CompilerGeneratedAttribute]
internal static IJetApi get_Impl();
    [CompilerGeneratedAttribute]
internal static void set_Impl(IJetApi value);
    public static void JetCreateInstance(JET_INSTANCE& instance, string name);
    public static void JetCreateInstance2(JET_INSTANCE& instance, string name, string displayName, CreateInstanceGrbit grbit);
    public static void JetInit(JET_INSTANCE& instance);
    public static JET_wrn JetInit2(JET_INSTANCE& instance, InitGrbit grbit);
    public static void JetGetInstanceInfo(Int32& numInstances, JET_INSTANCE_INFO[]& instances);
    public static void JetStopBackupInstance(JET_INSTANCE instance);
    public static void JetStopServiceInstance(JET_INSTANCE instance);
    public static void JetTerm(JET_INSTANCE instance);
    public static void JetTerm2(JET_INSTANCE instance, TermGrbit grbit);
    public static JET_wrn JetSetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, int paramValue, string paramString);
    public static JET_wrn JetSetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, JET_CALLBACK paramValue, string paramString);
    public static JET_wrn JetSetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, IntPtr paramValue, string paramString);
    public static JET_wrn JetGetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, IntPtr& paramValue, String& paramString, int maxParam);
    public static JET_wrn JetGetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, Int32& paramValue, String& paramString, int maxParam);
    [CLSCompliantAttribute("False")]
public static void JetGetVersion(JET_SESID sesid, UInt32& version);
    public static void JetCreateDatabase(JET_SESID sesid, string database, string connect, JET_DBID& dbid, CreateDatabaseGrbit grbit);
    public static void JetCreateDatabase2(JET_SESID sesid, string database, int maxPages, JET_DBID& dbid, CreateDatabaseGrbit grbit);
    public static JET_wrn JetAttachDatabase(JET_SESID sesid, string database, AttachDatabaseGrbit grbit);
    public static JET_wrn JetAttachDatabase2(JET_SESID sesid, string database, int maxPages, AttachDatabaseGrbit grbit);
    public static JET_wrn JetOpenDatabase(JET_SESID sesid, string database, string connect, JET_DBID& dbid, OpenDatabaseGrbit grbit);
    public static void JetCloseDatabase(JET_SESID sesid, JET_DBID dbid, CloseDatabaseGrbit grbit);
    public static void JetDetachDatabase(JET_SESID sesid, string database);
    public static void JetDetachDatabase2(JET_SESID sesid, string database, DetachDatabaseGrbit grbit);
    public static void JetCompact(JET_SESID sesid, string sourceDatabase, string destinationDatabase, JET_PFNSTATUS statusCallback, JET_CONVERT ignored, CompactGrbit grbit);
    public static void JetGrowDatabase(JET_SESID sesid, JET_DBID dbid, int desiredPages, Int32& actualPages);
    public static void JetSetDatabaseSize(JET_SESID sesid, string database, int desiredPages, Int32& actualPages);
    public static void JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, Int32& value, JET_DbInfo infoLevel);
    public static void JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, JET_DBINFOMISC& dbinfomisc, JET_DbInfo infoLevel);
    public static void JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, String& value, JET_DbInfo infoLevel);
    public static void JetGetDatabaseFileInfo(string databaseName, Int32& value, JET_DbInfo infoLevel);
    public static void JetGetDatabaseFileInfo(string databaseName, Int64& value, JET_DbInfo infoLevel);
    public static void JetGetDatabaseFileInfo(string databaseName, JET_DBINFOMISC& dbinfomisc, JET_DbInfo infoLevel);
    public static void JetBackupInstance(JET_INSTANCE instance, string destination, BackupGrbit grbit, JET_PFNSTATUS statusCallback);
    public static void JetRestoreInstance(JET_INSTANCE instance, string source, string destination, JET_PFNSTATUS statusCallback);
    public static void JetOSSnapshotFreeze(JET_OSSNAPID snapshot, Int32& numInstances, JET_INSTANCE_INFO[]& instances, SnapshotFreezeGrbit grbit);
    public static void JetOSSnapshotPrepare(JET_OSSNAPID& snapshot, SnapshotPrepareGrbit grbit);
    public static void JetOSSnapshotThaw(JET_OSSNAPID snapshot, SnapshotThawGrbit grbit);
    public static void JetBeginExternalBackupInstance(JET_INSTANCE instance, BeginExternalBackupGrbit grbit);
    public static void JetCloseFileInstance(JET_INSTANCE instance, JET_HANDLE handle);
    public static void JetEndExternalBackupInstance(JET_INSTANCE instance);
    public static void JetEndExternalBackupInstance2(JET_INSTANCE instance, EndExternalBackupGrbit grbit);
    public static void JetGetAttachInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public static void JetGetLogInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public static void JetGetTruncateLogInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public static void JetOpenFileInstance(JET_INSTANCE instance, string file, JET_HANDLE& handle, Int64& fileSizeLow, Int64& fileSizeHigh);
    public static void JetReadFileInstance(JET_INSTANCE instance, JET_HANDLE file, Byte[] buffer, int bufferSize, Int32& bytesRead);
    public static void JetTruncateLogInstance(JET_INSTANCE instance);
    public static void JetBeginSession(JET_INSTANCE instance, JET_SESID& sesid, string username, string password);
    public static void JetSetSessionContext(JET_SESID sesid, IntPtr context);
    public static void JetResetSessionContext(JET_SESID sesid);
    public static void JetEndSession(JET_SESID sesid, EndSessionGrbit grbit);
    public static void JetDupSession(JET_SESID sesid, JET_SESID& newSesid);
    public static JET_wrn JetOpenTable(JET_SESID sesid, JET_DBID dbid, string tablename, Byte[] parameters, int parametersSize, OpenTableGrbit grbit, JET_TABLEID& tableid);
    public static void JetCloseTable(JET_SESID sesid, JET_TABLEID tableid);
    public static void JetDupCursor(JET_SESID sesid, JET_TABLEID tableid, JET_TABLEID& newTableid, DupCursorGrbit grbit);
    public static void JetComputeStats(JET_SESID sesid, JET_TABLEID tableid);
    public static void JetSetLS(JET_SESID sesid, JET_TABLEID tableid, JET_LS ls, LsGrbit grbit);
    public static void JetGetLS(JET_SESID sesid, JET_TABLEID tableid, JET_LS& ls, LsGrbit grbit);
    public static void JetGetCursorInfo(JET_SESID sesid, JET_TABLEID tableid);
    public static void JetBeginTransaction(JET_SESID sesid);
    public static void JetBeginTransaction2(JET_SESID sesid, BeginTransactionGrbit grbit);
    public static void JetCommitTransaction(JET_SESID sesid, CommitTransactionGrbit grbit);
    public static void JetRollback(JET_SESID sesid, RollbackTransactionGrbit grbit);
    public static void JetCreateTable(JET_SESID sesid, JET_DBID dbid, string table, int pages, int density, JET_TABLEID& tableid);
    public static void JetAddColumn(JET_SESID sesid, JET_TABLEID tableid, string column, JET_COLUMNDEF columndef, Byte[] defaultValue, int defaultValueSize, JET_COLUMNID& columnid);
    public static void JetDeleteColumn(JET_SESID sesid, JET_TABLEID tableid, string column);
    public static void JetDeleteColumn2(JET_SESID sesid, JET_TABLEID tableid, string column, DeleteColumnGrbit grbit);
    public static void JetDeleteIndex(JET_SESID sesid, JET_TABLEID tableid, string index);
    public static void JetDeleteTable(JET_SESID sesid, JET_DBID dbid, string table);
    public static void JetCreateIndex(JET_SESID sesid, JET_TABLEID tableid, string indexName, CreateIndexGrbit grbit, string keyDescription, int keyDescriptionLength, int density);
    public static void JetCreateIndex2(JET_SESID sesid, JET_TABLEID tableid, JET_INDEXCREATE[] indexcreates, int numIndexCreates);
    public static void JetOpenTempTable(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public static void JetOpenTempTable2(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, int lcid, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public static void JetOpenTempTable3(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, JET_UNICODEINDEX unicodeindex, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public static void JetCreateTableColumnIndex3(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    public static void JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, JET_COLUMNDEF& columndef);
    public static void JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, JET_COLUMNDEF& columndef);
    public static void JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, JET_COLUMNBASE& columnbase);
    public static void JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, JET_COLUMNLIST& columnlist);
    public static void JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, ColInfoGrbit grbit, JET_COLUMNLIST& columnlist);
    public static void JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string columnName, JET_COLUMNDEF& columndef);
    public static void JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string columnName, JET_COLUMNLIST& columnlist);
    public static void JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string columnName, JET_COLUMNBASE& columnbase);
    public static void JetGetObjectInfo(JET_SESID sesid, JET_DBID dbid, JET_OBJECTLIST& objectlist);
    public static void JetGetObjectInfo(JET_SESID sesid, JET_DBID dbid, JET_objtyp objtyp, string objectName, JET_OBJECTINFO& objectinfo);
    public static void JetGetCurrentIndex(JET_SESID sesid, JET_TABLEID tableid, String& indexName, int maxNameLength);
    public static void JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, JET_OBJECTINFO& result, JET_TblInfo infoLevel);
    public static void JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, String& result, JET_TblInfo infoLevel);
    public static void JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, JET_DBID& result, JET_TblInfo infoLevel);
    public static void JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, Int32[] result, JET_TblInfo infoLevel);
    public static void JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, Int32& result, JET_TblInfo infoLevel);
    [CLSCompliantAttribute("False")]
public static void JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, UInt16& result, JET_IdxInfo infoLevel);
    public static void JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, Int32& result, JET_IdxInfo infoLevel);
    public static void JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, JET_INDEXID& result, JET_IdxInfo infoLevel);
    public static void JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, JET_INDEXLIST& result, JET_IdxInfo infoLevel);
    public static void JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, String& result, JET_IdxInfo infoLevel);
    [CLSCompliantAttribute("False")]
public static void JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, UInt16& result, JET_IdxInfo infoLevel);
    public static void JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, Int32& result, JET_IdxInfo infoLevel);
    public static void JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXID& result, JET_IdxInfo infoLevel);
    public static void JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXLIST& result, JET_IdxInfo infoLevel);
    public static void JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, String& result, JET_IdxInfo infoLevel);
    public static void JetRenameTable(JET_SESID sesid, JET_DBID dbid, string tableName, string newTableName);
    public static void JetRenameColumn(JET_SESID sesid, JET_TABLEID tableid, string name, string newName, RenameColumnGrbit grbit);
    public static void JetSetColumnDefaultValue(JET_SESID sesid, JET_DBID dbid, string tableName, string columnName, Byte[] data, int dataSize, SetColumnDefaultValueGrbit grbit);
    public static void JetGotoBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize);
    public static void JetGotoSecondaryIndexBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] secondaryKey, int secondaryKeySize, Byte[] primaryKey, int primaryKeySize, GotoSecondaryIndexBookmarkGrbit grbit);
    public static void JetMove(JET_SESID sesid, JET_TABLEID tableid, int numRows, MoveGrbit grbit);
    public static void JetMove(JET_SESID sesid, JET_TABLEID tableid, JET_Move numRows, MoveGrbit grbit);
    public static void JetMakeKey(JET_SESID sesid, JET_TABLEID tableid, Byte[] data, int dataSize, MakeKeyGrbit grbit);
    public static JET_wrn JetSeek(JET_SESID sesid, JET_TABLEID tableid, SeekGrbit grbit);
    public static void JetSetIndexRange(JET_SESID sesid, JET_TABLEID tableid, SetIndexRangeGrbit grbit);
    public static void JetIntersectIndexes(JET_SESID sesid, JET_INDEXRANGE[] ranges, int numRanges, JET_RECORDLIST& recordlist, IntersectIndexesGrbit grbit);
    public static void JetSetCurrentIndex(JET_SESID sesid, JET_TABLEID tableid, string index);
    public static void JetSetCurrentIndex2(JET_SESID sesid, JET_TABLEID tableid, string index, SetCurrentIndexGrbit grbit);
    public static void JetSetCurrentIndex3(JET_SESID sesid, JET_TABLEID tableid, string index, SetCurrentIndexGrbit grbit, int itagSequence);
    public static void JetSetCurrentIndex4(JET_SESID sesid, JET_TABLEID tableid, string index, JET_INDEXID indexid, SetCurrentIndexGrbit grbit, int itagSequence);
    public static void JetIndexRecordCount(JET_SESID sesid, JET_TABLEID tableid, Int32& numRecords, int maxRecordsToCount);
    public static void JetSetTableSequential(JET_SESID sesid, JET_TABLEID tableid, SetTableSequentialGrbit grbit);
    public static void JetResetTableSequential(JET_SESID sesid, JET_TABLEID tableid, ResetTableSequentialGrbit grbit);
    public static void JetGetRecordPosition(JET_SESID sesid, JET_TABLEID tableid, JET_RECPOS& recpos);
    public static void JetGotoPosition(JET_SESID sesid, JET_TABLEID tableid, JET_RECPOS recpos);
    public static void JetGetBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize);
    public static void JetGetSecondaryIndexBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] secondaryKey, int secondaryKeySize, Int32& actualSecondaryKeySize, Byte[] primaryKey, int primaryKeySize, Int32& actualPrimaryKeySize, GetSecondaryIndexBookmarkGrbit grbit);
    public static void JetRetrieveKey(JET_SESID sesid, JET_TABLEID tableid, Byte[] data, int dataSize, Int32& actualDataSize, RetrieveKeyGrbit grbit);
    public static JET_wrn JetRetrieveColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] data, int dataSize, Int32& actualDataSize, RetrieveColumnGrbit grbit, JET_RETINFO retinfo);
    public static JET_wrn JetRetrieveColumns(JET_SESID sesid, JET_TABLEID tableid, JET_RETRIEVECOLUMN[] retrievecolumns, int numColumns);
    [CLSCompliantAttribute("False")]
public static JET_wrn JetEnumerateColumns(JET_SESID sesid, JET_TABLEID tableid, int numColumnids, JET_ENUMCOLUMNID[] columnids, Int32& numColumnValues, JET_ENUMCOLUMN[]& columnValues, JET_PFNREALLOC allocator, IntPtr allocatorContext, int maxDataSize, EnumerateColumnsGrbit grbit);
    public static JET_wrn JetEnumerateColumns(JET_SESID sesid, JET_TABLEID tableid, EnumerateColumnsGrbit grbit, IEnumerable`1& enumeratedColumns);
    public static void JetDelete(JET_SESID sesid, JET_TABLEID tableid);
    public static void JetPrepareUpdate(JET_SESID sesid, JET_TABLEID tableid, JET_prep prep);
    public static void JetUpdate(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize);
    public static void JetUpdate(JET_SESID sesid, JET_TABLEID tableid);
    public static JET_wrn JetSetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] data, int dataSize, SetColumnGrbit grbit, JET_SETINFO setinfo);
    public static JET_wrn JetSetColumns(JET_SESID sesid, JET_TABLEID tableid, JET_SETCOLUMN[] setcolumns, int numColumns);
    public static void JetGetLock(JET_SESID sesid, JET_TABLEID tableid, GetLockGrbit grbit);
    public static void JetEscrowUpdate(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] delta, int deltaSize, Byte[] previousValue, int previousValueLength, Int32& actualPreviousValueLength, EscrowUpdateGrbit grbit);
    public static void JetRegisterCallback(JET_SESID sesid, JET_TABLEID tableid, JET_cbtyp cbtyp, JET_CALLBACK callback, IntPtr context, JET_HANDLE& callbackId);
    public static void JetUnregisterCallback(JET_SESID sesid, JET_TABLEID tableid, JET_cbtyp cbtyp, JET_HANDLE callbackId);
    public static JET_wrn JetDefragment(JET_SESID sesid, JET_DBID dbid, string tableName, Int32& passes, Int32& seconds, DefragGrbit grbit);
    public static JET_wrn JetDefragment2(JET_SESID sesid, JET_DBID dbid, string tableName, Int32& passes, Int32& seconds, JET_CALLBACK callback, DefragGrbit grbit);
    public static JET_wrn JetIdle(JET_SESID sesid, IdleGrbit grbit);
    public static void JetFreeBuffer(IntPtr buffer);
    internal static JET_wrn Check(int err);
    private static Exception CreateErrorException(int err);
    public static bool TryGetLock(JET_SESID sesid, JET_TABLEID tableid, GetLockGrbit grbit);
    public static JET_wrn JetSetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] data, int dataSize, int dataOffset, SetColumnGrbit grbit, JET_SETINFO setinfo);
    public static JET_wrn JetRetrieveColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] data, int dataSize, int dataOffset, Int32& actualDataSize, RetrieveColumnGrbit grbit, JET_RETINFO retinfo);
    internal static JET_wrn JetRetrieveColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, IntPtr data, int dataSize, Int32& actualDataSize, RetrieveColumnGrbit grbit, JET_RETINFO retinfo);
    internal static void JetMakeKey(JET_SESID sesid, JET_TABLEID tableid, IntPtr data, int dataSize, MakeKeyGrbit grbit);
    internal static JET_wrn JetSetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, IntPtr data, int dataSize, SetColumnGrbit grbit, JET_SETINFO setinfo);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, Byte[] data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, string data, Encoding encoding, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, bool data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, byte data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, short data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, int data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, long data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, Guid data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, DateTime data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, float data, MakeKeyGrbit grbit);
    public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, double data, MakeKeyGrbit grbit);
    [CLSCompliantAttribute("False")]
public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, ushort data, MakeKeyGrbit grbit);
    [CLSCompliantAttribute("False")]
public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, UInt32 data, MakeKeyGrbit grbit);
    [CLSCompliantAttribute("False")]
public static void MakeKey(JET_SESID sesid, JET_TABLEID tableid, ulong data, MakeKeyGrbit grbit);
    public static void BeginSession(JET_INSTANCE instance, JET_SESID& sesid);
    public static void CreateDatabase(JET_SESID sesid, string database, JET_DBID& dbid, CreateDatabaseGrbit grbit);
    public static JET_wrn OpenDatabase(JET_SESID sesid, string database, JET_DBID& dbid, OpenDatabaseGrbit grbit);
    public static JET_wrn OpenTable(JET_SESID sesid, JET_DBID dbid, string tablename, OpenTableGrbit grbit, JET_TABLEID& tableid);
    public static bool TryOpenTable(JET_SESID sesid, JET_DBID dbid, string tablename, OpenTableGrbit grbit, JET_TABLEID& tableid);
    public static IDictionary`2<string, JET_COLUMNID> GetColumnDictionary(JET_SESID sesid, JET_TABLEID tableid);
    public static JET_COLUMNID GetTableColumnid(JET_SESID sesid, JET_TABLEID tableid, string columnName);
    public static IEnumerable`1<ColumnInfo> GetTableColumns(JET_SESID sesid, JET_TABLEID tableid);
    public static IEnumerable`1<ColumnInfo> GetTableColumns(JET_SESID sesid, JET_DBID dbid, string tablename);
    public static IEnumerable`1<IndexInfo> GetTableIndexes(JET_SESID sesid, JET_TABLEID tableid);
    public static IEnumerable`1<IndexInfo> GetTableIndexes(JET_SESID sesid, JET_DBID dbid, string tablename);
    public static IEnumerable`1<string> GetTableNames(JET_SESID sesid, JET_DBID dbid);
    public static bool TryJetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXID& result, JET_IdxInfo infoLevel);
    public static string JetGetCurrentIndex(JET_SESID sesid, JET_TABLEID tableid);
    public static void MoveBeforeFirst(JET_SESID sesid, JET_TABLEID tableid);
    public static void MoveAfterLast(JET_SESID sesid, JET_TABLEID tableid);
    public static bool TryMove(JET_SESID sesid, JET_TABLEID tableid, JET_Move move, MoveGrbit grbit);
    public static bool TryMoveFirst(JET_SESID sesid, JET_TABLEID tableid);
    public static bool TryMoveLast(JET_SESID sesid, JET_TABLEID tableid);
    public static bool TryMoveNext(JET_SESID sesid, JET_TABLEID tableid);
    public static bool TryMovePrevious(JET_SESID sesid, JET_TABLEID tableid);
    public static bool TrySeek(JET_SESID sesid, JET_TABLEID tableid, SeekGrbit grbit);
    public static bool TrySetIndexRange(JET_SESID sesid, JET_TABLEID tableid, SetIndexRangeGrbit grbit);
    public static void ResetIndexRange(JET_SESID sesid, JET_TABLEID tableid);
    public static IEnumerable`1<Byte[]> IntersectIndexes(JET_SESID sesid, JET_TABLEID[] tableids);
    public static bool TryGotoBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize);
    [ObsoleteAttribute("Use the overload that takes a JET_IdxInfo parameter, passing in JET_IdxInfo.List")]
public static void JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string ignored, JET_INDEXLIST& indexlist);
    [ObsoleteAttribute("Use the overload that takes a JET_IdxInfo parameter, passing in JET_IdxInfo.List")]
public static void JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXLIST& indexlist);
    public static JET_wrn Defragment(JET_SESID sesid, JET_DBID dbid, string tableName, DefragGrbit grbit);
    public static Byte[] GetBookmark(JET_SESID sesid, JET_TABLEID tableid);
    public static Byte[] GetSecondaryBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[]& primaryBookmark);
    public static Byte[] RetrieveKey(JET_SESID sesid, JET_TABLEID tableid, RetrieveKeyGrbit grbit);
    public static Nullable`1<int> RetrieveColumnSize(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<int> RetrieveColumnSize(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, int itagSequence, RetrieveColumnGrbit grbit);
    public static Byte[] RetrieveColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit, JET_RETINFO retinfo);
    public static Byte[] RetrieveColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static string RetrieveColumnAsString(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static string RetrieveColumnAsString(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Encoding encoding);
    public static string RetrieveColumnAsString(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Encoding encoding, RetrieveColumnGrbit grbit);
    public static Nullable`1<short> RetrieveColumnAsInt16(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<short> RetrieveColumnAsInt16(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<int> RetrieveColumnAsInt32(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<int> RetrieveColumnAsInt32(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<long> RetrieveColumnAsInt64(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<long> RetrieveColumnAsInt64(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<float> RetrieveColumnAsFloat(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<float> RetrieveColumnAsFloat(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<double> RetrieveColumnAsDouble(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<double> RetrieveColumnAsDouble(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<bool> RetrieveColumnAsBoolean(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<bool> RetrieveColumnAsBoolean(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<byte> RetrieveColumnAsByte(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<byte> RetrieveColumnAsByte(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<Guid> RetrieveColumnAsGuid(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<Guid> RetrieveColumnAsGuid(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static Nullable`1<DateTime> RetrieveColumnAsDateTime(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static Nullable`1<DateTime> RetrieveColumnAsDateTime(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> RetrieveColumnAsUInt16(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ushort> RetrieveColumnAsUInt16(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> RetrieveColumnAsUInt32(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    [CLSCompliantAttribute("False")]
public static Nullable`1<UInt32> RetrieveColumnAsUInt32(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> RetrieveColumnAsUInt64(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    [CLSCompliantAttribute("False")]
public static Nullable`1<ulong> RetrieveColumnAsUInt64(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static object DeserializeObjectFromColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    public static object DeserializeObjectFromColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static void RetrieveColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] values);
    public static IEnumerable`1<EnumeratedColumn> EnumerateColumns(JET_SESID sesid, JET_TABLEID tableid, EnumerateColumnsGrbit grbit);
    private static Nullable`1<T> CreateReturnValue(T data, int dataSize, JET_wrn wrn, int actualDataSize);
    private static void CheckDataSize(int expectedDataSize, int actualDataSize);
    private static int PinColumnsAndRetrieve(JET_SESID sesid, JET_TABLEID tableid, NATIVE_RETRIEVECOLUMN* nativeretrievecolumns, IList`1<JET_RETRIEVECOLUMN> retrievecolumns, int numColumns, int i);
    private static string RetrieveUnicodeString(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, RetrieveColumnGrbit grbit);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, string data, Encoding encoding);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, string data, Encoding encoding, SetColumnGrbit grbit);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] data, SetColumnGrbit grbit);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, bool data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, byte data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, short data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, int data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, long data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Guid data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, DateTime data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, float data);
    public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, double data);
    public static int EscrowUpdate(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, int delta);
    [CLSCompliantAttribute("False")]
public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, ushort data);
    [CLSCompliantAttribute("False")]
public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, UInt32 data);
    [CLSCompliantAttribute("False")]
public static void SetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, ulong data);
    public static void SerializeObjectToColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, object value);
    public static void SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] values);
    private static void CheckEncodingIsValid(Encoding encoding);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.AttachDatabaseGrbit : Enum {
    public int value__;
    public static AttachDatabaseGrbit None;
    public static AttachDatabaseGrbit ReadOnly;
    public static AttachDatabaseGrbit DeleteCorruptIndexes;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.BackupGrbit : Enum {
    public int value__;
    public static BackupGrbit None;
    public static BackupGrbit Incremental;
    public static BackupGrbit Atomic;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.BeginExternalBackupGrbit : Enum {
    public int value__;
    public static BeginExternalBackupGrbit None;
    public static BeginExternalBackupGrbit Incremental;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.BeginTransactionGrbit : Enum {
    public int value__;
    public static BeginTransactionGrbit None;
    public static BeginTransactionGrbit ReadOnly;
}
public class Microsoft.Isam.Esent.Interop.BoolColumnValue : ColumnValueOfStruct`1<bool> {
    private static object BoxedTrue;
    private static object BoxedFalse;
    public object ValueAsObject { get; }
    protected int Size { get; }
    private static BoolColumnValue();
    public virtual object get_ValueAsObject();
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
internal static class Microsoft.Isam.Esent.Interop.BoxedValueCache`1 : object {
    private static int NumCachedBoxedValues;
    private static Object[] BoxedValues;
    private static BoxedValueCache`1();
    public static object GetBoxedValue(Nullable`1<T> value);
}
public class Microsoft.Isam.Esent.Interop.ByteColumnValue : ColumnValueOfStruct`1<byte> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
public class Microsoft.Isam.Esent.Interop.BytesColumnValue : ColumnValue {
    private Byte[] internalValue;
    public object ValueAsObject { get; }
    public Byte[] Value { get; public set; }
    public int Length { get; }
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
public virtual object get_ValueAsObject();
    public Byte[] get_Value();
    public void set_Value(Byte[] value);
    public virtual int get_Length();
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    public virtual string ToString();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
internal static class Microsoft.Isam.Esent.Interop.Caches : object {
    private static int KeyMostMost;
    private static int MaxBuffers;
    private static MemoryCache TheColumnCache;
    private static MemoryCache TheBookmarkCache;
    private static MemoryCache TheSecondaryBookmarkCache;
    public static MemoryCache ColumnCache { get; }
    public static MemoryCache BookmarkCache { get; }
    public static MemoryCache SecondaryBookmarkCache { get; }
    private static Caches();
    [DebuggerStepThroughAttribute]
public static MemoryCache get_ColumnCache();
    [DebuggerStepThroughAttribute]
public static MemoryCache get_BookmarkCache();
    [DebuggerStepThroughAttribute]
public static MemoryCache get_SecondaryBookmarkCache();
}
internal static class Microsoft.Isam.Esent.Interop.CallbackDataConverter : object {
    public static object GetManagedData(IntPtr nativeData, JET_SNP snp, JET_SNT snt);
}
internal class Microsoft.Isam.Esent.Interop.CallbackWrappers : object {
    private object lockObject;
    private List`1<JetCallbackWrapper> callbackWrappers;
    [CompilerGeneratedAttribute]
private static Predicate`1<JetCallbackWrapper> CS$<>9__CachedAnonymousMethodDelegate3;
    public JetCallbackWrapper Add(JET_CALLBACK callback);
    public void Collect();
    private bool TryFindWrapperFor(JET_CALLBACK callback, JetCallbackWrapper& wrapper);
    [CompilerGeneratedAttribute]
private static bool <Collect>b__2(JetCallbackWrapper wrapper);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.CloseDatabaseGrbit : Enum {
    public int value__;
    public static CloseDatabaseGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.ColInfoGrbit : Enum {
    public int value__;
    public static ColInfoGrbit None;
    public static ColInfoGrbit NonDerivedColumnsOnly;
    public static ColInfoGrbit MinimalInfo;
    public static ColInfoGrbit SortByColumnid;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.ColumndefGrbit : Enum {
    public int value__;
    public static ColumndefGrbit None;
    public static ColumndefGrbit ColumnFixed;
    public static ColumndefGrbit ColumnTagged;
    public static ColumndefGrbit ColumnNotNULL;
    public static ColumndefGrbit ColumnVersion;
    public static ColumndefGrbit ColumnAutoincrement;
    public static ColumndefGrbit ColumnUpdatable;
    public static ColumndefGrbit ColumnMultiValued;
    public static ColumndefGrbit ColumnEscrowUpdate;
    public static ColumndefGrbit ColumnUnversioned;
    public static ColumndefGrbit ColumnMaybeNull;
    public static ColumndefGrbit ColumnFinalize;
    public static ColumndefGrbit ColumnUserDefinedDefault;
    public static ColumndefGrbit TTKey;
    public static ColumndefGrbit TTDescending;
}
public class Microsoft.Isam.Esent.Interop.ColumnInfo : object {
    private ReadOnlyCollection`1<byte> defaultValue;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <Columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_coltyp <Coltyp>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_CP <Cp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumndefGrbit <Grbit>k__BackingField;
    public string Name { get; private set; }
    public JET_COLUMNID Columnid { get; private set; }
    public JET_coltyp Coltyp { get; private set; }
    public JET_CP Cp { get; private set; }
    public int MaxLength { get; private set; }
    public IList`1<byte> DefaultValue { get; }
    public ColumndefGrbit Grbit { get; private set; }
    internal ColumnInfo(string name, JET_COLUMNID columnid, JET_coltyp coltyp, JET_CP cp, int maxLength, Byte[] defaultValue, ColumndefGrbit grbit);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_Columnid();
    [CompilerGeneratedAttribute]
private void set_Columnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_coltyp get_Coltyp();
    [CompilerGeneratedAttribute]
private void set_Coltyp(JET_coltyp value);
    [CompilerGeneratedAttribute]
public JET_CP get_Cp();
    [CompilerGeneratedAttribute]
private void set_Cp(JET_CP value);
    [CompilerGeneratedAttribute]
public int get_MaxLength();
    [CompilerGeneratedAttribute]
private void set_MaxLength(int value);
    public IList`1<byte> get_DefaultValue();
    [CompilerGeneratedAttribute]
public ColumndefGrbit get_Grbit();
    [CompilerGeneratedAttribute]
private void set_Grbit(ColumndefGrbit value);
    public virtual string ToString();
}
internal abstract class Microsoft.Isam.Esent.Interop.ColumnInfoEnumerator : TableEnumerator`1<ColumnInfo> {
    [CompilerGeneratedAttribute]
private JET_COLUMNLIST <Columnlist>k__BackingField;
    protected JET_COLUMNLIST Columnlist { get; protected set; }
    protected ColumnInfoEnumerator(JET_SESID sesid);
    [CompilerGeneratedAttribute]
protected JET_COLUMNLIST get_Columnlist();
    [CompilerGeneratedAttribute]
protected void set_Columnlist(JET_COLUMNLIST value);
    protected virtual ColumnInfo GetCurrent();
    private static ColumnInfo GetColumnInfoFromColumnlist(JET_SESID sesid, JET_COLUMNLIST columnlist);
}
public class Microsoft.Isam.Esent.Interop.ColumnStream : Stream {
    private static int MaxLongValueSize;
    private JET_SESID sesid;
    private JET_TABLEID tableid;
    private JET_COLUMNID columnid;
    private int ibLongValue;
    [CompilerGeneratedAttribute]
private int <Itag>k__BackingField;
    public int Itag { get; public set; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Position { get; public set; }
    public long Length { get; }
    private static RetrieveColumnGrbit RetrieveGrbit { get; }
    public ColumnStream(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid);
    [CompilerGeneratedAttribute]
public int get_Itag();
    [CompilerGeneratedAttribute]
public void set_Itag(int value);
    [DebuggerStepThroughAttribute]
public virtual bool get_CanRead();
    [DebuggerStepThroughAttribute]
public virtual bool get_CanWrite();
    [DebuggerStepThroughAttribute]
public virtual bool get_CanSeek();
    [DebuggerStepThroughAttribute]
public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long get_Length();
    [DebuggerStepThroughAttribute]
private static RetrieveColumnGrbit get_RetrieveGrbit();
    public virtual string ToString();
    public virtual void Flush();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    private static void CheckBufferArguments(ICollection`1<byte> buffer, int offset, int count);
}
public abstract class Microsoft.Isam.Esent.Interop.ColumnValue : object {
    private RetrieveColumnGrbit grbit;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <Columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private SetColumnGrbit <SetGrbit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItagSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_wrn <Error>k__BackingField;
    public JET_COLUMNID Columnid { get; public set; }
    public object ValueAsObject { get; }
    public SetColumnGrbit SetGrbit { get; public set; }
    public RetrieveColumnGrbit RetrieveGrbit { get; public set; }
    public int ItagSequence { get; public set; }
    public JET_wrn Error { get; internal set; }
    public int Length { get; }
    protected int Size { get; }
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_Columnid();
    [CompilerGeneratedAttribute]
public void set_Columnid(JET_COLUMNID value);
    public abstract virtual object get_ValueAsObject();
    [CompilerGeneratedAttribute]
public SetColumnGrbit get_SetGrbit();
    [CompilerGeneratedAttribute]
public void set_SetGrbit(SetColumnGrbit value);
    public RetrieveColumnGrbit get_RetrieveGrbit();
    public void set_RetrieveGrbit(RetrieveColumnGrbit value);
    [CompilerGeneratedAttribute]
public int get_ItagSequence();
    [CompilerGeneratedAttribute]
public void set_ItagSequence(int value);
    [CompilerGeneratedAttribute]
public JET_wrn get_Error();
    [CompilerGeneratedAttribute]
internal void set_Error(JET_wrn value);
    public abstract virtual int get_Length();
    protected abstract virtual int get_Size();
    public abstract virtual string ToString();
    internal static void RetrieveColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues);
    internal abstract virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    internal int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i, Void* buffer, int bufferSize, bool hasValue);
    protected abstract virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
    protected virtual void ValidateRetrieveGrbit(RetrieveColumnGrbit grbit);
    private static void RetrieveTruncatedBuffers(JET_SESID sesid, JET_TABLEID tableid, IList`1<ColumnValue> columnValues, NATIVE_RETRIEVECOLUMN* nativeRetrievecolumns);
    private void MakeNativeSetColumn(NATIVE_SETCOLUMN& setcolumn);
    private void MakeNativeRetrieveColumn(NATIVE_RETRIEVECOLUMN& retrievecolumn);
}
public abstract class Microsoft.Isam.Esent.Interop.ColumnValueOfStruct`1 : ColumnValue {
    private Nullable`1<T> internalValue;
    public object ValueAsObject { get; }
    public Nullable`1<T> Value { get; public set; }
    public int Length { get; }
    public virtual object get_ValueAsObject();
    public Nullable`1<T> get_Value();
    public void set_Value(Nullable`1<T> value);
    public virtual int get_Length();
    public virtual string ToString();
    protected void CheckDataCount(int count);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.CommitTransactionGrbit : Enum {
    public int value__;
    public static CommitTransactionGrbit None;
    public static CommitTransactionGrbit LazyFlush;
    public static CommitTransactionGrbit WaitLastLevel0Commit;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.CompactGrbit : Enum {
    public int value__;
    public static CompactGrbit None;
    public static CompactGrbit Stats;
    [ObsoleteAttribute("Use esentutl repair functionality instead.")]
public static CompactGrbit Repair;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.ConditionalColumnGrbit : Enum {
    public int value__;
    public static ConditionalColumnGrbit ColumnMustBeNull;
    public static ConditionalColumnGrbit ColumnMustBeNonNull;
}
public static class Microsoft.Isam.Esent.Interop.Conversions : object {
    private static IDictionary`2<CompareOptions, UInt32> CompareOptionsToLcmapFlags;
    private static IDictionary`2<UInt32, CompareOptions> LcmapFlagsToCompareOptions;
    private static Conversions();
    public static DateTime ConvertDoubleToDateTime(double d);
    [CLSCompliantAttribute("False")]
public static CompareOptions CompareOptionsFromLCMapFlags(UInt32 lcmapFlags);
    [CLSCompliantAttribute("False")]
public static UInt32 LCMapFlagsFromCompareOptions(CompareOptions compareOptions);
    private static IDictionary`2<TKey, TValue> InvertDictionary(ICollection`1<KeyValuePair`2<TValue, TKey>> dict);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.CreateDatabaseGrbit : Enum {
    public int value__;
    public static CreateDatabaseGrbit None;
    public static CreateDatabaseGrbit OverwriteExisting;
    public static CreateDatabaseGrbit RecoveryOff;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.CreateIndexGrbit : Enum {
    public int value__;
    public static CreateIndexGrbit None;
    public static CreateIndexGrbit IndexUnique;
    public static CreateIndexGrbit IndexPrimary;
    public static CreateIndexGrbit IndexDisallowNull;
    public static CreateIndexGrbit IndexIgnoreNull;
    public static CreateIndexGrbit IndexIgnoreAnyNull;
    public static CreateIndexGrbit IndexIgnoreFirstNull;
    public static CreateIndexGrbit IndexLazyFlush;
    public static CreateIndexGrbit IndexEmpty;
    public static CreateIndexGrbit IndexUnversioned;
    public static CreateIndexGrbit IndexSortNullsHigh;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.CreateInstanceGrbit : Enum {
    public int value__;
    public static CreateInstanceGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.CreateTableColumnIndexGrbit : Enum {
    public int value__;
    public static CreateTableColumnIndexGrbit None;
    public static CreateTableColumnIndexGrbit FixedDDL;
    public static CreateTableColumnIndexGrbit TemplateTable;
    public static CreateTableColumnIndexGrbit NoFixedVarColumnsInDerivedTables;
}
public class Microsoft.Isam.Esent.Interop.DateTimeColumnValue : ColumnValueOfStruct`1<DateTime> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.DefragGrbit : Enum {
    public int value__;
    public static DefragGrbit AvailSpaceTreesOnly;
    public static DefragGrbit BatchStart;
    public static DefragGrbit BatchStop;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.DeleteColumnGrbit : Enum {
    public int value__;
    public static DeleteColumnGrbit None;
    public static DeleteColumnGrbit IgnoreTemplateColumns;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.DetachDatabaseGrbit : Enum {
    public int value__;
    public static DetachDatabaseGrbit None;
    [ObsoleteAttribute("ForceDetach is no longer used.")]
public static DetachDatabaseGrbit ForceDetach;
    [ObsoleteAttribute("ForceClose is no longer used.")]
public static DetachDatabaseGrbit ForceClose;
    [ObsoleteAttribute("ForceCloseAndDetach is no longer used.")]
public static DetachDatabaseGrbit ForceCloseAndDetach;
}
public class Microsoft.Isam.Esent.Interop.DoubleColumnValue : ColumnValueOfStruct`1<double> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.DupCursorGrbit : Enum {
    public int value__;
    public static DupCursorGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.EndExternalBackupGrbit : Enum {
    public int value__;
    public static EndExternalBackupGrbit None;
    public static EndExternalBackupGrbit Normal;
    public static EndExternalBackupGrbit Abort;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.EndSessionGrbit : Enum {
    public int value__;
    public static EndSessionGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.EnumerateColumnsGrbit : Enum {
    public int value__;
    public static EnumerateColumnsGrbit None;
    public static EnumerateColumnsGrbit EnumerateCompressOutput;
    public static EnumerateColumnsGrbit EnumerateCopy;
    public static EnumerateColumnsGrbit EnumerateIgnoreDefault;
    public static EnumerateColumnsGrbit EnumeratePresenceOnly;
    public static EnumerateColumnsGrbit EnumerateTaggedOnly;
}
public class Microsoft.Isam.Esent.Interop.EnumeratedColumn : object {
    [CompilerGeneratedAttribute]
private JET_COLUMNID <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_err <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_wrn <Warning>k__BackingField;
    [CompilerGeneratedAttribute]
private Value[] <Values>k__BackingField;
    public JET_COLUMNID Id { get; public set; }
    public JET_err Error { get; public set; }
    public JET_wrn Warning { get; public set; }
    public Value[] Values { get; public set; }
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_err get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(JET_err value);
    [CompilerGeneratedAttribute]
public JET_wrn get_Warning();
    [CompilerGeneratedAttribute]
public void set_Warning(JET_wrn value);
    [CompilerGeneratedAttribute]
public Value[] get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(Value[] value);
    public virtual string ToString();
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.EscrowUpdateGrbit : Enum {
    public int value__;
    public static EscrowUpdateGrbit None;
    public static EscrowUpdateGrbit NoRollback;
}
public class Microsoft.Isam.Esent.Interop.EsentAccessDeniedException : EsentObsoleteException {
    private EsentAccessDeniedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentAfterInitializationException : EsentUsageException {
    private EsentAfterInitializationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentAlreadyInitializedException : EsentUsageException {
    private EsentAlreadyInitializedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentAlreadyPreparedException : EsentUsageException {
    private EsentAlreadyPreparedException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentApiException : EsentErrorException {
    protected EsentApiException(string description, JET_err err);
    protected EsentApiException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentAttachedDatabaseMismatchException : EsentInconsistentException {
    private EsentAttachedDatabaseMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBackupAbortByServerException : EsentOperationException {
    private EsentBackupAbortByServerException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBackupDirectoryNotEmptyException : EsentUsageException {
    private EsentBackupDirectoryNotEmptyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBackupInProgressException : EsentStateException {
    private EsentBackupInProgressException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBackupNotAllowedYetException : EsentStateException {
    private EsentBackupNotAllowedYetException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadBackupDatabaseSizeException : EsentObsoleteException {
    private EsentBadBackupDatabaseSizeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadBookmarkException : EsentObsoleteException {
    private EsentBadBookmarkException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadCheckpointSignatureException : EsentInconsistentException {
    private EsentBadCheckpointSignatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadColumnIdException : EsentUsageException {
    private EsentBadColumnIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadDbSignatureException : EsentObsoleteException {
    private EsentBadDbSignatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadEmptyPageException : EsentCorruptionException {
    private EsentBadEmptyPageException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadItagSequenceException : EsentStateException {
    private EsentBadItagSequenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadLineCountException : EsentCorruptionException {
    private EsentBadLineCountException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadLogSignatureException : EsentInconsistentException {
    private EsentBadLogSignatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadLogVersionException : EsentInconsistentException {
    private EsentBadLogVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadPageLinkException : EsentCorruptionException {
    private EsentBadPageLinkException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadParentPageLinkException : EsentCorruptionException {
    private EsentBadParentPageLinkException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadPatchPageException : EsentObsoleteException {
    private EsentBadPatchPageException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBadRestoreTargetInstanceException : EsentUsageException {
    private EsentBadRestoreTargetInstanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentBufferTooSmallException : EsentStateException {
    private EsentBufferTooSmallException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCallbackFailedException : EsentStateException {
    private EsentCallbackFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCallbackNotResolvedException : EsentUsageException {
    private EsentCallbackNotResolvedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotAddFixedVarColumnToDerivedTableException : EsentObsoleteException {
    private EsentCannotAddFixedVarColumnToDerivedTableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotBeTaggedException : EsentUsageException {
    private EsentCannotBeTaggedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotDeleteSystemTableException : EsentUsageException {
    private EsentCannotDeleteSystemTableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotDeleteTemplateTableException : EsentUsageException {
    private EsentCannotDeleteTemplateTableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotDeleteTempTableException : EsentUsageException {
    private EsentCannotDeleteTempTableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotDisableVersioningException : EsentUsageException {
    private EsentCannotDisableVersioningException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotIndexException : EsentUsageException {
    private EsentCannotIndexException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotIndexOnEncryptedColumnException : EsentUsageException {
    private EsentCannotIndexOnEncryptedColumnException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotLogDuringRecoveryRedoException : EsentErrorException {
    private EsentCannotLogDuringRecoveryRedoException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotMaterializeForwardOnlySortException : EsentUsageException {
    private EsentCannotMaterializeForwardOnlySortException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotNestDDLException : EsentUsageException {
    private EsentCannotNestDDLException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotNestDistributedTransactionsException : EsentObsoleteException {
    private EsentCannotNestDistributedTransactionsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCannotSeparateIntrinsicLVException : EsentUsageException {
    private EsentCannotSeparateIntrinsicLVException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCatalogCorruptedException : EsentCorruptionException {
    private EsentCatalogCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCheckpointCorruptException : EsentCorruptionException {
    private EsentCheckpointCorruptException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCheckpointDepthTooDeepException : EsentQuotaException {
    private EsentCheckpointDepthTooDeepException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCheckpointFileNotFoundException : EsentInconsistentException {
    private EsentCheckpointFileNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentClientRequestToStopJetServiceException : EsentOperationException {
    private EsentClientRequestToStopJetServiceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnCannotBeCompressedException : EsentUsageException {
    private EsentColumnCannotBeCompressedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnCannotBeEncryptedException : EsentUsageException {
    private EsentColumnCannotBeEncryptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnDoesNotFitException : EsentUsageException {
    private EsentColumnDoesNotFitException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnDuplicateException : EsentUsageException {
    private EsentColumnDuplicateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnIndexedException : EsentObsoleteException {
    private EsentColumnIndexedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnInRelationshipException : EsentObsoleteException {
    private EsentColumnInRelationshipException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnInUseException : EsentUsageException {
    private EsentColumnInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnLongException : EsentObsoleteException {
    private EsentColumnLongException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnNoChunkException : EsentUsageException {
    private EsentColumnNoChunkException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnNoEncryptionKeyException : EsentUsageException {
    private EsentColumnNoEncryptionKeyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnNotFoundException : EsentUsageException {
    private EsentColumnNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnNotUpdatableException : EsentUsageException {
    private EsentColumnNotUpdatableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnRedundantException : EsentUsageException {
    private EsentColumnRedundantException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentColumnTooBigException : EsentUsageException {
    private EsentColumnTooBigException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCommittedLogFileCorruptException : EsentCorruptionException {
    private EsentCommittedLogFileCorruptException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCommittedLogFilesMissingException : EsentCorruptionException {
    private EsentCommittedLogFilesMissingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCompressionIntegrityCheckFailedException : EsentCorruptionException {
    private EsentCompressionIntegrityCheckFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentConsistentTimeMismatchException : EsentInconsistentException {
    private EsentConsistentTimeMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentContainerNotEmptyException : EsentObsoleteException {
    private EsentContainerNotEmptyException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentCorruptionException : EsentDataException {
    protected EsentCorruptionException(string description, JET_err err);
    protected EsentCorruptionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentCurrencyStackOutOfMemoryException : EsentObsoleteException {
    private EsentCurrencyStackOutOfMemoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabase200FormatException : EsentObsoleteException {
    private EsentDatabase200FormatException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabase400FormatException : EsentObsoleteException {
    private EsentDatabase400FormatException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabase500FormatException : EsentObsoleteException {
    private EsentDatabase500FormatException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseAlreadyRunningMaintenanceException : EsentUsageException {
    private EsentDatabaseAlreadyRunningMaintenanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseAlreadyUpgradedException : EsentStateException {
    private EsentDatabaseAlreadyUpgradedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseAttachedForRecoveryException : EsentUsageException {
    private EsentDatabaseAttachedForRecoveryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseBufferDependenciesCorruptedException : EsentCorruptionException {
    private EsentDatabaseBufferDependenciesCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseCorruptedException : EsentCorruptionException {
    private EsentDatabaseCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseCorruptedNoRepairException : EsentUsageException {
    private EsentDatabaseCorruptedNoRepairException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseDirtyShutdownException : EsentInconsistentException {
    private EsentDatabaseDirtyShutdownException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseDuplicateException : EsentUsageException {
    private EsentDatabaseDuplicateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseFailedIncrementalReseedException : EsentStateException {
    private EsentDatabaseFailedIncrementalReseedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseFileReadOnlyException : EsentUsageException {
    private EsentDatabaseFileReadOnlyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseIdInUseException : EsentObsoleteException {
    private EsentDatabaseIdInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseIncompleteIncrementalReseedException : EsentInconsistentException {
    private EsentDatabaseIncompleteIncrementalReseedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseIncompleteUpgradeException : EsentStateException {
    private EsentDatabaseIncompleteUpgradeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseInUseException : EsentUsageException {
    private EsentDatabaseInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseInvalidIncrementalReseedException : EsentUsageException {
    private EsentDatabaseInvalidIncrementalReseedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseInvalidNameException : EsentUsageException {
    private EsentDatabaseInvalidNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseInvalidPagesException : EsentUsageException {
    private EsentDatabaseInvalidPagesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseInvalidPathException : EsentUsageException {
    private EsentDatabaseInvalidPathException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseLeakInSpaceException : EsentStateException {
    private EsentDatabaseLeakInSpaceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseLockedException : EsentUsageException {
    private EsentDatabaseLockedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseLogSetMismatchException : EsentInconsistentException {
    private EsentDatabaseLogSetMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseNotFoundException : EsentUsageException {
    private EsentDatabaseNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseNotReadyException : EsentUsageException {
    private EsentDatabaseNotReadyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabasePatchFileMismatchException : EsentObsoleteException {
    private EsentDatabasePatchFileMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseSharingViolationException : EsentUsageException {
    private EsentDatabaseSharingViolationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseSignInUseException : EsentUsageException {
    private EsentDatabaseSignInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabasesNotFromSameSnapshotException : EsentObsoleteException {
    private EsentDatabasesNotFromSameSnapshotException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseStreamingFileMismatchException : EsentObsoleteException {
    private EsentDatabaseStreamingFileMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDatabaseUnavailableException : EsentObsoleteException {
    private EsentDatabaseUnavailableException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentDataException : EsentErrorException {
    protected EsentDataException(string description, JET_err err);
    protected EsentDataException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDataHasChangedException : EsentObsoleteException {
    private EsentDataHasChangedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDbTimeCorruptedException : EsentCorruptionException {
    private EsentDbTimeCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDbTimeTooNewException : EsentCorruptionException {
    private EsentDbTimeTooNewException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDbTimeTooOldException : EsentCorruptionException {
    private EsentDbTimeTooOldException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDDLNotInheritableException : EsentUsageException {
    private EsentDDLNotInheritableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDecompressionFailedException : EsentCorruptionException {
    private EsentDecompressionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDecryptionFailedException : EsentCorruptionException {
    private EsentDecryptionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDefaultValueTooBigException : EsentUsageException {
    private EsentDefaultValueTooBigException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDeleteBackupFileFailException : EsentIOException {
    private EsentDeleteBackupFileFailException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDensityInvalidException : EsentUsageException {
    private EsentDensityInvalidException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDerivedColumnCorruptionException : EsentCorruptionException {
    private EsentDerivedColumnCorruptionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDirtyShutdownException : EsentStateException {
    private EsentDirtyShutdownException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDisabledFunctionalityException : EsentUsageException {
    private EsentDisabledFunctionalityException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentDiskException : EsentResourceException {
    protected EsentDiskException(string description, JET_err err);
    protected EsentDiskException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDiskFullException : EsentDiskException {
    private EsentDiskFullException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDiskIOException : EsentIOException {
    private EsentDiskIOException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDiskReadVerificationFailureException : EsentCorruptionException {
    private EsentDiskReadVerificationFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDistributedTransactionAlreadyPreparedToCommitException : EsentObsoleteException {
    private EsentDistributedTransactionAlreadyPreparedToCommitException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDistributedTransactionNotYetPreparedToCommitException : EsentObsoleteException {
    private EsentDistributedTransactionNotYetPreparedToCommitException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDTCCallbackUnexpectedErrorException : EsentObsoleteException {
    private EsentDTCCallbackUnexpectedErrorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDTCMissingCallbackException : EsentObsoleteException {
    private EsentDTCMissingCallbackException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentDTCMissingCallbackOnRecoveryException : EsentObsoleteException {
    private EsentDTCMissingCallbackOnRecoveryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEncryptionBadItagException : EsentUsageException {
    private EsentEncryptionBadItagException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEndingRestoreLogTooLowException : EsentInconsistentException {
    private EsentEndingRestoreLogTooLowException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEngineFormatVersionNoLongerSupportedTooLowException : EsentUsageException {
    private EsentEngineFormatVersionNoLongerSupportedTooLowException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEngineFormatVersionNotYetImplementedTooHighException : EsentUsageException {
    private EsentEngineFormatVersionNotYetImplementedTooHighException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEngineFormatVersionParamTooLowForRequestedFeatureException : EsentUsageException {
    private EsentEngineFormatVersionParamTooLowForRequestedFeatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEngineFormatVersionSpecifiedTooLowForDatabaseVersionException : EsentStateException {
    private EsentEngineFormatVersionSpecifiedTooLowForDatabaseVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEngineFormatVersionSpecifiedTooLowForLogVersionException : EsentStateException {
    private EsentEngineFormatVersionSpecifiedTooLowForLogVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentEntryPointNotFoundException : EsentUsageException {
    private EsentEntryPointNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentErrorException : EsentException {
    private JET_err errorCode;
    public JET_err Error { get; }
    internal EsentErrorException(string message, JET_err err);
    protected EsentErrorException(SerializationInfo info, StreamingContext context);
    public JET_err get_Error();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.Isam.Esent.Interop.EsentExceptionHelper : object {
    public static EsentErrorException JetErrToException(JET_err err);
}
public class Microsoft.Isam.Esent.Interop.EsentExclusiveTableLockRequiredException : EsentUsageException {
    private EsentExclusiveTableLockRequiredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentExistingLogFileHasBadSignatureException : EsentInconsistentException {
    private EsentExistingLogFileHasBadSignatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentExistingLogFileIsNotContiguousException : EsentInconsistentException {
    private EsentExistingLogFileIsNotContiguousException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentFatalException : EsentOperationException {
    protected EsentFatalException(string description, JET_err err);
    protected EsentFatalException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFeatureNotAvailableException : EsentUsageException {
    private EsentFeatureNotAvailableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileAccessDeniedException : EsentIOException {
    private EsentFileAccessDeniedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileAlreadyExistsException : EsentInconsistentException {
    private EsentFileAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileCloseException : EsentObsoleteException {
    private EsentFileCloseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileCompressedException : EsentUsageException {
    private EsentFileCompressedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileInvalidTypeException : EsentInconsistentException {
    private EsentFileInvalidTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileIOAbortException : EsentObsoleteException {
    private EsentFileIOAbortException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileIOBeyondEOFException : EsentCorruptionException {
    private EsentFileIOBeyondEOFException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileIOFailException : EsentObsoleteException {
    private EsentFileIOFailException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileIORetryException : EsentObsoleteException {
    private EsentFileIORetryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileIOSparseException : EsentObsoleteException {
    private EsentFileIOSparseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileNotFoundException : EsentStateException {
    private EsentFileNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFileSystemCorruptionException : EsentCorruptionException {
    private EsentFileSystemCorruptionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFilteredMoveNotSupportedException : EsentUsageException {
    private EsentFilteredMoveNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFixedDDLException : EsentUsageException {
    private EsentFixedDDLException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFixedInheritedDDLException : EsentUsageException {
    private EsentFixedInheritedDDLException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFlushMapDatabaseMismatchException : EsentUsageException {
    private EsentFlushMapDatabaseMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFlushMapUnrecoverableException : EsentStateException {
    private EsentFlushMapUnrecoverableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentFlushMapVersionUnsupportedException : EsentUsageException {
    private EsentFlushMapVersionUnsupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentForceDetachNotAllowedException : EsentUsageException {
    private EsentForceDetachNotAllowedException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentFragmentationException : EsentDataException {
    protected EsentFragmentationException(string description, JET_err err);
    protected EsentFragmentationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentGivenLogFileHasBadSignatureException : EsentInconsistentException {
    private EsentGivenLogFileHasBadSignatureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentGivenLogFileIsNotContiguousException : EsentInconsistentException {
    private EsentGivenLogFileIsNotContiguousException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIllegalOperationException : EsentUsageException {
    private EsentIllegalOperationException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentInconsistentException : EsentDataException {
    protected EsentInconsistentException(string description, JET_err err);
    protected EsentInconsistentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexBuildCorruptedException : EsentCorruptionException {
    private EsentIndexBuildCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexCantBuildException : EsentObsoleteException {
    private EsentIndexCantBuildException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexDuplicateException : EsentUsageException {
    private EsentIndexDuplicateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexHasPrimaryException : EsentUsageException {
    private EsentIndexHasPrimaryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexInUseException : EsentStateException {
    private EsentIndexInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexInvalidDefException : EsentUsageException {
    private EsentIndexInvalidDefException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexMustStayException : EsentUsageException {
    private EsentIndexMustStayException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexNotFoundException : EsentStateException {
    private EsentIndexNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesCannotRetrieveFromIndexException : EsentUsageException {
    private EsentIndexTuplesCannotRetrieveFromIndexException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesInvalidLimitsException : EsentUsageException {
    private EsentIndexTuplesInvalidLimitsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesKeyTooSmallException : EsentUsageException {
    private EsentIndexTuplesKeyTooSmallException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesNonUniqueOnlyException : EsentUsageException {
    private EsentIndexTuplesNonUniqueOnlyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesSecondaryIndexOnlyException : EsentUsageException {
    private EsentIndexTuplesSecondaryIndexOnlyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesTextBinaryColumnsOnlyException : EsentUsageException {
    private EsentIndexTuplesTextBinaryColumnsOnlyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesTooManyColumnsException : EsentObsoleteException {
    private EsentIndexTuplesTooManyColumnsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentIndexTuplesVarSegMacNotAllowedException : EsentUsageException {
    private EsentIndexTuplesVarSegMacNotAllowedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInitInProgressException : EsentOperationException {
    private EsentInitInProgressException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInstanceNameInUseException : EsentUsageException {
    private EsentInstanceNameInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInstanceUnavailableDueToFatalLogDiskFullException : EsentFatalException {
    private EsentInstanceUnavailableDueToFatalLogDiskFullException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInstanceUnavailableException : EsentFatalException {
    private EsentInstanceUnavailableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInternalErrorException : EsentOperationException {
    private EsentInternalErrorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInTransactionException : EsentUsageException {
    private EsentInTransactionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidBackupException : EsentUsageException {
    private EsentInvalidBackupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidBackupSequenceException : EsentUsageException {
    private EsentInvalidBackupSequenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidBookmarkException : EsentUsageException {
    private EsentInvalidBookmarkException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidBufferSizeException : EsentStateException {
    private EsentInvalidBufferSizeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidCodePageException : EsentUsageException {
    private EsentInvalidCodePageException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidColumnException : EsentException {
    public string Message { get; }
    protected EsentInvalidColumnException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidColumnReferenceException : EsentStateException {
    private EsentInvalidColumnReferenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidColumnTypeException : EsentUsageException {
    private EsentInvalidColumnTypeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidCountryException : EsentObsoleteException {
    private EsentInvalidCountryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidCreateDbVersionException : EsentInconsistentException {
    private EsentInvalidCreateDbVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidCreateIndexException : EsentUsageException {
    private EsentInvalidCreateIndexException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidDatabaseException : EsentUsageException {
    private EsentInvalidDatabaseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidDatabaseIdException : EsentUsageException {
    private EsentInvalidDatabaseIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidDatabaseVersionException : EsentInconsistentException {
    private EsentInvalidDatabaseVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidFilenameException : EsentObsoleteException {
    private EsentInvalidFilenameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidGrbitException : EsentUsageException {
    private EsentInvalidGrbitException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidIndexIdException : EsentUsageException {
    private EsentInvalidIndexIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidInstanceException : EsentUsageException {
    private EsentInvalidInstanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidLanguageIdException : EsentUsageException {
    private EsentInvalidLanguageIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidLCMapStringFlagsException : EsentUsageException {
    private EsentInvalidLCMapStringFlagsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidLogDataSequenceException : EsentStateException {
    private EsentInvalidLogDataSequenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidLogDirectoryException : EsentObsoleteException {
    private EsentInvalidLogDirectoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidLoggedOperationException : EsentObsoleteException {
    private EsentInvalidLoggedOperationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidLogSequenceException : EsentCorruptionException {
    private EsentInvalidLogSequenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidLVChunkSizeException : EsentUsageException {
    private EsentInvalidLVChunkSizeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidNameException : EsentUsageException {
    private EsentInvalidNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidObjectException : EsentObsoleteException {
    private EsentInvalidObjectException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidOnSortException : EsentObsoleteException {
    private EsentInvalidOnSortException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidOperationException : EsentUsageException {
    private EsentInvalidOperationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidParameterException : EsentUsageException {
    private EsentInvalidParameterException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidPathException : EsentUsageException {
    private EsentInvalidPathException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidPlaceholderColumnException : EsentUsageException {
    private EsentInvalidPlaceholderColumnException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidPrereadException : EsentUsageException {
    private EsentInvalidPrereadException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidSesidException : EsentUsageException {
    private EsentInvalidSesidException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidSesparamIdException : EsentUsageException {
    private EsentInvalidSesparamIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidSettingsException : EsentUsageException {
    private EsentInvalidSettingsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidSystemPathException : EsentObsoleteException {
    private EsentInvalidSystemPathException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentInvalidTableIdException : EsentUsageException {
    private EsentInvalidTableIdException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentIOException : EsentOperationException {
    protected EsentIOException(string description, JET_err err);
    protected EsentIOException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentKeyBoundaryException : EsentObsoleteException {
    private EsentKeyBoundaryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentKeyDuplicateException : EsentStateException {
    private EsentKeyDuplicateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentKeyIsMadeException : EsentUsageException {
    private EsentKeyIsMadeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentKeyNotMadeException : EsentUsageException {
    private EsentKeyNotMadeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentKeyTooBigException : EsentObsoleteException {
    private EsentKeyTooBigException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentKeyTruncatedException : EsentStateException {
    private EsentKeyTruncatedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLanguageNotSupportedException : EsentObsoleteException {
    private EsentLanguageNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLinkNotSupportedException : EsentObsoleteException {
    private EsentLinkNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogBufferTooSmallException : EsentObsoleteException {
    private EsentLogBufferTooSmallException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogCorruptDuringHardRecoveryException : EsentCorruptionException {
    private EsentLogCorruptDuringHardRecoveryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogCorruptDuringHardRestoreException : EsentCorruptionException {
    private EsentLogCorruptDuringHardRestoreException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogCorruptedException : EsentCorruptionException {
    private EsentLogCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogDisabledDueToRecoveryFailureException : EsentFatalException {
    private EsentLogDisabledDueToRecoveryFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogDiskFullException : EsentDiskException {
    private EsentLogDiskFullException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogFileCorruptException : EsentCorruptionException {
    private EsentLogFileCorruptException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogFileNotCopiedException : EsentUsageException {
    private EsentLogFileNotCopiedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogFilePathInUseException : EsentUsageException {
    private EsentLogFilePathInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogFileSizeMismatchDatabasesConsistentException : EsentStateException {
    private EsentLogFileSizeMismatchDatabasesConsistentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogFileSizeMismatchException : EsentUsageException {
    private EsentLogFileSizeMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogGenerationMismatchException : EsentInconsistentException {
    private EsentLogGenerationMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLoggingDisabledException : EsentUsageException {
    private EsentLoggingDisabledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogReadVerifyFailureException : EsentCorruptionException {
    private EsentLogReadVerifyFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogSectorSizeMismatchDatabasesConsistentException : EsentStateException {
    private EsentLogSectorSizeMismatchDatabasesConsistentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogSectorSizeMismatchException : EsentFragmentationException {
    private EsentLogSectorSizeMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogSequenceChecksumMismatchException : EsentCorruptionException {
    private EsentLogSequenceChecksumMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogSequenceEndDatabasesConsistentException : EsentFragmentationException {
    private EsentLogSequenceEndDatabasesConsistentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogSequenceEndException : EsentFragmentationException {
    private EsentLogSequenceEndException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogTornWriteDuringHardRecoveryException : EsentCorruptionException {
    private EsentLogTornWriteDuringHardRecoveryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogTornWriteDuringHardRestoreException : EsentCorruptionException {
    private EsentLogTornWriteDuringHardRestoreException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLogWriteFailException : EsentIOException {
    private EsentLogWriteFailException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLSAlreadySetException : EsentUsageException {
    private EsentLSAlreadySetException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLSCallbackNotSpecifiedException : EsentUsageException {
    private EsentLSCallbackNotSpecifiedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLSNotSetException : EsentStateException {
    private EsentLSNotSetException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentLVCorruptedException : EsentCorruptionException {
    private EsentLVCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMakeBackupDirectoryFailException : EsentIOException {
    private EsentMakeBackupDirectoryFailException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentMemoryException : EsentResourceException {
    protected EsentMemoryException(string description, JET_err err);
    protected EsentMemoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMissingCurrentLogFilesException : EsentInconsistentException {
    private EsentMissingCurrentLogFilesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMissingFileToBackupException : EsentInconsistentException {
    private EsentMissingFileToBackupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMissingFullBackupException : EsentStateException {
    private EsentMissingFullBackupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMissingLogFileException : EsentCorruptionException {
    private EsentMissingLogFileException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMissingPatchPageException : EsentObsoleteException {
    private EsentMissingPatchPageException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMissingPreviousLogFileException : EsentCorruptionException {
    private EsentMissingPreviousLogFileException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMissingRestoreLogFilesException : EsentInconsistentException {
    private EsentMissingRestoreLogFilesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMultiValuedColumnMustBeTaggedException : EsentUsageException {
    private EsentMultiValuedColumnMustBeTaggedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMultiValuedDuplicateAfterTruncationException : EsentStateException {
    private EsentMultiValuedDuplicateAfterTruncationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMultiValuedDuplicateException : EsentStateException {
    private EsentMultiValuedDuplicateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMultiValuedIndexViolationException : EsentUsageException {
    private EsentMultiValuedIndexViolationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMustBeSeparateLongValueException : EsentUsageException {
    private EsentMustBeSeparateLongValueException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMustCommitDistributedTransactionToLevel0Exception : EsentObsoleteException {
    private EsentMustCommitDistributedTransactionToLevel0Exception(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMustDisableLoggingForDbUpgradeException : EsentObsoleteException {
    private EsentMustDisableLoggingForDbUpgradeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentMustRollbackException : EsentUsageException {
    private EsentMustRollbackException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNoAttachmentsFailedIncrementalReseedException : EsentStateException {
    private EsentNoAttachmentsFailedIncrementalReseedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNoBackupDirectoryException : EsentUsageException {
    private EsentNoBackupDirectoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNoBackupException : EsentStateException {
    private EsentNoBackupException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNoCurrentIndexException : EsentUsageException {
    private EsentNoCurrentIndexException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNoCurrentRecordException : EsentStateException {
    private EsentNoCurrentRecordException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNotInDistributedTransactionException : EsentObsoleteException {
    private EsentNotInDistributedTransactionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNotInitializedException : EsentUsageException {
    private EsentNotInitializedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNotInTransactionException : EsentUsageException {
    private EsentNotInTransactionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNTSystemCallFailedException : EsentOperationException {
    private EsentNTSystemCallFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNullInvalidException : EsentUsageException {
    private EsentNullInvalidException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentNullKeyDisallowedException : EsentUsageException {
    private EsentNullKeyDisallowedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentObjectDuplicateException : EsentObsoleteException {
    private EsentObjectDuplicateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentObjectNotFoundException : EsentStateException {
    private EsentObjectNotFoundException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentObsoleteException : EsentApiException {
    protected EsentObsoleteException(string description, JET_err err);
    protected EsentObsoleteException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOneDatabasePerSessionException : EsentUsageException {
    private EsentOneDatabasePerSessionException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentOperationException : EsentErrorException {
    protected EsentOperationException(string description, JET_err err);
    protected EsentOperationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOSSnapshotInvalidSequenceException : EsentUsageException {
    private EsentOSSnapshotInvalidSequenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOSSnapshotInvalidSnapIdException : EsentUsageException {
    private EsentOSSnapshotInvalidSnapIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOSSnapshotNotAllowedException : EsentStateException {
    private EsentOSSnapshotNotAllowedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOSSnapshotTimeOutException : EsentOperationException {
    private EsentOSSnapshotTimeOutException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfAutoincrementValuesException : EsentFragmentationException {
    private EsentOutOfAutoincrementValuesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfBuffersException : EsentMemoryException {
    private EsentOutOfBuffersException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfCursorsException : EsentMemoryException {
    private EsentOutOfCursorsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfDatabaseSpaceException : EsentQuotaException {
    private EsentOutOfDatabaseSpaceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfDbtimeValuesException : EsentFragmentationException {
    private EsentOutOfDbtimeValuesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfFileHandlesException : EsentMemoryException {
    private EsentOutOfFileHandlesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfLongValueIDsException : EsentFragmentationException {
    private EsentOutOfLongValueIDsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfMemoryException : EsentMemoryException {
    private EsentOutOfMemoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfObjectIDsException : EsentFragmentationException {
    private EsentOutOfObjectIDsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfSequentialIndexValuesException : EsentFragmentationException {
    private EsentOutOfSequentialIndexValuesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfSessionsException : EsentMemoryException {
    private EsentOutOfSessionsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentOutOfThreadsException : EsentMemoryException {
    private EsentOutOfThreadsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPageBoundaryException : EsentObsoleteException {
    private EsentPageBoundaryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPageInitializedMismatchException : EsentCorruptionException {
    private EsentPageInitializedMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPageNotInitializedException : EsentCorruptionException {
    private EsentPageNotInitializedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPageSizeMismatchException : EsentInconsistentException {
    private EsentPageSizeMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPartiallyAttachedDBException : EsentUsageException {
    private EsentPartiallyAttachedDBException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPatchFileMissingException : EsentObsoleteException {
    private EsentPatchFileMissingException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPermissionDeniedException : EsentUsageException {
    private EsentPermissionDeniedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPreviousVersionException : EsentErrorException {
    private EsentPreviousVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentPrimaryIndexCorruptedException : EsentCorruptionException {
    private EsentPrimaryIndexCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentQueryNotSupportedException : EsentObsoleteException {
    private EsentQueryNotSupportedException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentQuotaException : EsentResourceException {
    protected EsentQuotaException(string description, JET_err err);
    protected EsentQuotaException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentReadLostFlushVerifyFailureException : EsentCorruptionException {
    private EsentReadLostFlushVerifyFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentReadPgnoVerifyFailureException : EsentCorruptionException {
    private EsentReadPgnoVerifyFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentReadVerifyFailureException : EsentCorruptionException {
    private EsentReadVerifyFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordDeletedException : EsentStateException {
    private EsentRecordDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordFormatConversionFailedException : EsentCorruptionException {
    private EsentRecordFormatConversionFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordNoCopyException : EsentUsageException {
    private EsentRecordNoCopyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordNotDeletedException : EsentOperationException {
    private EsentRecordNotDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordNotFoundException : EsentStateException {
    private EsentRecordNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordPrimaryChangedException : EsentUsageException {
    private EsentRecordPrimaryChangedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordTooBigException : EsentStateException {
    private EsentRecordTooBigException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecordTooBigForBackwardCompatibilityException : EsentStateException {
    private EsentRecordTooBigForBackwardCompatibilityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecoveredWithErrorsException : EsentStateException {
    private EsentRecoveredWithErrorsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecoveredWithoutUndoDatabasesConsistentException : EsentStateException {
    private EsentRecoveredWithoutUndoDatabasesConsistentException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecoveredWithoutUndoException : EsentStateException {
    private EsentRecoveredWithoutUndoException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRecoveryVerifyFailureException : EsentCorruptionException {
    private EsentRecoveryVerifyFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRedoAbruptEndedException : EsentCorruptionException {
    private EsentRedoAbruptEndedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRequiredLogFilesMissingException : EsentInconsistentException {
    private EsentRequiredLogFilesMissingException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentResource : object {
    private bool hasResource;
    private bool isDisposed;
    protected bool HasResource { get; }
    protected virtual void Finalize();
    protected bool get_HasResource();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool isDisposing);
    protected void CheckObjectIsNotDisposed();
    protected void ResourceWasAllocated();
    protected void ResourceWasReleased();
    protected abstract virtual void ReleaseResource();
}
public abstract class Microsoft.Isam.Esent.Interop.EsentResourceException : EsentOperationException {
    protected EsentResourceException(string description, JET_err err);
    protected EsentResourceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRestoreInProgressException : EsentStateException {
    private EsentRestoreInProgressException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRestoreOfNonBackupDatabaseException : EsentUsageException {
    private EsentRestoreOfNonBackupDatabaseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRfsFailureException : EsentObsoleteException {
    private EsentRfsFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRfsNotArmedException : EsentObsoleteException {
    private EsentRfsNotArmedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRollbackErrorException : EsentFatalException {
    private EsentRollbackErrorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRollbackRequiredException : EsentObsoleteException {
    private EsentRollbackRequiredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRunningInMultiInstanceModeException : EsentUsageException {
    private EsentRunningInMultiInstanceModeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentRunningInOneInstanceModeException : EsentUsageException {
    private EsentRunningInOneInstanceModeException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSecondaryIndexCorruptedException : EsentCorruptionException {
    private EsentSecondaryIndexCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSectorSizeNotSupportedException : EsentFatalException {
    private EsentSectorSizeNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSeparatedLongValueException : EsentStateException {
    private EsentSeparatedLongValueException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSesidTableIdMismatchException : EsentUsageException {
    private EsentSesidTableIdMismatchException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSessionContextAlreadySetException : EsentUsageException {
    private EsentSessionContextAlreadySetException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSessionContextNotSetByThisThreadException : EsentUsageException {
    private EsentSessionContextNotSetByThisThreadException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSessionInUseException : EsentUsageException {
    private EsentSessionInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSessionSharingViolationException : EsentUsageException {
    private EsentSessionSharingViolationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSessionWriteConflictException : EsentUsageException {
    private EsentSessionWriteConflictException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSoftRecoveryOnBackupDatabaseException : EsentUsageException {
    private EsentSoftRecoveryOnBackupDatabaseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSoftRecoveryOnSnapshotException : EsentObsoleteException {
    private EsentSoftRecoveryOnSnapshotException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSpaceHintsInvalidException : EsentUsageException {
    private EsentSpaceHintsInvalidException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSPAvailExtCacheOutOfMemoryException : EsentObsoleteException {
    private EsentSPAvailExtCacheOutOfMemoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSPAvailExtCacheOutOfSyncException : EsentObsoleteException {
    private EsentSPAvailExtCacheOutOfSyncException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSPAvailExtCorruptedException : EsentCorruptionException {
    private EsentSPAvailExtCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSPOwnExtCorruptedException : EsentCorruptionException {
    private EsentSPOwnExtCorruptedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSQLLinkNotSupportedException : EsentObsoleteException {
    private EsentSQLLinkNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentStaleColumnReferenceException : EsentStateException {
    private EsentStaleColumnReferenceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentStartingRestoreLogTooHighException : EsentInconsistentException {
    private EsentStartingRestoreLogTooHighException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentStateException : EsentApiException {
    protected EsentStateException(string description, JET_err err);
    protected EsentStateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentStopwatch : object {
    private Stopwatch stopwatch;
    private JET_THREADSTATS statsAtStart;
    [CompilerGeneratedAttribute]
private bool <IsRunning>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_THREADSTATS <ThreadStats>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Elapsed>k__BackingField;
    public bool IsRunning { get; private set; }
    public JET_THREADSTATS ThreadStats { get; private set; }
    public TimeSpan Elapsed { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_IsRunning();
    [CompilerGeneratedAttribute]
private void set_IsRunning(bool value);
    [CompilerGeneratedAttribute]
public JET_THREADSTATS get_ThreadStats();
    [CompilerGeneratedAttribute]
private void set_ThreadStats(JET_THREADSTATS value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Elapsed();
    [CompilerGeneratedAttribute]
private void set_Elapsed(TimeSpan value);
    public static EsentStopwatch StartNew();
    public virtual string ToString();
    public void Start();
    public void Stop();
    public void Reset();
}
public class Microsoft.Isam.Esent.Interop.EsentStreamingDataNotLoggedException : EsentObsoleteException {
    private EsentStreamingDataNotLoggedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSurrogateBackupInProgressException : EsentStateException {
    private EsentSurrogateBackupInProgressException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSystemParameterConflictException : EsentUsageException {
    private EsentSystemParameterConflictException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSystemParamsAlreadySetException : EsentStateException {
    private EsentSystemParamsAlreadySetException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentSystemPathInUseException : EsentUsageException {
    private EsentSystemPathInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTableDuplicateException : EsentStateException {
    private EsentTableDuplicateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTableInUseException : EsentStateException {
    private EsentTableInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTableLockedException : EsentUsageException {
    private EsentTableLockedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTableNotEmptyException : EsentUsageException {
    private EsentTableNotEmptyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTaggedNotNULLException : EsentObsoleteException {
    private EsentTaggedNotNULLException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTaskDroppedException : EsentResourceException {
    private EsentTaskDroppedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTempFileOpenErrorException : EsentObsoleteException {
    private EsentTempFileOpenErrorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTempPathInUseException : EsentUsageException {
    private EsentTempPathInUseException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTermInProgressException : EsentOperationException {
    private EsentTermInProgressException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTestInjectionNotSupportedException : EsentStateException {
    private EsentTestInjectionNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyActiveUsersException : EsentUsageException {
    private EsentTooManyActiveUsersException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyAttachedDatabasesException : EsentUsageException {
    private EsentTooManyAttachedDatabasesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyColumnsException : EsentUsageException {
    private EsentTooManyColumnsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyIndexesException : EsentUsageException {
    private EsentTooManyIndexesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyInstancesException : EsentQuotaException {
    private EsentTooManyInstancesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyIOException : EsentResourceException {
    private EsentTooManyIOException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyKeysException : EsentUsageException {
    private EsentTooManyKeysException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyMempoolEntriesException : EsentMemoryException {
    private EsentTooManyMempoolEntriesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyOpenDatabasesException : EsentObsoleteException {
    private EsentTooManyOpenDatabasesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyOpenIndexesException : EsentMemoryException {
    private EsentTooManyOpenIndexesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyOpenTablesAndCleanupTimedOutException : EsentUsageException {
    private EsentTooManyOpenTablesAndCleanupTimedOutException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyOpenTablesException : EsentQuotaException {
    private EsentTooManyOpenTablesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManySortsException : EsentMemoryException {
    private EsentTooManySortsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManySplitsException : EsentObsoleteException {
    private EsentTooManySplitsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTooManyTestInjectionsException : EsentUsageException {
    private EsentTooManyTestInjectionsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTransactionsNotReadyDuringRecoveryException : EsentStateException {
    private EsentTransactionsNotReadyDuringRecoveryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTransactionTooLongException : EsentQuotaException {
    private EsentTransactionTooLongException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTransReadOnlyException : EsentUsageException {
    private EsentTransReadOnlyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentTransTooDeepException : EsentUsageException {
    private EsentTransTooDeepException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentUnicodeLanguageValidationFailureException : EsentOperationException {
    private EsentUnicodeLanguageValidationFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentUnicodeNormalizationNotSupportedException : EsentUsageException {
    private EsentUnicodeNormalizationNotSupportedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentUnicodeTranslationBufferTooSmallException : EsentObsoleteException {
    private EsentUnicodeTranslationBufferTooSmallException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentUnicodeTranslationFailException : EsentOperationException {
    private EsentUnicodeTranslationFailException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentUnloadableOSFunctionalityException : EsentFatalException {
    private EsentUnloadableOSFunctionalityException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentUpdateMustVersionException : EsentUsageException {
    private EsentUpdateMustVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentUpdateNotPreparedException : EsentUsageException {
    private EsentUpdateNotPreparedException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.Isam.Esent.Interop.EsentUsageException : EsentApiException {
    protected EsentUsageException(string description, JET_err err);
    protected EsentUsageException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.Isam.Esent.Interop.EsentVersion : object {
    public static bool SupportsServer2003Features { get; }
    public static bool SupportsVistaFeatures { get; }
    public static bool SupportsWindows7Features { get; }
    public static bool SupportsWindows8Features { get; }
    public static bool SupportsWindows81Features { get; }
    public static bool SupportsWindows10Features { get; }
    public static bool SupportsUnicodePaths { get; }
    public static bool SupportsLargeKeys { get; }
    private static JetCapabilities Capabilities { get; }
    public static bool get_SupportsServer2003Features();
    public static bool get_SupportsVistaFeatures();
    public static bool get_SupportsWindows7Features();
    public static bool get_SupportsWindows8Features();
    public static bool get_SupportsWindows81Features();
    public static bool get_SupportsWindows10Features();
    public static bool get_SupportsUnicodePaths();
    public static bool get_SupportsLargeKeys();
    private static JetCapabilities get_Capabilities();
}
public class Microsoft.Isam.Esent.Interop.EsentVersionStoreEntryTooBigException : EsentErrorException {
    private EsentVersionStoreEntryTooBigException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentVersionStoreOutOfMemoryAndCleanupTimedOutException : EsentUsageException {
    private EsentVersionStoreOutOfMemoryAndCleanupTimedOutException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentVersionStoreOutOfMemoryException : EsentQuotaException {
    private EsentVersionStoreOutOfMemoryException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentWriteConflictException : EsentStateException {
    private EsentWriteConflictException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Isam.Esent.Interop.EsentWriteConflictPrimaryIndexException : EsentStateException {
    private EsentWriteConflictPrimaryIndexException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.Isam.Esent.Interop.EventLoggingLevels : Enum {
    public int value__;
    public static EventLoggingLevels Disable;
    public static EventLoggingLevels Min;
    public static EventLoggingLevels Low;
    public static EventLoggingLevels Medium;
    public static EventLoggingLevels High;
    public static EventLoggingLevels Max;
}
public class Microsoft.Isam.Esent.Interop.FloatColumnValue : ColumnValueOfStruct`1<float> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
internal class Microsoft.Isam.Esent.Interop.GenericEnumerable`1 : object {
    private CreateEnumerator<T> enumeratorCreator;
    public GenericEnumerable`1(CreateEnumerator<T> enumeratorCreator);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.GetLockGrbit : Enum {
    public int value__;
    public static GetLockGrbit Read;
    public static GetLockGrbit Write;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.GetRecordSizeGrbit : Enum {
    public int value__;
    public static GetRecordSizeGrbit None;
    public static GetRecordSizeGrbit InCopyBuffer;
    public static GetRecordSizeGrbit RunningTotal;
    public static GetRecordSizeGrbit Local;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.GetSecondaryIndexBookmarkGrbit : Enum {
    public int value__;
    public static GetSecondaryIndexBookmarkGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.GotoSecondaryIndexBookmarkGrbit : Enum {
    public int value__;
    public static GotoSecondaryIndexBookmarkGrbit None;
    public static GotoSecondaryIndexBookmarkGrbit BookmarkPermitVirtualCurrency;
}
public class Microsoft.Isam.Esent.Interop.GuidColumnValue : ColumnValueOfStruct`1<Guid> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
public interface Microsoft.Isam.Esent.Interop.IContentEquatable`1 {
    public abstract virtual bool ContentEquals(T other);
}
public interface Microsoft.Isam.Esent.Interop.IDeepCloneable`1 {
    public abstract virtual T DeepClone();
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.IdleGrbit : Enum {
    public int value__;
    public static IdleGrbit None;
    public static IdleGrbit FlushBuffers;
    public static IdleGrbit Compact;
    public static IdleGrbit GetStatus;
}
public interface Microsoft.Isam.Esent.Interop.IJET_LOGTIME {
    public abstract virtual Nullable`1<DateTime> ToDateTime();
}
internal class Microsoft.Isam.Esent.Interop.Implementation.GCHandleCollection : ValueType {
    private GCHandle[] handles;
    private int count;
    public sealed virtual void Dispose();
    public IntPtr Add(object value);
    public void SetCapacity(int capacity);
}
internal interface Microsoft.Isam.Esent.Interop.Implementation.IJetApi {
    public JetCapabilities Capabilities { get; }
    public abstract virtual JetCapabilities get_Capabilities();
    public abstract virtual int JetCreateInstance(JET_INSTANCE& instance, string name);
    public abstract virtual int JetCreateInstance2(JET_INSTANCE& instance, string name, string displayName, CreateInstanceGrbit grbit);
    public abstract virtual int JetInit(JET_INSTANCE& instance);
    public abstract virtual int JetInit2(JET_INSTANCE& instance, InitGrbit grbit);
    public abstract virtual int JetInit3(JET_INSTANCE& instance, JET_RSTINFO recoveryOptions, InitGrbit grbit);
    public abstract virtual int JetGetInstanceInfo(Int32& numInstances, JET_INSTANCE_INFO[]& instances);
    public abstract virtual int JetGetInstanceMiscInfo(JET_INSTANCE instance, JET_SIGNATURE& signature, JET_InstanceMiscInfo infoLevel);
    public abstract virtual int JetStopBackupInstance(JET_INSTANCE instance);
    public abstract virtual int JetStopServiceInstance(JET_INSTANCE instance);
    public abstract virtual int JetStopServiceInstance2(JET_INSTANCE instance, StopServiceGrbit grbit);
    public abstract virtual int JetTerm(JET_INSTANCE instance);
    public abstract virtual int JetTerm2(JET_INSTANCE instance, TermGrbit grbit);
    public abstract virtual int JetSetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, IntPtr paramValue, string paramString);
    public abstract virtual int JetSetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, JET_CALLBACK paramValue, string paramString);
    public abstract virtual int JetGetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, IntPtr& paramValue, String& paramString, int maxParam);
    public abstract virtual int JetGetVersion(JET_SESID sesid, UInt32& version);
    public abstract virtual int JetCreateDatabase(JET_SESID sesid, string database, string connect, JET_DBID& dbid, CreateDatabaseGrbit grbit);
    public abstract virtual int JetCreateDatabase2(JET_SESID sesid, string database, int maxPages, JET_DBID& dbid, CreateDatabaseGrbit grbit);
    public abstract virtual int JetAttachDatabase(JET_SESID sesid, string database, AttachDatabaseGrbit grbit);
    public abstract virtual int JetAttachDatabase2(JET_SESID sesid, string database, int maxPages, AttachDatabaseGrbit grbit);
    public abstract virtual int JetOpenDatabase(JET_SESID sesid, string database, string connect, JET_DBID& dbid, OpenDatabaseGrbit grbit);
    public abstract virtual int JetCloseDatabase(JET_SESID sesid, JET_DBID dbid, CloseDatabaseGrbit grbit);
    public abstract virtual int JetDetachDatabase(JET_SESID sesid, string database);
    public abstract virtual int JetDetachDatabase2(JET_SESID sesid, string database, DetachDatabaseGrbit grbit);
    public abstract virtual int JetCompact(JET_SESID sesid, string sourceDatabase, string destinationDatabase, JET_PFNSTATUS statusCallback, object ignored, CompactGrbit grbit);
    public abstract virtual int JetGrowDatabase(JET_SESID sesid, JET_DBID dbid, int desiredPages, Int32& actualPages);
    public abstract virtual int JetSetDatabaseSize(JET_SESID sesid, string database, int desiredPages, Int32& actualPages);
    public abstract virtual int JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, Int32& value, JET_DbInfo infoLevel);
    public abstract virtual int JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, String& value, JET_DbInfo infoLevel);
    public abstract virtual int JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, JET_DBINFOMISC& dbinfomisc, JET_DbInfo infoLevel);
    public abstract virtual int JetGetDatabaseFileInfo(string databaseName, Int32& value, JET_DbInfo infoLevel);
    public abstract virtual int JetGetDatabaseFileInfo(string databaseName, Int64& value, JET_DbInfo infoLevel);
    public abstract virtual int JetGetDatabaseFileInfo(string databaseName, JET_DBINFOMISC& dbinfomisc, JET_DbInfo infoLevel);
    public abstract virtual int JetBackupInstance(JET_INSTANCE instance, string destination, BackupGrbit grbit, JET_PFNSTATUS statusCallback);
    public abstract virtual int JetRestoreInstance(JET_INSTANCE instance, string source, string destination, JET_PFNSTATUS statusCallback);
    public abstract virtual int JetOSSnapshotPrepare(JET_OSSNAPID& snapid, SnapshotPrepareGrbit grbit);
    public abstract virtual int JetOSSnapshotPrepareInstance(JET_OSSNAPID snapshot, JET_INSTANCE instance, SnapshotPrepareInstanceGrbit grbit);
    public abstract virtual int JetOSSnapshotFreeze(JET_OSSNAPID snapshot, Int32& numInstances, JET_INSTANCE_INFO[]& instances, SnapshotFreezeGrbit grbit);
    public abstract virtual int JetOSSnapshotGetFreezeInfo(JET_OSSNAPID snapshot, Int32& numInstances, JET_INSTANCE_INFO[]& instances, SnapshotGetFreezeInfoGrbit grbit);
    public abstract virtual int JetOSSnapshotThaw(JET_OSSNAPID snapid, SnapshotThawGrbit grbit);
    public abstract virtual int JetOSSnapshotTruncateLog(JET_OSSNAPID snapshot, SnapshotTruncateLogGrbit grbit);
    public abstract virtual int JetOSSnapshotTruncateLogInstance(JET_OSSNAPID snapshot, JET_INSTANCE instance, SnapshotTruncateLogGrbit grbit);
    public abstract virtual int JetOSSnapshotEnd(JET_OSSNAPID snapid, SnapshotEndGrbit grbit);
    public abstract virtual int JetOSSnapshotAbort(JET_OSSNAPID snapid, SnapshotAbortGrbit grbit);
    public abstract virtual int JetBeginExternalBackupInstance(JET_INSTANCE instance, BeginExternalBackupGrbit grbit);
    public abstract virtual int JetCloseFileInstance(JET_INSTANCE instance, JET_HANDLE handle);
    public abstract virtual int JetEndExternalBackupInstance(JET_INSTANCE instance);
    public abstract virtual int JetEndExternalBackupInstance2(JET_INSTANCE instance, EndExternalBackupGrbit grbit);
    public abstract virtual int JetGetAttachInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public abstract virtual int JetGetLogInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public abstract virtual int JetGetTruncateLogInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public abstract virtual int JetOpenFileInstance(JET_INSTANCE instance, string file, JET_HANDLE& handle, Int64& fileSizeLow, Int64& fileSizeHigh);
    public abstract virtual int JetReadFileInstance(JET_INSTANCE instance, JET_HANDLE file, Byte[] buffer, int bufferSize, Int32& bytesRead);
    public abstract virtual int JetTruncateLogInstance(JET_INSTANCE instance);
    public abstract virtual int JetBeginSession(JET_INSTANCE instance, JET_SESID& sesid, string username, string password);
    public abstract virtual int JetSetSessionContext(JET_SESID sesid, IntPtr context);
    public abstract virtual int JetResetSessionContext(JET_SESID sesid);
    public abstract virtual int JetEndSession(JET_SESID sesid, EndSessionGrbit grbit);
    public abstract virtual int JetDupSession(JET_SESID sesid, JET_SESID& newSesid);
    public abstract virtual int JetGetThreadStats(JET_THREADSTATS& threadstats);
    public abstract virtual int JetOpenTable(JET_SESID sesid, JET_DBID dbid, string tablename, Byte[] parameters, int parametersLength, OpenTableGrbit grbit, JET_TABLEID& tableid);
    public abstract virtual int JetCloseTable(JET_SESID sesid, JET_TABLEID tableid);
    public abstract virtual int JetDupCursor(JET_SESID sesid, JET_TABLEID tableid, JET_TABLEID& newTableid, DupCursorGrbit grbit);
    public abstract virtual int JetComputeStats(JET_SESID sesid, JET_TABLEID tableid);
    public abstract virtual int JetSetLS(JET_SESID sesid, JET_TABLEID tableid, JET_LS ls, LsGrbit grbit);
    public abstract virtual int JetGetLS(JET_SESID sesid, JET_TABLEID tableid, JET_LS& ls, LsGrbit grbit);
    public abstract virtual int JetGetCursorInfo(JET_SESID sesid, JET_TABLEID tableid);
    public abstract virtual int JetBeginTransaction(JET_SESID sesid);
    public abstract virtual int JetBeginTransaction2(JET_SESID sesid, BeginTransactionGrbit grbit);
    public abstract virtual int JetCommitTransaction(JET_SESID sesid, CommitTransactionGrbit grbit);
    public abstract virtual int JetRollback(JET_SESID sesid, RollbackTransactionGrbit grbit);
    public abstract virtual int JetCreateTable(JET_SESID sesid, JET_DBID dbid, string table, int pages, int density, JET_TABLEID& tableid);
    public abstract virtual int JetAddColumn(JET_SESID sesid, JET_TABLEID tableid, string column, JET_COLUMNDEF columndef, Byte[] defaultValue, int defaultValueSize, JET_COLUMNID& columnid);
    public abstract virtual int JetDeleteColumn(JET_SESID sesid, JET_TABLEID tableid, string column);
    public abstract virtual int JetDeleteColumn2(JET_SESID sesid, JET_TABLEID tableid, string column, DeleteColumnGrbit grbit);
    public abstract virtual int JetDeleteIndex(JET_SESID sesid, JET_TABLEID tableid, string index);
    public abstract virtual int JetDeleteTable(JET_SESID sesid, JET_DBID dbid, string table);
    public abstract virtual int JetCreateIndex(JET_SESID sesid, JET_TABLEID tableid, string indexName, CreateIndexGrbit grbit, string keyDescription, int keyDescriptionLength, int density);
    public abstract virtual int JetCreateIndex2(JET_SESID sesid, JET_TABLEID tableid, JET_INDEXCREATE[] indexcreates, int numIndexCreates);
    public abstract virtual int JetOpenTempTable(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public abstract virtual int JetOpenTempTable2(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, int lcid, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public abstract virtual int JetOpenTempTable3(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, JET_UNICODEINDEX unicodeindex, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public abstract virtual int JetOpenTemporaryTable(JET_SESID sesid, JET_OPENTEMPORARYTABLE temporarytable);
    public abstract virtual int JetCreateTableColumnIndex3(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    public abstract virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, JET_COLUMNDEF& columndef);
    public abstract virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, JET_COLUMNDEF& columndef);
    public abstract virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, JET_COLUMNBASE& columnbase);
    public abstract virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, JET_COLUMNBASE& columnbase);
    public abstract virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string ignored, ColInfoGrbit grbit, JET_COLUMNLIST& columnlist);
    public abstract virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string columnName, JET_COLUMNDEF& columndef);
    public abstract virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string ignored, JET_COLUMNLIST& columnlist);
    public abstract virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string columnName, JET_COLUMNBASE& columnbase);
    public abstract virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string columnName, JET_COLUMNID columnid, JET_COLUMNBASE& columnbase);
    public abstract virtual int JetGetObjectInfo(JET_SESID sesid, JET_DBID dbid, JET_OBJECTLIST& objectlist);
    public abstract virtual int JetGetObjectInfo(JET_SESID sesid, JET_DBID dbid, JET_objtyp objtyp, string objectName, JET_OBJECTINFO& objectinfo);
    public abstract virtual int JetGetCurrentIndex(JET_SESID sesid, JET_TABLEID tableid, String& indexName, int maxNameLength);
    public abstract virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, JET_OBJECTINFO& result, JET_TblInfo infoLevel);
    public abstract virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, String& result, JET_TblInfo infoLevel);
    public abstract virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, JET_DBID& result, JET_TblInfo infoLevel);
    public abstract virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, Int32[] result, JET_TblInfo infoLevel);
    public abstract virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, Int32& result, JET_TblInfo infoLevel);
    public abstract virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, UInt16& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, Int32& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, JET_INDEXID& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, JET_INDEXLIST& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, String& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, UInt16& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, Int32& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXID& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXLIST& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, String& result, JET_IdxInfo infoLevel);
    public abstract virtual int JetRenameTable(JET_SESID sesid, JET_DBID dbid, string tableName, string newTableName);
    public abstract virtual int JetRenameColumn(JET_SESID sesid, JET_TABLEID tableid, string name, string newName, RenameColumnGrbit grbit);
    public abstract virtual int JetSetColumnDefaultValue(JET_SESID sesid, JET_DBID dbid, string tableName, string columnName, Byte[] data, int dataSize, SetColumnDefaultValueGrbit grbit);
    public abstract virtual int JetGotoBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize);
    public abstract virtual int JetGotoSecondaryIndexBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] secondaryKey, int secondaryKeySize, Byte[] primaryKey, int primaryKeySize, GotoSecondaryIndexBookmarkGrbit grbit);
    public abstract virtual int JetMove(JET_SESID sesid, JET_TABLEID tableid, int numRows, MoveGrbit grbit);
    public abstract virtual int JetMakeKey(JET_SESID sesid, JET_TABLEID tableid, IntPtr data, int dataSize, MakeKeyGrbit grbit);
    public abstract virtual int JetSeek(JET_SESID sesid, JET_TABLEID tableid, SeekGrbit grbit);
    public abstract virtual int JetSetIndexRange(JET_SESID sesid, JET_TABLEID tableid, SetIndexRangeGrbit grbit);
    public abstract virtual int JetIntersectIndexes(JET_SESID sesid, JET_INDEXRANGE[] ranges, int numRanges, JET_RECORDLIST& recordlist, IntersectIndexesGrbit grbit);
    public abstract virtual int JetSetCurrentIndex(JET_SESID sesid, JET_TABLEID tableid, string index);
    public abstract virtual int JetSetCurrentIndex2(JET_SESID sesid, JET_TABLEID tableid, string index, SetCurrentIndexGrbit grbit);
    public abstract virtual int JetSetCurrentIndex3(JET_SESID sesid, JET_TABLEID tableid, string index, SetCurrentIndexGrbit grbit, int itagSequence);
    public abstract virtual int JetSetCurrentIndex4(JET_SESID sesid, JET_TABLEID tableid, string index, JET_INDEXID indexid, SetCurrentIndexGrbit grbit, int itagSequence);
    public abstract virtual int JetIndexRecordCount(JET_SESID sesid, JET_TABLEID tableid, Int32& numRecords, int maxRecordsToCount);
    public abstract virtual int JetSetTableSequential(JET_SESID sesid, JET_TABLEID tableid, SetTableSequentialGrbit grbit);
    public abstract virtual int JetResetTableSequential(JET_SESID sesid, JET_TABLEID tableid, ResetTableSequentialGrbit grbit);
    public abstract virtual int JetGetRecordPosition(JET_SESID sesid, JET_TABLEID tableid, JET_RECPOS& recpos);
    public abstract virtual int JetGotoPosition(JET_SESID sesid, JET_TABLEID tableid, JET_RECPOS recpos);
    public abstract virtual int JetPrereadKeys(JET_SESID sesid, JET_TABLEID tableid, Byte[][] keys, Int32[] keyLengths, int keyIndex, int keyCount, Int32& keysPreread, PrereadKeysGrbit grbit);
    public abstract virtual int JetGetBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize);
    public abstract virtual int JetGetSecondaryIndexBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] secondaryKey, int secondaryKeySize, Int32& actualSecondaryKeySize, Byte[] primaryKey, int primaryKeySize, Int32& actualPrimaryKeySize, GetSecondaryIndexBookmarkGrbit grbit);
    public abstract virtual int JetRetrieveKey(JET_SESID sesid, JET_TABLEID tableid, Byte[] data, int dataSize, Int32& actualDataSize, RetrieveKeyGrbit grbit);
    public abstract virtual int JetRetrieveColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, IntPtr data, int dataSize, Int32& actualDataSize, RetrieveColumnGrbit grbit, JET_RETINFO retinfo);
    public abstract virtual int JetRetrieveColumns(JET_SESID sesid, JET_TABLEID tableid, NATIVE_RETRIEVECOLUMN* retrievecolumns, int numColumns);
    public abstract virtual int JetEnumerateColumns(JET_SESID sesid, JET_TABLEID tableid, int numColumnids, JET_ENUMCOLUMNID[] columnids, Int32& numColumnValues, JET_ENUMCOLUMN[]& columnValues, JET_PFNREALLOC allocator, IntPtr allocatorContext, int maxDataSize, EnumerateColumnsGrbit grbit);
    public abstract virtual int JetEnumerateColumns(JET_SESID sesid, JET_TABLEID tableid, EnumerateColumnsGrbit grbit, IEnumerable`1& enumeratedColumns);
    public abstract virtual int JetGetRecordSize(JET_SESID sesid, JET_TABLEID tableid, JET_RECSIZE& recsize, GetRecordSizeGrbit grbit);
    public abstract virtual int JetDelete(JET_SESID sesid, JET_TABLEID tableid);
    public abstract virtual int JetPrepareUpdate(JET_SESID sesid, JET_TABLEID tableid, JET_prep prep);
    public abstract virtual int JetUpdate(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize);
    public abstract virtual int JetUpdate2(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize, UpdateGrbit grbit);
    public abstract virtual int JetSetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, IntPtr data, int dataSize, SetColumnGrbit grbit, JET_SETINFO setinfo);
    public abstract virtual int JetSetColumns(JET_SESID sesid, JET_TABLEID tableid, NATIVE_SETCOLUMN* setcolumns, int numColumns);
    public abstract virtual int JetGetLock(JET_SESID sesid, JET_TABLEID tableid, GetLockGrbit grbit);
    public abstract virtual int JetEscrowUpdate(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] delta, int deltaSize, Byte[] previousValue, int previousValueLength, Int32& actualPreviousValueLength, EscrowUpdateGrbit grbit);
    public abstract virtual int JetRegisterCallback(JET_SESID sesid, JET_TABLEID tableid, JET_cbtyp cbtyp, JET_CALLBACK callback, IntPtr context, JET_HANDLE& callbackId);
    public abstract virtual int JetUnregisterCallback(JET_SESID sesid, JET_TABLEID tableid, JET_cbtyp cbtyp, JET_HANDLE callbackId);
    public abstract virtual int JetDefragment(JET_SESID sesid, JET_DBID dbid, string tableName, Int32& passes, Int32& seconds, DefragGrbit grbit);
    public abstract virtual int Defragment(JET_SESID sesid, JET_DBID dbid, string tableName, DefragGrbit grbit);
    public abstract virtual int JetDefragment2(JET_SESID sesid, JET_DBID dbid, string tableName, Int32& passes, Int32& seconds, JET_CALLBACK callback, DefragGrbit grbit);
    public abstract virtual int JetIdle(JET_SESID sesid, IdleGrbit grbit);
    public abstract virtual int JetConfigureProcessForCrashDump(CrashDumpGrbit grbit);
    public abstract virtual int JetFreeBuffer(IntPtr buffer);
    public abstract virtual int JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, JET_OPERATIONCONTEXT& operationContext);
    public abstract virtual int JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, JET_OPERATIONCONTEXT operationContext);
    public abstract virtual int JetGetThreadStats(JET_THREADSTATS2& threadstats);
    public abstract virtual int JetBeginTransaction3(JET_SESID sesid, long userTransactionId, BeginTransactionGrbit grbit);
    public abstract virtual int JetCommitTransaction2(JET_SESID sesid, CommitTransactionGrbit grbit, TimeSpan durableCommit, JET_COMMIT_ID& commitId);
    public abstract virtual int JetGetErrorInfo(JET_err error, JET_ERRINFOBASIC& errinfo);
    public abstract virtual int JetResizeDatabase(JET_SESID sesid, JET_DBID dbid, int desiredPages, Int32& actualPages, ResizeDatabaseGrbit grbit);
    public abstract virtual int JetCreateIndex4(JET_SESID sesid, JET_TABLEID tableid, JET_INDEXCREATE[] indexcreates, int numIndexCreates);
    public abstract virtual int JetOpenTemporaryTable2(JET_SESID sesid, JET_OPENTEMPORARYTABLE temporarytable);
    public abstract virtual int JetCreateTableColumnIndex4(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    public abstract virtual int JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Int32& value);
    public abstract virtual int JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Byte[] data, int length, Int32& actualDataSize);
    public abstract virtual int JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, int value);
    public abstract virtual int JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Byte[] data, int dataSize);
    public abstract virtual int JetPrereadIndexRanges(JET_SESID sesid, JET_TABLEID tableid, JET_INDEX_RANGE[] indexRanges, int rangeIndex, int rangeCount, Int32& rangesPreread, JET_COLUMNID[] columnsPreread, PrereadIndexRangesGrbit grbit);
    public abstract virtual int JetPrereadKeyRanges(JET_SESID sesid, JET_TABLEID tableid, Byte[][] keysStart, Int32[] keyStartLengths, Byte[][] keysEnd, Int32[] keyEndLengths, int rangeIndex, int rangeCount, Int32& rangesPreread, JET_COLUMNID[] columnsPreread, PrereadIndexRangesGrbit grbit);
    public abstract virtual int JetSetCursorFilter(JET_SESID sesid, JET_TABLEID tableid, JET_INDEX_COLUMN[] filters, CursorFilterGrbit grbit);
}
internal class Microsoft.Isam.Esent.Interop.Implementation.JetApi : object {
    private static TraceSwitch TraceSwitch;
    private UInt32 versionOverride;
    private CallbackWrappers callbackWrappers;
    [CompilerGeneratedAttribute]
private JetCapabilities <Capabilities>k__BackingField;
    public JetCapabilities Capabilities { get; private set; }
    private static JetApi();
    public JetApi(UInt32 version);
    [CompilerGeneratedAttribute]
public sealed virtual JetCapabilities get_Capabilities();
    [CompilerGeneratedAttribute]
private void set_Capabilities(JetCapabilities value);
    public sealed virtual int JetCreateInstance(JET_INSTANCE& instance, string name);
    public sealed virtual int JetCreateInstance2(JET_INSTANCE& instance, string name, string displayName, CreateInstanceGrbit grbit);
    public sealed virtual int JetInit(JET_INSTANCE& instance);
    public sealed virtual int JetInit2(JET_INSTANCE& instance, InitGrbit grbit);
    public sealed virtual int JetInit3(JET_INSTANCE& instance, JET_RSTINFO recoveryOptions, InitGrbit grbit);
    public sealed virtual int JetGetInstanceInfo(Int32& numInstances, JET_INSTANCE_INFO[]& instances);
    public sealed virtual int JetGetInstanceMiscInfo(JET_INSTANCE instance, JET_SIGNATURE& signature, JET_InstanceMiscInfo infoLevel);
    public sealed virtual int JetStopBackupInstance(JET_INSTANCE instance);
    public sealed virtual int JetStopServiceInstance(JET_INSTANCE instance);
    public sealed virtual int JetStopServiceInstance2(JET_INSTANCE instance, StopServiceGrbit grbit);
    public sealed virtual int JetTerm(JET_INSTANCE instance);
    public sealed virtual int JetTerm2(JET_INSTANCE instance, TermGrbit grbit);
    public sealed virtual int JetSetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, IntPtr paramValue, string paramString);
    public sealed virtual int JetSetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, JET_CALLBACK paramValue, string paramString);
    public sealed virtual int JetGetSystemParameter(JET_INSTANCE instance, JET_SESID sesid, JET_param paramid, IntPtr& paramValue, String& paramString, int maxParam);
    public sealed virtual int JetGetVersion(JET_SESID sesid, UInt32& version);
    public sealed virtual int JetCreateDatabase(JET_SESID sesid, string database, string connect, JET_DBID& dbid, CreateDatabaseGrbit grbit);
    public sealed virtual int JetCreateDatabase2(JET_SESID sesid, string database, int maxPages, JET_DBID& dbid, CreateDatabaseGrbit grbit);
    public sealed virtual int JetAttachDatabase(JET_SESID sesid, string database, AttachDatabaseGrbit grbit);
    public sealed virtual int JetAttachDatabase2(JET_SESID sesid, string database, int maxPages, AttachDatabaseGrbit grbit);
    public sealed virtual int JetOpenDatabase(JET_SESID sesid, string database, string connect, JET_DBID& dbid, OpenDatabaseGrbit grbit);
    public sealed virtual int JetCloseDatabase(JET_SESID sesid, JET_DBID dbid, CloseDatabaseGrbit grbit);
    public sealed virtual int JetDetachDatabase(JET_SESID sesid, string database);
    public sealed virtual int JetDetachDatabase2(JET_SESID sesid, string database, DetachDatabaseGrbit grbit);
    public sealed virtual int JetCompact(JET_SESID sesid, string sourceDatabase, string destinationDatabase, JET_PFNSTATUS statusCallback, object ignored, CompactGrbit grbit);
    public sealed virtual int JetGrowDatabase(JET_SESID sesid, JET_DBID dbid, int desiredPages, Int32& actualPages);
    public sealed virtual int JetSetDatabaseSize(JET_SESID sesid, string database, int desiredPages, Int32& actualPages);
    public sealed virtual int JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, Int32& value, JET_DbInfo infoLevel);
    public sealed virtual int JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, JET_DBINFOMISC& dbinfomisc, JET_DbInfo infoLevel);
    public sealed virtual int JetGetDatabaseInfo(JET_SESID sesid, JET_DBID dbid, String& value, JET_DbInfo infoLevel);
    public sealed virtual int JetGetDatabaseFileInfo(string databaseName, Int32& value, JET_DbInfo infoLevel);
    public sealed virtual int JetGetDatabaseFileInfo(string databaseName, Int64& value, JET_DbInfo infoLevel);
    public sealed virtual int JetGetDatabaseFileInfo(string databaseName, JET_DBINFOMISC& dbinfomisc, JET_DbInfo infoLevel);
    public sealed virtual int JetBackupInstance(JET_INSTANCE instance, string destination, BackupGrbit grbit, JET_PFNSTATUS statusCallback);
    public sealed virtual int JetRestoreInstance(JET_INSTANCE instance, string source, string destination, JET_PFNSTATUS statusCallback);
    public sealed virtual int JetOSSnapshotPrepare(JET_OSSNAPID& snapid, SnapshotPrepareGrbit grbit);
    public sealed virtual int JetOSSnapshotPrepareInstance(JET_OSSNAPID snapshot, JET_INSTANCE instance, SnapshotPrepareInstanceGrbit grbit);
    public sealed virtual int JetOSSnapshotFreeze(JET_OSSNAPID snapshot, Int32& numInstances, JET_INSTANCE_INFO[]& instances, SnapshotFreezeGrbit grbit);
    public sealed virtual int JetOSSnapshotGetFreezeInfo(JET_OSSNAPID snapshot, Int32& numInstances, JET_INSTANCE_INFO[]& instances, SnapshotGetFreezeInfoGrbit grbit);
    public sealed virtual int JetOSSnapshotThaw(JET_OSSNAPID snapid, SnapshotThawGrbit grbit);
    public sealed virtual int JetOSSnapshotTruncateLog(JET_OSSNAPID snapshot, SnapshotTruncateLogGrbit grbit);
    public sealed virtual int JetOSSnapshotTruncateLogInstance(JET_OSSNAPID snapshot, JET_INSTANCE instance, SnapshotTruncateLogGrbit grbit);
    public sealed virtual int JetOSSnapshotEnd(JET_OSSNAPID snapid, SnapshotEndGrbit grbit);
    public sealed virtual int JetOSSnapshotAbort(JET_OSSNAPID snapid, SnapshotAbortGrbit grbit);
    public sealed virtual int JetBeginExternalBackupInstance(JET_INSTANCE instance, BeginExternalBackupGrbit grbit);
    public sealed virtual int JetCloseFileInstance(JET_INSTANCE instance, JET_HANDLE handle);
    public sealed virtual int JetEndExternalBackupInstance(JET_INSTANCE instance);
    public sealed virtual int JetEndExternalBackupInstance2(JET_INSTANCE instance, EndExternalBackupGrbit grbit);
    public sealed virtual int JetGetAttachInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public sealed virtual int JetGetLogInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public sealed virtual int JetGetTruncateLogInfoInstance(JET_INSTANCE instance, String& files, int maxChars, Int32& actualChars);
    public sealed virtual int JetOpenFileInstance(JET_INSTANCE instance, string file, JET_HANDLE& handle, Int64& fileSizeLow, Int64& fileSizeHigh);
    public sealed virtual int JetReadFileInstance(JET_INSTANCE instance, JET_HANDLE file, Byte[] buffer, int bufferSize, Int32& bytesRead);
    public sealed virtual int JetTruncateLogInstance(JET_INSTANCE instance);
    public sealed virtual int JetBeginSession(JET_INSTANCE instance, JET_SESID& sesid, string username, string password);
    public sealed virtual int JetSetSessionContext(JET_SESID sesid, IntPtr context);
    public sealed virtual int JetResetSessionContext(JET_SESID sesid);
    public sealed virtual int JetEndSession(JET_SESID sesid, EndSessionGrbit grbit);
    public sealed virtual int JetDupSession(JET_SESID sesid, JET_SESID& newSesid);
    public sealed virtual int JetGetThreadStats(JET_THREADSTATS& threadstats);
    public sealed virtual int JetOpenTable(JET_SESID sesid, JET_DBID dbid, string tablename, Byte[] parameters, int parametersLength, OpenTableGrbit grbit, JET_TABLEID& tableid);
    public sealed virtual int JetCloseTable(JET_SESID sesid, JET_TABLEID tableid);
    public sealed virtual int JetDupCursor(JET_SESID sesid, JET_TABLEID tableid, JET_TABLEID& newTableid, DupCursorGrbit grbit);
    public sealed virtual int JetComputeStats(JET_SESID sesid, JET_TABLEID tableid);
    public sealed virtual int JetSetLS(JET_SESID sesid, JET_TABLEID tableid, JET_LS ls, LsGrbit grbit);
    public sealed virtual int JetGetLS(JET_SESID sesid, JET_TABLEID tableid, JET_LS& ls, LsGrbit grbit);
    public sealed virtual int JetGetCursorInfo(JET_SESID sesid, JET_TABLEID tableid);
    public sealed virtual int JetBeginTransaction(JET_SESID sesid);
    public sealed virtual int JetBeginTransaction2(JET_SESID sesid, BeginTransactionGrbit grbit);
    public sealed virtual int JetCommitTransaction(JET_SESID sesid, CommitTransactionGrbit grbit);
    public sealed virtual int JetRollback(JET_SESID sesid, RollbackTransactionGrbit grbit);
    public sealed virtual int JetCreateTable(JET_SESID sesid, JET_DBID dbid, string table, int pages, int density, JET_TABLEID& tableid);
    public sealed virtual int JetDeleteTable(JET_SESID sesid, JET_DBID dbid, string table);
    public sealed virtual int JetAddColumn(JET_SESID sesid, JET_TABLEID tableid, string column, JET_COLUMNDEF columndef, Byte[] defaultValue, int defaultValueSize, JET_COLUMNID& columnid);
    public sealed virtual int JetDeleteColumn(JET_SESID sesid, JET_TABLEID tableid, string column);
    public sealed virtual int JetDeleteColumn2(JET_SESID sesid, JET_TABLEID tableid, string column, DeleteColumnGrbit grbit);
    public sealed virtual int JetCreateIndex(JET_SESID sesid, JET_TABLEID tableid, string indexName, CreateIndexGrbit grbit, string keyDescription, int keyDescriptionLength, int density);
    public sealed virtual int JetCreateIndex2(JET_SESID sesid, JET_TABLEID tableid, JET_INDEXCREATE[] indexcreates, int numIndexCreates);
    public sealed virtual int JetDeleteIndex(JET_SESID sesid, JET_TABLEID tableid, string index);
    public sealed virtual int JetOpenTempTable(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public sealed virtual int JetOpenTempTable2(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, int lcid, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public sealed virtual int JetOpenTempTable3(JET_SESID sesid, JET_COLUMNDEF[] columns, int numColumns, JET_UNICODEINDEX unicodeindex, TempTableGrbit grbit, JET_TABLEID& tableid, JET_COLUMNID[] columnids);
    public sealed virtual int JetOpenTemporaryTable(JET_SESID sesid, JET_OPENTEMPORARYTABLE temporarytable);
    public sealed virtual int JetCreateTableColumnIndex3(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    public sealed virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, JET_COLUMNDEF& columndef);
    public sealed virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, JET_COLUMNDEF& columndef);
    public sealed virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string columnName, JET_COLUMNBASE& columnbase);
    public sealed virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, JET_COLUMNBASE& columnbase);
    public sealed virtual int JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, string ignored, ColInfoGrbit grbit, JET_COLUMNLIST& columnlist);
    public sealed virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string columnName, JET_COLUMNDEF& columndef);
    public sealed virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string ignored, JET_COLUMNLIST& columnlist);
    public sealed virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string columnName, JET_COLUMNBASE& columnbase);
    public sealed virtual int JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, JET_COLUMNID columnid, JET_COLUMNBASE& columnbase);
    public sealed virtual int JetGetObjectInfo(JET_SESID sesid, JET_DBID dbid, JET_OBJECTLIST& objectlist);
    public sealed virtual int JetGetObjectInfo(JET_SESID sesid, JET_DBID dbid, JET_objtyp objtyp, string objectName, JET_OBJECTINFO& objectinfo);
    public sealed virtual int JetGetCurrentIndex(JET_SESID sesid, JET_TABLEID tableid, String& indexName, int maxNameLength);
    public sealed virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, JET_OBJECTINFO& result, JET_TblInfo infoLevel);
    public sealed virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, String& result, JET_TblInfo infoLevel);
    public sealed virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, JET_DBID& result, JET_TblInfo infoLevel);
    public sealed virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, Int32[] result, JET_TblInfo infoLevel);
    public sealed virtual int JetGetTableInfo(JET_SESID sesid, JET_TABLEID tableid, Int32& result, JET_TblInfo infoLevel);
    public sealed virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, UInt16& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, Int32& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, JET_INDEXID& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, JET_INDEXLIST& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetIndexInfo(JET_SESID sesid, JET_DBID dbid, string tablename, string indexname, String& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, UInt16& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, Int32& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXID& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, JET_INDEXLIST& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetGetTableIndexInfo(JET_SESID sesid, JET_TABLEID tableid, string indexname, String& result, JET_IdxInfo infoLevel);
    public sealed virtual int JetRenameTable(JET_SESID sesid, JET_DBID dbid, string tableName, string newTableName);
    public sealed virtual int JetRenameColumn(JET_SESID sesid, JET_TABLEID tableid, string name, string newName, RenameColumnGrbit grbit);
    public sealed virtual int JetSetColumnDefaultValue(JET_SESID sesid, JET_DBID dbid, string tableName, string columnName, Byte[] data, int dataSize, SetColumnDefaultValueGrbit grbit);
    public sealed virtual int JetGotoBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize);
    public sealed virtual int JetGotoSecondaryIndexBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] secondaryKey, int secondaryKeySize, Byte[] primaryKey, int primaryKeySize, GotoSecondaryIndexBookmarkGrbit grbit);
    public sealed virtual int JetMakeKey(JET_SESID sesid, JET_TABLEID tableid, IntPtr data, int dataSize, MakeKeyGrbit grbit);
    public sealed virtual int JetSeek(JET_SESID sesid, JET_TABLEID tableid, SeekGrbit grbit);
    public sealed virtual int JetMove(JET_SESID sesid, JET_TABLEID tableid, int numRows, MoveGrbit grbit);
    public sealed virtual int JetSetIndexRange(JET_SESID sesid, JET_TABLEID tableid, SetIndexRangeGrbit grbit);
    public sealed virtual int JetIntersectIndexes(JET_SESID sesid, JET_INDEXRANGE[] ranges, int numRanges, JET_RECORDLIST& recordlist, IntersectIndexesGrbit grbit);
    public sealed virtual int JetSetCurrentIndex(JET_SESID sesid, JET_TABLEID tableid, string index);
    public sealed virtual int JetSetCurrentIndex2(JET_SESID sesid, JET_TABLEID tableid, string index, SetCurrentIndexGrbit grbit);
    public sealed virtual int JetSetCurrentIndex3(JET_SESID sesid, JET_TABLEID tableid, string index, SetCurrentIndexGrbit grbit, int itagSequence);
    public sealed virtual int JetSetCurrentIndex4(JET_SESID sesid, JET_TABLEID tableid, string index, JET_INDEXID indexid, SetCurrentIndexGrbit grbit, int itagSequence);
    public sealed virtual int JetIndexRecordCount(JET_SESID sesid, JET_TABLEID tableid, Int32& numRecords, int maxRecordsToCount);
    public sealed virtual int JetSetTableSequential(JET_SESID sesid, JET_TABLEID tableid, SetTableSequentialGrbit grbit);
    public sealed virtual int JetResetTableSequential(JET_SESID sesid, JET_TABLEID tableid, ResetTableSequentialGrbit grbit);
    public sealed virtual int JetGetRecordPosition(JET_SESID sesid, JET_TABLEID tableid, JET_RECPOS& recpos);
    public sealed virtual int JetGotoPosition(JET_SESID sesid, JET_TABLEID tableid, JET_RECPOS recpos);
    public sealed virtual int JetPrereadKeys(JET_SESID sesid, JET_TABLEID tableid, Byte[][] keys, Int32[] keyLengths, int keyIndex, int keyCount, Int32& keysPreread, PrereadKeysGrbit grbit);
    public sealed virtual int JetGetBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize);
    public sealed virtual int JetGetSecondaryIndexBookmark(JET_SESID sesid, JET_TABLEID tableid, Byte[] secondaryKey, int secondaryKeySize, Int32& actualSecondaryKeySize, Byte[] primaryKey, int primaryKeySize, Int32& actualPrimaryKeySize, GetSecondaryIndexBookmarkGrbit grbit);
    public sealed virtual int JetRetrieveKey(JET_SESID sesid, JET_TABLEID tableid, Byte[] data, int dataSize, Int32& actualDataSize, RetrieveKeyGrbit grbit);
    public sealed virtual int JetRetrieveColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, IntPtr data, int dataSize, Int32& actualDataSize, RetrieveColumnGrbit grbit, JET_RETINFO retinfo);
    public sealed virtual int JetRetrieveColumns(JET_SESID sesid, JET_TABLEID tableid, NATIVE_RETRIEVECOLUMN* retrievecolumns, int numColumns);
    public sealed virtual int JetEnumerateColumns(JET_SESID sesid, JET_TABLEID tableid, int numColumnids, JET_ENUMCOLUMNID[] columnids, Int32& numColumnValues, JET_ENUMCOLUMN[]& columnValues, JET_PFNREALLOC allocator, IntPtr allocatorContext, int maxDataSize, EnumerateColumnsGrbit grbit);
    public sealed virtual int JetEnumerateColumns(JET_SESID sesid, JET_TABLEID tableid, EnumerateColumnsGrbit grbit, IEnumerable`1& enumeratedColumns);
    public sealed virtual int JetGetRecordSize(JET_SESID sesid, JET_TABLEID tableid, JET_RECSIZE& recsize, GetRecordSizeGrbit grbit);
    public sealed virtual int JetDelete(JET_SESID sesid, JET_TABLEID tableid);
    public sealed virtual int JetPrepareUpdate(JET_SESID sesid, JET_TABLEID tableid, JET_prep prep);
    public sealed virtual int JetUpdate(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize);
    public sealed virtual int JetUpdate2(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize, UpdateGrbit grbit);
    public sealed virtual int JetSetColumn(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, IntPtr data, int dataSize, SetColumnGrbit grbit, JET_SETINFO setinfo);
    public sealed virtual int JetSetColumns(JET_SESID sesid, JET_TABLEID tableid, NATIVE_SETCOLUMN* setcolumns, int numColumns);
    public sealed virtual int JetGetLock(JET_SESID sesid, JET_TABLEID tableid, GetLockGrbit grbit);
    public sealed virtual int JetEscrowUpdate(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, Byte[] delta, int deltaSize, Byte[] previousValue, int previousValueLength, Int32& actualPreviousValueLength, EscrowUpdateGrbit grbit);
    public sealed virtual int JetRegisterCallback(JET_SESID sesid, JET_TABLEID tableid, JET_cbtyp cbtyp, JET_CALLBACK callback, IntPtr context, JET_HANDLE& callbackId);
    public sealed virtual int JetUnregisterCallback(JET_SESID sesid, JET_TABLEID tableid, JET_cbtyp cbtyp, JET_HANDLE callbackId);
    public sealed virtual int JetDefragment(JET_SESID sesid, JET_DBID dbid, string tableName, Int32& passes, Int32& seconds, DefragGrbit grbit);
    public sealed virtual int Defragment(JET_SESID sesid, JET_DBID dbid, string tableName, DefragGrbit grbit);
    public sealed virtual int JetDefragment2(JET_SESID sesid, JET_DBID dbid, string tableName, Int32& passes, Int32& seconds, JET_CALLBACK callback, DefragGrbit grbit);
    public sealed virtual int JetIdle(JET_SESID sesid, IdleGrbit grbit);
    public sealed virtual int JetConfigureProcessForCrashDump(CrashDumpGrbit grbit);
    public sealed virtual int JetFreeBuffer(IntPtr buffer);
    internal static int GetActualSize(UInt32 numBytesActual);
    private static void CheckDataSize(ICollection`1<T> data, int dataOffset, string offsetArgumentName, int dataSize, string sizeArgumentName);
    private static void CheckDataSize(ICollection`1<T> data, int dataSize, string argumentName);
    private static void CheckNotNull(object o, string paramName);
    private static void CheckNotNegative(int i, string paramName);
    private static Exception UnsupportedApiException(string method);
    [ConditionalAttribute("TRACE")]
private static void TraceFunctionCall(string function);
    private static int Err(int err);
    [ConditionalAttribute("TRACE")]
private static void TraceErr(int err);
    private static int ConvertEnumColumnids(IList`1<JET_ENUMCOLUMNID> columnids, int numColumnids, NATIVE_ENUMCOLUMNID* nativecolumnids);
    private static void ConvertEnumColumnidTags(IList`1<JET_ENUMCOLUMNID> columnids, int numColumnids, NATIVE_ENUMCOLUMNID* nativecolumnids, UInt32* tags);
    private static void ConvertEnumerateColumnsResult(JET_PFNREALLOC allocator, IntPtr allocatorContext, UInt32 numEnumColumn, NATIVE_ENUMCOLUMN* nativeenumcolumns, Int32& numColumnValues, JET_ENUMCOLUMN[]& columnValues);
    private static NATIVE_COLUMNDEF[] GetNativecolumndefs(IList`1<JET_COLUMNDEF> columns, int numColumns);
    private static IntPtr GetNativeConditionalColumns(IList`1<JET_CONDITIONALCOLUMN> conditionalColumns, bool useUnicodeData, GCHandleCollection& handles);
    private static IntPtr GetNativeColumnCreates(IList`1<JET_COLUMNCREATE> managedColumnCreates, bool useUnicodeData, GCHandleCollection& handles);
    private static NATIVE_INDEXCREATE[] GetNativeIndexCreates(IList`1<JET_INDEXCREATE> managedIndexCreates, GCHandleCollection& handles);
    private static NATIVE_INDEXCREATE1[] GetNativeIndexCreate1s(IList`1<JET_INDEXCREATE> managedIndexCreates, GCHandleCollection& handles);
    private static NATIVE_INDEXCREATE2[] GetNativeIndexCreate2s(IList`1<JET_INDEXCREATE> managedIndexCreates, GCHandleCollection& handles);
    private static void SetColumnids(IList`1<JET_COLUMNDEF> columns, IList`1<JET_COLUMNID> columnids, IList`1<UInt32> nativecolumnids, int numColumns);
    private static int CreateIndexes(JET_SESID sesid, JET_TABLEID tableid, IList`1<JET_INDEXCREATE> indexcreates, int numIndexCreates);
    private static int CreateIndexes1(JET_SESID sesid, JET_TABLEID tableid, IList`1<JET_INDEXCREATE> indexcreates, int numIndexCreates);
    private static int CreateIndexes2(JET_SESID sesid, JET_TABLEID tableid, IList`1<JET_INDEXCREATE> indexcreates, int numIndexCreates);
    private static int CreateTableColumnIndex3(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    private JET_INSTANCE_INFO[] ConvertInstanceInfosUnicode(UInt32 nativeNumInstance, NATIVE_INSTANCE_INFO* nativeInstanceInfos);
    private JET_INSTANCE_INFO[] ConvertInstanceInfosAscii(UInt32 nativeNumInstance, NATIVE_INSTANCE_INFO* nativeInstanceInfos);
    private void CheckSupportsServer2003Features(string api);
    private void CheckSupportsVistaFeatures(string api);
    private void CheckSupportsWindows7Features(string api);
    private void CheckSupportsWindows8Features(string api);
    private void CheckSupportsWindows10Features(string api);
    private int CreateTableColumnIndex2(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    public sealed virtual int JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, JET_OPERATIONCONTEXT& operationContext);
    public sealed virtual int JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, JET_OPERATIONCONTEXT operationContext);
    public sealed virtual int JetGetThreadStats(JET_THREADSTATS2& threadstats);
    public sealed virtual int JetBeginTransaction3(JET_SESID sesid, long userTransactionId, BeginTransactionGrbit grbit);
    public sealed virtual int JetCommitTransaction2(JET_SESID sesid, CommitTransactionGrbit grbit, TimeSpan durableCommit, JET_COMMIT_ID& commitId);
    public sealed virtual int JetGetErrorInfo(JET_err error, JET_ERRINFOBASIC& errinfo);
    public sealed virtual int JetResizeDatabase(JET_SESID sesid, JET_DBID dbid, int desiredPages, Int32& actualPages, ResizeDatabaseGrbit grbit);
    public sealed virtual int JetCreateIndex4(JET_SESID sesid, JET_TABLEID tableid, JET_INDEXCREATE[] indexcreates, int numIndexCreates);
    public sealed virtual int JetOpenTemporaryTable2(JET_SESID sesid, JET_OPENTEMPORARYTABLE temporarytable);
    public sealed virtual int JetCreateTableColumnIndex4(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    public sealed virtual int JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Int32& value);
    public sealed virtual int JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Byte[] data, int length, Int32& actualDataSize);
    public sealed virtual int JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, int valueToSet);
    public sealed virtual int JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Byte[] data, int dataSize);
    public sealed virtual int JetPrereadIndexRanges(JET_SESID sesid, JET_TABLEID tableid, JET_INDEX_RANGE[] indexRanges, int rangeIndex, int rangeCount, Int32& rangesPreread, JET_COLUMNID[] columnsPreread, PrereadIndexRangesGrbit grbit);
    public sealed virtual int JetPrereadKeyRanges(JET_SESID sesid, JET_TABLEID tableid, Byte[][] keysStart, Int32[] keyStartLengths, Byte[][] keysEnd, Int32[] keyEndLengths, int rangeIndex, int rangeCount, Int32& rangesPreread, JET_COLUMNID[] columnsPreread, PrereadIndexRangesGrbit grbit);
    public sealed virtual int JetSetCursorFilter(JET_SESID sesid, JET_TABLEID tableid, JET_INDEX_COLUMN[] filters, CursorFilterGrbit grbit);
    private static NATIVE_INDEXCREATE3[] GetNativeIndexCreate3s(IList`1<JET_INDEXCREATE> managedIndexCreates, GCHandleCollection& handles);
    private static int CreateIndexes3(JET_SESID sesid, JET_TABLEID tableid, IList`1<JET_INDEXCREATE> indexcreates, int numIndexCreates);
    private static int CreateTableColumnIndex4(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    internal static void ReportUnhandledException(Exception exception, string description);
    private void DetermineCapabilities();
    private UInt32 GetVersionFromEsent();
}
internal class Microsoft.Isam.Esent.Interop.Implementation.JetCapabilities : object {
    [CompilerGeneratedAttribute]
private bool <SupportsServer2003Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsVistaFeatures>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsWindows7Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsWindows8Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsWindows81Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsWindows10Features>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsUnicodePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsLargeKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnsKeyMost>k__BackingField;
    public bool SupportsServer2003Features { get; public set; }
    public bool SupportsVistaFeatures { get; public set; }
    public bool SupportsWindows7Features { get; public set; }
    public bool SupportsWindows8Features { get; public set; }
    public bool SupportsWindows81Features { get; public set; }
    public bool SupportsWindows10Features { get; public set; }
    public bool SupportsUnicodePaths { get; public set; }
    public bool SupportsLargeKeys { get; public set; }
    public int ColumnsKeyMost { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SupportsServer2003Features();
    [CompilerGeneratedAttribute]
public void set_SupportsServer2003Features(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsVistaFeatures();
    [CompilerGeneratedAttribute]
public void set_SupportsVistaFeatures(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsWindows7Features();
    [CompilerGeneratedAttribute]
public void set_SupportsWindows7Features(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsWindows8Features();
    [CompilerGeneratedAttribute]
public void set_SupportsWindows8Features(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsWindows81Features();
    [CompilerGeneratedAttribute]
public void set_SupportsWindows81Features(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsWindows10Features();
    [CompilerGeneratedAttribute]
public void set_SupportsWindows10Features(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsUnicodePaths();
    [CompilerGeneratedAttribute]
public void set_SupportsUnicodePaths(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsLargeKeys();
    [CompilerGeneratedAttribute]
public void set_SupportsLargeKeys(bool value);
    [CompilerGeneratedAttribute]
public int get_ColumnsKeyMost();
    [CompilerGeneratedAttribute]
public void set_ColumnsKeyMost(int value);
}
[SuppressUnmanagedCodeSecurityAttribute]
[BestFitMappingAttribute("False")]
internal static class Microsoft.Isam.Esent.Interop.Implementation.NativeMethods : object {
    private static CharSet EsentCharSet;
    private static string EsentDll;
    [CompilerGeneratedAttribute]
private static Encoding <Encoding>k__BackingField;
    public static Encoding Encoding { get; private set; }
    private static NativeMethods();
    [CompilerGeneratedAttribute]
public static Encoding get_Encoding();
    [CompilerGeneratedAttribute]
private static void set_Encoding(Encoding value);
    public static int JetCreateInstance(IntPtr& instance, string szInstanceName);
    public static int JetCreateInstanceW(IntPtr& instance, string szInstanceName);
    public static int JetCreateInstance2(IntPtr& instance, string szInstanceName, string szDisplayName, UInt32 grbit);
    public static int JetCreateInstance2W(IntPtr& instance, string szInstanceName, string szDisplayName, UInt32 grbit);
    public static int JetInit(IntPtr& instance);
    public static int JetInit2(IntPtr& instance, UInt32 grbit);
    public static int JetInit3W(IntPtr& instance, NATIVE_RSTINFO& prstinfo, UInt32 grbit);
    public static int JetInit3W(IntPtr& instance, IntPtr prstinfo, UInt32 grbit);
    public static int JetGetInstanceInfo(UInt32& pcInstanceInfo, NATIVE_INSTANCE_INFO*& prgInstanceInfo);
    public static int JetGetInstanceInfoW(UInt32& pcInstanceInfo, NATIVE_INSTANCE_INFO*& prgInstanceInfo);
    public static int JetGetInstanceMiscInfo(IntPtr instance, NATIVE_SIGNATURE& pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetStopBackupInstance(IntPtr instance);
    public static int JetStopServiceInstance(IntPtr instance);
    public static int JetStopServiceInstance2(IntPtr instance, UInt32 grbit);
    public static int JetTerm(IntPtr instance);
    public static int JetTerm2(IntPtr instance, UInt32 grbit);
    public static int JetSetSystemParameter(IntPtr* pinstance, IntPtr sesid, UInt32 paramid, IntPtr lParam, string szParam);
    public static int JetSetSystemParameterW(IntPtr* pinstance, IntPtr sesid, UInt32 paramid, IntPtr lParam, string szParam);
    public static int JetGetSystemParameter(IntPtr instance, IntPtr sesid, UInt32 paramid, IntPtr& plParam, StringBuilder szParam, UInt32 cbMax);
    public static int JetGetSystemParameterW(IntPtr instance, IntPtr sesid, UInt32 paramid, IntPtr& plParam, StringBuilder szParam, UInt32 cbMax);
    public static int JetGetVersion(IntPtr sesid, UInt32& dwVersion);
    public static int JetCreateDatabase(IntPtr sesid, string szFilename, string szConnect, UInt32& dbid, UInt32 grbit);
    public static int JetCreateDatabaseW(IntPtr sesid, string szFilename, string szConnect, UInt32& dbid, UInt32 grbit);
    public static int JetCreateDatabase2(IntPtr sesid, string szFilename, UInt32 cpgDatabaseSizeMax, UInt32& dbid, UInt32 grbit);
    public static int JetCreateDatabase2W(IntPtr sesid, string szFilename, UInt32 cpgDatabaseSizeMax, UInt32& dbid, UInt32 grbit);
    public static int JetAttachDatabase(IntPtr sesid, string szFilename, UInt32 grbit);
    public static int JetAttachDatabaseW(IntPtr sesid, string szFilename, UInt32 grbit);
    public static int JetAttachDatabase2(IntPtr sesid, string szFilename, UInt32 cpgDatabaseSizeMax, UInt32 grbit);
    public static int JetAttachDatabase2W(IntPtr sesid, string szFilename, UInt32 cpgDatabaseSizeMax, UInt32 grbit);
    public static int JetDetachDatabase(IntPtr sesid, string szFilename);
    public static int JetDetachDatabase2(IntPtr sesid, string szFilename, UInt32 grbit);
    public static int JetDetachDatabase2W(IntPtr sesid, string szFilename, UInt32 grbit);
    public static int JetDetachDatabaseW(IntPtr sesid, string szFilename);
    public static int JetOpenDatabase(IntPtr sesid, string database, string szConnect, UInt32& dbid, UInt32 grbit);
    public static int JetOpenDatabaseW(IntPtr sesid, string database, string szConnect, UInt32& dbid, UInt32 grbit);
    public static int JetCloseDatabase(IntPtr sesid, UInt32 dbid, UInt32 grbit);
    public static int JetCompact(IntPtr sesid, string szDatabaseSrc, string szDatabaseDest, IntPtr pfnStatus, IntPtr pconvert, UInt32 grbit);
    public static int JetCompactW(IntPtr sesid, string szDatabaseSrc, string szDatabaseDest, IntPtr pfnStatus, IntPtr pconvert, UInt32 grbit);
    public static int JetGrowDatabase(IntPtr sesid, UInt32 dbid, UInt32 cpg, UInt32& pcpgReal);
    public static int JetSetDatabaseSize(IntPtr sesid, string szDatabaseName, UInt32 cpg, UInt32& pcpgReal);
    public static int JetSetDatabaseSizeW(IntPtr sesid, string szDatabaseName, UInt32 cpg, UInt32& pcpgReal);
    public static int JetGetDatabaseInfo(IntPtr sesid, UInt32 dbid, Int32& intValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseInfo(IntPtr sesid, UInt32 dbid, NATIVE_DBINFOMISC& dbinfomisc, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseInfo(IntPtr sesid, UInt32 dbid, NATIVE_DBINFOMISC4& dbinfomisc, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseInfo(IntPtr sesid, UInt32 dbid, StringBuilder stringValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseInfoW(IntPtr sesid, UInt32 dbid, Int32& intValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseInfoW(IntPtr sesid, UInt32 dbid, NATIVE_DBINFOMISC& dbinfomisc, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseInfoW(IntPtr sesid, UInt32 dbid, NATIVE_DBINFOMISC4& dbinfomisc, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseInfoW(IntPtr sesid, UInt32 dbid, StringBuilder stringValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseFileInfoW(string szFilename, Int32& intValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseFileInfo(string szFilename, Int32& intValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseFileInfoW(string szFilename, Int64& intValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseFileInfo(string szFilename, Int64& intValue, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseFileInfoW(string szFilename, NATIVE_DBINFOMISC4& dbinfomisc, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseFileInfo(string szFilename, NATIVE_DBINFOMISC& dbinfomisc, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetDatabaseFileInfoW(string szFilename, NATIVE_DBINFOMISC& dbinfomisc, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetBackupInstance(IntPtr instance, string szBackupPath, UInt32 grbit, IntPtr pfnStatus);
    public static int JetBackupInstanceW(IntPtr instance, string szBackupPath, UInt32 grbit, IntPtr pfnStatus);
    public static int JetRestoreInstance(IntPtr instance, string sz, string szDest, IntPtr pfn);
    public static int JetRestoreInstanceW(IntPtr instance, string sz, string szDest, IntPtr pfn);
    public static int JetOSSnapshotPrepare(IntPtr& snapId, UInt32 grbit);
    public static int JetOSSnapshotPrepareInstance(IntPtr snapId, IntPtr instance, UInt32 grbit);
    public static int JetOSSnapshotFreeze(IntPtr snapId, UInt32& pcInstanceInfo, NATIVE_INSTANCE_INFO*& prgInstanceInfo, UInt32 grbit);
    public static int JetOSSnapshotFreezeW(IntPtr snapId, UInt32& pcInstanceInfo, NATIVE_INSTANCE_INFO*& prgInstanceInfo, UInt32 grbit);
    public static int JetOSSnapshotGetFreezeInfoW(IntPtr snapId, UInt32& pcInstanceInfo, NATIVE_INSTANCE_INFO*& prgInstanceInfo, UInt32 grbit);
    public static int JetOSSnapshotThaw(IntPtr snapId, UInt32 grbit);
    public static int JetOSSnapshotTruncateLog(IntPtr snapId, UInt32 grbit);
    public static int JetOSSnapshotTruncateLogInstance(IntPtr snapId, IntPtr instance, UInt32 grbit);
    public static int JetOSSnapshotEnd(IntPtr snapId, UInt32 grbit);
    public static int JetOSSnapshotAbort(IntPtr snapId, UInt32 grbit);
    public static int JetBeginExternalBackupInstance(IntPtr instance, UInt32 grbit);
    public static int JetCloseFileInstance(IntPtr instance, IntPtr handle);
    public static int JetEndExternalBackupInstance(IntPtr instance);
    public static int JetEndExternalBackupInstance2(IntPtr instance, UInt32 grbit);
    public static int JetGetAttachInfoInstance(IntPtr instance, Byte[] szz, UInt32 cbMax, UInt32& pcbActual);
    public static int JetGetAttachInfoInstanceW(IntPtr instance, Byte[] szz, UInt32 cbMax, UInt32& pcbActual);
    public static int JetGetLogInfoInstance(IntPtr instance, Byte[] szz, UInt32 cbMax, UInt32& pcbActual);
    public static int JetGetLogInfoInstanceW(IntPtr instance, Byte[] szz, UInt32 cbMax, UInt32& pcbActual);
    public static int JetGetTruncateLogInfoInstance(IntPtr instance, Byte[] szz, UInt32 cbMax, UInt32& pcbActual);
    public static int JetGetTruncateLogInfoInstanceW(IntPtr instance, Byte[] szz, UInt32 cbMax, UInt32& pcbActual);
    public static int JetOpenFileInstance(IntPtr instance, string szFileName, IntPtr& phfFile, UInt32& pulFileSizeLow, UInt32& pulFileSizeHigh);
    public static int JetOpenFileInstanceW(IntPtr instance, string szFileName, IntPtr& phfFile, UInt32& pulFileSizeLow, UInt32& pulFileSizeHigh);
    public static int JetReadFileInstance(IntPtr instance, IntPtr handle, IntPtr pv, UInt32 cb, UInt32& pcbActual);
    public static int JetTruncateLogInstance(IntPtr instance);
    public static int JetBeginSession(IntPtr instance, IntPtr& session, string username, string password);
    public static int JetSetSessionContext(IntPtr session, IntPtr context);
    public static int JetResetSessionContext(IntPtr session);
    public static int JetEndSession(IntPtr sesid, UInt32 grbit);
    public static int JetDupSession(IntPtr sesid, IntPtr& newSesid);
    public static int JetGetThreadStats(JET_THREADSTATS* pvResult, UInt32 cbMax);
    public static int JetOpenTable(IntPtr sesid, UInt32 dbid, string tablename, Byte[] pvParameters, UInt32 cbParameters, UInt32 grbit, IntPtr& tableid);
    public static int JetOpenTableW(IntPtr sesid, UInt32 dbid, string tablename, Byte[] pvParameters, UInt32 cbParameters, UInt32 grbit, IntPtr& tableid);
    public static int JetCloseTable(IntPtr sesid, IntPtr tableid);
    public static int JetDupCursor(IntPtr sesid, IntPtr tableid, IntPtr& tableidNew, UInt32 grbit);
    public static int JetComputeStats(IntPtr sesid, IntPtr tableid);
    public static int JetSetLS(IntPtr sesid, IntPtr tableid, IntPtr ls, UInt32 grbit);
    public static int JetGetLS(IntPtr sesid, IntPtr tableid, IntPtr& pls, UInt32 grbit);
    public static int JetGetCursorInfo(IntPtr sesid, IntPtr tableid, IntPtr pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetBeginTransaction(IntPtr sesid);
    public static int JetBeginTransaction2(IntPtr sesid, UInt32 grbit);
    public static int JetBeginTransaction3(IntPtr sesid, long trxid, UInt32 grbit);
    public static int JetCommitTransaction(IntPtr sesid, UInt32 grbit);
    public static int JetRollback(IntPtr sesid, UInt32 grbit);
    public static int JetCreateTable(IntPtr sesid, UInt32 dbid, string szTableName, int pages, int density, IntPtr& tableid);
    public static int JetAddColumn(IntPtr sesid, IntPtr tableid, string szColumnName, NATIVE_COLUMNDEF& columndef, Byte[] pvDefault, UInt32 cbDefault, UInt32& columnid);
    public static int JetDeleteColumn(IntPtr sesid, IntPtr tableid, string szColumnName);
    public static int JetDeleteColumn2(IntPtr sesid, IntPtr tableid, string szColumnName, UInt32 grbit);
    public static int JetDeleteIndex(IntPtr sesid, IntPtr tableid, string szIndexName);
    public static int JetDeleteTable(IntPtr sesid, UInt32 dbid, string szTableName);
    public static int JetCreateIndex(IntPtr sesid, IntPtr tableid, string szIndexName, UInt32 grbit, string szKey, UInt32 cbKey, UInt32 lDensity);
    public static int JetCreateIndex2(IntPtr sesid, IntPtr tableid, NATIVE_INDEXCREATE[] pindexcreate, UInt32 cIndexCreate);
    public static int JetCreateIndex2W(IntPtr sesid, IntPtr tableid, NATIVE_INDEXCREATE1[] pindexcreate, UInt32 cIndexCreate);
    public static int JetCreateIndex3W(IntPtr sesid, IntPtr tableid, NATIVE_INDEXCREATE2[] pindexcreate, UInt32 cIndexCreate);
    public static int JetOpenTempTable(IntPtr sesid, NATIVE_COLUMNDEF[] rgcolumndef, UInt32 ccolumn, UInt32 grbit, IntPtr& ptableid, UInt32[] rgcolumnid);
    public static int JetOpenTempTable2(IntPtr sesid, NATIVE_COLUMNDEF[] rgcolumndef, UInt32 ccolumn, UInt32 lcid, UInt32 grbit, IntPtr& ptableid, UInt32[] rgcolumnid);
    public static int JetOpenTempTable3(IntPtr sesid, NATIVE_COLUMNDEF[] rgcolumndef, UInt32 ccolumn, NATIVE_UNICODEINDEX& pidxunicode, UInt32 grbit, IntPtr& ptableid, UInt32[] rgcolumnid);
    public static int JetOpenTemporaryTable(IntPtr sesid, NATIVE_OPENTEMPORARYTABLE& popentemporarytable);
    public static int JetOpenTempTable3(IntPtr sesid, NATIVE_COLUMNDEF[] rgcolumndef, UInt32 ccolumn, IntPtr pidxunicode, UInt32 grbit, IntPtr& ptableid, UInt32[] rgcolumnid);
    public static int JetCreateTableColumnIndex2(IntPtr sesid, UInt32 dbid, NATIVE_TABLECREATE2& tablecreate3);
    public static int JetCreateTableColumnIndex2W(IntPtr sesid, UInt32 dbid, NATIVE_TABLECREATE2& tablecreate3);
    public static int JetCreateTableColumnIndex3W(IntPtr sesid, UInt32 dbid, NATIVE_TABLECREATE3& tablecreate3);
    public static int JetGetTableColumnInfo(IntPtr sesid, IntPtr tableid, string szColumnName, NATIVE_COLUMNDEF& columndef, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfo(IntPtr sesid, IntPtr tableid, UInt32& pcolumnid, NATIVE_COLUMNDEF& columndef, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfo(IntPtr sesid, IntPtr tableid, string szColumnName, NATIVE_COLUMNBASE& columnbase, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfo(IntPtr sesid, IntPtr tableid, string szIgnored, NATIVE_COLUMNLIST& columnlist, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfoW(IntPtr sesid, IntPtr tableid, string szColumnName, NATIVE_COLUMNDEF& columndef, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfoW(IntPtr sesid, IntPtr tableid, UInt32& pcolumnid, NATIVE_COLUMNDEF& columndef, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfoW(IntPtr sesid, IntPtr tableid, string szColumnName, NATIVE_COLUMNBASE_WIDE& columnbase, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfoW(IntPtr sesid, IntPtr tableid, UInt32& pcolumnid, NATIVE_COLUMNBASE_WIDE& columnbase, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetTableColumnInfoW(IntPtr sesid, IntPtr tableid, string szIgnored, NATIVE_COLUMNLIST& columnlist, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfo(IntPtr sesid, UInt32 dbid, string szTableName, string szColumnName, NATIVE_COLUMNDEF& columndef, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfo(IntPtr sesid, UInt32 dbid, string szTableName, string szColumnName, NATIVE_COLUMNLIST& columnlist, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfo(IntPtr sesid, UInt32 dbid, string szTableName, string szColumnName, NATIVE_COLUMNBASE& columnbase, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfo(IntPtr sesid, UInt32 dbid, string szTableName, UInt32& pcolumnid, NATIVE_COLUMNBASE& columnbase, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szColumnName, NATIVE_COLUMNDEF& columndef, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szColumnName, NATIVE_COLUMNLIST& columnlist, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szColumnName, NATIVE_COLUMNBASE_WIDE& columnbase, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetColumnInfoW(IntPtr sesid, UInt32 dbid, string szTableName, UInt32& pcolumnid, NATIVE_COLUMNBASE_WIDE& columnbase, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetObjectInfo(IntPtr sesid, UInt32 dbid, UInt32 objtyp, string szContainerName, string szObjectName, NATIVE_OBJECTLIST& objectlist, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetObjectInfoW(IntPtr sesid, UInt32 dbid, UInt32 objtyp, string szContainerName, string szObjectName, NATIVE_OBJECTLIST& objectlist, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetObjectInfo(IntPtr sesid, UInt32 dbid, UInt32 objtyp, string szContainerName, string szObjectName, NATIVE_OBJECTINFO& objectinfo, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetObjectInfoW(IntPtr sesid, UInt32 dbid, UInt32 objtyp, string szContainerName, string szObjectName, NATIVE_OBJECTINFO& objectinfo, UInt32 cbMax, UInt32 InfoLevel);
    public static int JetGetCurrentIndex(IntPtr sesid, IntPtr tableid, StringBuilder szIndexName, UInt32 cchIndexName);
    public static int JetGetTableInfo(IntPtr sesid, IntPtr tableid, NATIVE_OBJECTINFO& pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetTableInfo(IntPtr sesid, IntPtr tableid, UInt32& pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetTableInfo(IntPtr sesid, IntPtr tableid, Int32[] pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetTableInfo(IntPtr sesid, IntPtr tableid, StringBuilder pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetTableInfoW(IntPtr sesid, IntPtr tableid, NATIVE_OBJECTINFO& pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetTableInfoW(IntPtr sesid, IntPtr tableid, UInt32& pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetTableInfoW(IntPtr sesid, IntPtr tableid, Int32[] pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetTableInfoW(IntPtr sesid, IntPtr tableid, StringBuilder pvResult, UInt32 cbMax, UInt32 infoLevel);
    public static int JetGetIndexInfo(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, UInt16& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfo(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, UInt32& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfo(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, JET_INDEXID& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfo(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, NATIVE_INDEXLIST& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, UInt16& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, UInt32& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, JET_INDEXID& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, NATIVE_INDEXLIST& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetIndexInfoW(IntPtr sesid, UInt32 dbid, string szTableName, string szIndexName, StringBuilder result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfo(IntPtr sesid, IntPtr tableid, string szIndexName, UInt16& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfo(IntPtr sesid, IntPtr tableid, string szIndexName, UInt32& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfo(IntPtr sesid, IntPtr tableid, string szIndexName, JET_INDEXID& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfo(IntPtr sesid, IntPtr tableid, string szIndexName, NATIVE_INDEXLIST& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfoW(IntPtr sesid, IntPtr tableid, string szIndexName, UInt16& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfoW(IntPtr sesid, IntPtr tableid, string szIndexName, UInt32& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfoW(IntPtr sesid, IntPtr tableid, string szIndexName, JET_INDEXID& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfoW(IntPtr sesid, IntPtr tableid, string szIndexName, NATIVE_INDEXLIST& result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetGetTableIndexInfoW(IntPtr sesid, IntPtr tableid, string szIndexName, StringBuilder result, UInt32 cbResult, UInt32 InfoLevel);
    public static int JetRenameTable(IntPtr sesid, UInt32 dbid, string szName, string szNameNew);
    public static int JetRenameColumn(IntPtr sesid, IntPtr tableid, string szName, string szNameNew, UInt32 grbit);
    public static int JetSetColumnDefaultValue(IntPtr sesid, UInt32 tableid, string szTableName, string szColumnName, Byte[] pvData, UInt32 cbData, UInt32 grbit);
    public static int JetGotoBookmark(IntPtr sesid, IntPtr tableid, Byte[] pvBookmark, UInt32 cbBookmark);
    public static int JetGotoSecondaryIndexBookmark(IntPtr sesid, IntPtr tableid, Byte[] pvSecondaryKey, UInt32 cbSecondaryKey, Byte[] pvPrimaryBookmark, UInt32 cbPrimaryBookmark, UInt32 grbit);
    public static int JetMove(IntPtr sesid, IntPtr tableid, int cRow, UInt32 grbit);
    public static int JetMakeKey(IntPtr sesid, IntPtr tableid, IntPtr pvData, UInt32 cbData, UInt32 grbit);
    public static int JetSeek(IntPtr sesid, IntPtr tableid, UInt32 grbit);
    public static int JetSetIndexRange(IntPtr sesid, IntPtr tableid, UInt32 grbit);
    public static int JetIntersectIndexes(IntPtr sesid, NATIVE_INDEXRANGE[] rgindexrange, UInt32 cindexrange, NATIVE_RECORDLIST& recordlist, UInt32 grbit);
    public static int JetSetCurrentIndex(IntPtr sesid, IntPtr tableid, string szIndexName);
    public static int JetSetCurrentIndex2(IntPtr sesid, IntPtr tableid, string szIndexName, UInt32 grbit);
    public static int JetSetCurrentIndex3(IntPtr sesid, IntPtr tableid, string szIndexName, UInt32 grbit, UInt32 itagSequence);
    public static int JetSetCurrentIndex4(IntPtr sesid, IntPtr tableid, string szIndexName, JET_INDEXID& indexid, UInt32 grbit, UInt32 itagSequence);
    public static int JetIndexRecordCount(IntPtr sesid, IntPtr tableid, UInt32& crec, UInt32 crecMax);
    public static int JetSetTableSequential(IntPtr sesid, IntPtr tableid, UInt32 grbit);
    public static int JetResetTableSequential(IntPtr sesid, IntPtr tableid, UInt32 grbit);
    public static int JetGetRecordPosition(IntPtr sesid, IntPtr tableid, NATIVE_RECPOS& precpos, UInt32 cbRecpos);
    public static int JetGotoPosition(IntPtr sesid, IntPtr tableid, NATIVE_RECPOS& precpos);
    public static int JetPrereadKeys(IntPtr sesid, IntPtr tableid, Void** rgpvKeys, UInt32* rgcbKeys, int ckeys, Int32& pckeysPreread, UInt32 grbit);
    public static int JetGetBookmark(IntPtr sesid, IntPtr tableid, Byte[] pvBookmark, UInt32 cbMax, UInt32& cbActual);
    public static int JetGetSecondaryIndexBookmark(IntPtr sesid, IntPtr tableid, Byte[] secondaryKey, UInt32 secondaryKeySize, UInt32& actualSecondaryKeySize, Byte[] primaryKey, UInt32 primaryKeySize, UInt32& actualPrimaryKeySize, UInt32 grbit);
    public static int JetRetrieveColumn(IntPtr sesid, IntPtr tableid, UInt32 columnid, IntPtr pvData, UInt32 cbData, UInt32& cbActual, UInt32 grbit, IntPtr pretinfo);
    public static int JetRetrieveColumn(IntPtr sesid, IntPtr tableid, UInt32 columnid, IntPtr pvData, UInt32 cbData, UInt32& cbActual, UInt32 grbit, NATIVE_RETINFO& pretinfo);
    public static int JetRetrieveColumns(IntPtr sesid, IntPtr tableid, NATIVE_RETRIEVECOLUMN* psetcolumn, UInt32 csetcolumn);
    public static int JetRetrieveKey(IntPtr sesid, IntPtr tableid, Byte[] pvData, UInt32 cbMax, UInt32& cbActual, UInt32 grbit);
    public static int JetEnumerateColumns(IntPtr sesid, IntPtr tableid, UInt32 cEnumColumnId, NATIVE_ENUMCOLUMNID* rgEnumColumnId, UInt32& pcEnumColumn, NATIVE_ENUMCOLUMN*& prgEnumColumn, JET_PFNREALLOC pfnRealloc, IntPtr pvReallocContext, UInt32 cbDataMost, UInt32 grbit);
    public static int JetGetRecordSize(IntPtr sesid, IntPtr tableid, NATIVE_RECSIZE& precsize, UInt32 grbit);
    public static int JetGetRecordSize2(IntPtr sesid, IntPtr tableid, NATIVE_RECSIZE2& precsize, UInt32 grbit);
    public static int JetDelete(IntPtr sesid, IntPtr tableid);
    public static int JetPrepareUpdate(IntPtr sesid, IntPtr tableid, UInt32 prep);
    public static int JetUpdate(IntPtr sesid, IntPtr tableid, Byte[] pvBookmark, UInt32 cbBookmark, UInt32& cbActual);
    public static int JetUpdate2(IntPtr sesid, IntPtr tableid, Byte[] pvBookmark, UInt32 cbBookmark, UInt32& cbActual, UInt32 grbit);
    public static int JetSetColumn(IntPtr sesid, IntPtr tableid, UInt32 columnid, IntPtr pvData, UInt32 cbData, UInt32 grbit, IntPtr psetinfo);
    public static int JetSetColumn(IntPtr sesid, IntPtr tableid, UInt32 columnid, IntPtr pvData, UInt32 cbData, UInt32 grbit, NATIVE_SETINFO& psetinfo);
    public static int JetSetColumns(IntPtr sesid, IntPtr tableid, NATIVE_SETCOLUMN* psetcolumn, UInt32 csetcolumn);
    public static int JetGetLock(IntPtr sesid, IntPtr tableid, UInt32 grbit);
    public static int JetEscrowUpdate(IntPtr sesid, IntPtr tableid, UInt32 columnid, Byte[] pv, UInt32 cbMax, Byte[] pvOld, UInt32 cbOldMax, UInt32& cbOldActual, UInt32 grbit);
    public static int JetRegisterCallback(IntPtr sesid, IntPtr tableid, UInt32 cbtyp, NATIVE_CALLBACK callback, IntPtr pvContext, IntPtr& pCallbackId);
    public static int JetUnregisterCallback(IntPtr sesid, IntPtr tableid, UInt32 cbtyp, IntPtr hCallbackId);
    public static int JetDefragment(IntPtr sesid, UInt32 dbid, string szTableName, UInt32& pcPasses, UInt32& pcSeconds, UInt32 grbit);
    public static int JetDefragment(IntPtr sesid, UInt32 dbid, string szTableName, IntPtr pcPasses, IntPtr pcSeconds, UInt32 grbit);
    public static int JetDefragment2(IntPtr sesid, UInt32 dbid, string szTableName, UInt32& pcPasses, UInt32& pcSeconds, IntPtr callback, UInt32 grbit);
    public static int JetDefragment2(IntPtr sesid, UInt32 dbid, string szTableName, IntPtr pcPasses, IntPtr pcSeconds, IntPtr callback, UInt32 grbit);
    public static int JetDefragment2W(IntPtr sesid, UInt32 dbid, string szTableName, UInt32& pcPasses, UInt32& pcSeconds, IntPtr callback, UInt32 grbit);
    public static int JetDefragment2W(IntPtr sesid, UInt32 dbid, string szTableName, IntPtr pcPasses, IntPtr pcSeconds, IntPtr callback, UInt32 grbit);
    public static int JetIdle(IntPtr sesid, UInt32 grbit);
    public static int JetConfigureProcessForCrashDump(UInt32 grbit);
    public static int JetFreeBuffer(IntPtr pbBuf);
    public static int JetSetSessionParameter(IntPtr sesid, UInt32 sesparamid, NATIVE_OPERATIONCONTEXT& data, int dataSize);
    public static int JetGetSessionParameter(IntPtr sesid, UInt32 sesparamid, NATIVE_OPERATIONCONTEXT& data, int dataSize, Int32& actualDataSize);
    public static int JetGetThreadStats(JET_THREADSTATS2* pvResult, UInt32 cbMax);
    public static int JetGetErrorInfoW(Int32& error, NATIVE_ERRINFOBASIC& pvResult, UInt32 cbMax, UInt32 InfoLevel, UInt32 grbit);
    public static int JetResizeDatabase(IntPtr sesid, UInt32 dbid, UInt32 cpg, UInt32& pcpgActual, UInt32 grbit);
    public static int JetCreateIndex4W(IntPtr sesid, IntPtr tableid, NATIVE_INDEXCREATE3[] pindexcreate, UInt32 cIndexCreate);
    public static int JetCreateTableColumnIndex4W(IntPtr sesid, UInt32 dbid, NATIVE_TABLECREATE4& tablecreate3);
    public static int JetOpenTemporaryTable2(IntPtr sesid, NATIVE_OPENTEMPORARYTABLE2& popentemporarytable);
    public static int JetGetSessionParameter(IntPtr sesid, UInt32 sesparamid, Int32& data, int dataSize, Int32& actualDataSize);
    public static int JetGetSessionParameter(IntPtr sesid, UInt32 sesparamid, Byte[] data, int dataSize, Int32& actualDataSize);
    public static int JetSetSessionParameter(IntPtr sesid, UInt32 sesparamid, Byte[] data, int dataSize);
    public static int JetSetSessionParameter(IntPtr sesid, UInt32 sesparamid, Int32& data, int dataSize);
    public static int JetCommitTransaction2(IntPtr sesid, UInt32 grbit, UInt32 cmsecDurableCommit, NATIVE_COMMIT_ID& pCommitId);
    public static int JetPrereadIndexRanges(IntPtr sesid, IntPtr tableid, NATIVE_INDEX_RANGE[] pIndexRanges, UInt32 cIndexRanges, Int32& pcRangesPreread, UInt32[] rgcolumnidPreread, UInt32 ccolumnidPreread, UInt32 grbit);
    public static int JetSetCursorFilter(IntPtr sesid, IntPtr tableid, NATIVE_INDEX_COLUMN[] pFilters, UInt32 cFilters, UInt32 grbit);
}
public class Microsoft.Isam.Esent.Interop.IndexInfo : object {
    private string name;
    private CultureInfo cultureInfo;
    private CompareOptions compareOptions;
    private ReadOnlyCollection`1<IndexSegment> indexSegments;
    private CreateIndexGrbit grbit;
    private int keys;
    private int entries;
    private int pages;
    public string Name { get; }
    public CultureInfo CultureInfo { get; }
    public CompareOptions CompareOptions { get; }
    public IList`1<IndexSegment> IndexSegments { get; }
    public CreateIndexGrbit Grbit { get; }
    public int Keys { get; }
    public int Entries { get; }
    public int Pages { get; }
    internal IndexInfo(string name, CultureInfo cultureInfo, CompareOptions compareOptions, IndexSegment[] indexSegments, CreateIndexGrbit grbit, int keys, int entries, int pages);
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public CultureInfo get_CultureInfo();
    [DebuggerStepThroughAttribute]
public CompareOptions get_CompareOptions();
    [DebuggerStepThroughAttribute]
public IList`1<IndexSegment> get_IndexSegments();
    [DebuggerStepThroughAttribute]
public CreateIndexGrbit get_Grbit();
    [DebuggerStepThroughAttribute]
public int get_Keys();
    [DebuggerStepThroughAttribute]
public int get_Entries();
    [DebuggerStepThroughAttribute]
public int get_Pages();
    public virtual string ToString();
}
internal abstract class Microsoft.Isam.Esent.Interop.IndexInfoEnumerator : TableEnumerator`1<IndexInfo> {
    [CompilerGeneratedAttribute]
private JET_INDEXLIST <Indexlist>k__BackingField;
    protected JET_INDEXLIST Indexlist { get; protected set; }
    protected IndexInfoEnumerator(JET_SESID sesid);
    [CompilerGeneratedAttribute]
protected JET_INDEXLIST get_Indexlist();
    [CompilerGeneratedAttribute]
protected void set_Indexlist(JET_INDEXLIST value);
    protected virtual IndexInfo GetCurrent();
    protected abstract virtual void GetIndexInfo(JET_SESID sesid, string indexname, String& result, JET_IdxInfo infoLevel);
    private static IndexSegment[] GetIndexSegmentsFromIndexlist(JET_SESID sesid, JET_INDEXLIST indexlist);
    private IndexInfo GetIndexInfoFromIndexlist(JET_SESID sesid, JET_INDEXLIST indexlist);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.IndexKeyGrbit : Enum {
    public int value__;
    public static IndexKeyGrbit Ascending;
    public static IndexKeyGrbit Descending;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.IndexRangeGrbit : Enum {
    public int value__;
    public static IndexRangeGrbit RecordInIndex;
}
public class Microsoft.Isam.Esent.Interop.IndexSegment : object {
    private string columnName;
    private JET_coltyp coltyp;
    private bool isAscending;
    private bool isASCII;
    public string ColumnName { get; }
    public JET_coltyp Coltyp { get; }
    public bool IsAscending { get; }
    public bool IsASCII { get; }
    internal IndexSegment(string name, JET_coltyp coltyp, bool isAscending, bool isASCII);
    [DebuggerStepThroughAttribute]
public string get_ColumnName();
    [DebuggerStepThroughAttribute]
public JET_coltyp get_Coltyp();
    [DebuggerStepThroughAttribute]
public bool get_IsAscending();
    [DebuggerStepThroughAttribute]
public bool get_IsASCII();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(IndexSegment other);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.InitGrbit : Enum {
    public int value__;
    public static InitGrbit None;
}
public class Microsoft.Isam.Esent.Interop.Instance : SafeHandleZeroOrMinusOneIsInvalid {
    private InstanceParameters parameters;
    private string name;
    private string displayName;
    private TermGrbit termGrbit;
    public JET_INSTANCE JetInstance { get; }
    public InstanceParameters Parameters { get; }
    public TermGrbit TermGrbit { get; public set; }
    public Instance(string name);
    public Instance(string name, string displayName);
    public Instance(string name, string displayName, TermGrbit termGrbit);
    public JET_INSTANCE get_JetInstance();
    public InstanceParameters get_Parameters();
    public TermGrbit get_TermGrbit();
    public void set_TermGrbit(TermGrbit value);
    public static JET_INSTANCE op_Implicit(Instance instance);
    public virtual string ToString();
    public void Init();
    public void Init(InitGrbit grbit);
    public void Init(JET_RSTINFO recoveryOptions, InitGrbit grbit);
    public void Term();
    protected virtual bool ReleaseHandle();
    private JET_INSTANCE CreateInstanceFromHandle();
    private void CheckObjectIsNotDisposed();
}
public class Microsoft.Isam.Esent.Interop.InstanceParameters : object {
    private JET_INSTANCE instance;
    private JET_SESID sesid;
    public string SystemDirectory { get; public set; }
    public string TempDirectory { get; public set; }
    public string LogFileDirectory { get; public set; }
    public string AlternateDatabaseRecoveryDirectory { get; public set; }
    public string BaseName { get; public set; }
    public string EventSource { get; public set; }
    public int MaxSessions { get; public set; }
    public int MaxOpenTables { get; public set; }
    public int MaxCursors { get; public set; }
    public int MaxVerPages { get; public set; }
    public int PreferredVerPages { get; public set; }
    public int VersionStoreTaskQueueMax { get; public set; }
    public int MaxTemporaryTables { get; public set; }
    public int LogFileSize { get; public set; }
    public int LogBuffers { get; public set; }
    public bool CircularLog { get; public set; }
    public bool CleanupMismatchedLogFiles { get; public set; }
    public int PageTempDBMin { get; public set; }
    public int CheckpointDepthMax { get; public set; }
    public int DbExtensionSize { get; public set; }
    public bool Recovery { get; public set; }
    public bool EnableOnlineDefrag { get; public set; }
    public bool EnableIndexChecking { get; public set; }
    public string EventSourceKey { get; public set; }
    public bool NoInformationEvent { get; public set; }
    public EventLoggingLevels EventLoggingLevel { get; public set; }
    public bool OneDatabasePerSession { get; public set; }
    public bool CreatePathIfNotExist { get; public set; }
    public int CachedClosedTables { get; public set; }
    public int WaypointLatency { get; public set; }
    public ShrinkDatabaseGrbit EnableShrinkDatabase { get; public set; }
    public int MaxTransactionSize { get; public set; }
    public int EnableDbScanInRecovery { get; public set; }
    public bool EnableDBScanSerialization { get; public set; }
    public int DbScanThrottle { get; public set; }
    public int DbScanIntervalMinSec { get; public set; }
    public int DbScanIntervalMaxSec { get; public set; }
    public int CachePriority { get; public set; }
    public int PrereadIOMax { get; public set; }
    public InstanceParameters(JET_INSTANCE instance);
    public string get_SystemDirectory();
    public void set_SystemDirectory(string value);
    public string get_TempDirectory();
    public void set_TempDirectory(string value);
    public string get_LogFileDirectory();
    public void set_LogFileDirectory(string value);
    public string get_AlternateDatabaseRecoveryDirectory();
    public void set_AlternateDatabaseRecoveryDirectory(string value);
    public string get_BaseName();
    public void set_BaseName(string value);
    public string get_EventSource();
    public void set_EventSource(string value);
    public int get_MaxSessions();
    public void set_MaxSessions(int value);
    public int get_MaxOpenTables();
    public void set_MaxOpenTables(int value);
    public int get_MaxCursors();
    public void set_MaxCursors(int value);
    public int get_MaxVerPages();
    public void set_MaxVerPages(int value);
    public int get_PreferredVerPages();
    public void set_PreferredVerPages(int value);
    public int get_VersionStoreTaskQueueMax();
    public void set_VersionStoreTaskQueueMax(int value);
    public int get_MaxTemporaryTables();
    public void set_MaxTemporaryTables(int value);
    public int get_LogFileSize();
    public void set_LogFileSize(int value);
    public int get_LogBuffers();
    public void set_LogBuffers(int value);
    public bool get_CircularLog();
    public void set_CircularLog(bool value);
    public bool get_CleanupMismatchedLogFiles();
    public void set_CleanupMismatchedLogFiles(bool value);
    public int get_PageTempDBMin();
    public void set_PageTempDBMin(int value);
    public int get_CheckpointDepthMax();
    public void set_CheckpointDepthMax(int value);
    public int get_DbExtensionSize();
    public void set_DbExtensionSize(int value);
    public bool get_Recovery();
    public void set_Recovery(bool value);
    public bool get_EnableOnlineDefrag();
    public void set_EnableOnlineDefrag(bool value);
    public bool get_EnableIndexChecking();
    public void set_EnableIndexChecking(bool value);
    public string get_EventSourceKey();
    public void set_EventSourceKey(string value);
    public bool get_NoInformationEvent();
    public void set_NoInformationEvent(bool value);
    public EventLoggingLevels get_EventLoggingLevel();
    public void set_EventLoggingLevel(EventLoggingLevels value);
    public bool get_OneDatabasePerSession();
    public void set_OneDatabasePerSession(bool value);
    public bool get_CreatePathIfNotExist();
    public void set_CreatePathIfNotExist(bool value);
    public int get_CachedClosedTables();
    public void set_CachedClosedTables(int value);
    public int get_WaypointLatency();
    public void set_WaypointLatency(int value);
    public virtual string ToString();
    private void SetStringParameter(JET_param param, string value);
    private string GetStringParameter(JET_param param);
    private void SetIntegerParameter(JET_param param, int value);
    private int GetIntegerParameter(JET_param param);
    private void SetBoolParameter(JET_param param, bool value);
    private bool GetBoolParameter(JET_param param);
    public ShrinkDatabaseGrbit get_EnableShrinkDatabase();
    public void set_EnableShrinkDatabase(ShrinkDatabaseGrbit value);
    public int get_MaxTransactionSize();
    public void set_MaxTransactionSize(int value);
    public int get_EnableDbScanInRecovery();
    public void set_EnableDbScanInRecovery(int value);
    public bool get_EnableDBScanSerialization();
    public void set_EnableDBScanSerialization(bool value);
    public int get_DbScanThrottle();
    public void set_DbScanThrottle(int value);
    public int get_DbScanIntervalMinSec();
    public void set_DbScanIntervalMinSec(int value);
    public int get_DbScanIntervalMaxSec();
    public void set_DbScanIntervalMaxSec(int value);
    public int get_CachePriority();
    public void set_CachePriority(int value);
    public int get_PrereadIOMax();
    public void set_PrereadIOMax(int value);
    internal NATIVE_JET_PFNDURABLECOMMITCALLBACK GetDurableCommitCallback();
    internal void SetDurableCommitCallback(NATIVE_JET_PFNDURABLECOMMITCALLBACK callback);
    private IntPtr GetIntPtrParameter(JET_param param);
    private void SetIntPtrParameter(JET_param param, IntPtr value);
}
public class Microsoft.Isam.Esent.Interop.Int16ColumnValue : ColumnValueOfStruct`1<short> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
public class Microsoft.Isam.Esent.Interop.Int32ColumnValue : ColumnValueOfStruct`1<int> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
public class Microsoft.Isam.Esent.Interop.Int64ColumnValue : ColumnValueOfStruct`1<long> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
internal class Microsoft.Isam.Esent.Interop.IntersectIndexesEnumerator : TableEnumerator`1<Byte[]> {
    private JET_INDEXRANGE[] ranges;
    private JET_RECORDLIST recordlist;
    public IntersectIndexesEnumerator(JET_SESID sesid, JET_INDEXRANGE[] ranges);
    protected virtual void OpenTable();
    protected virtual Byte[] GetCurrent();
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.IntersectIndexesGrbit : Enum {
    public int value__;
    public static IntersectIndexesGrbit None;
}
public interface Microsoft.Isam.Esent.Interop.INullableJetStruct {
    public bool HasValue { get; }
    public abstract virtual bool get_HasValue();
}
public class Microsoft.Isam.Esent.Interop.JET_BKINFO : ValueType {
    private JET_LGPOS logPosition;
    private JET_BKLOGTIME backupTime;
    private UInt32 lowGeneration;
    private UInt32 highGeneration;
    public JET_LGPOS lgposMark { get; internal set; }
    public JET_BKLOGTIME bklogtimeMark { get; internal set; }
    public int genLow { get; internal set; }
    public int genHigh { get; public set; }
    public bool HasValue { get; }
    [DebuggerStepThroughAttribute]
public JET_LGPOS get_lgposMark();
    internal void set_lgposMark(JET_LGPOS value);
    [DebuggerStepThroughAttribute]
public JET_BKLOGTIME get_bklogtimeMark();
    internal void set_bklogtimeMark(JET_BKLOGTIME value);
    [DebuggerStepThroughAttribute]
public int get_genLow();
    internal void set_genLow(int value);
    [DebuggerStepThroughAttribute]
public int get_genHigh();
    public void set_genHigh(int value);
    public sealed virtual bool get_HasValue();
    public static bool op_Equality(JET_BKINFO lhs, JET_BKINFO rhs);
    public static bool op_Inequality(JET_BKINFO lhs, JET_BKINFO rhs);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_BKINFO other);
}
public class Microsoft.Isam.Esent.Interop.JET_BKLOGTIME : ValueType {
    private byte bSeconds;
    private byte bMinutes;
    private byte bHours;
    private byte bDays;
    private byte bMonth;
    private byte bYear;
    private byte bFiller1;
    private byte bFiller2;
    public bool HasValue { get; }
    public bool fTimeIsUTC { get; }
    public bool fOSSnapshot { get; }
    internal JET_BKLOGTIME(DateTime time, bool isSnapshot);
    public sealed virtual bool get_HasValue();
    public bool get_fTimeIsUTC();
    public bool get_fOSSnapshot();
    public static bool op_Equality(JET_BKLOGTIME lhs, JET_BKLOGTIME rhs);
    public static bool op_Inequality(JET_BKLOGTIME lhs, JET_BKLOGTIME rhs);
    public sealed virtual Nullable`1<DateTime> ToDateTime();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_BKLOGTIME other);
}
public class Microsoft.Isam.Esent.Interop.JET_CALLBACK : MulticastDelegate {
    public JET_CALLBACK(object object, IntPtr method);
    public virtual JET_err Invoke(JET_SESID sesid, JET_DBID dbid, JET_TABLEID tableid, JET_cbtyp cbtyp, object arg1, object arg2, IntPtr context, IntPtr unused);
    public virtual IAsyncResult BeginInvoke(JET_SESID sesid, JET_DBID dbid, JET_TABLEID tableid, JET_cbtyp cbtyp, object arg1, object arg2, IntPtr context, IntPtr unused, AsyncCallback callback, object object);
    public virtual JET_err EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.JET_cbtyp : Enum {
    public int value__;
    public static JET_cbtyp Null;
    public static JET_cbtyp Finalize;
    public static JET_cbtyp BeforeInsert;
    public static JET_cbtyp AfterInsert;
    public static JET_cbtyp BeforeReplace;
    public static JET_cbtyp AfterReplace;
    public static JET_cbtyp BeforeDelete;
    public static JET_cbtyp AfterDelete;
    public static JET_cbtyp UserDefinedDefaultValue;
    public static JET_cbtyp OnlineDefragCompleted;
    public static JET_cbtyp FreeCursorLS;
    public static JET_cbtyp FreeTableLS;
}
internal enum Microsoft.Isam.Esent.Interop.JET_ColInfo : Enum {
    public int value__;
    public static JET_ColInfo Default;
    public static JET_ColInfo List;
    public static JET_ColInfo Base;
    public static JET_ColInfo ByColid;
}
public enum Microsoft.Isam.Esent.Interop.JET_coltyp : Enum {
    public int value__;
    public static JET_coltyp Nil;
    public static JET_coltyp Bit;
    public static JET_coltyp UnsignedByte;
    public static JET_coltyp Short;
    public static JET_coltyp Long;
    public static JET_coltyp Currency;
    public static JET_coltyp IEEESingle;
    public static JET_coltyp IEEEDouble;
    public static JET_coltyp DateTime;
    public static JET_coltyp Binary;
    public static JET_coltyp Text;
    public static JET_coltyp LongBinary;
    public static JET_coltyp LongText;
}
public class Microsoft.Isam.Esent.Interop.JET_COLUMNBASE : object {
    [CompilerGeneratedAttribute]
private JET_coltyp <coltyp>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_CP <cp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbMax>k__BackingField;
    [CompilerGeneratedAttribute]
private ColumndefGrbit <grbit>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <szBaseTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <szBaseColumnName>k__BackingField;
    public JET_coltyp coltyp { get; internal set; }
    public JET_CP cp { get; internal set; }
    public int cbMax { get; internal set; }
    public ColumndefGrbit grbit { get; internal set; }
    public JET_COLUMNID columnid { get; internal set; }
    public string szBaseTableName { get; internal set; }
    public string szBaseColumnName { get; internal set; }
    internal JET_COLUMNBASE(NATIVE_COLUMNBASE value);
    internal JET_COLUMNBASE(NATIVE_COLUMNBASE_WIDE value);
    [CompilerGeneratedAttribute]
public JET_coltyp get_coltyp();
    [CompilerGeneratedAttribute]
internal void set_coltyp(JET_coltyp value);
    [CompilerGeneratedAttribute]
public JET_CP get_cp();
    [CompilerGeneratedAttribute]
internal void set_cp(JET_CP value);
    [CompilerGeneratedAttribute]
public int get_cbMax();
    [CompilerGeneratedAttribute]
internal void set_cbMax(int value);
    [CompilerGeneratedAttribute]
public ColumndefGrbit get_grbit();
    [CompilerGeneratedAttribute]
internal void set_grbit(ColumndefGrbit value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnid();
    [CompilerGeneratedAttribute]
internal void set_columnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public string get_szBaseTableName();
    [CompilerGeneratedAttribute]
internal void set_szBaseTableName(string value);
    [CompilerGeneratedAttribute]
public string get_szBaseColumnName();
    [CompilerGeneratedAttribute]
internal void set_szBaseColumnName(string value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(JET_COLUMNBASE other);
}
public class Microsoft.Isam.Esent.Interop.JET_COLUMNCREATE : object {
    private string name;
    private JET_coltyp columnType;
    private int maxSize;
    private ColumndefGrbit options;
    private Byte[] defaultValue;
    private int defaultValueSize;
    private JET_CP codePage;
    private JET_COLUMNID id;
    private JET_err errorCode;
    public string szColumnName { get; public set; }
    public JET_coltyp coltyp { get; public set; }
    public int cbMax { get; public set; }
    public ColumndefGrbit grbit { get; public set; }
    public Byte[] pvDefault { get; public set; }
    public int cbDefault { get; public set; }
    public JET_CP cp { get; public set; }
    public JET_COLUMNID columnid { get; internal set; }
    public JET_err err { get; public set; }
    [DebuggerStepThroughAttribute]
public string get_szColumnName();
    public void set_szColumnName(string value);
    [DebuggerStepThroughAttribute]
public JET_coltyp get_coltyp();
    public void set_coltyp(JET_coltyp value);
    [DebuggerStepThroughAttribute]
public int get_cbMax();
    public void set_cbMax(int value);
    [DebuggerStepThroughAttribute]
public ColumndefGrbit get_grbit();
    public void set_grbit(ColumndefGrbit value);
    public Byte[] get_pvDefault();
    public void set_pvDefault(Byte[] value);
    public int get_cbDefault();
    public void set_cbDefault(int value);
    [DebuggerStepThroughAttribute]
public JET_CP get_cp();
    public void set_cp(JET_CP value);
    [DebuggerStepThroughAttribute]
public JET_COLUMNID get_columnid();
    internal void set_columnid(JET_COLUMNID value);
    [DebuggerStepThroughAttribute]
public JET_err get_err();
    public void set_err(JET_err value);
    public sealed virtual bool ContentEquals(JET_COLUMNCREATE other);
    public sealed virtual JET_COLUMNCREATE DeepClone();
    public virtual string ToString();
    internal void CheckMembersAreValid();
    internal NATIVE_COLUMNCREATE GetNativeColumnCreate();
    internal void SetFromNativeColumnCreate(NATIVE_COLUMNCREATE value);
}
public class Microsoft.Isam.Esent.Interop.JET_COLUMNDEF : object {
    private JET_coltyp columnType;
    private JET_CP codePage;
    private int maxSize;
    private JET_COLUMNID id;
    private ColumndefGrbit options;
    public JET_coltyp coltyp { get; public set; }
    public JET_CP cp { get; public set; }
    public int cbMax { get; public set; }
    public ColumndefGrbit grbit { get; public set; }
    public JET_COLUMNID columnid { get; internal set; }
    [DebuggerStepThroughAttribute]
public JET_coltyp get_coltyp();
    public void set_coltyp(JET_coltyp value);
    [DebuggerStepThroughAttribute]
public JET_CP get_cp();
    public void set_cp(JET_CP value);
    [DebuggerStepThroughAttribute]
public int get_cbMax();
    public void set_cbMax(int value);
    [DebuggerStepThroughAttribute]
public ColumndefGrbit get_grbit();
    public void set_grbit(ColumndefGrbit value);
    [DebuggerStepThroughAttribute]
public JET_COLUMNID get_columnid();
    internal void set_columnid(JET_COLUMNID value);
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_COLUMNDEF other);
    public sealed virtual JET_COLUMNDEF DeepClone();
    internal NATIVE_COLUMNDEF GetNativeColumndef();
    internal void SetFromNativeColumndef(NATIVE_COLUMNDEF value);
}
public class Microsoft.Isam.Esent.Interop.JET_COLUMNID : ValueType {
    internal UInt32 Value;
    public static JET_COLUMNID Nil { get; }
    public bool IsInvalid { get; }
    [DebuggerStepThroughAttribute]
public static JET_COLUMNID get_Nil();
    public bool get_IsInvalid();
    public static bool op_Equality(JET_COLUMNID lhs, JET_COLUMNID rhs);
    public static bool op_Inequality(JET_COLUMNID lhs, JET_COLUMNID rhs);
    public static bool op_LessThan(JET_COLUMNID lhs, JET_COLUMNID rhs);
    public static bool op_GreaterThan(JET_COLUMNID lhs, JET_COLUMNID rhs);
    public static bool op_LessThanOrEqual(JET_COLUMNID lhs, JET_COLUMNID rhs);
    public static bool op_GreaterThanOrEqual(JET_COLUMNID lhs, JET_COLUMNID rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_COLUMNID other);
    public sealed virtual int CompareTo(JET_COLUMNID other);
    internal static JET_COLUMNID CreateColumnidFromNativeValue(int nativeValue);
}
public class Microsoft.Isam.Esent.Interop.JET_COLUMNLIST : object {
    [CompilerGeneratedAttribute]
private JET_TABLEID <tableid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcolumnname>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcolumnid>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcoltyp>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidCp>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcbMax>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidgrbit>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidBaseTableName>k__BackingField;
    public JET_TABLEID tableid { get; internal set; }
    public int cRecord { get; internal set; }
    public JET_COLUMNID columnidcolumnname { get; internal set; }
    public JET_COLUMNID columnidcolumnid { get; internal set; }
    public JET_COLUMNID columnidcoltyp { get; internal set; }
    public JET_COLUMNID columnidCp { get; internal set; }
    public JET_COLUMNID columnidcbMax { get; internal set; }
    public JET_COLUMNID columnidgrbit { get; internal set; }
    public JET_COLUMNID columnidDefault { get; internal set; }
    public JET_COLUMNID columnidBaseTableName { get; internal set; }
    [CompilerGeneratedAttribute]
public JET_TABLEID get_tableid();
    [CompilerGeneratedAttribute]
internal void set_tableid(JET_TABLEID value);
    [CompilerGeneratedAttribute]
public int get_cRecord();
    [CompilerGeneratedAttribute]
internal void set_cRecord(int value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcolumnname();
    [CompilerGeneratedAttribute]
internal void set_columnidcolumnname(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcolumnid();
    [CompilerGeneratedAttribute]
internal void set_columnidcolumnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcoltyp();
    [CompilerGeneratedAttribute]
internal void set_columnidcoltyp(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidCp();
    [CompilerGeneratedAttribute]
internal void set_columnidCp(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcbMax();
    [CompilerGeneratedAttribute]
internal void set_columnidcbMax(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidgrbit();
    [CompilerGeneratedAttribute]
internal void set_columnidgrbit(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidDefault();
    [CompilerGeneratedAttribute]
internal void set_columnidDefault(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidBaseTableName();
    [CompilerGeneratedAttribute]
internal void set_columnidBaseTableName(JET_COLUMNID value);
    public virtual string ToString();
    internal void SetFromNativeColumnlist(NATIVE_COLUMNLIST value);
}
public class Microsoft.Isam.Esent.Interop.JET_CONDITIONALCOLUMN : object {
    private string columnName;
    private ConditionalColumnGrbit option;
    public string szColumnName { get; public set; }
    public ConditionalColumnGrbit grbit { get; public set; }
    [DebuggerStepThroughAttribute]
public string get_szColumnName();
    public void set_szColumnName(string value);
    [DebuggerStepThroughAttribute]
public ConditionalColumnGrbit get_grbit();
    public void set_grbit(ConditionalColumnGrbit value);
    public sealed virtual JET_CONDITIONALCOLUMN DeepClone();
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_CONDITIONALCOLUMN other);
    internal NATIVE_CONDITIONALCOLUMN GetNativeConditionalColumn();
}
[ObsoleteAttribute("Not available in Windows Server 2003 and up.")]
public abstract class Microsoft.Isam.Esent.Interop.JET_CONVERT : object {
}
public enum Microsoft.Isam.Esent.Interop.JET_CP : Enum {
    public int value__;
    public static JET_CP None;
    public static JET_CP Unicode;
    public static JET_CP ASCII;
}
public class Microsoft.Isam.Esent.Interop.JET_DBID : ValueType {
    internal UInt32 Value;
    public static JET_DBID Nil { get; }
    public static JET_DBID get_Nil();
    public static bool op_Equality(JET_DBID lhs, JET_DBID rhs);
    public static bool op_Inequality(JET_DBID lhs, JET_DBID rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_DBID other);
}
public enum Microsoft.Isam.Esent.Interop.JET_DbInfo : Enum {
    public int value__;
    public static JET_DbInfo Filename;
    public static JET_DbInfo LCID;
    public static JET_DbInfo Options;
    public static JET_DbInfo Transactions;
    public static JET_DbInfo Version;
    public static JET_DbInfo Filesize;
    public static JET_DbInfo SpaceOwned;
    public static JET_DbInfo SpaceAvailable;
    public static JET_DbInfo Misc;
    public static JET_DbInfo DBInUse;
    public static JET_DbInfo PageSize;
    public static JET_DbInfo FileType;
}
public class Microsoft.Isam.Esent.Interop.JET_DBINFOMISC : object {
    private int _ulVersion;
    private int _ulUpdate;
    private JET_SIGNATURE _signDb;
    private JET_dbstate _dbstate;
    private JET_LGPOS _lgposConsistent;
    private JET_LOGTIME _logtimeConsistent;
    private JET_LOGTIME _logtimeAttach;
    private JET_LGPOS _lgposAttach;
    private JET_LOGTIME _logtimeDetach;
    private JET_LGPOS _lgposDetach;
    private JET_SIGNATURE _signLog;
    private JET_BKINFO _bkinfoFullPrev;
    private JET_BKINFO _bkinfoIncPrev;
    private JET_BKINFO _bkinfoFullCur;
    private bool _fShadowingDisabled;
    private bool _fUpgradeDb;
    private int _dwMajorVersion;
    private int _dwMinorVersion;
    private int _dwBuildNumber;
    private int _lSPNumber;
    private int _cbPageSize;
    private int _genMinRequired;
    private int _genMaxRequired;
    private JET_LOGTIME _logtimeGenMaxCreate;
    private int _ulRepairCount;
    private JET_LOGTIME _logtimeRepair;
    private int _ulRepairCountOld;
    private int _ulECCFixSuccess;
    private JET_LOGTIME _logtimeECCFixSuccess;
    private int _ulECCFixSuccessOld;
    private int _ulECCFixFail;
    private JET_LOGTIME _logtimeECCFixFail;
    private int _ulECCFixFailOld;
    private int _ulBadChecksum;
    private JET_LOGTIME _logtimeBadChecksum;
    private int _ulBadChecksumOld;
    private int _genCommitted;
    private JET_BKINFO _bkinfoCopyPrev;
    private JET_BKINFO _bkinfoDiffPrev;
    public int ulVersion { get; internal set; }
    public int ulUpdate { get; internal set; }
    public JET_SIGNATURE signDb { get; internal set; }
    public JET_dbstate dbstate { get; internal set; }
    public JET_LGPOS lgposConsistent { get; internal set; }
    public JET_LOGTIME logtimeConsistent { get; internal set; }
    public JET_LOGTIME logtimeAttach { get; internal set; }
    public JET_LGPOS lgposAttach { get; internal set; }
    public JET_LOGTIME logtimeDetach { get; internal set; }
    public JET_LGPOS lgposDetach { get; internal set; }
    public JET_SIGNATURE signLog { get; internal set; }
    public JET_BKINFO bkinfoFullPrev { get; internal set; }
    public JET_BKINFO bkinfoIncPrev { get; internal set; }
    public JET_BKINFO bkinfoFullCur { get; internal set; }
    public bool fShadowingDisabled { get; internal set; }
    public bool fUpgradeDb { get; internal set; }
    public int dwMajorVersion { get; internal set; }
    public int dwMinorVersion { get; internal set; }
    public int dwBuildNumber { get; internal set; }
    public int lSPNumber { get; internal set; }
    public int cbPageSize { get; internal set; }
    public int genMinRequired { get; internal set; }
    public int genMaxRequired { get; internal set; }
    public JET_LOGTIME logtimeGenMaxCreate { get; internal set; }
    public int ulRepairCount { get; internal set; }
    public JET_LOGTIME logtimeRepair { get; internal set; }
    public int ulRepairCountOld { get; internal set; }
    public int ulECCFixSuccess { get; internal set; }
    public JET_LOGTIME logtimeECCFixSuccess { get; internal set; }
    public int ulECCFixSuccessOld { get; internal set; }
    public int ulECCFixFail { get; internal set; }
    public JET_LOGTIME logtimeECCFixFail { get; internal set; }
    public int ulECCFixFailOld { get; internal set; }
    public int ulBadChecksum { get; internal set; }
    public JET_LOGTIME logtimeBadChecksum { get; internal set; }
    public int ulBadChecksumOld { get; internal set; }
    public int genCommitted { get; internal set; }
    public JET_BKINFO bkinfoCopyPrev { get; internal set; }
    public JET_BKINFO bkinfoDiffPrev { get; internal set; }
    [DebuggerStepThroughAttribute]
public int get_ulVersion();
    internal void set_ulVersion(int value);
    [DebuggerStepThroughAttribute]
public int get_ulUpdate();
    internal void set_ulUpdate(int value);
    [DebuggerStepThroughAttribute]
public JET_SIGNATURE get_signDb();
    internal void set_signDb(JET_SIGNATURE value);
    [DebuggerStepThroughAttribute]
public JET_dbstate get_dbstate();
    internal void set_dbstate(JET_dbstate value);
    [DebuggerStepThroughAttribute]
public JET_LGPOS get_lgposConsistent();
    internal void set_lgposConsistent(JET_LGPOS value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeConsistent();
    internal void set_logtimeConsistent(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeAttach();
    internal void set_logtimeAttach(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public JET_LGPOS get_lgposAttach();
    internal void set_lgposAttach(JET_LGPOS value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeDetach();
    internal void set_logtimeDetach(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public JET_LGPOS get_lgposDetach();
    internal void set_lgposDetach(JET_LGPOS value);
    [DebuggerStepThroughAttribute]
public JET_SIGNATURE get_signLog();
    internal void set_signLog(JET_SIGNATURE value);
    [DebuggerStepThroughAttribute]
public JET_BKINFO get_bkinfoFullPrev();
    internal void set_bkinfoFullPrev(JET_BKINFO value);
    [DebuggerStepThroughAttribute]
public JET_BKINFO get_bkinfoIncPrev();
    internal void set_bkinfoIncPrev(JET_BKINFO value);
    [DebuggerStepThroughAttribute]
public JET_BKINFO get_bkinfoFullCur();
    internal void set_bkinfoFullCur(JET_BKINFO value);
    [DebuggerStepThroughAttribute]
public bool get_fShadowingDisabled();
    internal void set_fShadowingDisabled(bool value);
    [DebuggerStepThroughAttribute]
public bool get_fUpgradeDb();
    internal void set_fUpgradeDb(bool value);
    [DebuggerStepThroughAttribute]
public int get_dwMajorVersion();
    internal void set_dwMajorVersion(int value);
    [DebuggerStepThroughAttribute]
public int get_dwMinorVersion();
    internal void set_dwMinorVersion(int value);
    [DebuggerStepThroughAttribute]
public int get_dwBuildNumber();
    internal void set_dwBuildNumber(int value);
    [DebuggerStepThroughAttribute]
public int get_lSPNumber();
    internal void set_lSPNumber(int value);
    [DebuggerStepThroughAttribute]
public int get_cbPageSize();
    internal void set_cbPageSize(int value);
    [DebuggerStepThroughAttribute]
public int get_genMinRequired();
    internal void set_genMinRequired(int value);
    [DebuggerStepThroughAttribute]
public int get_genMaxRequired();
    internal void set_genMaxRequired(int value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeGenMaxCreate();
    internal void set_logtimeGenMaxCreate(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public int get_ulRepairCount();
    internal void set_ulRepairCount(int value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeRepair();
    internal void set_logtimeRepair(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public int get_ulRepairCountOld();
    internal void set_ulRepairCountOld(int value);
    [DebuggerStepThroughAttribute]
public int get_ulECCFixSuccess();
    internal void set_ulECCFixSuccess(int value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeECCFixSuccess();
    internal void set_logtimeECCFixSuccess(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public int get_ulECCFixSuccessOld();
    internal void set_ulECCFixSuccessOld(int value);
    [DebuggerStepThroughAttribute]
public int get_ulECCFixFail();
    internal void set_ulECCFixFail(int value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeECCFixFail();
    internal void set_logtimeECCFixFail(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public int get_ulECCFixFailOld();
    internal void set_ulECCFixFailOld(int value);
    [DebuggerStepThroughAttribute]
public int get_ulBadChecksum();
    internal void set_ulBadChecksum(int value);
    [DebuggerStepThroughAttribute]
public JET_LOGTIME get_logtimeBadChecksum();
    internal void set_logtimeBadChecksum(JET_LOGTIME value);
    [DebuggerStepThroughAttribute]
public int get_ulBadChecksumOld();
    internal void set_ulBadChecksumOld(int value);
    [DebuggerStepThroughAttribute]
public int get_genCommitted();
    internal void set_genCommitted(int value);
    [DebuggerStepThroughAttribute]
public JET_BKINFO get_bkinfoCopyPrev();
    internal void set_bkinfoCopyPrev(JET_BKINFO value);
    [DebuggerStepThroughAttribute]
public JET_BKINFO get_bkinfoDiffPrev();
    internal void set_bkinfoDiffPrev(JET_BKINFO value);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(JET_DBINFOMISC other);
    internal void SetFromNativeDbinfoMisc(NATIVE_DBINFOMISC& native);
    internal void SetFromNativeDbinfoMisc(NATIVE_DBINFOMISC4& native);
    internal NATIVE_DBINFOMISC GetNativeDbinfomisc();
    internal NATIVE_DBINFOMISC4 GetNativeDbinfomisc4();
}
public enum Microsoft.Isam.Esent.Interop.JET_dbstate : Enum {
    public int value__;
    public static JET_dbstate JustCreated;
    public static JET_dbstate DirtyShutdown;
    public static JET_dbstate CleanShutdown;
    public static JET_dbstate BeingConverted;
    public static JET_dbstate ForceDetach;
}
public class Microsoft.Isam.Esent.Interop.JET_ENUMCOLUMN : object {
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_wrn <err>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cEnumColumnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_ENUMCOLUMNVALUE[] <rgEnumColumnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbData>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <pvData>k__BackingField;
    public JET_COLUMNID columnid { get; internal set; }
    public JET_wrn err { get; internal set; }
    public int cEnumColumnValue { get; internal set; }
    public JET_ENUMCOLUMNVALUE[] rgEnumColumnValue { get; internal set; }
    public int cbData { get; internal set; }
    public IntPtr pvData { get; internal set; }
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnid();
    [CompilerGeneratedAttribute]
internal void set_columnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_wrn get_err();
    [CompilerGeneratedAttribute]
internal void set_err(JET_wrn value);
    [CompilerGeneratedAttribute]
public int get_cEnumColumnValue();
    [CompilerGeneratedAttribute]
internal void set_cEnumColumnValue(int value);
    [CompilerGeneratedAttribute]
public JET_ENUMCOLUMNVALUE[] get_rgEnumColumnValue();
    [CompilerGeneratedAttribute]
internal void set_rgEnumColumnValue(JET_ENUMCOLUMNVALUE[] value);
    [CompilerGeneratedAttribute]
public int get_cbData();
    [CompilerGeneratedAttribute]
internal void set_cbData(int value);
    [CompilerGeneratedAttribute]
public IntPtr get_pvData();
    [CompilerGeneratedAttribute]
internal void set_pvData(IntPtr value);
    public virtual string ToString();
    internal void SetFromNativeEnumColumn(NATIVE_ENUMCOLUMN value);
}
public class Microsoft.Isam.Esent.Interop.JET_ENUMCOLUMNID : object {
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ctagSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <rgtagSequence>k__BackingField;
    public JET_COLUMNID columnid { get; public set; }
    public int ctagSequence { get; public set; }
    public Int32[] rgtagSequence { get; public set; }
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnid();
    [CompilerGeneratedAttribute]
public void set_columnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public int get_ctagSequence();
    [CompilerGeneratedAttribute]
public void set_ctagSequence(int value);
    [CompilerGeneratedAttribute]
public Int32[] get_rgtagSequence();
    [CompilerGeneratedAttribute]
public void set_rgtagSequence(Int32[] value);
    public virtual string ToString();
    internal void CheckDataSize();
    internal NATIVE_ENUMCOLUMNID GetNativeEnumColumnid();
}
public class Microsoft.Isam.Esent.Interop.JET_ENUMCOLUMNVALUE : object {
    [CompilerGeneratedAttribute]
private int <itagSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_wrn <err>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbData>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <pvData>k__BackingField;
    public int itagSequence { get; internal set; }
    public JET_wrn err { get; internal set; }
    public int cbData { get; internal set; }
    public IntPtr pvData { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_itagSequence();
    [CompilerGeneratedAttribute]
internal void set_itagSequence(int value);
    [CompilerGeneratedAttribute]
public JET_wrn get_err();
    [CompilerGeneratedAttribute]
internal void set_err(JET_wrn value);
    [CompilerGeneratedAttribute]
public int get_cbData();
    [CompilerGeneratedAttribute]
internal void set_cbData(int value);
    [CompilerGeneratedAttribute]
public IntPtr get_pvData();
    [CompilerGeneratedAttribute]
internal void set_pvData(IntPtr value);
    public virtual string ToString();
    internal void SetFromNativeEnumColumnValue(NATIVE_ENUMCOLUMNVALUE value);
}
public enum Microsoft.Isam.Esent.Interop.JET_err : Enum {
    public int value__;
    public static JET_err Success;
    public static JET_err RfsFailure;
    public static JET_err RfsNotArmed;
    public static JET_err FileClose;
    public static JET_err OutOfThreads;
    public static JET_err TooManyIO;
    public static JET_err TaskDropped;
    public static JET_err InternalError;
    public static JET_err DisabledFunctionality;
    public static JET_err UnloadableOSFunctionality;
    public static JET_err DatabaseBufferDependenciesCorrupted;
    public static JET_err PreviousVersion;
    public static JET_err PageBoundary;
    public static JET_err KeyBoundary;
    public static JET_err BadPageLink;
    public static JET_err BadBookmark;
    public static JET_err NTSystemCallFailed;
    public static JET_err BadParentPageLink;
    public static JET_err SPAvailExtCacheOutOfSync;
    public static JET_err SPAvailExtCorrupted;
    public static JET_err SPAvailExtCacheOutOfMemory;
    public static JET_err SPOwnExtCorrupted;
    public static JET_err DbTimeCorrupted;
    public static JET_err KeyTruncated;
    public static JET_err DatabaseLeakInSpace;
    public static JET_err BadEmptyPage;
    public static JET_err BadLineCount;
    public static JET_err KeyTooBig;
    public static JET_err CannotSeparateIntrinsicLV;
    public static JET_err SeparatedLongValue;
    public static JET_err MustBeSeparateLongValue;
    public static JET_err InvalidPreread;
    public static JET_err InvalidColumnReference;
    public static JET_err StaleColumnReference;
    public static JET_err CompressionIntegrityCheckFailed;
    public static JET_err InvalidLoggedOperation;
    public static JET_err LogFileCorrupt;
    public static JET_err NoBackupDirectory;
    public static JET_err BackupDirectoryNotEmpty;
    public static JET_err BackupInProgress;
    public static JET_err RestoreInProgress;
    public static JET_err MissingPreviousLogFile;
    public static JET_err LogWriteFail;
    public static JET_err LogDisabledDueToRecoveryFailure;
    public static JET_err CannotLogDuringRecoveryRedo;
    public static JET_err LogGenerationMismatch;
    public static JET_err BadLogVersion;
    public static JET_err InvalidLogSequence;
    public static JET_err LoggingDisabled;
    public static JET_err LogBufferTooSmall;
    public static JET_err LogSequenceEnd;
    public static JET_err NoBackup;
    public static JET_err InvalidBackupSequence;
    public static JET_err BackupNotAllowedYet;
    public static JET_err DeleteBackupFileFail;
    public static JET_err MakeBackupDirectoryFail;
    public static JET_err InvalidBackup;
    public static JET_err RecoveredWithErrors;
    public static JET_err MissingLogFile;
    public static JET_err LogDiskFull;
    public static JET_err BadLogSignature;
    public static JET_err BadDbSignature;
    public static JET_err BadCheckpointSignature;
    public static JET_err CheckpointCorrupt;
    public static JET_err MissingPatchPage;
    public static JET_err BadPatchPage;
    public static JET_err RedoAbruptEnded;
    public static JET_err PatchFileMissing;
    public static JET_err DatabaseLogSetMismatch;
    public static JET_err DatabaseStreamingFileMismatch;
    public static JET_err LogFileSizeMismatch;
    public static JET_err CheckpointFileNotFound;
    public static JET_err RequiredLogFilesMissing;
    public static JET_err SoftRecoveryOnBackupDatabase;
    public static JET_err LogFileSizeMismatchDatabasesConsistent;
    public static JET_err LogSectorSizeMismatch;
    public static JET_err LogSectorSizeMismatchDatabasesConsistent;
    public static JET_err LogSequenceEndDatabasesConsistent;
    public static JET_err StreamingDataNotLogged;
    public static JET_err DatabaseDirtyShutdown;
    public static JET_err ConsistentTimeMismatch;
    public static JET_err DatabasePatchFileMismatch;
    public static JET_err EndingRestoreLogTooLow;
    public static JET_err StartingRestoreLogTooHigh;
    public static JET_err GivenLogFileHasBadSignature;
    public static JET_err GivenLogFileIsNotContiguous;
    public static JET_err MissingRestoreLogFiles;
    public static JET_err MissingFullBackup;
    public static JET_err BadBackupDatabaseSize;
    public static JET_err DatabaseAlreadyUpgraded;
    public static JET_err DatabaseIncompleteUpgrade;
    public static JET_err MissingCurrentLogFiles;
    public static JET_err DbTimeTooOld;
    public static JET_err DbTimeTooNew;
    public static JET_err MissingFileToBackup;
    public static JET_err LogTornWriteDuringHardRestore;
    public static JET_err LogTornWriteDuringHardRecovery;
    public static JET_err LogCorruptDuringHardRestore;
    public static JET_err LogCorruptDuringHardRecovery;
    public static JET_err MustDisableLoggingForDbUpgrade;
    public static JET_err BadRestoreTargetInstance;
    public static JET_err RecoveredWithoutUndo;
    public static JET_err DatabasesNotFromSameSnapshot;
    public static JET_err SoftRecoveryOnSnapshot;
    public static JET_err CommittedLogFilesMissing;
    public static JET_err SectorSizeNotSupported;
    public static JET_err RecoveredWithoutUndoDatabasesConsistent;
    public static JET_err CommittedLogFileCorrupt;
    public static JET_err LogSequenceChecksumMismatch;
    public static JET_err PageInitializedMismatch;
    public static JET_err UnicodeTranslationBufferTooSmall;
    public static JET_err UnicodeTranslationFail;
    public static JET_err UnicodeNormalizationNotSupported;
    public static JET_err UnicodeLanguageValidationFailure;
    public static JET_err ExistingLogFileHasBadSignature;
    public static JET_err ExistingLogFileIsNotContiguous;
    public static JET_err LogReadVerifyFailure;
    public static JET_err CheckpointDepthTooDeep;
    public static JET_err RestoreOfNonBackupDatabase;
    public static JET_err LogFileNotCopied;
    public static JET_err SurrogateBackupInProgress;
    public static JET_err TransactionTooLong;
    public static JET_err EngineFormatVersionNoLongerSupportedTooLow;
    public static JET_err EngineFormatVersionNotYetImplementedTooHigh;
    public static JET_err EngineFormatVersionParamTooLowForRequestedFeature;
    public static JET_err EngineFormatVersionSpecifiedTooLowForLogVersion;
    public static JET_err EngineFormatVersionSpecifiedTooLowForDatabaseVersion;
    public static JET_err BackupAbortByServer;
    public static JET_err InvalidGrbit;
    public static JET_err TermInProgress;
    public static JET_err FeatureNotAvailable;
    public static JET_err InvalidName;
    public static JET_err InvalidParameter;
    public static JET_err DatabaseFileReadOnly;
    public static JET_err InvalidDatabaseId;
    public static JET_err OutOfMemory;
    public static JET_err OutOfDatabaseSpace;
    public static JET_err OutOfCursors;
    public static JET_err OutOfBuffers;
    public static JET_err TooManyIndexes;
    public static JET_err TooManyKeys;
    public static JET_err RecordDeleted;
    public static JET_err ReadVerifyFailure;
    public static JET_err PageNotInitialized;
    public static JET_err OutOfFileHandles;
    public static JET_err DiskReadVerificationFailure;
    public static JET_err DiskIO;
    public static JET_err InvalidPath;
    public static JET_err InvalidSystemPath;
    public static JET_err InvalidLogDirectory;
    public static JET_err RecordTooBig;
    public static JET_err TooManyOpenDatabases;
    public static JET_err InvalidDatabase;
    public static JET_err NotInitialized;
    public static JET_err AlreadyInitialized;
    public static JET_err InitInProgress;
    public static JET_err FileAccessDenied;
    public static JET_err QueryNotSupported;
    public static JET_err SQLLinkNotSupported;
    public static JET_err BufferTooSmall;
    public static JET_err TooManyColumns;
    public static JET_err ContainerNotEmpty;
    public static JET_err InvalidFilename;
    public static JET_err InvalidBookmark;
    public static JET_err ColumnInUse;
    public static JET_err InvalidBufferSize;
    public static JET_err ColumnNotUpdatable;
    public static JET_err IndexInUse;
    public static JET_err LinkNotSupported;
    public static JET_err NullKeyDisallowed;
    public static JET_err NotInTransaction;
    public static JET_err MustRollback;
    public static JET_err TooManyActiveUsers;
    public static JET_err InvalidCountry;
    public static JET_err InvalidLanguageId;
    public static JET_err InvalidCodePage;
    public static JET_err InvalidLCMapStringFlags;
    public static JET_err VersionStoreEntryTooBig;
    public static JET_err VersionStoreOutOfMemoryAndCleanupTimedOut;
    public static JET_err VersionStoreOutOfMemory;
    public static JET_err CurrencyStackOutOfMemory;
    public static JET_err CannotIndex;
    public static JET_err RecordNotDeleted;
    public static JET_err TooManyMempoolEntries;
    public static JET_err OutOfObjectIDs;
    public static JET_err OutOfLongValueIDs;
    public static JET_err OutOfAutoincrementValues;
    public static JET_err OutOfDbtimeValues;
    public static JET_err OutOfSequentialIndexValues;
    public static JET_err RunningInOneInstanceMode;
    public static JET_err RunningInMultiInstanceMode;
    public static JET_err SystemParamsAlreadySet;
    public static JET_err SystemPathInUse;
    public static JET_err LogFilePathInUse;
    public static JET_err TempPathInUse;
    public static JET_err InstanceNameInUse;
    public static JET_err SystemParameterConflict;
    public static JET_err InstanceUnavailable;
    public static JET_err DatabaseUnavailable;
    public static JET_err InstanceUnavailableDueToFatalLogDiskFull;
    public static JET_err InvalidSesparamId;
    public static JET_err OutOfSessions;
    public static JET_err WriteConflict;
    public static JET_err TransTooDeep;
    public static JET_err InvalidSesid;
    public static JET_err WriteConflictPrimaryIndex;
    public static JET_err InTransaction;
    public static JET_err RollbackRequired;
    public static JET_err TransReadOnly;
    public static JET_err SessionWriteConflict;
    public static JET_err RecordTooBigForBackwardCompatibility;
    public static JET_err CannotMaterializeForwardOnlySort;
    public static JET_err SesidTableIdMismatch;
    public static JET_err InvalidInstance;
    public static JET_err DirtyShutdown;
    public static JET_err ReadPgnoVerifyFailure;
    public static JET_err ReadLostFlushVerifyFailure;
    public static JET_err FileSystemCorruption;
    public static JET_err RecoveryVerifyFailure;
    public static JET_err FilteredMoveNotSupported;
    public static JET_err MustCommitDistributedTransactionToLevel0;
    public static JET_err DistributedTransactionAlreadyPreparedToCommit;
    public static JET_err NotInDistributedTransaction;
    public static JET_err DistributedTransactionNotYetPreparedToCommit;
    public static JET_err CannotNestDistributedTransactions;
    public static JET_err DTCMissingCallback;
    public static JET_err DTCMissingCallbackOnRecovery;
    public static JET_err DTCCallbackUnexpectedError;
    public static JET_err DatabaseDuplicate;
    public static JET_err DatabaseInUse;
    public static JET_err DatabaseNotFound;
    public static JET_err DatabaseInvalidName;
    public static JET_err DatabaseInvalidPages;
    public static JET_err DatabaseCorrupted;
    public static JET_err DatabaseLocked;
    public static JET_err CannotDisableVersioning;
    public static JET_err InvalidDatabaseVersion;
    public static JET_err Database200Format;
    public static JET_err Database400Format;
    public static JET_err Database500Format;
    public static JET_err PageSizeMismatch;
    public static JET_err TooManyInstances;
    public static JET_err DatabaseSharingViolation;
    public static JET_err AttachedDatabaseMismatch;
    public static JET_err DatabaseInvalidPath;
    public static JET_err DatabaseIdInUse;
    public static JET_err ForceDetachNotAllowed;
    public static JET_err CatalogCorrupted;
    public static JET_err PartiallyAttachedDB;
    public static JET_err DatabaseSignInUse;
    public static JET_err DatabaseCorruptedNoRepair;
    public static JET_err InvalidCreateDbVersion;
    public static JET_err DatabaseIncompleteIncrementalReseed;
    public static JET_err DatabaseInvalidIncrementalReseed;
    public static JET_err DatabaseFailedIncrementalReseed;
    public static JET_err NoAttachmentsFailedIncrementalReseed;
    public static JET_err DatabaseNotReady;
    public static JET_err DatabaseAttachedForRecovery;
    public static JET_err TransactionsNotReadyDuringRecovery;
    public static JET_err TableLocked;
    public static JET_err TableDuplicate;
    public static JET_err TableInUse;
    public static JET_err ObjectNotFound;
    public static JET_err DensityInvalid;
    public static JET_err TableNotEmpty;
    public static JET_err InvalidTableId;
    public static JET_err TooManyOpenTables;
    public static JET_err IllegalOperation;
    public static JET_err TooManyOpenTablesAndCleanupTimedOut;
    public static JET_err ObjectDuplicate;
    public static JET_err InvalidObject;
    public static JET_err CannotDeleteTempTable;
    public static JET_err CannotDeleteSystemTable;
    public static JET_err CannotDeleteTemplateTable;
    public static JET_err ExclusiveTableLockRequired;
    public static JET_err FixedDDL;
    public static JET_err FixedInheritedDDL;
    public static JET_err CannotNestDDL;
    public static JET_err DDLNotInheritable;
    public static JET_err InvalidSettings;
    public static JET_err ClientRequestToStopJetService;
    public static JET_err CannotAddFixedVarColumnToDerivedTable;
    public static JET_err IndexCantBuild;
    public static JET_err IndexHasPrimary;
    public static JET_err IndexDuplicate;
    public static JET_err IndexNotFound;
    public static JET_err IndexMustStay;
    public static JET_err IndexInvalidDef;
    public static JET_err InvalidCreateIndex;
    public static JET_err TooManyOpenIndexes;
    public static JET_err MultiValuedIndexViolation;
    public static JET_err IndexBuildCorrupted;
    public static JET_err PrimaryIndexCorrupted;
    public static JET_err SecondaryIndexCorrupted;
    public static JET_err InvalidIndexId;
    public static JET_err IndexTuplesSecondaryIndexOnly;
    public static JET_err IndexTuplesTooManyColumns;
    public static JET_err IndexTuplesNonUniqueOnly;
    public static JET_err IndexTuplesTextBinaryColumnsOnly;
    public static JET_err IndexTuplesVarSegMacNotAllowed;
    public static JET_err IndexTuplesInvalidLimits;
    public static JET_err IndexTuplesCannotRetrieveFromIndex;
    public static JET_err IndexTuplesKeyTooSmall;
    public static JET_err InvalidLVChunkSize;
    public static JET_err ColumnCannotBeEncrypted;
    public static JET_err CannotIndexOnEncryptedColumn;
    public static JET_err ColumnLong;
    public static JET_err ColumnNoChunk;
    public static JET_err ColumnDoesNotFit;
    public static JET_err NullInvalid;
    public static JET_err ColumnIndexed;
    public static JET_err ColumnTooBig;
    public static JET_err ColumnNotFound;
    public static JET_err ColumnDuplicate;
    public static JET_err MultiValuedColumnMustBeTagged;
    public static JET_err ColumnRedundant;
    public static JET_err InvalidColumnType;
    public static JET_err TaggedNotNULL;
    public static JET_err NoCurrentIndex;
    public static JET_err KeyIsMade;
    public static JET_err BadColumnId;
    public static JET_err BadItagSequence;
    public static JET_err ColumnInRelationship;
    public static JET_err CannotBeTagged;
    public static JET_err DefaultValueTooBig;
    public static JET_err MultiValuedDuplicate;
    public static JET_err LVCorrupted;
    public static JET_err MultiValuedDuplicateAfterTruncation;
    public static JET_err DerivedColumnCorruption;
    public static JET_err InvalidPlaceholderColumn;
    public static JET_err ColumnCannotBeCompressed;
    public static JET_err ColumnNoEncryptionKey;
    public static JET_err RecordNotFound;
    public static JET_err RecordNoCopy;
    public static JET_err NoCurrentRecord;
    public static JET_err RecordPrimaryChanged;
    public static JET_err KeyDuplicate;
    public static JET_err AlreadyPrepared;
    public static JET_err KeyNotMade;
    public static JET_err UpdateNotPrepared;
    public static JET_err DataHasChanged;
    public static JET_err LanguageNotSupported;
    public static JET_err DecompressionFailed;
    public static JET_err UpdateMustVersion;
    public static JET_err DecryptionFailed;
    public static JET_err EncryptionBadItag;
    public static JET_err TooManySorts;
    public static JET_err InvalidOnSort;
    public static JET_err TempFileOpenError;
    public static JET_err TooManyAttachedDatabases;
    public static JET_err DiskFull;
    public static JET_err PermissionDenied;
    public static JET_err FileNotFound;
    public static JET_err FileInvalidType;
    public static JET_err FileAlreadyExists;
    public static JET_err AfterInitialization;
    public static JET_err LogCorrupted;
    public static JET_err InvalidOperation;
    public static JET_err AccessDenied;
    public static JET_err TooManySplits;
    public static JET_err SessionSharingViolation;
    public static JET_err EntryPointNotFound;
    public static JET_err SessionContextAlreadySet;
    public static JET_err SessionContextNotSetByThisThread;
    public static JET_err SessionInUse;
    public static JET_err RecordFormatConversionFailed;
    public static JET_err OneDatabasePerSession;
    public static JET_err RollbackError;
    public static JET_err FlushMapVersionUnsupported;
    public static JET_err FlushMapDatabaseMismatch;
    public static JET_err FlushMapUnrecoverable;
    public static JET_err DatabaseAlreadyRunningMaintenance;
    public static JET_err CallbackFailed;
    public static JET_err CallbackNotResolved;
    public static JET_err SpaceHintsInvalid;
    public static JET_err OSSnapshotInvalidSequence;
    public static JET_err OSSnapshotTimeOut;
    public static JET_err OSSnapshotNotAllowed;
    public static JET_err OSSnapshotInvalidSnapId;
    public static JET_err TooManyTestInjections;
    public static JET_err TestInjectionNotSupported;
    public static JET_err InvalidLogDataSequence;
    public static JET_err LSCallbackNotSpecified;
    public static JET_err LSAlreadySet;
    public static JET_err LSNotSet;
    public static JET_err FileIOSparse;
    public static JET_err FileIOBeyondEOF;
    public static JET_err FileIOAbort;
    public static JET_err FileIORetry;
    public static JET_err FileIOFail;
    public static JET_err FileCompressed;
}
public enum Microsoft.Isam.Esent.Interop.JET_ExceptionAction : Enum {
    public int value__;
    public static JET_ExceptionAction MsgBox;
    public static JET_ExceptionAction None;
}
public enum Microsoft.Isam.Esent.Interop.JET_filetype : Enum {
    public int value__;
    public static JET_filetype Unknown;
    public static JET_filetype Database;
    public static JET_filetype Log;
    public static JET_filetype Checkpoint;
    public static JET_filetype TempDatabase;
}
public class Microsoft.Isam.Esent.Interop.JET_HANDLE : ValueType {
    internal IntPtr Value;
    public static JET_HANDLE Nil { get; }
    public bool IsInvalid { get; }
    [DebuggerStepThroughAttribute]
public static JET_HANDLE get_Nil();
    public bool get_IsInvalid();
    public static bool op_Equality(JET_HANDLE lhs, JET_HANDLE rhs);
    public static bool op_Inequality(JET_HANDLE lhs, JET_HANDLE rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_HANDLE other);
}
public enum Microsoft.Isam.Esent.Interop.JET_IdxInfo : Enum {
    public int value__;
    public static JET_IdxInfo Default;
    public static JET_IdxInfo List;
    [ObsoleteAttribute("This value is not used, and is provided for completeness to match the published header in the SDK.")]
public static JET_IdxInfo SysTabCursor;
    [ObsoleteAttribute("This value is not used, and is provided for completeness to match the published header in the SDK.")]
public static JET_IdxInfo OLC;
    [ObsoleteAttribute("This value is not used, and is provided for completeness to match the published header in the SDK.")]
public static JET_IdxInfo ResetOLC;
    public static JET_IdxInfo SpaceAlloc;
    public static JET_IdxInfo LCID;
    [ObsoleteAttribute("Use JET_IdxInfo.LCID")]
public static JET_IdxInfo Langid;
    public static JET_IdxInfo Count;
    public static JET_IdxInfo VarSegMac;
    public static JET_IdxInfo IndexId;
    public static JET_IdxInfo KeyMost;
}
public class Microsoft.Isam.Esent.Interop.JET_INDEXCREATE : object {
    private string name;
    private string key;
    private int keyLength;
    private CreateIndexGrbit options;
    private int density;
    private JET_UNICODEINDEX unicodeOptions;
    private int maxSegmentLength;
    private JET_CONDITIONALCOLUMN[] conditionalColumns;
    private int numConditionalColumns;
    private JET_err errorCode;
    private int maximumKeyLength;
    private JET_SPACEHINTS spaceHints;
    public JET_err err { get; public set; }
    public string szIndexName { get; public set; }
    public string szKey { get; public set; }
    public int cbKey { get; public set; }
    public CreateIndexGrbit grbit { get; public set; }
    public int ulDensity { get; public set; }
    public JET_UNICODEINDEX pidxUnicode { get; public set; }
    public int cbVarSegMac { get; public set; }
    public JET_CONDITIONALCOLUMN[] rgconditionalcolumn { get; public set; }
    public int cConditionalColumn { get; public set; }
    public int cbKeyMost { get; public set; }
    public JET_SPACEHINTS pSpaceHints { get; public set; }
    [DebuggerStepThroughAttribute]
public JET_err get_err();
    public void set_err(JET_err value);
    [DebuggerStepThroughAttribute]
public string get_szIndexName();
    public void set_szIndexName(string value);
    [DebuggerStepThroughAttribute]
public string get_szKey();
    public void set_szKey(string value);
    [DebuggerStepThroughAttribute]
public int get_cbKey();
    public void set_cbKey(int value);
    [DebuggerStepThroughAttribute]
public CreateIndexGrbit get_grbit();
    public void set_grbit(CreateIndexGrbit value);
    [DebuggerStepThroughAttribute]
public int get_ulDensity();
    public void set_ulDensity(int value);
    [DebuggerStepThroughAttribute]
public JET_UNICODEINDEX get_pidxUnicode();
    public void set_pidxUnicode(JET_UNICODEINDEX value);
    [DebuggerStepThroughAttribute]
public int get_cbVarSegMac();
    public void set_cbVarSegMac(int value);
    [DebuggerStepThroughAttribute]
public JET_CONDITIONALCOLUMN[] get_rgconditionalcolumn();
    public void set_rgconditionalcolumn(JET_CONDITIONALCOLUMN[] value);
    [DebuggerStepThroughAttribute]
public int get_cConditionalColumn();
    public void set_cConditionalColumn(int value);
    [DebuggerStepThroughAttribute]
public int get_cbKeyMost();
    public void set_cbKeyMost(int value);
    [DebuggerStepThroughAttribute]
public JET_SPACEHINTS get_pSpaceHints();
    public void set_pSpaceHints(JET_SPACEHINTS value);
    public sealed virtual JET_INDEXCREATE DeepClone();
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_INDEXCREATE other);
    internal void CheckMembersAreValid();
    internal NATIVE_INDEXCREATE GetNativeIndexcreate();
    internal NATIVE_INDEXCREATE1 GetNativeIndexcreate1();
    internal NATIVE_INDEXCREATE2 GetNativeIndexcreate2();
    internal void SetFromNativeIndexCreate(NATIVE_INDEXCREATE2 value);
    internal void SetFromNativeIndexCreate(NATIVE_INDEXCREATE1 value);
    internal void SetFromNativeIndexCreate(NATIVE_INDEXCREATE value);
    private bool IsUnicodeIndexEqual(JET_INDEXCREATE other);
    private bool AreConditionalColumnsEqual(JET_INDEXCREATE other);
    internal NATIVE_INDEXCREATE3 GetNativeIndexcreate3();
    internal void SetFromNativeIndexCreate(NATIVE_INDEXCREATE3 value);
}
public class Microsoft.Isam.Esent.Interop.JET_INDEXID : ValueType {
    internal UInt32 CbStruct;
    internal IntPtr IndexId1;
    internal UInt32 IndexId2;
    internal UInt32 IndexId3;
    private static UInt32 TheSizeOfIndexId;
    internal static UInt32 SizeOfIndexId { get; }
    private static JET_INDEXID();
    [DebuggerStepThroughAttribute]
internal static UInt32 get_SizeOfIndexId();
    public static bool op_Equality(JET_INDEXID lhs, JET_INDEXID rhs);
    public static bool op_Inequality(JET_INDEXID lhs, JET_INDEXID rhs);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_INDEXID other);
}
public class Microsoft.Isam.Esent.Interop.JET_INDEXLIST : object {
    [CompilerGeneratedAttribute]
private JET_TABLEID <tableid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidindexname>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidgrbitIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcKey>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcPage>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidiColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcolumnid>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcoltyp>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidLangid>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidCp>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidgrbitColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcolumnname>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidLCMapFlags>k__BackingField;
    public JET_TABLEID tableid { get; internal set; }
    public int cRecord { get; internal set; }
    public JET_COLUMNID columnidindexname { get; internal set; }
    public JET_COLUMNID columnidgrbitIndex { get; internal set; }
    public JET_COLUMNID columnidcKey { get; internal set; }
    public JET_COLUMNID columnidcEntry { get; internal set; }
    public JET_COLUMNID columnidcPage { get; internal set; }
    public JET_COLUMNID columnidcColumn { get; internal set; }
    public JET_COLUMNID columnidiColumn { get; internal set; }
    public JET_COLUMNID columnidcolumnid { get; internal set; }
    public JET_COLUMNID columnidcoltyp { get; internal set; }
    public JET_COLUMNID columnidLangid { get; internal set; }
    public JET_COLUMNID columnidCp { get; internal set; }
    public JET_COLUMNID columnidgrbitColumn { get; internal set; }
    public JET_COLUMNID columnidcolumnname { get; internal set; }
    public JET_COLUMNID columnidLCMapFlags { get; internal set; }
    [CompilerGeneratedAttribute]
public JET_TABLEID get_tableid();
    [CompilerGeneratedAttribute]
internal void set_tableid(JET_TABLEID value);
    [CompilerGeneratedAttribute]
public int get_cRecord();
    [CompilerGeneratedAttribute]
internal void set_cRecord(int value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidindexname();
    [CompilerGeneratedAttribute]
internal void set_columnidindexname(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidgrbitIndex();
    [CompilerGeneratedAttribute]
internal void set_columnidgrbitIndex(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcKey();
    [CompilerGeneratedAttribute]
internal void set_columnidcKey(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcEntry();
    [CompilerGeneratedAttribute]
internal void set_columnidcEntry(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcPage();
    [CompilerGeneratedAttribute]
internal void set_columnidcPage(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcColumn();
    [CompilerGeneratedAttribute]
internal void set_columnidcColumn(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidiColumn();
    [CompilerGeneratedAttribute]
internal void set_columnidiColumn(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcolumnid();
    [CompilerGeneratedAttribute]
internal void set_columnidcolumnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcoltyp();
    [CompilerGeneratedAttribute]
internal void set_columnidcoltyp(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidLangid();
    [CompilerGeneratedAttribute]
internal void set_columnidLangid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidCp();
    [CompilerGeneratedAttribute]
internal void set_columnidCp(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidgrbitColumn();
    [CompilerGeneratedAttribute]
internal void set_columnidgrbitColumn(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcolumnname();
    [CompilerGeneratedAttribute]
internal void set_columnidcolumnname(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidLCMapFlags();
    [CompilerGeneratedAttribute]
internal void set_columnidLCMapFlags(JET_COLUMNID value);
    public virtual string ToString();
    internal void SetFromNativeIndexlist(NATIVE_INDEXLIST value);
}
public class Microsoft.Isam.Esent.Interop.JET_INDEXRANGE : object {
    [CompilerGeneratedAttribute]
private JET_TABLEID <tableid>k__BackingField;
    [CompilerGeneratedAttribute]
private IndexRangeGrbit <grbit>k__BackingField;
    public JET_TABLEID tableid { get; public set; }
    public IndexRangeGrbit grbit { get; public set; }
    [CompilerGeneratedAttribute]
public JET_TABLEID get_tableid();
    [CompilerGeneratedAttribute]
public void set_tableid(JET_TABLEID value);
    [CompilerGeneratedAttribute]
public IndexRangeGrbit get_grbit();
    [CompilerGeneratedAttribute]
public void set_grbit(IndexRangeGrbit value);
    public sealed virtual JET_INDEXRANGE DeepClone();
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_INDEXRANGE other);
    internal NATIVE_INDEXRANGE GetNativeIndexRange();
}
public class Microsoft.Isam.Esent.Interop.JET_INSTANCE : ValueType {
    internal IntPtr Value;
    public static JET_INSTANCE Nil { get; }
    public bool IsInvalid { get; }
    [DebuggerStepThroughAttribute]
public static JET_INSTANCE get_Nil();
    public bool get_IsInvalid();
    public static bool op_Equality(JET_INSTANCE lhs, JET_INSTANCE rhs);
    public static bool op_Inequality(JET_INSTANCE lhs, JET_INSTANCE rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_INSTANCE other);
}
public class Microsoft.Isam.Esent.Interop.JET_INSTANCE_INFO : object {
    private ReadOnlyCollection`1<string> databases;
    [CompilerGeneratedAttribute]
private JET_INSTANCE <hInstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <szInstanceName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cDatabases>k__BackingField;
    public JET_INSTANCE hInstanceId { get; private set; }
    public string szInstanceName { get; private set; }
    public int cDatabases { get; private set; }
    public IList`1<string> szDatabaseFileName { get; }
    internal JET_INSTANCE_INFO(JET_INSTANCE instance, string instanceName, String[] databases);
    [CompilerGeneratedAttribute]
public JET_INSTANCE get_hInstanceId();
    [CompilerGeneratedAttribute]
private void set_hInstanceId(JET_INSTANCE value);
    [CompilerGeneratedAttribute]
public string get_szInstanceName();
    [CompilerGeneratedAttribute]
private void set_szInstanceName(string value);
    [CompilerGeneratedAttribute]
public int get_cDatabases();
    [CompilerGeneratedAttribute]
private void set_cDatabases(int value);
    public IList`1<string> get_szDatabaseFileName();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_INSTANCE_INFO other);
    internal void SetFromNativeAscii(NATIVE_INSTANCE_INFO native);
    internal void SetFromNativeUnicode(NATIVE_INSTANCE_INFO native);
}
public class Microsoft.Isam.Esent.Interop.JET_LGPOS : ValueType {
    private ushort offset;
    private ushort sector;
    private int generation;
    public int ib { get; public set; }
    public int isec { get; public set; }
    public int lGeneration { get; public set; }
    public bool HasValue { get; }
    [DebuggerStepThroughAttribute]
public int get_ib();
    public void set_ib(int value);
    [DebuggerStepThroughAttribute]
public int get_isec();
    public void set_isec(int value);
    [DebuggerStepThroughAttribute]
public int get_lGeneration();
    public void set_lGeneration(int value);
    public sealed virtual bool get_HasValue();
    public static bool op_Equality(JET_LGPOS lhs, JET_LGPOS rhs);
    public static bool op_Inequality(JET_LGPOS lhs, JET_LGPOS rhs);
    public static bool op_LessThan(JET_LGPOS lhs, JET_LGPOS rhs);
    public static bool op_GreaterThan(JET_LGPOS lhs, JET_LGPOS rhs);
    public static bool op_LessThanOrEqual(JET_LGPOS lhs, JET_LGPOS rhs);
    public static bool op_GreaterThanOrEqual(JET_LGPOS lhs, JET_LGPOS rhs);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_LGPOS other);
    public sealed virtual int CompareTo(JET_LGPOS other);
}
public class Microsoft.Isam.Esent.Interop.JET_LOGTIME : ValueType {
    private byte bSeconds;
    private byte bMinutes;
    private byte bHours;
    private byte bDays;
    private byte bMonth;
    private byte bYear;
    private byte bFiller1;
    private byte bFiller2;
    public bool HasValue { get; }
    public bool fTimeIsUTC { get; }
    internal JET_LOGTIME(DateTime time);
    public sealed virtual bool get_HasValue();
    public bool get_fTimeIsUTC();
    public static bool op_Equality(JET_LOGTIME lhs, JET_LOGTIME rhs);
    public static bool op_Inequality(JET_LOGTIME lhs, JET_LOGTIME rhs);
    public sealed virtual Nullable`1<DateTime> ToDateTime();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_LOGTIME other);
}
public class Microsoft.Isam.Esent.Interop.JET_LS : ValueType {
    public static JET_LS Nil;
    [CompilerGeneratedAttribute]
private IntPtr <Value>k__BackingField;
    public bool IsInvalid { get; }
    public IntPtr Value { get; public set; }
    private static JET_LS();
    public bool get_IsInvalid();
    [CompilerGeneratedAttribute]
public IntPtr get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(IntPtr value);
    public static bool op_Equality(JET_LS lhs, JET_LS rhs);
    public static bool op_Inequality(JET_LS lhs, JET_LS rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_LS other);
}
public enum Microsoft.Isam.Esent.Interop.JET_Move : Enum {
    public int value__;
    public static JET_Move First;
    public static JET_Move Previous;
    public static JET_Move Next;
    public static JET_Move Last;
}
public class Microsoft.Isam.Esent.Interop.JET_OBJECTINFO : object {
    [CompilerGeneratedAttribute]
private JET_objtyp <objtyp>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectInfoGrbit <grbit>k__BackingField;
    [CompilerGeneratedAttribute]
private ObjectInfoFlags <flags>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cPage>k__BackingField;
    public JET_objtyp objtyp { get; private set; }
    public ObjectInfoGrbit grbit { get; private set; }
    public ObjectInfoFlags flags { get; private set; }
    public int cRecord { get; private set; }
    public int cPage { get; private set; }
    [CompilerGeneratedAttribute]
public JET_objtyp get_objtyp();
    [CompilerGeneratedAttribute]
private void set_objtyp(JET_objtyp value);
    [CompilerGeneratedAttribute]
public ObjectInfoGrbit get_grbit();
    [CompilerGeneratedAttribute]
private void set_grbit(ObjectInfoGrbit value);
    [CompilerGeneratedAttribute]
public ObjectInfoFlags get_flags();
    [CompilerGeneratedAttribute]
private void set_flags(ObjectInfoFlags value);
    [CompilerGeneratedAttribute]
public int get_cRecord();
    [CompilerGeneratedAttribute]
private void set_cRecord(int value);
    [CompilerGeneratedAttribute]
public int get_cPage();
    [CompilerGeneratedAttribute]
private void set_cPage(int value);
    public virtual string ToString();
    internal void SetFromNativeObjectinfo(NATIVE_OBJECTINFO& value);
}
public class Microsoft.Isam.Esent.Interop.JET_OBJECTLIST : object {
    [CompilerGeneratedAttribute]
private JET_TABLEID <tableid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidobjectname>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidobjtyp>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidgrbit>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidflags>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcRecord>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcontainername>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidcPage>k__BackingField;
    public JET_TABLEID tableid { get; internal set; }
    public int cRecord { get; internal set; }
    public JET_COLUMNID columnidobjectname { get; internal set; }
    public JET_COLUMNID columnidobjtyp { get; internal set; }
    public JET_COLUMNID columnidgrbit { get; internal set; }
    public JET_COLUMNID columnidflags { get; internal set; }
    public JET_COLUMNID columnidcRecord { get; internal set; }
    public JET_COLUMNID columnidcontainername { get; internal set; }
    public JET_COLUMNID columnidcPage { get; internal set; }
    [CompilerGeneratedAttribute]
public JET_TABLEID get_tableid();
    [CompilerGeneratedAttribute]
internal void set_tableid(JET_TABLEID value);
    [CompilerGeneratedAttribute]
public int get_cRecord();
    [CompilerGeneratedAttribute]
internal void set_cRecord(int value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidobjectname();
    [CompilerGeneratedAttribute]
internal void set_columnidobjectname(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidobjtyp();
    [CompilerGeneratedAttribute]
internal void set_columnidobjtyp(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidgrbit();
    [CompilerGeneratedAttribute]
internal void set_columnidgrbit(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidflags();
    [CompilerGeneratedAttribute]
internal void set_columnidflags(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcRecord();
    [CompilerGeneratedAttribute]
internal void set_columnidcRecord(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcontainername();
    [CompilerGeneratedAttribute]
internal void set_columnidcontainername(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidcPage();
    [CompilerGeneratedAttribute]
internal void set_columnidcPage(JET_COLUMNID value);
    public virtual string ToString();
    internal void SetFromNativeObjectlist(NATIVE_OBJECTLIST value);
}
internal enum Microsoft.Isam.Esent.Interop.JET_ObjInfo : Enum {
    public int value__;
    public static JET_ObjInfo ListNoStats;
    public static JET_ObjInfo NoStats;
}
public enum Microsoft.Isam.Esent.Interop.JET_objtyp : Enum {
    public int value__;
    public static JET_objtyp Nil;
    public static JET_objtyp Table;
}
public class Microsoft.Isam.Esent.Interop.JET_OSSNAPID : ValueType {
    internal IntPtr Value;
    public static JET_OSSNAPID Nil { get; }
    public bool IsInvalid { get; }
    [DebuggerStepThroughAttribute]
public static JET_OSSNAPID get_Nil();
    public bool get_IsInvalid();
    public static bool op_Equality(JET_OSSNAPID lhs, JET_OSSNAPID rhs);
    public static bool op_Inequality(JET_OSSNAPID lhs, JET_OSSNAPID rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_OSSNAPID other);
}
public enum Microsoft.Isam.Esent.Interop.JET_param : Enum {
    public int value__;
    public static JET_param SystemPath;
    public static JET_param TempPath;
    public static JET_param LogFilePath;
    public static JET_param BaseName;
    public static JET_param EventSource;
    public static JET_param MaxSessions;
    public static JET_param MaxOpenTables;
    public static JET_param MaxCursors;
    public static JET_param MaxVerPages;
    public static JET_param MaxTemporaryTables;
    public static JET_param LogFileSize;
    public static JET_param LogBuffers;
    public static JET_param CircularLog;
    public static JET_param DbExtensionSize;
    public static JET_param PageTempDBMin;
    public static JET_param CacheSizeMax;
    public static JET_param CheckpointDepthMax;
    public static JET_param LrukCorrInterval;
    public static JET_param LrukTimeout;
    public static JET_param OutstandingIOMax;
    public static JET_param StartFlushThreshold;
    public static JET_param StopFlushThreshold;
    public static JET_param Recovery;
    public static JET_param EnableOnlineDefrag;
    public static JET_param CacheSize;
    public static JET_param EnableIndexChecking;
    public static JET_param EventSourceKey;
    public static JET_param NoInformationEvent;
    public static JET_param EventLoggingLevel;
    public static JET_param DeleteOutOfRangeLogs;
    public static JET_param EnableIndexCleanup;
    public static JET_param CacheSizeMin;
    public static JET_param PreferredVerPages;
    public static JET_param DatabasePageSize;
    public static JET_param ErrorToString;
    public static JET_param RuntimeCallback;
    public static JET_param CleanupMismatchedLogFiles;
    public static JET_param ExceptionAction;
    public static JET_param CreatePathIfNotExist;
    public static JET_param OneDatabasePerSession;
    public static JET_param MaxInstances;
    public static JET_param VersionStoreTaskQueueMax;
    public static JET_param DisablePerfmon;
}
[CLSCompliantAttribute("False")]
public class Microsoft.Isam.Esent.Interop.JET_PFNREALLOC : MulticastDelegate {
    public JET_PFNREALLOC(object object, IntPtr method);
    public virtual IntPtr Invoke(IntPtr context, IntPtr memory, UInt32 requestedSize);
    public virtual IAsyncResult BeginInvoke(IntPtr context, IntPtr memory, UInt32 requestedSize, AsyncCallback callback, object object);
    public virtual IntPtr EndInvoke(IAsyncResult result);
}
public class Microsoft.Isam.Esent.Interop.JET_PFNSTATUS : MulticastDelegate {
    public JET_PFNSTATUS(object object, IntPtr method);
    public virtual JET_err Invoke(JET_SESID sesid, JET_SNP snp, JET_SNT snt, object data);
    public virtual IAsyncResult BeginInvoke(JET_SESID sesid, JET_SNP snp, JET_SNT snt, object data, AsyncCallback callback, object object);
    public virtual JET_err EndInvoke(IAsyncResult result);
}
public enum Microsoft.Isam.Esent.Interop.JET_prep : Enum {
    public int value__;
    public static JET_prep Insert;
    public static JET_prep Replace;
    public static JET_prep Cancel;
    public static JET_prep ReplaceNoLock;
    public static JET_prep InsertCopy;
    public static JET_prep InsertCopyDeleteOriginal;
}
public class Microsoft.Isam.Esent.Interop.JET_RECORDLIST : object {
    [CompilerGeneratedAttribute]
private JET_TABLEID <tableid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidBookmark>k__BackingField;
    public JET_TABLEID tableid { get; internal set; }
    public int cRecords { get; internal set; }
    public JET_COLUMNID columnidBookmark { get; internal set; }
    [CompilerGeneratedAttribute]
public JET_TABLEID get_tableid();
    [CompilerGeneratedAttribute]
internal void set_tableid(JET_TABLEID value);
    [CompilerGeneratedAttribute]
public int get_cRecords();
    [CompilerGeneratedAttribute]
internal void set_cRecords(int value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidBookmark();
    [CompilerGeneratedAttribute]
internal void set_columnidBookmark(JET_COLUMNID value);
    public virtual string ToString();
    internal void SetFromNativeRecordlist(NATIVE_RECORDLIST value);
}
public class Microsoft.Isam.Esent.Interop.JET_RECPOS : object {
    private long entriesBeforeKey;
    private long totalEntries;
    public long centriesLT { get; public set; }
    public long centriesTotal { get; public set; }
    [DebuggerStepThroughAttribute]
public long get_centriesLT();
    public void set_centriesLT(long value);
    [DebuggerStepThroughAttribute]
public long get_centriesTotal();
    public void set_centriesTotal(long value);
    public sealed virtual JET_RECPOS DeepClone();
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_RECPOS other);
    internal NATIVE_RECPOS GetNativeRecpos();
    internal void SetFromNativeRecpos(NATIVE_RECPOS value);
}
public class Microsoft.Isam.Esent.Interop.JET_RETINFO : object {
    [CompilerGeneratedAttribute]
private int <ibLongValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <itagSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidNextTagged>k__BackingField;
    public int ibLongValue { get; public set; }
    public int itagSequence { get; public set; }
    public JET_COLUMNID columnidNextTagged { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_ibLongValue();
    [CompilerGeneratedAttribute]
public void set_ibLongValue(int value);
    [CompilerGeneratedAttribute]
public int get_itagSequence();
    [CompilerGeneratedAttribute]
public void set_itagSequence(int value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidNextTagged();
    [CompilerGeneratedAttribute]
internal void set_columnidNextTagged(JET_COLUMNID value);
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_RETINFO other);
    public sealed virtual JET_RETINFO DeepClone();
    internal NATIVE_RETINFO GetNativeRetinfo();
    internal void SetFromNativeRetinfo(NATIVE_RETINFO value);
}
public class Microsoft.Isam.Esent.Interop.JET_RETRIEVECOLUMN : object {
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <pvData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ibData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbActual>k__BackingField;
    [CompilerGeneratedAttribute]
private RetrieveColumnGrbit <grbit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ibLongValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <itagSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnidNextTagged>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_wrn <err>k__BackingField;
    public JET_COLUMNID columnid { get; public set; }
    public Byte[] pvData { get; public set; }
    public int ibData { get; public set; }
    public int cbData { get; public set; }
    public int cbActual { get; private set; }
    public RetrieveColumnGrbit grbit { get; public set; }
    public int ibLongValue { get; public set; }
    public int itagSequence { get; public set; }
    public JET_COLUMNID columnidNextTagged { get; private set; }
    public JET_wrn err { get; private set; }
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnid();
    [CompilerGeneratedAttribute]
public void set_columnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public Byte[] get_pvData();
    [CompilerGeneratedAttribute]
public void set_pvData(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_ibData();
    [CompilerGeneratedAttribute]
public void set_ibData(int value);
    [CompilerGeneratedAttribute]
public int get_cbData();
    [CompilerGeneratedAttribute]
public void set_cbData(int value);
    [CompilerGeneratedAttribute]
public int get_cbActual();
    [CompilerGeneratedAttribute]
private void set_cbActual(int value);
    [CompilerGeneratedAttribute]
public RetrieveColumnGrbit get_grbit();
    [CompilerGeneratedAttribute]
public void set_grbit(RetrieveColumnGrbit value);
    [CompilerGeneratedAttribute]
public int get_ibLongValue();
    [CompilerGeneratedAttribute]
public void set_ibLongValue(int value);
    [CompilerGeneratedAttribute]
public int get_itagSequence();
    [CompilerGeneratedAttribute]
public void set_itagSequence(int value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnidNextTagged();
    [CompilerGeneratedAttribute]
private void set_columnidNextTagged(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JET_wrn get_err();
    [CompilerGeneratedAttribute]
private void set_err(JET_wrn value);
    public virtual string ToString();
    internal void CheckDataSize();
    internal void GetNativeRetrievecolumn(NATIVE_RETRIEVECOLUMN& retrievecolumn);
    internal void UpdateFromNativeRetrievecolumn(NATIVE_RETRIEVECOLUMN& native);
}
public class Microsoft.Isam.Esent.Interop.JET_RSTINFO : object {
    [CompilerGeneratedAttribute]
private JET_RSTMAP[] <rgrstmap>k__BackingField;
    [CompilerGeneratedAttribute]
private int <crstmap>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_LGPOS <lgposStop>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_LOGTIME <logtimeStop>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_PFNSTATUS <pfnStatus>k__BackingField;
    public JET_RSTMAP[] rgrstmap { get; public set; }
    public int crstmap { get; public set; }
    public JET_LGPOS lgposStop { get; public set; }
    public JET_LOGTIME logtimeStop { get; public set; }
    public JET_PFNSTATUS pfnStatus { get; public set; }
    [CompilerGeneratedAttribute]
public JET_RSTMAP[] get_rgrstmap();
    [CompilerGeneratedAttribute]
public void set_rgrstmap(JET_RSTMAP[] value);
    [CompilerGeneratedAttribute]
public int get_crstmap();
    [CompilerGeneratedAttribute]
public void set_crstmap(int value);
    [CompilerGeneratedAttribute]
public JET_LGPOS get_lgposStop();
    [CompilerGeneratedAttribute]
public void set_lgposStop(JET_LGPOS value);
    [CompilerGeneratedAttribute]
public JET_LOGTIME get_logtimeStop();
    [CompilerGeneratedAttribute]
public void set_logtimeStop(JET_LOGTIME value);
    [CompilerGeneratedAttribute]
public JET_PFNSTATUS get_pfnStatus();
    [CompilerGeneratedAttribute]
public void set_pfnStatus(JET_PFNSTATUS value);
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_RSTINFO other);
    public sealed virtual JET_RSTINFO DeepClone();
    internal void CheckMembersAreValid();
    internal NATIVE_RSTINFO GetNativeRstinfo();
}
public class Microsoft.Isam.Esent.Interop.JET_RSTMAP : object {
    private string databaseName;
    private string newDatabaseName;
    public string szDatabaseName { get; public set; }
    public string szNewDatabaseName { get; public set; }
    [DebuggerStepThroughAttribute]
public string get_szDatabaseName();
    public void set_szDatabaseName(string value);
    [DebuggerStepThroughAttribute]
public string get_szNewDatabaseName();
    public void set_szNewDatabaseName(string value);
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_RSTMAP other);
    public sealed virtual JET_RSTMAP DeepClone();
    internal NATIVE_RSTMAP GetNativeRstmap();
}
public class Microsoft.Isam.Esent.Interop.JET_SESID : ValueType {
    internal IntPtr Value;
    public static JET_SESID Nil { get; }
    public bool IsInvalid { get; }
    [DebuggerStepThroughAttribute]
public static JET_SESID get_Nil();
    public bool get_IsInvalid();
    public static bool op_Equality(JET_SESID lhs, JET_SESID rhs);
    public static bool op_Inequality(JET_SESID lhs, JET_SESID rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_SESID other);
}
public class Microsoft.Isam.Esent.Interop.JET_SETCOLUMN : object {
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <pvData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ibData>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbData>k__BackingField;
    [CompilerGeneratedAttribute]
private SetColumnGrbit <grbit>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ibLongValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <itagSequence>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_wrn <err>k__BackingField;
    public JET_COLUMNID columnid { get; public set; }
    public Byte[] pvData { get; public set; }
    public int ibData { get; public set; }
    public int cbData { get; public set; }
    public SetColumnGrbit grbit { get; public set; }
    public int ibLongValue { get; public set; }
    public int itagSequence { get; public set; }
    public JET_wrn err { get; internal set; }
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnid();
    [CompilerGeneratedAttribute]
public void set_columnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public Byte[] get_pvData();
    [CompilerGeneratedAttribute]
public void set_pvData(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_ibData();
    [CompilerGeneratedAttribute]
public void set_ibData(int value);
    [CompilerGeneratedAttribute]
public int get_cbData();
    [CompilerGeneratedAttribute]
public void set_cbData(int value);
    [CompilerGeneratedAttribute]
public SetColumnGrbit get_grbit();
    [CompilerGeneratedAttribute]
public void set_grbit(SetColumnGrbit value);
    [CompilerGeneratedAttribute]
public int get_ibLongValue();
    [CompilerGeneratedAttribute]
public void set_ibLongValue(int value);
    [CompilerGeneratedAttribute]
public int get_itagSequence();
    [CompilerGeneratedAttribute]
public void set_itagSequence(int value);
    [CompilerGeneratedAttribute]
public JET_wrn get_err();
    [CompilerGeneratedAttribute]
internal void set_err(JET_wrn value);
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_SETCOLUMN other);
    public sealed virtual JET_SETCOLUMN DeepClone();
    internal void CheckDataSize();
    internal NATIVE_SETCOLUMN GetNativeSetcolumn();
}
public class Microsoft.Isam.Esent.Interop.JET_SETINFO : object {
    private int longValueOffset;
    private int itag;
    public int ibLongValue { get; public set; }
    public int itagSequence { get; public set; }
    public int get_ibLongValue();
    public void set_ibLongValue(int value);
    public int get_itagSequence();
    public void set_itagSequence(int value);
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_SETINFO other);
    public sealed virtual JET_SETINFO DeepClone();
    internal NATIVE_SETINFO GetNativeSetinfo();
}
public class Microsoft.Isam.Esent.Interop.JET_SIGNATURE : ValueType {
    internal UInt32 ulRandom;
    internal JET_LOGTIME logtimeCreate;
    private string szComputerName;
    public JET_SIGNATURE(Byte[] bytes);
    internal JET_SIGNATURE(int random, Nullable`1<DateTime> time, string computerName);
    internal JET_SIGNATURE(NATIVE_SIGNATURE native);
    public static bool op_Equality(JET_SIGNATURE lhs, JET_SIGNATURE rhs);
    public static bool op_Inequality(JET_SIGNATURE lhs, JET_SIGNATURE rhs);
    public virtual string ToString();
    public Byte[] ToBytes();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_SIGNATURE other);
    internal NATIVE_SIGNATURE GetNativeSignature();
}
public enum Microsoft.Isam.Esent.Interop.JET_SNP : Enum {
    public int value__;
    public static JET_SNP Repair;
    public static JET_SNP Compact;
    public static JET_SNP Restore;
    public static JET_SNP Backup;
    public static JET_SNP Scrub;
    public static JET_SNP UpgradeRecordFormat;
}
public class Microsoft.Isam.Esent.Interop.JET_SNPROG : object {
    private int completedUnits;
    private int totalUnits;
    public int cunitDone { get; internal set; }
    public int cunitTotal { get; internal set; }
    [DebuggerStepThroughAttribute]
public int get_cunitDone();
    internal void set_cunitDone(int value);
    [DebuggerStepThroughAttribute]
public int get_cunitTotal();
    internal void set_cunitTotal(int value);
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_SNPROG other);
    internal void SetFromNative(NATIVE_SNPROG native);
}
public enum Microsoft.Isam.Esent.Interop.JET_SNT : Enum {
    public int value__;
    public static JET_SNT Begin;
    public static JET_SNT Progress;
    public static JET_SNT Complete;
    public static JET_SNT Fail;
    public static JET_SNT RecoveryStep;
}
public class Microsoft.Isam.Esent.Interop.JET_SPACEHINTS : object {
    private int initialDensity;
    private int initialSize;
    private SpaceHintsGrbit options;
    private int maintenanceDensity;
    private int growthPercent;
    private int minimumExtent;
    private int maximumExtent;
    public int ulInitialDensity { get; public set; }
    public int cbInitial { get; public set; }
    public SpaceHintsGrbit grbit { get; public set; }
    public int ulMaintDensity { get; public set; }
    public int ulGrowth { get; public set; }
    public int cbMinExtent { get; public set; }
    public int cbMaxExtent { get; public set; }
    [DebuggerStepThroughAttribute]
public int get_ulInitialDensity();
    public void set_ulInitialDensity(int value);
    [DebuggerStepThroughAttribute]
public int get_cbInitial();
    public void set_cbInitial(int value);
    [DebuggerStepThroughAttribute]
public SpaceHintsGrbit get_grbit();
    public void set_grbit(SpaceHintsGrbit value);
    [DebuggerStepThroughAttribute]
public int get_ulMaintDensity();
    public void set_ulMaintDensity(int value);
    [DebuggerStepThroughAttribute]
public int get_ulGrowth();
    public void set_ulGrowth(int value);
    [DebuggerStepThroughAttribute]
public int get_cbMinExtent();
    public void set_cbMinExtent(int value);
    [DebuggerStepThroughAttribute]
public int get_cbMaxExtent();
    public void set_cbMaxExtent(int value);
    public sealed virtual bool ContentEquals(JET_SPACEHINTS other);
    public sealed virtual JET_SPACEHINTS DeepClone();
    public virtual string ToString();
    internal NATIVE_SPACEHINTS GetNativeSpaceHints();
    internal void SetFromNativeSpaceHints(NATIVE_SPACEHINTS value);
}
public class Microsoft.Isam.Esent.Interop.JET_TABLECREATE : object {
    private string tableName;
    private string templateTableName;
    private int initialPageAllocation;
    private int tableDensity;
    private JET_COLUMNCREATE[] columnCreates;
    private int columnCreateCount;
    private JET_INDEXCREATE[] indexCreates;
    private int indexCreateCount;
    private string callbackFunction;
    private JET_cbtyp callbackType;
    private CreateTableColumnIndexGrbit options;
    private JET_SPACEHINTS seqSpacehints;
    private JET_SPACEHINTS longValueSpacehints;
    private int separateLvThresholdHint;
    private JET_TABLEID tableIdentifier;
    private int objectsCreated;
    public string szTableName { get; public set; }
    public string szTemplateTableName { get; public set; }
    public int ulPages { get; public set; }
    public int ulDensity { get; public set; }
    public JET_COLUMNCREATE[] rgcolumncreate { get; public set; }
    public int cColumns { get; public set; }
    public JET_INDEXCREATE[] rgindexcreate { get; public set; }
    public int cIndexes { get; public set; }
    public string szCallback { get; public set; }
    public JET_cbtyp cbtyp { get; public set; }
    public CreateTableColumnIndexGrbit grbit { get; public set; }
    public JET_SPACEHINTS pSeqSpacehints { get; public set; }
    public JET_SPACEHINTS pLVSpacehints { get; public set; }
    public int cbSeparateLV { get; public set; }
    public JET_TABLEID tableid { get; public set; }
    public int cCreated { get; public set; }
    [DebuggerStepThroughAttribute]
public string get_szTableName();
    public void set_szTableName(string value);
    [DebuggerStepThroughAttribute]
public string get_szTemplateTableName();
    public void set_szTemplateTableName(string value);
    [DebuggerStepThroughAttribute]
public int get_ulPages();
    public void set_ulPages(int value);
    [DebuggerStepThroughAttribute]
public int get_ulDensity();
    public void set_ulDensity(int value);
    [DebuggerStepThroughAttribute]
public JET_COLUMNCREATE[] get_rgcolumncreate();
    public void set_rgcolumncreate(JET_COLUMNCREATE[] value);
    [DebuggerStepThroughAttribute]
public int get_cColumns();
    public void set_cColumns(int value);
    [DebuggerStepThroughAttribute]
public JET_INDEXCREATE[] get_rgindexcreate();
    public void set_rgindexcreate(JET_INDEXCREATE[] value);
    [DebuggerStepThroughAttribute]
public int get_cIndexes();
    public void set_cIndexes(int value);
    [DebuggerStepThroughAttribute]
public string get_szCallback();
    public void set_szCallback(string value);
    [DebuggerStepThroughAttribute]
public JET_cbtyp get_cbtyp();
    public void set_cbtyp(JET_cbtyp value);
    [DebuggerStepThroughAttribute]
public CreateTableColumnIndexGrbit get_grbit();
    public void set_grbit(CreateTableColumnIndexGrbit value);
    [DebuggerStepThroughAttribute]
public JET_SPACEHINTS get_pSeqSpacehints();
    public void set_pSeqSpacehints(JET_SPACEHINTS value);
    [DebuggerStepThroughAttribute]
public JET_SPACEHINTS get_pLVSpacehints();
    public void set_pLVSpacehints(JET_SPACEHINTS value);
    [DebuggerStepThroughAttribute]
public int get_cbSeparateLV();
    public void set_cbSeparateLV(int value);
    [DebuggerStepThroughAttribute]
public JET_TABLEID get_tableid();
    public void set_tableid(JET_TABLEID value);
    [DebuggerStepThroughAttribute]
public int get_cCreated();
    public void set_cCreated(int value);
    public sealed virtual bool ContentEquals(JET_TABLECREATE other);
    public sealed virtual JET_TABLECREATE DeepClone();
    public virtual string ToString();
    internal void CheckMembersAreValid();
    internal NATIVE_TABLECREATE2 GetNativeTableCreate2();
    internal NATIVE_TABLECREATE3 GetNativeTableCreate3();
    internal NATIVE_TABLECREATE4 GetNativeTableCreate4();
}
public class Microsoft.Isam.Esent.Interop.JET_TABLEID : ValueType {
    internal IntPtr Value;
    public static JET_TABLEID Nil { get; }
    public bool IsInvalid { get; }
    [DebuggerStepThroughAttribute]
public static JET_TABLEID get_Nil();
    public bool get_IsInvalid();
    public static bool op_Equality(JET_TABLEID lhs, JET_TABLEID rhs);
    public static bool op_Inequality(JET_TABLEID lhs, JET_TABLEID rhs);
    public virtual string ToString();
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_TABLEID other);
}
public enum Microsoft.Isam.Esent.Interop.JET_TblInfo : Enum {
    public int value__;
    public static JET_TblInfo Default;
    public static JET_TblInfo Name;
    public static JET_TblInfo Dbid;
    public static JET_TblInfo SpaceUsage;
    public static JET_TblInfo SpaceAlloc;
    public static JET_TblInfo SpaceOwned;
    public static JET_TblInfo SpaceAvailable;
    public static JET_TblInfo TemplateTableName;
}
public class Microsoft.Isam.Esent.Interop.JET_UNICODEINDEX : object {
    private int localeId;
    private string localeName;
    private UInt32 mapStringFlags;
    private static Dictionary`2<int, string> LcidToLocales;
    public int lcid { get; public set; }
    public string szLocaleName { get; public set; }
    [CLSCompliantAttribute("False")]
public UInt32 dwMapFlags { get; public set; }
    private static JET_UNICODEINDEX();
    [DebuggerStepThroughAttribute]
public int get_lcid();
    public void set_lcid(int value);
    [DebuggerStepThroughAttribute]
public string get_szLocaleName();
    public void set_szLocaleName(string value);
    [DebuggerStepThroughAttribute]
public UInt32 get_dwMapFlags();
    public void set_dwMapFlags(UInt32 value);
    public sealed virtual JET_UNICODEINDEX DeepClone();
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_UNICODEINDEX other);
    internal NATIVE_UNICODEINDEX GetNativeUnicodeIndex();
    public string GetEffectiveLocaleName();
    internal static string LimitedLcidToLocaleNameMapping(int lcid);
    internal NATIVE_UNICODEINDEX2 GetNativeUnicodeIndex2();
}
public enum Microsoft.Isam.Esent.Interop.JET_wrn : Enum {
    public int value__;
    public static JET_wrn Success;
    public static JET_wrn RemainingVersions;
    public static JET_wrn UniqueKey;
    public static JET_wrn SeparateLongValue;
    public static JET_wrn NoMoreRecords;
    public static JET_wrn ExistingLogFileHasBadSignature;
    public static JET_wrn ExistingLogFileIsNotContiguous;
    public static JET_wrn SkipThisRecord;
    public static JET_wrn TargetInstanceRunning;
    public static JET_wrn CommittedLogFilesLost;
    public static JET_wrn CommittedLogFilesRemoved;
    public static JET_wrn FinishWithUndo;
    public static JET_wrn DatabaseRepaired;
    public static JET_wrn ColumnNull;
    public static JET_wrn BufferTruncated;
    public static JET_wrn DatabaseAttached;
    public static JET_wrn SortOverflow;
    public static JET_wrn SeekNotEqual;
    public static JET_wrn NoErrorInfo;
    public static JET_wrn NoIdleActivity;
    public static JET_wrn NoWriteLock;
    public static JET_wrn ColumnSetNull;
    public static JET_wrn ShrinkNotPossible;
    public static JET_wrn DTCCommitTransaction;
    public static JET_wrn DTCRollbackTransaction;
    public static JET_wrn TableEmpty;
    public static JET_wrn TableInUseBySystem;
    public static JET_wrn CorruptIndexDeleted;
    public static JET_wrn PrimaryIndexOutOfDate;
    public static JET_wrn SecondaryIndexOutOfDate;
    public static JET_wrn ColumnMaxTruncated;
    public static JET_wrn CopyLongValue;
    public static JET_wrn TaggedColumnsRemaining;
    public static JET_wrn ColumnSkipped;
    public static JET_wrn ColumnNotLocal;
    public static JET_wrn ColumnMoreTags;
    public static JET_wrn ColumnTruncated;
    public static JET_wrn ColumnPresent;
    public static JET_wrn ColumnSingleValue;
    public static JET_wrn ColumnDefault;
    public static JET_wrn ColumnNotInRecord;
    public static JET_wrn ColumnReference;
    public static JET_wrn DataHasChanged;
    public static JET_wrn KeyChanged;
    public static JET_wrn FileOpenReadOnly;
    public static JET_wrn IdleFull;
    public static JET_wrn DefragAlreadyRunning;
    public static JET_wrn DefragNotRunning;
    public static JET_wrn DatabaseScanAlreadyRunning;
    public static JET_wrn DatabaseScanNotRunning;
    public static JET_wrn CallbackNotRegistered;
    public static JET_wrn PreviousLogFileIncomplete;
}
internal class Microsoft.Isam.Esent.Interop.JetCallbackWrapper : object {
    private static TraceSwitch TraceSwitch;
    private WeakReference wrappedCallback;
    private NATIVE_CALLBACK nativeCallback;
    public bool IsAlive { get; }
    public NATIVE_CALLBACK NativeCallback { get; }
    private static JetCallbackWrapper();
    public JetCallbackWrapper(JET_CALLBACK callback);
    public bool get_IsAlive();
    public NATIVE_CALLBACK get_NativeCallback();
    public bool IsWrapping(JET_CALLBACK callback);
    private JET_err CallbackImpl(IntPtr nativeSesid, UInt32 nativeDbid, IntPtr nativeTableid, UInt32 nativeCbtyp, IntPtr arg1, IntPtr arg2, IntPtr nativeContext, IntPtr unused);
}
internal static class Microsoft.Isam.Esent.Interop.LibraryHelpers : object {
    public static char DirectorySeparatorChar;
    public static char AltDirectorySeparatorChar;
    public static Encoding EncodingASCII { get; }
    public static Encoding NewEncodingASCII { get; }
    private static LibraryHelpers();
    public static Encoding get_EncodingASCII();
    public static Encoding get_NewEncodingASCII();
    public static CultureInfo CreateCultureInfoByLcid(int lcid);
    public static IntPtr MarshalAllocHGlobal(int size);
    public static void MarshalFreeHGlobal(IntPtr buffer);
    public static IntPtr MarshalStringToHGlobalUni(string managedString);
    public static int GetCurrentManagedThreadId();
    public static void ThreadResetAbort();
    public static DateTime FromOADate(double d);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.LsGrbit : Enum {
    public int value__;
    public static LsGrbit None;
    public static LsGrbit Reset;
    public static LsGrbit Cursor;
    public static LsGrbit Table;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.MakeKeyGrbit : Enum {
    public int value__;
    public static MakeKeyGrbit None;
    public static MakeKeyGrbit NewKey;
    public static MakeKeyGrbit NormalizedKey;
    public static MakeKeyGrbit KeyDataZeroLength;
    public static MakeKeyGrbit StrLimit;
    public static MakeKeyGrbit SubStrLimit;
    public static MakeKeyGrbit FullColumnStartLimit;
    public static MakeKeyGrbit FullColumnEndLimit;
    public static MakeKeyGrbit PartialColumnStartLimit;
    public static MakeKeyGrbit PartialColumnEndLimit;
}
internal class Microsoft.Isam.Esent.Interop.MemoryCache : object {
    private static Byte[] ZeroLengthArray;
    private int bufferSize;
    private Byte[][] cachedBuffers;
    public int BufferSize { get; }
    public MemoryCache(int bufferSize, int maxCachedBuffers);
    private static MemoryCache();
    public int get_BufferSize();
    public static Byte[] Duplicate(Byte[] data, int length);
    public Byte[] Allocate();
    public void Free(Byte[]& data);
    private int GetStartingOffset();
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.MoveGrbit : Enum {
    public int value__;
    public static MoveGrbit None;
    public static MoveGrbit MoveKeyNE;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_CALLBACK : MulticastDelegate {
    public NATIVE_CALLBACK(object object, IntPtr method);
    public virtual JET_err Invoke(IntPtr sesid, UInt32 dbid, IntPtr tableid, UInt32 cbtyp, IntPtr arg1, IntPtr arg2, IntPtr context, IntPtr unused);
    public virtual IAsyncResult BeginInvoke(IntPtr sesid, UInt32 dbid, IntPtr tableid, UInt32 cbtyp, IntPtr arg1, IntPtr arg2, IntPtr context, IntPtr unused, AsyncCallback callback, object object);
    public virtual JET_err EndInvoke(IAsyncResult result);
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_COLUMNBASE : ValueType {
    private static int NameSize;
    public UInt32 cbStruct;
    public UInt32 columnid;
    public UInt32 coltyp;
    [ObsoleteAttribute("Reserved")]
public ushort wCountry;
    [ObsoleteAttribute("Use cp")]
public ushort langid;
    public ushort cp;
    [ObsoleteAttribute("Reserved")]
public ushort wFiller;
    public UInt32 cbMax;
    public UInt32 grbit;
    public string szBaseTableName;
    public string szBaseColumnName;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_COLUMNBASE_WIDE : ValueType {
    private static int NameSize;
    public UInt32 cbStruct;
    public UInt32 columnid;
    public UInt32 coltyp;
    [ObsoleteAttribute("Reserved")]
public ushort wCountry;
    [ObsoleteAttribute("Use cp")]
public ushort langid;
    public ushort cp;
    [ObsoleteAttribute("Reserved")]
public ushort wFiller;
    public UInt32 cbMax;
    public UInt32 grbit;
    public string szBaseTableName;
    public string szBaseColumnName;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_COLUMNCREATE : ValueType {
    public UInt32 cbStruct;
    public IntPtr szColumnName;
    public UInt32 coltyp;
    public UInt32 cbMax;
    public UInt32 grbit;
    public IntPtr pvDefault;
    public UInt32 cbDefault;
    public UInt32 cp;
    public UInt32 columnid;
    public int err;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_COLUMNDEF : ValueType {
    public UInt32 cbStruct;
    public UInt32 columnid;
    public UInt32 coltyp;
    [ObsoleteAttribute("Reserved")]
public ushort wCountry;
    [ObsoleteAttribute("Use cp")]
public ushort langid;
    public ushort cp;
    [ObsoleteAttribute("Reserved")]
public ushort wCollate;
    public UInt32 cbMax;
    public UInt32 grbit;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_COLUMNLIST : ValueType {
    public UInt32 cbStruct;
    public IntPtr tableid;
    public UInt32 cRecord;
    public UInt32 columnidPresentationOrder;
    public UInt32 columnidcolumnname;
    public UInt32 columnidcolumnid;
    public UInt32 columnidcoltyp;
    public UInt32 columnidCountry;
    public UInt32 columnidLangid;
    public UInt32 columnidCp;
    public UInt32 columnidCollate;
    public UInt32 columnidcbMax;
    public UInt32 columnidgrbit;
    public UInt32 columnidDefault;
    public UInt32 columnidBaseTableName;
    public UInt32 columnidBaseColumnName;
    public UInt32 columnidDefinitionName;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_CONDITIONALCOLUMN : ValueType {
    public UInt32 cbStruct;
    public IntPtr szColumnName;
    public UInt32 grbit;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_DBINFOMISC : ValueType {
    public UInt32 ulVersion;
    public UInt32 ulUpdate;
    public NATIVE_SIGNATURE signDb;
    public UInt32 dbstate;
    public JET_LGPOS lgposConsistent;
    public JET_LOGTIME logtimeConsistent;
    public JET_LOGTIME logtimeAttach;
    public JET_LGPOS lgposAttach;
    public JET_LOGTIME logtimeDetach;
    public JET_LGPOS lgposDetach;
    public NATIVE_SIGNATURE signLog;
    public JET_BKINFO bkinfoFullPrev;
    public JET_BKINFO bkinfoIncPrev;
    public JET_BKINFO bkinfoFullCur;
    public UInt32 fShadowingDisabled;
    public UInt32 fUpgradeDb;
    public UInt32 dwMajorVersion;
    public UInt32 dwMinorVersion;
    public UInt32 dwBuildNumber;
    public UInt32 lSPNumber;
    public UInt32 cbPageSize;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_DBINFOMISC4 : ValueType {
    public NATIVE_DBINFOMISC dbinfo;
    public UInt32 genMinRequired;
    public UInt32 genMaxRequired;
    public JET_LOGTIME logtimeGenMaxCreate;
    public UInt32 ulRepairCount;
    public JET_LOGTIME logtimeRepair;
    public UInt32 ulRepairCountOld;
    public UInt32 ulECCFixSuccess;
    public JET_LOGTIME logtimeECCFixSuccess;
    public UInt32 ulECCFixSuccessOld;
    public UInt32 ulECCFixFail;
    public JET_LOGTIME logtimeECCFixFail;
    public UInt32 ulECCFixFailOld;
    public UInt32 ulBadChecksum;
    public JET_LOGTIME logtimeBadChecksum;
    public UInt32 ulBadChecksumOld;
    public UInt32 genCommitted;
    public JET_BKINFO bkinfoCopyPrev;
    public JET_BKINFO bkinfoDiffPrev;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_ENUMCOLUMN : ValueType {
    public UInt32 columnid;
    public int err;
    public UInt32 cbData;
    public IntPtr pvData;
    public UInt32 cEnumColumnValue { get; public set; }
    public NATIVE_ENUMCOLUMNVALUE* rgEnumColumnValue { get; public set; }
    public UInt32 get_cEnumColumnValue();
    public void set_cEnumColumnValue(UInt32 value);
    public NATIVE_ENUMCOLUMNVALUE* get_rgEnumColumnValue();
    public void set_rgEnumColumnValue(NATIVE_ENUMCOLUMNVALUE* value);
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_ENUMCOLUMNID : ValueType {
    public UInt32 columnid;
    public UInt32 ctagSequence;
    public UInt32* rgtagSequence;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_ENUMCOLUMNVALUE : ValueType {
    public UInt32 itagSequence;
    public int err;
    public UInt32 cbData;
    public IntPtr pvData;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_INDEXCREATE3 : ValueType {
    public UInt32 cbStruct;
    public IntPtr szIndexName;
    public IntPtr szKey;
    public UInt32 cbKey;
    public UInt32 grbit;
    public UInt32 ulDensity;
    public NATIVE_UNICODEINDEX2* pidxUnicode;
    public IntPtr cbVarSegMac;
    public IntPtr rgconditionalcolumn;
    public UInt32 cConditionalColumn;
    public int err;
    public UInt32 cbKeyMost;
    public IntPtr pSpaceHints;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_INDEXLIST : ValueType {
    public UInt32 cbStruct;
    public IntPtr tableid;
    public UInt32 cRecord;
    public UInt32 columnidindexname;
    public UInt32 columnidgrbitIndex;
    public UInt32 columnidcKey;
    public UInt32 columnidcEntry;
    public UInt32 columnidcPage;
    public UInt32 columnidcColumn;
    public UInt32 columnidiColumn;
    public UInt32 columnidcolumnid;
    public UInt32 columnidcoltyp;
    [ObsoleteAttribute("Deprecated")]
public UInt32 columnidCountry;
    public UInt32 columnidLangid;
    public UInt32 columnidCp;
    [ObsoleteAttribute("Deprecated")]
public UInt32 columnidCollate;
    public UInt32 columnidgrbitColumn;
    public UInt32 columnidcolumnname;
    public UInt32 columnidLCMapFlags;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_INDEXRANGE : ValueType {
    public UInt32 cbStruct;
    public IntPtr tableid;
    public UInt32 grbit;
    public static NATIVE_INDEXRANGE MakeIndexRangeFromTableid(JET_TABLEID tableid);
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_INSTANCE_INFO : ValueType {
    public IntPtr hInstanceId;
    public IntPtr szInstanceName;
    public IntPtr cDatabases;
    public IntPtr* szDatabaseFileName;
    public IntPtr* szDatabaseDisplayName;
    [ObsoleteAttribute("SLV files are not supported")]
public IntPtr* szDatabaseSLVFileName;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_OBJECTINFO : ValueType {
    public UInt32 cbStruct;
    public UInt32 objtyp;
    [ObsoleteAttribute("Unused member")]
public double ignored1;
    [ObsoleteAttribute("Unused member")]
public double ignored2;
    public UInt32 grbit;
    public UInt32 flags;
    public UInt32 cRecord;
    public UInt32 cPage;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_OBJECTLIST : ValueType {
    public UInt32 cbStruct;
    public IntPtr tableid;
    public UInt32 cRecord;
    public UInt32 columnidcontainername;
    public UInt32 columnidobjectname;
    public UInt32 columnidobjtyp;
    [ObsoleteAttribute("Unused member")]
public UInt32 columniddtCreate;
    [ObsoleteAttribute("Unused member")]
public UInt32 columniddtUpdate;
    public UInt32 columnidgrbit;
    public UInt32 columnidflags;
    public UInt32 columnidcRecord;
    public UInt32 columnidcPage;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_PFNSTATUS : MulticastDelegate {
    public NATIVE_PFNSTATUS(object object, IntPtr method);
    public virtual JET_err Invoke(IntPtr nativeSesid, UInt32 snp, UInt32 snt, IntPtr snprog);
    public virtual IAsyncResult BeginInvoke(IntPtr nativeSesid, UInt32 snp, UInt32 snt, IntPtr snprog, AsyncCallback callback, object object);
    public virtual JET_err EndInvoke(IAsyncResult result);
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_RECORDLIST : ValueType {
    public UInt32 cbStruct;
    public IntPtr tableid;
    public UInt32 cRecords;
    public UInt32 columnidBookmark;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_RECPOS : ValueType {
    public static int Size;
    public UInt32 cbStruct;
    public UInt32 centriesLT;
    public UInt32 centriesInRange;
    public UInt32 centriesTotal;
    private static NATIVE_RECPOS();
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_RETINFO : ValueType {
    public static int Size;
    public UInt32 cbStruct;
    public UInt32 ibLongValue;
    public UInt32 itagSequence;
    public UInt32 columnidNextTagged;
    private static NATIVE_RETINFO();
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_RETRIEVECOLUMN : ValueType {
    public UInt32 columnid;
    public IntPtr pvData;
    public UInt32 cbData;
    public UInt32 cbActual;
    public UInt32 grbit;
    public UInt32 ibLongValue;
    public UInt32 itagSequence;
    public UInt32 columnidNextTagged;
    public int err;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_RSTINFO : ValueType {
    public static int SizeOfRstinfo;
    public UInt32 cbStruct;
    public NATIVE_RSTMAP* rgrstmap;
    public UInt32 crstmap;
    public JET_LGPOS lgposStop;
    public JET_LOGTIME logtimeStop;
    public NATIVE_PFNSTATUS pfnStatus;
    private static NATIVE_RSTINFO();
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_RSTMAP : ValueType {
    public IntPtr szDatabaseName;
    public IntPtr szNewDatabaseName;
    public void FreeHGlobal();
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_SETCOLUMN : ValueType {
    public UInt32 columnid;
    public IntPtr pvData;
    public UInt32 cbData;
    public UInt32 grbit;
    public UInt32 ibLongValue;
    public UInt32 itagSequence;
    public UInt32 err;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_SETINFO : ValueType {
    public static int Size;
    public UInt32 cbStruct;
    public UInt32 ibLongValue;
    public UInt32 itagSequence;
    private static NATIVE_SETINFO();
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_SIGNATURE : ValueType {
    public static int ComputerNameSize;
    public static int Size;
    public UInt32 ulRandom;
    public JET_LOGTIME logtimeCreate;
    public string szComputerName;
    private static NATIVE_SIGNATURE();
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_SNPROG : ValueType {
    public static int Size;
    public UInt32 cbStruct;
    public UInt32 cunitDone;
    public UInt32 cunitTotal;
    private static NATIVE_SNPROG();
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_SPACEHINTS : ValueType {
    public UInt32 cbStruct;
    public UInt32 ulInitialDensity;
    public UInt32 cbInitial;
    public UInt32 grbit;
    public UInt32 ulMaintDensity;
    public UInt32 ulGrowth;
    public UInt32 cbMinExtent;
    public UInt32 cbMaxExtent;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_TABLECREATE4 : ValueType {
    public UInt32 cbStruct;
    public string szTableName;
    public string szTemplateTableName;
    public UInt32 ulPages;
    public UInt32 ulDensity;
    public NATIVE_COLUMNCREATE* rgcolumncreate;
    public UInt32 cColumns;
    public IntPtr rgindexcreate;
    public UInt32 cIndexes;
    public string szCallback;
    public JET_cbtyp cbtyp;
    public UInt32 grbit;
    public NATIVE_SPACEHINTS* pSeqSpacehints;
    public NATIVE_SPACEHINTS* pLVSpacehints;
    public UInt32 cbSeparateLV;
    public IntPtr tableid;
    public UInt32 cCreated;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_UNICODEINDEX : ValueType {
    public UInt32 lcid;
    public UInt32 dwMapFlags;
}
internal class Microsoft.Isam.Esent.Interop.NATIVE_UNICODEINDEX2 : ValueType {
    public IntPtr szLocaleName;
    public UInt32 dwMapFlags;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.ObjectInfoFlags : Enum {
    public int value__;
    public static ObjectInfoFlags None;
    public static ObjectInfoFlags System;
    public static ObjectInfoFlags TableFixedDDL;
    public static ObjectInfoFlags TableTemplate;
    public static ObjectInfoFlags TableDerived;
    public static ObjectInfoFlags TableNoFixedVarColumnsInDerivedTables;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.ObjectInfoGrbit : Enum {
    public int value__;
    public static ObjectInfoGrbit Bookmark;
    public static ObjectInfoGrbit Rollback;
    public static ObjectInfoGrbit Updatable;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.OpenDatabaseGrbit : Enum {
    public int value__;
    public static OpenDatabaseGrbit None;
    public static OpenDatabaseGrbit ReadOnly;
    public static OpenDatabaseGrbit Exclusive;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.OpenTableGrbit : Enum {
    public int value__;
    public static OpenTableGrbit None;
    public static OpenTableGrbit DenyWrite;
    public static OpenTableGrbit DenyRead;
    public static OpenTableGrbit ReadOnly;
    public static OpenTableGrbit Updatable;
    public static OpenTableGrbit PermitDDL;
    public static OpenTableGrbit NoCache;
    public static OpenTableGrbit Preread;
    public static OpenTableGrbit Sequential;
    public static OpenTableGrbit TableClass1;
    public static OpenTableGrbit TableClass2;
    public static OpenTableGrbit TableClass3;
    public static OpenTableGrbit TableClass4;
    public static OpenTableGrbit TableClass5;
    public static OpenTableGrbit TableClass6;
    public static OpenTableGrbit TableClass7;
    public static OpenTableGrbit TableClass8;
    public static OpenTableGrbit TableClass9;
    public static OpenTableGrbit TableClass10;
    public static OpenTableGrbit TableClass11;
    public static OpenTableGrbit TableClass12;
    public static OpenTableGrbit TableClass13;
    public static OpenTableGrbit TableClass14;
    public static OpenTableGrbit TableClass15;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.RenameColumnGrbit : Enum {
    public int value__;
    public static RenameColumnGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.ResetTableSequentialGrbit : Enum {
    public int value__;
    public static ResetTableSequentialGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.RetrieveColumnGrbit : Enum {
    public int value__;
    public static RetrieveColumnGrbit None;
    public static RetrieveColumnGrbit RetrieveCopy;
    public static RetrieveColumnGrbit RetrieveFromIndex;
    public static RetrieveColumnGrbit RetrieveFromPrimaryBookmark;
    public static RetrieveColumnGrbit RetrieveTag;
    public static RetrieveColumnGrbit RetrieveNull;
    public static RetrieveColumnGrbit RetrieveIgnoreDefault;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.RetrieveKeyGrbit : Enum {
    public int value__;
    public static RetrieveKeyGrbit None;
    public static RetrieveKeyGrbit RetrieveCopy;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.RollbackTransactionGrbit : Enum {
    public int value__;
    public static RollbackTransactionGrbit None;
    public static RollbackTransactionGrbit RollbackAll;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SeekGrbit : Enum {
    public int value__;
    public static SeekGrbit SeekEQ;
    public static SeekGrbit SeekLT;
    public static SeekGrbit SeekLE;
    public static SeekGrbit SeekGE;
    public static SeekGrbit SeekGT;
    public static SeekGrbit SetIndexRange;
}
public static class Microsoft.Isam.Esent.Interop.Server2003.Server2003Api : object {
    public static void JetOSSnapshotAbort(JET_OSSNAPID snapid, SnapshotAbortGrbit grbit);
    public static void JetUpdate2(JET_SESID sesid, JET_TABLEID tableid, Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize, UpdateGrbit grbit);
}
public static class Microsoft.Isam.Esent.Interop.Server2003.Server2003Grbits : object {
    public static AttachDatabaseGrbit DeleteUnicodeIndexes;
    public static ColumndefGrbit ColumnDeleteOnZero;
    public static TempTableGrbit ForwardOnly;
    public static EnumerateColumnsGrbit EnumerateIgnoreUserDefinedDefault;
    public static CommitTransactionGrbit WaitAllLevel0Commit;
}
public static class Microsoft.Isam.Esent.Interop.Server2003.Server2003Param : object {
    public static JET_param AlternateDatabaseRecoveryPath;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Server2003.SnapshotAbortGrbit : Enum {
    public int value__;
    public static SnapshotAbortGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Server2003.UpdateGrbit : Enum {
    public int value__;
    public static UpdateGrbit None;
    [ObsoleteAttribute("Only needed for legacy replication applications.")]
public static UpdateGrbit CheckESE97Compatibility;
}
public class Microsoft.Isam.Esent.Interop.Session : EsentResource {
    private JET_SESID sesid;
    public JET_SESID JetSesid { get; }
    public Session(JET_INSTANCE instance);
    public JET_SESID get_JetSesid();
    public static JET_SESID op_Implicit(Session session);
    public virtual string ToString();
    public void End();
    protected virtual void ReleaseResource();
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SetColumnDefaultValueGrbit : Enum {
    public int value__;
    public static SetColumnDefaultValueGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SetColumnGrbit : Enum {
    public int value__;
    public static SetColumnGrbit None;
    public static SetColumnGrbit AppendLV;
    public static SetColumnGrbit OverwriteLV;
    public static SetColumnGrbit RevertToDefaultValue;
    public static SetColumnGrbit SeparateLV;
    public static SetColumnGrbit SizeLV;
    public static SetColumnGrbit UniqueMultiValues;
    public static SetColumnGrbit UniqueNormalizedMultiValues;
    public static SetColumnGrbit ZeroLength;
    public static SetColumnGrbit IntrinsicLV;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SetCurrentIndexGrbit : Enum {
    public int value__;
    public static SetCurrentIndexGrbit None;
    public static SetCurrentIndexGrbit MoveFirst;
    public static SetCurrentIndexGrbit NoMove;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SetIndexRangeGrbit : Enum {
    public int value__;
    public static SetIndexRangeGrbit None;
    public static SetIndexRangeGrbit RangeInclusive;
    public static SetIndexRangeGrbit RangeUpperLimit;
    public static SetIndexRangeGrbit RangeInstantDuration;
    public static SetIndexRangeGrbit RangeRemove;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SetTableSequentialGrbit : Enum {
    public int value__;
    public static SetTableSequentialGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SnapshotFreezeGrbit : Enum {
    public int value__;
    public static SnapshotFreezeGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SnapshotPrepareGrbit : Enum {
    public int value__;
    public static SnapshotPrepareGrbit None;
    public static SnapshotPrepareGrbit IncrementalSnapshot;
    public static SnapshotPrepareGrbit CopySnapshot;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SnapshotThawGrbit : Enum {
    public int value__;
    public static SnapshotThawGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.SpaceHintsGrbit : Enum {
    public int value__;
    public static SpaceHintsGrbit None;
    public static SpaceHintsGrbit SpaceHintUtilizeParentSpace;
    public static SpaceHintsGrbit CreateHintAppendSequential;
    public static SpaceHintsGrbit CreateHintHotpointSequential;
    public static SpaceHintsGrbit RetrieveHintReserve1;
    public static SpaceHintsGrbit RetrieveHintTableScanForward;
    public static SpaceHintsGrbit RetrieveHintTableScanBackward;
    public static SpaceHintsGrbit RetrieveHintReserve2;
    public static SpaceHintsGrbit RetrieveHintReserve3;
    public static SpaceHintsGrbit DeleteHintTableSequential;
}
internal class Microsoft.Isam.Esent.Interop.StatusCallbackWrapper : object {
    private static TraceSwitch TraceSwitch;
    private JET_PFNSTATUS wrappedCallback;
    private NATIVE_PFNSTATUS nativeCallback;
    [CompilerGeneratedAttribute]
private Exception <SavedException>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ThreadWasAborted>k__BackingField;
    public NATIVE_PFNSTATUS NativeCallback { get; }
    private Exception SavedException { get; private set; }
    private bool ThreadWasAborted { get; private set; }
    private static StatusCallbackWrapper();
    public StatusCallbackWrapper(JET_PFNSTATUS wrappedCallback);
    public NATIVE_PFNSTATUS get_NativeCallback();
    [CompilerGeneratedAttribute]
private Exception get_SavedException();
    [CompilerGeneratedAttribute]
private void set_SavedException(Exception value);
    [CompilerGeneratedAttribute]
private bool get_ThreadWasAborted();
    [CompilerGeneratedAttribute]
private void set_ThreadWasAborted(bool value);
    public void ThrowSavedException();
    private JET_err CallbackImpl(IntPtr nativeSesid, UInt32 nativeSnp, UInt32 nativeSnt, IntPtr nativeData);
}
internal static class Microsoft.Isam.Esent.Interop.StringCache : object {
    private static int MaxLengthToCache;
    private static int NumCachedBoxedValues;
    private static String[] CachedStrings;
    private static StringCache();
    public static string TryToIntern(string s);
    public static string GetString(Byte[] value, int startIndex, int count);
    private static string GetString(Char* value, int startIndex, int count);
    private static UInt32 CalculateHash(Char* value, int startIndex, int count);
    private static bool AreEqual(string s, Char* value, int startIndex, int count);
    private static string CreateNewString(Char* value, int startIndex, int count);
}
public class Microsoft.Isam.Esent.Interop.StringColumnValue : ColumnValue {
    private string internalValue;
    public object ValueAsObject { get; }
    public string Value { get; public set; }
    public int Length { get; }
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
public virtual object get_ValueAsObject();
    public string get_Value();
    public void set_Value(string value);
    public virtual int get_Length();
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    public virtual string ToString();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
public static class Microsoft.Isam.Esent.Interop.SystemParameters : object {
    public static int BaseNameLength;
    public static int NameMost;
    public static int ColumnMost;
    public static int ColumnsMost;
    public static int ColumnsFixedMost;
    public static int ColumnsVarMost;
    public static int ColumnsTaggedMost;
    public static int PageTempDBSmallest;
    public static int LocaleNameMaxLength;
    public static int CacheSizeMax { get; public set; }
    public static int CacheSize { get; public set; }
    public static int DatabasePageSize { get; public set; }
    public static int CacheSizeMin { get; public set; }
    public static int OutstandingIOMax { get; public set; }
    public static int StartFlushThreshold { get; public set; }
    public static int StopFlushThreshold { get; public set; }
    public static int MaxInstances { get; public set; }
    public static int EventLoggingLevel { get; public set; }
    public static int KeyMost { get; }
    public static int ColumnsKeyMost { get; }
    public static int BookmarkMost { get; }
    public static int LVChunkSizeMost { get; }
    public static int Configuration { get; public set; }
    public static bool EnableAdvanced { get; public set; }
    public static int LegacyFileNames { get; public set; }
    public static JET_ExceptionAction ExceptionAction { get; public set; }
    public static bool EnableFileCache { get; public set; }
    public static bool EnableViewCache { get; public set; }
    public static int MinDataForXpress { get; public set; }
    public static int HungIOThreshold { get; public set; }
    public static int HungIOActions { get; public set; }
    public static string ProcessFriendlyName { get; public set; }
    public static int get_CacheSizeMax();
    public static void set_CacheSizeMax(int value);
    public static int get_CacheSize();
    public static void set_CacheSize(int value);
    public static int get_DatabasePageSize();
    public static void set_DatabasePageSize(int value);
    public static int get_CacheSizeMin();
    public static void set_CacheSizeMin(int value);
    public static int get_OutstandingIOMax();
    public static void set_OutstandingIOMax(int value);
    public static int get_StartFlushThreshold();
    public static void set_StartFlushThreshold(int value);
    public static int get_StopFlushThreshold();
    public static void set_StopFlushThreshold(int value);
    public static int get_MaxInstances();
    public static void set_MaxInstances(int value);
    public static int get_EventLoggingLevel();
    public static void set_EventLoggingLevel(int value);
    public static int get_KeyMost();
    public static int get_ColumnsKeyMost();
    public static int get_BookmarkMost();
    public static int get_LVChunkSizeMost();
    public static int get_Configuration();
    public static void set_Configuration(int value);
    public static bool get_EnableAdvanced();
    public static void set_EnableAdvanced(bool value);
    public static int get_LegacyFileNames();
    public static void set_LegacyFileNames(int value);
    public static JET_ExceptionAction get_ExceptionAction();
    public static void set_ExceptionAction(JET_ExceptionAction value);
    public static bool get_EnableFileCache();
    public static void set_EnableFileCache(bool value);
    public static bool get_EnableViewCache();
    public static void set_EnableViewCache(bool value);
    private static void SetStringParameter(JET_param param, string value);
    private static string GetStringParameter(JET_param param);
    private static void SetIntegerParameter(JET_param param, int value);
    private static int GetIntegerParameter(JET_param param);
    private static void SetBoolParameter(JET_param param, bool value);
    private static bool GetBoolParameter(JET_param param);
    public static int get_MinDataForXpress();
    public static void set_MinDataForXpress(int value);
    public static int get_HungIOThreshold();
    public static void set_HungIOThreshold(int value);
    public static int get_HungIOActions();
    public static void set_HungIOActions(int value);
    public static string get_ProcessFriendlyName();
    public static void set_ProcessFriendlyName(string value);
}
public class Microsoft.Isam.Esent.Interop.Table : EsentResource {
    private JET_SESID sesid;
    private JET_TABLEID tableid;
    private string name;
    public string Name { get; }
    public JET_TABLEID JetTableid { get; }
    public Table(JET_SESID sesid, JET_DBID dbid, string name, OpenTableGrbit grbit);
    public string get_Name();
    public JET_TABLEID get_JetTableid();
    public static JET_TABLEID op_Implicit(Table table);
    public virtual string ToString();
    public void Close();
    protected virtual void ReleaseResource();
}
internal class Microsoft.Isam.Esent.Interop.TableColumnInfoEnumerator : ColumnInfoEnumerator {
    private JET_DBID dbid;
    private string tablename;
    public TableColumnInfoEnumerator(JET_SESID sesid, JET_DBID dbid, string tablename);
    protected virtual void OpenTable();
}
internal abstract class Microsoft.Isam.Esent.Interop.TableEnumerator`1 : object {
    private bool isAtEnd;
    private bool moveToFirst;
    [CompilerGeneratedAttribute]
private T <Current>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_SESID <Sesid>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_TABLEID <TableidToEnumerate>k__BackingField;
    public T Current { get; private set; }
    private object System.Collections.IEnumerator.Current { get; }
    protected JET_SESID Sesid { get; private set; }
    protected JET_TABLEID TableidToEnumerate { get; protected set; }
    protected TableEnumerator`1(JET_SESID sesid);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Current();
    [CompilerGeneratedAttribute]
private void set_Current(T value);
    [DebuggerStepThroughAttribute]
private sealed virtual override object System.Collections.IEnumerator.get_Current();
    [CompilerGeneratedAttribute]
protected JET_SESID get_Sesid();
    [CompilerGeneratedAttribute]
private void set_Sesid(JET_SESID value);
    [CompilerGeneratedAttribute]
protected JET_TABLEID get_TableidToEnumerate();
    [CompilerGeneratedAttribute]
protected void set_TableidToEnumerate(JET_TABLEID value);
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    protected abstract virtual void OpenTable();
    protected abstract virtual T GetCurrent();
    protected virtual bool SkipCurrent();
    protected virtual void CloseTable();
}
internal class Microsoft.Isam.Esent.Interop.TableidColumnInfoEnumerator : ColumnInfoEnumerator {
    private JET_TABLEID tableid;
    public TableidColumnInfoEnumerator(JET_SESID sesid, JET_TABLEID tableid);
    protected virtual void OpenTable();
}
internal class Microsoft.Isam.Esent.Interop.TableidIndexInfoEnumerator : IndexInfoEnumerator {
    private JET_TABLEID tableid;
    public TableidIndexInfoEnumerator(JET_SESID sesid, JET_TABLEID tableid);
    protected virtual void OpenTable();
    protected virtual void GetIndexInfo(JET_SESID sesid, string indexname, String& result, JET_IdxInfo infoLevel);
}
internal class Microsoft.Isam.Esent.Interop.TableIndexInfoEnumerator : IndexInfoEnumerator {
    private JET_DBID dbid;
    private string tablename;
    public TableIndexInfoEnumerator(JET_SESID sesid, JET_DBID dbid, string tablename);
    protected virtual void OpenTable();
    protected virtual void GetIndexInfo(JET_SESID sesid, string indexname, String& result, JET_IdxInfo infoLevel);
}
internal class Microsoft.Isam.Esent.Interop.TableNameEnumerator : TableEnumerator`1<string> {
    private JET_DBID dbid;
    private JET_OBJECTLIST objectlist;
    public TableNameEnumerator(JET_SESID sesid, JET_DBID dbid);
    protected virtual void OpenTable();
    protected virtual bool SkipCurrent();
    protected virtual string GetCurrent();
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.TempTableGrbit : Enum {
    public int value__;
    public static TempTableGrbit None;
    public static TempTableGrbit Indexed;
    public static TempTableGrbit Unique;
    public static TempTableGrbit Updatable;
    public static TempTableGrbit Scrollable;
    public static TempTableGrbit SortNullsHigh;
    public static TempTableGrbit ForceMaterialization;
    public static TempTableGrbit ErrorOnDuplicateInsertion;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.TermGrbit : Enum {
    public int value__;
    public static TermGrbit None;
    public static TermGrbit Complete;
    public static TermGrbit Abrupt;
}
public class Microsoft.Isam.Esent.Interop.Transaction : EsentResource {
    private JET_SESID sesid;
    public int TransactionLevel { get; }
    public bool IsInTransaction { get; }
    public Transaction(JET_SESID sesid);
    public int get_TransactionLevel();
    public bool get_IsInTransaction();
    public virtual string ToString();
    public void Begin();
    public void Commit(CommitTransactionGrbit grbit);
    public void Commit(CommitTransactionGrbit grbit, TimeSpan durableCommit, JET_COMMIT_ID& commitId);
    public void Rollback();
    protected virtual void ReleaseResource();
}
[CLSCompliantAttribute("False")]
public class Microsoft.Isam.Esent.Interop.UInt16ColumnValue : ColumnValueOfStruct`1<ushort> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
[CLSCompliantAttribute("False")]
public class Microsoft.Isam.Esent.Interop.UInt32ColumnValue : ColumnValueOfStruct`1<UInt32> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
[CLSCompliantAttribute("False")]
public class Microsoft.Isam.Esent.Interop.UInt64ColumnValue : ColumnValueOfStruct`1<ulong> {
    protected int Size { get; }
    [DebuggerStepThroughAttribute]
protected virtual int get_Size();
    internal virtual int SetColumns(JET_SESID sesid, JET_TABLEID tableid, ColumnValue[] columnValues, NATIVE_SETCOLUMN* nativeColumns, int i);
    protected virtual void GetValueFromBytes(Byte[] value, int startIndex, int count, int err);
}
public class Microsoft.Isam.Esent.Interop.Update : EsentResource {
    private JET_SESID sesid;
    private JET_TABLEID tableid;
    private JET_prep prep;
    public Update(JET_SESID sesid, JET_TABLEID tableid, JET_prep prep);
    public virtual string ToString();
    public void Save(Byte[] bookmark, int bookmarkSize, Int32& actualBookmarkSize);
    public void Save();
    public void SaveAndGotoBookmark();
    public void Cancel();
    protected virtual void ReleaseResource();
}
internal static class Microsoft.Isam.Esent.Interop.Util : object {
    public static bool ArrayEqual(IList`1<byte> a, IList`1<byte> b, int offset, int count);
    public static string DumpBytes(Byte[] data, int offset, int count);
    public static bool ObjectContentEquals(T left, T right);
    public static bool ArrayObjectContentEquals(T[] left, T[] right, int length);
    public static bool ArrayStructEquals(T[] left, T[] right, int length);
    public static T[] DeepCloneArray(T[] value);
    public static int CalculateHashCode(IEnumerable`1<int> hashes);
    public static string AddTrailingDirectorySeparator(string dir);
    public static Byte[] ConvertToNullTerminatedAsciiByteArray(string value);
    public static Byte[] ConvertToNullTerminatedUnicodeByteArray(string value);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Vista.JET_InstanceMiscInfo : Enum {
    public int value__;
    public static JET_InstanceMiscInfo LogSignature;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Vista.JET_IOPriority : Enum {
    public int value__;
    public static JET_IOPriority Normal;
    public static JET_IOPriority Low;
    public static JET_IOPriority LowForCheckpoint;
    public static JET_IOPriority LowForScavenge;
    public static JET_IOPriority LowForCacheShrink;
}
public class Microsoft.Isam.Esent.Interop.Vista.JET_OPENTEMPORARYTABLE : object {
    [CompilerGeneratedAttribute]
private JET_COLUMNDEF[] <prgcolumndef>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ccolumn>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_UNICODEINDEX <pidxunicode>k__BackingField;
    [CompilerGeneratedAttribute]
private TempTableGrbit <grbit>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_COLUMNID[] <prgcolumnid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbKeyMost>k__BackingField;
    [CompilerGeneratedAttribute]
private int <cbVarSegMac>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_TABLEID <tableid>k__BackingField;
    public JET_COLUMNDEF[] prgcolumndef { get; public set; }
    public int ccolumn { get; public set; }
    public JET_UNICODEINDEX pidxunicode { get; public set; }
    public TempTableGrbit grbit { get; public set; }
    public JET_COLUMNID[] prgcolumnid { get; public set; }
    public int cbKeyMost { get; public set; }
    public int cbVarSegMac { get; public set; }
    public JET_TABLEID tableid { get; internal set; }
    [CompilerGeneratedAttribute]
public JET_COLUMNDEF[] get_prgcolumndef();
    [CompilerGeneratedAttribute]
public void set_prgcolumndef(JET_COLUMNDEF[] value);
    [CompilerGeneratedAttribute]
public int get_ccolumn();
    [CompilerGeneratedAttribute]
public void set_ccolumn(int value);
    [CompilerGeneratedAttribute]
public JET_UNICODEINDEX get_pidxunicode();
    [CompilerGeneratedAttribute]
public void set_pidxunicode(JET_UNICODEINDEX value);
    [CompilerGeneratedAttribute]
public TempTableGrbit get_grbit();
    [CompilerGeneratedAttribute]
public void set_grbit(TempTableGrbit value);
    [CompilerGeneratedAttribute]
public JET_COLUMNID[] get_prgcolumnid();
    [CompilerGeneratedAttribute]
public void set_prgcolumnid(JET_COLUMNID[] value);
    [CompilerGeneratedAttribute]
public int get_cbKeyMost();
    [CompilerGeneratedAttribute]
public void set_cbKeyMost(int value);
    [CompilerGeneratedAttribute]
public int get_cbVarSegMac();
    [CompilerGeneratedAttribute]
public void set_cbVarSegMac(int value);
    [CompilerGeneratedAttribute]
public JET_TABLEID get_tableid();
    [CompilerGeneratedAttribute]
internal void set_tableid(JET_TABLEID value);
    public virtual string ToString();
    internal NATIVE_OPENTEMPORARYTABLE GetNativeOpenTemporaryTable();
    private void CheckDataSize();
    internal NATIVE_OPENTEMPORARYTABLE2 GetNativeOpenTemporaryTable2();
}
public class Microsoft.Isam.Esent.Interop.Vista.JET_RECSIZE : ValueType {
    private long userData;
    private long userLongValueData;
    private long overhead;
    private long longValueOverhead;
    private long numNonTaggedColumns;
    private long numTaggedColumns;
    private long numLongValues;
    private long numMultiValues;
    private long numCompressedColumns;
    private long userDataAfterCompression;
    private long userLongValueDataCompressed;
    public long cbData { get; internal set; }
    public long cbLongValueData { get; internal set; }
    public long cbOverhead { get; internal set; }
    public long cbLongValueOverhead { get; internal set; }
    public long cNonTaggedColumns { get; internal set; }
    public long cTaggedColumns { get; internal set; }
    public long cLongValues { get; internal set; }
    public long cMultiValues { get; internal set; }
    public long cCompressedColumns { get; internal set; }
    public long cbDataCompressed { get; internal set; }
    public long cbLongValueDataCompressed { get; internal set; }
    [DebuggerStepThroughAttribute]
public long get_cbData();
    internal void set_cbData(long value);
    [DebuggerStepThroughAttribute]
public long get_cbLongValueData();
    internal void set_cbLongValueData(long value);
    [DebuggerStepThroughAttribute]
public long get_cbOverhead();
    internal void set_cbOverhead(long value);
    [DebuggerStepThroughAttribute]
public long get_cbLongValueOverhead();
    internal void set_cbLongValueOverhead(long value);
    [DebuggerStepThroughAttribute]
public long get_cNonTaggedColumns();
    internal void set_cNonTaggedColumns(long value);
    [DebuggerStepThroughAttribute]
public long get_cTaggedColumns();
    internal void set_cTaggedColumns(long value);
    [DebuggerStepThroughAttribute]
public long get_cLongValues();
    internal void set_cLongValues(long value);
    [DebuggerStepThroughAttribute]
public long get_cMultiValues();
    internal void set_cMultiValues(long value);
    [DebuggerStepThroughAttribute]
public long get_cCompressedColumns();
    internal void set_cCompressedColumns(long value);
    [DebuggerStepThroughAttribute]
public long get_cbDataCompressed();
    internal void set_cbDataCompressed(long value);
    [DebuggerStepThroughAttribute]
public long get_cbLongValueDataCompressed();
    internal void set_cbLongValueDataCompressed(long value);
    public static JET_RECSIZE Add(JET_RECSIZE s1, JET_RECSIZE s2);
    public static JET_RECSIZE op_Addition(JET_RECSIZE left, JET_RECSIZE right);
    public static JET_RECSIZE Subtract(JET_RECSIZE s1, JET_RECSIZE s2);
    public static JET_RECSIZE op_Subtraction(JET_RECSIZE left, JET_RECSIZE right);
    public static bool op_Equality(JET_RECSIZE lhs, JET_RECSIZE rhs);
    public static bool op_Inequality(JET_RECSIZE lhs, JET_RECSIZE rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_RECSIZE other);
    internal void SetFromNativeRecsize(NATIVE_RECSIZE value);
    internal void SetFromNativeRecsize(NATIVE_RECSIZE2 value);
    internal NATIVE_RECSIZE GetNativeRecsize();
    internal NATIVE_RECSIZE2 GetNativeRecsize2();
}
public class Microsoft.Isam.Esent.Interop.Vista.JET_THREADSTATS : ValueType {
    internal static int Size;
    private int cbStruct;
    private int pagesReferenced;
    private int pagesRead;
    private int pagesPreread;
    private int pagesDirtied;
    private int pagesRedirtied;
    private int numLogRecords;
    private int loggedBytes;
    public int cPageReferenced { get; internal set; }
    public int cPageRead { get; internal set; }
    public int cPagePreread { get; internal set; }
    public int cPageDirtied { get; internal set; }
    public int cPageRedirtied { get; internal set; }
    public int cLogRecord { get; internal set; }
    public int cbLogRecord { get; internal set; }
    private static JET_THREADSTATS();
    [DebuggerStepThroughAttribute]
public int get_cPageReferenced();
    internal void set_cPageReferenced(int value);
    [DebuggerStepThroughAttribute]
public int get_cPageRead();
    internal void set_cPageRead(int value);
    [DebuggerStepThroughAttribute]
public int get_cPagePreread();
    internal void set_cPagePreread(int value);
    [DebuggerStepThroughAttribute]
public int get_cPageDirtied();
    internal void set_cPageDirtied(int value);
    [DebuggerStepThroughAttribute]
public int get_cPageRedirtied();
    internal void set_cPageRedirtied(int value);
    [DebuggerStepThroughAttribute]
public int get_cLogRecord();
    internal void set_cLogRecord(int value);
    [DebuggerStepThroughAttribute]
public int get_cbLogRecord();
    internal void set_cbLogRecord(int value);
    public static JET_THREADSTATS Create(int cPageReferenced, int cPageRead, int cPagePreread, int cPageDirtied, int cPageRedirtied, int cLogRecord, int cbLogRecord);
    public static JET_THREADSTATS Add(JET_THREADSTATS t1, JET_THREADSTATS t2);
    public static JET_THREADSTATS op_Addition(JET_THREADSTATS t1, JET_THREADSTATS t2);
    public static JET_THREADSTATS Subtract(JET_THREADSTATS t1, JET_THREADSTATS t2);
    public static JET_THREADSTATS op_Subtraction(JET_THREADSTATS t1, JET_THREADSTATS t2);
    public static bool op_Equality(JET_THREADSTATS lhs, JET_THREADSTATS rhs);
    public static bool op_Inequality(JET_THREADSTATS lhs, JET_THREADSTATS rhs);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_THREADSTATS other);
    private static string GetPluralS(int n);
}
public enum Microsoft.Isam.Esent.Interop.Vista.LegacyFileNames : Enum {
    public int value__;
    public static LegacyFileNames ESE98FileNames;
    public static LegacyFileNames EightDotThreeSoftCompat;
}
internal class Microsoft.Isam.Esent.Interop.Vista.NATIVE_OPENTEMPORARYTABLE : ValueType {
    public UInt32 cbStruct;
    public NATIVE_COLUMNDEF* prgcolumndef;
    public UInt32 ccolumn;
    public NATIVE_UNICODEINDEX* pidxunicode;
    public UInt32 grbit;
    public UInt32* rgcolumnid;
    public UInt32 cbKeyMost;
    public UInt32 cbVarSegMac;
    public IntPtr tableid;
}
internal class Microsoft.Isam.Esent.Interop.Vista.NATIVE_OPENTEMPORARYTABLE2 : ValueType {
    public UInt32 cbStruct;
    public NATIVE_COLUMNDEF* prgcolumndef;
    public UInt32 ccolumn;
    public NATIVE_UNICODEINDEX2* pidxunicode;
    public UInt32 grbit;
    public UInt32* rgcolumnid;
    public UInt32 cbKeyMost;
    public UInt32 cbVarSegMac;
    public IntPtr tableid;
}
internal class Microsoft.Isam.Esent.Interop.Vista.NATIVE_RECSIZE : ValueType {
    public ulong cbData;
    public ulong cbLongValueData;
    public ulong cbOverhead;
    public ulong cbLongValueOverhead;
    public ulong cNonTaggedColumns;
    public ulong cTaggedColumns;
    public ulong cLongValues;
    public ulong cMultiValues;
}
internal class Microsoft.Isam.Esent.Interop.Vista.NATIVE_RECSIZE2 : ValueType {
    public ulong cbData;
    public ulong cbLongValueData;
    public ulong cbOverhead;
    public ulong cbLongValueOverhead;
    public ulong cNonTaggedColumns;
    public ulong cTaggedColumns;
    public ulong cLongValues;
    public ulong cMultiValues;
    public ulong cCompressedColumns;
    public ulong cbDataCompressed;
    public ulong cbLongValueDataCompressed;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Vista.SnapshotEndGrbit : Enum {
    public int value__;
    public static SnapshotEndGrbit None;
    public static SnapshotEndGrbit AbortSnapshot;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Vista.SnapshotGetFreezeInfoGrbit : Enum {
    public int value__;
    public static SnapshotGetFreezeInfoGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Vista.SnapshotPrepareInstanceGrbit : Enum {
    public int value__;
    public static SnapshotPrepareInstanceGrbit None;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Vista.SnapshotTruncateLogGrbit : Enum {
    public int value__;
    public static SnapshotTruncateLogGrbit None;
    public static SnapshotTruncateLogGrbit AllDatabasesSnapshot;
}
public static class Microsoft.Isam.Esent.Interop.Vista.VistaApi : object {
    public static void JetGetColumnInfo(JET_SESID sesid, JET_DBID dbid, string tablename, JET_COLUMNID columnid, JET_COLUMNBASE& columnbase);
    public static void JetGetTableColumnInfo(JET_SESID sesid, JET_TABLEID tableid, JET_COLUMNID columnid, JET_COLUMNBASE& columnbase);
    public static void JetOpenTemporaryTable(JET_SESID sesid, JET_OPENTEMPORARYTABLE temporarytable);
    public static void JetGetThreadStats(JET_THREADSTATS& threadstats);
    public static void JetOSSnapshotPrepareInstance(JET_OSSNAPID snapshot, JET_INSTANCE instance, SnapshotPrepareInstanceGrbit grbit);
    public static void JetOSSnapshotTruncateLog(JET_OSSNAPID snapshot, SnapshotTruncateLogGrbit grbit);
    public static void JetOSSnapshotTruncateLogInstance(JET_OSSNAPID snapshot, JET_INSTANCE instance, SnapshotTruncateLogGrbit grbit);
    public static void JetOSSnapshotGetFreezeInfo(JET_OSSNAPID snapshot, Int32& numInstances, JET_INSTANCE_INFO[]& instances, SnapshotGetFreezeInfoGrbit grbit);
    public static void JetOSSnapshotEnd(JET_OSSNAPID snapshot, SnapshotEndGrbit grbit);
    public static void JetGetInstanceMiscInfo(JET_INSTANCE instance, JET_SIGNATURE& signature, JET_InstanceMiscInfo infoLevel);
    public static JET_wrn JetInit3(JET_INSTANCE& instance, JET_RSTINFO recoveryOptions, InitGrbit grbit);
    public static void JetGetRecordSize(JET_SESID sesid, JET_TABLEID tableid, JET_RECSIZE& recsize, GetRecordSizeGrbit grbit);
}
public static class Microsoft.Isam.Esent.Interop.Vista.VistaColInfo : object {
    internal static JET_ColInfo BaseByColid;
    internal static JET_ColInfo GrbitNonDerivedColumnsOnly;
    internal static JET_ColInfo GrbitMinimalInfo;
    internal static JET_ColInfo GrbitSortByColumnid;
}
public static class Microsoft.Isam.Esent.Interop.Vista.VistaColtyp : object {
    public static JET_coltyp UnsignedLong;
    public static JET_coltyp LongLong;
    public static JET_coltyp GUID;
    public static JET_coltyp UnsignedShort;
}
public static class Microsoft.Isam.Esent.Interop.Vista.VistaGrbits : object {
    public static CreateIndexGrbit IndexCrossProduct;
    public static CreateIndexGrbit IndexDisallowTruncation;
    public static CreateIndexGrbit IndexNestedTable;
    public static EndExternalBackupGrbit TruncateDone;
    public static InitGrbit RecoveryWithoutUndo;
    public static InitGrbit TruncateLogsAfterRecovery;
    public static InitGrbit ReplayMissingMapEntryDB;
    public static InitGrbit LogStreamMustExist;
    public static SnapshotPrepareGrbit ContinueAfterThaw;
    internal static CreateIndexGrbit IndexKeyMost;
    internal static CreateIndexGrbit IndexUnicode;
}
public static class Microsoft.Isam.Esent.Interop.Vista.VistaParam : object {
    public static JET_param CachedClosedTables;
    public static JET_param EnableFileCache;
    public static JET_param EnableViewCache;
    public static JET_param Configuration;
    public static JET_param EnableAdvanced;
    public static JET_param KeyMost;
    public static JET_param LegacyFileNames;
    public static JET_param TableClass1Name;
    public static JET_param TableClass2Name;
    public static JET_param TableClass3Name;
    public static JET_param TableClass4Name;
    public static JET_param TableClass5Name;
    public static JET_param TableClass6Name;
    public static JET_param TableClass7Name;
    public static JET_param TableClass8Name;
    public static JET_param TableClass9Name;
    public static JET_param TableClass10Name;
    public static JET_param TableClass11Name;
    public static JET_param TableClass12Name;
    public static JET_param TableClass13Name;
    public static JET_param TableClass14Name;
    public static JET_param TableClass15Name;
    public static JET_param IOPriority;
}
[FlagsAttribute]
internal enum Microsoft.Isam.Esent.Interop.Win32.AllocationType : Enum {
    public UInt32 value__;
    public static AllocationType MEM_COMMIT;
    public static AllocationType MEM_RESERVE;
}
internal enum Microsoft.Isam.Esent.Interop.Win32.FreeType : Enum {
    public UInt32 value__;
    public static FreeType MEM_RELEASE;
}
internal enum Microsoft.Isam.Esent.Interop.Win32.MemoryProtection : Enum {
    public UInt32 value__;
    public static MemoryProtection PAGE_READWRITE;
}
internal static class Microsoft.Isam.Esent.Interop.Win32.NativeMethods : object {
    private static string WinCoreMemoryDll;
    private static string HeapObsolete;
    private static string WinCoreProcessThreads;
    public static void ThrowExceptionOnNull(IntPtr ptr, string message);
    public static void ThrowExceptionOnFailure(bool success, string message);
    public static IntPtr VirtualAlloc(IntPtr plAddress, UIntPtr dwSize, UInt32 flAllocationType, UInt32 flProtect);
    public static bool VirtualFree(IntPtr lpAddress, UIntPtr dwSize, UInt32 dwFreeType);
    [ReliabilityContractAttribute("3", "1")]
public static IntPtr LocalAlloc(int uFlags, UIntPtr sizetdwBytes);
    public static IntPtr LocalFree(IntPtr hglobal);
    public static int GetCurrentProcessId();
}
public class Microsoft.Isam.Esent.Interop.Windows10.JET_OPERATIONCONTEXT : ValueType {
    [CompilerGeneratedAttribute]
private int <UserID>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <OperationID>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <OperationType>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <ClientType>k__BackingField;
    [CompilerGeneratedAttribute]
private byte <Flags>k__BackingField;
    public int UserID { get; public set; }
    public byte OperationID { get; public set; }
    public byte OperationType { get; public set; }
    public byte ClientType { get; public set; }
    public byte Flags { get; public set; }
    internal JET_OPERATIONCONTEXT(NATIVE_OPERATIONCONTEXT& native);
    [CompilerGeneratedAttribute]
public int get_UserID();
    [CompilerGeneratedAttribute]
public void set_UserID(int value);
    [CompilerGeneratedAttribute]
public byte get_OperationID();
    [CompilerGeneratedAttribute]
public void set_OperationID(byte value);
    [CompilerGeneratedAttribute]
public byte get_OperationType();
    [CompilerGeneratedAttribute]
public void set_OperationType(byte value);
    [CompilerGeneratedAttribute]
public byte get_ClientType();
    [CompilerGeneratedAttribute]
public void set_ClientType(byte value);
    [CompilerGeneratedAttribute]
public byte get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(byte value);
    public static bool op_Equality(JET_OPERATIONCONTEXT lhs, JET_OPERATIONCONTEXT rhs);
    public static bool op_Inequality(JET_OPERATIONCONTEXT lhs, JET_OPERATIONCONTEXT rhs);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_OPERATIONCONTEXT other);
    public virtual string ToString();
    internal NATIVE_OPERATIONCONTEXT GetNativeOperationContext();
}
public class Microsoft.Isam.Esent.Interop.Windows10.JET_THREADSTATS2 : ValueType {
    internal static int Size;
    private int cbStruct;
    private int pagesReferenced;
    private int pagesRead;
    private int pagesPreread;
    private int pagesDirtied;
    private int pagesRedirtied;
    private int numLogRecords;
    private int loggedBytes;
    private long usecsCacheMisses;
    private int pagesCacheMisses;
    public int cPageReferenced { get; internal set; }
    public int cPageRead { get; internal set; }
    public int cPagePreread { get; internal set; }
    public int cPageDirtied { get; internal set; }
    public int cPageRedirtied { get; internal set; }
    public int cLogRecord { get; internal set; }
    public int cbLogRecord { get; internal set; }
    public long cusecPageCacheMiss { get; internal set; }
    public int cPageCacheMiss { get; internal set; }
    private static JET_THREADSTATS2();
    [DebuggerStepThroughAttribute]
public int get_cPageReferenced();
    internal void set_cPageReferenced(int value);
    [DebuggerStepThroughAttribute]
public int get_cPageRead();
    internal void set_cPageRead(int value);
    [DebuggerStepThroughAttribute]
public int get_cPagePreread();
    internal void set_cPagePreread(int value);
    [DebuggerStepThroughAttribute]
public int get_cPageDirtied();
    internal void set_cPageDirtied(int value);
    [DebuggerStepThroughAttribute]
public int get_cPageRedirtied();
    internal void set_cPageRedirtied(int value);
    [DebuggerStepThroughAttribute]
public int get_cLogRecord();
    internal void set_cLogRecord(int value);
    [DebuggerStepThroughAttribute]
public int get_cbLogRecord();
    internal void set_cbLogRecord(int value);
    [DebuggerStepThroughAttribute]
public long get_cusecPageCacheMiss();
    internal void set_cusecPageCacheMiss(long value);
    [DebuggerStepThroughAttribute]
public int get_cPageCacheMiss();
    internal void set_cPageCacheMiss(int value);
    public static JET_THREADSTATS2 Create(int cPageReferenced, int cPageRead, int cPagePreread, int cPageDirtied, int cPageRedirtied, int cLogRecord, int cbLogRecord, long cusecPageCacheMiss, int cPageCacheMiss);
    public static JET_THREADSTATS2 Add(JET_THREADSTATS2 t1, JET_THREADSTATS2 t2);
    public static JET_THREADSTATS2 op_Addition(JET_THREADSTATS2 t1, JET_THREADSTATS2 t2);
    public static JET_THREADSTATS2 Subtract(JET_THREADSTATS2 t1, JET_THREADSTATS2 t2);
    public static JET_THREADSTATS2 op_Subtraction(JET_THREADSTATS2 t1, JET_THREADSTATS2 t2);
    public static bool op_Equality(JET_THREADSTATS2 lhs, JET_THREADSTATS2 rhs);
    public static bool op_Inequality(JET_THREADSTATS2 lhs, JET_THREADSTATS2 rhs);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(JET_THREADSTATS2 other);
    private static string GetPluralS(int n);
}
internal class Microsoft.Isam.Esent.Interop.Windows10.NATIVE_OPERATIONCONTEXT : ValueType {
    public int ulUserID;
    public byte nOperationID;
    public byte nOperationType;
    public byte nClientType;
    public byte fFlags;
}
public static class Microsoft.Isam.Esent.Interop.Windows10.Windows10Api : object {
    public static void JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, JET_OPERATIONCONTEXT& operationContext);
    public static void JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, JET_OPERATIONCONTEXT operationContext);
    public static void JetGetThreadStats(JET_THREADSTATS2& threadstats);
}
public static class Microsoft.Isam.Esent.Interop.Windows10.Windows10Coltyp : object {
    public static JET_coltyp UnsignedLongLong;
}
public static class Microsoft.Isam.Esent.Interop.Windows10.Windows10Grbits : object {
    public static CreateTableColumnIndexGrbit TableCreateImmutableStructure;
    public static CreateIndexGrbit IndexCreateImmutableStructure;
    public static DurableCommitCallbackGrbit LogUnavailable;
}
public static class Microsoft.Isam.Esent.Interop.Windows10.Windows10Param : object {
    public static JET_param ConfigStoreSpec;
}
public static class Microsoft.Isam.Esent.Interop.Windows10.Windows10Sesparam : object {
    public static JET_sesparam TransactionLevel;
    public static JET_sesparam OperationContext;
    public static JET_sesparam CorrelationID;
}
[ExtensionAttribute]
public static class Microsoft.Isam.Esent.Interop.Windows10.Windows10Session : object {
    [ExtensionAttribute]
public static int GetTransactionLevel(Session session);
    [ExtensionAttribute]
public static JET_OPERATIONCONTEXT GetOperationContext(Session session);
    [ExtensionAttribute]
public static void SetOperationContext(Session session, JET_OPERATIONCONTEXT operationcontext);
    [ExtensionAttribute]
public static int GetCorrelationID(Session session);
    [ExtensionAttribute]
public static void SetCorrelationID(Session session, int correlationId);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows7.CrashDumpGrbit : Enum {
    public int value__;
    public static CrashDumpGrbit None;
    public static CrashDumpGrbit Minimum;
    public static CrashDumpGrbit Maximum;
    public static CrashDumpGrbit CacheMinimum;
    public static CrashDumpGrbit CacheMaximum;
    public static CrashDumpGrbit CacheIncludeDirtyPages;
    public static CrashDumpGrbit CacheIncludeCachedPages;
    public static CrashDumpGrbit CacheIncludeCorruptedPages;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows7.PrereadKeysGrbit : Enum {
    public int value__;
    public static PrereadKeysGrbit Forward;
    public static PrereadKeysGrbit Backwards;
}
public static class Microsoft.Isam.Esent.Interop.Windows7.Windows7Api : object {
    public static void JetConfigureProcessForCrashDump(CrashDumpGrbit grbit);
    public static void JetPrereadKeys(JET_SESID sesid, JET_TABLEID tableid, Byte[][] keys, Int32[] keyLengths, int keyIndex, int keyCount, Int32& keysPreread, PrereadKeysGrbit grbit);
    public static void JetPrereadKeys(JET_SESID sesid, JET_TABLEID tableid, Byte[][] keys, Int32[] keyLengths, int keyCount, Int32& keysPreread, PrereadKeysGrbit grbit);
}
public static class Microsoft.Isam.Esent.Interop.Windows7.Windows7ExceptionAction : object {
    internal static JET_ExceptionAction FailFast;
}
public static class Microsoft.Isam.Esent.Interop.Windows7.Windows7Grbits : object {
    public static ColumndefGrbit ColumnCompressed;
    public static SetColumnGrbit Compressed;
    public static SetColumnGrbit Uncompressed;
    public static InitGrbit ReplayIgnoreLostLogs;
    public static TermGrbit Dirty;
    public static TempTableGrbit IntrinsicLVsOnly;
    public static EnumerateColumnsGrbit EnumerateInRecordOnly;
    public static CommitTransactionGrbit ForceNewLog;
    public static SnapshotPrepareGrbit ExplicitPrepare;
    public static SetTableSequentialGrbit Forward;
    public static DefragGrbit NoPartialMerges;
    public static DefragGrbit DefragmentBTree;
    public static SetTableSequentialGrbit Backward;
    public static AttachDatabaseGrbit EnableAttachDbBackgroundMaintenance;
    public static CreateDatabaseGrbit EnableCreateDbBackgroundMaintenance;
}
public static class Microsoft.Isam.Esent.Interop.Windows7.Windows7IdxInfo : object {
    internal static JET_IdxInfo CreateIndex;
    internal static JET_IdxInfo CreateIndex2;
}
public static class Microsoft.Isam.Esent.Interop.Windows7.Windows7Param : object {
    public static JET_param WaypointLatency;
    public static JET_param DefragmentSequentialBTrees;
    public static JET_param DefragmentSequentialBTreesDensityCheckFrequency;
    public static JET_param LVChunkSizeMost;
    public static JET_param MaxCoalesceReadSize;
    public static JET_param MaxCoalesceWriteSize;
    public static JET_param MaxCoalesceReadGapSize;
    public static JET_param MaxCoalesceWriteGapSize;
    public static JET_param EnableDbScanInRecovery;
    public static JET_param DbScanThrottle;
    public static JET_param DbScanIntervalMinSec;
    public static JET_param DbScanIntervalMaxSec;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows8.CursorFilterGrbit : Enum {
    public int value__;
    public static CursorFilterGrbit None;
}
public class Microsoft.Isam.Esent.Interop.Windows8.DurableCommitCallback : EsentResource {
    private static TraceSwitch TraceSwitch;
    private JET_INSTANCE instance;
    private JET_PFNDURABLECOMMITCALLBACK wrappedCallback;
    private NATIVE_JET_PFNDURABLECOMMITCALLBACK wrapperCallback;
    public DurableCommitCallback(JET_INSTANCE instance, JET_PFNDURABLECOMMITCALLBACK wrappedCallback);
    private static DurableCommitCallback();
    public virtual string ToString();
    public void End();
    protected virtual void ReleaseResource();
    private JET_err NativeDurableCommitCallback(IntPtr instance, NATIVE_COMMIT_ID& commitIdSeen, UInt32 grbit);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows8.DurableCommitCallbackGrbit : Enum {
    public int value__;
    public static DurableCommitCallbackGrbit None;
}
public enum Microsoft.Isam.Esent.Interop.Windows8.ErrorInfoGrbit : Enum {
    public int value__;
    public static ErrorInfoGrbit None;
}
public class Microsoft.Isam.Esent.Interop.Windows8.JET_COMMIT_ID : object {
    private JET_SIGNATURE signLog;
    private long commitId;
    internal JET_COMMIT_ID(NATIVE_COMMIT_ID native);
    public static bool op_LessThan(JET_COMMIT_ID lhs, JET_COMMIT_ID rhs);
    public static bool op_GreaterThan(JET_COMMIT_ID lhs, JET_COMMIT_ID rhs);
    public static bool op_LessThanOrEqual(JET_COMMIT_ID lhs, JET_COMMIT_ID rhs);
    public static bool op_GreaterThanOrEqual(JET_COMMIT_ID lhs, JET_COMMIT_ID rhs);
    public static bool op_Equality(JET_COMMIT_ID lhs, JET_COMMIT_ID rhs);
    public static bool op_Inequality(JET_COMMIT_ID lhs, JET_COMMIT_ID rhs);
    public virtual string ToString();
    public sealed virtual int CompareTo(JET_COMMIT_ID other);
    public sealed virtual bool Equals(JET_COMMIT_ID other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal NATIVE_COMMIT_ID GetNativeCommitId();
}
public enum Microsoft.Isam.Esent.Interop.Windows8.JET_ERRCAT : Enum {
    public int value__;
    public static JET_ERRCAT Unknown;
    public static JET_ERRCAT Error;
    public static JET_ERRCAT Operation;
    public static JET_ERRCAT Fatal;
    public static JET_ERRCAT IO;
    public static JET_ERRCAT Resource;
    public static JET_ERRCAT Memory;
    public static JET_ERRCAT Quota;
    public static JET_ERRCAT Disk;
    public static JET_ERRCAT Data;
    public static JET_ERRCAT Corruption;
    public static JET_ERRCAT Inconsistent;
    public static JET_ERRCAT Fragmentation;
    public static JET_ERRCAT Api;
    public static JET_ERRCAT Usage;
    public static JET_ERRCAT State;
    public static JET_ERRCAT Obsolete;
    public static JET_ERRCAT Max;
}
public class Microsoft.Isam.Esent.Interop.Windows8.JET_ERRINFOBASIC : object {
    private JET_err errorValue;
    private JET_ERRCAT errorcatMostSpecific;
    private JET_ERRCAT[] arrayCategoricalHierarchy;
    private int sourceLine;
    private string sourceFile;
    public JET_err errValue { get; public set; }
    public JET_ERRCAT errcat { get; public set; }
    public JET_ERRCAT[] rgCategoricalHierarchy { get; public set; }
    public int lSourceLine { get; public set; }
    public string rgszSourceFile { get; public set; }
    [DebuggerStepThroughAttribute]
public JET_err get_errValue();
    public void set_errValue(JET_err value);
    [DebuggerStepThroughAttribute]
public JET_ERRCAT get_errcat();
    public void set_errcat(JET_ERRCAT value);
    [DebuggerStepThroughAttribute]
public JET_ERRCAT[] get_rgCategoricalHierarchy();
    public void set_rgCategoricalHierarchy(JET_ERRCAT[] value);
    [DebuggerStepThroughAttribute]
public int get_lSourceLine();
    public void set_lSourceLine(int value);
    [DebuggerStepThroughAttribute]
public string get_rgszSourceFile();
    public void set_rgszSourceFile(string value);
    public sealed virtual JET_ERRINFOBASIC DeepClone();
    public virtual string ToString();
    public sealed virtual bool ContentEquals(JET_ERRINFOBASIC other);
    internal NATIVE_ERRINFOBASIC GetNativeErrInfo();
    internal void SetFromNative(NATIVE_ERRINFOBASIC& value);
}
public enum Microsoft.Isam.Esent.Interop.Windows8.JET_ErrorInfo : Enum {
    public int value__;
    public static JET_ErrorInfo SpecificErr;
}
public class Microsoft.Isam.Esent.Interop.Windows8.JET_INDEX_COLUMN : object {
    [CompilerGeneratedAttribute]
private JET_COLUMNID <columnid>k__BackingField;
    [CompilerGeneratedAttribute]
private JetRelop <relop>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <pvData>k__BackingField;
    [CompilerGeneratedAttribute]
private JetIndexColumnGrbit <grbit>k__BackingField;
    public JET_COLUMNID columnid { get; public set; }
    public JetRelop relop { get; public set; }
    public Byte[] pvData { get; public set; }
    public JetIndexColumnGrbit grbit { get; public set; }
    [CompilerGeneratedAttribute]
public JET_COLUMNID get_columnid();
    [CompilerGeneratedAttribute]
public void set_columnid(JET_COLUMNID value);
    [CompilerGeneratedAttribute]
public JetRelop get_relop();
    [CompilerGeneratedAttribute]
public void set_relop(JetRelop value);
    [CompilerGeneratedAttribute]
public Byte[] get_pvData();
    [CompilerGeneratedAttribute]
public void set_pvData(Byte[] value);
    [CompilerGeneratedAttribute]
public JetIndexColumnGrbit get_grbit();
    [CompilerGeneratedAttribute]
public void set_grbit(JetIndexColumnGrbit value);
    public virtual string ToString();
    internal NATIVE_INDEX_COLUMN GetNativeIndexColumn(GCHandleCollection& handles);
}
public class Microsoft.Isam.Esent.Interop.Windows8.JET_INDEX_RANGE : object {
    [CompilerGeneratedAttribute]
private JET_INDEX_COLUMN[] <startColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private JET_INDEX_COLUMN[] <endColumns>k__BackingField;
    public JET_INDEX_COLUMN[] startColumns { get; public set; }
    public JET_INDEX_COLUMN[] endColumns { get; public set; }
    [CompilerGeneratedAttribute]
public JET_INDEX_COLUMN[] get_startColumns();
    [CompilerGeneratedAttribute]
public void set_startColumns(JET_INDEX_COLUMN[] value);
    [CompilerGeneratedAttribute]
public JET_INDEX_COLUMN[] get_endColumns();
    [CompilerGeneratedAttribute]
public void set_endColumns(JET_INDEX_COLUMN[] value);
    public virtual string ToString();
    internal NATIVE_INDEX_RANGE GetNativeIndexRange(GCHandleCollection& handles);
}
public class Microsoft.Isam.Esent.Interop.Windows8.JET_PFNDURABLECOMMITCALLBACK : MulticastDelegate {
    public JET_PFNDURABLECOMMITCALLBACK(object object, IntPtr method);
    public virtual JET_err Invoke(JET_INSTANCE instance, JET_COMMIT_ID pCommitIdSeen, DurableCommitCallbackGrbit grbit);
    public virtual IAsyncResult BeginInvoke(JET_INSTANCE instance, JET_COMMIT_ID pCommitIdSeen, DurableCommitCallbackGrbit grbit, AsyncCallback callback, object object);
    public virtual JET_err EndInvoke(IAsyncResult result);
}
public enum Microsoft.Isam.Esent.Interop.Windows8.JET_sesparam : Enum {
    public int value__;
    public static JET_sesparam Base;
    public static JET_sesparam CommitDefault;
    public static JET_sesparam CommitGenericContext;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows8.JetIndexColumnGrbit : Enum {
    public int value__;
    public static JetIndexColumnGrbit None;
    public static JetIndexColumnGrbit ZeroLength;
}
public enum Microsoft.Isam.Esent.Interop.Windows8.JetRelop : Enum {
    public int value__;
    public static JetRelop Equals;
    public static JetRelop PrefixEquals;
    public static JetRelop NotEquals;
    public static JetRelop LessThanOrEqual;
    public static JetRelop LessThan;
    public static JetRelop GreaterThanOrEqual;
    public static JetRelop GreaterThan;
    public static JetRelop BitmaskEqualsZero;
    public static JetRelop BitmaskNotEqualsZero;
}
internal class Microsoft.Isam.Esent.Interop.Windows8.NATIVE_COMMIT_ID : ValueType {
    public NATIVE_SIGNATURE signLog;
    public int reserved;
    public long commitId;
}
internal class Microsoft.Isam.Esent.Interop.Windows8.NATIVE_ERRINFOBASIC : ValueType {
    public static int HierarchySize;
    public static int SourceFileLength;
    public UInt32 cbStruct;
    public JET_err errValue;
    public JET_ERRCAT errcatMostSpecific;
    public Byte[] rgCategoricalHierarchy;
    public UInt32 lSourceLine;
    public string rgszSourceFile;
}
internal class Microsoft.Isam.Esent.Interop.Windows8.NATIVE_INDEX_COLUMN : ValueType {
    public UInt32 columnid;
    public UInt32 relop;
    public IntPtr pvData;
    public UInt32 cbData;
    public UInt32 grbit;
}
internal class Microsoft.Isam.Esent.Interop.Windows8.NATIVE_INDEX_RANGE : ValueType {
    public IntPtr rgStartColumns;
    public UInt32 cStartColumns;
    public IntPtr rgEndColumns;
    public UInt32 cEndColumns;
}
internal class Microsoft.Isam.Esent.Interop.Windows8.NATIVE_JET_PFNDURABLECOMMITCALLBACK : MulticastDelegate {
    public NATIVE_JET_PFNDURABLECOMMITCALLBACK(object object, IntPtr method);
    public virtual JET_err Invoke(IntPtr instance, NATIVE_COMMIT_ID& pCommitIdSeen, UInt32 grbit);
    public virtual IAsyncResult BeginInvoke(IntPtr instance, NATIVE_COMMIT_ID& pCommitIdSeen, UInt32 grbit, AsyncCallback callback, object object);
    public virtual JET_err EndInvoke(NATIVE_COMMIT_ID& pCommitIdSeen, IAsyncResult result);
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows8.PrereadIndexRangesGrbit : Enum {
    public int value__;
    public static PrereadIndexRangesGrbit Forward;
    public static PrereadIndexRangesGrbit Backwards;
    public static PrereadIndexRangesGrbit FirstPageOnly;
    public static PrereadIndexRangesGrbit NormalizedKey;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows8.ResizeDatabaseGrbit : Enum {
    public int value__;
    public static ResizeDatabaseGrbit None;
    public static ResizeDatabaseGrbit OnlyGrow;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows8.StopServiceGrbit : Enum {
    public int value__;
    public static StopServiceGrbit All;
    public static StopServiceGrbit BackgroundUserTasks;
    public static StopServiceGrbit QuiesceCaches;
    public static StopServiceGrbit Resume;
}
public static class Microsoft.Isam.Esent.Interop.Windows8.Windows8Api : object {
    public static void JetStopServiceInstance2(JET_INSTANCE instance, StopServiceGrbit grbit);
    public static void JetBeginTransaction3(JET_SESID sesid, long userTransactionId, BeginTransactionGrbit grbit);
    public static void JetCommitTransaction2(JET_SESID sesid, CommitTransactionGrbit grbit, TimeSpan durableCommit, JET_COMMIT_ID& commitId);
    public static void JetGetErrorInfo(JET_err error, JET_ERRINFOBASIC& errinfo);
    public static void JetResizeDatabase(JET_SESID sesid, JET_DBID dbid, int desiredPages, Int32& actualPages, ResizeDatabaseGrbit grbit);
    public static void JetCreateIndex4(JET_SESID sesid, JET_TABLEID tableid, JET_INDEXCREATE[] indexcreates, int numIndexCreates);
    public static void JetOpenTemporaryTable2(JET_SESID sesid, JET_OPENTEMPORARYTABLE temporarytable);
    public static void JetCreateTableColumnIndex4(JET_SESID sesid, JET_DBID dbid, JET_TABLECREATE tablecreate);
    public static void JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Int32& value);
    public static void JetGetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Byte[] data, int length, Int32& actualDataSize);
    public static void JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, int value);
    public static void JetSetSessionParameter(JET_SESID sesid, JET_sesparam sesparamid, Byte[] data, int dataSize);
    public static bool JetTryPrereadIndexRanges(JET_SESID sesid, JET_TABLEID tableid, JET_INDEX_RANGE[] indexRanges, int rangeIndex, int rangeCount, Int32& rangesPreread, JET_COLUMNID[] columnsPreread, PrereadIndexRangesGrbit grbit);
    public static void JetPrereadIndexRanges(JET_SESID sesid, JET_TABLEID tableid, JET_INDEX_RANGE[] indexRanges, int rangeIndex, int rangeCount, Int32& rangesPreread, JET_COLUMNID[] columnsPreread, PrereadIndexRangesGrbit grbit);
    public static void PrereadKeyRanges(JET_SESID sesid, JET_TABLEID tableid, Byte[][] keysStart, Int32[] keyStartLengths, Byte[][] keysEnd, Int32[] keyEndLengths, int rangeIndex, int rangeCount, Int32& rangesPreread, JET_COLUMNID[] columnsPreread, PrereadIndexRangesGrbit grbit);
    public static void JetSetCursorFilter(JET_SESID sesid, JET_TABLEID tableid, JET_INDEX_COLUMN[] filters, CursorFilterGrbit grbit);
}
public static class Microsoft.Isam.Esent.Interop.Windows8.Windows8Grbits : object {
    public static InitGrbit KeepDbAttachedAtEndOfRecovery;
    public static AttachDatabaseGrbit PurgeCacheOnAttach;
    public static CreateIndexGrbit IndexDotNetGuid;
    public static TempTableGrbit TTDotNetGuid;
}
public static class Microsoft.Isam.Esent.Interop.Windows8.Windows8IdxInfo : object {
    internal static JET_IdxInfo InfoCreateIndex3;
    internal static JET_IdxInfo LocaleName;
}
public static class Microsoft.Isam.Esent.Interop.Windows8.Windows8Param : object {
    public static JET_param CachePriority;
    public static JET_param MaxTransactionSize;
    public static JET_param PrereadIOMax;
    public static JET_param EnableDBScanSerialization;
    public static JET_param HungIOThreshold;
    public static JET_param HungIOActions;
    public static JET_param MinDataForXpress;
    public static JET_param ProcessFriendlyName;
    public static JET_param DurableCommitCallback;
}
[FlagsAttribute]
public enum Microsoft.Isam.Esent.Interop.Windows81.ShrinkDatabaseGrbit : Enum {
    public int value__;
    public static ShrinkDatabaseGrbit Off;
    public static ShrinkDatabaseGrbit On;
    public static ShrinkDatabaseGrbit Realtime;
}
public static class Microsoft.Isam.Esent.Interop.Windows81.Windows81DbInfo : object {
    public static JET_DbInfo FilesizeOnDisk;
}
public static class Microsoft.Isam.Esent.Interop.Windows81.Windows81Grbits : object {
    public static ResizeDatabaseGrbit OnlyShrink;
}
public static class Microsoft.Isam.Esent.Interop.Windows81.Windows81Param : object {
    public static JET_param EnableShrinkDatabase;
}
