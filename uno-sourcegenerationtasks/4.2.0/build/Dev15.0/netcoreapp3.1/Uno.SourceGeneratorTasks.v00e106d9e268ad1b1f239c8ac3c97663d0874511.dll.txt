public class Uno.SourceGeneration.Helpers.BinaryLoggerEventSource : object {
    [CompilerGeneratedAttribute]
private BuildMessageEventHandler MessageRaised;
    [CompilerGeneratedAttribute]
private BuildErrorEventHandler ErrorRaised;
    [CompilerGeneratedAttribute]
private BuildWarningEventHandler WarningRaised;
    [CompilerGeneratedAttribute]
private BuildStartedEventHandler BuildStarted;
    [CompilerGeneratedAttribute]
private BuildFinishedEventHandler BuildFinished;
    [CompilerGeneratedAttribute]
private ProjectStartedEventHandler ProjectStarted;
    [CompilerGeneratedAttribute]
private ProjectFinishedEventHandler ProjectFinished;
    [CompilerGeneratedAttribute]
private TargetStartedEventHandler TargetStarted;
    [CompilerGeneratedAttribute]
private TargetFinishedEventHandler TargetFinished;
    [CompilerGeneratedAttribute]
private TaskStartedEventHandler TaskStarted;
    [CompilerGeneratedAttribute]
private TaskFinishedEventHandler TaskFinished;
    [CompilerGeneratedAttribute]
private CustomBuildEventHandler CustomEventRaised;
    [CompilerGeneratedAttribute]
private BuildStatusEventHandler StatusEventRaised;
    [CompilerGeneratedAttribute]
private AnyEventHandler AnyEventRaised;
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnyEventRaised(AnyEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnyEventRaised(AnyEventHandler value);
    public void RaiseMessage(string senderName, string message, MessageImportance importance);
    public void RaiseWarning(string senderName, string message);
    public void RaiseError(string senderName, string message);
    public void RaiseBuildStart();
    public void RaiseBuildFinished();
}
internal class Uno.SourceGeneration.Helpers.BinaryLoggerForwarder : object {
    private BinaryLoggerEventSource _eventSource;
    private string _categoryName;
    public BinaryLoggerForwarder(string categoryName, BinaryLoggerEventSource eventSource);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public void Dispose();
}
internal class Uno.SourceGeneration.Helpers.BinaryLoggerForwarderProvider : object {
    private BinaryLoggerEventSource _source;
    private BinaryLogger _msbuildLogger;
    public BinaryLoggerForwarderProvider(string outputFilePath);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
internal class Uno.SourceGeneration.Helpers.BinaryLoggerReplayHelper : object {
    public static void Replay(IBuildEngine engine, string filePath, TaskLoggingHelper log);
}
public class Uno.SourceGeneration.Helpers.RuntimeHelpers : object {
    public static bool IsNetCore { get; }
    public static bool IsMono { get; }
    public static bool get_IsNetCore();
    public static bool get_IsMono();
}
internal class Uno.SourceGeneration.Host.GenerationClient.GenerationServerConnection : object {
    private static ILogger _log;
    internal static string ServerNameDesktop;
    internal static string ServerNameCoreClr;
    internal static int TimeOutMsExistingProcess;
    internal static int TimeOutMsNewProcess;
    private static GenerationServerConnection();
    internal static bool IsCompilerServerSupported(string tempPath);
    public static Task`1<GenerationResponse> RunServerGeneration(string sharedCompilationId, List`1<string> arguments, GenerationsPathsInfo buildPaths, string keepAlive, CancellationToken cancellationToken);
    internal bool TryShutdownGenerationServer(string pipeName, GenerationsPathsInfo buildPaths);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.GenerationClient.GenerationServerConnection/<RunServerGenerationCore>d__8")]
internal static Task`1<GenerationResponse> RunServerGenerationCore(List`1<string> arguments, GenerationsPathsInfo buildPaths, string pipeName, string keepAlive, Nullable`1<int> timeoutOverride, Func`4<string, string, bool, bool> tryCreateServerFunc, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.GenerationClient.GenerationServerConnection/<TryGeneration>d__9")]
private static Task`1<GenerationResponse> TryGeneration(NamedPipeClientStream pipeStream, GenerationRequest request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.GenerationClient.GenerationServerConnection/<CreateMonitorDisconnectTask>d__10")]
internal static Task CreateMonitorDisconnectTask(PipeStream pipeStream, string identifier, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.GenerationClient.GenerationServerConnection/<TryConnectToServerAsync>d__11")]
internal static Task`1<NamedPipeClientStream> TryConnectToServerAsync(string pipeName, int timeoutMs, CancellationToken cancellationToken);
    internal static bool TryCreateServerCore(string clientDir, string pipeName, bool isShutdown);
    private static bool CheckPipeConnectionOwnership(NamedPipeClientStream pipeStream);
    private static UInt32 GetEUid();
    private static int GetPeerID(SafeHandle socket, UInt32& euid);
    internal static bool CheckIdentityUnix(PipeStream stream);
    private static ObjectSecurity GetPipeSecurity(PipeStream pipeStream);
    internal static string GetPipeNameForPathOpt(string serverExeDirectory);
    internal static bool IsPipePathTooLong(string pipeName, string tempPath);
    internal static string GetBasePipeName(string compilerExeDirectory);
    internal static bool WasServerMutexOpen(string mutexName);
    internal static string GetServerMutexName(string pipeName);
    internal static string GetClientMutexName(string pipeName);
    public static string GetTempPath(string workingDir);
}
internal class Uno.SourceGeneration.Host.GenerationClient.GenerationsPathsInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <ClientDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectory>k__BackingField;
    internal string ClientDirectory { get; }
    internal string WorkingDirectory { get; }
    internal string TempDirectory { get; }
    internal GenerationsPathsInfo(string clientDir, string workingDir, string tempDir);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal string get_ClientDirectory();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal string get_WorkingDirectory();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
internal string get_TempDirectory();
}
[AttributeUsageAttribute("1")]
internal class Uno.SourceGeneration.Host.Helpers.CommitHashAttribute : Attribute {
    internal string Hash;
    public CommitHashAttribute(string hash);
}
[DefaultMemberAttribute("Item")]
internal class Uno.SourceGeneration.Host.Helpers.ConcurrentLruCache`2 : object {
    private int _capacity;
    private Dictionary`2<K, CacheValue<K, V>> _cache;
    private LinkedList`1<K> _nodeList;
    private object _lockObject;
    internal IEnumerable`1<KeyValuePair`2<K, V>> TestingEnumerable { get; }
    public V Item { get; public set; }
    public ConcurrentLruCache`2(int capacity);
    public ConcurrentLruCache`2(KeyValuePair`2[] array);
    internal IEnumerable`1<KeyValuePair`2<K, V>> get_TestingEnumerable();
    public void Add(K key, V value);
    private void MoveNodeToTop(LinkedListNode`1<K> node);
    private void UnsafeEvictLastNode();
    private void UnsafeAddNodeToTop(K key, V value);
    private void UnsafeAdd(K key, V value, bool throwExceptionIfKeyExists);
    public V get_Item(K key);
    public void set_Item(K key, V value);
    public bool TryGetValue(K key, V& value);
    public bool UnsafeTryGetValue(K key, V& value);
    public V GetOrAdd(K key, V value);
    public V GetOrAdd(K key, Func`1<V> creator);
    public V GetOrAdd(K key, T arg, Func`2<T, V> creator);
}
internal static class Uno.SourceGeneration.Host.Helpers.CoreClrShim : object {
    internal static bool IsRunningOnCoreClr { get; }
    internal static bool get_IsRunningOnCoreClr();
}
internal class Uno.SourceGeneration.Host.Helpers.FileKey : ValueType {
    public string FullPath;
    public DateTime Timestamp;
    public FileKey(string fullPath, DateTime timestamp);
    public static FileKey Create(string fullPath);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public sealed virtual bool Equals(FileKey other);
}
internal static class Uno.SourceGeneration.Host.Helpers.FileNameUtilities : object {
    private static string DirectorySeparatorStr;
    internal static char DirectorySeparatorChar;
    internal static char AltDirectorySeparatorChar;
    internal static char VolumeSeparatorChar;
    internal static bool IsFileName(string path);
    private static int IndexOfExtension(string path);
    internal static string GetExtension(string path);
    private static string RemoveExtension(string path);
    internal static string ChangeExtension(string path, string extension);
    internal static int IndexOfFileName(string path);
    internal static string GetFileName(string path, bool includeExtension);
}
internal static class Uno.SourceGeneration.Host.Helpers.FileUtilities : object {
    private static Char[] s_invalidPathChars;
    private static FileUtilities();
    internal static string ResolveRelativePath(string path, string basePath, string baseDirectory, IEnumerable`1<string> searchPaths, Func`2<string, bool> fileExists);
    internal static string ResolveRelativePath(string path, string baseDirectory);
    internal static string ResolveRelativePath(string path, string basePath, string baseDirectory);
    private static string ResolveRelativePath(PathKind kind, string path, string basePath, string baseDirectory);
    private static string GetBaseDirectory(string basePath, string baseDirectory);
    internal static string NormalizeRelativePath(string path, string basePath, string baseDirectory);
    internal static string NormalizeAbsolutePath(string path);
    internal static string NormalizeDirectoryPath(string path);
    internal static string TryNormalizeAbsolutePath(string path);
    internal static Stream OpenRead(string fullPath);
    internal static Stream OpenAsyncRead(string fullPath);
    internal static T RethrowExceptionsAsIOException(Func`1<T> operation);
    internal static Stream CreateFileStreamChecked(Func`2<string, Stream> factory, string path, string paramName);
    internal static DateTime GetFileTimeStamp(string fullPath);
    internal static long GetFileLength(string fullPath);
    internal static Stream OpenFileStream(string path);
}
internal static class Uno.SourceGeneration.Host.Helpers.Hash : object {
    internal static int FnvOffsetBias;
    internal static int FnvPrime;
    internal static int Combine(int newKey, int currentKey);
    internal static int Combine(bool newKeyPart, int currentKey);
    internal static int Combine(T newKeyPart, int currentKey);
    internal static int CombineValues(IEnumerable`1<T> values, int maxItemsToHash);
    internal static int CombineValues(T[] values, int maxItemsToHash);
    internal static int CombineValues(ImmutableArray`1<T> values, int maxItemsToHash);
    internal static int CombineValues(IEnumerable`1<string> values, StringComparer stringComparer, int maxItemsToHash);
    internal static int GetFNVHashCode(Byte[] data);
    internal static int GetFNVHashCode(ReadOnlySpan`1<byte> data, Boolean& isAscii);
    internal static int GetFNVHashCode(ImmutableArray`1<byte> data);
    internal static int GetFNVHashCode(string text, int start, int length);
    internal static int GetCaseInsensitiveFNVHashCode(string text);
    internal static int GetCaseInsensitiveFNVHashCode(string text, int start, int length);
    internal static int GetFNVHashCode(string text, int start);
    internal static int GetFNVHashCode(string text);
    internal static int GetFNVHashCode(StringBuilder text);
    internal static int GetFNVHashCode(Char[] text, int start, int length);
    internal static int GetFNVHashCode(char ch);
    internal static int CombineFNVHash(int hashCode, string text);
    internal static int CombineFNVHash(int hashCode, char ch);
}
internal class Uno.SourceGeneration.Host.Helpers.MemoryHelper : object {
    public int Length;
    public int PercentPhysicalUsed;
    public ulong MaxPhysical;
    public ulong AvailablePhysical;
    public ulong MaxPageFile;
    public ulong AvailablePageFile;
    public ulong MaxVirtual;
    public ulong AvailableVirtual;
    public ulong Reserved;
    public static bool IsMemoryAvailable();
    private static bool GlobalMemoryStatusEx(MemoryHelper buffer);
}
internal static class Uno.SourceGeneration.Host.Helpers.NativeMethods : object {
    internal static IntPtr NullPtr;
    internal static IntPtr InvalidIntPtr;
    internal static UInt32 NORMAL_PRIORITY_CLASS;
    internal static UInt32 CREATE_NO_WINDOW;
    internal static int STARTF_USESTDHANDLES;
    internal static int ERROR_SUCCESS;
    private static NativeMethods();
    internal static bool CloseHandle(IntPtr hObject);
    internal static bool CreateProcess(string lpApplicationName, StringBuilder lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, UInt32 dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation);
    internal static IntPtr GetCommandLine();
}
internal enum Uno.SourceGeneration.Host.Helpers.PathKind : Enum {
    public int value__;
    public static PathKind Empty;
    public static PathKind Relative;
    public static PathKind RelativeToCurrentDirectory;
    public static PathKind RelativeToCurrentParent;
    public static PathKind RelativeToCurrentRoot;
    public static PathKind RelativeToDriveDirectory;
    public static PathKind Absolute;
}
internal static class Uno.SourceGeneration.Host.Helpers.PathUtilities : object {
    internal static char DirectorySeparatorChar;
    internal static char AltDirectorySeparatorChar;
    internal static string ParentRelativeDirectory;
    internal static string ThisDirectory;
    internal static string DirectorySeparatorStr;
    internal static char VolumeSeparatorChar;
    private static Char[] s_pathChars;
    public static IEqualityComparer`1<string> Comparer;
    internal static bool IsUnixLikePlatform { get; }
    private static PathUtilities();
    internal static bool get_IsUnixLikePlatform();
    public static bool IsDirectorySeparator(char c);
    public static bool IsAnyDirectorySeparator(char c);
    public static string TrimTrailingSeparators(string s);
    public static string EnsureTrailingSeparator(string s);
    public static string GetExtension(string path);
    public static string ChangeExtension(string path, string extension);
    public static string RemoveExtension(string path);
    public static string GetFileName(string path, bool includeExtension);
    public static string GetDirectoryName(string path);
    internal static string GetDirectoryName(string path, bool isUnixLike);
    internal static bool IsSameDirectoryOrChildOf(string child, string parent);
    public static string GetPathRoot(string path);
    private static string GetPathRoot(string path, bool isUnixLike);
    private static string GetWindowsRoot(string path);
    private static int ConsumeDirectorySeparators(string path, int length, int i);
    private static string GetUnixRoot(string path);
    public static PathKind GetPathKind(string path);
    public static bool IsAbsolute(string path);
    private static bool IsDriveRootedAbsolutePath(string path);
    public static string CombineAbsoluteAndRelativePaths(string root, string relativePath);
    public static string CombinePossiblyRelativeAndRelativePaths(string rootOpt, string relativePath);
    public static string CombinePathsUnchecked(string root, string relativePath);
    private static string RemoveTrailingDirectorySeparator(string path);
    public static bool IsFilePath(string assemblyDisplayNameOrPath);
    public static bool ContainsPathComponent(string path, string component, bool ignoreCase);
    public static string GetRelativePath(string directory, string fullPath);
    public static bool IsChildPath(string parentPath, string childPath);
    private static string GetRelativeChildPath(string parentPath, string childPath);
    private static String[] GetPathParts(string path);
    public static bool PathsEqual(string path1, string path2);
    private static bool PathsEqual(string path1, string path2, int length);
    private static bool PathCharEqual(char x, char y);
    private static int PathHashCode(string path);
    public static string NormalizePathPrefix(string filePath, ImmutableArray`1<KeyValuePair`2<string, string>> pathMap);
    public static bool IsValidFilePath(string fullPath);
}
internal static class Uno.SourceGeneration.Host.Helpers.PlatformInformation : object {
    public static bool IsWindows { get; }
    public static bool IsUnix { get; }
    public static bool IsRunningOnMono { get; }
    public static bool get_IsWindows();
    public static bool get_IsUnix();
    public static bool get_IsRunningOnMono();
}
internal class Uno.SourceGeneration.Host.Helpers.PROCESS_INFORMATION : ValueType {
    public IntPtr hProcess;
    public IntPtr hThread;
    public int dwProcessId;
    public int dwThreadId;
}
[ExtensionAttribute]
internal static class Uno.SourceGeneration.Host.Helpers.ReflectionUtilities : object {
    private static Type Missing;
    private static ReflectionUtilities();
    public static Type TryGetType(string assemblyQualifiedName);
    public static Type TryGetType(Type& lazyType, string assemblyQualifiedName);
    public static Type GetTypeFromEither(string contractName, string desktopName);
    public static Type GetTypeFromEither(Type& lazyType, string contractName, string desktopName);
    public static T FindItem(IEnumerable`1<T> collection, Type[] paramTypes);
    [ExtensionAttribute]
internal static MethodInfo GetDeclaredMethod(TypeInfo typeInfo, string name, Type[] paramTypes);
    [ExtensionAttribute]
internal static ConstructorInfo GetDeclaredConstructor(TypeInfo typeInfo, Type[] paramTypes);
    [ExtensionAttribute]
public static T CreateDelegate(MethodInfo methodInfo);
    [ExtensionAttribute]
public static T InvokeConstructor(ConstructorInfo constructorInfo, Object[] args);
    [ExtensionAttribute]
public static object InvokeConstructor(ConstructorInfo constructorInfo, Object[] args);
    [ExtensionAttribute]
public static T Invoke(MethodInfo methodInfo, object obj, Object[] args);
}
internal class Uno.SourceGeneration.Host.Helpers.STARTUPINFO : ValueType {
    internal int cb;
    internal string lpReserved;
    internal string lpDesktop;
    internal string lpTitle;
    internal int dwX;
    internal int dwY;
    internal int dwXSize;
    internal int dwYSize;
    internal int dwXCountChars;
    internal int dwYCountChars;
    internal int dwFillAttribute;
    internal int dwFlags;
    internal short wShowWindow;
    internal short cbReserved2;
    internal IntPtr lpReserved2;
    internal IntPtr hStdInput;
    internal IntPtr hStdOutput;
    internal IntPtr hStdError;
}
[ExtensionAttribute]
internal static class Uno.SourceGeneration.host.Helpers.TopologicalSorting : object {
    [ExtensionAttribute]
internal static IReadOnlyCollection`1<IReadOnlyCollection`1<T>> GroupSort(IReadOnlyCollection`1<T> nodes, IReadOnlyCollection`1<ValueTuple`2<T, T>> edges, IEqualityComparer`1<T> comparer);
}
internal class Uno.SourceGeneration.Host.Messages.CompletedGenerationResponse : GenerationResponse {
    public int ReturnCode;
    public bool Utf8Output;
    public string Output;
    public string ErrorOutput;
    public ResponseType Type { get; }
    public CompletedGenerationResponse(int returnCode, bool utf8output, string output);
    public virtual ResponseType get_Type();
    public static CompletedGenerationResponse Create(BinaryReader reader);
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal static class Uno.SourceGeneration.Host.Messages.GenerationProtocolConstants : object {
    public static UInt32 ProtocolVersion;
    public static string ReadLengthPrefixedString(BinaryReader reader);
    public static void WriteLengthPrefixedString(BinaryWriter writer, string value);
    public static string GetCommitHash();
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationProtocolConstants/<ReadAllAsync>d__5")]
internal static Task ReadAllAsync(Stream stream, Byte[] buffer, int count, CancellationToken cancellationToken);
}
internal class Uno.SourceGeneration.Host.Messages.GenerationRequest : object {
    public UInt32 ProtocolVersion;
    public ReadOnlyCollection`1<Argument> Arguments;
    public string CompilerHash;
    public GenerationRequest(UInt32 protocolVersion, string compilerHash, IEnumerable`1<Argument> arguments);
    public static GenerationRequest Create(string workingDirectory, string tempDirectory, string compilerHash, IList`1<string> args, string keepAlive);
    public static GenerationRequest CreateShutdown();
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationRequest/<ReadAsync>d__6")]
public static Task`1<GenerationRequest> ReadAsync(Stream inStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationRequest/<WriteAsync>d__7")]
public Task WriteAsync(Stream outStream, CancellationToken cancellationToken);
}
internal abstract class Uno.SourceGeneration.Host.Messages.GenerationResponse : object {
    public ResponseType Type { get; }
    public abstract virtual ResponseType get_Type();
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationResponse/<WriteAsync>d__3")]
public Task WriteAsync(Stream outStream, CancellationToken cancellationToken);
    protected abstract virtual void AddResponseBody(BinaryWriter writer);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationResponse/<ReadAsync>d__5")]
public static Task`1<GenerationResponse> ReadAsync(Stream stream, CancellationToken cancellationToken);
}
internal class Uno.SourceGeneration.Host.Messages.IncorrectHashGenerationResponse : GenerationResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal class Uno.SourceGeneration.Host.Messages.MismatchedVersionGenerationResponse : GenerationResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal class Uno.SourceGeneration.Host.Messages.RejectedGenerationResponse : GenerationResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal class Uno.SourceGeneration.Host.Messages.ShutdownGenerationResponse : GenerationResponse {
    public int ServerProcessId;
    public ResponseType Type { get; }
    public ShutdownGenerationResponse(int serverProcessId);
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
    public static ShutdownGenerationResponse Create(BinaryReader reader);
}
[DataContractAttribute]
public class Uno.SourceGeneratorTasks.BuildEnvironment : object {
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinLogOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BinLogEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSBuildBinPath>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SourceGenerators>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ReferencePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AdditionalProperties>k__BackingField;
    [DataMemberAttribute]
public string Configuration { get; public set; }
    [DataMemberAttribute]
public string Platform { get; public set; }
    [DataMemberAttribute]
public string ProjectFile { get; public set; }
    [DataMemberAttribute]
public string OutputPath { get; public set; }
    [DataMemberAttribute]
public string TargetFramework { get; public set; }
    [DataMemberAttribute]
public string VisualStudioVersion { get; public set; }
    [DataMemberAttribute]
public string TargetFrameworkRootPath { get; public set; }
    [DataMemberAttribute]
public string BinLogOutputPath { get; public set; }
    [DataMemberAttribute]
public bool BinLogEnabled { get; public set; }
    [DataMemberAttribute]
public string MSBuildBinPath { get; public set; }
    [DataMemberAttribute]
public String[] AdditionalAssemblies { get; public set; }
    [DataMemberAttribute]
public String[] SourceGenerators { get; public set; }
    [DataMemberAttribute]
public String[] ReferencePath { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> AdditionalProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
public void set_ProjectFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public void set_VisualStudioVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkRootPath();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkRootPath(string value);
    [CompilerGeneratedAttribute]
public string get_BinLogOutputPath();
    [CompilerGeneratedAttribute]
public void set_BinLogOutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_BinLogEnabled();
    [CompilerGeneratedAttribute]
public void set_BinLogEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_MSBuildBinPath();
    [CompilerGeneratedAttribute]
public void set_MSBuildBinPath(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalAssemblies();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssemblies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_SourceGenerators();
    [CompilerGeneratedAttribute]
public void set_SourceGenerators(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ReferencePath();
    [CompilerGeneratedAttribute]
public void set_ReferencePath(String[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(Dictionary`2<string, string> value);
}
internal class Uno.SourceGeneratorTasks.Helpers.BuildTargets : object {
    private Project _project;
    private List`1<string> _buildTargets;
    private static Char[] s_targetsSplitChars;
    public String[] Targets { get; }
    public BuildTargets(Project project, String[] targets);
    private static BuildTargets();
    public String[] get_Targets();
    public void Remove(string target);
    public void RemoveAfter(string target, bool includeTargetInRemoval);
    private bool DependsOn(string target, string dependentTarget);
    private static IEnumerable`1<string> SplitTargets(string targets);
    private static IEnumerable`1<string> GetTargetDependents(Project project, string targetName);
    internal static IEnumerable`1<string> GetTopLevelTargets(Project project);
}
public class Uno.SourceGeneratorTasks.Helpers.DisposableAction : object {
    [CompilerGeneratedAttribute]
private Action <Action>k__BackingField;
    public Action Action { get; private set; }
    public DisposableAction(Action action);
    [CompilerGeneratedAttribute]
public Action get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(Action value);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.LogExtensionPoint : object {
    private static ILoggerFactory _loggerFactory;
    private static object _gate;
    public static ILoggerFactory AmbientLoggerFactory { get; }
    private static LogExtensionPoint();
    public static ILoggerFactory get_AmbientLoggerFactory();
    [ExtensionAttribute]
public static ILogger Log(Type forType);
    [ExtensionAttribute]
public static ILogger Log(T instance);
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.LogExtensions : object {
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Debug(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void Debug(ILogger log, Func`1<object> messageBuilder, Exception exception);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Info(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void Info(ILogger log, Func`1<object> messageBuilder, Exception exception);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILogger log, Func`1<object> messageBuilder, Exception exception);
    [ExtensionAttribute]
public static void Warn(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Error(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void Error(ILogger log, Func`1<object> messageBuilder, Exception exception);
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.StringExtensions : object {
    [ExtensionAttribute]
public static string JoinBy(IEnumerable`1<string> items, string joinBy);
    [ExtensionAttribute]
public static bool HasValue(string instance);
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.TypeExtensions : object {
    [IteratorStateMachineAttribute("Uno.SourceGeneratorTasks.Helpers.TypeExtensions/<GetBaseTypes>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
}
public class Uno.SourceGeneratorTasks.Logger.RemotableLogger2 : MarshalByRefObject {
    private ILogger _log;
    public RemotableLogger2(ILogger log);
    public virtual object InitializeLifetimeService();
    public void WriteLog(int logLevel, string message);
}
public class Uno.SourceGeneratorTasks.Logger.RemoteLogger : MarshalByRefObject {
    private RemotableLogger2 _taskLog;
    private string _loggerName;
    public RemotableLogger2 TaskLog { get; public set; }
    public RemoteLogger(string loggerName);
    public virtual object InitializeLifetimeService();
    public RemotableLogger2 get_TaskLog();
    public void set_TaskLog(RemotableLogger2 value);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Uno.SourceGeneratorTasks.Logger.RemoteLoggerProvider : object {
    private List`1<RemoteLogger> _loggers;
    private RemotableLogger2 _taskLog;
    public RemotableLogger2 TaskLog { get; public set; }
    public RemotableLogger2 get_TaskLog();
    public void set_TaskLog(RemotableLogger2 value);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
public class Uno.SourceGeneratorTasks.SourceGenerationTask_v00e106d9e268ad1b1f239c8ac3c97663d0874511 : Task {
    [CompilerGeneratedAttribute]
private string <ProjectFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CaptureGenerationHostOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UseGenerationController>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UseGenerationHost>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AdditionalAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SourceGenerators>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BinLogOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BinLogEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SharedGenerationId>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReferencePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <GenereratedFiles>k__BackingField;
    private CancellationTokenSource _sharedCompileCts;
    [RequiredAttribute]
public string ProjectFile { get; public set; }
    [RequiredAttribute]
public string Platform { get; public set; }
    [RequiredAttribute]
public string Configuration { get; public set; }
    public string TargetFramework { get; public set; }
    public string VisualStudioVersion { get; public set; }
    public string TargetFrameworkRootPath { get; public set; }
    public string CaptureGenerationHostOutput { get; public set; }
    public string UseGenerationController { get; public set; }
    public string UseGenerationHost { get; public set; }
    public String[] AdditionalAssemblies { get; public set; }
    [RequiredAttribute]
public String[] SourceGenerators { get; public set; }
    public string OutputPath { get; public set; }
    public string BinLogOutputPath { get; public set; }
    public bool BinLogEnabled { get; public set; }
    public string SharedGenerationId { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ReferencePath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] AdditionalProperties { get; public set; }
    [OutputAttribute]
public String[] GenereratedFiles { get; public set; }
    public bool SupportsGenerationController { get; }
    public bool SupportsGenerationHost { get; }
    public bool IsMonoMSBuildCompatible { get; }
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
public void set_ProjectFile(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public void set_VisualStudioVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkRootPath();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkRootPath(string value);
    [CompilerGeneratedAttribute]
public string get_CaptureGenerationHostOutput();
    [CompilerGeneratedAttribute]
public void set_CaptureGenerationHostOutput(string value);
    [CompilerGeneratedAttribute]
public string get_UseGenerationController();
    [CompilerGeneratedAttribute]
public void set_UseGenerationController(string value);
    [CompilerGeneratedAttribute]
public string get_UseGenerationHost();
    [CompilerGeneratedAttribute]
public void set_UseGenerationHost(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalAssemblies();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssemblies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_SourceGenerators();
    [CompilerGeneratedAttribute]
public void set_SourceGenerators(String[] value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_BinLogOutputPath();
    [CompilerGeneratedAttribute]
public void set_BinLogOutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_BinLogEnabled();
    [CompilerGeneratedAttribute]
public void set_BinLogEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_SharedGenerationId();
    [CompilerGeneratedAttribute]
public void set_SharedGenerationId(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferencePath();
    [CompilerGeneratedAttribute]
public void set_ReferencePath(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_GenereratedFiles();
    [CompilerGeneratedAttribute]
public void set_GenereratedFiles(String[] value);
    public virtual bool Execute();
    public bool get_SupportsGenerationController();
    public bool get_SupportsGenerationHost();
    private void GenerateWithHostController();
    private string GenerateServerId(BuildEnvironment buildEnvironment);
    private void GenerateWithHost();
    private string GetHostPath();
    public bool get_IsMonoMSBuildCompatible();
    private BuildEnvironment CreateBuildEnvironment();
    private string EnsureRootedPath(string projectFile, string targetPath);
    [CompilerGeneratedAttribute]
internal static ProcessStartInfo <GenerateWithHost>g__buildInfo|80_0(<>c__DisplayClass80_0& );
}
