public class Microsoft.Extensions.Logging.Debug.DebugLogger : object {
    private Func`3<string, LogLevel, bool> _filter;
    private string _name;
    public DebugLogger(string name);
    public DebugLogger(string name, Func`3<string, LogLevel, bool> filter);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private void DebugWriteLine(string message, string name);
}
public class Microsoft.Extensions.Logging.Debug.DebugLoggerProvider : object {
    private Func`3<string, LogLevel, bool> _filter;
    public DebugLoggerProvider(Func`3<string, LogLevel, bool> filter);
    public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggerFactory AddDebug(ILoggerFactory factory);
    [ExtensionAttribute]
public static ILoggerFactory AddDebug(ILoggerFactory factory, Func`3<string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static ILoggerFactory AddDebug(ILoggerFactory factory, LogLevel minLevel);
}
