[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddLogging(IServiceCollection services);
}
internal class Microsoft.Extensions.Logging.Logger : object {
    private LoggerFactory _loggerFactory;
    private string _name;
    private ILogger[] _loggers;
    public Logger(LoggerFactory loggerFactory, string name);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
    internal void AddProvider(ILoggerProvider provider);
}
public class Microsoft.Extensions.Logging.LoggerFactory : object {
    private Dictionary`2<string, Logger> _loggers;
    private ILoggerProvider[] _providers;
    private object _sync;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void AddProvider(ILoggerProvider provider);
    internal ILoggerProvider[] GetProviders();
    protected virtual bool CheckDisposed();
    public sealed virtual void Dispose();
}
