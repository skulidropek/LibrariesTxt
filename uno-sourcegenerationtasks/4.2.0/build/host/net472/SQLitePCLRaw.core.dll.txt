public class SQLitePCL.delegate_authorizer : MulticastDelegate {
    public delegate_authorizer(object object, IntPtr method);
    public virtual int Invoke(object user_data, int action_code, string param0, string param1, string dbName, string inner_most_trigger_or_view);
    public virtual IAsyncResult BeginInvoke(object user_data, int action_code, string param0, string param1, string dbName, string inner_most_trigger_or_view, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_collation : MulticastDelegate {
    public delegate_collation(object object, IntPtr method);
    public virtual int Invoke(object user_data, string s1, string s2);
    public virtual IAsyncResult BeginInvoke(object user_data, string s1, string s2, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_commit : MulticastDelegate {
    public delegate_commit(object object, IntPtr method);
    public virtual int Invoke(object user_data);
    public virtual IAsyncResult BeginInvoke(object user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_exec : MulticastDelegate {
    public delegate_exec(object object, IntPtr method);
    public virtual int Invoke(object user_data, String[] values, String[] names);
    public virtual IAsyncResult BeginInvoke(object user_data, String[] values, String[] names, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_function_aggregate_final : MulticastDelegate {
    public delegate_function_aggregate_final(object object, IntPtr method);
    public virtual void Invoke(sqlite3_context ctx, object user_data);
    public virtual IAsyncResult BeginInvoke(sqlite3_context ctx, object user_data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_function_aggregate_step : MulticastDelegate {
    public delegate_function_aggregate_step(object object, IntPtr method);
    public virtual void Invoke(sqlite3_context ctx, object user_data, sqlite3_value[] args);
    public virtual IAsyncResult BeginInvoke(sqlite3_context ctx, object user_data, sqlite3_value[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_function_scalar : MulticastDelegate {
    public delegate_function_scalar(object object, IntPtr method);
    public virtual void Invoke(sqlite3_context ctx, object user_data, sqlite3_value[] args);
    public virtual IAsyncResult BeginInvoke(sqlite3_context ctx, object user_data, sqlite3_value[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_log : MulticastDelegate {
    public delegate_log(object object, IntPtr method);
    public virtual void Invoke(object user_data, int errorCode, string msg);
    public virtual IAsyncResult BeginInvoke(object user_data, int errorCode, string msg, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_profile : MulticastDelegate {
    public delegate_profile(object object, IntPtr method);
    public virtual void Invoke(object user_data, string statement, long ns);
    public virtual IAsyncResult BeginInvoke(object user_data, string statement, long ns, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_progress_handler : MulticastDelegate {
    public delegate_progress_handler(object object, IntPtr method);
    public virtual int Invoke(object user_data);
    public virtual IAsyncResult BeginInvoke(object user_data, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_rollback : MulticastDelegate {
    public delegate_rollback(object object, IntPtr method);
    public virtual void Invoke(object user_data);
    public virtual IAsyncResult BeginInvoke(object user_data, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_trace : MulticastDelegate {
    public delegate_trace(object object, IntPtr method);
    public virtual void Invoke(object user_data, string statement);
    public virtual IAsyncResult BeginInvoke(object user_data, string statement, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class SQLitePCL.delegate_update : MulticastDelegate {
    public delegate_update(object object, IntPtr method);
    public virtual void Invoke(object user_data, int type, string database, string table, long rowid);
    public virtual IAsyncResult BeginInvoke(object user_data, int type, string database, string table, long rowid, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface SQLitePCL.ISQLite3Provider {
    public abstract virtual int sqlite3_open(string filename, IntPtr& db);
    public abstract virtual int sqlite3_open_v2(string filename, IntPtr& db, int flags, string vfs);
    public abstract virtual int sqlite3_close_v2(IntPtr db);
    public abstract virtual int sqlite3_close(IntPtr db);
    public abstract virtual int sqlite3_enable_shared_cache(int enable);
    public abstract virtual void sqlite3_interrupt(IntPtr db);
    public abstract virtual int sqlite3__vfs__delete(string vfs, string pathname, int syncDir);
    public abstract virtual int sqlite3_threadsafe();
    public abstract virtual string sqlite3_libversion();
    public abstract virtual int sqlite3_libversion_number();
    public abstract virtual string sqlite3_sourceid();
    public abstract virtual long sqlite3_memory_used();
    public abstract virtual long sqlite3_memory_highwater(int resetFlag);
    public abstract virtual int sqlite3_status(int op, Int32& current, Int32& highwater, int resetFlag);
    public abstract virtual int sqlite3_db_readonly(IntPtr db, string dbName);
    public abstract virtual string sqlite3_db_filename(IntPtr db, string att);
    public abstract virtual string sqlite3_errmsg(IntPtr db);
    public abstract virtual long sqlite3_last_insert_rowid(IntPtr db);
    public abstract virtual int sqlite3_changes(IntPtr db);
    public abstract virtual int sqlite3_total_changes(IntPtr db);
    public abstract virtual int sqlite3_get_autocommit(IntPtr db);
    public abstract virtual int sqlite3_busy_timeout(IntPtr db, int ms);
    public abstract virtual int sqlite3_extended_result_codes(IntPtr db, int onoff);
    public abstract virtual int sqlite3_errcode(IntPtr db);
    public abstract virtual int sqlite3_extended_errcode(IntPtr db);
    public abstract virtual string sqlite3_errstr(int rc);
    public abstract virtual int sqlite3_prepare_v2(IntPtr db, string sql, IntPtr& stmt, String& remain);
    public abstract virtual int sqlite3_step(IntPtr stmt);
    public abstract virtual int sqlite3_finalize(IntPtr stmt);
    public abstract virtual int sqlite3_reset(IntPtr stmt);
    public abstract virtual int sqlite3_clear_bindings(IntPtr stmt);
    public abstract virtual int sqlite3_stmt_status(IntPtr stmt, int op, int resetFlg);
    public abstract virtual string sqlite3_sql(IntPtr stmt);
    public abstract virtual IntPtr sqlite3_db_handle(IntPtr stmt);
    public abstract virtual IntPtr sqlite3_next_stmt(IntPtr db, IntPtr stmt);
    public abstract virtual int sqlite3_bind_zeroblob(IntPtr stmt, int index, int size);
    public abstract virtual string sqlite3_bind_parameter_name(IntPtr stmt, int index);
    public abstract virtual int sqlite3_bind_blob(IntPtr stmt, int index, Byte[] blob);
    public abstract virtual int sqlite3_bind_blob(IntPtr stmt, int index, Byte[] blob, int nSize);
    public abstract virtual int sqlite3_bind_double(IntPtr stmt, int index, double val);
    public abstract virtual int sqlite3_bind_int(IntPtr stmt, int index, int val);
    public abstract virtual int sqlite3_bind_int64(IntPtr stmt, int index, long val);
    public abstract virtual int sqlite3_bind_null(IntPtr stmt, int index);
    public abstract virtual int sqlite3_bind_text(IntPtr stmt, int index, string text);
    public abstract virtual int sqlite3_bind_parameter_count(IntPtr stmt);
    public abstract virtual int sqlite3_bind_parameter_index(IntPtr stmt, string strName);
    public abstract virtual string sqlite3_column_database_name(IntPtr stmt, int index);
    public abstract virtual string sqlite3_column_name(IntPtr stmt, int index);
    public abstract virtual string sqlite3_column_origin_name(IntPtr stmt, int index);
    public abstract virtual string sqlite3_column_table_name(IntPtr stmt, int index);
    public abstract virtual string sqlite3_column_text(IntPtr stmt, int index);
    public abstract virtual int sqlite3_data_count(IntPtr stmt);
    public abstract virtual int sqlite3_column_count(IntPtr stmt);
    public abstract virtual double sqlite3_column_double(IntPtr stmt, int index);
    public abstract virtual int sqlite3_column_int(IntPtr stmt, int index);
    public abstract virtual long sqlite3_column_int64(IntPtr stmt, int index);
    public abstract virtual Byte[] sqlite3_column_blob(IntPtr stmt, int index);
    public abstract virtual int sqlite3_column_blob(IntPtr stm, int columnIndex, Byte[] result, int offset);
    public abstract virtual int sqlite3_column_bytes(IntPtr stmt, int index);
    public abstract virtual int sqlite3_column_type(IntPtr stmt, int index);
    public abstract virtual string sqlite3_column_decltype(IntPtr stmt, int index);
    public abstract virtual IntPtr sqlite3_backup_init(IntPtr destDb, string destName, IntPtr sourceDb, string sourceName);
    public abstract virtual int sqlite3_backup_step(IntPtr backup, int nPage);
    public abstract virtual int sqlite3_backup_finish(IntPtr backup);
    public abstract virtual int sqlite3_backup_remaining(IntPtr backup);
    public abstract virtual int sqlite3_backup_pagecount(IntPtr backup);
    public abstract virtual int sqlite3_blob_open(IntPtr db, Byte[] db_utf8, Byte[] table_utf8, Byte[] col_utf8, long rowid, int flags, IntPtr& blob);
    public abstract virtual int sqlite3_blob_open(IntPtr db, string sdb, string table, string col, long rowid, int flags, IntPtr& blob);
    public abstract virtual int sqlite3_blob_bytes(IntPtr blob);
    public abstract virtual int sqlite3_blob_close(IntPtr blob);
    public abstract virtual int sqlite3_blob_write(IntPtr blob, Byte[] b, int n, int offset);
    public abstract virtual int sqlite3_blob_read(IntPtr blob, Byte[] b, int n, int offset);
    public abstract virtual int sqlite3_blob_write(IntPtr blob, Byte[] b, int bOffset, int n, int offset);
    public abstract virtual int sqlite3_blob_read(IntPtr blob, Byte[] b, int bOffset, int n, int offset);
    public abstract virtual int sqlite3_config_log(delegate_log func, object v);
    public abstract virtual void sqlite3_commit_hook(IntPtr db, delegate_commit func, object v);
    public abstract virtual void sqlite3_rollback_hook(IntPtr db, delegate_rollback func, object v);
    public abstract virtual void sqlite3_trace(IntPtr db, delegate_trace func, object v);
    public abstract virtual void sqlite3_profile(IntPtr db, delegate_profile func, object v);
    public abstract virtual void sqlite3_progress_handler(IntPtr db, int instructions, delegate_progress_handler func, object v);
    public abstract virtual void sqlite3_update_hook(IntPtr db, delegate_update func, object v);
    public abstract virtual int sqlite3_create_collation(IntPtr db, string name, object v, delegate_collation func);
    public abstract virtual int sqlite3_create_function(IntPtr db, string name, int nArg, object v, delegate_function_scalar func);
    public abstract virtual int sqlite3_create_function(IntPtr db, string name, int nArg, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    public abstract virtual int sqlite3_create_function(IntPtr db, string name, int nArg, int flags, object v, delegate_function_scalar func);
    public abstract virtual int sqlite3_create_function(IntPtr db, string name, int nArg, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    public abstract virtual int sqlite3_db_status(IntPtr db, int op, Int32& current, Int32& highest, int resetFlg);
    public abstract virtual void sqlite3_result_blob(IntPtr context, Byte[] val);
    public abstract virtual void sqlite3_result_double(IntPtr context, double val);
    public abstract virtual void sqlite3_result_error(IntPtr context, string strErr);
    public abstract virtual void sqlite3_result_int(IntPtr context, int val);
    public abstract virtual void sqlite3_result_int64(IntPtr context, long val);
    public abstract virtual void sqlite3_result_null(IntPtr context);
    public abstract virtual void sqlite3_result_text(IntPtr context, string val);
    public abstract virtual void sqlite3_result_zeroblob(IntPtr context, int n);
    public abstract virtual void sqlite3_result_error_toobig(IntPtr context);
    public abstract virtual void sqlite3_result_error_nomem(IntPtr context);
    public abstract virtual void sqlite3_result_error_code(IntPtr context, int code);
    public abstract virtual Byte[] sqlite3_value_blob(IntPtr p);
    public abstract virtual int sqlite3_value_bytes(IntPtr p);
    public abstract virtual double sqlite3_value_double(IntPtr p);
    public abstract virtual int sqlite3_value_int(IntPtr p);
    public abstract virtual long sqlite3_value_int64(IntPtr p);
    public abstract virtual int sqlite3_value_type(IntPtr p);
    public abstract virtual string sqlite3_value_text(IntPtr p);
    public abstract virtual int sqlite3_stmt_busy(IntPtr stmt);
    public abstract virtual int sqlite3_stmt_readonly(IntPtr stmt);
    public abstract virtual int sqlite3_exec(IntPtr db, string sql, delegate_exec callback, object user_data, String& errMsg);
    public abstract virtual int sqlite3_complete(string sql);
    public abstract virtual int sqlite3_compileoption_used(string sql);
    public abstract virtual string sqlite3_compileoption_get(int n);
    public abstract virtual int sqlite3_wal_autocheckpoint(IntPtr db, int n);
    public abstract virtual int sqlite3_wal_checkpoint(IntPtr db, string dbName);
    public abstract virtual int sqlite3_wal_checkpoint_v2(IntPtr db, string dbName, int eMode, Int32& logSize, Int32& framesCheckPointed);
    public abstract virtual int sqlite3_table_column_metadata(IntPtr db, string dbName, string tblName, string colName, String& dataType, String& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    public abstract virtual int sqlite3_set_authorizer(IntPtr db, delegate_authorizer authorizer, object user_data);
    public abstract virtual int sqlite3_initialize();
    public abstract virtual int sqlite3_shutdown();
    public abstract virtual int sqlite3_config(int op);
    public abstract virtual int sqlite3_config(int op, int val);
    public abstract virtual int sqlite3_enable_load_extension(IntPtr db, int enable);
    public abstract virtual int sqlite3_win32_set_directory(int typ, string path);
}
public static class SQLitePCL.raw : object {
    private static ISQLite3Provider _imp;
    private static bool _frozen;
    public static int SQLITE_UTF8;
    public static int SQLITE_UTF16LE;
    public static int SQLITE_UTF16BE;
    public static int SQLITE_UTF16;
    public static int SQLITE_ANY;
    public static int SQLITE_UTF16_ALIGNED;
    public static int SQLITE_DETERMINISTIC;
    public static int SQLITE_CONFIG_SINGLETHREAD;
    public static int SQLITE_CONFIG_MULTITHREAD;
    public static int SQLITE_CONFIG_SERIALIZED;
    public static int SQLITE_CONFIG_MALLOC;
    public static int SQLITE_CONFIG_GETMALLOC;
    public static int SQLITE_CONFIG_SCRATCH;
    public static int SQLITE_CONFIG_PAGECACHE;
    public static int SQLITE_CONFIG_HEAP;
    public static int SQLITE_CONFIG_MEMSTATUS;
    public static int SQLITE_CONFIG_MUTEX;
    public static int SQLITE_CONFIG_GETMUTEX;
    public static int SQLITE_CONFIG_LOOKASIDE;
    public static int SQLITE_CONFIG_PCACHE;
    public static int SQLITE_CONFIG_GETPCACHE;
    public static int SQLITE_CONFIG_LOG;
    public static int SQLITE_CONFIG_URI;
    public static int SQLITE_CONFIG_PCACHE2;
    public static int SQLITE_CONFIG_GETPCACHE2;
    public static int SQLITE_CONFIG_COVERING_INDEX_SCAN;
    public static int SQLITE_CONFIG_SQLLOG;
    public static int SQLITE_OPEN_READONLY;
    public static int SQLITE_OPEN_READWRITE;
    public static int SQLITE_OPEN_CREATE;
    public static int SQLITE_OPEN_DELETEONCLOSE;
    public static int SQLITE_OPEN_EXCLUSIVE;
    public static int SQLITE_OPEN_AUTOPROXY;
    public static int SQLITE_OPEN_URI;
    public static int SQLITE_OPEN_MEMORY;
    public static int SQLITE_OPEN_MAIN_DB;
    public static int SQLITE_OPEN_TEMP_DB;
    public static int SQLITE_OPEN_TRANSIENT_DB;
    public static int SQLITE_OPEN_MAIN_JOURNAL;
    public static int SQLITE_OPEN_TEMP_JOURNAL;
    public static int SQLITE_OPEN_SUBJOURNAL;
    public static int SQLITE_OPEN_MASTER_JOURNAL;
    public static int SQLITE_OPEN_NOMUTEX;
    public static int SQLITE_OPEN_FULLMUTEX;
    public static int SQLITE_OPEN_SHAREDCACHE;
    public static int SQLITE_OPEN_PRIVATECACHE;
    public static int SQLITE_OPEN_WAL;
    public static int SQLITE_INTEGER;
    public static int SQLITE_FLOAT;
    public static int SQLITE_TEXT;
    public static int SQLITE_BLOB;
    public static int SQLITE_NULL;
    public static int SQLITE_OK;
    public static int SQLITE_ERROR;
    public static int SQLITE_INTERNAL;
    public static int SQLITE_PERM;
    public static int SQLITE_ABORT;
    public static int SQLITE_BUSY;
    public static int SQLITE_LOCKED;
    public static int SQLITE_NOMEM;
    public static int SQLITE_READONLY;
    public static int SQLITE_INTERRUPT;
    public static int SQLITE_IOERR;
    public static int SQLITE_CORRUPT;
    public static int SQLITE_NOTFOUND;
    public static int SQLITE_FULL;
    public static int SQLITE_CANTOPEN;
    public static int SQLITE_PROTOCOL;
    public static int SQLITE_EMPTY;
    public static int SQLITE_SCHEMA;
    public static int SQLITE_TOOBIG;
    public static int SQLITE_CONSTRAINT;
    public static int SQLITE_MISMATCH;
    public static int SQLITE_MISUSE;
    public static int SQLITE_NOLFS;
    public static int SQLITE_AUTH;
    public static int SQLITE_FORMAT;
    public static int SQLITE_RANGE;
    public static int SQLITE_NOTADB;
    public static int SQLITE_NOTICE;
    public static int SQLITE_WARNING;
    public static int SQLITE_ROW;
    public static int SQLITE_DONE;
    public static int SQLITE_IOERR_READ;
    public static int SQLITE_IOERR_SHORT_READ;
    public static int SQLITE_IOERR_WRITE;
    public static int SQLITE_IOERR_FSYNC;
    public static int SQLITE_IOERR_DIR_FSYNC;
    public static int SQLITE_IOERR_TRUNCATE;
    public static int SQLITE_IOERR_FSTAT;
    public static int SQLITE_IOERR_UNLOCK;
    public static int SQLITE_IOERR_RDLOCK;
    public static int SQLITE_IOERR_DELETE;
    public static int SQLITE_IOERR_BLOCKED;
    public static int SQLITE_IOERR_NOMEM;
    public static int SQLITE_IOERR_ACCESS;
    public static int SQLITE_IOERR_CHECKRESERVEDLOCK;
    public static int SQLITE_IOERR_LOCK;
    public static int SQLITE_IOERR_CLOSE;
    public static int SQLITE_IOERR_DIR_CLOSE;
    public static int SQLITE_IOERR_SHMOPEN;
    public static int SQLITE_IOERR_SHMSIZE;
    public static int SQLITE_IOERR_SHMLOCK;
    public static int SQLITE_IOERR_SHMMAP;
    public static int SQLITE_IOERR_SEEK;
    public static int SQLITE_IOERR_DELETE_NOENT;
    public static int SQLITE_IOERR_MMAP;
    public static int SQLITE_IOERR_GETTEMPPATH;
    public static int SQLITE_IOERR_CONVPATH;
    public static int SQLITE_LOCKED_SHAREDCACHE;
    public static int SQLITE_BUSY_RECOVERY;
    public static int SQLITE_BUSY_SNAPSHOT;
    public static int SQLITE_CANTOPEN_NOTEMPDIR;
    public static int SQLITE_CANTOPEN_ISDIR;
    public static int SQLITE_CANTOPEN_FULLPATH;
    public static int SQLITE_CANTOPEN_CONVPATH;
    public static int SQLITE_CORRUPT_VTAB;
    public static int SQLITE_READONLY_RECOVERY;
    public static int SQLITE_READONLY_CANTLOCK;
    public static int SQLITE_READONLY_ROLLBACK;
    public static int SQLITE_READONLY_DBMOVED;
    public static int SQLITE_ABORT_ROLLBACK;
    public static int SQLITE_CONSTRAINT_CHECK;
    public static int SQLITE_CONSTRAINT_COMMITHOOK;
    public static int SQLITE_CONSTRAINT_FOREIGNKEY;
    public static int SQLITE_CONSTRAINT_FUNCTION;
    public static int SQLITE_CONSTRAINT_NOTNULL;
    public static int SQLITE_CONSTRAINT_PRIMARYKEY;
    public static int SQLITE_CONSTRAINT_TRIGGER;
    public static int SQLITE_CONSTRAINT_UNIQUE;
    public static int SQLITE_CONSTRAINT_VTAB;
    public static int SQLITE_CONSTRAINT_ROWID;
    public static int SQLITE_NOTICE_RECOVER_WAL;
    public static int SQLITE_NOTICE_RECOVER_ROLLBACK;
    public static int SQLITE_WARNING_AUTOINDEX;
    public static int SQLITE_CREATE_INDEX;
    public static int SQLITE_CREATE_TABLE;
    public static int SQLITE_CREATE_TEMP_INDEX;
    public static int SQLITE_CREATE_TEMP_TABLE;
    public static int SQLITE_CREATE_TEMP_TRIGGER;
    public static int SQLITE_CREATE_TEMP_VIEW;
    public static int SQLITE_CREATE_TRIGGER;
    public static int SQLITE_CREATE_VIEW;
    public static int SQLITE_DELETE;
    public static int SQLITE_DROP_INDEX;
    public static int SQLITE_DROP_TABLE;
    public static int SQLITE_DROP_TEMP_INDEX;
    public static int SQLITE_DROP_TEMP_TABLE;
    public static int SQLITE_DROP_TEMP_TRIGGER;
    public static int SQLITE_DROP_TEMP_VIEW;
    public static int SQLITE_DROP_TRIGGER;
    public static int SQLITE_DROP_VIEW;
    public static int SQLITE_INSERT;
    public static int SQLITE_PRAGMA;
    public static int SQLITE_READ;
    public static int SQLITE_SELECT;
    public static int SQLITE_TRANSACTION;
    public static int SQLITE_UPDATE;
    public static int SQLITE_ATTACH;
    public static int SQLITE_DETACH;
    public static int SQLITE_ALTER_TABLE;
    public static int SQLITE_REINDEX;
    public static int SQLITE_ANALYZE;
    public static int SQLITE_CREATE_VTABLE;
    public static int SQLITE_DROP_VTABLE;
    public static int SQLITE_FUNCTION;
    public static int SQLITE_SAVEPOINT;
    public static int SQLITE_COPY;
    public static int SQLITE_RECURSIVE;
    public static int SQLITE_CHECKPOINT_PASSIVE;
    public static int SQLITE_CHECKPOINT_FULL;
    public static int SQLITE_CHECKPOINT_RESTART;
    public static int SQLITE_CHECKPOINT_TRUNCATE;
    public static int SQLITE_DBSTATUS_LOOKASIDE_USED;
    public static int SQLITE_DBSTATUS_CACHE_USED;
    public static int SQLITE_DBSTATUS_SCHEMA_USED;
    public static int SQLITE_DBSTATUS_STMT_USED;
    public static int SQLITE_DBSTATUS_LOOKASIDE_HIT;
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE;
    public static int SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL;
    public static int SQLITE_DBSTATUS_CACHE_HIT;
    public static int SQLITE_DBSTATUS_CACHE_MISS;
    public static int SQLITE_DBSTATUS_CACHE_WRITE;
    public static int SQLITE_DBSTATUS_DEFERRED_FKS;
    public static int SQLITE_STATUS_MEMORY_USED;
    public static int SQLITE_STATUS_PAGECACHE_USED;
    public static int SQLITE_STATUS_PAGECACHE_OVERFLOW;
    public static int SQLITE_STATUS_SCRATCH_USED;
    public static int SQLITE_STATUS_SCRATCH_OVERFLOW;
    public static int SQLITE_STATUS_MALLOC_SIZE;
    public static int SQLITE_STATUS_PARSER_STACK;
    public static int SQLITE_STATUS_PAGECACHE_SIZE;
    public static int SQLITE_STATUS_SCRATCH_SIZE;
    public static int SQLITE_STATUS_MALLOC_COUNT;
    public static int SQLITE_STMTSTATUS_FULLSCAN_STEP;
    public static int SQLITE_STMTSTATUS_SORT;
    public static int SQLITE_STMTSTATUS_AUTOINDEX;
    public static int SQLITE_STMTSTATUS_VM_STEP;
    public static int SQLITE_DENY;
    public static int SQLITE_IGNORE;
    private static raw();
    public static void SetProvider(ISQLite3Provider imp);
    public static void FreezeProvider(bool b);
    public static int sqlite3_open(string filename, sqlite3& db);
    public static int sqlite3_open_v2(string filename, sqlite3& db, int flags, string vfs);
    public static int sqlite3__vfs__delete(string vfs, string pathname, int syncdir);
    public static int sqlite3_close_v2(sqlite3 db);
    public static int sqlite3_close(sqlite3 db);
    public static int sqlite3_enable_shared_cache(int enable);
    public static void sqlite3_interrupt(sqlite3 db);
    public static void sqlite3_config_log(delegate_log f, object v);
    public static void sqlite3_commit_hook(sqlite3 db, delegate_commit f, object v);
    public static void sqlite3_rollback_hook(sqlite3 db, delegate_rollback f, object v);
    public static void sqlite3_trace(sqlite3 db, delegate_trace f, object v);
    public static void sqlite3_profile(sqlite3 db, delegate_profile f, object v);
    public static void sqlite3_progress_handler(sqlite3 db, int instructions, delegate_progress_handler func, object v);
    public static void sqlite3_update_hook(sqlite3 db, delegate_update f, object v);
    public static int sqlite3_create_collation(sqlite3 db, string name, object v, delegate_collation f);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, object v, delegate_function_scalar func);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, int flags, object v, delegate_function_scalar func);
    public static int sqlite3_create_function(sqlite3 db, string name, int nArg, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    public static int sqlite3_db_status(sqlite3 db, int op, Int32& current, Int32& highest, int resetFlg);
    public static string sqlite3_libversion();
    public static int sqlite3_libversion_number();
    public static int sqlite3_threadsafe();
    public static int sqlite3_initialize();
    public static int sqlite3_shutdown();
    public static int sqlite3_config(int op);
    public static int sqlite3_config(int op, int val);
    public static int sqlite3_enable_load_extension(sqlite3 db, int onoff);
    public static string sqlite3_sourceid();
    public static long sqlite3_memory_used();
    public static long sqlite3_memory_highwater(int resetFlag);
    public static int sqlite3_status(int op, Int32& current, Int32& highwater, int resetFlag);
    public static string sqlite3_errmsg(sqlite3 db);
    public static int sqlite3_db_readonly(sqlite3 db, string dbName);
    public static string sqlite3_db_filename(sqlite3 db, string att);
    public static long sqlite3_last_insert_rowid(sqlite3 db);
    public static int sqlite3_changes(sqlite3 db);
    public static int sqlite3_total_changes(sqlite3 db);
    public static int sqlite3_get_autocommit(sqlite3 db);
    public static int sqlite3_busy_timeout(sqlite3 db, int ms);
    public static int sqlite3_extended_result_codes(sqlite3 db, int onoff);
    public static int sqlite3_errcode(sqlite3 db);
    public static int sqlite3_extended_errcode(sqlite3 db);
    public static string sqlite3_errstr(int rc);
    public static int sqlite3_prepare_v2(sqlite3 db, string sql, sqlite3_stmt& stmt);
    public static int sqlite3_prepare_v2(sqlite3 db, string sql, sqlite3_stmt& stmt, String& tail);
    public static int sqlite3_exec(sqlite3 db, string sql, delegate_exec callback, object user_data, String& errMsg);
    public static int sqlite3_exec(sqlite3 db, string sql, String& errMsg);
    public static int sqlite3_exec(sqlite3 db, string sql);
    public static int sqlite3_step(sqlite3_stmt stmt);
    public static int sqlite3_finalize(sqlite3_stmt stmt);
    public static int sqlite3_reset(sqlite3_stmt stmt);
    public static int sqlite3_clear_bindings(sqlite3_stmt stmt);
    public static int sqlite3_stmt_status(sqlite3_stmt stmt, int op, int resetFlg);
    public static int sqlite3_complete(string sql);
    public static int sqlite3_compileoption_used(string s);
    public static string sqlite3_compileoption_get(int n);
    public static int sqlite3_table_column_metadata(sqlite3 db, string dbName, string tblName, string colName, String& dataType, String& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    public static string sqlite3_sql(sqlite3_stmt stmt);
    public static sqlite3 sqlite3_db_handle(sqlite3_stmt stmt);
    public static sqlite3_stmt sqlite3_next_stmt(sqlite3 db, sqlite3_stmt stmt);
    public static int sqlite3_bind_zeroblob(sqlite3_stmt stmt, int index, int size);
    public static string sqlite3_bind_parameter_name(sqlite3_stmt stmt, int index);
    public static object sqlite3_user_data(sqlite3_context context);
    public static void sqlite3_result_null(sqlite3_context context);
    public static void sqlite3_result_blob(sqlite3_context context, Byte[] val);
    public static void sqlite3_result_error(sqlite3_context context, string val);
    public static void sqlite3_result_text(sqlite3_context context, string val);
    public static void sqlite3_result_double(sqlite3_context context, double val);
    public static void sqlite3_result_int(sqlite3_context context, int val);
    public static void sqlite3_result_int64(sqlite3_context context, long val);
    public static void sqlite3_result_zeroblob(sqlite3_context context, int n);
    public static void sqlite3_result_error_toobig(sqlite3_context context);
    public static void sqlite3_result_error_nomem(sqlite3_context context);
    public static void sqlite3_result_error_code(sqlite3_context context, int code);
    public static Byte[] sqlite3_value_blob(sqlite3_value val);
    public static int sqlite3_value_bytes(sqlite3_value val);
    public static double sqlite3_value_double(sqlite3_value val);
    public static int sqlite3_value_int(sqlite3_value val);
    public static long sqlite3_value_int64(sqlite3_value val);
    public static int sqlite3_value_type(sqlite3_value val);
    public static string sqlite3_value_text(sqlite3_value val);
    public static int sqlite3_bind_blob(sqlite3_stmt stmt, int index, Byte[] blob);
    public static int sqlite3_bind_blob(sqlite3_stmt stmt, int index, Byte[] blob, int nSize);
    public static int sqlite3_bind_double(sqlite3_stmt stmt, int index, double val);
    public static int sqlite3_bind_int(sqlite3_stmt stmt, int index, int val);
    public static int sqlite3_bind_int64(sqlite3_stmt stmt, int index, long val);
    public static int sqlite3_bind_null(sqlite3_stmt stmt, int index);
    public static int sqlite3_bind_text(sqlite3_stmt stmt, int index, string val);
    public static int sqlite3_bind_parameter_count(sqlite3_stmt stmt);
    public static int sqlite3_bind_parameter_index(sqlite3_stmt stmt, string strName);
    public static int sqlite3_stmt_busy(sqlite3_stmt stmt);
    public static int sqlite3_stmt_readonly(sqlite3_stmt stmt);
    public static string sqlite3_column_database_name(sqlite3_stmt stmt, int index);
    public static string sqlite3_column_name(sqlite3_stmt stmt, int index);
    public static string sqlite3_column_origin_name(sqlite3_stmt stmt, int index);
    public static string sqlite3_column_table_name(sqlite3_stmt stmt, int index);
    public static string sqlite3_column_text(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_count(sqlite3_stmt stmt);
    public static int sqlite3_data_count(sqlite3_stmt stmt);
    public static double sqlite3_column_double(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_int(sqlite3_stmt stmt, int index);
    public static long sqlite3_column_int64(sqlite3_stmt stmt, int index);
    public static Byte[] sqlite3_column_blob(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_blob(sqlite3_stmt stmt, int index, Byte[] result, int offset);
    public static int sqlite3_column_bytes(sqlite3_stmt stmt, int index);
    public static int sqlite3_column_type(sqlite3_stmt stmt, int index);
    public static string sqlite3_column_decltype(sqlite3_stmt stmt, int index);
    public static sqlite3_backup sqlite3_backup_init(sqlite3 destDb, string destName, sqlite3 sourceDb, string sourceName);
    public static int sqlite3_backup_step(sqlite3_backup backup, int nPage);
    public static int sqlite3_backup_finish(sqlite3_backup backup);
    public static int sqlite3_backup_remaining(sqlite3_backup backup);
    public static int sqlite3_backup_pagecount(sqlite3_backup backup);
    public static int sqlite3_blob_open(sqlite3 db, Byte[] db_utf8, Byte[] table_utf8, Byte[] col_utf8, long rowid, int flags, sqlite3_blob& blob);
    public static int sqlite3_blob_open(sqlite3 db, string sdb, string table, string col, long rowid, int flags, sqlite3_blob& blob);
    public static int sqlite3_blob_bytes(sqlite3_blob blob);
    public static int sqlite3_blob_close(sqlite3_blob blob);
    public static int sqlite3_blob_write(sqlite3_blob blob, Byte[] b, int n, int offset);
    public static int sqlite3_blob_read(sqlite3_blob blob, Byte[] b, int n, int offset);
    public static int sqlite3_blob_write(sqlite3_blob blob, Byte[] b, int bOffset, int n, int offset);
    public static int sqlite3_blob_read(sqlite3_blob blob, Byte[] b, int bOffset, int n, int offset);
    public static int sqlite3_wal_autocheckpoint(sqlite3 db, int n);
    public static int sqlite3_wal_checkpoint(sqlite3 db, string dbName);
    public static int sqlite3_wal_checkpoint_v2(sqlite3 db, string dbName, int eMode, Int32& logSize, Int32& framesCheckPointed);
    public static int sqlite3_set_authorizer(sqlite3 db, delegate_authorizer authorizer, object user_data);
    public static int sqlite3_win32_set_directory(int typ, string path);
}
public class SQLitePCL.sqlite3 : object {
    private IntPtr _p;
    private bool _disposed;
    private ConcurrentDictionary`2<IntPtr, sqlite3_stmt> _stmts;
    internal bool already_disposed { get; }
    public IntPtr ptr { get; }
    internal sqlite3(IntPtr p);
    internal bool get_already_disposed();
    public void enable_sqlite3_next_stmt(bool enabled);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void set_already_disposed();
    public IntPtr get_ptr();
    internal void add_stmt(sqlite3_stmt stmt);
    internal sqlite3_stmt find_stmt(IntPtr p);
    internal void remove_stmt(sqlite3_stmt s);
}
public class SQLitePCL.sqlite3_backup : object {
    private IntPtr _p;
    private bool _disposed;
    internal bool already_disposed { get; }
    public IntPtr ptr { get; }
    internal sqlite3_backup(IntPtr p);
    internal bool get_already_disposed();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void set_already_disposed();
    public IntPtr get_ptr();
}
public class SQLitePCL.sqlite3_blob : object {
    private IntPtr _p;
    private bool _disposed;
    internal bool already_disposed { get; }
    public IntPtr ptr { get; }
    internal sqlite3_blob(IntPtr p);
    internal bool get_already_disposed();
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void set_already_disposed();
    public IntPtr get_ptr();
}
public class SQLitePCL.sqlite3_context : object {
    private IntPtr _p;
    private object _user_data;
    public object state;
    internal object user_data { get; }
    public IntPtr ptr { get; }
    protected sqlite3_context(object user_data);
    internal object get_user_data();
    public IntPtr get_ptr();
    protected void set_context_ptr(IntPtr p);
}
public class SQLitePCL.sqlite3_stmt : object {
    private IntPtr _p;
    private bool _disposed;
    private sqlite3 _db;
    internal bool already_disposed { get; }
    public IntPtr ptr { get; }
    internal sqlite3 db { get; }
    internal sqlite3_stmt(IntPtr p, sqlite3 db);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    internal void set_already_disposed();
    internal bool get_already_disposed();
    public IntPtr get_ptr();
    internal sqlite3 get_db();
}
public class SQLitePCL.sqlite3_value : object {
    private IntPtr _p;
    public IntPtr ptr { get; }
    public sqlite3_value(IntPtr p);
    public IntPtr get_ptr();
}
public class SQLitePCL.SQLite3Provider_bait : object {
    private static string GRIPE;
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_open(string filename, IntPtr& db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_open_v2(string filename, IntPtr& db, int flags, string vfs);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_close_v2(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_close(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_enable_shared_cache(int enable);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_interrupt(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3__vfs__delete(string vfs, string pathname, int syncDir);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_exec(IntPtr db, string sql, delegate_exec func, object user_data, String& errMsg);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_complete(string sql);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_compileoption_get(int n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_compileoption_used(string s);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_table_column_metadata(IntPtr db, string dbName, string tblName, string colName, String& dataType, String& collSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_prepare_v2(IntPtr db, string sql, IntPtr& stm, String& remain);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_sql(IntPtr stmt);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_db_handle(IntPtr stmt);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_open(IntPtr db, Byte[] db_utf8, Byte[] table_utf8, Byte[] col_utf8, long rowid, int flags, IntPtr& blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_open(IntPtr db, string sdb, string table, string col, long rowid, int flags, IntPtr& blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_bytes(IntPtr blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_close(IntPtr blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_read(IntPtr blob, Byte[] b, int n, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_write(IntPtr blob, Byte[] b, int n, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_read(IntPtr blob, Byte[] b, int bOffset, int n, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_blob_write(IntPtr blob, Byte[] b, int bOffset, int n, int offset);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_backup_init(IntPtr destDb, string destName, IntPtr sourceDb, string sourceName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_step(IntPtr backup, int nPage);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_finish(IntPtr backup);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_remaining(IntPtr backup);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_backup_pagecount(IntPtr backup);
    private sealed virtual override IntPtr SQLitePCL.ISQLite3Provider.sqlite3_next_stmt(IntPtr db, IntPtr stmt);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_last_insert_rowid(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_changes(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_total_changes(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_extended_result_codes(IntPtr db, int onoff);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_errstr(int rc);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_errcode(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_extended_errcode(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_busy_timeout(IntPtr db, int ms);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_get_autocommit(IntPtr db);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_readonly(IntPtr db, string dbName);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_db_filename(IntPtr db, string att);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_errmsg(IntPtr db);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_libversion();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_libversion_number();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_threadsafe();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_initialize();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_shutdown();
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config(int op);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config(int op, int val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_enable_load_extension(IntPtr db, int onoff);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_config_log(delegate_log func, object v);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_commit_hook(IntPtr db, delegate_commit func, object v);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, int flags, object v, delegate_function_scalar func);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, int flags, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, object v, delegate_function_scalar func);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_function(IntPtr db, string name, int nargs, object v, delegate_function_aggregate_step func_step, delegate_function_aggregate_final func_final);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_db_status(IntPtr db, int op, Int32& current, Int32& highest, int resetFlg);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_create_collation(IntPtr db, string name, object v, delegate_collation func);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_update_hook(IntPtr db, delegate_update func, object v);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_rollback_hook(IntPtr db, delegate_rollback func, object v);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_trace(IntPtr db, delegate_trace func, object v);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_profile(IntPtr db, delegate_profile func, object v);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_progress_handler(IntPtr db, int instructions, delegate_progress_handler func, object v);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_memory_used();
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_memory_highwater(int resetFlag);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_status(int op, Int32& current, Int32& highwater, int resetFlag);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_sourceid();
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_int64(IntPtr ctx, long val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_int(IntPtr ctx, int val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_double(IntPtr ctx, double val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_null(IntPtr stm);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error(IntPtr ctx, string val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_text(IntPtr ctx, string val);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_blob(IntPtr ctx, Byte[] blob);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_zeroblob(IntPtr ctx, int n);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_toobig(IntPtr ctx);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_nomem(IntPtr ctx);
    private sealed virtual override void SQLitePCL.ISQLite3Provider.sqlite3_result_error_code(IntPtr ctx, int code);
    private sealed virtual override Byte[] SQLitePCL.ISQLite3Provider.sqlite3_value_blob(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_bytes(IntPtr p);
    private sealed virtual override double SQLitePCL.ISQLite3Provider.sqlite3_value_double(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_int(IntPtr p);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_value_int64(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_value_type(IntPtr p);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_value_text(IntPtr p);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_int(IntPtr stm, int paramIndex, int val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_int64(IntPtr stm, int paramIndex, long val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_text(IntPtr stm, int paramIndex, string t);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_double(IntPtr stm, int paramIndex, double val);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_blob(IntPtr stm, int paramIndex, Byte[] blob);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_blob(IntPtr stm, int paramIndex, Byte[] blob, int nSize);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_zeroblob(IntPtr stm, int paramIndex, int size);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_null(IntPtr stm, int paramIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_count(IntPtr stm);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_name(IntPtr stm, int paramIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_bind_parameter_index(IntPtr stm, string paramName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_step(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_busy(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_readonly(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_int(IntPtr stm, int columnIndex);
    private sealed virtual override long SQLitePCL.ISQLite3Provider.sqlite3_column_int64(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_text(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_decltype(IntPtr stm, int columnIndex);
    private sealed virtual override double SQLitePCL.ISQLite3Provider.sqlite3_column_double(IntPtr stm, int columnIndex);
    private sealed virtual override Byte[] SQLitePCL.ISQLite3Provider.sqlite3_column_blob(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_blob(IntPtr stm, int columnIndex, Byte[] result, int offset);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_type(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_bytes(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_column_count(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_data_count(IntPtr stm);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_name(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_origin_name(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_table_name(IntPtr stm, int columnIndex);
    private sealed virtual override string SQLitePCL.ISQLite3Provider.sqlite3_column_database_name(IntPtr stm, int columnIndex);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_reset(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_clear_bindings(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_stmt_status(IntPtr stm, int op, int resetFlg);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_finalize(IntPtr stm);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_autocheckpoint(IntPtr db, int n);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_checkpoint(IntPtr db, string dbName);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_wal_checkpoint_v2(IntPtr db, string dbName, int eMode, Int32& logSize, Int32& framesCheckPointed);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_set_authorizer(IntPtr db, delegate_authorizer func, object v);
    private sealed virtual override int SQLitePCL.ISQLite3Provider.sqlite3_win32_set_directory(int typ, string path);
}
