internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
public static class System.Runtime.CompilerServices.Unsafe : object {
    [NonVersionableAttribute]
public static T Read(Void* source);
    [NonVersionableAttribute]
public static T ReadUnaligned(Void* source);
    [NonVersionableAttribute]
public static T ReadUnaligned(Byte& source);
    [NonVersionableAttribute]
public static void Write(Void* destination, T value);
    [NonVersionableAttribute]
public static void WriteUnaligned(Void* destination, T value);
    [NonVersionableAttribute]
public static void WriteUnaligned(Byte& destination, T value);
    [NonVersionableAttribute]
public static void Copy(Void* destination, T& source);
    [NonVersionableAttribute]
public static void Copy(T& destination, Void* source);
    [NonVersionableAttribute]
public static Void* AsPointer(T& value);
    [NonVersionableAttribute]
public static void SkipInit(T& value);
    [NonVersionableAttribute]
public static int SizeOf();
    [NonVersionableAttribute]
public static void CopyBlock(Void* destination, Void* source, UInt32 byteCount);
    [NonVersionableAttribute]
public static void CopyBlock(Byte& destination, Byte& source, UInt32 byteCount);
    [NonVersionableAttribute]
public static void CopyBlockUnaligned(Void* destination, Void* source, UInt32 byteCount);
    [NonVersionableAttribute]
public static void CopyBlockUnaligned(Byte& destination, Byte& source, UInt32 byteCount);
    [NonVersionableAttribute]
public static void InitBlock(Void* startAddress, byte value, UInt32 byteCount);
    [NonVersionableAttribute]
public static void InitBlock(Byte& startAddress, byte value, UInt32 byteCount);
    [NonVersionableAttribute]
public static void InitBlockUnaligned(Void* startAddress, byte value, UInt32 byteCount);
    [NonVersionableAttribute]
public static void InitBlockUnaligned(Byte& startAddress, byte value, UInt32 byteCount);
    [NonVersionableAttribute]
public static T As(object o);
    [NonVersionableAttribute]
public static T& AsRef(Void* source);
    [NonVersionableAttribute]
public static T& AsRef(T& source);
    [NonVersionableAttribute]
public static TTo& As(TFrom& source);
    public static T& Unbox(object box);
    [NonVersionableAttribute]
public static T& Add(T& source, int elementOffset);
    [NonVersionableAttribute]
public static Void* Add(Void* source, int elementOffset);
    [NonVersionableAttribute]
public static T& Add(T& source, IntPtr elementOffset);
    [NonVersionableAttribute]
public static T& AddByteOffset(T& source, IntPtr byteOffset);
    [NonVersionableAttribute]
public static T& Subtract(T& source, int elementOffset);
    [NonVersionableAttribute]
public static Void* Subtract(Void* source, int elementOffset);
    [NonVersionableAttribute]
public static T& Subtract(T& source, IntPtr elementOffset);
    [NonVersionableAttribute]
public static T& SubtractByteOffset(T& source, IntPtr byteOffset);
    [NonVersionableAttribute]
public static IntPtr ByteOffset(T& origin, T& target);
    [NonVersionableAttribute]
public static bool AreSame(T& left, T& right);
    [NonVersionableAttribute]
public static bool IsAddressGreaterThan(T& left, T& right);
    [NonVersionableAttribute]
public static bool IsAddressLessThan(T& left, T& right);
    [NonVersionableAttribute]
public static bool IsNullRef(T& source);
    [NonVersionableAttribute]
public static T& NullRef();
}
[AttributeUsageAttribute("108")]
internal class System.Runtime.Versioning.NonVersionableAttribute : Attribute {
}
