[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArgumentReader : CommandLineArgumentReader {
    private CSharpCommandLineArgumentReader(ProjectInstance project);
    public static ImmutableArray`1<string> Read(ProjectInstance project);
    protected virtual void ReadCore();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CSharp.CSharpProjectFile : ProjectFile {
    public CSharpProjectFile(CSharpProjectFileLoader loader, Project project, ProjectBuildManager buildManager, DiagnosticLog log);
    protected virtual SourceCodeKind GetSourceCodeKind(string documentFileName);
    public virtual string GetDocumentExtension(SourceCodeKind sourceCodeKind);
    protected virtual IEnumerable`1<ITaskItem> GetCompilerCommandLineArgs(ProjectInstance executedProject);
    protected virtual ImmutableArray`1<string> ReadCommandLineArgs(ProjectInstance project);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CSharp.CSharpProjectFileLoader : ProjectFileLoader {
    public string Language { get; }
    public virtual string get_Language();
    protected virtual ProjectFile CreateProjectFile(Project project, ProjectBuildManager buildManager, DiagnosticLog log);
}
[SharedAttribute]
[ExportLanguageServiceFactoryAttribute("Microsoft.CodeAnalysis.MSBuild.IProjectFileLoader", "C#", "Default")]
[ProjectFileExtensionAttribute("csproj")]
internal class Microsoft.CodeAnalysis.CSharp.CSharpProjectFileLoaderFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual ILanguageService CreateLanguageService(HostLanguageServices languageServices);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.CodeAnalysis.GlobalAssemblyCacheLocation : object {
    public static ImmutableArray`1<string> s_rootLocations;
    public static ImmutableArray`1<string> RootLocations { get; }
    private static int GetCachePath(ASM_CACHE id, Byte* path, Int32& length);
    public static ImmutableArray`1<string> get_RootLocations();
    private static string GetLocation(ASM_CACHE gacId);
}
public static class Microsoft.CodeAnalysis.Host.Mef.MSBuildMefHostServices : object {
    private static MefHostServices s_defaultServices;
    private static ImmutableArray`1<Assembly> s_defaultAssemblies;
    public static MefHostServices DefaultServices { get; }
    public static ImmutableArray`1<Assembly> DefaultAssemblies { get; }
    public static MefHostServices get_DefaultServices();
    public static ImmutableArray`1<Assembly> get_DefaultAssemblies();
    private static ImmutableArray`1<Assembly> CreateDefaultAssemblies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager : object {
    private static XmlReaderSettings s_xmlReaderSettings;
    private static ImmutableDictionary`2<string, string> s_defaultGlobalProperties;
    private ImmutableDictionary`2<string, string> _additionalGlobalProperties;
    [NullableAttribute("2")]
private ILogger _msbuildLogger;
    [NullableAttribute("2")]
private ProjectCollection _batchBuildProjectCollection;
    [NullableAttribute("2")]
private MSBuildDiagnosticLogger _batchBuildLogger;
    [CompilerGeneratedAttribute]
private bool <BatchBuildStarted>k__BackingField;
    private static SemaphoreSlim s_buildManagerLock;
    private ImmutableDictionary`2<string, string> AllGlobalProperties { get; }
    public bool BatchBuildStarted { get; private set; }
    public ProjectBuildManager(ImmutableDictionary`2<string, string> additionalGlobalProperties, ILogger msbuildLogger);
    private static ProjectBuildManager();
    protected virtual override void Finalize();
    private ImmutableDictionary`2<string, string> get_AllGlobalProperties();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager/<LoadProjectAsync>d__10")]
private static Task`1<ValueTuple`2<Project, DiagnosticLog>> LoadProjectAsync(string path, ProjectCollection projectCollection, CancellationToken cancellationToken);
    public Task`1<ValueTuple`2<Project, DiagnosticLog>> LoadProjectAsync(string path, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager/<TryGetOutputFilePathAsync>d__12")]
public Task`1<string> TryGetOutputFilePathAsync(string path, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public bool get_BatchBuildStarted();
    [CompilerGeneratedAttribute]
private void set_BatchBuildStarted(bool value);
    public void StartBatchBuild(IDictionary`2<string, string> globalProperties);
    public void EndBatchBuild();
    public Task`1<ProjectInstance> BuildProjectAsync(Project project, DiagnosticLog log, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager/<BuildProjectAsync>d__20")]
private Task`1<ProjectInstance> BuildProjectAsync(Project project, String[] targets, DiagnosticLog log, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.Build.ProjectBuildManager/<BuildAsync>d__22")]
private static Task`1<BuildResult> BuildAsync(BuildRequestData requestData, CancellationToken cancellationToken);
    private static Task`1<BuildResult> BuildAsync(BuildManager buildManager, BuildRequestData requestData, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.CodeAnalysis.MSBuild.CommandLineArgumentReader : object {
    protected ProjectInstance Project;
    private Builder<string> _builder;
    private static ImmutableDictionary`2<string, string> s_debugTypeValues;
    protected CommandLineArgumentReader(ProjectInstance project);
    private static CommandLineArgumentReader();
    protected abstract virtual void ReadCore();
    private static void ValidateName(string name);
    protected void Add(string name);
    protected void Add(string name, string value);
    protected void Add(string name, int value);
    protected void AddIfNotNullOrWhiteSpace(string name, string value);
    protected void AddIfTrue(string name, bool condition);
    protected void AddIfTrue(string name, string value, bool condition);
    protected void AddIfFalse(string name, bool condition);
    protected void AddWithPlus(string name);
    protected void AddWithMinus(string name);
    protected void AddWithPlusOrMinus(string name, bool condition);
    protected string GetDocumentFilePath(ITaskItem documentItem);
    protected string GetAbsolutePath(string path);
    protected void ReadAdditionalFiles();
    protected void ReadAnalyzers();
    protected void ReadCodePage();
    protected void ReadDebugInfo();
    protected void ReadDelaySign();
    protected void ReadErrorReport();
    protected void ReadFeatures();
    protected void ReadImports();
    protected void ReadPlatform();
    protected void ReadReferences();
    protected void ReadSigning();
    protected ImmutableArray`1<string> Read();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.MSBuild.Conversions : object {
    public static bool ToBool(string value);
    public static int ToInt(string value);
    public static ulong ToULong(string value);
    [NullableContextAttribute("0")]
public static Nullable`1<TEnum> ToEnum(string value, bool ignoreCase);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.DiagnosticReporter : object {
    internal ImmutableList`1<WorkspaceDiagnostic> Diagnostics;
    private Workspace _workspace;
    public DiagnosticReporter(Workspace workspace);
    public void Report(DiagnosticReportingMode mode, string message, Func`2<string, Exception> createException);
    internal void AddDiagnostic(WorkspaceDiagnostic diagnostic);
    public void Report(WorkspaceDiagnostic diagnostic);
    public void Report(DiagnosticLog log);
    private static string GetMSBuildFailedMessage(string projectFilePath, string message);
}
internal enum Microsoft.CodeAnalysis.MSBuild.DiagnosticReportingMode : Enum {
    public int value__;
    public static DiagnosticReportingMode Throw;
    public static DiagnosticReportingMode Log;
    public static DiagnosticReportingMode Ignore;
}
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.MSBuild.DiagnosticReportingOptions : ValueType {
    [CompilerGeneratedAttribute]
private DiagnosticReportingMode <OnPathFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticReportingMode <OnLoaderFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticReportingOptions <IgnoreAll>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticReportingOptions <ThrowForAll>k__BackingField;
    public DiagnosticReportingMode OnPathFailure { get; }
    public DiagnosticReportingMode OnLoaderFailure { get; }
    public static DiagnosticReportingOptions IgnoreAll { get; }
    public static DiagnosticReportingOptions ThrowForAll { get; }
    public DiagnosticReportingOptions(DiagnosticReportingMode onPathFailure, DiagnosticReportingMode onLoaderFailure);
    private static DiagnosticReportingOptions();
    [CompilerGeneratedAttribute]
public DiagnosticReportingMode get_OnPathFailure();
    [CompilerGeneratedAttribute]
public DiagnosticReportingMode get_OnLoaderFailure();
    [CompilerGeneratedAttribute]
public static DiagnosticReportingOptions get_IgnoreAll();
    [CompilerGeneratedAttribute]
public static DiagnosticReportingOptions get_ThrowForAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.DocumentFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogicalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLinked>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceCodeKind <SourceCodeKind>k__BackingField;
    public string FilePath { get; }
    public string LogicalPath { get; }
    public bool IsLinked { get; }
    public bool IsGenerated { get; }
    public SourceCodeKind SourceCodeKind { get; }
    public DocumentFileInfo(string filePath, string logicalPath, bool isLinked, bool isGenerated, SourceCodeKind sourceCodeKind);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_LogicalPath();
    [CompilerGeneratedAttribute]
public bool get_IsLinked();
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
public SourceCodeKind get_SourceCodeKind();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.MSBuild.Extensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetAdditionalFiles(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetAnalyzers(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetDocuments(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetEditorConfigFiles(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetMetadataReferences(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ProjectFileReference> GetProjectReferences(ProjectInstance executedProject);
    private static ProjectFileReference CreateProjectFileReference(ProjectItemInstance reference);
    [ExtensionAttribute]
public static ImmutableArray`1<string> GetAliases(ITaskItem item);
    [ExtensionAttribute]
public static bool ReferenceOutputAssemblyIsTrue(ITaskItem item);
    [ExtensionAttribute]
public static string ReadPropertyString(ProjectInstance executedProject, string propertyName);
    [ExtensionAttribute]
public static bool ReadPropertyBool(ProjectInstance executedProject, string propertyName);
    [ExtensionAttribute]
public static int ReadPropertyInt(ProjectInstance executedProject, string propertyName);
    [ExtensionAttribute]
public static ulong ReadPropertyULong(ProjectInstance executedProject, string propertyName);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static Nullable`1<TEnum> ReadPropertyEnum(ProjectInstance executedProject, string propertyName, bool ignoreCase);
    [ExtensionAttribute]
public static string ReadItemsAsString(ProjectInstance executedProject, string itemType);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetTaskItems(ProjectInstance executedProject, string itemType);
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.MSBuild.IProjectFile {
    public string FilePath { get; }
    public DiagnosticLog Log { get; }
    public abstract virtual string get_FilePath();
    public abstract virtual DiagnosticLog get_Log();
    public abstract virtual Task`1<ImmutableArray`1<ProjectFileInfo>> GetProjectFileInfosAsync(CancellationToken cancellationToken);
    public abstract virtual string GetDocumentExtension(SourceCodeKind kind);
    public abstract virtual void AddDocument(string filePath, string logicalPath);
    public abstract virtual void RemoveDocument(string filePath);
    public abstract virtual void AddMetadataReference(MetadataReference reference, AssemblyIdentity identity);
    public abstract virtual void RemoveMetadataReference(MetadataReference reference, AssemblyIdentity identity);
    public abstract virtual void AddProjectReference(string projectName, ProjectFileReference reference);
    public abstract virtual void RemoveProjectReference(string projectName, string projectFilePath);
    public abstract virtual void AddAnalyzerReference(AnalyzerReference reference);
    public abstract virtual void RemoveAnalyzerReference(AnalyzerReference reference);
    public abstract virtual void Save();
}
[NullableContextAttribute("1")]
internal interface Microsoft.CodeAnalysis.MSBuild.IProjectFileLoader {
    public string Language { get; }
    public abstract virtual string get_Language();
    public abstract virtual Task`1<IProjectFile> LoadProjectFileAsync(string path, ProjectBuildManager buildManager, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.MSBuild.ItemNames : object {
    public static string AdditionalFiles;
    public static string Analyzer;
    public static string Compile;
    public static string CscCommandLineArgs;
    public static string DocFileItem;
    public static string EditorConfigFiles;
    public static string Import;
    public static string ProjectReference;
    public static string Reference;
    public static string ReferencePath;
    public static string VbcCommandLineArgs;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.CodeAnalysis.MSBuild.Logging.DiagnosticLog : object {
    private List`1<DiagnosticLogItem> _items;
    public int Count { get; }
    public DiagnosticLogItem Item { get; }
    public bool IsEmpty { get; }
    public bool HasFailure { get; }
    public int get_Count();
    public DiagnosticLogItem get_Item(int index);
    public bool get_IsEmpty();
    public bool get_HasFailure();
    public sealed virtual IEnumerator`1<DiagnosticLogItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void Add(DiagnosticLogItem item);
    public void Add(string message, string projectFilePath, WorkspaceDiagnosticKind kind);
    public void Add(Exception exception, string projectFilePath, WorkspaceDiagnosticKind kind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.Logging.DiagnosticLogItem : object {
    [CompilerGeneratedAttribute]
private WorkspaceDiagnosticKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectFilePath>k__BackingField;
    public WorkspaceDiagnosticKind Kind { get; }
    public string Message { get; }
    public string ProjectFilePath { get; }
    public DiagnosticLogItem(WorkspaceDiagnosticKind kind, string message, string projectFilePath);
    public DiagnosticLogItem(WorkspaceDiagnosticKind kind, Exception exception, string projectFilePath);
    [CompilerGeneratedAttribute]
public WorkspaceDiagnosticKind get_Kind();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_ProjectFilePath();
    public virtual string ToString();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.Logging.MSBuildDiagnosticLogger : object {
    private string _projectFilePath;
    private DiagnosticLog _log;
    private IEventSource _eventSource;
    [CompilerGeneratedAttribute]
private string <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggerVerbosity <Verbosity>k__BackingField;
    public string Parameters { get; public set; }
    public LoggerVerbosity Verbosity { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Parameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Parameters(string value);
    [CompilerGeneratedAttribute]
public sealed virtual LoggerVerbosity get_Verbosity();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Verbosity(LoggerVerbosity value);
    [NullableContextAttribute("1")]
public void SetProjectAndLog(string projectFilePath, DiagnosticLog log);
    [NullableContextAttribute("1")]
private void OnErrorRaised(object sender, BuildErrorEventArgs e);
    [NullableContextAttribute("1")]
private void OnWarningRaised(object sender, BuildWarningEventArgs e);
    [NullableContextAttribute("1")]
public sealed virtual void Initialize(IEventSource eventSource);
    public sealed virtual void Shutdown();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.Logging.MSBuildDiagnosticLogItem : DiagnosticLogItem {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    public string FileName { get; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public MSBuildDiagnosticLogItem(WorkspaceDiagnosticKind kind, string projectFilePath, string message, string fileName, int lineNumber, int columnNumber);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.MSBuild.MetadataNames : object {
    public static string Aliases;
    public static string HintPath;
    public static string Link;
    public static string Name;
    public static string ReferenceOutputAssembly;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader : object {
    private HostWorkspaceServices _workspaceServices;
    private DiagnosticReporter _diagnosticReporter;
    private PathResolver _pathResolver;
    private ProjectFileLoaderRegistry _projectFileLoaderRegistry;
    private NonReentrantLock _dataGuard;
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadMetadataForReferencedProjects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipUnrecognizedProjects>k__BackingField;
    public ImmutableDictionary`2<string, string> Properties { get; private set; }
    public bool LoadMetadataForReferencedProjects { get; public set; }
    public bool SkipUnrecognizedProjects { get; public set; }
    internal MSBuildProjectLoader(HostWorkspaceServices workspaceServices, DiagnosticReporter diagnosticReporter, ProjectFileLoaderRegistry projectFileLoaderRegistry, ImmutableDictionary`2<string, string> properties);
    public MSBuildProjectLoader(Workspace workspace, ImmutableDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(ImmutableDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_LoadMetadataForReferencedProjects();
    [CompilerGeneratedAttribute]
public void set_LoadMetadataForReferencedProjects(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipUnrecognizedProjects();
    [CompilerGeneratedAttribute]
public void set_SkipUnrecognizedProjects(bool value);
    public void AssociateFileExtensionWithLanguage(string projectFileExtension, string language);
    [NullableContextAttribute("2")]
private void SetSolutionProperties(string solutionFilePath);
    private DiagnosticReportingMode GetReportingModeForUnrecognizedProjects();
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader/<LoadSolutionInfoAsync>d__22")]
public Task`1<SolutionInfo> LoadSolutionInfoAsync(string solutionFilePath, IProgress`1<ProjectLoadProgress> progress, ILogger msbuildLogger, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildProjectLoader/<LoadProjectInfoAsync>d__23")]
public Task`1<ImmutableArray`1<ProjectInfo>> LoadProjectInfoAsync(string projectFilePath, ProjectMap projectMap, IProgress`1<ProjectLoadProgress> progress, ILogger msbuildLogger, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace : Workspace {
    private NonReentrantLock _serializationLock;
    private MSBuildProjectLoader _loader;
    private ProjectFileLoaderRegistry _projectFileLoaderRegistry;
    private DiagnosticReporter _reporter;
    [NullableAttribute("2")]
private IProjectFile _applyChangesProjectFile;
    public ImmutableDictionary`2<string, string> Properties { get; }
    public ImmutableList`1<WorkspaceDiagnostic> Diagnostics { get; }
    public bool LoadMetadataForReferencedProjects { get; public set; }
    public bool SkipUnrecognizedProjects { get; public set; }
    private MSBuildWorkspace(HostServices hostServices, ImmutableDictionary`2<string, string> properties);
    public static MSBuildWorkspace Create();
    public static MSBuildWorkspace Create(IDictionary`2<string, string> properties);
    public static MSBuildWorkspace Create(HostServices hostServices);
    public static MSBuildWorkspace Create(IDictionary`2<string, string> properties, HostServices hostServices);
    public ImmutableDictionary`2<string, string> get_Properties();
    public ImmutableList`1<WorkspaceDiagnostic> get_Diagnostics();
    protected internal virtual void OnWorkspaceFailed(WorkspaceDiagnostic diagnostic);
    public bool get_LoadMetadataForReferencedProjects();
    public void set_LoadMetadataForReferencedProjects(bool value);
    public bool get_SkipUnrecognizedProjects();
    public void set_SkipUnrecognizedProjects(bool value);
    public void AssociateFileExtensionWithLanguage(string projectFileExtension, string language);
    public void CloseSolution();
    private static string GetAbsolutePath(string path, string baseDirectoryPath);
    public Task`1<Solution> OpenSolutionAsync(string solutionFilePath, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace/<OpenSolutionAsync>d__24")]
public Task`1<Solution> OpenSolutionAsync(string solutionFilePath, ILogger msbuildLogger, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    public Task`1<Project> OpenProjectAsync(string projectFilePath, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace/<OpenProjectAsync>d__26")]
public Task`1<Project> OpenProjectAsync(string projectFilePath, ILogger msbuildLogger, IProgress`1<ProjectLoadProgress> progress, CancellationToken cancellationToken);
    public virtual bool CanApplyChange(ApplyChangesKind feature);
    private static bool HasProjectFileChanges(ProjectChanges changes);
    public virtual bool TryApplyChanges(Solution newSolution);
    internal virtual bool TryApplyChanges(Solution newSolution, IProgressTracker progressTracker);
    protected virtual void ApplyProjectChanges(ProjectChanges projectChanges);
    protected virtual void ApplyDocumentTextChanged(DocumentId documentId, SourceText text);
    protected virtual void ApplyAdditionalDocumentTextChanged(DocumentId documentId, SourceText text);
    private static Encoding DetermineEncoding(SourceText text, TextDocument document);
    protected virtual void ApplyDocumentAdded(DocumentInfo info, SourceText text);
    private void SaveDocumentText(DocumentId id, string fullPath, SourceText newText, Encoding encoding);
    protected virtual void ApplyDocumentRemoved(DocumentId documentId);
    private void DeleteDocumentFile(DocumentId documentId, string fullPath);
    protected virtual void ApplyMetadataReferenceAdded(ProjectId projectId, MetadataReference metadataReference);
    protected virtual void ApplyMetadataReferenceRemoved(ProjectId projectId, MetadataReference metadataReference);
    private AssemblyIdentity GetAssemblyIdentity(ProjectId projectId, MetadataReference metadataReference);
    protected virtual void ApplyProjectReferenceAdded(ProjectId projectId, ProjectReference projectReference);
    protected virtual void ApplyProjectReferenceRemoved(ProjectId projectId, ProjectReference projectReference);
    protected virtual void ApplyAnalyzerReferenceAdded(ProjectId projectId, AnalyzerReference analyzerReference);
    protected virtual void ApplyAnalyzerReferenceRemoved(ProjectId projectId, AnalyzerReference analyzerReference);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.PathResolver : object {
    private DiagnosticReporter _diagnosticReporter;
    public PathResolver(DiagnosticReporter diagnosticReporter);
    public bool TryGetAbsoluteSolutionPath(string path, string baseDirectory, DiagnosticReportingMode reportingMode, String& absolutePath);
    public bool TryGetAbsoluteProjectPath(string path, string baseDirectory, DiagnosticReportingMode reportingMode, String& absolutePath);
    private static string GetAbsolutePath(string path, string baseDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.CodeAnalysis.MSBuild.ProjectFile : object {
    private ProjectFileLoader _loader;
    [NullableAttribute("2")]
private Project _loadedProject;
    private ProjectBuildManager _buildManager;
    private string _projectDirectory;
    [CompilerGeneratedAttribute]
private DiagnosticLog <Log>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<string, ProjectItem> _documents;
    [NullableAttribute("2")]
private static string s_frameworkRoot;
    public DiagnosticLog Log { get; }
    public string FilePath { get; }
    public string Language { get; }
    private static string FrameworkRoot { get; }
    protected ProjectFile(ProjectFileLoader loader, Project loadedProject, ProjectBuildManager buildManager, DiagnosticLog log);
    [CompilerGeneratedAttribute]
public sealed virtual DiagnosticLog get_Log();
    public virtual string get_FilePath();
    public string get_Language();
    protected abstract virtual SourceCodeKind GetSourceCodeKind(string documentFileName);
    public abstract virtual string GetDocumentExtension(SourceCodeKind kind);
    protected abstract virtual IEnumerable`1<ITaskItem> GetCompilerCommandLineArgs(ProjectInstance executedProject);
    protected abstract virtual ImmutableArray`1<string> ReadCommandLineArgs(ProjectInstance project);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.ProjectFile/<GetProjectFileInfosAsync>d__16")]
public sealed virtual Task`1<ImmutableArray`1<ProjectFileInfo>> GetProjectFileInfosAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.ProjectFile/<BuildProjectFileInfoAsync>d__17")]
private Task`1<ProjectFileInfo> BuildProjectFileInfoAsync(CancellationToken cancellationToken);
    private ProjectFileInfo CreateProjectFileInfo(ProjectInstance project);
    private ImmutableArray`1<string> GetCommandLineArgs(ProjectInstance project);
    protected static bool IsNotTemporaryGeneratedFile(ITaskItem item);
    private DocumentFileInfo MakeDocumentFileInfo(ITaskItem documentItem);
    private DocumentFileInfo MakeNonSourceFileDocumentFileInfo(ITaskItem documentItem);
    private string GetAbsolutePathRelativeToProject(string path);
    private string GetDocumentFilePath(ITaskItem documentItem);
    private static bool IsDocumentLinked(ITaskItem documentItem);
    protected bool IsDocumentGenerated(ITaskItem documentItem);
    protected static string GetDocumentLogicalPath(ITaskItem documentItem, string projectDirectory);
    public sealed virtual void AddDocument(string filePath, string logicalPath);
    public sealed virtual void RemoveDocument(string filePath);
    public sealed virtual void AddMetadataReference(MetadataReference reference, AssemblyIdentity identity);
    private static bool IsInGAC(string filePath);
    private static string get_FrameworkRoot();
    private static bool IsFrameworkReferenceAssembly(string filePath);
    public sealed virtual void RemoveMetadataReference(MetadataReference reference, AssemblyIdentity identity);
    private ProjectItem FindReferenceItem(AssemblyIdentity identity, string filePath);
    private static string GetHintPath(ProjectItem item);
    public sealed virtual void AddProjectReference(string projectName, ProjectFileReference reference);
    public sealed virtual void RemoveProjectReference(string projectName, string projectFilePath);
    private ProjectItem FindProjectReferenceItem(string projectName, string projectFilePath);
    public sealed virtual void AddAnalyzerReference(AnalyzerReference reference);
    public sealed virtual void RemoveAnalyzerReference(AnalyzerReference reference);
    public sealed virtual void Save();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[MetadataAttributeAttribute]
[AttributeUsageAttribute("4")]
internal class Microsoft.CodeAnalysis.MSBuild.ProjectFileExtensionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ProjectFileExtension>k__BackingField;
    public string ProjectFileExtension { get; public set; }
    public ProjectFileExtensionAttribute(string extension);
    [CompilerGeneratedAttribute]
public string get_ProjectFileExtension();
    [CompilerGeneratedAttribute]
public void set_ProjectFileExtension(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.ProjectFileInfo : object {
    [CompilerGeneratedAttribute]
private bool <IsEmpty>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputRefFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <CommandLineArgs>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DocumentFileInfo> <Documents>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DocumentFileInfo> <AdditionalDocuments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<DocumentFileInfo> <AnalyzerConfigDocuments>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<ProjectFileReference> <ProjectReferences>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private DiagnosticLog <Log>k__BackingField;
    public bool IsEmpty { get; }
    [NullableAttribute("1")]
public string Language { get; }
    public string FilePath { get; }
    public string OutputFilePath { get; }
    public string OutputRefFilePath { get; }
    public string DefaultNamespace { get; }
    public string TargetFramework { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> CommandLineArgs { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DocumentFileInfo> Documents { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DocumentFileInfo> AdditionalDocuments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DocumentFileInfo> AnalyzerConfigDocuments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<ProjectFileReference> ProjectReferences { get; }
    [NullableAttribute("1")]
public DiagnosticLog Log { get; }
    private ProjectFileInfo(bool isEmpty, string language, string filePath, string outputFilePath, string outputRefFilePath, string defaultNamespace, string targetFramework, ImmutableArray`1<string> commandLineArgs, ImmutableArray`1<DocumentFileInfo> documents, ImmutableArray`1<DocumentFileInfo> additionalDocuments, ImmutableArray`1<DocumentFileInfo> analyzerConfigDocuments, ImmutableArray`1<ProjectFileReference> projectReferences, DiagnosticLog log);
    [CompilerGeneratedAttribute]
public bool get_IsEmpty();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public string get_OutputRefFilePath();
    [CompilerGeneratedAttribute]
public string get_DefaultNamespace();
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_CommandLineArgs();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_Documents();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_AdditionalDocuments();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_AnalyzerConfigDocuments();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ProjectFileReference> get_ProjectReferences();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DiagnosticLog get_Log();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static ProjectFileInfo Create(string language, string filePath, string outputFilePath, string outputRefFilePath, string defaultNamespace, string targetFramework, ImmutableArray`1<string> commandLineArgs, ImmutableArray`1<DocumentFileInfo> documents, ImmutableArray`1<DocumentFileInfo> additionalDocuments, ImmutableArray`1<DocumentFileInfo> analyzerConfigDocuments, ImmutableArray`1<ProjectFileReference> projectReferences, DiagnosticLog log);
    [NullableContextAttribute("1")]
public static ProjectFileInfo CreateEmpty(string language, string filePath, DiagnosticLog log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.CodeAnalysis.MSBuild.ProjectFileLoader : object {
    public string Language { get; }
    public abstract virtual string get_Language();
    protected abstract virtual ProjectFile CreateProjectFile(Project project, ProjectBuildManager buildManager, DiagnosticLog log);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.MSBuild.ProjectFileLoader/<LoadProjectFileAsync>d__3")]
public sealed virtual Task`1<IProjectFile> LoadProjectFileAsync(string path, ProjectBuildManager buildManager, CancellationToken cancellationToken);
    public static IProjectFileLoader GetLoaderForProjectFileExtension(HostWorkspaceServices workspaceServices, string extension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.ProjectFileLoaderRegistry : object {
    private HostWorkspaceServices _workspaceServices;
    private DiagnosticReporter _diagnosticReporter;
    private Dictionary`2<string, string> _extensionToLanguageMap;
    private NonReentrantLock _dataGuard;
    public ProjectFileLoaderRegistry(HostWorkspaceServices workspaceServices, DiagnosticReporter diagnosticReporter);
    public void AssociateFileExtensionWithLanguage(string fileExtension, string language);
    [NullableContextAttribute("2")]
public bool TryGetLoaderFromProjectPath(string projectFilePath, IProjectFileLoader& loader);
    [NullableContextAttribute("2")]
public bool TryGetLoaderFromProjectPath(string projectFilePath, DiagnosticReportingMode mode, IProjectFileLoader& loader);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.MSBuild.ProjectFileReference : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Aliases>k__BackingField;
    public string Path { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> Aliases { get; }
    public ProjectFileReference(string path, ImmutableArray`1<string> aliases);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Aliases();
}
public enum Microsoft.CodeAnalysis.MSBuild.ProjectLoadOperation : Enum {
    public int value__;
    public static ProjectLoadOperation Evaluate;
    public static ProjectLoadOperation Build;
    public static ProjectLoadOperation Resolve;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.MSBuild.ProjectLoadProgress : ValueType {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectLoadOperation <Operation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TargetFramework>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ElapsedTime>k__BackingField;
    public string FilePath { get; }
    public ProjectLoadOperation Operation { get; }
    [NullableAttribute("2")]
public string TargetFramework { get; }
    public TimeSpan ElapsedTime { get; }
    internal ProjectLoadProgress(string filePath, ProjectLoadOperation operation, string targetFramework, TimeSpan elapsedTime);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_FilePath();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ProjectLoadOperation get_Operation();
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TargetFramework();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TimeSpan get_ElapsedTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.MSBuild.ProjectMap : object {
    private Dictionary`2<string, HashSet`1<ProjectId>> _projectPathToProjectIdsMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ImmutableArray`1<ProjectInfo>> _projectPathToProjectInfosMap;
    private Dictionary`2<ProjectId, string> _projectIdToOutputFilePathMap;
    private Dictionary`2<ProjectId, string> _projectIdToOutputRefFilePathMap;
    public static ProjectMap Create();
    public static ProjectMap Create(Solution solution);
    public void Add(Project project);
    [NullableContextAttribute("2")]
private void Add(ProjectId projectId, string projectPath, string outputFilePath, string outputRefFilePath);
    internal void AddProjectInfo(ProjectInfo projectInfo);
    [NullableContextAttribute("2")]
private ProjectId CreateProjectId(string projectPath, string outputFilePath, string outputRefFilePath);
    internal ProjectId GetOrCreateProjectId(string projectPath);
    internal ProjectId GetOrCreateProjectId(ProjectFileInfo projectFileInfo);
    [NullableContextAttribute("2")]
private bool TryFindOutputFileRefPathInProjectIdSet(string outputRefFilePath, HashSet`1<ProjectId> set, ProjectId& result);
    [NullableContextAttribute("2")]
private bool TryFindOutputFilePathInProjectIdSet(string outputFilePath, HashSet`1<ProjectId> set, ProjectId& result);
    [NullableContextAttribute("2")]
private static bool TryFindPathInProjectIdSet(string path, Func`2<ProjectId, string> getPathById, HashSet`1<ProjectId> set, ProjectId& result);
    internal string GetOutputRefFilePathById(ProjectId projectId);
    internal string GetOutputFilePathById(ProjectId projectId);
    internal bool TryGetIdsByProjectPath(string projectPath, HashSet`1& ids);
    internal bool TryGetOutputFilePathById(ProjectId id, String& outputFilePath);
    internal bool TryGetOutputRefFilePathById(ProjectId id, String& outputRefFilePath);
    internal bool TryGetProjectInfosByProjectPath(string projectPath, ImmutableArray`1& projectInfos);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.MSBuild.PropertyNames : object {
    public static string AllowUnsafeBlocks;
    public static string AppConfigForCompiler;
    public static string BaseAddress;
    public static string BuildProjectReferences;
    public static string BuildingInsideVisualStudio;
    public static string BuildingProject;
    public static string CheckForOverflowUnderflow;
    public static string CodePage;
    public static string ContinueOnError;
    public static string DebugSymbols;
    public static string DebugType;
    public static string DefineConstants;
    public static string DelaySign;
    public static string DesignTimeBuild;
    public static string DocFileItem;
    public static string ErrorReport;
    public static string Features;
    public static string FileAlignment;
    public static string FinalDefineConstants;
    public static string FrameworkPathOverride;
    public static string GenerateDocumentation;
    public static string GenerateFullPaths;
    public static string HighEntropyVA;
    public static string IntermediateAssembly;
    public static string KeyContainerName;
    public static string KeyOriginatorFile;
    public static string LangVersion;
    public static string ModuleAssemblyName;
    public static string NoCompilerStandardLib;
    public static string NonExistentFile;
    public static string NoWarn;
    public static string _NoWarnings;
    public static string Optimize;
    public static string OptionCompare;
    public static string OptionExplicit;
    public static string OptionInfer;
    public static string OptionStrict;
    public static string OptionStrictType;
    public static string OutputType;
    public static string PdbFile;
    public static string PlatformTarget;
    public static string Prefer32Bit;
    public static string ProvideCommandLineArgs;
    public static string RemoveIntegerChecks;
    public static string ResolvedCodeAnalysisRuleSet;
    public static string RootNamespace;
    public static string ShouldUnsetParentConfigurationAndPlatform;
    public static string SignAssembly;
    public static string SkipCompilerExecution;
    public static string StartupObject;
    public static string SubsystemVersion;
    public static string TargetCompactFramework;
    public static string TargetFramework;
    public static string TargetFrameworks;
    public static string TargetPath;
    public static string TargetRefPath;
    public static string TreatWarningsAsErrors;
    public static string VbRuntime;
    public static string WarningLevel;
    public static string WarningsAsErrors;
    public static string WarningsNotAsErrors;
}
internal static class Microsoft.CodeAnalysis.MSBuild.PropertyValues : object {
    [NullableAttribute("1")]
public static string ErrorAndContinue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.MSBuild.TargetNames : object {
    public static string Compile;
    public static string CoreCompile;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.VisualBasic.VisualBasicCommandLineArgumentReader : CommandLineArgumentReader {
    public VisualBasicCommandLineArgumentReader(ProjectInstance project);
    public static ImmutableArray`1<string> Read(ProjectInstance project);
    protected virtual void ReadCore();
    private void ReadDoc();
    private void ReadOptions();
    private void ReadVbRuntime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.VisualBasic.VisualBasicProjectFile : ProjectFile {
    public VisualBasicProjectFile(VisualBasicProjectFileLoader loader, Project loadedProject, ProjectBuildManager buildManager, DiagnosticLog log);
    protected virtual SourceCodeKind GetSourceCodeKind(string documentFileName);
    public virtual string GetDocumentExtension(SourceCodeKind sourceCodeKind);
    protected virtual IEnumerable`1<ITaskItem> GetCompilerCommandLineArgs(ProjectInstance executedProject);
    protected virtual ImmutableArray`1<string> ReadCommandLineArgs(ProjectInstance project);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.VisualBasic.VisualBasicProjectFileLoader : ProjectFileLoader {
    public string Language { get; }
    public virtual string get_Language();
    protected virtual ProjectFile CreateProjectFile(Project project, ProjectBuildManager buildManager, DiagnosticLog log);
}
[SharedAttribute]
[ExportLanguageServiceFactoryAttribute("Microsoft.CodeAnalysis.MSBuild.IProjectFileLoader", "Visual Basic", "Default")]
[ProjectFileExtensionAttribute("vbproj")]
internal class Microsoft.CodeAnalysis.VisualBasic.VisualBasicProjectFileLoaderFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual ILanguageService CreateLanguageService(HostLanguageServices languageServices);
}
internal static class Microsoft.CodeAnalysis.WorkspaceMSBuildResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Duplicate_project_discovered_and_skipped_0 { get; }
    internal static string Failed_to_load_solution_filter_0 { get; }
    internal static string Found_project_reference_without_a_matching_metadata_reference_0 { get; }
    internal static string Found_project_with_the_same_file_path_and_output_path_as_another_project_0 { get; }
    internal static string Invalid_0_specified_1 { get; }
    internal static string Msbuild_failed_when_processing_the_file_0 { get; }
    internal static string Msbuild_failed_when_processing_the_file_0_with_message_1 { get; }
    internal static string Parameter_cannot_be_null_empty_or_contain_whitespace { get; }
    internal static string Path_for_document_0_was_null { get; }
    internal static string Project_already_added { get; }
    internal static string Project_does_not_contain_0_target { get; }
    internal static string Project_does_not_have_a_path { get; }
    internal static string Project_path_for_0_was_null { get; }
    internal static string Unable_to_add_metadata_reference_0 { get; }
    internal static string Unable_to_find_0 { get; }
    internal static string Unable_to_find_a_0_for_1 { get; }
    internal static string Unable_to_remove_metadata_reference_0 { get; }
    internal static string Unresolved_metadata_reference_removed_from_project_0 { get; }
    internal static string Path_for_additional_document_0_was_null { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_Duplicate_project_discovered_and_skipped_0();
    internal static string get_Failed_to_load_solution_filter_0();
    internal static string get_Found_project_reference_without_a_matching_metadata_reference_0();
    internal static string get_Found_project_with_the_same_file_path_and_output_path_as_another_project_0();
    internal static string get_Invalid_0_specified_1();
    internal static string get_Msbuild_failed_when_processing_the_file_0();
    internal static string get_Msbuild_failed_when_processing_the_file_0_with_message_1();
    internal static string get_Parameter_cannot_be_null_empty_or_contain_whitespace();
    internal static string get_Path_for_document_0_was_null();
    internal static string get_Project_already_added();
    internal static string get_Project_does_not_contain_0_target();
    internal static string get_Project_does_not_have_a_path();
    internal static string get_Project_path_for_0_was_null();
    internal static string get_Unable_to_add_metadata_reference_0();
    internal static string get_Unable_to_find_0();
    internal static string get_Unable_to_find_a_0_for_1();
    internal static string get_Unable_to_remove_metadata_reference_0();
    internal static string get_Unresolved_metadata_reference_removed_from_project_0();
    internal static string get_Path_for_additional_document_0_was_null();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
