[AttributeUsageAttribute("4")]
public class Uno.SourceGeneration.GenerateAfterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <GeneratorToExecuteBefore>k__BackingField;
    public string GeneratorToExecuteBefore { get; }
    public GenerateAfterAttribute(string generatorToExecuteBefore);
    [CompilerGeneratedAttribute]
public string get_GeneratorToExecuteBefore();
}
[AttributeUsageAttribute("4")]
public class Uno.SourceGeneration.GenerateBeforeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <GeneratorToExecuteAfter>k__BackingField;
    public string GeneratorToExecuteAfter { get; }
    public GenerateBeforeAttribute(string generatorToExecuteAfter);
    [CompilerGeneratedAttribute]
public string get_GeneratorToExecuteAfter();
}
[AttributeUsageAttribute("4")]
public class Uno.SourceGeneration.GeneratorAttribute : Attribute {
}
public abstract class Uno.SourceGeneration.GeneratorExecutionContext : object {
    [CompilerGeneratedAttribute]
private Compilation <Compilation>k__BackingField;
    [CompilerGeneratedAttribute]
private ParseOptions <ParseOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public Compilation Compilation { get; }
    public ParseOptions ParseOptions { get; }
    public ImmutableArray`1<AdditionalText> AdditionalFiles { get; }
    public CancellationToken CancellationToken { get; }
    protected GeneratorExecutionContext(Compilation compilation, ParseOptions parseOptions, CancellationToken token);
    [CompilerGeneratedAttribute]
public Compilation get_Compilation();
    [CompilerGeneratedAttribute]
public ParseOptions get_ParseOptions();
    public abstract virtual ImmutableArray`1<AdditionalText> get_AdditionalFiles();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    public abstract virtual void AddSource(string hintName, string source);
    public abstract virtual void AddSource(string hintName, SourceText sourceText);
    public abstract virtual void ReportDiagnostic(Diagnostic diagnostic);
    public abstract virtual bool TryGetOptionValue(SyntaxTree tree, string key, String& value);
    public abstract virtual bool TryGetOptionValue(AdditionalText textFile, string key, String& value);
    public abstract virtual bool TryGetGlobalOptionValue(string key, String& value);
}
[ExtensionAttribute]
public static class Uno.SourceGeneration.GeneratorExecutionContextExtensions : object {
    private static ConditionalWeakTable`2<GeneratorExecutionContext, ProjectInstance> _project;
    private static ConditionalWeakTable`2<GeneratorExecutionContext, ISourceGeneratorLogger> _logger;
    private static GeneratorExecutionContextExtensions();
    [ExtensionAttribute]
public static ProjectInstance GetProjectInstance(GeneratorExecutionContext context);
    [ExtensionAttribute]
public static void SetProjectInstance(GeneratorExecutionContext context, ProjectInstance projectInstance);
    [ExtensionAttribute]
public static ISourceGeneratorLogger GetLogger(GeneratorExecutionContext context);
    [ExtensionAttribute]
public static void SetLogger(GeneratorExecutionContext context, ISourceGeneratorLogger logger);
    [ExtensionAttribute]
public static string GetMSBuildPropertyValue(GeneratorExecutionContext context, string name, string defaultValue);
    [ExtensionAttribute]
public static IEnumerable`1<MSBuildItem> GetMSBuildItems(GeneratorExecutionContext context, string name);
}
public class Uno.SourceGeneration.GeneratorInitializationContext : object {
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public CancellationToken CancellationToken { get; }
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
}
public interface Uno.SourceGeneration.ISourceGenerator {
    public abstract virtual void Execute(GeneratorExecutionContext context);
    public abstract virtual void Initialize(GeneratorInitializationContext context);
}
public interface Uno.SourceGeneration.ISourceGeneratorLogger {
    public abstract virtual void Debug(IFormattable message, Exception exception);
    public abstract virtual void Debug(string message, Exception exception);
    public abstract virtual void Info(IFormattable message, Exception exception);
    public abstract virtual void Info(string message, Exception exception);
    public abstract virtual void Warn(IFormattable message, Exception exception);
    public abstract virtual void Warn(string message, Exception exception);
    public abstract virtual void Error(IFormattable message, Exception exception);
    public abstract virtual void Error(string message, Exception exception);
}
public class Uno.SourceGeneration.MSBuildItem : object {
    private ProjectItemInstance _projectItemInstance;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    public string Identity { get; }
    internal MSBuildItem(ProjectItemInstance v);
    [CompilerGeneratedAttribute]
public string get_Identity();
    public string GetMetadataValue(string name);
}
public abstract class Uno.SourceGeneration.SourceGenerator : object {
    public abstract virtual void Execute(SourceGeneratorContext context);
}
public abstract class Uno.SourceGeneration.SourceGeneratorContext : object {
    public Compilation Compilation { get; }
    public Project Project { get; }
    public abstract virtual Compilation get_Compilation();
    public abstract virtual Project get_Project();
    public abstract virtual void ReportDiagnostic(Diagnostic diagnostic);
    public abstract virtual void AddCompilationUnit(string name, SyntaxTree tree);
    public abstract virtual void AddCompilationUnit(string name, string tree);
}
[ExtensionAttribute]
public static class Uno.SourceGeneration.SourceGeneratorExtensions : object {
    private static ConditionalWeakTable`2<SourceGeneratorContext, ProjectInstance> _project;
    private static ConditionalWeakTable`2<SourceGeneratorContext, ISourceGeneratorLogger> _logger;
    private static SourceGeneratorExtensions();
    [ExtensionAttribute]
public static ProjectInstance GetProjectInstance(SourceGeneratorContext context);
    [ExtensionAttribute]
public static void SetProjectInstance(SourceGeneratorContext context, ProjectInstance projectInstance);
    [ExtensionAttribute]
public static ISourceGeneratorLogger GetLogger(SourceGeneratorContext context);
    [ExtensionAttribute]
public static void SetLogger(SourceGeneratorContext context, ISourceGeneratorLogger logger);
}
