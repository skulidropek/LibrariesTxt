[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
internal abstract class Uno.SourceGeneration.Engine.Workspace.CommandLineArgumentReader : object {
    protected ProjectInstance Project;
    protected CommandLineArgumentReader(ProjectInstance project);
    protected abstract virtual void ReadCore();
    protected void Add(string name);
    protected void Add(string name, string value, bool addQuoteIfValueContainsWhitespace);
    protected void Add(string name, int value);
    protected void AddIfNotNullOrWhiteSpace(string name, string value, bool addQuoteIfValueContainsWhitespace);
    protected void AddIfTrue(string name, bool condition);
    protected void AddIfTrue(string name, string value, bool condition);
    protected void AddIfFalse(string name, bool condition);
    protected void AddWithPlus(string name);
    protected void AddWithMinus(string name);
    protected void AddWithPlusOrMinus(string name, bool condition);
    protected string GetDocumentFilePath(ITaskItem documentItem);
    protected string GetAbsolutePath(string path);
    protected void ReadAdditionalFiles();
    protected void ReadAnalyzers();
    protected void ReadCodePage();
    protected void ReadDebugInfo();
    protected void ReadDelaySign();
    protected void ReadErrorReport();
    protected void ReadFeatures();
    protected void ReadImports();
    protected void ReadPlatform();
    protected void ReadReferences();
    protected void ReadSigning();
    protected ImmutableArray`1<string> Read();
}
internal static class Uno.SourceGeneration.Engine.Workspace.CompilerOptionParseUtilities : object {
    public static IList`1<string> ParseFeatureFromMSBuild(string features);
    public static void ParseFeatures(IDictionary`2<string, string> builder, List`1<string> values);
}
internal static class Uno.SourceGeneration.Engine.Workspace.Constants.ItemNames : object {
    public static string AdditionalFiles;
    public static string Analyzer;
    public static string Compile;
    public static string CscCommandLineArgs;
    public static string DocFileItem;
    public static string EditorConfigFiles;
    public static string Import;
    public static string ProjectReference;
    public static string Reference;
    public static string ReferencePath;
    public static string VbcCommandLineArgs;
}
internal static class Uno.SourceGeneration.Engine.Workspace.Constants.MetadataNames : object {
    public static string Aliases;
    public static string HintPath;
    public static string Link;
    public static string Name;
    public static string ReferenceOutputAssembly;
}
internal static class Uno.SourceGeneration.Engine.Workspace.Constants.PropertyNames : object {
    public static string AllowUnsafeBlocks;
    public static string AppConfigForCompiler;
    public static string BaseAddress;
    public static string BuildProjectReferences;
    public static string BuildingInsideVisualStudio;
    public static string BuildingProject;
    public static string CheckForOverflowUnderflow;
    public static string CodePage;
    public static string ContinueOnError;
    public static string DebugSymbols;
    public static string DebugType;
    public static string DefineConstants;
    public static string DelaySign;
    public static string DesignTimeBuild;
    public static string DocFileItem;
    public static string ErrorReport;
    public static string Features;
    public static string FileAlignment;
    public static string FinalDefineConstants;
    public static string FrameworkPathOverride;
    public static string GenerateDocumentation;
    public static string GenerateFullPaths;
    public static string HighEntropyVA;
    public static string IntermediateAssembly;
    public static string KeyContainerName;
    public static string KeyOriginatorFile;
    public static string LangVersion;
    public static string ModuleAssemblyName;
    public static string NoCompilerStandardLib;
    public static string NoWarn;
    public static string _NoWarnings;
    public static string Optimize;
    public static string OptionCompare;
    public static string OptionExplicit;
    public static string OptionInfer;
    public static string OptionStrict;
    public static string OptionStrictType;
    public static string OutputType;
    public static string PdbFile;
    public static string PlatformTarget;
    public static string Prefer32Bit;
    public static string ProvideCommandLineArgs;
    public static string RemoveIntegerChecks;
    public static string ResolvedCodeAnalysisRuleSet;
    public static string RootNamespace;
    public static string SignAssembly;
    public static string SkipCompilerExecution;
    public static string StartupObject;
    public static string SubsystemVersion;
    public static string TargetCompactFramework;
    public static string TargetFramework;
    public static string TargetFrameworks;
    public static string TargetPath;
    public static string TargetRefPath;
    public static string TreatWarningsAsErrors;
    public static string VbRuntime;
    public static string WarningLevel;
    public static string WarningsAsErrors;
    public static string WarningsNotAsErrors;
}
internal static class Uno.SourceGeneration.Engine.Workspace.Conversions : object {
    public static bool ToBool(string value);
    public static int ToInt(string value);
    public static ulong ToULong(string value);
    public static Nullable`1<TEnum> ToEnum(string value, bool ignoreCase);
}
internal class Uno.SourceGeneration.Engine.Workspace.CSharpCommandLineArgumentReader : CommandLineArgumentReader {
    public static ImmutableArray`1<string> Read(ProjectInstance project);
    protected virtual void ReadCore();
}
internal class Uno.SourceGeneration.Engine.Workspace.DocumentFileInfo : object {
    public string FilePath { get; }
    public string LogicalPath { get; }
    public bool IsLinked { get; }
    public bool IsGenerated { get; }
    public SourceCodeKind SourceCodeKind { get; }
    public DocumentFileInfo(string filePath, string logicalPath, bool isLinked, bool isGenerated, SourceCodeKind sourceCodeKind);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_LogicalPath();
    [CompilerGeneratedAttribute]
public bool get_IsLinked();
    [CompilerGeneratedAttribute]
public bool get_IsGenerated();
    [CompilerGeneratedAttribute]
public SourceCodeKind get_SourceCodeKind();
}
[ExtensionAttribute]
internal static class Uno.SourceGeneration.Engine.Workspace.Extensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetAdditionalFiles(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetAnalyzers(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetDocuments(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetEditorConfigFiles(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetMetadataReferences(ProjectInstance executedProject);
    [ExtensionAttribute]
public static IEnumerable`1<ProjectFileReference> GetProjectReferences(ProjectInstance executedProject);
    [ExtensionAttribute]
public static bool HasReferenceOutputAssemblyMetadataEqualToTrue(ITaskItem item);
    [ExtensionAttribute]
public static ImmutableArray`1<string> GetAliases(ITaskItem item);
    [ExtensionAttribute]
public static bool ReferenceOutputAssemblyIsTrue(ITaskItem item);
    [ExtensionAttribute]
public static string ReadPropertyString(ProjectInstance executedProject, string propertyName);
    [ExtensionAttribute]
public static bool ReadPropertyBool(ProjectInstance executedProject, string propertyName);
    [ExtensionAttribute]
public static int ReadPropertyInt(ProjectInstance executedProject, string propertyName);
    [ExtensionAttribute]
public static ulong ReadPropertyULong(ProjectInstance executedProject, string propertyName);
    [ExtensionAttribute]
public static Nullable`1<TEnum> ReadPropertyEnum(ProjectInstance executedProject, string propertyName, bool ignoreCase);
    [ExtensionAttribute]
public static string ReadItemsAsString(ProjectInstance executedProject, string itemType);
    [ExtensionAttribute]
public static IEnumerable`1<ITaskItem> GetTaskItems(ProjectInstance executedProject, string itemType);
}
internal interface Uno.SourceGeneration.Engine.Workspace.IMetadataService {
    public abstract virtual PortableExecutableReference GetReference(string resolvedPath, MetadataReferenceProperties properties);
}
internal class Uno.SourceGeneration.Engine.Workspace.MetadataReferenceCache : object {
    public static MetadataReferenceCache Default { get; }
    public MetadataReferenceCache(Func`3<string, MetadataReferenceProperties, MetadataReference> createReference);
    [CompilerGeneratedAttribute]
public static MetadataReferenceCache get_Default();
    public MetadataReference GetReference(string path, MetadataReferenceProperties properties);
}
internal class Uno.SourceGeneration.Engine.Workspace.ProjectFileInfo : object {
    public bool IsEmpty { get; }
    public string Language { get; }
    public string FilePath { get; }
    public string OutputFilePath { get; }
    public string OutputRefFilePath { get; }
    public string TargetFramework { get; }
    public ImmutableArray`1<string> CommandLineArgs { get; }
    public ImmutableArray`1<DocumentFileInfo> Documents { get; }
    public ImmutableArray`1<DocumentFileInfo> AdditionalDocuments { get; }
    public ImmutableArray`1<DocumentFileInfo> AnalyzerConfigDocuments { get; }
    public ImmutableArray`1<ProjectFileReference> ProjectReferences { get; }
    [CompilerGeneratedAttribute]
public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_OutputFilePath();
    [CompilerGeneratedAttribute]
public string get_OutputRefFilePath();
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_CommandLineArgs();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_Documents();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_AdditionalDocuments();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<DocumentFileInfo> get_AnalyzerConfigDocuments();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ProjectFileReference> get_ProjectReferences();
    public virtual string ToString();
    public static ProjectFileInfo Create(string language, string filePath, string outputFilePath, string outputRefFilePath, string targetFramework, ImmutableArray`1<string> commandLineArgs, ImmutableArray`1<DocumentFileInfo> documents, ImmutableArray`1<DocumentFileInfo> additionalDocuments, ImmutableArray`1<DocumentFileInfo> analyzerConfigDocuments, ImmutableArray`1<ProjectFileReference> projectReferences);
    public static ProjectFileInfo CreateEmpty(string language, string filePath);
    public static ProjectFileInfo FromMSBuildProjectInstance(string language, Project loadedProject, ProjectInstance project);
}
internal class Uno.SourceGeneration.Engine.Workspace.ProjectFileReference : object {
    public string Path { get; }
    public ImmutableArray`1<string> Aliases { get; }
    public ProjectFileReference(string path, ImmutableArray`1<string> aliases);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_Aliases();
}
internal class Uno.SourceGeneration.Engine.Workspace.ProjectInfoBuilder : object {
    public static ProjectInfo CreateProjectInfo(ProjectFileInfo projectFileInfo);
}
internal class Uno.SourceGeneration.Engine.Workspace.RelativePathResolver : object {
    public ImmutableArray`1<string> SearchPaths { get; }
    public string BaseDirectory { get; }
    public RelativePathResolver(ImmutableArray`1<string> searchPaths, string baseDirectory);
    [CompilerGeneratedAttribute]
public ImmutableArray`1<string> get_SearchPaths();
    [CompilerGeneratedAttribute]
public string get_BaseDirectory();
    public string ResolvePath(string reference, string baseFilePath);
    protected virtual bool FileExists(string fullPath);
    public RelativePathResolver WithSearchPaths(ImmutableArray`1<string> searchPaths);
    public RelativePathResolver WithBaseDirectory(string baseDirectory);
    public sealed virtual bool Equals(RelativePathResolver other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[ExtensionAttribute]
internal static class Uno.SourceGeneration.Engine.Workspace.Utilities.IDictionaryExtensions : object {
    [ExtensionAttribute]
public static V GetOrAdd(IDictionary`2<K, V> dictionary, K key, Func`2<K, V> function);
    [ExtensionAttribute]
public static TValue GetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static void MultiAdd(IDictionary`2<TKey, TCollection> dictionary, TKey key, TValue value);
}
internal class Uno.SourceGeneration.Engine.Workspace.WorkspaceMetadataFileReferenceResolver : MetadataReferenceResolver {
    public WorkspaceMetadataFileReferenceResolver(IMetadataService metadataService, RelativePathResolver pathResolver);
    public virtual ImmutableArray`1<PortableExecutableReference> ResolveReference(string reference, string baseFilePath, MetadataReferenceProperties properties);
    public sealed virtual bool Equals(WorkspaceMetadataFileReferenceResolver other);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
}
public class Uno.SourceGeneration.Helpers.BinaryLoggerEventSource : object {
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnyEventRaised(AnyEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnyEventRaised(AnyEventHandler value);
    public void RaiseMessage(string senderName, string message, MessageImportance importance);
    public void RaiseWarning(string senderName, string message);
    public void RaiseError(string senderName, string message);
    public void RaiseBuildStart();
    public void RaiseBuildFinished();
}
internal class Uno.SourceGeneration.Helpers.BinaryLoggerForwarder : object {
    public BinaryLoggerForwarder(string categoryName, BinaryLoggerEventSource eventSource);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public void Dispose();
}
internal class Uno.SourceGeneration.Helpers.BinaryLoggerForwarderProvider : object {
    public BinaryLoggerForwarderProvider(string outputFilePath);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
internal class Uno.SourceGeneration.Helpers.BinaryLoggerReplayHelper : object {
    public static void Replay(IBuildEngine engine, string filePath, TaskLoggingHelper log);
}
public class Uno.SourceGeneration.Helpers.RuntimeHelpers : object {
    public static bool IsNetCore { get; }
    public static bool IsMono { get; }
    public static bool get_IsNetCore();
    public static bool get_IsMono();
}
public class Uno.SourceGeneration.Host.AssemblyResolver : object {
    public static IDisposable RegisterAssemblyLoader(BuildEnvironment environment);
}
internal class Uno.SourceGeneration.Host.CachingMetadataReferenceResolver : MetadataReferenceResolver {
    public bool ResolveMissingAssemblies { get; }
    public CachingMetadataReferenceResolver(Func`3<string, MetadataReferenceProperties, PortableExecutableReference> assemblyReferenceProvider);
    public virtual bool get_ResolveMissingAssemblies();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual ImmutableArray`1<PortableExecutableReference> ResolveReference(string reference, string baseFilePath, MetadataReferenceProperties properties);
}
internal class Uno.SourceGeneration.Host.GenerationClient.GenerationServerConnection : object {
    public static Task`1<GenerationResponse> RunServerGeneration(string sharedCompilationId, List`1<string> arguments, GenerationsPathsInfo buildPaths, string keepAlive, CancellationToken cancellationToken);
    public static string GetTempPath(string workingDir);
}
internal class Uno.SourceGeneration.Host.GenerationClient.GenerationsPathsInfo : ValueType {
    [CompilerGeneratedAttribute]
private string <ClientDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectory>k__BackingField;
}
public class Uno.SourceGeneration.Host.GeneratorLogger : object {
    public GeneratorLogger(ILogger logger);
    public sealed virtual void Debug(IFormattable message, Exception exception);
    public sealed virtual void Debug(string message, Exception exception);
    public sealed virtual void Info(IFormattable message, Exception exception);
    public sealed virtual void Info(string message, Exception exception);
    public sealed virtual void Warn(IFormattable message, Exception exception);
    public sealed virtual void Warn(string message, Exception exception);
    public sealed virtual void Error(IFormattable message, Exception exception);
    public sealed virtual void Error(string message, Exception exception);
}
[AttributeUsageAttribute("1")]
internal class Uno.SourceGeneration.Host.Helpers.CommitHashAttribute : Attribute {
    public CommitHashAttribute(string hash);
}
[DefaultMemberAttribute("Item")]
internal class Uno.SourceGeneration.Host.Helpers.ConcurrentLruCache`2 : object {
    public V Item { get; public set; }
    public ConcurrentLruCache`2(int capacity);
    public ConcurrentLruCache`2(KeyValuePair`2[] array);
    public void Add(K key, V value);
    public V get_Item(K key);
    public void set_Item(K key, V value);
    public bool TryGetValue(K key, V& value);
    public bool UnsafeTryGetValue(K key, V& value);
    public V GetOrAdd(K key, V value);
    public V GetOrAdd(K key, Func`1<V> creator);
    public V GetOrAdd(K key, T arg, Func`2<T, V> creator);
}
internal static class Uno.SourceGeneration.Host.Helpers.CoreClrShim : object {
}
internal class Uno.SourceGeneration.Host.Helpers.FileKey : ValueType {
    public string FullPath;
    public DateTime Timestamp;
    public FileKey(string fullPath, DateTime timestamp);
    public static FileKey Create(string fullPath);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public sealed virtual bool Equals(FileKey other);
}
internal static class Uno.SourceGeneration.Host.Helpers.FileNameUtilities : object {
}
internal static class Uno.SourceGeneration.Host.Helpers.FileUtilities : object {
}
internal static class Uno.SourceGeneration.Host.Helpers.Hash : object {
}
internal class Uno.SourceGeneration.Host.Helpers.MemoryHelper : object {
    public int Length;
    public int PercentPhysicalUsed;
    public ulong MaxPhysical;
    public ulong AvailablePhysical;
    public ulong MaxPageFile;
    public ulong AvailablePageFile;
    public ulong MaxVirtual;
    public ulong AvailableVirtual;
    public ulong Reserved;
    public static bool IsMemoryAvailable();
}
internal static class Uno.SourceGeneration.Host.Helpers.NativeMethods : object {
}
internal enum Uno.SourceGeneration.Host.Helpers.PathKind : Enum {
    public int value__;
    public static PathKind Empty;
    public static PathKind Relative;
    public static PathKind RelativeToCurrentDirectory;
    public static PathKind RelativeToCurrentParent;
    public static PathKind RelativeToCurrentRoot;
    public static PathKind RelativeToDriveDirectory;
    public static PathKind Absolute;
}
internal static class Uno.SourceGeneration.Host.Helpers.PathUtilities : object {
    public static IEqualityComparer`1<string> Comparer;
    public static bool IsDirectorySeparator(char c);
    public static bool IsAnyDirectorySeparator(char c);
    public static string TrimTrailingSeparators(string s);
    public static string EnsureTrailingSeparator(string s);
    public static string GetExtension(string path);
    public static string ChangeExtension(string path, string extension);
    public static string RemoveExtension(string path);
    public static string GetFileName(string path, bool includeExtension);
    public static string GetDirectoryName(string path);
    public static string GetPathRoot(string path);
    public static PathKind GetPathKind(string path);
    public static bool IsAbsolute(string path);
    public static string CombineAbsoluteAndRelativePaths(string root, string relativePath);
    public static string CombinePossiblyRelativeAndRelativePaths(string rootOpt, string relativePath);
    public static string CombinePathsUnchecked(string root, string relativePath);
    public static bool IsFilePath(string assemblyDisplayNameOrPath);
    public static bool ContainsPathComponent(string path, string component, bool ignoreCase);
    public static string GetRelativePath(string directory, string fullPath);
    public static bool IsChildPath(string parentPath, string childPath);
    public static bool PathsEqual(string path1, string path2);
    public static string NormalizePathPrefix(string filePath, ImmutableArray`1<KeyValuePair`2<string, string>> pathMap);
    public static bool IsValidFilePath(string fullPath);
}
internal static class Uno.SourceGeneration.Host.Helpers.PlatformInformation : object {
    public static bool IsWindows { get; }
    public static bool IsUnix { get; }
    public static bool IsRunningOnMono { get; }
    public static bool get_IsWindows();
    public static bool get_IsUnix();
    public static bool get_IsRunningOnMono();
}
internal class Uno.SourceGeneration.Host.Helpers.PROCESS_INFORMATION : ValueType {
    public IntPtr hProcess;
    public IntPtr hThread;
    public int dwProcessId;
    public int dwThreadId;
}
[ExtensionAttribute]
internal static class Uno.SourceGeneration.Host.Helpers.ReflectionUtilities : object {
    public static Type TryGetType(string assemblyQualifiedName);
    public static Type TryGetType(Type& lazyType, string assemblyQualifiedName);
    public static Type GetTypeFromEither(string contractName, string desktopName);
    public static Type GetTypeFromEither(Type& lazyType, string contractName, string desktopName);
    public static T FindItem(IEnumerable`1<T> collection, Type[] paramTypes);
    [ExtensionAttribute]
public static T CreateDelegate(MethodInfo methodInfo);
    [ExtensionAttribute]
public static T InvokeConstructor(ConstructorInfo constructorInfo, Object[] args);
    [ExtensionAttribute]
public static object InvokeConstructor(ConstructorInfo constructorInfo, Object[] args);
    [ExtensionAttribute]
public static T Invoke(MethodInfo methodInfo, object obj, Object[] args);
}
internal class Uno.SourceGeneration.Host.Helpers.STARTUPINFO : ValueType {
    internal int cb;
    internal string lpReserved;
    internal string lpDesktop;
    internal string lpTitle;
    internal int dwX;
    internal int dwY;
    internal int dwXSize;
    internal int dwYSize;
    internal int dwXCountChars;
    internal int dwYCountChars;
    internal int dwFillAttribute;
    internal int dwFlags;
    internal short wShowWindow;
    internal short cbReserved2;
    internal IntPtr lpReserved2;
    internal IntPtr hStdInput;
    internal IntPtr hStdOutput;
    internal IntPtr hStdError;
}
[ExtensionAttribute]
internal static class Uno.SourceGeneration.host.Helpers.TopologicalSorting : object {
}
internal class Uno.SourceGeneration.Host.InternalGeneratorExecutionContext : GeneratorExecutionContext {
    public ImmutableArray`1<AdditionalText> AdditionalFiles { get; }
    public InternalGeneratorExecutionContext(Compilation compilation, ParseOptions parseOptions, CancellationToken token, Project project);
    public virtual void AddSource(string hintName, string source);
    public virtual void AddSource(string hintName, SourceText sourceText);
    public virtual void ReportDiagnostic(Diagnostic diagnostic);
    public virtual bool TryGetOptionValue(SyntaxTree tree, string key, String& value);
    public virtual bool TryGetOptionValue(AdditionalText textFile, string key, String& value);
    public virtual bool TryGetGlobalOptionValue(string key, String& value);
    public virtual ImmutableArray`1<AdditionalText> get_AdditionalFiles();
}
internal class Uno.SourceGeneration.Host.InternalSourceGeneratorContext : SourceGeneratorContext {
    public IEnumerable`1<KeyValuePair`2<string, string>> Trees { get; }
    public Compilation Compilation { get; }
    public Project Project { get; }
    public InternalSourceGeneratorContext(Compilation compilation, Project project);
    public IEnumerable`1<KeyValuePair`2<string, string>> get_Trees();
    [CompilerGeneratedAttribute]
public virtual Compilation get_Compilation();
    [CompilerGeneratedAttribute]
public virtual Project get_Project();
    public virtual void AddCompilationUnit(string name, string tree);
    public virtual void AddCompilationUnit(string name, SyntaxTree tree);
    public virtual void ReportDiagnostic(Diagnostic diagnostic);
}
internal class Uno.SourceGeneration.Host.Messages.CompletedGenerationResponse : GenerationResponse {
    public int ReturnCode;
    public bool Utf8Output;
    public string Output;
    public string ErrorOutput;
    public ResponseType Type { get; }
    public CompletedGenerationResponse(int returnCode, bool utf8output, string output);
    public virtual ResponseType get_Type();
    public static CompletedGenerationResponse Create(BinaryReader reader);
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal static class Uno.SourceGeneration.Host.Messages.GenerationProtocolConstants : object {
    public static UInt32 ProtocolVersion;
    public static string ReadLengthPrefixedString(BinaryReader reader);
    public static void WriteLengthPrefixedString(BinaryWriter writer, string value);
    public static string GetCommitHash();
}
internal class Uno.SourceGeneration.Host.Messages.GenerationRequest : object {
    public UInt32 ProtocolVersion;
    public ReadOnlyCollection`1<Argument> Arguments;
    public string CompilerHash;
    public GenerationRequest(UInt32 protocolVersion, string compilerHash, IEnumerable`1<Argument> arguments);
    public static GenerationRequest Create(string workingDirectory, string tempDirectory, string compilerHash, IList`1<string> args, string keepAlive);
    public static GenerationRequest CreateShutdown();
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationRequest/<ReadAsync>d__6")]
public static Task`1<GenerationRequest> ReadAsync(Stream inStream, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationRequest/<WriteAsync>d__7")]
public Task WriteAsync(Stream outStream, CancellationToken cancellationToken);
}
internal abstract class Uno.SourceGeneration.Host.Messages.GenerationResponse : object {
    public ResponseType Type { get; }
    public abstract virtual ResponseType get_Type();
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationResponse/<WriteAsync>d__3")]
public Task WriteAsync(Stream outStream, CancellationToken cancellationToken);
    protected abstract virtual void AddResponseBody(BinaryWriter writer);
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Messages.GenerationResponse/<ReadAsync>d__5")]
public static Task`1<GenerationResponse> ReadAsync(Stream stream, CancellationToken cancellationToken);
}
internal class Uno.SourceGeneration.Host.Messages.IncorrectHashGenerationResponse : GenerationResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal class Uno.SourceGeneration.Host.Messages.MismatchedVersionGenerationResponse : GenerationResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal class Uno.SourceGeneration.Host.Messages.RejectedGenerationResponse : GenerationResponse {
    public ResponseType Type { get; }
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
}
internal class Uno.SourceGeneration.Host.Messages.ShutdownGenerationResponse : GenerationResponse {
    public int ServerProcessId;
    public ResponseType Type { get; }
    public ShutdownGenerationResponse(int serverProcessId);
    public virtual ResponseType get_Type();
    protected virtual void AddResponseBody(BinaryWriter writer);
    public static ShutdownGenerationResponse Create(BinaryReader reader);
}
internal class Uno.SourceGeneration.Host.Program : object {
}
public class Uno.SourceGeneration.Host.ProjectDetails : object {
    public string Configuration { get; }
    public ProjectInstance ExecutedProject { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`3[] Generators { get; }
    public string IntermediatePath { get; }
    public Project LoadedProject { get; }
    public String[] References { get; }
    public ProjectCollection Collection { get; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public ProjectInstance get_ExecutedProject();
    [CompilerGeneratedAttribute]
public ValueTuple`3[] get_Generators();
    [CompilerGeneratedAttribute]
public string get_IntermediatePath();
    [CompilerGeneratedAttribute]
public Project get_LoadedProject();
    [CompilerGeneratedAttribute]
public String[] get_References();
    [CompilerGeneratedAttribute]
public ProjectCollection get_Collection();
    public void BuildImportsMap();
    public sealed virtual void Dispose();
    public bool HasChanged();
}
public class Uno.SourceGeneration.Host.ProjectLoader : object {
    public static ProjectDetails LoadProjectDetails(BuildEnvironment environment, Dictionary`2<string, string> globalProperties);
}
internal class Uno.SourceGeneration.Host.Server.CachingMetadataReference : PortableExecutableReference {
    public CachingMetadataReference(string fullPath, MetadataReferenceProperties properties);
    protected virtual DocumentationProvider CreateDocumentationProvider();
    protected virtual Metadata GetMetadataImpl();
    protected virtual PortableExecutableReference WithPropertiesImpl(MetadataReferenceProperties properties);
}
internal abstract class Uno.SourceGeneration.Host.Server.ClientConnection : object {
    public string LoggingIdentifier { get; }
    public ClientConnection(IGenerationServerHost compilerServerHost, string loggingIdentifier, Stream stream);
    public sealed virtual string get_LoggingIdentifier();
    protected abstract virtual Task CreateMonitorDisconnectTask(CancellationToken cancellationToken);
    protected virtual void ValidateGenerationRequest(GenerationRequest request);
    public abstract virtual void Close();
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Server.ClientConnection/<HandleConnection>d__9")]
public sealed virtual Task`1<ConnectionData> HandleConnection(bool allowCompilationRequests, CancellationToken cancellationToken);
    protected virtual Task`1<GenerationResponse> ServeGenerationRequest(GenerationRequest generationRequest, CancellationToken cancellationToken);
}
internal class Uno.SourceGeneration.Host.Server.CommonGenerator : object {
}
internal enum Uno.SourceGeneration.Host.Server.CompletionReason : Enum {
    public int value__;
    public static CompletionReason CompilationNotStarted;
    public static CompletionReason CompilationCompleted;
    public static CompletionReason ClientDisconnect;
    public static CompletionReason ClientException;
    public static CompletionReason ClientShutdownRequest;
}
internal class Uno.SourceGeneration.Host.Server.ConnectionData : ValueType {
    public CompletionReason CompletionReason;
    public Nullable`1<TimeSpan> KeepAlive;
    public ConnectionData(CompletionReason completionReason, Nullable`1<TimeSpan> keepAlive);
}
internal class Uno.SourceGeneration.Host.Server.DesktopGenerationServerController : GenerationServerController {
    protected virtual IClientConnectionHost CreateClientConnectionHost(string pipeName);
    protected internal virtual Nullable`1<TimeSpan> GetKeepAliveTimeout();
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Server.DesktopGenerationServerController/<ConnectForShutdownAsync>d__7")]
protected virtual Task`1<Stream> ConnectForShutdownAsync(string pipeName, int timeout);
    protected virtual string GetDefaultPipeName();
    protected virtual Nullable`1<bool> WasServerRunning(string pipeName);
    protected virtual int RunServerCore(string pipeName, IClientConnectionHost connectionHost, IDiagnosticListener listener, Nullable`1<TimeSpan> keepAlive, CancellationToken cancellationToken);
}
internal class Uno.SourceGeneration.Host.Server.DesktopGenerationServerHost : GenerationServerHost {
    public static Func`3<string, MetadataReferenceProperties, PortableExecutableReference> SharedAssemblyReferenceProvider;
    public Func`3<string, MetadataReferenceProperties, PortableExecutableReference> AssemblyReferenceProvider { get; }
    public virtual Func`3<string, MetadataReferenceProperties, PortableExecutableReference> get_AssemblyReferenceProvider();
}
internal class Uno.SourceGeneration.Host.Server.EmptyDiagnosticListener : object {
    public sealed virtual void UpdateKeepAlive(TimeSpan timeSpan);
    public sealed virtual void ConnectionListening();
    public sealed virtual void ConnectionReceived();
    public sealed virtual void ConnectionCompleted(int count);
    public sealed virtual void ConnectionRudelyEnded();
    public sealed virtual void KeepAliveReached();
}
internal static class Uno.SourceGeneration.Host.Server.GenerationProtocolUtil : object {
}
internal abstract class Uno.SourceGeneration.Host.Server.GenerationServerController : object {
    protected internal abstract virtual Nullable`1<TimeSpan> GetKeepAliveTimeout();
    protected abstract virtual string GetDefaultPipeName();
    protected abstract virtual IClientConnectionHost CreateClientConnectionHost(string pipeName);
    protected abstract virtual Task`1<Stream> ConnectForShutdownAsync(string pipeName, int timeout);
    protected virtual Nullable`1<bool> WasServerRunning(string pipeName);
    protected virtual int RunServerCore(string pipeName, IClientConnectionHost connectionHost, IDiagnosticListener listener, Nullable`1<TimeSpan> keepAlive, CancellationToken cancellationToken);
}
internal abstract class Uno.SourceGeneration.Host.Server.GenerationServerHost : object {
    public Func`3<string, MetadataReferenceProperties, PortableExecutableReference> AssemblyReferenceProvider { get; }
    public string ClientDirectory { get; }
    protected GenerationServerHost(string clientDirectory);
    public abstract virtual Func`3<string, MetadataReferenceProperties, PortableExecutableReference> get_AssemblyReferenceProvider();
    [CompilerGeneratedAttribute]
public string get_ClientDirectory();
    public sealed virtual GenerationResponse RunGeneration(RunRequest request, CancellationToken cancellationToken);
}
internal interface Uno.SourceGeneration.Host.Server.IClientConnection {
    public string LoggingIdentifier { get; }
    public abstract virtual string get_LoggingIdentifier();
    public abstract virtual Task`1<ConnectionData> HandleConnection(bool allowCompilationRequests, CancellationToken cancellationToken);
    public abstract virtual void Close();
}
internal interface Uno.SourceGeneration.Host.Server.IClientConnectionHost {
    public abstract virtual Task`1<IClientConnection> CreateListenTask(CancellationToken cancellationToken);
}
internal interface Uno.SourceGeneration.Host.Server.IDiagnosticListener {
    public abstract virtual void UpdateKeepAlive(TimeSpan timeSpan);
    public abstract virtual void ConnectionListening();
    public abstract virtual void ConnectionReceived();
    public abstract virtual void ConnectionCompleted(int count);
    public abstract virtual void ConnectionRudelyEnded();
    public abstract virtual void KeepAliveReached();
}
internal interface Uno.SourceGeneration.Host.Server.IGenerationServerHost {
    public abstract virtual GenerationResponse RunGeneration(RunRequest request, CancellationToken cancellationToken);
}
internal class Uno.SourceGeneration.Host.Server.MetadataAndSymbolCache : object {
}
internal class Uno.SourceGeneration.Host.Server.NamedPipeClientConnection : ClientConnection {
    protected virtual Task CreateMonitorDisconnectTask(CancellationToken cancellationToken);
    protected virtual void ValidateGenerationRequest(GenerationRequest request);
    public virtual void Close();
}
internal class Uno.SourceGeneration.Host.Server.NamedPipeClientConnectionHost : object {
    [AsyncStateMachineAttribute("Uno.SourceGeneration.Host.Server.NamedPipeClientConnectionHost/<CreateListenTask>d__5")]
public sealed virtual Task`1<IClientConnection> CreateListenTask(CancellationToken cancellationToken);
}
internal class Uno.SourceGeneration.Host.Server.RunRequest : ValueType {
    [CompilerGeneratedAttribute]
private string <CurrentDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TempDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    public string CurrentDirectory { get; }
    public string TempDirectory { get; }
    public String[] Arguments { get; }
    public RunRequest(string currentDirectory, string tempDirectory, String[] arguments);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_CurrentDirectory();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_TempDirectory();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public String[] get_Arguments();
}
internal class Uno.SourceGeneration.Host.Server.ServerDispatcher : object {
    public void ListenAndDispatchConnections(Nullable`1<TimeSpan> keepAlive, CancellationToken cancellationToken);
    public void ListenAndDispatchConnectionsCore(CancellationToken cancellationToken);
}
public class Uno.SourceGeneration.Host.SourceGeneratorEngine : object {
    public SourceGeneratorEngine(BuildEnvironment environment, Func`3<string, MetadataReferenceProperties, MetadataReference> assemblyReferenceProvider);
    public String[] Generate();
}
[DataContractAttribute]
public class Uno.SourceGeneratorTasks.BuildEnvironment : object {
    [DataMemberAttribute]
public string Configuration { get; public set; }
    [DataMemberAttribute]
public string Platform { get; public set; }
    [DataMemberAttribute]
public string ProjectFile { get; public set; }
    [DataMemberAttribute]
public string OutputPath { get; public set; }
    [DataMemberAttribute]
public string TargetFramework { get; public set; }
    [DataMemberAttribute]
public string VisualStudioVersion { get; public set; }
    [DataMemberAttribute]
public string TargetFrameworkRootPath { get; public set; }
    [DataMemberAttribute]
public string BinLogOutputPath { get; public set; }
    [DataMemberAttribute]
public bool BinLogEnabled { get; public set; }
    [DataMemberAttribute]
public string MSBuildBinPath { get; public set; }
    [DataMemberAttribute]
public String[] AdditionalAssemblies { get; public set; }
    [DataMemberAttribute]
public String[] SourceGenerators { get; public set; }
    [DataMemberAttribute]
public String[] ReferencePath { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> AdditionalProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(string value);
    [CompilerGeneratedAttribute]
public string get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(string value);
    [CompilerGeneratedAttribute]
public string get_ProjectFile();
    [CompilerGeneratedAttribute]
public void set_ProjectFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFramework();
    [CompilerGeneratedAttribute]
public void set_TargetFramework(string value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioVersion();
    [CompilerGeneratedAttribute]
public void set_VisualStudioVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkRootPath();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkRootPath(string value);
    [CompilerGeneratedAttribute]
public string get_BinLogOutputPath();
    [CompilerGeneratedAttribute]
public void set_BinLogOutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_BinLogEnabled();
    [CompilerGeneratedAttribute]
public void set_BinLogEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_MSBuildBinPath();
    [CompilerGeneratedAttribute]
public void set_MSBuildBinPath(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalAssemblies();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssemblies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_SourceGenerators();
    [CompilerGeneratedAttribute]
public void set_SourceGenerators(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_ReferencePath();
    [CompilerGeneratedAttribute]
public void set_ReferencePath(String[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(Dictionary`2<string, string> value);
}
internal class Uno.SourceGeneratorTasks.Helpers.BuildTargets : object {
    public String[] Targets { get; }
    public BuildTargets(Project project, String[] targets);
    public String[] get_Targets();
    public void Remove(string target);
    public void RemoveAfter(string target, bool includeTargetInRemoval);
}
public class Uno.SourceGeneratorTasks.Helpers.DisposableAction : object {
    public Action Action { get; }
    public DisposableAction(Action action);
    [CompilerGeneratedAttribute]
public Action get_Action();
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.LogExtensionPoint : object {
    public static ILoggerFactory AmbientLoggerFactory { get; }
    public static ILoggerFactory get_AmbientLoggerFactory();
    [ExtensionAttribute]
public static ILogger Log(Type forType);
    [ExtensionAttribute]
public static ILogger Log(T instance);
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.LogExtensions : object {
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void DebugFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Debug(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void Debug(ILogger log, Func`1<object> messageBuilder, Exception exception);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void InfoFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Info(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void Info(ILogger log, Func`1<object> messageBuilder, Exception exception);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void WarnFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Warn(ILogger log, Func`1<object> messageBuilder, Exception exception);
    [ExtensionAttribute]
public static void Warn(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, object message);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, object arg0);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, object arg0, object arg1);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static void ErrorFormat(ILogger log, string format, Object[] args);
    [ExtensionAttribute]
public static void Error(ILogger log, string message, Exception exception);
    [ExtensionAttribute]
public static void Error(ILogger log, Func`1<object> messageBuilder, Exception exception);
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.StringExtensions : object {
    [ExtensionAttribute]
public static string JoinBy(IEnumerable`1<string> items, string joinBy);
    [ExtensionAttribute]
public static bool HasValue(string instance);
}
[ExtensionAttribute]
public static class Uno.SourceGeneratorTasks.Helpers.TypeExtensions : object {
    [IteratorStateMachineAttribute("Uno.SourceGeneratorTasks.Helpers.TypeExtensions/<GetBaseTypes>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
}
public class Uno.SourceGeneratorTasks.Logger.RemotableLogger2 : MarshalByRefObject {
    public RemotableLogger2(ILogger log);
    public virtual object InitializeLifetimeService();
    public void WriteLog(int logLevel, string message);
}
public class Uno.SourceGeneratorTasks.Logger.RemoteLogger : MarshalByRefObject {
    public RemotableLogger2 TaskLog { get; public set; }
    public RemoteLogger(string loggerName);
    public virtual object InitializeLifetimeService();
    public RemotableLogger2 get_TaskLog();
    public void set_TaskLog(RemotableLogger2 value);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
}
public class Uno.SourceGeneratorTasks.Logger.RemoteLoggerProvider : object {
    public RemotableLogger2 TaskLog { get; public set; }
    public RemotableLogger2 get_TaskLog();
    public void set_TaskLog(RemotableLogger2 value);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void Dispose();
}
public class Uno.SourceGeneratorTasks.RemoteSourceGeneratorEngine : MarshalByRefObject {
    public string MSBuildBasePath { get; public set; }
    public String[] AdditionalAssemblies { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MSBuildBasePath();
    [CompilerGeneratedAttribute]
public void set_MSBuildBasePath(string value);
    [CompilerGeneratedAttribute]
public String[] get_AdditionalAssemblies();
    [CompilerGeneratedAttribute]
public void set_AdditionalAssemblies(String[] value);
    public void Initialize();
    public virtual object InitializeLifetimeService();
}
