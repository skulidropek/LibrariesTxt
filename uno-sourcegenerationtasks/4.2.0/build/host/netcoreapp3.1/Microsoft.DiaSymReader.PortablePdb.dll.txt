internal class Microsoft.DiaSymReader.PortablePdb.AsyncMethodData : object {
    public static AsyncMethodData None;
    public MethodDefinitionHandle KickoffMethod;
    public int CatchHandlerOffset;
    public ImmutableArray`1<int> YieldOffsets;
    public ImmutableArray`1<int> ResumeOffsets;
    public ImmutableArray`1<int> ResumeMethods;
    public bool IsNone { get; }
    public AsyncMethodData(MethodDefinitionHandle kickoffMethod, int catchHandlerOffset, ImmutableArray`1<int> yieldOffsets, ImmutableArray`1<int> resumeOffsets, ImmutableArray`1<int> resumeMethods);
    private static AsyncMethodData();
    public bool get_IsNone();
}
internal class Microsoft.DiaSymReader.PortablePdb.BlobWriter : ValueType {
    private Byte[] _buffer;
    private int _position;
    public BlobWriter(int initialCapacity);
    private void EnsureCapacity(int size);
    public void Write(byte value);
    public void Write(byte b1, byte b2);
    public void Write(byte b1, byte b2, byte b3, byte b4);
    internal void Write(Byte[] buffer);
    internal void Write(Byte[] buffer, int index, int length);
    public void WriteCompressedInteger(int value);
    public Byte[] ToArray();
}
internal class Microsoft.DiaSymReader.PortablePdb.ChildScopeData : ScopeData {
    private LocalScopeHandle _handle;
    private ScopeData _parent;
    internal ScopeData Parent { get; }
    internal int StartOffset { get; }
    internal int EndOffset { get; }
    internal ChildScopeData(SymMethod symMethod, ScopeData parent, LocalScopeHandle handle);
    internal virtual ScopeData get_Parent();
    internal virtual int get_StartOffset();
    internal virtual int get_EndOffset();
    protected virtual ImmutableArray`1<ChildScopeData> CreateChildren();
    internal virtual int GetConstants(int bufferLength, Int32& count, ISymUnmanagedConstant[] constants);
    internal virtual int GetLocals(int bufferLength, Int32& count, ISymUnmanagedVariable[] locals);
}
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class Microsoft.DiaSymReader.PortablePdb.DocumentId : ValueType {
    public int Value;
    public bool IsDefault { get; }
    public DocumentId(int id);
    public bool get_IsDefault();
    public sealed virtual bool Equals(DocumentId other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private object GetDebuggerDisplay();
}
internal class Microsoft.DiaSymReader.PortablePdb.DocumentMap : object {
    private MetadataReader _reader;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, ValueTuple`2<DocumentId, ImmutableArray`1<DocumentId>>> _map;
    private List`1<DocumentInfo> _infos;
    public int DocumentCount { get; }
    public IReadOnlyList`1<DocumentInfo> Infos { get; }
    public DocumentMap(MetadataReader reader);
    public int get_DocumentCount();
    public IReadOnlyList`1<DocumentInfo> get_Infos();
    private int GetInfoIndex(DocumentId documentId);
    internal DocumentInfo GetInfo(DocumentId documentId);
    private static bool DocumentFullPathEquals(MetadataReader reader, DocumentHandle handle, string fullPath, bool ignoreCase);
    private static List`1<DocumentInfo> CreateBaselineDocumentInfos(MetadataReader reader);
    internal void Update(SymReader symReader, MetadataReader reader, int version, ImmutableArray`1& handleToIdMap);
    private static string GetFileName(MetadataReader reader, DocumentHandle documentHandle);
    internal bool TryGetDocument(string fullPath, DocumentId& id);
}
internal static class Microsoft.DiaSymReader.PortablePdb.EmptyArray`1 : object {
    public static T[] Instance;
    private static EmptyArray`1();
}
[ExtensionAttribute]
internal static class Microsoft.DiaSymReader.PortablePdb.EnumerableHelpers : object {
    [ExtensionAttribute]
public static Dictionary`2<K, ValueTuple`2<V, ImmutableArray`1<V>>> GroupBy(IEnumerable`1<KeyValuePair`2<K, V>> entries, IEqualityComparer`1<K> keyComparer);
}
internal static class Microsoft.DiaSymReader.PortablePdb.FileNameUtilities : object {
    private static string DirectorySeparatorStr;
    private static char DirectorySeparatorChar;
    private static char AltDirectorySeparatorChar;
    private static char VolumeSeparatorChar;
    internal static int IndexOfFileName(string path);
    internal static bool IsDirectorySeparator(char separator);
    internal static string GetFileName(string path);
}
internal static class Microsoft.DiaSymReader.PortablePdb.HResult : object {
    internal static int S_OK;
    internal static int S_FALSE;
    internal static int E_NOTIMPL;
    internal static int E_FAIL;
    internal static int E_INVALIDARG;
    internal static int E_WIN32_NOT_ENOUGH_MEMORY;
    internal static int E_OUTOFMEMORY;
    internal static int E_UNEXPECTED;
    internal static int E_PDB_NOT_FOUND;
}
[ComVisibleAttribute("False")]
[InterfaceTypeAttribute("1")]
[GuidAttribute("7DAC8207-D3AE-4c75-9B67-92801A497D44")]
public interface Microsoft.DiaSymReader.PortablePdb.IMetadataImport {
    public abstract virtual void CloseEnum(UInt32 handleEnum);
    public abstract virtual UInt32 CountEnum(UInt32 handleEnum);
    public abstract virtual void ResetEnum(UInt32 handleEnum, UInt32 ulongPos);
    public abstract virtual UInt32 EnumTypeDefs(UInt32& handlePointerEnum, UInt32[] arrayTypeDefs, UInt32 countMax);
    public abstract virtual UInt32 EnumInterfaceImpls(UInt32& handlePointerEnum, UInt32 td, UInt32[] arrayImpls, UInt32 countMax);
    public abstract virtual UInt32 EnumTypeRefs(UInt32& handlePointerEnum, UInt32[] arrayTypeRefs, UInt32 countMax);
    public abstract virtual UInt32 FindTypeDefByName(string stringTypeDef, UInt32 tokenEnclosingClass);
    public abstract virtual Guid GetScopeProps(StringBuilder stringName, UInt32 cchName, UInt32& pchName);
    public abstract virtual UInt32 GetModuleFromScope();
    public abstract virtual void GetTypeDefProps(int typeDefinition, StringBuilder qualifiedName, int qualifiedNameBufferLength, Int32& qualifiedNameLength, TypeAttributes& attributes, Int32& baseType);
    public abstract virtual UInt32 GetInterfaceImplProps(UInt32 impl, UInt32& pointerClass);
    public abstract virtual void GetTypeRefProps(int typeReference, Int32& resolutionScope, StringBuilder qualifiedName, int qualifiedNameBufferLength, Int32& qualifiedNameLength);
    public abstract virtual UInt32 ResolveTypeRef(UInt32 tr, Guid& riid, Object& ppIScope);
    public abstract virtual UInt32 EnumMembers(UInt32& handlePointerEnum, UInt32 cl, UInt32[] arrayMembers, UInt32 countMax);
    public abstract virtual UInt32 EnumMembersWithName(UInt32& handlePointerEnum, UInt32 cl, string stringName, UInt32[] arrayMembers, UInt32 countMax);
    public abstract virtual UInt32 EnumMethods(UInt32& handlePointerEnum, UInt32 cl, UInt32* arrayMethods, UInt32 countMax);
    public abstract virtual UInt32 EnumMethodsWithName(UInt32& handlePointerEnum, UInt32 cl, string stringName, UInt32[] arrayMethods, UInt32 countMax);
    public abstract virtual UInt32 EnumFields(UInt32& handlePointerEnum, UInt32 cl, UInt32* arrayFields, UInt32 countMax);
    public abstract virtual UInt32 EnumFieldsWithName(UInt32& handlePointerEnum, UInt32 cl, string stringName, UInt32[] arrayFields, UInt32 countMax);
    public abstract virtual UInt32 EnumParams(UInt32& handlePointerEnum, UInt32 mb, UInt32[] arrayParams, UInt32 countMax);
    public abstract virtual UInt32 EnumMemberRefs(UInt32& handlePointerEnum, UInt32 tokenParent, UInt32[] arrayMemberRefs, UInt32 countMax);
    public abstract virtual UInt32 EnumMethodImpls(UInt32& handlePointerEnum, UInt32 td, UInt32[] arrayMethodBody, UInt32[] arrayMethodDecl, UInt32 countMax);
    public abstract virtual UInt32 EnumPermissionSets(UInt32& handlePointerEnum, UInt32 tk, UInt32 dwordActions, UInt32[] arrayPermission, UInt32 countMax);
    public abstract virtual UInt32 FindMember(UInt32 td, string stringName, Byte[] voidPointerSigBlob, UInt32 byteCountSigBlob);
    public abstract virtual UInt32 FindMethod(UInt32 td, string stringName, Byte[] voidPointerSigBlob, UInt32 byteCountSigBlob);
    public abstract virtual UInt32 FindField(UInt32 td, string stringName, Byte[] voidPointerSigBlob, UInt32 byteCountSigBlob);
    public abstract virtual UInt32 FindMemberRef(UInt32 td, string stringName, Byte[] voidPointerSigBlob, UInt32 byteCountSigBlob);
    public abstract virtual UInt32 GetMethodProps(UInt32 mb, UInt32& pointerClass, IntPtr stringMethod, UInt32 cchMethod, UInt32& pchMethod, IntPtr pdwAttr, IntPtr ppvSigBlob, IntPtr pcbSigBlob, IntPtr pulCodeRVA);
    public abstract virtual UInt32 GetMemberRefProps(UInt32 mr, UInt32& ptk, StringBuilder stringMember, UInt32 cchMember, UInt32& pchMember, Byte*& ppvSigBlob);
    public abstract virtual UInt32 EnumProperties(UInt32& handlePointerEnum, UInt32 td, UInt32* arrayProperties, UInt32 countMax);
    public abstract virtual UInt32 EnumEvents(UInt32& handlePointerEnum, UInt32 td, UInt32* arrayEvents, UInt32 countMax);
    public abstract virtual UInt32 GetEventProps(UInt32 ev, UInt32& pointerClass, StringBuilder stringEvent, UInt32 cchEvent, UInt32& pchEvent, UInt32& pdwEventFlags, UInt32& ptkEventType, UInt32& pmdAddOn, UInt32& pmdRemoveOn, UInt32& pmdFire, UInt32[] rmdOtherMethod, UInt32 countMax);
    public abstract virtual UInt32 EnumMethodSemantics(UInt32& handlePointerEnum, UInt32 mb, UInt32[] arrayEventProp, UInt32 countMax);
    public abstract virtual UInt32 GetMethodSemantics(UInt32 mb, UInt32 tokenEventProp);
    public abstract virtual UInt32 GetClassLayout(UInt32 td, UInt32& pdwPackSize, UInt64[] arrayFieldOffset, UInt32 countMax, UInt32& countPointerFieldOffset);
    public abstract virtual UInt32 GetFieldMarshal(UInt32 tk, Byte*& ppvNativeType);
    public abstract virtual UInt32 GetRVA(UInt32 tk, UInt32& pulCodeRVA);
    public abstract virtual UInt32 GetPermissionSetProps(UInt32 pm, UInt32& pdwAction, Void*& ppvPermission);
    public abstract virtual int GetSigFromToken(int tkSignature, Byte*& ppvSig, Int32& pcbSig);
    public abstract virtual UInt32 GetModuleRefProps(UInt32 mur, StringBuilder stringName, UInt32 cchName);
    public abstract virtual UInt32 EnumModuleRefs(UInt32& handlePointerEnum, UInt32[] arrayModuleRefs, UInt32 cmax);
    public abstract virtual UInt32 GetTypeSpecFromToken(UInt32 typespec, Byte*& ppvSig);
    public abstract virtual UInt32 GetNameFromToken(UInt32 tk);
    public abstract virtual UInt32 EnumUnresolvedMethods(UInt32& handlePointerEnum, UInt32[] arrayMethods, UInt32 countMax);
    public abstract virtual UInt32 GetUserString(UInt32 stk, StringBuilder stringString, UInt32 cchString);
    public abstract virtual UInt32 GetPinvokeMap(UInt32 tk, UInt32& pdwMappingFlags, StringBuilder stringImportName, UInt32 cchImportName, UInt32& pchImportName);
    public abstract virtual UInt32 EnumSignatures(UInt32& handlePointerEnum, UInt32[] arraySignatures, UInt32 cmax);
    public abstract virtual UInt32 EnumTypeSpecs(UInt32& handlePointerEnum, UInt32[] arrayTypeSpecs, UInt32 cmax);
    public abstract virtual UInt32 EnumUserStrings(UInt32& handlePointerEnum, UInt32[] arrayStrings, UInt32 cmax);
    public abstract virtual int GetParamForMethodIndex(UInt32 md, UInt32 ulongParamSeq, UInt32& pointerParam);
    public abstract virtual UInt32 EnumCustomAttributes(UInt32& handlePointerEnum, UInt32 tk, UInt32 tokenType, UInt32[] arrayCustomAttributes, UInt32 countMax);
    public abstract virtual UInt32 GetCustomAttributeProps(UInt32 cv, UInt32& ptkObj, UInt32& ptkType, Void*& ppBlob);
    public abstract virtual UInt32 FindTypeRef(UInt32 tokenResolutionScope, string stringName);
    public abstract virtual UInt32 GetMemberProps(UInt32 mb, UInt32& pointerClass, StringBuilder stringMember, UInt32 cchMember, UInt32& pchMember, UInt32& pdwAttr, Byte*& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pulCodeRVA, UInt32& pdwImplFlags, UInt32& pdwCPlusTypeFlag, Void*& ppValue);
    public abstract virtual UInt32 GetFieldProps(UInt32 mb, UInt32& pointerClass, StringBuilder stringField, UInt32 cchField, UInt32& pchField, UInt32& pdwAttr, Byte*& ppvSigBlob, UInt32& pcbSigBlob, UInt32& pdwCPlusTypeFlag, Void*& ppValue);
    public abstract virtual UInt32 GetPropertyProps(UInt32 prop, UInt32& pointerClass, StringBuilder stringProperty, UInt32 cchProperty, UInt32& pchProperty, UInt32& pdwPropFlags, Byte*& ppvSig, UInt32& bytePointerSig, UInt32& pdwCPlusTypeFlag, Void*& ppDefaultValue, UInt32& pcchDefaultValue, UInt32& pmdSetter, UInt32& pmdGetter, UInt32[] rmdOtherMethod, UInt32 countMax);
    public abstract virtual UInt32 GetParamProps(UInt32 tk, UInt32& pmd, UInt32& pulSequence, StringBuilder stringName, UInt32 cchName, UInt32& pchName, UInt32& pdwAttr, UInt32& pdwCPlusTypeFlag, Void*& ppValue);
    public abstract virtual UInt32 GetCustomAttributeByName(UInt32 tokenObj, string stringName, Void*& ppData);
    public abstract virtual bool IsValidToken(UInt32 tk);
    public abstract virtual UInt32 GetNestedClassProps(UInt32 typeDefNestedClass);
    public abstract virtual UInt32 GetNativeCallConvFromSig(Void* voidPointerSig, UInt32 byteCountSig);
    public abstract virtual int IsGlobal(UInt32 pd);
}
[ExtensionAttribute]
internal static class Microsoft.DiaSymReader.PortablePdb.ImmutableArrayExtensions : object {
    [ExtensionAttribute]
internal static ImmutableArray`1<T> ToImmutableArrayOrEmpty(IEnumerable`1<T> items);
    [ExtensionAttribute]
internal static ImmutableArray`1<T> ToImmutableArrayOrEmpty(ImmutableArray`1<T> items);
    [ExtensionAttribute]
internal static int BinarySearch(ImmutableArray`1<TElement> array, TValue value, Func`3<TElement, TValue, int> comparer);
    [ExtensionAttribute]
internal static void AddSubRange(Builder<T> builder, ImmutableArray`1<T> items, int start);
}
internal static class Microsoft.DiaSymReader.PortablePdb.ImmutableByteArrayInterop : object {
    internal static ImmutableArray`1<byte> DangerousCreateFromUnderlyingArray(Byte[]& array);
    internal static Byte[] DangerousGetUnderlyingArray(ImmutableArray`1<byte> array);
}
internal static class Microsoft.DiaSymReader.PortablePdb.InteropUtilities : object {
    public static int StringToBuffer(string str, int bufferLength, Int32& count, Char[] buffer);
    public static int BytesToBuffer(Byte[] bytes, int bufferLength, Int32& count, Byte[] buffer);
    internal static void TransferOwnershipOrRelease(Object& objectOpt, object newOwnerOpt);
}
internal class Microsoft.DiaSymReader.PortablePdb.InvalidInputDataException : Exception {
}
[ExtensionAttribute]
internal static class Microsoft.DiaSymReader.PortablePdb.KeyValuePair : object {
    public static KeyValuePair`2<K, V> Create(K key, V value);
    [ExtensionAttribute]
public static void Deconstruct(KeyValuePair`2<K, V> pair, K& key, V& value);
}
internal class Microsoft.DiaSymReader.PortablePdb.LazyMetadataImport : object {
    private MetadataImport _lazyMetadataImport;
    private IMetadataImportProvider _metadataImportProviderOpt;
    public LazyMetadataImport(MetadataImport metadataImport);
    public LazyMetadataImport(IMetadataImportProvider metadataImportProvider);
    public MetadataImport GetMetadataImport();
    public sealed virtual void Dispose();
}
internal abstract class Microsoft.DiaSymReader.PortablePdb.MetadataImport : object {
    public static MetadataImport FromObject(object obj);
    public string GetQualifiedTypeName(Handle typeDefOrRef);
    public abstract virtual void GetTypeDefProps(int typeDefinition, String& qualifiedName);
    public abstract virtual void GetTypeRefProps(int typeReference, String& qualifiedName);
    public abstract virtual int GetSigFromToken(int token, Byte*& signaturePtr, Int32& signatureLength);
}
[ExtensionAttribute]
internal static class Microsoft.DiaSymReader.PortablePdb.MetadataUtilities : object {
    public static SignatureTypeCode SignatureTypeCode_ValueType;
    public static SignatureTypeCode SignatureTypeCode_Class;
    public static Guid MethodSteppingInformationBlobId;
    public static Guid VbDefaultNamespaceId;
    public static Guid EmbeddedSourceId;
    public static Guid SourceLinkId;
    private static MetadataUtilities();
    public static int MethodDefToken(int rowId);
    public static int GetRowId(int token);
    public static bool IsMethodToken(int token);
    internal static int GetTypeDefOrRefOrSpecCodedIndex(EntityHandle typeHandle);
    [ExtensionAttribute]
internal static BlobHandle GetCustomDebugInformation(MetadataReader reader, EntityHandle parent, Guid kind);
}
internal class Microsoft.DiaSymReader.PortablePdb.MethodExtents : object {
    private Dictionary`2<DocumentId, ImmutableArray`1<MethodLineExtent>> _extentsByDocument;
    private Dictionary`2<DocumentId, ImmutableArray`1<ImmutableArray`1<MethodLineExtent>>> _lazyPartitionedExtentsByDocument;
    public MethodExtents(PortablePdbReader pdbReader);
    internal void Update(PortablePdbReader pdbReader, MethodDebugInformationHandle methodHandle, ImmutableArray`1<int> deltas, int expectedSequencePointCount);
    private ImmutableArray`1<MethodLineExtent> UpdateExtent(ImmutableArray`1<MethodLineExtent> extents, MethodLineExtent newExtent);
    internal void Update(PortablePdbReader pdbReader, Dictionary`2<DocumentId, List`1<ValueTuple`2<MethodId, int>>> lineDeltasByDocument);
    private static ImmutableArray`1<MethodLineExtent> ApplyDeltas(ImmutableArray`1<MethodLineExtent> extents, List`1<ValueTuple`2<MethodId, int>> deltas);
    private ImmutableArray`1<MethodLineExtent> MergeExtents(ImmutableArray`1<MethodLineExtent> existingExtents, ImmutableArray`1<MethodLineExtent> newExtents);
    private static Dictionary`2<DocumentId, ImmutableArray`1<MethodLineExtent>> GroupExtentsByDocument(IEnumerable`1<ValueTuple`2<DocumentId, MethodLineExtent>> methodExtents);
    private bool TryGetPartitionedExtents(DocumentId documentId, ImmutableArray`1& partitionedExtents);
    private static ImmutableArray`1<ImmutableArray`1<MethodLineExtent>> PartitionToNonOverlappingSubsequences(ImmutableArray`1<MethodLineExtent> extents);
    [IteratorStateMachineAttribute("Microsoft.DiaSymReader.PortablePdb.MethodExtents/<GetMethodExtents>d__11")]
private static IEnumerable`1<ValueTuple`2<DocumentId, MethodLineExtent>> GetMethodExtents(PortablePdbReader pdbReader);
    [IteratorStateMachineAttribute("Microsoft.DiaSymReader.PortablePdb.MethodExtents/<GetMethodExtents>d__12")]
private static IEnumerable`1<ValueTuple`2<DocumentId, MethodLineExtent>> GetMethodExtents(PortablePdbReader pdbReader, MethodDebugInformationHandle methodDebugHandle, ImmutableArray`1<int> lineDeltasOpt, int expectedSequencePointCount);
    internal static ValueTuple`2<DocumentHandle, IEnumerable`1<DocumentHandle>> GetMethodBodyDocuments(MetadataReader reader, MethodDebugInformationHandle handle);
    internal IEnumerable`1<ValueTuple`2<MethodId, int>> GetMethodsContainingLine(DocumentId documentId, int line);
    [IteratorStateMachineAttribute("Microsoft.DiaSymReader.PortablePdb.MethodExtents/<EnumerateMethodsContainingLine>d__15")]
private static IEnumerable`1<ValueTuple`2<MethodId, int>> EnumerateMethodsContainingLine(ImmutableArray`1<ImmutableArray`1<MethodLineExtent>> extents, int line);
    private static int IndexOfContainingExtent(ImmutableArray`1<MethodLineExtent> orderedNonOverlappingExtents, int startLine, Int32& closestFollowingExtent);
    internal ImmutableArray`1<MethodLineExtent> GetMethodExtents(DocumentId documentId);
    internal bool TryGetMethodSourceExtent(DocumentId documentId, MethodId methodId, Int32& startLine, Int32& endLine);
    [IteratorStateMachineAttribute("Microsoft.DiaSymReader.PortablePdb.MethodExtents/<EnumerateContainingOrClosestFollowingMethodExtents>d__19")]
internal IEnumerable`1<MethodLineExtent> EnumerateContainingOrClosestFollowingMethodExtents(DocumentId documentId, int line);
}
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class Microsoft.DiaSymReader.PortablePdb.MethodId : ValueType {
    public int Value;
    public int Token { get; }
    public bool IsDefault { get; }
    public MethodId(int id);
    public int get_Token();
    public static MethodId FromToken(int methodToken);
    public bool get_IsDefault();
    public sealed virtual bool Equals(MethodId other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual int CompareTo(MethodId other);
    public static bool op_Equality(MethodId left, MethodId right);
    public static bool op_Inequality(MethodId left, MethodId right);
    public static bool op_LessThan(MethodId left, MethodId right);
    public static bool op_GreaterThan(MethodId left, MethodId right);
    public static bool op_LessThanOrEqual(MethodId left, MethodId right);
    public static bool op_GreaterThanOrEqual(MethodId left, MethodId right);
    private object GetDebuggerDisplay();
}
internal class Microsoft.DiaSymReader.PortablePdb.MethodLineDeltas : ValueType {
    private int _delta;
    private ImmutableArray`1<int> _deltas;
    public bool IsDefault { get; }
    public MethodLineDeltas(int delta, ImmutableArray`1<int> deltas);
    public bool get_IsDefault();
    public MethodLineDeltas Merge(MethodLineDeltas other);
    public int GetDeltaForSequencePoint(int index);
}
[DebuggerDisplayAttribute("{GetDebuggerDisplay(),nq}")]
internal class Microsoft.DiaSymReader.PortablePdb.MethodLineExtent : ValueType {
    public MethodId Method;
    public int Version;
    public int MinLine;
    public int MaxLine;
    public MethodLineExtent(MethodId method, int version, int minLine, int maxLine);
    public static MethodLineExtent Merge(MethodLineExtent left, MethodLineExtent right);
    public MethodLineExtent ApplyDelta(int delta);
    private string GetDebuggerDisplay();
}
internal class Microsoft.DiaSymReader.PortablePdb.MethodMap : object {
    private List`1<MethodInfo> _lazyInfos;
    private int _baselineMethodCount;
    public MethodMap(PortablePdbReader pdbReader);
    internal void Update(SymReader symReader, MetadataReader reader, int version, ImmutableArray`1& handleToIdMap);
    internal MethodInfo GetInfo(MethodId methodId);
    internal bool IsValidMethodId(MethodId id);
    internal bool IsValidMethodRowId(int rowId);
    internal bool IsValidMethodToken(int token);
    private static ImmutableArray`1<MethodId> CreateHandleToIdMap(MetadataReader reader, List`1<MethodInfo> infos, int version);
}
internal class Microsoft.DiaSymReader.PortablePdb.PortablePdbReader : object {
    internal SymReader _symReader;
    internal int Version;
    internal int PreviousDocumentCount;
    private MetadataReader _metadataReader;
    private MetadataReaderProvider _metadataReaderProvider;
    private ImmutableArray`1<DocumentId> _documentHandleToIdMapOpt;
    private ImmutableArray`1<MethodId> _methodHandleToIdMapOpt;
    internal SymReader SymReader { get; internal set; }
    internal MetadataReader MetadataReader { get; }
    internal bool IsDisposed { get; }
    internal PortablePdbReader(MetadataReaderProvider provider, int version, int previousDocumentCount);
    internal DocumentId GetDocumentId(DocumentHandle handle);
    internal MethodId GetMethodId(MethodDebugInformationHandle handle);
    internal bool TryGetMethodHandle(MethodId id, MethodDebugInformationHandle& handle);
    internal bool HasDebugInfo(MethodDebugInformationHandle handle);
    internal void InitializeHandleToIdMaps(ImmutableArray`1<DocumentId> documentIds, ImmutableArray`1<MethodId> methodIds);
    internal SymReader get_SymReader();
    internal void set_SymReader(SymReader value);
    internal bool MatchesModule(Guid guid, UInt32 stamp, int age);
    internal MetadataReader get_MetadataReader();
    internal bool get_IsDisposed();
    public sealed virtual void Dispose();
    internal int GetMethodSourceExtentInDocument(ISymUnmanagedDocument document, SymMethod method, Int32& startLine, Int32& endLine);
}
internal static class Microsoft.DiaSymReader.PortablePdb.PortableShim : object {
}
internal class Microsoft.DiaSymReader.PortablePdb.ReadOnlyInteropStream : Stream {
    private IStream _stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Position { get; public set; }
    public long Length { get; }
    public ReadOnlyInteropStream(IStream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual long get_Length();
    public virtual void Flush();
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[ExtensionAttribute]
internal static class Microsoft.DiaSymReader.PortablePdb.ReflectionUtilities : object {
    private static Type Missing;
    private static ReflectionUtilities();
    public static Type TryGetType(string assemblyQualifiedName);
    public static Type TryGetType(Type& lazyType, string assemblyQualifiedName);
    public static Type GetTypeFromEither(string contractName, string desktopName);
    public static Type GetTypeFromEither(Type& lazyType, string contractName, string desktopName);
    public static T FindItem(IEnumerable`1<T> collection, Type[] paramTypes);
    [ExtensionAttribute]
internal static MethodInfo GetDeclaredMethod(TypeInfo typeInfo, string name, Type[] paramTypes);
    [ExtensionAttribute]
internal static ConstructorInfo GetDeclaredConstructor(TypeInfo typeInfo, Type[] paramTypes);
    [ExtensionAttribute]
public static T CreateDelegate(MethodInfo methodInfo);
    [ExtensionAttribute]
public static T InvokeConstructor(ConstructorInfo constructorInfo, Object[] args);
    [ExtensionAttribute]
public static object InvokeConstructor(ConstructorInfo constructorInfo, Object[] args);
    [ExtensionAttribute]
public static T Invoke(MethodInfo methodInfo, object obj, Object[] args);
}
internal class Microsoft.DiaSymReader.PortablePdb.RootScopeData : ScopeData {
    internal ScopeData Parent { get; }
    internal int StartOffset { get; }
    internal int EndOffset { get; }
    internal RootScopeData(SymMethod symMethod);
    internal virtual ScopeData get_Parent();
    internal virtual int get_StartOffset();
    internal virtual int get_EndOffset();
    protected virtual ImmutableArray`1<ChildScopeData> CreateChildren();
    internal virtual int GetConstants(int bufferLength, Int32& count, ISymUnmanagedConstant[] constants);
    internal virtual int GetLocals(int bufferLength, Int32& count, ISymUnmanagedVariable[] locals);
}
internal abstract class Microsoft.DiaSymReader.PortablePdb.ScopeData : object {
    internal SymMethod SymMethod;
    private ImmutableArray`1<ChildScopeData> _lazyChildren;
    internal int StartOffset { get; }
    internal int EndOffset { get; }
    internal ScopeData Parent { get; }
    internal ScopeData(SymMethod symMethod);
    internal ImmutableArray`1<ChildScopeData> GetChildren();
    public int AdjustEndOffset(int value);
    protected abstract virtual ImmutableArray`1<ChildScopeData> CreateChildren();
    internal abstract virtual int get_StartOffset();
    internal abstract virtual int get_EndOffset();
    internal abstract virtual ScopeData get_Parent();
    internal abstract virtual int GetConstants(int bufferLength, Int32& count, ISymUnmanagedConstant[] constants);
    internal abstract virtual int GetLocals(int bufferLength, Int32& count, ISymUnmanagedVariable[] locals);
}
[ExtensionAttribute]
internal static class Microsoft.DiaSymReader.PortablePdb.StreamExtensions : object {
    [ExtensionAttribute]
internal static int TryReadAll(Stream stream, Byte[] buffer, int offset, int count);
}
[GuidAttribute("E4B18DEF-3B78-46AE-8F50-E67E421BDF70")]
[ComVisibleAttribute("True")]
public class Microsoft.DiaSymReader.PortablePdb.SymBinder : object {
    private static Char[] s_searchPathSeparators;
    private static SymBinder();
    public sealed virtual int GetReaderForFile(object metadataImport, string fileName, string searchPath, ISymUnmanagedReader& reader);
    public sealed virtual int GetReaderForFile2(object metadataImport, string fileName, string searchPath, SymUnmanagedSearchPolicy searchPolicy, ISymUnmanagedReader& reader);
    [IteratorStateMachineAttribute("Microsoft.DiaSymReader.PortablePdb.SymBinder/<GetSearchPathsSequence>d__2")]
private static IEnumerable`1<string> GetSearchPathsSequence(string searchPath, SymUnmanagedSearchPolicy searchPolicy);
    [IteratorStateMachineAttribute("Microsoft.DiaSymReader.PortablePdb.SymBinder/<GetSearchPathSubdirectories>d__3")]
private static IEnumerable`1<string> GetSearchPathSubdirectories(string searchPath, string peFileExtension);
    private bool TryFindMatchingPdb(string searchPaths, string peFileExtension, string pdbFileName, Guid guid, UInt32 stamp, int age, LazyMetadataImport metadataImport, SymUnmanagedSearchPolicy searchPolicy, ISymUnmanagedReader& reader);
    private bool TryCreateReaderForMatchingPdb(string pdbFilePath, Guid guid, UInt32 stamp, int age, LazyMetadataImport metadataImport, ISymUnmanagedReader& reader);
    private bool TryReadCodeViewData(string peFilePath, CodeViewDebugDirectoryData& codeViewData, UInt32& stamp);
    public sealed virtual int GetReaderFromStream(object metadataImport, object stream, ISymUnmanagedReader& reader);
    public sealed virtual int GetReaderFromCallback(object metadataImport, string fileName, string searchPath, SymUnmanagedSearchPolicy searchPolicy, object callback, ISymUnmanagedReader& reader);
    public sealed virtual int GetReaderFromPdbFile(IMetadataImportProvider metadataImportProvider, string pdbFilePath, ISymUnmanagedReader& reader);
    public sealed virtual int GetReaderFromPdbStream(IMetadataImportProvider metadataImportProvider, object stream, ISymUnmanagedReader& reader);
}
[ComVisibleAttribute("False")]
public class Microsoft.DiaSymReader.PortablePdb.SymConstant : object {
    private PortablePdbReader _pdbReader;
    private LocalConstantHandle _handle;
    private object _lazyValue;
    private Byte[] _lazySignature;
    private static object s_nullReferenceValue;
    private static object s_uninitialized;
    internal SymConstant(PortablePdbReader pdbReader, LocalConstantHandle handle);
    private static SymConstant();
    public sealed virtual int GetName(int bufferLength, Int32& count, Char[] name);
    public sealed virtual int GetSignature(int bufferLength, Int32& count, Byte[] signature);
    public sealed virtual int GetValue(Object& value);
    private void InitializeValueAndSignature();
    private object ReadAndTranslateValue(BlobReader& sigReader, SignatureTypeCode typeCode, Boolean& isEnumTypeCode);
}
[ComVisibleAttribute("False")]
public class Microsoft.DiaSymReader.PortablePdb.SymDocument : object {
    private static Guid s_CSharpGuid;
    private static Guid s_visualBasicGuid;
    private static Guid s_FSharpGuid;
    private static Guid s_sha1Guid;
    private static Guid s_sha256Guid;
    private static Guid s_vendorMicrosoftGuid;
    private static Guid s_documentTypeGuid;
    [CompilerGeneratedAttribute]
private DocumentHandle <Handle>k__BackingField;
    [CompilerGeneratedAttribute]
private PortablePdbReader <PdbReader>k__BackingField;
    internal DocumentHandle Handle { get; }
    internal PortablePdbReader PdbReader { get; }
    internal SymReader SymReader { get; }
    internal SymDocument(PortablePdbReader pdbReader, DocumentHandle documentHandle);
    private static SymDocument();
    [CompilerGeneratedAttribute]
internal DocumentHandle get_Handle();
    [CompilerGeneratedAttribute]
internal PortablePdbReader get_PdbReader();
    internal SymReader get_SymReader();
    internal DocumentId GetId();
    public sealed virtual int FindClosestLine(int line, Int32& closestLine);
    public sealed virtual int GetChecksum(int bufferLength, Int32& count, Byte[] checksum);
    public sealed virtual int GetChecksumAlgorithmId(Guid& algorithm);
    public sealed virtual int GetDocumentType(Guid& documentType);
    public sealed virtual int GetLanguage(Guid& language);
    public sealed virtual int GetLanguageVendor(Guid& vendor);
    public sealed virtual int GetSourceLength(Int32& length);
    public sealed virtual int GetSourceRange(int startLine, int startColumn, int endLine, int endColumn, int bufferLength, Int32& count, Byte[] source);
    public sealed virtual int GetUrl(int bufferLength, Int32& count, Char[] url);
    public sealed virtual int HasEmbeddedSource(Boolean& value);
    private BlobReader GetEmbeddedSourceBlobReader();
}
[ComVisibleAttribute("False")]
public class Microsoft.DiaSymReader.PortablePdb.SymMethod : object {
    [CompilerGeneratedAttribute]
private MethodDebugInformationHandle <DebugHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private PortablePdbReader <PdbReader>k__BackingField;
    private RootScopeData _lazyRootScopeData;
    private AsyncMethodData _lazyAsyncMethodData;
    internal MethodDebugInformationHandle DebugHandle { get; }
    internal MethodDefinitionHandle DefinitionHandle { get; }
    internal PortablePdbReader PdbReader { get; }
    internal SymReader SymReader { get; }
    internal MetadataReader MetadataReader { get; }
    private AsyncMethodData AsyncMethodData { get; }
    internal SymMethod(PortablePdbReader pdbReader, MethodDebugInformationHandle handle);
    [CompilerGeneratedAttribute]
internal MethodDebugInformationHandle get_DebugHandle();
    internal MethodDefinitionHandle get_DefinitionHandle();
    [CompilerGeneratedAttribute]
internal PortablePdbReader get_PdbReader();
    internal SymReader get_SymReader();
    internal MetadataReader get_MetadataReader();
    internal MethodId GetId();
    private SequencePointCollection GetSequencePoints();
    internal StandaloneSignatureHandle GetLocalSignatureHandle();
    private RootScopeData GetRootScopeData();
    private int GetILSize();
    internal static int GetLocalVariableCount(MetadataReader metadataReader, MethodDebugInformationHandle handle);
    internal void AddLocalVariables(ISymUnmanagedVariable[] variables);
    public sealed virtual int GetNamespace(ISymUnmanagedNamespace& namespace);
    public sealed virtual int GetOffset(ISymUnmanagedDocument document, int line, int column, Int32& offset);
    public sealed virtual int GetParameters(int bufferLength, Int32& count, ISymUnmanagedVariable[] parameters);
    public sealed virtual int GetRanges(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, Int32[] ranges);
    public sealed virtual int GetRootScope(ISymUnmanagedScope& scope);
    public sealed virtual int GetScopeFromOffset(int offset, ISymUnmanagedScope& scope);
    public sealed virtual int GetSequencePointCount(Int32& count);
    public sealed virtual int GetSequencePoints(int bufferLength, Int32& count, Int32[] offsets, ISymUnmanagedDocument[] documents, Int32[] startLines, Int32[] startColumns, Int32[] endLines, Int32[] endColumns);
    public sealed virtual int GetSourceStartEnd(ISymUnmanagedDocument[] documents, Int32[] lines, Int32[] columns, Boolean& defined);
    public sealed virtual int GetToken(Int32& methodToken);
    public sealed virtual int GetLocalSignatureToken(Int32& localSignatureToken);
    private AsyncMethodData get_AsyncMethodData();
    private AsyncMethodData ReadAsyncMethodData();
    public sealed virtual int IsAsyncMethod(Boolean& value);
    public sealed virtual int GetKickoffMethod(Int32& kickoffMethodToken);
    public sealed virtual int HasCatchHandlerILOffset(Boolean& value);
    public sealed virtual int GetCatchHandlerILOffset(Int32& offset);
    public sealed virtual int GetAsyncStepInfoCount(Int32& count);
    public sealed virtual int GetAsyncStepInfo(int bufferLength, Int32& count, Int32[] yieldOffsets, Int32[] breakpointOffsets, Int32[] breakpointMethods);
    public sealed virtual int GetFileNameFromOffset(int offset, int bufferLength, Int32& count, Char[] name);
    public sealed virtual int GetLineFromOffset(int offset, Int32& startLine, Int32& startColumn, Int32& endLine, Int32& endColumn, Int32& sequencePointOffset);
    public sealed virtual int GetDocumentsForMethodCount(Int32& count);
    public sealed virtual int GetDocumentsForMethod(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public sealed virtual int GetSourceExtentInDocument(ISymUnmanagedDocument document, Int32& startLine, Int32& endLine);
}
[ComVisibleAttribute("False")]
public class Microsoft.DiaSymReader.PortablePdb.SymReader : object {
    private Lazy`1<bool> _lazyVbSemantics;
    private LazyMetadataImport _metadataImport;
    private List`1<PortablePdbReader> _pdbReaders;
    private Lazy`1<DocumentMap> _lazyDocumentMap;
    private Lazy`1<MethodMap> _methodMap;
    private Lazy`1<MethodExtents> _lazyMethodExtents;
    private Dictionary`2<MethodId, MethodLineDeltas> _lazyMethodLineDeltas;
    internal Lazy`1<bool> VbSemantics { get; }
    internal bool IsDisposed { get; }
    internal int Version { get; }
    internal SymReader(PortablePdbReader pdbReader, LazyMetadataImport metadataImport);
    internal DocumentMap GetDocumentMap();
    internal MethodMap GetMethodMap();
    internal MethodExtents GetMethodExtents();
    internal static SymReader CreateFromFile(string path, LazyMetadataImport metadataImport);
    internal static MetadataReaderProvider CreateProviderFromFile(string path);
    internal static ISymUnmanagedReader CreateFromStream(IStream stream, LazyMetadataImport metadataImport);
    internal static MetadataReaderProvider CreateProviderFromStream(IStream stream);
    internal Lazy`1<bool> get_VbSemantics();
    internal bool get_IsDisposed();
    internal int get_Version();
    internal bool IsValidVersion(int version);
    internal PortablePdbReader GetReader(int version);
    internal IReadOnlyList`1<PortablePdbReader> GetReaders();
    internal MetadataImport GetMetadataImport();
    public sealed virtual int Destroy();
    private bool IsVisualBasicAssembly();
    internal SymDocument AsSymDocument(ISymUnmanagedDocument document);
    internal SymMethod AsSymMethod(ISymUnmanagedMethod method);
    private void UpdateLineDeltas(MethodId methodId, MethodLineDeltas deltas);
    private void RemoveLineDeltas(MethodId methodId);
    internal bool TryGetLineDeltas(MethodId methodId, MethodLineDeltas& deltas);
    public sealed virtual int GetDocument(string url, Guid language, Guid languageVendor, Guid documentType, ISymUnmanagedDocument& document);
    public sealed virtual int GetDocuments(int bufferLength, Int32& count, ISymUnmanagedDocument[] documents);
    public sealed virtual int GetDocumentVersion(ISymUnmanagedDocument document, Int32& version, Boolean& isCurrent);
    public sealed virtual int GetGlobalVariables(int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public sealed virtual int GetMethod(int methodToken, ISymUnmanagedMethod& method);
    private int GetMethodImpl(int methodToken, SymMethod& method);
    private bool TryGetDebuggableMethod(int methodToken, PortablePdbReader& pdbReader, MethodDebugInformationHandle& handle);
    public sealed virtual int GetMethodByVersion(int methodToken, int version, ISymUnmanagedMethod& method);
    public sealed virtual int GetMethodByVersionPreRemap(int methodToken, int version, ISymUnmanagedMethod& method);
    public sealed virtual int GetMethodFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, ISymUnmanagedMethod& method);
    public sealed virtual int GetMethodsFromDocumentPosition(ISymUnmanagedDocument document, int line, int column, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public sealed virtual int GetMethodsInDocument(ISymUnmanagedDocument document, int bufferLength, Int32& count, ISymUnmanagedMethod[] methods);
    public sealed virtual int GetMethodVersion(ISymUnmanagedMethod method, Int32& version);
    public sealed virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
    public sealed virtual int GetSymAttribute(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public sealed virtual int GetSymAttributeByVersion(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public sealed virtual int GetSymAttributePreRemap(int methodToken, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public sealed virtual int GetSymAttributeByVersionPreRemap(int methodToken, int version, string name, int bufferLength, Int32& count, Byte[] customDebugInformation);
    public sealed virtual int GetSymbolStoreFileName(int bufferLength, Int32& count, Char[] name);
    public sealed virtual int GetUserEntryPoint(Int32& methodToken);
    public sealed virtual int GetVariables(int methodToken, int bufferLength, Int32& count, ISymUnmanagedVariable[] variables);
    public sealed virtual int Initialize(object metadataImporter, string fileName, string searchPath, IStream stream);
    public sealed virtual int ReplaceSymbolStore(string fileName, IStream stream);
    public sealed virtual int UpdateSymbolStore(string fileName, IStream stream);
    public sealed virtual int MatchesModule(Guid guid, UInt32 stamp, int age, Boolean& result);
    public sealed virtual int GetPortableDebugMetadata(Byte*& metadata, Int32& size);
    public sealed virtual int GetPortableDebugMetadataByVersion(int version, Byte*& metadata, Int32& size);
    public sealed virtual int GetSourceServerData(Byte*& data, Int32& size);
    public sealed virtual int UpdateSymbolStore2(IStream stream, SymUnmanagedLineDelta[] lineDeltas, int lineDeltaCount);
    private int UpdateSymbolStoreImpl(IStream stream, string fileName, SymUnmanagedLineDelta[] lineDeltas, int lineDeltaCount);
    private Dictionary`2<DocumentId, List`1<ValueTuple`2<MethodId, int>>> GroupLineDeltasByDocument(SymUnmanagedLineDelta[] lineDeltas, int lineDeltaCount);
    public sealed virtual int GetLocalVariableCount(int methodToken, Int32& count);
    public sealed virtual int GetLocalVariables(int methodToken, int bufferLength, ISymUnmanagedVariable[] variables, Int32& count);
    public sealed virtual int InitializeForEnc();
    public sealed virtual int UpdateMethodLines(int methodToken, Int32[] deltas, int count);
    [CompilerGeneratedAttribute]
private DocumentMap <.ctor>b__7_0();
    [CompilerGeneratedAttribute]
private MethodMap <.ctor>b__7_1();
    [CompilerGeneratedAttribute]
private MethodExtents <.ctor>b__7_2();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__7_3();
    [CompilerGeneratedAttribute]
internal static void <GroupLineDeltasByDocument>g__AddExtentForDocument|62_0(DocumentHandle documentHandle, <>c__DisplayClass62_0& , <>c__DisplayClass62_1& , <>c__DisplayClass62_2& );
}
[ComVisibleAttribute("False")]
public class Microsoft.DiaSymReader.PortablePdb.SymScope : object {
    internal ScopeData _data;
    internal SymScope(ScopeData data);
    public sealed virtual int GetChildren(int bufferLength, Int32& count, ISymUnmanagedScope[] children);
    public sealed virtual int GetConstantCount(Int32& count);
    public sealed virtual int GetConstants(int bufferLength, Int32& count, ISymUnmanagedConstant[] constants);
    public sealed virtual int GetLocalCount(Int32& count);
    public sealed virtual int GetLocals(int bufferLength, Int32& count, ISymUnmanagedVariable[] locals);
    public sealed virtual int GetMethod(ISymUnmanagedMethod& method);
    public sealed virtual int GetParent(ISymUnmanagedScope& scope);
    public sealed virtual int GetStartOffset(Int32& offset);
    public sealed virtual int GetEndOffset(Int32& offset);
    public sealed virtual int GetNamespaces(int bufferLength, Int32& count, ISymUnmanagedNamespace[] namespaces);
}
[ComVisibleAttribute("False")]
public class Microsoft.DiaSymReader.PortablePdb.SymVariable : object {
    private static int ADDR_IL_OFFSET;
    private SymMethod _symMethod;
    private LocalVariableHandle _handle;
    private MetadataReader MetadataReader { get; }
    internal SymVariable(SymMethod symMethod, LocalVariableHandle handle);
    private MetadataReader get_MetadataReader();
    public sealed virtual int GetAttributes(Int32& attributes);
    public sealed virtual int GetAddressField1(Int32& value);
    public sealed virtual int GetAddressField2(Int32& value);
    public sealed virtual int GetAddressField3(Int32& value);
    public sealed virtual int GetStartOffset(Int32& offset);
    public sealed virtual int GetEndOffset(Int32& offset);
    public sealed virtual int GetAddressKind(Int32& kind);
    public sealed virtual int GetName(int bufferLength, Int32& count, Char[] name);
    public sealed virtual int GetSignature(int bufferLength, Int32& count, Byte[] signature);
}
internal static class Roslyn.Utilities.ExceptionUtilities : object {
    internal static Exception Unreachable { get; }
    internal static Exception UnexpectedValue(object o);
    internal static Exception get_Unreachable();
}
internal static class System.Numerics.Hashing.HashHelpers : object {
    public static int RandomSeed;
    private static HashHelpers();
    public static int Combine(int h1, int h2);
}
[AttributeUsageAttribute("11148")]
internal class System.Runtime.CompilerServices.TupleElementNamesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private IList`1<string> <TransformNames>k__BackingField;
    public IList`1<string> TransformNames { get; }
    public TupleElementNamesAttribute(String[] transformNames);
    [CompilerGeneratedAttribute]
public IList`1<string> get_TransformNames();
}
internal class System.ValueTuple : ValueType {
    public static ValueTuple`2<T1, T2> Create(T1 item1, T2 item2);
}
internal class System.ValueTuple`2 : ValueType {
    public T1 Item1;
    public T2 Item2;
    public ValueTuple`2(T1 item1, T2 item2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ValueTuple`2<T1, T2> other);
    internal static int CombineHashCodes(int h1, int h2);
    public virtual int GetHashCode();
    private int GetHashCodeCore(IEqualityComparer comparer);
    public virtual string ToString();
}
