[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.Dispatching.NativeDispatcher : object {
    [NullableAttribute("0")]
private static String[] _animationArray;
    [NullableAttribute("0")]
private Handler _handler;
    [NullableAttribute("0")]
private NativeDispatcherImplementor _implementor;
    [NullableAttribute("0")]
private Choreographer _choreographer;
    [NullableAttribute("0")]
private FrameCallbackImplementor _animationImplementor;
    [NullableAttribute("0")]
private ImmutableQueue`1<UIAsyncOperation> _animationQueue;
    private TimeSpan MaxRenderSpan;
    private Queue`1[] _queues;
    private NativeDispatcherSynchronizationContext[] _synchronizationContexts;
    private object _gate;
    private long _startTime;
    private NativeDispatcherPriority _currentPriority;
    private int _globalCount;
    [ThreadStaticAttribute]
private static Nullable`1<bool> _hasThreadAccess;
    private static IEventProvider _trace;
    [CompilerGeneratedAttribute]
private static NativeDispatcher <Main>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<object> Rendering;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<TimeSpan, object> <RenderingEventArgsGenerator>k__BackingField;
    internal int RenderingEventThrottle;
    internal NativeDispatcherPriority CurrentPriority { get; }
    internal bool HasThreadAccess { get; }
    internal bool IsIdle { get; }
    internal bool IsRendering { get; }
    internal static NativeDispatcher Main { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Func`2<TimeSpan, object> RenderingEventArgsGenerator { get; internal set; }
    private static NativeDispatcher();
    private bool GetHasThreadAccess();
    [NullableContextAttribute("0")]
internal UIAsyncOperation RunAnimation(Action handler);
    private void DispatchItemsToChoreographer();
    private void QueueOperations();
    internal static void CheckThreadAccess();
    private static void DispatchItems();
    [AsyncStateMachineAttribute("Uno.UI.Dispatching.NativeDispatcher/<DispatchWakeUp>d__24")]
private void DispatchWakeUp();
    internal void Enqueue(Action handler, NativeDispatcherPriority priority);
    internal Task EnqueueAsync(Action handler, NativeDispatcherPriority priority);
    internal UIAsyncOperation EnqueueOperation(Action handler, NativeDispatcherPriority priority);
    internal UIAsyncOperation EnqueueCancellableOperation(Action`1<CancellationToken> handler, NativeDispatcherPriority priority);
    internal UIAsyncOperation EnqueueIdleOperation(Action`1<NativeDispatcher> handler);
    private void EnqueueCore(Delegate handler, NativeDispatcherPriority priority);
    private void EnqueueNative(NativeDispatcherPriority priority);
    private void Initialize();
    private static void LogExceptionEvent(Exception exception, Action handler);
    private static DisposableEventActivity LogRunEvent(EventActivity activity, Action handler, NativeDispatcherPriority priority);
    private static EventActivity LogScheduleEvent(Action handler, NativeDispatcherPriority priority);
    internal void WakeUp();
    internal NativeDispatcherPriority get_CurrentPriority();
    internal bool get_HasThreadAccess();
    internal bool get_IsIdle();
    internal bool get_IsRendering();
    [CompilerGeneratedAttribute]
internal static NativeDispatcher get_Main();
    [CompilerGeneratedAttribute]
internal void add_Rendering(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
internal void remove_Rendering(EventHandler`1<object> value);
    [CompilerGeneratedAttribute]
internal Func`2<TimeSpan, object> get_RenderingEventArgsGenerator();
    [CompilerGeneratedAttribute]
internal void set_RenderingEventArgsGenerator(Func`2<TimeSpan, object> value);
}
internal enum Uno.UI.Dispatching.NativeDispatcherPriority : Enum {
    public int value__;
    public static NativeDispatcherPriority High;
    public static NativeDispatcherPriority Normal;
    public static NativeDispatcherPriority Low;
    public static NativeDispatcherPriority Idle;
}
internal class Uno.UI.Dispatching.NativeDispatcherSynchronizationContext : SynchronizationContext {
    private NativeDispatcher _dispatcher;
    private NativeDispatcherPriority _priority;
    public NativeDispatcherSynchronizationContext(NativeDispatcher dispatcher, NativeDispatcherPriority priority);
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
    public Scope Apply();
}
internal class Uno.UI.Dispatching.UIAsyncOperation : object {
    private FastTaskCompletionSource`1<object> _tcs;
    private CancellationTokenSource _cts;
    private AsyncActionCompletedHandler _completedHandler;
    [CompilerGeneratedAttribute]
private Action <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private EventActivity <ScheduleEventActivity>k__BackingField;
    public Action Action { get; }
    public bool IsCancelled { get; private set; }
    public EventActivity ScheduleEventActivity { get; }
    internal CancellationToken Token { get; }
    internal FastTaskCompletionSource`1<object> CompletionSource { get; }
    private Exception Windows.Foundation.IAsyncInfo.ErrorCode { get; }
    [NotImplementedAttribute]
private UInt32 Windows.Foundation.IAsyncInfo.Id { get; }
    public AsyncStatus Status { get; }
    private AsyncActionCompletedHandler Windows.Foundation.IAsyncAction.Completed { get; private set; }
    internal UIAsyncOperation(Action action, EventActivity scheduleActivity);
    public Task AsTask();
    public Task AsTask(CancellationToken ct);
    [CompilerGeneratedAttribute]
public Action get_Action();
    [CompilerGeneratedAttribute]
public bool get_IsCancelled();
    [CompilerGeneratedAttribute]
private void set_IsCancelled(bool value);
    [CompilerGeneratedAttribute]
public EventActivity get_ScheduleEventActivity();
    internal CancellationToken get_Token();
    internal FastTaskCompletionSource`1<object> get_CompletionSource();
    public TaskAwaiter GetAwaiter();
    internal void Complete();
    public void Cancel();
    internal void SetError(Exception ex);
    public sealed virtual void Dispose();
    private sealed virtual override Exception Windows.Foundation.IAsyncInfo.get_ErrorCode();
    private sealed virtual override UInt32 Windows.Foundation.IAsyncInfo.get_Id();
    public sealed virtual AsyncStatus get_Status();
    private sealed virtual override AsyncActionCompletedHandler Windows.Foundation.IAsyncAction.get_Completed();
    private sealed virtual override void Windows.Foundation.IAsyncAction.set_Completed(AsyncActionCompletedHandler value);
    private sealed virtual override void Windows.Foundation.IAsyncAction.GetResults();
    private sealed virtual override void Windows.Foundation.IAsyncInfo.Cancel();
    private sealed virtual override void Windows.Foundation.IAsyncInfo.Close();
    [CompilerGeneratedAttribute]
private void <AsTask>b__5_0();
}
