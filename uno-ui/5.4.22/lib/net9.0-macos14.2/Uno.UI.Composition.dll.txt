internal enum Microsoft.Graphics.Canvas.CanvasAlphaMode : Enum {
    public int value__;
    public static CanvasAlphaMode Premultiplied;
    public static CanvasAlphaMode Straight;
    public static CanvasAlphaMode Ignore;
}
internal enum Microsoft.Graphics.Canvas.CanvasBufferPrecision : Enum {
    public int value__;
    public static CanvasBufferPrecision Precision8UIntNormalized;
    public static CanvasBufferPrecision Precision8UIntNormalizedSrgb;
    public static CanvasBufferPrecision Precision16UIntNormalized;
    public static CanvasBufferPrecision Precision16Float;
    public static CanvasBufferPrecision Precision32Float;
}
internal enum Microsoft.Graphics.Canvas.CanvasComposite : Enum {
    public int value__;
    public static CanvasComposite SourceOver;
    public static CanvasComposite DestinationOver;
    public static CanvasComposite SourceIn;
    public static CanvasComposite DestinationIn;
    public static CanvasComposite SourceOut;
    public static CanvasComposite DestinationOut;
    public static CanvasComposite SourceAtop;
    public static CanvasComposite DestinationAtop;
    public static CanvasComposite Xor;
    public static CanvasComposite Add;
    public static CanvasComposite Copy;
    public static CanvasComposite BoundedCopy;
    public static CanvasComposite MaskInvert;
}
internal enum Microsoft.Graphics.Canvas.CanvasEdgeBehavior : Enum {
    public int value__;
    public static CanvasEdgeBehavior Clamp;
    public static CanvasEdgeBehavior Wrap;
    public static CanvasEdgeBehavior Mirror;
}
internal enum Microsoft.Graphics.Canvas.CanvasImageInterpolation : Enum {
    public int value__;
    public static CanvasImageInterpolation NearestNeighbor;
    public static CanvasImageInterpolation Linear;
    public static CanvasImageInterpolation Cubic;
    public static CanvasImageInterpolation MultiSampleLinear;
    public static CanvasImageInterpolation Anisotropic;
    public static CanvasImageInterpolation HighQualityCubic;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[GuidAttribute("C80ECFF0-3FD5-4F05-8328-C5D1724B4F0A")]
internal class Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <AlphaMask>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public static bool IsSupported { get; }
    public IGraphicsEffectSource AlphaMask { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    public static bool get_IsSupported();
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_AlphaMask();
    [CompilerGeneratedAttribute]
public void set_AlphaMask(IGraphicsEffectSource value);
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("1")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[GuidAttribute("FC151437-049A-4784-A24A-F1C4DAF20987")]
internal class Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MultiplyAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Source1Amount>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Source2Amount>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Offset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClampOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source1>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source2>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float MultiplyAmount { get; public set; }
    public float Source1Amount { get; public set; }
    public float Source2Amount { get; public set; }
    public float Offset { get; public set; }
    public bool ClampOutput { get; public set; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_MultiplyAmount();
    [CompilerGeneratedAttribute]
public void set_MultiplyAmount(float value);
    [CompilerGeneratedAttribute]
public float get_Source1Amount();
    [CompilerGeneratedAttribute]
public void set_Source1Amount(float value);
    [CompilerGeneratedAttribute]
public float get_Source2Amount();
    [CompilerGeneratedAttribute]
public void set_Source2Amount(float value);
    [CompilerGeneratedAttribute]
public float get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(float value);
    [CompilerGeneratedAttribute]
public bool get_ClampOutput();
    [CompilerGeneratedAttribute]
public void set_ClampOutput(bool value);
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source1();
    [CompilerGeneratedAttribute]
public void set_Source1(IGraphicsEffectSource value);
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source2();
    [CompilerGeneratedAttribute]
public void set_Source2(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[GuidAttribute("81C5B77B-13F8-4CDD-AD20-C890547AC65D")]
internal class Microsoft.Graphics.Canvas.Effects.BlendEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private BlendEffectMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <Background>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <Foreground>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public BlendEffectMode Mode { get; public set; }
    public IGraphicsEffectSource Background { get; public set; }
    public IGraphicsEffectSource Foreground { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public BlendEffectMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(BlendEffectMode value);
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Background();
    [CompilerGeneratedAttribute]
public void set_Background(IGraphicsEffectSource value);
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Foreground();
    [CompilerGeneratedAttribute]
public void set_Foreground(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
internal enum Microsoft.Graphics.Canvas.Effects.BlendEffectMode : Enum {
    public int value__;
    public static BlendEffectMode Multiply;
    public static BlendEffectMode Screen;
    public static BlendEffectMode Darken;
    public static BlendEffectMode Lighten;
    public static BlendEffectMode Dissolve;
    public static BlendEffectMode ColorBurn;
    public static BlendEffectMode LinearBurn;
    public static BlendEffectMode DarkerColor;
    public static BlendEffectMode LighterColor;
    public static BlendEffectMode ColorDodge;
    public static BlendEffectMode LinearDodge;
    public static BlendEffectMode Overlay;
    public static BlendEffectMode SoftLight;
    public static BlendEffectMode HardLight;
    public static BlendEffectMode VividLight;
    public static BlendEffectMode LinearLight;
    public static BlendEffectMode PinLight;
    public static BlendEffectMode HardMix;
    public static BlendEffectMode Difference;
    public static BlendEffectMode Exclusion;
    public static BlendEffectMode Hue;
    public static BlendEffectMode Saturation;
    public static BlendEffectMode Color;
    public static BlendEffectMode Luminosity;
    public static BlendEffectMode Subtract;
    public static BlendEffectMode Division;
}
[GuidAttribute("2A2D49C0-4ACF-43C7-8C6A-7C4A27874D27")]
internal class Microsoft.Graphics.Canvas.Effects.BorderEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private CanvasEdgeBehavior <ExtendX>k__BackingField;
    [CompilerGeneratedAttribute]
private CanvasEdgeBehavior <ExtendY>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasEdgeBehavior ExtendX { get; public set; }
    public CanvasEdgeBehavior ExtendY { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public CanvasEdgeBehavior get_ExtendX();
    [CompilerGeneratedAttribute]
public void set_ExtendX(CanvasEdgeBehavior value);
    [CompilerGeneratedAttribute]
public CanvasEdgeBehavior get_ExtendY();
    [CompilerGeneratedAttribute]
public void set_ExtendY(CanvasEdgeBehavior value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("921F03D6-641C-47DF-852D-B4BB6153AE11")]
internal class Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix5x4 <ColorMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private CanvasAlphaMode <AlphaMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClampOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Matrix5x4 ColorMatrix { get; public set; }
    public CanvasAlphaMode AlphaMode { get; public set; }
    public bool ClampOutput { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public Matrix5x4 get_ColorMatrix();
    [CompilerGeneratedAttribute]
public void set_ColorMatrix(Matrix5x4 value);
    [CompilerGeneratedAttribute]
public CanvasAlphaMode get_AlphaMode();
    [CompilerGeneratedAttribute]
public void set_AlphaMode(CanvasAlphaMode value);
    [CompilerGeneratedAttribute]
public bool get_ClampOutput();
    [CompilerGeneratedAttribute]
public void set_ClampOutput(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("61C23C20-AE69-4D8E-94CF-50078DF638F2")]
internal class Microsoft.Graphics.Canvas.Effects.ColorSourceEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    public Vector4 get_ColorHdr();
    public void set_ColorHdr(Vector4 value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("1")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GuidAttribute("48FC9F51-F6AC-48F1-8B58-3B28AC46F76D")]
internal class Microsoft.Graphics.Canvas.Effects.CompositeEffect : object {
    private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private CanvasComposite <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IGraphicsEffectSource> <Sources>k__BackingField;
    public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasComposite Mode { get; public set; }
    public List`1<IGraphicsEffectSource> Sources { get; public set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public CanvasComposite get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(CanvasComposite value);
    [CompilerGeneratedAttribute]
public List`1<IGraphicsEffectSource> get_Sources();
    [CompilerGeneratedAttribute]
public void set_Sources(List`1<IGraphicsEffectSource> value);
    public sealed virtual Guid GetEffectId();
    public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("B648A78A-0ED5-4F80-A94A-8E825ACA6B77")]
internal class Microsoft.Graphics.Canvas.Effects.ContrastEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Contrast>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClampSource>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Contrast { get; public set; }
    public bool ClampSource { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Contrast();
    [CompilerGeneratedAttribute]
public void set_Contrast(float value);
    [CompilerGeneratedAttribute]
public bool get_ClampSource();
    [CompilerGeneratedAttribute]
public void set_ClampSource(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[GuidAttribute("12F575E8-4DB1-485F-9A84-03A07DD3829F")]
internal class Microsoft.Graphics.Canvas.Effects.CrossFadeEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <CrossFade>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source1>k__BackingField;
    [CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source2>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public static bool IsSupported { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float CrossFade { get; public set; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    public static bool get_IsSupported();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_CrossFade();
    [CompilerGeneratedAttribute]
public void set_CrossFade(float value);
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source1();
    [CompilerGeneratedAttribute]
public void set_Source1(IGraphicsEffectSource value);
    [CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source2();
    [CompilerGeneratedAttribute]
public void set_Source2(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("3E7EFD62-A32D-46D4-A83C-5278889AC954")]
internal class Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Azimuth>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DiffuseAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LightColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Azimuth { get; public set; }
    public float Elevation { get; public set; }
    public float DiffuseAmount { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Azimuth();
    [CompilerGeneratedAttribute]
public void set_Azimuth(float value);
    [CompilerGeneratedAttribute]
public float get_Elevation();
    [CompilerGeneratedAttribute]
public void set_Elevation(float value);
    [CompilerGeneratedAttribute]
public float get_DiffuseAmount();
    [CompilerGeneratedAttribute]
public void set_DiffuseAmount(float value);
    [CompilerGeneratedAttribute]
public Color get_LightColor();
    [CompilerGeneratedAttribute]
public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("428C1EE5-77B8-4450-8AB5-72219C21ABDA")]
internal class Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Azimuth>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Elevation>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SpecularExponent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SpecularAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LightColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Azimuth { get; public set; }
    public float Elevation { get; public set; }
    public float SpecularExponent { get; public set; }
    public float SpecularAmount { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Azimuth();
    [CompilerGeneratedAttribute]
public void set_Azimuth(float value);
    [CompilerGeneratedAttribute]
public float get_Elevation();
    [CompilerGeneratedAttribute]
public void set_Elevation(float value);
    [CompilerGeneratedAttribute]
public float get_SpecularExponent();
    [CompilerGeneratedAttribute]
public void set_SpecularExponent(float value);
    [CompilerGeneratedAttribute]
public float get_SpecularAmount();
    [CompilerGeneratedAttribute]
public void set_SpecularAmount(float value);
    [CompilerGeneratedAttribute]
public Color get_LightColor();
    [CompilerGeneratedAttribute]
public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
internal enum Microsoft.Graphics.Canvas.Effects.EffectBorderMode : Enum {
    public int value__;
    public static EffectBorderMode Soft;
    public static EffectBorderMode Hard;
}
internal enum Microsoft.Graphics.Canvas.Effects.EffectOptimization : Enum {
    public int value__;
    public static EffectOptimization Speed;
    public static EffectOptimization Balanced;
    public static EffectOptimization Quality;
}
[GuidAttribute("B56C8CFA-F634-41EE-BEE0-FFA617106004")]
internal class Microsoft.Graphics.Canvas.Effects.ExposureEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Exposure>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Exposure { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Exposure();
    [CompilerGeneratedAttribute]
public void set_Exposure(float value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("409444C4-C419-41A0-B0C1-8CD0C0A18E42")]
internal class Microsoft.Graphics.Canvas.Effects.GammaTransferEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RedAmplitude>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RedExponent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RedOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <GreenAmplitude>k__BackingField;
    [CompilerGeneratedAttribute]
private float <GreenExponent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <GreenOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GreenDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlueAmplitude>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlueExponent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlueOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlueDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AlphaAmplitude>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AlphaExponent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AlphaOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlphaDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClampOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float RedAmplitude { get; public set; }
    public float RedExponent { get; public set; }
    public float RedOffset { get; public set; }
    public bool RedDisable { get; public set; }
    public float GreenAmplitude { get; public set; }
    public float GreenExponent { get; public set; }
    public float GreenOffset { get; public set; }
    public bool GreenDisable { get; public set; }
    public float BlueAmplitude { get; public set; }
    public float BlueExponent { get; public set; }
    public float BlueOffset { get; public set; }
    public bool BlueDisable { get; public set; }
    public float AlphaAmplitude { get; public set; }
    public float AlphaExponent { get; public set; }
    public float AlphaOffset { get; public set; }
    public bool AlphaDisable { get; public set; }
    public bool ClampOutput { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_RedAmplitude();
    [CompilerGeneratedAttribute]
public void set_RedAmplitude(float value);
    [CompilerGeneratedAttribute]
public float get_RedExponent();
    [CompilerGeneratedAttribute]
public void set_RedExponent(float value);
    [CompilerGeneratedAttribute]
public float get_RedOffset();
    [CompilerGeneratedAttribute]
public void set_RedOffset(float value);
    [CompilerGeneratedAttribute]
public bool get_RedDisable();
    [CompilerGeneratedAttribute]
public void set_RedDisable(bool value);
    [CompilerGeneratedAttribute]
public float get_GreenAmplitude();
    [CompilerGeneratedAttribute]
public void set_GreenAmplitude(float value);
    [CompilerGeneratedAttribute]
public float get_GreenExponent();
    [CompilerGeneratedAttribute]
public void set_GreenExponent(float value);
    [CompilerGeneratedAttribute]
public float get_GreenOffset();
    [CompilerGeneratedAttribute]
public void set_GreenOffset(float value);
    [CompilerGeneratedAttribute]
public bool get_GreenDisable();
    [CompilerGeneratedAttribute]
public void set_GreenDisable(bool value);
    [CompilerGeneratedAttribute]
public float get_BlueAmplitude();
    [CompilerGeneratedAttribute]
public void set_BlueAmplitude(float value);
    [CompilerGeneratedAttribute]
public float get_BlueExponent();
    [CompilerGeneratedAttribute]
public void set_BlueExponent(float value);
    [CompilerGeneratedAttribute]
public float get_BlueOffset();
    [CompilerGeneratedAttribute]
public void set_BlueOffset(float value);
    [CompilerGeneratedAttribute]
public bool get_BlueDisable();
    [CompilerGeneratedAttribute]
public void set_BlueDisable(bool value);
    [CompilerGeneratedAttribute]
public float get_AlphaAmplitude();
    [CompilerGeneratedAttribute]
public void set_AlphaAmplitude(float value);
    [CompilerGeneratedAttribute]
public float get_AlphaExponent();
    [CompilerGeneratedAttribute]
public void set_AlphaExponent(float value);
    [CompilerGeneratedAttribute]
public float get_AlphaOffset();
    [CompilerGeneratedAttribute]
public void set_AlphaOffset(float value);
    [CompilerGeneratedAttribute]
public bool get_AlphaDisable();
    [CompilerGeneratedAttribute]
public void set_AlphaDisable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClampOutput();
    [CompilerGeneratedAttribute]
public void set_ClampOutput(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("1FEB6D69-2FE6-4AC9-8C58-1D7F93E7A6A5")]
internal class Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlurAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private EffectOptimization <Optimization>k__BackingField;
    [CompilerGeneratedAttribute]
private EffectBorderMode <BorderMode>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    public float BlurAmount { get; public set; }
    public EffectOptimization Optimization { get; public set; }
    public EffectBorderMode BorderMode { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    [CompilerGeneratedAttribute]
public float get_BlurAmount();
    [CompilerGeneratedAttribute]
public void set_BlurAmount(float value);
    [CompilerGeneratedAttribute]
public EffectOptimization get_Optimization();
    [CompilerGeneratedAttribute]
public void set_Optimization(EffectOptimization value);
    [CompilerGeneratedAttribute]
public EffectBorderMode get_BorderMode();
    [CompilerGeneratedAttribute]
public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("36DDE0EB-3725-42E0-836D-52FB20AEE644")]
internal class Microsoft.Graphics.Canvas.Effects.GrayscaleEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("1")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("0F4458EC-4B32-491B-9E85-BD73F44D3EB6")]
internal class Microsoft.Graphics.Canvas.Effects.HueRotationEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Angle>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Angle { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Angle();
    [CompilerGeneratedAttribute]
public void set_Angle(float value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
internal interface Microsoft.Graphics.Canvas.Effects.ICanvasEffect {
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public abstract virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public abstract virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public abstract virtual bool get_CacheOutput();
    public abstract virtual void set_CacheOutput(bool value);
}
[GuidAttribute("E0C3784D-CB39-4E84-B6FD-6B72F0810263")]
internal class Microsoft.Graphics.Canvas.Effects.InvertEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("1")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("AD47C8FD-63EF-4ACC-9B51-67979C036C06")]
internal class Microsoft.Graphics.Canvas.Effects.LinearTransferEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RedOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <RedSlope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <GreenOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <GreenSlope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GreenDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlueOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <BlueSlope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BlueDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AlphaOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <AlphaSlope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlphaDisable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ClampOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float RedOffset { get; public set; }
    public float RedSlope { get; public set; }
    public bool RedDisable { get; public set; }
    public float GreenOffset { get; public set; }
    public float GreenSlope { get; public set; }
    public bool GreenDisable { get; public set; }
    public float BlueOffset { get; public set; }
    public float BlueSlope { get; public set; }
    public bool BlueDisable { get; public set; }
    public float AlphaOffset { get; public set; }
    public float AlphaSlope { get; public set; }
    public bool AlphaDisable { get; public set; }
    public bool ClampOutput { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_RedOffset();
    [CompilerGeneratedAttribute]
public void set_RedOffset(float value);
    [CompilerGeneratedAttribute]
public float get_RedSlope();
    [CompilerGeneratedAttribute]
public void set_RedSlope(float value);
    [CompilerGeneratedAttribute]
public bool get_RedDisable();
    [CompilerGeneratedAttribute]
public void set_RedDisable(bool value);
    [CompilerGeneratedAttribute]
public float get_GreenOffset();
    [CompilerGeneratedAttribute]
public void set_GreenOffset(float value);
    [CompilerGeneratedAttribute]
public float get_GreenSlope();
    [CompilerGeneratedAttribute]
public void set_GreenSlope(float value);
    [CompilerGeneratedAttribute]
public bool get_GreenDisable();
    [CompilerGeneratedAttribute]
public void set_GreenDisable(bool value);
    [CompilerGeneratedAttribute]
public float get_BlueOffset();
    [CompilerGeneratedAttribute]
public void set_BlueOffset(float value);
    [CompilerGeneratedAttribute]
public float get_BlueSlope();
    [CompilerGeneratedAttribute]
public void set_BlueSlope(float value);
    [CompilerGeneratedAttribute]
public bool get_BlueDisable();
    [CompilerGeneratedAttribute]
public void set_BlueDisable(bool value);
    [CompilerGeneratedAttribute]
public float get_AlphaOffset();
    [CompilerGeneratedAttribute]
public void set_AlphaOffset(float value);
    [CompilerGeneratedAttribute]
public float get_AlphaSlope();
    [CompilerGeneratedAttribute]
public void set_AlphaSlope(float value);
    [CompilerGeneratedAttribute]
public bool get_AlphaDisable();
    [CompilerGeneratedAttribute]
public void set_AlphaDisable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ClampOutput();
    [CompilerGeneratedAttribute]
public void set_ClampOutput(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("41251AB7-0BEB-46F8-9DA7-59E93FCCE5DE")]
internal class Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("1")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
internal class Microsoft.Graphics.Canvas.Effects.Matrix5x4 : ValueType {
    public float M11;
    public float M12;
    public float M13;
    public float M14;
    public float M21;
    public float M22;
    public float M23;
    public float M24;
    public float M31;
    public float M32;
    public float M33;
    public float M34;
    public float M41;
    public float M42;
    public float M43;
    public float M44;
    public float M51;
    public float M52;
    public float M53;
    public float M54;
    public static Matrix5x4 Identity { get; }
    public static Matrix5x4 get_Identity();
    [NullableContextAttribute("1")]
internal Single[] ToArray();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Matrix5x4 left, Matrix5x4 right);
    public static bool op_Inequality(Matrix5x4 left, Matrix5x4 right);
}
[GuidAttribute("811D79A4-DE28-4454-8094-C64685F8BD4C")]
internal class Microsoft.Graphics.Canvas.Effects.OpacityEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Opacity>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public static bool IsSupported { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Opacity { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    public static bool get_IsSupported();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Opacity();
    [CompilerGeneratedAttribute]
public void set_Opacity(float value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("B9E303C3-C08C-4F91-8B7B-38656BC48C20")]
internal class Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <LightPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DiffuseAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LightColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public float DiffuseAmount { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public Vector3 get_LightPosition();
    [CompilerGeneratedAttribute]
public void set_LightPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public float get_DiffuseAmount();
    [CompilerGeneratedAttribute]
public void set_DiffuseAmount(float value);
    [CompilerGeneratedAttribute]
public Color get_LightColor();
    [CompilerGeneratedAttribute]
public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("09C3CA26-3AE2-4F09-9EBC-ED3865D53F22")]
internal class Microsoft.Graphics.Canvas.Effects.PointSpecularEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <LightPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SpecularExponent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SpecularAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LightColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public float SpecularExponent { get; public set; }
    public float SpecularAmount { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public Vector3 get_LightPosition();
    [CompilerGeneratedAttribute]
public void set_LightPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public float get_SpecularExponent();
    [CompilerGeneratedAttribute]
public void set_SpecularExponent(float value);
    [CompilerGeneratedAttribute]
public float get_SpecularAmount();
    [CompilerGeneratedAttribute]
public void set_SpecularAmount(float value);
    [CompilerGeneratedAttribute]
public Color get_LightColor();
    [CompilerGeneratedAttribute]
public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("5CB2D9CF-327D-459F-A0CE-40C0B2086BF7")]
internal class Microsoft.Graphics.Canvas.Effects.SaturationEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Saturation>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Saturation { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Saturation();
    [CompilerGeneratedAttribute]
public void set_Saturation(float value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("3A1AF410-5F1D-4DBE-84DF-915DA79B7153")]
internal class Microsoft.Graphics.Canvas.Effects.SepiaEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Intensity>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Intensity { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Intensity();
    [CompilerGeneratedAttribute]
public void set_Intensity(float value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("818A1105-7932-44F4-AA86-08AE7B2F2C93")]
internal class Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <LightPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <LightTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Focus>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LimitingConeAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private float <DiffuseAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LightColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public Vector3 LightTarget { get; public set; }
    public float Focus { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public float DiffuseAmount { get; public set; }
    public Color LightColor { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public Vector3 get_LightPosition();
    [CompilerGeneratedAttribute]
public void set_LightPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public Vector3 get_LightTarget();
    [CompilerGeneratedAttribute]
public void set_LightTarget(Vector3 value);
    [CompilerGeneratedAttribute]
public float get_Focus();
    [CompilerGeneratedAttribute]
public void set_Focus(float value);
    [CompilerGeneratedAttribute]
public float get_LimitingConeAngle();
    [CompilerGeneratedAttribute]
public void set_LimitingConeAngle(float value);
    [CompilerGeneratedAttribute]
public float get_DiffuseAmount();
    [CompilerGeneratedAttribute]
public void set_DiffuseAmount(float value);
    [CompilerGeneratedAttribute]
public Color get_LightColor();
    [CompilerGeneratedAttribute]
public void set_LightColor(Color value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("EDAE421E-7654-4A37-9DB8-71ACC1BEB3C1")]
internal class Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <LightPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <LightTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Focus>k__BackingField;
    [CompilerGeneratedAttribute]
private float <LimitingConeAngle>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SpecularExponent>k__BackingField;
    [CompilerGeneratedAttribute]
private float <SpecularAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <LightColor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public Vector3 LightTarget { get; public set; }
    public float Focus { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public float SpecularExponent { get; public set; }
    public float SpecularAmount { get; public set; }
    public Color LightColor { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public Vector3 get_LightPosition();
    [CompilerGeneratedAttribute]
public void set_LightPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public Vector3 get_LightTarget();
    [CompilerGeneratedAttribute]
public void set_LightTarget(Vector3 value);
    [CompilerGeneratedAttribute]
public float get_Focus();
    [CompilerGeneratedAttribute]
public void set_Focus(float value);
    [CompilerGeneratedAttribute]
public float get_LimitingConeAngle();
    [CompilerGeneratedAttribute]
public void set_LimitingConeAngle(float value);
    [CompilerGeneratedAttribute]
public float get_SpecularExponent();
    [CompilerGeneratedAttribute]
public void set_SpecularExponent(float value);
    [CompilerGeneratedAttribute]
public float get_SpecularAmount();
    [CompilerGeneratedAttribute]
public void set_SpecularAmount(float value);
    [CompilerGeneratedAttribute]
public Color get_LightColor();
    [CompilerGeneratedAttribute]
public void set_LightColor(Color value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("89176087-8AF9-4A08-AEB1-895F38DB1766")]
internal class Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Temperature>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Tint>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Temperature { get; public set; }
    public float Tint { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public float get_Temperature();
    [CompilerGeneratedAttribute]
public void set_Temperature(float value);
    [CompilerGeneratedAttribute]
public float get_Tint();
    [CompilerGeneratedAttribute]
public void set_Tint(float value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("36312B17-F7DD-4014-915D-FFCA768CF211")]
internal class Microsoft.Graphics.Canvas.Effects.TintEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private Color <Color>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public static bool IsSupported { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Color Color { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    public static bool get_IsSupported();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public Color get_Color();
    [CompilerGeneratedAttribute]
public void set_Color(Color value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
[GuidAttribute("6AA97485-6354-4CFC-908C-E4A74F62C96C")]
internal class Microsoft.Graphics.Canvas.Effects.Transform2DEffect : object {
    [NullableAttribute("1")]
private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Nullable`1<CanvasBufferPrecision> <BufferPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private CanvasImageInterpolation <InterpolationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private EffectBorderMode <BorderMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Matrix3x2 <TransformMatrix>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Sharpness>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IGraphicsEffectSource <Source>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public EffectBorderMode BorderMode { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public float Sharpness { get; public set; }
    [NullableAttribute("2")]
public IGraphicsEffectSource Source { get; public set; }
    [NullableContextAttribute("1")]
public sealed virtual string get_Name();
    [NullableContextAttribute("1")]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CacheOutput();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheOutput(bool value);
    [CompilerGeneratedAttribute]
public CanvasImageInterpolation get_InterpolationMode();
    [CompilerGeneratedAttribute]
public void set_InterpolationMode(CanvasImageInterpolation value);
    [CompilerGeneratedAttribute]
public EffectBorderMode get_BorderMode();
    [CompilerGeneratedAttribute]
public void set_BorderMode(EffectBorderMode value);
    [CompilerGeneratedAttribute]
public Matrix3x2 get_TransformMatrix();
    [CompilerGeneratedAttribute]
public void set_TransformMatrix(Matrix3x2 value);
    [CompilerGeneratedAttribute]
public float get_Sharpness();
    [CompilerGeneratedAttribute]
public void set_Sharpness(float value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IGraphicsEffectSource get_Source();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Source(IGraphicsEffectSource value);
    public sealed virtual Guid GetEffectId();
    [NullableContextAttribute("1")]
public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    [NullableContextAttribute("2")]
public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    [NullableContextAttribute("2")]
public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
    public sealed virtual void Dispose();
}
public static class Uno.CompositionConfiguration : object {
    [CompilerGeneratedAttribute]
private static Options <Configuration>k__BackingField;
    public static Options Configuration { get; public set; }
    internal static bool UseCompositorThread { get; }
    internal static bool UseBrushAntialiasing { get; }
    [CompilerGeneratedAttribute]
public static Options get_Configuration();
    [CompilerGeneratedAttribute]
public static void set_Configuration(Options value);
    internal static bool get_UseCompositorThread();
    internal static bool get_UseBrushAntialiasing();
}
internal interface Uno.UI.Composition.I2DTransformableObject {
    public Matrix3x2 TransformMatrix { get; }
    public Vector2 Scale { get; }
    public float RotationAngle { get; }
    public Vector2 CenterPoint { get; }
    public abstract virtual Matrix3x2 get_TransformMatrix();
    public abstract virtual Vector2 get_Scale();
    public abstract virtual float get_RotationAngle();
    public abstract virtual Vector2 get_CenterPoint();
}
internal interface Uno.UI.Composition.I3DTransformableObject {
    public Matrix4x4 TransformMatrix { get; }
    public Vector3 CenterPoint { get; }
    public Vector3 Scale { get; }
    public Quaternion Orientation { get; }
    public float RotationAngle { get; }
    public Vector3 RotationAxis { get; }
    public abstract virtual Matrix4x4 get_TransformMatrix();
    public abstract virtual Vector3 get_CenterPoint();
    public abstract virtual Vector3 get_Scale();
    public abstract virtual Quaternion get_Orientation();
    public abstract virtual float get_RotationAngle();
    public abstract virtual Vector3 get_RotationAxis();
}
internal interface Uno.UI.Composition.ICompositionTarget {
    public abstract virtual void TryRedirectForManipulation(PointerPoint pointerPoint, InteractionTracker tracker);
}
internal interface Uno.UI.Composition.ISizedBrush {
    internal bool IsSized { get; }
    internal Nullable`1<Vector2> Size { get; }
    internal abstract virtual bool get_IsSized();
    internal abstract virtual Nullable`1<Vector2> get_Size();
}
internal static class Uno.UI.Composition.TempAndTintHelpers : object {
    [NullableAttribute("1")]
internal static UVTR[] _uvtr;
    private static TempAndTintHelpers();
    public static ValueTuple`2<float, float> TempTintToGains(float normalizedTemp, float normalizedTint);
    private static void XYZtoRGB(Single& r, Single& g, float x, float y, float z, Single& b);
    private static void TempTintToXYZ(Single& x, Single& y, float temp, float tint, Single& z);
    private static void Yuv1960toXYZ(Single& x, Single& y, float yi, float u, float v, Single& z);
    private static void TempTintToYUV(Single& y, Single& u, float temp, float tint, Single& v);
    private static float InvertLerp(float a, float value, float b);
    private static void MapUV(Single& u, Single& v, float ui, float vi);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.AbsFloatFunctionSpecification : object {
    [CompilerGeneratedAttribute]
private static AbsFloatFunctionSpecification <Instance>k__BackingField;
    public static AbsFloatFunctionSpecification Instance { get; }
    public int ParametersLength { get; }
    public string MethodName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    private static AbsFloatFunctionSpecification();
    [CompilerGeneratedAttribute]
public static AbsFloatFunctionSpecification get_Instance();
    public sealed virtual int get_ParametersLength();
    public sealed virtual string get_MethodName();
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    public sealed virtual object Evaluate(Object[] parameters);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.AmbientLight : CompositionLight {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Color Color { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Intensity { get; public set; }
    public Color get_Color();
    public void set_Color(Color value);
    public float get_Intensity();
    public void set_Intensity(float value);
}
internal class Windows.UI.Composition.AnimationBinaryExpressionSyntax : AnimationExpressionSyntax {
    private AnimationExpressionSyntax _left;
    private ExpressionAnimationToken _operatorToken;
    private AnimationExpressionSyntax _right;
    public AnimationBinaryExpressionSyntax(AnimationExpressionSyntax left, ExpressionAnimationToken operatorToken, AnimationExpressionSyntax right);
    public virtual object Evaluate(ExpressionAnimation expressionAnimation);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.AnimationController : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AnimationControllerProgressBehavior ProgressBehavior { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Progress { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float PlaybackRate { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static float MaxPlaybackRate { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static float MinPlaybackRate { get; }
    public AnimationControllerProgressBehavior get_ProgressBehavior();
    public void set_ProgressBehavior(AnimationControllerProgressBehavior value);
    public float get_Progress();
    public void set_Progress(float value);
    public float get_PlaybackRate();
    public void set_PlaybackRate(float value);
    public static float get_MaxPlaybackRate();
    public static float get_MinPlaybackRate();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Pause();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Resume();
}
public enum Windows.UI.Composition.AnimationControllerProgressBehavior : Enum {
    public int value__;
    public static AnimationControllerProgressBehavior Default;
    public static AnimationControllerProgressBehavior IncludesDelayTime;
}
public enum Windows.UI.Composition.AnimationDelayBehavior : Enum {
    public int value__;
    public static AnimationDelayBehavior SetInitialValueAfterDelay;
    public static AnimationDelayBehavior SetInitialValueBeforeDelay;
}
public enum Windows.UI.Composition.AnimationDirection : Enum {
    public int value__;
    public static AnimationDirection Normal;
    public static AnimationDirection Reverse;
    public static AnimationDirection Alternate;
    public static AnimationDirection AlternateReverse;
}
internal abstract class Windows.UI.Composition.AnimationExpressionSyntax : object {
    public virtual void Dispose();
    [NullableContextAttribute("1")]
public abstract virtual object Evaluate(ExpressionAnimation expressionAnimation);
}
internal class Windows.UI.Composition.AnimationFunctionCallSyntax : AnimationExpressionSyntax {
    private AnimationExpressionSyntax _identifierOrMemberAccess;
    private ImmutableArray`1<AnimationExpressionSyntax> _arguments;
    private static ImmutableArray`1<IAnimationFunctionSpecification> _specifications;
    public AnimationFunctionCallSyntax(AnimationExpressionSyntax identifierOrMemberAccess, ImmutableArray`1<AnimationExpressionSyntax> arguments);
    private static AnimationFunctionCallSyntax();
    public virtual object Evaluate(ExpressionAnimation expressionAnimation);
    private object EvaluateSpecification(IAnimationFunctionSpecification specification, ExpressionAnimation expressionAnimation);
    private object EvaluateFromIdentifier(AnimationIdentifierNameSyntax identifier, ExpressionAnimation expressionAnimation);
    private object EvaluateFromMemberAccess(AnimationMemberAccessExpressionSyntax memberAccess, ExpressionAnimation expressionAnimation);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.AnimationIdentifierNameSyntax : AnimationExpressionSyntax {
    private object _result;
    private ExpressionAnimation _expressionAnimation;
    [CompilerGeneratedAttribute]
private ExpressionAnimationToken <Identifier>k__BackingField;
    public ExpressionAnimationToken Identifier { get; }
    public AnimationIdentifierNameSyntax(ExpressionAnimationToken identifier);
    [CompilerGeneratedAttribute]
public ExpressionAnimationToken get_Identifier();
    [NullableContextAttribute("1")]
public virtual object Evaluate(ExpressionAnimation expressionAnimation);
    public virtual void Dispose();
}
public enum Windows.UI.Composition.AnimationIterationBehavior : Enum {
    public int value__;
    public static AnimationIterationBehavior Count;
    public static AnimationIterationBehavior Forever;
}
internal class Windows.UI.Composition.AnimationMemberAccessExpressionSyntax : AnimationExpressionSyntax {
    [CompilerGeneratedAttribute]
private AnimationExpressionSyntax <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionAnimationToken <Identifier>k__BackingField;
    public AnimationExpressionSyntax Expression { get; }
    public ExpressionAnimationToken Identifier { get; }
    public AnimationMemberAccessExpressionSyntax(AnimationExpressionSyntax expression, ExpressionAnimationToken identifier);
    [CompilerGeneratedAttribute]
public AnimationExpressionSyntax get_Expression();
    [CompilerGeneratedAttribute]
public ExpressionAnimationToken get_Identifier();
    public virtual object Evaluate(ExpressionAnimation expressionAnimation);
}
internal class Windows.UI.Composition.AnimationNumericExpressionSyntax : AnimationExpressionSyntax {
    private ExpressionAnimationToken _number;
    public AnimationNumericExpressionSyntax(ExpressionAnimationToken number);
    public virtual object Evaluate(ExpressionAnimation expressionAnimation);
}
internal class Windows.UI.Composition.AnimationParenthesizedExpressionSyntax : AnimationExpressionSyntax {
    private AnimationExpressionSyntax _expression;
    public AnimationParenthesizedExpressionSyntax(AnimationExpressionSyntax expression);
    public virtual object Evaluate(ExpressionAnimation expressionAnimation);
}
public enum Windows.UI.Composition.AnimationPropertyAccessMode : Enum {
    public int value__;
    public static AnimationPropertyAccessMode None;
    public static AnimationPropertyAccessMode ReadOnly;
    public static AnimationPropertyAccessMode WriteOnly;
    public static AnimationPropertyAccessMode ReadWrite;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.AnimationPropertyInfo : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AnimationPropertyAccessMode AccessMode { get; public set; }
    public AnimationPropertyAccessMode get_AccessMode();
    public void set_AccessMode(AnimationPropertyAccessMode value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionObject GetResolvedCompositionObject();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string GetResolvedCompositionObjectProperty();
}
public enum Windows.UI.Composition.AnimationStopBehavior : Enum {
    public int value__;
    public static AnimationStopBehavior LeaveCurrentValue;
    public static AnimationStopBehavior SetToInitialValue;
    public static AnimationStopBehavior SetToFinalValue;
}
internal class Windows.UI.Composition.AnimationTernaryExpressionSyntax : AnimationExpressionSyntax {
    private AnimationExpressionSyntax _condition;
    private AnimationExpressionSyntax _whenTrue;
    private AnimationExpressionSyntax _whenFalse;
    public AnimationTernaryExpressionSyntax(AnimationExpressionSyntax condition, AnimationExpressionSyntax whenTrue, AnimationExpressionSyntax whenFalse);
    public virtual object Evaluate(ExpressionAnimation expressionAnimation);
}
internal class Windows.UI.Composition.AnimationUnaryExpressionSyntax : AnimationExpressionSyntax {
    private ExpressionAnimationToken _operatorToken;
    private AnimationExpressionSyntax _operand;
    public AnimationUnaryExpressionSyntax(ExpressionAnimationToken operatorToken, AnimationExpressionSyntax operand);
    public virtual object Evaluate(ExpressionAnimation expressionAnimation);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.BackEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Amplitude { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEasingFunctionMode Mode { get; }
    public float get_Amplitude();
    public CompositionEasingFunctionMode get_Mode();
}
public class Windows.UI.Composition.BooleanKeyFrameAnimation : KeyFrameAnimation {
    [NullableAttribute("1")]
private SortedDictionary`2<float, bool> _keyFrames;
    private protected int KeyFrameCountCore { get; }
    [NullableContextAttribute("1")]
internal BooleanKeyFrameAnimation(Compositor compositor);
    private protected virtual int get_KeyFrameCountCore();
    public void InsertKeyFrame(float normalizedProgressKey, bool value);
    internal virtual object Start(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, CompositionObject compositionObject);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.BounceEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Bounces { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Bounciness { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEasingFunctionMode Mode { get; }
    public int get_Bounces();
    public float get_Bounciness();
    public CompositionEasingFunctionMode get_Mode();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.BounceScalarNaturalMotionAnimation : ScalarNaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Restitution { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Acceleration { get; public set; }
    public float get_Restitution();
    public void set_Restitution(float value);
    public float get_Acceleration();
    public void set_Acceleration(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.BounceVector2NaturalMotionAnimation : Vector2NaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Restitution { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Acceleration { get; public set; }
    public float get_Restitution();
    public void set_Restitution(float value);
    public float get_Acceleration();
    public void set_Acceleration(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.BounceVector3NaturalMotionAnimation : Vector3NaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Restitution { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Acceleration { get; public set; }
    public float get_Restitution();
    public void set_Restitution(float value);
    public float get_Acceleration();
    public void set_Acceleration(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CircleEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEasingFunctionMode Mode { get; }
    public CompositionEasingFunctionMode get_Mode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.ClampFloatFloatFloatFunctionSpecification : object {
    [CompilerGeneratedAttribute]
private static ClampFloatFloatFloatFunctionSpecification <Instance>k__BackingField;
    public static ClampFloatFloatFloatFunctionSpecification Instance { get; }
    public int ParametersLength { get; }
    public string MethodName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    private static ClampFloatFloatFloatFunctionSpecification();
    [CompilerGeneratedAttribute]
public static ClampFloatFloatFloatFunctionSpecification get_Instance();
    public sealed virtual int get_ParametersLength();
    public sealed virtual string get_MethodName();
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    public sealed virtual object Evaluate(Object[] parameters);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.ColorKeyFrameAnimation : KeyFrameAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionColorSpace InterpolationColorSpace { get; public set; }
    public CompositionColorSpace get_InterpolationColorSpace();
    public void set_InterpolationColorSpace(CompositionColorSpace value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, Color value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, Color value, CompositionEasingFunction easingFunction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionAnimation : CompositionObject {
    private string _target;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, CompositionObject> <ReferenceParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, float> <ScalarParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Vector2> <Vector2Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Vector3> <Vector3Parameters>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<CompositionAnimation> AnimationFrame;
    internal Dictionary`2<string, CompositionObject> ReferenceParameters { get; }
    internal Dictionary`2<string, float> ScalarParameters { get; }
    internal Dictionary`2<string, Vector2> Vector2Parameters { get; }
    internal Dictionary`2<string, Vector3> Vector3Parameters { get; }
    internal bool IsTrackedByCompositor { get; }
    public string Target { get; public set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public InitialValueExpressionCollection InitialValueExpressions { get; }
    internal CompositionAnimation(Compositor compositor);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, CompositionObject> get_ReferenceParameters();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, float> get_ScalarParameters();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Vector2> get_Vector2Parameters();
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Vector3> get_Vector3Parameters();
    [CompilerGeneratedAttribute]
internal void add_AnimationFrame(Action`1<CompositionAnimation> value);
    [CompilerGeneratedAttribute]
internal void remove_AnimationFrame(Action`1<CompositionAnimation> value);
    internal virtual bool get_IsTrackedByCompositor();
    public void SetReferenceParameter(string key, CompositionObject compositionObject);
    public void SetScalarParameter(string key, float value);
    public void SetVector2Parameter(string key, Vector2 value);
    public void SetVector3Parameter(string key, Vector3 value);
    public string get_Target();
    public void set_Target(string value);
    [NullableContextAttribute("0")]
internal virtual object Start(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, CompositionObject compositionObject);
    [NullableContextAttribute("2")]
internal virtual object Evaluate();
    internal virtual void Stop();
    internal void RaiseAnimationFrame();
    [NullableContextAttribute("0")]
public InitialValueExpressionCollection get_InitialValueExpressions();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ClearAllParameters();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ClearParameter(string key);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetColorParameter(string key, Color value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetMatrix3x2Parameter(string key, Matrix3x2 value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetMatrix4x4Parameter(string key, Matrix4x4 value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetQuaternionParameter(string key, Quaternion value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetVector4Parameter(string key, Vector4 value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetBooleanParameter(string key, bool value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void SetExpressionReferenceParameter(string parameterName, IAnimationObject source);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionAnimationGroup : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    public int get_Count();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Add(CompositionAnimation value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Remove(CompositionAnimation value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void RemoveAll();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<CompositionAnimation> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
public class Windows.UI.Composition.CompositionBackdropBrush : CompositionBrush {
    [NullableContextAttribute("1")]
internal CompositionBackdropBrush(Compositor compositor);
}
public enum Windows.UI.Composition.CompositionBackfaceVisibility : Enum {
    public int value__;
    public static CompositionBackfaceVisibility Inherit;
    public static CompositionBackfaceVisibility Visible;
    public static CompositionBackfaceVisibility Hidden;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionBatchCompletedEventArgs : CompositionObject {
}
[FlagsAttribute]
public enum Windows.UI.Composition.CompositionBatchTypes : Enum {
    public UInt32 value__;
    public static CompositionBatchTypes None;
    public static CompositionBatchTypes Animation;
    public static CompositionBatchTypes Effect;
    public static CompositionBatchTypes InfiniteAnimation;
    public static CompositionBatchTypes AllAnimations;
}
public enum Windows.UI.Composition.CompositionBitmapInterpolationMode : Enum {
    public int value__;
    public static CompositionBitmapInterpolationMode NearestNeighbor;
    public static CompositionBitmapInterpolationMode Linear;
    public static CompositionBitmapInterpolationMode MagLinearMinLinearMipLinear;
    public static CompositionBitmapInterpolationMode MagLinearMinLinearMipNearest;
    public static CompositionBitmapInterpolationMode MagLinearMinNearestMipLinear;
    public static CompositionBitmapInterpolationMode MagLinearMinNearestMipNearest;
    public static CompositionBitmapInterpolationMode MagNearestMinLinearMipLinear;
    public static CompositionBitmapInterpolationMode MagNearestMinLinearMipNearest;
    public static CompositionBitmapInterpolationMode MagNearestMinNearestMipLinear;
    public static CompositionBitmapInterpolationMode MagNearestMinNearestMipNearest;
}
public enum Windows.UI.Composition.CompositionBorderMode : Enum {
    public int value__;
    public static CompositionBorderMode Inherit;
    public static CompositionBorderMode Soft;
    public static CompositionBorderMode Hard;
}
public class Windows.UI.Composition.CompositionBrush : CompositionObject {
    [NullableContextAttribute("1")]
internal CompositionBrush(Compositor compositor);
}
public class Windows.UI.Composition.CompositionCapabilities : object {
    [NullableAttribute("2")]
private Compositor _compositor;
    [NullableContextAttribute("2")]
internal CompositionCapabilities(Compositor compositor);
    [NullableContextAttribute("1")]
public static CompositionCapabilities GetForCurrentView();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool AreEffectsSupported();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool AreEffectsFast();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void add_Changed(TypedEventHandler`2<CompositionCapabilities, object> value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void remove_Changed(TypedEventHandler`2<CompositionCapabilities, object> value);
}
public class Windows.UI.Composition.CompositionClip : CompositionObject {
    private Matrix3x2 _transformMatrix;
    private Vector2 _scale;
    private float _rotationAngle;
    private Vector2 _offset;
    private Vector2 _centerPoint;
    private Vector2 _anchorPoint;
    public Matrix3x2 TransformMatrix { get; public set; }
    public Vector2 Scale { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public float RotationAngle { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public Vector2 AnchorPoint { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionClip(Compositor compositor);
    public sealed virtual Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    public sealed virtual Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public sealed virtual float get_RotationAngle();
    public void set_RotationAngle(float value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public sealed virtual Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
}
public class Windows.UI.Composition.CompositionColorBrush : CompositionBrush {
    private Color _color;
    public Color Color { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionColorBrush(Compositor compositor);
    public Color get_Color();
    public void set_Color(Color value);
    [NullableContextAttribute("1")]
internal virtual object GetAnimatableProperty(string propertyName, string subPropertyName);
    private protected virtual void SetAnimatableProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, object propertyValue);
}
public class Windows.UI.Composition.CompositionColorGradientStop : CompositionObject {
    private float _offset;
    private Color _color;
    public float Offset { get; public set; }
    public Color Color { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionColorGradientStop(Compositor compositor);
    public float get_Offset();
    public void set_Offset(float value);
    public Color get_Color();
    public void set_Color(Color value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Windows.UI.Composition.CompositionColorGradientStopCollection : object {
    private CompositionGradientBrush _owner;
    private List`1<CompositionColorGradientStop> _gradientStops;
    public CompositionColorGradientStop Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 Size { get; }
    internal CompositionColorGradientStopCollection(CompositionGradientBrush owner);
    public sealed virtual CompositionColorGradientStop get_Item(int index);
    public sealed virtual void set_Item(int index, CompositionColorGradientStop value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(CompositionColorGradientStop item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(CompositionColorGradientStop item);
    public sealed virtual void CopyTo(CompositionColorGradientStop[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<CompositionColorGradientStop> GetEnumerator();
    public sealed virtual int IndexOf(CompositionColorGradientStop item);
    public sealed virtual void Insert(int index, CompositionColorGradientStop item);
    public sealed virtual bool Remove(CompositionColorGradientStop item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("2")]
private void OnItemAddedRemoved(CompositionColorGradientStop oldItem, CompositionColorGradientStop newItem);
    private void InvalidateOwner();
    private void ThrowIfNull(T item, string propertyName);
    public UInt32 get_Size();
    [CompilerGeneratedAttribute]
private void <Clear>b__11_0(CompositionColorGradientStop x);
}
public enum Windows.UI.Composition.CompositionColorSpace : Enum {
    public int value__;
    public static CompositionColorSpace Auto;
    public static CompositionColorSpace Hsl;
    public static CompositionColorSpace Rgb;
    public static CompositionColorSpace HslLinear;
    public static CompositionColorSpace RgbLinear;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionCommitBatch : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsActive { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsEnded { get; }
    public bool get_IsActive();
    public bool get_IsEnded();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void add_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void remove_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
}
public enum Windows.UI.Composition.CompositionCompositeMode : Enum {
    public int value__;
    public static CompositionCompositeMode Inherit;
    public static CompositionCompositeMode SourceOver;
    public static CompositionCompositeMode DestinationInvert;
    public static CompositionCompositeMode MinBlend;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionContainerShape : CompositionShape {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionShapeCollection Shapes { get; }
    public CompositionShapeCollection get_Shapes();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionDrawingSurface : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DirectXAlphaMode AlphaMode { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DirectXPixelFormat PixelFormat { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Size Size { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SizeInt32 SizeInt32 { get; }
    public DirectXAlphaMode get_AlphaMode();
    public DirectXPixelFormat get_PixelFormat();
    public Size get_Size();
    public SizeInt32 get_SizeInt32();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Resize(SizeInt32 sizePixels);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Scroll(PointInt32 offset);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Scroll(PointInt32 offset, RectInt32 scrollRect);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ScrollWithClip(PointInt32 offset, RectInt32 clipRect);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ScrollWithClip(PointInt32 offset, RectInt32 clipRect, RectInt32 scrollRect);
}
public enum Windows.UI.Composition.CompositionDropShadowSourcePolicy : Enum {
    public int value__;
    public static CompositionDropShadowSourcePolicy Default;
    public static CompositionDropShadowSourcePolicy InheritFromVisualContent;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionEasingFunction : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CubicBezierEasingFunction CreateCubicBezierEasingFunction(Compositor owner, Vector2 controlPoint1, Vector2 controlPoint2);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static LinearEasingFunction CreateLinearEasingFunction(Compositor owner);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StepEasingFunction CreateStepEasingFunction(Compositor owner);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static StepEasingFunction CreateStepEasingFunction(Compositor owner, int stepCount);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BackEasingFunction CreateBackEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float amplitude);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static BounceEasingFunction CreateBounceEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, int bounces, float bounciness);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CircleEasingFunction CreateCircleEasingFunction(Compositor owner, CompositionEasingFunctionMode mode);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ElasticEasingFunction CreateElasticEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, int oscillations, float springiness);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ExponentialEasingFunction CreateExponentialEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float exponent);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static PowerEasingFunction CreatePowerEasingFunction(Compositor owner, CompositionEasingFunctionMode mode, float power);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SineEasingFunction CreateSineEasingFunction(Compositor owner, CompositionEasingFunctionMode mode);
}
public enum Windows.UI.Composition.CompositionEasingFunctionMode : Enum {
    public int value__;
    public static CompositionEasingFunctionMode In;
    public static CompositionEasingFunctionMode Out;
    public static CompositionEasingFunctionMode InOut;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionEffectBrush : CompositionBrush {
    private IGraphicsEffect _effect;
    private Dictionary`2<string, CompositionBrush> _sourceParameters;
    internal CompositionEffectBrush(Compositor compositor, IGraphicsEffect graphicsEffect, IEnumerable`1<string> animatableProperties);
    public CompositionBrush GetSourceParameter(string name);
    public void SetSourceParameter(string name, CompositionBrush source);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionEffectFactory : CompositionObject {
    [NullableAttribute("1")]
private IGraphicsEffect _effect;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<string> _animatableProperties;
    private CompositionEffectFactoryLoadStatus _loadStatus;
    private Exception _extendedError;
    public CompositionEffectFactoryLoadStatus LoadStatus { get; }
    public Exception ExtendedError { get; }
    [NullableContextAttribute("1")]
internal CompositionEffectFactory(Compositor compositor, IGraphicsEffect effect, IEnumerable`1<string> animatableProperties);
    public CompositionEffectBrush CreateBrush();
    public CompositionEffectFactoryLoadStatus get_LoadStatus();
    public Exception get_ExtendedError();
}
public enum Windows.UI.Composition.CompositionEffectFactoryLoadStatus : Enum {
    public int value__;
    public static CompositionEffectFactoryLoadStatus Success;
    public static CompositionEffectFactoryLoadStatus EffectTooComplex;
    public static CompositionEffectFactoryLoadStatus Pending;
    public static CompositionEffectFactoryLoadStatus Other;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionEffectSourceParameter : object {
    private string _name;
    public string Name { get; }
    public CompositionEffectSourceParameter(string name);
    public string get_Name();
}
public class Windows.UI.Composition.CompositionEllipseGeometry : CompositionGeometry {
    private Vector2 _radius;
    private Vector2 _center;
    public Vector2 Radius { get; public set; }
    public Vector2 Center { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionEllipseGeometry(Compositor compositor);
    public Vector2 get_Radius();
    public void set_Radius(Vector2 value);
    public Vector2 get_Center();
    public void set_Center(Vector2 value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionGeometricClip : CompositionClip {
    private CompositionViewBox _viewBox;
    private CompositionGeometry _geometry;
    public CompositionViewBox ViewBox { get; public set; }
    public CompositionGeometry Geometry { get; public set; }
    [NullableContextAttribute("1")]
public CompositionGeometricClip(Compositor compositor);
    public CompositionViewBox get_ViewBox();
    public void set_ViewBox(CompositionViewBox value);
    public CompositionGeometry get_Geometry();
    public void set_Geometry(CompositionGeometry value);
}
public class Windows.UI.Composition.CompositionGeometry : CompositionObject {
    [CompilerGeneratedAttribute]
private float <TrimStart>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TrimOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private float <TrimEnd>k__BackingField;
    public float TrimStart { get; public set; }
    public float TrimOffset { get; public set; }
    public float TrimEnd { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionGeometry(Compositor compositor);
    [CompilerGeneratedAttribute]
public float get_TrimStart();
    [CompilerGeneratedAttribute]
public void set_TrimStart(float value);
    [CompilerGeneratedAttribute]
public float get_TrimOffset();
    [CompilerGeneratedAttribute]
public void set_TrimOffset(float value);
    [CompilerGeneratedAttribute]
public float get_TrimEnd();
    [CompilerGeneratedAttribute]
public void set_TrimEnd(float value);
    [NullableContextAttribute("2")]
internal virtual IGeometrySource2D BuildGeometry();
}
public enum Windows.UI.Composition.CompositionGetValueStatus : Enum {
    public int value__;
    public static CompositionGetValueStatus Succeeded;
    public static CompositionGetValueStatus TypeMismatch;
    public static CompositionGetValueStatus NotFound;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionGradientBrush : CompositionBrush {
    private CompositionGradientExtendMode _extendMode;
    private CompositionMappingMode _mappingMode;
    private Matrix3x2 _transformMatrix;
    private Matrix3x2 _relativeTransformMatrix;
    private Vector2 _scale;
    private float _rotationAngle;
    private Vector2 _offset;
    private Vector2 _centerPoint;
    [CompilerGeneratedAttribute]
private CompositionColorGradientStopCollection <ColorStops>k__BackingField;
    public CompositionColorGradientStopCollection ColorStops { get; }
    public CompositionGradientExtendMode ExtendMode { get; public set; }
    public CompositionMappingMode MappingMode { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public Vector2 Scale { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public float RotationAngle { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    internal Matrix3x2 RelativeTransformMatrix { get; internal set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionColorSpace InterpolationSpace { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector2 AnchorPoint { get; public set; }
    internal CompositionGradientBrush(Compositor compositor);
    [CompilerGeneratedAttribute]
public CompositionColorGradientStopCollection get_ColorStops();
    public CompositionGradientExtendMode get_ExtendMode();
    public void set_ExtendMode(CompositionGradientExtendMode value);
    public CompositionMappingMode get_MappingMode();
    public void set_MappingMode(CompositionMappingMode value);
    public sealed virtual Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    public sealed virtual Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public sealed virtual float get_RotationAngle();
    public void set_RotationAngle(float value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public sealed virtual Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    internal Matrix3x2 get_RelativeTransformMatrix();
    internal void set_RelativeTransformMatrix(Matrix3x2 value);
    internal void InvalidateColorStops();
    [NullableContextAttribute("2")]
private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
    public CompositionColorSpace get_InterpolationSpace();
    public void set_InterpolationSpace(CompositionColorSpace value);
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
}
public enum Windows.UI.Composition.CompositionGradientExtendMode : Enum {
    public int value__;
    public static CompositionGradientExtendMode Clamp;
    public static CompositionGradientExtendMode Wrap;
    public static CompositionGradientExtendMode Mirror;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionGraphicsDevice : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionDrawingSurface CreateDrawingSurface(Size sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionDrawingSurface CreateDrawingSurface2(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionVirtualDrawingSurface CreateVirtualDrawingSurface(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionMipmapSurface CreateMipmapSurface(SizeInt32 sizePixels, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Trim();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncOperation`1<ICompositionSurface> CaptureAsync(Visual captureVisual, SizeInt32 size, DirectXPixelFormat pixelFormat, DirectXAlphaMode alphaMode, float sdrBoost);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void add_RenderingDeviceReplaced(TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs> value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void remove_RenderingDeviceReplaced(TypedEventHandler`2<CompositionGraphicsDevice, RenderingDeviceReplacedEventArgs> value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionLight : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public VisualUnorderedCollection Targets { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public VisualUnorderedCollection ExclusionsFromTargets { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsEnabled { get; public set; }
    public VisualUnorderedCollection get_Targets();
    public VisualUnorderedCollection get_ExclusionsFromTargets();
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
}
public class Windows.UI.Composition.CompositionLinearGradientBrush : CompositionGradientBrush {
    private Vector2 _startPoint;
    private Vector2 _endPoint;
    public Vector2 StartPoint { get; public set; }
    public Vector2 EndPoint { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionLinearGradientBrush(Compositor compositor);
    public Vector2 get_StartPoint();
    public void set_StartPoint(Vector2 value);
    public Vector2 get_EndPoint();
    public void set_EndPoint(Vector2 value);
}
public class Windows.UI.Composition.CompositionLineGeometry : CompositionGeometry {
    private Vector2 _start;
    private Vector2 _end;
    public Vector2 Start { get; public set; }
    public Vector2 End { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionLineGeometry(Compositor compositor);
    public Vector2 get_Start();
    public void set_Start(Vector2 value);
    public Vector2 get_End();
    public void set_End(Vector2 value);
}
public enum Windows.UI.Composition.CompositionMappingMode : Enum {
    public int value__;
    public static CompositionMappingMode Absolute;
    public static CompositionMappingMode Relative;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionMaskBrush : CompositionBrush {
    private CompositionBrush _source;
    private CompositionBrush _mask;
    public CompositionBrush Source { get; public set; }
    public CompositionBrush Mask { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionMaskBrush(Compositor compositor);
    public CompositionBrush get_Source();
    public void set_Source(CompositionBrush value);
    public CompositionBrush get_Mask();
    public void set_Mask(CompositionBrush value);
    private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionMipmapSurface : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DirectXAlphaMode AlphaMode { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 LevelCount { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DirectXPixelFormat PixelFormat { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SizeInt32 SizeInt32 { get; }
    public DirectXAlphaMode get_AlphaMode();
    public UInt32 get_LevelCount();
    public DirectXPixelFormat get_PixelFormat();
    public SizeInt32 get_SizeInt32();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionDrawingSurface GetDrawingSurfaceForLevel(UInt32 level);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionNineGridBrush : CompositionBrush {
    private float _bottomInset;
    private float _bottomInsetScale;
    private float _leftInset;
    private float _leftInsetScale;
    private float _rightInset;
    private float _rightInsetScale;
    private float _topInset;
    private float _topInsetScale;
    private bool _isCenterHollow;
    private CompositionBrush _source;
    public float BottomInset { get; public set; }
    public float BottomInsetScale { get; public set; }
    public float LeftInset { get; public set; }
    public float LeftInsetScale { get; public set; }
    public float RightInset { get; public set; }
    public float RightInsetScale { get; public set; }
    public float TopInset { get; public set; }
    public float TopInsetScale { get; public set; }
    public bool IsCenterHollow { get; public set; }
    public CompositionBrush Source { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionNineGridBrush(Compositor compositor);
    private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
    public float get_BottomInset();
    public void set_BottomInset(float value);
    public float get_BottomInsetScale();
    public void set_BottomInsetScale(float value);
    public float get_LeftInset();
    public void set_LeftInset(float value);
    public float get_LeftInsetScale();
    public void set_LeftInsetScale(float value);
    public float get_RightInset();
    public void set_RightInset(float value);
    public float get_RightInsetScale();
    public void set_RightInsetScale(float value);
    public float get_TopInset();
    public void set_TopInset(float value);
    public float get_TopInsetScale();
    public void set_TopInsetScale(float value);
    public bool get_IsCenterHollow();
    public void set_IsCenterHollow(bool value);
    public CompositionBrush get_Source();
    public void set_Source(CompositionBrush value);
    public void SetInsets(float inset);
    public void SetInsets(float left, float top, float right, float bottom);
    public void SetInsetScales(float scale);
    public void SetInsetScales(float left, float top, float right, float bottom);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionObject : object {
    private object _contextEntriesLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ContextEntry> _contextEntries;
    [NullableAttribute("2")]
private CompositionPropertySet _properties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, CompositionAnimation> _animations;
    [CompilerGeneratedAttribute]
private Compositor <Compositor>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    public CompositionPropertySet Properties { get; }
    public Compositor Compositor { get; }
    public CoreDispatcher Dispatcher { get; }
    [NullableAttribute("2")]
public string Comment { get; public set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImplicitAnimationCollection ImplicitAnimations { get; public set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DispatcherQueue DispatcherQueue { get; }
    internal CompositionObject(Compositor compositor);
    public void AddContext(CompositionObject context, string propertyName);
    public void RemoveContext(CompositionObject context, string propertyName);
    public void PropagateChanged();
    private void AddContextImpl(CompositionObject newContext, string propertyName);
    private void RemoveContextImpl(CompositionObject oldContext, string propertyName);
    private void PropagateChangedImpl();
    public CompositionPropertySet get_Properties();
    [CompilerGeneratedAttribute]
public Compositor get_Compositor();
    public CoreDispatcher get_Dispatcher();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Comment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Comment(string value);
    private CompositionPropertySet GetProperties();
    internal virtual object GetAnimatableProperty(string propertyName, string subPropertyName);
    [NullableContextAttribute("0")]
private protected virtual void SetAnimatableProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, object propertyValue);
    public void StartAnimation(string propertyName, CompositionAnimation animation);
    private void ReEvaluateAnimation(CompositionAnimation animation);
    public void StopAnimation(string propertyName);
    public sealed virtual void Dispose();
    private protected virtual void DisposeInternal();
    [NullableContextAttribute("2")]
private protected void SetProperty(Boolean& field, bool value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Int32& field, int value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Single& field, float value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Matrix3x2& field, Matrix3x2 value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Matrix4x4& field, Matrix4x4 value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Vector2& field, Vector2 value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Vector3& field, Vector3 value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Quaternion& field, Quaternion value, string propertyName);
    [NullableContextAttribute("2")]
private protected void SetProperty(Color& field, Color value, string propertyName);
    private protected void SetEnumProperty(T& field, T value, string propertyName);
    private protected void SetProperty(T& field, T value, string propertyName);
    private protected void SetObjectProperty(T& field, T value, string propertyName);
    private protected void OnChanged();
    [NullableContextAttribute("2")]
private protected void OnCompositionPropertyChanged(CompositionObject oldValue, CompositionObject newValue);
    [NullableContextAttribute("2")]
private protected void OnCompositionPropertyChanged(CompositionObject oldValue, CompositionObject newValue, string propertyName);
    [NullableContextAttribute("2")]
private protected void OnPropertyChanged(string propertyName, bool isSubPropertyChange);
    [NullableContextAttribute("2")]
private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
    [NullableContextAttribute("0")]
public ImplicitAnimationCollection get_ImplicitAnimations();
    [NullableContextAttribute("0")]
public void set_ImplicitAnimations(ImplicitAnimationCollection value);
    [NullableContextAttribute("0")]
public DispatcherQueue get_DispatcherQueue();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void StartAnimationGroup(ICompositionAnimationBase value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void StopAnimationGroup(ICompositionAnimationBase value);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AnimationController TryGetAnimationController(string propertyName);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void PopulatePropertyInfo(string propertyName, AnimationPropertyInfo propertyInfo);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void StartAnimationWithIAnimationObject(IAnimationObject target, string propertyName, CompositionAnimation animation);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void StartAnimationGroupWithIAnimationObject(IAnimationObject target, ICompositionAnimationBase animation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionPath : object {
    [CompilerGeneratedAttribute]
private IGeometrySource2D <GeometrySource>k__BackingField;
    internal IGeometrySource2D GeometrySource { get; }
    public CompositionPath(IGeometrySource2D source);
    [CompilerGeneratedAttribute]
internal IGeometrySource2D get_GeometrySource();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionPathGeometry : CompositionGeometry {
    private CompositionPath _path;
    public CompositionPath Path { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionPathGeometry(Compositor compositor, CompositionPath path);
    public CompositionPath get_Path();
    public void set_Path(CompositionPath value);
    internal virtual IGeometrySource2D BuildGeometry();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionProjectedShadow : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float MinBlurRadius { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float MaxBlurRadius { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionLight LightSource { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float BlurRadiusMultiplier { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionProjectedShadowCasterCollection Casters { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionProjectedShadowReceiverUnorderedCollection Receivers { get; }
    public float get_MinBlurRadius();
    public void set_MinBlurRadius(float value);
    public float get_MaxBlurRadius();
    public void set_MaxBlurRadius(float value);
    public CompositionLight get_LightSource();
    public void set_LightSource(CompositionLight value);
    public float get_BlurRadiusMultiplier();
    public void set_BlurRadiusMultiplier(float value);
    public CompositionProjectedShadowCasterCollection get_Casters();
    public CompositionProjectedShadowReceiverUnorderedCollection get_Receivers();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionProjectedShadowCaster : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Visual CastingVisual { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionBrush Brush { get; public set; }
    public Visual get_CastingVisual();
    public void set_CastingVisual(Visual value);
    public CompositionBrush get_Brush();
    public void set_Brush(CompositionBrush value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionProjectedShadowCasterCollection : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static int MaxRespectedCasters { get; }
    public int get_Count();
    public static int get_MaxRespectedCasters();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertAbove(CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertAtBottom(CompositionProjectedShadowCaster newCaster);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertAtTop(CompositionProjectedShadowCaster newCaster);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertBelow(CompositionProjectedShadowCaster newCaster, CompositionProjectedShadowCaster reference);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Remove(CompositionProjectedShadowCaster caster);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void RemoveAll();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<CompositionProjectedShadowCaster> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionProjectedShadowReceiver : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Visual ReceivingVisual { get; public set; }
    public Visual get_ReceivingVisual();
    public void set_ReceivingVisual(Visual value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionProjectedShadowReceiverUnorderedCollection : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    public int get_Count();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Add(CompositionProjectedShadowReceiver value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Remove(CompositionProjectedShadowReceiver value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void RemoveAll();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<CompositionProjectedShadowReceiver> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionPropertySet : CompositionObject {
    private Dictionary`2<string, object> _properties;
    internal CompositionPropertySet(Compositor compositor);
    public void InsertColor(string propertyName, Color value);
    public void InsertMatrix3x2(string propertyName, Matrix3x2 value);
    public void InsertMatrix4x4(string propertyName, Matrix4x4 value);
    public void InsertQuaternion(string propertyName, Quaternion value);
    public void InsertScalar(string propertyName, float value);
    public void InsertVector2(string propertyName, Vector2 value);
    public void InsertVector3(string propertyName, Vector3 value);
    public void InsertVector4(string propertyName, Vector4 value);
    public void InsertBoolean(string propertyName, bool value);
    public CompositionGetValueStatus TryGetColor(string propertyName, Color& value);
    public CompositionGetValueStatus TryGetMatrix3x2(string propertyName, Matrix3x2& value);
    public CompositionGetValueStatus TryGetMatrix4x4(string propertyName, Matrix4x4& value);
    public CompositionGetValueStatus TryGetQuaternion(string propertyName, Quaternion& value);
    public CompositionGetValueStatus TryGetScalar(string propertyName, Single& value);
    public CompositionGetValueStatus TryGetVector2(string propertyName, Vector2& value);
    public CompositionGetValueStatus TryGetVector3(string propertyName, Vector3& value);
    public CompositionGetValueStatus TryGetVector4(string propertyName, Vector4& value);
    public CompositionGetValueStatus TryGetBoolean(string propertyName, Boolean& value);
    [NullableContextAttribute("0")]
internal CompositionGetValueStatus TryGetValue(string propertyName, T& value);
    internal bool TryGetValueNonGeneric(string propertyName, Object& value);
    [NullableContextAttribute("0")]
private void SetValue(string propertyName, T value);
}
public class Windows.UI.Composition.CompositionRadialGradientBrush : CompositionGradientBrush {
    private Vector2 _gradientOriginOffset;
    private Vector2 _ellipseRadius;
    private Vector2 _ellipseCenter;
    public Vector2 GradientOriginOffset { get; public set; }
    public Vector2 EllipseRadius { get; public set; }
    public Vector2 EllipseCenter { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionRadialGradientBrush(Compositor compositor);
    public Vector2 get_GradientOriginOffset();
    public void set_GradientOriginOffset(Vector2 value);
    public Vector2 get_EllipseRadius();
    public void set_EllipseRadius(Vector2 value);
    public Vector2 get_EllipseCenter();
    public void set_EllipseCenter(Vector2 value);
}
public class Windows.UI.Composition.CompositionRectangleGeometry : CompositionGeometry {
    private Vector2 _size;
    private Vector2 _offset;
    public Vector2 Size { get; public set; }
    public Vector2 Offset { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionRectangleGeometry(Compositor compositor);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
}
public class Windows.UI.Composition.CompositionRoundedRectangleGeometry : CompositionGeometry {
    private Vector2 _size;
    private Vector2 _offset;
    private Vector2 _cornerRadius;
    public Vector2 Size { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 CornerRadius { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionRoundedRectangleGeometry(Compositor compositor);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public Vector2 get_CornerRadius();
    public void set_CornerRadius(Vector2 value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionScopedBatch : CompositionObject {
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnded>k__BackingField;
    [CompilerGeneratedAttribute]
private CompositionBatchTypes <BatchType>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> Completed;
    [NotImplementedAttribute]
public bool IsActive { get; private set; }
    [NotImplementedAttribute]
public bool IsEnded { get; private set; }
    internal CompositionBatchTypes BatchType { get; }
    [NullableContextAttribute("1")]
internal CompositionScopedBatch(Compositor compositor, CompositionBatchTypes batchType);
    [CompilerGeneratedAttribute]
public bool get_IsActive();
    [CompilerGeneratedAttribute]
private void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnded();
    [CompilerGeneratedAttribute]
private void set_IsEnded(bool value);
    [CompilerGeneratedAttribute]
internal CompositionBatchTypes get_BatchType();
    [NotImplementedAttribute]
public void End();
    [NotImplementedAttribute]
public void Resume();
    [NotImplementedAttribute]
public void Suspend();
    [CompilerGeneratedAttribute]
public void add_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Completed(TypedEventHandler`2<object, CompositionBatchCompletedEventArgs> value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionShadow : CompositionObject {
}
public class Windows.UI.Composition.CompositionShape : CompositionObject {
    private Matrix3x2 _transformMatrix;
    private Vector2 _scale;
    private float _rotationAngle;
    private Vector2 _offset;
    private Vector2 _centerPoint;
    public Matrix3x2 TransformMatrix { get; public set; }
    public Vector2 Scale { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public float RotationAngle { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionShape(Compositor compositor);
    public sealed virtual Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    public sealed virtual Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public sealed virtual float get_RotationAngle();
    public void set_RotationAngle(float value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public sealed virtual Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Windows.UI.Composition.CompositionShapeCollection : CompositionObject {
    private List`1<CompositionShape> _shapes;
    private ShapeVisual _shapeVisual;
    public int Count { get; }
    public CompositionShape Item { get; public set; }
    public bool IsReadOnly { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 Size { get; }
    internal CompositionShapeCollection(Compositor compositor, ShapeVisual shapeVisual);
    public sealed virtual int get_Count();
    public sealed virtual int IndexOf(CompositionShape item);
    public sealed virtual void Insert(int index, CompositionShape item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual CompositionShape get_Item(int index);
    public sealed virtual void set_Item(int index, CompositionShape value);
    public sealed virtual void Add(CompositionShape item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(CompositionShape item);
    public sealed virtual void CopyTo(CompositionShape[] array, int arrayIndex);
    public sealed virtual bool Remove(CompositionShape item);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<CompositionShape> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private void ThrowIfNull(T item, string propertyName);
    public UInt32 get_Size();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionSpriteShape : CompositionShape {
    private float _strokeThickness;
    private CompositionStrokeCap _strokeStartCap;
    private float _strokeMiterLimit;
    private CompositionStrokeLineJoin _strokeLineJoin;
    private CompositionStrokeCap _strokeEndCap;
    private float _strokeDashOffset;
    private CompositionStrokeCap _strokeDashCap;
    private CompositionBrush _strokeBrush;
    private bool _isStrokeNonScaling;
    private CompositionGeometry _geometry;
    private CompositionBrush _fillBrush;
    private CompositionStrokeDashArray _strokeDashArray;
    public float StrokeThickness { get; public set; }
    public CompositionStrokeCap StrokeStartCap { get; public set; }
    public float StrokeMiterLimit { get; public set; }
    public CompositionStrokeLineJoin StrokeLineJoin { get; public set; }
    public CompositionStrokeCap StrokeEndCap { get; public set; }
    public float StrokeDashOffset { get; public set; }
    public CompositionStrokeCap StrokeDashCap { get; public set; }
    public CompositionBrush StrokeBrush { get; public set; }
    public bool IsStrokeNonScaling { get; public set; }
    public CompositionGeometry Geometry { get; public set; }
    public CompositionBrush FillBrush { get; public set; }
    public CompositionStrokeDashArray StrokeDashArray { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionSpriteShape(Compositor compositor, CompositionGeometry geometry);
    public float get_StrokeThickness();
    public void set_StrokeThickness(float value);
    public CompositionStrokeCap get_StrokeStartCap();
    public void set_StrokeStartCap(CompositionStrokeCap value);
    public float get_StrokeMiterLimit();
    public void set_StrokeMiterLimit(float value);
    public CompositionStrokeLineJoin get_StrokeLineJoin();
    public void set_StrokeLineJoin(CompositionStrokeLineJoin value);
    public CompositionStrokeCap get_StrokeEndCap();
    public void set_StrokeEndCap(CompositionStrokeCap value);
    public float get_StrokeDashOffset();
    public void set_StrokeDashOffset(float value);
    public CompositionStrokeCap get_StrokeDashCap();
    public void set_StrokeDashCap(CompositionStrokeCap value);
    public CompositionBrush get_StrokeBrush();
    public void set_StrokeBrush(CompositionBrush value);
    public bool get_IsStrokeNonScaling();
    public void set_IsStrokeNonScaling(bool value);
    public CompositionGeometry get_Geometry();
    public void set_Geometry(CompositionGeometry value);
    public CompositionBrush get_FillBrush();
    public void set_FillBrush(CompositionBrush value);
    public CompositionStrokeDashArray get_StrokeDashArray();
    public void set_StrokeDashArray(CompositionStrokeDashArray value);
}
public enum Windows.UI.Composition.CompositionStretch : Enum {
    public int value__;
    public static CompositionStretch None;
    public static CompositionStretch Fill;
    public static CompositionStretch Uniform;
    public static CompositionStretch UniformToFill;
}
public enum Windows.UI.Composition.CompositionStrokeCap : Enum {
    public int value__;
    public static CompositionStrokeCap Flat;
    public static CompositionStrokeCap Square;
    public static CompositionStrokeCap Round;
    public static CompositionStrokeCap Triangle;
}
[DefaultMemberAttribute("Item")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Windows.UI.Composition.CompositionStrokeDashArray : CompositionObject {
    private List`1<float> _list;
    public UInt32 Size { get; }
    public float Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal CompositionStrokeDashArray(Compositor compositor);
    public UInt32 get_Size();
    public sealed virtual int IndexOf(float item);
    public sealed virtual void Insert(int index, float item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual float get_Item(int index);
    public sealed virtual void set_Item(int index, float value);
    public sealed virtual void Add(float item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(float item);
    public sealed virtual void CopyTo(Single[] array, int arrayIndex);
    public sealed virtual bool Remove(float item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<float> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal Single[] ToEvenArray();
}
public enum Windows.UI.Composition.CompositionStrokeLineJoin : Enum {
    public int value__;
    public static CompositionStrokeLineJoin Miter;
    public static CompositionStrokeLineJoin Bevel;
    public static CompositionStrokeLineJoin Round;
    public static CompositionStrokeLineJoin MiterOrBevel;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionSurfaceBrush : CompositionBrush {
    private Matrix3x2 _transformMatrix;
    private Matrix3x2 _relativeTransform;
    private Vector2 _scale;
    private float _rotationAngle;
    private Vector2 _offset;
    private Vector2 _centerPoint;
    private Vector2 _anchorPoint;
    private CompositionStretch _stretch;
    private ICompositionSurface _surface;
    private float _horizontalAlignmentRatio;
    private bool _snapToPixels;
    private float _verticalAlignmentRatio;
    private CompositionBitmapInterpolationMode _bitmapInterpolationMode;
    public float VerticalAlignmentRatio { get; public set; }
    public ICompositionSurface Surface { get; public set; }
    public CompositionStretch Stretch { get; public set; }
    public float HorizontalAlignmentRatio { get; public set; }
    public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    internal Matrix3x2 RelativeTransform { get; internal set; }
    public Vector2 Scale { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public float RotationAngle { get; public set; }
    public Vector2 Offset { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public Vector2 AnchorPoint { get; public set; }
    public bool SnapToPixels { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionSurfaceBrush(Compositor compositor);
    [NullableContextAttribute("1")]
internal CompositionSurfaceBrush(Compositor compositor, ICompositionSurface surface);
    public float get_VerticalAlignmentRatio();
    public void set_VerticalAlignmentRatio(float value);
    public ICompositionSurface get_Surface();
    public void set_Surface(ICompositionSurface value);
    public CompositionStretch get_Stretch();
    public void set_Stretch(CompositionStretch value);
    public float get_HorizontalAlignmentRatio();
    public void set_HorizontalAlignmentRatio(float value);
    public CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public void set_BitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    public sealed virtual Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    internal Matrix3x2 get_RelativeTransform();
    internal void set_RelativeTransform(Matrix3x2 value);
    public sealed virtual Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public sealed virtual float get_RotationAngle();
    public void set_RotationAngle(float value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public sealed virtual Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
    public bool get_SnapToPixels();
    public void set_SnapToPixels(bool value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionTarget : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Visual Root { get; public set; }
    public Visual get_Root();
    public void set_Root(Visual value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionTransform : CompositionObject {
}
public class Windows.UI.Composition.CompositionViewBox : CompositionObject {
    private float _verticalAlignmentRatio;
    private CompositionStretch _stretch;
    private Vector2 _size;
    private Vector2 _offset;
    private float _horizontalAlignmentRatio;
    public float VerticalAlignmentRatio { get; public set; }
    public CompositionStretch Stretch { get; public set; }
    public Vector2 Size { get; public set; }
    public Vector2 Offset { get; public set; }
    public float HorizontalAlignmentRatio { get; public set; }
    [NullableContextAttribute("1")]
internal CompositionViewBox(Compositor compositor);
    public float get_VerticalAlignmentRatio();
    public void set_VerticalAlignmentRatio(float value);
    public CompositionStretch get_Stretch();
    public void set_Stretch(CompositionStretch value);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public float get_HorizontalAlignmentRatio();
    public void set_HorizontalAlignmentRatio(float value);
    internal Rect GetRect();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CompositionVirtualDrawingSurface : CompositionDrawingSurface {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Trim(RectInt32[] rects);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.CompositionVisualSurface : CompositionObject {
    private Visual _sourceVisual;
    private Vector2 _sourceOffset;
    private Vector2 _sourceSize;
    public Visual SourceVisual { get; public set; }
    public Vector2 SourceOffset { get; public set; }
    public Vector2 SourceSize { get; public set; }
    [NullableContextAttribute("1")]
public CompositionVisualSurface(Compositor compositor);
    private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
    public Visual get_SourceVisual();
    public void set_SourceVisual(Visual value);
    public Vector2 get_SourceOffset();
    public void set_SourceOffset(Vector2 value);
    public Vector2 get_SourceSize();
    public void set_SourceSize(Vector2 value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.Compositor : object {
    private static Lazy`1<Compositor> _sharedCompositorLazy;
    private static double s_tickFrequency;
    public long TimestampInTicks { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float GlobalPlaybackRate { get; public set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Comment { get; public set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DispatcherQueue DispatcherQueue { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static float MaxGlobalPlaybackRate { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static float MinGlobalPlaybackRate { get; }
    private static Compositor();
    public long get_TimestampInTicks();
    internal static Compositor GetSharedCompositor();
    public ContainerVisual CreateContainerVisual();
    public SpriteVisual CreateSpriteVisual();
    public CompositionColorBrush CreateColorBrush();
    public CompositionColorBrush CreateColorBrush(Color color);
    public ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation();
    public CompositionScopedBatch CreateScopedBatch(CompositionBatchTypes batchType);
    public ShapeVisual CreateShapeVisual();
    public CompositionSpriteShape CreateSpriteShape();
    public CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry);
    public CompositionPathGeometry CreatePathGeometry();
    public CompositionPathGeometry CreatePathGeometry(CompositionPath path);
    public CompositionEllipseGeometry CreateEllipseGeometry();
    public CompositionLineGeometry CreateLineGeometry();
    public CompositionRectangleGeometry CreateRectangleGeometry();
    public CompositionRoundedRectangleGeometry CreateRoundedRectangleGeometry();
    public CompositionSurfaceBrush CreateSurfaceBrush();
    public CompositionSurfaceBrush CreateSurfaceBrush(ICompositionSurface surface);
    public CompositionGeometricClip CreateGeometricClip();
    public CompositionGeometricClip CreateGeometricClip(CompositionGeometry geometry);
    public CompositionPropertySet CreatePropertySet();
    public InsetClip CreateInsetClip();
    public InsetClip CreateInsetClip(float leftInset, float topInset, float rightInset, float bottomInset);
    public RectangleClip CreateRectangleClip();
    public RectangleClip CreateRectangleClip(float left, float top, float right, float bottom);
    public RectangleClip CreateRectangleClip(float left, float top, float right, float bottom, Vector2 topLeftRadius, Vector2 topRightRadius, Vector2 bottomRightRadius, Vector2 bottomLeftRadius);
    public CompositionLinearGradientBrush CreateLinearGradientBrush();
    public CompositionRadialGradientBrush CreateRadialGradientBrush();
    public CompositionColorGradientStop CreateColorGradientStop();
    public CompositionColorGradientStop CreateColorGradientStop(float offset, Color color);
    public CompositionViewBox CreateViewBox();
    public RedirectVisual CreateRedirectVisual();
    public RedirectVisual CreateRedirectVisual(Visual source);
    public CompositionVisualSurface CreateVisualSurface();
    public CompositionMaskBrush CreateMaskBrush();
    public CompositionNineGridBrush CreateNineGridBrush();
    public ExpressionAnimation CreateExpressionAnimation(string expression);
    public ExpressionAnimation CreateExpressionAnimation();
    public Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation();
    public Vector3KeyFrameAnimation CreateVector3KeyFrameAnimation();
    public Vector4KeyFrameAnimation CreateVector4KeyFrameAnimation();
    internal void InvalidateRender(Visual visual);
    public CompositionBackdropBrush CreateBackdropBrush();
    public CompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect);
    public CompositionEffectFactory CreateEffectFactory(IGraphicsEffect graphicsEffect, IEnumerable`1<string> animatableProperties);
    public float get_GlobalPlaybackRate();
    public void set_GlobalPlaybackRate(float value);
    [NullableContextAttribute("0")]
public string get_Comment();
    [NullableContextAttribute("0")]
public void set_Comment(string value);
    [NullableContextAttribute("0")]
public DispatcherQueue get_DispatcherQueue();
    public static float get_MaxGlobalPlaybackRate();
    public static float get_MinGlobalPlaybackRate();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ColorKeyFrameAnimation CreateColorKeyFrameAnimation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CubicBezierEasingFunction CreateCubicBezierEasingFunction(Vector2 controlPoint1, Vector2 controlPoint2);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public LinearEasingFunction CreateLinearEasingFunction();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public QuaternionKeyFrameAnimation CreateQuaternionKeyFrameAnimation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionTarget CreateTargetForCurrentView();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionCommitBatch GetCommitBatch(CompositionBatchTypes batchType);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AmbientLight CreateAmbientLight();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionAnimationGroup CreateAnimationGroup();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DistantLight CreateDistantLight();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DropShadow CreateDropShadow();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImplicitAnimationCollection CreateImplicitAnimationCollection();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public LayerVisual CreateLayerVisual();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PointLight CreatePointLight();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SpotLight CreateSpotLight();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public StepEasingFunction CreateStepEasingFunction();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public StepEasingFunction CreateStepEasingFunction(int stepCount);
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionBackdropBrush CreateHostBackdropBrush();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SpringScalarNaturalMotionAnimation CreateSpringScalarAnimation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SpringVector2NaturalMotionAnimation CreateSpringVector2Animation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SpringVector3NaturalMotionAnimation CreateSpringVector3Animation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public BounceScalarNaturalMotionAnimation CreateBounceScalarAnimation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public BounceVector2NaturalMotionAnimation CreateBounceVector2Animation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public BounceVector3NaturalMotionAnimation CreateBounceVector3Animation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionContainerShape CreateContainerShape();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public PathKeyFrameAnimation CreatePathKeyFrameAnimation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncAction RequestCommitAsync();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public BooleanKeyFrameAnimation CreateBooleanKeyFrameAnimation();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionProjectedShadowCaster CreateProjectedShadowCaster();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionProjectedShadow CreateProjectedShadow();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionProjectedShadowReceiver CreateProjectedShadowReceiver();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AnimationPropertyInfo CreateAnimationPropertyInfo();
    [NullableContextAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionBackdropBrush TryCreateBlurredWallpaperBackdropBrush();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.ContainerVisual : Visual {
    [CompilerGeneratedAttribute]
private VisualCollection <Children>k__BackingField;
    public VisualCollection Children { get; }
    internal ContainerVisual(Compositor compositor);
    [CompilerGeneratedAttribute]
public VisualCollection get_Children();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Core.CompositorController : object {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Compositor Compositor { get; }
    public Compositor get_Compositor();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Commit();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IAsyncAction EnsurePreviousCommitCompletedAsync();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Dispose();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void add_CommitNeeded(TypedEventHandler`2<CompositorController, object> value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void remove_CommitNeeded(TypedEventHandler`2<CompositorController, object> value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.CubicBezierEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector2 ControlPoint1 { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector2 ControlPoint2 { get; }
    public Vector2 get_ControlPoint1();
    public Vector2 get_ControlPoint2();
}
public class Windows.UI.Composition.DelegatedInkTrailVisual : Visual {
    private DelegatedInkTrailVisual(Compositor compositor);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 AddTrailPoints(InkTrailPoint[] inkPoints);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 AddTrailPointsWithPrediction(InkTrailPoint[] inkPoints, InkTrailPoint[] predictedInkPoints);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void RemoveTrailPoints(UInt32 generationId);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void StartNewTrail(Color color);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DelegatedInkTrailVisual Create(Compositor compositor);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static DelegatedInkTrailVisual CreateForSwapChain(Compositor compositor, ICompositionSurface swapChain);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Desktop.DesktopWindowTarget : CompositionTarget {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsTopmost { get; }
    public bool get_IsTopmost();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Diagnostics.CompositionDebugHeatMaps : object {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Hide(Visual subtree);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ShowMemoryUsage(Visual subtree);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ShowOverdraw(Visual subtree, CompositionDebugOverdrawContentKinds contentKinds);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ShowRedraw(Visual subtree);
}
[FlagsAttribute]
public enum Windows.UI.Composition.Diagnostics.CompositionDebugOverdrawContentKinds : Enum {
    public UInt32 value__;
    public static CompositionDebugOverdrawContentKinds None;
    public static CompositionDebugOverdrawContentKinds OffscreenRendered;
    public static CompositionDebugOverdrawContentKinds Colors;
    public static CompositionDebugOverdrawContentKinds Effects;
    public static CompositionDebugOverdrawContentKinds Shadows;
    public static CompositionDebugOverdrawContentKinds Lights;
    public static CompositionDebugOverdrawContentKinds Surfaces;
    public static CompositionDebugOverdrawContentKinds SwapChains;
    public static CompositionDebugOverdrawContentKinds All;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Diagnostics.CompositionDebugSettings : object {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionDebugHeatMaps HeatMaps { get; }
    public CompositionDebugHeatMaps get_HeatMaps();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CompositionDebugSettings TryGetSettings(Compositor compositor);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.DistantLight : CompositionLight {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Direction { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Visual CoordinateSpace { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Color Color { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Intensity { get; public set; }
    public Vector3 get_Direction();
    public void set_Direction(Vector3 value);
    public Visual get_CoordinateSpace();
    public void set_CoordinateSpace(Visual value);
    public Color get_Color();
    public void set_Color(Color value);
    public float get_Intensity();
    public void set_Intensity(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.DropShadow : CompositionShadow {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Opacity { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Offset { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionBrush Mask { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Color Color { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float BlurRadius { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionDropShadowSourcePolicy SourcePolicy { get; public set; }
    public float get_Opacity();
    public void set_Opacity(float value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public CompositionBrush get_Mask();
    public void set_Mask(CompositionBrush value);
    public Color get_Color();
    public void set_Color(Color value);
    public float get_BlurRadius();
    public void set_BlurRadius(float value);
    public CompositionDropShadowSourcePolicy get_SourcePolicy();
    public void set_SourcePolicy(CompositionDropShadowSourcePolicy value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Effects.SceneLightingEffect : object {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Name { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float SpecularShine { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float SpecularAmount { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IGraphicsEffectSource NormalMapSource { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float DiffuseAmount { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float AmbientAmount { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneLightingEffectReflectanceModel ReflectanceModel { get; public set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_SpecularShine();
    public void set_SpecularShine(float value);
    public float get_SpecularAmount();
    public void set_SpecularAmount(float value);
    public IGraphicsEffectSource get_NormalMapSource();
    public void set_NormalMapSource(IGraphicsEffectSource value);
    public float get_DiffuseAmount();
    public void set_DiffuseAmount(float value);
    public float get_AmbientAmount();
    public void set_AmbientAmount(float value);
    public SceneLightingEffectReflectanceModel get_ReflectanceModel();
    public void set_ReflectanceModel(SceneLightingEffectReflectanceModel value);
}
public enum Windows.UI.Composition.Effects.SceneLightingEffectReflectanceModel : Enum {
    public int value__;
    public static SceneLightingEffectReflectanceModel BlinnPhong;
    public static SceneLightingEffectReflectanceModel PhysicallyBasedBlinnPhong;
}
[GuidAttribute("6152DFC6-9FBA-4810-8CBA-B280AA27BFF6")]
internal class Windows.UI.Composition.Effects.WhiteNoiseEffect : object {
    private string _name;
    private Guid _id;
    [CompilerGeneratedAttribute]
private Vector2 <Frequency>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector2 <Offset>k__BackingField;
    public string Name { get; public set; }
    public Vector2 Frequency { get; public set; }
    public Vector2 Offset { get; public set; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public Vector2 get_Frequency();
    [CompilerGeneratedAttribute]
public void set_Frequency(Vector2 value);
    [CompilerGeneratedAttribute]
public Vector2 get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(Vector2 value);
    public sealed virtual Guid GetEffectId();
    public sealed virtual void GetNamedPropertyMapping(string name, UInt32& index, GraphicsEffectPropertyMapping& mapping);
    public sealed virtual object GetProperty(UInt32 index);
    public sealed virtual UInt32 GetPropertyCount();
    public sealed virtual IGraphicsEffectSource GetSource(UInt32 index);
    public sealed virtual UInt32 GetSourceCount();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.ElasticEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEasingFunctionMode Mode { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Oscillations { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Springiness { get; }
    public CompositionEasingFunctionMode get_Mode();
    public int get_Oscillations();
    public float get_Springiness();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.ExponentialEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Exponent { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEasingFunctionMode Mode { get; }
    public float get_Exponent();
    public CompositionEasingFunctionMode get_Mode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.ExpressionAnimation : CompositionAnimation {
    [NullableAttribute("2")]
private AnimationExpressionSyntax _parsedExpression;
    private string _expression;
    public string Expression { get; public set; }
    internal bool IsTrackedByCompositor { get; }
    internal ExpressionAnimation(Compositor compositor);
    public string get_Expression();
    public void set_Expression(string value);
    internal virtual bool get_IsTrackedByCompositor();
    [NullableContextAttribute("2")]
private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
    [NullableContextAttribute("0")]
internal virtual object Start(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, CompositionObject compositionObject);
    [NullableContextAttribute("2")]
internal virtual object Evaluate();
    internal virtual void Stop();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.ExpressionAnimationLexer : object {
    private string _text;
    private int _position;
    private static Dictionary`2<char, ExpressionAnimationTokenKind> _knownTokens;
    private char Current { get; }
    public ExpressionAnimationLexer(string text);
    private static ExpressionAnimationLexer();
    private char get_Current();
    private char Peek(int i);
    public Nullable`1<ExpressionAnimationToken> EatToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.ExpressionAnimationParser : object {
    [NullableAttribute("0")]
private ImmutableArray`1<ExpressionAnimationToken> _tokens;
    private int _position;
    private ExpressionAnimationToken Current { get; }
    private bool HasCurrent { get; }
    public ExpressionAnimationParser(string text);
    private ExpressionAnimationToken get_Current();
    private bool get_HasCurrent();
    public AnimationExpressionSyntax Parse();
    internal static int GetBinaryPrecedence(ExpressionAnimationToken token);
    internal static int GetUnaryPrecedence(ExpressionAnimationToken token);
    private AnimationExpressionSyntax ParseExpression(int parentPrecedence);
    private AnimationExpressionSyntax ParsePrimaryExpression();
    private ExpressionAnimationToken NextToken();
    private bool NextIsMemberAccess();
    private ExpressionAnimationToken Match(ExpressionAnimationTokenKind kind);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Windows.UI.Composition.ExpressionAnimationToken : ValueType {
    [CompilerGeneratedAttribute]
private ExpressionAnimationTokenKind <Kind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public ExpressionAnimationTokenKind Kind { get; }
    public object Value { get; }
    public ExpressionAnimationToken(ExpressionAnimationTokenKind kind, object value);
    [CompilerGeneratedAttribute]
public ExpressionAnimationTokenKind get_Kind();
    [CompilerGeneratedAttribute]
public object get_Value();
}
internal enum Windows.UI.Composition.ExpressionAnimationTokenKind : Enum {
    public int value__;
    public static ExpressionAnimationTokenKind DotToken;
    public static ExpressionAnimationTokenKind CommaToken;
    public static ExpressionAnimationTokenKind PlusToken;
    public static ExpressionAnimationTokenKind MinusToken;
    public static ExpressionAnimationTokenKind MultiplyToken;
    public static ExpressionAnimationTokenKind DivisionToken;
    public static ExpressionAnimationTokenKind OpenParenToken;
    public static ExpressionAnimationTokenKind CloseParenToken;
    public static ExpressionAnimationTokenKind QuestionMarkToken;
    public static ExpressionAnimationTokenKind ColonToken;
    public static ExpressionAnimationTokenKind GreaterThanEqualsToken;
    public static ExpressionAnimationTokenKind GreaterThanToken;
    public static ExpressionAnimationTokenKind LessThanEqualsToken;
    public static ExpressionAnimationTokenKind LessThanToken;
    public static ExpressionAnimationTokenKind IdentifierToken;
    public static ExpressionAnimationTokenKind NumericLiteralToken;
}
[NullableContextAttribute("1")]
internal interface Windows.UI.Composition.IAnimationFunctionSpecification {
    public int ParametersLength { get; }
    public string MethodName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    public abstract virtual int get_ParametersLength();
    public abstract virtual string get_MethodName();
    [NullableContextAttribute("2")]
public abstract virtual string get_ClassName();
    public abstract virtual object Evaluate(Object[] parameters);
}
[NotImplementedAttribute]
public interface Windows.UI.Composition.IAnimationObject {
    public abstract virtual void PopulatePropertyInfo(string propertyName, AnimationPropertyInfo propertyInfo);
}
[NotImplementedAttribute]
public interface Windows.UI.Composition.ICompositionAnimationBase {
}
[NotImplementedAttribute]
public interface Windows.UI.Composition.ICompositionSupportsSystemBackdrop {
    public CompositionBrush SystemBackdrop { get; public set; }
    public abstract virtual CompositionBrush get_SystemBackdrop();
    public abstract virtual void set_SystemBackdrop(CompositionBrush value);
}
public interface Windows.UI.Composition.ICompositionSurface {
}
[NotImplementedAttribute]
public interface Windows.UI.Composition.ICompositionSurfaceFacade {
    public abstract virtual ICompositionSurface GetRealSurface();
}
internal interface Windows.UI.Composition.IKeyFrameEvaluator {
    public abstract virtual ValueTuple`2<object, bool> Evaluate();
}
[DefaultMemberAttribute("Item")]
[NotImplementedAttribute]
public class Windows.UI.Composition.ImplicitAnimationCollection : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 Size { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICompositionAnimationBase Item { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> Keys { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<ICompositionAnimationBase> Values { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsReadOnly { get; }
    public UInt32 get_Size();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, ICompositionAnimationBase>> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(string key, ICompositionAnimationBase value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool ContainsKey(string key);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(string key);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool TryGetValue(string key, ICompositionAnimationBase& value);
    public sealed virtual ICompositionAnimationBase get_Item(string key);
    public sealed virtual void set_Item(string key, ICompositionAnimationBase value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<ICompositionAnimationBase> get_Values();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(KeyValuePair`2<string, ICompositionAnimationBase> item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(KeyValuePair`2<string, ICompositionAnimationBase> item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(KeyValuePair`2<string, ICompositionAnimationBase> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
}
[DefaultMemberAttribute("Item")]
[NotImplementedAttribute]
public class Windows.UI.Composition.InitialValueExpressionCollection : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 Size { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public string Item { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> Keys { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> Values { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsReadOnly { get; }
    public UInt32 get_Size();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(string key, string value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool ContainsKey(string key);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(string key);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool TryGetValue(string key, String& value);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(KeyValuePair`2<string, string> item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(KeyValuePair`2<string, string> item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(KeyValuePair`2<string, string> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.InkTrailPoint : ValueType {
    public Point Point;
    public float Radius;
}
public class Windows.UI.Composition.InsetClip : CompositionClip {
    private float _topInset;
    private float _rightInset;
    private float _leftInset;
    private float _bottomInset;
    public float TopInset { get; public set; }
    public float RightInset { get; public set; }
    public float LeftInset { get; public set; }
    public float BottomInset { get; public set; }
    [NullableContextAttribute("1")]
internal InsetClip(Compositor compositor);
    public float get_TopInset();
    public void set_TopInset(float value);
    public float get_RightInset();
    public void set_RightInset(float value);
    public float get_LeftInset();
    public void set_LeftInset(float value);
    public float get_BottomInset();
    public void set_BottomInset(float value);
    [NullableContextAttribute("1")]
internal virtual object GetAnimatableProperty(string propertyName, string subPropertyName);
    private protected virtual void SetAnimatableProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, object propertyValue);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.CompositionConditionalValue : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation Value { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation get_Value();
    public void set_Value(ExpressionAnimation value);
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static CompositionConditionalValue Create(Compositor compositor);
}
public class Windows.UI.Composition.Interactions.CompositionInteractionSourceCollection : CompositionObject {
    private List`1<ICompositionInteractionSource> _list;
    private InteractionTracker _tracker;
    public int Count { get; }
    internal CompositionInteractionSourceCollection(Compositor compositor, InteractionTracker tracker);
    public int get_Count();
    public void RemoveAll();
    public void Add(ICompositionInteractionSource value);
    public void Remove(ICompositionInteractionSource value);
    public sealed virtual IEnumerator`1<ICompositionInteractionSource> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class Windows.UI.Composition.Interactions.DampingHelper : object {
    public static double SolveUnderdamped(double zeta, double wn, double wd, double t);
    public static double SolveCriticallyDamped(double wn, double t);
}
[NotImplementedAttribute]
public interface Windows.UI.Composition.Interactions.ICompositionInteractionSource {
}
internal interface Windows.UI.Composition.Interactions.IInteractionTrackerInertiaHandler {
    public Vector3 InitialVelocity { get; }
    public Vector3 FinalPosition { get; }
    public Vector3 FinalModifiedPosition { get; }
    public float FinalScale { get; }
    public abstract virtual Vector3 get_InitialVelocity();
    public abstract virtual Vector3 get_FinalPosition();
    public abstract virtual Vector3 get_FinalModifiedPosition();
    public abstract virtual float get_FinalScale();
    public abstract virtual void Start();
    public abstract virtual void Stop();
}
[NullableContextAttribute("1")]
public interface Windows.UI.Composition.Interactions.IInteractionTrackerOwner {
    public abstract virtual void CustomAnimationStateEntered(InteractionTracker sender, InteractionTrackerCustomAnimationStateEnteredArgs args);
    public abstract virtual void IdleStateEntered(InteractionTracker sender, InteractionTrackerIdleStateEnteredArgs args);
    public abstract virtual void InertiaStateEntered(InteractionTracker sender, InteractionTrackerInertiaStateEnteredArgs args);
    public abstract virtual void InteractingStateEntered(InteractionTracker sender, InteractionTrackerInteractingStateEnteredArgs args);
    public abstract virtual void RequestIgnored(InteractionTracker sender, InteractionTrackerRequestIgnoredArgs args);
    public abstract virtual void ValuesChanged(InteractionTracker sender, InteractionTrackerValuesChangedArgs args);
}
[FlagsAttribute]
public enum Windows.UI.Composition.Interactions.InteractionBindingAxisModes : Enum {
    public UInt32 value__;
    public static InteractionBindingAxisModes None;
    public static InteractionBindingAxisModes PositionX;
    public static InteractionBindingAxisModes PositionY;
    public static InteractionBindingAxisModes Scale;
}
public enum Windows.UI.Composition.Interactions.InteractionChainingMode : Enum {
    public int value__;
    public static InteractionChainingMode Auto;
    public static InteractionChainingMode Always;
    public static InteractionChainingMode Never;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionSourceConfiguration : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public InteractionSourceRedirectionMode ScaleSourceMode { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public InteractionSourceRedirectionMode PositionYSourceMode { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public InteractionSourceRedirectionMode PositionXSourceMode { get; public set; }
    public InteractionSourceRedirectionMode get_ScaleSourceMode();
    public void set_ScaleSourceMode(InteractionSourceRedirectionMode value);
    public InteractionSourceRedirectionMode get_PositionYSourceMode();
    public void set_PositionYSourceMode(InteractionSourceRedirectionMode value);
    public InteractionSourceRedirectionMode get_PositionXSourceMode();
    public void set_PositionXSourceMode(InteractionSourceRedirectionMode value);
}
public enum Windows.UI.Composition.Interactions.InteractionSourceMode : Enum {
    public int value__;
    public static InteractionSourceMode Disabled;
    public static InteractionSourceMode EnabledWithInertia;
    public static InteractionSourceMode EnabledWithoutInertia;
}
public enum Windows.UI.Composition.Interactions.InteractionSourceRedirectionMode : Enum {
    public int value__;
    public static InteractionSourceRedirectionMode Disabled;
    public static InteractionSourceRedirectionMode Enabled;
}
public class Windows.UI.Composition.Interactions.InteractionTracker : CompositionObject {
    [NullableAttribute("1")]
private InteractionTrackerState _state;
    private Vector3 _position;
    private int _currentRequestId;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IInteractionTrackerOwner <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MinScale>k__BackingField;
    [CompilerGeneratedAttribute]
private float <MaxScale>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <MinPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <MaxPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Vector3> <PositionInertiaDecayRate>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private CompositionInteractionSourceCollection <InteractionSources>k__BackingField;
    [NullableAttribute("2")]
public IInteractionTrackerOwner Owner { get; }
    public float MinScale { get; public set; }
    public float MaxScale { get; public set; }
    public float Scale { get; }
    public Vector3 MinPosition { get; public set; }
    public Vector3 MaxPosition { get; public set; }
    public Nullable`1<Vector3> PositionInertiaDecayRate { get; public set; }
    public Vector3 Position { get; }
    [NullableAttribute("1")]
public CompositionInteractionSourceCollection InteractionSources { get; }
    public int CurrentRequestId { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<float> ScaleInertiaDecayRate { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsPositionRoundingSuggested { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 NaturalRestingPosition { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float NaturalRestingScale { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 PositionVelocityInPixelsPerSecond { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float ScaleVelocityInPercentPerSecond { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsInertiaFromImpulse { get; }
    [NullableContextAttribute("1")]
private InteractionTracker(Compositor compositor, IInteractionTrackerOwner owner);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IInteractionTrackerOwner get_Owner();
    [CompilerGeneratedAttribute]
public float get_MinScale();
    [CompilerGeneratedAttribute]
public void set_MinScale(float value);
    [CompilerGeneratedAttribute]
public float get_MaxScale();
    [CompilerGeneratedAttribute]
public void set_MaxScale(float value);
    [CompilerGeneratedAttribute]
public float get_Scale();
    [CompilerGeneratedAttribute]
public Vector3 get_MinPosition();
    [CompilerGeneratedAttribute]
public void set_MinPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public Vector3 get_MaxPosition();
    [CompilerGeneratedAttribute]
public void set_MaxPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public Nullable`1<Vector3> get_PositionInertiaDecayRate();
    [CompilerGeneratedAttribute]
public void set_PositionInertiaDecayRate(Nullable`1<Vector3> value);
    public Vector3 get_Position();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public CompositionInteractionSourceCollection get_InteractionSources();
    public int get_CurrentRequestId();
    [NullableContextAttribute("1")]
public static InteractionTracker Create(Compositor compositor);
    [NullableContextAttribute("1")]
public static InteractionTracker CreateWithOwner(Compositor compositor, IInteractionTrackerOwner owner);
    [NullableContextAttribute("1")]
internal void ChangeState(InteractionTrackerState newState);
    internal void SetPosition(Vector3 newPosition, int requestId);
    public int TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond);
    internal void StartUserManipulation();
    internal void CompleteUserManipulation(Vector3 linearVelocity);
    internal void ReceiveManipulationDelta(Point translationDelta);
    internal void ReceiveInertiaStarting(Point linearVelocity);
    internal void ReceivePointerWheel(int mouseWheelTicks, bool isHorizontal);
    public int TryUpdatePosition(Vector3 value);
    public int TryUpdatePositionBy(Vector3 amount);
    public int TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option);
    public int TryUpdatePositionBy(Vector3 amount, InteractionTrackerClampingOption option);
    private protected virtual void SetAnimatableProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, object propertyValue);
    [NullableContextAttribute("1")]
internal virtual object GetAnimatableProperty(string propertyName, string subPropertyName);
    public Nullable`1<float> get_ScaleInertiaDecayRate();
    public void set_ScaleInertiaDecayRate(Nullable`1<float> value);
    public bool get_IsPositionRoundingSuggested();
    public Vector3 get_NaturalRestingPosition();
    public float get_NaturalRestingScale();
    public Vector3 get_PositionVelocityInPixelsPerSecond();
    public float get_ScaleVelocityInPercentPerSecond();
    public bool get_IsInertiaFromImpulse();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void AdjustPositionXIfGreaterThanThreshold(float adjustment, float positionThreshold);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void AdjustPositionYIfGreaterThanThreshold(float adjustment, float positionThreshold);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigurePositionXInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigurePositionYInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureScaleInertiaModifiers(IEnumerable`1<InteractionTrackerInertiaModifier> modifiers);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int TryUpdatePositionWithAnimation(CompositionAnimation animation);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int TryUpdateScale(float value, Vector3 centerPoint);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int TryUpdateScaleWithAnimation(CompositionAnimation animation, Vector3 centerPoint);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int TryUpdateScaleWithAdditionalVelocity(float velocityInPercentPerSecond, Vector3 centerPoint);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureCenterPointXInertiaModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureCenterPointYInertiaModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureVector2PositionInertiaModifiers(IEnumerable`1<InteractionTrackerVector2InertiaModifier> modifiers);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, InteractionTrackerPositionUpdateOption posUpdateOption);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static void SetBindingMode(InteractionTracker boundTracker1, InteractionTracker boundTracker2, InteractionBindingAxisModes axisMode);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static InteractionBindingAxisModes GetBindingMode(InteractionTracker boundTracker1, InteractionTracker boundTracker2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.Interactions.InteractionTrackerActiveInputInertiaHandler : object {
    private InteractionTracker _interactionTracker;
    private AxisHelper _xHelper;
    private AxisHelper _yHelper;
    private AxisHelper _zHelper;
    private int _requestId;
    [NullableAttribute("2")]
private Timer _timer;
    [NullableAttribute("2")]
private Stopwatch _stopwatch;
    private static int IntervalInMilliseconds;
    public Vector3 InitialVelocity { get; }
    public Vector3 FinalPosition { get; }
    public Vector3 FinalModifiedPosition { get; }
    public float FinalScale { get; }
    public InteractionTrackerActiveInputInertiaHandler(InteractionTracker interactionTracker, Vector3 translationVelocities, int requestId);
    public sealed virtual Vector3 get_InitialVelocity();
    public sealed virtual Vector3 get_FinalPosition();
    public sealed virtual Vector3 get_FinalModifiedPosition();
    public sealed virtual float get_FinalScale();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    [NullableContextAttribute("2")]
private void OnTick(object state);
}
public enum Windows.UI.Composition.Interactions.InteractionTrackerClampingOption : Enum {
    public int value__;
    public static InteractionTrackerClampingOption Auto;
    public static InteractionTrackerClampingOption Disabled;
}
internal class Windows.UI.Composition.Interactions.InteractionTrackerCustomAnimationState : InteractionTrackerState {
    [NullableContextAttribute("1")]
public InteractionTrackerCustomAnimationState(InteractionTracker interactionTracker);
    [NullableContextAttribute("2")]
protected virtual void EnterState(IInteractionTrackerOwner owner);
    internal virtual void StartUserManipulation();
    internal virtual void CompleteUserManipulation(Vector3 linearVelocity);
    internal virtual void ReceiveManipulationDelta(Point translationDelta);
    internal virtual void ReceiveInertiaStarting(Point linearVelocity);
    internal virtual void ReceivePointerWheel(int delta, bool isHorizontal);
    internal virtual void TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond, int requestId);
    internal virtual void TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, int requestId);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerCustomAnimationStateEnteredArgs : object {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int RequestId { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsFromBinding { get; }
    public int get_RequestId();
    public bool get_IsFromBinding();
}
internal class Windows.UI.Composition.Interactions.InteractionTrackerIdleState : InteractionTrackerState {
    private bool _isInitialIdleState;
    private int _requestId;
    [NullableContextAttribute("1")]
public InteractionTrackerIdleState(InteractionTracker interactionTracker, int requestId, bool isInitialIdleState);
    [NullableContextAttribute("2")]
protected virtual void EnterState(IInteractionTrackerOwner owner);
    internal virtual void StartUserManipulation();
    internal virtual void CompleteUserManipulation(Vector3 linearVelocity);
    internal virtual void ReceiveManipulationDelta(Point translationDelta);
    internal virtual void ReceiveInertiaStarting(Point linearVelocity);
    internal virtual void ReceivePointerWheel(int delta, bool isHorizontal);
    internal virtual void TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond, int requestId);
    internal virtual void TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, int requestId);
}
public class Windows.UI.Composition.Interactions.InteractionTrackerIdleStateEnteredArgs : object {
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromBinding>k__BackingField;
    public int RequestId { get; }
    public bool IsFromBinding { get; }
    internal InteractionTrackerIdleStateEnteredArgs(int requestId, bool isFromBinding);
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
public bool get_IsFromBinding();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerInertiaModifier : CompositionObject {
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerInertiaMotion : InteractionTrackerInertiaModifier {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation Motion { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation get_Motion();
    public void set_Motion(ExpressionAnimation value);
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static InteractionTrackerInertiaMotion Create(Compositor compositor);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerInertiaNaturalMotion : InteractionTrackerInertiaModifier {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ScalarNaturalMotionAnimation NaturalMotion { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation Condition { get; public set; }
    public ScalarNaturalMotionAnimation get_NaturalMotion();
    public void set_NaturalMotion(ScalarNaturalMotionAnimation value);
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static InteractionTrackerInertiaNaturalMotion Create(Compositor compositor);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerInertiaRestingValue : InteractionTrackerInertiaModifier {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation RestingValue { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation Condition { get; public set; }
    public ExpressionAnimation get_RestingValue();
    public void set_RestingValue(ExpressionAnimation value);
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static InteractionTrackerInertiaRestingValue Create(Compositor compositor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.Interactions.InteractionTrackerInertiaState : InteractionTrackerState {
    private IInteractionTrackerInertiaHandler _handler;
    private int _requestId;
    public InteractionTrackerInertiaState(InteractionTracker interactionTracker, Vector3 translationVelocities, int requestId, bool isFromPointerWheel);
    [NullableContextAttribute("2")]
protected virtual void EnterState(IInteractionTrackerOwner owner);
    internal virtual void StartUserManipulation();
    internal virtual void CompleteUserManipulation(Vector3 linearVelocity);
    internal virtual void ReceiveManipulationDelta(Point translationDelta);
    internal virtual void ReceiveInertiaStarting(Point linearVelocity);
    internal virtual void ReceivePointerWheel(int delta, bool isHorizontal);
    internal virtual void TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond, int requestId);
    internal virtual void TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, int requestId);
    public virtual void Dispose();
}
[RequiredMemberAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerInertiaStateEnteredArgs : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Vector3> <ModifiedRestingPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <ModifiedRestingScale>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <NaturalRestingPosition>k__BackingField;
    [CompilerGeneratedAttribute]
private float <NaturalRestingScale>k__BackingField;
    [CompilerGeneratedAttribute]
private Vector3 <PositionVelocityInPixelsPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private float <ScaleVelocityInPercentPerSecond>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInertiaFromImpulse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromBinding>k__BackingField;
    [RequiredMemberAttribute]
public Nullable`1<Vector3> ModifiedRestingPosition { get; public set; }
    [RequiredMemberAttribute]
public Nullable`1<float> ModifiedRestingScale { get; public set; }
    [RequiredMemberAttribute]
public Vector3 NaturalRestingPosition { get; public set; }
    [RequiredMemberAttribute]
public float NaturalRestingScale { get; public set; }
    [RequiredMemberAttribute]
public Vector3 PositionVelocityInPixelsPerSecond { get; public set; }
    [RequiredMemberAttribute]
public int RequestId { get; public set; }
    [RequiredMemberAttribute]
public float ScaleVelocityInPercentPerSecond { get; public set; }
    [RequiredMemberAttribute]
public bool IsInertiaFromImpulse { get; public set; }
    [RequiredMemberAttribute]
public bool IsFromBinding { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Vector3> get_ModifiedRestingPosition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModifiedRestingPosition(Nullable`1<Vector3> value);
    [CompilerGeneratedAttribute]
public Nullable`1<float> get_ModifiedRestingScale();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModifiedRestingScale(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public Vector3 get_NaturalRestingPosition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NaturalRestingPosition(Vector3 value);
    [CompilerGeneratedAttribute]
public float get_NaturalRestingScale();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NaturalRestingScale(float value);
    [CompilerGeneratedAttribute]
public Vector3 get_PositionVelocityInPixelsPerSecond();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PositionVelocityInPixelsPerSecond(Vector3 value);
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RequestId(int value);
    [CompilerGeneratedAttribute]
public float get_ScaleVelocityInPercentPerSecond();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ScaleVelocityInPercentPerSecond(float value);
    [CompilerGeneratedAttribute]
public bool get_IsInertiaFromImpulse();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsInertiaFromImpulse(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFromBinding();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsFromBinding(bool value);
}
internal class Windows.UI.Composition.Interactions.InteractionTrackerInteractingState : InteractionTrackerState {
    [NullableContextAttribute("1")]
public InteractionTrackerInteractingState(InteractionTracker interactionTracker);
    [NullableContextAttribute("2")]
protected virtual void EnterState(IInteractionTrackerOwner owner);
    internal virtual void StartUserManipulation();
    internal virtual void CompleteUserManipulation(Vector3 linearVelocity);
    internal virtual void ReceiveManipulationDelta(Point translationDelta);
    internal virtual void ReceiveInertiaStarting(Point linearVelocity);
    internal virtual void ReceivePointerWheel(int delta, bool isHorizontal);
    internal virtual void TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond, int requestId);
    internal virtual void TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, int requestId);
}
public class Windows.UI.Composition.Interactions.InteractionTrackerInteractingStateEnteredArgs : object {
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFromBinding>k__BackingField;
    public int RequestId { get; }
    public bool IsFromBinding { get; }
    internal InteractionTrackerInteractingStateEnteredArgs(int requestId, bool isFromBinding);
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
public bool get_IsFromBinding();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.Interactions.InteractionTrackerPointerWheelInertiaHandler : object {
    private static int IntervalInMilliseconds;
    private Timer _timer;
    private Stopwatch _stopwatch;
    [NullableAttribute("1")]
private InteractionTracker _interactionTracker;
    private Vector3 _minPosition;
    private Vector3 _maxPosition;
    private Vector3 _initialPosition;
    private Vector3 _calculatedFinalPosition;
    [CompilerGeneratedAttribute]
private Vector3 <InitialVelocity>k__BackingField;
    public Vector3 InitialVelocity { get; }
    public Vector3 FinalPosition { get; }
    public Vector3 FinalModifiedPosition { get; }
    public float FinalScale { get; }
    [NullableContextAttribute("1")]
public InteractionTrackerPointerWheelInertiaHandler(InteractionTracker interactionTracker, Vector3 translationVelocities);
    [CompilerGeneratedAttribute]
public sealed virtual Vector3 get_InitialVelocity();
    public sealed virtual Vector3 get_FinalPosition();
    public sealed virtual Vector3 get_FinalModifiedPosition();
    public sealed virtual float get_FinalScale();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    private void OnTick(object state);
}
public enum Windows.UI.Composition.Interactions.InteractionTrackerPositionUpdateOption : Enum {
    public int value__;
    public static InteractionTrackerPositionUpdateOption Default;
    public static InteractionTrackerPositionUpdateOption AllowActiveCustomScaleAnimation;
}
public class Windows.UI.Composition.Interactions.InteractionTrackerRequestIgnoredArgs : object {
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    public int RequestId { get; }
    internal InteractionTrackerRequestIgnoredArgs(int requestId);
    [CompilerGeneratedAttribute]
public int get_RequestId();
}
internal abstract class Windows.UI.Composition.Interactions.InteractionTrackerState : object {
    [NullableAttribute("1")]
private protected InteractionTracker _interactionTracker;
    private protected bool _disposed;
    [NullableContextAttribute("1")]
public InteractionTrackerState(InteractionTracker interactionTracker);
    [NullableContextAttribute("2")]
protected abstract virtual void EnterState(IInteractionTrackerOwner owner);
    internal abstract virtual void StartUserManipulation();
    internal abstract virtual void CompleteUserManipulation(Vector3 linearVelocity);
    internal abstract virtual void ReceiveManipulationDelta(Point translationDelta);
    internal abstract virtual void ReceiveInertiaStarting(Point linearVelocity);
    internal abstract virtual void ReceivePointerWheel(int delta, bool isHorizontal);
    internal abstract virtual void TryUpdatePositionWithAdditionalVelocity(Vector3 velocityInPixelsPerSecond, int requestId);
    internal abstract virtual void TryUpdatePosition(Vector3 value, InteractionTrackerClampingOption option, int requestId);
    public virtual void Dispose();
}
public class Windows.UI.Composition.Interactions.InteractionTrackerValuesChangedArgs : object {
    [CompilerGeneratedAttribute]
private Vector3 <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private float <Scale>k__BackingField;
    public Vector3 Position { get; }
    public int RequestId { get; }
    public float Scale { get; }
    internal InteractionTrackerValuesChangedArgs(Vector3 position, float scale, int requestId);
    [CompilerGeneratedAttribute]
public Vector3 get_Position();
    [CompilerGeneratedAttribute]
public int get_RequestId();
    [CompilerGeneratedAttribute]
public float get_Scale();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerVector2InertiaModifier : CompositionObject {
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Interactions.InteractionTrackerVector2InertiaNaturalMotion : InteractionTrackerVector2InertiaModifier {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector2NaturalMotionAnimation NaturalMotion { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ExpressionAnimation Condition { get; public set; }
    public Vector2NaturalMotionAnimation get_NaturalMotion();
    public void set_NaturalMotion(Vector2NaturalMotionAnimation value);
    public ExpressionAnimation get_Condition();
    public void set_Condition(ExpressionAnimation value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static InteractionTrackerVector2InertiaNaturalMotion Create(Compositor compositor);
}
public class Windows.UI.Composition.Interactions.VisualInteractionSource : CompositionObject {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private List`1<InteractionTracker> <Trackers>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Visual <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private InteractionSourceMode <ScaleSourceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private InteractionSourceMode <PositionXSourceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private InteractionSourceMode <PositionYSourceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private InteractionChainingMode <PositionXChainingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private InteractionChainingMode <PositionYChainingMode>k__BackingField;
    [CompilerGeneratedAttribute]
private VisualInteractionSourceRedirectionMode <ManipulationRedirectionMode>k__BackingField;
    [NullableAttribute("1")]
internal List`1<InteractionTracker> Trackers { get; }
    [NullableAttribute("1")]
public Visual Source { get; }
    public InteractionSourceMode ScaleSourceMode { get; public set; }
    public InteractionSourceMode PositionXSourceMode { get; public set; }
    public InteractionSourceMode PositionYSourceMode { get; public set; }
    public InteractionChainingMode PositionXChainingMode { get; public set; }
    public InteractionChainingMode PositionYChainingMode { get; public set; }
    public VisualInteractionSourceRedirectionMode ManipulationRedirectionMode { get; public set; }
    internal bool RedirectsPointerWheel { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public InteractionChainingMode ScaleChainingMode { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsPositionYRailsEnabled { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsPositionXRailsEnabled { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 DeltaPosition { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float DeltaScale { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Position { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 PositionVelocity { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Scale { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float ScaleVelocity { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public InteractionSourceConfiguration PointerWheelConfig { get; }
    [NullableContextAttribute("1")]
private VisualInteractionSource(Visual source);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal List`1<InteractionTracker> get_Trackers();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Visual get_Source();
    [CompilerGeneratedAttribute]
public InteractionSourceMode get_ScaleSourceMode();
    [CompilerGeneratedAttribute]
public void set_ScaleSourceMode(InteractionSourceMode value);
    [CompilerGeneratedAttribute]
public InteractionSourceMode get_PositionXSourceMode();
    [CompilerGeneratedAttribute]
public void set_PositionXSourceMode(InteractionSourceMode value);
    [CompilerGeneratedAttribute]
public InteractionSourceMode get_PositionYSourceMode();
    [CompilerGeneratedAttribute]
public void set_PositionYSourceMode(InteractionSourceMode value);
    [CompilerGeneratedAttribute]
public InteractionChainingMode get_PositionXChainingMode();
    [CompilerGeneratedAttribute]
public void set_PositionXChainingMode(InteractionChainingMode value);
    [CompilerGeneratedAttribute]
public InteractionChainingMode get_PositionYChainingMode();
    [CompilerGeneratedAttribute]
public void set_PositionYChainingMode(InteractionChainingMode value);
    [CompilerGeneratedAttribute]
public VisualInteractionSourceRedirectionMode get_ManipulationRedirectionMode();
    [CompilerGeneratedAttribute]
public void set_ManipulationRedirectionMode(VisualInteractionSourceRedirectionMode value);
    internal bool get_RedirectsPointerWheel();
    [NullableContextAttribute("1")]
public static VisualInteractionSource Create(Visual source);
    private protected virtual void DisposeInternal();
    [NullableContextAttribute("1")]
public void TryRedirectForManipulation(PointerPoint pointerPoint);
    public InteractionChainingMode get_ScaleChainingMode();
    public void set_ScaleChainingMode(InteractionChainingMode value);
    public bool get_IsPositionYRailsEnabled();
    public void set_IsPositionYRailsEnabled(bool value);
    public bool get_IsPositionXRailsEnabled();
    public void set_IsPositionXRailsEnabled(bool value);
    public Vector3 get_DeltaPosition();
    public float get_DeltaScale();
    public Vector3 get_Position();
    public Vector3 get_PositionVelocity();
    public float get_Scale();
    public float get_ScaleVelocity();
    public InteractionSourceConfiguration get_PointerWheelConfig();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureCenterPointXModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureCenterPointYModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureDeltaPositionXModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureDeltaPositionYModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void ConfigureDeltaScaleModifiers(IEnumerable`1<CompositionConditionalValue> conditionalValues);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static VisualInteractionSource CreateFromIVisualElement(IVisualElement source);
}
public enum Windows.UI.Composition.Interactions.VisualInteractionSourceRedirectionMode : Enum {
    public int value__;
    public static VisualInteractionSourceRedirectionMode Off;
    public static VisualInteractionSourceRedirectionMode CapableTouchpadOnly;
    public static VisualInteractionSourceRedirectionMode PointerWheelOnly;
    public static VisualInteractionSourceRedirectionMode CapableTouchpadAndPointerWheel;
}
public interface Windows.UI.Composition.IVisualElement {
}
[NullableContextAttribute("1")]
public interface Windows.UI.Composition.IVisualElement2 {
    public abstract virtual Visual GetVisualInternal();
}
public class Windows.UI.Composition.KeyFrameAnimation : CompositionAnimation {
    [NullableAttribute("2")]
private protected IKeyFrameEvaluator _keyframeEvaluator;
    [CompilerGeneratedAttribute]
private AnimationStopBehavior <StopBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IterationCount>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimationIterationBehavior <IterationBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DelayTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyFrameCountCore>k__BackingField;
    [CompilerGeneratedAttribute]
private AnimationDirection <Direction>k__BackingField;
    internal bool IsTrackedByCompositor { get; }
    [NotImplementedAttribute]
public AnimationStopBehavior StopBehavior { get; public set; }
    public int IterationCount { get; public set; }
    public AnimationIterationBehavior IterationBehavior { get; public set; }
    public TimeSpan Duration { get; public set; }
    [NotImplementedAttribute]
public TimeSpan DelayTime { get; public set; }
    public int KeyFrameCount { get; }
    private protected int KeyFrameCountCore { get; }
    [NotImplementedAttribute]
public AnimationDirection Direction { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AnimationDelayBehavior DelayBehavior { get; public set; }
    [NullableContextAttribute("1")]
internal KeyFrameAnimation(Compositor compositor);
    internal virtual bool get_IsTrackedByCompositor();
    [CompilerGeneratedAttribute]
public AnimationStopBehavior get_StopBehavior();
    [CompilerGeneratedAttribute]
public void set_StopBehavior(AnimationStopBehavior value);
    [CompilerGeneratedAttribute]
public int get_IterationCount();
    [CompilerGeneratedAttribute]
public void set_IterationCount(int value);
    [CompilerGeneratedAttribute]
public AnimationIterationBehavior get_IterationBehavior();
    [CompilerGeneratedAttribute]
public void set_IterationBehavior(AnimationIterationBehavior value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DelayTime();
    [CompilerGeneratedAttribute]
public void set_DelayTime(TimeSpan value);
    public int get_KeyFrameCount();
    [CompilerGeneratedAttribute]
private protected virtual int get_KeyFrameCountCore();
    [CompilerGeneratedAttribute]
public AnimationDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(AnimationDirection value);
    [NullableContextAttribute("1")]
internal virtual object Evaluate();
    public AnimationDelayBehavior get_DelayBehavior();
    public void set_DelayBehavior(AnimationDelayBehavior value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertExpressionKeyFrame(float normalizedProgressKey, string value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertExpressionKeyFrame(float normalizedProgressKey, string value, CompositionEasingFunction easingFunction);
}
internal class Windows.UI.Composition.KeyFrameEvaluator`1 : object {
    private long _startTimestamp;
    private T _initialValue;
    private T _finalValue;
    private TimeSpan _duration;
    private TimeSpan _totalDuration;
    private SortedDictionary`2<float, T> _keyFrames;
    private Func`4<T, T, float, T> _lerp;
    private Compositor _compositor;
    public KeyFrameEvaluator`1(T initialValue, T finalValue, TimeSpan duration, SortedDictionary`2<float, T> keyFrames, Func`4<T, T, float, T> lerp, int iterationCount, AnimationIterationBehavior iterationBehavior, Compositor compositor);
    public sealed virtual ValueTuple`2<object, bool> Evaluate();
}
public class Windows.UI.Composition.LayerVisual : ContainerVisual {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEffectBrush Effect { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionShadow Shadow { get; public set; }
    public CompositionEffectBrush get_Effect();
    public void set_Effect(CompositionEffectBrush value);
    public CompositionShadow get_Shadow();
    public void set_Shadow(CompositionShadow value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.LinearEasingFunction : CompositionEasingFunction {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.MaxFloatFloatFunctionSpecification : object {
    [CompilerGeneratedAttribute]
private static MaxFloatFloatFunctionSpecification <Instance>k__BackingField;
    public static MaxFloatFloatFunctionSpecification Instance { get; }
    public int ParametersLength { get; }
    public string MethodName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    private static MaxFloatFloatFunctionSpecification();
    [CompilerGeneratedAttribute]
public static MaxFloatFloatFunctionSpecification get_Instance();
    public sealed virtual int get_ParametersLength();
    public sealed virtual string get_MethodName();
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    public sealed virtual object Evaluate(Object[] parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.MinFloatFloatFunctionSpecification : object {
    [CompilerGeneratedAttribute]
private static MinFloatFloatFunctionSpecification <Instance>k__BackingField;
    public static MinFloatFloatFunctionSpecification Instance { get; }
    public int ParametersLength { get; }
    public string MethodName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    private static MinFloatFloatFunctionSpecification();
    [CompilerGeneratedAttribute]
public static MinFloatFloatFunctionSpecification get_Instance();
    public sealed virtual int get_ParametersLength();
    public sealed virtual string get_MethodName();
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    public sealed virtual object Evaluate(Object[] parameters);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.NaturalMotionAnimation : CompositionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AnimationStopBehavior StopBehavior { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TimeSpan DelayTime { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public AnimationDelayBehavior DelayBehavior { get; public set; }
    public AnimationStopBehavior get_StopBehavior();
    public void set_StopBehavior(AnimationStopBehavior value);
    public TimeSpan get_DelayTime();
    public void set_DelayTime(TimeSpan value);
    public AnimationDelayBehavior get_DelayBehavior();
    public void set_DelayBehavior(AnimationDelayBehavior value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.PathKeyFrameAnimation : KeyFrameAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, CompositionPath path);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, CompositionPath path, CompositionEasingFunction easingFunction);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.PointLight : CompositionLight {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float QuadraticAttenuation { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Offset { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float LinearAttenuation { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Visual CoordinateSpace { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float ConstantAttenuation { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Color Color { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Intensity { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float MinAttenuationCutoff { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float MaxAttenuationCutoff { get; public set; }
    public float get_QuadraticAttenuation();
    public void set_QuadraticAttenuation(float value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public float get_LinearAttenuation();
    public void set_LinearAttenuation(float value);
    public Visual get_CoordinateSpace();
    public void set_CoordinateSpace(Visual value);
    public float get_ConstantAttenuation();
    public void set_ConstantAttenuation(float value);
    public Color get_Color();
    public void set_Color(Color value);
    public float get_Intensity();
    public void set_Intensity(float value);
    public float get_MinAttenuationCutoff();
    public void set_MinAttenuationCutoff(float value);
    public float get_MaxAttenuationCutoff();
    public void set_MaxAttenuationCutoff(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.PowerEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEasingFunctionMode Mode { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float Power { get; }
    public CompositionEasingFunctionMode get_Mode();
    public float get_Power();
}
public class Windows.UI.Composition.Private.RectangleClip : CompositionClip {
    [NullableContextAttribute("1")]
public RectangleClip(Compositor compositor);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.QuaternionKeyFrameAnimation : KeyFrameAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, Quaternion value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, Quaternion value, CompositionEasingFunction easingFunction);
}
public class Windows.UI.Composition.RectangleClip : CompositionClip {
    private float _left;
    private float _top;
    private float _right;
    private float _bottom;
    private Vector2 _topLeftRadius;
    private Vector2 _topRightRadius;
    private Vector2 _bottomRightRadius;
    private Vector2 _bottomLeftRadius;
    public float Left { get; public set; }
    public float Top { get; public set; }
    public float Right { get; public set; }
    public float Bottom { get; public set; }
    public Vector2 TopLeftRadius { get; public set; }
    public Vector2 TopRightRadius { get; public set; }
    public Vector2 BottomRightRadius { get; public set; }
    public Vector2 BottomLeftRadius { get; public set; }
    [NullableContextAttribute("1")]
internal RectangleClip(Compositor compositor);
    public float get_Left();
    public void set_Left(float value);
    public float get_Top();
    public void set_Top(float value);
    public float get_Right();
    public void set_Right(float value);
    public float get_Bottom();
    public void set_Bottom(float value);
    public Vector2 get_TopLeftRadius();
    public void set_TopLeftRadius(Vector2 value);
    public Vector2 get_TopRightRadius();
    public void set_TopRightRadius(Vector2 value);
    public Vector2 get_BottomRightRadius();
    public void set_BottomRightRadius(Vector2 value);
    public Vector2 get_BottomLeftRadius();
    public void set_BottomLeftRadius(Vector2 value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.RedirectVisual : ContainerVisual {
    private Visual _source;
    public Visual Source { get; public set; }
    [NullableContextAttribute("1")]
public RedirectVisual(Compositor compositor);
    public Visual get_Source();
    public void set_Source(Visual value);
    private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.RenderingDeviceReplacedEventArgs : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionGraphicsDevice GraphicsDevice { get; }
    public CompositionGraphicsDevice get_GraphicsDevice();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Windows.UI.Composition.ScalarKeyFrameAnimation : KeyFrameAnimation {
    private SortedDictionary`2<float, float> _keyFrames;
    private protected int KeyFrameCountCore { get; }
    internal ScalarKeyFrameAnimation(Compositor compositor);
    private protected virtual int get_KeyFrameCountCore();
    public void InsertKeyFrame(float normalizedProgressKey, float value);
    [NotImplementedAttribute]
public void InsertKeyFrame(float normalizedProgressKey, float value, CompositionEasingFunction easingFunction);
    [NullableContextAttribute("0")]
internal virtual object Start(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, CompositionObject compositionObject);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.ScalarNaturalMotionAnimation : NaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float InitialVelocity { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<float> InitialValue { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<float> FinalValue { get; public set; }
    public float get_InitialVelocity();
    public void set_InitialVelocity(float value);
    public Nullable`1<float> get_InitialValue();
    public void set_InitialValue(Nullable`1<float> value);
    public Nullable`1<float> get_FinalValue();
    public void set_FinalValue(Nullable`1<float> value);
}
public enum Windows.UI.Composition.Scenes.SceneAlphaMode : Enum {
    public int value__;
    public static SceneAlphaMode Opaque;
    public static SceneAlphaMode AlphaTest;
    public static SceneAlphaMode Blend;
}
public enum Windows.UI.Composition.Scenes.SceneAttributeSemantic : Enum {
    public int value__;
    public static SceneAttributeSemantic Index;
    public static SceneAttributeSemantic Vertex;
    public static SceneAttributeSemantic Normal;
    public static SceneAttributeSemantic TexCoord0;
    public static SceneAttributeSemantic TexCoord1;
    public static SceneAttributeSemantic Color;
    public static SceneAttributeSemantic Tangent;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneBoundingBox : SceneObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Center { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Extents { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Max { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Min { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Size { get; }
    public Vector3 get_Center();
    public Vector3 get_Extents();
    public Vector3 get_Max();
    public Vector3 get_Min();
    public Vector3 get_Size();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneComponent : SceneObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneComponentType ComponentType { get; }
    public SceneComponentType get_ComponentType();
}
[DefaultMemberAttribute("Item")]
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneComponentCollection : SceneObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 Size { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneComponent Item { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsReadOnly { get; }
    public UInt32 get_Size();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int IndexOf(SceneComponent item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Insert(int index, SceneComponent item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void RemoveAt(int index);
    public sealed virtual SceneComponent get_Item(int index);
    public sealed virtual void set_Item(int index, SceneComponent value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(SceneComponent item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(SceneComponent item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(SceneComponent[] array, int arrayIndex);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(SceneComponent item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<SceneComponent> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
public enum Windows.UI.Composition.Scenes.SceneComponentType : Enum {
    public int value__;
    public static SceneComponentType MeshRendererComponent;
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneMaterial : SceneObject {
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneMaterialInput : SceneObject {
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneMesh : SceneObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public DirectXPrimitiveTopology PrimitiveTopology { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneBoundingBox Bounds { get; }
    public DirectXPrimitiveTopology get_PrimitiveTopology();
    public void set_PrimitiveTopology(DirectXPrimitiveTopology value);
    public SceneBoundingBox get_Bounds();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void FillMeshAttribute(SceneAttributeSemantic semantic, DirectXPixelFormat format, MemoryBuffer memory);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SceneMesh Create(Compositor compositor);
}
[DefaultMemberAttribute("Item")]
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneMeshMaterialAttributeMap : SceneObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 Size { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneAttributeSemantic Item { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<string> Keys { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICollection`1<SceneAttributeSemantic> Values { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsReadOnly { get; }
    public UInt32 get_Size();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(string key, SceneAttributeSemantic value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool ContainsKey(string key);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(string key);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool TryGetValue(string key, SceneAttributeSemantic& value);
    public sealed virtual SceneAttributeSemantic get_Item(string key);
    public sealed virtual void set_Item(string key, SceneAttributeSemantic value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<SceneAttributeSemantic> get_Values();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(KeyValuePair`2<string, SceneAttributeSemantic> item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(KeyValuePair`2<string, SceneAttributeSemantic> item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(KeyValuePair`2<string, SceneAttributeSemantic> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, SceneAttributeSemantic>> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneMeshRendererComponent : SceneRendererComponent {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMesh Mesh { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMaterial Material { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMeshMaterialAttributeMap UVMappings { get; }
    public SceneMesh get_Mesh();
    public void set_Mesh(SceneMesh value);
    public SceneMaterial get_Material();
    public void set_Material(SceneMaterial value);
    public SceneMeshMaterialAttributeMap get_UVMappings();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SceneMeshRendererComponent Create(Compositor compositor);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneMetallicRoughnessMaterial : ScenePbrMaterial {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float RoughnessFactor { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMaterialInput MetallicRoughnessInput { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float MetallicFactor { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMaterialInput BaseColorInput { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector4 BaseColorFactor { get; public set; }
    public float get_RoughnessFactor();
    public void set_RoughnessFactor(float value);
    public SceneMaterialInput get_MetallicRoughnessInput();
    public void set_MetallicRoughnessInput(SceneMaterialInput value);
    public float get_MetallicFactor();
    public void set_MetallicFactor(float value);
    public SceneMaterialInput get_BaseColorInput();
    public void set_BaseColorInput(SceneMaterialInput value);
    public Vector4 get_BaseColorFactor();
    public void set_BaseColorFactor(Vector4 value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SceneMetallicRoughnessMaterial Create(Compositor compositor);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneModelTransform : CompositionTransform {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Translation { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Scale { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 RotationAxis { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float RotationAngleInDegrees { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float RotationAngle { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Quaternion Orientation { get; public set; }
    public Vector3 get_Translation();
    public void set_Translation(Vector3 value);
    public Vector3 get_Scale();
    public void set_Scale(Vector3 value);
    public Vector3 get_RotationAxis();
    public void set_RotationAxis(Vector3 value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public float get_RotationAngle();
    public void set_RotationAngle(float value);
    public Quaternion get_Orientation();
    public void set_Orientation(Quaternion value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneNode : SceneObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneNodeCollection Children { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneComponentCollection Components { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneNode Parent { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneModelTransform Transform { get; }
    public SceneNodeCollection get_Children();
    public SceneComponentCollection get_Components();
    public SceneNode get_Parent();
    public SceneModelTransform get_Transform();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneComponent FindFirstComponentOfType(SceneComponentType value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SceneNode Create(Compositor compositor);
}
[DefaultMemberAttribute("Item")]
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneNodeCollection : SceneObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public UInt32 Size { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneNode Item { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsReadOnly { get; }
    public UInt32 get_Size();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual int IndexOf(SceneNode item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Insert(int index, SceneNode item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void RemoveAt(int index);
    public sealed virtual SceneNode get_Item(int index);
    public sealed virtual void set_Item(int index, SceneNode value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Add(SceneNode item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void Clear();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Contains(SceneNode item);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual void CopyTo(SceneNode[] array, int arrayIndex);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual bool Remove(SceneNode item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<SceneNode> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneObject : CompositionObject {
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.ScenePbrMaterial : SceneMaterial {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float OcclusionStrength { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMaterialInput OcclusionInput { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float NormalScale { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMaterialInput NormalInput { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsDoubleSided { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneMaterialInput EmissiveInput { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 EmissiveFactor { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneAlphaMode AlphaMode { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float AlphaCutoff { get; public set; }
    public float get_OcclusionStrength();
    public void set_OcclusionStrength(float value);
    public SceneMaterialInput get_OcclusionInput();
    public void set_OcclusionInput(SceneMaterialInput value);
    public float get_NormalScale();
    public void set_NormalScale(float value);
    public SceneMaterialInput get_NormalInput();
    public void set_NormalInput(SceneMaterialInput value);
    public bool get_IsDoubleSided();
    public void set_IsDoubleSided(bool value);
    public SceneMaterialInput get_EmissiveInput();
    public void set_EmissiveInput(SceneMaterialInput value);
    public Vector3 get_EmissiveFactor();
    public void set_EmissiveFactor(Vector3 value);
    public SceneAlphaMode get_AlphaMode();
    public void set_AlphaMode(SceneAlphaMode value);
    public float get_AlphaCutoff();
    public void set_AlphaCutoff(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneRendererComponent : SceneComponent {
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneSurfaceMaterialInput : SceneMaterialInput {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneWrappingMode WrappingVMode { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneWrappingMode WrappingUMode { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ICompositionSurface Surface { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionBitmapInterpolationMode BitmapInterpolationMode { get; public set; }
    public SceneWrappingMode get_WrappingVMode();
    public void set_WrappingVMode(SceneWrappingMode value);
    public SceneWrappingMode get_WrappingUMode();
    public void set_WrappingUMode(SceneWrappingMode value);
    public ICompositionSurface get_Surface();
    public void set_Surface(ICompositionSurface value);
    public CompositionBitmapInterpolationMode get_BitmapInterpolationMode();
    public void set_BitmapInterpolationMode(CompositionBitmapInterpolationMode value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SceneSurfaceMaterialInput Create(Compositor compositor);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Scenes.SceneVisual : ContainerVisual {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SceneNode Root { get; public set; }
    public SceneNode get_Root();
    public void set_Root(SceneNode value);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static SceneVisual Create(Compositor compositor);
}
public enum Windows.UI.Composition.Scenes.SceneWrappingMode : Enum {
    public int value__;
    public static SceneWrappingMode ClampToEdge;
    public static SceneWrappingMode MirroredRepeat;
    public static SceneWrappingMode Repeat;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.ShapeVisual : ContainerVisual {
    private CompositionViewBox _viewBox;
    private CompositionShapeCollection _shapes;
    public CompositionViewBox ViewBox { get; public set; }
    [NullableAttribute("1")]
public CompositionShapeCollection Shapes { get; }
    [NullableContextAttribute("1")]
public ShapeVisual(Compositor compositor);
    public CompositionViewBox get_ViewBox();
    public void set_ViewBox(CompositionViewBox value);
    [NullableContextAttribute("1")]
public CompositionShapeCollection get_Shapes();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.SineEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionEasingFunctionMode Mode { get; }
    public CompositionEasingFunctionMode get_Mode();
}
internal class Windows.UI.Composition.SkiaCompositionSurface : object {
}
[NotImplementedAttribute]
public class Windows.UI.Composition.SpotLight : CompositionLight {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float QuadraticAttenuation { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Color OuterConeColor { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float OuterConeAngleInDegrees { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float OuterConeAngle { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Offset { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float LinearAttenuation { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Color InnerConeColor { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float InnerConeAngleInDegrees { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float InnerConeAngle { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 Direction { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Visual CoordinateSpace { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float ConstantAttenuation { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float OuterConeIntensity { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float InnerConeIntensity { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float MinAttenuationCutoff { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float MaxAttenuationCutoff { get; public set; }
    public float get_QuadraticAttenuation();
    public void set_QuadraticAttenuation(float value);
    public Color get_OuterConeColor();
    public void set_OuterConeColor(Color value);
    public float get_OuterConeAngleInDegrees();
    public void set_OuterConeAngleInDegrees(float value);
    public float get_OuterConeAngle();
    public void set_OuterConeAngle(float value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public float get_LinearAttenuation();
    public void set_LinearAttenuation(float value);
    public Color get_InnerConeColor();
    public void set_InnerConeColor(Color value);
    public float get_InnerConeAngleInDegrees();
    public void set_InnerConeAngleInDegrees(float value);
    public float get_InnerConeAngle();
    public void set_InnerConeAngle(float value);
    public Vector3 get_Direction();
    public void set_Direction(Vector3 value);
    public Visual get_CoordinateSpace();
    public void set_CoordinateSpace(Visual value);
    public float get_ConstantAttenuation();
    public void set_ConstantAttenuation(float value);
    public float get_OuterConeIntensity();
    public void set_OuterConeIntensity(float value);
    public float get_InnerConeIntensity();
    public void set_InnerConeIntensity(float value);
    public float get_MinAttenuationCutoff();
    public void set_MinAttenuationCutoff(float value);
    public float get_MaxAttenuationCutoff();
    public void set_MaxAttenuationCutoff(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.SpringScalarNaturalMotionAnimation : ScalarNaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TimeSpan Period { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float DampingRatio { get; public set; }
    public TimeSpan get_Period();
    public void set_Period(TimeSpan value);
    public float get_DampingRatio();
    public void set_DampingRatio(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.SpringVector2NaturalMotionAnimation : Vector2NaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TimeSpan Period { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float DampingRatio { get; public set; }
    public TimeSpan get_Period();
    public void set_Period(TimeSpan value);
    public float get_DampingRatio();
    public void set_DampingRatio(float value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.SpringVector3NaturalMotionAnimation : Vector3NaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public TimeSpan Period { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public float DampingRatio { get; public set; }
    public TimeSpan get_Period();
    public void set_Period(TimeSpan value);
    public float get_DampingRatio();
    public void set_DampingRatio(float value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.SpriteVisual : ContainerVisual {
    private CompositionBrush _brush;
    public CompositionBrush Brush { get; public set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionShadow Shadow { get; public set; }
    [NullableContextAttribute("1")]
public SpriteVisual(Compositor compositor);
    public CompositionBrush get_Brush();
    public void set_Brush(CompositionBrush value);
    private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
    [NullableContextAttribute("0")]
public CompositionShadow get_Shadow();
    [NullableContextAttribute("0")]
public void set_Shadow(CompositionShadow value);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.StepEasingFunction : CompositionEasingFunction {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int StepCount { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsInitialStepSingleFrame { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsFinalStepSingleFrame { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int InitialStep { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int FinalStep { get; public set; }
    public int get_StepCount();
    public void set_StepCount(int value);
    public bool get_IsInitialStepSingleFrame();
    public void set_IsInitialStepSingleFrame(bool value);
    public bool get_IsFinalStepSingleFrame();
    public void set_IsFinalStepSingleFrame(bool value);
    public int get_InitialStep();
    public void set_InitialStep(int value);
    public int get_FinalStep();
    public void set_FinalStep(int value);
}
internal static class Windows.UI.Composition.SubPropertyHelpers : object {
    [NullableContextAttribute("2")]
internal static T ValidateValue(object value);
    internal static Color UpdateColor(ReadOnlySpan`1<char> subPropertyName, Color existingValue, object propertyValue);
    internal static Matrix3x2 UpdateMatrix3x2(ReadOnlySpan`1<char> subPropertyName, Matrix3x2 existingValue, object propertyValue);
    internal static Matrix4x4 UpdateMatrix4x4(ReadOnlySpan`1<char> subPropertyName, Matrix4x4 existingValue, object propertyValue);
    internal static Quaternion UpdateQuaternion(ReadOnlySpan`1<char> subPropertyName, Quaternion existingValue, object propertyValue);
    internal static Vector2 UpdateVector2(ReadOnlySpan`1<char> subPropertyName, Vector2 existingValue, object propertyValue);
    internal static Vector3 UpdateVector3(ReadOnlySpan`1<char> subPropertyName, Vector3 existingValue, object propertyValue);
    internal static Vector4 UpdateVector4(ReadOnlySpan`1<char> subPropertyName, Vector4 existingValue, object propertyValue);
    [NullableContextAttribute("1")]
internal static object GetColor(string subPropertyName, Color existingValue);
    [NullableContextAttribute("1")]
internal static object GetMatrix3x2(string subPropertyName, Matrix3x2 existingValue);
    [NullableContextAttribute("1")]
internal static object GetMatrix4x4(string subPropertyName, Matrix4x4 existingValue);
    [NullableContextAttribute("1")]
internal static object GetQuaternion(string subPropertyName, Quaternion existingValue);
    [NullableContextAttribute("1")]
internal static object GetVector2(string subPropertyName, Vector2 existingValue);
    [NullableContextAttribute("1")]
internal static object GetVector3(string subPropertyName, Vector3 existingValue);
    [NullableContextAttribute("1")]
internal static object GetVector4(string subPropertyName, Vector4 existingValue);
    internal static void TryUpdateFromProperties(CompositionPropertySet properties, ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, object propertyValue);
    [NullableContextAttribute("1")]
internal static object TryGetFromProperties(CompositionPropertySet properties, string propertyName, string subPropertyName);
    [NullableContextAttribute("1")]
internal static object GetSubProperty(string subPropertyName, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.UnoCoreAnimation : object {
    private static double __millisecondsPerSecond;
    private static int _id;
    private CALayer _layer;
    private string _property;
    private string _key;
    private float _from;
    private float _to;
    private float _delayMilliseconds;
    private float _durationMilliseconds;
    private CAMediaTimingFunction _timingFunction;
    private Func`2<float, NSValue> _nsValueConversion;
    private bool _isDiscrete;
    private Action`1<CompletedInfo> _onCompleted;
    [NullableAttribute("2")]
private Action _prepare;
    [NullableAttribute("2")]
private Action _cleanup;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3<CAAnimation, float, float> _current;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
private ValueTuple`3<StopReason, Nullable`1<long>, Nullable`1<float>> _stop;
    public UnoCoreAnimation(CALayer layer, string property, float from, float to, float delayMilliseconds, float durationMilliseconds, CAMediaTimingFunction timingFunction, Func`2<float, NSValue> nsValueConversion, Action`1<CompletedInfo> onCompleted, bool isDiscrete, Action prepare, Action cleanup);
    public void Start();
    public void Pause(Nullable`1<long> pausedTime, Nullable`1<float> pausedValue);
    public void Resume();
    public void Cancel();
    private void StartAnimation(float from, float to, float delayMilliseconds, float durationMilliseconds);
    private void StopAnimation(StopReason reason, Nullable`1<long> time, Nullable`1<float> value);
    private EventHandler OnAnimationStarted(CAAnimation animation);
    private EventHandler`1<CAAnimationStateEventArgs> OnAnimationStopped(CAAnimation animation);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.Vector2FloatFloatFunctionSpecification : object {
    [CompilerGeneratedAttribute]
private static Vector2FloatFloatFunctionSpecification <Instance>k__BackingField;
    public static Vector2FloatFloatFunctionSpecification Instance { get; }
    public int ParametersLength { get; }
    public string MethodName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    private static Vector2FloatFloatFunctionSpecification();
    [CompilerGeneratedAttribute]
public static Vector2FloatFloatFunctionSpecification get_Instance();
    public sealed virtual int get_ParametersLength();
    public sealed virtual string get_MethodName();
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    public sealed virtual object Evaluate(Object[] parameters);
}
public class Windows.UI.Composition.Vector2KeyFrameAnimation : KeyFrameAnimation {
    [NullableAttribute("1")]
private SortedDictionary`2<float, Vector2> _keyFrames;
    private protected int KeyFrameCountCore { get; }
    [NullableContextAttribute("1")]
internal Vector2KeyFrameAnimation(Compositor compositor);
    private protected virtual int get_KeyFrameCountCore();
    public void InsertKeyFrame(float normalizedProgressKey, Vector2 value);
    internal virtual object Start(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, CompositionObject compositionObject);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, Vector2 value, CompositionEasingFunction easingFunction);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Vector2NaturalMotionAnimation : NaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector2 InitialVelocity { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<Vector2> InitialValue { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<Vector2> FinalValue { get; public set; }
    public Vector2 get_InitialVelocity();
    public void set_InitialVelocity(Vector2 value);
    public Nullable`1<Vector2> get_InitialValue();
    public void set_InitialValue(Nullable`1<Vector2> value);
    public Nullable`1<Vector2> get_FinalValue();
    public void set_FinalValue(Nullable`1<Vector2> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Windows.UI.Composition.Vector3FloatFloatFloatFunctionSpecification : object {
    [CompilerGeneratedAttribute]
private static Vector3FloatFloatFloatFunctionSpecification <Instance>k__BackingField;
    public static Vector3FloatFloatFloatFunctionSpecification Instance { get; }
    public int ParametersLength { get; }
    public string MethodName { get; }
    [NullableAttribute("2")]
public string ClassName { get; }
    private static Vector3FloatFloatFloatFunctionSpecification();
    [CompilerGeneratedAttribute]
public static Vector3FloatFloatFloatFunctionSpecification get_Instance();
    public sealed virtual int get_ParametersLength();
    public sealed virtual string get_MethodName();
    [NullableContextAttribute("2")]
public sealed virtual string get_ClassName();
    public sealed virtual object Evaluate(Object[] parameters);
}
public class Windows.UI.Composition.Vector3KeyFrameAnimation : KeyFrameAnimation {
    [NullableAttribute("1")]
private SortedDictionary`2<float, Vector3> _keyFrames;
    private protected int KeyFrameCountCore { get; }
    [NullableContextAttribute("1")]
internal Vector3KeyFrameAnimation(Compositor compositor);
    private protected virtual int get_KeyFrameCountCore();
    public void InsertKeyFrame(float normalizedProgressKey, Vector3 value);
    internal virtual object Start(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, CompositionObject compositionObject);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, Vector3 value, CompositionEasingFunction easingFunction);
}
[NotImplementedAttribute]
public class Windows.UI.Composition.Vector3NaturalMotionAnimation : NaturalMotionAnimation {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 InitialVelocity { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<Vector3> InitialValue { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Nullable`1<Vector3> FinalValue { get; public set; }
    public Vector3 get_InitialVelocity();
    public void set_InitialVelocity(Vector3 value);
    public Nullable`1<Vector3> get_InitialValue();
    public void set_InitialValue(Nullable`1<Vector3> value);
    public Nullable`1<Vector3> get_FinalValue();
    public void set_FinalValue(Nullable`1<Vector3> value);
}
public class Windows.UI.Composition.Vector4KeyFrameAnimation : KeyFrameAnimation {
    [NullableAttribute("1")]
private SortedDictionary`2<float, Vector4> _keyFrames;
    private protected int KeyFrameCountCore { get; }
    [NullableContextAttribute("1")]
internal Vector4KeyFrameAnimation(Compositor compositor);
    private protected virtual int get_KeyFrameCountCore();
    public void InsertKeyFrame(float normalizedProgressKey, Vector4 value);
    internal virtual object Start(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, CompositionObject compositionObject);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void InsertKeyFrame(float normalizedProgressKey, Vector4 value, CompositionEasingFunction easingFunction);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Windows.UI.Composition.Visual : CompositionObject {
    private Vector2 _size;
    private Vector3 _offset;
    private Vector3 _scale;
    private Vector3 _centerPoint;
    private Quaternion _orientation;
    private float _rotationAngle;
    private Vector3 _rotationAxis;
    private Matrix4x4 _transformMatrix;
    private bool _isVisible;
    private float _opacity;
    private CompositionCompositeMode _compositeMode;
    private ICompositionTarget _compositionTarget;
    private ContainerVisual _parent;
    [CompilerGeneratedAttribute]
private VisualInteractionSource <VisualInteractionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTranslationEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NativeOwner>k__BackingField;
    internal VisualInteractionSource VisualInteractionSource { get; internal set; }
    internal bool IsTranslationEnabled { get; internal set; }
    public Matrix4x4 TransformMatrix { get; public set; }
    public Vector3 Offset { get; public set; }
    public bool IsVisible { get; public set; }
    public CompositionCompositeMode CompositeMode { get; public set; }
    public Vector3 CenterPoint { get; public set; }
    public Vector3 Scale { get; public set; }
    public Quaternion Orientation { get; public set; }
    public float RotationAngleInDegrees { get; public set; }
    public float RotationAngle { get; public set; }
    public Vector2 Size { get; public set; }
    public float Opacity { get; public set; }
    public Vector3 RotationAxis { get; public set; }
    public ContainerVisual Parent { get; public set; }
    internal ICompositionTarget CompositionTarget { get; internal set; }
    internal object NativeOwner { get; internal set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionClip Clip { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionBorderMode BorderMode { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public CompositionBackfaceVisibility BackfaceVisibility { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector2 AnchorPoint { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector2 RelativeSizeAdjustment { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Vector3 RelativeOffsetAdjustment { get; public set; }
    [NullableAttribute("0")]
[NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Visual ParentForTransform { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsHitTestVisible { get; public set; }
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public bool IsPixelSnappingEnabled { get; public set; }
    [NullableContextAttribute("1")]
internal Visual(Compositor compositor);
    [CompilerGeneratedAttribute]
internal VisualInteractionSource get_VisualInteractionSource();
    [CompilerGeneratedAttribute]
internal void set_VisualInteractionSource(VisualInteractionSource value);
    [CompilerGeneratedAttribute]
internal bool get_IsTranslationEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsTranslationEnabled(bool value);
    public sealed virtual Matrix4x4 get_TransformMatrix();
    public void set_TransformMatrix(Matrix4x4 value);
    public Vector3 get_Offset();
    public void set_Offset(Vector3 value);
    public bool get_IsVisible();
    public void set_IsVisible(bool value);
    public CompositionCompositeMode get_CompositeMode();
    public void set_CompositeMode(CompositionCompositeMode value);
    public sealed virtual Vector3 get_CenterPoint();
    public void set_CenterPoint(Vector3 value);
    public sealed virtual Vector3 get_Scale();
    public void set_Scale(Vector3 value);
    public sealed virtual Quaternion get_Orientation();
    public void set_Orientation(Quaternion value);
    public float get_RotationAngleInDegrees();
    public void set_RotationAngleInDegrees(float value);
    public sealed virtual float get_RotationAngle();
    public void set_RotationAngle(float value);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    public float get_Opacity();
    public void set_Opacity(float value);
    public sealed virtual Vector3 get_RotationAxis();
    public void set_RotationAxis(Vector3 value);
    public ContainerVisual get_Parent();
    public void set_Parent(ContainerVisual value);
    internal ICompositionTarget get_CompositionTarget();
    internal void set_CompositionTarget(ICompositionTarget value);
    private protected virtual void OnPropertyChangedCore(string propertyName, bool isSubPropertyChange);
    [NullableContextAttribute("1")]
internal virtual object GetAnimatableProperty(string propertyName, string subPropertyName);
    [NullableContextAttribute("0")]
private protected virtual void SetAnimatableProperty(ReadOnlySpan`1<char> propertyName, ReadOnlySpan`1<char> subPropertyName, object propertyValue);
    [CompilerGeneratedAttribute]
internal object get_NativeOwner();
    [CompilerGeneratedAttribute]
internal void set_NativeOwner(object value);
    [NullableContextAttribute("0")]
public CompositionClip get_Clip();
    [NullableContextAttribute("0")]
public void set_Clip(CompositionClip value);
    public CompositionBorderMode get_BorderMode();
    public void set_BorderMode(CompositionBorderMode value);
    public CompositionBackfaceVisibility get_BackfaceVisibility();
    public void set_BackfaceVisibility(CompositionBackfaceVisibility value);
    public Vector2 get_AnchorPoint();
    public void set_AnchorPoint(Vector2 value);
    public Vector2 get_RelativeSizeAdjustment();
    public void set_RelativeSizeAdjustment(Vector2 value);
    public Vector3 get_RelativeOffsetAdjustment();
    public void set_RelativeOffsetAdjustment(Vector3 value);
    [NullableContextAttribute("0")]
public Visual get_ParentForTransform();
    [NullableContextAttribute("0")]
public void set_ParentForTransform(Visual value);
    public bool get_IsHitTestVisible();
    public void set_IsHitTestVisible(bool value);
    public bool get_IsPixelSnappingEnabled();
    public void set_IsPixelSnappingEnabled(bool value);
}
public class Windows.UI.Composition.VisualCollection : CompositionObject {
    private ContainerVisual _owner;
    private List`1<Visual> _visuals;
    [CompilerGeneratedAttribute]
private EventHandler CollectionChanged;
    public int Count { get; }
    internal List`1<Visual> InnerList { get; }
    internal VisualCollection(Compositor compositor, ContainerVisual owner);
    [CompilerGeneratedAttribute]
internal void add_CollectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CollectionChanged(EventHandler value);
    public int get_Count();
    internal List`1<Visual> get_InnerList();
    public void InsertAbove(Visual newChild, Visual sibling);
    private void InsertAbovePartial(Visual newChild, Visual sibling);
    public void InsertAtBottom(Visual newChild);
    private void InsertAtBottomPartial(Visual newChild);
    public void InsertAtTop(Visual newChild);
    private void InsertAtTopPartial(Visual newChild);
    public void InsertBelow(Visual newChild, Visual sibling);
    private void InsertBelowPartial(Visual newChild, Visual sibling);
    public void Remove(Visual child);
    private void RemovePartial(Visual child);
    public void RemoveAll();
    private void RemoveAllPartial();
    public sealed virtual IEnumerator`1<Visual> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NotImplementedAttribute]
public class Windows.UI.Composition.VisualUnorderedCollection : CompositionObject {
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public int Count { get; }
    public int get_Count();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Add(Visual newVisual);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void Remove(Visual visual);
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public void RemoveAll();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public sealed virtual IEnumerator`1<Visual> GetEnumerator();
    [NotImplementedAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private sealed virtual override IEnumerator global::System.Collections.IEnumerable.GetEnumerator();
}
