[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.PooledObjects.ObjectPool`1 : object {
    [NullableAttribute("2")]
private T _firstItem;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Element[] _items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Factory<T> _factory;
    internal ObjectPool`1(Factory<T> factory);
    internal ObjectPool`1(Factory<T> factory, int size);
    internal ObjectPool`1(Func`2<ObjectPool`1<T>, T> factory, int size);
    private T CreateInstance();
    internal T Allocate();
    private T AllocateSlow();
    internal void Free(T obj);
    private void FreeSlow(T obj);
    [ConditionalAttribute("DEBUG")]
internal void ForgetTrackedObject(T old, T replacement);
    [ConditionalAttribute("DEBUG")]
private void Validate(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.PooledObjects.PooledStringBuilder : object {
    public StringBuilder Builder;
    private ObjectPool`1<PooledStringBuilder> _pool;
    private static ObjectPool`1<PooledStringBuilder> s_poolInstance;
    public int Length { get; }
    private PooledStringBuilder(ObjectPool`1<PooledStringBuilder> pool);
    private static PooledStringBuilder();
    public int get_Length();
    public void Free();
    [ObsoleteAttribute("Consider calling ToStringAndFree instead.")]
public string ToString();
    public string ToStringAndFree();
    public string ToStringAndFree(int startIndex, int length);
    public static ObjectPool`1<PooledStringBuilder> CreatePool(int size);
    public static PooledStringBuilder GetInstance();
    public static StringBuilder op_Implicit(PooledStringBuilder obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.SymbolExtensions : object {
    private static SymbolDisplayFormat s_format;
    private static SymbolExtensions();
    [ExtensionAttribute]
public static IDisposable AddToIndentedStringBuilder(INamedTypeSymbol namedTypeSymbol, IIndentedStringBuilder builder, Action`1<IIndentedStringBuilder> beforeClassHeaderAction, string afterClassHeader);
    [ExtensionAttribute]
public static string GetDeclarationHeaderFromNamedTypeSymbol(INamedTypeSymbol namedTypeSymbol, string afterClassHeader);
    [ExtensionAttribute]
public static IEnumerable`1<IPropertySymbol> GetProperties(INamedTypeSymbol symbol);
    [ExtensionAttribute]
public static IEnumerable`1<IPropertySymbol> GetPropertiesWithName(INamedTypeSymbol symbol, string name);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.SymbolExtensions/<GetAllMembersWithName>d__5")]
[ExtensionAttribute]
public static IEnumerable`1<ISymbol> GetAllMembersWithName(ITypeSymbol symbol, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Is(INamedTypeSymbol symbol, INamedTypeSymbol other);
    [ExtensionAttribute]
public static bool IsLocallyPublic(ISymbol symbol, IModuleSymbol currentSymbol);
    [ExtensionAttribute]
public static IEnumerable`1<IMethodSymbol> GetMethodsWithName(ITypeSymbol resolvedType, string name);
    [ExtensionAttribute]
public static IMethodSymbol GetFirstMethodWithName(ITypeSymbol resolvedType, string name, bool includeBaseTypes);
    [ExtensionAttribute]
public static IEnumerable`1<IFieldSymbol> GetFields(ITypeSymbol resolvedType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static AttributeData FindAttribute(ISymbol property, INamedTypeSymbol attributeClassSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static AttributeData FindAttributeFlattened(ISymbol property, INamedTypeSymbol attributeClassSymbol);
    [ExtensionAttribute]
public static ITypeSymbol TryGetPropertyOrFieldType(ITypeSymbol type, string propertyOrFieldName);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.SymbolExtensions/<GetAllInterfaces>d__14")]
[ExtensionAttribute]
public static IEnumerable`1<INamedTypeSymbol> GetAllInterfaces(ITypeSymbol symbol);
    [ExtensionAttribute]
public static ISymbol GetMemberIncludingBaseTypes(INamespaceOrTypeSymbol symbol, string memberName);
    [ExtensionAttribute]
public static ISymbol GetMemberIncludingBaseTypes(INamespaceOrTypeSymbol symbol, TArg arg, Func`3<ISymbol, TArg, bool> predicate);
    [ExtensionAttribute]
public static bool IsNullable(ITypeSymbol type);
    [ExtensionAttribute]
public static bool IsNullable(ITypeSymbol type, ITypeSymbol& nullableType);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.SymbolExtensions/<GetNamespaceTypes>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<INamedTypeSymbol> GetNamespaceTypes(INamespaceSymbol sym);
    [ExtensionAttribute]
public static string GetFullMetadataNameForFileName(INamedTypeSymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static string GetFullName(ITypeSymbol type);
    [ExtensionAttribute]
public static string GetFullMetadataName(ITypeSymbol symbol, Nullable`1<char> forRegisterAttributeDotReplacement);
    private static bool IsRootNamespace(ISymbol s);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.SymbolExtensions/<GetAllAttributes>d__24")]
[ExtensionAttribute]
public static IEnumerable`1<AttributeData> GetAllAttributes(ISymbol symbol);
    [IteratorStateMachineAttribute("Microsoft.CodeAnalysis.SymbolExtensions/<GetAllProperties>d__25")]
[ExtensionAttribute]
public static IEnumerable`1<IPropertySymbol> GetAllProperties(INamedTypeSymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IPropertySymbol GetPropertyWithName(INamedTypeSymbol symbol, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IFieldSymbol GetFieldWithName(INamedTypeSymbol symbol, string name);
    [ExtensionAttribute]
public static string GetFullyQualifiedTypeIncludingGlobal(ITypeSymbol type);
    [ExtensionAttribute]
public static string GetFullyQualifiedTypeExcludingGlobal(ITypeSymbol type);
    [ExtensionAttribute]
private static string GetFullyQualifiedType(ITypeSymbol type, bool includeGlobalNamespace);
    [ExtensionAttribute]
public static Nullable`1<TypedConstant> FindNamedArg(AttributeData attribute, string argName);
    [ExtensionAttribute]
public static T GetNamedValue(AttributeData attribute, string argName);
    [ExtensionAttribute]
public static INamedTypeSymbol FindDependencyPropertyType(ISymbol propertyOrSetter);
    [CompilerGeneratedAttribute]
internal static StringBuilder <GetFullMetadataNameForFileName>g__BuildFrom|20_0(ISymbol symbol, StringBuilder builder);
}
[DebuggerDisplayAttribute("{DebugDisplay,nq}")]
public class Microsoft.UI.Xaml.GridLength : ValueType {
    private static Char[] _commaArray;
    public GridUnitType GridUnitType;
    public double Value;
    public static GridLength Auto { get; }
    public bool IsAbsolute { get; }
    public bool IsAuto { get; }
    public bool IsStar { get; }
    private string DebugDisplay { get; }
    public GridLength(double pixels);
    public GridLength(double value, GridUnitType gridUnitType);
    private static GridLength();
    public static GridLength get_Auto();
    public bool get_IsAbsolute();
    public bool get_IsAuto();
    public bool get_IsStar();
    public static GridLength op_Implicit(string value);
    public static GridLength op_Implicit(double value);
    public static GridLength FromString(string s);
    public static GridLength[] ParseGridLength(string s);
    public sealed virtual bool Equals(GridLength other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(GridLength gl1, GridLength gl2);
    public static bool op_Inequality(GridLength gl1, GridLength gl2);
    private string get_DebugDisplay();
    [IsReadOnlyAttribute]
internal string ToDisplayString();
    public virtual string ToString();
}
public class Microsoft.UI.Xaml.GridLengthHelper : object {
    [CompilerGeneratedAttribute]
private static GridLength <Auto>k__BackingField;
    [CompilerGeneratedAttribute]
private static GridLength <OneStar>k__BackingField;
    public static GridLength Auto { get; }
    internal static GridLength OneStar { get; }
    private static GridLengthHelper();
    [CompilerGeneratedAttribute]
public static GridLength get_Auto();
    [CompilerGeneratedAttribute]
internal static GridLength get_OneStar();
    public static GridLength FromPixels(double pixels);
    public static GridLength FromValueAndType(double value, GridUnitType type);
    public static bool GetIsAbsolute(GridLength target);
    public static bool GetIsAuto(GridLength target);
    public static bool GetIsStar(GridLength target);
    public static bool Equals(GridLength target, GridLength value);
}
public enum Microsoft.UI.Xaml.GridUnitType : Enum {
    public int value__;
    public static GridUnitType Auto;
    public static GridUnitType Pixel;
    public static GridUnitType Star;
}
public enum Microsoft.UI.Xaml.Media.FillRule : Enum {
    public int value__;
    public static FillRule EvenOdd;
    public static FillRule Nonzero;
}
public enum Microsoft.UI.Xaml.Media.SweepDirection : Enum {
    public int value__;
    public static SweepDirection Counterclockwise;
    public static SweepDirection Clockwise;
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class Uno.Actions : object {
    public static Action CreateOnce(Action action);
}
internal class Uno.CachedTuple : object {
    public static CachedTuple`2<T1, T2> Create(T1 item1, T2 item2);
    public static CachedTuple`3<T1, T2, T3> Create(T1 item1, T2 item2, T3 item3);
    public static CachedTuple`4<T1, T2, T3, T4> Create(T1 item1, T2 item2, T3 item3, T4 item4);
}
internal class Uno.CachedTuple`2 : object {
    private int _cachedHashCode;
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    public static IEqualityComparer`1<CachedTuple`2<T1, T2>> Comparer;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public CachedTuple`2(T1 item1, T2 item2);
    private static CachedTuple`2();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static bool InternalEquals(CachedTuple`2<T1, T2> t1, CachedTuple`2<T1, T2> t2);
}
internal class Uno.CachedTuple`3 : object {
    private int _cachedHashCode;
    public static IEqualityComparer`1<CachedTuple`3<T1, T2, T3>> Comparer;
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public CachedTuple`3(T1 item1, T2 item2, T3 item3);
    private static CachedTuple`3();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static bool InternalEquals(CachedTuple`3<T1, T2, T3> t1, CachedTuple`3<T1, T2, T3> t2);
}
internal class Uno.CachedTuple`4 : object {
    private int _cachedHashCode;
    public static IEqualityComparer`1<CachedTuple`4<T1, T2, T3, T4>> Comparer;
    [CompilerGeneratedAttribute]
private T1 <Item1>k__BackingField;
    [CompilerGeneratedAttribute]
private T2 <Item2>k__BackingField;
    [CompilerGeneratedAttribute]
private T3 <Item3>k__BackingField;
    [CompilerGeneratedAttribute]
private T4 <Item4>k__BackingField;
    public T1 Item1 { get; }
    public T2 Item2 { get; }
    public T3 Item3 { get; }
    public T4 Item4 { get; }
    public CachedTuple`4(T1 item1, T2 item2, T3 item3, T4 item4);
    private static CachedTuple`4();
    [CompilerGeneratedAttribute]
public T1 get_Item1();
    [CompilerGeneratedAttribute]
public T2 get_Item2();
    [CompilerGeneratedAttribute]
public T3 get_Item3();
    [CompilerGeneratedAttribute]
public T4 get_Item4();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private static bool InternalEquals(CachedTuple`4<T1, T2, T3, T4> t1, CachedTuple`4<T1, T2, T3, T4> t2);
}
[ExtensionAttribute]
internal static class Uno.Collections.MemoryExtensions : object {
    [ExtensionAttribute]
public static int Count(Span`1<T> span, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool Any(Span`1<T> span, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TValue> ToDictionary(Span`1<TIn> span, Func`2<TIn, TKey> keySelector, Func`2<TIn, TValue> valueSelector);
    [ExtensionAttribute]
public static double Sum(Span`1<double> span);
    [ExtensionAttribute]
public static double Sum(Span`1<TIn> span, Func`2<TIn, double> selector);
}
internal class Uno.Collections.UnsafeWeakAttachedDictionary`2 : object {
    private ConditionalWeakTable`2<TOwner, Dictionary`2<TKey, object>> _instances;
    public TValue GetValue(TOwner owner, TKey key, Func`1<TValue> defaultSelector);
    public void SetValue(TOwner owner, TKey key, TValue value);
    private Dictionary`2<TKey, object> GetValuesForOwner(TOwner owner);
}
internal class Uno.Collections.WeakAttachedDictionary`2 : object {
    private ConditionalWeakTable`2<TOwner, ConcurrentDictionary`2<TKey, object>> _instances;
    private static ConcurrentDictionary`2<TKey, object> CreateDictionary(TOwner key);
    public TValue GetValue(TOwner owner, TKey key, Func`1<TValue> defaultSelector);
    public TValue GetValue(TOwner owner, TKey key, Func`2<TKey, TValue> defaultSelector);
    public void SetValue(TOwner owner, TKey key, TValue value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Core.Comparison.FastTypeComparer : object {
    [CompilerGeneratedAttribute]
private static FastTypeComparer <Default>k__BackingField;
    public static FastTypeComparer Default { get; }
    private static FastTypeComparer();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Type x, Type y);
    public sealed virtual int GetHashCode(Type obj);
    [CompilerGeneratedAttribute]
public static FastTypeComparer get_Default();
}
internal class Uno.DisposableAction : object {
    [CompilerGeneratedAttribute]
private Action <Action>k__BackingField;
    public Action Action { get; private set; }
    public DisposableAction(Action action);
    [CompilerGeneratedAttribute]
public Action get_Action();
    [CompilerGeneratedAttribute]
private void set_Action(Action value);
    public sealed virtual void Dispose();
}
internal class Uno.Disposables.AnonymousDisposable : object {
    [NullableAttribute("2")]
private Action modreq(System.Runtime.CompilerServices.IsVolatile) _dispose;
    public bool IsDisposed { get; }
    [NullableContextAttribute("1")]
public AnonymousDisposable(Action dispose);
    public sealed virtual bool get_IsDisposed();
    public sealed virtual void Dispose();
}
internal class Uno.Disposables.CancellationDisposable : object {
    private CancellationTokenSource _cts;
    public CancellationToken Token { get; }
    public bool IsDisposed { get; }
    public CancellationDisposable(CancellationTokenSource cts);
    public CancellationToken get_Token();
    public sealed virtual void Dispose();
    public sealed virtual bool get_IsDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Disposables.CompositeDisposable : object {
    private object _gate;
    private bool _disposed;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<IDisposable> _disposables;
    private int _count;
    private static int SHRINK_THRESHOLD;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsDisposed { get; }
    public CompositeDisposable(int capacity);
    public CompositeDisposable(IDisposable[] disposables);
    public CompositeDisposable(IEnumerable`1<IDisposable> disposables);
    public sealed virtual int get_Count();
    public sealed virtual void Add(IDisposable item);
    public sealed virtual bool Remove(IDisposable item);
    public sealed virtual void Dispose();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IDisposable item);
    public sealed virtual void CopyTo(IDisposable[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<IDisposable> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool get_IsDisposed();
}
[ExtensionAttribute]
internal static class Uno.Disposables.CompositeDisposableExtensions : object {
    [ExtensionAttribute]
public static CompositeDisposable Add(CompositeDisposable disposable, Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Uno.Disposables.ConditionalDisposable : object {
    private static ConditionalWeakTable`2<object, List`1<IDisposable>> _registrations;
    private bool _disposed;
    [NullableAttribute("2")]
private WeakReference _conditionSource;
    private List`1<IDisposable> _list;
    public ConditionalDisposable(object target, WeakReference conditionSource);
    private static ConditionalDisposable();
    private static List`1<IDisposable> CreateList(object key);
    public sealed virtual void Dispose();
    protected abstract virtual void TargetFinalized();
    private void Dispose(bool disposing);
    protected virtual override void Finalize();
}
internal class Uno.Disposables.DefaultDisposable : object {
    public static DefaultDisposable Instance;
    private static DefaultDisposable();
    public sealed virtual void Dispose();
}
internal static class Uno.Disposables.Disposable : object {
    public static IDisposable Empty { get; }
    public static IDisposable get_Empty();
    public static IDisposable Create(Action dispose);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Uno.Disposables.DisposableExtensions : object {
    [ExtensionAttribute]
public static T DisposeWith(T disposable, ICollection`1<IDisposable> composite);
    [ExtensionAttribute]
public static T DisposeWith(T disposable, SerialDisposable serialDisposable);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void SafeDispose(IDisposable disposable);
    [ExtensionAttribute]
public static bool TryDispose(object maybeDisposableObject);
}
internal class Uno.Disposables.DisposableStruct`1 : ValueType {
    [CompilerGeneratedAttribute]
private Action`1<T> <disposingAction>P;
    [CompilerGeneratedAttribute]
private T <argToAction>P;
    private bool _disposed;
    public DisposableStruct`1(Action`1<T> disposingAction, T argToAction);
    public sealed virtual void Dispose();
}
internal interface Uno.Disposables.ICancelable {
    public bool IsDisposed { get; }
    public abstract virtual bool get_IsDisposed();
}
internal class Uno.Disposables.RefCountDisposable : object {
    private bool _throwWhenDisposed;
    [NullableAttribute("2")]
private IDisposable _disposable;
    private int _count;
    public bool IsDisposed { get; }
    [NullableContextAttribute("1")]
public RefCountDisposable(IDisposable disposable);
    [NullableContextAttribute("1")]
public RefCountDisposable(IDisposable disposable, bool throwWhenDisposed);
    public sealed virtual bool get_IsDisposed();
    [NullableContextAttribute("1")]
public IDisposable GetDisposable();
    public sealed virtual void Dispose();
    private void Release();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Uno.Disposables.SerialDisposable : object {
    [NullableAttribute("1")]
private object _gate;
    private IDisposable _current;
    private bool _disposed;
    public bool IsDisposed { get; }
    public IDisposable Disposable { get; public set; }
    public sealed virtual bool get_IsDisposed();
    public IDisposable get_Disposable();
    public void set_Disposable(IDisposable value);
    public sealed virtual void Dispose();
}
internal static class Uno.Equality.ByteSequenceComparer : object {
    internal static bool Equals(ImmutableArray`1<byte> x, ImmutableArray`1<byte> y);
    internal static int GetHashCode(ImmutableArray`1<byte> x);
}
internal static class Uno.Equality.Hash : object {
    internal static int FnvOffsetBias;
    internal static int FnvPrime;
    internal static int GetFNVHashCode(ImmutableArray`1<byte> data);
}
internal interface Uno.Equality.IKeyEquatable {
    public abstract virtual int GetKeyHashCode();
    public abstract virtual bool KeyEquals(object other);
}
internal interface Uno.Equality.IKeyEquatable`1 {
    public abstract virtual int GetKeyHashCode();
    public abstract virtual bool KeyEquals(T other);
}
internal class Uno.Equality.KeyEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static IEqualityComparer <Default>k__BackingField;
    public static IEqualityComparer Default { get; }
    private static KeyEqualityComparer();
    [CompilerGeneratedAttribute]
public static IEqualityComparer get_Default();
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
    private IKeyEquatable GetKeyEquatable(object o);
}
[ExtensionAttribute]
internal static class Uno.Extensions.AssemblyExtensions : object {
    [ExtensionAttribute]
public static Version GetVersionNumber(Assembly assembly);
    private static Regex VersionMatch();
}
internal class Uno.Extensions.BindableGroup`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<TItem> <Items>k__BackingField;
    public TKey Key { get; private set; }
    public IList`1<TItem> Items { get; private set; }
    public bool HasItems { get; }
    public BindableGroup`2(TKey key);
    public BindableGroup`2(TKey key, IList`1<TItem> items);
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public IList`1<TItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(IList`1<TItem> value);
    public sealed virtual bool get_HasItems();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
internal static class Uno.Extensions.CollectionExtensions : object {
    [ExtensionAttribute]
public static void AddRange(ICollection`1<T> collection, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static int Remove(ICollection`1<T> collection, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool AddDistinct(ICollection`1<T> collection, T item);
    [ExtensionAttribute]
public static TResult[] SelectToArray(TSource[] source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static TResult[] SelectToArray(IReadOnlyList`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static TResult[] SelectToArray(ICollection`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static List`1<TResult> SelectToList(ICollection`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static List`1<TResult> SelectToList(IList`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static List`1<TResult> SelectToList(List`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static List`1<TResult> SelectToList(List`1<TSource> source, Func`3<TSource, int, TResult> selector);
    [ExtensionAttribute]
public static List`1<TSource> WhereToList(List`1<TSource> source, Func`2<TSource, bool> selector);
}
[ExtensionAttribute]
internal static class Uno.Extensions.DateTimeExtensions : object {
    private static int DaysPerYear;
    private static int DaysPer4Years;
    private static int DaysPer100Years;
    private static int DaysPer400Years;
    private static int DaysTo1970;
    private static long UnixEpochTicks;
    private static long UnixEpochMilliseconds;
    [ExtensionAttribute]
public static long ToUnixTimeMilliseconds(DateTime instance);
}
[ExtensionAttribute]
internal static class Uno.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue FindOrCreate(IDictionary`2<TKey, TValue> items, TKey key, Func`1<TValue> factory);
    [ExtensionAttribute]
public static TValue UnoGetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue UnoGetValueOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue defaultValue);
    [ExtensionAttribute]
public static IEnumerable`1<TKey> RemoveKeys(IDictionary`2<TKey, TValue> items, IEnumerable`1<TKey> range);
    [ExtensionAttribute]
public static void Merge(IDictionary`2<TKey, TValue> dictionnary, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
}
[ExtensionAttribute]
internal static class Uno.Extensions.EnumerableExtensions : object {
    private static Char[] _allowedGroupNames;
    private static EnumerableExtensions();
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items, Action`1<KeyValuePair`2<int, T>> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items, Action`2<int, T> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items, Action`1<T> action);
    [ExtensionAttribute]
public static bool None(IEnumerable`1<T> items, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool None(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool Empty(IEnumerable`1<T> items);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Concat>d__7`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> items, T item);
    [ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> source, T[] items);
    [ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> source, IEqualityComparer`1<T> equalityComparer, T[] items);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item, Func`3<T, T, bool> predicate);
    [ExtensionAttribute]
public static TResult SingleOrDefault(IEnumerable`1<T> items, Func`2<T, TResult> selector);
    [ExtensionAttribute]
public static T MaxOrDefault(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static ValueTuple`2<TSource, TComparable> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TComparable> selector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Range(IEnumerable`1<T> collection, int start, int before, int after, bool fixedCount);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Do>d__17`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Do(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> Trim(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static IEnumerable`1<T> Trim(IEnumerable`1<Nullable`1<T>> items);
    [ExtensionAttribute]
public static IEnumerable`1<T> Safe(IEnumerable`1<T> items);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Flatten>d__21`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Flatten(IEnumerable`1<T> enumerable, Func`2<T, IEnumerable`1<T>> predicate);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Flatten>d__22`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Flatten(T item, Func`2<T, IEnumerable`1<T>> predicate);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Flatten>d__23`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Flatten(T item, Func`2<T, T> predicate);
    [ExtensionAttribute]
public static bool AllTrue(IEnumerable`1<bool> source);
    public static TResult MaxOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, TResult defaultValue);
    [ExtensionAttribute]
public static Dictionary`2<TKey, IEnumerable`1<TValue>> ToDictionary(IEnumerable`1<IGrouping`2<TKey, TValue>> groups);
    [ExtensionAttribute]
public static Dictionary`2<TKey, IEnumerable`1<TValue>> ToDictionary(IEnumerable`1<IGrouping`2<TKey, TValue>> groups, IEqualityComparer`1<TKey> equalityComparer);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<SelectManyUntyped>d__28`1")]
[ExtensionAttribute]
public static IEnumerable SelectManyUntyped(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable> selector);
    [ExtensionAttribute]
public static IEnumerable`1<T> SkipLast(IEnumerable`1<T> source, int count);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<GroupBy>d__30`1")]
[ExtensionAttribute]
public static IEnumerable`1<IEnumerable`1<T>> GroupBy(IEnumerable`1<T> items, int itemsByGroup);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Take>d__31`1")]
private static IEnumerable`1<T> Take(IEnumerator`1<T> enumerator, T first, int count);
    [ExtensionAttribute]
public static IEnumerable`1<IBindableGrouping`2<string, T>> GroupAlphabetically(IEnumerable`1<T> items, Func`2<T, string> keySelector, bool includeEmptyGroups);
    [ExtensionAttribute]
public static IEnumerable`1<IBindableGrouping`2<TKey, TItem>> GroupBy(IEnumerable`1<TItem> items, GroupDescriptor`2[] descriptors);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<<SkipLast>g__Skip1|29_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <SkipLast>g__Skip1|29_0(IEnumerable`1<T> src);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<<SkipLast>g__SkipN|29_1>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <SkipLast>g__SkipN|29_1(IEnumerable`1<T> src, int n);
}
[ExtensionAttribute]
internal static class Uno.Extensions.FormattableExtensions : object {
    [ExtensionAttribute]
public static string ToStringInvariant(T number);
}
[ExtensionAttribute]
internal static class Uno.Extensions.FuncAsyncExtensions : object {
    [ExtensionAttribute]
public static FuncAsync`1<TResult> LockInvocation(FuncAsync`1<TResult> func, InvocationLockingMode mode);
    [ExtensionAttribute]
public static FuncAsync`2<TParam, TResult> LockInvocation(FuncAsync`2<TParam, TResult> func, InvocationLockingMode mode);
}
[ExtensionAttribute]
internal static class Uno.Extensions.FuncExtensions : object {
    private static ConditionalWeakTable`2<object, ConcurrentDictionary`2<object, object>> _weakResults;
    private static FuncExtensions();
    [ExtensionAttribute]
public static Func`1<TResult> AsWeakMemoized(Func`2<TSource, TResult> selector, TSource source);
}
[ExtensionAttribute]
internal static class Uno.Extensions.FuncMemoizeExtensions : object {
    [ExtensionAttribute]
public static Func`1<T> AsMemoized(Func`1<T> func);
    [ExtensionAttribute]
public static Func`2<TParam, TResult> AsMemoized(Func`2<TParam, TResult> func);
    [ExtensionAttribute]
public static Func`3<TParam1, TParam2, TResult> AsMemoized(Func`3<TParam1, TParam2, TResult> func);
    [ExtensionAttribute]
public static Func`4<TParam1, TParam2, TParam3, TResult> AsMemoized(Func`4<TParam1, TParam2, TParam3, TResult> func);
    [ExtensionAttribute]
public static Func`5<TParam1, TParam2, TParam3, TParam4, TResult> AsMemoized(Func`5<TParam1, TParam2, TParam3, TParam4, TResult> func);
    [ExtensionAttribute]
public static Func`6<TParam1, TParam2, TParam3, TParam4, TParam5, TResult> AsMemoized(Func`6<TParam1, TParam2, TParam3, TParam4, TParam5, TResult> func);
    [ExtensionAttribute]
public static Func`1<T> AsLockedMemoized(Func`1<T> func);
    [ExtensionAttribute]
public static Func`2<TKey, TResult> AsLockedMemoized(Func`2<TKey, TResult> func);
    [ExtensionAttribute]
public static Func`3<TArg1, TArg2, TResult> AsLockedMemoized(Func`3<TArg1, TArg2, TResult> func);
    [ExtensionAttribute]
public static Func`4<TArg1, TArg2, TArg3, TResult> AsLockedMemoized(Func`4<TArg1, TArg2, TArg3, TResult> func);
    [ExtensionAttribute]
public static Func`5<TArg1, TArg2, TArg3, TArg4, TResult> AsLockedMemoized(Func`5<TArg1, TArg2, TArg3, TArg4, TResult> func);
}
internal class Uno.Extensions.GroupDescriptor`2 : object {
    [CompilerGeneratedAttribute]
private Func`2<TItem, bool> <Selector>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    public Func`2<TItem, bool> Selector { get; private set; }
    public TKey Key { get; private set; }
    public bool Required { get; private set; }
    public GroupDescriptor`2(TKey key);
    public GroupDescriptor`2(TKey key, Func`2<TItem, bool> selector, bool required);
    [CompilerGeneratedAttribute]
public Func`2<TItem, bool> get_Selector();
    [CompilerGeneratedAttribute]
private void set_Selector(Func`2<TItem, bool> value);
    [CompilerGeneratedAttribute]
public TKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
private void set_Required(bool value);
}
internal class Uno.Extensions.GroupDescriptorComparer`1 : object {
    private List`1<TKey> _keys;
    public GroupDescriptorComparer`1(IEnumerable`1<TKey> descriptors);
    public sealed virtual int Compare(TKey x, TKey y);
}
internal interface Uno.Extensions.IBindableGrouping`2 {
    public bool HasItems { get; }
    public abstract virtual bool get_HasItems();
}
internal interface Uno.Extensions.IIndentedStringBuilder {
    public int CurrentLevel { get; }
    public abstract virtual int get_CurrentLevel();
    public abstract virtual void Append(string text);
    public abstract virtual void AppendLine();
    public abstract virtual void AppendMultiLineIndented(string text);
    public abstract virtual IDisposable Block(int count);
    public abstract virtual IDisposable Block(IFormatProvider formatProvider, string pattern, Object[] parameters);
    public abstract virtual IDisposable Indent(int count);
    public abstract virtual string ToString();
    public abstract virtual void AppendIndented(string text);
    public abstract virtual void AppendIndented(ReadOnlySpan`1<char> text);
    public abstract virtual void AppendFormatIndented(IFormatProvider formatProvider, string text, Object[] replacements);
}
internal class Uno.Extensions.IndentedStringBuilder : object {
    [CompilerGeneratedAttribute]
private StringBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentLevel>k__BackingField;
    public StringBuilder Builder { get; }
    public int CurrentLevel { get; private set; }
    [CompilerGeneratedAttribute]
public StringBuilder get_Builder();
    [CompilerGeneratedAttribute]
public sealed virtual int get_CurrentLevel();
    [CompilerGeneratedAttribute]
private void set_CurrentLevel(int value);
    public sealed virtual IDisposable Indent(int count);
    public sealed virtual IDisposable Block(int count);
    public sealed virtual IDisposable Block(IFormatProvider formatProvider, string pattern, Object[] parameters);
    public sealed virtual void Append(string text);
    public sealed virtual void AppendIndented(string text);
    public sealed virtual void AppendIndented(ReadOnlySpan`1<char> text);
    private void AppendIndented(char c, int indentCount);
    public sealed virtual void AppendFormatIndented(IFormatProvider formatProvider, string text, Object[] replacements);
    public sealed virtual void AppendLine();
    public sealed virtual void AppendMultiLineIndented(string text);
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Uno.Extensions.IndentedStringBuilderExtensions : object {
    [ExtensionAttribute]
public static void AppendLineIndented(IIndentedStringBuilder builder, string pattern);
    [ExtensionAttribute]
public static void AppendLineInvariantIndented(IIndentedStringBuilder builder, string pattern, Object[] replacements);
    [ExtensionAttribute]
public static IDisposable Indent(IIndentedStringBuilder builder, string opening, string closing);
    [ExtensionAttribute]
public static IDisposable BlockInvariant(IIndentedStringBuilder builder, string pattern, Object[] parameters);
    [ExtensionAttribute]
public static IDisposable BlockInvariant(IIndentedStringBuilder builder, string pattern);
}
internal enum Uno.Extensions.InvocationLockingMode : Enum {
    public int value__;
    public static InvocationLockingMode Serial;
    public static InvocationLockingMode Share;
}
[ExtensionAttribute]
internal static class Uno.Extensions.ListExtensions : object {
    [ExtensionAttribute]
public static IList`1<T> AsReadOnly(IList`1<T> items);
    [ExtensionAttribute]
public static void AddRange(IList destination, IEnumerable source);
    [ExtensionAttribute]
public static void AddOrReplaceRange(IList`1<T> list, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static void AddOrReplaceRange(IList`1<T> list, IEnumerable`1<T> items, Func`3<T, T, bool> predicate);
    [ExtensionAttribute]
public static void RemoveAllAt(List`1<T> list, int index);
    [ExtensionAttribute]
public static int Replace(IList`1<T> list, Func`2<T, bool> selector, T replacement);
    [IteratorStateMachineAttribute("Uno.Extensions.ListExtensions/<ToDivergentEnumerable>d__6`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> ToDivergentEnumerable(IList`1<T> list, int startingAt);
    [IteratorStateMachineAttribute("Uno.Extensions.ListExtensions/<ToDivergentEnumerable>d__7`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> ToDivergentEnumerable(IReadOnlyList`1<T> list, int startingAt);
    [ExtensionAttribute]
public static bool ContainsIndex(IList`1<T> list, int index);
    [ExtensionAttribute]
public static bool ContainsIndex(IReadOnlyList`1<T> list, int index);
    [ExtensionAttribute]
public static T FindNearestItem(IList`1<T> list, Func`2<T, bool> predicate, int startingAt);
    [ExtensionAttribute]
public static T FindNearestItem(IReadOnlyList`1<T> list, Func`2<T, bool> predicate, int startingAt);
    [ExtensionAttribute]
public static int IndexOf(IList list, object value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static int IndexOf(IReadOnlyList`1<T> list, T value);
    [ExtensionAttribute]
public static int IndexOf(IReadOnlyList`1<T> list, T value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static bool SequenceKeyEqual(IList`1<T> first, IList`1<T> second);
}
[ExtensionAttribute]
internal static class Uno.Extensions.ObjectExtensions : object {
    [ExtensionAttribute]
public static void Maybe(TInstance instance, Action`1<TInstance> action);
    [ExtensionAttribute]
public static void Maybe(object instance, Action`1<TInstance> action);
    [ExtensionAttribute]
public static TResult SelectOrDefault(TInstance instance, Func`2<TInstance, TResult> selector);
    [ExtensionAttribute]
public static TResult SelectOrDefault(TInstance instance, Func`2<TInstance, TResult> selector, TResult defaultValue);
    [ExtensionAttribute]
public static bool SafeEquals(T obj, T other);
    [ExtensionAttribute]
public static TSource Apply(TSource source, Action`1<TSource> action);
}
[ExtensionAttribute]
internal static class Uno.Extensions.ObservableCollectionExtensions : object {
    [ExtensionAttribute]
public static void Update(IList`1<T> collection, IEnumerable`1<T> updated, bool tryDispose, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static ObservableCollectionUpdateResults`1<T> UpdateWithResults(IList`1<T> collection, IEnumerable`1<T> updated, bool tryDispose, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
private static ValueTuple`4<IEnumerable`1<T>, IEnumerable`1<T>, IEnumerable`1<T>, KeptInfo`1[]> InternalUpdate(IList`1<T> collection, IEnumerable`1<T> updated, bool tryDispose, bool needKept, IEqualityComparer`1<T> comparer);
    private static void InsertNewItems(IList`1<T> collection, T[] array, T[] added, IEqualityComparer`1<T> comparer);
    private static void ManipulateItems(IList`1<T> collection, KeptInfo`1[] kept);
    private static KeptInfo`1[] GetKeptItems(IList`1<T> collection, T[] array, IEqualityComparer`1<T> comparer);
}
internal class Uno.Extensions.ObservableCollectionUpdateResults`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Moved>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<T> <Removed>k__BackingField;
    public IEnumerable`1<T> Added { get; }
    public IEnumerable`1<T> Moved { get; }
    public IEnumerable`1<T> Removed { get; }
    public ObservableCollectionUpdateResults`1(IEnumerable`1<T> added, IEnumerable`1<T> moved, IEnumerable`1<T> removed);
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Added();
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Moved();
    [CompilerGeneratedAttribute]
public IEnumerable`1<T> get_Removed();
}
[ExtensionAttribute]
internal static class Uno.Extensions.QueueExtensions : object {
    [ExtensionAttribute]
public static bool Remove(Queue`1<T> queue, Func`2<T, bool> predicate);
}
public class Uno.Extensions.SpanAction`2 : MulticastDelegate {
    public SpanAction`2(object object, IntPtr method);
    public virtual void Invoke(Span`1<T> span, TArg arg);
    public virtual IAsyncResult BeginInvoke(Span`1<T> span, TArg arg, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
internal static class Uno.Extensions.Specialized.EnumerableExtensions : object {
    [ExtensionAttribute]
public static int Count(IEnumerable enumerable);
    [ExtensionAttribute]
public static bool Any(IEnumerable items);
    [ExtensionAttribute]
public static Object[] ToObjectArray(IEnumerable items);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable items, object item);
    [ExtensionAttribute]
public static object ElementAt(IEnumerable items, int position);
    [ExtensionAttribute]
public static object ElementAtOrDefault(IEnumerable items, int position);
    [ExtensionAttribute]
public static void ForEach(IEnumerable enumerable, Action`1<object> action);
    [ExtensionAttribute]
public static bool None(IEnumerable source);
    [IteratorStateMachineAttribute("Uno.Extensions.Specialized.EnumerableExtensions/<Where>d__8")]
[ExtensionAttribute]
public static IEnumerable Where(IEnumerable source, Func`2<object, bool> predicate);
    [ExtensionAttribute]
public static bool Contains(IEnumerable source, object value);
}
[ExtensionAttribute]
internal static class Uno.Extensions.StackExtensions : object {
    [ExtensionAttribute]
public static IDisposable Subscribe(Stack`1<T> stack, T value);
}
[ExtensionAttribute]
internal static class Uno.Extensions.StreamExtensions : object {
    [AsyncStateMachineAttribute("Uno.Extensions.StreamExtensions/<ReadBytesAsync>d__0")]
[ExtensionAttribute]
public static Task`1<Byte[]> ReadBytesAsync(Stream stream);
}
[ExtensionAttribute]
internal static class Uno.Extensions.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static void AppendFormatInvariant(StringBuilder builder, string format, Object[] args);
}
[ExtensionAttribute]
internal static class Uno.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static LineSplitEnumerator SplitLines(string instance);
    [ExtensionAttribute]
public static LineSplitEnumerator SplitLines(ReadOnlySpan`1<char> instance);
    [ExtensionAttribute]
public static bool IsNullOrEmpty(string instance);
    [ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string instance);
    [ExtensionAttribute]
public static bool Contains(string instance, string value, StringComparison comparisonType);
    [ExtensionAttribute]
public static string JoinBy(IEnumerable`1<string> items, string joinBy);
    [ExtensionAttribute]
public static string InvariantCultureFormat(string instance, Object[] array);
    [ExtensionAttribute]
public static string TrimStart(string source, string trimText, bool ignoreCase);
    [ExtensionAttribute]
public static string TrimEnd(string source, string trimText);
    public static string Create(int length, TState state, SpanAction`2<char, TState> action);
}
[ExtensionAttribute]
internal static class Uno.Extensions.TypeExtensions : object {
    [ExtensionAttribute]
public static bool Is(Type type);
    [ExtensionAttribute]
public static bool Is(Type instance, Type type);
    [ExtensionAttribute]
public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static bool IsGenericDescentOf(Type type, Type genericTypeDefinition);
    [IteratorStateMachineAttribute("Uno.Extensions.TypeExtensions/<EnumerateAncestorTypes>d__4")]
[ExtensionAttribute]
public static IEnumerable`1<Type> EnumerateAncestorTypes(Type type, bool includeSelf);
}
[ExtensionAttribute]
internal static class Uno.Extensions.WeakReferenceExtensions : object {
    [ExtensionAttribute]
public static T GetTarget(WeakReference`1<T> wr);
}
internal class Uno.FuncAsync`1 : MulticastDelegate {
    public FuncAsync`1(object object, IntPtr method);
    public virtual Task`1<TResult> Invoke(CancellationToken ct);
    public virtual IAsyncResult BeginInvoke(CancellationToken ct, AsyncCallback callback, object object);
    public virtual Task`1<TResult> EndInvoke(IAsyncResult result);
}
internal class Uno.FuncAsync`2 : MulticastDelegate {
    public FuncAsync`2(object object, IntPtr method);
    public virtual Task`1<TResult> Invoke(CancellationToken ct, T1 t1);
    public virtual IAsyncResult BeginInvoke(CancellationToken ct, T1 t1, AsyncCallback callback, object object);
    public virtual Task`1<TResult> EndInvoke(IAsyncResult result);
}
internal class Uno.FuncAsync`3 : MulticastDelegate {
    public FuncAsync`3(object object, IntPtr method);
    public virtual Task`1<TResult> Invoke(CancellationToken ct, T1 t1, T2 t2);
    public virtual IAsyncResult BeginInvoke(CancellationToken ct, T1 t1, T2 t2, AsyncCallback callback, object object);
    public virtual Task`1<TResult> EndInvoke(IAsyncResult result);
}
internal class Uno.FuncAsync`4 : MulticastDelegate {
    public FuncAsync`4(object object, IntPtr method);
    public virtual Task`1<TResult> Invoke(CancellationToken ct, T1 t1, T2 t2, T3 t3);
    public virtual IAsyncResult BeginInvoke(CancellationToken ct, T1 t1, T2 t2, T3 t3, AsyncCallback callback, object object);
    public virtual Task`1<TResult> EndInvoke(IAsyncResult result);
}
internal class Uno.FuncAsync`5 : MulticastDelegate {
    public FuncAsync`5(object object, IntPtr method);
    public virtual Task`1<TResult> Invoke(CancellationToken ct, T1 t1, T2 t2, T3 t3, T4 t4);
    public virtual IAsyncResult BeginInvoke(CancellationToken ct, T1 t1, T2 t2, T3 t3, T4 t4, AsyncCallback callback, object object);
    public virtual Task`1<TResult> EndInvoke(IAsyncResult result);
}
internal static class Uno.Funcs : object {
    public static Func`1<TResult> Create(Func`1<TResult> function);
    public static Func`2<TParam, TResult> Create(Func`2<TParam, TResult> function);
    public static Func`3<TParam1, TParam2, TResult> Create(Func`3<TParam1, TParam2, TResult> function);
    public static Func`4<TParam1, TParam2, TParam3, TResult> Create(Func`4<TParam1, TParam2, TParam3, TResult> function);
    public static Func`1<TResult> CreateMemoized(Func`1<TResult> function);
    public static Func`1<TResult> CreateLockedMemoized(Func`1<TResult> function);
    public static Func`2<TParam, TResult> CreateMemoized(Func`2<TParam, TResult> function);
    public static Func`3<TParam1, TParam2, TResult> CreateMemoized(Func`3<TParam1, TParam2, TResult> function);
    public static Func`4<TParam1, TParam2, TParam3, TResult> CreateMemoized(Func`4<TParam1, TParam2, TParam3, TResult> function);
    public static Func`5<TParam1, TParam2, TParam3, TParam4, TResult> CreateMemoized(Func`5<TParam1, TParam2, TParam3, TParam4, TResult> function);
    public static Func`6<TParam1, TParam2, TParam3, TParam4, TParam5, TResult> CreateMemoized(Func`6<TParam1, TParam2, TParam3, TParam4, TParam5, TResult> function);
}
internal class Uno.Grouping`2 : object {
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TValues> <Values>k__BackingField;
    public TKey Key { get; private set; }
    public IEnumerable`1<TValues> Values { get; private set; }
    public Grouping`2(TKey key, IEnumerable`1<TValues> values);
    [CompilerGeneratedAttribute]
public sealed virtual TKey get_Key();
    [CompilerGeneratedAttribute]
private void set_Key(TKey value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TValues> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IEnumerable`1<TValues> value);
    public sealed virtual IEnumerator`1<TValues> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ExtensionAttribute]
internal static class Uno.Media.DrawingExtensions : object {
    [ExtensionAttribute]
public static string ToCode(Point point);
    [ExtensionAttribute]
public static string ToCode(Size size);
    [ExtensionAttribute]
public static string ToCode(FillRule fillRule);
    [ExtensionAttribute]
public static string ToCode(SweepDirection direction);
    [ExtensionAttribute]
public static string ToCode(bool bool);
    [ExtensionAttribute]
public static string ToCode(double double);
}
internal class Uno.Media.GeneratedStreamGeometryContext : StreamGeometryContext {
    private StringBuilder _builder;
    private static string CRLF;
    [CompilerGeneratedAttribute]
private FillRule <FillRule>k__BackingField;
    internal FillRule FillRule { get; internal set; }
    private static GeneratedStreamGeometryContext();
    [CompilerGeneratedAttribute]
internal FillRule get_FillRule();
    [CompilerGeneratedAttribute]
internal void set_FillRule(FillRule value);
    public string Generate();
    public virtual void ArcTo(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
    public virtual void BeginFigure(Point startPoint, bool isFilled);
    public virtual void BezierTo(Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin);
    public virtual void LineTo(Point point, bool isStroked, bool isSmoothJoin);
    public virtual void PolyBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyLineTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyQuadraticBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void QuadraticBezierTo(Point point1, Point point2, bool isStroked, bool isSmoothJoin);
    public virtual void SetClosedState(bool closed);
}
public class Uno.Media.PathMarkupParser : object {
    private static Dictionary`2<char, Command> s_commands;
    private StreamGeometryContext _geometryContext;
    private Point _currentPoint;
    private Nullable`1<Point> _beginFigurePoint;
    private Nullable`1<Point> _previousControlPoint;
    private bool _isOpen;
    private bool _isDisposed;
    public PathMarkupParser(StreamGeometryContext context);
    private static PathMarkupParser();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    private static Point MirrorControlPoint(Point controlPoint, Point center);
    public void Parse(string s, FillRule& fillRule);
    private void CreateFigure();
    private FillRule GetFillRule(ReadOnlySpan`1& span);
    private void CloseFigure();
    private void AddMove(ReadOnlySpan`1& span, bool relative);
    private void AddLine(ReadOnlySpan`1& span, bool relative);
    private void AddHorizontalLine(ReadOnlySpan`1& span, bool relative);
    private void AddVerticalLine(ReadOnlySpan`1& span, bool relative);
    private void AddCubicBezierCurve(ReadOnlySpan`1& span, bool relative);
    private void AddQuadraticBezierCurve(ReadOnlySpan`1& span, bool relative);
    private void AddSmoothCubicBezierCurve(ReadOnlySpan`1& span, bool relative);
    private void AddSmoothQuadraticBezierCurve(ReadOnlySpan`1& span, bool relative);
    private void AddArc(ReadOnlySpan`1& span, bool relative);
    private static bool PeekArgument(ReadOnlySpan`1<char> span);
    private static bool ReadArgument(ReadOnlySpan`1& remaining, ReadOnlySpan`1& argument);
    private static ReadOnlySpan`1<char> ReadSeparator(ReadOnlySpan`1<char> span);
    private static ReadOnlySpan`1<char> SkipWhitespace(ReadOnlySpan`1<char> span);
    private bool ReadBool(ReadOnlySpan`1& span);
    private double ReadDouble(ReadOnlySpan`1& span);
    private Size ReadSize(ReadOnlySpan`1& span);
    private Point ReadPoint(ReadOnlySpan`1& span);
    private Point ReadRelativePoint(ReadOnlySpan`1& span, Point origin);
    private bool ReadCommand(ReadOnlySpan`1& span, Command& command, Boolean& relative);
}
public abstract class Uno.Media.StreamGeometryContext : object {
    public abstract virtual void ArcTo(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
    public abstract virtual void BeginFigure(Point startPoint, bool isFilled);
    public abstract virtual void BezierTo(Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin);
    public abstract virtual void LineTo(Point point, bool isStroked, bool isSmoothJoin);
    public abstract virtual void PolyBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public abstract virtual void PolyLineTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public abstract virtual void PolyQuadraticBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public abstract virtual void QuadraticBezierTo(Point point1, Point point2, bool isStroked, bool isSmoothJoin);
    public abstract virtual void SetClosedState(bool closed);
    public virtual void Dispose();
}
internal class Uno.MsBuildTasks.Utils.PathHelper : object {
    public static string GetRelativePath(string folder, string filespec);
}
internal static class Uno.MsBuildTasks.Utils.XamlPathParser.Parsers : object {
    internal static string ParseGeometry(string pathString, IFormatProvider formatProvider);
}
internal class Uno.ReferenceEqualityComparer`1 : object {
    public static ReferenceEqualityComparer`1<T> Default;
    private static ReferenceEqualityComparer`1();
    public sealed virtual bool Equals(T left, T right);
    public sealed virtual int GetHashCode(T obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Uno.Roslyn.GeneratorExecutionContextExtensions : object {
    private static string SourceItemGroupMetadata;
    [ExtensionAttribute]
public static string GetMSBuildPropertyValue(GeneratorExecutionContext context, string name, string defaultValue);
    [ExtensionAttribute]
public static bool TryGetOptionValue(GeneratorExecutionContext context, AdditionalText textFile, string key, String& value);
    [ExtensionAttribute]
public static IEnumerable`1<MSBuildItem> GetMSBuildItemsWithAdditionalFiles(GeneratorExecutionContext context, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Uno.Roslyn.MSBuildItem : object {
    private GeneratorExecutionContext Context;
    [NullableAttribute("2")]
private static MSBuildItemIdentityComparer _identityComparer;
    [CompilerGeneratedAttribute]
private AdditionalText <File>k__BackingField;
    public string Identity { get; }
    public AdditionalText File { get; }
    public static IEqualityComparer`1<MSBuildItem> IdentityComparer { get; }
    internal MSBuildItem(AdditionalText file, GeneratorExecutionContext context);
    public string get_Identity();
    [CompilerGeneratedAttribute]
public AdditionalText get_File();
    public string GetMetadataValue(string name);
    public static IEqualityComparer`1<MSBuildItem> get_IdentityComparer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Roslyn.RoslynMetadataHelper : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, ITypeSymbol> _findTypeByFullName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<INamedTypeSymbol, IPropertySymbol> _findContentProperty;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<INamedTypeSymbol, string, bool> _isAttachedProperty;
    private Func`3<INamedTypeSymbol, string, INamedTypeSymbol> _getAttachedPropertyType;
    private Func`2<INamedTypeSymbol, bool> _isTypeImplemented;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<INamedTypeSymbol, string, ISymbol> _findPropertyByOwnerSymbol;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<INamedTypeSymbol, String[]> _findLocalizableDeclaredProperties;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`3<INamedTypeSymbol, string, IEventSymbol> _findEventType;
    [CompilerGeneratedAttribute]
private Compilation <Compilation>k__BackingField;
    public Compilation Compilation { get; }
    public string AssemblyName { get; }
    public RoslynMetadataHelper(GeneratorExecutionContext context);
    [CompilerGeneratedAttribute]
public Compilation get_Compilation();
    public string get_AssemblyName();
    private static void ThrowOnErrorSymbol(ISymbol symbol);
    public ITypeSymbol FindTypeByFullName(string fullName);
    private ITypeSymbol SourceFindTypeByFullName(string fullName);
    public IPropertySymbol FindContentProperty(INamedTypeSymbol elementType);
    private static IPropertySymbol SourceFindContentProperty(INamedTypeSymbol elementType);
    public bool IsAttachedProperty(INamedTypeSymbol declaringType, string name);
    private static bool SourceIsAttachedProperty(INamedTypeSymbol type, string name);
    public INamedTypeSymbol GetAttachedPropertyType(INamedTypeSymbol type, string propertyName);
    private static INamedTypeSymbol SourceGetAttachedPropertyType(INamedTypeSymbol type, string name);
    public ITypeSymbol GetTypeByFullName(string fullName);
    public bool IsTypeImplemented(INamedTypeSymbol type);
    private static bool SourceIsTypeImplemented(INamedTypeSymbol type);
    [NullableContextAttribute("2")]
public ISymbol FindPropertyByOwnerSymbol(INamedTypeSymbol type, string propertyName);
    [NullableContextAttribute("2")]
private ISymbol SourceFindPropertyByOwnerSymbol(INamedTypeSymbol type, string propertyName);
    [NullableContextAttribute("2")]
public INamedTypeSymbol FindPropertyTypeByOwnerSymbol(INamedTypeSymbol type, string propertyName);
    public String[] FindLocalizableDeclaredProperties(INamedTypeSymbol type);
    private String[] SourceFindLocalizableDeclaredProperties(INamedTypeSymbol type);
    [NullableContextAttribute("2")]
public IEventSymbol FindEventType(INamedTypeSymbol ownerType, string eventName);
    [NullableContextAttribute("2")]
private IEventSymbol SourceFindEventType(INamedTypeSymbol ownerType, string eventName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Uno.Roslyn.UnoNamedTypeSymbolDisplayVisitor : SymbolVisitor {
    private StringBuilder _builder;
    private bool _includeGlobalNamespace;
    public UnoNamedTypeSymbolDisplayVisitor(StringBuilder builder, bool includeGlobalNamespace);
    private void AppendName(string text);
    public virtual void VisitArrayType(IArrayTypeSymbol symbol);
    public virtual void VisitDynamicType(IDynamicTypeSymbol symbol);
    public virtual void VisitNamedType(INamedTypeSymbol symbol);
    private static string GetSpecialTypeName(INamedTypeSymbol symbol);
    public virtual void VisitNamespace(INamespaceSymbol symbol);
    public virtual void VisitTypeParameter(ITypeParameterSymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Uno.StringBuilderCache : object {
    internal static int MaxBuilderSize;
    private static int DefaultCapacity;
    [NullableAttribute("2")]
[ThreadStaticAttribute]
private static StringBuilder t_cachedInstance;
    public static StringBuilder Acquire(int capacity);
    public static void Release(StringBuilder sb);
    public static string GetStringAndRelease(StringBuilder sb);
}
internal class Uno.Threading.AsyncLock : object {
    private SemaphoreSlim _semaphore;
    [AsyncStateMachineAttribute("Uno.Threading.AsyncLock/<LockAsync>d__1")]
public Task`1<IDisposable> LockAsync(CancellationToken ct);
    [CompilerGeneratedAttribute]
private void <LockAsync>b__1_0();
}
internal class Uno.Threading.FastTaskCompletionSource`1 : object {
    private int _terminationType;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _terminationSet;
    private ImmutableList`1<Action> _continuations;
    [CompilerGeneratedAttribute]
private ExceptionDispatchInfo <ExceptionInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Result>k__BackingField;
    private static SpinWait _spin;
    private Task`1<T> _task;
    public TerminationType<T> Termination { get; }
    public bool IsCompleted { get; }
    public bool IsCanceled { get; }
    public ExceptionDispatchInfo ExceptionInfo { get; private set; }
    public T Result { get; private set; }
    public Exception Exception { get; }
    public Task`1<T> Task { get; }
    public TerminationType<T> get_Termination();
    public bool get_IsCompleted();
    public bool get_IsCanceled();
    [CompilerGeneratedAttribute]
public ExceptionDispatchInfo get_ExceptionInfo();
    [CompilerGeneratedAttribute]
private void set_ExceptionInfo(ExceptionDispatchInfo value);
    [CompilerGeneratedAttribute]
public T get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(T value);
    public Exception get_Exception();
    public void SetCanceled();
    public bool TrySetCanceled();
    public void SetException(Exception exception);
    public void SetException(ExceptionDispatchInfo exceptionInfo);
    public bool TrySetException(Exception exception);
    public bool TrySetException(ExceptionDispatchInfo exceptionInfo);
    public void SetResult(T result);
    public bool TrySetResult(T result);
    private void RaiseOnCompleted();
    public T GetResult();
    public FastTaskCompletionSource`1<T> GetAwaiter();
    public sealed virtual void OnCompleted(Action continuation);
    public Task`1<T> get_Task();
    private Task`1<T> CreateSyncTask();
    private void SpinUntilTermination();
    [AsyncStateMachineAttribute("Uno.Threading.FastTaskCompletionSource`1/<CreateAsyncTask>d__38")]
private Task`1<T> CreateAsyncTask();
}
internal static class Uno.Transactional : object {
    [NullableContextAttribute("1")]
public static T Update(T& original, Func`2<T, T> selector);
    [NullableContextAttribute("1")]
public static object Update(Object& original, Func`2<object, object> selector);
    [NullableContextAttribute("1")]
public static T Update(T& original, TParam param, Func`3<T, TParam, T> selector);
    [NullableContextAttribute("1")]
public static T Update(T& original, TParam1 param1, TParam2 param2, Func`4<T, TParam1, TParam2, T> selector);
    [NullableContextAttribute("1")]
public static TResult Update(TSource& original, Func`2<TSource, Tuple`2<TSource, TResult>> selector);
    [NullableContextAttribute("1")]
public static TResult Update(TSource& original, TParam param, Func`3<TSource, TParam, Tuple`2<TSource, TResult>> selector);
    public static TValue GetOrAdd(TDictionary& dictionary, TKey key, Func`2<TKey, TValue> factory);
    public static TValue GetOrAdd(TDictionary& dictionary, TKey key, TContext context, Func`3<TKey, TContext, TValue> factory);
    public static bool TryAdd(TDictionary& dictionary, TKey key, Func`2<TKey, TValue> factory, TValue& value);
    public static bool TryRemove(TDictionary& dictionary, TKey key, TValue& value);
    public static int Remove(TDictionary& list, Func`2<KeyValuePair`2<TKey, TValue>, bool> removeSelector);
    public static TValue SetItem(TDictionary& dictionary, TKey key, TValue value);
    public static TValue SetItem(TDictionary& dictionary, TKey key, Func`2<TKey, TValue> factory);
    public static bool TryUpdateItem(TDictionary& dictionary, TKey key, TValue value);
    public static bool TryUpdateItem(IImmutableDictionary`2& dictionary, TKey key, Func`3<TKey, TValue, TValue> factory);
    public static bool TryUpdateItem(ImmutableDictionary`2& dictionary, TKey key, Func`3<TKey, TValue, TValue> factory);
    public static bool TryUpdateItem(ImmutableSortedDictionary`2& dictionary, TKey key, Func`3<TKey, TValue, TValue> factory);
    public static TValue UpdateItem(IImmutableDictionary`2& dictionary, TKey key, Func`3<TKey, TValue, TValue> factory);
    public static TValue UpdateItem(ImmutableDictionary`2& dictionary, TKey key, Func`3<TKey, TValue, TValue> factory);
    public static TValue UpdateItem(ImmutableSortedDictionary`2& dictionary, TKey key, Func`3<TKey, TValue, TValue> factory);
    public static void Enqueue(TQueue& queue, T value);
    public static T Enqueue(TQueue& queue, Func`2<TQueue, T> valueFactory);
    public static bool TryDequeue(TQueue& queue, T& value);
    public static T Dequeue(TQueue& queue);
    public static TList Add(TList& list, T item);
    public static TList AddDistinct(TList& list, T item);
    public static TList AddDistinct(TList& list, T item, IEqualityComparer`1<T> comparer);
    public static bool TryAddDistinct(TList& list, T item);
    public static bool TryAddDistinct(TList& list, T item, IEqualityComparer`1<T> comparer);
    public static bool Remove(TList& list, T item);
    public static int Remove(TList& list, Func`2<T, bool> removeSelector);
    public static int RemoveRange(TList& list, T[] items);
    public static int RemoveRange(TList& list, T[] items, IEnumerable`1& removedItems);
}
internal static class Uno.UI.SourceGenerators.AnalyzerSuppressionsGenerator : object {
    internal static void Generate(IIndentedStringBuilder writer, String[] analyzerSuppressions);
}
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.BindableTypeProviders.BindableTypeProvidersSourceGenerator : object {
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
}
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.BindableTypeProviders.DependencyObjectAvailabilityGenerator : object {
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
}
internal static class Uno.UI.SourceGenerators.BindableTypeProviders.LinkerHintsHelpers : object {
    internal static string GetPropertyAvailableName(string name);
    internal static string GetLinkerHintsClassName(string defaultNamespace);
    internal static string GetLinkerHintsClassName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.DependencyObject.DependencyObjectGenerator : object {
    private static DiagnosticDescriptor _descriptor;
    private static DependencyObjectGenerator();
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
    private static void ReportDiagnostic(GeneratorExecutionContext context, Diagnostic diagnostic);
}
public static class Uno.UI.SourceGenerators.Helpers.DesignTimeHelper : object {
    public static bool IsDesignTime(GeneratorExecutionContext context);
}
internal class Uno.UI.SourceGenerators.Helpers.HashBuilder : object {
    public static string Build(string input);
}
public class Uno.UI.SourceGenerators.Helpers.PlatformHelper : object {
    public static bool IsValidPlatform(GeneratorExecutionContext context);
    public static bool IsAndroid(GeneratorExecutionContext context);
    public static bool IsIOS(GeneratorExecutionContext context);
    public static bool IsUnoHead(GeneratorExecutionContext context);
    public static bool IsApplication(GeneratorExecutionContext context);
}
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.HotRestart.HotRestartGenerator : object {
    [NullableAttribute("1")]
private static DiagnosticDescriptor _descriptorMissingXClass;
    [NullableAttribute("1")]
private static DiagnosticDescriptor _descriptorMissingAppDefinition;
    private static HotRestartGenerator();
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
}
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.ImplementedRoutedEvents.ImplementedRoutedEventsGenerator : object {
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
}
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.NativeCtor.NativeCtorsGenerator : object {
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.RemoteControl.RemoteControlGenerator : object {
    private static string LibraryXamlSearchPathAssemblyMetadata;
    private static String[] AdditionalMSProperties;
    private static RemoteControlGenerator();
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
    private static bool IsInsideUnoSolution(GeneratorExecutionContext context);
    private static void BuildGeneratedFileHeader(IndentedStringBuilder sb);
    private void BuildServerProcessorsPaths(GeneratorExecutionContext context, IndentedStringBuilder sb);
    private static bool IsRemoteControlClientInstalled(GeneratorExecutionContext context);
    private static void BuildProjectConfiguration(GeneratorExecutionContext context, IndentedStringBuilder sb);
    private static void BuildLibrarySearchPath(GeneratorExecutionContext context, IndentedStringBuilder sb);
    [IteratorStateMachineAttribute("Uno.UI.SourceGenerators.RemoteControl.RemoteControlGenerator/<EnumerateLibrarySearchPaths>d__10")]
private static IEnumerable`1<string> EnumerateLibrarySearchPaths(GeneratorExecutionContext context);
    private static IEnumerable`1<string> EnumerateLocalSearchPaths(GeneratorExecutionContext context);
    private static void BuildEndPointAttribute(GeneratorExecutionContext context, IndentedStringBuilder sb);
    [CompilerGeneratedAttribute]
internal static bool <Execute>g__IsMSBuildPropertyTrue|3_0(string propertyName, <>c__DisplayClass3_0& );
}
internal abstract class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.BaseStorageService : object {
    protected IDictionary`2<string, string> PeekedTransmissions;
    [CompilerGeneratedAttribute]
private ulong <CapacityInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <MaxFiles>k__BackingField;
    internal ulong CapacityInBytes { get; internal set; }
    internal UInt32 MaxFiles { get; internal set; }
    internal string StorageDirectoryPath { get; }
    [CompilerGeneratedAttribute]
internal ulong get_CapacityInBytes();
    [CompilerGeneratedAttribute]
internal void set_CapacityInBytes(ulong value);
    [CompilerGeneratedAttribute]
internal UInt32 get_MaxFiles();
    [CompilerGeneratedAttribute]
internal void set_MaxFiles(UInt32 value);
    internal abstract virtual string get_StorageDirectoryPath();
    internal abstract virtual void Init(string desireStorageDirectoryPath);
    internal abstract virtual StorageTransmission Peek();
    internal abstract virtual void Delete(StorageTransmission transmission);
    internal abstract virtual Task EnqueueAsync(Transmission transmission);
    protected void OnPeekedItemDisposed(string fileName);
}
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.FixedSizeQueue`1 : object {
    private int _maxSize;
    private Queue`1<T> _queue;
    private object _queueLockObj;
    internal FixedSizeQueue`1(int maxSize);
    internal void Enqueue(T item);
    internal bool Contains(T item);
}
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.FlushManager : object {
    private BaseStorageService _storage;
    [CompilerGeneratedAttribute]
private Uri <EndpointAddress>k__BackingField;
    internal Uri EndpointAddress { get; internal set; }
    internal FlushManager(BaseStorageService storage);
    [CompilerGeneratedAttribute]
internal Uri get_EndpointAddress();
    [CompilerGeneratedAttribute]
internal void set_EndpointAddress(Uri value);
    internal void Flush(ITelemetry telemetryItem);
}
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.PersistenceChannel : object {
    internal static string TelemetryServiceEndpoint;
    private FlushManager _flushManager;
    private int _disposeCount;
    private BaseStorageService _storage;
    private PersistenceTransmitter _transmitter;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DeveloperMode>k__BackingField;
    public Nullable`1<TimeSpan> SendingInterval { get; public set; }
    public UInt32 MaxTransmissionStorageFilesCapacity { get; public set; }
    public Nullable`1<bool> DeveloperMode { get; public set; }
    public string EndpointAddress { get; public set; }
    public PersistenceChannel(string storageDirectoryPath, int sendersCount);
    public Nullable`1<TimeSpan> get_SendingInterval();
    public void set_SendingInterval(Nullable`1<TimeSpan> value);
    public UInt32 get_MaxTransmissionStorageFilesCapacity();
    public void set_MaxTransmissionStorageFilesCapacity(UInt32 value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<bool> get_DeveloperMode();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DeveloperMode(Nullable`1<bool> value);
    public sealed virtual string get_EndpointAddress();
    public sealed virtual void set_EndpointAddress(string value);
    public sealed virtual void Dispose();
    public sealed virtual void Send(ITelemetry item);
    public sealed virtual void Flush();
}
internal static class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.PersistenceChannelDebugLog : object {
    private static bool _isEnabled;
    private static PersistenceChannelDebugLog();
    private static bool IsEnabledByEnvironment();
    public static void WriteLine(string message);
    internal static void WriteException(Exception exception, string format, String[] args);
}
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.PersistenceTransmitter : object {
    private int _disposeCount;
    private List`1<Sender> _senders;
    private BaseStorageService _storage;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <SendingInterval>k__BackingField;
    internal Nullable`1<TimeSpan> SendingInterval { get; internal set; }
    internal PersistenceTransmitter(BaseStorageService storage, int sendersCount, bool createSenders);
    [CompilerGeneratedAttribute]
internal Nullable`1<TimeSpan> get_SendingInterval();
    [CompilerGeneratedAttribute]
internal void set_SendingInterval(Nullable`1<TimeSpan> value);
    public sealed virtual void Dispose();
    private void StopSenders();
}
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.Sender : object {
    private TimeSpan _defaultSendingInterval;
    protected AutoResetEvent DelayHandler;
    private TimeSpan _maxIntervalBetweenRetries;
    private TimeSpan _sendingIntervalOnNoData;
    private AutoResetEvent _stoppedHandler;
    private int _disposeCount;
    private TimeSpan _drainingTimeout;
    private bool _stopped;
    private BaseStorageService _storage;
    private PersistenceTransmitter _transmitter;
    private TimeSpan SendingInterval { get; }
    internal Sender(BaseStorageService storage, PersistenceTransmitter transmitter, bool startSending);
    private TimeSpan get_SendingInterval();
    public sealed virtual void Dispose();
    internal Task StopAsync();
    protected void SendLoop();
    protected virtual bool Send(StorageTransmission transmission, TimeSpan& nextSendInterval);
    private static void LogInterval(TimeSpan prevSendInterval, TimeSpan nextSendInterval);
    private static Nullable`1<int> GetStatusCode(WebException e);
    private static bool IsRetryable(Nullable`1<int> httpStatusCode, WebExceptionStatus webExceptionStatus);
    private TimeSpan CalculateNextInterval(Nullable`1<int> httpStatusCode, TimeSpan currentSendInterval, TimeSpan maxInterval);
    [CompilerGeneratedAttribute]
private void <StopAsync>b__14_0();
}
internal abstract class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.SnapshottingCollection`2 : object {
    protected TCollection Collection;
    protected TCollection snapshot;
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected SnapshottingCollection`2(TCollection collection);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(TItem item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TItem item);
    public sealed virtual void CopyTo(TItem[] array, int arrayIndex);
    public sealed virtual bool Remove(TItem item);
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected abstract virtual TCollection CreateSnapshot(TCollection collection);
    protected TCollection GetSnapshot();
}
[DefaultMemberAttribute("Item")]
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.SnapshottingDictionary`2 : SnapshottingCollection`2<KeyValuePair`2<TKey, TValue>, IDictionary`2<TKey, TValue>> {
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    protected sealed virtual IDictionary`2<TKey, TValue> CreateSnapshot(IDictionary`2<TKey, TValue> collection);
}
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageService : BaseStorageService {
    private static string DefaultStorageFolderName;
    private FixedSizeQueue`1<string> _deletedFilesQueue;
    private object _peekLockObj;
    private object _storageFolderLock;
    private string _storageDirectoryPath;
    private string _storageDirectoryPathUsed;
    private long _storageCountFiles;
    private bool _storageFolderInitialized;
    private long _storageSize;
    private UInt32 _transmissionsDropped;
    internal string StorageDirectoryPath { get; }
    private string StorageFolder { get; }
    internal virtual string get_StorageDirectoryPath();
    private string get_StorageFolder();
    internal virtual void Init(string storageDirectoryPath);
    private void VerifyOrSetDefaultStorageDirectoryPath(string desireStorageDirectoryPath);
    internal virtual StorageTransmission Peek();
    internal virtual void Delete(StorageTransmission item);
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageService/<EnqueueAsync>d__18")]
internal virtual Task EnqueueAsync(Transmission transmission);
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageService/<SaveTransmissionToFileAsync>d__19")]
private Task SaveTransmissionToFileAsync(Transmission transmission, string file);
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageService/<LoadTransmissionFromFileAsync>d__20")]
private Task`1<StorageTransmission> LoadTransmissionFromFileAsync(string file);
    private IEnumerable`1<string> GetFiles(string filterByExtension, int top);
    private long GetSize(string file);
    private void CalculateSize();
    private void DeleteObsoleteFiles();
}
internal class Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageTransmission : Transmission {
    internal Action`1<StorageTransmission> Disposing;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullFilePath>k__BackingField;
    internal string FileName { get; }
    internal string FullFilePath { get; }
    protected StorageTransmission(string fullPath, Uri address, Byte[] content, string contentType, string contentEncoding);
    [CompilerGeneratedAttribute]
internal string get_FileName();
    [CompilerGeneratedAttribute]
internal string get_FullFilePath();
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageTransmission/<CreateFromStreamAsync>d__9")]
internal static Task`1<StorageTransmission> CreateFromStreamAsync(Stream stream, string fileName);
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageTransmission/<SaveAsync>d__10")]
internal static Task SaveAsync(Transmission transmission, Stream stream);
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageTransmission/<ReadHeaderAsync>d__11")]
private static Task`1<string> ReadHeaderAsync(TextReader reader, string headerName);
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageTransmission/<ReadAddressAsync>d__12")]
private static Task`1<Uri> ReadAddressAsync(TextReader reader);
    [AsyncStateMachineAttribute("Uno.UI.SourceGenerators.Telemetry.PersistenceChannel.StorageTransmission/<ReadContentAsync>d__13")]
private static Task`1<Byte[]> ReadContentAsync(TextReader reader);
    private void Dispose(bool disposing);
}
public class Uno.UI.SourceGenerators.Telemetry.Telemetry : object {
    internal static string CurrentSessionId;
    private TelemetryClient _client;
    private Dictionary`2<string, string> _commonProperties;
    private Dictionary`2<string, double> _commonMeasurements;
    private TelemetryConfiguration _telemetryConfig;
    private Task _trackEventTask;
    private string _storageDirectoryPath;
    private string _settingsStorageDirectoryPath;
    private PersistenceChannel _persistenceChannel;
    private static string InstrumentationKey;
    private static string TelemetryOptout;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; }
    public Telemetry(Func`1<Nullable`1<bool>> enabledProvider);
    public Telemetry(string sessionId, bool blockThreadInitialization, Func`1<Nullable`1<bool>> enabledProvider);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    public void TrackEvent(string eventName, ValueTuple`2[] properties, ValueTuple`2[] measurements);
    public void TrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    public void Flush();
    public void Dispose();
    public void ThreadBlockingTrackEvent(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    private void InitializeTelemetry();
    private void TrackEventTask(string eventName, IDictionary`2<string, string> properties, IDictionary`2<string, double> measurements);
    private static string PrependProducerNamespace(string eventName);
    private Dictionary`2<string, double> GetEventMeasures(IDictionary`2<string, double> measurements);
    private Dictionary`2<string, string> GetEventProperties(IDictionary`2<string, string> properties);
    [CompilerGeneratedAttribute]
private void <.ctor>b__16_0();
}
internal class Uno.UI.SourceGenerators.Telemetry.TelemetryCommonProperties : object {
    private Func`1<string> _getCurrentDirectory;
    private string _storageDirectoryPath;
    public static string OSVersion;
    public static string OSPlatform;
    public static string OutputRedirected;
    public static string RuntimeId;
    public static string MachineId;
    public static string ProductVersion;
    public static string TelemetryProfile;
    public static string CurrentPathHash;
    public static string KernelVersion;
    private static string TelemetryProfileEnvironmentVariable;
    public TelemetryCommonProperties(string storageDirectoryPath, Func`1<string> getCurrentDirectory);
    public Dictionary`2<string, string> GetTelemetryCommonProperties();
    private string GetMachineId();
    private string GetProductVersion();
    private static string GetKernelVersion();
}
[GeneratorAttribute]
internal class Uno.UI.SourceGenerators.UseOpenSansGenerator : object {
    public sealed virtual void Initialize(IncrementalGeneratorInitializationContext context);
}
[DefaultMemberAttribute("Item")]
internal class Uno.UI.SourceGenerators.Utils.StringBuilderBasedSourceText : SourceText {
    private StringBuilder _builder;
    public char Item { get; }
    public Encoding Encoding { get; }
    public int Length { get; }
    public StringBuilderBasedSourceText(StringBuilder builder);
    public virtual char get_Item(int position);
    public virtual Encoding get_Encoding();
    public virtual int get_Length();
    public virtual void CopyTo(int sourceIndex, Char[] destination, int destinationIndex, int count);
    public virtual string ToString(TextSpan span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.BackingFieldDefinition : object {
    [CompilerGeneratedAttribute]
private string <GlobalizedTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Accessibility <Accessibility>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string GlobalizedTypeName { get; public set; }
    public string Name { get; public set; }
    public Accessibility Accessibility { get; public set; }
    public BackingFieldDefinition(string GlobalizedTypeName, string Name, Accessibility Accessibility);
    [CompilerGeneratedAttribute]
protected BackingFieldDefinition(BackingFieldDefinition original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_GlobalizedTypeName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_GlobalizedTypeName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public Accessibility get_Accessibility();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Accessibility(Accessibility value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(BackingFieldDefinition left, BackingFieldDefinition right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(BackingFieldDefinition left, BackingFieldDefinition right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(BackingFieldDefinition other);
    [CompilerGeneratedAttribute]
public virtual BackingFieldDefinition <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& GlobalizedTypeName, String& Name, Accessibility& Accessibility);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.ComponentDefinition : object {
    [CompilerGeneratedAttribute]
private XamlObjectDefinition <XamlObject>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWeakReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ComponentDefinition <ResourceContext>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public XamlObjectDefinition XamlObject { get; public set; }
    public bool IsWeakReference { get; public set; }
    public string MemberName { get; public set; }
    [NullableAttribute("2")]
public ComponentDefinition ResourceContext { get; public set; }
    public ComponentDefinition(XamlObjectDefinition XamlObject, bool IsWeakReference, string MemberName);
    [CompilerGeneratedAttribute]
protected ComponentDefinition(ComponentDefinition original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public XamlObjectDefinition get_XamlObject();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_XamlObject(XamlObjectDefinition value);
    [CompilerGeneratedAttribute]
public bool get_IsWeakReference();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsWeakReference(bool value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MemberName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ComponentDefinition get_ResourceContext();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ResourceContext(ComponentDefinition value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ComponentDefinition left, ComponentDefinition right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ComponentDefinition left, ComponentDefinition right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ComponentDefinition other);
    [CompilerGeneratedAttribute]
public virtual ComponentDefinition <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(XamlObjectDefinition& XamlObject, Boolean& IsWeakReference, String& MemberName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.ComponentEntry : object {
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlObjectDefinition <ObjectDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string VariableName { get; public set; }
    public XamlObjectDefinition ObjectDefinition { get; public set; }
    public ComponentEntry(string VariableName, XamlObjectDefinition ObjectDefinition);
    [CompilerGeneratedAttribute]
protected ComponentEntry(ComponentEntry original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_VariableName(string value);
    [CompilerGeneratedAttribute]
public XamlObjectDefinition get_ObjectDefinition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ObjectDefinition(XamlObjectDefinition value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ComponentEntry left, ComponentEntry right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ComponentEntry left, ComponentEntry right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ComponentEntry other);
    [CompilerGeneratedAttribute]
public virtual ComponentEntry <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& VariableName, XamlObjectDefinition& ObjectDefinition);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.EventHandlerBackingFieldDefinition : BackingFieldDefinition {
    [CompilerGeneratedAttribute]
private string <ComponentName>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string ComponentName { get; public set; }
    public EventHandlerBackingFieldDefinition(string GlobalizedTypeName, string Name, Accessibility Accessibility, string ComponentName);
    [CompilerGeneratedAttribute]
protected EventHandlerBackingFieldDefinition(EventHandlerBackingFieldDefinition original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_ComponentName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ComponentName(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(EventHandlerBackingFieldDefinition left, EventHandlerBackingFieldDefinition right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(EventHandlerBackingFieldDefinition left, EventHandlerBackingFieldDefinition right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(BackingFieldDefinition other);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(EventHandlerBackingFieldDefinition other);
    [CompilerGeneratedAttribute]
public virtual BackingFieldDefinition <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& GlobalizedTypeName, String& Name, Accessibility& Accessibility, String& ComponentName);
}
internal interface Uno.UI.SourceGenerators.XamlGenerator.IXamlLocation {
    public int LineNumber { get; }
    public int LinePosition { get; public set; }
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
    public abstract virtual void set_LinePosition(int value);
}
internal class Uno.UI.SourceGenerators.XamlGenerator.LogicalScope : object {
    [CompilerGeneratedAttribute]
private XamlObjectDefinition <Object>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public XamlObjectDefinition Object { get; public set; }
    public LogicalScope(XamlObjectDefinition Object);
    [CompilerGeneratedAttribute]
protected LogicalScope(LogicalScope original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public XamlObjectDefinition get_Object();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Object(XamlObjectDefinition value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(LogicalScope left, LogicalScope right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(LogicalScope left, LogicalScope right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(LogicalScope other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual LogicalScope <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(XamlObjectDefinition& Object);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.NameScope : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <DeclaredNames>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<BackingFieldDefinition> <BackingFields>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EventHandlerBackingFieldDefinition> <xBindEventsHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ElementStubHolders>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ReferencedElementNames>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Subclass> <Subclasses>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ComponentDefinition> <Components>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XamlObjectDefinition> <XBindExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <XBindTryGetMethodDeclarations>k__BackingField;
    public string Name { get; }
    public string Namespace { get; private set; }
    public string ClassName { get; private set; }
    public HashSet`1<string> DeclaredNames { get; }
    public List`1<BackingFieldDefinition> BackingFields { get; }
    public List`1<EventHandlerBackingFieldDefinition> xBindEventsHandlers { get; }
    public List`1<string> ElementStubHolders { get; }
    public HashSet`1<string> ReferencedElementNames { get; }
    public Dictionary`2<string, Subclass> Subclasses { get; }
    public List`1<ComponentDefinition> Components { get; }
    public List`1<XamlObjectDefinition> XBindExpressions { get; }
    public List`1<string> XBindTryGetMethodDeclarations { get; }
    public int ComponentCount { get; }
    public NameScope(string namespace, string className);
    public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
private void set_ClassName(string value);
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_DeclaredNames();
    [CompilerGeneratedAttribute]
public List`1<BackingFieldDefinition> get_BackingFields();
    [CompilerGeneratedAttribute]
public List`1<EventHandlerBackingFieldDefinition> get_xBindEventsHandlers();
    [CompilerGeneratedAttribute]
public List`1<string> get_ElementStubHolders();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ReferencedElementNames();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Subclass> get_Subclasses();
    [CompilerGeneratedAttribute]
public List`1<ComponentDefinition> get_Components();
    [CompilerGeneratedAttribute]
public List`1<XamlObjectDefinition> get_XBindExpressions();
    [CompilerGeneratedAttribute]
public List`1<string> get_XBindTryGetMethodDeclarations();
    public int get_ComponentCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Uno.UI.SourceGenerators.XamlGenerator.ResourceDetails : object {
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public string Assembly { get; public set; }
    public string FileName { get; public set; }
    public string Key { get; public set; }
    public ResourceDetails(string Assembly, string FileName, string Key);
    [CompilerGeneratedAttribute]
protected ResourceDetails(ResourceDetails original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Key(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ResourceDetails left, ResourceDetails right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ResourceDetails left, ResourceDetails right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ResourceDetails other);
    [CompilerGeneratedAttribute]
public virtual ResourceDetails <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Assembly, String& FileName, String& Key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.ResourceDetailsCollection : object {
    private string _localAssemblyName;
    private Dictionary`2<string, Dictionary`2<string, ResourceDetails>> _resourcesByFileName;
    private Dictionary`2<string, Dictionary`2<string, List`1<ResourceDetails>>> _resourcesByFileNameThenUid;
    [CompilerGeneratedAttribute]
private bool <HasLocalResources>k__BackingField;
    public bool HasLocalResources { get; internal set; }
    public ResourceDetailsCollection(string localAssemblyName);
    [CompilerGeneratedAttribute]
public bool get_HasLocalResources();
    [CompilerGeneratedAttribute]
internal void set_HasLocalResources(bool value);
    public void AddRange(ResourceDetails[] resources);
    internal IEnumerable`1<ResourceDetails> FindByUId(string uid);
    internal ResourceDetails FindByKey(string resourceKey);
    private ValueTuple`2<string, string> ParseXUid(string uid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.Subclass : object {
    [CompilerGeneratedAttribute]
private XamlMemberDefinition <ContentOwner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBindMode>k__BackingField;
    public XamlMemberDefinition ContentOwner { get; }
    public string ReturnType { get; }
    public string DefaultBindMode { get; }
    public Subclass(XamlMemberDefinition contentOwner, string returnType, string defaultBindMode);
    [CompilerGeneratedAttribute]
public XamlMemberDefinition get_ContentOwner();
    [CompilerGeneratedAttribute]
public string get_ReturnType();
    [CompilerGeneratedAttribute]
public string get_DefaultBindMode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.ThirdPartyGenerators.CommunityToolkitMvvm.MvvmTypeProvider : object {
    private XamlCodeGeneration _generation;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IRelayCommandSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IRelayCommandTSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IAsyncRelayCommandSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IAsyncRelayCommandTSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> IRelayCommandSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> IRelayCommandTSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> IAsyncRelayCommandSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> IAsyncRelayCommandTSymbol { get; }
    public MvvmTypeProvider(XamlCodeGeneration generation);
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IRelayCommandSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IRelayCommandTSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IAsyncRelayCommandSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IAsyncRelayCommandTSymbol();
    public sealed virtual ITypeSymbol TryGetType(ITypeSymbol symbol, string memberName);
    private static ITypeSymbol TryGetMvvmObservablePropertyType(ITypeSymbol currentType, string part);
    private ITypeSymbol TryGetMvvmRelayCommandType(ITypeSymbol currentType, string part);
}
[NullableContextAttribute("1")]
internal interface Uno.UI.SourceGenerators.XamlGenerator.ThirdPartyGenerators.ITypeProvider {
    public abstract virtual ITypeSymbol TryGetType(ITypeSymbol symbol, string memberName);
}
internal static class Uno.UI.SourceGenerators.XamlGenerator.Utils.ColorCodeParser : object {
    [NullableContextAttribute("1")]
public static string ParseColorCode(string colorCode);
}
public abstract class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindArgument : XBindNode {
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindAttachedPropertyAccess : XBindPath {
    [CompilerGeneratedAttribute]
private XBindPath <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private XBindPath <PropertyClass>k__BackingField;
    [CompilerGeneratedAttribute]
private XBindIdentifier <PropertyName>k__BackingField;
    public XBindPath Member { get; public set; }
    public XBindPath PropertyClass { get; public set; }
    public XBindIdentifier PropertyName { get; public set; }
    [CompilerGeneratedAttribute]
public XBindPath get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(XBindPath value);
    [CompilerGeneratedAttribute]
public XBindPath get_PropertyClass();
    [CompilerGeneratedAttribute]
public void set_PropertyClass(XBindPath value);
    [CompilerGeneratedAttribute]
public XBindIdentifier get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(XBindIdentifier value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindCast : XBindPath {
    [CompilerGeneratedAttribute]
private XBindPath <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private XBindPath <Type>k__BackingField;
    public XBindPath Expression { get; public set; }
    public XBindPath Type { get; public set; }
    [CompilerGeneratedAttribute]
public XBindPath get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(XBindPath value);
    [CompilerGeneratedAttribute]
public XBindPath get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(XBindPath value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindExpressionInfo : object {
    private int _xBindCounter;
    private string _contextType;
    private string _contextName;
    private bool _isRValue;
    [NullableAttribute("2")]
private string _targetPropertyType;
    [CompilerGeneratedAttribute]
private string <ExpressionBeforeLastNullAccess>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ExpressionAfterLastNullAccess>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<XBindExpressionInfo> <Arguments>k__BackingField;
    public string ExpressionBeforeLastNullAccess { get; public set; }
    [NullableAttribute("2")]
public string ExpressionAfterLastNullAccess { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<XBindExpressionInfo> Arguments { get; public set; }
    public XBindExpressionInfo(int xBindCounter, string contextType, string contextName, bool isRValue, string targetPropertyType);
    [CompilerGeneratedAttribute]
public string get_ExpressionBeforeLastNullAccess();
    [CompilerGeneratedAttribute]
public void set_ExpressionBeforeLastNullAccess(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ExpressionAfterLastNullAccess();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ExpressionAfterLastNullAccess(string value);
    [CompilerGeneratedAttribute]
public List`1<XBindExpressionInfo> get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(List`1<XBindExpressionInfo> value);
    public virtual string ToString();
    private string ToStringRValue();
    private string ToStringLValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindExpressionParser : object {
    private static string XBindSubstitute;
    private static Regex NamedParam;
    private static Regex DocumentPaths;
    private static XBindExpressionParser();
    internal static ValueTuple`4<string, string, ImmutableArray`1<string>, bool> Rewrite(string contextName, string rawFunction, INamedTypeSymbol contextTypeSymbol, INamespaceSymbol globalNamespace, bool isRValue, int xBindCounter, Func`2<string, INamedTypeSymbol> findType, string targetPropertyType);
    internal static string RewriteDocumentPaths(string markup);
    [NullableContextAttribute("2")]
internal static string RestoreSinglePath(string path);
    private static string RewriteParameters(string value);
    private static void GetEncodedPath(String[] parts, int startIndex, Int32& end, String& encodedPath);
    private static int GetFunctionRange(String[] parts, int startIndex);
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindIdentifier : XBindPath {
    [CompilerGeneratedAttribute]
private string <IdentifierText>k__BackingField;
    public string IdentifierText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IdentifierText();
    [CompilerGeneratedAttribute]
public void set_IdentifierText(string value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindIndexerAccess : XBindPath {
    [CompilerGeneratedAttribute]
private XBindPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Index>k__BackingField;
    public XBindPath Path { get; public set; }
    public string Index { get; public set; }
    [CompilerGeneratedAttribute]
public XBindPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(XBindPath value);
    [CompilerGeneratedAttribute]
public string get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(string value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindInvocation : XBindRoot {
    [CompilerGeneratedAttribute]
private XBindPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private XBindArgument[] <Arguments>k__BackingField;
    public XBindPath Path { get; public set; }
    public XBindArgument[] Arguments { get; public set; }
    [CompilerGeneratedAttribute]
public XBindPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(XBindPath value);
    [CompilerGeneratedAttribute]
public XBindArgument[] get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(XBindArgument[] value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindLiteralArgument : XBindArgument {
    [CompilerGeneratedAttribute]
private string <LiteralArgument>k__BackingField;
    public string LiteralArgument { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LiteralArgument();
    [CompilerGeneratedAttribute]
public void set_LiteralArgument(string value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindMemberAccess : XBindPath {
    [CompilerGeneratedAttribute]
private XBindPath <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private XBindIdentifier <Identifier>k__BackingField;
    public XBindPath Path { get; public set; }
    public XBindIdentifier Identifier { get; public set; }
    [CompilerGeneratedAttribute]
public XBindPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(XBindPath value);
    [CompilerGeneratedAttribute]
public XBindIdentifier get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(XBindIdentifier value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public abstract class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindNode : object {
    public string PrettyPrint();
    public abstract virtual void PrettyPrint(StringBuilder sb, int indent);
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindParenthesizedExpression : XBindPath {
    [CompilerGeneratedAttribute]
private XBindPath <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPathlessCast>k__BackingField;
    public XBindPath Expression { get; public set; }
    public bool IsPathlessCast { get; public set; }
    [CompilerGeneratedAttribute]
public XBindPath get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(XBindPath value);
    [CompilerGeneratedAttribute]
public bool get_IsPathlessCast();
    [CompilerGeneratedAttribute]
public void set_IsPathlessCast(bool value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public abstract class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindPath : XBindRoot {
}
public class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindPathArgument : XBindArgument {
    [CompilerGeneratedAttribute]
private XBindPath <Path>k__BackingField;
    public XBindPath Path { get; public set; }
    [CompilerGeneratedAttribute]
public XBindPath get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(XBindPath value);
    public virtual void PrettyPrint(StringBuilder sb, int indent);
}
public abstract class Uno.UI.SourceGenerators.XamlGenerator.Utils.XBindRoot : XBindNode {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlCodeGeneration : object {
    internal static string ParseContextPropertyName;
    internal static string ParseContextPropertyType;
    internal static string ParseContextGetterMethod;
    private static Char[] _commaArray;
    private MSBuildItem[] _xamlSourceFiles;
    private String[] _xamlSourceLinks;
    private string _targetPath;
    private string _defaultLanguage;
    private bool _isWasm;
    private bool _isDesignTimeBuild;
    private string _defaultNamespace;
    private string _excludeXamlNamespaces;
    private string _includeXamlNamespaces;
    private String[] _analyzerSuppressions;
    private MSBuildItem[] _resourceFiles;
    private Dictionary`2<string, String[]> _uiAutomationMappings;
    private string _configuration;
    private bool _isDebug;
    private bool _isHotReloadEnabled;
    private string _projectDirectory;
    private string _projectFullPath;
    private bool _xamlResourcesTrimming;
    private bool _isUnoHead;
    private bool _shouldWriteErrorOnInvalidXaml;
    private RoslynMetadataHelper _metadataHelper;
    private bool _shouldAnnotateGeneratedXaml;
    private bool _isLazyVisualStateManagerEnabled;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private INamedTypeSymbol[] _ambientGlobalResources;
    private bool _isUiAutomationMappingEnabled;
    private bool _enableFuzzyMatching;
    private bool _disableBindableTypeProvidersGeneration;
    private GeneratorExecutionContext _generatorContext;
    private static string WinUIThemeResourcePathSuffixFormatString;
    private static string WinUICompactPathSuffix;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <AssemblyMetadataSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ElementStubSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ContentPresenterSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <StringSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ObjectSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <FrameworkElementSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <UIElementSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <DependencyObjectSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <MarkupExtensionSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <BrushSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ImageSourceSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ImageSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <DependencyObjectParseSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <AndroidContentContextSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <AndroidViewSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IOSViewSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <AppKitViewSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ICollectionSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ICollectionOfTSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IConvertibleSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IListSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IListOfTSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <IDictionaryOfTKeySymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <DataBindingSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <StyleSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <SetterSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ColorSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ColorsSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <FontWeightsSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <SolidColorBrushHelperSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <CreateFromStringAttributeSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <NativePageSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <WindowSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ApplicationSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ResourceDictionarySymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <TextBlockSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <RunSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <SpanSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <BorderSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <SolidColorBrushSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <RowDefinitionSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <ColumnDefinitionSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private Lazy`1<INamedTypeSymbol> <TaskSymbol>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<ITypeProvider> <TypeProviders>k__BackingField;
    private static ConcurrentDictionary`2<ResourceCacheKey, CachedResource> _cachedResources;
    private static TimeSpan _cacheEntryLifetime;
    [NullableAttribute("0")]
private Telemetry _telemetry;
    private bool IsUnoAssembly { get; }
    private bool IsUnoFluentAssembly { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> AssemblyMetadataSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ElementStubSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ContentPresenterSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> StringSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ObjectSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> FrameworkElementSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> UIElementSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> DependencyObjectSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> MarkupExtensionSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> BrushSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ImageSourceSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ImageSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> DependencyObjectParseSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> AndroidContentContextSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> AndroidViewSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> IOSViewSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> AppKitViewSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ICollectionSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ICollectionOfTSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> IConvertibleSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> IListSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> IListOfTSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> IDictionaryOfTKeySymbol { get; }
    internal Lazy`1<INamedTypeSymbol> DataBindingSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> StyleSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> SetterSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ColorSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ColorsSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> FontWeightsSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> SolidColorBrushHelperSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> CreateFromStringAttributeSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> NativePageSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Lazy`1<INamedTypeSymbol> WindowSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ApplicationSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ResourceDictionarySymbol { get; }
    internal Lazy`1<INamedTypeSymbol> TextBlockSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> RunSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> SpanSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> BorderSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> SolidColorBrushSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> RowDefinitionSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> ColumnDefinitionSymbol { get; }
    internal Lazy`1<INamedTypeSymbol> TaskSymbol { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ImmutableArray`1<ITypeProvider> TypeProviders { get; }
    public bool IsRunningCI { get; }
    private bool IsTelemetryEnabled { get; }
    public XamlCodeGeneration(GeneratorExecutionContext context);
    private static XamlCodeGeneration();
    private bool get_IsUnoAssembly();
    private bool get_IsUnoFluentAssembly();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_AssemblyMetadataSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ElementStubSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ContentPresenterSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_StringSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ObjectSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_FrameworkElementSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_UIElementSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_DependencyObjectSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_MarkupExtensionSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_BrushSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ImageSourceSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ImageSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_DependencyObjectParseSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_AndroidContentContextSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_AndroidViewSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IOSViewSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_AppKitViewSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ICollectionSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ICollectionOfTSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IConvertibleSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IListSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IListOfTSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_IDictionaryOfTKeySymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_DataBindingSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_StyleSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_SetterSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ColorSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ColorsSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_FontWeightsSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_SolidColorBrushHelperSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_CreateFromStringAttributeSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_NativePageSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_WindowSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ApplicationSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ResourceDictionarySymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_TextBlockSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_RunSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_SpanSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_BorderSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_SolidColorBrushSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_RowDefinitionSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_ColumnDefinitionSymbol();
    [CompilerGeneratedAttribute]
internal Lazy`1<INamedTypeSymbol> get_TaskSymbol();
    [CompilerGeneratedAttribute]
internal ImmutableArray`1<ITypeProvider> get_TypeProviders();
    private Lazy`1<INamedTypeSymbol> GetMandatorySymbolAsLazy(string fullyQualifiedName);
    internal Lazy`1<INamedTypeSymbol> GetOptionalSymbolAsLazy(string fullyQualifiedName);
    private Lazy`1<INamedTypeSymbol> GetSpecialTypeSymbolAsLazy(SpecialType specialType);
    private static bool IsWinUIItem(MSBuildItem item);
    private IEnumerable`1<MSBuildItem> GetWinUIItems(string name);
    private string GetSourceLink(MSBuildItem projectItemInstance);
    public List`1<KeyValuePair`2<string, SourceText>> Generate();
    private void TryGenerateUnoResourcesKeyAttribute(ResourceDetailsCollection resourceDetailsCollection);
    private List`1<KeyValuePair`2<string, SourceText>> ProcessParsingException(Exception e);
    private Location GetExceptionFileLocation(Exception exception);
    private XamlGlobalStaticResourcesMap BuildAssemblyGlobalStaticResourcesMap(XamlFileDefinition[] filesFull, String[] links);
    private void BuildAmbientResources();
    private ResourceDetailsCollection BuildResourceDetails(CancellationToken ct);
    private ResourceDetails[] BuildLocalResourceDetails(CancellationToken ct);
    private SourceText GenerateGlobalResources(IEnumerable`1<XamlFileDefinition> files, XamlGlobalStaticResourcesMap map);
    private static bool IsResourceDictionary(XamlFileDefinition fileDefinition);
    private static void ScavengeCache();
    public bool get_IsRunningCI();
    private void InitTelemetry(GeneratorExecutionContext context);
    private bool get_IsTelemetryEnabled();
    private void TrackGenerationDone(TimeSpan elapsed);
    [NullableContextAttribute("0")]
private void TrackGenerationFailed(Exception exception, TimeSpan elapsed);
    [NullableContextAttribute("0")]
private void TrackStartGeneration(XamlFileDefinition[] files);
    [NullableContextAttribute("0")]
private string BuildIDEName();
    [NullableContextAttribute("0")]
private string BuildUnoRuntimeValue();
    [IteratorStateMachineAttribute("Uno.UI.SourceGenerators.XamlGenerator.XamlCodeGeneration/<<ProcessParsingException>g__Flatten|179_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<Exception> <ProcessParsingException>g__Flatten|179_0(Exception ex);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType0`2<MetadataReference, IAssemblySymbol> <BuildAmbientResources>b__182_0(MetadataReference ext);
}
public static class Uno.UI.SourceGenerators.XamlGenerator.XamlCodeGenerationDiagnostics : object {
    internal static string Title;
    internal static string MessageFormat;
    internal static string XamlGenerationFailureDescription;
    internal static string XamlCategory;
    internal static string ResourcesCategory;
    public static DiagnosticDescriptor GenericXamlErrorRule;
    public static DiagnosticDescriptor GenericXamlWarningRule;
    public static DiagnosticDescriptor ResourceParsingFailureRule;
    private static XamlCodeGenerationDiagnostics();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[GeneratorAttribute]
public class Uno.UI.SourceGenerators.XamlGenerator.XamlCodeGenerator : object {
    private static long _instanceId;
    public sealed virtual void Initialize(GeneratorInitializationContext context);
    public sealed virtual void Execute(GeneratorExecutionContext context);
    private void DumpXamlSourceGeneratorState(GeneratorExecutionContext context, List`1<KeyValuePair`2<string, SourceText>> generatedSources);
    private string MakeRunId();
    private void DumpCommandLine(string basePath);
    private void DumpMSBuildProperties(string basePath, GeneratorExecutionContext context);
    private void DumpMSBuildItems(string basePath, GeneratorExecutionContext context);
    private void DumpGeneratedSourceFiles(string sourcesPath, List`1<KeyValuePair`2<string, SourceText>> generatedSources);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Uno.UI.SourceGenerators.XamlGenerator.XamlConstants : object {
    public static string XamlXmlNamespace;
    public static string PresentationXamlXmlNamespace;
    public static string XmlXmlNamespace;
    public static string BundleResourcePrefix;
    public static string RootFoundationNamespace;
    public static string RootWUINamespace;
    public static string RootMUINamespace;
    public static string BaseXamlNamespace;
    public static string UnoXamlNamespace;
    public static int MaxFluentResourcesVersion;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlFileDefinition : object {
    [CompilerGeneratedAttribute]
private List`1<NamespaceDeclaration> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XamlObjectDefinition> <Objects>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Checksum>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SourceLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueID>k__BackingField;
    private string SanitizedFileName { get; }
    public List`1<NamespaceDeclaration> Namespaces { get; private set; }
    public List`1<XamlObjectDefinition> Objects { get; private set; }
    public string FilePath { get; }
    public string Checksum { get; }
    [NullableAttribute("2")]
public string SourceLink { get; internal set; }
    public string TargetFilePath { get; }
    public string UniqueID { get; }
    public XamlFileDefinition(string file, string targetFilePath, ImmutableArray`1<byte> checksum);
    private string get_SanitizedFileName();
    [CompilerGeneratedAttribute]
public List`1<NamespaceDeclaration> get_Namespaces();
    [CompilerGeneratedAttribute]
private void set_Namespaces(List`1<NamespaceDeclaration> value);
    [CompilerGeneratedAttribute]
public List`1<XamlObjectDefinition> get_Objects();
    [CompilerGeneratedAttribute]
private void set_Objects(List`1<XamlObjectDefinition> value);
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public string get_Checksum();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SourceLink();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_SourceLink(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFilePath();
    [CompilerGeneratedAttribute]
public string get_UniqueID();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(XamlFileDefinition other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlFileGenerator : object {
    private static string GlobalPrefix;
    private static string QualifiedNamespaceMarker;
    private static Char[] _dotArray;
    private static Char[] _parenthesesArray;
    private static Dictionary`2<string, String[]> _knownNamespaces;
    private static String[] FrameworkTemplateTypes;
    private Dictionary`2<string, XamlObjectDefinition> _namedResources;
    private List`1<string> _partials;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<ValueTuple`2<string, string>, string> _topLevelQualifiedKeys;
    private Stack`1<NameScope> _scopeStack;
    private Stack`1<LogicalScope> _logicalScopeStack;
    private Stack`1<XLoadScope> _xLoadScopeStack;
    private int _resourceOwner;
    private XamlFileDefinition _fileDefinition;
    private string _defaultNamespace;
    private RoslynMetadataHelper _metadataHelper;
    private string _fileUniqueId;
    private String[] _analyzerSuppressions;
    private ResourceDetailsCollection _resourceDetailsCollection;
    private int _applyIndex;
    private int _collectionIndex;
    private int _subclassIndex;
    private int _dictionaryPropertyIndex;
    private int _xBindCounter;
    [NullableAttribute("2")]
private string _themeDictionaryCurrentlyBuilding;
    private XamlGlobalStaticResourcesMap _globalStaticResourcesMap;
    private bool _isUiAutomationMappingEnabled;
    private Dictionary`2<string, String[]> _uiAutomationMappings;
    private string _defaultLanguage;
    private bool _isHotReloadEnabled;
    private bool _isInsideMainAssembly;
    private bool _isDesignTimeBuild;
    private string _relativePath;
    private Dictionary`2<string, List`1<XamlObjectDefinition>> _nameCache;
    private bool _isTopLevelDictionary;
    private bool _isUnoAssembly;
    private bool _isUnoFluentAssembly;
    private bool _isLazyVisualStateManagerEnabled;
    private bool _enableFuzzyMatching;
    private bool _xamlResourcesTrimming;
    private bool _isInChildSubclass;
    private bool _isInSingletonInstance;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Stack`1<INamedTypeSymbol> _currentStyleTargetTypeStack;
    private GeneratorExecutionContext _generatorContext;
    private Stack`1<string> _currentDefaultBindMode;
    private IDictionary`2<INamedTypeSymbol, XamlType> _xamlTypeToXamlTypeBaseMap;
    private String[] _includeXamlNamespaces;
    private bool _disableBindableTypeProvidersGeneration;
    private Dictionary`2<string, int> _xamlAppliedTypes;
    private bool _isWasm;
    private bool _shouldAnnotateGeneratedXaml;
    private static Regex splitRegex;
    private static string DictionaryProviderInterfaceName;
    [CompilerGeneratedAttribute]
private XamlCodeGeneration <Generation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldWriteErrorOnInvalidXaml>k__BackingField;
    private static Char[] ResourceInvalidCharacters;
    private StringBuilder _keyRewriteBuilder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<string, INamedTypeSymbol> _findType;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`2<XamlType, INamedTypeSymbol> _findTypeByXamlType;
    [NullableAttribute("2")]
private XClassName _xClassName;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _clrNamespaces;
    [NullableAttribute("2")]
private INamedTypeSymbol CurrentStyleTargetType { get; }
    private string ParseContextPropertyAccess { get; }
    private string SingletonInstanceAccess { get; }
    private string SingletonClassName { get; }
    public XamlCodeGeneration Generation { get; }
    public bool ShouldWriteErrorOnInvalidXaml { get; }
    private NameScope CurrentScope { get; }
    [NullableAttribute("2")]
private XLoadScope CurrentXLoadScope { get; }
    [NullableAttribute("2")]
private string CurrentResourceOwner { get; }
    private string CurrentResourceOwnerName { get; }
    public bool HasImplicitViewPinning { get; }
    public XamlFileGenerator(XamlCodeGeneration generation, XamlFileDefinition file, string targetPath, string defaultNamespace, RoslynMetadataHelper metadataHelper, string fileUniqueId, String[] analyzerSuppressions, ResourceDetailsCollection resourceDetailsCollection, XamlGlobalStaticResourcesMap globalStaticResourcesMap, bool isUiAutomationMappingEnabled, Dictionary`2<string, String[]> uiAutomationMappings, string defaultLanguage, bool shouldWriteErrorOnInvalidXaml, bool isWasm, bool isHotReloadEnabled, bool isDesignTimeBuild, bool isInsideMainAssembly, bool shouldAnnotateGeneratedXaml, bool isUnoAssembly, bool isUnoFluentAssembly, bool isLazyVisualStateManagerEnabled, bool enableFuzzyMatching, bool disableBindableTypeProvidersGeneration, GeneratorExecutionContext generatorContext, bool xamlResourcesTrimming, IDictionary`2<INamedTypeSymbol, XamlType> xamlTypeToXamlTypeBaseMap, String[] includeXamlNamespaces);
    private static XamlFileGenerator();
    [NullableContextAttribute("2")]
private INamedTypeSymbol get_CurrentStyleTargetType();
    private string get_ParseContextPropertyAccess();
    private string get_SingletonInstanceAccess();
    private string get_SingletonClassName();
    [CompilerGeneratedAttribute]
public XamlCodeGeneration get_Generation();
    [CompilerGeneratedAttribute]
public bool get_ShouldWriteErrorOnInvalidXaml();
    public SourceText GenerateFile();
    private void TryGenerateWarningForInconsistentBaseType(IndentedStringBuilder writer, XamlObjectDefinition topLevelControl);
    private SourceText InnerGenerateFile();
    private void BuildBaseUri(IIndentedStringBuilder writer);
    private void BuildInitializeComponent(IndentedStringBuilder writer, XamlObjectDefinition topLevelControl, INamedTypeSymbol controlBaseType);
    private void BuildXamlApplyBlocks(IndentedStringBuilder writer);
    private void BuildApplicationInitializerBody(IndentedStringBuilder writer, XamlObjectDefinition topLevelControl);
    private void ApplyFontsOverride(IndentedStringBuilder writer);
    private void BuildDrawableResourcesIdResolver(IndentedStringBuilder writer);
    private void GenerateApiExtensionRegistrations(IndentedStringBuilder writer);
    private void InitializeRemoteControlClient(IndentedStringBuilder writer);
    private static bool IsInsideUnoSolution(GeneratorExecutionContext context);
    private void GenerateResourceLoader(IndentedStringBuilder writer);
    private void BuildResourceLoaderFromAssembly(IndentedStringBuilder writer, IAssemblySymbol assembly);
    private void BuildGenericControlInitializerBody(IndentedStringBuilder writer, XamlObjectDefinition topLevelControl);
    private void BuildPartials(IIndentedStringBuilder writer);
    private void BuildXBindTryGetDeclarations(IIndentedStringBuilder writer);
    private void BuildBackingFields(IIndentedStringBuilder writer);
    [NullableContextAttribute("2")]
private static string SanitizeResourceName(string name);
    private void BuildChildSubclasses(IIndentedStringBuilder writer, bool isTopLevel);
    private void TrySetOriginalSourceLocation(IIndentedStringBuilder writer, string element, int lineNumber, int linePosition);
    private void TryBuildElementStubHolders(IIndentedStringBuilder writer);
    private ValueTuple`2<string, string> GetBindingsTypeNames(string className);
    private void BuildCompiledBindingsInitializer(IndentedStringBuilder writer, INamedTypeSymbol controlBaseType);
    private void BuildCompiledBindingsInitializerForTemplate(IIndentedStringBuilder writer);
    private void BuildxBindEventHandlerInitializers(IIndentedStringBuilder writer, List`1<EventHandlerBackingFieldDefinition> xBindEventsHandlers, string prefix);
    private void BuildComponentResouceBindingUpdates(IIndentedStringBuilder writer);
    private void BuildComponentFields(IIndentedStringBuilder writer);
    private void BuildCompiledBindings(IndentedStringBuilder writer);
    private void BuildTopLevelResourceDictionary(IIndentedStringBuilder writer, XamlObjectDefinition topLevelControl);
    private void WriteMetadataNewTypeAttribute(IIndentedStringBuilder writer);
    private void BuildTopLevelResourceDictionaryInitializers(IIndentedStringBuilder writer, XamlObjectDefinition dictionaryObject);
    private void BuildStaticResourceResourceKeyReference(IIndentedStringBuilder writer, XamlObjectDefinition resourceDefinition);
    private string GetInitializerNameForResourceKey(int index);
    private string GetDictionaryResourceKey(XamlObjectDefinition resource);
    [NullableContextAttribute("2")]
private string GetDictionaryResourceKey(XamlObjectDefinition resource, String& name);
    [NullableContextAttribute("2")]
private static string GetExplicitDictionaryResourceKey(XamlObjectDefinition resource, String& name);
    private string GetImplicitDictionaryResourceKey(XamlObjectDefinition resource);
    private bool BuildDefaultStylesRegistration(IIndentedStringBuilder writer, XamlMemberDefinition resourcesRoot);
    private bool IsNativeStyle(XamlObjectDefinition style);
    private void InitializeAndBuildResourceDictionary(IIndentedStringBuilder writer, XamlObjectDefinition topLevelControl, bool setIsParsing);
    private void BuildTypedResourceDictionary(IIndentedStringBuilder writer, XamlObjectDefinition topLevelControl);
    private void BuildResourceDictionaryBackingClass(IIndentedStringBuilder writer, XamlObjectDefinition topLevelControl);
    private void BuildSingleTimeInitializer(IIndentedStringBuilder writer, string initializerName, Action propertyBodyBuilder);
    private void BuildSourceLineInfo(IIndentedStringBuilder writer, XamlObjectDefinition definition);
    private void BuildNamedResources(IIndentedStringBuilder writer, IEnumerable`1<KeyValuePair`2<string, XamlObjectDefinition>> namedResources);
    private void GenerateError(IIndentedStringBuilder writer, string message);
    private void GenerateError(IIndentedStringBuilder writer, string message, Object[] options);
    private void GenerateSilentWarning(IIndentedStringBuilder writer, string message, Object[] options);
    [NullableContextAttribute("2")]
private bool HasMarkupExtension(XamlMemberDefinition valueNode);
    private static bool HasXNameProperty(XamlMemberDefinition m);
    private bool HasCustomMarkupExtension(XamlMemberDefinition valueNode);
    private bool HasBindingMarkupExtension(XamlMemberDefinition valueNode);
    private bool HasXBindMarkupExtension(XamlObjectDefinition objectDefinition);
    private bool HasMarkupExtensionNeedingComponent(XamlObjectDefinition objectDefinition);
    private bool HasDescendantsWithMarkupExtension(XamlObjectDefinition xamlObjectDefinition);
    private bool HasDescendantsWithXName(XamlMemberDefinition memberDefinition);
    private bool HasDescendantsWith(XamlObjectDefinition xamlObjectDefinition, Func`2<XamlMemberDefinition, bool> predicate);
    [NullableContextAttribute("2")]
private INamedTypeSymbol GetMarkupExtensionType(XamlType xamlType);
    [NullableContextAttribute("2")]
private bool IsCustomMarkupExtensionType(XamlType xamlType);
    [NullableContextAttribute("2")]
private bool IsXamlTypeConverter(INamedTypeSymbol symbol);
    private string BuildXamlTypeConverterLiteralValue(INamedTypeSymbol symbol, string memberValue, bool includeQuotations);
    private XamlMemberDefinition FindMember(XamlObjectDefinition xamlObjectDefinition, string memberName);
    private XamlMemberDefinition FindMember(XamlObjectDefinition xamlObjectDefinition, string memberName, string ns);
    private XamlMemberDefinition GetMember(XamlObjectDefinition xamlObjectDefinition, string memberName);
    private XClassName GetClassName(XamlObjectDefinition control);
    private XClassName FindClassName(XamlObjectDefinition control);
    internal static INamedTypeSymbol FindClassSymbol(XamlObjectDefinition control, RoslynMetadataHelper metadataHelper);
    [MemberNotNullAttribute("_xClassName")]
private void EnsureXClassName();
    private bool BuildProperties(IIndentedStringBuilder writer, XamlObjectDefinition topLevelControl, bool isInline, string closureName, bool useBase);
    private IPropertySymbol FindContentProperty(INamedTypeSymbol elementType);
    private INamedTypeSymbol GetAttachedPropertyType(INamedTypeSymbol type, string propertyName);
    private bool IsTypeImplemented(INamedTypeSymbol type);
    private string GetFullGenericTypeName(INamedTypeSymbol propertyType);
    [NullableContextAttribute("2")]
private bool IsPage(INamedTypeSymbol symbol);
    [NullableContextAttribute("2")]
private bool IsWindow(INamedTypeSymbol symbol);
    private bool IsApplication(INamedTypeSymbol symbol);
    private bool IsResourceDictionary(XamlType xamlType);
    private bool IsResourceDictionarySubclass(XamlType xamlType);
    private XamlMemberDefinition FindImplicitContentMember(XamlObjectDefinition topLevelControl, string memberName);
    private void RegisterAndBuildResources(IIndentedStringBuilder writer, XamlObjectDefinition topLevelControl, bool isInInitializer);
    [NullableContextAttribute("2")]
private void BuildResourceDictionary(IIndentedStringBuilder writer, XamlMemberDefinition resourcesRoot, bool isInInitializer, string dictIdentifier);
    private IDisposable TryTernaryForLinkerHint(IIndentedStringBuilder writer, XamlObjectDefinition resource);
    private IDisposable TrySingleLineIfForLinkerHint(IIndentedStringBuilder writer, XamlObjectDefinition resource);
    private IDisposable TryLinkerHint(XamlObjectDefinition resource, Action`1<string> prefix, Action suffix);
    private bool ShouldLazyInitializeResource(XamlObjectDefinition resource);
    private IDisposable BuildLazyResourceInitializer(IIndentedStringBuilder writer);
    [NullableContextAttribute("2")]
private void BuildMergedDictionaries(IIndentedStringBuilder writer, XamlMemberDefinition mergedDictionaries, bool isInInitializer, string dictIdentifier, bool isSetExtensionMethod);
    [NullableContextAttribute("2")]
private void BuildThemeDictionaries(IIndentedStringBuilder writer, XamlMemberDefinition themeDictionaries, bool isInInitializer, string dictIdentifier, bool isSetExtensionMethod);
    private void BuildDictionaryCollection(IIndentedStringBuilder writer, XamlMemberDefinition dictionaries, bool isInInitializer, string propertyName, bool isDict, string dictIdentifier, bool isSetExtensionMethod);
    private void BuildDictionaryFromSource(IIndentedStringBuilder writer, XamlMemberDefinition sourceDef, XamlObjectDefinition dictObject);
    [NullableContextAttribute("2")]
private bool IsTextBlock(INamedTypeSymbol symbol);
    private void TryExtractAutomationId(XamlMemberDefinition member, String[] targetMembers, String& uiAutomationId);
    private void BuildExtendedProperties(IIndentedStringBuilder outerwriter, XamlObjectDefinition objectDefinition, bool useGenericApply);
    private static bool IsNotFrameworkElementButNeedsSourceLocation(XamlObjectDefinition objectDefinition);
    [NullableContextAttribute("2")]
private void ValidateName(string value);
    [NullableContextAttribute("2")]
private IPropertySymbol FindLazyContentProperty(XamlMemberDefinition implicitContentChild, INamedTypeSymbol elementType);
    private bool IsXLoadMember(XamlMemberDefinition member);
    private void GenerateInlineEvent(string closureName, IIndentedStringBuilder writer, XamlMemberDefinition member, IEventSymbol eventSymbol, ComponentDefinition componentDefinition);
    private void BuildInlineLocalizedProperties(IIndentedStringBuilder writer, XamlObjectDefinition objectDefinition, INamedTypeSymbol objectDefinitionType, bool isInInitializer);
    private void BuildStatementLocalizedProperties(IIndentedStringBuilder writer, XamlObjectDefinition objectDefinition, string closureName);
    private void TryValidateContentPresenterBinding(IIndentedStringBuilder writer, XamlObjectDefinition objectDefinition, XamlMemberDefinition member);
    private void BuildUiAutomationId(IIndentedStringBuilder writer, string closureName, string uiAutomationId, XamlObjectDefinition parent);
    private bool IsRelativePanelSiblingProperty(string name);
    private void BuildSetAttachedProperty(IIndentedStringBuilder writer, string closureName, XamlMemberDefinition member, string objectUid, bool isCustomMarkupExtension, INamedTypeSymbol propertyType);
    private XamlLazyApplyBlockIIndentedStringBuilder CreateApplyBlock(IIndentedStringBuilder writer, INamedTypeSymbol appliedType, String& closureName);
    private void RegisterPartial(string format, Object[] values);
    private void RegisterXBindTryGetDeclaration(string declaration);
    private void RegisterBackingField(string globalizedType, string name, Accessibility accessibility);
    private void RegisterChildSubclass(string name, XamlMemberDefinition owner, string returnType);
    [NullableContextAttribute("2")]
private void BuildComplexPropertyValue(IIndentedStringBuilder writer, XamlMemberDefinition member, string prefix, string closureName, bool generateAssignation, ComponentDefinition componentDefinition);
    private static string GetCustomResourceRetrieval(object customResourceResourceId, string typeStr);
    [NullableContextAttribute("2")]
private static object GetCustomResourceResourceId(XamlMemberDefinition member);
    private string BuildXBindEvalFunction(XamlMemberDefinition member, XamlObjectDefinition bindNode);
    private ITypeSymbol GetXBindPropertyPathType(string propertyPath, INamedTypeSymbol rootType);
    private string RewriteNamespaces(string xamlString);
    private string GetDefaultBindMode();
    private string BuildMemberPropertyValue(XamlMemberDefinition m, bool isTemplateBindingAttachedProperty, string closure);
    private string GetCustomMarkupExtensionValue(XamlMemberDefinition member, string target);
    [NullableContextAttribute("2")]
private ValueTuple`2<bool, XamlObjectDefinition> IsMemberInsideDataTemplate(XamlObjectDefinition xamlObject);
    [NullableContextAttribute("2")]
private ValueTuple`2<bool, XamlObjectDefinition> IsMemberInsideFrameworkTemplate(XamlObjectDefinition xamlObject);
    private ValueTuple`2<bool, XamlObjectDefinition> IsMemberInsideResourceDictionary(XamlObjectDefinition xamlObject, Nullable`1<int> maxDepth);
    private static ValueTuple`2<bool, XamlObjectDefinition> IsMemberInside(XamlObjectDefinition xamlObject, string typeName, Nullable`1<int> maxDepth);
    private ValueTuple`2<string, bool> GetStaticResourceKey(XamlMemberDefinition member);
    [NullableContextAttribute("2")]
private string GetSimpleStaticResourceRetrieval(XamlMemberDefinition member, INamedTypeSymbol targetPropertyType);
    [NullableContextAttribute("2")]
private string GetSimpleStaticResourceRetrieval(INamedTypeSymbol targetPropertyType, string keyStr);
    private string GetResourceDictionaryInitializerName(string keyStr);
    private INamedTypeSymbol FindUnderlyingType(INamedTypeSymbol propertyType);
    private string BuildLiteralValue(INamedTypeSymbol propertyType, bool isTemplateBindingAttachedProperty, string memberValue, XamlMemberDefinition owner, string memberName, string objectUid);
    [NullableContextAttribute("2")]
private INamedTypeSymbol FindFirstConcreteAncestorType(XamlObjectDefinition objectDefinition);
    private string BuildLocalizedResourceValue(INamedTypeSymbol owner, string memberName, string objectUid);
    private string RewriteResourceKeyName(string keyName);
    private bool IsPropertyLocalized(XamlObjectDefinition obj, string propertyName);
    private string ParseCacheMode(string memberValue);
    private string BuildTargetPropertyPath(string target, XamlMemberDefinition owner);
    [NullableContextAttribute("2")]
private static string DoubleEscape(string thisString);
    private static string ParseTimeSpan(string memberValue);
    private static string BuildGridLength(string memberValue);
    private string BuildLiteralValue(XamlMemberDefinition member, INamedTypeSymbol propertyType, XamlMemberDefinition owner, string objectUid, bool isTemplateBindingAttachedProperty);
    private string BuildFontWeight(string memberValue);
    private INamedTypeSymbol GetDependencyPropertyTypeForSetter(string property);
    private string BuildDependencyProperty(string property);
    private string BuildBrush(string memberValue);
    private static string BuildThickness(string memberValue);
    private static string BuildCornerRadius(string memberValue);
    private static string ReplaceWhitespaceByCommas(string memberValue);
    private static string AppendFloatSuffix(string memberValue);
    private string BuildColor(string memberValue);
    private string BuildBindingOption(XamlMemberDefinition m, INamedTypeSymbol propertyType, bool isTemplateBindingAttachedProperty);
    private string RewriteAttachedPropertyPath(string value);
    private void BuildLiteralProperties(IIndentedStringBuilder writer, XamlObjectDefinition objectDefinition, string closureName);
    private void BuildLiteralLazyVisualStateManagerProperties(IIndentedStringBuilder writer, XamlObjectDefinition objectDefinition, string closureName);
    private void BuildLiteralPropertiesWithFilter(IIndentedStringBuilder writer, XamlObjectDefinition objectDefinition, string closureName, IEnumerable`1<XamlMemberDefinition> extendedProperties, Func`2<XamlMemberDefinition, bool> propertyPredicate);
    private bool IsLazyVisualStateManagerProperty(XamlMemberDefinition member);
    private bool IsLazyVisualStateManagerProperty(IPropertySymbol property);
    private bool IsInlineCollection(XamlMember member, IEnumerable`1<XamlObjectDefinition> elements);
    [NullableContextAttribute("2")]
private static bool IsLocalizedString(INamedTypeSymbol propertyType, string objectUid);
    [NullableContextAttribute("2")]
internal static bool IsLocalizablePropertyType(INamedTypeSymbol propertyType);
    private string GetObjectUid(XamlObjectDefinition objectDefinition);
    [NullableContextAttribute("2")]
private bool GetKnownNewableListOrCollectionInterface(INamedTypeSymbol type, String& newableTypeName);
    private IEnumerable`1<XamlMemberDefinition> GetExtendedProperties(XamlObjectDefinition objectDefinition);
    private static bool IsNewScope(XamlObjectDefinition xamlObjectDefinition);
    private void BuildChild(IIndentedStringBuilder writer, XamlMemberDefinition owner, XamlObjectDefinition xamlObjectDefinition, string outerClosure);
    private bool IsLegacySetter(XamlObjectDefinition xamlObjectDefinition, String& propertyName);
    private void TrySetParsing(IIndentedStringBuilder writer, INamedTypeSymbol type, bool isInitializer);
    private bool HasChildrenWithPhase(XamlObjectDefinition xamlObjectDefinition);
    private string GenerateRootPhases(XamlObjectDefinition xamlObjectDefinition, string ownerVariable);
    [NullableContextAttribute("2")]
private XamlObjectDefinition GetControlOwner(XamlObjectDefinition owner);
    private void BuildNameCache(XamlObjectDefinition topLevelControl);
    private List`1<string> FindNamesIn(XamlObjectDefinition xamlObjectDefinition);
    private XamlObjectDefinition FindSubElementByName(XamlObjectDefinition xamlObject, string elementName);
    [IteratorStateMachineAttribute("Uno.UI.SourceGenerators.XamlGenerator.XamlFileGenerator/<EnumerateSubElements>d__241")]
private IEnumerable`1<XamlObjectDefinition> EnumerateSubElements(XamlObjectDefinition xamlObject, Func`2<XamlObjectDefinition, bool> stoppingCondition);
    [IteratorStateMachineAttribute("Uno.UI.SourceGenerators.XamlGenerator.XamlFileGenerator/<EnumerateSubElements>d__242")]
private IEnumerable`1<XamlObjectDefinition> EnumerateSubElements(IEnumerable`1<XamlObjectDefinition> objects, Func`2<XamlObjectDefinition, bool> stoppingCondition);
    private IDisposable TryGenerateDeferedLoadStrategy(IIndentedStringBuilder writer, INamedTypeSymbol targetType, XamlObjectDefinition definition);
    [NullableContextAttribute("2")]
private IDisposable TrySetDefaultBindMode(XamlObjectDefinition xamlObjectDefinition, string ambientDefaultBindMode);
    private IDisposable TryAdaptNative(IIndentedStringBuilder writer, XamlObjectDefinition xamlObjectDefinition, INamedTypeSymbol targetType);
    private void BuildChildThroughSubclass(IIndentedStringBuilder writer, XamlMemberDefinition contentOwner, string returnType);
    private string GenerateConstructorParameters(INamedTypeSymbol type);
    [NullableContextAttribute("2")]
private bool HasCustomInitializer(INamedTypeSymbol propertyType);
    private void BuildInitializer(IIndentedStringBuilder writer, XamlObjectDefinition xamlObjectDefinition, XamlMemberDefinition owner);
    private string GetFloatingPointLiteral(string memberValue, INamedTypeSymbol type, XamlMemberDefinition owner);
    private static string IgnoreStartingFromFirstSpaceIgnoreLeading(string value);
    private string ValidatePropertyType(INamedTypeSymbol propertyType, XamlMemberDefinition owner);
    private NameScope get_CurrentScope();
    private IDisposable Scope(string namespace, string className);
    private ComponentDefinition GetOrAddComponentForCurrentScope(XamlObjectDefinition objectDefinition);
    private ComponentDefinition AddComponentForCurrentScope(XamlObjectDefinition objectDefinition);
    private ComponentDefinition AddComponentForParentScope(XamlObjectDefinition objectDefinition);
    private void AddXBindEventHandlerToScope(string fieldName, string ownerTypeName, INamedTypeSymbol declaringType, ComponentDefinition componentDefinition);
    [NullableContextAttribute("2")]
private XLoadScope get_CurrentXLoadScope();
    private IDisposable XLoadScope();
    [NullableContextAttribute("2")]
private string get_CurrentResourceOwner();
    private string get_CurrentResourceOwnerName();
    public bool get_HasImplicitViewPinning();
    private IDisposable ResourceOwnerScope();
    [NullableContextAttribute("2")]
private void TryAnnotateWithGeneratorSource(IIndentedStringBuilder writer, string suffix, string callerName, int lineNumber);
    [NullableContextAttribute("2")]
private void TryAnnotateWithGeneratorSource(String& str, string suffix, string callerName, int lineNumber);
    [NullableContextAttribute("2")]
private static string GetGeneratorSourceAnnotation(string callerName, int lineNumber, string suffix);
    private IDisposable LogicalScope(XamlObjectDefinition o);
    private void InitCaches();
    private string GetGlobalizedTypeName(string fullTargetType);
    private bool IsType(XamlType xamlType, XamlType baseType);
    private bool IsType(XamlType xamlType, ISymbol typeSymbol);
    private bool IsAssignableTo(XamlType xamlType, ISymbol typeSymbol);
    [NullableContextAttribute("2")]
private static bool IsType(INamedTypeSymbol namedTypeSymbol, ISymbol typeSymbol);
    public bool HasProperty(XamlType xamlType, string propertyName);
    [NullableContextAttribute("2")]
private bool IsRun(INamedTypeSymbol symbol);
    [NullableContextAttribute("2")]
private bool IsSpan(INamedTypeSymbol symbol);
    [NullableContextAttribute("2")]
private bool IsImplementingInterface(INamedTypeSymbol symbol, INamedTypeSymbol interfaceName);
    [NullableContextAttribute("2")]
private bool IsBorder(INamedTypeSymbol symbol);
    private bool IsFrameworkElement(XamlType xamlType);
    private bool IsAndroidView(XamlType xamlType);
    private bool IsIOSUIView(XamlType xamlType);
    private bool IsMacOSNSView(XamlType xamlType);
    private bool IsDependencyObject(XamlObjectDefinition component);
    [NullableContextAttribute("2")]
private bool IsUIElement(INamedTypeSymbol symbol);
    private bool IsNativeView(XamlType xamlType);
    [NullableContextAttribute("2")]
private bool IsManagedViewBaseType(INamedTypeSymbol targetType);
    private static bool IsDependencyProperty(INamedTypeSymbol propertyOwner, string name);
    [NullableContextAttribute("2")]
private bool HasIsParsing(INamedTypeSymbol type);
    private Accessibility FindObjectFieldAccessibility(XamlObjectDefinition objectDefinition);
    private string FormatAccessibility(Accessibility accessibility);
    private INamedTypeSymbol GetPropertyTypeByOwnerSymbol(INamedTypeSymbol ownerType, string propertyName, int lineNumber, int linePosition, string caller);
    private ISymbol FindProperty(XamlMember xamlMember);
    private INamedTypeSymbol FindPropertyType(XamlMember xamlMember);
    private bool IsAttachedProperty(XamlMemberDefinition member);
    private bool IsAttachedProperty(INamedTypeSymbol declaringType, string name);
    [NullableContextAttribute("2")]
private static bool IsRelevantNamespace(string xamlNamespace);
    private static bool IsRelevantProperty(XamlMember member, XamlObjectDefinition objectDefinition);
    private INamedTypeSymbol GetAttachedPropertyType(XamlMemberDefinition member);
    private bool IsInitializableCollection(XamlMember xamlMember);
    private bool IsInitializableCollection(XamlType declaringType, string propertyName);
    private bool IsInitializableProperty(IPropertySymbol property);
    private bool IsNewableProperty(IPropertySymbol property, String& newableTypeName);
    [NullableContextAttribute("2")]
private bool IsCollectionOrListType(INamedTypeSymbol propertyType);
    [NullableContextAttribute("2")]
private bool IsDictionary(INamedTypeSymbol propertyType);
    private bool IsExactlyCollectionOrListType(INamedTypeSymbol type);
    private bool IsInitializableCollection(XamlObjectDefinition definition, INamedTypeSymbol type);
    private IPropertySymbol GetPropertyWithName(XamlType declaringType, string propertyName);
    private static bool IsDouble(string typeName);
    private static bool IsString(XamlObjectDefinition xamlObjectDefinition);
    private static bool IsPrimitive(XamlObjectDefinition xamlObjectDefinition);
    private static bool HasInitializer(XamlObjectDefinition objectDefinition);
    private INamedTypeSymbol FindType(string name);
    [NullableContextAttribute("2")]
private INamedTypeSymbol FindType(XamlType type);
    private INamedTypeSymbol SourceFindTypeByXamlType(XamlType type);
    private INamedTypeSymbol SearchNamespaces(string name, String[] namespaces);
    private INamedTypeSymbol SearchClrNamespaces(string name);
    private INamedTypeSymbol GetType(string name, XamlObjectDefinition objectDefinition);
    private INamedTypeSymbol GetType(XamlType type);
    private INamedTypeSymbol SourceFindType(string name);
    private static string GetTrimmedNamespace(string nsNamespace);
    [IteratorStateMachineAttribute("Uno.UI.SourceGenerators.XamlGenerator.XamlFileGenerator/<FindLocalizableProperties>d__332")]
private IEnumerable`1<string> FindLocalizableProperties(INamedTypeSymbol type);
    [IteratorStateMachineAttribute("Uno.UI.SourceGenerators.XamlGenerator.XamlFileGenerator/<FindLocalizableAttachedProperties>d__333")]
private IEnumerable`1<ValueTuple`2<INamedTypeSymbol, string>> FindLocalizableAttachedProperties(string uid);
    [CompilerGeneratedAttribute]
private void <BuildApplicationInitializerBody>g__ApplyLiteralProperties|74_0(<>c__DisplayClass74_0& );
    [CompilerGeneratedAttribute]
private void <BuildApplicationInitializerBody>g__AttachUnhandledExceptionHandler|74_1(<>c__DisplayClass74_0& );
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildResourceLoaderFromAssembly>b__81_0(AttributeData a);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildResourceLoaderFromAssembly>b__81_1(INamedTypeSymbol s);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildCompiledBindingsInitializer>b__92_0(ComponentDefinition c);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildCompiledBindingsInitializerForTemplate>b__93_0(ComponentDefinition c);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildCompiledBindings>b__97_0(ComponentDefinition c);
    [CompilerGeneratedAttribute]
internal static int <BuildTypedResourceDictionary>g__GetResourcesVersion|110_0(<>c__DisplayClass110_0& );
    [CompilerGeneratedAttribute]
private bool <BuildNamedResources>g__IsGenerateUpdateResourceBindings|114_0(KeyValuePair`2<string, XamlObjectDefinition> nr);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildNamedResources>b__114_1(INamedTypeSymbol i);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <HasCustomMarkupExtension>b__120_0(XamlObjectDefinition o);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <HasDescendantsWithXName>b__125_0(XamlObjectDefinition o);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsXamlTypeConverter>b__129_0(AttributeData a);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetFullGenericTypeName>b__142_0(ITypeSymbol ts);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <RegisterAndBuildResources>b__149_6(XamlObjectDefinition o);
    [CompilerGeneratedAttribute]
private string <BuildXBindEvalFunction>g__buildBindBack|182_5(<>c__DisplayClass182_0& , <>c__DisplayClass182_1& );
    [CompilerGeneratedAttribute]
private string <BuildXBindEvalFunction>g__buildBindBack|182_6(<>c__DisplayClass182_0& , <>c__DisplayClass182_2& );
    [CompilerGeneratedAttribute]
internal static string <RewriteNamespaces>g__ReplaceNamespace|184_0(string xamlString, NamespaceDeclaration ns);
    [CompilerGeneratedAttribute]
private string <BuildLiteralValue>g__GetMemberValue|197_0(<>c__DisplayClass197_0& );
    [CompilerGeneratedAttribute]
private string <BuildLiteralValue>g__Inner|197_1(<>c__DisplayClass197_0& );
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static string <BuildLiteralValue>g__SplitAndJoin|197_3(string value);
    [CompilerGeneratedAttribute]
private string <BuildLiteralValue>g__RewriteUri|197_4(string rawValue, <>c__DisplayClass197_0& );
    [CompilerGeneratedAttribute]
private string <BuildLiteralValue>g__Inner|208_0(<>c__DisplayClass208_0& );
    [CompilerGeneratedAttribute]
private bool <BuildLiteralLazyVisualStateManagerProperties>g__PropertyFilter|221_0(XamlMemberDefinition member);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <BuildLiteralPropertiesWithFilter>b__222_1(XamlObjectDefinition m);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType9`2<XamlObjectDefinition, object> <HasChildrenWithPhase>b__235_0(XamlObjectDefinition element);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private <>f__AnonymousType9`2<XamlObjectDefinition, object> <GenerateRootPhases>b__236_0(XamlObjectDefinition element);
    [CompilerGeneratedAttribute]
private void <TrySetDefaultBindMode>b__244_1();
    [CompilerGeneratedAttribute]
internal static bool <TrySetDefaultBindMode>g__IsValid|244_2(string mode);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <GenerateConstructorParameters>b__247_0(IMethodSymbol c);
    [CompilerGeneratedAttribute]
private void <Scope>b__255_0();
    [CompilerGeneratedAttribute]
private void <XLoadScope>b__262_0();
    [CompilerGeneratedAttribute]
private void <ResourceOwnerScope>b__269_0();
    [CompilerGeneratedAttribute]
private void <LogicalScope>b__273_0();
    [CompilerGeneratedAttribute]
internal static bool <IsImplementingInterface>g__isSameType|288_0(INamedTypeSymbol source, INamedTypeSymbol iface);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsDependencyObject>b__294_0(INamedTypeSymbol i);
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SourceFindType>g__SearchWithFuzzyMatching|330_0(string name);
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SourceFindType>g__SearchFromMetadata|330_1(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlFileParser : object {
    private static ConcurrentDictionary`2<CachedFileKey, CachedFile> _cachedFiles;
    private static TimeSpan _cacheEntryLifetime;
    private static Char[] _splitChars;
    private string _excludeXamlNamespacesProperty;
    private string _includeXamlNamespacesProperty;
    private String[] _excludeXamlNamespaces;
    private String[] _includeXamlNamespaces;
    private RoslynMetadataHelper _metadataHelper;
    private int _depth;
    public XamlFileParser(string excludeXamlNamespacesProperty, string includeXamlNamespacesProperty, String[] excludeXamlNamespaces, String[] includeXamlNamespaces, RoslynMetadataHelper roslynMetadataHelper);
    private static XamlFileParser();
    public XamlFileDefinition[] ParseFiles(MSBuildItem[] xamlSourceFiles, string projectDirectory, CancellationToken cancellationToken);
    private static void ScavengeCache();
    private XamlFileDefinition ParseFile(AdditionalText file, string targetFilePath, CancellationToken cancellationToken);
    private XmlReader RewriteForXBind(SourceText sourceText);
    private static bool IsSkiaNotConditional(string localName, string namespaceUri);
    private IsIncludedResult IsIncluded(string localName, string namespaceUri);
    private XamlFileDefinition Visit(XamlXmlReader reader, AdditionalText source, string targetFilePath, CancellationToken cancellationToken);
    private void WriteState(XamlXmlReader reader);
    private XamlObjectDefinition VisitObject(XamlXmlReader reader, XamlObjectDefinition owner, List`1<NamespaceDeclaration> namespaces);
    private void Visit(XamlXmlReader reader, XamlObjectDefinition xamlObject);
    private XamlMemberDefinition VisitMember(XamlXmlReader reader, XamlObjectDefinition owner);
    private static bool IsLiteralInlineText(object value, XamlMemberDefinition member, XamlObjectDefinition xamlObject);
    private XamlObjectDefinition ConvertLiteralInlineTextToRun(XamlXmlReader reader, bool trimStart);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlGlobalStaticResourcesMap : object {
    private Dictionary`2<string, XamlFileDefinition> _rdMap;
    internal IEnumerable`1<string> GetAllDictionaryProperties();
    internal string FindTargetPropertyForMergedDictionarySource(XamlFileDefinition originDictionary, string source);
    internal string GetSourceLink(XamlFileDefinition xamlFileDefinition);
    private string ConvertIdToResourceDictionaryProperty(string id);
    internal void BuildResourceDictionaryMap(XamlFileDefinition[] files, String[] links);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <GetAllDictionaryProperties>b__1_0(KeyValuePair`2<string, XamlFileDefinition> kvp);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlLazyApplyBlockIIndentedStringBuilder : object {
    private bool _applyOpened;
    private string _closureName;
    private IIndentedStringBuilder _source;
    [NullableAttribute("2")]
private IDisposable _applyDisposable;
    [NullableAttribute("2")]
private string _applyPrefix;
    [NullableAttribute("2")]
private string _delegateType;
    [NullableAttribute("2")]
private IDisposable _parentDisposable;
    private bool _exposeContext;
    public int CurrentLevel { get; }
    [NullableContextAttribute("2")]
public XamlLazyApplyBlockIIndentedStringBuilder(IIndentedStringBuilder source, string closureName, string applyPrefix, string delegateType, bool exposeContext, IDisposable parentDisposable);
    private void TryWriteApply();
    public sealed virtual int get_CurrentLevel();
    public sealed virtual void Append(string text);
    public sealed virtual void AppendLine();
    public sealed virtual void AppendMultiLineIndented(string text);
    public sealed virtual IDisposable Block(IFormatProvider formatProvider, string pattern, Object[] parameters);
    public sealed virtual IDisposable Block(int count);
    public sealed virtual IDisposable Indent(int count);
    public sealed virtual void AppendIndented(string text);
    [NullableContextAttribute("0")]
public sealed virtual void AppendIndented(ReadOnlySpan`1<char> text);
    public sealed virtual void AppendFormatIndented(IFormatProvider formatProvider, string text, Object[] replacements);
    public sealed virtual void Dispose();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlMemberDefinition : object {
    private XamlMember _xamlMember;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XamlObjectDefinition> <Objects>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private XamlObjectDefinition <Owner>k__BackingField;
    public XamlMember Member { get; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public List`1<XamlObjectDefinition> Objects { get; private set; }
    public int LineNumber { get; private set; }
    public int LinePosition { get; public set; }
    [NullableAttribute("2")]
public XamlObjectDefinition Owner { get; }
    public XamlMemberDefinition(XamlMember xamlMember, int lineNumber, int linePosition, XamlObjectDefinition owner);
    public XamlMember get_Member();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public List`1<XamlObjectDefinition> get_Objects();
    [CompilerGeneratedAttribute]
private void set_Objects(List`1<XamlObjectDefinition> value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinePosition(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public XamlObjectDefinition get_Owner();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlObjectDefinition : object {
    private XamlType _type;
    [CompilerGeneratedAttribute]
private List`1<XamlMemberDefinition> <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XamlObjectDefinition> <Objects>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private XamlObjectDefinition <Owner>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<NamespaceDeclaration> <Namespaces>k__BackingField;
    public XamlType Type { get; }
    public List`1<XamlMemberDefinition> Members { get; private set; }
    public List`1<XamlObjectDefinition> Objects { get; private set; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public int LineNumber { get; private set; }
    public int LinePosition { get; public set; }
    [NullableAttribute("2")]
public XamlObjectDefinition Owner { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<NamespaceDeclaration> Namespaces { get; }
    public XamlObjectDefinition(XamlType type, int lineNumber, int linePosition, XamlObjectDefinition owner, List`1<NamespaceDeclaration> namespaces);
    public XamlType get_Type();
    [CompilerGeneratedAttribute]
public List`1<XamlMemberDefinition> get_Members();
    [CompilerGeneratedAttribute]
private void set_Members(List`1<XamlMemberDefinition> value);
    [CompilerGeneratedAttribute]
public List`1<XamlObjectDefinition> get_Objects();
    [CompilerGeneratedAttribute]
private void set_Objects(List`1<XamlObjectDefinition> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LinePosition();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LinePosition(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public XamlObjectDefinition get_Owner();
    [CompilerGeneratedAttribute]
public List`1<NamespaceDeclaration> get_Namespaces();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlParsingException : Exception {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <LinePosition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    public Nullable`1<int> LineNumber { get; }
    public Nullable`1<int> LinePosition { get; }
    [NullableAttribute("2")]
public string FilePath { get; }
    public XamlParsingException(string message);
    public XamlParsingException(string message, Exception innerException, int lineNumber, int linePosition, string filePath);
    protected XamlParsingException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LineNumber();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_LinePosition();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_FilePath();
}
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlRedirection.NamespaceDeclaration : object {
    private NamespaceDeclaration _unoNs;
    public string Namespace { get; }
    public string Prefix { get; }
    public NamespaceDeclaration(NamespaceDeclaration ns);
    public string get_Namespace();
    public string get_Prefix();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlRedirection.XamlMember : object {
    [NullableAttribute("2")]
private string _name;
    [NullableAttribute("2")]
private XamlType _declaringType;
    private bool _isAttachable;
    [NullableAttribute("2")]
private XamlMember _unoMember;
    public string Name { get; }
    public XamlType DeclaringType { get; }
    public XamlType Type { get; }
    [NullableAttribute("2")]
public string PreferredXamlNamespace { get; }
    public bool IsAttachable { get; }
    private XamlMember(XamlMember member);
    public XamlMember(string name, XamlType declaringType, bool isAttachable);
    [NullableContextAttribute("2")]
public static XamlMember FromMember(XamlMember member);
    public static XamlMember WithDeclaringType(XamlMember member, XamlType declaringType);
    public string get_Name();
    public XamlType get_DeclaringType();
    public XamlType get_Type();
    [NullableContextAttribute("2")]
public string get_PreferredXamlNamespace();
    public bool get_IsAttachable();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(XamlMember other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal enum Uno.UI.SourceGenerators.XamlGenerator.XamlRedirection.XamlNodeType : Enum {
    public int value__;
    public static XamlNodeType None;
    public static XamlNodeType StartObject;
    public static XamlNodeType GetObject;
    public static XamlNodeType EndObject;
    public static XamlNodeType StartMember;
    public static XamlNodeType EndMember;
    public static XamlNodeType Value;
    public static XamlNodeType NamespaceDeclaration;
}
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlRedirection.XamlSchemaContext : object {
    [CompilerGeneratedAttribute]
private XamlSchemaContext <UnoInner>k__BackingField;
    public XamlSchemaContext UnoInner { get; }
    public XamlSchemaContext(IEnumerable`1<Assembly> enumerable);
    [CompilerGeneratedAttribute]
public XamlSchemaContext get_UnoInner();
}
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlRedirection.XamlType : object {
    private string unknownTypeNamespace;
    private string unknownTypeName;
    private List`1<XamlType> list;
    private XamlSchemaContext xamlSchemaContext;
    private bool _isUnknown;
    private XamlType _unoDeclaringType;
    public string Name { get; }
    public string PreferredXamlNamespace { get; }
    public bool TrimSurroundingWhitespace { get; }
    private XamlType(XamlType declaringType);
    public XamlType(string unknownTypeNamespace, string unknownTypeName, List`1<XamlType> list, XamlSchemaContext xamlSchemaContext);
    public static XamlType FromType(XamlType declaringType);
    public string get_Name();
    public string get_PreferredXamlNamespace();
    public bool get_TrimSurroundingWhitespace();
    public virtual string ToString();
    public sealed virtual bool Equals(XamlType other);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlRedirection.XamlXmlReader : object {
    private XamlXmlReader _unoReader;
    public bool DisableCaching { get; }
    public XamlNodeType NodeType { get; }
    public object Value { get; }
    public XamlType Type { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    internal bool PreserveWhitespace { get; }
    public XamlXmlReader(XmlReader document, XamlSchemaContext context, XamlXmlReaderSettings settings, IsIncluded isIncluded);
    public bool get_DisableCaching();
    public XamlNodeType get_NodeType();
    private XamlNodeType Convert(XamlNodeType source);
    public object get_Value();
    public XamlType get_Type();
    public int get_LineNumber();
    public int get_LinePosition();
    public XamlMember get_Member();
    public NamespaceDeclaration get_Namespace();
    public sealed virtual void Dispose();
    internal bool Read();
    internal bool get_PreserveWhitespace();
}
internal class Uno.UI.SourceGenerators.XamlGenerator.XamlRedirection.XamlXmlReaderSettings : object {
    [CompilerGeneratedAttribute]
private XamlXmlReaderSettings <UnoInner>k__BackingField;
    public bool ProvideLineInfo { get; public set; }
    public XamlXmlReaderSettings UnoInner { get; internal set; }
    public bool get_ProvideLineInfo();
    public void set_ProvideLineInfo(bool value);
    [CompilerGeneratedAttribute]
public XamlXmlReaderSettings get_UnoInner();
    [CompilerGeneratedAttribute]
internal void set_UnoInner(XamlXmlReaderSettings value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.SourceGenerators.XamlGenerator.XLoadScope : object {
    [CompilerGeneratedAttribute]
private List`1<ComponentEntry> <Components>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EventHandlerBackingFieldDefinition> <xBindEventsHandlers>k__BackingField;
    public List`1<ComponentEntry> Components { get; }
    public int ComponentCount { get; }
    public List`1<EventHandlerBackingFieldDefinition> xBindEventsHandlers { get; }
    [CompilerGeneratedAttribute]
public List`1<ComponentEntry> get_Components();
    public int get_ComponentCount();
    [CompilerGeneratedAttribute]
public List`1<EventHandlerBackingFieldDefinition> get_xBindEventsHandlers();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Uno.UI.Xaml.XamlFilePathHelper : object {
    public static string AppXIdentifier;
    public static string AppXScheme;
    public static string MSResourceIdentifier;
    public static string WinUICompactURL;
    public static string LocalResourcePrefix { get; }
    public static string get_LocalResourcePrefix();
    internal static string ResolveAbsoluteSource(string origin, string relativeTargetPath);
    internal static bool IsAbsolutePath(string relativeTargetPath);
    internal static string GetWinUIThemeResourceUrl(int version);
    private static string GetAbsolutePath(string originDirectory, string relativeTargetPath);
    [NullableContextAttribute("2")]
internal static bool TryGetMsAppxAssetPath(string uri, String& path);
    internal static bool TryGetMsAppxAssetPath(Uri uri, String& path);
}
public class Windows.Foundation.Metadata.ApiInformation : object {
    [NullableContextAttribute("1")]
public static bool IsApiContractNotPresent(string contractName, ushort majorVersion);
    [NullableContextAttribute("1")]
internal static bool IsTypePresent(string typeName, RoslynMetadataHelper metadataHelper);
    [NullableContextAttribute("1")]
internal static bool IsTypeNotPresent(string typeName, RoslynMetadataHelper metadataHelper);
    public static bool IsApiContractPresent(string contractName, ushort majorVersion);
    public static bool IsApiContractPresent(string contractName, ushort majorVersion, ushort minorVersion);
}
[DebuggerDisplayAttribute("{DebugDisplay,nq}")]
public class Windows.Foundation.Point : ValueType {
    private float _x;
    private float _y;
    internal static Point Zero { get; }
    public double X { get; public set; }
    public double Y { get; public set; }
    private string DebugDisplay { get; }
    public Point(float x, float y);
    public Point(double x, double y);
    internal static Point get_Zero();
    public double get_X();
    public void set_X(double value);
    public double get_Y();
    public void set_Y(double value);
    internal Point WithX(double x);
    internal Point WithY(double y);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(Point value);
    private static bool Equals(Point left, Point right);
    public static bool op_Equality(Point left, Point right);
    public static bool op_Inequality(Point left, Point right);
    public static Point op_Addition(Point p1, Point p2);
    public static Point op_Subtraction(Point p1, Point p2);
    public static Point op_UnaryNegation(Point a);
    public virtual string ToString();
    internal string ToDebugString();
    private string get_DebugDisplay();
}
[DebuggerDisplayAttribute("{DebugDisplay,nq}")]
[TypeConverterAttribute("Windows.Foundation.SizeConverter")]
public class Windows.Foundation.Size : ValueType {
    private float _width;
    private float _height;
    public static Size Empty { get; }
    public bool IsEmpty { get; }
    public double Height { get; public set; }
    public double Width { get; public set; }
    private string DebugDisplay { get; }
    public Size(float width, float height);
    public Size(double width, double height);
    public static Size get_Empty();
    public bool get_IsEmpty();
    public double get_Height();
    public void set_Height(double value);
    public double get_Width();
    public void set_Width(double value);
    public virtual bool Equals(object o);
    public bool Equals(Size value);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal string ToString(string format);
    internal string ToDebugString();
    public static bool op_Equality(Size size1, Size size2);
    public static bool op_Inequality(Size size1, Size size2);
    private string get_DebugDisplay();
}
[EditorBrowsableAttribute("1")]
internal class Windows.Foundation.SizeConverter : TypeConverter {
    private static Char[] _commaArray;
    private static SizeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
