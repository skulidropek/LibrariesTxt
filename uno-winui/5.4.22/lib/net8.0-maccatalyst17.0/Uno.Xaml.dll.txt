[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("196")]
public class System.Windows.Markup.AmbientAttribute : Attribute {
}
[MarkupExtensionReturnTypeAttribute("System.Array")]
[ContentPropertyAttribute("Items")]
public class System.Windows.Markup.ArrayExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    private IList items;
    [ConstructorArgumentAttribute("arrayType")]
public Type Type { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public IList Items { get; }
    public ArrayExtension(Array elements);
    public ArrayExtension(Type arrayType);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    public IList get_Items();
    public void AddChild(object value);
    public void AddText(string text);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[ContentPropertyAttribute("Path")]
public class System.Windows.Markup.Bind : MarkupExtension {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [ConstructorArgumentAttribute("path")]
public string Path { get; public set; }
    public Bind(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("128")]
public class System.Windows.Markup.ConstructorArgumentAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ArgumentName>k__BackingField;
    public string ArgumentName { get; private set; }
    public ConstructorArgumentAttribute(string argumentName);
    [CompilerGeneratedAttribute]
public string get_ArgumentName();
    [CompilerGeneratedAttribute]
private void set_ArgumentName(string value);
}
internal class System.Windows.Markup.Consts : object {
    public static string AssemblyWindowsBase;
    public static string AssemblyPresentationFramework_3_5;
    public static string AssemblyPresentationCore_3_5;
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.ContentPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public ContentPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.ContentWrapperAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ContentWrapper>k__BackingField;
    public Type ContentWrapper { get; private set; }
    public object TypeId { get; }
    public ContentWrapperAttribute(Type contentWrapper);
    [CompilerGeneratedAttribute]
public Type get_ContentWrapper();
    [CompilerGeneratedAttribute]
private void set_ContentWrapper(Type value);
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Windows.Markup.DateTimeValueSerializer : ValueSerializer {
    private static DateTimeStyles styles;
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
}
[AttributeUsageAttribute("192")]
public class System.Windows.Markup.DependsOnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public object TypeId { get; }
    public DependsOnAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.DictionaryKeyPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public DictionaryKeyPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
public interface System.Windows.Markup.INameScope {
    public abstract virtual object FindName(string name);
    public abstract virtual void RegisterName(string name, object scopedElement);
    public abstract virtual void UnregisterName(string name);
}
public interface System.Windows.Markup.INameScopeDictionary {
}
internal interface System.Windows.Markup.IProvideValueTarget {
    public object TargetObject { get; }
    public object TargetProperty { get; }
    public abstract virtual object get_TargetObject();
    public abstract virtual object get_TargetProperty();
}
public interface System.Windows.Markup.IQueryAmbient {
    public abstract virtual bool IsAmbientPropertyAvailable(string propertyName);
}
internal interface System.Windows.Markup.IUriContext {
    public Uri BaseUri { get; public set; }
    public abstract virtual Uri get_BaseUri();
    public abstract virtual void set_BaseUri(Uri value);
}
public interface System.Windows.Markup.IValueSerializerContext {
    public abstract virtual ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor);
    public abstract virtual ValueSerializer GetValueSerializerFor(Type type);
}
internal interface System.Windows.Markup.IXamlTypeResolver {
    public abstract virtual Type Resolve(string qualifiedTypeName);
}
public abstract class System.Windows.Markup.MarkupExtension : object {
    public abstract virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.MarkupExtensionReturnTypeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ReturnType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ExpressionType>k__BackingField;
    public Type ReturnType { get; private set; }
    [ObsoleteAttribute("Unused. Use XamlSetMarkupExtensionAttribute functionality instead.")]
public Type ExpressionType { get; private set; }
    public MarkupExtensionReturnTypeAttribute(Type returnType);
    [ObsoleteAttribute("Unused. Use MarkupExtensionReturnTypeAttribute(Type) or XamlSetMarkupExtensionAttribute.")]
public MarkupExtensionReturnTypeAttribute(Type returnType, Type expressionType);
    [CompilerGeneratedAttribute]
public Type get_ReturnType();
    [CompilerGeneratedAttribute]
private void set_ReturnType(Type value);
    [CompilerGeneratedAttribute]
public Type get_ExpressionType();
    [CompilerGeneratedAttribute]
private void set_ExpressionType(Type value);
}
public abstract class System.Windows.Markup.MemberDefinition : object {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Markup.MonoTODOAttribute : Attribute {
    public MonoTODOAttribute(string desc);
}
public class System.Windows.Markup.NameReferenceConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.NameScopePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; private set; }
    public Type Type { get; private set; }
    public NameScopePropertyAttribute(string name);
    public NameScopePropertyAttribute(string name, Type type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.Markup.NullExtension : MarkupExtension {
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Windows.Markup.PropertyDefinition : MemberDefinition {
    private List`1<Attribute> attributes;
    [CompilerGeneratedAttribute]
private string <Modifier>k__BackingField;
    private string name;
    [CompilerGeneratedAttribute]
private XamlType <Type>k__BackingField;
    public IList`1<Attribute> Attributes { get; }
    [DefaultValueAttribute("public")]
public string Modifier { get; public set; }
    public string Name { get; public set; }
    [TypeConverterAttribute("Uno.Xaml.Schema.XamlTypeTypeConverter")]
public XamlType Type { get; public set; }
    public IList`1<Attribute> get_Attributes();
    [CompilerGeneratedAttribute]
public string get_Modifier();
    [CompilerGeneratedAttribute]
public void set_Modifier(string value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public XamlType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(XamlType value);
}
[ContentPropertyAttribute("Name")]
public class System.Windows.Markup.Reference : MarkupExtension {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [ConstructorArgumentAttribute("name")]
public string Name { get; public set; }
    public Reference(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("1")]
[TypeForwardedFromAttribute("")]
public class System.Windows.Markup.RootNamespaceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    public string Namespace { get; private set; }
    public RootNamespaceAttribute(string nameSpace);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.RuntimeNamePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public RuntimeNamePropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
[TypeConverterAttribute("System.Windows.Markup.StaticExtensionConverter")]
public class System.Windows.Markup.StaticExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private string <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <MemberType>k__BackingField;
    [ConstructorArgumentAttribute("member")]
public string Member { get; public set; }
    [DefaultValueAttribute("")]
public Type MemberType { get; public set; }
    public StaticExtension(string member);
    [CompilerGeneratedAttribute]
public string get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(string value);
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
internal class System.Windows.Markup.StaticExtensionConverter : TypeConverter {
}
internal class System.Windows.Markup.StringValueSerializer : ValueSerializer {
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    public virtual IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.TrimSurroundingWhitespaceAttribute : Attribute {
}
internal class System.Windows.Markup.TypeConverterValueSerializer : ValueSerializer {
    private TypeConverter c;
    public TypeConverterValueSerializer(TypeConverter typeConverter);
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    public virtual IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context);
}
[MarkupExtensionReturnTypeAttribute("System.Type")]
[TypeConverterAttribute("System.Windows.Markup.TypeExtensionConverter")]
public class System.Windows.Markup.TypeExtension : MarkupExtension {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [ConstructorArgumentAttribute("type")]
[DefaultValueAttribute("")]
public Type Type { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string TypeName { get; public set; }
    public TypeExtension(string typeName);
    public TypeExtension(Type type);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public void set_TypeName(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
internal class System.Windows.Markup.TypeExtensionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Windows.Markup.TypeValueSerializer : ValueSerializer {
    private TypeExtensionConverter txc;
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    public virtual IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.UidPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public UidPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.UsableDuringInitializationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Usable>k__BackingField;
    public bool Usable { get; private set; }
    public UsableDuringInitializationAttribute(bool usable);
    [CompilerGeneratedAttribute]
public bool get_Usable();
    [CompilerGeneratedAttribute]
private void set_Usable(bool value);
}
public abstract class System.Windows.Markup.ValueSerializer : object {
    public static ValueSerializer GetSerializerFor(PropertyDescriptor descriptor);
    public static ValueSerializer GetSerializerFor(Type type);
    public static ValueSerializer GetSerializerFor(PropertyDescriptor descriptor, IValueSerializerContext context);
    public static ValueSerializer GetSerializerFor(Type type, IValueSerializerContext context);
    public virtual bool CanConvertFromString(string value, IValueSerializerContext context);
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual object ConvertFromString(string value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    protected Exception GetConvertFromException(object value);
    protected Exception GetConvertToException(object value, Type destinationType);
    [IteratorStateMachineAttribute("System.Windows.Markup.ValueSerializer/<TypeReferences>d__10")]
public virtual IEnumerable`1<Type> TypeReferences(object value, IValueSerializerContext context);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.WhitespaceSignificantCollectionAttribute : Attribute {
}
[AttributeUsageAttribute("132")]
public class System.Windows.Markup.XamlDeferLoadAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <LoaderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoaderTypeName>k__BackingField;
    public Type ContentType { get; private set; }
    public string ContentTypeName { get; private set; }
    public Type LoaderType { get; private set; }
    public string LoaderTypeName { get; private set; }
    public XamlDeferLoadAttribute(string loaderType, string contentType);
    public XamlDeferLoadAttribute(Type loaderType, Type contentType);
    [CompilerGeneratedAttribute]
public Type get_ContentType();
    [CompilerGeneratedAttribute]
private void set_ContentType(Type value);
    [CompilerGeneratedAttribute]
public string get_ContentTypeName();
    [CompilerGeneratedAttribute]
private void set_ContentTypeName(string value);
    [CompilerGeneratedAttribute]
public Type get_LoaderType();
    [CompilerGeneratedAttribute]
private void set_LoaderType(Type value);
    [CompilerGeneratedAttribute]
public string get_LoaderTypeName();
    [CompilerGeneratedAttribute]
private void set_LoaderTypeName(string value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XamlSetMarkupExtensionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XamlSetMarkupExtensionHandler>k__BackingField;
    public string XamlSetMarkupExtensionHandler { get; private set; }
    public XamlSetMarkupExtensionAttribute(string xamlSetMarkupExtensionHandler);
    [CompilerGeneratedAttribute]
public string get_XamlSetMarkupExtensionHandler();
    [CompilerGeneratedAttribute]
private void set_XamlSetMarkupExtensionHandler(string value);
}
public class System.Windows.Markup.XamlSetMarkupExtensionEventArgs : XamlSetValueEventArgs {
    [CompilerGeneratedAttribute]
private MarkupExtension <MarkupExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public MarkupExtension MarkupExtension { get; private set; }
    public IServiceProvider ServiceProvider { get; private set; }
    public XamlSetMarkupExtensionEventArgs(XamlMember member, MarkupExtension value, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public MarkupExtension get_MarkupExtension();
    [CompilerGeneratedAttribute]
private void set_MarkupExtension(MarkupExtension value);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    public virtual void CallBase();
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XamlSetTypeConverterAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <XamlSetTypeConverterHandler>k__BackingField;
    public string XamlSetTypeConverterHandler { get; private set; }
    public XamlSetTypeConverterAttribute(string xamlSetTypeConverterHandler);
    [CompilerGeneratedAttribute]
public string get_XamlSetTypeConverterHandler();
    [CompilerGeneratedAttribute]
private void set_XamlSetTypeConverterHandler(string value);
}
public class System.Windows.Markup.XamlSetTypeConverterEventArgs : XamlSetValueEventArgs {
    [CompilerGeneratedAttribute]
private CultureInfo <CultureInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeDescriptorContext <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeConverter <TypeConverter>k__BackingField;
    public CultureInfo CultureInfo { get; private set; }
    public ITypeDescriptorContext ServiceProvider { get; private set; }
    public TypeConverter TypeConverter { get; private set; }
    public XamlSetTypeConverterEventArgs(XamlMember member, TypeConverter typeConverter, object value, ITypeDescriptorContext serviceProvider, CultureInfo cultureInfo);
    [CompilerGeneratedAttribute]
public CultureInfo get_CultureInfo();
    [CompilerGeneratedAttribute]
private void set_CultureInfo(CultureInfo value);
    [CompilerGeneratedAttribute]
public ITypeDescriptorContext get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(ITypeDescriptorContext value);
    [CompilerGeneratedAttribute]
public TypeConverter get_TypeConverter();
    [CompilerGeneratedAttribute]
private void set_TypeConverter(TypeConverter value);
    public virtual void CallBase();
}
public class System.Windows.Markup.XamlSetValueEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMember <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public bool Handled { get; public set; }
    public XamlMember Member { get; private set; }
    public object Value { get; private set; }
    public XamlSetValueEventArgs(XamlMember member, object value);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
    [CompilerGeneratedAttribute]
public XamlMember get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(XamlMember value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
    public virtual void CallBase();
}
[ContentPropertyAttribute("Text")]
public class System.Windows.Markup.XData : object {
    private string text;
    private XmlReader reader;
    public string Text { get; public set; }
    public object XmlReader { get; public set; }
    public string get_Text();
    public void set_Text(string value);
    public object get_XmlReader();
    public void set_XmlReader(object value);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Markup.XmlLangPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; private set; }
    public XmlLangPropertyAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[AttributeUsageAttribute("1")]
public class System.Windows.Markup.XmlnsCompatibleWithAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <NewNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldNamespace>k__BackingField;
    public string NewNamespace { get; private set; }
    public string OldNamespace { get; private set; }
    public XmlnsCompatibleWithAttribute(string oldNamespace, string newNamespace);
    [CompilerGeneratedAttribute]
public string get_NewNamespace();
    [CompilerGeneratedAttribute]
private void set_NewNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_OldNamespace();
    [CompilerGeneratedAttribute]
private void set_OldNamespace(string value);
}
[AttributeUsageAttribute("1")]
public class System.Windows.Markup.XmlnsDefinitionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClrNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    public string AssemblyName { get; public set; }
    public string ClrNamespace { get; private set; }
    public string XmlNamespace { get; private set; }
    public XmlnsDefinitionAttribute(string xmlNamespace, string clrNamespace);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public void set_AssemblyName(string value);
    [CompilerGeneratedAttribute]
public string get_ClrNamespace();
    [CompilerGeneratedAttribute]
private void set_ClrNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
private void set_XmlNamespace(string value);
}
[AttributeUsageAttribute("1")]
public class System.Windows.Markup.XmlnsPrefixAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlNamespace>k__BackingField;
    public string Prefix { get; private set; }
    public string XmlNamespace { get; private set; }
    public XmlnsPrefixAttribute(string xmlNamespace, string prefix);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
    [CompilerGeneratedAttribute]
public string get_XmlNamespace();
    [CompilerGeneratedAttribute]
private void set_XmlNamespace(string value);
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Windows.StaticResourceExtension : MarkupExtension {
    public StaticResourceExtension(object resourceKey);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class Uno.Xaml.AmbientPropertyValue : object {
    [CompilerGeneratedAttribute]
private XamlMember <RetrievedProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public XamlMember RetrievedProperty { get; private set; }
    public object Value { get; private set; }
    public AmbientPropertyValue(XamlMember property, object value);
    [CompilerGeneratedAttribute]
public XamlMember get_RetrievedProperty();
    [CompilerGeneratedAttribute]
private void set_RetrievedProperty(XamlMember value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(object value);
}
internal class Uno.Xaml.AmbientProvider : object {
    private List`1<AmbientPropertyValue> values;
    private Stack`1<AmbientPropertyValue> live_stack;
    public void Push(AmbientPropertyValue v);
    public void Pop();
    public sealed virtual IEnumerable`1<object> GetAllAmbientValues(XamlType[] types);
    public sealed virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    public sealed virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties);
    [IteratorStateMachineAttribute("Uno.Xaml.AmbientProvider/<DoGetAllAmbientValues>d__7")]
private IEnumerable`1<AmbientPropertyValue> DoGetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties);
    private bool DoesAmbientPropertyApply(AmbientPropertyValue p, IEnumerable`1<XamlType> types, XamlMember[] properties);
    public sealed virtual object GetFirstAmbientValue(XamlType[] types);
    public sealed virtual AmbientPropertyValue GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
}
public class Uno.Xaml.AttachableMemberIdentifier : object {
    [CompilerGeneratedAttribute]
private Type <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MemberName>k__BackingField;
    public Type DeclaringType { get; private set; }
    public string MemberName { get; private set; }
    public AttachableMemberIdentifier(Type declaringType, string memberName);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
private void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public string get_MemberName();
    [CompilerGeneratedAttribute]
private void set_MemberName(string value);
    public static bool op_Equality(AttachableMemberIdentifier left, AttachableMemberIdentifier right);
    private static bool IsNull(AttachableMemberIdentifier a);
    public static bool op_Inequality(AttachableMemberIdentifier left, AttachableMemberIdentifier right);
    public sealed virtual bool Equals(AttachableMemberIdentifier other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public static class Uno.Xaml.AttachablePropertyServices : object {
    private static Dictionary`2<object, Table> props;
    private static AttachablePropertyServices();
    public static void CopyPropertiesTo(object instance, KeyValuePair`2[] array, int index);
    public static int GetAttachedPropertyCount(object instance);
    public static bool RemoveProperty(object instance, AttachableMemberIdentifier name);
    public static void SetProperty(object instance, AttachableMemberIdentifier name, object value);
    public static bool TryGetProperty(object instance, AttachableMemberIdentifier name, Object& value);
    public static bool TryGetProperty(object instance, AttachableMemberIdentifier name, T& value);
}
public interface Uno.Xaml.IAmbientProvider {
    public abstract virtual IEnumerable`1<object> GetAllAmbientValues(XamlType[] types);
    public abstract virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
    public abstract virtual IEnumerable`1<AmbientPropertyValue> GetAllAmbientValues(IEnumerable`1<XamlType> ceilingTypes, bool searchLiveStackOnly, IEnumerable`1<XamlType> types, XamlMember[] properties);
    public abstract virtual object GetFirstAmbientValue(XamlType[] types);
    public abstract virtual AmbientPropertyValue GetFirstAmbientValue(IEnumerable`1<XamlType> ceilingTypes, XamlMember[] properties);
}
public interface Uno.Xaml.IAttachedPropertyStore {
    public int PropertyCount { get; }
    public abstract virtual int get_PropertyCount();
    public abstract virtual void CopyPropertiesTo(KeyValuePair`2[] array, int index);
    public abstract virtual bool RemoveProperty(AttachableMemberIdentifier attachableMemberIdentifier);
    public abstract virtual void SetProperty(AttachableMemberIdentifier attachableMemberIdentifier, object value);
    public abstract virtual bool TryGetProperty(AttachableMemberIdentifier attachableMemberIdentifier, Object& value);
}
public interface Uno.Xaml.IDestinationTypeProvider {
    public abstract virtual Type GetDestinationType();
}
public interface Uno.Xaml.INamespacePrefixLookup {
    public abstract virtual string LookupPrefix(string ns);
}
internal class Uno.Xaml.InstanceContext : ValueType {
    private object value;
    public InstanceContext(object value);
    public object GetRawValue();
}
internal interface Uno.Xaml.IRootObjectProvider {
    public object RootObject { get; }
    public abstract virtual object get_RootObject();
}
public class Uno.Xaml.IsIncluded : MulticastDelegate {
    public IsIncluded(object object, IntPtr method);
    public virtual IsIncludedResult Invoke(string localName, string namespaceUri);
    public virtual IAsyncResult BeginInvoke(string localName, string namespaceUri, AsyncCallback callback, object object);
    public virtual IsIncludedResult EndInvoke(IAsyncResult result);
}
[IsReadOnlyAttribute]
public class Uno.Xaml.IsIncludedResult : ValueType {
    [CompilerGeneratedAttribute]
private static IsIncludedResult <Default>k__BackingField;
    [CompilerGeneratedAttribute]
private static IsIncludedResult <ForceExclude>k__BackingField;
    [CompilerGeneratedAttribute]
private static IsIncludedResult <ForceInclude>k__BackingField;
    [CompilerGeneratedAttribute]
private static IsIncludedResult <ForceIncludeWithCacheDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableCaching>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedNamespace>k__BackingField;
    public static IsIncludedResult Default { get; }
    public static IsIncludedResult ForceExclude { get; }
    public static IsIncludedResult ForceInclude { get; }
    public static IsIncludedResult ForceIncludeWithCacheDisabled { get; }
    public Nullable`1<bool> IsIncluded { get; }
    public bool DisableCaching { get; }
    public string UpdatedNamespace { get; }
    private IsIncludedResult(Nullable`1<bool> isIncluded, bool disableCaching);
    private IsIncludedResult(Nullable`1<bool> isIncluded, bool disableCaching, string updatedNamespace);
    private static IsIncludedResult();
    [CompilerGeneratedAttribute]
public static IsIncludedResult get_Default();
    [CompilerGeneratedAttribute]
public static IsIncludedResult get_ForceExclude();
    [CompilerGeneratedAttribute]
public static IsIncludedResult get_ForceInclude();
    [CompilerGeneratedAttribute]
public static IsIncludedResult get_ForceIncludeWithCacheDisabled();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsIncluded();
    [CompilerGeneratedAttribute]
public bool get_DisableCaching();
    [CompilerGeneratedAttribute]
public string get_UpdatedNamespace();
    public IsIncludedResult WithUpdatedNamespace(string updatedNamespace);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(IsIncludedResult other);
    public virtual int GetHashCode();
    public static bool op_Equality(IsIncludedResult left, IsIncludedResult right);
    public static bool op_Inequality(IsIncludedResult left, IsIncludedResult right);
}
public interface Uno.Xaml.IXamlIndexingReader {
    public int Count { get; }
    public int CurrentIndex { get; public set; }
    public abstract virtual int get_Count();
    public abstract virtual int get_CurrentIndex();
    public abstract virtual void set_CurrentIndex(int value);
}
public interface Uno.Xaml.IXamlLineInfo {
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool get_HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
public interface Uno.Xaml.IXamlLineInfoConsumer {
    public bool ShouldProvideLineInfo { get; }
    public abstract virtual bool get_ShouldProvideLineInfo();
    public abstract virtual void SetLineInfo(int lineNumber, int linePosition);
}
public interface Uno.Xaml.IXamlNameProvider {
    public abstract virtual string GetName(object value);
}
public interface Uno.Xaml.IXamlNameResolver {
    public bool IsFixupTokenAvailable { get; }
    public abstract virtual bool get_IsFixupTokenAvailable();
    [CompilerGeneratedAttribute]
public abstract virtual void add_OnNameScopeInitializationComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OnNameScopeInitializationComplete(EventHandler value);
    public abstract virtual object GetFixupToken(IEnumerable`1<string> names);
    public abstract virtual object GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly);
    public abstract virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAllNamesAndValuesInScope();
    public abstract virtual object Resolve(string name);
    public abstract virtual object Resolve(string name, Boolean& isFullyInitialized);
}
public interface Uno.Xaml.IXamlNamespaceResolver {
    public abstract virtual string GetNamespace(string prefix);
    public abstract virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
}
public interface Uno.Xaml.IXamlObjectWriterFactory {
    public abstract virtual XamlObjectWriterSettings GetParentSettings();
    public abstract virtual XamlObjectWriter GetXamlObjectWriter(XamlObjectWriterSettings settings);
}
public interface Uno.Xaml.IXamlSchemaContextProvider {
    public XamlSchemaContext SchemaContext { get; }
    public abstract virtual XamlSchemaContext get_SchemaContext();
}
internal class Uno.Xaml.NameFixupRequired : object {
    [CompilerGeneratedAttribute]
private XamlType <ParentType>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlMember <ParentMember>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ParentValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanAssignDirectly>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Names>k__BackingField;
    public XamlType ParentType { get; public set; }
    public XamlMember ParentMember { get; public set; }
    public object ParentValue { get; public set; }
    public bool CanAssignDirectly { get; public set; }
    public IList`1<string> Names { get; public set; }
    public NameFixupRequired(IEnumerable`1<string> names, bool canAssignDirectly);
    [CompilerGeneratedAttribute]
public XamlType get_ParentType();
    [CompilerGeneratedAttribute]
public void set_ParentType(XamlType value);
    [CompilerGeneratedAttribute]
public XamlMember get_ParentMember();
    [CompilerGeneratedAttribute]
public void set_ParentMember(XamlMember value);
    [CompilerGeneratedAttribute]
public object get_ParentValue();
    [CompilerGeneratedAttribute]
public void set_ParentValue(object value);
    [CompilerGeneratedAttribute]
public bool get_CanAssignDirectly();
    [CompilerGeneratedAttribute]
public void set_CanAssignDirectly(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Names();
    [CompilerGeneratedAttribute]
public void set_Names(IList`1<string> value);
}
internal class Uno.Xaml.NameScope : object {
    private Dictionary`2<string, object> table;
    private INameScope external;
    public NameScope(INameScope external);
    public sealed virtual object FindName(string name);
    public sealed virtual void RegisterName(string name, object scopedElement);
    public sealed virtual void UnregisterName(string name);
}
public class Uno.Xaml.NamespaceDeclaration : object {
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    public string Namespace { get; private set; }
    public string Prefix { get; private set; }
    public NamespaceDeclaration(string ns, string prefix);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
private void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
private void set_Prefix(string value);
}
internal class Uno.Xaml.NamespaceResolver : object {
    private IList`1<NamespaceDeclaration> source;
    public NamespaceResolver(IList`1<NamespaceDeclaration> source);
    public sealed virtual string GetNamespace(string prefix);
    public sealed virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
}
internal class Uno.Xaml.ParsedMarkupExtensionInfo : object {
    private static Char[] _singleQuoteArray;
    private static Char[] _doubleQuoteArray;
    private Dictionary`2<XamlMember, object> args;
    [CompilerGeneratedAttribute]
private XamlType <Type>k__BackingField;
    public Dictionary`2<XamlMember, object> Arguments { get; }
    public XamlType Type { get; public set; }
    private static ParsedMarkupExtensionInfo();
    public Dictionary`2<XamlMember, object> get_Arguments();
    [CompilerGeneratedAttribute]
public XamlType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(XamlType value);
    public static ParsedMarkupExtensionInfo Parse(string raw, IXamlNamespaceResolver nsResolver, XamlSchemaContext sctx);
    private static string RemoveWrappingStringQuotes(string stringValue);
    private static bool IsValidMarkupExtension(string valueString);
    private static string UnescapeValue(string s);
    private static Exception Error(string format, Object[] args);
    [IteratorStateMachineAttribute("Uno.Xaml.ParsedMarkupExtensionInfo/<SliceParameters>d__14")]
internal static IEnumerable`1<string> SliceParameters(string vargs, string raw);
}
public class Uno.Xaml.Permissions.XamlAccessLevel : object {
    [CompilerGeneratedAttribute]
private AssemblyName <AssemblyAccessToAssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateAccessToTypeName>k__BackingField;
    public AssemblyName AssemblyAccessToAssemblyName { get; private set; }
    public string PrivateAccessToTypeName { get; private set; }
    internal XamlAccessLevel(AssemblyName assemblyAccessToAssemblyName);
    internal XamlAccessLevel(string privateAccessToTypeName);
    public static XamlAccessLevel AssemblyAccessTo(Assembly assembly);
    public static XamlAccessLevel AssemblyAccessTo(AssemblyName assemblyName);
    public static XamlAccessLevel PrivateAccessTo(string assemblyQualifiedTypeName);
    public static XamlAccessLevel PrivateAccessTo(Type type);
    [CompilerGeneratedAttribute]
public AssemblyName get_AssemblyAccessToAssemblyName();
    [CompilerGeneratedAttribute]
private void set_AssemblyAccessToAssemblyName(AssemblyName value);
    [CompilerGeneratedAttribute]
public string get_PrivateAccessToTypeName();
    [CompilerGeneratedAttribute]
private void set_PrivateAccessToTypeName(string value);
}
internal class Uno.Xaml.PrefixLookup : object {
    private static Char[] _dotArray;
    private XamlSchemaContext sctx;
    [CompilerGeneratedAttribute]
private bool <IsCollectingNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<NamespaceDeclaration> <Namespaces>k__BackingField;
    public bool IsCollectingNamespaces { get; public set; }
    public List`1<NamespaceDeclaration> Namespaces { get; private set; }
    public PrefixLookup(XamlSchemaContext schemaContext);
    private static PrefixLookup();
    [CompilerGeneratedAttribute]
public bool get_IsCollectingNamespaces();
    [CompilerGeneratedAttribute]
public void set_IsCollectingNamespaces(bool value);
    [CompilerGeneratedAttribute]
public List`1<NamespaceDeclaration> get_Namespaces();
    [CompilerGeneratedAttribute]
private void set_Namespaces(List`1<NamespaceDeclaration> value);
    public sealed virtual string LookupPrefix(string ns);
    public string AddNamespace(string ns);
    private string GetAcronym(string ns);
}
[FlagsAttribute]
public enum Uno.Xaml.Schema.AllowedMemberLocations : Enum {
    public int value__;
    public static AllowedMemberLocations None;
    public static AllowedMemberLocations Attribute;
    public static AllowedMemberLocations MemberElement;
    public static AllowedMemberLocations Any;
}
public enum Uno.Xaml.Schema.ShouldSerializeResult : Enum {
    public int value__;
    public static ShouldSerializeResult Default;
    public static ShouldSerializeResult True;
    public static ShouldSerializeResult False;
}
public enum Uno.Xaml.Schema.XamlCollectionKind : Enum {
    public int value__;
    public static XamlCollectionKind None;
    public static XamlCollectionKind Collection;
    public static XamlCollectionKind Dictionary;
    public static XamlCollectionKind Array;
}
public class Uno.Xaml.Schema.XamlMemberInvoker : object {
    private static XamlMemberInvoker unknown;
    private XamlMember member;
    public static XamlMemberInvoker UnknownInvoker { get; }
    public MethodInfo UnderlyingGetter { get; }
    public MethodInfo UnderlyingSetter { get; }
    public XamlMemberInvoker(XamlMember member);
    private static XamlMemberInvoker();
    public static XamlMemberInvoker get_UnknownInvoker();
    public MethodInfo get_UnderlyingGetter();
    public MethodInfo get_UnderlyingSetter();
    private void ThrowIfUnknown();
    public virtual object GetValue(object instance);
    public virtual void SetValue(object instance, object value);
    public virtual ShouldSerializeResult ShouldSerializeValue(object instance);
}
public class Uno.Xaml.Schema.XamlTypeInvoker : object {
    private static XamlTypeInvoker unknown;
    private XamlType type;
    public static XamlTypeInvoker UnknownInvoker { get; }
    public EventHandler`1<XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler { get; }
    public EventHandler`1<XamlSetTypeConverterEventArgs> SetTypeConverterHandler { get; }
    public XamlTypeInvoker(XamlType type);
    private static XamlTypeInvoker();
    public static XamlTypeInvoker get_UnknownInvoker();
    private void ThrowIfUnknown();
    public EventHandler`1<XamlSetMarkupExtensionEventArgs> get_SetMarkupExtensionHandler();
    public EventHandler`1<XamlSetTypeConverterEventArgs> get_SetTypeConverterHandler();
    public virtual void AddToCollection(object instance, object item);
    public virtual void AddToDictionary(object instance, object key, object item);
    private MethodInfo LookupAddMethod(Type ct, Type iface);
    public virtual object CreateInstance(Object[] arguments);
    public virtual MethodInfo GetAddMethod(XamlType contentType);
    public virtual MethodInfo GetEnumeratorMethod();
    public virtual IEnumerator GetItems(object instance);
}
public class Uno.Xaml.Schema.XamlTypeName : object {
    private static Char[] comma_or_parens;
    private static XamlTypeName[] empty_type_args;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XamlTypeName> <TypeArguments>k__BackingField;
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public IList`1<XamlTypeName> TypeArguments { get; private set; }
    public XamlTypeName(XamlType xamlType);
    public XamlTypeName(string xamlNamespace, string name);
    public XamlTypeName(string xamlNamespace, string name, IEnumerable`1<XamlTypeName> typeArguments);
    private static XamlTypeName();
    public static XamlTypeName Parse(string typeName, IXamlNamespaceResolver namespaceResolver);
    public static bool TryParse(string typeName, IXamlNamespaceResolver namespaceResolver, XamlTypeName& result);
    public static IList`1<XamlTypeName> ParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver);
    public static bool TryParseList(string typeNameList, IXamlNamespaceResolver namespaceResolver, IList`1& result);
    public static string ToString(IList`1<XamlTypeName> typeNameList, INamespacePrefixLookup prefixLookup);
    private static string DoToString(IList`1<XamlTypeName> typeNameList, INamespacePrefixLookup prefixLookup);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public IList`1<XamlTypeName> get_TypeArguments();
    [CompilerGeneratedAttribute]
private void set_TypeArguments(IList`1<XamlTypeName> value);
    public virtual string ToString();
    public string ToString(INamespacePrefixLookup prefixLookup);
}
public class Uno.Xaml.Schema.XamlTypeTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Uno.Xaml.Schema.XamlValueConverter`1 : object {
    private TConverterBase converter_instance;
    [CompilerGeneratedAttribute]
private Type <ConverterType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <TargetType>k__BackingField;
    public TConverterBase ConverterInstance { get; }
    public Type ConverterType { get; private set; }
    public string Name { get; private set; }
    public XamlType TargetType { get; private set; }
    public XamlValueConverter`1(Type converterType, XamlType targetType);
    public XamlValueConverter`1(Type converterType, XamlType targetType, string name);
    public TConverterBase get_ConverterInstance();
    [CompilerGeneratedAttribute]
public Type get_ConverterType();
    [CompilerGeneratedAttribute]
private void set_ConverterType(Type value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public XamlType get_TargetType();
    [CompilerGeneratedAttribute]
private void set_TargetType(XamlType value);
    public static bool op_Equality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2);
    private static bool IsNull(XamlValueConverter`1<TConverterBase> a);
    public static bool op_Inequality(XamlValueConverter`1<TConverterBase> converter1, XamlValueConverter`1<TConverterBase> converter2);
    public sealed virtual bool Equals(XamlValueConverter`1<TConverterBase> other);
    public virtual bool Equals(object obj);
    protected virtual TConverterBase CreateInstance();
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Uno.Xaml.TypeExtensionMethods : object {
    private static NullExtension null_value;
    private static TypeExtensionMethods();
    [ExtensionAttribute]
public static T GetCustomAttribute(ICustomAttributeProvider type, bool inherit);
    [ExtensionAttribute]
public static T GetCustomAttribute(XamlType type);
    [ExtensionAttribute]
public static bool ImplementsAnyInterfacesOf(Type type, Type[] definitions);
    [ExtensionAttribute]
public static bool ImplementsInterface(Type type, Type definition);
    public static object GetExtensionWrapped(object o);
    public static string GetStringValue(XamlType xt, XamlMember xm, object obj, IValueSerializerContext vsctx);
    [ExtensionAttribute]
public static TypeConverter GetTypeConverter(Type type);
    [ExtensionAttribute]
public static bool IsContentValue(XamlMember member, IValueSerializerContext vsctx);
    [ExtensionAttribute]
public static bool IsContentValue(XamlType type, IValueSerializerContext vsctx);
    [ExtensionAttribute]
public static bool ListEquals(IList`1<XamlType> a1, IList`1<XamlType> a2);
    [ExtensionAttribute]
public static bool HasPositionalParameters(XamlType type, IValueSerializerContext vsctx);
    [ExtensionAttribute]
private static bool ExaminePositionalParametersApplicable(XamlType type, IValueSerializerContext vsctx);
    [ExtensionAttribute]
public static IEnumerable`1<XamlMember> GetConstructorArguments(XamlType type);
    [ExtensionAttribute]
public static IEnumerable`1<XamlMember> GetSortedConstructorArguments(XamlType type);
    [ExtensionAttribute]
private static ParameterInfo FindParameterWithName(IEnumerable`1<ParameterInfo> pis, string name);
    [ExtensionAttribute]
public static string ConstructorArgumentName(XamlMember xm);
    internal static int CompareMembers(XamlMember m1, XamlMember m2);
    [ExtensionAttribute]
internal static bool IsConstructorArgument(XamlMember xm);
    [ExtensionAttribute]
internal static string GetInternalXmlName(XamlMember xm);
}
[ExtensionAttribute]
internal static class Uno.Xaml.TypeExtensionMethods2 : object {
    [IteratorStateMachineAttribute("Uno.Xaml.TypeExtensionMethods2/<GetAllObjectReaderMembersByType>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<XamlMember> GetAllObjectReaderMembersByType(XamlType type, IValueSerializerContext vsctx);
}
internal class Uno.Xaml.ValueSerializerContext : object {
    private XamlNameResolver name_resolver;
    private XamlTypeResolver type_resolver;
    private NamespaceResolver namespace_resolver;
    private PrefixLookup prefix_lookup;
    private XamlSchemaContext sctx;
    private IAmbientProvider ambient_provider;
    private XamlSchemaContext Uno.Xaml.IXamlSchemaContextProvider.SchemaContext { get; }
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public ValueSerializerContext(PrefixLookup prefixLookup, XamlSchemaContext schemaContext, IAmbientProvider ambientProvider);
    public sealed virtual object GetService(Type serviceType);
    private sealed virtual override XamlSchemaContext Uno.Xaml.IXamlSchemaContextProvider.get_SchemaContext();
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    public sealed virtual ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor);
    public sealed virtual ValueSerializer GetValueSerializerFor(Type type);
}
public class Uno.Xaml.XamlBackgroundReader : XamlReader {
    private Thread thread;
    private XamlReader r;
    private XamlNodeQueue q;
    private bool read_all_done;
    private bool do_work;
    private ManualResetEvent wait;
    public bool HasLineInfo { get; }
    public bool IsEof { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlBackgroundReader(XamlReader wrappedReader);
    public sealed virtual bool get_HasLineInfo();
    public virtual bool get_IsEof();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
    public void StartThread();
    public void StartThread(string threadName);
    [CompilerGeneratedAttribute]
private void <StartThread>b__30_0(object <p0>);
}
public abstract class Uno.Xaml.XamlDeferringLoader : object {
    public abstract virtual object Load(XamlReader xamlReader, IServiceProvider serviceProvider);
    public abstract virtual XamlReader Save(object value, IServiceProvider serviceProvider);
}
public class Uno.Xaml.XamlDirective : XamlMember {
    [CompilerGeneratedAttribute]
private AllowedMemberLocations <AllowedLocation>k__BackingField;
    private XamlValueConverter`1<TypeConverter> type_converter;
    private XamlType type;
    private XamlMemberInvoker invoker;
    private bool is_unknown;
    private IList`1<string> xaml_namespaces;
    public AllowedMemberLocations AllowedLocation { get; private set; }
    unknown bool InternalIsUnknown {internal set; }
    public XamlDirective(string xamlNamespace, string name);
    public XamlDirective(IEnumerable`1<string> xamlNamespaces, string name, XamlType xamlType, XamlValueConverter`1<TypeConverter> typeConverter, AllowedMemberLocations allowedLocation);
    [CompilerGeneratedAttribute]
public AllowedMemberLocations get_AllowedLocation();
    [CompilerGeneratedAttribute]
private void set_AllowedLocation(AllowedMemberLocations value);
    internal void set_InternalIsUnknown(bool value);
    public virtual int GetHashCode();
    public virtual IList`1<string> GetXamlNamespaces();
    protected sealed virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected sealed virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected sealed virtual IList`1<XamlMember> LookupDependsOn();
    protected sealed virtual XamlMemberInvoker LookupInvoker();
    protected sealed virtual bool LookupIsAmbient();
    protected sealed virtual bool LookupIsEvent();
    protected sealed virtual bool LookupIsReadOnly();
    protected sealed virtual bool LookupIsReadPublic();
    protected sealed virtual bool LookupIsUnknown();
    protected sealed virtual bool LookupIsWriteOnly();
    protected sealed virtual bool LookupIsWritePublic();
    protected sealed virtual XamlType LookupTargetType();
    protected sealed virtual XamlType LookupType();
    protected sealed virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected sealed virtual MethodInfo LookupUnderlyingGetter();
    protected sealed virtual MemberInfo LookupUnderlyingMember();
    protected sealed virtual MethodInfo LookupUnderlyingSetter();
    public virtual string ToString();
}
public class Uno.Xaml.XamlDuplicateMemberException : XamlException {
    [CompilerGeneratedAttribute]
private XamlMember <DuplicateMember>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlType <ParentType>k__BackingField;
    public XamlMember DuplicateMember { get; public set; }
    public XamlType ParentType { get; public set; }
    public XamlDuplicateMemberException(XamlMember member, XamlType type);
    public XamlDuplicateMemberException(string message);
    public XamlDuplicateMemberException(string message, Exception innerException);
    protected XamlDuplicateMemberException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public XamlMember get_DuplicateMember();
    [CompilerGeneratedAttribute]
public void set_DuplicateMember(XamlMember value);
    [CompilerGeneratedAttribute]
public XamlType get_ParentType();
    [CompilerGeneratedAttribute]
public void set_ParentType(XamlType value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Uno.Xaml.XamlException : Exception {
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LinePosition>k__BackingField;
    public int LineNumber { get; protected internal set; }
    public int LinePosition { get; protected internal set; }
    public string Message { get; }
    public XamlException(string message);
    public XamlException(string message, Exception innerException);
    public XamlException(string message, Exception innerException, int lineNumber, int linePosition);
    protected XamlException(SerializationInfo info, StreamingContext context);
    private static string FormatLine(string message, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
protected internal void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
protected internal void set_LinePosition(int value);
    public virtual string get_Message();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class Uno.Xaml.XamlInternalException : XamlException {
    public XamlInternalException(string message);
    public XamlInternalException(string message, Exception innerException);
    protected XamlInternalException(SerializationInfo info, StreamingContext context);
}
public static class Uno.Xaml.XamlLanguage : object {
    public static string Xaml2006Namespace;
    public static string Xml1998Namespace;
    internal static string Xmlns2000Namespace;
    internal static string XmlnsMCNamespace;
    internal static SpecialTypeNameList SpecialNames;
    private static XamlSchemaContext sctx;
    internal static bool InitializingDirectives;
    internal static bool InitializingTypes;
    private static String[] xaml_nss;
    private static String[] xml_nss;
    [CompilerGeneratedAttribute]
private static ReadOnlyCollection`1<XamlDirective> <AllDirectives>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <AsyncRecords>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Base>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Class>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <ClassAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <ClassModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <ConnectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <FactoryMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <FieldModifier>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Initialization>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Lang>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <PositionalParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Subclass>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <SynchronousMode>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Shared>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Space>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <TypeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Uid>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <UnknownContent>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlDirective <Ignorable>k__BackingField;
    [CompilerGeneratedAttribute]
private static ReadOnlyCollection`1<XamlType> <AllTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Array>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Boolean>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Byte>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Char>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Decimal>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Double>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Int16>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Int32>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Int64>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Null>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Bind>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Reference>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Single>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Static>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <String>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <TimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private static XamlType <XData>k__BackingField;
    public static IList`1<string> XamlNamespaces { get; }
    public static IList`1<string> XmlNamespaces { get; }
    public static ReadOnlyCollection`1<XamlDirective> AllDirectives { get; private set; }
    public static XamlDirective Arguments { get; private set; }
    public static XamlDirective AsyncRecords { get; private set; }
    public static XamlDirective Base { get; private set; }
    public static XamlDirective Class { get; private set; }
    public static XamlDirective ClassAttributes { get; private set; }
    public static XamlDirective ClassModifier { get; private set; }
    public static XamlDirective Code { get; private set; }
    public static XamlDirective ConnectionId { get; private set; }
    public static XamlDirective FactoryMethod { get; private set; }
    public static XamlDirective FieldModifier { get; private set; }
    public static XamlDirective Initialization { get; private set; }
    public static XamlDirective Items { get; private set; }
    public static XamlDirective Key { get; private set; }
    public static XamlDirective Lang { get; private set; }
    public static XamlDirective Members { get; private set; }
    public static XamlDirective Name { get; private set; }
    public static XamlDirective PositionalParameters { get; private set; }
    public static XamlDirective Subclass { get; private set; }
    public static XamlDirective SynchronousMode { get; private set; }
    public static XamlDirective Shared { get; private set; }
    public static XamlDirective Space { get; private set; }
    public static XamlDirective TypeArguments { get; private set; }
    public static XamlDirective Uid { get; private set; }
    public static XamlDirective UnknownContent { get; private set; }
    public static XamlDirective Ignorable { get; private set; }
    public static ReadOnlyCollection`1<XamlType> AllTypes { get; private set; }
    public static XamlType Array { get; private set; }
    public static XamlType Boolean { get; private set; }
    public static XamlType Byte { get; private set; }
    public static XamlType Char { get; private set; }
    public static XamlType Decimal { get; private set; }
    public static XamlType Double { get; private set; }
    public static XamlType Int16 { get; private set; }
    public static XamlType Int32 { get; private set; }
    public static XamlType Int64 { get; private set; }
    public static XamlType Member { get; private set; }
    public static XamlType Null { get; private set; }
    public static XamlType Object { get; private set; }
    public static XamlType Bind { get; private set; }
    public static XamlType Property { get; private set; }
    public static XamlType Reference { get; private set; }
    public static XamlType Single { get; private set; }
    public static XamlType Static { get; private set; }
    public static XamlType String { get; private set; }
    public static XamlType TimeSpan { get; private set; }
    public static XamlType Type { get; private set; }
    public static XamlType Uri { get; private set; }
    public static XamlType XData { get; private set; }
    private static XamlLanguage();
    private static XamlType XT();
    public static IList`1<string> get_XamlNamespaces();
    public static IList`1<string> get_XmlNamespaces();
    [CompilerGeneratedAttribute]
public static ReadOnlyCollection`1<XamlDirective> get_AllDirectives();
    [CompilerGeneratedAttribute]
private static void set_AllDirectives(ReadOnlyCollection`1<XamlDirective> value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Arguments();
    [CompilerGeneratedAttribute]
private static void set_Arguments(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_AsyncRecords();
    [CompilerGeneratedAttribute]
private static void set_AsyncRecords(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Base();
    [CompilerGeneratedAttribute]
private static void set_Base(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Class();
    [CompilerGeneratedAttribute]
private static void set_Class(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_ClassAttributes();
    [CompilerGeneratedAttribute]
private static void set_ClassAttributes(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_ClassModifier();
    [CompilerGeneratedAttribute]
private static void set_ClassModifier(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Code();
    [CompilerGeneratedAttribute]
private static void set_Code(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_ConnectionId();
    [CompilerGeneratedAttribute]
private static void set_ConnectionId(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_FactoryMethod();
    [CompilerGeneratedAttribute]
private static void set_FactoryMethod(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_FieldModifier();
    [CompilerGeneratedAttribute]
private static void set_FieldModifier(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Initialization();
    [CompilerGeneratedAttribute]
private static void set_Initialization(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Items();
    [CompilerGeneratedAttribute]
private static void set_Items(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Key();
    [CompilerGeneratedAttribute]
private static void set_Key(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Lang();
    [CompilerGeneratedAttribute]
private static void set_Lang(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Members();
    [CompilerGeneratedAttribute]
private static void set_Members(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Name();
    [CompilerGeneratedAttribute]
private static void set_Name(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_PositionalParameters();
    [CompilerGeneratedAttribute]
private static void set_PositionalParameters(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Subclass();
    [CompilerGeneratedAttribute]
private static void set_Subclass(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_SynchronousMode();
    [CompilerGeneratedAttribute]
private static void set_SynchronousMode(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Shared();
    [CompilerGeneratedAttribute]
private static void set_Shared(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Space();
    [CompilerGeneratedAttribute]
private static void set_Space(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_TypeArguments();
    [CompilerGeneratedAttribute]
private static void set_TypeArguments(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Uid();
    [CompilerGeneratedAttribute]
private static void set_Uid(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_UnknownContent();
    [CompilerGeneratedAttribute]
private static void set_UnknownContent(XamlDirective value);
    [CompilerGeneratedAttribute]
public static XamlDirective get_Ignorable();
    [CompilerGeneratedAttribute]
private static void set_Ignorable(XamlDirective value);
    [CompilerGeneratedAttribute]
public static ReadOnlyCollection`1<XamlType> get_AllTypes();
    [CompilerGeneratedAttribute]
private static void set_AllTypes(ReadOnlyCollection`1<XamlType> value);
    [CompilerGeneratedAttribute]
public static XamlType get_Array();
    [CompilerGeneratedAttribute]
private static void set_Array(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Boolean();
    [CompilerGeneratedAttribute]
private static void set_Boolean(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Byte();
    [CompilerGeneratedAttribute]
private static void set_Byte(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Char();
    [CompilerGeneratedAttribute]
private static void set_Char(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Decimal();
    [CompilerGeneratedAttribute]
private static void set_Decimal(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Double();
    [CompilerGeneratedAttribute]
private static void set_Double(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Int16();
    [CompilerGeneratedAttribute]
private static void set_Int16(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Int32();
    [CompilerGeneratedAttribute]
private static void set_Int32(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Int64();
    [CompilerGeneratedAttribute]
private static void set_Int64(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Member();
    [CompilerGeneratedAttribute]
private static void set_Member(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Null();
    [CompilerGeneratedAttribute]
private static void set_Null(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Object();
    [CompilerGeneratedAttribute]
private static void set_Object(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Bind();
    [CompilerGeneratedAttribute]
private static void set_Bind(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Property();
    [CompilerGeneratedAttribute]
private static void set_Property(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Reference();
    [CompilerGeneratedAttribute]
private static void set_Reference(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Single();
    [CompilerGeneratedAttribute]
private static void set_Single(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Static();
    [CompilerGeneratedAttribute]
private static void set_Static(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_String();
    [CompilerGeneratedAttribute]
private static void set_String(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_TimeSpan();
    [CompilerGeneratedAttribute]
private static void set_TimeSpan(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Type();
    [CompilerGeneratedAttribute]
private static void set_Type(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_Uri();
    [CompilerGeneratedAttribute]
private static void set_Uri(XamlType value);
    [CompilerGeneratedAttribute]
public static XamlType get_XData();
    [CompilerGeneratedAttribute]
private static void set_XData(XamlType value);
    internal static bool IsValidXamlName(string name);
    private static bool IsValidXamlName(char c, bool first);
}
public class Uno.Xaml.XamlMember : object {
    private XamlType type;
    private XamlType target_type;
    private MemberInfo underlying_member;
    private MethodInfo underlying_getter;
    private MethodInfo underlying_setter;
    private XamlSchemaContext context;
    private XamlMemberInvoker invoker;
    private bool is_attachable;
    private bool is_event;
    private bool is_directive;
    private bool is_predefined_directive;
    private string directive_ns;
    [CompilerGeneratedAttribute]
private XamlType <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static XamlMember[] empty_members;
    private static XamlMember[] empty_list;
    internal MethodInfo UnderlyingGetter { get; private set; }
    internal MethodInfo UnderlyingSetter { get; private set; }
    public XamlType DeclaringType { get; private set; }
    public string Name { get; private set; }
    public string PreferredXamlNamespace { get; }
    public DesignerSerializationVisibility SerializationVisibility { get; }
    public bool IsAttachable { get; }
    public bool IsDirective { get; }
    public bool IsNameValid { get; }
    public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; }
    public IList`1<XamlMember> DependsOn { get; }
    public XamlMemberInvoker Invoker { get; }
    public bool IsAmbient { get; }
    public bool IsEvent { get; }
    public bool IsReadOnly { get; }
    public bool IsReadPublic { get; }
    public bool IsUnknown { get; }
    public bool IsWriteOnly { get; }
    public bool IsWritePublic { get; }
    public XamlType TargetType { get; }
    public XamlType Type { get; }
    public XamlValueConverter`1<TypeConverter> TypeConverter { get; }
    public MemberInfo UnderlyingMember { get; }
    public XamlValueConverter`1<ValueSerializer> ValueSerializer { get; }
    public XamlMember(EventInfo eventInfo, XamlSchemaContext schemaContext);
    public XamlMember(EventInfo eventInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(PropertyInfo propertyInfo, XamlSchemaContext schemaContext);
    public XamlMember(PropertyInfo propertyInfo, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext);
    public XamlMember(string attachableEventName, MethodInfo adder, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext);
    public XamlMember(string attachablePropertyName, MethodInfo getter, MethodInfo setter, XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    public XamlMember(string name, XamlType declaringType, bool isAttachable);
    private XamlMember(XamlSchemaContext schemaContext, XamlMemberInvoker invoker);
    internal XamlMember(bool isDirective, string ns, string name);
    private static XamlMember();
    internal static XamlMember FromUnknown(string name, string ns, XamlType declaringType);
    internal MethodInfo get_UnderlyingGetter();
    private void set_UnderlyingGetter(MethodInfo value);
    internal MethodInfo get_UnderlyingSetter();
    private void set_UnderlyingSetter(MethodInfo value);
    [CompilerGeneratedAttribute]
public XamlType get_DeclaringType();
    [CompilerGeneratedAttribute]
private void set_DeclaringType(XamlType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public string get_PreferredXamlNamespace();
    public DesignerSerializationVisibility get_SerializationVisibility();
    public bool get_IsAttachable();
    public bool get_IsDirective();
    public bool get_IsNameValid();
    public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    public IList`1<XamlMember> get_DependsOn();
    public XamlMemberInvoker get_Invoker();
    public bool get_IsAmbient();
    public bool get_IsEvent();
    public bool get_IsReadOnly();
    public bool get_IsReadPublic();
    public bool get_IsUnknown();
    public bool get_IsWriteOnly();
    public bool get_IsWritePublic();
    public XamlType get_TargetType();
    public XamlType get_Type();
    public XamlValueConverter`1<TypeConverter> get_TypeConverter();
    public MemberInfo get_UnderlyingMember();
    public XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    public static bool op_Equality(XamlMember xamlMember1, XamlMember xamlMember2);
    private static bool IsNull(XamlMember a);
    public static bool op_Inequality(XamlMember xamlMember1, XamlMember xamlMember2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(XamlMember other);
    public virtual int GetHashCode();
    [MonoTODOAttribute("there are some patterns that return different kind of value: e.g. List<int>.Capacity")]
public virtual string ToString();
    public virtual IList`1<string> GetXamlNamespaces();
    internal ICustomAttributeProvider GetCustomAttributeProvider();
    protected virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected virtual IList`1<XamlMember> LookupDependsOn();
    protected virtual XamlMemberInvoker LookupInvoker();
    protected virtual bool LookupIsAmbient();
    protected virtual bool LookupIsEvent();
    protected virtual bool LookupIsReadOnly();
    protected virtual bool LookupIsReadPublic();
    protected virtual bool LookupIsUnknown();
    protected virtual bool LookupIsWriteOnly();
    protected virtual bool LookupIsWritePublic();
    protected virtual XamlType LookupTargetType();
    protected virtual XamlType LookupType();
    private Type DoGetType();
    protected virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected virtual MethodInfo LookupUnderlyingGetter();
    protected virtual MemberInfo LookupUnderlyingMember();
    protected virtual MethodInfo LookupUnderlyingSetter();
    protected virtual XamlValueConverter`1<ValueSerializer> LookupValueSerializer();
    private void VerifyGetter(MethodInfo method);
    private void VerifyAdderSetter(MethodInfo method);
}
internal class Uno.Xaml.XamlNameResolver : object {
    [CompilerGeneratedAttribute]
private bool <IsCollectingReferences>k__BackingField;
    private Dictionary`2<string, NamedObject> objects;
    private List`1<object> referenced;
    [CompilerGeneratedAttribute]
private EventHandler OnNameScopeInitializationComplete;
    private int saved_count;
    private int saved_referenced_count;
    public bool IsCollectingReferences { get; public set; }
    [MonoTODOAttribute]
public bool IsFixupTokenAvailable { get; }
    [CompilerGeneratedAttribute]
public bool get_IsCollectingReferences();
    [CompilerGeneratedAttribute]
public void set_IsCollectingReferences(bool value);
    public sealed virtual bool get_IsFixupTokenAvailable();
    [CompilerGeneratedAttribute]
public sealed virtual void add_OnNameScopeInitializationComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_OnNameScopeInitializationComplete(EventHandler value);
    internal void NameScopeInitializationCompleted(object sender);
    public void Save();
    public void Restore();
    internal void SetNamedObject(string name, object value, bool fullyInitialized);
    internal bool Contains(string name);
    public sealed virtual string GetName(object value);
    internal void SaveAsReferenced(object val);
    internal string GetReferencedName(object val);
    public sealed virtual object GetFixupToken(IEnumerable`1<string> names);
    public sealed virtual object GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlNameResolver/<GetAllNamesAndValuesInScope>d__25")]
public sealed virtual IEnumerable`1<KeyValuePair`2<string, object>> GetAllNamesAndValuesInScope();
    public sealed virtual object Resolve(string name);
    public sealed virtual object Resolve(string name, Boolean& isFullyInitialized);
}
[ExtensionAttribute]
internal static class Uno.Xaml.XamlNodeExtensions : object {
    [ExtensionAttribute]
internal static object GetMemberValue(XamlObject xobj, XamlMember xm);
}
internal class Uno.Xaml.XamlNodeInfo : ValueType {
    private XamlNodeType node_type;
    private object value;
    private XamlNodeMember member;
    public XamlNodeType NodeType { get; }
    public XamlObject Object { get; }
    public XamlNodeMember Member { get; }
    public object Value { get; }
    public XamlNodeInfo(XamlNodeType nodeType, XamlObject value);
    public XamlNodeInfo(XamlNodeType nodeType, XamlNodeMember member);
    public XamlNodeInfo(object value);
    public XamlNodeInfo(NamespaceDeclaration ns);
    public XamlNodeType get_NodeType();
    public XamlObject get_Object();
    public XamlNodeMember get_Member();
    public object get_Value();
}
internal class Uno.Xaml.XamlNodeLineInfo : ValueType {
    public XamlNodeInfo Node;
    public int LineNumber;
    public int LinePosition;
    public XamlNodeLineInfo(XamlNodeInfo node, int line, int column);
}
public class Uno.Xaml.XamlNodeList : object {
    public int Count { get; }
    public XamlWriter Writer { get; }
    public XamlNodeList(XamlSchemaContext schemaContext);
    public XamlNodeList(XamlSchemaContext schemaContext, int size);
    public int get_Count();
    public XamlWriter get_Writer();
    public void Clear();
    public XamlReader GetReader();
}
internal class Uno.Xaml.XamlNodeMember : ValueType {
    private XamlObject owner;
    private XamlMember member;
    public XamlObject Owner { get; }
    public XamlMember Member { get; }
    public XamlObject Value { get; }
    public XamlNodeMember(XamlObject owner, XamlMember member);
    public XamlObject get_Owner();
    public XamlMember get_Member();
    public XamlObject get_Value();
    private XamlType GetType(object obj);
}
public class Uno.Xaml.XamlNodeQueue : object {
    private Queue`1<XamlNodeLineInfo> queue;
    private XamlSchemaContext ctx;
    private XamlReader reader;
    private XamlWriter writer;
    [CompilerGeneratedAttribute]
private IXamlLineInfo <LineInfoProvider>k__BackingField;
    internal IXamlLineInfo LineInfoProvider { get; internal set; }
    internal XamlSchemaContext SchemaContext { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public XamlReader Reader { get; }
    public XamlWriter Writer { get; }
    public XamlNodeQueue(XamlSchemaContext schemaContext);
    [CompilerGeneratedAttribute]
internal IXamlLineInfo get_LineInfoProvider();
    [CompilerGeneratedAttribute]
internal void set_LineInfoProvider(IXamlLineInfo value);
    internal XamlSchemaContext get_SchemaContext();
    public int get_Count();
    public bool get_IsEmpty();
    public XamlReader get_Reader();
    public XamlWriter get_Writer();
    internal XamlNodeLineInfo Dequeue();
    internal void Enqueue(XamlNodeInfo info);
}
internal class Uno.Xaml.XamlNodeQueueReader : XamlReader {
    private XamlNodeQueue source;
    private XamlNodeLineInfo node;
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlNodeQueueReader(XamlNodeQueue source);
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual bool Read();
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
internal class Uno.Xaml.XamlNodeQueueWriter : XamlWriter {
    private XamlNodeQueue source;
    public XamlSchemaContext SchemaContext { get; }
    public XamlNodeQueueWriter(XamlNodeQueue source);
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual void WriteEndMember();
    public virtual void WriteEndObject();
    public virtual void WriteGetObject();
    public virtual void WriteNamespace(NamespaceDeclaration ns);
    public virtual void WriteStartMember(XamlMember xamlMember);
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteValue(object value);
}
public enum Uno.Xaml.XamlNodeType : Enum {
    public int value__;
    public static XamlNodeType None;
    public static XamlNodeType StartObject;
    public static XamlNodeType GetObject;
    public static XamlNodeType EndObject;
    public static XamlNodeType StartMember;
    public static XamlNodeType EndMember;
    public static XamlNodeType Value;
    public static XamlNodeType NamespaceDeclaration;
}
internal class Uno.Xaml.XamlObject : ValueType {
    private XamlType type;
    private InstanceContext context;
    public XamlType Type { get; }
    public InstanceContext Context { get; }
    public XamlObject(XamlType type, object instance);
    public XamlObject(XamlType type, InstanceContext context);
    public XamlType get_Type();
    public InstanceContext get_Context();
    private XamlType GetType(object obj);
    public object GetRawValue();
}
public class Uno.Xaml.XamlObjectEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    public object Instance { get; private set; }
    public XamlObjectEventArgs(object instance);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
}
internal class Uno.Xaml.XamlObjectNodeIterator : object {
    private static XamlObject null_object;
    private XamlSchemaContext ctx;
    private object root;
    private IValueSerializerContext value_serializer_ctx;
    private int used_reference_ids;
    private PrefixLookup PrefixLookup { get; }
    private XamlNameResolver NameResolver { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlObjectNodeIterator(object root, XamlSchemaContext schemaContext, IValueSerializerContext vctx);
    private static XamlObjectNodeIterator();
    private PrefixLookup get_PrefixLookup();
    private XamlNameResolver get_NameResolver();
    public XamlSchemaContext get_SchemaContext();
    private XamlType GetType(object obj);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<GetNodes>d__12")]
public IEnumerable`1<XamlNodeInfo> GetNodes();
    private IEnumerable`1<XamlNodeInfo> GetNodes(XamlMember xm, XamlObject xobj);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<GetNodes>d__14")]
private IEnumerable`1<XamlNodeInfo> GetNodes(XamlMember xm, XamlObject xobj, XamlType overrideMemberType, bool partOfPositionalParameters);
    private string GetReferenceName(XamlObject xobj);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<GetMemberNodes>d__17")]
private IEnumerable`1<XamlNodeInfo> GetMemberNodes(XamlNodeMember member, IEnumerable`1<XamlNodeInfo> contents);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<GetNodeMembers>d__18")]
private IEnumerable`1<XamlNodeMember> GetNodeMembers(XamlObject xobj, IValueSerializerContext vsctx);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<GetObjectMemberNodes>d__19")]
private IEnumerable`1<XamlNodeInfo> GetObjectMemberNodes(XamlObject xobj);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<GetItemsNodes>d__20")]
private IEnumerable`1<XamlNodeInfo> GetItemsNodes(XamlMember xm, XamlObject xobj);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<EnumerateMixingMember>d__21")]
private IEnumerable`1<XamlNodeInfo> EnumerateMixingMember(IEnumerable`1<XamlNodeInfo> nodes1, XamlMember m2, IEnumerable`1<XamlNodeInfo> nodes2);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<GetKeyNodes>d__22")]
private IEnumerable`1<XamlNodeInfo> GetKeyNodes(object ikey, XamlType keyType, XamlNodeMember xknm);
    public void PrepareReading();
    [IteratorStateMachineAttribute("Uno.Xaml.XamlObjectNodeIterator/<NamespacesInType>d__24")]
private IEnumerable`1<string> NamespacesInType(XamlType xt);
}
public class Uno.Xaml.XamlObjectReader : XamlReader {
    private bool is_eof;
    private object root;
    private object root_raw;
    private XamlSchemaContext sctx;
    private IValueSerializerContext value_serializer_context;
    private IEnumerator`1<NamespaceDeclaration> ns_iterator;
    private IEnumerator`1<XamlNodeInfo> nodes;
    private PrefixLookup PrefixLookup { get; }
    public object Instance { get; }
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlObjectReader(object instance);
    public XamlObjectReader(object instance, XamlObjectReaderSettings settings);
    public XamlObjectReader(object instance, XamlSchemaContext schemaContext);
    public XamlObjectReader(object instance, XamlSchemaContext schemaContext, XamlObjectReaderSettings settings);
    private PrefixLookup get_PrefixLookup();
    public virtual object get_Instance();
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual bool Read();
}
public class Uno.Xaml.XamlObjectReaderException : XamlException {
    public XamlObjectReaderException(string message);
    public XamlObjectReaderException(string message, Exception innerException);
    protected XamlObjectReaderException(SerializationInfo info, StreamingContext context);
}
public class Uno.Xaml.XamlObjectReaderSettings : XamlReaderSettings {
    [CompilerGeneratedAttribute]
private bool <RequireExplicitContentVisibility>k__BackingField;
    public bool RequireExplicitContentVisibility { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireExplicitContentVisibility();
    [CompilerGeneratedAttribute]
public void set_RequireExplicitContentVisibility(bool value);
}
public class Uno.Xaml.XamlObjectWriter : XamlWriter {
    private XamlSchemaContext sctx;
    private XamlObjectWriterSettings settings;
    private XamlObjectWriterInternal intl;
    private bool lineinfo_was_given;
    internal XamlObjectWriterSettings Settings { get; }
    public object Result { get; }
    public INameScope RootNameScope { get; }
    public XamlSchemaContext SchemaContext { get; }
    public bool ShouldProvideLineInfo { get; }
    public XamlObjectWriter(XamlSchemaContext schemaContext);
    public XamlObjectWriter(XamlSchemaContext schemaContext, XamlObjectWriterSettings settings);
    internal XamlObjectWriterSettings get_Settings();
    public virtual object get_Result();
    public INameScope get_RootNameScope();
    public virtual XamlSchemaContext get_SchemaContext();
    public sealed virtual bool get_ShouldProvideLineInfo();
    public sealed virtual void SetLineInfo(int lineNumber, int linePosition);
    public void Clear();
    protected virtual void Dispose(bool disposing);
    protected internal virtual void OnAfterBeginInit(object value);
    protected internal virtual void OnAfterEndInit(object value);
    protected internal virtual void OnAfterProperties(object value);
    protected internal virtual void OnBeforeProperties(object value);
    protected internal virtual bool OnSetValue(object eventSender, XamlMember member, object value);
    public virtual void WriteGetObject();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteStartObject(XamlType xamlType);
    public virtual void WriteValue(object value);
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteEndObject();
    public virtual void WriteEndMember();
}
public class Uno.Xaml.XamlObjectWriterException : XamlException {
    public XamlObjectWriterException(string message);
    public XamlObjectWriterException(string message, Exception innerException);
    protected XamlObjectWriterException(SerializationInfo info, StreamingContext context);
}
internal class Uno.Xaml.XamlObjectWriterInternal : XamlWriterInternalBase {
    private static string Xmlns2000Namespace;
    private XamlObjectWriter source;
    private XamlSchemaContext sctx;
    private INameScope name_scope;
    private List`1<NameFixupRequired> pending_name_references;
    private AmbientProvider ambient_provider;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    private Stack`1<object> escaped_objects;
    private static BindingFlags static_flags;
    public INameScope NameScope { get; }
    public object Result { get; public set; }
    internal IXamlNameResolver name_resolver { get; }
    internal IAmbientProvider AmbientProvider { get; }
    public XamlObjectWriterInternal(XamlObjectWriter source, XamlSchemaContext schemaContext, XamlWriterStateManager manager);
    private static XamlObjectWriterInternal();
    public INameScope get_NameScope();
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
    protected virtual void OnWriteStartObject();
    protected virtual void OnWriteGetObject();
    protected virtual void OnWriteEndObject();
    protected virtual void OnWriteStartMember(XamlMember property);
    protected virtual void OnWriteEndMember();
    private void SetEvent(XamlMember member, string value);
    private void SetValue(XamlMember member, object value);
    private void SetValue(XamlMember member, object target, object value);
    private void PopulateObject(bool considerPositionalParameters, IList`1<object> contents);
    protected virtual void OnWriteValue(object value);
    protected virtual void OnWriteNamespace(NamespaceDeclaration nd);
    private void StoreAppropriatelyTypedValue(object obj, object keyObj);
    private bool AddToCollectionIfAppropriate(XamlType xt, XamlMember xm, object parent, object obj, object keyObj);
    private object GetCorrectlyTypedValue(XamlMember xm, XamlType xt, object value);
    private object DoGetCorrectlyTypedValue(XamlMember xm, XamlType xt, object value);
    private XamlType ResolveTypeFromName(string name);
    private bool IsAllowedType(XamlType xt, object value);
    private void InitializeObjectIfRequired(bool waitForParameters);
    internal IXamlNameResolver get_name_resolver();
    internal virtual IAmbientProvider get_AmbientProvider();
    private void ResolvePendingReferences();
    private void HandleBeginInit(object value);
    private void HandleEndInit(object value);
}
public class Uno.Xaml.XamlObjectWriterSettings : XamlWriterSettings {
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <AfterBeginInitHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <AfterEndInitHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <AfterPropertiesHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlObjectEventArgs> <BeforePropertiesHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<XamlSetValueEventArgs> <XamlSetValueHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlAccessLevel <AccessLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private INameScope <ExternalNameScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreCanConvert>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreferUnconvertedDictionaryKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RegisterNamesOnExternalNamescope>k__BackingField;
    [CompilerGeneratedAttribute]
private object <RootObjectInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipDuplicatePropertyCheck>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipProvideValueOnRoot>k__BackingField;
    public EventHandler`1<XamlObjectEventArgs> AfterBeginInitHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> AfterEndInitHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> AfterPropertiesHandler { get; public set; }
    public EventHandler`1<XamlObjectEventArgs> BeforePropertiesHandler { get; public set; }
    public EventHandler`1<XamlSetValueEventArgs> XamlSetValueHandler { get; public set; }
    [MonoTODOAttribute("Ignored")]
public XamlAccessLevel AccessLevel { get; public set; }
    public INameScope ExternalNameScope { get; public set; }
    [MonoTODOAttribute("Ignored")]
public bool IgnoreCanConvert { get; public set; }
    [MonoTODOAttribute("Ignored")]
public bool PreferUnconvertedDictionaryKeys { get; public set; }
    public bool RegisterNamesOnExternalNamescope { get; public set; }
    public object RootObjectInstance { get; public set; }
    [MonoTODOAttribute("Ignored")]
public bool SkipDuplicatePropertyCheck { get; public set; }
    [MonoTODOAttribute("Ignored")]
public bool SkipProvideValueOnRoot { get; public set; }
    public XamlObjectWriterSettings(XamlObjectWriterSettings settings);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_AfterBeginInitHandler();
    [CompilerGeneratedAttribute]
public void set_AfterBeginInitHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_AfterEndInitHandler();
    [CompilerGeneratedAttribute]
public void set_AfterEndInitHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_AfterPropertiesHandler();
    [CompilerGeneratedAttribute]
public void set_AfterPropertiesHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlObjectEventArgs> get_BeforePropertiesHandler();
    [CompilerGeneratedAttribute]
public void set_BeforePropertiesHandler(EventHandler`1<XamlObjectEventArgs> value);
    [CompilerGeneratedAttribute]
public EventHandler`1<XamlSetValueEventArgs> get_XamlSetValueHandler();
    [CompilerGeneratedAttribute]
public void set_XamlSetValueHandler(EventHandler`1<XamlSetValueEventArgs> value);
    [CompilerGeneratedAttribute]
public XamlAccessLevel get_AccessLevel();
    [CompilerGeneratedAttribute]
public void set_AccessLevel(XamlAccessLevel value);
    [CompilerGeneratedAttribute]
public INameScope get_ExternalNameScope();
    [CompilerGeneratedAttribute]
public void set_ExternalNameScope(INameScope value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreCanConvert();
    [CompilerGeneratedAttribute]
public void set_IgnoreCanConvert(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreferUnconvertedDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_PreferUnconvertedDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_RegisterNamesOnExternalNamescope();
    [CompilerGeneratedAttribute]
public void set_RegisterNamesOnExternalNamescope(bool value);
    [CompilerGeneratedAttribute]
public object get_RootObjectInstance();
    [CompilerGeneratedAttribute]
public void set_RootObjectInstance(object value);
    [CompilerGeneratedAttribute]
public bool get_SkipDuplicatePropertyCheck();
    [CompilerGeneratedAttribute]
public void set_SkipDuplicatePropertyCheck(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipProvideValueOnRoot();
    [CompilerGeneratedAttribute]
public void set_SkipProvideValueOnRoot(bool value);
}
public class Uno.Xaml.XamlParseException : XamlException {
    public XamlParseException(string message);
    public XamlParseException(string message, Exception innerException);
    protected XamlParseException(SerializationInfo info, StreamingContext context);
}
public abstract class Uno.Xaml.XamlReader : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    protected bool IsDisposed { get; private set; }
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public abstract virtual bool get_IsEof();
    public abstract virtual XamlMember get_Member();
    public abstract virtual NamespaceDeclaration get_Namespace();
    public abstract virtual XamlNodeType get_NodeType();
    public abstract virtual XamlSchemaContext get_SchemaContext();
    public abstract virtual XamlType get_Type();
    public abstract virtual object get_Value();
    public void Close();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    public abstract virtual bool Read();
    public virtual XamlReader ReadSubtree();
    public virtual void Skip();
}
public class Uno.Xaml.XamlReaderSettings : object {
    [CompilerGeneratedAttribute]
private bool <AllowProtectedMembersOnRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <BaseUri>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreUidsOnPropertyElements>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <LocalAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProvideLineInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValuesMustBeString>k__BackingField;
    public bool AllowProtectedMembersOnRoot { get; public set; }
    public Uri BaseUri { get; public set; }
    public bool IgnoreUidsOnPropertyElements { get; public set; }
    public Assembly LocalAssembly { get; public set; }
    public bool ProvideLineInfo { get; public set; }
    public bool ValuesMustBeString { get; public set; }
    public XamlReaderSettings(XamlReaderSettings settings);
    [CompilerGeneratedAttribute]
public bool get_AllowProtectedMembersOnRoot();
    [CompilerGeneratedAttribute]
public void set_AllowProtectedMembersOnRoot(bool value);
    [CompilerGeneratedAttribute]
public Uri get_BaseUri();
    [CompilerGeneratedAttribute]
public void set_BaseUri(Uri value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreUidsOnPropertyElements();
    [CompilerGeneratedAttribute]
public void set_IgnoreUidsOnPropertyElements(bool value);
    [CompilerGeneratedAttribute]
public Assembly get_LocalAssembly();
    [CompilerGeneratedAttribute]
public void set_LocalAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public bool get_ProvideLineInfo();
    [CompilerGeneratedAttribute]
public void set_ProvideLineInfo(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValuesMustBeString();
    [CompilerGeneratedAttribute]
public void set_ValuesMustBeString(bool value);
}
public class Uno.Xaml.XamlSchemaContext : object {
    private static Char[] _semicolonArray;
    private IList`1<Assembly> reference_assemblies;
    private Dictionary`2<string, string> xaml_nss;
    private Dictionary`2<string, string> prefixes;
    private Dictionary`2<string, string> compat_nss;
    private Dictionary`2<string, List`1<XamlType>> all_xaml_types;
    private XamlType[] empty_xaml_types;
    private List`1<XamlType> run_time_types;
    private object gate;
    [CompilerGeneratedAttribute]
private bool <FullyQualifyAssemblyNamesInClrNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMarkupExtensionsWithDuplicateArity>k__BackingField;
    private Dictionary`2<KeyValuePair`2<string, string>, XamlDirective> xaml_directives;
    private static int clr_ns_len;
    private static int clr_ass_len;
    public bool FullyQualifyAssemblyNamesInClrNamespaces { get; private set; }
    public IList`1<Assembly> ReferenceAssemblies { get; }
    private IEnumerable`1<Assembly> AssembliesInScope { get; }
    public bool SupportMarkupExtensionsWithDuplicateArity { get; private set; }
    public XamlSchemaContext(IEnumerable`1<Assembly> referenceAssemblies);
    public XamlSchemaContext(XamlSchemaContextSettings settings);
    public XamlSchemaContext(IEnumerable`1<Assembly> referenceAssemblies, XamlSchemaContextSettings settings);
    private static XamlSchemaContext();
    private void RegisterAssemblyLoaded();
    [CompilerGeneratedAttribute]
public bool get_FullyQualifyAssemblyNamesInClrNamespaces();
    [CompilerGeneratedAttribute]
private void set_FullyQualifyAssemblyNamesInClrNamespaces(bool value);
    public IList`1<Assembly> get_ReferenceAssemblies();
    private IEnumerable`1<Assembly> get_AssembliesInScope();
    [CompilerGeneratedAttribute]
public bool get_SupportMarkupExtensionsWithDuplicateArity();
    [CompilerGeneratedAttribute]
private void set_SupportMarkupExtensionsWithDuplicateArity(bool value);
    internal string GetXamlNamespace(string clrNamespace);
    public virtual IEnumerable`1<string> GetAllXamlNamespaces();
    public virtual ICollection`1<XamlType> GetAllXamlTypes(string xamlNamespace);
    public virtual string GetPreferredPrefix(string xmlns);
    protected internal XamlValueConverter`1<TConverterBase> GetValueConverter(Type converterType, XamlType targetType);
    public virtual XamlDirective GetXamlDirective(string xamlNamespace, string name);
    public virtual XamlType GetXamlType(Type type);
    public XamlType GetXamlType(XamlTypeName xamlTypeName);
    protected internal virtual XamlType GetXamlType(string xamlNamespace, string name, XamlType[] typeArguments);
    private bool TypeMatches(XamlType t, string ns, string name, XamlType[] typeArgs);
    protected internal virtual Assembly OnAssemblyResolve(string assemblyName);
    public virtual bool TryGetCompatibleXamlNamespace(string xamlNamespace, String& compatibleNamespace);
    private void FillXamlNamespaces(Assembly ass);
    private void FillPrefixes(Assembly ass);
    private void FillCompatibilities(Assembly ass);
    private void FillAllXamlTypes(Assembly ass);
    private Type ResolveXamlTypeName(string xmlNamespace, string xmlLocalName, IList`1<XamlType> typeArguments);
    private static string GetTypeName(string tns, string name, Type[] genArgs);
}
public class Uno.Xaml.XamlSchemaContextSettings : object {
    [CompilerGeneratedAttribute]
private bool <FullyQualifyAssemblyNamesInClrNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportMarkupExtensionsWithDuplicateArity>k__BackingField;
    public bool FullyQualifyAssemblyNamesInClrNamespaces { get; public set; }
    public bool SupportMarkupExtensionsWithDuplicateArity { get; public set; }
    public XamlSchemaContextSettings(XamlSchemaContextSettings settings);
    [CompilerGeneratedAttribute]
public bool get_FullyQualifyAssemblyNamesInClrNamespaces();
    [CompilerGeneratedAttribute]
public void set_FullyQualifyAssemblyNamesInClrNamespaces(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMarkupExtensionsWithDuplicateArity();
    [CompilerGeneratedAttribute]
public void set_SupportMarkupExtensionsWithDuplicateArity(bool value);
}
public class Uno.Xaml.XamlSchemaException : XamlException {
    public XamlSchemaException(string message);
    public XamlSchemaException(string message, Exception innerException);
    protected XamlSchemaException(SerializationInfo info, StreamingContext context);
}
public static class Uno.Xaml.XamlServices : object {
    public static object Load(string fileName);
    public static object Load(Stream stream);
    public static object Load(TextReader textReader);
    public static object Load(XmlReader xmlReader);
    public static object Load(XamlReader xamlReader);
    public static object Parse(string xaml);
    public static string Save(object instance);
    public static void Save(string fileName, object instance);
    public static void Save(Stream stream, object instance);
    public static void Save(TextWriter writer, object instance);
    public static void Save(XmlWriter writer, object instance);
    public static void Save(XamlWriter writer, object instance);
    public static void Transform(XamlReader xamlReader, XamlWriter xamlWriter);
    public static void Transform(XamlReader xamlReader, XamlWriter xamlWriter, bool closeWriter);
}
internal class Uno.Xaml.XamlSubtreeReader : XamlReader {
    private XamlReader source;
    private bool started;
    private int nest;
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    internal XamlSubtreeReader(XamlReader source);
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
}
public class Uno.Xaml.XamlType : object {
    private Type type;
    private Type underlying_type;
    private XamlType base_type;
    private XamlTypeInvoker invoker;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PreferredXamlNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private XamlSchemaContext <SchemaContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<XamlType> <TypeArguments>k__BackingField;
    private static XamlMember[] empty_array;
    private List`1<XamlMember> all_members_cache;
    private List`1<XamlMember> all_attachable_members_cache;
    private BindingFlags flags_get_static;
    internal EventHandler`1<XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler { get; }
    internal EventHandler`1<XamlSetTypeConverterEventArgs> SetTypeConverterHandler { get; }
    public IList`1<XamlType> AllowedContentTypes { get; }
    public XamlType BaseType { get; }
    public bool ConstructionRequiresArguments { get; }
    public XamlMember ContentProperty { get; }
    public IList`1<XamlType> ContentWrappers { get; }
    public XamlValueConverter`1<XamlDeferringLoader> DeferringLoader { get; }
    public XamlTypeInvoker Invoker { get; }
    public bool IsAmbient { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsGeneric { get; }
    public bool IsMarkupExtension { get; }
    public bool IsNameScope { get; }
    public bool IsNameValid { get; }
    public bool IsNullable { get; }
    public bool IsPublic { get; }
    public bool IsUnknown { get; }
    public bool IsUsableDuringInitialization { get; }
    public bool IsWhitespaceSignificantCollection { get; }
    public bool IsXData { get; }
    public XamlType ItemType { get; }
    public XamlType KeyType { get; }
    public XamlType MarkupExtensionReturnType { get; }
    public string Name { get; private set; }
    public string PreferredXamlNamespace { get; private set; }
    public XamlSchemaContext SchemaContext { get; private set; }
    public bool TrimSurroundingWhitespace { get; }
    public IList`1<XamlType> TypeArguments { get; private set; }
    public XamlValueConverter`1<TypeConverter> TypeConverter { get; }
    public Type UnderlyingType { get; }
    public XamlValueConverter`1<ValueSerializer> ValueSerializer { get; }
    public XamlType(Type underlyingType, XamlSchemaContext schemaContext);
    public XamlType(Type underlyingType, XamlSchemaContext schemaContext, XamlTypeInvoker invoker);
    public XamlType(string unknownTypeNamespace, string unknownTypeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext);
    protected XamlType(string typeName, IList`1<XamlType> typeArguments, XamlSchemaContext schemaContext);
    private XamlType(XamlSchemaContext schemaContext, XamlTypeInvoker invoker);
    private static XamlType();
    internal EventHandler`1<XamlSetMarkupExtensionEventArgs> get_SetMarkupExtensionHandler();
    internal EventHandler`1<XamlSetTypeConverterEventArgs> get_SetTypeConverterHandler();
    public IList`1<XamlType> get_AllowedContentTypes();
    public XamlType get_BaseType();
    public bool get_ConstructionRequiresArguments();
    public XamlMember get_ContentProperty();
    public IList`1<XamlType> get_ContentWrappers();
    public XamlValueConverter`1<XamlDeferringLoader> get_DeferringLoader();
    public XamlTypeInvoker get_Invoker();
    public bool get_IsAmbient();
    public bool get_IsArray();
    public bool get_IsCollection();
    public bool get_IsConstructible();
    public bool get_IsDictionary();
    public bool get_IsGeneric();
    public bool get_IsMarkupExtension();
    public bool get_IsNameScope();
    public bool get_IsNameValid();
    public bool get_IsNullable();
    public bool get_IsPublic();
    public bool get_IsUnknown();
    public bool get_IsUsableDuringInitialization();
    public bool get_IsWhitespaceSignificantCollection();
    public bool get_IsXData();
    public XamlType get_ItemType();
    public XamlType get_KeyType();
    public XamlType get_MarkupExtensionReturnType();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredXamlNamespace();
    [CompilerGeneratedAttribute]
private void set_PreferredXamlNamespace(string value);
    [CompilerGeneratedAttribute]
public XamlSchemaContext get_SchemaContext();
    [CompilerGeneratedAttribute]
private void set_SchemaContext(XamlSchemaContext value);
    public bool get_TrimSurroundingWhitespace();
    [CompilerGeneratedAttribute]
public IList`1<XamlType> get_TypeArguments();
    [CompilerGeneratedAttribute]
private void set_TypeArguments(IList`1<XamlType> value);
    public XamlValueConverter`1<TypeConverter> get_TypeConverter();
    public Type get_UnderlyingType();
    public XamlValueConverter`1<ValueSerializer> get_ValueSerializer();
    internal string GetInternalXmlName();
    public static bool op_Equality(XamlType xamlType1, XamlType xamlType2);
    private static bool IsNull(XamlType a);
    public static bool op_Inequality(XamlType xamlType1, XamlType xamlType2);
    public sealed virtual bool Equals(XamlType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool CanAssignTo(XamlType xamlType);
    public XamlMember GetAliasedProperty(XamlDirective directive);
    public ICollection`1<XamlMember> GetAllAttachableMembers();
    public ICollection`1<XamlMember> GetAllMembers();
    public XamlMember GetAttachableMember(string name);
    public XamlMember GetMember(string name);
    public IList`1<XamlType> GetPositionalParameters(int parameterCount);
    public virtual IList`1<string> GetXamlNamespaces();
    protected virtual XamlMember LookupAliasedProperty(XamlDirective directive);
    protected virtual IEnumerable`1<XamlMember> LookupAllAttachableMembers();
    [IteratorStateMachineAttribute("Uno.Xaml.XamlType/<DoLookupAllAttachableMembers>d__105")]
private IEnumerable`1<XamlMember> DoLookupAllAttachableMembers();
    protected virtual IEnumerable`1<XamlMember> LookupAllMembers();
    [IteratorStateMachineAttribute("Uno.Xaml.XamlType/<DoLookupAllMembers>d__110")]
private IEnumerable`1<XamlMember> DoLookupAllMembers();
    private static bool IsPublicAccessor(MethodInfo mi);
    private bool IsCollectionType(Type type);
    protected virtual IList`1<XamlType> LookupAllowedContentTypes();
    protected virtual XamlMember LookupAttachableMember(string name);
    protected virtual XamlType LookupBaseType();
    protected internal virtual XamlCollectionKind LookupCollectionKind();
    protected virtual bool LookupConstructionRequiresArguments();
    protected virtual XamlMember LookupContentProperty();
    protected virtual IList`1<XamlType> LookupContentWrappers();
    internal ICustomAttributeProvider GetCustomAttributeProvider();
    protected internal virtual ICustomAttributeProvider LookupCustomAttributeProvider();
    protected virtual XamlValueConverter`1<XamlDeferringLoader> LookupDeferringLoader();
    protected virtual XamlTypeInvoker LookupInvoker();
    protected virtual bool LookupIsAmbient();
    protected virtual bool LookupIsConstructible();
    protected virtual bool LookupIsMarkupExtension();
    protected virtual bool LookupIsNameScope();
    protected virtual bool LookupIsNullable();
    protected virtual bool LookupIsPublic();
    protected virtual bool LookupIsUnknown();
    protected virtual bool LookupIsWhitespaceSignificantCollection();
    protected virtual bool LookupIsXData();
    protected virtual XamlType LookupItemType();
    protected virtual XamlType LookupKeyType();
    protected virtual XamlType LookupMarkupExtensionReturnType();
    protected virtual XamlMember LookupMember(string name, bool skipReadOnlyCheck);
    protected virtual IList`1<XamlType> LookupPositionalParameters(int parameterCount);
    protected virtual EventHandler`1<XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler();
    protected virtual EventHandler`1<XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler();
    protected virtual bool LookupTrimSurroundingWhitespace();
    protected virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected virtual Type LookupUnderlyingType();
    protected virtual bool LookupUsableDuringInitialization();
    protected virtual XamlValueConverter`1<ValueSerializer> LookupValueSerializer();
    internal static XamlValueConverter`1<ValueSerializer> LookupValueSerializer(XamlType targetType, ICustomAttributeProvider provider);
    private static string GetXamlName(Type type);
    [CompilerGeneratedAttribute]
private bool <.ctor>b__1_0(XamlType t);
    [CompilerGeneratedAttribute]
private bool <GetInternalXmlName>b__87_0(SpecialTypeName s);
}
internal class Uno.Xaml.XamlTypeResolver : object {
    private NamespaceResolver ns_resolver;
    private XamlSchemaContext schema_context;
    public XamlTypeResolver(NamespaceResolver namespaceResolver, XamlSchemaContext schemaContext);
    public sealed virtual Type Resolve(string typeName);
}
public abstract class Uno.Xaml.XamlWriter : object {
    [CompilerGeneratedAttribute]
private bool <IsDisposed>k__BackingField;
    protected bool IsDisposed { get; private set; }
    public XamlSchemaContext SchemaContext { get; }
    [CompilerGeneratedAttribute]
protected bool get_IsDisposed();
    [CompilerGeneratedAttribute]
private void set_IsDisposed(bool value);
    public abstract virtual XamlSchemaContext get_SchemaContext();
    public void Close();
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.IDisposable.Dispose();
    public abstract virtual void WriteEndMember();
    public abstract virtual void WriteEndObject();
    public abstract virtual void WriteGetObject();
    public abstract virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public abstract virtual void WriteStartMember(XamlMember xamlMember);
    public abstract virtual void WriteStartObject(XamlType type);
    public abstract virtual void WriteValue(object value);
    public void WriteNode(XamlReader reader);
    private Exception NotImplemented();
}
internal abstract class Uno.Xaml.XamlWriterInternalBase : object {
    private XamlSchemaContext sctx;
    private XamlWriterStateManager manager;
    internal IValueSerializerContext service_provider;
    internal ObjectState root_state;
    internal Stack`1<ObjectState> object_states;
    internal PrefixLookup prefix_lookup { get; }
    private List`1<NamespaceDeclaration> namespaces { get; }
    internal IAmbientProvider AmbientProvider { get; }
    protected MemberAndValue CurrentMemberState { get; }
    protected XamlMember CurrentMember { get; }
    public XamlWriterInternalBase(XamlSchemaContext schemaContext, XamlWriterStateManager manager);
    internal PrefixLookup get_prefix_lookup();
    private List`1<NamespaceDeclaration> get_namespaces();
    internal virtual IAmbientProvider get_AmbientProvider();
    public void CloseAll();
    internal string GetPrefix(string ns);
    protected MemberAndValue get_CurrentMemberState();
    protected XamlMember get_CurrentMember();
    public void WriteGetObject();
    public void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public void WriteStartObject(XamlType xamlType);
    public void WriteValue(object value);
    public void WriteStartMember(XamlMember property);
    public void WriteEndObject();
    public void WriteEndMember();
    protected abstract virtual void OnWriteEndObject();
    protected abstract virtual void OnWriteEndMember();
    protected abstract virtual void OnWriteStartObject();
    protected abstract virtual void OnWriteGetObject();
    protected abstract virtual void OnWriteStartMember(XamlMember xm);
    protected abstract virtual void OnWriteValue(object value);
    protected abstract virtual void OnWriteNamespace(NamespaceDeclaration nd);
    protected string GetValueString(XamlMember xm, object value);
}
public class Uno.Xaml.XamlWriterSettings : object {
    public XamlWriterSettings(XamlWriterSettings settings);
}
internal abstract class Uno.Xaml.XamlWriterStateManager : object {
    private bool allow_ns_at_value;
    private bool allow_object_after_value;
    private bool allow_parallel_values;
    private bool allow_empty_member;
    private bool allow_multiple_results;
    private XamlWriteState state;
    private bool ns_pushed;
    private bool accept_multiple_values;
    public XamlWriteState State { get; }
    public bool AcceptMultipleValues { get; public set; }
    public XamlWriterStateManager(bool isXmlWriter);
    public XamlWriteState get_State();
    public bool get_AcceptMultipleValues();
    public void set_AcceptMultipleValues(bool value);
    public void OnClosingItem();
    public void EndMember();
    public void EndObject(bool hasMoreNodes);
    public void GetObject();
    public void StartMember();
    public void StartObject();
    public void Value();
    public void Namespace();
    public void NamespaceCleanedUp();
    private void CheckState(XamlNodeType next);
    private void RejectNamespaces(XamlNodeType next);
    public abstract virtual Exception CreateError(string msg);
    public abstract virtual Exception CreateNamespaceError(string msg);
}
internal class Uno.Xaml.XamlWriterStateManager`2 : XamlWriterStateManager {
    public XamlWriterStateManager`2(bool isXmlWriter);
    public virtual Exception CreateError(string msg);
    public virtual Exception CreateNamespaceError(string msg);
}
internal enum Uno.Xaml.XamlWriteState : Enum {
    public int value__;
    public static XamlWriteState Initial;
    public static XamlWriteState ObjectStarted;
    public static XamlWriteState MemberStarted;
    public static XamlWriteState ObjectWritten;
    public static XamlWriteState ValueWritten;
    public static XamlWriteState MemberDone;
    public static XamlWriteState End;
}
internal class Uno.Xaml.XamlXmlNodeInfo : ValueType {
    public bool HasLineInfo;
    public int LineNumber;
    public int LinePosition;
    public XamlNodeType NodeType;
    public object NodeValue;
    public XamlXmlNodeInfo(XamlNodeType nodeType, object nodeValue, IXmlLineInfo lineInfo);
}
internal class Uno.Xaml.XamlXmlParser : object {
    private IsIncluded _isIncluded;
    private static Char[] _spaceArray;
    private XmlReader r;
    private IXmlLineInfo line_info;
    private XamlSchemaContext sctx;
    private XamlXmlReaderSettings settings;
    private IXamlNamespaceResolver xaml_namespace_resolver;
    private Stack`1<String[]> ignorables;
    private bool xmlbase_done;
    [CompilerGeneratedAttribute]
private bool <DisableCaching>k__BackingField;
    internal XmlReader Reader { get; }
    public XamlSchemaContext SchemaContext { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public bool DisableCaching { get; private set; }
    public XamlXmlParser(XmlReader xmlReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings, IsIncluded isIncluded);
    private static XamlXmlParser();
    internal XmlReader get_Reader();
    public XamlSchemaContext get_SchemaContext();
    private XamlXmlNodeInfo Node(XamlNodeType nodeType, object nodeValue);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<Parse>d__14")]
public IEnumerable`1<XamlXmlNodeInfo> Parse();
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadObjectElement>d__15")]
private IEnumerable`1<XamlXmlNodeInfo> ReadObjectElement(XamlType parentType, XamlMember currentMember);
    private static string CleanupBindingEscape(string value);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadMembers>d__17")]
private IEnumerable`1<XamlXmlNodeInfo> ReadMembers(XamlType parentType, XamlType xt);
    private StartTagInfo GetStartTagInfo();
    private Dictionary`2<string, string> ProcessAttributes(XmlReader r, List`1<KeyValuePair`2<XamlMember, string>> members);
    private void ProcessAttributesToMember(XamlSchemaContext sctx, StartTagInfo sti, XamlType xt);
    private XamlMember GetExtraMember(XamlType xt);
    private static XamlDirective FindStandardDirective(string name, AllowedMemberLocations loc);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadMemberText>d__24")]
private IEnumerable`1<XamlXmlNodeInfo> ReadMemberText(XamlType xt);
    private string ReadCurrentContentString(bool isFirstElementString);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadContentElements>d__26")]
private IEnumerable`1<XamlXmlNodeInfo> ReadContentElements(XamlType parentType);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadMemberElement>d__27")]
private IEnumerable`1<XamlXmlNodeInfo> ReadMemberElement(XamlType parentType, XamlType xt);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadMember>d__28")]
private IEnumerable`1<XamlXmlNodeInfo> ReadMember(XamlType parentType, XamlMember xm);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadCollectionItems>d__29")]
private IEnumerable`1<XamlXmlNodeInfo> ReadCollectionItems(XamlType parentType, XamlMember xm);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<ReadXData>d__30")]
private IEnumerable`1<XamlXmlNodeInfo> ReadXData();
    public int get_LineNumber();
    public int get_LinePosition();
    [CompilerGeneratedAttribute]
public bool get_DisableCaching();
    [CompilerGeneratedAttribute]
private void set_DisableCaching(bool value);
    private IDisposable PushIgnorables(List`1<KeyValuePair`2<XamlMember, string>> members);
    private bool IsIgnored(string localName, string namespaceUri, String& updatedNamespace);
    private static Regex SpaceMatch();
    [CompilerGeneratedAttribute]
private XamlType <ReadObjectElement>b__15_0(XamlTypeName xxtn);
    [IteratorStateMachineAttribute("Uno.Xaml.XamlXmlParser/<<ReadObjectElement>g__ProcessArgs|15_1>d")]
[CompilerGeneratedAttribute]
private IEnumerable`1<XamlXmlNodeInfo> <ReadObjectElement>g__ProcessArgs|15_1(ParsedMarkupExtensionInfo info);
    [CompilerGeneratedAttribute]
private void <PushIgnorables>b__39_1();
}
public class Uno.Xaml.XamlXmlReader : XamlReader {
    private static XmlReaderSettings file_reader_settings;
    private XamlXmlParser parser;
    private IEnumerator`1<XamlXmlNodeInfo> iter;
    public bool DisableCaching { get; }
    public bool PreserveWhitespace { get; }
    public bool HasLineInfo { get; }
    public bool IsEof { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public XamlXmlReader(Stream stream);
    public XamlXmlReader(string fileName);
    public XamlXmlReader(TextReader textReader);
    public XamlXmlReader(XmlReader xmlReader);
    public XamlXmlReader(Stream stream, XamlSchemaContext schemaContext);
    public XamlXmlReader(Stream stream, XamlXmlReaderSettings settings);
    public XamlXmlReader(string fileName, XamlSchemaContext schemaContext);
    public XamlXmlReader(string fileName, XamlXmlReaderSettings settings);
    public XamlXmlReader(TextReader textReader, XamlSchemaContext schemaContext);
    public XamlXmlReader(TextReader textReader, XamlXmlReaderSettings settings);
    public XamlXmlReader(XmlReader xmlReader, XamlSchemaContext schemaContext);
    public XamlXmlReader(XmlReader xmlReader, XamlXmlReaderSettings settings);
    public XamlXmlReader(Stream stream, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(string fileName, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(TextReader textReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings);
    public XamlXmlReader(XmlReader xmlReader, XamlSchemaContext schemaContext, XamlXmlReaderSettings settings, IsIncluded isIncluded);
    private static XamlXmlReader();
    public bool get_DisableCaching();
    public bool get_PreserveWhitespace();
    public sealed virtual bool get_HasLineInfo();
    public virtual bool get_IsEof();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public virtual bool Read();
}
public class Uno.Xaml.XamlXmlReaderSettings : XamlReaderSettings {
    [CompilerGeneratedAttribute]
private bool <CloseInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipXmlCompatibilityProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private string <XmlLang>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <XmlSpacePreserve>k__BackingField;
    public bool CloseInput { get; public set; }
    public bool SkipXmlCompatibilityProcessing { get; public set; }
    public string XmlLang { get; public set; }
    public bool XmlSpacePreserve { get; public set; }
    public XamlXmlReaderSettings(XamlXmlReaderSettings settings);
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipXmlCompatibilityProcessing();
    [CompilerGeneratedAttribute]
public void set_SkipXmlCompatibilityProcessing(bool value);
    [CompilerGeneratedAttribute]
public string get_XmlLang();
    [CompilerGeneratedAttribute]
public void set_XmlLang(string value);
    [CompilerGeneratedAttribute]
public bool get_XmlSpacePreserve();
    [CompilerGeneratedAttribute]
public void set_XmlSpacePreserve(bool value);
}
public class Uno.Xaml.XamlXmlWriter : XamlWriter {
    private XmlWriter w;
    private XamlSchemaContext sctx;
    private XamlXmlWriterSettings settings;
    private XamlXmlWriterInternal intl;
    public XamlSchemaContext SchemaContext { get; }
    public XamlXmlWriterSettings Settings { get; }
    public XamlXmlWriter(Stream stream, XamlSchemaContext schemaContext);
    public XamlXmlWriter(Stream stream, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public XamlXmlWriter(TextWriter textWriter, XamlSchemaContext schemaContext);
    public XamlXmlWriter(TextWriter textWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public XamlXmlWriter(XmlWriter xmlWriter, XamlSchemaContext schemaContext);
    public XamlXmlWriter(XmlWriter xmlWriter, XamlSchemaContext schemaContext, XamlXmlWriterSettings settings);
    public virtual XamlSchemaContext get_SchemaContext();
    public XamlXmlWriterSettings get_Settings();
    protected virtual void Dispose(bool disposing);
    public void Flush();
    public virtual void WriteGetObject();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteValue(object value);
    public virtual void WriteStartMember(XamlMember property);
    public virtual void WriteEndObject();
    public virtual void WriteEndMember();
}
public class Uno.Xaml.XamlXmlWriterException : XamlException {
    public XamlXmlWriterException(string message);
    public XamlXmlWriterException(string message, Exception innerException);
    protected XamlXmlWriterException(SerializationInfo info, StreamingContext context);
}
internal class Uno.Xaml.XamlXmlWriterInternal : XamlWriterInternalBase {
    private static string Xmlns2000Namespace;
    private XmlWriter w;
    private List`1<NamespaceDeclaration> local_nss;
    private List`1<NamespaceDeclaration> local_nss2;
    private bool inside_toplevel_positional_parameter;
    private bool inside_attribute_object;
    public XamlXmlWriterInternal(XmlWriter w, XamlSchemaContext schemaContext, XamlWriterStateManager manager);
    protected virtual void OnWriteEndObject();
    protected virtual void OnWriteEndMember();
    protected virtual void OnWriteStartObject();
    protected virtual void OnWriteGetObject();
    private void WritePendingStartMember(XamlNodeType nodeType);
    protected virtual void OnWriteStartMember(XamlMember member);
    private bool IsAtTopLevelObject();
    private AllowedMemberLocations IsAttribute(XamlType ownerType, XamlMember xm);
    private void OnWriteStartMemberElement(XamlType xt, XamlMember xm);
    private void OnWriteStartMemberAttribute(XamlType xt, XamlMember xm);
    private void OnWriteStartMemberContent(XamlType xt, XamlMember member);
    protected virtual void OnWriteValue(object value);
    protected virtual void OnWriteNamespace(NamespaceDeclaration nd);
    private void WritePendingNamespaces();
}
public class Uno.Xaml.XamlXmlWriterSettings : XamlWriterSettings {
    [CompilerGeneratedAttribute]
private bool <AssumeValidInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CloseOutput>k__BackingField;
    public bool AssumeValidInput { get; public set; }
    public bool CloseOutput { get; public set; }
    private XamlXmlWriterSettings(XamlXmlWriterSettings other);
    [CompilerGeneratedAttribute]
public bool get_AssumeValidInput();
    [CompilerGeneratedAttribute]
public void set_AssumeValidInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    public XamlXmlWriterSettings Copy();
}
