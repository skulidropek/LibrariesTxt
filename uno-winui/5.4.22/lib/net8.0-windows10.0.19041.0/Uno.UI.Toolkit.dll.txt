internal static class Microsoft.UI.Xaml.Controls.PageElementMetadataUpdateHandler : object {
    public static void AfterElementReplaced(FrameworkElement oldView, FrameworkElement newView, Type[] updatedTypes);
}
internal static class Microsoft.UI.Xaml.Controls.ScrollViewerMetadataUpdateHandler : object {
    private static Logger _log;
    private static ScrollViewerMetadataUpdateHandler();
    public static void CaptureState(FrameworkElement element, IDictionary`2<string, object> stateDictionary, Type[] updatedTypes);
    public static Task RestoreState(FrameworkElement element, IDictionary`2<string, object> stateDictionary, Type[] updatedTypes);
}
[AttributeUsageAttribute("1")]
public class System.Reflection.Metadata.ElementMetadataUpdateHandlerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <HandlerType>k__BackingField;
    public Type ElementType { get; }
    public Type HandlerType { get; }
    public ElementMetadataUpdateHandlerAttribute(Type elementType, Type handlerType);
    public ElementMetadataUpdateHandlerAttribute(Type handlerType);
    [CompilerGeneratedAttribute]
public Type get_ElementType();
    [CompilerGeneratedAttribute]
public Type get_HandlerType();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.21615")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__EndOfTagRegex_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__EndOfTagRegex_0 Instance;
    private static <RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__EndOfTagRegex_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.21615")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__NonXmlnsTagRegex_1 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__NonXmlnsTagRegex_1 Instance;
    private static <RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__NonXmlnsTagRegex_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.21615")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>F7420C8D2BF6BA02FE7BCA6343A61F8145E9C3B271CAB3C8346B076E6AFE53E5F__Utilities();
    internal static bool IsWordChar(char ch);
    [NullableContextAttribute("1")]
internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|3_0(Int32[]& stack, Int32& pos, int arg0, int arg1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Diagnostics.UI.DiagnosticCounter : object {
    [CompilerGeneratedAttribute]
private string <name>P;
    [CompilerGeneratedAttribute]
private string <description>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private DiagnosticViewManager`1<TextBlock> _preview;
    private long _value;
    public string Id { get; }
    public string Name { get; }
    public string Description { get; }
    public long Value { get; }
    public DiagnosticCounter(string name, string description);
    public sealed virtual string get_Id();
    public sealed virtual string get_Name();
    public string get_Description();
    public long get_Value();
    public void Increment();
    public void Decrement();
    private sealed virtual override object Uno.Diagnostics.UI.IDiagnosticView.GetElement(IDiagnosticViewContext context);
    private sealed virtual override ValueTask`1<object> Uno.Diagnostics.UI.IDiagnosticView.GetDetailsAsync(IDiagnosticViewContext context, CancellationToken ct);
    [CompilerGeneratedAttribute]
private long <Uno.Diagnostics.UI.IDiagnosticView.GetElement>b__15_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
[TemplateVisualStateAttribute]
public class Uno.Diagnostics.UI.DiagnosticsOverlay : Control {
    private static string ToolbarPartName;
    private static string ElementsPanelPartName;
    private static string AnchorPartName;
    private static string NotificationPartName;
    private static string DisplayModeCompactStateName;
    private static string DisplayModeExpandedStateName;
    private static string NotificationCollapsedStateName;
    private static string NotificationVisibleStateName;
    private static string HorizontalDirectionLeftVisualState;
    private static string HorizontalDirectionRightVisualState;
    private static ConditionalWeakTable`2<XamlRoot, DiagnosticsOverlay> _overlays;
    private XamlRoot _root;
    private object _updateGate;
    private List`1<IDiagnosticView> _localRegistrations;
    private Dictionary`2<IDiagnosticView, DiagnosticElement> _elements;
    private Dictionary`2<string, bool> _configuredElementVisibilities;
    [NullableAttribute("2")]
private ViewContext _context;
    [NullableAttribute("2")]
private Popup _overlayHost;
    private bool _isVisible;
    private bool _isExpanded;
    private int _updateEnqueued;
    [NullableAttribute("2")]
private FrameworkElement _toolbar;
    [NullableAttribute("2")]
private Panel _elementsPanel;
    [NullableAttribute("2")]
private UIElement _anchor;
    [NullableAttribute("2")]
private ContentPresenter _notificationPresenter;
    [NullableAttribute("2")]
private CancellationTokenSource _notification;
    private static string _originSettingsKey;
    private static string _locationXSettingsKey;
    private static string _locationYSettingsKey;
    private static int _horizontalSnappingDistance;
    private static int _verticalSnappingDistance;
    private static int _rightDirectionDistance;
    private bool _magnetic;
    private Thickness _edgePadding;
    private PlacementOrigin _origin;
    private Point _location;
    private bool _isPlacementInit;
    private static DiagnosticsOverlay();
    private DiagnosticsOverlay(XamlRoot root);
    public static DiagnosticsOverlay Get(XamlRoot root);
    public void Show(Nullable`1<bool> isExpanded);
    public void Hide();
    public void Hide(string viewId);
    public void Show(string viewId);
    public void Add(string id, string name, UIElement preview, Func`1<UIElement> details);
    public void Add(IDiagnosticView provider);
    public UIElement Find(string viewId);
    protected virtual void OnApplyTemplate();
    private void EnqueueUpdate(bool forceUpdate);
    private static Popup CreateHost(XamlRoot root, DiagnosticsOverlay overlay);
    private static void ShowHost(Popup host, bool isVisible);
    private bool ShouldMaterialize(DiagnosticViewRegistration registration);
    private bool IsMaterialized(IDiagnosticView provider);
    private void OnNotificationTapped(object sender, TappedRoutedEventArgs e);
    private void Notify(DiagnosticViewNotification notif, ViewContext context);
    private void HideNotification();
    private void InitPlacement();
    private void CleanPlacement();
    public Rect GetSafeArea();
    public Point GetAbsoluteLocation();
    private void OnAnchorManipulated(object sender, ManipulationDeltaRoutedEventArgs e);
    private void OnAnchorManipulatedCompleted(object sender, ManipulationCompletedRoutedEventArgs e);
    private void UpdatePlacement();
    private void ApplyLocation();
    private void RestoreLocation();
    private void PersistLocation();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Uno.Diagnostics.UI.DiagnosticView : DiagnosticView`1<UIElement> {
    public DiagnosticView(string id, string name, Func`2<IDiagnosticViewContext, UIElement> factory, Func`3<IDiagnosticViewContext, CancellationToken, ValueTask`1<object>> details);
    public DiagnosticView(string id, string name, Func`1<UIElement> preview, Func`2<CancellationToken, ValueTask`1<object>> details);
    public static DiagnosticView`1<TView> Register(string friendlyName);
    public static DiagnosticView`1<TView> Register(string friendlyName, Func`1<TView> factory, DiagnosticViewRegistrationMode mode);
    public static DiagnosticView`2<TView, TState> Register(string friendlyName, Action`2<TView, TState> update, Func`2<TState, object> details);
    public static DiagnosticView`2<TView, TState> Register(string friendlyName, Func`2<IDiagnosticViewContext, TView> factory, Action`2<TView, TState> update, Func`2<TState, object> details);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Diagnostics.UI.DiagnosticView`1 : object {
    [CompilerGeneratedAttribute]
private string <id>P;
    [CompilerGeneratedAttribute]
private string <name>P;
    [CompilerGeneratedAttribute]
private Func`2<IDiagnosticViewContext, TView> <factory>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<IDiagnosticViewContext, CancellationToken, ValueTask`1<object>> <details>P;
    private string Uno.Diagnostics.UI.IDiagnosticView.Id { get; }
    private string Uno.Diagnostics.UI.IDiagnosticView.Name { get; }
    public DiagnosticView`1(string id, string name, Func`2<IDiagnosticViewContext, TView> factory, Func`3<IDiagnosticViewContext, CancellationToken, ValueTask`1<object>> details);
    public DiagnosticView`1(string id, string name, Func`1<TView> preview, Func`2<CancellationToken, ValueTask`1<object>> details);
    private sealed virtual override string Uno.Diagnostics.UI.IDiagnosticView.get_Id();
    private sealed virtual override string Uno.Diagnostics.UI.IDiagnosticView.get_Name();
    private sealed virtual override object Uno.Diagnostics.UI.IDiagnosticView.GetElement(IDiagnosticViewContext context);
    [AsyncStateMachineAttribute("Uno.Diagnostics.UI.DiagnosticView`1/<Uno-Diagnostics-UI-IDiagnosticView-GetDetailsAsync>d__11")]
private sealed virtual override ValueTask`1<object> Uno.Diagnostics.UI.IDiagnosticView.GetDetailsAsync(IDiagnosticViewContext context, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Diagnostics.UI.DiagnosticView`2 : object {
    [CompilerGeneratedAttribute]
private string <id>P;
    [CompilerGeneratedAttribute]
private string <name>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`4<IDiagnosticViewContext, TState, CancellationToken, ValueTask`1<object>> <details>P;
    private DiagnosticViewManager`2<TView, TState> _elementsManager;
    private bool _hasState;
    [NullableAttribute("2")]
private TState _state;
    private string Uno.Diagnostics.UI.IDiagnosticView.Id { get; }
    private string Uno.Diagnostics.UI.IDiagnosticView.Name { get; }
    public DiagnosticView`2(string id, string name, Func`2<IDiagnosticViewContext, TView> factory, Action`2<TView, TState> update, Func`4<IDiagnosticViewContext, TState, CancellationToken, ValueTask`1<object>> details);
    public void Update(TState status);
    private sealed virtual override string Uno.Diagnostics.UI.IDiagnosticView.get_Id();
    private sealed virtual override string Uno.Diagnostics.UI.IDiagnosticView.get_Name();
    private sealed virtual override object Uno.Diagnostics.UI.IDiagnosticView.GetElement(IDiagnosticViewContext context);
    [AsyncStateMachineAttribute("Uno.Diagnostics.UI.DiagnosticView`2/<Uno-Diagnostics-UI-IDiagnosticView-GetDetailsAsync>d__13")]
private sealed virtual override ValueTask`1<object> Uno.Diagnostics.UI.IDiagnosticView.GetDetailsAsync(IDiagnosticViewContext context, CancellationToken ct);
}
internal class Uno.Diagnostics.UI.DiagnosticViewHelper : object {
    private static Color _white;
    private static DiagnosticViewHelper();
    [NullableContextAttribute("1")]
public static TextBlock CreateText(string text);
    public static DiagnosticViewManager`1<TextBlock> CreateText(Func`1<T> value);
    [NullableContextAttribute("1")]
public static DiagnosticViewManager`1<TextBlock> CreateText(Func`1<string> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Diagnostics.UI.DiagnosticViewManager`1 : object {
    [CompilerGeneratedAttribute]
private Func`2<IDiagnosticViewContext, TView> <factory>P;
    [CompilerGeneratedAttribute]
private Action`2<IDiagnosticViewContext, TView> <update>P;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private EventHandler _changed;
    public DiagnosticViewManager`1(Func`2<IDiagnosticViewContext, TView> factory, Action`2<IDiagnosticViewContext, TView> update);
    public DiagnosticViewManager`1(Func`1<TView> factory, Action`1<TView> update);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void add__changed(EventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void remove__changed(EventHandler value);
    public void NotifyChanged();
    public UIElement GetView(IDiagnosticViewContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Diagnostics.UI.DiagnosticViewManager`2 : object {
    [CompilerGeneratedAttribute]
private Func`2<IDiagnosticViewContext, TView> <factory>P;
    [CompilerGeneratedAttribute]
private Action`3<IDiagnosticViewContext, TView, TState> <update>P;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<TState> _changed;
    private bool _hasState;
    [NullableAttribute("2")]
private TState _state;
    public DiagnosticViewManager`2(Func`2<IDiagnosticViewContext, TView> factory, Action`3<IDiagnosticViewContext, TView, TState> update);
    public DiagnosticViewManager`2(Func`1<TView> factory, Action`2<TView, TState> update);
    [CompilerGeneratedAttribute]
private void add__changed(EventHandler`1<TState> value);
    [CompilerGeneratedAttribute]
private void remove__changed(EventHandler`1<TState> value);
    public void NotifyChanged(TState state);
    public UIElement GetView(IDiagnosticViewContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Uno.Diagnostics.UI.DiagnosticViewNotification : object {
    [CompilerGeneratedAttribute]
private object <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ContentTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticViewNotificationDisplayOptions <Options>k__BackingField;
    public object Content { get; public set; }
    public object ContentTemplate { get; public set; }
    public Nullable`1<TimeSpan> Duration { get; public set; }
    public DiagnosticViewNotificationDisplayOptions Options { get; public set; }
    [NullableContextAttribute("1")]
public DiagnosticViewNotification(object content, Nullable`1<TimeSpan> duration);
    [CompilerGeneratedAttribute]
public object get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(object value);
    [CompilerGeneratedAttribute]
public object get_ContentTemplate();
    [CompilerGeneratedAttribute]
public void set_ContentTemplate(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public DiagnosticViewNotificationDisplayOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(DiagnosticViewNotificationDisplayOptions value);
}
[FlagsAttribute]
public enum Uno.Diagnostics.UI.DiagnosticViewNotificationDisplayOptions : Enum {
    public int value__;
    public static DiagnosticViewNotificationDisplayOptions Default;
    public static DiagnosticViewNotificationDisplayOptions EvenIfExpended;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.Diagnostics.UI.DiagnosticViewRegistration : object {
    [CompilerGeneratedAttribute]
private DiagnosticViewRegistrationMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticView <View>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DiagnosticViewRegistrationMode Mode { get; public set; }
    public IDiagnosticView View { get; public set; }
    public DiagnosticViewRegistration(DiagnosticViewRegistrationMode Mode, IDiagnosticView View);
    [CompilerGeneratedAttribute]
protected DiagnosticViewRegistration(DiagnosticViewRegistration original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DiagnosticViewRegistrationMode get_Mode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Mode(DiagnosticViewRegistrationMode value);
    [CompilerGeneratedAttribute]
public IDiagnosticView get_View();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_View(IDiagnosticView value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DiagnosticViewRegistration left, DiagnosticViewRegistration right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DiagnosticViewRegistration left, DiagnosticViewRegistration right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DiagnosticViewRegistration other);
    [CompilerGeneratedAttribute]
public virtual DiagnosticViewRegistration <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(DiagnosticViewRegistrationMode& Mode, IDiagnosticView& View);
}
internal enum Uno.Diagnostics.UI.DiagnosticViewRegistrationMode : Enum {
    public int value__;
    public static DiagnosticViewRegistrationMode One;
    public static DiagnosticViewRegistrationMode All;
    public static DiagnosticViewRegistrationMode OnDemand;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Uno.Diagnostics.UI.DiagnosticViewRegistry : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static EventHandler`1<IImmutableList`1<DiagnosticViewRegistration>> Added;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ImmutableArray`1<DiagnosticViewRegistration> _registrations;
    internal static IImmutableList`1<DiagnosticViewRegistration> Registrations { get; }
    private static DiagnosticViewRegistry();
    internal static IImmutableList`1<DiagnosticViewRegistration> get_Registrations();
    public static void Register(IDiagnosticView view, DiagnosticViewRegistrationMode mode);
}
[NullableContextAttribute("1")]
public interface Uno.Diagnostics.UI.IDiagnosticView {
    public string Id { get; }
    public string Name { get; }
    public abstract virtual string get_Id();
    public abstract virtual string get_Name();
    public abstract virtual object GetElement(IDiagnosticViewContext context);
    public abstract virtual ValueTask`1<object> GetDetailsAsync(IDiagnosticViewContext context, CancellationToken ct);
}
[NullableContextAttribute("1")]
public interface Uno.Diagnostics.UI.IDiagnosticViewContext {
    public abstract virtual void Schedule(Action action);
    public abstract virtual void ScheduleRecurrent(Action action);
    public abstract virtual void AbortRecurrent(Action action);
    public abstract virtual void Notify(DiagnosticViewNotification notification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Uno.Diagnostics.UI.RelativePlacement : object {
    private static ConditionalWeakTable`2<FrameworkElement, List`1<FrameworkElement>> _targets;
    [CompilerGeneratedAttribute]
private static DependencyProperty <AnchorProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <ModeProperty>k__BackingField;
    public static DependencyProperty AnchorProperty { get; }
    public static DependencyProperty ModeProperty { get; }
    private static RelativePlacement();
    [CompilerGeneratedAttribute]
public static DependencyProperty get_AnchorProperty();
    public static FrameworkElement GetAnchor(UIElement elt);
    public static void SetAnchor(UIElement elt, FrameworkElement target);
    private static void OnAnchorChanged(DependencyObject elt, DependencyPropertyChangedEventArgs args);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_ModeProperty();
    public static FlyoutPlacementMode GetMode(UIElement elt);
    public static void SetMode(UIElement elt, FlyoutPlacementMode mode);
    private static void OnModeChanged(DependencyObject elt, DependencyPropertyChangedEventArgs args);
    private static void OnTargetSizeChanged(object sender, SizeChangedEventArgs args);
    private static void OnAnchorSizeChanged(object sender, SizeChangedEventArgs args);
    private static void RefreshPlacement(FrameworkElement anchor);
    private static void RefreshPlacement(FrameworkElement anchor, FrameworkElement target);
}
[ExtensionAttribute]
internal static class Uno.Extensions.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items, Action`1<KeyValuePair`2<int, T>> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items, Action`2<int, T> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static IEnumerable`1<T> ForEach(IEnumerable`1<T> items, Action`1<T> action);
    [ExtensionAttribute]
public static bool None(IEnumerable`1<T> items, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool None(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static bool Empty(IEnumerable`1<T> items);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Concat>d__7`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> items, T item);
    [ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> source, T[] items);
    [ExtensionAttribute]
public static IEnumerable`1<T> Except(IEnumerable`1<T> source, IEqualityComparer`1<T> equalityComparer, T[] items);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> items, T item, Func`3<T, T, bool> predicate);
    [ExtensionAttribute]
public static TResult SingleOrDefault(IEnumerable`1<T> items, Func`2<T, TResult> selector);
    [ExtensionAttribute]
public static T MaxOrDefault(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static ValueTuple`2<TSource, TComparable> MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TComparable> selector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Range(IEnumerable`1<T> collection, int start, int before, int after, bool fixedCount);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Do>d__17`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Do(IEnumerable`1<T> source, Action`1<T> action);
    [ExtensionAttribute]
public static IEnumerable`1<T> Trim(IEnumerable`1<T> items);
    [ExtensionAttribute]
public static IEnumerable`1<T> Trim(IEnumerable`1<Nullable`1<T>> items);
    [ExtensionAttribute]
public static IEnumerable`1<T> Safe(IEnumerable`1<T> items);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Flatten>d__21`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Flatten(IEnumerable`1<T> enumerable, Func`2<T, IEnumerable`1<T>> predicate);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Flatten>d__22`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Flatten(T item, Func`2<T, IEnumerable`1<T>> predicate);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<Flatten>d__23`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Flatten(T item, Func`2<T, T> predicate);
    [ExtensionAttribute]
public static bool AllTrue(IEnumerable`1<bool> source);
    public static TResult MaxOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector, TResult defaultValue);
    [ExtensionAttribute]
public static Dictionary`2<TKey, IEnumerable`1<TValue>> ToDictionary(IEnumerable`1<IGrouping`2<TKey, TValue>> groups);
    [ExtensionAttribute]
public static Dictionary`2<TKey, IEnumerable`1<TValue>> ToDictionary(IEnumerable`1<IGrouping`2<TKey, TValue>> groups, IEqualityComparer`1<TKey> equalityComparer);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<SelectManyUntyped>d__28`1")]
[ExtensionAttribute]
public static IEnumerable SelectManyUntyped(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable> selector);
    [ExtensionAttribute]
public static IEnumerable`1<T> SkipLast(IEnumerable`1<T> source, int count);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<<SkipLast>g__Skip1|29_0>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <SkipLast>g__Skip1|29_0(IEnumerable`1<T> src);
    [IteratorStateMachineAttribute("Uno.Extensions.EnumerableExtensions/<<SkipLast>g__SkipN|29_1>d`1")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<T> <SkipLast>g__SkipN|29_1(IEnumerable`1<T> src, int n);
}
[ExtensionAttribute]
internal static class Uno.Helpers.ColorExtensions : object {
    [ExtensionAttribute]
internal static Color ToOpaque(Color color, Color background);
    [ExtensionAttribute]
internal static Color WithOpacity(Color color, double opacity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Uno.Helpers.ImageHelper : object {
    public static bool MakeOpaque(Byte[] rgba8PixelsBuffer, Nullable`1<Color> background);
    public static void UnMultiplyAlpha(Byte[] rgba8PremulPixelsBuffer);
}
[ExtensionAttribute]
internal static class Uno.UI.Extensions.DependencyObjectExtensions : object {
    [IteratorStateMachineAttribute("Uno.UI.Extensions.DependencyObjectExtensions/<GetAllParents>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetAllParents(DependencyObject element, bool includeCurrent);
    [ExtensionAttribute]
public static T FindFirstParent(DependencyObject element, bool includeCurrent);
    [ExtensionAttribute]
public static T FindFirstParent(DependencyObject element, Func`2<T, bool> predicate, bool includeCurrent);
    [IteratorStateMachineAttribute("Uno.UI.Extensions.DependencyObjectExtensions/<GetChildren>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetChildren(DependencyObject obj, bool includeCurrent);
    [ExtensionAttribute]
public static IEnumerable`1<DependencyObject> GetAllChildren(DependencyObject obj, Nullable`1<int> childLevelLimit, bool includeCurrent, TreeEnumerationMode mode);
    [ExtensionAttribute]
public static T FindFirstChild(DependencyObject element, Nullable`1<int> childLevelLimit, bool includeCurrent);
    [ExtensionAttribute]
public static T FindFirstChild(DependencyObject element, Func`2<T, bool> predicate, Nullable`1<int> childLevelLimit, bool includeCurrent);
}
public static class Uno.UI.Extensions.PrettyPrint : object {
    private static Lazy`1<Dictionary`2<Color, string>> _knownColors;
    private static PrettyPrint();
    public static string FormatObject(object o);
    public static string FormatCornerRadius(CornerRadius x);
    public static string FormatThickness(Thickness x);
    public static string FormatRect(Rect x);
    public static string FormatSize(Size size);
    public static string FormatBrush(Brush b);
    public static string EscapeMultiline(string s, bool escapeTabs);
}
internal enum Uno.UI.Extensions.TreeEnumerationMode : Enum {
    public int value__;
    public static TreeEnumerationMode Branch;
    public static TreeEnumerationMode Layer;
}
[ExtensionAttribute]
internal static class Uno.UI.Extensions.UIElementExtensions : object {
    private static IndentationFormat _defaultIndentationFormat;
    private static UIElementExtensions();
    [ExtensionAttribute]
internal static string GetDebugName(object elt);
    [ExtensionAttribute]
internal static string GetDebugIdentifier(object elt);
    [ExtensionAttribute]
internal static string GetDebugIdentifier(object elt, IndentationFormat format);
    [ExtensionAttribute]
internal static string GetDebugIndent(object elt, bool subLine);
    [ExtensionAttribute]
internal static string GetDebugIndent(object elt, IndentationFormat format, bool subLine);
    [ExtensionAttribute]
internal static int GetDebugDepth(object elt);
    [CompilerGeneratedAttribute]
internal static string <GetDebugIndent>g__GetColumnsIndentation|6_0(int depth);
    [CompilerGeneratedAttribute]
internal static string <GetDebugIndent>g__GetNumberedIndentation|6_1(int depth, bool subLine);
    [CompilerGeneratedAttribute]
internal static string <GetDebugIndent>g__GetNumberedColumnIndentation|6_2(int depth, bool subLine);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Uno.UI.Extensions.ViewExtensions : object {
    [ExtensionAttribute]
public static string TreeGraph(DependencyObject reference);
    [ExtensionAttribute]
public static string TreeGraph(DependencyObject reference, Func`2<object, IEnumerable`1<string>> describeProperties);
    [ExtensionAttribute]
public static string TreeGraph(DependencyObject reference, Func`2<DependencyObject, string> describe);
    private static string DescribeVTNode(object x);
    internal static string DescribeVTNode(object x, Func`2<object, IEnumerable`1<string>> describeProperties);
    internal static bool TryGetDpValue(object owner, string property, T& value);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FindFirstAncestor(DependencyObject reference);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FindFirstAncestor(DependencyObject reference, Func`2<T, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FindFirstDescendant(DependencyObject reference);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FindFirstDescendant(DependencyObject reference, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static T FindFirstDescendant(DependencyObject reference, string name);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T FindFirstDescendant(DependencyObject reference, Func`2<DependencyObject, bool> hierarchyPredicate, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<DependencyObject> EnumerateDescendants(DependencyObject reference);
    [IteratorStateMachineAttribute("Uno.UI.Extensions.ViewExtensions/<EnumerateDescendants>d__13")]
[ExtensionAttribute]
public static IEnumerable`1<DependencyObject> EnumerateDescendants(DependencyObject reference, Func`2<DependencyObject, bool> hierarchyPredicate);
    [IteratorStateMachineAttribute("Uno.UI.Extensions.ViewExtensions/<EnumerateAncestors>d__14")]
[ExtensionAttribute]
internal static IEnumerable`1<DependencyObject> EnumerateAncestors(DependencyObject o);
    [ExtensionAttribute]
internal static IEnumerable`1<DependencyObject> EnumerateChildren(DependencyObject reference);
    [CompilerGeneratedAttribute]
internal static void <TreeGraph>g__Walk|2_0(DependencyObject o, int depth, <>c__DisplayClass2_0& );
    [CompilerGeneratedAttribute]
internal static void <TreeGraph>g__Print|2_1(DependencyObject o, int depth, <>c__DisplayClass2_0& );
    [IteratorStateMachineAttribute("Uno.UI.Extensions.ViewExtensions/<<DescribeVTNode>g__GetDetails|3_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <DescribeVTNode>g__GetDetails|3_0(object x);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static string <DescribeVTNode>g__GetPropertiesDescriptionSafe|4_0(<>c__DisplayClass4_0& );
}
[ExtensionAttribute]
public static class Uno.UI.Helpers.TypeMappings : object {
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> <AllMappedTypeToOriginalTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> <MappedTypeToOriginalTypeMappings>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> <AllOriginalTypeToMappedType>k__BackingField;
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> <OriginalTypeToMappedType>k__BackingField;
    private static TaskCompletionSource`1<bool> _mappingsPaused;
    private static IDictionary`2<Type, Type> AllMappedTypeToOriginalTypeMappings { get; }
    private static IDictionary`2<Type, Type> MappedTypeToOriginalTypeMappings { get; private set; }
    private static IDictionary`2<Type, Type> AllOriginalTypeToMappedType { get; }
    private static IDictionary`2<Type, Type> OriginalTypeToMappedType { get; private set; }
    private static TypeMappings();
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> get_AllMappedTypeToOriginalTypeMappings();
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> get_MappedTypeToOriginalTypeMappings();
    [CompilerGeneratedAttribute]
private static void set_MappedTypeToOriginalTypeMappings(IDictionary`2<Type, Type> value);
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> get_AllOriginalTypeToMappedType();
    [CompilerGeneratedAttribute]
private static IDictionary`2<Type, Type> get_OriginalTypeToMappedType();
    [CompilerGeneratedAttribute]
private static void set_OriginalTypeToMappedType(IDictionary`2<Type, Type> value);
    [ExtensionAttribute]
public static Type GetReplacementType(Type instanceType);
    public static object CreateInstance();
    public static object CreateInstance(Object[] args);
    [ExtensionAttribute]
internal static Type GetMappedType(Type originalType);
    [ExtensionAttribute]
internal static Type GetOriginalType(Type mappedType);
    [ExtensionAttribute]
internal static bool IsReplacedBy(Type sourceType, Type mappedType);
    internal static void RegisterMapping(Type mappedType, Type originalType);
    internal static void ClearMappings();
    [ObsoleteAttribute("Use WaitForResume instead")]
public static Task WaitForMappingsToResume();
    public static Task`1<bool> WaitForResume();
    public static void Pause();
    public static void Resume();
    public static void Resume(bool updateLayout);
}
internal static class Uno.UI.Helpers.XamlHelper : object {
    private static IReadOnlyDictionary`2<string, string> KnownXmlnses;
    private static XamlHelper();
    [GeneratedRegexAttribute("(?=( ?/)?>)")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.21615")]
private static Regex EndOfTagRegex();
    [GeneratedRegexAttribute("<\w+[ />]")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.21615")]
private static Regex NonXmlnsTagRegex();
    public static T LoadXaml(string xaml, bool autoInjectXmlns);
    public static T LoadXaml(string xaml, Dictionary`2<string, string> xmlnses);
}
public class Uno.UI.Maps.MapResources : ResourceDictionary {
}
[ExtensionAttribute]
public static class Uno.UI.RemoteControl.HotReload.AsyncEnumerableExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Uno.UI.RemoteControl.HotReload.AsyncEnumerableExtensions/<ToArrayAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<T[]> ToArrayAsync(IAsyncEnumerable`1<T> enumerable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Uno.UI.RemoteControl.HotReload.ClientHotReloadProcessor : object {
    [NullableAttribute("2")]
private static ClientHotReloadProcessor _instance;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal EventHandler`1<Status> StatusChanged;
    private StatusSink _status;
    private static int _isWaitingForTypeMapping;
    [NullableAttribute("2")]
private static ElementUpdateAgent _elementAgent;
    private static Logger _log;
    [NullableAttribute("2")]
private static Window _currentWindow;
    [NullableAttribute("2")]
private static ClientHotReloadProcessor Instance { get; }
    private static ElementUpdateAgent ElementAgent { get; }
    private static ClientHotReloadProcessor();
    [NullableContextAttribute("2")]
private static ClientHotReloadProcessor get_Instance();
    [NullableContextAttribute("2")]
[AsyncIteratorStateMachineAttribute("Uno.UI.RemoteControl.HotReload.ClientHotReloadProcessor/<EnumerateHotReloadInstances>d__4`1")]
private static IAsyncEnumerable`1<TMatch> EnumerateHotReloadInstances(object instance, Func`3<FrameworkElement, string, Task`1<TMatch>> predicate, string parentKey);
    private static void SwapViews(FrameworkElement oldView, FrameworkElement newView);
    private static void ApplyDataContext(object parentDataContext, FrameworkElement oldView, FrameworkElement newView, object oldDataContext);
    private static ElementUpdateAgent get_ElementAgent();
    [AsyncStateMachineAttribute("Uno.UI.RemoteControl.HotReload.ClientHotReloadProcessor/<ShouldReload>d__20")]
private static Task`1<ValueTuple`2<bool, string>> ShouldReload();
    internal static void SetWindow(Window window, bool disableIndicator);
    [AsyncStateMachineAttribute("Uno.UI.RemoteControl.HotReload.ClientHotReloadProcessor/<ReloadWithUpdatedTypes>d__22")]
private static Task ReloadWithUpdatedTypes(HotReloadClientOperation hrOp, Window window, Type[] updatedTypes);
    private static void UpdateGlobalResources(Type[] updatedTypes);
    private static void ReplaceViewInstance(UIElement instance, Type replacementType, ElementUpdateHandlerActions handler, Type[] updatedTypes);
    public static void ForceHotReloadUpdate();
    [EditorBrowsableAttribute("1")]
public static void UpdateApplication(Type[] types);
    private static void UpdateApplicationCore(Type[] types);
    [CompilerGeneratedAttribute]
internal static MethodInfo <UpdateGlobalResources>g__GetInitMethod|23_1(Type type, string name);
}
internal enum Uno.UI.RemoteControl.HotReload.HotReloadState : Enum {
    public int value__;
    public static HotReloadState Disabled;
    public static HotReloadState Initializing;
    public static HotReloadState Ready;
    public static HotReloadState Processing;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Uno.UI.RemoteControl.HotReload.MetadataUpdater.ElementUpdateAgent : object {
    private static DynamicallyAccessedMemberTypes HotReloadHandlerLinkerFlags;
    private Action`1<string> _log;
    private Action`2<MethodInfo, Exception> _onActionError;
    private AssemblyLoadEventHandler _assemblyLoad;
    private ConcurrentDictionary`2<Type, ElementUpdateHandlerActions> _elementHandlerActions;
    internal static string MetadataUpdaterType;
    public ImmutableDictionary`2<Type, ElementUpdateHandlerActions> ElementHandlerActions { get; }
    public ElementUpdateAgent(Action`1<string> log, Action`2<MethodInfo, Exception> onActionError);
    public ImmutableDictionary`2<Type, ElementUpdateHandlerActions> get_ElementHandlerActions();
    private void OnAssemblyLoad(object _, AssemblyLoadEventArgs eventArgs);
    [UnconditionalSuppressMessageAttribute("Trimmer", "IL2072")]
private void LoadElementUpdateHandlerActions();
    internal void GetElementHandlerActions(Type elementType, Type handlerType);
    private MethodInfo GetUpdateMethod(Type handlerType, string name);
    private MethodInfo GetHandlerMethod(Type handlerType, string name, Type[] parameterTypes, Type returnType);
    private Action`1<Type[]> CreateAction(MethodInfo update, Type handlerType);
    private TAction CreateHandlerAction(MethodInfo update);
    internal static List`1<Assembly> TopologicalSort(Assembly[] assemblies);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("Trimming", "IL2026")]
internal static void <TopologicalSort>g__Visit|17_0(Assembly[] assemblies, Assembly assembly, List`1<Assembly> sortedAssemblies, HashSet`1<string> visited);
}
[ExtensionAttribute]
public static class Uno.UI.Toolkit.CommandBarExtensions : object {
    [CompilerGeneratedAttribute]
private static DependencyProperty <SubtitleProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <NavigationCommandProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <BackButtonTitleProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <BackButtonVisibilityProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <BackButtonForegroundProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <BackButtonIconProperty>k__BackingField;
    public static DependencyProperty SubtitleProperty { get; }
    public static DependencyProperty NavigationCommandProperty { get; }
    public static DependencyProperty BackButtonTitleProperty { get; }
    public static DependencyProperty BackButtonVisibilityProperty { get; }
    public static DependencyProperty BackButtonForegroundProperty { get; }
    public static DependencyProperty BackButtonIconProperty { get; }
    private static CommandBarExtensions();
    [CompilerGeneratedAttribute]
public static DependencyProperty get_SubtitleProperty();
    [ExtensionAttribute]
public static void SetSubtitle(CommandBar commandBar, string subtitle);
    [ExtensionAttribute]
public static string GetSubtitle(CommandBar commandBar);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_NavigationCommandProperty();
    [ExtensionAttribute]
public static void SetNavigationCommand(CommandBar commandBar, AppBarButton navigationCommand);
    [ExtensionAttribute]
public static AppBarButton GetNavigationCommand(CommandBar commandBar);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_BackButtonTitleProperty();
    [ExtensionAttribute]
public static void SetBackButtonTitle(CommandBar commandBar, string backButtonTitle);
    [ExtensionAttribute]
public static string GetBackButtonTitle(CommandBar commandBar);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_BackButtonVisibilityProperty();
    [ExtensionAttribute]
public static void SetBackButtonVisibility(CommandBar commandBar, Visibility BackButtonVisibility);
    [ExtensionAttribute]
public static Visibility GetBackButtonVisibility(CommandBar commandBar);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_BackButtonForegroundProperty();
    [ExtensionAttribute]
public static void SetBackButtonForeground(CommandBar commandBar, Brush backButtonForeground);
    [ExtensionAttribute]
public static Brush GetBackButtonForeground(CommandBar commandBar);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_BackButtonIconProperty();
    [ExtensionAttribute]
public static void SetBackButtonIcon(CommandBar commandBar, IconElement backButtonIcon);
    [ExtensionAttribute]
public static IconElement GetBackButtonIcon(CommandBar commandBar);
}
[ContentPropertyAttribute]
[TemplatePartAttribute]
[TemplatePartAttribute]
public class Uno.UI.Toolkit.ElevatedView : Control {
    private static Color DefaultShadowColor;
    private Border _border;
    private Panel _shadowHost;
    [CompilerGeneratedAttribute]
private static DependencyProperty <ElevationProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <ShadowColorProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private static DependencyProperty <ElevatedContentProperty>k__BackingField;
    public static DependencyProperty ElevationProperty { get; }
    public double Elevation { get; public set; }
    public static DependencyProperty ShadowColorProperty { get; }
    public Color ShadowColor { get; public set; }
    public static DependencyProperty ElevatedContentProperty { get; }
    public object ElevatedContent { get; public set; }
    private static ElevatedView();
    protected virtual void OnApplyTemplate();
    [CompilerGeneratedAttribute]
public static DependencyProperty get_ElevationProperty();
    public double get_Elevation();
    public void set_Elevation(double value);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_ShadowColorProperty();
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_ElevatedContentProperty();
    public object get_ElevatedContent();
    public void set_ElevatedContent(object value);
    private static void OnChanged(DependencyObject snd, DependencyPropertyChangedEventArgs evt);
    private void UpdateElevation();
    [CompilerGeneratedAttribute]
private void <.ctor>b__3_0(object snd, SizeChangedEventArgs evt);
}
[ExtensionAttribute]
internal static class Uno.UI.Toolkit.Extensions.RectExtensions : object {
    [ExtensionAttribute]
public static Point GetCenter(Rect rect);
    [ExtensionAttribute]
public static Point GetLocation(Rect rect);
    [ExtensionAttribute]
public static DisplayOrientations GetOrientation(Rect rect);
    [ExtensionAttribute]
internal static Rect InflateBy(Rect left, Thickness right);
    [ExtensionAttribute]
internal static Rect DeflateBy(Rect left, Thickness right);
}
public class Uno.UI.Toolkit.MenuFlyoutExtensions : object {
    [CompilerGeneratedAttribute]
private static DependencyProperty <CancelTextIosOverrideProperty>k__BackingField;
    public static DependencyProperty CancelTextIosOverrideProperty { get; }
    private static MenuFlyoutExtensions();
    [CompilerGeneratedAttribute]
public static DependencyProperty get_CancelTextIosOverrideProperty();
    public static string GetCancelTextIosOverride(MenuFlyout obj);
    public static void SetCancelTextIosOverride(MenuFlyout obj, string value);
}
[ExtensionAttribute]
public static class Uno.UI.Toolkit.MenuFlyoutItemExtensions : object {
    [CompilerGeneratedAttribute]
private static DependencyProperty <IsDestructiveProperty>k__BackingField;
    public static DependencyProperty IsDestructiveProperty { get; }
    private static MenuFlyoutItemExtensions();
    [CompilerGeneratedAttribute]
public static DependencyProperty get_IsDestructiveProperty();
    [ExtensionAttribute]
public static void SetIsDestructive(MenuFlyoutItem menuFlyoutItem, bool isDestructive);
    [ExtensionAttribute]
public static bool GetIsDestructive(MenuFlyoutItem menuFlyoutItem);
}
[ExtensionAttribute]
public static class Uno.UI.Toolkit.SplitViewExtensions : object {
    [CompilerGeneratedAttribute]
private static DependencyProperty <IsPaneEnabledProperty>k__BackingField;
    public static DependencyProperty IsPaneEnabledProperty { get; }
    private static SplitViewExtensions();
    [CompilerGeneratedAttribute]
public static DependencyProperty get_IsPaneEnabledProperty();
    [ExtensionAttribute]
public static void SetIsPaneEnabled(SplitView splitView, bool isPaneEnabled);
    [ExtensionAttribute]
public static bool GetIsPaneEnabled(SplitView splitView);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Uno.UI.Toolkit.StorageFileHelper : object {
    [AsyncStateMachineAttribute("Uno.UI.Toolkit.StorageFileHelper/<ExistsInPackage>d__0")]
public static Task`1<bool> ExistsInPackage(string fileName);
    private static Task`1<bool> FileExistsInPackage(string fileName);
}
[ExtensionAttribute]
public static class Uno.UI.Toolkit.UICommandExtensions : object {
    [ExtensionAttribute]
public static void SetDestructive(UICommand command, bool isDestructive);
}
[ExtensionAttribute]
public static class Uno.UI.Toolkit.UIElementExtensions : object {
    [CompilerGeneratedAttribute]
private static DependencyProperty <ElevationProperty>k__BackingField;
    private static Color ElevationColor;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Dictionary`2<ValueTuple`2<Type, string>, DependencyProperty> _dependencyPropertyReflectionCache;
    public static DependencyProperty ElevationProperty { get; }
    private static UIElementExtensions();
    [ExtensionAttribute]
public static void SetElevation(UIElement element, double elevation);
    [ExtensionAttribute]
public static double GetElevation(UIElement element);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_ElevationProperty();
    private static void OnElevationChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
    [ExtensionAttribute]
internal static void SetElevationInternal(DependencyObject element, double elevation, Color shadowColor, DependencyObject host, CornerRadius cornerRadius);
    [ExtensionAttribute]
internal static Thickness GetPadding(UIElement uiElement);
    [ExtensionAttribute]
internal static bool SetPadding(UIElement uiElement, Thickness padding);
    [ExtensionAttribute]
internal static bool TryGetPadding(FrameworkElement frameworkElement, Thickness& padding);
    [ExtensionAttribute]
internal static bool TrySetPadding(FrameworkElement frameworkElement, Thickness padding);
    [ExtensionAttribute]
internal static DependencyProperty FindDependencyPropertyUsingReflection(UIElement uiElement, string propertyName);
}
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.Activator : MulticastDelegate {
    public Activator(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.AddToCollection : MulticastDelegate {
    public AddToCollection(object object, IntPtr method);
    public virtual void Invoke(object instance, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.AddToDictionary : MulticastDelegate {
    public AddToDictionary(object object, IntPtr method);
    public virtual void Invoke(object instance, object key, object item);
    public virtual IAsyncResult BeginInvoke(object instance, object key, object item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.BoxInstanceMethod : MulticastDelegate {
    public BoxInstanceMethod(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.CreateFromStringMethod : MulticastDelegate {
    public CreateFromStringMethod(object object, IntPtr method);
    public virtual object Invoke(string args);
    public virtual IAsyncResult BeginInvoke(string args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.Getter : MulticastDelegate {
    public Getter(object object, IntPtr method);
    public virtual object Invoke(object instance);
    public virtual IAsyncResult BeginInvoke(object instance, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.Setter : MulticastDelegate {
    public Setter(object object, IntPtr method);
    public virtual void Invoke(object instance, object value);
    public virtual IAsyncResult BeginInvoke(object instance, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.XamlMember : object {
    private XamlTypeInfoProvider _provider;
    private string _name;
    private bool _isAttachable;
    private bool _isDependencyProperty;
    private bool _isReadOnly;
    private string _typeName;
    private string _targetTypeName;
    [CompilerGeneratedAttribute]
private Getter <Getter>k__BackingField;
    [CompilerGeneratedAttribute]
private Setter <Setter>k__BackingField;
    public string Name { get; }
    public IXamlType Type { get; }
    public IXamlType TargetType { get; }
    public bool IsAttachable { get; }
    public bool IsDependencyProperty { get; }
    public bool IsReadOnly { get; }
    public Getter Getter { get; public set; }
    public Setter Setter { get; public set; }
    public XamlMember(XamlTypeInfoProvider provider, string name, string typeName);
    public sealed virtual string get_Name();
    public sealed virtual IXamlType get_Type();
    public void SetTargetTypeName(string targetTypeName);
    public sealed virtual IXamlType get_TargetType();
    public void SetIsAttachable();
    public sealed virtual bool get_IsAttachable();
    public void SetIsDependencyProperty();
    public sealed virtual bool get_IsDependencyProperty();
    public void SetIsReadOnly();
    public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public Getter get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Getter value);
    public sealed virtual object GetValue(object instance);
    [CompilerGeneratedAttribute]
public Setter get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Setter value);
    public sealed virtual void SetValue(object instance, object value);
}
[GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")]
[DebuggerNonUserCodeAttribute]
public class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.XamlMetaDataProvider : object {
    private XamlTypeInfoProvider _provider;
    private XamlTypeInfoProvider Provider { get; }
    private XamlTypeInfoProvider get_Provider();
    [DefaultOverloadAttribute]
public sealed virtual IXamlType GetXamlType(Type type);
    public sealed virtual IXamlType GetXamlType(string fullName);
    public sealed virtual XmlnsDefinition[] GetXmlnsDefinitions();
}
[GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.XamlSystemBaseType : object {
    private string _fullName;
    private Type _underlyingType;
    public string FullName { get; }
    public Type UnderlyingType { get; }
    public IXamlType BaseType { get; }
    public IXamlMember ContentProperty { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public IXamlType BoxedType { get; }
    public XamlSystemBaseType(string fullName, Type underlyingType);
    public sealed virtual string get_FullName();
    public sealed virtual Type get_UnderlyingType();
    public virtual IXamlType get_BaseType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlMember GetMember(string name);
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlType get_BoxedType();
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
}
[GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.XamlTypeInfoProvider : object {
    private Dictionary`2<string, IXamlType> _xamlTypeCacheByName;
    private Dictionary`2<Type, IXamlType> _xamlTypeCacheByType;
    private Dictionary`2<string, IXamlMember> _xamlMembers;
    private String[] _typeNameTable;
    private Type[] _typeTable;
    private List`1<IXamlMetadataProvider> _otherProviders;
    private List`1<IXamlMetadataProvider> OtherProviders { get; }
    public IXamlType GetXamlTypeByType(Type type);
    public IXamlType GetXamlTypeByName(string typeName);
    public IXamlMember GetMemberByLongName(string longMemberName);
    private void InitTypeTables();
    private int LookupTypeIndexByName(string typeName);
    private int LookupTypeIndexByType(Type type);
    private object Activate_0_ElevatedView();
    private IXamlType CreateXamlType(int typeIndex);
    private List`1<IXamlMetadataProvider> get_OtherProviders();
    private IXamlType CheckOtherMetadataProvidersForName(string typeName);
    private IXamlType CheckOtherMetadataProvidersForType(Type type);
    private object get_0_ElevatedView_ElevatedContent(object instance);
    private void set_0_ElevatedView_ElevatedContent(object instance, object Value);
    private object get_1_ElevatedView_Elevation(object instance);
    private void set_1_ElevatedView_Elevation(object instance, object Value);
    private object get_2_ElevatedView_ShadowColor(object instance);
    private void set_2_ElevatedView_ShadowColor(object instance, object Value);
    private IXamlMember CreateXamlMember(string longMemberName);
}
[GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class Uno.UI.Toolkit.Uno_UI_Toolkit_Windows_XamlTypeInfo.XamlUserType : XamlSystemBaseType {
    private XamlTypeInfoProvider _provider;
    private IXamlType _baseType;
    private IXamlType _boxedType;
    private bool _isArray;
    private bool _isMarkupExtension;
    private bool _isBindable;
    private bool _isReturnTypeStub;
    private bool _isLocalType;
    private string _contentPropertyName;
    private string _itemTypeName;
    private string _keyTypeName;
    private Dictionary`2<string, string> _memberNames;
    private Dictionary`2<string, object> _enumValues;
    [CompilerGeneratedAttribute]
private Activator <Activator>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToCollection <CollectionAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private AddToDictionary <DictionaryAdd>k__BackingField;
    [CompilerGeneratedAttribute]
private CreateFromStringMethod <CreateFromStringMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private BoxInstanceMethod <BoxInstance>k__BackingField;
    public IXamlType BaseType { get; }
    public bool IsArray { get; }
    public bool IsCollection { get; }
    public bool IsConstructible { get; }
    public bool IsDictionary { get; }
    public bool IsMarkupExtension { get; }
    public bool IsBindable { get; }
    public bool IsReturnTypeStub { get; }
    public bool IsLocalType { get; }
    public IXamlType BoxedType { get; }
    public IXamlMember ContentProperty { get; }
    public IXamlType ItemType { get; }
    public IXamlType KeyType { get; }
    public Activator Activator { get; public set; }
    public AddToCollection CollectionAdd { get; public set; }
    public AddToDictionary DictionaryAdd { get; public set; }
    public CreateFromStringMethod CreateFromStringMethod { get; public set; }
    public BoxInstanceMethod BoxInstance { get; public set; }
    public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType);
    public virtual IXamlType get_BaseType();
    public virtual bool get_IsArray();
    public virtual bool get_IsCollection();
    public virtual bool get_IsConstructible();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsMarkupExtension();
    public virtual bool get_IsBindable();
    public virtual bool get_IsReturnTypeStub();
    public virtual bool get_IsLocalType();
    public virtual IXamlType get_BoxedType();
    public virtual IXamlMember get_ContentProperty();
    public virtual IXamlType get_ItemType();
    public virtual IXamlType get_KeyType();
    public virtual IXamlMember GetMember(string name);
    public virtual object ActivateInstance();
    public virtual void AddToMap(object instance, object key, object item);
    public virtual void AddToVector(object instance, object item);
    public virtual void RunInitializer();
    public virtual object CreateFromString(string input);
    [CompilerGeneratedAttribute]
public Activator get_Activator();
    [CompilerGeneratedAttribute]
public void set_Activator(Activator value);
    [CompilerGeneratedAttribute]
public AddToCollection get_CollectionAdd();
    [CompilerGeneratedAttribute]
public void set_CollectionAdd(AddToCollection value);
    [CompilerGeneratedAttribute]
public AddToDictionary get_DictionaryAdd();
    [CompilerGeneratedAttribute]
public void set_DictionaryAdd(AddToDictionary value);
    [CompilerGeneratedAttribute]
public CreateFromStringMethod get_CreateFromStringMethod();
    [CompilerGeneratedAttribute]
public void set_CreateFromStringMethod(CreateFromStringMethod value);
    [CompilerGeneratedAttribute]
public BoxInstanceMethod get_BoxInstance();
    [CompilerGeneratedAttribute]
public void set_BoxInstance(BoxInstanceMethod value);
    public void SetContentPropertyName(string contentPropertyName);
    public void SetIsArray();
    public void SetIsMarkupExtension();
    public void SetIsBindable();
    public void SetIsReturnTypeStub();
    public void SetIsLocalType();
    public void SetItemTypeName(string itemTypeName);
    public void SetKeyTypeName(string keyTypeName);
    public void SetBoxedType(IXamlType boxedType);
    public object BoxType(object instance);
    public void AddMemberName(string shortName);
    public void AddEnumValue(string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Uno.UI.Toolkit.VisibleBoundsPadding : object {
    [CompilerGeneratedAttribute]
private static DependencyProperty <PaddingMaskProperty>k__BackingField;
    public static Thickness WindowPadding { get; }
    public static DependencyProperty PaddingMaskProperty { get; }
    private static VisibleBoundsPadding();
    public static Thickness get_WindowPadding();
    public static PaddingMask GetPaddingMask(DependencyObject obj);
    public static void SetPaddingMask(DependencyObject obj, PaddingMask value);
    [CompilerGeneratedAttribute]
public static DependencyProperty get_PaddingMaskProperty();
    private static void OnIsPaddingMaskChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs args);
}
public static class Uno.UI.ViewHelper : object {
    public static string Architecture { get; }
    public static string get_Architecture();
}
[ExtensionAttribute]
public static class Uno.UI.WindowExtensions : object {
    [ExtensionAttribute]
public static void EnableHotReload(Window window);
    [ExtensionAttribute]
public static void EnableHotReload(Window window, bool disableIndicator);
    [ExtensionAttribute]
public static void ForceHotReloadUpdate(Window window);
}
