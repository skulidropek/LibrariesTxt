[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F32B69D65970D87D435E5DAA39CB8E10A1409FCBA1897689A5A2388B9D2C66FD6__UrlRegularExpression_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F32B69D65970D87D435E5DAA39CB8E10A1409FCBA1897689A5A2388B9D2C66FD6__UrlRegularExpression_0 Instance;
    private static <RegexGenerator_g>F32B69D65970D87D435E5DAA39CB8E10A1409FCBA1897689A5A2388B9D2C66FD6__UrlRegularExpression_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F32B69D65970D87D435E5DAA39CB8E10A1409FCBA1897689A5A2388B9D2C66FD6__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>F32B69D65970D87D435E5DAA39CB8E10A1409FCBA1897689A5A2388B9D2C66FD6__Utilities();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class uSync.Core.Cache.CachedName : object {
    [CompilerGeneratedAttribute]
private Guid <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Guid Key { get; public set; }
    public string Name { get; public set; }
    [NullableContextAttribute("1")]
public CachedName(Guid key, string name);
    [CompilerGeneratedAttribute]
public Guid get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Cache.SyncEntityCache : object {
    private DictionaryAppCache cache;
    private DictionaryAppCache keyCache;
    private DictionaryAppCache nameCache;
    private DictionaryAppCache docTypeCache;
    private IEntityService entityService;
    private IContentTypeService _contentTypeService;
    private bool _cacheEnabled;
    public SyncEntityCache(IEntityService entityService, IContentTypeService contentTypeService);
    [NullableContextAttribute("2")]
public CachedName GetName(int id);
    public void AddName(int id, Guid guid, string name);
    [NullableContextAttribute("2")]
public IEntitySlim GetEntity(int id);
    [NullableContextAttribute("2")]
public IEntitySlim GetEntity(int id, UmbracoObjectTypes objectType);
    [NullableContextAttribute("2")]
public IEntitySlim GetEntity(Guid id);
    [NullableContextAttribute("2")]
public IEntitySlim GetEntity(Guid id, UmbracoObjectTypes objectType);
    public IEnumerable`1<IEntitySlim> GetAll(UmbracoObjectTypes objectType, Int32[] ids);
    public IContentType GetContentType(string alias);
    [NullableContextAttribute("2")]
public IContentType GetContentType(Guid id);
    public void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class uSync.Core.ChangeListExtensions : object {
    [ExtensionAttribute]
public static void AddNew(List`1<uSyncChange> changes, string name, string value, string path);
    [ExtensionAttribute]
public static void AddNew(List`1<uSyncChange> changes, string name, string value, string path, bool success);
    [ExtensionAttribute]
public static void AddUpdate(List`1<uSyncChange> changes, string name, TObject oldValue, TObject newValue, string path);
    [ExtensionAttribute]
public static void AddUpdate(List`1<uSyncChange> changes, string name, TObject oldValue, TObject newValue, string path, bool success);
    [ExtensionAttribute]
public static void AddUpdate(List`1<uSyncChange> changes, string name, string oldValue, string newValue, string path);
    [ExtensionAttribute]
public static void AddUpdate(List`1<uSyncChange> changes, string name, string oldValue, string newValue, string path, bool success);
    [ExtensionAttribute]
public static void AddWarning(List`1<uSyncChange> changes, string path, string name, string warning);
    [ExtensionAttribute]
public static void AddUpdateJson(List`1<uSyncChange> changes, string name, object oldValue, object newValue, string path);
    [ExtensionAttribute]
public static void AddUpdateJson(List`1<uSyncChange> changes, string name, object oldValue, object newValue, string path, bool success);
    [ExtensionAttribute]
public static bool HasErrors(List`1<uSyncChange> changes);
    [ExtensionAttribute]
public static bool HasWarning(List`1<uSyncChange> changes);
}
public enum uSync.Core.ChangeType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ChangeType Clean;
    [EnumMemberAttribute]
public static ChangeType Removed;
    [EnumMemberAttribute]
public static ChangeType NoChange;
    [EnumMemberAttribute]
public static ChangeType Create;
    [EnumMemberAttribute]
public static ChangeType Import;
    [EnumMemberAttribute]
public static ChangeType Export;
    [EnumMemberAttribute]
public static ChangeType Update;
    [EnumMemberAttribute]
public static ChangeType Delete;
    [EnumMemberAttribute]
public static ChangeType WillChange;
    [EnumMemberAttribute]
public static ChangeType Information;
    [EnumMemberAttribute]
public static ChangeType Rolledback;
    [EnumMemberAttribute]
public static ChangeType Fail;
    [EnumMemberAttribute]
public static ChangeType ImportFail;
    [EnumMemberAttribute]
public static ChangeType Mismatch;
    [EnumMemberAttribute]
public static ChangeType ParentMissing;
    [EnumMemberAttribute]
public static ChangeType Hidden;
}
[ExtensionAttribute]
public static class uSync.Core.ContentScheduleExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static uSyncContentState CalculateCultureState(IList`1<ContentSchedule> schedules, string culture, uSyncContentState defaultState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class uSync.Core.DataTypes.ConfigurationSerializerBase : object {
    public virtual IDictionary`2<string, object> GetConfigurationExport(IDictionary`2<string, object> configuration);
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
    protected static IDictionary`2<string, object> MigratePropertyNames(IDictionary`2<string, object> source, Dictionary`2<string, string> names, bool sort);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.DataTypes.ConfigurationSerializerCollection : BuilderCollectionBase`1<IConfigurationSerializer> {
    public ConfigurationSerializerCollection(Func`1<IEnumerable`1<IConfigurationSerializer>> items);
    public IConfigurationSerializer GetSerializer(string editorAlias);
    public IEnumerable`1<IConfigurationSerializer> GetSerializers(string editorAlias);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.DataTypes.ConfigurationSerializerCollectionBuilder : LazyCollectionBuilderBase`3<ConfigurationSerializerCollectionBuilder, ConfigurationSerializerCollection, IConfigurationSerializer> {
    protected ConfigurationSerializerCollectionBuilder This { get; }
    protected virtual ConfigurationSerializerCollectionBuilder get_This();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.ColourPickerMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.DataListMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.FileUploadMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.LabelMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.MarkdownMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.MediaPickerConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    [NullableContextAttribute("2")]
public sealed virtual string GetEditorAlias();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.MultipleTextMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.RichTextEditorMigratingSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    [NullableContextAttribute("2")]
public sealed virtual string GetEditorAlias();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
    private IDictionary`2<string, object> FixMediaParent(IDictionary`2<string, object> configuration);
    private IDictionary`2<string, object> TopLevelEditor(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.SliderMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.DataTypes.DataTypeSerializers.TagMigratingConfigSerializer : ConfigurationSerializerBase {
    public string Name { get; }
    public String[] Editors { get; }
    public sealed virtual string get_Name();
    public sealed virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
}
[NullableContextAttribute("1")]
public interface uSync.Core.DataTypes.IConfigurationSerializer {
    public string Name { get; }
    public String[] Editors { get; }
    public abstract virtual string get_Name();
    public abstract virtual String[] get_Editors();
    public virtual IDictionary`2<string, object> GetConfigurationExport(IDictionary`2<string, object> configuration);
    public virtual IDictionary`2<string, object> GetConfigurationImport(IDictionary`2<string, object> configuration);
    [NullableContextAttribute("2")]
public virtual string GetEditorAlias();
}
[FlagsAttribute]
public enum uSync.Core.Dependency.DependencyFlags : Enum {
    public int value__;
    public static DependencyFlags None;
    public static DependencyFlags IncludeChildren;
    public static DependencyFlags IncludeAncestors;
    public static DependencyFlags IncludeDependencies;
    public static DependencyFlags IncludeViews;
    public static DependencyFlags IncludeMedia;
    public static DependencyFlags IncludeLinked;
    public static DependencyFlags IncludeMediaFiles;
    public static DependencyFlags IncludeConfig;
    public static DependencyFlags AdjacentOnly;
    public static DependencyFlags RootSync;
    public static DependencyFlags IncludeContents;
    public static DependencyFlags PublishedDependencies;
}
[ExtensionAttribute]
public static class uSync.Core.Dependency.DependencyGraph : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static List`1<T> TopologicalSort(ICollection`1<T> nodes, ICollection`1<GraphEdge`1<T>> edges);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Dependency.DependencyMessageArgs : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Total>k__BackingField;
    public string Message { get; public set; }
    public int Count { get; public set; }
    public int Total { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public int get_Total();
    [CompilerGeneratedAttribute]
public void set_Total(int value);
}
public enum uSync.Core.Dependency.DependencyMode : Enum {
    public int value__;
    public static DependencyMode MustMatch;
    public static DependencyMode MustExist;
}
public static class uSync.Core.Dependency.DependencyOrders : object {
    public static int Languages;
    public static int DictionaryItems;
    public static int Templates;
    public static int DataTypes;
    public static int Compositions;
    public static int ContentTypes;
    public static int MediaTypes;
    public static int MemberTypes;
    public static int Media;
    public static int Content;
    public static int Domain;
    public static int RelationTypes;
    private static DependencyOrders();
    [NullableContextAttribute("1")]
public static int OrderFromEntityType(string entityType);
}
public class uSync.Core.Dependency.GraphEdge : object {
    [NullableContextAttribute("1")]
public static GraphEdge`1<T> Create(T node, T edge);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Dependency.GraphEdge`1 : object {
    [CompilerGeneratedAttribute]
private T <Node>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Edge>k__BackingField;
    public T Node { get; public set; }
    public T Edge { get; public set; }
    public GraphEdge`1(T node, T edge);
    [CompilerGeneratedAttribute]
public T get_Node();
    [CompilerGeneratedAttribute]
public void set_Node(T value);
    [CompilerGeneratedAttribute]
public T get_Edge();
    [CompilerGeneratedAttribute]
public void set_Edge(T value);
}
public interface uSync.Core.Dependency.ISyncDependencyChecker`1 {
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<uSyncDependency> GetDependencies(TObject item, DependencyFlags flags);
}
public interface uSync.Core.Dependency.ISyncDependencyItem {
    public UmbracoObjectTypes ObjectType { get; }
    public abstract virtual UmbracoObjectTypes get_ObjectType();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Dependency.SyncDependencyCollection : BuilderCollectionBase`1<ISyncDependencyItem> {
    public SyncDependencyCollection(Func`1<IEnumerable`1<ISyncDependencyItem>> items);
    public IEnumerable`1<ISyncDependencyChecker`1<TObject>> GetCheckers();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Dependency.SyncDependencyCollectionBuilder : WeightedCollectionBuilderBase`3<SyncDependencyCollectionBuilder, SyncDependencyCollection, ISyncDependencyItem> {
    protected SyncDependencyCollectionBuilder This { get; }
    protected virtual SyncDependencyCollectionBuilder get_This();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class uSync.Core.Dependency.uSyncDependency : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyMode <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private DependencyFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private static uSyncDependencyUpdate DependencyUpdate;
    [NullableAttribute("1")]
public string Name { get; public set; }
    public Udi Udi { get; public set; }
    public int Order { get; public set; }
    public int Level { get; public set; }
    public DependencyMode Mode { get; public set; }
    public DependencyFlags Flags { get; public set; }
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Udi get_Udi();
    [CompilerGeneratedAttribute]
public void set_Udi(Udi value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
    [CompilerGeneratedAttribute]
public DependencyMode get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(DependencyMode value);
    [CompilerGeneratedAttribute]
public DependencyFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(DependencyFlags value);
    [CompilerGeneratedAttribute]
public static void add_DependencyUpdate(uSyncDependencyUpdate value);
    [CompilerGeneratedAttribute]
public static void remove_DependencyUpdate(uSyncDependencyUpdate value);
    [NullableContextAttribute("1")]
public static void FireUpdate(string message);
    [NullableContextAttribute("1")]
private static void FireUpdate(string message, int count, int total);
}
public class uSync.Core.Dependency.uSyncDependencyUpdate : MulticastDelegate {
    public uSyncDependencyUpdate(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(DependencyMessageArgs e);
    public virtual IAsyncResult BeginInvoke(DependencyMessageArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class uSync.Core.EventMessageExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string FormatMessages(EventMessages eventMessages, string separator);
}
[ExtensionAttribute]
internal static class uSync.Core.Extensions.ConversionExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TObject GetValueAs(object value);
    [ExtensionAttribute]
public static Guid ConvertToGuid(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class uSync.Core.Extensions.DictionaryExtensions : object {
    [ExtensionAttribute]
public static string GetUsername(Dictionary`2<int, string> usernames, Nullable`1<int> id, Func`2<int, IUser> findMethod);
    [ExtensionAttribute]
public static int GetEmails(Dictionary`2<string, int> emails, string email, Func`2<string, IUser> findMethod);
    [ExtensionAttribute]
public static IDictionary`2<string, object> ToKeyNameDictionary(object obj);
    [ExtensionAttribute]
public static bool TryConvertToDictionary(object obj, IDictionary`2& result);
    [ExtensionAttribute]
public static IDictionary`2<TKey, TValue> MergeIgnoreDuplicates(IDictionary`2<TKey, TValue> source, IDictionary`2[] dictionaries);
    [ExtensionAttribute]
public static IDictionary`2<string, TValue> ConvertToCamelCase(IDictionary`2<string, TValue> originalDictionary);
    [ExtensionAttribute]
public static string ToCamelCase(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class uSync.Core.Extensions.JsonTextExtensions : object {
    internal static JsonSerializerOptions _defaultOptions;
    internal static JsonSerializerOptions _flatOptions;
    private static JsonNodeOptions _nodeOptions;
    private static JsonTextExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsValidJsonString(string value);
    [ExtensionAttribute]
public static bool TryParseToJsonNode(string value, JsonNode& node);
    [ExtensionAttribute]
public static bool TryParseToJsonNode(object value, JsonNode& node);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static JsonNode ToJsonNode(string value);
    [ExtensionAttribute]
public static bool TrySerializeJsonNode(JsonNode node, String& result, bool indent);
    [ExtensionAttribute]
public static string SerializeJsonNode(JsonNode node, bool indent);
    [ExtensionAttribute]
public static bool TryConvertToJsonNode(string value, JsonNode& node);
    [ExtensionAttribute]
public static bool TryConvertToJsonNode(object value, JsonNode& node);
    [ExtensionAttribute]
public static JsonNode ConvertToJsonNode(string value);
    [ExtensionAttribute]
public static JsonNode ConvertToJsonNode(object value);
    [ExtensionAttribute]
public static bool TryParseToJsonObject(string value, JsonObject& node);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static JsonObject ToJsonObject(string value);
    [ExtensionAttribute]
public static bool TryConvertToJsonObject(object value, JsonObject& result);
    [ExtensionAttribute]
public static JsonObject ConvertToJsonObject(object value);
    [ExtensionAttribute]
public static bool TryParseToJsonArray(string value, JsonArray& node);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static JsonArray ToJsonArray(string value);
    [ExtensionAttribute]
public static IEnumerable`1<JsonObject> AsListOfJsonObjects(JsonArray array);
    [ExtensionAttribute]
public static JsonNode ExpandAllJsonInToken(JsonNode node);
    [ExtensionAttribute]
public static bool TryExpandJsonNodeValue(JsonNode value, JsonNode& node);
    [ExtensionAttribute]
public static JsonNode ConvertStringToExpandedJson(string value);
    [ExtensionAttribute]
public static string ConvertStringToExpandedJsonString(string value, bool indented);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryDeserialize(string value, TObject& result);
    [ExtensionAttribute]
public static bool TryDeserialize(string value, Type type, Object& result);
    [ExtensionAttribute]
public static object DeserializeJson(string value, Type type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TObject DeserializeJson(string value);
    [ExtensionAttribute]
public static bool TrySerializeJsonString(object value, String& result);
    [ExtensionAttribute]
public static string SerializeJsonString(object value, bool indent);
    [ExtensionAttribute]
private static bool TryGetValueAs(object value, TObject& result);
    [ExtensionAttribute]
public static bool TryGetPropertyAsObject(JsonObject jsonObject, string propertyName, JsonObject& result);
    [ExtensionAttribute]
public static string GetPropertyAsString(JsonObject obj, string propertyName);
    [ExtensionAttribute]
public static bool GetPropertyAsBool(JsonObject obj, string propertyName, bool defaultValue);
    [ExtensionAttribute]
public static TResult GetPropertyValueOrDefault(JsonObject obj, string propertyName, TResult defaultValue);
    [ExtensionAttribute]
public static bool TryGetPropertyAsArray(JsonObject jsonObject, string propertyName, JsonArray& result);
    [ExtensionAttribute]
public static JsonArray GetPropertyAsArray(JsonObject obj, string propertyName);
    [ExtensionAttribute]
public static JsonObject GetPropertyAsObject(JsonObject obj, string propertyName);
    [ExtensionAttribute]
public static bool IsJsonEqual(object currentObject, object newObject);
}
[NullableContextAttribute("1")]
public interface uSync.Core.ISyncItemFactory {
    public SyncEntityCache EntityCache { get; }
    public abstract virtual IEnumerable`1<ISyncSerializer`1<TObject>> GetSerializers();
    public abstract virtual ISyncSerializer`1<TObject> GetSerializer(string name);
    public abstract virtual IEnumerable`1<ISyncTracker`1<TObject>> GetTrackers();
    public abstract virtual IEnumerable`1<uSyncChange> GetChanges(XElement node, SyncSerializerOptions options);
    public abstract virtual IEnumerable`1<uSyncChange> GetChanges(XElement node, XElement currentNode, SyncSerializerOptions options);
    public abstract virtual IEnumerable`1<ISyncDependencyChecker`1<TObject>> GetCheckers();
    public abstract virtual IEnumerable`1<uSyncDependency> GetDependencies(TObject item, DependencyFlags flags);
    public abstract virtual SyncEntityCache get_EntityCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Json.JsonXElementConverter : JsonConverter`1<XElement> {
    public virtual XElement Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, XElement value, JsonSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.Json.OrderedPropertiesJsonResolver : DefaultJsonTypeInfoResolver {
    public virtual JsonTypeInfo GetTypeInfo(Type type, JsonSerializerOptions options);
    private JsonTypeInfo SortObject(JsonTypeInfo typeInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class uSync.Core.ListExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void AddNotNull(List`1<TObject> list, TObject item);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void AddRangeIfNotNull(List`1<TObject> list, IEnumerable`1<TObject> items);
    [ExtensionAttribute]
public static bool IsValid(IList`1<string> list, string value);
    [ExtensionAttribute]
public static bool IsValidOrBlank(IList`1<string> list, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.BlockListMapper : SyncNestedJsonValueMapperBase {
    private string _docTypeKeyAlias;
    private String[] _contentBlocks;
    public string Name { get; }
    public String[] Editors { get; }
    public BlockListMapper(IEntityService entityService, Lazy`1<SyncValueMapperCollection> mapperCollection, IContentTypeService contentTypeService, IDataTypeService dataTypeService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    protected virtual JsonNode GetImportProperty(object value);
    protected virtual JsonNode GetExportProperty(string value);
    protected virtual string ProcessValues(JsonObject jsonValue, string editorAlias, Func`3<JsonObject, IContentType, JsonObject> GetPropertiesMethod);
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.DateTimeMapper : SyncValueMapperBase {
    public string Name { get; }
    public String[] Editors { get; }
    public DateTimeMapper(IEntityService entityService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual string GetImportValue(string value, string editorAlias);
    public virtual string GetExportValue(object value, string editorAlias);
    private static string GetFormattedDateTime(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.GridImageMapper : SyncValueMapperBase {
    public string Name { get; }
    public String[] Editors { get; }
    public GridImageMapper(IEntityService entityService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.GridMapper : SyncValueMapperBase {
    protected IMediaService mediaService;
    protected Lazy`1<SyncValueMapperCollection> mapperCollection;
    private Regex _urlRegEx;
    public string Name { get; }
    public String[] Editors { get; }
    public GridMapper(IEntityService entityService, Lazy`1<SyncValueMapperCollection> mappers, IMediaService mediaService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
    public virtual string GetImportValue(string value, string editorAlias);
    public virtual string GetExportValue(object value, string editorAlias);
    private string ProcessGridValues(string gridContent, Func`4<IEnumerable`1<ISyncMapper>, string, object, string> callback);
    private string ProcessImport(IEnumerable`1<ISyncMapper> mappers, string editorAlias, object value);
    private string ProcessExport(IEnumerable`1<ISyncMapper> mappers, string editorAlias, object value);
    private IEnumerable`1<uSyncDependency> ProcessControl(JsonObject control, DependencyFlags flags);
    private List`1<uSyncDependency> GetGridDependencies(string gridContent, Func`3<JsonObject, DependencyFlags, IEnumerable`1<uSyncDependency>> callback, DependencyFlags flags);
    private List`1<uSyncDependency> GetStyleDependencies(JsonObject style);
    [GeneratedRegexAttribute("(?:url\s*[(]*\s*)(.+)(?:[)])", "33", "en-US")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
private static Regex UrlRegularExpression();
    [IteratorStateMachineAttribute("uSync.Core.Mapping.GridMapper/<ProcessStyleMedia>d__18")]
private IEnumerable`1<uSyncDependency> ProcessStyleMedia(string urlValue);
    [NullableContextAttribute("2")]
private ValueTuple`2<string, IEnumerable`1<ISyncMapper>> FindMappers(JsonObject editor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.ImagePathMapper : SyncValueMapperBase {
    private static string _genericMediaPath;
    private string _siteRoot;
    private string _mediaFolder;
    private ILogger`1<ImagePathMapper> _logger;
    private IConfiguration _configuration;
    public string Name { get; }
    public String[] Editors { get; }
    public ImagePathMapper(IConfiguration configuration, IOptionsMonitor`1<GlobalSettings> _globalOptions, IEntityService entityService, ILogger`1<ImagePathMapper> logger);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual string GetExportValue(object value, string editorAlias);
    private string StripSitePath(string filePath);
    private string PrePendSitePath(string filePath);
    private static string ReplacePath(string filePath, string currentPath, string targetPath);
    private string GetMediaFolderSetting(string umbracoMediaPath);
    public virtual string GetImportValue(string value, string editorAlias);
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
    private string GetImagePath(string stringValue);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <.ctor>b__5_0(GlobalSettings x);
}
[NullableContextAttribute("1")]
public interface uSync.Core.Mapping.ISyncMapper {
    public string Name { get; }
    public String[] Editors { get; }
    public abstract virtual string get_Name();
    public abstract virtual String[] get_Editors();
    public abstract virtual bool IsMapper(PropertyType propertyType);
    public abstract virtual string GetExportValue(object value, string editorAlias);
    public abstract virtual string GetImportValue(string value, string editorAlias);
    public abstract virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.Mappers.MediaPicker3Mapper : SyncValueMapperBase {
    private ILogger`1<MediaPicker3Mapper> _logger;
    public string Name { get; }
    public String[] Editors { get; }
    public MediaPicker3Mapper(IEntityService entityService, ILogger`1<MediaPicker3Mapper> logger);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual string GetExportValue(object value, string editorAlias);
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
    private static Guid GetGuidValue(JsonObject obj, string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[NullableMapperAttribute]
public class uSync.Core.Mapping.MultiUrlMapper : SyncValueMapperBase {
    public string Name { get; }
    public String[] Editors { get; }
    public MultiUrlMapper(IEntityService entityService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.NestedContentMapper : SyncNestedJsonValueMapperBase {
    private string _docTypeAliasValue;
    public string Name { get; }
    public String[] Editors { get; }
    public NestedContentMapper(IEntityService entityService, Lazy`1<SyncValueMapperCollection> mapperCollection, IContentTypeService contentTypeService, IDataTypeService dataTypeService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    protected virtual string ProcessValues(JsonObject jsonValue, string editorAlias, Func`3<JsonObject, IContentType, JsonObject> GetPropertiesMethod);
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
}
public class uSync.Core.Mapping.NullableMapperAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.RepeatableValueMapper : SyncValueMapperBase {
    public string Name { get; }
    public String[] Editors { get; }
    public RepeatableValueMapper(IEntityService entityService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual string GetImportValue(string value, string editorAlias);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Mapping.RTEMapper : SyncValueMapperBase {
    private Lazy`1<SyncValueMapperCollection> _mapperCollection;
    private Regex UdiRegEx;
    private Regex MacroRegEx;
    public string Name { get; }
    public String[] Editors { get; }
    public RTEMapper(IEntityService entityService, Lazy`1<SyncValueMapperCollection> mappers);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
    private List`1<uSyncDependency> GetBlockDependencies(JsonObject jObject, string editorAlias, DependencyFlags flags);
    private IEnumerable`1<uSyncDependency> GetSimpleDependencies(string stringValue, string editorAlias, DependencyFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class uSync.Core.Mapping.SyncNestedJsonValueMapperBase : SyncNestedValueMapperBase {
    protected SyncNestedJsonValueMapperBase(IEntityService entityService, Lazy`1<SyncValueMapperCollection> mapperCollection, IContentTypeService contentTypeService, IDataTypeService dataTypeService);
    public virtual string GetImportValue(string value, string editorAlias);
    public virtual string GetExportValue(object value, string editorAlias);
    protected abstract virtual string ProcessValues(JsonObject jsonValue, string editorAlias, Func`3<JsonObject, IContentType, JsonObject> GetPropertiesMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class uSync.Core.Mapping.SyncNestedValueMapperBase : SyncValueMapperBase {
    protected IContentTypeService contentTypeService;
    protected IDataTypeService dataTypeService;
    protected Lazy`1<SyncValueMapperCollection> mapperCollection;
    public SyncNestedValueMapperBase(IEntityService entityService, Lazy`1<SyncValueMapperCollection> mapperCollection, IContentTypeService contentTypeService, IDataTypeService dataTypeService);
    protected virtual JsonNode GetImportProperty(object value);
    protected virtual JsonNode GetExportProperty(string value);
    protected JsonObject GetImportProperties(JsonObject item, IContentType docType);
    protected JsonObject GetExportProperties(JsonObject item, IContentType docType);
    protected IEnumerable`1<uSyncDependency> GetPropertyDependencies(JsonObject value, IContentType docType, DependencyFlags flags);
    protected IEnumerable`1<uSyncDependency> GetPropertyDependencies(IDictionary`2<string, object> properties, DependencyFlags flags);
    protected uSyncDependency CreateDocTypeDependency(string alias, DependencyFlags flags);
    protected static uSyncDependency CreateDocTypeDependency(IContentType item, DependencyFlags flags);
    protected static JsonObject GetJsonValue(object value);
    protected IContentType GetDocType(JsonObject json, string alias);
    [NullableContextAttribute("2")]
protected IContentType GetDocTypeByKey(JsonObject json, string keyAlias);
    protected IContentType GetDocType(string alias);
    protected static string GetStringValue(JsonNode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class uSync.Core.Mapping.SyncValueMapperBase : object {
    protected IEntityService entityService;
    private bool _hasNullableValue;
    public string Name { get; }
    public String[] Editors { get; }
    public SyncValueMapperBase(IEntityService entityService);
    public abstract virtual string get_Name();
    public abstract virtual String[] get_Editors();
    public virtual bool IsMapper(PropertyType propertyType);
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
    public virtual string GetExportValue(object value, string editorAlias);
    public virtual string GetImportValue(string value, string editorAlias);
    [IteratorStateMachineAttribute("uSync.Core.Mapping.SyncValueMapperBase/<CreateDependencies>d__11")]
protected IEnumerable`1<uSyncDependency> CreateDependencies(IEnumerable`1<string> udiStrings, DependencyFlags flags);
    protected uSyncDependency CreateDependency(string udiString, DependencyFlags flags);
    [NullableContextAttribute("2")]
protected uSyncDependency CreateDependency(GuidUdi udi, DependencyFlags flags);
    private IEntitySlim GetElement(GuidUdi udi);
    [NullableContextAttribute("2")]
protected static TObject GetValueAs(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Mapping.SyncValueMapperCollection : BuilderCollectionBase`1<ISyncMapper> {
    private ConcurrentDictionary`2<string, string> _customMappings;
    [CompilerGeneratedAttribute]
private SyncEntityCache <EntityCache>k__BackingField;
    private static Char[] _trimChars;
    public SyncEntityCache EntityCache { get; private set; }
    public SyncValueMapperCollection(SyncEntityCache entityCache, Func`1<IEnumerable`1<ISyncMapper>> items);
    private static SyncValueMapperCollection();
    [CompilerGeneratedAttribute]
public SyncEntityCache get_EntityCache();
    [CompilerGeneratedAttribute]
private void set_EntityCache(SyncEntityCache value);
    public IEnumerable`1<ISyncMapper> GetSyncMappers(string editorAlias);
    public string GetExportValue(object value, string editorAlias);
    public object GetImportValue(string value, string editorAlias);
    private static string GetCleanFlatJson(string stringValue);
    private static string GetSafeValue(object value);
    private string GetMapperAlias(string alias);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Mapping.SyncValueMapperCollectionBuilder : LazyCollectionBuilderBase`3<SyncValueMapperCollectionBuilder, SyncValueMapperCollection, ISyncMapper> {
    protected SyncValueMapperCollectionBuilder This { get; }
    protected virtual SyncValueMapperCollectionBuilder get_This();
}
[ExtensionAttribute]
public static class uSync.Core.Mapping.SyncValueMapperCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IEnumerable`1<uSyncDependency> GetDependencies(SyncValueMapperCollection mapperCollection, object value, string editorAlias, DependencyFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[NullableMapperAttribute]
public class uSync.Core.Mapping.UdiPickerMapper : SyncValueMapperBase {
    public string Name { get; }
    public String[] Editors { get; }
    public UdiPickerMapper(IEntityService entityService);
    public virtual string get_Name();
    public virtual String[] get_Editors();
    public virtual IEnumerable`1<uSyncDependency> GetDependencies(object value, string editorAlias, DependencyFlags flags);
}
public enum uSync.Core.Models.ChangeDetailType : Enum {
    public int value__;
    public static ChangeDetailType NoChange;
    public static ChangeDetailType Create;
    public static ChangeDetailType Update;
    public static ChangeDetailType Delete;
    public static ChangeDetailType Error;
    public static ChangeDetailType Warning;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Models.SyncAttempt`1 : ValueType {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TObject <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeType <Change>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IEnumerable`1<uSyncChange> <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Saved>k__BackingField;
    public bool Success { get; private set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public TObject Item { get; private set; }
    public string ItemType { get; private set; }
    public ChangeType Change { get; private set; }
    public string Message { get; private set; }
    [NullableAttribute("2")]
public Exception Exception { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<uSyncChange> Details { get; public set; }
    public bool Saved { get; public set; }
    private SyncAttempt`1(bool success, string name, TObject item, string itemType, ChangeType change, string message, Exception ex, bool saved);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
private void set_Success(bool value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TObject get_Item();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Item(TObject value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ChangeType get_Change();
    [CompilerGeneratedAttribute]
private void set_Change(ChangeType value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [IsReadOnlyAttribute]
[NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IEnumerable`1<uSyncChange> get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(IEnumerable`1<uSyncChange> value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_Saved();
    [CompilerGeneratedAttribute]
public void set_Saved(bool value);
    public static SyncAttempt`1<TObject> Succeed(string name, ChangeType change);
    public static SyncAttempt`1<TObject> Succeed(string name, ChangeType change, string message);
    public static SyncAttempt`1<TObject> Succeed(string name, TObject item, ChangeType change);
    public static SyncAttempt`1<TObject> Succeed(string name, TObject item, ChangeType change, IList`1<uSyncChange> details);
    public static SyncAttempt`1<TObject> Succeed(string name, TObject item, ChangeType change, string message, bool saved, IList`1<uSyncChange> details);
    public static SyncAttempt`1<TObject> Fail(string name, TObject item, ChangeType change, string message, Exception ex);
    public static SyncAttempt`1<TObject> Fail(string name, TObject item, ChangeType change, string message, IList`1<uSyncChange> changes, Exception ex);
    public static SyncAttempt`1<TObject> Fail(string name, ChangeType change, string message);
    public static SyncAttempt`1<TObject> Succeed(string name, TObject item, Type itemType, ChangeType change);
    public static SyncAttempt`1<TObject> SucceedIf(bool condition, string name, TObject item, Type itemType, ChangeType change);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Models.uSyncChange : object {
    [CompilerGeneratedAttribute]
private bool <Success>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeDetailType <Change>k__BackingField;
    public bool Success { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public string OldValue { get; public set; }
    public string NewValue { get; public set; }
    [JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public ChangeDetailType Change { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Success();
    [CompilerGeneratedAttribute]
public void set_Success(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(string value);
    [CompilerGeneratedAttribute]
public string get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(string value);
    [CompilerGeneratedAttribute]
public ChangeDetailType get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(ChangeDetailType value);
    public static uSyncChange Create(string path, string name, string newValue, bool useNew);
    public static uSyncChange Delete(string path, string name, string oldValue, bool useOld);
    public static uSyncChange Update(string path, string name, string oldValue, string newValue, bool success);
    public static uSyncChange Update(string path, string name, IEnumerable`1<string> oldValues, IEnumerable`1<string> newValues);
    public static uSyncChange Update(string path, string name, TObject oldValue, TObject newValue);
    public static uSyncChange NoChange(string path, string name);
    public static uSyncChange Error(string path, string name, string oldValue);
    public static uSyncChange Warning(string path, string name, string warning);
}
[ExtensionAttribute]
public static class uSync.Core.PublishResultExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Attempt`1<string> ToAttempt(PublishResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.Roots.Configs.BlockGridConfigMerger : BlockListMergerBase {
    public String[] Editors { get; }
    public sealed virtual String[] get_Editors();
    public virtual object GetMergedConfig(string root, string target);
    public virtual object GetDifferenceConfig(string root, string target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.Roots.Configs.BlockListConfigMerger : BlockListMergerBase {
    public String[] Editors { get; }
    public virtual String[] get_Editors();
    public virtual object GetMergedConfig(string root, string target);
    public virtual object GetDifferenceConfig(string root, string target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class uSync.Core.Roots.Configs.BlockListMergerBase : SyncConfigMergerBase {
    protected JsonArray GetMergedBlocks(JsonObject rootConfig, JsonObject targetConfig);
    protected JsonArray GetBlockDifferences(JsonObject rootConfig, JsonObject targetConfig);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.Roots.Configs.ImageCropperConfigMerger : SyncConfigMergerBase {
    public String[] Editors { get; }
    public sealed virtual String[] get_Editors();
    public sealed virtual object GetMergedConfig(string root, string target);
    public sealed virtual object GetDifferenceConfig(string root, string target);
}
[NullableContextAttribute("1")]
public interface uSync.Core.Roots.Configs.ISyncConfigMerger {
    public String[] Editors { get; }
    public abstract virtual String[] get_Editors();
    public abstract virtual object GetMergedConfig(string root, string target);
    public abstract virtual object GetDifferenceConfig(string root, string target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class uSync.Core.Roots.Configs.SyncConfigMergerBase : object {
    protected static string _removedLabel;
    private static SyncConfigMergerBase();
    [NullableContextAttribute("2")]
protected TConfig TryGetConfiguration(string value);
    protected static TObject[] MergeObjects(TObject[] rootObject, TObject[] targetObject, Func`2<TObject, TKey> keySelector, Predicate`1<TObject> predicate);
    protected TObject[] GetObjectDifferences(TObject[] rootObject, TObject[] targetObject, Func`2<TObject, TKey> keySelector, Action`2<TObject, string> setMarker);
    [NullableContextAttribute("2")]
protected static JsonArray GetJsonArrayDifferences(JsonArray sourceArray, JsonArray targetArray, string key, string removeProperty);
    [NullableContextAttribute("2")]
protected static JsonArray MergeJsonArrays(JsonArray sourceArray, JsonArray targetArray, string key, string removeProperty);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Roots.Configs.SyncConfigMergerCollection : BuilderCollectionBase`1<ISyncConfigMerger> {
    public SyncConfigMergerCollection(Func`1<IEnumerable`1<ISyncConfigMerger>> items);
    public ISyncConfigMerger GetConfigMerger(string editorAlias);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Roots.Configs.SyncConfigMergerCollectionBuilder : WeightedCollectionBuilderBase`3<SyncConfigMergerCollectionBuilder, SyncConfigMergerCollection, ISyncConfigMerger> {
    protected SyncConfigMergerCollectionBuilder This { get; }
    protected virtual SyncConfigMergerCollectionBuilder get_This();
}
public interface uSync.Core.Serialization.ISyncCachedSerializer {
    public abstract virtual void InitializeCache();
    public abstract virtual void DisposeCache();
}
[NullableContextAttribute("1")]
public interface uSync.Core.Serialization.ISyncContentSerializer`1 {
    public abstract virtual string GetItemPath(TObject item);
}
[NullableContextAttribute("1")]
public interface uSync.Core.Serialization.ISyncSerializer`1 {
    public bool IsTwoPass { get; }
    public string ItemType { get; }
    public abstract virtual bool IsValid(XElement node);
    public abstract virtual bool get_IsTwoPass();
    public abstract virtual string get_ItemType();
    public abstract virtual void Save(IEnumerable`1<TObject> items);
    public abstract virtual SyncAttempt`1<XElement> SerializeEmpty(TObject item, SyncActionType change, string alias);
    public abstract virtual SyncAttempt`1<XElement> Serialize(TObject item, SyncSerializerOptions options);
    public abstract virtual SyncAttempt`1<TObject> Deserialize(XElement node, SyncSerializerOptions options);
    public abstract virtual SyncAttempt`1<TObject> DeserializeSecondPass(TObject item, XElement node, SyncSerializerOptions options);
    public abstract virtual ChangeType IsCurrent(XElement node, SyncSerializerOptions options);
    public abstract virtual ChangeType IsCurrent(XElement node, XElement current, SyncSerializerOptions options);
    public abstract virtual TObject FindItem(XElement node);
    [NullableContextAttribute("2")]
public abstract virtual TObject FindItem(int id);
    [NullableContextAttribute("2")]
public abstract virtual TObject FindItem(Guid key);
    public abstract virtual TObject FindItem(string alias);
    public abstract virtual void SaveItem(TObject item);
    public abstract virtual void DeleteItem(TObject item);
    public abstract virtual string ItemAlias(TObject item);
    public abstract virtual Guid ItemKey(TObject item);
}
[NullableContextAttribute("1")]
public interface uSync.Core.Serialization.ISyncSerializerBase {
    public string Name { get; }
    public Type objectType { get; }
    public abstract virtual string get_Name();
    public abstract virtual Type get_objectType();
}
public enum uSync.Core.Serialization.SerializerFlags : Enum {
    public int value__;
    public static SerializerFlags None;
    public static SerializerFlags Force;
    public static SerializerFlags OnePass;
    public static SerializerFlags DoNotSave;
    public static SerializerFlags FailMissingParent;
    public static SerializerFlags CreateOnly;
    public static SerializerFlags FirstPast;
    public static SerializerFlags SecondPass;
    public static SerializerFlags LastPass;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("5CB57139-8AF7-4813-95AD-C075D74636C2", "ContentSerializer", "Content")]
public class uSync.Core.Serialization.Serializers.ContentSerializer : ContentSerializerBase`1<IContent> {
    protected IContentService contentService;
    protected IFileService fileService;
    protected IUserService userService;
    public ContentSerializer(IEntityService entityService, ILocalizationService localizationService, IRelationService relationService, IShortStringHelper shortStringHelper, ILogger`1<ContentSerializer> logger, IContentService contentService, IFileService fileService, SyncValueMapperCollection syncMappers, IUserService userService);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IContent item, SyncSerializerOptions options);
    protected virtual XElement SerializeInfo(IContent item, SyncSerializerOptions options);
    protected virtual XElement SerializeTemplate(IContent item, SyncSerializerOptions options);
    private static XElement SerializePublishedStatus(IContent item, SyncSerializerOptions options);
    protected virtual XElement SerializeSchedule(IContent item, SyncSerializerOptions options);
    private XElement SerializerWriterInfo(IContent item, SyncSerializerOptions options);
    protected virtual SyncAttempt`1<IContent> DeserializeCore(XElement node, SyncSerializerOptions options);
    protected virtual uSyncChange DeserializeTemplate(IContent item, XElement node);
    public int DeserializeWriterInfo(IContent item, XElement node, SyncSerializerOptions options);
    public virtual SyncAttempt`1<IContent> DeserializeSecondPass(IContent item, XElement node, SyncSerializerOptions options);
    private List`1<uSyncChange> DeserializeSchedules(IContent item, XElement node, SyncSerializerOptions options);
    private static ContentSchedule GetContentScheduleFromNode(XElement scheduleNode);
    private static ContentSchedule FindSchedule(ContentScheduleCollection currentSchedules, ContentSchedule newSchedule);
    protected virtual uSyncChange HandleTrashedState(IContent item, bool trashed, Guid restoreParentKey);
    protected virtual Attempt`1<string> DoSaveOrPublish(IContent item, XElement node, SyncSerializerOptions options);
    private static List`1<ContentSchedule> GetSchedules(XElement schedulesNode);
    public Attempt`1<string> PublishItem(IContent item, int userId);
    private Attempt`1<string> PublishItem(IContent item, IDictionary`2<string, uSyncContentState> cultures, bool unpublishMissing, int userId);
    private void UnpublishMissingCultures(IContent item, String[] allCultures);
    protected virtual Attempt`1<IContent> CreateItem(string alias, ITreeEntity parent, string itemType);
    [NullableContextAttribute("2")]
public virtual IContent FindItem(int id);
    [NullableContextAttribute("2")]
public virtual IContent FindItem(Guid key);
    protected virtual IContent FindAtRoot(string alias);
    public virtual void Save(IEnumerable`1<IContent> items);
    public virtual void SaveItem(IContent item);
    public void SaveItem(IContent item, int userId);
    public virtual void DeleteItem(IContent item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class uSync.Core.Serialization.Serializers.ContentSerializerBase`1 : SyncTreeSerializerBase`1<TObject> {
    protected UmbracoObjectTypes umbracoObjectType;
    protected SyncValueMapperCollection syncMappers;
    protected IShortStringHelper shortStringHelper;
    protected ILocalizationService localizationService;
    protected IRelationService relationService;
    protected string relationAlias;
    protected String[] dontSerialize;
    public ContentSerializerBase`1(IEntityService entityService, ILocalizationService localizationService, IRelationService relationService, IShortStringHelper shortStringHelper, ILogger`1<ContentSerializerBase`1<TObject>> logger, UmbracoObjectTypes umbracoObjectType, SyncValueMapperCollection syncMappers);
    protected virtual XElement InitializeNode(TObject item, string typeName, SyncSerializerOptions options);
    private static bool IsPartialCultureElement(TObject item, string cultures);
    private static bool IsPartialSegmentElement(TObject item, string segments);
    private static bool IsPartialElement(TObject item, string cultures, string segments);
    protected virtual int GetLevel(TObject item);
    private IEntitySlim GetTrashedParent(TObject item);
    protected virtual XElement SerializeInfo(TObject item, SyncSerializerOptions options);
    private XElement GetTrashedInfo(TObject item);
    protected virtual XElement SerializeProperties(TObject item, SyncSerializerOptions options);
    protected virtual object GetPropertyValue(IPropertyValue value);
    protected virtual SyncAttempt`1<TObject> CanDeserialize(XElement node, SyncSerializerOptions options);
    protected virtual IEnumerable`1<uSyncChange> DeserializeBase(TObject item, XElement node, SyncSerializerOptions options);
    protected IEnumerable`1<uSyncChange> DeserializeName(TObject item, XElement node, SyncSerializerOptions options);
    protected Attempt`2<List`1<uSyncChange>, string> DeserializeProperties(TObject item, XElement node, SyncSerializerOptions options);
    [NullableContextAttribute("2")]
private static bool IsUpdatedValue(object current, object newValue);
    protected uSyncChange HandleSortOrder(TObject item, int sortOrder);
    protected virtual uSyncChange HandleTrashedState(TObject item, bool trashed, Guid restoreParent);
    protected string GetExportValue(object value, IPropertyType propertyType, string culture, string segment);
    protected object GetImportValue(string value, IPropertyType propertyType, string culture, string segment);
    public virtual bool IsValid(XElement node);
    protected virtual Attempt`1<TObject> FindOrCreate(XElement node);
    protected virtual string GetItemBaseType(XElement node);
    public virtual string GetItemPath(TObject item);
    private string GetFriendlyPath(string path);
    public virtual SyncAttempt`1<XElement> SerializeEmpty(TObject item, SyncActionType change, string alias);
    public virtual TObject FindItem(XElement node);
    public virtual TObject FindItem(string alias);
    protected virtual TObject FindItem(string alias, Guid parentKey);
    [NullableContextAttribute("2")]
protected virtual TObject FindItem(string alias, TObject parent);
    protected abstract virtual TObject FindAtRoot(string alias);
    public virtual string ItemAlias(TObject item);
    protected TObject FindParent(XElement node, bool searchByAlias);
    protected TObject FindParentByPath(string path, bool failIfNotExact);
    protected TObject FindByPath(IEnumerable`1<string> folders, bool failIfNotExact);
    protected virtual bool HasParentItem(XElement node);
    private void CleanCaches(int id);
    [NullableContextAttribute("2")]
protected CachedName GetCachedName(int id);
    protected void AddToNameCache(int id, Guid key, string name);
    protected void CleanRelations(TObject item, string relationType);
    protected int GetRelationParentId(TObject item, Guid restoreParentKey, string relationType);
    private List`1<string> GetExcludedProperties(SyncSerializerOptions options);
    private Regex GetExcludedPropertiesPattern(SyncSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[SyncSerializerAttribute("C4E0E6F8-2742-4C7A-9244-321D5592987A", "contentTemplateSerializer", "Content")]
public class uSync.Core.Serialization.Serializers.ContentTemplateSerializer : ContentSerializer {
    private IContentTypeService _contentTypeService;
    public ContentTemplateSerializer(IEntityService entityService, ILocalizationService localizationService, IRelationService relationService, IShortStringHelper shortStringHelper, ILogger`1<ContentTemplateSerializer> logger, IContentService contentService, IFileService fileService, IContentTypeService contentTypeService, SyncValueMapperCollection syncMappers, IUserService userService);
    protected virtual XElement SerializeInfo(IContent item, SyncSerializerOptions options);
    protected virtual SyncAttempt`1<IContent> DeserializeCore(XElement node, SyncSerializerOptions options);
    public virtual IContent FindItem(XElement node);
    [NullableContextAttribute("2")]
public virtual IContent FindItem(Guid key);
    [NullableContextAttribute("2")]
public virtual IContent FindItem(int id);
    protected virtual Attempt`1<IContent> CreateItem(string alias, ITreeEntity parent, string itemType);
    protected virtual Attempt`1<string> DoSaveOrPublish(IContent item, XElement node, SyncSerializerOptions options);
    public virtual void SaveItem(IContent item);
    public virtual void DeleteItem(IContent item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class uSync.Core.Serialization.Serializers.ContentTypeBaseSerializer`1 : SyncContainerSerializerBase`1<TObject> {
    private IDataTypeService _dataTypeService;
    private IContentTypeBaseService`1<TObject> _baseService;
    protected IShortStringHelper shortStringHelper;
    private IAppCache _appCache;
    private IContentTypeService _contentTypeService;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<string> <aliasCache>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<string, PropertyGroupType> _allTabs;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<string> aliasCache { get; private set; }
    protected ContentTypeBaseSerializer`1(IEntityService entityService, ILogger`1<ContentTypeBaseSerializer`1<TObject>> logger, IDataTypeService dataTypeService, IContentTypeBaseService`1<TObject> baseService, UmbracoObjectTypes containerType, IShortStringHelper shortStringHelper, AppCaches appCaches, IContentTypeService contentTypeService);
    [CompilerGeneratedAttribute]
private List`1<string> get_aliasCache();
    [CompilerGeneratedAttribute]
private void set_aliasCache(List`1<string> value);
    protected XElement SerializeBase(TObject item);
    protected XElement SerializeInfo(TObject item);
    protected XElement SerializeTabs(TObject item);
    protected virtual XElement SerializeProperties(TObject item);
    protected void SerializeNewProperty(XElement node, IPropertyType property, string propertyName);
    protected virtual void SerializeExtraProperties(XElement node, TObject item, IPropertyType property);
    protected XElement SerializeStructure(TObject item);
    protected XElement SerializeCompositions(ContentTypeCompositionBase item);
    protected IEnumerable`1<uSyncChange> DeserializeBase(TObject item, XElement node);
    protected SyncAttempt`1<TObject> DeserializedResult(TObject item, List`1<uSyncChange> details, SyncSerializerOptions options);
    protected IEnumerable`1<uSyncChange> DeserializeStructure(TObject item, XElement node);
    protected IEnumerable`1<uSyncChange> DeserializeProperties(TObject item, XElement node, SyncSerializerOptions options);
    private string GetTabAlias(TObject item, XElement tabNode);
    protected string SetSafeAliasValue(TObject item, XElement node, bool ensureSafeValue);
    protected string GetSafeItemAlias(string alias);
    private void EnsureAliasCache();
    protected void ClearAliases();
    protected void RemoveAlias(string alias);
    private void RefreshAliasCache();
    protected void AddAlias(string alias);
    protected uSyncChange DeserializeNewProperty(IPropertyType property, XElement node, string propertyName);
    [NullableContextAttribute("2")]
private static TValue GetPropertyAs(PropertyInfo info, IPropertyType property);
    protected virtual IEnumerable`1<uSyncChange> DeserializeExtraProperties(TObject item, IPropertyType property, XElement node);
    private static List`1<TabInfo<TObject>> LoadTabInfo(XElement node);
    protected IEnumerable`1<uSyncChange> DeserializeTabs(TObject item, XElement node);
    private static PropertyGroup FindTab(TObject item, string alias, string name, Guid key);
    private static PropertyGroupType GetDefaultTabType(XElement node);
    private string GetTabAliasFromTabGroup(XElement tabNode);
    protected void CleanTabAliases(TObject item);
    protected IEnumerable`1<uSyncChange> CleanTabs(TObject item, XElement node, SyncSerializerOptions options);
    protected void CleanFolder(TObject item, XElement node);
    protected IEnumerable`1<uSyncChange> DeserializeCompositions(TObject item, XElement node);
    private void SetFolderFromElement(IContentTypeBase item, XElement folderNode);
    private bool SetMasterFromElement(IContentTypeBase item, XElement masterNode);
    private IPropertyType GetOrCreateProperty(TObject item, Guid key, string alias, Guid definitionKey, string propertyEditorAlias, List`1<string> compositeProperties, Boolean& IsNew);
    [IteratorStateMachineAttribute("uSync.Core.Serialization.Serializers.ContentTypeBaseSerializer`1/<MoveProperties>d__46")]
private static IEnumerable`1<uSyncChange> MoveProperties(IContentTypeBase item, IDictionary`2<string, string> moves);
    private List`1<uSyncChange> RemoveProperties(IContentTypeBase item, XElement properties);
    public virtual ChangeType IsCurrent(XElement node, SyncSerializerOptions options);
    private void InsertMissingProperties(XElement node, string propertyName);
    private void AddStructureSort(XElement node);
    protected virtual bool PropertyExistsOnComposite(TObject item, string alias, List`1<string> compositeProperties);
    [NullableContextAttribute("2")]
public virtual TObject FindItem(int id);
    [NullableContextAttribute("2")]
public virtual TObject FindItem(Guid key);
    public virtual TObject FindItem(string alias);
    [NullableContextAttribute("2")]
protected virtual EntityContainer FindContainer(Guid key);
    protected virtual IEnumerable`1<EntityContainer> FindContainers(string folder, int level);
    protected virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> CreateContainer(int parentId, string name);
    public virtual void SaveItem(TObject item);
    public virtual void Save(IEnumerable`1<TObject> items);
    protected virtual void SaveContainer(EntityContainer container);
    public virtual void DeleteItem(TObject item);
    public virtual string ItemAlias(TObject item);
    protected virtual IEnumerable`1<EntityContainer> GetContainers(TObject item);
    public bool TabClashesWithExisting(TObject item, string alias, PropertyGroupType tabType);
    public void EnsureAllTabsCacheLoaded(TObject item);
    public void ClearAllTabsCache();
    [CompilerGeneratedAttribute]
private List`1<string> <EnsureAliasCache>b__25_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private List`1<string> <RefreshAliasCache>b__28_0();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private string <CleanTabs>b__40_0(XElement x);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("B3F7F247-6077-406D-8480-DB1004C8211C", "ContentTypeSerializer", "ContentType")]
public class uSync.Core.Serialization.Serializers.ContentTypeSerializer : ContentTypeBaseSerializer`1<IContentType> {
    private IContentTypeService _contentTypeService;
    private IFileService _fileService;
    private uSyncCapabilityChecker _capabilities;
    private string _historyCleanupName;
    private String[] _historyCleanupProperties;
    public ContentTypeSerializer(IEntityService entityService, ILogger`1<ContentTypeSerializer> logger, IDataTypeService dataTypeService, IContentTypeService contentTypeService, IFileService fileService, IShortStringHelper shortStringHelper, AppCaches appCaches, uSyncCapabilityChecker uSyncCapabilityChecker);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IContentType item, SyncSerializerOptions options);
    protected virtual void SerializeExtraProperties(XElement node, IContentType item, IPropertyType property);
    private static XElement SerializeTemplates(IContentType item);
    protected virtual SyncAttempt`1<IContentType> DeserializeCore(XElement node, SyncSerializerOptions options);
    protected virtual IEnumerable`1<uSyncChange> DeserializeExtraProperties(IContentType item, IPropertyType property, XElement node);
    public virtual SyncAttempt`1<IContentType> DeserializeSecondPass(IContentType item, XElement node, SyncSerializerOptions options);
    private List`1<uSyncChange> DeserializeContentTypeProperties(IContentType item, XElement node);
    private List`1<uSyncChange> DeserializeTemplates(IContentType item, XElement node, SyncSerializerOptions options);
    protected virtual Attempt`1<IContentType> CreateItem(string alias, ITreeEntity parent, string itemType);
    protected virtual void SaveContainer(EntityContainer container);
    private XElement SerializeCleanupHistory(IContentType item);
    private List`1<uSyncChange> DeserializeCleanupHistory(IContentType item, XElement node);
    protected virtual XElement CleanseNode(XElement node);
    protected static TValue GetPropertyAs(PropertyInfo info, object property);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("C06E92B7-7440-49B7-B4D2-AF2BF4F3D75D", "DataType Serializer", "DataType")]
public class uSync.Core.Serialization.Serializers.DataTypeSerializer : SyncContainerSerializerBase`1<IDataType> {
    private IDataTypeService _dataTypeService;
    private DataEditorCollection _dataEditors;
    private ConfigurationSerializerCollection _configurationSerializers;
    private PropertyEditorCollection _propertyEditors;
    private IConfigurationEditorJsonSerializer _jsonSerializer;
    public DataTypeSerializer(IEntityService entityService, ILogger`1<DataTypeSerializer> logger, IDataTypeService dataTypeService, DataEditorCollection dataEditors, ConfigurationSerializerCollection configurationSerializers, PropertyEditorCollection propertyEditors, IConfigurationEditorJsonSerializer jsonSerializer);
    protected virtual SyncAttempt`1<IDataType> ProcessDelete(Guid key, string alias, SerializerFlags flags);
    protected virtual SyncAttempt`1<IDataType> DeserializeCore(XElement node, SyncSerializerOptions options);
    [NullableContextAttribute("2")]
private ValueStorageType GetEditorValueStorageType(IDataEditor editor);
    [NullableContextAttribute("2")]
private uSyncChange SetFolderFromElement(IDataType item, XElement folderNode);
    private List`1<uSyncChange> DeserializeConfiguration(IDataType item, XElement node);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IDataType item, SyncSerializerOptions options);
    protected virtual IEnumerable`1<EntityContainer> GetContainers(IDataType item);
    private XElement SerializeConfiguration(IDataType item);
    private static object TryGetConfigurationObject(IDataType item);
    protected virtual Attempt`1<IDataType> CreateItem(string alias, ITreeEntity parent, string itemType);
    private IDataEditor FindDataEditor(string editorAlias);
    protected virtual string GetItemBaseType(XElement node);
    [NullableContextAttribute("2")]
public virtual IDataType FindItem(int id);
    [NullableContextAttribute("2")]
public virtual IDataType FindItem(Guid key);
    public virtual IDataType FindItem(string alias);
    [NullableContextAttribute("2")]
protected virtual EntityContainer FindContainer(Guid key);
    protected virtual IEnumerable`1<EntityContainer> FindContainers(string folder, int level);
    protected virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> CreateContainer(int parentId, string name);
    public virtual void SaveItem(IDataType item);
    public virtual void Save(IEnumerable`1<IDataType> items);
    protected virtual void SaveContainer(EntityContainer container);
    public virtual void DeleteItem(IDataType item);
    public virtual string ItemAlias(IDataType item);
    private static bool ShouldDesterilizeConfig(string itemName, string editorAlias, SyncSerializerOptions options);
    private static string ToPropertyEditorUiAlias(string editorAlias);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("4D18F4C3-6EBC-4AAD-8D20-6353BDBBD484", "Dictionary Serializer", "Dictionary")]
public class uSync.Core.Serialization.Serializers.DictionaryItemSerializer : SyncSerializerBase`1<IDictionaryItem> {
    private ILocalizationService _localizationService;
    public DictionaryItemSerializer(IEntityService entityService, ILogger`1<DictionaryItemSerializer> logger, ILocalizationService localizationService);
    protected virtual SyncAttempt`1<IDictionaryItem> DeserializeCore(XElement node, SyncSerializerOptions options);
    private List`1<uSyncChange> DeserializeTranslations(IDictionaryItem item, XElement node, SyncSerializerOptions options);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IDictionaryItem item, SyncSerializerOptions options);
    [NullableContextAttribute("2")]
public virtual IDictionaryItem FindItem(int id);
    [NullableContextAttribute("2")]
public virtual IDictionaryItem FindItem(Guid key);
    public virtual IDictionaryItem FindItem(string alias);
    private int GetLevel(IDictionaryItem item, int level);
    public virtual void SaveItem(IDictionaryItem item);
    public virtual void DeleteItem(IDictionaryItem item);
    public virtual string ItemAlias(IDictionaryItem item);
    protected virtual XElement CleanseNode(XElement node);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("9A5C253C-71FA-4FC0-9B7C-9D0522AAE880", "Domain Serializer", "Domain")]
public class uSync.Core.Serialization.Serializers.DomainSerializer : SyncSerializerBase`1<IDomain> {
    private IDomainService _domainService;
    private IContentService _contentService;
    private ILocalizationService _localizationService;
    private uSyncCapabilityChecker _capabilityChecker;
    private static string _sortablePropertyName;
    public DomainSerializer(IEntityService entityService, ILogger`1<DomainSerializer> logger, IDomainService domainService, IContentService contentService, ILocalizationService localizationService, uSyncCapabilityChecker capabilityChecker);
    protected virtual SyncAttempt`1<IDomain> DeserializeCore(XElement node, SyncSerializerOptions options);
    private IDomain FindOrCreate(XElement node);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IDomain item, SyncSerializerOptions options);
    private static int GetSortableValue(IDomain item);
    private static void SetSortableValue(IDomain item, int sortOrder);
    protected virtual XElement CleanseNode(XElement node);
    [NullableContextAttribute("2")]
public virtual IDomain FindItem(int id);
    [NullableContextAttribute("2")]
public virtual IDomain FindItem(Guid key);
    public virtual IDomain FindItem(string alias);
    protected virtual string GetItemPath(IContent item);
    private string GetItemPath(IEntitySlim item);
    private IContent FindByPath(IEnumerable`1<string> folders);
    [NullableContextAttribute("2")]
private IContent FindContentItem(string alias, IContent parent);
    public virtual void SaveItem(IDomain item);
    public virtual void DeleteItem(IDomain item);
    public virtual string ItemAlias(IDomain item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("8D2381C3-A0F8-43A2-8563-6F12F9F48023", "Language Serializer", "Language")]
public class uSync.Core.Serialization.Serializers.LanguageSerializer : SyncSerializerBase`1<ILanguage> {
    private ILocalizationService _localizationService;
    public LanguageSerializer(IEntityService entityService, ILogger`1<LanguageSerializer> logger, ILocalizationService localizationService);
    private static CultureInfo GetCulture(string isoCode);
    protected virtual SyncAttempt`1<ILanguage> DeserializeCore(XElement node, SyncSerializerOptions options);
    public virtual SyncAttempt`1<ILanguage> DeserializeSecondPass(ILanguage item, XElement node, SyncSerializerOptions options);
    private static string GetFallbackLanguageIsoCode(ILanguage item, XElement node);
    protected virtual XElement InitializeBaseNode(ILanguage item, string alias, int level);
    protected virtual SyncAttempt`1<XElement> SerializeCore(ILanguage item, SyncSerializerOptions options);
    public virtual bool IsValid(XElement node);
    public virtual ILanguage FindItem(string alias);
    [NullableContextAttribute("2")]
public virtual ILanguage FindItem(int id);
    [NullableContextAttribute("2")]
public virtual ILanguage FindItem(Guid key);
    public virtual void SaveItem(ILanguage item);
    public virtual void DeleteItem(ILanguage item);
    protected virtual XElement CleanseNode(XElement node);
    public virtual string ItemAlias(ILanguage item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("B4060604-CF5A-46D6-8F00-257579A658E6", "MediaSerializer", "Media")]
public class uSync.Core.Serialization.Serializers.MediaSerializer : ContentSerializerBase`1<IMedia> {
    private IMediaService _mediaService;
    public MediaSerializer(IEntityService entityService, ILocalizationService localizationService, IRelationService relationService, IShortStringHelper shortStringHelper, ILogger`1<MediaSerializer> logger, IMediaService mediaService, SyncValueMapperCollection syncMappers);
    protected virtual SyncAttempt`1<IMedia> DeserializeCore(XElement node, SyncSerializerOptions options);
    protected virtual uSyncChange HandleTrashedState(IMedia item, bool trashed, Guid restoreParentKey);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IMedia item, SyncSerializerOptions options);
    private XElement SerializeFileHash(IMedia item);
    private static string GetFilePath(string value);
    protected virtual Attempt`1<IMedia> CreateItem(string alias, ITreeEntity parent, string itemType);
    [NullableContextAttribute("2")]
public virtual IMedia FindItem(int id);
    [NullableContextAttribute("2")]
public virtual IMedia FindItem(Guid key);
    protected virtual IMedia FindAtRoot(string alias);
    public virtual void Save(IEnumerable`1<IMedia> items);
    public virtual void SaveItem(IMedia item);
    public virtual void DeleteItem(IMedia item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("B3073706-5037-4FBD-A015-DF38D61F2934", "MediaTypeSerializer", "MediaType")]
public class uSync.Core.Serialization.Serializers.MediaTypeSerializer : ContentTypeBaseSerializer`1<IMediaType> {
    private IMediaTypeService _mediaTypeService;
    public MediaTypeSerializer(IEntityService entityService, ILogger`1<MediaTypeSerializer> logger, IDataTypeService dataTypeService, IMediaTypeService mediaTypeService, IShortStringHelper shortStringHelper, AppCaches appCaches, IContentTypeService contentTypeService);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IMediaType item, SyncSerializerOptions options);
    protected virtual SyncAttempt`1<IMediaType> DeserializeCore(XElement node, SyncSerializerOptions options);
    public virtual SyncAttempt`1<IMediaType> DeserializeSecondPass(IMediaType item, XElement node, SyncSerializerOptions options);
    protected virtual Attempt`1<IMediaType> CreateItem(string alias, ITreeEntity parent, string itemType);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("F45B5C7B-C206-4971-858B-6D349E153ACE", "MemberTypeSerializer", "MemberType")]
public class uSync.Core.Serialization.Serializers.MemberTypeSerializer : ContentTypeBaseSerializer`1<IMemberType> {
    private IMemberTypeService _memberTypeService;
    private static Dictionary`2<string, string> _builtInProperties;
    public MemberTypeSerializer(IEntityService entityService, ILogger`1<MemberTypeSerializer> logger, IDataTypeService dataTypeService, IMemberTypeService memberTypeService, IShortStringHelper shortStringHelper, AppCaches appCaches, IContentTypeService contentTypeService);
    private static MemberTypeSerializer();
    protected virtual SyncAttempt`1<XElement> SerializeCore(IMemberType item, SyncSerializerOptions options);
    protected virtual void SerializeExtraProperties(XElement node, IMemberType item, IPropertyType property);
    protected virtual XElement SerializeProperties(IMemberType item);
    protected virtual SyncAttempt`1<IMemberType> DeserializeCore(XElement node, SyncSerializerOptions options);
    public virtual SyncAttempt`1<IMemberType> DeserializeSecondPass(IMemberType item, XElement node, SyncSerializerOptions options);
    protected virtual IEnumerable`1<uSyncChange> DeserializeExtraProperties(IMemberType item, IPropertyType property, XElement node);
    protected virtual Attempt`1<IMemberType> CreateItem(string alias, ITreeEntity parent, string extra);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("19FA7E6D-3B88-44AA-AED4-94634C90A5B4", "RelationTypeSerializer", "RelationType")]
public class uSync.Core.Serialization.Serializers.RelationTypeSerializer : SyncSerializerBase`1<IRelationType> {
    private IRelationService _relationService;
    public RelationTypeSerializer(IEntityService entityService, IRelationService relationService, ILogger`1<RelationTypeSerializer> logger);
    protected virtual SyncAttempt`1<IRelationType> DeserializeCore(XElement node, SyncSerializerOptions options);
    private List`1<uSyncChange> DeserializeRelations(XElement node, IRelationType relationType, SyncSerializerOptions options);
    public virtual bool IsValid(XElement node);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IRelationType item, SyncSerializerOptions options);
    private static RelationType CreateRelation(string name, string alias, bool isBidirectional, Nullable`1<Guid> parent, Nullable`1<Guid> child, bool isDependency);
    private static Nullable`1<Guid> GetGuidValue(IRelationType item, string propertyName);
    private static void SetGuidValue(object item, string propertyName, Nullable`1<Guid> value);
    private XElement SerializeRelations(IRelationType item);
    public virtual void DeleteItem(IRelationType item);
    [NullableContextAttribute("2")]
public virtual IRelationType FindItem(int id);
    [NullableContextAttribute("2")]
public virtual IRelationType FindItem(Guid key);
    public virtual IRelationType FindItem(string alias);
    public virtual string ItemAlias(IRelationType item);
    public virtual void SaveItem(IRelationType item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("D0E0769D-CCAE-47B4-AD34-4182C587B08A", "Template Serializer", "Template")]
public class uSync.Core.Serialization.Serializers.TemplateSerializer : SyncSerializerBase`1<ITemplate> {
    private IShortStringHelper _shortStringHelper;
    [NullableAttribute("2")]
private IFileSystem _viewFileSystem;
    private ITemplateService _templateService;
    private IUserIdKeyResolver _userIdKeyResolver;
    private uSyncCapabilityChecker _capabilityChecker;
    private IConfiguration _configuration;
    [ActivatorUtilitiesConstructorAttribute]
public TemplateSerializer(IEntityService entityService, ILogger`1<TemplateSerializer> logger, IShortStringHelper shortStringHelper, FileSystems fileSystems, IConfiguration configuration, uSyncCapabilityChecker capabilityChecker, ITemplateService templateService, IUserIdKeyResolver userIdKeyResolver);
    protected virtual SyncAttempt`1<ITemplate> ProcessDelete(Guid key, string alias, SerializerFlags flags);
    protected virtual SyncAttempt`1<ITemplate> DeserializeCore(XElement node, SyncSerializerOptions options);
    private bool ShouldGetContentFromNode(XElement node, SyncSerializerOptions options);
    public static string GetContentFromConfig(XElement node);
    public string GetContentFromFile(string templatePath);
    public virtual SyncAttempt`1<ITemplate> DeserializeSecondPass(ITemplate item, XElement node, SyncSerializerOptions options);
    protected virtual SyncAttempt`1<XElement> SerializeCore(ITemplate item, SyncSerializerOptions options);
    private static XElement SerializeContent(ITemplate item);
    private int CalculateLevel(ITemplate item);
    [NullableContextAttribute("2")]
public virtual ITemplate FindItem(int id);
    public virtual ITemplate FindItem(string alias);
    [NullableContextAttribute("2")]
public virtual ITemplate FindItem(Guid key);
    public virtual void SaveItem(ITemplate item);
    public virtual void Save(IEnumerable`1<ITemplate> items);
    public virtual void DeleteItem(ITemplate item);
    public virtual string ItemAlias(ITemplate item);
    protected virtual XElement CleanseNode(XElement node);
    private string ViewPath(string alias);
    private bool ViewsAreCompiled(SyncSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[SyncSerializerAttribute("ED18C89D-A9FF-4217-9F8E-6898CA63ED81", "Webhook Serializer", "Webhook")]
public class uSync.Core.Serialization.Serializers.WebhookSerializer : SyncSerializerBase`1<IWebhook> {
    private IWebhookService _webhookService;
    public WebhookSerializer(IEntityService entityService, ILogger`1<SyncSerializerBase`1<IWebhook>> logger, IWebhookService webhookService);
    public virtual void DeleteItem(IWebhook item);
    [NullableContextAttribute("2")]
public virtual IWebhook FindItem(int id);
    [NullableContextAttribute("2")]
public virtual IWebhook FindItem(Guid key);
    public virtual IWebhook FindItem(string alias);
    public virtual string ItemAlias(IWebhook item);
    public virtual void SaveItem(IWebhook item);
    protected virtual SyncAttempt`1<IWebhook> DeserializeCore(XElement node, SyncSerializerOptions options);
    private static List`1<uSyncChange> DeserializeContentKeys(IWebhook item, XElement node);
    private static List`1<uSyncChange> DeserializeEvents(IWebhook item, XElement node);
    private static List`1<uSyncChange> DeserializeHeaders(IWebhook item, XElement node);
    protected virtual SyncAttempt`1<XElement> SerializeCore(IWebhook item, SyncSerializerOptions options);
    private static XElement SerializeContentKeys(IWebhook item);
    private static XElement SerializeEvents(IWebhook item);
    private static XElement SerializeHeaders(IWebhook item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class uSync.Core.Serialization.SyncContainerSerializerBase`1 : SyncTreeSerializerBase`1<TObject> {
    protected UmbracoObjectTypes containerType;
    private ConcurrentDictionary`2<int, XElement> _folderCache;
    public SyncContainerSerializerBase`1(IEntityService entityService, ILogger`1<SyncContainerSerializerBase`1<TObject>> logger, UmbracoObjectTypes containerType);
    protected virtual SyncAttempt`1<TObject> ProcessDelete(Guid key, string alias, SerializerFlags flags);
    protected virtual Attempt`1<TObject> FindOrCreate(XElement node);
    private EntityContainer TryCreateContainer(string name, ITreeEntity parent);
    protected XElement GetFolderNode(TObject item);
    protected abstract virtual IEnumerable`1<EntityContainer> GetContainers(TObject item);
    protected XElement GetFolderNode(IEnumerable`1<EntityContainer> containers);
    [NullableContextAttribute("2")]
protected abstract virtual EntityContainer FindContainer(Guid key);
    protected abstract virtual IEnumerable`1<EntityContainer> FindContainers(string folder, int level);
    protected abstract virtual Attempt`1<OperationResult`2<OperationResultType, EntityContainer>> CreateContainer(int parentId, string name);
    protected virtual EntityContainer FindFolder(Guid key, string path);
    protected abstract virtual void SaveContainer(EntityContainer container);
    private void ClearFolderCache();
    public sealed virtual void InitializeCache();
    public sealed virtual void DisposeCache();
}
[ExtensionAttribute]
public static class uSync.Core.Serialization.SyncOptionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool DeleteItems(SyncSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Serialization.SyncSerializerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Priority>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTwoPass>k__BackingField;
    public string Name { get; private set; }
    public Guid Id { get; private set; }
    public string ItemType { get; private set; }
    public int Priority { get; public set; }
    public bool IsTwoPass { get; public set; }
    public SyncSerializerAttribute(string id, string name, string itemType);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_ItemType();
    [CompilerGeneratedAttribute]
private void set_ItemType(string value);
    [CompilerGeneratedAttribute]
public int get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(int value);
    [CompilerGeneratedAttribute]
public bool get_IsTwoPass();
    [CompilerGeneratedAttribute]
public void set_IsTwoPass(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class uSync.Core.Serialization.SyncSerializerBase`1 : SyncSerializerRoot`1<TObject> {
    protected IEntityService entityService;
    protected SyncSerializerBase`1(IEntityService entityService, ILogger`1<SyncSerializerBase`1<TObject>> logger);
    public virtual Guid ItemKey(TObject item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Serialization.SyncSerializerCollection : BuilderCollectionBase`1<ISyncSerializerBase> {
    public SyncSerializerCollection(Func`1<IEnumerable`1<ISyncSerializerBase>> items);
    public IEnumerable`1<ISyncSerializer`1<TObject>> GetSerializers();
    [NullableContextAttribute("2")]
public ISyncSerializer`1<TObject> GetSerializer();
    public ISyncSerializer`1<TObject> GetSerializer(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Serialization.SyncSerializerCollectionBuilder : WeightedCollectionBuilderBase`3<SyncSerializerCollectionBuilder, SyncSerializerCollection, ISyncSerializerBase> {
    protected SyncSerializerCollectionBuilder This { get; }
    protected virtual SyncSerializerCollectionBuilder get_This();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Serialization.SyncSerializerOptions : object {
    public int UserId;
    [CompilerGeneratedAttribute]
private bool <CreateOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private SerializerFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Settings>k__BackingField;
    public bool CreateOnly { get; public set; }
    public SerializerFlags Flags { get; internal set; }
    public Dictionary`2<string, string> Settings { get; internal set; }
    public bool Force { get; }
    public bool FailOnMissingParent { get; }
    public bool OnePass { get; }
    public SyncSerializerOptions(SerializerFlags flags);
    public SyncSerializerOptions(Dictionary`2<string, string> settings);
    public SyncSerializerOptions(SerializerFlags flags, Dictionary`2<string, string> settings);
    public SyncSerializerOptions(SerializerFlags flags, Dictionary`2<string, string> settings, int userId);
    [CompilerGeneratedAttribute]
public bool get_CreateOnly();
    [CompilerGeneratedAttribute]
public void set_CreateOnly(bool value);
    [CompilerGeneratedAttribute]
public SerializerFlags get_Flags();
    [CompilerGeneratedAttribute]
internal void set_Flags(SerializerFlags value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Settings();
    [CompilerGeneratedAttribute]
internal void set_Settings(Dictionary`2<string, string> value);
    public bool get_Force();
    public bool get_FailOnMissingParent();
    public bool get_OnePass();
    public TResult GetSetting(string key, TResult defaultValue);
    public IList`1<string> GetCultures();
    public bool FailOnWarnings();
    public IList`1<string> GetDeserializedCultures(XElement node);
    public IList`1<string> GetSegments();
    public void MergeSettings(Dictionary`2<string, string> newSettings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class uSync.Core.Serialization.SyncSerializerRoot`1 : object {
    protected ILogger`1<SyncSerializerRoot`1<TObject>> logger;
    protected Type serializerType;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTwoPass>k__BackingField;
    public Guid Id { get; private set; }
    public string Name { get; private set; }
    public string ItemType { get; public set; }
    public Type objectType { get; }
    public bool IsTwoPass { get; private set; }
    protected SyncSerializerRoot`1(ILogger`1<SyncSerializerRoot`1<TObject>> logger);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ItemType();
    [CompilerGeneratedAttribute]
public void set_ItemType(string value);
    public sealed virtual Type get_objectType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsTwoPass();
    [CompilerGeneratedAttribute]
private void set_IsTwoPass(bool value);
    public sealed virtual SyncAttempt`1<XElement> Serialize(TObject item, SyncSerializerOptions options);
    protected virtual SyncAttempt`1<TObject> CanDeserialize(XElement node, SyncSerializerOptions options);
    public sealed virtual SyncAttempt`1<TObject> Deserialize(XElement node, SyncSerializerOptions options);
    public virtual SyncAttempt`1<TObject> DeserializeSecondPass(TObject item, XElement node, SyncSerializerOptions options);
    protected abstract virtual SyncAttempt`1<XElement> SerializeCore(TObject item, SyncSerializerOptions options);
    protected abstract virtual SyncAttempt`1<TObject> DeserializeCore(XElement node, SyncSerializerOptions options);
    protected virtual XElement InitializeBaseNode(TObject item, string alias, int level);
    public virtual bool IsValid(XElement node);
    public bool IsValidOrEmpty(XElement node);
    protected SyncAttempt`1<TObject> ProcessAction(XElement node, SyncSerializerOptions options);
    protected virtual SyncAttempt`1<TObject> ProcessDelete(Guid key, string alias, SerializerFlags flags);
    protected virtual SyncAttempt`1<TObject> ProcessRename(Guid key, string alias, SerializerFlags flags);
    public virtual ChangeType IsCurrent(XElement node, SyncSerializerOptions options);
    public virtual ChangeType IsCurrent(XElement node, XElement current, SyncSerializerOptions options);
    private static ChangeType CalculateEmptyChange(XElement node, XElement current);
    public virtual SyncAttempt`1<XElement> SerializeEmpty(TObject item, SyncActionType change, string alias);
    private string MakeHash(XElement node);
    protected virtual XElement CleanseNode(XElement node);
    protected ValueTuple`2<Guid, string> FindKeyAndAlias(XElement node);
    [NullableContextAttribute("2")]
public abstract virtual TObject FindItem(int id);
    [NullableContextAttribute("2")]
public abstract virtual TObject FindItem(Guid key);
    public abstract virtual TObject FindItem(string alias);
    public abstract virtual void SaveItem(TObject item);
    public abstract virtual void DeleteItem(TObject item);
    public abstract virtual string ItemAlias(TObject item);
    public abstract virtual Guid ItemKey(TObject item);
    public virtual void Save(IEnumerable`1<TObject> items);
    public virtual TObject FindItem(XElement node);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class uSync.Core.Serialization.SyncTreeSerializerBase`1 : SyncSerializerBase`1<TObject> {
    protected SyncTreeSerializerBase`1(IEntityService entityService, ILogger`1<SyncTreeSerializerBase`1<TObject>> logger);
    protected abstract virtual Attempt`1<TObject> CreateItem(string alias, ITreeEntity parent, string itemType);
    protected virtual string GetItemBaseType(XElement node);
    protected abstract virtual Attempt`1<TObject> FindOrCreate(XElement node);
    protected TObject FindItem(Guid key, string alias);
    public virtual ChangeType IsCurrent(XElement node, SyncSerializerOptions options);
    protected virtual bool HasParentItem(XElement node);
    protected string CalculateNodePath(TObject item, TObject parent);
    protected int CalculateNodeLevel(TObject item, TObject parent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class uSync.Core.StringExtensions : object {
    private static String[] _badNames;
    private static Char[] _base32Table;
    private static StringExtensions();
    [ExtensionAttribute]
public static string ToAppSafeFileName(string value);
    [ExtensionAttribute]
public static string ToShortKeyString(Guid guid, int length);
    [ExtensionAttribute]
public static int GetDeterministicHashCode(string str);
    [ExtensionAttribute]
public static bool IsObjectNullOrEmptyString(object value);
}
[NullableContextAttribute("1")]
public interface uSync.Core.Sync.ISyncItemManager {
    public String[] EntityTypes { get; }
    public String[] Trees { get; }
    public abstract virtual SyncEntityInfo GetSyncInfo(string entityType);
    public abstract virtual SyncTreeType GetTreeType(SyncTreeItem treeItem);
    public abstract virtual String[] get_EntityTypes();
    public abstract virtual String[] get_Trees();
    public abstract virtual Task`1<IEnumerable`1<SyncItem>> GetItemsAsync(SyncItem item);
    public abstract virtual Task`1<SyncLocalItem> GetEntityAsync(SyncTreeItem treeItem);
    public abstract virtual Task`1<SyncEntity> GetSyncEntityAsync(string key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiredMemberAttribute]
public class uSync.Core.Sync.SyncEntity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [RequiredMemberAttribute]
public string Name { get; public set; }
    [NullableAttribute("2")]
public string Icon { get; public set; }
    [RequiredMemberAttribute]
public Udi Udi { get; public set; }
    public string EntityType { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Icon();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Icon(string value);
    [CompilerGeneratedAttribute]
public Udi get_Udi();
    [CompilerGeneratedAttribute]
public void set_Udi(Udi value);
    public string get_EntityType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class uSync.Core.Sync.SyncEntityInfo : object {
    [CompilerGeneratedAttribute]
private string <SectionAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PickerView>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DoNotPickContainers>k__BackingField;
    public string SectionAlias { get; public set; }
    public string TreeAlias { get; public set; }
    public string PickerView { get; public set; }
    public bool DoNotPickContainers { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SectionAlias();
    [CompilerGeneratedAttribute]
public void set_SectionAlias(string value);
    [CompilerGeneratedAttribute]
public string get_TreeAlias();
    [CompilerGeneratedAttribute]
public void set_TreeAlias(string value);
    [CompilerGeneratedAttribute]
public string get_PickerView();
    [CompilerGeneratedAttribute]
public void set_PickerView(string value);
    [CompilerGeneratedAttribute]
public bool get_DoNotPickContainers();
    [CompilerGeneratedAttribute]
public void set_DoNotPickContainers(bool value);
}
public class uSync.Core.Sync.SyncItem : SyncEntity {
    [CompilerGeneratedAttribute]
private DependencyFlags <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeType <Change>k__BackingField;
    public DependencyFlags Flags { get; public set; }
    public ChangeType Change { get; public set; }
    [ObsoleteAttribute("Constructors of types with required members are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RequiredMembers")]
public SyncItem(DependencyFlags flags);
    [CompilerGeneratedAttribute]
public DependencyFlags get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(DependencyFlags value);
    [CompilerGeneratedAttribute]
public ChangeType get_Change();
    [CompilerGeneratedAttribute]
public void set_Change(ChangeType value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Sync.SyncItemManagerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TreeAlias>k__BackingField;
    public string EntityType { get; private set; }
    [NullableAttribute("2")]
public string TreeAlias { get; private set; }
    public SyncItemManagerAttribute(string entityType);
    public SyncItemManagerAttribute(string entityType, string treeAlias);
    [CompilerGeneratedAttribute]
public string get_EntityType();
    [CompilerGeneratedAttribute]
private void set_EntityType(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TreeAlias();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_TreeAlias(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class uSync.Core.Sync.SyncItemManagerBase : object {
    [CompilerGeneratedAttribute]
private String[] <Trees>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <EntityTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowTreeOptions>k__BackingField;
    public String[] Trees { get; }
    public String[] EntityTypes { get; }
    protected string EntityType { get; }
    public bool ShowTreeOptions { get; }
    [CompilerGeneratedAttribute]
public virtual String[] get_Trees();
    [CompilerGeneratedAttribute]
public virtual String[] get_EntityTypes();
    protected string get_EntityType();
    [CompilerGeneratedAttribute]
public virtual bool get_ShowTreeOptions();
    public virtual SyncTreeType GetTreeType(SyncTreeItem treeItem);
    protected virtual SyncLocalItem GetRootItem(SyncTreeItem treeItem);
    protected abstract virtual Task`1<IEnumerable`1<SyncItem>> GetDescendantsAsync(SyncItem item, DependencyFlags flags);
    [AsyncStateMachineAttribute("uSync.Core.Sync.SyncItemManagerBase/<GetItemsAsync>d__15")]
public virtual Task`1<IEnumerable`1<SyncItem>> GetItemsAsync(SyncItem item);
    public virtual SyncEntityInfo GetSyncInfo(string entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class uSync.Core.Sync.SyncItemManagerIndexBase`1 : SyncItemManagerBase {
    protected abstract virtual Task`1<SyncLocalItem> GetLocalEntityAsync(TIndexType id);
    [AsyncStateMachineAttribute("uSync.Core.Sync.SyncItemManagerIndexBase`1/<GetEntityAsync>d__1")]
public virtual Task`1<SyncLocalItem> GetEntityAsync(SyncTreeItem treeItem);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class uSync.Core.Sync.SyncLocalItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Udi <Udi>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityType>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, SyncVariantInfo> <AllVariants>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasChildren>k__BackingField;
    public string Id { get; public set; }
    public string Name { get; public set; }
    public Udi Udi { get; public set; }
    public string EntityType { get; public set; }
    [NullableAttribute("1")]
public Dictionary`2<string, SyncVariantInfo> AllVariants { get; public set; }
    public bool RequiresFiles { get; public set; }
    public bool HasChildren { get; public set; }
    [NullableContextAttribute("1")]
public SyncLocalItem(string id);
    public SyncLocalItem(int id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Udi get_Udi();
    [CompilerGeneratedAttribute]
public void set_Udi(Udi value);
    [CompilerGeneratedAttribute]
public string get_EntityType();
    [CompilerGeneratedAttribute]
public void set_EntityType(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Dictionary`2<string, SyncVariantInfo> get_AllVariants();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AllVariants(Dictionary`2<string, SyncVariantInfo> value);
    [CompilerGeneratedAttribute]
public bool get_RequiresFiles();
    [CompilerGeneratedAttribute]
public void set_RequiresFiles(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasChildren();
    [CompilerGeneratedAttribute]
public void set_HasChildren(bool value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class uSync.Core.Sync.SyncTreeItem : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TreeAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SectionAlias>k__BackingField;
    [CompilerGeneratedAttribute]
private FormCollection <QueryStrings>k__BackingField;
    public string Id { get; public set; }
    public string TreeAlias { get; public set; }
    public string SectionAlias { get; public set; }
    public FormCollection QueryStrings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_TreeAlias();
    [CompilerGeneratedAttribute]
public void set_TreeAlias(string value);
    [CompilerGeneratedAttribute]
public string get_SectionAlias();
    [CompilerGeneratedAttribute]
public void set_SectionAlias(string value);
    [CompilerGeneratedAttribute]
public FormCollection get_QueryStrings();
    [CompilerGeneratedAttribute]
public void set_QueryStrings(FormCollection value);
}
[ExtensionAttribute]
public static class uSync.Core.Sync.SyncTreeItemExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsRoot(SyncTreeItem item);
}
public enum uSync.Core.Sync.SyncTreeType : Enum {
    public int value__;
    public static SyncTreeType None;
    public static SyncTreeType Settings;
    public static SyncTreeType Content;
    public static SyncTreeType Media;
    public static SyncTreeType File;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class uSync.Core.Sync.SyncVariantInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Published>k__BackingField;
    public string Name { get; public set; }
    public bool Published { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Published();
    [CompilerGeneratedAttribute]
public void set_Published(bool value);
}
public enum uSync.Core.SyncActionType : Enum {
    public int value__;
    public static SyncActionType None;
    public static SyncActionType Rename;
    public static SyncActionType Delete;
    public static SyncActionType Clean;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.SyncItemFactory : object {
    private SyncTrackerCollection syncTrackers;
    private SyncDependencyCollection syncCheckers;
    private SyncEntityCache entityCache;
    private SyncSerializerCollection syncSerializers;
    public SyncEntityCache EntityCache { get; }
    public SyncItemFactory(SyncEntityCache entityCache, SyncSerializerCollection syncSerializers, SyncTrackerCollection syncTrackers, SyncDependencyCollection syncCheckers);
    public sealed virtual SyncEntityCache get_EntityCache();
    public sealed virtual IEnumerable`1<ISyncSerializer`1<TObject>> GetSerializers();
    public sealed virtual ISyncSerializer`1<TObject> GetSerializer(string name);
    public sealed virtual IEnumerable`1<ISyncTracker`1<TObject>> GetTrackers();
    public sealed virtual IEnumerable`1<uSyncChange> GetChanges(XElement node, SyncSerializerOptions options);
    public sealed virtual IEnumerable`1<uSyncChange> GetChanges(XElement node, XElement currentNode, SyncSerializerOptions options);
    public sealed virtual IEnumerable`1<ISyncDependencyChecker`1<TObject>> GetCheckers();
    public sealed virtual IEnumerable`1<uSyncDependency> GetDependencies(TObject item, DependencyFlags flags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class uSync.Core.SyncLegacyTypes : object {
    public static string NestedContent;
    public static string OurNestedContent;
    public static string Grid;
    public static string MediaPicker;
    public static string MediaPicker2;
    public static string MultipleMediaPicker;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class uSync.Core.SyncPropertyGroupHelpers : object {
    public static string uSyncTmpTabAliasPrefix;
    private static SyncPropertyGroupHelpers();
    public static string GetTempTabAlias(string alias);
    public static bool IsTempTabAlias(string alias);
    public static string StripTempTabAlias(string alias);
    [ExtensionAttribute]
public static PropertyGroup FindTab(PropertyGroupCollection groups, string alias);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class uSync.Core.Tracking.Impliment.ContentBaseTracker`1 : SyncXmlTrackAndMerger`1<TObject> {
    public List`1<TrackingItem> TrackingItems { get; }
    public ContentBaseTracker`1(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.ContentTypeBaseTracker`1 : SyncXmlTrackAndMerger`1<TObject> {
    public List`1<TrackingItem> TrackingItems { get; }
    public ContentTypeBaseTracker`1(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.ContentTypeTracker : ContentTypeBaseTracker`1<IContentType> {
    [NullableContextAttribute("1")]
public ContentTypeTracker(SyncSerializerCollection serializers);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.ContentXmlTracker : ContentBaseTracker`1<IContent> {
    [NullableContextAttribute("1")]
public ContentXmlTracker(SyncSerializerCollection serializers);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.DataTypeTracker : SyncXmlTrackAndMerger`1<IDataType> {
    private SyncConfigMergerCollection _configMergers;
    public List`1<TrackingItem> TrackingItems { get; }
    public DataTypeTracker(SyncSerializerCollection serializers, SyncConfigMergerCollection configMergers);
    public virtual List`1<TrackingItem> get_TrackingItems();
    public virtual XElement MergeFiles(XElement a, XElement b);
    public virtual XElement GetDifferences(List`1<XElement> nodes);
    public XElement GetDifferences(XElement root, XElement target, ISyncConfigMerger merger);
    private string GetEditorAlias(XElement node);
    private ISyncConfigMerger GetConfigMerger(string editorAlias);
    private static string SerializeConfig(object config);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.DictionaryItemTracker : SyncXmlTrackAndMerger`1<IDictionaryItem> {
    public List`1<TrackingItem> TrackingItems { get; }
    public DictionaryItemTracker(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.DomainTracker : SyncXmlTrackAndMerger`1<IDomain> {
    public List`1<TrackingItem> TrackingItems { get; }
    public DomainTracker(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.LanguageTracker : SyncXmlTrackAndMerger`1<ILanguage> {
    public List`1<TrackingItem> TrackingItems { get; }
    public LanguageTracker(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.MediaTracker : ContentBaseTracker`1<IMedia> {
    [NullableContextAttribute("1")]
public MediaTracker(SyncSerializerCollection serializers);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.MediaTypeTracker : ContentTypeBaseTracker`1<IMediaType> {
    [NullableContextAttribute("1")]
public MediaTypeTracker(SyncSerializerCollection serializers);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.MemberTypeTracker : ContentTypeBaseTracker`1<IMemberType> {
    [NullableContextAttribute("1")]
public MemberTypeTracker(SyncSerializerCollection serializers);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.RelationTypeTracker : SyncXmlTrackAndMerger`1<IRelationType> {
    public List`1<TrackingItem> TrackingItems { get; }
    public RelationTypeTracker(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.TemplateTracker : SyncXmlTrackAndMerger`1<ITemplate> {
    public List`1<TrackingItem> TrackingItems { get; }
    public TemplateTracker(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.Impliment.WebhookTracker : SyncXmlTrackAndMerger`1<IWebhook> {
    public List`1<TrackingItem> TrackingItems { get; }
    public WebhookTracker(SyncSerializerCollection serializers);
    public virtual List`1<TrackingItem> get_TrackingItems();
}
[NullableContextAttribute("1")]
public interface uSync.Core.Tracking.ISyncTracker`1 {
    public abstract virtual IEnumerable`1<uSyncChange> GetChanges(XElement node, XElement current, SyncSerializerOptions options);
    public abstract virtual IEnumerable`1<uSyncChange> GetChanges(XElement node, SyncSerializerOptions options);
}
[NullableContextAttribute("1")]
public interface uSync.Core.Tracking.ISyncTrackerBase {
    public virtual XElement MergeFiles(XElement a, XElement b);
    public virtual XElement GetDifferences(List`1<XElement> nodes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Tracking.SyncRootMergerHelper : object {
    public static XElement GetDifferences(List`1<XElement> nodes, IList`1<TrackingItem> trackedNodes);
    public static XElement GetCombined(List`1<XElement> nodes, IList`1<TrackingItem> trackedNodes);
    public static XElement GetDifferencesByFileContents(List`1<XElement> nodes);
    public static XElement GetDifferenceByContents(XElement source, XElement target);
    public static ValueTuple`2<XElement, XElement> CompareNodes(List`1<XElement> nodes, IList`1<TrackingItem> trackedNodes);
    private static ValueTuple`2<XElement, XElement> GetTrackedNodeDifferences(XElement source, XElement target, IList`1<TrackingItem> trackedNodes);
    private static ValueTuple`2<XElement, XElement> GetChanges(XElement source, XElement target, IList`1<TrackingItem> items);
    private static XElement GetSingleChange(TrackingItem item, XElement source, XElement target);
    private static ValueTuple`2<XElement, XElement> GetMultipleChanges(TrackingItem item, XElement source, XElement target);
    private static XElement SortElement(XElement node, string elementName, string key);
    private static string GetKey(XElement collection, string keyName);
    private static XElement FindByKey(XElement collection, string element, string keyName, string keyValue);
    private static XElement MakeDeletedElement(string element, string keyName, string key);
    private static string EscapeXPathString(string value);
    private static XElement BlankNode(XElement source);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.SyncTrackerCollection : BuilderCollectionBase`1<ISyncTrackerBase> {
    public SyncTrackerCollection(Func`1<IEnumerable`1<ISyncTrackerBase>> items);
    public IEnumerable`1<ISyncTracker`1<TObject>> GetTrackers();
    public IEnumerable`1<uSyncChange> GetChanges(XElement node, SyncSerializerOptions options);
    public IEnumerable`1<uSyncChange> GetChanges(XElement node, XElement currentNode, SyncSerializerOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.SyncTrackerCollectionBuilder : WeightedCollectionBuilderBase`3<SyncTrackerCollectionBuilder, SyncTrackerCollection, ISyncTrackerBase> {
    protected SyncTrackerCollectionBuilder This { get; }
    protected virtual SyncTrackerCollectionBuilder get_This();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class uSync.Core.Tracking.SyncXmlTrackAndMerger`1 : SyncXmlTracker`1<TObject> {
    public SyncXmlTrackAndMerger`1(SyncSerializerCollection serializers);
    public virtual XElement MergeFiles(XElement a, XElement b);
    public virtual XElement GetDifferences(List`1<XElement> nodes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Tracking.SyncXmlTracker`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected ISyncSerializer`1<TObject> serializer;
    private static string _separator;
    [CompilerGeneratedAttribute]
private IList`1<TrackingItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TrackingItem> <TrackingItems>k__BackingField;
    public IList`1<TrackingItem> Items { get; public set; }
    public List`1<TrackingItem> TrackingItems { get; protected set; }
    public SyncXmlTracker`1(SyncSerializerCollection serializers);
    [CompilerGeneratedAttribute]
public IList`1<TrackingItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<TrackingItem> value);
    [CompilerGeneratedAttribute]
public virtual List`1<TrackingItem> get_TrackingItems();
    [CompilerGeneratedAttribute]
protected virtual void set_TrackingItems(List`1<TrackingItem> value);
    protected virtual ISyncSerializer`1<TObject> GetSerializer(XElement target);
    protected virtual ISyncSerializer`1<TObject> GetSerializer(TObject item);
    public IEnumerable`1<uSyncChange> GetChanges(XElement target);
    public sealed virtual IEnumerable`1<uSyncChange> GetChanges(XElement target, SyncSerializerOptions options);
    private SyncAttempt`1<XElement> SerializeItem(TObject item, SyncSerializerOptions options);
    public sealed virtual IEnumerable`1<uSyncChange> GetChanges(XElement target, XElement source, SyncSerializerOptions options);
    private static uSyncChange GetEmptyFileChange(XElement target, XElement source);
    private ChangeType GetChangeType(XElement target, XElement source, SyncSerializerOptions options);
    private IEnumerable`1<uSyncChange> CalculateDiffrences(XElement target, XElement source);
    private uSyncChange TrackSingleItem(TrackingItem item, XElement target, XElement source, TrackingDirection direction);
    private List`1<uSyncChange> TrackMultipleKeyedItems(TrackingItem trackingItem, XElement target, XElement source, TrackingDirection direction);
    private string MakeSelectionPath(XElement node, string keys);
    private static string EscapeXPathString(string value);
    private string MakeSelectionName(XElement node, string keys);
    private static string GetKeyValue(XElement node, string key);
    private List`1<uSyncChange> CompareNode(XElement target, XElement source, string path, string name, bool maskValue);
    private static uSyncChange Compare(string target, string source, string path, string name, bool maskValue);
    private static uSyncChange JsonChange(string target, string source, string path, string name, bool maskValue);
    private static uSyncChange StringChange(string target, string source, string path, string name, bool maskValue);
    private static uSyncChange AddMissingChange(string path, string name, string value, TrackingDirection direction);
    public virtual XElement MergeFiles(XElement a, XElement b);
    public virtual XElement GetDifferences(List`1<XElement> nodes);
}
public enum uSync.Core.Tracking.TrackingDirection : Enum {
    public int value__;
    public static TrackingDirection TargetToSource;
    public static TrackingDirection SourceToTarget;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.Tracking.TrackingItem : object {
    [CompilerGeneratedAttribute]
private bool <SingleItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <SortingKey>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ValueKey>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AttributeKey>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MaskValue>k__BackingField;
    public bool SingleItem { get; public set; }
    public string Path { get; public set; }
    public string Name { get; public set; }
    [NullableAttribute("2")]
public string SortingKey { get; public set; }
    [NullableAttribute("2")]
public string ValueKey { get; public set; }
    [NullableAttribute("2")]
public string AttributeKey { get; public set; }
    [NullableAttribute("2")]
public string Keys { get; public set; }
    public bool MaskValue { get; public set; }
    public TrackingItem(string name, string path, bool single);
    public TrackingItem(string name, string path, bool single, string keys);
    public TrackingItem(string name, string path, bool single, string keys, string valueKey);
    public static TrackingItem Single(string name, string path);
    public static TrackingItem Attribute(string name, string path, string attributes);
    public static TrackingItem Many(string name, string path, string keys);
    public static TrackingItem Many(string name, string path, string keys, string valueKey);
    public static TrackingItem Many(string name, string path, string key, string valueKey, string sortedKey);
    [CompilerGeneratedAttribute]
public bool get_SingleItem();
    [CompilerGeneratedAttribute]
public void set_SingleItem(bool value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_SortingKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SortingKey(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ValueKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ValueKey(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AttributeKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AttributeKey(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Keys();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Keys(string value);
    [CompilerGeneratedAttribute]
public bool get_MaskValue();
    [CompilerGeneratedAttribute]
public void set_MaskValue(bool value);
    public bool HasAttributes();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class uSync.Core.Tracking.TrackingKey : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAttribute>k__BackingField;
    public string Key { get; public set; }
    public bool IsAttribute { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAttribute();
    [CompilerGeneratedAttribute]
public void set_IsAttribute(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class uSync.Core.uSyncCapabilityChecker : object {
    private IUmbracoVersion _version;
    public bool HasHistoryCleanup { get; }
    public bool HasRuntimeMode { get; }
    public bool HasGroupLanguagePermissions { get; }
    public bool HasSortableDomains { get; }
    public uSyncCapabilityChecker(IUmbracoVersion version);
    public bool get_HasHistoryCleanup();
    public bool get_HasRuntimeMode();
    public bool get_HasGroupLanguagePermissions();
    public bool get_HasSortableDomains();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class uSync.Core.uSyncConstants : object {
    public static string FormatVersion;
    public static string CultureKey;
    public static string SegmentKey;
    public static string DefaultsKey;
    public static int DependencyCountMax;
}
public enum uSync.Core.uSyncContentState : Enum {
    public int value__;
    public static uSyncContentState Saved;
    public static uSyncContentState Unpublished;
    public static uSyncContentState Published;
}
public class uSync.Core.uSyncCore : object {
}
[ExtensionAttribute]
public static class uSync.Core.uSyncCoreBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IUmbracoBuilder AdduSyncCore(IUmbracoBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class uSync.Core.uSyncObjectType : object {
    public static string File;
    public static UmbracoObjectTypes ToUmbracoObjectType(string entityType);
    public static UmbracoObjectTypes ToContainerUmbracoObjectType(string entityType);
}
[ExtensionAttribute]
public static class uSync.Core.Versions.uSyncRuntimeModeChecker : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsUmbracoRunningInProductionMode(IConfiguration configuration);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class uSync.Core.XElementExtensions : object {
    [ExtensionAttribute]
public static int GetLevel(XElement node);
    [ExtensionAttribute]
public static Guid GetKey(XElement node);
    [ExtensionAttribute]
public static string GetAlias(XElement node);
    [ExtensionAttribute]
public static int GetItemSortOrder(XElement node);
    [ExtensionAttribute]
public static string GetCultures(XElement node);
    [ExtensionAttribute]
public static string GetSegments(XElement node);
    [ExtensionAttribute]
public static Guid GetParentKey(XElement node);
    [ExtensionAttribute]
public static string GetPath(XElement node);
    [ExtensionAttribute]
public static bool IsEmptyItem(XElement node);
    public static XElement MakeEmpty(Guid key, SyncActionType change, string alias);
    [ExtensionAttribute]
public static SyncActionType GetEmptyAction(XElement node);
    [ExtensionAttribute]
public static string GetItemType(XElement node);
    [ExtensionAttribute]
public static bool IsContent(XElement node);
    [ExtensionAttribute]
public static bool IsBlueprint(XElement node);
    [ExtensionAttribute]
public static string ValueOrDefault(XElement node, string defaultValue);
    [ExtensionAttribute]
public static TObject ValueOrDefault(XElement node, TObject defaultValue);
    [ExtensionAttribute]
public static XElement FindOrCreate(XElement node, string name);
    [ExtensionAttribute]
public static XElement FindOrCreate(XElement node, string name, string attributeName, string value);
    [ExtensionAttribute]
public static void CreateOrSetElement(XElement node, string name, string value);
    [ExtensionAttribute]
public static void CreateOrSetElement(XElement node, string name, TObject value);
    [ExtensionAttribute]
public static void RemoveMissingElements(XElement node, string elements, string keyName, IEnumerable`1<string> keys);
    [ExtensionAttribute]
public static string RequiredElement(XElement node, string name);
    [ExtensionAttribute]
public static string ValueOrDefault(XAttribute attribute, string defaultValue);
    [ExtensionAttribute]
public static TObject ValueOrDefault(XAttribute attribute, TObject defaultValue);
    [ExtensionAttribute]
public static string MakePlatformSafeHash(XElement node);
}
