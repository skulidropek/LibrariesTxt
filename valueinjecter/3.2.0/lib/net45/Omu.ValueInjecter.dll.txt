public class Omu.ValueInjecter.Flat.PropertyWithComponent : object {
    [CompilerGeneratedAttribute]
private PropertyInfo <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Level>k__BackingField;
    public PropertyInfo Property { get; public set; }
    public object Component { get; public set; }
    public int Level { get; public set; }
    [CompilerGeneratedAttribute]
public PropertyInfo get_Property();
    [CompilerGeneratedAttribute]
public void set_Property(PropertyInfo value);
    [CompilerGeneratedAttribute]
public object get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(object value);
    [CompilerGeneratedAttribute]
public int get_Level();
    [CompilerGeneratedAttribute]
public void set_Level(int value);
}
public static class Omu.ValueInjecter.Flat.TrailFinder : object {
    public static IEnumerable`1<IList`1<string>> GetTrails(string flatPropertyName, IEnumerable`1<PropertyInfo> lookupProps, Func`3<string, PropertyInfo, bool> match, StringComparison comparison, bool forFlattening);
    public static IEnumerable`1<IList`1<string>> GetTrails(string flatPropertyName, object lookupObject, Func`3<string, PropertyInfo, bool> match, StringComparison comparison, bool forFlattening);
    [IteratorStateMachineAttribute("Omu.ValueInjecter.Flat.TrailFinder/<GetTrailsForProperty>d__2")]
private static IEnumerable`1<IList`1<string>> GetTrailsForProperty(string flatPropName, object lookupObject, PropertyInfo lookupProp, Func`3<string, PropertyInfo, bool> match, StringComparison comparison, bool forFlattening);
}
public static class Omu.ValueInjecter.Flat.Tunnelier : object {
    public static PropertyWithComponent Digg(IList`1<string> trail, object target, Func`3<PropertyInfo, object, object> activator);
    public static PropertyWithComponent Find(IList`1<string> trail, object target);
    private static PropertyWithComponent FindTargetInfo(IList`1<string> trail, object target, int level);
}
public static class Omu.ValueInjecter.Flat.UberFlatter : object {
    public static IEnumerable`1<PropertyWithComponent> Unflat(string flatPropertyName, object lookupObject, Func`3<string, PropertyInfo, bool> match, StringComparison comparison, Func`3<PropertyInfo, object, object> activator);
    public static IEnumerable`1<PropertyWithComponent> Unflat(string flatPropertyName, object lookupObject, Func`3<string, PropertyInfo, bool> match, Func`3<PropertyInfo, object, object> activator);
    public static IEnumerable`1<PropertyWithComponent> Unflat(string flatPropertyName, object lookupObject, Func`3<PropertyInfo, object, object> activator);
    public static IEnumerable`1<PropertyWithComponent> Flat(string flatPropertyName, object lookupObject, Func`3<string, PropertyInfo, bool> match);
    public static IEnumerable`1<PropertyWithComponent> Flat(string flatPropertyName, object lookupObject, Func`3<string, PropertyInfo, bool> match, StringComparison comparison);
    public static IEnumerable`1<PropertyWithComponent> Flat(string flatPropertyName, object lookupObject);
}
public class Omu.ValueInjecter.Injections.FlatLoopInjection : ValueInjection {
    protected virtual void Inject(object source, object target);
    protected virtual bool Match(string propName, PropertyInfo unflatProp, PropertyInfo targetFlatProp);
    protected virtual void SetValue(object source, object target, PropertyInfo sp, PropertyInfo tp);
    protected void Execute(PropertyInfo tp, object source, object target);
}
public interface Omu.ValueInjecter.Injections.INoSourceInjection {
    public abstract virtual object Map(object target);
}
public interface Omu.ValueInjecter.Injections.IValueInjection {
    public abstract virtual object Map(object source, object target);
}
public abstract class Omu.ValueInjecter.Injections.KnownSourceInjection`1 : object {
    public sealed virtual object Map(object source, object target);
    protected abstract virtual void Inject(TSource source, object target);
}
public abstract class Omu.ValueInjecter.Injections.KnownTargetInjection`1 : object {
    public sealed virtual object Map(object source, object target);
    protected abstract virtual void Inject(object source, TTarget& target);
}
public class Omu.ValueInjecter.Injections.LoopInjection : PropertyInjection {
    public LoopInjection(String[] ignoredProps);
    protected virtual string GetTargetProp(string sourceName);
    protected virtual bool MatchTypes(Type source, Type target);
    protected virtual void SetValue(object source, object target, PropertyInfo sp, PropertyInfo tp);
    protected virtual void Execute(PropertyInfo sp, object source, object target);
}
public abstract class Omu.ValueInjecter.Injections.NoSourceInjection : object {
    public sealed virtual object Map(object target);
    protected abstract virtual void Inject(object target);
}
public class Omu.ValueInjecter.Injections.PropertyInjection : ValueInjection {
    protected String[] ignoredProps;
    public PropertyInjection(String[] ignoredProps);
    protected virtual void Inject(object source, object target);
    protected virtual void Execute(PropertyInfo sp, object source, object target);
}
internal class Omu.ValueInjecter.Injections.SameNameType : ValueInjection {
    protected virtual void Inject(object source, object target);
}
public class Omu.ValueInjecter.Injections.UnflatLoopInjection : ValueInjection {
    protected Func`3<PropertyInfo, object, object> activator;
    public UnflatLoopInjection(Func`3<PropertyInfo, object, object> activator);
    protected virtual void Inject(object source, object target);
    protected virtual bool Match(string propName, PropertyInfo unflatProp, PropertyInfo sourceFlatProp);
    protected virtual void SetValue(object source, object target, PropertyInfo sp, PropertyInfo tp);
    protected virtual void Execute(PropertyInfo sp, object source, object target);
}
public abstract class Omu.ValueInjecter.Injections.ValueInjection : object {
    public sealed virtual object Map(object source, object target);
    protected abstract virtual void Inject(object source, object target);
}
[ExtensionAttribute]
internal static class Omu.ValueInjecter.InternalUtils : object {
    [ExtensionAttribute]
internal static PropertyInfo GetProperty(Type type, string name);
    [ExtensionAttribute]
internal static MethodInfo GetMethod(Type type, string name);
    [ExtensionAttribute]
internal static PropertyInfo[] GetProperties(Type type, BindingFlags flags);
    [ExtensionAttribute]
internal static Type[] GetInterfaces(Type type);
    [ExtensionAttribute]
internal static bool IsInterface(Type type);
}
public class Omu.ValueInjecter.Mapper : object {
    public static MapperInstance Instance;
    public static Func`4<object, Type, object, object> DefaultMap { get; public set; }
    private static Mapper();
    public static Func`4<object, Type, object, object> get_DefaultMap();
    public static void set_DefaultMap(Func`4<object, Type, object, object> value);
    public static TResult MapDefault(object source, object tag);
    public static TResult Map(object source, object tag);
    public static TResult Map(TSource source, object tag);
    public static void AddMap(Func`2<TSource, TResult> func);
    public static void AddMap(Func`3<TSource, object, TResult> func);
    public static void Reset();
}
public class Omu.ValueInjecter.MapperInstance : object {
    public ConcurrentDictionary`2<Tuple`2<Type, Type>, Tuple`2<object, bool>> Maps;
    public Func`4<object, Type, object, object> DefaultMap;
    public TResult MapDefault(object source, object tag);
    public TResult Map(object source, object tag);
    public TResult Map(TSource source, object tag);
    public void AddMap(Func`2<TSource, TResult> func);
    public void AddMap(Func`3<TSource, object, TResult> func);
    public void Reset();
}
[ExtensionAttribute]
public static class Omu.ValueInjecter.StaticValueInjecter : object {
    public static IValueInjection DefaultInjection;
    private static StaticValueInjecter();
    [ExtensionAttribute]
public static object InjectFrom(object target, object source);
    [ExtensionAttribute]
public static object InjectFrom(object target, IValueInjection injection, object source);
    [ExtensionAttribute]
public static object InjectFrom(object target);
    [ExtensionAttribute]
public static object InjectFrom(object target, INoSourceInjection injection);
    [ExtensionAttribute]
public static object InjectFrom(object target, object source);
}
[ExtensionAttribute]
public static class Omu.ValueInjecter.Utils.Extensions : object {
    [ExtensionAttribute]
public static PropertyInfo[] GetProps(object o);
    [ExtensionAttribute]
public static PropertyInfo[] GetProps(Type type);
}
public static class Omu.ValueInjecter.Utils.StrUtil : object {
    public static string RemovePrefix(string o, string prefix, StringComparison comparison);
    public static string RemovePrefix(string o, string prefix);
    public static string RemoveSuffix(string o, string suffix);
}
