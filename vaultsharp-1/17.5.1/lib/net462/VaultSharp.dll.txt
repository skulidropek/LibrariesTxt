public class VaultSharp.Core.BackendConfig : object {
    [CompilerGeneratedAttribute]
private int <DefaultLeaseTtl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceNoCache>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumLeaseTtl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AuditNonHmacRequestKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AuditNonHmacResponseKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private BackendListingVisibility <ListingVisibility>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PassthroughRequestHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedManagedKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginVersion>k__BackingField;
    [JsonPropertyNameAttribute("default_lease_ttl")]
public int DefaultLeaseTtl { get; public set; }
    [JsonPropertyNameAttribute("force_no_cache")]
public bool ForceNoCache { get; public set; }
    [JsonPropertyNameAttribute("max_lease_ttl")]
public int MaximumLeaseTtl { get; public set; }
    [JsonPropertyNameAttribute("description")]
public string Description { get; public set; }
    [JsonPropertyNameAttribute("audit_non_hmac_request_keys")]
public List`1<string> AuditNonHmacRequestKeys { get; public set; }
    [JsonPropertyNameAttribute("audit_non_hmac_response_keys")]
public List`1<string> AuditNonHmacResponseKeys { get; public set; }
    [JsonPropertyNameAttribute("listing_visibility")]
public BackendListingVisibility ListingVisibility { get; public set; }
    [JsonPropertyNameAttribute("passthrough_request_headers")]
public List`1<string> PassthroughRequestHeaders { get; public set; }
    [JsonPropertyNameAttribute("allowed_response_headers")]
public List`1<string> AllowedResponseHeaders { get; public set; }
    [JsonPropertyNameAttribute("allowed_managed_keys")]
public List`1<string> AllowedManagedKeys { get; public set; }
    [JsonPropertyNameAttribute("plugin_version")]
[JsonIgnoreAttribute]
public string PluginVersion { get; public set; }
    [CompilerGeneratedAttribute]
public int get_DefaultLeaseTtl();
    [CompilerGeneratedAttribute]
public void set_DefaultLeaseTtl(int value);
    [CompilerGeneratedAttribute]
public bool get_ForceNoCache();
    [CompilerGeneratedAttribute]
public void set_ForceNoCache(bool value);
    [CompilerGeneratedAttribute]
public int get_MaximumLeaseTtl();
    [CompilerGeneratedAttribute]
public void set_MaximumLeaseTtl(int value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AuditNonHmacRequestKeys();
    [CompilerGeneratedAttribute]
public void set_AuditNonHmacRequestKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AuditNonHmacResponseKeys();
    [CompilerGeneratedAttribute]
public void set_AuditNonHmacResponseKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
public BackendListingVisibility get_ListingVisibility();
    [CompilerGeneratedAttribute]
public void set_ListingVisibility(BackendListingVisibility value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PassthroughRequestHeaders();
    [CompilerGeneratedAttribute]
public void set_PassthroughRequestHeaders(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_AllowedResponseHeaders(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedManagedKeys();
    [CompilerGeneratedAttribute]
public void set_AllowedManagedKeys(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PluginVersion();
    [CompilerGeneratedAttribute]
public void set_PluginVersion(string value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.Core.BackendListingVisibility : Enum {
    public int value__;
    public static BackendListingVisibility hidden;
    public static BackendListingVisibility unauth;
}
internal class VaultSharp.Core.Checker : object {
    public static void NotNull(T value, string name);
    public static void NotNull(IList`1<T> value, string name);
    public static void NotNull(string value, string name);
}
internal class VaultSharp.Core.IntegerToStringJsonConverter : JsonConverter`1<string> {
    public virtual string Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options);
}
internal class VaultSharp.Core.Polymath : object {
    private static string VaultRequestHeaderKey;
    private static string NamespaceHeaderKey;
    private static string AuthorizationHeaderKey;
    private static string VaultTokenHeaderKey;
    private static string VaultWrapTimeToLiveHeaderKey;
    private static string VaultSharpV1Path;
    private HttpClient _httpClient;
    private Lazy`1<Task`1<string>> _lazyVaultToken;
    private IAuthMethodLoginProvider _authMethodLoginProvider;
    [CompilerGeneratedAttribute]
private HttpMethod <ListHttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private VaultClientSettings <VaultClientSettings>k__BackingField;
    public HttpMethod ListHttpMethod { get; }
    public VaultClientSettings VaultClientSettings { get; }
    public Polymath(VaultClientSettings vaultClientSettings);
    [CompilerGeneratedAttribute]
public HttpMethod get_ListHttpMethod();
    [CompilerGeneratedAttribute]
public VaultClientSettings get_VaultClientSettings();
    internal void SetVaultTokenDelegate();
    [AsyncStateMachineAttribute("VaultSharp.Core.Polymath/<PerformImmediateLogin>d__17")]
internal Task PerformImmediateLogin();
    [AsyncStateMachineAttribute("VaultSharp.Core.Polymath/<MakeVaultApiRequest>d__18")]
public Task MakeVaultApiRequest(string mountPoint, string path, HttpMethod httpMethod, object requestData, bool rawResponse, bool unauthenticated);
    [AsyncStateMachineAttribute("VaultSharp.Core.Polymath/<MakeVaultApiRequest>d__19")]
public Task MakeVaultApiRequest(string resourcePath, HttpMethod httpMethod, object requestData, bool rawResponse, bool unauthenticated);
    [AsyncStateMachineAttribute("VaultSharp.Core.Polymath/<MakeVaultApiRequest>d__20`1")]
public Task`1<TResponse> MakeVaultApiRequest(string mountPoint, string path, HttpMethod httpMethod, object requestData, bool rawResponse, Action`1<HttpResponseMessage> postResponseAction, string wrapTimeToLive, bool unauthenticated);
    [AsyncStateMachineAttribute("VaultSharp.Core.Polymath/<MakeVaultApiRequest>d__21`1")]
public Task`1<TResponse> MakeVaultApiRequest(string resourcePath, HttpMethod httpMethod, object requestData, bool rawResponse, Action`1<HttpResponseMessage> postResponseAction, string wrapTimeToLive, bool unauthenticated);
    public Secret`1<T2> GetMappedSecret(Secret`1<T1> sourceSecret, T2 destinationData);
    [AsyncStateMachineAttribute("VaultSharp.Core.Polymath/<MakeRequestAsync>d__23`1")]
protected Task`1<TResponse> MakeRequestAsync(string resourcePath, HttpMethod httpMethod, object requestData, IDictionary`2<string, string> headers, bool rawResponse, Action`1<HttpResponseMessage> postResponseAction);
}
public class VaultSharp.Core.VaultApiException : Exception {
    [CompilerGeneratedAttribute]
private int <StatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <HttpStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ApiErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ApiWarnings>k__BackingField;
    public int StatusCode { get; }
    public HttpStatusCode HttpStatusCode { get; }
    public IEnumerable`1<string> ApiErrors { get; }
    public IEnumerable`1<string> ApiWarnings { get; }
    public VaultApiException(string message);
    public VaultApiException(string message, Exception innerException);
    public VaultApiException(HttpStatusCode httpStatusCode, string message);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ApiErrors();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ApiWarnings();
}
public interface VaultSharp.IVaultClient {
    public VaultClientSettings Settings { get; }
    public IVaultClientV1 V1 { get; }
    public abstract virtual VaultClientSettings get_Settings();
    public abstract virtual IVaultClientV1 get_V1();
}
public abstract class VaultSharp.V1.AuthMethods.AbstractAuthMethodInfo : object {
    [CompilerGeneratedAttribute]
private AuthInfo <ReturnedLoginAuthInfo>k__BackingField;
    [JsonIgnoreAttribute]
public AuthInfo ReturnedLoginAuthInfo { get; internal set; }
    public AuthMethodType AuthMethodType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual AuthInfo get_ReturnedLoginAuthInfo();
    [CompilerGeneratedAttribute]
internal void set_ReturnedLoginAuthInfo(AuthInfo value);
    public abstract virtual AuthMethodType get_AuthMethodType();
}
public class VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedIdentityRequestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedIdentityRequestHeaders>k__BackingField;
    [JsonIgnoreAttribute]
public AuthMethodType AuthMethodType { get; }
    [JsonIgnoreAttribute]
public string MountPoint { get; }
    [JsonPropertyNameAttribute("role")]
public string RoleName { get; }
    [JsonPropertyNameAttribute("identity_request_url")]
public string Base64EncodedIdentityRequestUrl { get; }
    [JsonPropertyNameAttribute("identity_request_headers")]
public string Base64EncodedIdentityRequestHeaders { get; }
    public AliCloudAuthMethodInfo(string roleName, string base64EncodedIdentityRequestUrl, string base64EncodedIdentityRequestHeaders);
    public AliCloudAuthMethodInfo(string mountPoint, string roleName, string base64EncodedIdentityRequestUrl, string base64EncodedIdentityRequestHeaders);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_Base64EncodedIdentityRequestUrl();
    [CompilerGeneratedAttribute]
public string get_Base64EncodedIdentityRequestHeaders();
}
internal class VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodLoginProvider : object {
    private AliCloudAuthMethodInfo _aliCloudAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public AliCloudAuthMethodLoginProvider(AliCloudAuthMethodInfo aliCloudAuthenticationInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodProvider : object {
    private Polymath _polymath;
    public AliCloudAuthMethodProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodProvider/<WriteRoleAsync>d__2")]
public sealed virtual Task WriteRoleAsync(string roleName, CreateAliCloudRoleModel createAliCloudRoleModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodProvider/<ReadRoleAsync>d__3")]
public sealed virtual Task`1<Secret`1<AliCloudRoleModel>> ReadRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodProvider/<ReadAllRolesAsync>d__4")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AliCloud.AliCloudAuthMethodProvider/<DeleteRoleAsync>d__5")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
}
public interface VaultSharp.V1.AuthMethods.AliCloud.IAliCloudAuthMethod {
    public abstract virtual Task WriteRoleAsync(string roleName, CreateAliCloudRoleModel createAliCloudRoleModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<AliCloudRoleModel>> ReadRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
}
public class VaultSharp.V1.AuthMethods.AliCloud.Models.AliCloudRoleModel : object {
    [CompilerGeneratedAttribute]
private string <ARN>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Period>k__BackingField;
    [JsonPropertyNameAttribute("arn")]
public string ARN { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public List`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public string MaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("period")]
public string Period { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ARN();
    [CompilerGeneratedAttribute]
public void set_ARN(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(string value);
}
public class VaultSharp.V1.AuthMethods.AliCloud.Models.CreateAliCloudRoleModel : object {
    [CompilerGeneratedAttribute]
private string <ARN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenMaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TokenPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TokenBoundCIDRs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenExplicitMaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TokenNoDefaultPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenNumberOfUses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthTokenType <TokenType>k__BackingField;
    [JsonPropertyNameAttribute("arn")]
public string ARN { get; public set; }
    [JsonPropertyNameAttribute("token_ttl")]
public string TokenTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_max_ttl")]
public string TokenMaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_policies")]
public List`1<string> TokenPolicies { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public List`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("token_bound_cidrs")]
public List`1<string> TokenBoundCIDRs { get; public set; }
    [JsonPropertyNameAttribute("token_explicit_max_ttl")]
public string TokenExplicitMaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_no_default_policy")]
public bool TokenNoDefaultPolicy { get; public set; }
    [JsonPropertyNameAttribute("token_num_uses")]
public int TokenNumberOfUses { get; public set; }
    [JsonPropertyNameAttribute("token_period")]
public string TokenPeriod { get; public set; }
    [JsonPropertyNameAttribute("token_type")]
public AuthTokenType TokenType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ARN();
    [CompilerGeneratedAttribute]
public void set_ARN(string value);
    [CompilerGeneratedAttribute]
public string get_TokenTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenTimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_TokenMaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenMaximumTimeToLive(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TokenPolicies();
    [CompilerGeneratedAttribute]
public void set_TokenPolicies(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TokenBoundCIDRs();
    [CompilerGeneratedAttribute]
public void set_TokenBoundCIDRs(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_TokenExplicitMaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenExplicitMaximumTimeToLive(string value);
    [CompilerGeneratedAttribute]
public bool get_TokenNoDefaultPolicy();
    [CompilerGeneratedAttribute]
public void set_TokenNoDefaultPolicy(bool value);
    [CompilerGeneratedAttribute]
public int get_TokenNumberOfUses();
    [CompilerGeneratedAttribute]
public void set_TokenNumberOfUses(int value);
    [CompilerGeneratedAttribute]
public string get_TokenPeriod();
    [CompilerGeneratedAttribute]
public void set_TokenPeriod(string value);
    [CompilerGeneratedAttribute]
public AuthTokenType get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(AuthTokenType value);
}
public class VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretId>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string RoleId { get; }
    public string SecretId { get; }
    public AppRoleAuthMethodInfo(string roleId, string secretId);
    public AppRoleAuthMethodInfo(string mountPoint, string roleId, string secretId);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleId();
    [CompilerGeneratedAttribute]
public string get_SecretId();
}
internal class VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodLoginProvider : object {
    private AppRoleAuthMethodInfo _appRoleAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public AppRoleAuthMethodLoginProvider(AppRoleAuthMethodInfo appRoleAuthenticationInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodLoginProvider/<LoginAsync>d__3")]
public Task`1<Secret`1<Dictionary`2<string, object>>> LoginAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodLoginProvider/<GetVaultTokenAsync>d__4")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider : object {
    private Polymath _polymath;
    public AppRoleAuthMethodProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadAllRolesAsync>d__2")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleAsync>d__3")]
public sealed virtual Task WriteRoleAsync(string roleName, AppRoleRoleModel appRoleRoleModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleAsync>d__4")]
public sealed virtual Task`1<Secret`1<AppRoleRoleModel>> ReadRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleAsync>d__5")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<GetRoleIdAsync>d__6")]
public sealed virtual Task`1<Secret`1<RoleIdInfo>> GetRoleIdAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleIdAsync>d__7")]
public sealed virtual Task WriteRoleIdAsync(string roleName, RoleIdInfo roleIdInfo, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<PullNewSecretIdAsync>d__8")]
public sealed virtual Task`1<Secret`1<SecretIdInfo>> PullNewSecretIdAsync(string roleName, PullSecretIdRequestOptions secretIdRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadAllSecretIdAccessorsAsync>d__9")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllSecretIdAccessorsAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadSecretIdInfoAsync>d__10")]
public sealed virtual Task`1<Secret`1<FullSecretIdInfo>> ReadSecretIdInfoAsync(string roleName, string secretId, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DestroySecretIdAsync>d__11")]
public sealed virtual Task DestroySecretIdAsync(string roleName, string secretId, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadSecretIdInfoByAccessorAsync>d__12")]
public sealed virtual Task`1<Secret`1<FullSecretIdInfo>> ReadSecretIdInfoByAccessorAsync(string roleName, string secretIdAccessor, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DestroySecretIdByAccessorAsync>d__13")]
public sealed virtual Task DestroySecretIdByAccessorAsync(string roleName, string secretIdAccessor, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<PushNewSecretIdAsync>d__14")]
public sealed virtual Task`1<Secret`1<SecretIdInfo>> PushNewSecretIdAsync(string roleName, PushSecretIdRequestOptions secretIdRequestOptions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRolePoliciesAsync>d__15")]
public sealed virtual Task`1<Secret`1<AppRolePoliciesModel>> ReadRolePoliciesAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRolePoliciesAsync>d__16")]
public sealed virtual Task WriteRolePoliciesAsync(string roleName, AppRolePoliciesModel policies, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRolePoliciesAsync>d__17")]
public sealed virtual Task DeleteRolePoliciesAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleSecretIdNumberOfUsesAsync>d__18")]
public sealed virtual Task`1<Secret`1<long>> ReadRoleSecretIdNumberOfUsesAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleSecretIdNumberOfUsesAsync>d__19")]
public sealed virtual Task WriteRoleSecretIdNumberOfUsesAsync(string roleName, long secretIdNumberOfUses, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleSecretIdNumberOfUsesAsync>d__20")]
public sealed virtual Task DeleteRoleSecretIdNumberOfUsesAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleSecretIdTimeToLiveAsync>d__21")]
public sealed virtual Task`1<Secret`1<long>> ReadRoleSecretIdTimeToLiveAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleSecretIdTimeToLiveAsync>d__22")]
public sealed virtual Task WriteRoleSecretIdTimeToLiveAsync(string roleName, long secretIdTimeToLive, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleSecretIdTimeToLiveAsync>d__23")]
public sealed virtual Task DeleteRoleSecretIdTimeToLiveAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleTokenTimeToLiveAsync>d__24")]
public sealed virtual Task`1<Secret`1<long>> ReadRoleTokenTimeToLiveAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleTokenTimeToLiveAsync>d__25")]
public sealed virtual Task WriteRoleTokenTimeToLiveAsync(string roleName, long tokenTimeToLive, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleTokenTimeToLiveAsync>d__26")]
public sealed virtual Task DeleteRoleTokenTimeToLiveAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleTokenMaximumTimeToLiveAsync>d__27")]
public sealed virtual Task`1<Secret`1<long>> ReadRoleTokenMaximumTimeToLiveAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleTokenMaximumTimeToLiveAsync>d__28")]
public sealed virtual Task WriteRoleTokenMaximumTimeToLiveAsync(string roleName, long tokenMaximumTimeToLive, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleTokenMaximumTimeToLiveAsync>d__29")]
public sealed virtual Task DeleteRoleTokenMaximumTimeToLiveAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleBindSecretIdAsync>d__30")]
public sealed virtual Task`1<Secret`1<bool>> ReadRoleBindSecretIdAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleBindSecretIdAsync>d__31")]
public sealed virtual Task WriteRoleBindSecretIdAsync(string roleName, bool bindSecretId, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleBindSecretIdAsync>d__32")]
public sealed virtual Task DeleteRoleBindSecretIdAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleSecretIdBoundCIDRsAsync>d__33")]
public sealed virtual Task`1<Secret`1<List`1<string>>> ReadRoleSecretIdBoundCIDRsAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleSecretIdBoundCIDRsAsync>d__34")]
public sealed virtual Task WriteRoleSecretIdBoundCIDRsAsync(string roleName, List`1<string> secretIdBoundCIDRs, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleSecretIdBoundCIDRsAsync>d__35")]
public sealed virtual Task DeleteRoleSecretIdBoundCIDRsAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRoleTokenBoundCIDRsAsync>d__36")]
public sealed virtual Task`1<Secret`1<List`1<string>>> ReadRoleTokenBoundCIDRsAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRoleTokenBoundCIDRsAsync>d__37")]
public sealed virtual Task WriteRoleTokenBoundCIDRsAsync(string roleName, List`1<string> tokenBoundCIDRs, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRoleTokenBoundCIDRsAsync>d__38")]
public sealed virtual Task DeleteRoleTokenBoundCIDRsAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<ReadRolePeriodAsync>d__39")]
public sealed virtual Task`1<Secret`1<long>> ReadRolePeriodAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<WriteRolePeriodAsync>d__40")]
public sealed virtual Task WriteRolePeriodAsync(string roleName, long period, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<DeleteRolePeriodAsync>d__41")]
public sealed virtual Task DeleteRolePeriodAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<TidyTokensAsync>d__42")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> TidyTokensAsync(string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AppRole.AppRoleAuthMethodProvider/<LoginAsync>d__43")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> LoginAsync(AppRoleAuthMethodInfo appRoleAuthMethodInfo);
}
public interface VaultSharp.V1.AuthMethods.AppRole.IAppRoleAuthMethod {
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint);
    public abstract virtual Task WriteRoleAsync(string roleName, AppRoleRoleModel appRoleRoleModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<AppRoleRoleModel>> ReadRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<RoleIdInfo>> GetRoleIdAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleIdAsync(string roleName, RoleIdInfo roleIdInfo, string mountPoint);
    public abstract virtual Task`1<Secret`1<SecretIdInfo>> PullNewSecretIdAsync(string roleName, PullSecretIdRequestOptions secretIdRequestOptions, string mountPoint, string wrapToTimeLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllSecretIdAccessorsAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<FullSecretIdInfo>> ReadSecretIdInfoAsync(string roleName, string secretId, string mountPoint);
    public abstract virtual Task DestroySecretIdAsync(string roleName, string secretId, string mountPoint);
    public abstract virtual Task`1<Secret`1<FullSecretIdInfo>> ReadSecretIdInfoByAccessorAsync(string roleName, string secretIdAccessor, string mountPoint);
    public abstract virtual Task DestroySecretIdByAccessorAsync(string roleName, string secretIdAccessor, string mountPoint);
    public abstract virtual Task`1<Secret`1<SecretIdInfo>> PushNewSecretIdAsync(string roleName, PushSecretIdRequestOptions secretIdRequestOptions, string mountPoint);
    public abstract virtual Task`1<Secret`1<AppRolePoliciesModel>> ReadRolePoliciesAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRolePoliciesAsync(string roleName, AppRolePoliciesModel policies, string mountPoint);
    public abstract virtual Task DeleteRolePoliciesAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<long>> ReadRoleSecretIdNumberOfUsesAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleSecretIdNumberOfUsesAsync(string roleName, long secretIdNumberOfUses, string mountPoint);
    public abstract virtual Task DeleteRoleSecretIdNumberOfUsesAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<long>> ReadRoleSecretIdTimeToLiveAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleSecretIdTimeToLiveAsync(string roleName, long secretIdTimeToLive, string mountPoint);
    public abstract virtual Task DeleteRoleSecretIdTimeToLiveAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<long>> ReadRoleTokenTimeToLiveAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleTokenTimeToLiveAsync(string roleName, long tokenTimeToLive, string mountPoint);
    public abstract virtual Task DeleteRoleTokenTimeToLiveAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<long>> ReadRoleTokenMaximumTimeToLiveAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleTokenMaximumTimeToLiveAsync(string roleName, long tokenMaximumTimeToLive, string mountPoint);
    public abstract virtual Task DeleteRoleTokenMaximumTimeToLiveAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<bool>> ReadRoleBindSecretIdAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleBindSecretIdAsync(string roleName, bool bindSecretId, string mountPoint);
    public abstract virtual Task DeleteRoleBindSecretIdAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<List`1<string>>> ReadRoleSecretIdBoundCIDRsAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleSecretIdBoundCIDRsAsync(string roleName, List`1<string> secretIdBoundCIDRs, string mountPoint);
    public abstract virtual Task DeleteRoleSecretIdBoundCIDRsAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<List`1<string>>> ReadRoleTokenBoundCIDRsAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRoleTokenBoundCIDRsAsync(string roleName, List`1<string> tokenBoundCIDRs, string mountPoint);
    public abstract virtual Task DeleteRoleTokenBoundCIDRsAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<long>> ReadRolePeriodAsync(string roleName, string mountPoint);
    public abstract virtual Task WriteRolePeriodAsync(string roleName, long period, string mountPoint);
    public abstract virtual Task DeleteRolePeriodAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> TidyTokensAsync(string mountPoint);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> LoginAsync(AppRoleAuthMethodInfo appRoleAuthMethodInfo);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.AppRolePoliciesModel : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TokenPolicies>k__BackingField;
    [JsonPropertyNameAttribute("policies")]
public List`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("token_policies")]
public List`1<string> TokenPolicies { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TokenPolicies();
    [CompilerGeneratedAttribute]
public void set_TokenPolicies(List`1<string> value);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.AppRoleRoleModel : object {
    [CompilerGeneratedAttribute]
private bool <BindSecretId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LocalSecretIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SecretIdBoundCIDRs>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SecretIdNumberOfUses>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SecretIdTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TokenBoundCIDRs>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TokenExplicitMaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TokenMaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TokenNoDefaultPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TokenNumberOfUses>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TokenPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TokenPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TokenTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthTokenType <TokenType>k__BackingField;
    [JsonPropertyNameAttribute("bind_secret_id")]
public bool BindSecretId { get; public set; }
    [JsonPropertyNameAttribute("local_secret_ids")]
public bool LocalSecretIds { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public List`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("secret_id_bound_cidrs")]
public List`1<string> SecretIdBoundCIDRs { get; public set; }
    [JsonPropertyNameAttribute("secret_id_num_uses")]
public long SecretIdNumberOfUses { get; public set; }
    [JsonPropertyNameAttribute("secret_id_ttl")]
public long SecretIdTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_bound_cidrs")]
public List`1<string> TokenBoundCIDRs { get; public set; }
    [JsonPropertyNameAttribute("token_explicit_max_ttl")]
public long TokenExplicitMaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_max_ttl")]
public long TokenMaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_no_default_policy")]
public bool TokenNoDefaultPolicy { get; public set; }
    [JsonPropertyNameAttribute("token_num_uses")]
public long TokenNumberOfUses { get; public set; }
    [JsonPropertyNameAttribute("token_period")]
public long TokenPeriod { get; public set; }
    [JsonPropertyNameAttribute("token_policies")]
public List`1<string> TokenPolicies { get; public set; }
    [JsonPropertyNameAttribute("token_ttl")]
public long TokenTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_type")]
public AuthTokenType TokenType { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_BindSecretId();
    [CompilerGeneratedAttribute]
public void set_BindSecretId(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_LocalSecretIds();
    [CompilerGeneratedAttribute]
public virtual void set_LocalSecretIds(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_SecretIdBoundCIDRs();
    [CompilerGeneratedAttribute]
public void set_SecretIdBoundCIDRs(List`1<string> value);
    [CompilerGeneratedAttribute]
public long get_SecretIdNumberOfUses();
    [CompilerGeneratedAttribute]
public void set_SecretIdNumberOfUses(long value);
    [CompilerGeneratedAttribute]
public long get_SecretIdTimeToLive();
    [CompilerGeneratedAttribute]
public void set_SecretIdTimeToLive(long value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TokenBoundCIDRs();
    [CompilerGeneratedAttribute]
public void set_TokenBoundCIDRs(List`1<string> value);
    [CompilerGeneratedAttribute]
public long get_TokenExplicitMaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenExplicitMaximumTimeToLive(long value);
    [CompilerGeneratedAttribute]
public long get_TokenMaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenMaximumTimeToLive(long value);
    [CompilerGeneratedAttribute]
public bool get_TokenNoDefaultPolicy();
    [CompilerGeneratedAttribute]
public void set_TokenNoDefaultPolicy(bool value);
    [CompilerGeneratedAttribute]
public long get_TokenNumberOfUses();
    [CompilerGeneratedAttribute]
public void set_TokenNumberOfUses(long value);
    [CompilerGeneratedAttribute]
public long get_TokenPeriod();
    [CompilerGeneratedAttribute]
public void set_TokenPeriod(long value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TokenPolicies();
    [CompilerGeneratedAttribute]
public void set_TokenPolicies(List`1<string> value);
    [CompilerGeneratedAttribute]
public long get_TokenTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenTimeToLive(long value);
    [CompilerGeneratedAttribute]
public AuthTokenType get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(AuthTokenType value);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.FullSecretIdInfo : object {
    [CompilerGeneratedAttribute]
private List`1<string> <CIDRList>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastUpdatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretIdAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SecretIdNumberOfUses>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SecretIdTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TokenBoundCIDRs>k__BackingField;
    [JsonPropertyNameAttribute("cidr_list")]
public List`1<string> CIDRList { get; public set; }
    [JsonPropertyNameAttribute("creation_time")]
public Nullable`1<DateTimeOffset> CreationTime { get; public set; }
    [JsonPropertyNameAttribute("expiration_time")]
public Nullable`1<DateTimeOffset> ExpirationTime { get; public set; }
    [JsonPropertyNameAttribute("last_updated_time")]
public Nullable`1<DateTimeOffset> LastUpdatedTime { get; public set; }
    [JsonPropertyNameAttribute("metadata")]
public Dictionary`2<string, string> Metadata { get; public set; }
    [JsonPropertyNameAttribute("secret_id_accessor")]
public string SecretIdAccessor { get; public set; }
    [JsonPropertyNameAttribute("secret_id_num_uses")]
public long SecretIdNumberOfUses { get; public set; }
    [JsonPropertyNameAttribute("secret_id_ttl")]
public long SecretIdTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_bound_cidrs")]
public List`1<string> TokenBoundCIDRs { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_CIDRList();
    [CompilerGeneratedAttribute]
public void set_CIDRList(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ExpirationTime();
    [CompilerGeneratedAttribute]
public void set_ExpirationTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_LastUpdatedTime();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_SecretIdAccessor();
    [CompilerGeneratedAttribute]
public void set_SecretIdAccessor(string value);
    [CompilerGeneratedAttribute]
public long get_SecretIdNumberOfUses();
    [CompilerGeneratedAttribute]
public void set_SecretIdNumberOfUses(long value);
    [CompilerGeneratedAttribute]
public long get_SecretIdTimeToLive();
    [CompilerGeneratedAttribute]
public void set_SecretIdTimeToLive(long value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TokenBoundCIDRs();
    [CompilerGeneratedAttribute]
public void set_TokenBoundCIDRs(List`1<string> value);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.PullSecretIdRequestOptions : object {
    [CompilerGeneratedAttribute]
private string <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CIDRList>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <TokenBoundCIDRs>k__BackingField;
    [CompilerGeneratedAttribute]
private long <NumberOfUses>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("metadata")]
public string Metadata { get; public set; }
    [JsonPropertyNameAttribute("cidr_list")]
public List`1<string> CIDRList { get; public set; }
    [JsonPropertyNameAttribute("token_bound_cidrs")]
public List`1<string> TokenBoundCIDRs { get; public set; }
    [JsonPropertyNameAttribute("num_uses")]
public long NumberOfUses { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public long TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CIDRList();
    [CompilerGeneratedAttribute]
public void set_CIDRList(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_TokenBoundCIDRs();
    [CompilerGeneratedAttribute]
public void set_TokenBoundCIDRs(List`1<string> value);
    [CompilerGeneratedAttribute]
public long get_NumberOfUses();
    [CompilerGeneratedAttribute]
public void set_NumberOfUses(long value);
    [CompilerGeneratedAttribute]
public long get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(long value);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.PushSecretIdRequestOptions : PullSecretIdRequestOptions {
    [CompilerGeneratedAttribute]
private string <SecretId>k__BackingField;
    [JsonPropertyNameAttribute("secret_id")]
public string SecretId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SecretId();
    [CompilerGeneratedAttribute]
public void set_SecretId(string value);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.RoleIdInfo : object {
    [CompilerGeneratedAttribute]
private string <RoleId>k__BackingField;
    [JsonPropertyNameAttribute("role_id")]
public string RoleId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RoleId();
    [CompilerGeneratedAttribute]
public void set_RoleId(string value);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.SecretIdInfo : object {
    [CompilerGeneratedAttribute]
private string <SecretId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretIdAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SecretIdNumberOfUses>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SecretIdTimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("secret_id")]
public string SecretId { get; public set; }
    [JsonPropertyNameAttribute("secret_id_accessor")]
public string SecretIdAccessor { get; public set; }
    [JsonPropertyNameAttribute("secret_id_num_uses")]
public long SecretIdNumberOfUses { get; public set; }
    [JsonPropertyNameAttribute("secret_id_ttl")]
public long SecretIdTimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SecretId();
    [CompilerGeneratedAttribute]
public void set_SecretId(string value);
    [CompilerGeneratedAttribute]
public string get_SecretIdAccessor();
    [CompilerGeneratedAttribute]
public void set_SecretIdAccessor(string value);
    [CompilerGeneratedAttribute]
public long get_SecretIdNumberOfUses();
    [CompilerGeneratedAttribute]
public void set_SecretIdNumberOfUses(long value);
    [CompilerGeneratedAttribute]
public long get_SecretIdTimeToLive();
    [CompilerGeneratedAttribute]
public void set_SecretIdTimeToLive(long value);
}
public class VaultSharp.V1.AuthMethods.AppRole.Models.UpdateAppRoleRoleModel : AppRoleRoleModel {
    [CompilerGeneratedAttribute]
private bool <LocalSecretIds>k__BackingField;
    [JsonIgnoreAttribute]
[ObsoleteAttribute("LocalSecretIds can only be set when creating an app role. Use AppRoleRoleModel if creating a new app role", "True")]
public bool LocalSecretIds { get; public set; }
    [CompilerGeneratedAttribute]
public virtual bool get_LocalSecretIds();
    [CompilerGeneratedAttribute]
public virtual void set_LocalSecretIds(bool value);
}
public class VaultSharp.V1.AuthMethods.AuthMethod : AbstractBackend {
    [CompilerGeneratedAttribute]
private AuthMethodType <Type>k__BackingField;
    [JsonPropertyNameAttribute("type")]
public AuthMethodType Type { get; public set; }
    [CompilerGeneratedAttribute]
public AuthMethodType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(AuthMethodType value);
}
public class VaultSharp.V1.AuthMethods.AuthMethodDefaultPaths : object {
    public static string AliCloud;
    public static string AppRole;
    public static string AWS;
    public static string Azure;
    public static string GitHub;
    public static string GoogleCloud;
    public static string JWT;
    public static string Kubernetes;
    public static string LDAP;
    public static string Kerberos;
    public static string OCI;
    public static string Okta;
    public static string RADIUS;
    public static string Cert;
    public static string Token;
    public static string UserPass;
    public static string CloudFoundry;
}
internal class VaultSharp.V1.AuthMethods.AuthMethodProvider : object {
    private Polymath _polymath;
    [CompilerGeneratedAttribute]
private IAliCloudAuthMethod <AliCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private IAppRoleAuthMethod <AppRole>k__BackingField;
    [CompilerGeneratedAttribute]
private IAWSAuthMethod <AWS>k__BackingField;
    [CompilerGeneratedAttribute]
private IAzureAuthMethod <Azure>k__BackingField;
    [CompilerGeneratedAttribute]
private ICloudFoundryAuthMethod <CloudFoundry>k__BackingField;
    [CompilerGeneratedAttribute]
private IGitHubAuthMethod <GitHub>k__BackingField;
    [CompilerGeneratedAttribute]
private IGoogleCloudAuthMethod <GoogleCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private IJWTAuthMethod <JWT>k__BackingField;
    [CompilerGeneratedAttribute]
private IKubernetesAuthMethod <Kubernetes>k__BackingField;
    [CompilerGeneratedAttribute]
private ILDAPAuthMethod <LDAP>k__BackingField;
    [CompilerGeneratedAttribute]
private IKerberosAuthMethod <Kerberos>k__BackingField;
    [CompilerGeneratedAttribute]
private IOCIAuthMethod <OCI>k__BackingField;
    [CompilerGeneratedAttribute]
private IOktaAuthMethod <Okta>k__BackingField;
    [CompilerGeneratedAttribute]
private IRADIUSAuthMethod <RADIUS>k__BackingField;
    [CompilerGeneratedAttribute]
private ICertAuthMethod <Cert>k__BackingField;
    [CompilerGeneratedAttribute]
private ITokenAuthMethod <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserPassAuthMethod <UserPass>k__BackingField;
    public IAliCloudAuthMethod AliCloud { get; }
    public IAppRoleAuthMethod AppRole { get; }
    public IAWSAuthMethod AWS { get; }
    public IAzureAuthMethod Azure { get; }
    public ICloudFoundryAuthMethod CloudFoundry { get; }
    public IGitHubAuthMethod GitHub { get; }
    public IGoogleCloudAuthMethod GoogleCloud { get; }
    public IJWTAuthMethod JWT { get; }
    public IKubernetesAuthMethod Kubernetes { get; }
    public ILDAPAuthMethod LDAP { get; }
    public IKerberosAuthMethod Kerberos { get; }
    public IOCIAuthMethod OCI { get; }
    public IOktaAuthMethod Okta { get; }
    public IRADIUSAuthMethod RADIUS { get; }
    public ICertAuthMethod Cert { get; }
    public ITokenAuthMethod Token { get; }
    public IUserPassAuthMethod UserPass { get; }
    public AuthMethodProvider(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual IAliCloudAuthMethod get_AliCloud();
    [CompilerGeneratedAttribute]
public sealed virtual IAppRoleAuthMethod get_AppRole();
    [CompilerGeneratedAttribute]
public sealed virtual IAWSAuthMethod get_AWS();
    [CompilerGeneratedAttribute]
public sealed virtual IAzureAuthMethod get_Azure();
    [CompilerGeneratedAttribute]
public sealed virtual ICloudFoundryAuthMethod get_CloudFoundry();
    [CompilerGeneratedAttribute]
public sealed virtual IGitHubAuthMethod get_GitHub();
    [CompilerGeneratedAttribute]
public sealed virtual IGoogleCloudAuthMethod get_GoogleCloud();
    [CompilerGeneratedAttribute]
public sealed virtual IJWTAuthMethod get_JWT();
    [CompilerGeneratedAttribute]
public sealed virtual IKubernetesAuthMethod get_Kubernetes();
    [CompilerGeneratedAttribute]
public sealed virtual ILDAPAuthMethod get_LDAP();
    [CompilerGeneratedAttribute]
public sealed virtual IKerberosAuthMethod get_Kerberos();
    [CompilerGeneratedAttribute]
public sealed virtual IOCIAuthMethod get_OCI();
    [CompilerGeneratedAttribute]
public sealed virtual IOktaAuthMethod get_Okta();
    [CompilerGeneratedAttribute]
public sealed virtual IRADIUSAuthMethod get_RADIUS();
    [CompilerGeneratedAttribute]
public sealed virtual ICertAuthMethod get_Cert();
    [CompilerGeneratedAttribute]
public sealed virtual ITokenAuthMethod get_Token();
    [CompilerGeneratedAttribute]
public sealed virtual IUserPassAuthMethod get_UserPass();
    public sealed virtual void ResetVaultToken();
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AuthMethodProvider/<PerformImmediateLogin>d__54")]
public sealed virtual Task PerformImmediateLogin();
}
[JsonConverterAttribute("VaultSharp.V1.AuthMethods.AuthMethodTypeJsonConverter")]
public class VaultSharp.V1.AuthMethods.AuthMethodType : object {
    [CompilerGeneratedAttribute]
private static AuthMethodType <AliCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <AppRole>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <AWS>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <Azure>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <GitHub>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <GoogleCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <JWT>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <Kubernetes>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <LDAP>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <Kerberos>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <OCI>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <Okta>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <RADIUS>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <Cert>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <UserPass>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuthMethodType <CloudFoundry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public static AuthMethodType AliCloud { get; }
    public static AuthMethodType AppRole { get; }
    public static AuthMethodType AWS { get; }
    public static AuthMethodType Azure { get; }
    public static AuthMethodType GitHub { get; }
    public static AuthMethodType GoogleCloud { get; }
    public static AuthMethodType JWT { get; }
    public static AuthMethodType Kubernetes { get; }
    public static AuthMethodType LDAP { get; }
    public static AuthMethodType Kerberos { get; }
    public static AuthMethodType OCI { get; }
    public static AuthMethodType Okta { get; }
    public static AuthMethodType RADIUS { get; }
    public static AuthMethodType Cert { get; }
    public static AuthMethodType Token { get; }
    public static AuthMethodType UserPass { get; }
    public static AuthMethodType CloudFoundry { get; }
    public string Type { get; }
    public AuthMethodType(string type);
    private static AuthMethodType();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_AliCloud();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_AppRole();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_AWS();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_Azure();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_GitHub();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_GoogleCloud();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_JWT();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_Kubernetes();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_LDAP();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_Kerberos();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_OCI();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_Okta();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_RADIUS();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_Cert();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_Token();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_UserPass();
    [CompilerGeneratedAttribute]
public static AuthMethodType get_CloudFoundry();
    [CompilerGeneratedAttribute]
public string get_Type();
    public static bool op_Equality(AuthMethodType left, AuthMethodType right);
    public static bool op_Inequality(AuthMethodType left, AuthMethodType right);
    public sealed virtual bool Equals(AuthMethodType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class VaultSharp.V1.AuthMethods.AuthMethodTypeJsonConverter : JsonConverter`1<AuthMethodType> {
    public virtual void Write(Utf8JsonWriter writer, AuthMethodType value, JsonSerializerOptions serializer);
    public virtual AuthMethodType Read(Utf8JsonReader& reader, Type type, JsonSerializerOptions options);
}
internal static class VaultSharp.V1.AuthMethods.AuthProviderFactory : object {
    public static IAuthMethodLoginProvider CreateAuthenticationProvider(IAuthMethodInfo authInfo, Polymath polymath);
}
[JsonConverterAttribute("VaultSharp.V1.AuthMethods.AuthTokenTypeEnumConverter")]
public enum VaultSharp.V1.AuthMethods.AuthTokenType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static AuthTokenType Service;
    [EnumMemberAttribute]
public static AuthTokenType Batch;
    [EnumMemberAttribute]
public static AuthTokenType Default;
    [EnumMemberAttribute]
public static AuthTokenType DefaultService;
    [EnumMemberAttribute]
public static AuthTokenType DefaultBatch;
}
internal class VaultSharp.V1.AuthMethods.AuthTokenTypeEnumConverter : JsonConverter`1<AuthTokenType> {
    public virtual AuthTokenType Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, AuthTokenType value, JsonSerializerOptions options);
}
public abstract class VaultSharp.V1.AuthMethods.AWS.AbstractAWSAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [JsonIgnoreAttribute]
public AWSAuthMethodType AWSAuthMethodType { get; }
    [JsonIgnoreAttribute]
public AuthMethodType AuthMethodType { get; }
    [JsonIgnoreAttribute]
public string MountPoint { get; }
    [JsonPropertyNameAttribute("role")]
public string RoleName { get; }
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; }
    protected AbstractAWSAuthMethodInfo(string nonce, string roleName);
    protected AbstractAWSAuthMethodInfo(string mountPoint, string nonce, string roleName);
    public abstract virtual AWSAuthMethodType get_AWSAuthMethodType();
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_Nonce();
}
internal class VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodLoginProvider : object {
    private AbstractAWSAuthMethodInfo _awsAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public AWSAuthMethodLoginProvider(AbstractAWSAuthMethodInfo awsAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodProvider : object {
    private Polymath _polymath;
    public AWSAuthMethodProvider(Polymath polymath);
}
public enum VaultSharp.V1.AuthMethods.AWS.AWSAuthMethodType : Enum {
    public int value__;
    public static AWSAuthMethodType EC2;
    public static AWSAuthMethodType IAM;
}
public class VaultSharp.V1.AuthMethods.AWS.EC2AWSAuthMethodInfo : AbstractAWSAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PKCS7>k__BackingField;
    [JsonIgnoreAttribute]
public AWSAuthMethodType AWSAuthMethodType { get; }
    [JsonPropertyNameAttribute("identity")]
public string Identity { get; }
    [JsonPropertyNameAttribute("signature")]
public string Signature { get; }
    [JsonPropertyNameAttribute("pkcs7")]
public string PKCS7 { get; }
    public EC2AWSAuthMethodInfo(string pkcs7, string identity, string signature, string nonce, string roleName);
    public EC2AWSAuthMethodInfo(string mountPoint, string pkcs7, string identity, string signature, string nonce, string roleName);
    public virtual AWSAuthMethodType get_AWSAuthMethodType();
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public string get_PKCS7();
}
public class VaultSharp.V1.AuthMethods.AWS.IAMAWSAuthMethodInfo : AbstractAWSAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <HttpRequestMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestBody>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestHeaders>k__BackingField;
    [JsonIgnoreAttribute]
public AWSAuthMethodType AWSAuthMethodType { get; }
    [JsonPropertyNameAttribute("iam_http_request_method")]
public string HttpRequestMethod { get; }
    [JsonPropertyNameAttribute("iam_request_url")]
public string RequestUrl { get; }
    [JsonPropertyNameAttribute("iam_request_body")]
public string RequestBody { get; }
    [JsonPropertyNameAttribute("iam_request_headers")]
public string RequestHeaders { get; }
    public IAMAWSAuthMethodInfo(string requestHeaders, string httpRequestMethod, string requestUrl, string requestBody, string nonce, string roleName);
    public IAMAWSAuthMethodInfo(string mountPoint, string requestHeaders, string httpRequestMethod, string requestUrl, string requestBody, string nonce, string roleName);
    public virtual AWSAuthMethodType get_AWSAuthMethodType();
    [CompilerGeneratedAttribute]
public string get_HttpRequestMethod();
    [CompilerGeneratedAttribute]
public string get_RequestUrl();
    [CompilerGeneratedAttribute]
public string get_RequestBody();
    [CompilerGeneratedAttribute]
public string get_RequestHeaders();
}
public interface VaultSharp.V1.AuthMethods.AWS.IAWSAuthMethod {
}
public class VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JWT>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ResourceGroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualMachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VirtualMachineScaleSetName>k__BackingField;
    [JsonIgnoreAttribute]
public AuthMethodType AuthMethodType { get; }
    [JsonIgnoreAttribute]
public string MountPoint { get; }
    [JsonPropertyNameAttribute("role")]
public string RoleName { get; }
    [JsonPropertyNameAttribute("jwt")]
public string JWT { get; }
    [JsonPropertyNameAttribute("subscription_id")]
public string SubscriptionId { get; }
    [JsonPropertyNameAttribute("resource_group_name")]
public string ResourceGroupName { get; }
    [JsonPropertyNameAttribute("vm_name")]
public string VirtualMachineName { get; }
    [JsonPropertyNameAttribute("vmss_name")]
public string VirtualMachineScaleSetName { get; }
    public AzureAuthMethodInfo(string roleName, string jwt, string subscriptionId, string resourceGroupName, string virtualMachineName, string virtualMachineScaleSetName);
    public AzureAuthMethodInfo(string mountPoint, string roleName, string jwt, string subscriptionId, string resourceGroupName, string virtualMachineName, string virtualMachineScaleSetName);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_JWT();
    [CompilerGeneratedAttribute]
public string get_SubscriptionId();
    [CompilerGeneratedAttribute]
public string get_ResourceGroupName();
    [CompilerGeneratedAttribute]
public string get_VirtualMachineName();
    [CompilerGeneratedAttribute]
public string get_VirtualMachineScaleSetName();
}
internal class VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodLoginProvider : object {
    private AzureAuthMethodInfo _azureAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public AzureAuthMethodLoginProvider(AzureAuthMethodInfo azureAuthenticationInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.Azure.AzureAuthMethodProvider : object {
    private Polymath _polymath;
    public AzureAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.Azure.IAzureAuthMethod {
}
public class VaultSharp.V1.AuthMethods.Cert.CertAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2 <ClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private X509Certificate2Collection <ClientCertificateCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public X509Certificate2 ClientCertificate { get; }
    public X509Certificate2Collection ClientCertificateCollection { get; }
    public string RoleName { get; }
    public CertAuthMethodInfo(X509Certificate2 clientCertificate, string roleName);
    public CertAuthMethodInfo(string mountPoint, X509Certificate2 clientCertificate, string roleName);
    public CertAuthMethodInfo(X509Certificate2Collection clientCertificateCollection, string roleName);
    public CertAuthMethodInfo(string mountPoint, X509Certificate2Collection clientCertificateCollection, string roleName);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_ClientCertificate();
    [CompilerGeneratedAttribute]
public X509Certificate2Collection get_ClientCertificateCollection();
    [CompilerGeneratedAttribute]
public string get_RoleName();
}
internal class VaultSharp.V1.AuthMethods.Cert.CertAuthMethodLoginProvider : object {
    private CertAuthMethodInfo _certAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public CertAuthMethodLoginProvider(CertAuthMethodInfo certAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Cert.CertAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.Cert.CertAuthMethodProvider : object {
    private Polymath _polymath;
    public CertAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.Cert.ICertAuthMethod {
}
public class VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CFInstanceCertContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SignatureDateTime>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string RoleName { get; }
    public string CFInstanceCertContent { get; }
    public string Signature { get; }
    public DateTime SignatureDateTime { get; }
    public CloudFoundryAuthMethodInfo(string roleName, string instanceCertContent, DateTime signatureDateTime, string signature);
    public CloudFoundryAuthMethodInfo(string mountPoint, string roleName, string instanceCertContent, DateTime signatureDateTime, string signature);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_CFInstanceCertContent();
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public DateTime get_SignatureDateTime();
}
internal class VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodLoginProvider : object {
    private CloudFoundryAuthMethodInfo _cloudFoundryAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public CloudFoundryAuthMethodLoginProvider(CloudFoundryAuthMethodInfo cloudFoundryAuthMethodInfo, Polymath polymath);
    public static string GetFormattedSigningTime(DateTime signingTime);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodLoginProvider/<GetVaultTokenAsync>d__4")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.CloudFoundry.CloudFoundryAuthMethodProvider : object {
    private Polymath _polymath;
    public CloudFoundryAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.CloudFoundry.ICloudFoundryAuthMethod {
}
public class VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodInfo : AbstractAuthMethodInfo {
    private Lazy`1<AuthMethodType> _lazyAuthMethodType;
    [CompilerGeneratedAttribute]
private Func`1<Task`1<AuthInfo>> <CustomAuthInfoAsyncDelegate>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public Func`1<Task`1<AuthInfo>> CustomAuthInfoAsyncDelegate { get; }
    public CustomAuthMethodInfo(string type, Func`1<Task`1<AuthInfo>> customAuthInfoAsyncDelegate);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public Func`1<Task`1<AuthInfo>> get_CustomAuthInfoAsyncDelegate();
}
internal class VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodLoginProvider : object {
    private CustomAuthMethodInfo _customAuthMethodInfo;
    private Polymath _polymath;
    public CustomAuthMethodLoginProvider(CustomAuthMethodInfo customAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Custom.CustomAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
}
public class VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PersonalAccessToken>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string PersonalAccessToken { get; }
    public GitHubAuthMethodInfo(string personalAccessToken);
    public GitHubAuthMethodInfo(string mountPoint, string personalAccessToken);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_PersonalAccessToken();
}
internal class VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodLoginProvider : object {
    private GitHubAuthMethodInfo _gitHubAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public GitHubAuthMethodLoginProvider(GitHubAuthMethodInfo gitHubAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.GitHub.GitHubAuthMethodProvider : object {
    private Polymath _polymath;
    public GitHubAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.GitHub.IGitHubAuthMethod {
}
public class VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JWT>k__BackingField;
    [JsonIgnoreAttribute]
public AuthMethodType AuthMethodType { get; }
    [JsonIgnoreAttribute]
public string MountPoint { get; }
    [JsonPropertyNameAttribute("role")]
public string RoleName { get; }
    [JsonPropertyNameAttribute("jwt")]
public string JWT { get; }
    public GoogleCloudAuthMethodInfo(string roleName, string jwt);
    public GoogleCloudAuthMethodInfo(string mountPoint, string roleName, string jwt);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_JWT();
}
internal class VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodLoginProvider : object {
    private GoogleCloudAuthMethodInfo _googleCloudAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public GoogleCloudAuthMethodLoginProvider(GoogleCloudAuthMethodInfo googleCloudAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.GoogleCloud.GoogleCloudAuthMethodProvider : object {
    private Polymath _polymath;
    public GoogleCloudAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.GoogleCloud.IGoogleCloudAuthMethod {
}
public interface VaultSharp.V1.AuthMethods.IAuthMethod {
    public IAliCloudAuthMethod AliCloud { get; }
    public IAppRoleAuthMethod AppRole { get; }
    public IAWSAuthMethod AWS { get; }
    public IAzureAuthMethod Azure { get; }
    public ICloudFoundryAuthMethod CloudFoundry { get; }
    public IGitHubAuthMethod GitHub { get; }
    public IGoogleCloudAuthMethod GoogleCloud { get; }
    public IJWTAuthMethod JWT { get; }
    public IKerberosAuthMethod Kerberos { get; }
    public IKubernetesAuthMethod Kubernetes { get; }
    public ILDAPAuthMethod LDAP { get; }
    public IOCIAuthMethod OCI { get; }
    public IOktaAuthMethod Okta { get; }
    public IRADIUSAuthMethod RADIUS { get; }
    public ICertAuthMethod Cert { get; }
    public ITokenAuthMethod Token { get; }
    public IUserPassAuthMethod UserPass { get; }
    public abstract virtual IAliCloudAuthMethod get_AliCloud();
    public abstract virtual IAppRoleAuthMethod get_AppRole();
    public abstract virtual IAWSAuthMethod get_AWS();
    public abstract virtual IAzureAuthMethod get_Azure();
    public abstract virtual ICloudFoundryAuthMethod get_CloudFoundry();
    public abstract virtual IGitHubAuthMethod get_GitHub();
    public abstract virtual IGoogleCloudAuthMethod get_GoogleCloud();
    public abstract virtual IJWTAuthMethod get_JWT();
    public abstract virtual IKerberosAuthMethod get_Kerberos();
    public abstract virtual IKubernetesAuthMethod get_Kubernetes();
    public abstract virtual ILDAPAuthMethod get_LDAP();
    public abstract virtual IOCIAuthMethod get_OCI();
    public abstract virtual IOktaAuthMethod get_Okta();
    public abstract virtual IRADIUSAuthMethod get_RADIUS();
    public abstract virtual ICertAuthMethod get_Cert();
    public abstract virtual ITokenAuthMethod get_Token();
    public abstract virtual IUserPassAuthMethod get_UserPass();
    public abstract virtual void ResetVaultToken();
    public abstract virtual Task PerformImmediateLogin();
}
public interface VaultSharp.V1.AuthMethods.IAuthMethodInfo {
    public AuthMethodType AuthMethodType { get; }
    public AuthInfo ReturnedLoginAuthInfo { get; }
    public abstract virtual AuthMethodType get_AuthMethodType();
    public abstract virtual AuthInfo get_ReturnedLoginAuthInfo();
}
internal interface VaultSharp.V1.AuthMethods.IAuthMethodLoginProvider {
    public abstract virtual Task`1<string> GetVaultTokenAsync();
}
public interface VaultSharp.V1.AuthMethods.JWT.IJWTAuthMethod {
    public abstract virtual Task`1<Secret`1<OIDCAuthURLInfo>> GetOIDCAuthURLAsync(string redirectUri, string roleName, string clientNonce, string mountPoint);
    public abstract virtual Task`1<Secret`1<AuthInfo>> DoOIDCCallbackAsync(string state, string nonce, string code, string clientNonce, string mountPoint);
}
public class VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JWT>k__BackingField;
    [JsonIgnoreAttribute]
public AuthMethodType AuthMethodType { get; }
    [JsonIgnoreAttribute]
public string MountPoint { get; }
    [JsonPropertyNameAttribute("role")]
public string RoleName { get; }
    [JsonPropertyNameAttribute("jwt")]
public string JWT { get; }
    public JWTAuthMethodInfo(string roleName, string jwt);
    public JWTAuthMethodInfo(string mountPoint, string roleName, string jwt);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_JWT();
}
internal class VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodLoginProvider : object {
    private JWTAuthMethodInfo _jwtAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public JWTAuthMethodLoginProvider(JWTAuthMethodInfo jwtAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodProvider : object {
    private Polymath _polymath;
    public JWTAuthMethodProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodProvider/<GetOIDCAuthURLAsync>d__2")]
public sealed virtual Task`1<Secret`1<OIDCAuthURLInfo>> GetOIDCAuthURLAsync(string redirectUri, string roleName, string clientNonce, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.JWT.JWTAuthMethodProvider/<DoOIDCCallbackAsync>d__3")]
public sealed virtual Task`1<Secret`1<AuthInfo>> DoOIDCCallbackAsync(string state, string nonce, string code, string clientNonce, string mountPoint);
}
public class VaultSharp.V1.AuthMethods.JWT.Models.OIDCAuthURLInfo : object {
    [CompilerGeneratedAttribute]
private string <AuthorizationURL>k__BackingField;
    [JsonPropertyNameAttribute("auth_url")]
public string AuthorizationURL { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AuthorizationURL();
    [CompilerGeneratedAttribute]
public void set_AuthorizationURL(string value);
}
public interface VaultSharp.V1.AuthMethods.Kerberos.IKerberosAuthMethod {
}
public class VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private ICredentials <Credentials>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreAuthenticate>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public ICredentials Credentials { get; }
    public bool PreAuthenticate { get; }
    public KerberosAuthMethodInfo(ICredentials credentials);
    public KerberosAuthMethodInfo(string mountPoint, ICredentials credentials);
    public KerberosAuthMethodInfo(string mountPoint, ICredentials credentials, bool preAuthenticate);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public ICredentials get_Credentials();
    [CompilerGeneratedAttribute]
public bool get_PreAuthenticate();
}
internal class VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodLoginProvider : object {
    private KerberosAuthMethodInfo _kerberosAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public KerberosAuthMethodLoginProvider(KerberosAuthMethodInfo kerberosAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.Kerberos.KerberosAuthMethodProvider : object {
    private Polymath _polymath;
    public KerberosAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.Kubernetes.IKubernetesAuthMethod {
}
public class VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <JWT>k__BackingField;
    [JsonIgnoreAttribute]
public AuthMethodType AuthMethodType { get; }
    [JsonIgnoreAttribute]
public string MountPoint { get; }
    [JsonPropertyNameAttribute("role")]
public string RoleName { get; }
    [JsonPropertyNameAttribute("jwt")]
public string JWT { get; }
    public KubernetesAuthMethodInfo(string roleName, string jwt);
    public KubernetesAuthMethodInfo(string mountPoint, string roleName, string jwt);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public string get_JWT();
}
internal class VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodLoginProvider : object {
    private KubernetesAuthMethodInfo _kubernetesAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public KubernetesAuthMethodLoginProvider(KubernetesAuthMethodInfo kubernetesAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.Kubernetes.KubernetesAuthMethodProvider : object {
    private Polymath _polymath;
    public KubernetesAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.LDAP.ILDAPAuthMethod {
    public abstract virtual Task WriteGroupAsync(string groupName, IList`1<string> policies, string mountPoint);
    public abstract virtual Task`1<Secret`1<List`1<string>>> ReadGroupAsync(string groupName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllGroupsAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteGroupAsync(string groupName, string mountPoint);
    public abstract virtual Task WriteUserAsync(string username, IList`1<string> policies, IList`1<string> groups, string mountPoint);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadUserAsync(string username, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllUsersAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteUserAsync(string username, string mountPoint);
}
public class VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string Username { get; }
    public string Password { get; }
    public LDAPAuthMethodInfo(string username, string password);
    public LDAPAuthMethodInfo(string mountPoint, string username, string password);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public string get_Password();
}
internal class VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodLoginProvider : object {
    private LDAPAuthMethodInfo _ldapAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public LDAPAuthMethodLoginProvider(LDAPAuthMethodInfo ldapAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider : object {
    private Polymath _polymath;
    public LDAPAuthMethodProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<WriteGroupAsync>d__2")]
public sealed virtual Task WriteGroupAsync(string groupName, IList`1<string> policies, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<ReadGroupAsync>d__3")]
public sealed virtual Task`1<Secret`1<List`1<string>>> ReadGroupAsync(string groupName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<ReadAllGroupsAsync>d__4")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllGroupsAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<DeleteGroupAsync>d__5")]
public sealed virtual Task DeleteGroupAsync(string groupName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<WriteUserAsync>d__6")]
public sealed virtual Task WriteUserAsync(string username, IList`1<string> policies, IList`1<string> groups, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<ReadUserAsync>d__7")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadUserAsync(string username, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<ReadAllUsersAsync>d__8")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllUsersAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.LDAP.LDAPAuthMethodProvider/<DeleteUserAsync>d__9")]
public sealed virtual Task DeleteUserAsync(string username, string mountPoint);
}
public interface VaultSharp.V1.AuthMethods.OCI.IOCIAuthMethod {
}
public class VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <RequestHeaders>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string RoleName { get; }
    public IDictionary`2<string, object> RequestHeaders { get; }
    public OCIAuthMethodInfo(string rolename, IDictionary`2<string, object> requestHeaders);
    public OCIAuthMethodInfo(string mountPoint, string rolename, IDictionary`2<string, object> requestHeaders);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_RequestHeaders();
}
internal class VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodLoginProvider : object {
    private OCIAuthMethodInfo _ociAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public OCIAuthMethodLoginProvider(OCIAuthMethodInfo ociAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.OCI.OCIAuthMethodProvider : object {
    private Polymath _polymath;
    public OCIAuthMethodProvider(Polymath polymath);
}
public interface VaultSharp.V1.AuthMethods.Okta.IOktaAuthMethod {
    public abstract virtual Task`1<Secret`1<OktaVerifyPushChallengeResponse>> VerifyPushChallengeAsync(string nonce, string mountPoint);
}
public class VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TOTP>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<OktaTOTPProvider> <TOTPProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string Username { get; }
    public string Password { get; }
    public string TOTP { get; }
    public Nullable`1<OktaTOTPProvider> TOTPProvider { get; }
    public string Nonce { get; }
    public OktaAuthMethodInfo(string username, string password, string totp, Nullable`1<OktaTOTPProvider> provider, string nonce);
    public OktaAuthMethodInfo(string mountPoint, string username, string password, string totp, Nullable`1<OktaTOTPProvider> provider, string nonce);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public string get_TOTP();
    [CompilerGeneratedAttribute]
public Nullable`1<OktaTOTPProvider> get_TOTPProvider();
    [CompilerGeneratedAttribute]
public string get_Nonce();
}
internal class VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodLoginProvider : object {
    private OktaAuthMethodInfo _oktaAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public OktaAuthMethodLoginProvider(OktaAuthMethodInfo oktaAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodProvider : object {
    private Polymath _polymath;
    public OktaAuthMethodProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Okta.OktaAuthMethodProvider/<VerifyPushChallengeAsync>d__2")]
public sealed virtual Task`1<Secret`1<OktaVerifyPushChallengeResponse>> VerifyPushChallengeAsync(string nonce, string mountPoint);
}
public enum VaultSharp.V1.AuthMethods.Okta.OktaTOTPProvider : Enum {
    public int value__;
    public static OktaTOTPProvider OKTA;
    public static OktaTOTPProvider GOOGLE;
}
public class VaultSharp.V1.AuthMethods.Okta.OktaVerifyPushChallengeResponse : object {
    [CompilerGeneratedAttribute]
private int <CorrectAnswer>k__BackingField;
    [JsonPropertyNameAttribute("correct_answer")]
public int CorrectAnswer { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CorrectAnswer();
    [CompilerGeneratedAttribute]
public void set_CorrectAnswer(int value);
}
public class VaultSharp.V1.AuthMethods.RADIUS.IRADIUSAuthMethod : object {
}
public class VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string Username { get; }
    public string Password { get; }
    public RADIUSAuthMethodInfo(string username, string password);
    public RADIUSAuthMethodInfo(string mountPoint, string username, string password);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public string get_Password();
}
internal class VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodLoginProvider : object {
    private RADIUSAuthMethodInfo _radiusAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public RADIUSAuthMethodLoginProvider(RADIUSAuthMethodInfo radiusAuthMethodInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.RADIUS.RADIUSAuthMethodProvider : IRADIUSAuthMethod {
    private Polymath _polymath;
    public RADIUSAuthMethodProvider(Polymath polymath);
}
public class VaultSharp.V1.AuthMethods.Token.CreateTokenRequest : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoParent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreateOrphan>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NoDefaultPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExplicitMaxTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfUses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityAlias>k__BackingField;
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("role_name")]
public string RoleName { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public IList`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("meta")]
public IDictionary`2<string, string> Metadata { get; public set; }
    [JsonPropertyNameAttribute("no_parent")]
public bool NoParent { get; public set; }
    [JsonIgnoreAttribute]
public bool CreateOrphan { get; public set; }
    [JsonPropertyNameAttribute("no_default_policy")]
public bool NoDefaultPolicy { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string TokenType { get; public set; }
    [JsonPropertyNameAttribute("explicit_max_ttl")]
public string ExplicitMaxTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("display_name")]
public string DisplayName { get; public set; }
    [JsonPropertyNameAttribute("num_uses")]
public int NumberOfUses { get; public set; }
    [JsonPropertyNameAttribute("period")]
public string Period { get; public set; }
    [JsonPropertyNameAttribute("entity_alias")]
public string EntityAlias { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public void set_RoleName(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_NoParent();
    [CompilerGeneratedAttribute]
public void set_NoParent(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateOrphan();
    [CompilerGeneratedAttribute]
public void set_CreateOrphan(bool value);
    [CompilerGeneratedAttribute]
public bool get_NoDefaultPolicy();
    [CompilerGeneratedAttribute]
public void set_NoDefaultPolicy(bool value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_ExplicitMaxTimeToLive();
    [CompilerGeneratedAttribute]
public void set_ExplicitMaxTimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public int get_NumberOfUses();
    [CompilerGeneratedAttribute]
public void set_NumberOfUses(int value);
    [CompilerGeneratedAttribute]
public string get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(string value);
    [CompilerGeneratedAttribute]
public string get_EntityAlias();
    [CompilerGeneratedAttribute]
public void set_EntityAlias(string value);
}
public class VaultSharp.V1.AuthMethods.Token.CreateTokenRoleRequest : object {
    [CompilerGeneratedAttribute]
private string <RoleName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Orphan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenExplicitMaxTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TokenNoDefaultPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedEntityAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedPolcies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DisallowedPolcies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedPolciesGlob>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DisallowedPolciesGlob>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <TokenBoundCidrs>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenNumUses>k__BackingField;
    [JsonIgnoreAttribute]
public string RoleName { get; public set; }
    [JsonPropertyNameAttribute("orphan")]
public bool Orphan { get; public set; }
    [JsonPropertyNameAttribute("path_suffix")]
public string PathSuffix { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [JsonPropertyNameAttribute("token_explicit_max_ttl")]
public string TokenExplicitMaxTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_no_default_policy")]
public bool TokenNoDefaultPolicy { get; public set; }
    [JsonPropertyNameAttribute("token_period")]
public string TokenPeriod { get; public set; }
    [JsonPropertyNameAttribute("token_type")]
public string TokenType { get; public set; }
    [JsonPropertyNameAttribute("allowed_entity_aliases")]
public IList`1<string> AllowedEntityAliases { get; public set; }
    [JsonPropertyNameAttribute("allowed_policies")]
public IList`1<string> AllowedPolcies { get; public set; }
    [JsonPropertyNameAttribute("disallowed_policies")]
public IList`1<string> DisallowedPolcies { get; public set; }
    [JsonPropertyNameAttribute("allowed_policies_glob")]
public IList`1<string> AllowedPolciesGlob { get; public set; }
    [JsonPropertyNameAttribute("disallowed_policies_glob")]
public IList`1<string> DisallowedPolciesGlob { get; public set; }
    [JsonPropertyNameAttribute("token_bound_cidrs")]
public IList`1<string> TokenBoundCidrs { get; public set; }
    [JsonPropertyNameAttribute("token_num_uses")]
public int TokenNumUses { get; public set; }
    public CreateTokenRoleRequest(string tokenType);
    [CompilerGeneratedAttribute]
public string get_RoleName();
    [CompilerGeneratedAttribute]
public void set_RoleName(string value);
    [CompilerGeneratedAttribute]
public bool get_Orphan();
    [CompilerGeneratedAttribute]
public void set_Orphan(bool value);
    [CompilerGeneratedAttribute]
public string get_PathSuffix();
    [CompilerGeneratedAttribute]
public void set_PathSuffix(string value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
    [CompilerGeneratedAttribute]
public string get_TokenExplicitMaxTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenExplicitMaxTimeToLive(string value);
    [CompilerGeneratedAttribute]
public bool get_TokenNoDefaultPolicy();
    [CompilerGeneratedAttribute]
public void set_TokenNoDefaultPolicy(bool value);
    [CompilerGeneratedAttribute]
public string get_TokenPeriod();
    [CompilerGeneratedAttribute]
public void set_TokenPeriod(string value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedEntityAliases();
    [CompilerGeneratedAttribute]
public void set_AllowedEntityAliases(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedPolcies();
    [CompilerGeneratedAttribute]
public void set_AllowedPolcies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DisallowedPolcies();
    [CompilerGeneratedAttribute]
public void set_DisallowedPolcies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedPolciesGlob();
    [CompilerGeneratedAttribute]
public void set_AllowedPolciesGlob(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DisallowedPolciesGlob();
    [CompilerGeneratedAttribute]
public void set_DisallowedPolciesGlob(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_TokenBoundCidrs();
    [CompilerGeneratedAttribute]
public void set_TokenBoundCidrs(IList`1<string> value);
    [CompilerGeneratedAttribute]
public int get_TokenNumUses();
    [CompilerGeneratedAttribute]
public void set_TokenNumUses(int value);
}
public interface VaultSharp.V1.AuthMethods.Token.ITokenAuthMethod {
    public abstract virtual Task`1<Secret`1<object>> CreateTokenAsync(CreateTokenRequest createTokenRequest);
    public abstract virtual Task`1<Secret`1<ClientTokenInfo>> LookupAsync(string clientToken);
    public abstract virtual Task`1<Secret`1<CallingTokenInfo>> LookupSelfAsync();
    public abstract virtual Task`1<AuthInfo> RenewSelfAsync(string increment);
    public abstract virtual Task RevokeSelfAsync();
    public abstract virtual Task CreateTokenRoleAsync(string roleName, CreateTokenRoleRequest createTokenRoleRequest);
    public abstract virtual Task`1<Secret`1<TokenRoleInfo>> ReadTokenRoleAsync(string roleName);
    public abstract virtual Task`1<Secret`1<ListTokenRoles>> ListTokenRolesAsync();
    public abstract virtual Task DeleteTokenRoleAsync(string roleName);
}
public class VaultSharp.V1.AuthMethods.Token.ListTokenRoles : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Keys>k__BackingField;
    [JsonPropertyNameAttribute("keys")]
public List`1<string> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(List`1<string> value);
}
public class VaultSharp.V1.AuthMethods.Token.Models.CallingTokenInfo : ClientTokenInfo {
}
public class VaultSharp.V1.AuthMethods.Token.Models.ClientTokenInfo : TokenAccessorInfo {
    [CompilerGeneratedAttribute]
private string <Accessor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExplicitMaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [JsonPropertyNameAttribute("accessor")]
public string Accessor { get; public set; }
    [JsonPropertyNameAttribute("explicit_max_ttl")]
public int ExplicitMaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Accessor();
    [CompilerGeneratedAttribute]
public void set_Accessor(string value);
    [CompilerGeneratedAttribute]
public int get_ExplicitMaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_ExplicitMaximumTimeToLive(int value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
}
public class VaultSharp.V1.AuthMethods.Token.Models.TokenAccessorInfo : TokenInfo {
    [CompilerGeneratedAttribute]
private int <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CreationTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Orphan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [JsonPropertyNameAttribute("creation_time")]
public int CreationTime { get; public set; }
    [JsonPropertyNameAttribute("creation_ttl")]
public int CreationTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("orphan")]
public bool Orphan { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public int TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(int value);
    [CompilerGeneratedAttribute]
public int get_CreationTimeToLive();
    [CompilerGeneratedAttribute]
public void set_CreationTimeToLive(int value);
    [CompilerGeneratedAttribute]
public bool get_Orphan();
    [CompilerGeneratedAttribute]
public void set_Orphan(bool value);
    [CompilerGeneratedAttribute]
public int get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(int value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class VaultSharp.V1.AuthMethods.Token.Models.TokenInfo : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedByPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumUsageCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastRenewalTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExpireTime>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IdentityPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssueTime>k__BackingField;
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public List`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("meta")]
public Dictionary`2<string, string> Metadata { get; public set; }
    [JsonPropertyNameAttribute("path")]
public string CreatedByPath { get; public set; }
    [JsonPropertyNameAttribute("display_name")]
public string DisplayName { get; public set; }
    [JsonPropertyNameAttribute("num_uses")]
public int MaximumUsageCount { get; public set; }
    [JsonPropertyNameAttribute("last_renewal_time")]
public int LastRenewalTime { get; public set; }
    [JsonPropertyNameAttribute("entity_id")]
public string EntityId { get; public set; }
    [JsonPropertyNameAttribute("expire_time")]
public string ExpireTime { get; public set; }
    [JsonPropertyNameAttribute("identity_policies")]
public List`1<string> IdentityPolicies { get; public set; }
    [JsonPropertyNameAttribute("issue_time")]
public string IssueTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_CreatedByPath();
    [CompilerGeneratedAttribute]
public void set_CreatedByPath(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public int get_MaximumUsageCount();
    [CompilerGeneratedAttribute]
public void set_MaximumUsageCount(int value);
    [CompilerGeneratedAttribute]
public int get_LastRenewalTime();
    [CompilerGeneratedAttribute]
public void set_LastRenewalTime(int value);
    [CompilerGeneratedAttribute]
public string get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public string get_ExpireTime();
    [CompilerGeneratedAttribute]
public void set_ExpireTime(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IdentityPolicies();
    [CompilerGeneratedAttribute]
public void set_IdentityPolicies(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_IssueTime();
    [CompilerGeneratedAttribute]
public void set_IssueTime(string value);
}
public class VaultSharp.V1.AuthMethods.Token.Models.TokenRoleInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Orphan>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PathSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenExplicitMaxTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TokenNoDefaultPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExplicitMaxTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedEntityAliases>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedPolcies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DisallowedPolcies>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <AllowedPolciesGlob>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <DisallowedPolciesGlob>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("orphan")]
public bool Orphan { get; public set; }
    [JsonPropertyNameAttribute("path_suffix")]
public string PathSuffix { get; public set; }
    [JsonPropertyNameAttribute("period")]
public string Period { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [JsonPropertyNameAttribute("token_explicit_max_ttl")]
public string TokenExplicitMaxTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_no_default_policy")]
public bool TokenNoDefaultPolicy { get; public set; }
    [JsonPropertyNameAttribute("token_period")]
public string TokenPeriod { get; public set; }
    [JsonPropertyNameAttribute("token_type")]
public string TokenType { get; public set; }
    [JsonPropertyNameAttribute("explicit_max_ttl")]
public string ExplicitMaxTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("allowed_entity_aliases")]
public IList`1<string> AllowedEntityAliases { get; public set; }
    [JsonPropertyNameAttribute("allowed_policies")]
public IList`1<string> AllowedPolcies { get; public set; }
    [JsonPropertyNameAttribute("disallowed_policies")]
public IList`1<string> DisallowedPolcies { get; public set; }
    [JsonPropertyNameAttribute("allowed_policies_glob")]
public IList`1<string> AllowedPolciesGlob { get; public set; }
    [JsonPropertyNameAttribute("disallowed_policies_glob")]
public IList`1<string> DisallowedPolciesGlob { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_Orphan();
    [CompilerGeneratedAttribute]
public void set_Orphan(bool value);
    [CompilerGeneratedAttribute]
public string get_PathSuffix();
    [CompilerGeneratedAttribute]
public void set_PathSuffix(string value);
    [CompilerGeneratedAttribute]
public string get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(string value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
    [CompilerGeneratedAttribute]
public string get_TokenExplicitMaxTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenExplicitMaxTimeToLive(string value);
    [CompilerGeneratedAttribute]
public bool get_TokenNoDefaultPolicy();
    [CompilerGeneratedAttribute]
public void set_TokenNoDefaultPolicy(bool value);
    [CompilerGeneratedAttribute]
public string get_TokenPeriod();
    [CompilerGeneratedAttribute]
public void set_TokenPeriod(string value);
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_ExplicitMaxTimeToLive();
    [CompilerGeneratedAttribute]
public void set_ExplicitMaxTimeToLive(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedEntityAliases();
    [CompilerGeneratedAttribute]
public void set_AllowedEntityAliases(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedPolcies();
    [CompilerGeneratedAttribute]
public void set_AllowedPolcies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DisallowedPolcies();
    [CompilerGeneratedAttribute]
public void set_DisallowedPolcies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_AllowedPolciesGlob();
    [CompilerGeneratedAttribute]
public void set_AllowedPolciesGlob(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_DisallowedPolciesGlob();
    [CompilerGeneratedAttribute]
public void set_DisallowedPolciesGlob(IList`1<string> value);
}
public class VaultSharp.V1.AuthMethods.Token.TokenAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <VaultToken>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string VaultToken { get; }
    public TokenAuthMethodInfo(string vaultToken);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_VaultToken();
}
internal class VaultSharp.V1.AuthMethods.Token.TokenAuthMethodLoginProvider : object {
    private TokenAuthMethodInfo _tokenAuthInfo;
    private Polymath _polymath;
    public TokenAuthMethodLoginProvider(TokenAuthMethodInfo tokenAuthInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
}
internal class VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider : object {
    private Polymath _polymath;
    public TokenAuthMethodProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<CreateTokenAsync>d__2")]
public sealed virtual Task`1<Secret`1<object>> CreateTokenAsync(CreateTokenRequest createTokenRequest);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<CreateTokenRoleAsync>d__3")]
public sealed virtual Task CreateTokenRoleAsync(string roleName, CreateTokenRoleRequest createTokenRoleRequest);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<DeleteTokenRoleAsync>d__4")]
public sealed virtual Task DeleteTokenRoleAsync(string roleName);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<ListTokenRolesAsync>d__5")]
public sealed virtual Task`1<Secret`1<ListTokenRoles>> ListTokenRolesAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<LookupAsync>d__6")]
public sealed virtual Task`1<Secret`1<ClientTokenInfo>> LookupAsync(string clientToken);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<LookupSelfAsync>d__7")]
public sealed virtual Task`1<Secret`1<CallingTokenInfo>> LookupSelfAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<ReadTokenRoleAsync>d__8")]
public sealed virtual Task`1<Secret`1<TokenRoleInfo>> ReadTokenRoleAsync(string roleName);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<RenewSelfAsync>d__9")]
public sealed virtual Task`1<AuthInfo> RenewSelfAsync(string increment);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.Token.TokenAuthMethodProvider/<RevokeSelfAsync>d__10")]
public sealed virtual Task RevokeSelfAsync();
}
public interface VaultSharp.V1.AuthMethods.UserPass.IUserPassAuthMethod {
}
public class VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodInfo : AbstractAuthMethodInfo {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    public AuthMethodType AuthMethodType { get; }
    public string MountPoint { get; }
    public string Username { get; }
    public string Password { get; }
    public UserPassAuthMethodInfo(string username, string password);
    public UserPassAuthMethodInfo(string mountPoint, string username, string password);
    public virtual AuthMethodType get_AuthMethodType();
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public string get_Password();
}
internal class VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodLoginProvider : object {
    private UserPassAuthMethodInfo _userPassAuthMethodInfo;
    private Polymath _polymath;
    private string LoginResourcePath { get; }
    public UserPassAuthMethodLoginProvider(UserPassAuthMethodInfo userPassAuthenticationInfo, Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodLoginProvider/<GetVaultTokenAsync>d__3")]
public sealed virtual Task`1<string> GetVaultTokenAsync();
    private string get_LoginResourcePath();
}
internal class VaultSharp.V1.AuthMethods.UserPass.UserPassAuthMethodProvider : object {
    private Polymath _polymath;
    public UserPassAuthMethodProvider(Polymath polymath);
}
public abstract class VaultSharp.V1.Commons.AbstractBackend : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accessor>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Config>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeprecationStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExternalEntropyAccess>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunningPluginVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RunningSHA256>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SealWrap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [JsonIgnoreAttribute]
public string Path { get; public set; }
    [JsonPropertyNameAttribute("accessor")]
public string Accessor { get; public set; }
    [JsonPropertyNameAttribute("config")]
public Dictionary`2<string, object> Config { get; public set; }
    [JsonPropertyNameAttribute("deprecation_status")]
public string DeprecationStatus { get; public set; }
    [JsonPropertyNameAttribute("description")]
public string Description { get; public set; }
    [JsonPropertyNameAttribute("external_entropy_access")]
public bool ExternalEntropyAccess { get; public set; }
    [JsonPropertyNameAttribute("local")]
public bool Local { get; public set; }
    [JsonPropertyNameAttribute("options")]
public Dictionary`2<string, object> Options { get; public set; }
    [JsonPropertyNameAttribute("plugin_name")]
public string PluginName { get; public set; }
    [JsonPropertyNameAttribute("plugin_version")]
public string PluginVersion { get; public set; }
    [JsonPropertyNameAttribute("running_plugin_version")]
public string RunningPluginVersion { get; public set; }
    [JsonPropertyNameAttribute("running_sha256")]
public string RunningSHA256 { get; public set; }
    [JsonPropertyNameAttribute("seal_wrap")]
public bool SealWrap { get; public set; }
    [JsonPropertyNameAttribute("uuid")]
public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Accessor();
    [CompilerGeneratedAttribute]
public void set_Accessor(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Config();
    [CompilerGeneratedAttribute]
public void set_Config(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_DeprecationStatus();
    [CompilerGeneratedAttribute]
public void set_DeprecationStatus(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_ExternalEntropyAccess();
    [CompilerGeneratedAttribute]
public void set_ExternalEntropyAccess(bool value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_PluginName();
    [CompilerGeneratedAttribute]
public void set_PluginName(string value);
    [CompilerGeneratedAttribute]
public string get_PluginVersion();
    [CompilerGeneratedAttribute]
public void set_PluginVersion(string value);
    [CompilerGeneratedAttribute]
public string get_RunningPluginVersion();
    [CompilerGeneratedAttribute]
public void set_RunningPluginVersion(string value);
    [CompilerGeneratedAttribute]
public string get_RunningSHA256();
    [CompilerGeneratedAttribute]
public void set_RunningSHA256(string value);
    [CompilerGeneratedAttribute]
public bool get_SealWrap();
    [CompilerGeneratedAttribute]
public void set_SealWrap(bool value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
}
public class VaultSharp.V1.Commons.AuthInfo : object {
    [CompilerGeneratedAttribute]
private string <ClientTokenAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientToken>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeaseDurationSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [JsonPropertyNameAttribute("accessor")]
public string ClientTokenAccessor { get; public set; }
    [JsonPropertyNameAttribute("client_token")]
public string ClientToken { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public List`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("metadata")]
public Dictionary`2<string, string> Metadata { get; public set; }
    [JsonPropertyNameAttribute("lease_duration")]
public int LeaseDurationSeconds { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientTokenAccessor();
    [CompilerGeneratedAttribute]
public void set_ClientTokenAccessor(string value);
    [CompilerGeneratedAttribute]
public string get_ClientToken();
    [CompilerGeneratedAttribute]
public void set_ClientToken(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(List`1<string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public int get_LeaseDurationSeconds();
    [CompilerGeneratedAttribute]
public void set_LeaseDurationSeconds(int value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
}
public class VaultSharp.V1.Commons.CurrentSecretMetadata : object {
    [CompilerGeneratedAttribute]
private string <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <CustomMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Destroyed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Version>k__BackingField;
    [JsonPropertyNameAttribute("created_time")]
public string CreatedTime { get; public set; }
    [JsonPropertyNameAttribute("custom_metadata")]
public Dictionary`2<string, object> CustomMetadata { get; public set; }
    [JsonPropertyNameAttribute("deletion_time")]
public string DeletionTime { get; public set; }
    [JsonPropertyNameAttribute("destroyed")]
public bool Destroyed { get; public set; }
    [JsonPropertyNameAttribute("version")]
public int Version { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CreatedTime();
    [CompilerGeneratedAttribute]
public void set_CreatedTime(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_CustomMetadata();
    [CompilerGeneratedAttribute]
public void set_CustomMetadata(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_DeletionTime();
    [CompilerGeneratedAttribute]
public void set_DeletionTime(string value);
    [CompilerGeneratedAttribute]
public bool get_Destroyed();
    [CompilerGeneratedAttribute]
public void set_Destroyed(bool value);
    [CompilerGeneratedAttribute]
public int get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(int value);
}
public class VaultSharp.V1.Commons.FullSecretMetadata : object {
    [CompilerGeneratedAttribute]
private bool <CASRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CustomMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeleteVersionAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SecretMetadata> <Versions>k__BackingField;
    [JsonPropertyNameAttribute("cas_required")]
public bool CASRequired { get; public set; }
    [JsonPropertyNameAttribute("created_time")]
public string CreatedTime { get; public set; }
    [JsonPropertyNameAttribute("current_version")]
public int CurrentVersion { get; public set; }
    [JsonPropertyNameAttribute("custom_metadata")]
public Dictionary`2<string, string> CustomMetadata { get; public set; }
    [JsonPropertyNameAttribute("delete_version_after")]
public string DeleteVersionAfter { get; public set; }
    [JsonPropertyNameAttribute("max_versions")]
public int MaxVersion { get; public set; }
    [JsonPropertyNameAttribute("oldest_version")]
public int OldestVersion { get; public set; }
    [JsonPropertyNameAttribute("updated_time")]
public string UpdatedTime { get; public set; }
    [JsonPropertyNameAttribute("versions")]
public Dictionary`2<string, SecretMetadata> Versions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CASRequired();
    [CompilerGeneratedAttribute]
public void set_CASRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_CreatedTime();
    [CompilerGeneratedAttribute]
public void set_CreatedTime(string value);
    [CompilerGeneratedAttribute]
public int get_CurrentVersion();
    [CompilerGeneratedAttribute]
public void set_CurrentVersion(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomMetadata();
    [CompilerGeneratedAttribute]
public void set_CustomMetadata(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_DeleteVersionAfter();
    [CompilerGeneratedAttribute]
public void set_DeleteVersionAfter(string value);
    [CompilerGeneratedAttribute]
public int get_MaxVersion();
    [CompilerGeneratedAttribute]
public void set_MaxVersion(int value);
    [CompilerGeneratedAttribute]
public int get_OldestVersion();
    [CompilerGeneratedAttribute]
public void set_OldestVersion(int value);
    [CompilerGeneratedAttribute]
public string get_UpdatedTime();
    [CompilerGeneratedAttribute]
public void set_UpdatedTime(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, SecretMetadata> get_Versions();
    [CompilerGeneratedAttribute]
public void set_Versions(Dictionary`2<string, SecretMetadata> value);
}
public class VaultSharp.V1.Commons.ListInfo : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Keys>k__BackingField;
    [JsonPropertyNameAttribute("keys")]
public IEnumerable`1<string> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(IEnumerable`1<string> value);
}
public class VaultSharp.V1.Commons.Secret`1 : object {
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeaseDurationSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private TData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private WrapInfo <WrapInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private AuthInfo <AuthInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MountType>k__BackingField;
    [JsonPropertyNameAttribute("request_id")]
public string RequestId { get; public set; }
    [JsonPropertyNameAttribute("lease_id")]
public string LeaseId { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [JsonPropertyNameAttribute("lease_duration")]
public int LeaseDurationSeconds { get; public set; }
    [JsonPropertyNameAttribute("data")]
public TData Data { get; public set; }
    [JsonPropertyNameAttribute("wrap_info")]
public WrapInfo WrapInfo { get; public set; }
    [JsonPropertyNameAttribute("warnings")]
public List`1<string> Warnings { get; public set; }
    [JsonPropertyNameAttribute("auth")]
public AuthInfo AuthInfo { get; public set; }
    [JsonPropertyNameAttribute("mount_type")]
public string MountType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
    [CompilerGeneratedAttribute]
public string get_LeaseId();
    [CompilerGeneratedAttribute]
public void set_LeaseId(string value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
    [CompilerGeneratedAttribute]
public int get_LeaseDurationSeconds();
    [CompilerGeneratedAttribute]
public void set_LeaseDurationSeconds(int value);
    [CompilerGeneratedAttribute]
public TData get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(TData value);
    [CompilerGeneratedAttribute]
public WrapInfo get_WrapInfo();
    [CompilerGeneratedAttribute]
public void set_WrapInfo(WrapInfo value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Warnings();
    [CompilerGeneratedAttribute]
public void set_Warnings(List`1<string> value);
    [CompilerGeneratedAttribute]
public AuthInfo get_AuthInfo();
    [CompilerGeneratedAttribute]
public void set_AuthInfo(AuthInfo value);
    [CompilerGeneratedAttribute]
public string get_MountType();
    [CompilerGeneratedAttribute]
public void set_MountType(string value);
}
public class VaultSharp.V1.Commons.SecretData : SecretData`1<IDictionary`2<string, object>> {
}
public class VaultSharp.V1.Commons.SecretData`1 : object {
    [CompilerGeneratedAttribute]
private T <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private CurrentSecretMetadata <Metadata>k__BackingField;
    [JsonPropertyNameAttribute("data")]
public T Data { get; public set; }
    [JsonPropertyNameAttribute("metadata")]
public CurrentSecretMetadata Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(T value);
    [CompilerGeneratedAttribute]
public CurrentSecretMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(CurrentSecretMetadata value);
}
public class VaultSharp.V1.Commons.SecretMetadata : object {
    [CompilerGeneratedAttribute]
private string <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletionTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Destroyed>k__BackingField;
    [JsonPropertyNameAttribute("created_time")]
public string CreatedTime { get; public set; }
    [JsonPropertyNameAttribute("deletion_time")]
public string DeletionTime { get; public set; }
    [JsonPropertyNameAttribute("destroyed")]
public bool Destroyed { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CreatedTime();
    [CompilerGeneratedAttribute]
public void set_CreatedTime(string value);
    [CompilerGeneratedAttribute]
public string get_DeletionTime();
    [CompilerGeneratedAttribute]
public void set_DeletionTime(string value);
    [CompilerGeneratedAttribute]
public bool get_Destroyed();
    [CompilerGeneratedAttribute]
public void set_Destroyed(bool value);
}
public class VaultSharp.V1.Commons.SecretSubkeysInfo : object {
    [CompilerGeneratedAttribute]
private CurrentSecretMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Subkeys>k__BackingField;
    [JsonPropertyNameAttribute("metadata")]
public CurrentSecretMetadata Metadata { get; public set; }
    [JsonPropertyNameAttribute("subkeys")]
public Dictionary`2<string, object> Subkeys { get; public set; }
    [CompilerGeneratedAttribute]
public CurrentSecretMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(CurrentSecretMetadata value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Subkeys();
    [CompilerGeneratedAttribute]
public void set_Subkeys(Dictionary`2<string, object> value);
}
public class VaultSharp.V1.Commons.VaultApiRequest : object {
    [CompilerGeneratedAttribute]
private string <WrapTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public string WrapTimeToLive { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WrapTimeToLive();
    [CompilerGeneratedAttribute]
public void set_WrapTimeToLive(string value);
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
}
public class VaultSharp.V1.Commons.VaultApiRequest`1 : VaultApiRequest {
    [CompilerGeneratedAttribute]
private TRequestData <RequestData>k__BackingField;
    public TRequestData RequestData { get; public set; }
    [CompilerGeneratedAttribute]
public TRequestData get_RequestData();
    [CompilerGeneratedAttribute]
public void set_RequestData(TRequestData value);
}
public class VaultSharp.V1.Commons.VaultApiResponse : object {
}
public class VaultSharp.V1.Commons.VaultApiResponse`1 : VaultApiResponse {
    [CompilerGeneratedAttribute]
private TResponseData <ResponseData>k__BackingField;
    public TResponseData ResponseData { get; public set; }
    [CompilerGeneratedAttribute]
public TResponseData get_ResponseData();
    [CompilerGeneratedAttribute]
public void set_ResponseData(TResponseData value);
}
public class VaultSharp.V1.Commons.WrapInfo : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CreationPath>k__BackingField;
    [JsonPropertyNameAttribute("token")]
public string Token { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public int TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("creation_time")]
public DateTimeOffset CreationTime { get; public set; }
    [JsonPropertyNameAttribute("accessor")]
public string Accessor { get; public set; }
    [JsonPropertyNameAttribute("creation_path")]
public string CreationPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public int get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(int value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Accessor();
    [CompilerGeneratedAttribute]
public void set_Accessor(string value);
    [CompilerGeneratedAttribute]
public string get_CreationPath();
    [CompilerGeneratedAttribute]
public void set_CreationPath(string value);
}
public interface VaultSharp.V1.IVaultClientV1 {
    public ISecretsEngine Secrets { get; }
    public IAuthMethod Auth { get; }
    public ISystemBackend System { get; }
    public abstract virtual ISecretsEngine get_Secrets();
    public abstract virtual IAuthMethod get_Auth();
    public abstract virtual ISystemBackend get_System();
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryCredentials : object {
    [CompilerGeneratedAttribute]
private string <CurrentPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPassword>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [JsonPropertyNameAttribute("current_password")]
public string CurrentPassword { get; public set; }
    [JsonPropertyNameAttribute("last_password")]
public string LastPassword { get; public set; }
    [JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CurrentPassword();
    [CompilerGeneratedAttribute]
public void set_CurrentPassword(string value);
    [CompilerGeneratedAttribute]
public string get_LastPassword();
    [CompilerGeneratedAttribute]
public void set_LastPassword(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
}
internal class VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider : object {
    private Polymath _polymath;
    public ActiveDirectoryLibraryProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider/<WriteServiceAccountSetAsync>d__2")]
public sealed virtual Task WriteServiceAccountSetAsync(string setName, CreateServiceAccountSetModel createServiceAccountSetModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider/<ReadServiceAccountSetAsync>d__3")]
public sealed virtual Task`1<Secret`1<ServiceAccountSetModel>> ReadServiceAccountSetAsync(string setName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider/<ReadAllServiceAccountSetsAsync>d__4")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllServiceAccountSetsAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider/<DeleteServiceAccountSetAsync>d__5")]
public sealed virtual Task DeleteServiceAccountSetAsync(string setName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider/<CheckoutCredentialsAsync>d__6")]
public sealed virtual Task`1<Secret`1<CheckedOutCredentials>> CheckoutCredentialsAsync(string setName, Nullable`1<long> timeToLive, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider/<CheckinCredentialsAsync>d__7")]
public sealed virtual Task`1<Secret`1<CheckedInAccounts>> CheckinCredentialsAsync(string setName, List`1<string> serviceAccountNames, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectoryLibraryProvider/<ForceCheckinCredentialsAsync>d__8")]
public sealed virtual Task`1<Secret`1<CheckedInAccounts>> ForceCheckinCredentialsAsync(string setName, List`1<string> serviceAccountNames, string mountPoint, string wrapTimeToLive);
}
internal class VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider : object {
    private Polymath _polymath;
    [CompilerGeneratedAttribute]
private IActiveDirectoryLibrary <Library>k__BackingField;
    public IActiveDirectoryLibrary Library { get; }
    public ActiveDirectorySecretsEngineProvider(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual IActiveDirectoryLibrary get_Library();
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<ConfigureConnectionAsync>d__5")]
public sealed virtual Task ConfigureConnectionAsync(CreateConnectionConfigModel createConnectionConfigModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<ReadConnectionAsync>d__6")]
public sealed virtual Task`1<Secret`1<ConnectionConfigModel>> ReadConnectionAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<DeleteConnectionAsync>d__7")]
public sealed virtual Task DeleteConnectionAsync(string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<WriteRoleAsync>d__8")]
public sealed virtual Task WriteRoleAsync(string roleName, CreateActiveDirectoryRoleModel createActiveDirectoryRoleModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<ReadRoleAsync>d__9")]
public sealed virtual Task`1<Secret`1<ActiveDirectoryRoleModel>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<ReadAllRolesAsync>d__10")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<DeleteRoleAsync>d__11")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<GetCredentialsAsync>d__12")]
public sealed virtual Task`1<Secret`1<ActiveDirectoryCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<RotateRootCredentialsAsync>d__13")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> RotateRootCredentialsAsync(string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<ReadRotateRootCredentialsStatusAsync>d__14")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadRotateRootCredentialsStatusAsync(string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.ActiveDirectory.ActiveDirectorySecretsEngineProvider/<RotateRoleCredentialsAsync>d__15")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> RotateRoleCredentialsAsync(string roleName, string mountPoint);
}
public interface VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectoryLibrary {
    public abstract virtual Task WriteServiceAccountSetAsync(string setName, CreateServiceAccountSetModel createServiceAccountSetModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<ServiceAccountSetModel>> ReadServiceAccountSetAsync(string setName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllServiceAccountSetsAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteServiceAccountSetAsync(string setName, string mountPoint);
    public abstract virtual Task`1<Secret`1<CheckedOutCredentials>> CheckoutCredentialsAsync(string setName, Nullable`1<long> timeToLive, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<CheckedInAccounts>> CheckinCredentialsAsync(string setName, List`1<string> serviceAccountNames, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<CheckedInAccounts>> ForceCheckinCredentialsAsync(string setName, List`1<string> serviceAccountNames, string mountPoint, string wrapTimeToLive);
}
public interface VaultSharp.V1.SecretsEngines.ActiveDirectory.IActiveDirectorySecretsEngine {
    public IActiveDirectoryLibrary Library { get; }
    public abstract virtual IActiveDirectoryLibrary get_Library();
    public abstract virtual Task ConfigureConnectionAsync(CreateConnectionConfigModel createConnectionConfigModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<ConnectionConfigModel>> ReadConnectionAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteConnectionAsync(string mountPoint);
    public abstract virtual Task WriteRoleAsync(string roleName, CreateActiveDirectoryRoleModel createActiveDirectoryRoleModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<ActiveDirectoryRoleModel>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<ActiveDirectoryCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> RotateRootCredentialsAsync(string mountPoint);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadRotateRootCredentialsStatusAsync(string mountPoint);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> RotateRoleCredentialsAsync(string roleName, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.ActiveDirectoryRoleModel : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastVaultRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <PasswordLastSet>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("last_vault_rotation")]
public Nullable`1<DateTimeOffset> LastVaultRotation { get; public set; }
    [JsonPropertyNameAttribute("password_last_set")]
public Nullable`1<DateTimeOffset> PasswordLastSet { get; public set; }
    [JsonPropertyNameAttribute("service_account_name")]
public string ServiceAccountName { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public long TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_LastVaultRotation();
    [CompilerGeneratedAttribute]
public void set_LastVaultRotation(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PasswordLastSet();
    [CompilerGeneratedAttribute]
public void set_PasswordLastSet(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_ServiceAccountName();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountName(string value);
    [CompilerGeneratedAttribute]
public long get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(long value);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CheckedInAccounts : object {
    [CompilerGeneratedAttribute]
private List`1<string> <AccountNames>k__BackingField;
    [JsonPropertyNameAttribute("check_ins")]
public List`1<string> AccountNames { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_AccountNames();
    [CompilerGeneratedAttribute]
public void set_AccountNames(List`1<string> value);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CheckedOutCredentials : object {
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceAccountName>k__BackingField;
    [JsonPropertyNameAttribute("password")]
public string Password { get; public set; }
    [JsonPropertyNameAttribute("service_account_name")]
public string ServiceAccountName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceAccountName();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountName(string value);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.ConnectionConfigModel : object {
    [CompilerGeneratedAttribute]
private string <BindingDistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X509PEMEncodedCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyParameterFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ConnectionInsecureTLS>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastRotationTolerance>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyParameterLength>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PasswordMaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ConnectionRequestTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ConnectionStartTLS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TLSMaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TLSMinVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PasswordTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UPNDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionURL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserDistinguishedName>k__BackingField;
    [JsonPropertyNameAttribute("binddn")]
public string BindingDistinguishedName { get; public set; }
    [JsonPropertyNameAttribute("certificate")]
public string X509PEMEncodedCertificate { get; public set; }
    [JsonPropertyNameAttribute("formatter")]
[ObsoleteAttribute]
[JsonIgnoreAttribute]
public string LegacyParameterFormatter { get; public set; }
    [JsonPropertyNameAttribute("insecure_tls")]
public Nullable`1<bool> ConnectionInsecureTLS { get; public set; }
    [JsonPropertyNameAttribute("last_rotation_tolerance")]
public long LastRotationTolerance { get; public set; }
    [JsonPropertyNameAttribute("length")]
[ObsoleteAttribute]
[JsonIgnoreAttribute]
public string LegacyParameterLength { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public long PasswordMaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("password_policy")]
public string PasswordPolicy { get; public set; }
    [JsonPropertyNameAttribute("request_timeout")]
public long ConnectionRequestTimeout { get; public set; }
    [JsonPropertyNameAttribute("starttls")]
public Nullable`1<bool> ConnectionStartTLS { get; public set; }
    [JsonPropertyNameAttribute("tls_max_version")]
public string TLSMaxVersion { get; public set; }
    [JsonPropertyNameAttribute("tls_min_version")]
public string TLSMinVersion { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public long PasswordTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("upndomain")]
public string UPNDomain { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string ConnectionURL { get; public set; }
    [JsonPropertyNameAttribute("userdn")]
public string UserDistinguishedName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BindingDistinguishedName();
    [CompilerGeneratedAttribute]
public void set_BindingDistinguishedName(string value);
    [CompilerGeneratedAttribute]
public string get_X509PEMEncodedCertificate();
    [CompilerGeneratedAttribute]
public void set_X509PEMEncodedCertificate(string value);
    [CompilerGeneratedAttribute]
public string get_LegacyParameterFormatter();
    [CompilerGeneratedAttribute]
public void set_LegacyParameterFormatter(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ConnectionInsecureTLS();
    [CompilerGeneratedAttribute]
public void set_ConnectionInsecureTLS(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public long get_LastRotationTolerance();
    [CompilerGeneratedAttribute]
public void set_LastRotationTolerance(long value);
    [CompilerGeneratedAttribute]
public string get_LegacyParameterLength();
    [CompilerGeneratedAttribute]
public void set_LegacyParameterLength(string value);
    [CompilerGeneratedAttribute]
public long get_PasswordMaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_PasswordMaximumTimeToLive(long value);
    [CompilerGeneratedAttribute]
public string get_PasswordPolicy();
    [CompilerGeneratedAttribute]
public void set_PasswordPolicy(string value);
    [CompilerGeneratedAttribute]
public long get_ConnectionRequestTimeout();
    [CompilerGeneratedAttribute]
public void set_ConnectionRequestTimeout(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ConnectionStartTLS();
    [CompilerGeneratedAttribute]
public void set_ConnectionStartTLS(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_TLSMaxVersion();
    [CompilerGeneratedAttribute]
public void set_TLSMaxVersion(string value);
    [CompilerGeneratedAttribute]
public string get_TLSMinVersion();
    [CompilerGeneratedAttribute]
public void set_TLSMinVersion(string value);
    [CompilerGeneratedAttribute]
public long get_PasswordTimeToLive();
    [CompilerGeneratedAttribute]
public void set_PasswordTimeToLive(long value);
    [CompilerGeneratedAttribute]
public string get_UPNDomain();
    [CompilerGeneratedAttribute]
public void set_UPNDomain(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionURL();
    [CompilerGeneratedAttribute]
public void set_ConnectionURL(string value);
    [CompilerGeneratedAttribute]
public string get_UserDistinguishedName();
    [CompilerGeneratedAttribute]
public void set_UserDistinguishedName(string value);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CreateActiveDirectoryRoleModel : object {
    [CompilerGeneratedAttribute]
private string <ServiceAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("service_account_name")]
public string ServiceAccountName { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public long TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceAccountName();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountName(string value);
    [CompilerGeneratedAttribute]
public long get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(long value);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CreateConnectionConfigModel : ConnectionConfigModel {
    [CompilerGeneratedAttribute]
private string <BindingPassword>k__BackingField;
    [JsonPropertyNameAttribute("bindpassword")]
public string BindingPassword { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BindingPassword();
    [CompilerGeneratedAttribute]
public void set_BindingPassword(string value);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.CreateServiceAccountSetModel : object {
    [CompilerGeneratedAttribute]
private bool <DisableCheckInEnforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ServiceAccountNames>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("disable_check_in_enforcement")]
public bool DisableCheckInEnforcement { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public long MaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("service_account_names")]
public List`1<string> ServiceAccountNames { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public long TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableCheckInEnforcement();
    [CompilerGeneratedAttribute]
public void set_DisableCheckInEnforcement(bool value);
    [CompilerGeneratedAttribute]
public long get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(long value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ServiceAccountNames();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public long get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(long value);
}
public class VaultSharp.V1.SecretsEngines.ActiveDirectory.Models.ServiceAccountSetModel : object {
    [CompilerGeneratedAttribute]
private bool <DisableCheckInEnforcement>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ServiceAccountNames>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("disable_check_in_enforcement")]
public bool DisableCheckInEnforcement { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public long MaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("service_account_names")]
public List`1<string> ServiceAccountNames { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public long TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableCheckInEnforcement();
    [CompilerGeneratedAttribute]
public void set_DisableCheckInEnforcement(bool value);
    [CompilerGeneratedAttribute]
public long get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(long value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ServiceAccountNames();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountNames(List`1<string> value);
    [CompilerGeneratedAttribute]
public long get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(long value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.AliCloudCredentials : object {
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Expiration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityToken>k__BackingField;
    [JsonPropertyNameAttribute("access_key")]
public string AccessKey { get; public set; }
    [JsonPropertyNameAttribute("expiration")]
public Nullable`1<DateTimeOffset> Expiration { get; public set; }
    [JsonPropertyNameAttribute("secret_key")]
public string SecretKey { get; public set; }
    [JsonPropertyNameAttribute("security_token")]
public string SecurityToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessKey();
    [CompilerGeneratedAttribute]
public void set_AccessKey(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public void set_SecretKey(string value);
    [CompilerGeneratedAttribute]
public string get_SecurityToken();
    [CompilerGeneratedAttribute]
public void set_SecurityToken(string value);
}
internal class VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider : object {
    private Polymath _polymath;
    public AliCloudSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider/<ConfigureRootCredentialsAsync>d__2")]
public sealed virtual Task ConfigureRootCredentialsAsync(CreateRootCredentialsConfigModel createRootCredentialsConfigModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider/<ReadRootCredentialsConfigAsync>d__3")]
public sealed virtual Task`1<Secret`1<RootCredentialsConfigModel>> ReadRootCredentialsConfigAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider/<WriteRoleAsync>d__4")]
public sealed virtual Task WriteRoleAsync(string roleName, CreateAliCloudRoleModel createAliCloudRoleModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider/<ReadRoleAsync>d__5")]
public sealed virtual Task`1<Secret`1<AliCloudRoleModel>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider/<ReadAllRolesAsync>d__6")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider/<DeleteRoleAsync>d__7")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AliCloud.AliCloudSecretsEngineProvider/<GetCredentialsAsync>d__8")]
public sealed virtual Task`1<Secret`1<AliCloudCredentials>> GetCredentialsAsync(string aliCloudRoleName, string aliCloudMountPoint, string wrapTimeToLive);
}
public interface VaultSharp.V1.SecretsEngines.AliCloud.IAliCloudSecretsEngine {
    public abstract virtual Task ConfigureRootCredentialsAsync(CreateRootCredentialsConfigModel createRootCredentialsConfigModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<RootCredentialsConfigModel>> ReadRootCredentialsConfigAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task WriteRoleAsync(string roleName, CreateAliCloudRoleModel createAliCloudRoleModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<AliCloudRoleModel>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<AliCloudCredentials>> GetCredentialsAsync(string aliCloudRoleName, string aliCloudMountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.AliCloudInlinePolicyDocumentModel : object {
    [CompilerGeneratedAttribute]
private List`1<AliCloudInlinePolicyDocumentStatementModel> <Statement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [JsonPropertyNameAttribute("Statement")]
public List`1<AliCloudInlinePolicyDocumentStatementModel> Statement { get; public set; }
    [JsonPropertyNameAttribute("version")]
public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AliCloudInlinePolicyDocumentStatementModel> get_Statement();
    [CompilerGeneratedAttribute]
public void set_Statement(List`1<AliCloudInlinePolicyDocumentStatementModel> value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.AliCloudInlinePolicyDocumentStatementModel : object {
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Effect>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Resource>k__BackingField;
    [JsonPropertyNameAttribute("Action")]
public string Action { get; public set; }
    [JsonPropertyNameAttribute("Effect")]
public string Effect { get; public set; }
    [JsonPropertyNameAttribute("Resource")]
public string Resource { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public string get_Effect();
    [CompilerGeneratedAttribute]
public void set_Effect(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.AliCloudInlinePolicyModel : object {
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private AliCloudInlinePolicyDocumentModel <PolicyDocument>k__BackingField;
    [JsonPropertyNameAttribute("hash")]
public string Hash { get; public set; }
    [JsonPropertyNameAttribute("policy_document")]
public AliCloudInlinePolicyDocumentModel PolicyDocument { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public AliCloudInlinePolicyDocumentModel get_PolicyDocument();
    [CompilerGeneratedAttribute]
public void set_PolicyDocument(AliCloudInlinePolicyDocumentModel value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.AliCloudRemotePolicyModel : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.AliCloudRoleModel : object {
    [CompilerGeneratedAttribute]
private List`1<AliCloudInlinePolicyModel> <InlinePolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AliCloudRemotePolicyModel> <RemotePolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleARN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("inline_policies")]
public List`1<AliCloudInlinePolicyModel> InlinePolicies { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public string MaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("remote_policies")]
public List`1<AliCloudRemotePolicyModel> RemotePolicies { get; public set; }
    [JsonPropertyNameAttribute("role_arn")]
public string RoleARN { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AliCloudInlinePolicyModel> get_InlinePolicies();
    [CompilerGeneratedAttribute]
public void set_InlinePolicies(List`1<AliCloudInlinePolicyModel> value);
    [CompilerGeneratedAttribute]
public string get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(string value);
    [CompilerGeneratedAttribute]
public List`1<AliCloudRemotePolicyModel> get_RemotePolicies();
    [CompilerGeneratedAttribute]
public void set_RemotePolicies(List`1<AliCloudRemotePolicyModel> value);
    [CompilerGeneratedAttribute]
public string get_RoleARN();
    [CompilerGeneratedAttribute]
public void set_RoleARN(string value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.CreateAliCloudRoleModel : object {
    [CompilerGeneratedAttribute]
private List`1<AliCloudRemotePolicyModel> <RemotePolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AliCloudInlinePolicyModel> <InlinePolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleARN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumTimeToLive>k__BackingField;
    [JsonIgnoreAttribute]
public List`1<AliCloudRemotePolicyModel> RemotePolicies { get; public set; }
    [JsonPropertyNameAttribute("remote_policies")]
public string RemotePoliciesJson { get; }
    [JsonIgnoreAttribute]
public List`1<AliCloudInlinePolicyModel> InlinePolicies { get; public set; }
    [JsonPropertyNameAttribute("inline_policies")]
public string InlinePoliciesJson { get; }
    [JsonPropertyNameAttribute("role_arn")]
public string RoleARN { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string MaximumTimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AliCloudRemotePolicyModel> get_RemotePolicies();
    [CompilerGeneratedAttribute]
public void set_RemotePolicies(List`1<AliCloudRemotePolicyModel> value);
    public string get_RemotePoliciesJson();
    [CompilerGeneratedAttribute]
public List`1<AliCloudInlinePolicyModel> get_InlinePolicies();
    [CompilerGeneratedAttribute]
public void set_InlinePolicies(List`1<AliCloudInlinePolicyModel> value);
    public string get_InlinePoliciesJson();
    [CompilerGeneratedAttribute]
public string get_RoleARN();
    [CompilerGeneratedAttribute]
public void set_RoleARN(string value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(string value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.CreateRootCredentialsConfigModel : RootCredentialsConfigModel {
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    [JsonPropertyNameAttribute("secret_key")]
public string SecretKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public void set_SecretKey(string value);
}
public class VaultSharp.V1.SecretsEngines.AliCloud.Models.RootCredentialsConfigModel : object {
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    [JsonPropertyNameAttribute("access_key")]
public string AccessKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessKey();
    [CompilerGeneratedAttribute]
public void set_AccessKey(string value);
}
public class VaultSharp.V1.SecretsEngines.AWS.AbstractAWSRoleModel : object {
    [CompilerGeneratedAttribute]
private List`1<string> <RoleARNs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <PolicyARNs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PolicyDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IAMGroups>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IAMTags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSTSTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumSTSTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PermissionsBoundaryARN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyParameterPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyParameterARN>k__BackingField;
    [JsonPropertyNameAttribute("role_arns")]
public List`1<string> RoleARNs { get; public set; }
    [JsonPropertyNameAttribute("policy_arns")]
public List`1<string> PolicyARNs { get; public set; }
    [JsonPropertyNameAttribute("policy_document")]
public string PolicyDocument { get; public set; }
    [JsonPropertyNameAttribute("iam_groups")]
public List`1<string> IAMGroups { get; public set; }
    [JsonPropertyNameAttribute("iam_tags")]
public List`1<string> IAMTags { get; public set; }
    [JsonPropertyNameAttribute("default_sts_ttl")]
public string DefaultSTSTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("max_sts_ttl")]
public string MaximumSTSTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("user_path")]
public string UserPath { get; public set; }
    [JsonPropertyNameAttribute("permissions_boundary_arn")]
public string PermissionsBoundaryARN { get; public set; }
    [JsonPropertyNameAttribute("policy")]
[ObsoleteAttribute]
public string LegacyParameterPolicy { get; public set; }
    [JsonPropertyNameAttribute("arn")]
[ObsoleteAttribute]
public string LegacyParameterARN { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_RoleARNs();
    [CompilerGeneratedAttribute]
public void set_RoleARNs(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_PolicyARNs();
    [CompilerGeneratedAttribute]
public void set_PolicyARNs(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PolicyDocument();
    [CompilerGeneratedAttribute]
public void set_PolicyDocument(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IAMGroups();
    [CompilerGeneratedAttribute]
public void set_IAMGroups(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_IAMTags();
    [CompilerGeneratedAttribute]
public void set_IAMTags(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_DefaultSTSTimeToLive();
    [CompilerGeneratedAttribute]
public void set_DefaultSTSTimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_MaximumSTSTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumSTSTimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_UserPath();
    [CompilerGeneratedAttribute]
public void set_UserPath(string value);
    [CompilerGeneratedAttribute]
public string get_PermissionsBoundaryARN();
    [CompilerGeneratedAttribute]
public void set_PermissionsBoundaryARN(string value);
    [CompilerGeneratedAttribute]
public string get_LegacyParameterPolicy();
    [CompilerGeneratedAttribute]
public void set_LegacyParameterPolicy(string value);
    [CompilerGeneratedAttribute]
public string get_LegacyParameterARN();
    [CompilerGeneratedAttribute]
public void set_LegacyParameterARN(string value);
}
public class VaultSharp.V1.SecretsEngines.AWS.AWSCredentials : object {
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityToken>k__BackingField;
    [JsonPropertyNameAttribute("access_key")]
public string AccessKey { get; public set; }
    [JsonPropertyNameAttribute("secret_key")]
public string SecretKey { get; public set; }
    [JsonPropertyNameAttribute("security_token")]
public string SecurityToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessKey();
    [CompilerGeneratedAttribute]
public void set_AccessKey(string value);
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public void set_SecretKey(string value);
    [CompilerGeneratedAttribute]
public string get_SecurityToken();
    [CompilerGeneratedAttribute]
public void set_SecurityToken(string value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.AWS.AWSCredentialsType : Enum {
    public int value__;
    public static AWSCredentialsType iam_user;
    public static AWSCredentialsType assumed_role;
    public static AWSCredentialsType federation_token;
}
public class VaultSharp.V1.SecretsEngines.AWS.AWSLeaseConfigModel : object {
    [CompilerGeneratedAttribute]
private string <Lease>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumLease>k__BackingField;
    [JsonPropertyNameAttribute("lease")]
public string Lease { get; public set; }
    [JsonPropertyNameAttribute("lease_max")]
public string MaximumLease { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Lease();
    [CompilerGeneratedAttribute]
public void set_Lease(string value);
    [CompilerGeneratedAttribute]
public string get_MaximumLease();
    [CompilerGeneratedAttribute]
public void set_MaximumLease(string value);
}
public class VaultSharp.V1.SecretsEngines.AWS.AWSRoleModel : AbstractAWSRoleModel {
    [CompilerGeneratedAttribute]
private List`1<AWSCredentialsType> <CredentialTypes>k__BackingField;
    [JsonPropertyNameAttribute("credential_types")]
public List`1<AWSCredentialsType> CredentialTypes { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<AWSCredentialsType> get_CredentialTypes();
    [CompilerGeneratedAttribute]
public void set_CredentialTypes(List`1<AWSCredentialsType> value);
}
internal class VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider : object {
    private Polymath _polymath;
    public AWSSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<ConfigureRootIAMCredentialsAsync>d__2")]
public sealed virtual Task ConfigureRootIAMCredentialsAsync(ConfigureRootIAMCredentialsModel configureRootIAMCredentialModel, string awsMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<GetRootIAMCredentialsConfigAsync>d__3")]
public sealed virtual Task`1<Secret`1<RootIAMCredentialsConfigModel>> GetRootIAMCredentialsConfigAsync(string awsMountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<RotateRootIAMCredentialsAsync>d__4")]
public sealed virtual Task`1<Secret`1<RotateRootIAMCredentialsResponseModel>> RotateRootIAMCredentialsAsync(string awsMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<ConfigureLeaseAsync>d__5")]
public sealed virtual Task ConfigureLeaseAsync(AWSLeaseConfigModel leaseConfigModel, string awsMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<GetLeaseConfigAsync>d__6")]
public sealed virtual Task`1<Secret`1<AWSLeaseConfigModel>> GetLeaseConfigAsync(string awsMountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<WriteRoleAsync>d__7")]
public sealed virtual Task WriteRoleAsync(string awsRoleName, CreateAWSRoleModel awsRoleModel, string awsMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<ReadRoleAsync>d__8")]
public sealed virtual Task`1<Secret`1<AWSRoleModel>> ReadRoleAsync(string awsRoleName, string awsMountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<ReadAllRolesAsync>d__9")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string awsMountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<DeleteRoleAsync>d__10")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<GetCredentialsAsync>d__11")]
public sealed virtual Task`1<Secret`1<AWSCredentials>> GetCredentialsAsync(string awsRoleName, string roleARN, string roleSessionName, string awsMountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.AWS.AWSSecretsEngineProvider/<GenerateSTSCredentialsAsync>d__12")]
public sealed virtual Task`1<Secret`1<AWSCredentials>> GenerateSTSCredentialsAsync(string awsRoleName, string roleARN, string roleSessionName, string timeToLive, string awsMountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.AWS.ConfigureRootIAMCredentialsModel : RootIAMCredentialsConfigModel {
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    [JsonPropertyNameAttribute("secret_key")]
public string SecretKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public void set_SecretKey(string value);
}
public class VaultSharp.V1.SecretsEngines.AWS.CreateAWSRoleModel : AbstractAWSRoleModel {
    [CompilerGeneratedAttribute]
private AWSCredentialsType <CredentialType>k__BackingField;
    [JsonPropertyNameAttribute("credential_type")]
public AWSCredentialsType CredentialType { get; public set; }
    [CompilerGeneratedAttribute]
public AWSCredentialsType get_CredentialType();
    [CompilerGeneratedAttribute]
public void set_CredentialType(AWSCredentialsType value);
}
public interface VaultSharp.V1.SecretsEngines.AWS.IAWSSecretsEngine {
    public abstract virtual Task ConfigureRootIAMCredentialsAsync(ConfigureRootIAMCredentialsModel configureRootIAMCredentialsModel, string awsMountPoint);
    public abstract virtual Task`1<Secret`1<RootIAMCredentialsConfigModel>> GetRootIAMCredentialsConfigAsync(string awsMountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<RotateRootIAMCredentialsResponseModel>> RotateRootIAMCredentialsAsync(string awsMountPoint);
    public abstract virtual Task ConfigureLeaseAsync(AWSLeaseConfigModel leaseConfigModel, string awsMountPoint);
    public abstract virtual Task`1<Secret`1<AWSLeaseConfigModel>> GetLeaseConfigAsync(string awsMountPoint, string wrapTimeToLive);
    public abstract virtual Task WriteRoleAsync(string awsRoleName, CreateAWSRoleModel awsRoleModel, string awsMountPoint);
    public abstract virtual Task`1<Secret`1<AWSRoleModel>> ReadRoleAsync(string awsRoleName, string awsMountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string awsMountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<AWSCredentials>> GetCredentialsAsync(string awsRoleName, string roleARN, string roleSessionName, string awsMountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<AWSCredentials>> GenerateSTSCredentialsAsync(string awsRoleName, string roleARN, string roleSessionName, string timeToLive, string awsMountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.AWS.RootIAMCredentialsConfigModel : object {
    [CompilerGeneratedAttribute]
private int <MaxRetries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccessKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Region>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IAMEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <STSEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsernameTemplate>k__BackingField;
    [JsonPropertyNameAttribute("max_retries")]
public int MaxRetries { get; public set; }
    [JsonPropertyNameAttribute("access_key")]
public string AccessKey { get; public set; }
    [JsonPropertyNameAttribute("region")]
public string Region { get; public set; }
    [JsonPropertyNameAttribute("iam_endpoint")]
public string IAMEndpoint { get; public set; }
    [JsonPropertyNameAttribute("sts_endpoint")]
public string STSEndpoint { get; public set; }
    [JsonPropertyNameAttribute("username_template")]
public string UsernameTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxRetries();
    [CompilerGeneratedAttribute]
public void set_MaxRetries(int value);
    [CompilerGeneratedAttribute]
public string get_AccessKey();
    [CompilerGeneratedAttribute]
public void set_AccessKey(string value);
    [CompilerGeneratedAttribute]
public string get_Region();
    [CompilerGeneratedAttribute]
public void set_Region(string value);
    [CompilerGeneratedAttribute]
public string get_IAMEndpoint();
    [CompilerGeneratedAttribute]
public void set_IAMEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_STSEndpoint();
    [CompilerGeneratedAttribute]
public void set_STSEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_UsernameTemplate();
    [CompilerGeneratedAttribute]
public void set_UsernameTemplate(string value);
}
public class VaultSharp.V1.SecretsEngines.AWS.RotateRootIAMCredentialsResponseModel : object {
    [CompilerGeneratedAttribute]
private string <NewAccessKey>k__BackingField;
    [JsonPropertyNameAttribute("access_key")]
public string NewAccessKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_NewAccessKey();
    [CompilerGeneratedAttribute]
public void set_NewAccessKey(string value);
}
public class VaultSharp.V1.SecretsEngines.Azure.AzureCredentials : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientSecret>k__BackingField;
    [JsonPropertyNameAttribute("client_id")]
public string ClientId { get; public set; }
    [JsonPropertyNameAttribute("client_secret")]
public string ClientSecret { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
}
internal class VaultSharp.V1.SecretsEngines.Azure.AzureSecretsEngineProvider : object {
    private Polymath _polymath;
    public AzureSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Azure.AzureSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<AzureCredentials>> GetCredentialsAsync(string azureRoleName, string azureBackendMountPoint, string wrapTimeToLive);
}
public interface VaultSharp.V1.SecretsEngines.Azure.IAzureSecretsEngine {
    public abstract virtual Task`1<Secret`1<AzureCredentials>> GetCredentialsAsync(string azureRoleName, string azureBackendMountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Consul.ConsulCredentials : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [JsonPropertyNameAttribute("token")]
public string Token { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
}
internal class VaultSharp.V1.SecretsEngines.Consul.ConsulSecretsEngineProvider : object {
    private Polymath _polymath;
    public ConsulSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Consul.ConsulSecretsEngineProvider/<ConfigureAccesssync>d__2")]
public sealed virtual Task ConfigureAccesssync(AccessConfigModel accessConfigModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Consul.ConsulSecretsEngineProvider/<WriteRoleAsync>d__3")]
public sealed virtual Task WriteRoleAsync(string roleName, CreateConsulRoleModel createConsulRoleModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Consul.ConsulSecretsEngineProvider/<ReadRoleAsync>d__4")]
public sealed virtual Task`1<Secret`1<ConsulRoleModel>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Consul.ConsulSecretsEngineProvider/<ReadAllRolesAsync>d__5")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Consul.ConsulSecretsEngineProvider/<DeleteRoleAsync>d__6")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Consul.ConsulSecretsEngineProvider/<GetCredentialsAsync>d__7")]
public sealed virtual Task`1<Secret`1<ConsulCredentials>> GetCredentialsAsync(string consulRoleName, string consulBackendMountPoint, string wrapTimeToLive);
}
public interface VaultSharp.V1.SecretsEngines.Consul.IConsulSecretsEngine {
    public abstract virtual Task ConfigureAccesssync(AccessConfigModel accessConfigModel, string mountPoint);
    public abstract virtual Task WriteRoleAsync(string roleName, CreateConsulRoleModel createConsulRoleModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<ConsulRoleModel>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<ConsulCredentials>> GetCredentialsAsync(string consulRoleName, string consulBackendMountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Consul.Models.AccessConfigModel : object {
    [CompilerGeneratedAttribute]
private string <ConsulAddressWithPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UrlScheme>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X509PEMEncodedServerCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X509PEMEncodedTLSClientCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <X509PEMEncodedTLSClientKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsulToken>k__BackingField;
    [JsonPropertyNameAttribute("address")]
public string ConsulAddressWithPort { get; public set; }
    [JsonPropertyNameAttribute("scheme")]
public string UrlScheme { get; public set; }
    [JsonPropertyNameAttribute("ca_cert")]
public string X509PEMEncodedServerCertificate { get; public set; }
    [JsonPropertyNameAttribute("client_cert")]
public string X509PEMEncodedTLSClientCertificate { get; public set; }
    [JsonPropertyNameAttribute("client_key")]
public string X509PEMEncodedTLSClientKey { get; public set; }
    [JsonPropertyNameAttribute("token")]
public string ConsulToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConsulAddressWithPort();
    [CompilerGeneratedAttribute]
public void set_ConsulAddressWithPort(string value);
    [CompilerGeneratedAttribute]
public string get_UrlScheme();
    [CompilerGeneratedAttribute]
public void set_UrlScheme(string value);
    [CompilerGeneratedAttribute]
public string get_X509PEMEncodedServerCertificate();
    [CompilerGeneratedAttribute]
public void set_X509PEMEncodedServerCertificate(string value);
    [CompilerGeneratedAttribute]
public string get_X509PEMEncodedTLSClientCertificate();
    [CompilerGeneratedAttribute]
public void set_X509PEMEncodedTLSClientCertificate(string value);
    [CompilerGeneratedAttribute]
public string get_X509PEMEncodedTLSClientKey();
    [CompilerGeneratedAttribute]
public void set_X509PEMEncodedTLSClientKey(string value);
    [CompilerGeneratedAttribute]
public string get_ConsulToken();
    [CompilerGeneratedAttribute]
public void set_ConsulToken(string value);
}
public class VaultSharp.V1.SecretsEngines.Consul.Models.ConsulRoleModel : object {
    [CompilerGeneratedAttribute]
private string <ConsulNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Base64EncodedACLConsulPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ConsulRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Lease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <NodeIdentities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsulAdminPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ServiceIdentities>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsulTokenType <ConsulTokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedACLPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Base64EncodedACLPolicies>k__BackingField;
    [JsonPropertyNameAttribute("consul_namespace")]
public string ConsulNamespace { get; public set; }
    [JsonPropertyNameAttribute("consul_policies")]
public List`1<string> Base64EncodedACLConsulPolicies { get; public set; }
    [JsonPropertyNameAttribute("consul_roles")]
public List`1<string> ConsulRoles { get; public set; }
    [JsonPropertyNameAttribute("lease")]
public Nullable`1<long> Lease { get; public set; }
    [JsonPropertyNameAttribute("local")]
public bool Local { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public Nullable`1<long> MaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("node_identities")]
public List`1<string> NodeIdentities { get; public set; }
    [JsonPropertyNameAttribute("partition")]
public string ConsulAdminPartition { get; public set; }
    [JsonPropertyNameAttribute("service_identities")]
public List`1<string> ServiceIdentities { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public Nullable`1<long> TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("token_type")]
public ConsulTokenType ConsulTokenType { get; public set; }
    [JsonPropertyNameAttribute("policy")]
public string Base64EncodedACLPolicy { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public List`1<string> Base64EncodedACLPolicies { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConsulNamespace();
    [CompilerGeneratedAttribute]
public void set_ConsulNamespace(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Base64EncodedACLConsulPolicies();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedACLConsulPolicies(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ConsulRoles();
    [CompilerGeneratedAttribute]
public void set_ConsulRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Lease();
    [CompilerGeneratedAttribute]
public void set_Lease(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_NodeIdentities();
    [CompilerGeneratedAttribute]
public void set_NodeIdentities(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ConsulAdminPartition();
    [CompilerGeneratedAttribute]
public void set_ConsulAdminPartition(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ServiceIdentities();
    [CompilerGeneratedAttribute]
public void set_ServiceIdentities(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public ConsulTokenType get_ConsulTokenType();
    [CompilerGeneratedAttribute]
public void set_ConsulTokenType(ConsulTokenType value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedACLPolicy();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedACLPolicy(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Base64EncodedACLPolicies();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedACLPolicies(List`1<string> value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Consul.Models.ConsulTokenType : Enum {
    public int value__;
    public static ConsulTokenType client;
    public static ConsulTokenType management;
}
public class VaultSharp.V1.SecretsEngines.Consul.Models.CreateConsulRoleModel : object {
    [CompilerGeneratedAttribute]
private string <ConsulNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Base64EncodedACLConsulPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ConsulRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Lease>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <MaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <NodeIdentities>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConsulAdminPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ServiceIdentities>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsulTokenType <ConsulTokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedACLPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Base64EncodedACLPolicies>k__BackingField;
    [JsonPropertyNameAttribute("consul_namespace")]
public string ConsulNamespace { get; public set; }
    [JsonPropertyNameAttribute("consul_policies")]
public List`1<string> Base64EncodedACLConsulPolicies { get; public set; }
    [JsonPropertyNameAttribute("consul_roles")]
public List`1<string> ConsulRoles { get; public set; }
    [ObsoleteAttribute]
[JsonPropertyNameAttribute("lease")]
public Nullable`1<long> Lease { get; public set; }
    [JsonPropertyNameAttribute("local")]
public bool Local { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public Nullable`1<long> MaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("node_identities")]
public List`1<string> NodeIdentities { get; public set; }
    [JsonPropertyNameAttribute("partition")]
public string ConsulAdminPartition { get; public set; }
    [JsonPropertyNameAttribute("service_identities")]
public List`1<string> ServiceIdentities { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public Nullable`1<long> TimeToLive { get; public set; }
    [ObsoleteAttribute]
[JsonPropertyNameAttribute("token_type")]
public ConsulTokenType ConsulTokenType { get; public set; }
    [ObsoleteAttribute]
[JsonPropertyNameAttribute("policy")]
public string Base64EncodedACLPolicy { get; public set; }
    [ObsoleteAttribute]
[JsonPropertyNameAttribute("policies")]
public List`1<string> Base64EncodedACLPolicies { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConsulNamespace();
    [CompilerGeneratedAttribute]
public void set_ConsulNamespace(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Base64EncodedACLConsulPolicies();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedACLConsulPolicies(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ConsulRoles();
    [CompilerGeneratedAttribute]
public void set_ConsulRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Lease();
    [CompilerGeneratedAttribute]
public void set_Lease(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_NodeIdentities();
    [CompilerGeneratedAttribute]
public void set_NodeIdentities(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ConsulAdminPartition();
    [CompilerGeneratedAttribute]
public void set_ConsulAdminPartition(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ServiceIdentities();
    [CompilerGeneratedAttribute]
public void set_ServiceIdentities(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public ConsulTokenType get_ConsulTokenType();
    [CompilerGeneratedAttribute]
public void set_ConsulTokenType(ConsulTokenType value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedACLPolicy();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedACLPolicy(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Base64EncodedACLPolicies();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedACLPolicies(List`1<string> value);
}
internal class VaultSharp.V1.SecretsEngines.Cubbyhole.CubbyholeSecretsEngineProvider : object {
    private Polymath _polymath;
    public CubbyholeSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Cubbyhole.CubbyholeSecretsEngineProvider/<ReadSecretAsync>d__2")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadSecretAsync(string secretPath, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Cubbyhole.CubbyholeSecretsEngineProvider/<ReadSecretPathsAsync>d__3")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadSecretPathsAsync(string folderPath, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Cubbyhole.CubbyholeSecretsEngineProvider/<WriteSecretAsync>d__4")]
public sealed virtual Task WriteSecretAsync(string secretPath, IDictionary`2<string, object> values);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Cubbyhole.CubbyholeSecretsEngineProvider/<DeleteSecretAsync>d__5")]
public sealed virtual Task DeleteSecretAsync(string secretPath);
}
public interface VaultSharp.V1.SecretsEngines.Cubbyhole.ICubbyholeSecretsEngine {
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadSecretAsync(string secretPath, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadSecretPathsAsync(string folderPath, string wrapTimeToLive);
    public abstract virtual Task WriteSecretAsync(string secretPath, IDictionary`2<string, object> values);
    public abstract virtual Task DeleteSecretAsync(string secretPath);
}
public static class VaultSharp.V1.SecretsEngines.Database.DatabaseProviders : object {
    public static string MySQL;
    public static string PostgreSQL;
    public static string MongoDB;
    public static string Oracle;
    public static string RedShift;
}
[JsonConverterAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseProviderTypeJsonConverter")]
public class VaultSharp.V1.SecretsEngines.Database.DatabaseProviderType : object {
    [CompilerGeneratedAttribute]
private static DatabaseProviderType <MySQL>k__BackingField;
    [CompilerGeneratedAttribute]
private static DatabaseProviderType <PostgreSQL>k__BackingField;
    [CompilerGeneratedAttribute]
private static DatabaseProviderType <MongoDB>k__BackingField;
    [CompilerGeneratedAttribute]
private static DatabaseProviderType <Oracle>k__BackingField;
    [CompilerGeneratedAttribute]
private static DatabaseProviderType <RedShift>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public static DatabaseProviderType MySQL { get; }
    public static DatabaseProviderType PostgreSQL { get; }
    public static DatabaseProviderType MongoDB { get; }
    public static DatabaseProviderType Oracle { get; }
    public static DatabaseProviderType RedShift { get; }
    public string Type { get; }
    public DatabaseProviderType(string type);
    private static DatabaseProviderType();
    [CompilerGeneratedAttribute]
public static DatabaseProviderType get_MySQL();
    [CompilerGeneratedAttribute]
public static DatabaseProviderType get_PostgreSQL();
    [CompilerGeneratedAttribute]
public static DatabaseProviderType get_MongoDB();
    [CompilerGeneratedAttribute]
public static DatabaseProviderType get_Oracle();
    [CompilerGeneratedAttribute]
public static DatabaseProviderType get_RedShift();
    [CompilerGeneratedAttribute]
public string get_Type();
    public static bool op_Equality(DatabaseProviderType left, DatabaseProviderType right);
    public static bool op_Inequality(DatabaseProviderType left, DatabaseProviderType right);
    public sealed virtual bool Equals(DatabaseProviderType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class VaultSharp.V1.SecretsEngines.Database.DatabaseProviderTypeJsonConverter : JsonConverter`1<DatabaseProviderType> {
    public virtual void Write(Utf8JsonWriter writer, DatabaseProviderType value, JsonSerializerOptions serializer);
    public virtual DatabaseProviderType Read(Utf8JsonReader& reader, Type type, JsonSerializerOptions options);
}
internal class VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider : object {
    private Polymath _polymath;
    public DatabaseSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ConfigureConnectionAsync>d__2")]
public sealed virtual Task ConfigureConnectionAsync(string connectionName, ConnectionConfigModel connectionConfigModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ReadConnectionConfigAsync>d__3")]
public sealed virtual Task`1<Secret`1<ConnectionModel>> ReadConnectionConfigAsync(string connectionName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ReadAllConnectionsAsync>d__4")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllConnectionsAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<DeleteConnectionAsync>d__5")]
public sealed virtual Task DeleteConnectionAsync(string connectionName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ResetConnectionAsync>d__6")]
public sealed virtual Task ResetConnectionAsync(string connectionName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ReloadPluginAsync>d__7")]
public sealed virtual Task ReloadPluginAsync(string pluginName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<RotateRootCredentialsAsync>d__8")]
public sealed virtual Task RotateRootCredentialsAsync(string connectionName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<CreateRoleAsync>d__9")]
public sealed virtual Task CreateRoleAsync(string roleName, Role role, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ReadRoleAsync>d__10")]
public sealed virtual Task`1<Secret`1<Role>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ReadAllRolesAsync>d__11")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<DeleteRoleAsync>d__12")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<GetCredentialsAsync>d__13")]
public sealed virtual Task`1<Secret`1<UsernamePasswordCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<CreateStaticRoleAsync>d__14")]
public sealed virtual Task CreateStaticRoleAsync(string roleName, StaticRole staticRole, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ReadStaticRoleAsync>d__15")]
public sealed virtual Task`1<Secret`1<StaticRole>> ReadStaticRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<ReadAllStaticRolesAsync>d__16")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllStaticRolesAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<DeleteStaticRoleAsync>d__17")]
public sealed virtual Task DeleteStaticRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<GetStaticCredentialsAsync>d__18")]
public sealed virtual Task`1<Secret`1<StaticCredentials>> GetStaticCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Database.DatabaseSecretsEngineProvider/<RotateStaticCredentialsAsync>d__19")]
public sealed virtual Task RotateStaticCredentialsAsync(string roleName, string mountPoint);
}
public interface VaultSharp.V1.SecretsEngines.Database.IDatabaseSecretsEngine {
    public abstract virtual Task ConfigureConnectionAsync(string connectionName, ConnectionConfigModel connectionConfigModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<ConnectionModel>> ReadConnectionConfigAsync(string connectionName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllConnectionsAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteConnectionAsync(string connectionName, string mountPoint);
    public abstract virtual Task ResetConnectionAsync(string connectionName, string mountPoint);
    public abstract virtual Task ReloadPluginAsync(string pluginName, string mountPoint);
    public abstract virtual Task RotateRootCredentialsAsync(string connectionName, string mountPoint);
    public abstract virtual Task CreateRoleAsync(string roleName, Role role, string mountPoint);
    public abstract virtual Task`1<Secret`1<Role>> ReadRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllRolesAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<UsernamePasswordCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task CreateStaticRoleAsync(string roleName, StaticRole staticRole, string mountPoint);
    public abstract virtual Task`1<Secret`1<StaticRole>> ReadStaticRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllStaticRolesAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteStaticRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<StaticCredentials>> GetStaticCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task RotateStaticCredentialsAsync(string roleName, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.Database.Models.ConnectionConfigModel : object {
    [CompilerGeneratedAttribute]
private string <PluginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <VerifyConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RootRotationStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordPolicyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableEscapingSpecialCharactersInUsernameAndPassword>k__BackingField;
    [JsonPropertyNameAttribute("plugin_name")]
public string PluginName { get; public set; }
    [JsonPropertyNameAttribute("plugin_version")]
public string PluginVersion { get; public set; }
    [JsonPropertyNameAttribute("verify_connection")]
public bool VerifyConnection { get; public set; }
    [JsonPropertyNameAttribute("allowed_roles")]
public List`1<string> AllowedRoles { get; public set; }
    [JsonPropertyNameAttribute("root_rotation_statements")]
public List`1<string> RootRotationStatements { get; public set; }
    [JsonPropertyNameAttribute("password_policy")]
public string PasswordPolicyName { get; public set; }
    [JsonPropertyNameAttribute("connection_url")]
public string ConnectionUrl { get; public set; }
    [JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [JsonPropertyNameAttribute("password")]
public string Password { get; public set; }
    [JsonPropertyNameAttribute("disable_escaping")]
public bool DisableEscapingSpecialCharactersInUsernameAndPassword { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PluginName();
    [CompilerGeneratedAttribute]
public void set_PluginName(string value);
    [CompilerGeneratedAttribute]
public string get_PluginVersion();
    [CompilerGeneratedAttribute]
public void set_PluginVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_VerifyConnection();
    [CompilerGeneratedAttribute]
public void set_VerifyConnection(bool value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedRoles();
    [CompilerGeneratedAttribute]
public void set_AllowedRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RootRotationStatements();
    [CompilerGeneratedAttribute]
public void set_RootRotationStatements(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_PasswordPolicyName();
    [CompilerGeneratedAttribute]
public void set_PasswordPolicyName(string value);
    [CompilerGeneratedAttribute]
public string get_ConnectionUrl();
    [CompilerGeneratedAttribute]
public void set_ConnectionUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
    [CompilerGeneratedAttribute]
public bool get_DisableEscapingSpecialCharactersInUsernameAndPassword();
    [CompilerGeneratedAttribute]
public void set_DisableEscapingSpecialCharactersInUsernameAndPassword(bool value);
}
public class VaultSharp.V1.SecretsEngines.Database.Models.ConnectionModel : object {
    [CompilerGeneratedAttribute]
private string <PluginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PluginVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedRoles>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectionDetailsModel <ConnectionDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordPolicyName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RootCredentialsRotateStatements>k__BackingField;
    [JsonPropertyNameAttribute("plugin_name")]
public string PluginName { get; public set; }
    [JsonPropertyNameAttribute("plugin_version")]
public string PluginVersion { get; public set; }
    [JsonPropertyNameAttribute("allowed_roles")]
public List`1<string> AllowedRoles { get; public set; }
    [JsonPropertyNameAttribute("connection_details")]
public ConnectionDetailsModel ConnectionDetails { get; public set; }
    [JsonPropertyNameAttribute("password_policy")]
public string PasswordPolicyName { get; public set; }
    [JsonPropertyNameAttribute("root_credentials_rotate_statements")]
public List`1<string> RootCredentialsRotateStatements { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PluginName();
    [CompilerGeneratedAttribute]
public void set_PluginName(string value);
    [CompilerGeneratedAttribute]
public string get_PluginVersion();
    [CompilerGeneratedAttribute]
public void set_PluginVersion(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedRoles();
    [CompilerGeneratedAttribute]
public void set_AllowedRoles(List`1<string> value);
    [CompilerGeneratedAttribute]
public ConnectionDetailsModel get_ConnectionDetails();
    [CompilerGeneratedAttribute]
public void set_ConnectionDetails(ConnectionDetailsModel value);
    [CompilerGeneratedAttribute]
public string get_PasswordPolicyName();
    [CompilerGeneratedAttribute]
public void set_PasswordPolicyName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RootCredentialsRotateStatements();
    [CompilerGeneratedAttribute]
public void set_RootCredentialsRotateStatements(List`1<string> value);
}
public class VaultSharp.V1.SecretsEngines.Database.Models.PostgreSQL.PostgreSQLConnectionConfigModel : ConnectionConfigModel {
    [CompilerGeneratedAttribute]
private DatabaseProviderType <DatabaseProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumOpenConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumIdleConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumConnectionLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceAccountJson>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsernameTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordAuthentication>k__BackingField;
    [JsonIgnoreAttribute]
public DatabaseProviderType DatabaseProviderType { get; }
    [JsonPropertyNameAttribute("max_open_connections")]
public int MaximumOpenConnections { get; public set; }
    [JsonPropertyNameAttribute("max_idle_connections")]
public int MaximumIdleConnections { get; public set; }
    [JsonPropertyNameAttribute("max_connection_lifetime")]
public string MaximumConnectionLifetime { get; public set; }
    [JsonPropertyNameAttribute("auth_type")]
public string AuthType { get; public set; }
    [JsonPropertyNameAttribute("service_account_json")]
public string ServiceAccountJson { get; public set; }
    [JsonPropertyNameAttribute("username_template")]
public string UsernameTemplate { get; public set; }
    [JsonPropertyNameAttribute("password_authentication")]
public string PasswordAuthentication { get; public set; }
    [CompilerGeneratedAttribute]
public DatabaseProviderType get_DatabaseProviderType();
    [CompilerGeneratedAttribute]
public int get_MaximumOpenConnections();
    [CompilerGeneratedAttribute]
public void set_MaximumOpenConnections(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumIdleConnections();
    [CompilerGeneratedAttribute]
public void set_MaximumIdleConnections(int value);
    [CompilerGeneratedAttribute]
public string get_MaximumConnectionLifetime();
    [CompilerGeneratedAttribute]
public void set_MaximumConnectionLifetime(string value);
    [CompilerGeneratedAttribute]
public string get_AuthType();
    [CompilerGeneratedAttribute]
public void set_AuthType(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceAccountJson();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountJson(string value);
    [CompilerGeneratedAttribute]
public string get_UsernameTemplate();
    [CompilerGeneratedAttribute]
public void set_UsernameTemplate(string value);
    [CompilerGeneratedAttribute]
public string get_PasswordAuthentication();
    [CompilerGeneratedAttribute]
public void set_PasswordAuthentication(string value);
}
public class VaultSharp.V1.SecretsEngines.Database.Role : object {
    [CompilerGeneratedAttribute]
private DatabaseProviderType <DatabaseProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MaximumTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CreationStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RevocationStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RollbackStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RenewStatements>k__BackingField;
    [JsonPropertyNameAttribute("db_name")]
public DatabaseProviderType DatabaseProviderType { get; public set; }
    [JsonPropertyNameAttribute("default_ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string DefaultTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string MaximumTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("creation_statements")]
public List`1<string> CreationStatements { get; public set; }
    [JsonPropertyNameAttribute("revocation_statements")]
public List`1<string> RevocationStatements { get; public set; }
    [JsonPropertyNameAttribute("rollback_statements")]
public List`1<string> RollbackStatements { get; public set; }
    [JsonPropertyNameAttribute("renew_statements")]
public List`1<string> RenewStatements { get; public set; }
    [CompilerGeneratedAttribute]
public DatabaseProviderType get_DatabaseProviderType();
    [CompilerGeneratedAttribute]
public void set_DatabaseProviderType(DatabaseProviderType value);
    [CompilerGeneratedAttribute]
public string get_DefaultTimeToLive();
    [CompilerGeneratedAttribute]
public void set_DefaultTimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_CreationStatements();
    [CompilerGeneratedAttribute]
public void set_CreationStatements(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RevocationStatements();
    [CompilerGeneratedAttribute]
public void set_RevocationStatements(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RollbackStatements();
    [CompilerGeneratedAttribute]
public void set_RollbackStatements(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RenewStatements();
    [CompilerGeneratedAttribute]
public void set_RenewStatements(List`1<string> value);
}
public class VaultSharp.V1.SecretsEngines.Database.StaticCredentials : UsernamePasswordCredentials {
    [CompilerGeneratedAttribute]
private string <LastVaultRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RotationPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("last_vault_rotation")]
public string LastVaultRotation { get; public set; }
    [JsonPropertyNameAttribute("rotation_period")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string RotationPeriod { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LastVaultRotation();
    [CompilerGeneratedAttribute]
public void set_LastVaultRotation(string value);
    [CompilerGeneratedAttribute]
public string get_RotationPeriod();
    [CompilerGeneratedAttribute]
public void set_RotationPeriod(string value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
}
public class VaultSharp.V1.SecretsEngines.Database.StaticRole : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private DatabaseProviderType <DatabaseProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RotationStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RotationPeriod>k__BackingField;
    [JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [JsonPropertyNameAttribute("db_name")]
public DatabaseProviderType DatabaseProviderType { get; public set; }
    [JsonPropertyNameAttribute("rotation_statements")]
public List`1<string> RotationStatements { get; public set; }
    [JsonPropertyNameAttribute("rotation_period")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string RotationPeriod { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public DatabaseProviderType get_DatabaseProviderType();
    [CompilerGeneratedAttribute]
public void set_DatabaseProviderType(DatabaseProviderType value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RotationStatements();
    [CompilerGeneratedAttribute]
public void set_RotationStatements(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_RotationPeriod();
    [CompilerGeneratedAttribute]
public void set_RotationPeriod(string value);
}
internal class VaultSharp.V1.SecretsEngines.Enterprise.EnterpriseProvider : object {
    [CompilerGeneratedAttribute]
private IKeyManagementSecretsEngine <KeyManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private IKMIPSecretsEngine <KMIP>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransformSecretsEngine <Transform>k__BackingField;
    public IKeyManagementSecretsEngine KeyManagement { get; }
    public IKMIPSecretsEngine KMIP { get; }
    public ITransformSecretsEngine Transform { get; }
    public EnterpriseProvider(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual IKeyManagementSecretsEngine get_KeyManagement();
    [CompilerGeneratedAttribute]
public sealed virtual IKMIPSecretsEngine get_KMIP();
    [CompilerGeneratedAttribute]
public sealed virtual ITransformSecretsEngine get_Transform();
}
public interface VaultSharp.V1.SecretsEngines.Enterprise.IEnterprise {
    public IKeyManagementSecretsEngine KeyManagement { get; }
    public IKMIPSecretsEngine KMIP { get; }
    public ITransformSecretsEngine Transform { get; }
    public abstract virtual IKeyManagementSecretsEngine get_KeyManagement();
    public abstract virtual IKMIPSecretsEngine get_KMIP();
    public abstract virtual ITransformSecretsEngine get_Transform();
}
public interface VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.IKeyManagementSecretsEngine {
    public abstract virtual Task`1<Secret`1<KeyManagementKey>> ReadKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<KeyManagementKMSKey>> ReadKeyInKMSAsync(string kmsName, string keyName, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKey : object {
    [CompilerGeneratedAttribute]
private bool <DeletionAllowed>k__BackingField;
    [JsonPropertyNameAttribute("keys")]
public Dictionary`2<string, Dictionary`2<string, object>> Keys;
    [CompilerGeneratedAttribute]
private int <LatestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumEnabledVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [JsonPropertyNameAttribute("deletion_allowed")]
public bool DeletionAllowed { get; public set; }
    [JsonPropertyNameAttribute("latest_version")]
public int LatestVersion { get; public set; }
    [JsonPropertyNameAttribute("min_enabled_version")]
public int MinimumEnabledVersion { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DeletionAllowed();
    [CompilerGeneratedAttribute]
public void set_DeletionAllowed(bool value);
    [CompilerGeneratedAttribute]
public int get_LatestVersion();
    [CompilerGeneratedAttribute]
public void set_LatestVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumEnabledVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumEnabledVersion(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementKMSKey : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Protection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Purpose>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("protection")]
public string Protection { get; public set; }
    [JsonPropertyNameAttribute("purpose")]
public string Purpose { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Protection();
    [CompilerGeneratedAttribute]
public void set_Protection(string value);
    [CompilerGeneratedAttribute]
public string get_Purpose();
    [CompilerGeneratedAttribute]
public void set_Purpose(string value);
}
internal class VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementSecretsEngineProvider : object {
    private Polymath _polymath;
    public KeyManagementSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementSecretsEngineProvider/<ReadKeyAsync>d__2")]
public sealed virtual Task`1<Secret`1<KeyManagementKey>> ReadKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Enterprise.KeyManagement.KeyManagementSecretsEngineProvider/<ReadKeyInKMSAsync>d__3")]
public sealed virtual Task`1<Secret`1<KeyManagementKMSKey>> ReadKeyInKMSAsync(string kmsName, string keyName, string mountPoint, string wrapTimeToLive);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Enterprise.KMIP.CertificateFormat : Enum {
    public int value__;
    public static CertificateFormat None;
    public static CertificateFormat der;
    public static CertificateFormat pem;
    public static CertificateFormat pem_bundle;
}
public interface VaultSharp.V1.SecretsEngines.Enterprise.KMIP.IKMIPSecretsEngine {
    public abstract virtual Task`1<Secret`1<KMIPCredentials>> GetCredentialsAsync(string scopeName, string roleName, CertificateFormat format, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPCredentials : object {
    [CompilerGeneratedAttribute]
private List`1<string> <CAChainContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateKeyContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerialNumber>k__BackingField;
    [JsonPropertyNameAttribute("ca_chain")]
public List`1<string> CAChainContent { get; public set; }
    [JsonPropertyNameAttribute("certificate")]
public string CertificateContent { get; public set; }
    [JsonPropertyNameAttribute("private_key")]
public string PrivateKeyContent { get; public set; }
    [JsonPropertyNameAttribute("serial_number")]
public string SerialNumber { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_CAChainContent();
    [CompilerGeneratedAttribute]
public void set_CAChainContent(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_CertificateContent();
    [CompilerGeneratedAttribute]
public void set_CertificateContent(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateKeyContent();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyContent(string value);
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(string value);
}
internal class VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPSecretsEngineProvider : object {
    private Polymath _polymath;
    public KMIPSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Enterprise.KMIP.KMIPSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<KMIPCredentials>> GetCredentialsAsync(string scopeName, string roleName, CertificateFormat format, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodedItem : object {
    [CompilerGeneratedAttribute]
private string <DecodedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tweak>k__BackingField;
    [JsonPropertyNameAttribute("decoded_value")]
public string DecodedValue { get; public set; }
    [JsonPropertyNameAttribute("tweak")]
public string Tweak { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DecodedValue();
    [CompilerGeneratedAttribute]
public void set_DecodedValue(string value);
    [CompilerGeneratedAttribute]
public string get_Tweak();
    [CompilerGeneratedAttribute]
public void set_Tweak(string value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodedResponse : DecodedItem {
    [CompilerGeneratedAttribute]
private List`1<DecodedItem> <DecodedItems>k__BackingField;
    [JsonPropertyNameAttribute("batch_results")]
public List`1<DecodedItem> DecodedItems { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DecodedItem> get_DecodedItems();
    [CompilerGeneratedAttribute]
public void set_DecodedItems(List`1<DecodedItem> value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodeRequestOptions : DecodingItem {
    [CompilerGeneratedAttribute]
private List`1<DecodingItem> <BatchItems>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
public List`1<DecodingItem> BatchItems { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DecodingItem> get_BatchItems();
    [CompilerGeneratedAttribute]
public void set_BatchItems(List`1<DecodingItem> value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.DecodingItem : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Transformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tweak>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("transformation")]
public string Transformation { get; public set; }
    [JsonPropertyNameAttribute("tweak")]
public string Tweak { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Transformation();
    [CompilerGeneratedAttribute]
public void set_Transformation(string value);
    [CompilerGeneratedAttribute]
public string get_Tweak();
    [CompilerGeneratedAttribute]
public void set_Tweak(string value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodedItem : object {
    [CompilerGeneratedAttribute]
private string <EncodedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tweak>k__BackingField;
    [JsonPropertyNameAttribute("encoded_value")]
public string EncodedValue { get; public set; }
    [JsonPropertyNameAttribute("tweak")]
public string Tweak { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EncodedValue();
    [CompilerGeneratedAttribute]
public void set_EncodedValue(string value);
    [CompilerGeneratedAttribute]
public string get_Tweak();
    [CompilerGeneratedAttribute]
public void set_Tweak(string value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodedResponse : EncodedItem {
    [CompilerGeneratedAttribute]
private List`1<EncodedItem> <EncodedItems>k__BackingField;
    [JsonPropertyNameAttribute("batch_results")]
public List`1<EncodedItem> EncodedItems { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<EncodedItem> get_EncodedItems();
    [CompilerGeneratedAttribute]
public void set_EncodedItems(List`1<EncodedItem> value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodeRequestOptions : EncodingItem {
    [CompilerGeneratedAttribute]
private List`1<EncodingItem> <BatchItems>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
public List`1<EncodingItem> BatchItems { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<EncodingItem> get_BatchItems();
    [CompilerGeneratedAttribute]
public void set_BatchItems(List`1<EncodingItem> value);
}
public class VaultSharp.V1.SecretsEngines.Enterprise.Transform.EncodingItem : object {
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Transformation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tweak>k__BackingField;
    [JsonPropertyNameAttribute("value")]
public string Value { get; public set; }
    [JsonPropertyNameAttribute("transformation")]
public string Transformation { get; public set; }
    [JsonPropertyNameAttribute("tweak")]
public string Tweak { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public string get_Transformation();
    [CompilerGeneratedAttribute]
public void set_Transformation(string value);
    [CompilerGeneratedAttribute]
public string get_Tweak();
    [CompilerGeneratedAttribute]
public void set_Tweak(string value);
}
public interface VaultSharp.V1.SecretsEngines.Enterprise.Transform.ITransformSecretsEngine {
    public abstract virtual Task`1<Secret`1<EncodedResponse>> EncodeAsync(string roleName, EncodeRequestOptions encodeRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<DecodedResponse>> DecodeAsync(string roleName, DecodeRequestOptions decodeRequestOptions, string mountPoint, string wrapTimeToLive);
}
internal class VaultSharp.V1.SecretsEngines.Enterprise.Transform.TransformSecretsEngineProvider : object {
    private Polymath _polymath;
    public TransformSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Enterprise.Transform.TransformSecretsEngineProvider/<EncodeAsync>d__2")]
public sealed virtual Task`1<Secret`1<EncodedResponse>> EncodeAsync(string roleName, EncodeRequestOptions encodeRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Enterprise.Transform.TransformSecretsEngineProvider/<DecodeAsync>d__3")]
public sealed virtual Task`1<Secret`1<DecodedResponse>> DecodeAsync(string roleName, DecodeRequestOptions decodeRequestOptions, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudOAuth2Token : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExpiresAtSeconds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TokenTimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("token")]
public string Token { get; public set; }
    [JsonPropertyNameAttribute("expires_at_seconds")]
public long ExpiresAtSeconds { get; public set; }
    [JsonPropertyNameAttribute("token_ttl")]
public int TokenTimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public long get_ExpiresAtSeconds();
    [CompilerGeneratedAttribute]
public void set_ExpiresAtSeconds(long value);
    [CompilerGeneratedAttribute]
public int get_TokenTimeToLive();
    [CompilerGeneratedAttribute]
public void set_TokenTimeToLive(int value);
}
internal class VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudSecretsEngineProvider : object {
    private Polymath _polymath;
    public GoogleCloudSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudSecretsEngineProvider/<GetOAuth2TokenAsync>d__2")]
public sealed virtual Task`1<Secret`1<GoogleCloudOAuth2Token>> GetOAuth2TokenAsync(string roleset, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudSecretsEngineProvider/<GetServiceAccountKeyAsync>d__3")]
public sealed virtual Task`1<Secret`1<GoogleCloudServiceAccountKey>> GetServiceAccountKeyAsync(string roleset, ServiceAccountKeyAlgorithm keyAlgorithm, ServiceAccountPrivateKeyType privateKeyType, string timeToLive, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloud.GoogleCloudServiceAccountKey : object {
    [CompilerGeneratedAttribute]
private string <Base64EncodedPrivateKeyData>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceAccountKeyAlgorithm <KeyAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceAccountPrivateKeyType <PrivateKeyType>k__BackingField;
    [JsonPropertyNameAttribute("private_key_data")]
public string Base64EncodedPrivateKeyData { get; public set; }
    [JsonPropertyNameAttribute("key_algorithm")]
public ServiceAccountKeyAlgorithm KeyAlgorithm { get; public set; }
    [JsonPropertyNameAttribute("key_type")]
public ServiceAccountPrivateKeyType PrivateKeyType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Base64EncodedPrivateKeyData();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedPrivateKeyData(string value);
    [CompilerGeneratedAttribute]
public ServiceAccountKeyAlgorithm get_KeyAlgorithm();
    [CompilerGeneratedAttribute]
public void set_KeyAlgorithm(ServiceAccountKeyAlgorithm value);
    [CompilerGeneratedAttribute]
public ServiceAccountPrivateKeyType get_PrivateKeyType();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyType(ServiceAccountPrivateKeyType value);
}
public interface VaultSharp.V1.SecretsEngines.GoogleCloud.IGoogleCloudSecretsEngine {
    public abstract virtual Task`1<Secret`1<GoogleCloudOAuth2Token>> GetOAuth2TokenAsync(string roleset, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<GoogleCloudServiceAccountKey>> GetServiceAccountKeyAsync(string roleset, ServiceAccountKeyAlgorithm keyAlgorithm, ServiceAccountPrivateKeyType privateKeyType, string timeToLive, string mountPoint, string wrapTimeToLive);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountKeyAlgorithm : Enum {
    public int value__;
    public static ServiceAccountKeyAlgorithm KEY_ALG_UNSPECIFIED;
    public static ServiceAccountKeyAlgorithm KEY_ALG_RSA_1024;
    public static ServiceAccountKeyAlgorithm KEY_ALG_RSA_2048;
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.GoogleCloud.ServiceAccountPrivateKeyType : Enum {
    public int value__;
    public static ServiceAccountPrivateKeyType TYPE_UNSPECIFIED;
    public static ServiceAccountPrivateKeyType TYPE_PKCS12_FILE;
    public static ServiceAccountPrivateKeyType TYPE_GOOGLE_CREDENTIALS_FILE;
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptionResponse : object {
    [CompilerGeneratedAttribute]
private string <PlainText>k__BackingField;
    [JsonPropertyNameAttribute("plaintext")]
public string PlainText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PlainText();
    [CompilerGeneratedAttribute]
public void set_PlainText(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.DecryptRequestOptions : object {
    [CompilerGeneratedAttribute]
private int <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalAuthenticatedData>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public int KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("ciphertext")]
public string CipherText { get; public set; }
    [JsonPropertyNameAttribute("additional_authenticated_data")]
public string AdditionalAuthenticatedData { get; public set; }
    [CompilerGeneratedAttribute]
public int get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(int value);
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalAuthenticatedData();
    [CompilerGeneratedAttribute]
public void set_AdditionalAuthenticatedData(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptionResponse : object {
    [CompilerGeneratedAttribute]
private string <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public string KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("ciphertext")]
[JsonIgnoreAttribute]
public string CipherText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.EncryptRequestOptions : object {
    [CompilerGeneratedAttribute]
private int <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PlainText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalAuthenticatedData>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public int KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("plaintext")]
public string PlainText { get; public set; }
    [JsonPropertyNameAttribute("additional_authenticated_data")]
public string AdditionalAuthenticatedData { get; public set; }
    [CompilerGeneratedAttribute]
public int get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(int value);
    [CompilerGeneratedAttribute]
public string get_PlainText();
    [CompilerGeneratedAttribute]
public void set_PlainText(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalAuthenticatedData();
    [CompilerGeneratedAttribute]
public void set_AdditionalAuthenticatedData(string value);
}
internal class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.GoogleCloudKMSSecretsEngineProvider : object {
    private Polymath _polymath;
    public GoogleCloudKMSSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.GoogleCloudKMS.GoogleCloudKMSSecretsEngineProvider/<EncryptAsync>d__2")]
public sealed virtual Task`1<Secret`1<EncryptionResponse>> EncryptAsync(string keyName, EncryptRequestOptions encryptRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.GoogleCloudKMS.GoogleCloudKMSSecretsEngineProvider/<DecryptAsync>d__3")]
public sealed virtual Task`1<Secret`1<DecryptionResponse>> DecryptAsync(string keyName, DecryptRequestOptions decryptRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.GoogleCloudKMS.GoogleCloudKMSSecretsEngineProvider/<ReEncryptAsync>d__4")]
public sealed virtual Task`1<Secret`1<ReEncryptionResponse>> ReEncryptAsync(string keyName, ReEncryptRequestOptions reEncryptRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.GoogleCloudKMS.GoogleCloudKMSSecretsEngineProvider/<SignAsync>d__5")]
public sealed virtual Task`1<Secret`1<SignatureResponse>> SignAsync(string keyName, SignatureOptions signatureOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.GoogleCloudKMS.GoogleCloudKMSSecretsEngineProvider/<VerifyAsync>d__6")]
public sealed virtual Task`1<Secret`1<VerificationResponse>> VerifyAsync(string keyName, VerificationOptions verificationOptions, string mountPoint, string wrapTimeToLive);
}
public interface VaultSharp.V1.SecretsEngines.GoogleCloudKMS.IGoogleCloudKMSSecretsEngine {
    public abstract virtual Task`1<Secret`1<EncryptionResponse>> EncryptAsync(string keyName, EncryptRequestOptions encryptRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<DecryptionResponse>> DecryptAsync(string keyName, DecryptRequestOptions decryptRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ReEncryptionResponse>> ReEncryptAsync(string keyName, ReEncryptRequestOptions reEncryptRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<SignatureResponse>> SignAsync(string keyName, SignatureOptions signatureOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<VerificationResponse>> VerifyAsync(string keyName, VerificationOptions verificationOptions, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptionResponse : object {
    [CompilerGeneratedAttribute]
private string <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public string KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("ciphertext")]
public string CipherText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.ReEncryptRequestOptions : object {
    [CompilerGeneratedAttribute]
private int <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalAuthenticatedData>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public int KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("ciphertext")]
public string CipherText { get; public set; }
    [JsonPropertyNameAttribute("additional_authenticated_data")]
public string AdditionalAuthenticatedData { get; public set; }
    [CompilerGeneratedAttribute]
public int get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(int value);
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalAuthenticatedData();
    [CompilerGeneratedAttribute]
public void set_AdditionalAuthenticatedData(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureOptions : object {
    [CompilerGeneratedAttribute]
private int <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Digest>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public int KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("digest")]
public string Digest { get; public set; }
    [CompilerGeneratedAttribute]
public int get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(int value);
    [CompilerGeneratedAttribute]
public string get_Digest();
    [CompilerGeneratedAttribute]
public void set_Digest(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.SignatureResponse : object {
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [JsonPropertyNameAttribute("signature")]
public string Signature { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationOptions : object {
    [CompilerGeneratedAttribute]
private int <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Digest>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public int KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("digest")]
public string Digest { get; public set; }
    [JsonPropertyNameAttribute("signature")]
public string Signature { get; public set; }
    [CompilerGeneratedAttribute]
public int get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(int value);
    [CompilerGeneratedAttribute]
public string get_Digest();
    [CompilerGeneratedAttribute]
public void set_Digest(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
}
public class VaultSharp.V1.SecretsEngines.GoogleCloudKMS.VerificationResponse : object {
    [CompilerGeneratedAttribute]
private bool <Valid>k__BackingField;
    [JsonPropertyNameAttribute("valid")]
public bool Valid { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Valid();
    [CompilerGeneratedAttribute]
public void set_Valid(bool value);
}
public class VaultSharp.V1.SecretsEngines.Identity.BaseEntityResponse : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Aliases>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("aliases")]
public IList`1<string> Aliases { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(IList`1<string> value);
}
public class VaultSharp.V1.SecretsEngines.Identity.BatchDeleteEntitiesRequest : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <EntityIds>k__BackingField;
    [JsonPropertyNameAttribute("entity_ids")]
public IList`1<string> EntityIds { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_EntityIds();
    [CompilerGeneratedAttribute]
public void set_EntityIds(IList`1<string> value);
}
public class VaultSharp.V1.SecretsEngines.Identity.CreateEntityByNameRequest : CustomizableEntityProperties {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class VaultSharp.V1.SecretsEngines.Identity.CreateEntityRequest : CustomizableEntityProperties {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class VaultSharp.V1.SecretsEngines.Identity.CreateEntityResponse : BaseEntityResponse {
}
public class VaultSharp.V1.SecretsEngines.Identity.CreateNamedKeyRequest : NamedKeyInfo {
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedClientIDs>k__BackingField;
    [JsonPropertyNameAttribute("allowed_client_ids")]
public List`1<string> AllowedClientIDs { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedClientIDs();
    [CompilerGeneratedAttribute]
public void set_AllowedClientIDs(List`1<string> value);
}
public class VaultSharp.V1.SecretsEngines.Identity.CreateRoleRequest : RoleInfo {
}
public class VaultSharp.V1.SecretsEngines.Identity.CustomizableEntityProperties : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [JsonPropertyNameAttribute("metadata")]
public IDictionary`2<string, string> Metadata { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public IList`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("disabled")]
public bool Disabled { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
}
public class VaultSharp.V1.SecretsEngines.Identity.Entity : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Policies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Disabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Aliases>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BucketKeyHash>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdateTime>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("metadata")]
public IDictionary`2<string, string> Metadata { get; public set; }
    [JsonPropertyNameAttribute("policies")]
public IList`1<string> Policies { get; public set; }
    [JsonPropertyNameAttribute("disabled")]
public bool Disabled { get; public set; }
    [JsonPropertyNameAttribute("aliases")]
public IList`1<string> Aliases { get; public set; }
    [JsonPropertyNameAttribute("bucket_key_hash")]
public string BucketKeyHash { get; public set; }
    [JsonPropertyNameAttribute("creation_time")]
public DateTime CreationTime { get; public set; }
    [JsonPropertyNameAttribute("last_update_time")]
public DateTime LastUpdateTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Policies();
    [CompilerGeneratedAttribute]
public void set_Policies(IList`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Disabled();
    [CompilerGeneratedAttribute]
public void set_Disabled(bool value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_BucketKeyHash();
    [CompilerGeneratedAttribute]
public void set_BucketKeyHash(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUpdateTime();
    [CompilerGeneratedAttribute]
public void set_LastUpdateTime(DateTime value);
}
internal class VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider : object {
    private Polymath _polymath;
    public IdentitySecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<GetTokenAsync>d__2")]
public sealed virtual Task`1<Secret`1<IdentityToken>> GetTokenAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<IntrospectTokenAsync>d__3")]
public sealed virtual Task`1<Secret`1<bool>> IntrospectTokenAsync(string token, string clientId, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<CreateEntityAsync>d__4")]
public sealed virtual Task`1<Secret`1<CreateEntityResponse>> CreateEntityAsync(CreateEntityRequest createEntityRequest, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<ReadEntityByIdAsync>d__5")]
public sealed virtual Task`1<Secret`1<Entity>> ReadEntityByIdAsync(string entityId, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<UpdateEntityByIdAsync>d__6")]
public sealed virtual Task`1<Secret`1<UpdateEntityResponse>> UpdateEntityByIdAsync(UpdateEntityRequest updateEntityRequest, string entityId, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<DeleteEntityByIdAsync>d__7")]
public sealed virtual Task DeleteEntityByIdAsync(string entityId, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<BatchDeleteEntitiesByIdAsync>d__8")]
public sealed virtual Task BatchDeleteEntitiesByIdAsync(BatchDeleteEntitiesRequest batchDeleteEntitiesRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<ListEntitiesByIdAsync>d__9")]
public sealed virtual Task`1<Secret`1<ListEntitiesResponse>> ListEntitiesByIdAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<CreateEntityByNameAsync>d__10")]
public sealed virtual Task`1<Secret`1<CreateEntityResponse>> CreateEntityByNameAsync(CreateEntityByNameRequest createEntityByNameRequest, string name, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<UpdateEntityByNameAsync>d__11")]
public sealed virtual Task`1<Secret`1<UpdateEntityResponse>> UpdateEntityByNameAsync(UpdateEntityByNameRequest updateEntityByNameRequest, string name, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<ReadEntityByNameAsync>d__12")]
public sealed virtual Task`1<Secret`1<Entity>> ReadEntityByNameAsync(string name, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<DeleteEntityByNameAsync>d__13")]
public sealed virtual Task DeleteEntityByNameAsync(string name, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<ListEntitiesByNameAsync>d__14")]
public sealed virtual Task`1<Secret`1<ListEntitiesResponse>> ListEntitiesByNameAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<MergeEntitiesAsync>d__15")]
public sealed virtual Task MergeEntitiesAsync(MergeEntitiesRequest mergeEntitiesRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<CreateNamedKeyAsync>d__16")]
public sealed virtual Task CreateNamedKeyAsync(string keyName, CreateNamedKeyRequest createNamedKeyRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<ReadNamedKeyAsync>d__17")]
public sealed virtual Task`1<ReadNamedKeyResponse> ReadNamedKeyAsync(string keyName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<CreateRoleAsync>d__18")]
public sealed virtual Task CreateRoleAsync(string roleName, CreateRoleRequest createRoleRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<ReadRoleAsync>d__19")]
public sealed virtual Task`1<ReadRoleResponse> ReadRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<DeleteRoleAsync>d__20")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Identity.IdentitySecretsEngineProvider/<DeleteNamedKeyAsync>d__21")]
public sealed virtual Task DeleteNamedKeyAsync(string keyName, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.Identity.IdentityToken : object {
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("client_id")]
public string ClientId { get; public set; }
    [JsonPropertyNameAttribute("token")]
public string Token { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public int TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public int get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(int value);
}
public interface VaultSharp.V1.SecretsEngines.Identity.IIdentitySecretsEngine {
    public abstract virtual Task CreateRoleAsync(string roleName, CreateRoleRequest createRoleRequest, string mountPoint);
    public abstract virtual Task`1<ReadRoleResponse> ReadRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task CreateNamedKeyAsync(string keyName, CreateNamedKeyRequest createNamedKeyRequest, string mountPoint);
    public abstract virtual Task`1<ReadNamedKeyResponse> ReadNamedKeyAsync(string keyName, string mountPoint);
    public abstract virtual Task DeleteNamedKeyAsync(string keyName, string mountPoint);
    public abstract virtual Task`1<Secret`1<IdentityToken>> GetTokenAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<bool>> IntrospectTokenAsync(string token, string clientId, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<CreateEntityResponse>> CreateEntityAsync(CreateEntityRequest createEntityRequest, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<Entity>> ReadEntityByIdAsync(string entityId, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task BatchDeleteEntitiesByIdAsync(BatchDeleteEntitiesRequest batchDeleteEntitiesRequest, string mountPoint);
    public abstract virtual Task`1<Secret`1<CreateEntityResponse>> CreateEntityByNameAsync(CreateEntityByNameRequest createEntityByNameRequest, string name, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteEntityByIdAsync(string entityId, string mountPoint);
    public abstract virtual Task DeleteEntityByNameAsync(string name, string mountPoint);
    public abstract virtual Task`1<Secret`1<ListEntitiesResponse>> ListEntitiesByIdAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListEntitiesResponse>> ListEntitiesByNameAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task MergeEntitiesAsync(MergeEntitiesRequest mergeEntitiesRequest, string mountPoint);
    public abstract virtual Task`1<Secret`1<Entity>> ReadEntityByNameAsync(string name, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<UpdateEntityResponse>> UpdateEntityByIdAsync(UpdateEntityRequest updateEntityRequest, string entityId, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<UpdateEntityResponse>> UpdateEntityByNameAsync(UpdateEntityByNameRequest updateEntityByNameRequest, string name, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Identity.ListEntitiesResponse : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Keys>k__BackingField;
    [JsonPropertyNameAttribute("keys")]
public List`1<string> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(List`1<string> value);
}
public class VaultSharp.V1.SecretsEngines.Identity.MergeEntitiesRequest : object {
    [CompilerGeneratedAttribute]
private IList`1<string> <FromEntityIds>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToEntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [JsonPropertyNameAttribute("from_entity_ids")]
public IList`1<string> FromEntityIds { get; public set; }
    [JsonPropertyNameAttribute("to_entity_id")]
public string ToEntityId { get; public set; }
    [JsonPropertyNameAttribute("force")]
public bool Force { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<string> get_FromEntityIds();
    [CompilerGeneratedAttribute]
public void set_FromEntityIds(IList`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ToEntityId();
    [CompilerGeneratedAttribute]
public void set_ToEntityId(string value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
}
public class VaultSharp.V1.SecretsEngines.Identity.NamedKeyInfo : object {
    [CompilerGeneratedAttribute]
private string <RotationPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VerificationTimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [JsonPropertyNameAttribute("rotation_period")]
public string RotationPeriod { get; public set; }
    [JsonPropertyNameAttribute("verification_ttl")]
public string VerificationTimeToLive { get; public set; }
    [JsonPropertyNameAttribute("algorithm")]
public string Algorithm { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RotationPeriod();
    [CompilerGeneratedAttribute]
public void set_RotationPeriod(string value);
    [CompilerGeneratedAttribute]
public string get_VerificationTimeToLive();
    [CompilerGeneratedAttribute]
public void set_VerificationTimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(string value);
}
public class VaultSharp.V1.SecretsEngines.Identity.ReadNamedKeyResponse : object {
    [CompilerGeneratedAttribute]
private NamedKeyInfo <Data>k__BackingField;
    [JsonPropertyNameAttribute("data")]
public NamedKeyInfo Data { get; public set; }
    [CompilerGeneratedAttribute]
public NamedKeyInfo get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(NamedKeyInfo value);
}
public class VaultSharp.V1.SecretsEngines.Identity.ReadRoleResponse : object {
    [CompilerGeneratedAttribute]
private RoleInfo <Data>k__BackingField;
    [JsonPropertyNameAttribute("data")]
public RoleInfo Data { get; public set; }
    [CompilerGeneratedAttribute]
public RoleInfo get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(RoleInfo value);
}
public class VaultSharp.V1.SecretsEngines.Identity.RoleInfo : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Template>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("key")]
public string Key { get; public set; }
    [JsonPropertyNameAttribute("template")]
public string Template { get; public set; }
    [JsonPropertyNameAttribute("client_id")]
public string ClientId { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public string TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public string get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
}
public class VaultSharp.V1.SecretsEngines.Identity.UpdateEntityByNameRequest : CustomizableEntityProperties {
}
public class VaultSharp.V1.SecretsEngines.Identity.UpdateEntityRequest : CustomizableEntityProperties {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class VaultSharp.V1.SecretsEngines.Identity.UpdateEntityResponse : BaseEntityResponse {
}
public interface VaultSharp.V1.SecretsEngines.ISecretsEngine {
    public IEnterprise Enterprise { get; }
    public IActiveDirectorySecretsEngine ActiveDirectory { get; }
    public IAliCloudSecretsEngine AliCloud { get; }
    public IAWSSecretsEngine AWS { get; }
    public IAzureSecretsEngine Azure { get; }
    public IConsulSecretsEngine Consul { get; }
    public ICubbyholeSecretsEngine Cubbyhole { get; }
    public IDatabaseSecretsEngine Database { get; }
    public IGoogleCloudSecretsEngine GoogleCloud { get; }
    public IGoogleCloudKMSSecretsEngine GoogleCloudKMS { get; }
    public IIdentitySecretsEngine Identity { get; }
    public IKeyValueSecretsEngine KeyValue { get; }
    public IKubernetesSecretsEngine Kubernetes { get; }
    public IMongoDBAtlasSecretsEngine MongoDBAtlas { get; }
    public INomadSecretsEngine Nomad { get; }
    public IOpenLDAPSecretsEngine OpenLDAP { get; }
    public IPKISecretsEngine PKI { get; }
    public IRabbitMQSecretsEngine RabbitMQ { get; }
    public ISSHSecretsEngine SSH { get; }
    public ITerraformSecretsEngine Terraform { get; }
    public ITOTPSecretsEngine TOTP { get; }
    public ITransitSecretsEngine Transit { get; }
    public abstract virtual IEnterprise get_Enterprise();
    public abstract virtual IActiveDirectorySecretsEngine get_ActiveDirectory();
    public abstract virtual IAliCloudSecretsEngine get_AliCloud();
    public abstract virtual IAWSSecretsEngine get_AWS();
    public abstract virtual IAzureSecretsEngine get_Azure();
    public abstract virtual IConsulSecretsEngine get_Consul();
    public abstract virtual ICubbyholeSecretsEngine get_Cubbyhole();
    public abstract virtual IDatabaseSecretsEngine get_Database();
    public abstract virtual IGoogleCloudSecretsEngine get_GoogleCloud();
    public abstract virtual IGoogleCloudKMSSecretsEngine get_GoogleCloudKMS();
    public abstract virtual IIdentitySecretsEngine get_Identity();
    public abstract virtual IKeyValueSecretsEngine get_KeyValue();
    public abstract virtual IKubernetesSecretsEngine get_Kubernetes();
    public abstract virtual IMongoDBAtlasSecretsEngine get_MongoDBAtlas();
    public abstract virtual INomadSecretsEngine get_Nomad();
    public abstract virtual IOpenLDAPSecretsEngine get_OpenLDAP();
    public abstract virtual IPKISecretsEngine get_PKI();
    public abstract virtual IRabbitMQSecretsEngine get_RabbitMQ();
    public abstract virtual ISSHSecretsEngine get_SSH();
    public abstract virtual ITerraformSecretsEngine get_Terraform();
    public abstract virtual ITOTPSecretsEngine get_TOTP();
    public abstract virtual ITransitSecretsEngine get_Transit();
}
public interface VaultSharp.V1.SecretsEngines.KeyValue.IKeyValueSecretsEngine {
    public IKeyValueSecretsEngineV1 V1 { get; }
    public IKeyValueSecretsEngineV2 V2 { get; }
    public abstract virtual IKeyValueSecretsEngineV1 get_V1();
    public abstract virtual IKeyValueSecretsEngineV2 get_V2();
}
internal class VaultSharp.V1.SecretsEngines.KeyValue.KeyValueSecretsEngineProvider : object {
    [CompilerGeneratedAttribute]
private IKeyValueSecretsEngineV1 <V1>k__BackingField;
    [CompilerGeneratedAttribute]
private IKeyValueSecretsEngineV2 <V2>k__BackingField;
    public IKeyValueSecretsEngineV1 V1 { get; }
    public IKeyValueSecretsEngineV2 V2 { get; }
    public KeyValueSecretsEngineProvider(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual IKeyValueSecretsEngineV1 get_V1();
    [CompilerGeneratedAttribute]
public sealed virtual IKeyValueSecretsEngineV2 get_V2();
}
public interface VaultSharp.V1.SecretsEngines.KeyValue.V1.IKeyValueSecretsEngineV1 {
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadSecretAsync(string path, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<T>> ReadSecretAsync(string path, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadSecretPathsAsync(string path, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> WriteSecretAsync(string path, IDictionary`2<string, object> values, string mountPoint);
    public abstract virtual Task`1<Secret`1<T>> WriteSecretAsync(string path, T values, string mountPoint);
    public abstract virtual Task DeleteSecretAsync(string path, string mountPoint);
}
internal class VaultSharp.V1.SecretsEngines.KeyValue.V1.KeyValueSecretsEngineV1Provider : object {
    private Polymath _polymath;
    public KeyValueSecretsEngineV1Provider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V1.KeyValueSecretsEngineV1Provider/<ReadSecretAsync>d__2")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadSecretAsync(string path, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V1.KeyValueSecretsEngineV1Provider/<ReadSecretAsync>d__3`1")]
public sealed virtual Task`1<Secret`1<T>> ReadSecretAsync(string path, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V1.KeyValueSecretsEngineV1Provider/<ReadSecretPathsAsync>d__4")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadSecretPathsAsync(string path, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V1.KeyValueSecretsEngineV1Provider/<WriteSecretAsync>d__5")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> WriteSecretAsync(string path, IDictionary`2<string, object> values, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V1.KeyValueSecretsEngineV1Provider/<WriteSecretAsync>d__6`1")]
public sealed virtual Task`1<Secret`1<T>> WriteSecretAsync(string path, T values, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V1.KeyValueSecretsEngineV1Provider/<DeleteSecretAsync>d__7")]
public sealed virtual Task DeleteSecretAsync(string path, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.KeyValue.V2.CustomMetadataRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CASRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeleteVersionAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CustomMetadata>k__BackingField;
    [JsonPropertyNameAttribute("max_versions")]
public Nullable`1<int> MaxVersion { get; public set; }
    [JsonPropertyNameAttribute("cas_required")]
public Nullable`1<bool> CASRequired { get; public set; }
    [JsonPropertyNameAttribute("delete_version_after")]
public string DeleteVersionAfter { get; public set; }
    [JsonPropertyNameAttribute("options")]
public Dictionary`2<string, object> Options { get; public set; }
    [JsonPropertyNameAttribute("custom_metadata")]
public Dictionary`2<string, string> CustomMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxVersion();
    [CompilerGeneratedAttribute]
public void set_MaxVersion(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CASRequired();
    [CompilerGeneratedAttribute]
public void set_CASRequired(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DeleteVersionAfter();
    [CompilerGeneratedAttribute]
public void set_DeleteVersionAfter(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CustomMetadata();
    [CompilerGeneratedAttribute]
public void set_CustomMetadata(Dictionary`2<string, string> value);
}
public interface VaultSharp.V1.SecretsEngines.KeyValue.V2.IKeyValueSecretsEngineV2 {
    public abstract virtual Task ConfigureAsync(KeyValue2ConfigModel configModel, string mountPoint);
    public abstract virtual Task`1<Secret`1<KeyValue2ConfigModel>> ReadConfigAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<SecretData>> ReadSecretAsync(string path, Nullable`1<int> version, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<SecretData`1<T>>> ReadSecretAsync(string path, Nullable`1<int> version, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<CurrentSecretMetadata>> WriteSecretAsync(string path, T data, Nullable`1<int> checkAndSet, string mountPoint);
    public abstract virtual Task`1<Secret`1<CurrentSecretMetadata>> PatchSecretAsync(string path, PatchSecretDataRequest patchSecretDataRequest, string mountPoint);
    public abstract virtual Task`1<Secret`1<SecretSubkeysInfo>> ReadSecretSubkeysAsync(string path, int version, int depth, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteSecretAsync(string path, string mountPoint);
    public abstract virtual Task DeleteSecretVersionsAsync(string path, IList`1<int> versions, string mountPoint);
    public abstract virtual Task UndeleteSecretVersionsAsync(string path, IList`1<int> versions, string mountPoint);
    public abstract virtual Task DestroySecretVersionsAsync(string path, IList`1<int> versions, string mountPoint);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadSecretPathsAsync(string path, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<FullSecretMetadata>> ReadSecretMetadataAsync(string path, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task WriteSecretMetadataAsync(string path, CustomMetadataRequest customMetadataRequest, string mountPoint);
    public abstract virtual Task PatchSecretMetadataAsync(string path, CustomMetadataRequest customMetadataRequest, string mountPoint);
    public abstract virtual Task DeleteMetadataAsync(string path, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValue2ConfigModel : object {
    [CompilerGeneratedAttribute]
private bool <CASRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeleteVersionAfter>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxVersions>k__BackingField;
    [JsonPropertyNameAttribute("cas_required")]
public bool CASRequired { get; public set; }
    [JsonPropertyNameAttribute("delete_version_after")]
public string DeleteVersionAfter { get; public set; }
    [JsonPropertyNameAttribute("max_versions")]
public int MaxVersions { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CASRequired();
    [CompilerGeneratedAttribute]
public void set_CASRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_DeleteVersionAfter();
    [CompilerGeneratedAttribute]
public void set_DeleteVersionAfter(string value);
    [CompilerGeneratedAttribute]
public int get_MaxVersions();
    [CompilerGeneratedAttribute]
public void set_MaxVersions(int value);
}
internal class VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider : object {
    private Polymath _polymath;
    public KeyValueSecretsEngineV2Provider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<ConfigureAsync>d__2")]
public sealed virtual Task ConfigureAsync(KeyValue2ConfigModel configModel, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<ReadConfigAsync>d__3")]
public sealed virtual Task`1<Secret`1<KeyValue2ConfigModel>> ReadConfigAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<ReadSecretAsync>d__4")]
public sealed virtual Task`1<Secret`1<SecretData>> ReadSecretAsync(string path, Nullable`1<int> version, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<ReadSecretAsync>d__5`1")]
public sealed virtual Task`1<Secret`1<SecretData`1<T>>> ReadSecretAsync(string path, Nullable`1<int> version, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<WriteSecretAsync>d__6`1")]
public sealed virtual Task`1<Secret`1<CurrentSecretMetadata>> WriteSecretAsync(string path, T data, Nullable`1<int> checkAndSet, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<PatchSecretAsync>d__7")]
public sealed virtual Task`1<Secret`1<CurrentSecretMetadata>> PatchSecretAsync(string path, PatchSecretDataRequest patchSecretDataRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<ReadSecretSubkeysAsync>d__8")]
public sealed virtual Task`1<Secret`1<SecretSubkeysInfo>> ReadSecretSubkeysAsync(string path, int version, int depth, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<DeleteSecretAsync>d__9")]
public sealed virtual Task DeleteSecretAsync(string path, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<DeleteSecretVersionsAsync>d__10")]
public sealed virtual Task DeleteSecretVersionsAsync(string path, IList`1<int> versions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<UndeleteSecretVersionsAsync>d__11")]
public sealed virtual Task UndeleteSecretVersionsAsync(string path, IList`1<int> versions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<DestroySecretVersionsAsync>d__12")]
public sealed virtual Task DestroySecretVersionsAsync(string path, IList`1<int> versions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<ReadSecretPathsAsync>d__13")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadSecretPathsAsync(string path, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<ReadSecretMetadataAsync>d__14")]
public sealed virtual Task`1<Secret`1<FullSecretMetadata>> ReadSecretMetadataAsync(string path, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<WriteSecretMetadataAsync>d__15")]
public sealed virtual Task WriteSecretMetadataAsync(string path, CustomMetadataRequest customMetadataRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<PatchSecretMetadataAsync>d__16")]
public sealed virtual Task PatchSecretMetadataAsync(string path, CustomMetadataRequest customMetadataRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.KeyValue.V2.KeyValueSecretsEngineV2Provider/<DeleteMetadataAsync>d__17")]
public sealed virtual Task DeleteMetadataAsync(string path, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.KeyValue.V2.PatchSecretDataRequest : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Data>k__BackingField;
    [JsonPropertyNameAttribute("options")]
public Dictionary`2<string, object> Options { get; public set; }
    [JsonPropertyNameAttribute("data")]
public Dictionary`2<string, object> Data { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Dictionary`2<string, object> value);
}
public interface VaultSharp.V1.SecretsEngines.Kubernetes.IKubernetesSecretsEngine {
    public abstract virtual Task`1<Secret`1<KubernetesCredentials>> GetCredentialsAsync(string kubernetesRoleName, string kubernetesNamespace, bool clusterRoleBinding, string timeToLive, string kubernetesBackendMountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Kubernetes.KubernetesCredentials : object {
    [CompilerGeneratedAttribute]
private string <ServiceAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceAccountNamespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServiceAccountToken>k__BackingField;
    [JsonPropertyNameAttribute("service_account_name")]
public string ServiceAccountName { get; public set; }
    [JsonPropertyNameAttribute("service_account_namespace")]
public string ServiceAccountNamespace { get; public set; }
    [JsonPropertyNameAttribute("service_account_token")]
public string ServiceAccountToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServiceAccountName();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountName(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceAccountNamespace();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountNamespace(string value);
    [CompilerGeneratedAttribute]
public string get_ServiceAccountToken();
    [CompilerGeneratedAttribute]
public void set_ServiceAccountToken(string value);
}
internal class VaultSharp.V1.SecretsEngines.Kubernetes.KubernetesSecretsEngineProvider : object {
    private Polymath _polymath;
    public KubernetesSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Kubernetes.KubernetesSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<KubernetesCredentials>> GetCredentialsAsync(string kubernetesRoleName, string kubernetesNamespace, bool clusterRoleBinding, string timeToLive, string kubernetesBackendMountPoint, string wrapTimeToLive);
}
public interface VaultSharp.V1.SecretsEngines.MongoDBAtlas.IMongoDBAtlasSecretsEngine {
    public abstract virtual Task`1<Secret`1<MongoDBAtlasCredentials>> GetCredentialsAsync(string name, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasCredentials : object {
    [CompilerGeneratedAttribute]
private string <LeaseDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LeaseRenewable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrivateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [JsonPropertyNameAttribute("lease_duration")]
public string LeaseDuration { get; public set; }
    [JsonPropertyNameAttribute("lease_renewable")]
public string LeaseRenewable { get; public set; }
    [JsonPropertyNameAttribute("description")]
public string Description { get; public set; }
    [JsonPropertyNameAttribute("private_key")]
public string PrivateKey { get; public set; }
    [JsonPropertyNameAttribute("public_key")]
public string PublicKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LeaseDuration();
    [CompilerGeneratedAttribute]
public void set_LeaseDuration(string value);
    [CompilerGeneratedAttribute]
public string get_LeaseRenewable();
    [CompilerGeneratedAttribute]
public void set_LeaseRenewable(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_PrivateKey();
    [CompilerGeneratedAttribute]
public void set_PrivateKey(string value);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public void set_PublicKey(string value);
}
internal class VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasSecretsEngineProvider : object {
    private Polymath _polymath;
    public MongoDBAtlasSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.MongoDBAtlas.MongoDBAtlasSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<MongoDBAtlasCredentials>> GetCredentialsAsync(string name, string mountPoint, string wrapTimeToLive);
}
public interface VaultSharp.V1.SecretsEngines.Nomad.INomadSecretsEngine {
    public abstract virtual Task`1<Secret`1<NomadCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Nomad.NomadCredentials : object {
    [CompilerGeneratedAttribute]
private string <AccessorId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretId>k__BackingField;
    [JsonPropertyNameAttribute("accessor_id")]
public string AccessorId { get; public set; }
    [JsonPropertyNameAttribute("secret_id")]
public string SecretId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccessorId();
    [CompilerGeneratedAttribute]
public void set_AccessorId(string value);
    [CompilerGeneratedAttribute]
public string get_SecretId();
    [CompilerGeneratedAttribute]
public void set_SecretId(string value);
}
internal class VaultSharp.V1.SecretsEngines.Nomad.NomadSecretsEngineProvider : object {
    private Polymath _polymath;
    public NomadSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Nomad.NomadSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<NomadCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.OpenLDAP.DynamicRole : object {
    [CompilerGeneratedAttribute]
private string <CreationLDIF>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeletionLDIF>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RollbackLDIF>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsernameTemplate>k__BackingField;
    [JsonPropertyNameAttribute("creation_ldif")]
public string CreationLDIF { get; public set; }
    [JsonPropertyNameAttribute("deletion_ldif")]
public string DeletionLDIF { get; public set; }
    [JsonPropertyNameAttribute("rollback_ldif")]
public string RollbackLDIF { get; public set; }
    [JsonPropertyNameAttribute("username_template")]
public string UsernameTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CreationLDIF();
    [CompilerGeneratedAttribute]
public void set_CreationLDIF(string value);
    [CompilerGeneratedAttribute]
public string get_DeletionLDIF();
    [CompilerGeneratedAttribute]
public void set_DeletionLDIF(string value);
    [CompilerGeneratedAttribute]
public string get_RollbackLDIF();
    [CompilerGeneratedAttribute]
public void set_RollbackLDIF(string value);
    [CompilerGeneratedAttribute]
public string get_UsernameTemplate();
    [CompilerGeneratedAttribute]
public void set_UsernameTemplate(string value);
}
public interface VaultSharp.V1.SecretsEngines.OpenLDAP.IOpenLDAPSecretsEngine {
    public abstract virtual Task CreateDynamicRoleAsync(string roleName, DynamicRole role, string mountPoint);
    public abstract virtual Task`1<Secret`1<DynamicRole>> ReadDynamicRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllDynamicRolesAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteDynamicRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<LDAPCredentials>> GetDynamicCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task CreateStaticRoleAsync(string roleName, StaticRole staticRole, string mountPoint);
    public abstract virtual Task`1<Secret`1<StaticRole>> ReadStaticRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllStaticRolesAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteStaticRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task`1<Secret`1<StaticCredentials>> GetStaticCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task RotateStaticCredentialsAsync(string roleName, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.OpenLDAP.LDAPCredentials : UsernamePasswordCredentials {
    [CompilerGeneratedAttribute]
private List`1<string> <DistinguishedNames>k__BackingField;
    [JsonPropertyNameAttribute("distinguished_names")]
public List`1<string> DistinguishedNames { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_DistinguishedNames();
    [CompilerGeneratedAttribute]
public void set_DistinguishedNames(List`1<string> value);
}
internal class VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider : object {
    private Polymath _polymath;
    public OpenLDAPSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<CreateDynamicRoleAsync>d__2")]
public sealed virtual Task CreateDynamicRoleAsync(string roleName, DynamicRole role, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<ReadDynamicRoleAsync>d__3")]
public sealed virtual Task`1<Secret`1<DynamicRole>> ReadDynamicRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<ReadAllDynamicRolesAsync>d__4")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllDynamicRolesAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<DeleteDynamicRoleAsync>d__5")]
public sealed virtual Task DeleteDynamicRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<GetDynamicCredentialsAsync>d__6")]
public sealed virtual Task`1<Secret`1<LDAPCredentials>> GetDynamicCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<CreateStaticRoleAsync>d__7")]
public sealed virtual Task CreateStaticRoleAsync(string roleName, StaticRole staticRole, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<ReadStaticRoleAsync>d__8")]
public sealed virtual Task`1<Secret`1<StaticRole>> ReadStaticRoleAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<ReadAllStaticRolesAsync>d__9")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllStaticRolesAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<DeleteStaticRoleAsync>d__10")]
public sealed virtual Task DeleteStaticRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<GetStaticCredentialsAsync>d__11")]
public sealed virtual Task`1<Secret`1<StaticCredentials>> GetStaticCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.OpenLDAP.OpenLDAPSecretsEngineProvider/<RotateStaticCredentialsAsync>d__12")]
public sealed virtual Task RotateStaticCredentialsAsync(string roleName, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.OpenLDAP.StaticCredentials : UsernamePasswordCredentials {
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastVaultRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RotationPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastPassword>k__BackingField;
    [JsonPropertyNameAttribute("dn")]
public string DistinguishedName { get; public set; }
    [JsonPropertyNameAttribute("last_vault_rotation")]
public string LastVaultRotation { get; public set; }
    [JsonPropertyNameAttribute("rotation_period")]
public int RotationPeriod { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public int TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("last_password")]
public string LastPassword { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public string get_LastVaultRotation();
    [CompilerGeneratedAttribute]
public void set_LastVaultRotation(string value);
    [CompilerGeneratedAttribute]
public int get_RotationPeriod();
    [CompilerGeneratedAttribute]
public void set_RotationPeriod(int value);
    [CompilerGeneratedAttribute]
public int get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(int value);
    [CompilerGeneratedAttribute]
public string get_LastPassword();
    [CompilerGeneratedAttribute]
public void set_LastPassword(string value);
}
public class VaultSharp.V1.SecretsEngines.OpenLDAP.StaticRole : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DistinguishedName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RotationPeriod>k__BackingField;
    [JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [JsonPropertyNameAttribute("dn")]
public string DistinguishedName { get; public set; }
    [JsonPropertyNameAttribute("rotation_period")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string RotationPeriod { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_DistinguishedName();
    [CompilerGeneratedAttribute]
public void set_DistinguishedName(string value);
    [CompilerGeneratedAttribute]
public string get_RotationPeriod();
    [CompilerGeneratedAttribute]
public void set_RotationPeriod(string value);
}
public abstract class VaultSharp.V1.SecretsEngines.PKI.AbstractCertificateData : object {
    [CompilerGeneratedAttribute]
private CertificateFormat <CertificateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerialNumber>k__BackingField;
    [JsonIgnoreAttribute]
public CertificateFormat CertificateFormat { get; public set; }
    [JsonPropertyNameAttribute("certificate")]
public string CertificateContent { get; public set; }
    [JsonPropertyNameAttribute("serial_number")]
public string SerialNumber { get; public set; }
    [CompilerGeneratedAttribute]
public CertificateFormat get_CertificateFormat();
    [CompilerGeneratedAttribute]
public void set_CertificateFormat(CertificateFormat value);
    [CompilerGeneratedAttribute]
public string get_CertificateContent();
    [CompilerGeneratedAttribute]
public void set_CertificateContent(string value);
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(string value);
}
public abstract class VaultSharp.V1.SecretsEngines.PKI.AbstractIssuedCertificateData : AbstractCertificateData {
    [CompilerGeneratedAttribute]
private string <IssuingCACertificateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CAChainContent>k__BackingField;
    [JsonPropertyNameAttribute("issuing_ca")]
public string IssuingCACertificateContent { get; public set; }
    [JsonPropertyNameAttribute("ca_chain")]
public String[] CAChainContent { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IssuingCACertificateContent();
    [CompilerGeneratedAttribute]
public void set_IssuingCACertificateContent(string value);
    [CompilerGeneratedAttribute]
public String[] get_CAChainContent();
    [CompilerGeneratedAttribute]
public void set_CAChainContent(String[] value);
}
public class VaultSharp.V1.SecretsEngines.PKI.CertificateAutoTidyRequest : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntervalDuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyCertStore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyRevokedCerts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyRevokedCertIssuerAssociations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyExpiredIssuers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SafetyBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuerSafetyBuffer>k__BackingField;
    [JsonPropertyNameAttribute("enabled")]
public bool Enabled { get; public set; }
    [JsonPropertyNameAttribute("interval_duration")]
public string IntervalDuration { get; public set; }
    [JsonPropertyNameAttribute("tidy_cert_store")]
public bool TidyCertStore { get; public set; }
    [JsonPropertyNameAttribute("tidy_revoked_certs")]
public bool TidyRevokedCerts { get; public set; }
    [JsonPropertyNameAttribute("tidy_revoked_cert_issuer_associations")]
public bool TidyRevokedCertIssuerAssociations { get; public set; }
    [JsonPropertyNameAttribute("tidy_expired_issuers")]
public bool TidyExpiredIssuers { get; public set; }
    [JsonPropertyNameAttribute("safety_buffer")]
public string SafetyBuffer { get; public set; }
    [JsonPropertyNameAttribute("issuer_safety_buffer")]
public string IssuerSafetyBuffer { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public string get_IntervalDuration();
    [CompilerGeneratedAttribute]
public void set_IntervalDuration(string value);
    [CompilerGeneratedAttribute]
public bool get_TidyCertStore();
    [CompilerGeneratedAttribute]
public void set_TidyCertStore(bool value);
    [CompilerGeneratedAttribute]
public bool get_TidyRevokedCerts();
    [CompilerGeneratedAttribute]
public void set_TidyRevokedCerts(bool value);
    [CompilerGeneratedAttribute]
public bool get_TidyRevokedCertIssuerAssociations();
    [CompilerGeneratedAttribute]
public void set_TidyRevokedCertIssuerAssociations(bool value);
    [CompilerGeneratedAttribute]
public bool get_TidyExpiredIssuers();
    [CompilerGeneratedAttribute]
public void set_TidyExpiredIssuers(bool value);
    [CompilerGeneratedAttribute]
public string get_SafetyBuffer();
    [CompilerGeneratedAttribute]
public void set_SafetyBuffer(string value);
    [CompilerGeneratedAttribute]
public string get_IssuerSafetyBuffer();
    [CompilerGeneratedAttribute]
public void set_IssuerSafetyBuffer(string value);
}
public class VaultSharp.V1.SecretsEngines.PKI.CertificateCredentials : AbstractIssuedCertificateData {
    [CompilerGeneratedAttribute]
private string <PrivateKeyContent>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateKeyType <PrivateKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Expiration>k__BackingField;
    [JsonPropertyNameAttribute("private_key")]
public string PrivateKeyContent { get; public set; }
    [JsonPropertyNameAttribute("private_key_type")]
public CertificateKeyType PrivateKeyType { get; public set; }
    [JsonPropertyNameAttribute("expiration")]
public long Expiration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PrivateKeyContent();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyContent(string value);
    [CompilerGeneratedAttribute]
public CertificateKeyType get_PrivateKeyType();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyType(CertificateKeyType value);
    [CompilerGeneratedAttribute]
public long get_Expiration();
    [CompilerGeneratedAttribute]
public void set_Expiration(long value);
}
public class VaultSharp.V1.SecretsEngines.PKI.CertificateCredentialsRequestOptions : object {
    [CompilerGeneratedAttribute]
private string <CommonName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPSubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <URISubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OtherSubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateFormat <CertificateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private PrivateKeyFormat <PrivateKeyFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeCommonNameFromSubjectAlternativeNames>k__BackingField;
    [JsonPropertyNameAttribute("common_name")]
public string CommonName { get; public set; }
    [JsonPropertyNameAttribute("alt_names")]
public string SubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("ip_sans")]
public string IPSubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("uri_sans")]
public string URISubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("other_sans")]
public string OtherSubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("format")]
public CertificateFormat CertificateFormat { get; public set; }
    [JsonPropertyNameAttribute("private_key_format")]
public PrivateKeyFormat PrivateKeyFormat { get; public set; }
    [JsonPropertyNameAttribute("exclude_cn_from_sans")]
public bool ExcludeCommonNameFromSubjectAlternativeNames { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommonName();
    [CompilerGeneratedAttribute]
public void set_CommonName(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_SubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_IPSubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_IPSubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_URISubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_URISubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_OtherSubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_OtherSubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
    [CompilerGeneratedAttribute]
public CertificateFormat get_CertificateFormat();
    [CompilerGeneratedAttribute]
public void set_CertificateFormat(CertificateFormat value);
    [CompilerGeneratedAttribute]
public PrivateKeyFormat get_PrivateKeyFormat();
    [CompilerGeneratedAttribute]
public void set_PrivateKeyFormat(PrivateKeyFormat value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeCommonNameFromSubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_ExcludeCommonNameFromSubjectAlternativeNames(bool value);
}
public class VaultSharp.V1.SecretsEngines.PKI.CertificateData : AbstractCertificateData {
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.PKI.CertificateFormat : Enum {
    public int value__;
    public static CertificateFormat None;
    public static CertificateFormat der;
    public static CertificateFormat pem;
    public static CertificateFormat pem_bundle;
    public static CertificateFormat json;
}
public class VaultSharp.V1.SecretsEngines.PKI.CertificateKeys : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Keys>k__BackingField;
    [JsonPropertyNameAttribute("keys")]
public List`1<string> Keys { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(List`1<string> value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.PKI.CertificateKeyType : Enum {
    public int value__;
    public static CertificateKeyType None;
    public static CertificateKeyType rsa;
    public static CertificateKeyType ec;
    public static CertificateKeyType ed25519;
}
public class VaultSharp.V1.SecretsEngines.PKI.CertificateTidyRequest : object {
    [CompilerGeneratedAttribute]
private bool <TidyCertStore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyRevokedCerts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyRevokedCertIssuerAssociations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyExpiredIssuers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SafetyBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IssuerSafetyBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PauseDuration>k__BackingField;
    [JsonPropertyNameAttribute("tidy_cert_store")]
public bool TidyCertStore { get; public set; }
    [JsonPropertyNameAttribute("tidy_revoked_certs")]
public bool TidyRevokedCerts { get; public set; }
    [JsonPropertyNameAttribute("tidy_revoked_cert_issuer_associations")]
public bool TidyRevokedCertIssuerAssociations { get; public set; }
    [JsonPropertyNameAttribute("tidy_expired_issuers")]
public bool TidyExpiredIssuers { get; public set; }
    [JsonPropertyNameAttribute("safety_buffer")]
public string SafetyBuffer { get; public set; }
    [JsonPropertyNameAttribute("issuer_safety_buffer")]
public string IssuerSafetyBuffer { get; public set; }
    [JsonPropertyNameAttribute("pause_duration")]
public string PauseDuration { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_TidyCertStore();
    [CompilerGeneratedAttribute]
public void set_TidyCertStore(bool value);
    [CompilerGeneratedAttribute]
public bool get_TidyRevokedCerts();
    [CompilerGeneratedAttribute]
public void set_TidyRevokedCerts(bool value);
    [CompilerGeneratedAttribute]
public bool get_TidyRevokedCertIssuerAssociations();
    [CompilerGeneratedAttribute]
public void set_TidyRevokedCertIssuerAssociations(bool value);
    [CompilerGeneratedAttribute]
public bool get_TidyExpiredIssuers();
    [CompilerGeneratedAttribute]
public void set_TidyExpiredIssuers(bool value);
    [CompilerGeneratedAttribute]
public string get_SafetyBuffer();
    [CompilerGeneratedAttribute]
public void set_SafetyBuffer(string value);
    [CompilerGeneratedAttribute]
public string get_IssuerSafetyBuffer();
    [CompilerGeneratedAttribute]
public void set_IssuerSafetyBuffer(string value);
    [CompilerGeneratedAttribute]
public string get_PauseDuration();
    [CompilerGeneratedAttribute]
public void set_PauseDuration(string value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.PKI.CertificateTidyState : Enum {
    public int value__;
    public static CertificateTidyState Inactive;
    public static CertificateTidyState Running;
    public static CertificateTidyState Finished;
    public static CertificateTidyState Error;
}
public class VaultSharp.V1.SecretsEngines.PKI.CertificateTidyStatus : object {
    [CompilerGeneratedAttribute]
private string <SafetyBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyCertStore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TidyRevokedCerts>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateTidyState <TidyState>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <TimeStarted>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <TimeFinished>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CertStoreDeletedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RevokedCertDeletedCount>k__BackingField;
    [JsonPropertyNameAttribute("safety_buffer")]
public string SafetyBuffer { get; public set; }
    [JsonPropertyNameAttribute("tidy_cert_store")]
public bool TidyCertStore { get; public set; }
    [JsonPropertyNameAttribute("tidy_revoked_certs")]
public bool TidyRevokedCerts { get; public set; }
    [JsonPropertyNameAttribute("state")]
public CertificateTidyState TidyState { get; public set; }
    [JsonPropertyNameAttribute("error")]
public string Error { get; public set; }
    [JsonPropertyNameAttribute("time_started")]
public Nullable`1<DateTimeOffset> TimeStarted { get; public set; }
    [JsonPropertyNameAttribute("time_finished")]
public Nullable`1<DateTimeOffset> TimeFinished { get; public set; }
    [JsonPropertyNameAttribute("message")]
public string Message { get; public set; }
    [JsonPropertyNameAttribute("cert_store_deleted_count")]
public int CertStoreDeletedCount { get; public set; }
    [JsonPropertyNameAttribute("revoked_cert_deleted_count")]
public string RevokedCertDeletedCount { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SafetyBuffer();
    [CompilerGeneratedAttribute]
public void set_SafetyBuffer(string value);
    [CompilerGeneratedAttribute]
public bool get_TidyCertStore();
    [CompilerGeneratedAttribute]
public void set_TidyCertStore(bool value);
    [CompilerGeneratedAttribute]
public bool get_TidyRevokedCerts();
    [CompilerGeneratedAttribute]
public void set_TidyRevokedCerts(bool value);
    [CompilerGeneratedAttribute]
public CertificateTidyState get_TidyState();
    [CompilerGeneratedAttribute]
public void set_TidyState(CertificateTidyState value);
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_TimeStarted();
    [CompilerGeneratedAttribute]
public void set_TimeStarted(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_TimeFinished();
    [CompilerGeneratedAttribute]
public void set_TimeFinished(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_CertStoreDeletedCount();
    [CompilerGeneratedAttribute]
public void set_CertStoreDeletedCount(int value);
    [CompilerGeneratedAttribute]
public string get_RevokedCertDeletedCount();
    [CompilerGeneratedAttribute]
public void set_RevokedCertDeletedCount(string value);
}
public interface VaultSharp.V1.SecretsEngines.PKI.IPKISecretsEngine {
    public abstract virtual Task`1<Secret`1<CertificateCredentials>> GetCredentialsAsync(string pkiRoleName, CertificateCredentialsRequestOptions certificateCredentialRequestOptions, string pkiBackendMountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<SignedCertificateData>> SignCertificateAsync(string pkiRoleName, SignCertificatesRequestOptions signCertificateRequestOptions, string pkiBackendMountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<RevokeCertificateResponse>> RevokeCertificateAsync(string serialNumber, string pkiBackendMountPoint);
    public abstract virtual Task TidyAsync(CertificateTidyRequest certificateTidyRequest, string pkiBackendMountPoint);
    public abstract virtual Task AutoTidyAsync(CertificateAutoTidyRequest certificateAutoTidyRequest, string pkiBackendMountPoint);
    public abstract virtual Task`1<Secret`1<CertificateTidyStatus>> GetTidyStatusAsync(string pkiBackendMountPoint);
    public abstract virtual Task`1<Secret`1<CertificateTidyStatus>> CancelTidyAsync(string pkiBackendMountPoint);
    public abstract virtual Task`1<RawCertificateData> ReadCACertificateAsync(CertificateFormat certificateFormat, string pkiBackendMountPoint);
    public abstract virtual Task`1<Secret`1<CertificateData>> ReadCertificateAsync(string serialNumber, string pkiBackendMountPoint);
    public abstract virtual Task`1<Secret`1<CertificateKeys>> ListCertificatesAsync(string pkiBackendMountPoint);
    public abstract virtual Task`1<Secret`1<CertificateKeys>> ListRevokedCertificatesAsync(string pkiBackendMountPoint);
    public abstract virtual Task`1<Secret`1<CertificateData>> ReadDefaultIssuerCertificateChainAsync(CertificateFormat certificateFormat, string pkiBackendMountPoint);
}
internal class VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider : object {
    private Polymath _polymath;
    public PKISecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<CertificateCredentials>> GetCredentialsAsync(string pkiRoleName, CertificateCredentialsRequestOptions certificateCredentialRequestOptions, string pkiBackendMountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<SignCertificateAsync>d__3")]
public sealed virtual Task`1<Secret`1<SignedCertificateData>> SignCertificateAsync(string pkiRoleName, SignCertificatesRequestOptions signCertificatesRequestOptions, string pkiBackendMountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<RevokeCertificateAsync>d__4")]
public sealed virtual Task`1<Secret`1<RevokeCertificateResponse>> RevokeCertificateAsync(string serialNumber, string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<TidyAsync>d__5")]
public sealed virtual Task TidyAsync(CertificateTidyRequest certificateTidyRequest, string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<AutoTidyAsync>d__6")]
public sealed virtual Task AutoTidyAsync(CertificateAutoTidyRequest certificateAutoTidyRequest, string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<GetTidyStatusAsync>d__7")]
public sealed virtual Task`1<Secret`1<CertificateTidyStatus>> GetTidyStatusAsync(string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<CancelTidyAsync>d__8")]
public sealed virtual Task`1<Secret`1<CertificateTidyStatus>> CancelTidyAsync(string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<ReadCACertificateAsync>d__9")]
public sealed virtual Task`1<RawCertificateData> ReadCACertificateAsync(CertificateFormat certificateFormat, string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<ReadCertificateAsync>d__10")]
public sealed virtual Task`1<Secret`1<CertificateData>> ReadCertificateAsync(string serialNumber, string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<ListCertificatesAsync>d__11")]
public sealed virtual Task`1<Secret`1<CertificateKeys>> ListCertificatesAsync(string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<ListRevokedCertificatesAsync>d__12")]
public sealed virtual Task`1<Secret`1<CertificateKeys>> ListRevokedCertificatesAsync(string pkiBackendMountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.PKI.PKISecretsEngineProvider/<ReadDefaultIssuerCertificateChainAsync>d__13")]
public sealed virtual Task`1<Secret`1<CertificateData>> ReadDefaultIssuerCertificateChainAsync(CertificateFormat certificateFormat, string pkiBackendMountPoint);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.PKI.PrivateKeyFormat : Enum {
    public int value__;
    public static PrivateKeyFormat None;
    public static PrivateKeyFormat der;
    public static PrivateKeyFormat pkcs8;
}
public class VaultSharp.V1.SecretsEngines.PKI.RawCertificateData : object {
    [CompilerGeneratedAttribute]
private string <CertificateContent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RevocationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <RevocationTimeRFC3339>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RevocationIssuerId>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateFormat <EncodedCertificateFormat>k__BackingField;
    [JsonPropertyNameAttribute("certificate")]
public string CertificateContent { get; public set; }
    [JsonPropertyNameAttribute("revocation_time")]
public int RevocationTime { get; public set; }
    [JsonPropertyNameAttribute("revocation_time_rfc3339")]
public Nullable`1<DateTimeOffset> RevocationTimeRFC3339 { get; public set; }
    [JsonPropertyNameAttribute("issuer_id")]
public string RevocationIssuerId { get; public set; }
    public CertificateFormat EncodedCertificateFormat { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CertificateContent();
    [CompilerGeneratedAttribute]
public void set_CertificateContent(string value);
    [CompilerGeneratedAttribute]
public int get_RevocationTime();
    [CompilerGeneratedAttribute]
public void set_RevocationTime(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_RevocationTimeRFC3339();
    [CompilerGeneratedAttribute]
public void set_RevocationTimeRFC3339(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_RevocationIssuerId();
    [CompilerGeneratedAttribute]
public void set_RevocationIssuerId(string value);
    [CompilerGeneratedAttribute]
public CertificateFormat get_EncodedCertificateFormat();
    [CompilerGeneratedAttribute]
public void set_EncodedCertificateFormat(CertificateFormat value);
}
public class VaultSharp.V1.SecretsEngines.PKI.RevokeCertificateResponse : object {
    [CompilerGeneratedAttribute]
private int <RevocationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <RevocationTimeRFC3339>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RevocationIssuerId>k__BackingField;
    [JsonPropertyNameAttribute("revocation_time")]
public int RevocationTime { get; public set; }
    [JsonPropertyNameAttribute("revocation_time_rfc3339")]
public Nullable`1<DateTimeOffset> RevocationTimeRFC3339 { get; public set; }
    [JsonPropertyNameAttribute("issuer_id")]
public string RevocationIssuerId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RevocationTime();
    [CompilerGeneratedAttribute]
public void set_RevocationTime(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_RevocationTimeRFC3339();
    [CompilerGeneratedAttribute]
public void set_RevocationTimeRFC3339(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_RevocationIssuerId();
    [CompilerGeneratedAttribute]
public void set_RevocationIssuerId(string value);
}
public class VaultSharp.V1.SecretsEngines.PKI.SignCertificatesRequestOptions : object {
    [CompilerGeneratedAttribute]
private string <Csr>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommonName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IPSubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <URISubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OtherSubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private CertificateFormat <CertificateFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeCommonNameFromSubjectAlternativeNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveRootsFromChain>k__BackingField;
    [JsonPropertyNameAttribute("csr")]
public string Csr { get; public set; }
    [JsonPropertyNameAttribute("common_name")]
public string CommonName { get; public set; }
    [JsonPropertyNameAttribute("alt_names")]
public string SubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("ip_sans")]
public string IPSubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("uri_sans")]
public string URISubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("other_sans")]
public string OtherSubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
public string TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("format")]
public CertificateFormat CertificateFormat { get; public set; }
    [JsonPropertyNameAttribute("exclude_cn_from_sans")]
public bool ExcludeCommonNameFromSubjectAlternativeNames { get; public set; }
    [JsonPropertyNameAttribute("remove_roots_from_chain")]
public bool RemoveRootsFromChain { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Csr();
    [CompilerGeneratedAttribute]
public void set_Csr(string value);
    [CompilerGeneratedAttribute]
public string get_CommonName();
    [CompilerGeneratedAttribute]
public void set_CommonName(string value);
    [CompilerGeneratedAttribute]
public string get_SubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_SubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_IPSubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_IPSubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_URISubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_URISubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_OtherSubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_OtherSubjectAlternativeNames(string value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
    [CompilerGeneratedAttribute]
public CertificateFormat get_CertificateFormat();
    [CompilerGeneratedAttribute]
public void set_CertificateFormat(CertificateFormat value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeCommonNameFromSubjectAlternativeNames();
    [CompilerGeneratedAttribute]
public void set_ExcludeCommonNameFromSubjectAlternativeNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveRootsFromChain();
    [CompilerGeneratedAttribute]
public void set_RemoveRootsFromChain(bool value);
}
public class VaultSharp.V1.SecretsEngines.PKI.SignedCertificateData : AbstractIssuedCertificateData {
}
public interface VaultSharp.V1.SecretsEngines.RabbitMQ.IRabbitMQSecretsEngine {
    public abstract virtual Task`1<Secret`1<UsernamePasswordCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task ConfigureLeaseAsync(RabbitMQLease lease, string mountPoint);
    public abstract virtual Task CreateRoleAsync(string roleName, RabbitMQRole role, string mountPoint);
    public abstract virtual Task`1<Secret`1<RabbitMQRole>> ReadRoleAsync(string roleName, string mountPoint);
    public abstract virtual Task DeleteRoleAsync(string roleName, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQLease : object {
    [CompilerGeneratedAttribute]
private int <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumTimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("ttl")]
public int TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("max_ttl")]
public int MaximumTimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public int get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(int value);
    [CompilerGeneratedAttribute]
public int get_MaximumTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaximumTimeToLive(int value);
}
public class VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQRole : object {
    [CompilerGeneratedAttribute]
private string <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VHosts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VHostTopics>k__BackingField;
    [JsonPropertyNameAttribute("tags")]
public string Tags { get; public set; }
    [JsonPropertyNameAttribute("vhosts")]
public string VHosts { get; public set; }
    [JsonPropertyNameAttribute("vhost_topics")]
public string VHostTopics { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(string value);
    [CompilerGeneratedAttribute]
public string get_VHosts();
    [CompilerGeneratedAttribute]
public void set_VHosts(string value);
    [CompilerGeneratedAttribute]
public string get_VHostTopics();
    [CompilerGeneratedAttribute]
public void set_VHostTopics(string value);
}
internal class VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQSecretsEngineProvider : object {
    private Polymath _polymath;
    public RabbitMQSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<UsernamePasswordCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQSecretsEngineProvider/<ConfigureLeaseAsync>d__3")]
public sealed virtual Task ConfigureLeaseAsync(RabbitMQLease lease, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQSecretsEngineProvider/<CreateRoleAsync>d__4")]
public sealed virtual Task CreateRoleAsync(string roleName, RabbitMQRole role, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQSecretsEngineProvider/<ReadRoleAsync>d__5")]
public sealed virtual Task`1<Secret`1<RabbitMQRole>> ReadRoleAsync(string roleName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.RabbitMQ.RabbitMQSecretsEngineProvider/<DeleteRoleAsync>d__6")]
public sealed virtual Task DeleteRoleAsync(string roleName, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.SecretsEngine : AbstractBackend {
    [CompilerGeneratedAttribute]
private SecretsEngineType <Type>k__BackingField;
    [JsonPropertyNameAttribute("type")]
public SecretsEngineType Type { get; public set; }
    [CompilerGeneratedAttribute]
public SecretsEngineType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(SecretsEngineType value);
}
public class VaultSharp.V1.SecretsEngines.SecretsEngineMountPoints : object {
    [CompilerGeneratedAttribute]
private string <System>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActiveDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AliCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AWS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Azure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Consul>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cubbyhole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GoogleCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GoogleCloudKMS>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyManagement>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KMIP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyValueV1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyValueV2>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Kubernetes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MongoDBAtlas>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nomad>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OpenLDAP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PKI>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RabbitMQ>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SSH>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Terraform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TOTP>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Transit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Cassandra>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HanaDB>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MongoDB>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MSSQL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MySqlMariaDB>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PostgreSQL>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Oracle>k__BackingField;
    public string System { get; public set; }
    public string ActiveDirectory { get; public set; }
    public string AliCloud { get; public set; }
    public string AWS { get; public set; }
    public string Azure { get; public set; }
    public string Consul { get; public set; }
    public string Cubbyhole { get; public set; }
    public string Database { get; public set; }
    public string GoogleCloud { get; public set; }
    public string GoogleCloudKMS { get; public set; }
    public string KeyManagement { get; public set; }
    public string KMIP { get; public set; }
    public string KeyValueV1 { get; public set; }
    public string KeyValueV2 { get; public set; }
    public string Kubernetes { get; public set; }
    public string MongoDBAtlas { get; public set; }
    public string Identity { get; public set; }
    public string Nomad { get; public set; }
    public string OpenLDAP { get; public set; }
    public string PKI { get; public set; }
    public string RabbitMQ { get; public set; }
    public string SSH { get; public set; }
    public string Terraform { get; public set; }
    public string TOTP { get; public set; }
    public string Transform { get; public set; }
    public string Transit { get; public set; }
    public string Cassandra { get; public set; }
    public string HanaDB { get; public set; }
    public string MongoDB { get; public set; }
    public string MSSQL { get; public set; }
    public string MySqlMariaDB { get; public set; }
    public string PostgreSQL { get; public set; }
    public string Oracle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_System();
    [CompilerGeneratedAttribute]
public void set_System(string value);
    [CompilerGeneratedAttribute]
public string get_ActiveDirectory();
    [CompilerGeneratedAttribute]
public void set_ActiveDirectory(string value);
    [CompilerGeneratedAttribute]
public string get_AliCloud();
    [CompilerGeneratedAttribute]
public void set_AliCloud(string value);
    [CompilerGeneratedAttribute]
public string get_AWS();
    [CompilerGeneratedAttribute]
public void set_AWS(string value);
    [CompilerGeneratedAttribute]
public string get_Azure();
    [CompilerGeneratedAttribute]
public void set_Azure(string value);
    [CompilerGeneratedAttribute]
public string get_Consul();
    [CompilerGeneratedAttribute]
public void set_Consul(string value);
    [CompilerGeneratedAttribute]
public string get_Cubbyhole();
    [CompilerGeneratedAttribute]
public void set_Cubbyhole(string value);
    [CompilerGeneratedAttribute]
public string get_Database();
    [CompilerGeneratedAttribute]
public void set_Database(string value);
    [CompilerGeneratedAttribute]
public string get_GoogleCloud();
    [CompilerGeneratedAttribute]
public void set_GoogleCloud(string value);
    [CompilerGeneratedAttribute]
public string get_GoogleCloudKMS();
    [CompilerGeneratedAttribute]
public void set_GoogleCloudKMS(string value);
    [CompilerGeneratedAttribute]
public string get_KeyManagement();
    [CompilerGeneratedAttribute]
public void set_KeyManagement(string value);
    [CompilerGeneratedAttribute]
public string get_KMIP();
    [CompilerGeneratedAttribute]
public void set_KMIP(string value);
    [CompilerGeneratedAttribute]
public string get_KeyValueV1();
    [CompilerGeneratedAttribute]
public void set_KeyValueV1(string value);
    [CompilerGeneratedAttribute]
public string get_KeyValueV2();
    [CompilerGeneratedAttribute]
public void set_KeyValueV2(string value);
    [CompilerGeneratedAttribute]
public string get_Kubernetes();
    [CompilerGeneratedAttribute]
public void set_Kubernetes(string value);
    [CompilerGeneratedAttribute]
public string get_MongoDBAtlas();
    [CompilerGeneratedAttribute]
public void set_MongoDBAtlas(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Nomad();
    [CompilerGeneratedAttribute]
public void set_Nomad(string value);
    [CompilerGeneratedAttribute]
public string get_OpenLDAP();
    [CompilerGeneratedAttribute]
public void set_OpenLDAP(string value);
    [CompilerGeneratedAttribute]
public string get_PKI();
    [CompilerGeneratedAttribute]
public void set_PKI(string value);
    [CompilerGeneratedAttribute]
public string get_RabbitMQ();
    [CompilerGeneratedAttribute]
public void set_RabbitMQ(string value);
    [CompilerGeneratedAttribute]
public string get_SSH();
    [CompilerGeneratedAttribute]
public void set_SSH(string value);
    [CompilerGeneratedAttribute]
public string get_Terraform();
    [CompilerGeneratedAttribute]
public void set_Terraform(string value);
    [CompilerGeneratedAttribute]
public string get_TOTP();
    [CompilerGeneratedAttribute]
public void set_TOTP(string value);
    [CompilerGeneratedAttribute]
public string get_Transform();
    [CompilerGeneratedAttribute]
public void set_Transform(string value);
    [CompilerGeneratedAttribute]
public string get_Transit();
    [CompilerGeneratedAttribute]
public void set_Transit(string value);
    [CompilerGeneratedAttribute]
public string get_Cassandra();
    [CompilerGeneratedAttribute]
public void set_Cassandra(string value);
    [CompilerGeneratedAttribute]
public string get_HanaDB();
    [CompilerGeneratedAttribute]
public void set_HanaDB(string value);
    [CompilerGeneratedAttribute]
public string get_MongoDB();
    [CompilerGeneratedAttribute]
public void set_MongoDB(string value);
    [CompilerGeneratedAttribute]
public string get_MSSQL();
    [CompilerGeneratedAttribute]
public void set_MSSQL(string value);
    [CompilerGeneratedAttribute]
public string get_MySqlMariaDB();
    [CompilerGeneratedAttribute]
public void set_MySqlMariaDB(string value);
    [CompilerGeneratedAttribute]
public string get_PostgreSQL();
    [CompilerGeneratedAttribute]
public void set_PostgreSQL(string value);
    [CompilerGeneratedAttribute]
public string get_Oracle();
    [CompilerGeneratedAttribute]
public void set_Oracle(string value);
}
internal class VaultSharp.V1.SecretsEngines.SecretsEngineProvider : object {
    [CompilerGeneratedAttribute]
private IEnterprise <Enterprise>k__BackingField;
    [CompilerGeneratedAttribute]
private IActiveDirectorySecretsEngine <ActiveDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IAliCloudSecretsEngine <AliCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private IAWSSecretsEngine <AWS>k__BackingField;
    [CompilerGeneratedAttribute]
private IAzureSecretsEngine <Azure>k__BackingField;
    [CompilerGeneratedAttribute]
private IConsulSecretsEngine <Consul>k__BackingField;
    [CompilerGeneratedAttribute]
private ICubbyholeSecretsEngine <Cubbyhole>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabaseSecretsEngine <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private IGoogleCloudSecretsEngine <GoogleCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private IGoogleCloudKMSSecretsEngine <GoogleCloudKMS>k__BackingField;
    [CompilerGeneratedAttribute]
private IKeyValueSecretsEngine <KeyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private IKubernetesSecretsEngine <Kubernetes>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentitySecretsEngine <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private IMongoDBAtlasSecretsEngine <MongoDBAtlas>k__BackingField;
    [CompilerGeneratedAttribute]
private INomadSecretsEngine <Nomad>k__BackingField;
    [CompilerGeneratedAttribute]
private IOpenLDAPSecretsEngine <OpenLDAP>k__BackingField;
    [CompilerGeneratedAttribute]
private IPKISecretsEngine <PKI>k__BackingField;
    [CompilerGeneratedAttribute]
private IRabbitMQSecretsEngine <RabbitMQ>k__BackingField;
    [CompilerGeneratedAttribute]
private ISSHSecretsEngine <SSH>k__BackingField;
    [CompilerGeneratedAttribute]
private ITerraformSecretsEngine <Terraform>k__BackingField;
    [CompilerGeneratedAttribute]
private ITOTPSecretsEngine <TOTP>k__BackingField;
    [CompilerGeneratedAttribute]
private ITransitSecretsEngine <Transit>k__BackingField;
    public IEnterprise Enterprise { get; }
    public IActiveDirectorySecretsEngine ActiveDirectory { get; }
    public IAliCloudSecretsEngine AliCloud { get; }
    public IAWSSecretsEngine AWS { get; }
    public IAzureSecretsEngine Azure { get; }
    public IConsulSecretsEngine Consul { get; }
    public ICubbyholeSecretsEngine Cubbyhole { get; }
    public IDatabaseSecretsEngine Database { get; }
    public IGoogleCloudSecretsEngine GoogleCloud { get; }
    public IGoogleCloudKMSSecretsEngine GoogleCloudKMS { get; }
    public IKeyValueSecretsEngine KeyValue { get; }
    public IKubernetesSecretsEngine Kubernetes { get; }
    public IIdentitySecretsEngine Identity { get; }
    public IMongoDBAtlasSecretsEngine MongoDBAtlas { get; }
    public INomadSecretsEngine Nomad { get; }
    public IOpenLDAPSecretsEngine OpenLDAP { get; }
    public IPKISecretsEngine PKI { get; }
    public IRabbitMQSecretsEngine RabbitMQ { get; }
    public ISSHSecretsEngine SSH { get; }
    public ITerraformSecretsEngine Terraform { get; }
    public ITOTPSecretsEngine TOTP { get; }
    public ITransitSecretsEngine Transit { get; }
    public SecretsEngineProvider(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterprise get_Enterprise();
    [CompilerGeneratedAttribute]
public sealed virtual IActiveDirectorySecretsEngine get_ActiveDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual IAliCloudSecretsEngine get_AliCloud();
    [CompilerGeneratedAttribute]
public sealed virtual IAWSSecretsEngine get_AWS();
    [CompilerGeneratedAttribute]
public sealed virtual IAzureSecretsEngine get_Azure();
    [CompilerGeneratedAttribute]
public sealed virtual IConsulSecretsEngine get_Consul();
    [CompilerGeneratedAttribute]
public sealed virtual ICubbyholeSecretsEngine get_Cubbyhole();
    [CompilerGeneratedAttribute]
public sealed virtual IDatabaseSecretsEngine get_Database();
    [CompilerGeneratedAttribute]
public sealed virtual IGoogleCloudSecretsEngine get_GoogleCloud();
    [CompilerGeneratedAttribute]
public sealed virtual IGoogleCloudKMSSecretsEngine get_GoogleCloudKMS();
    [CompilerGeneratedAttribute]
public sealed virtual IKeyValueSecretsEngine get_KeyValue();
    [CompilerGeneratedAttribute]
public sealed virtual IKubernetesSecretsEngine get_Kubernetes();
    [CompilerGeneratedAttribute]
public sealed virtual IIdentitySecretsEngine get_Identity();
    [CompilerGeneratedAttribute]
public sealed virtual IMongoDBAtlasSecretsEngine get_MongoDBAtlas();
    [CompilerGeneratedAttribute]
public sealed virtual INomadSecretsEngine get_Nomad();
    [CompilerGeneratedAttribute]
public sealed virtual IOpenLDAPSecretsEngine get_OpenLDAP();
    [CompilerGeneratedAttribute]
public sealed virtual IPKISecretsEngine get_PKI();
    [CompilerGeneratedAttribute]
public sealed virtual IRabbitMQSecretsEngine get_RabbitMQ();
    [CompilerGeneratedAttribute]
public sealed virtual ISSHSecretsEngine get_SSH();
    [CompilerGeneratedAttribute]
public sealed virtual ITerraformSecretsEngine get_Terraform();
    [CompilerGeneratedAttribute]
public sealed virtual ITOTPSecretsEngine get_TOTP();
    [CompilerGeneratedAttribute]
public sealed virtual ITransitSecretsEngine get_Transit();
}
[JsonConverterAttribute("VaultSharp.V1.SecretsEngines.SecretsEngineTypeJsonConverter")]
public class VaultSharp.V1.SecretsEngines.SecretsEngineType : object {
    [CompilerGeneratedAttribute]
private static SecretsEngineType <System>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <AliCloud>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <AWS>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <Consul>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <CubbyHole>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <KeyValueV1>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <KeyValueV2>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <Nomad>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <PKI>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <RabbitMQ>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <SSH>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <Terraform>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <TOTP>k__BackingField;
    [CompilerGeneratedAttribute]
private static SecretsEngineType <Transit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public static SecretsEngineType System { get; }
    public static SecretsEngineType AliCloud { get; }
    public static SecretsEngineType AWS { get; }
    public static SecretsEngineType Consul { get; }
    public static SecretsEngineType CubbyHole { get; }
    public static SecretsEngineType KeyValueV1 { get; }
    public static SecretsEngineType KeyValueV2 { get; }
    public static SecretsEngineType Identity { get; }
    public static SecretsEngineType Nomad { get; }
    public static SecretsEngineType PKI { get; }
    public static SecretsEngineType RabbitMQ { get; }
    public static SecretsEngineType SSH { get; }
    public static SecretsEngineType Terraform { get; }
    public static SecretsEngineType TOTP { get; }
    public static SecretsEngineType Transit { get; }
    public string Type { get; }
    public SecretsEngineType(string type);
    private static SecretsEngineType();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_System();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_AliCloud();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_AWS();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_Consul();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_CubbyHole();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_KeyValueV1();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_KeyValueV2();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_Identity();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_Nomad();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_PKI();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_RabbitMQ();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_SSH();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_Terraform();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_TOTP();
    [CompilerGeneratedAttribute]
public static SecretsEngineType get_Transit();
    [CompilerGeneratedAttribute]
public string get_Type();
    public static bool op_Equality(SecretsEngineType left, SecretsEngineType right);
    public static bool op_Inequality(SecretsEngineType left, SecretsEngineType right);
    public sealed virtual bool Equals(SecretsEngineType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class VaultSharp.V1.SecretsEngines.SecretsEngineTypeJsonConverter : JsonConverter`1<SecretsEngineType> {
    public virtual void Write(Utf8JsonWriter writer, SecretsEngineType value, JsonSerializerOptions serializer);
    public virtual SecretsEngineType Read(Utf8JsonReader& reader, Type type, JsonSerializerOptions options);
}
public interface VaultSharp.V1.SecretsEngines.SSH.ISSHSecretsEngine {
    public abstract virtual Task`1<Secret`1<SSHCredentials>> GetCredentialsAsync(string roleName, string ipAddress, string username, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<SignedKeyResponse>> SignKeyAsync(string roleName, SignKeyRequest signKeyRequest, string mountPoint);
}
public class VaultSharp.V1.SecretsEngines.SSH.SignedKeyResponse : object {
    [CompilerGeneratedAttribute]
private string <SerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SignedKey>k__BackingField;
    [JsonPropertyNameAttribute("serial_number")]
public string SerialNumber { get; public set; }
    [JsonPropertyNameAttribute("signed_key")]
public string SignedKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SerialNumber();
    [CompilerGeneratedAttribute]
public void set_SerialNumber(string value);
    [CompilerGeneratedAttribute]
public string get_SignedKey();
    [CompilerGeneratedAttribute]
public void set_SignedKey(string value);
}
public class VaultSharp.V1.SecretsEngines.SSH.SignKeyRequest : object {
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimeToLive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValidPrincipals>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <CriticalOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Extension>k__BackingField;
    [JsonPropertyNameAttribute("public_key")]
[JsonIgnoreAttribute]
public string PublicKey { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
[JsonConverterAttribute("VaultSharp.Core.IntegerToStringJsonConverter")]
[JsonIgnoreAttribute]
public string TimeToLive { get; public set; }
    [JsonPropertyNameAttribute("valid_principals")]
[JsonIgnoreAttribute]
public string ValidPrincipals { get; public set; }
    [JsonPropertyNameAttribute("cert_type")]
[JsonIgnoreAttribute]
public string CertificateType { get; public set; }
    [JsonPropertyNameAttribute("key_id")]
[JsonIgnoreAttribute]
public string KeyId { get; public set; }
    [JsonPropertyNameAttribute("critical_options")]
[JsonIgnoreAttribute]
public Dictionary`2<string, string> CriticalOptions { get; public set; }
    [JsonPropertyNameAttribute("extension")]
[JsonIgnoreAttribute]
public Dictionary`2<string, string> Extension { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public void set_PublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(string value);
    [CompilerGeneratedAttribute]
public string get_ValidPrincipals();
    [CompilerGeneratedAttribute]
public void set_ValidPrincipals(string value);
    [CompilerGeneratedAttribute]
public string get_CertificateType();
    [CompilerGeneratedAttribute]
public void set_CertificateType(string value);
    [CompilerGeneratedAttribute]
public string get_KeyId();
    [CompilerGeneratedAttribute]
public void set_KeyId(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_CriticalOptions();
    [CompilerGeneratedAttribute]
public void set_CriticalOptions(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(Dictionary`2<string, string> value);
}
public class VaultSharp.V1.SecretsEngines.SSH.SSHCredentials : object {
    [CompilerGeneratedAttribute]
private string <IpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private SSHKeyType <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [JsonPropertyNameAttribute("ip")]
public string IpAddress { get; public set; }
    [JsonPropertyNameAttribute("key")]
public string Key { get; public set; }
    [JsonPropertyNameAttribute("key_type")]
public SSHKeyType KeyType { get; public set; }
    [JsonPropertyNameAttribute("port")]
public int Port { get; public set; }
    [JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IpAddress();
    [CompilerGeneratedAttribute]
public void set_IpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
    [CompilerGeneratedAttribute]
public SSHKeyType get_KeyType();
    [CompilerGeneratedAttribute]
public void set_KeyType(SSHKeyType value);
    [CompilerGeneratedAttribute]
public int get_Port();
    [CompilerGeneratedAttribute]
public void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.SSH.SSHKeyType : Enum {
    public int value__;
    public static SSHKeyType otp;
    public static SSHKeyType dynamic;
    public static SSHKeyType ca;
}
internal class VaultSharp.V1.SecretsEngines.SSH.SSHSecretsEngineProvider : object {
    private Polymath _polymath;
    public SSHSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.SSH.SSHSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<SSHCredentials>> GetCredentialsAsync(string roleName, string ipAddress, string username, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.SSH.SSHSecretsEngineProvider/<SignKeyAsync>d__3")]
public sealed virtual Task`1<Secret`1<SignedKeyResponse>> SignKeyAsync(string roleName, SignKeyRequest signKeyRequest, string mountPoint);
}
public interface VaultSharp.V1.SecretsEngines.Terraform.ITerraformSecretsEngine {
    public abstract virtual Task`1<Secret`1<TerraformCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
}
internal class VaultSharp.V1.SecretsEngines.Terraform.TerraformSecretsEngineProvider : object {
    private Polymath _polymath;
    public TerraformSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Terraform.TerraformSecretsEngineProvider/<GetCredentialsAsync>d__2")]
public sealed virtual Task`1<Secret`1<TerraformCredentials>> GetCredentialsAsync(string roleName, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.TerraformCredentials : object {
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenId>k__BackingField;
    [JsonPropertyNameAttribute("token")]
public string Token { get; public set; }
    [JsonPropertyNameAttribute("token_id")]
public string TokenId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    [CompilerGeneratedAttribute]
public string get_TokenId();
    [CompilerGeneratedAttribute]
public void set_TokenId(string value);
}
public abstract class VaultSharp.V1.SecretsEngines.TOTP.AbstractTOTPKeyGenerationOption : object {
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    public string Issuer { get; public set; }
    public string AccountName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
}
public interface VaultSharp.V1.SecretsEngines.TOTP.ITOTPSecretsEngine {
    public abstract virtual Task`1<Secret`1<TOTPCreateKeyResponse>> CreateKeyAsync(string keyName, TOTPCreateKeyRequest createKeyRequest, string mountPoint);
    public abstract virtual Task`1<Secret`1<TOTPKey>> ReadKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllKeysAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteKeyAsync(string keyName, string mountPoint);
    public abstract virtual Task`1<Secret`1<TOTPCode>> GetCodeAsync(string keyName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<TOTPCodeValidity>> ValidateCodeAsync(string keyName, string code, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.TOTP.TOTPCode : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [JsonPropertyNameAttribute("code")]
public string Code { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
}
public class VaultSharp.V1.SecretsEngines.TOTP.TOTPCodeValidity : object {
    [CompilerGeneratedAttribute]
private bool <Valid>k__BackingField;
    [JsonPropertyNameAttribute("valid")]
public bool Valid { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Valid();
    [CompilerGeneratedAttribute]
public void set_Valid(bool value);
}
public class VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyRequest : object {
    [CompilerGeneratedAttribute]
private AbstractTOTPKeyGenerationOption <KeyGenerationOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Digits>k__BackingField;
    public AbstractTOTPKeyGenerationOption KeyGenerationOption { get; public set; }
    public string Issuer { get; public set; }
    public string AccountName { get; public set; }
    public string Period { get; public set; }
    public string Algorithm { get; public set; }
    public int Digits { get; public set; }
    [CompilerGeneratedAttribute]
public AbstractTOTPKeyGenerationOption get_KeyGenerationOption();
    [CompilerGeneratedAttribute]
public void set_KeyGenerationOption(AbstractTOTPKeyGenerationOption value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
    [CompilerGeneratedAttribute]
public string get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public int get_Digits();
    [CompilerGeneratedAttribute]
public void set_Digits(int value);
}
public class VaultSharp.V1.SecretsEngines.TOTP.TOTPCreateKeyResponse : object {
    [CompilerGeneratedAttribute]
private string <Barcode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [JsonPropertyNameAttribute("barcode")]
public string Barcode { get; public set; }
    [JsonPropertyNameAttribute("url")]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Barcode();
    [CompilerGeneratedAttribute]
public void set_Barcode(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public class VaultSharp.V1.SecretsEngines.TOTP.TOTPKey : object {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Digits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Period>k__BackingField;
    [JsonPropertyNameAttribute("account_name")]
public string AccountName { get; public set; }
    [JsonPropertyNameAttribute("algorithm")]
public string Algorithm { get; public set; }
    [JsonPropertyNameAttribute("digits")]
public int Digits { get; public set; }
    [JsonPropertyNameAttribute("issuer")]
public string Issuer { get; public set; }
    [JsonPropertyNameAttribute("period")]
public long Period { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public int get_Digits();
    [CompilerGeneratedAttribute]
public void set_Digits(int value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public long get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(long value);
}
public class VaultSharp.V1.SecretsEngines.TOTP.TOTPNonVaultBasedKeyGeneration : AbstractTOTPKeyGenerationOption {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Url { get; public set; }
    public string Key { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(string value);
}
internal class VaultSharp.V1.SecretsEngines.TOTP.TOTPSecretsEngineProvider : object {
    private Polymath _polymath;
    public TOTPSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.TOTP.TOTPSecretsEngineProvider/<CreateKeyAsync>d__2")]
public sealed virtual Task`1<Secret`1<TOTPCreateKeyResponse>> CreateKeyAsync(string keyName, TOTPCreateKeyRequest createKeyRequest, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.TOTP.TOTPSecretsEngineProvider/<ReadKeyAsync>d__3")]
public sealed virtual Task`1<Secret`1<TOTPKey>> ReadKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.TOTP.TOTPSecretsEngineProvider/<ReadAllKeysAsync>d__4")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllKeysAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.TOTP.TOTPSecretsEngineProvider/<DeleteKeyAsync>d__5")]
public sealed virtual Task DeleteKeyAsync(string keyName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.TOTP.TOTPSecretsEngineProvider/<GetCodeAsync>d__6")]
public sealed virtual Task`1<Secret`1<TOTPCode>> GetCodeAsync(string keyName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.TOTP.TOTPSecretsEngineProvider/<ValidateCodeAsync>d__7")]
public sealed virtual Task`1<Secret`1<TOTPCodeValidity>> ValidateCodeAsync(string keyName, string code, string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.TOTP.TOTPVaultBasedKeyGeneration : AbstractTOTPKeyGenerationOption {
    [CompilerGeneratedAttribute]
private bool <Exported>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeySize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skew>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QRSize>k__BackingField;
    public bool Exported { get; public set; }
    public int KeySize { get; public set; }
    public int Skew { get; public set; }
    public int QRSize { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Exported();
    [CompilerGeneratedAttribute]
public void set_Exported(bool value);
    [CompilerGeneratedAttribute]
public int get_KeySize();
    [CompilerGeneratedAttribute]
public void set_KeySize(int value);
    [CompilerGeneratedAttribute]
public int get_Skew();
    [CompilerGeneratedAttribute]
public void set_Skew(int value);
    [CompilerGeneratedAttribute]
public int get_QRSize();
    [CompilerGeneratedAttribute]
public void set_QRSize(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.BackupKeyResponse : object {
    [CompilerGeneratedAttribute]
private string <BackupData>k__BackingField;
    [JsonPropertyNameAttribute("backup")]
public string BackupData { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BackupData();
    [CompilerGeneratedAttribute]
public void set_BackupData(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.CacheConfigRequestOptions : object {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [JsonPropertyNameAttribute("size")]
public int Size { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.CacheResponse : object {
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    [JsonPropertyNameAttribute("size")]
public int Size { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.CipherTextData : object {
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeyVersion>k__BackingField;
    [JsonPropertyNameAttribute("ciphertext")]
[JsonIgnoreAttribute]
public string CipherText { get; public set; }
    [JsonPropertyNameAttribute("key_version")]
[JsonIgnoreAttribute]
public Nullable`1<int> KeyVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(Nullable`1<int> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.CreateKeyRequestOptions : object {
    [CompilerGeneratedAttribute]
private bool <ConvergentEncryption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Derived>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exportable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPlaintextBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitKeyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeySize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AutoRotatePeriod>k__BackingField;
    [JsonPropertyNameAttribute("convergent_encryption")]
public bool ConvergentEncryption { get; public set; }
    [JsonPropertyNameAttribute("derived")]
public bool Derived { get; public set; }
    [JsonPropertyNameAttribute("exportable")]
public bool Exportable { get; public set; }
    [JsonPropertyNameAttribute("allow_plaintext_backup")]
public bool AllowPlaintextBackup { get; public set; }
    [JsonPropertyNameAttribute("type")]
public TransitKeyType Type { get; public set; }
    [JsonPropertyNameAttribute("key_size")]
public Nullable`1<int> KeySize { get; public set; }
    [JsonPropertyNameAttribute("auto_rotate_period")]
public long AutoRotatePeriod { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ConvergentEncryption();
    [CompilerGeneratedAttribute]
public void set_ConvergentEncryption(bool value);
    [CompilerGeneratedAttribute]
public bool get_Derived();
    [CompilerGeneratedAttribute]
public void set_Derived(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exportable();
    [CompilerGeneratedAttribute]
public void set_Exportable(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPlaintextBackup();
    [CompilerGeneratedAttribute]
public void set_AllowPlaintextBackup(bool value);
    [CompilerGeneratedAttribute]
public TransitKeyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TransitKeyType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeySize();
    [CompilerGeneratedAttribute]
public void set_KeySize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public long get_AutoRotatePeriod();
    [CompilerGeneratedAttribute]
public void set_AutoRotatePeriod(long value);
}
public class VaultSharp.V1.SecretsEngines.Transit.DataKeyRequestOptions : object {
    [CompilerGeneratedAttribute]
private TransitDataKeyType <DataKeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bits>k__BackingField;
    [JsonIgnoreAttribute]
public TransitDataKeyType DataKeyType { get; public set; }
    [JsonPropertyNameAttribute("context")]
public string Base64EncodedContext { get; public set; }
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("bits")]
public int Bits { get; public set; }
    [CompilerGeneratedAttribute]
public TransitDataKeyType get_DataKeyType();
    [CompilerGeneratedAttribute]
public void set_DataKeyType(TransitDataKeyType value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedContext();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedContext(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public int get_Bits();
    [CompilerGeneratedAttribute]
public void set_Bits(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.DataKeyResponse : object {
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedPlainText>k__BackingField;
    [JsonPropertyNameAttribute("ciphertext")]
public string CipherText { get; public set; }
    [JsonPropertyNameAttribute("key_version")]
public int KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("plaintext")]
[JsonIgnoreAttribute]
public string Base64EncodedPlainText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
    [CompilerGeneratedAttribute]
public int get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(int value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedPlainText();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedPlainText(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.DecryptionItem : object {
    [CompilerGeneratedAttribute]
private string <CipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PartialFailureResponseCode>k__BackingField;
    [JsonPropertyNameAttribute("ciphertext")]
public string CipherText { get; public set; }
    [JsonPropertyNameAttribute("context")]
public string Base64EncodedContext { get; public set; }
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("partial_failure_response_code")]
public int PartialFailureResponseCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CipherText();
    [CompilerGeneratedAttribute]
public void set_CipherText(string value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedContext();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedContext(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public int get_PartialFailureResponseCode();
    [CompilerGeneratedAttribute]
public void set_PartialFailureResponseCode(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.DecryptionResponse : PlainTextData {
    [CompilerGeneratedAttribute]
private List`1<PlainTextData> <BatchedResults>k__BackingField;
    [JsonPropertyNameAttribute("batch_results")]
[JsonIgnoreAttribute]
public List`1<PlainTextData> BatchedResults { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<PlainTextData> get_BatchedResults();
    [CompilerGeneratedAttribute]
public void set_BatchedResults(List`1<PlainTextData> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.DecryptRequestOptions : DecryptionItem {
    [CompilerGeneratedAttribute]
private List`1<DecryptionItem> <BatchedDecryptionItems>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
[JsonIgnoreAttribute]
public List`1<DecryptionItem> BatchedDecryptionItems { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<DecryptionItem> get_BatchedDecryptionItems();
    [CompilerGeneratedAttribute]
public void set_BatchedDecryptionItems(List`1<DecryptionItem> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.EncryptionItem : object {
    [CompilerGeneratedAttribute]
private string <Base64EncodedPlainText>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitKeyType <KeyType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvergentEncryption>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PartialFailureResponseCode>k__BackingField;
    [JsonPropertyNameAttribute("plaintext")]
public string Base64EncodedPlainText { get; public set; }
    [JsonPropertyNameAttribute("context")]
public string Base64EncodedContext { get; public set; }
    [JsonPropertyNameAttribute("key_version")]
public Nullable`1<int> KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("type")]
public TransitKeyType KeyType { get; public set; }
    [JsonPropertyNameAttribute("convergent_encryption")]
public bool ConvergentEncryption { get; public set; }
    [JsonPropertyNameAttribute("partial_failure_response_code")]
public int PartialFailureResponseCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Base64EncodedPlainText();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedPlainText(string value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedContext();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedContext(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public TransitKeyType get_KeyType();
    [CompilerGeneratedAttribute]
public void set_KeyType(TransitKeyType value);
    [CompilerGeneratedAttribute]
public bool get_ConvergentEncryption();
    [CompilerGeneratedAttribute]
public void set_ConvergentEncryption(bool value);
    [CompilerGeneratedAttribute]
public int get_PartialFailureResponseCode();
    [CompilerGeneratedAttribute]
public void set_PartialFailureResponseCode(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.EncryptionKeyInfo : object {
    [CompilerGeneratedAttribute]
private bool <AllowPlaintextBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AutoRotatePeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeletionAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Derived>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exportable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImportedKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LatestVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumAvailableVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumDecryptionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumEncryptionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsEncryption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDecryption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsDerivation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsSigning>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitKeyType <Type>k__BackingField;
    [JsonPropertyNameAttribute("allow_plaintext_backup")]
public bool AllowPlaintextBackup { get; public set; }
    [JsonPropertyNameAttribute("auto_rotate_period")]
public long AutoRotatePeriod { get; public set; }
    [JsonPropertyNameAttribute("deletion_allowed")]
public bool DeletionAllowed { get; public set; }
    [JsonPropertyNameAttribute("derived")]
public bool Derived { get; public set; }
    [JsonPropertyNameAttribute("exportable")]
public bool Exportable { get; public set; }
    [JsonPropertyNameAttribute("imported_key")]
public bool ImportedKey { get; public set; }
    [JsonPropertyNameAttribute("keys")]
public Dictionary`2<string, object> Keys { get; public set; }
    [JsonPropertyNameAttribute("latest_version")]
public int LatestVersion { get; public set; }
    [JsonPropertyNameAttribute("min_available_version")]
public int MinimumAvailableVersion { get; public set; }
    [JsonPropertyNameAttribute("min_decryption_version")]
public int MinimumDecryptionVersion { get; public set; }
    [JsonPropertyNameAttribute("min_encryption_version")]
public int MinimumEncryptionVersion { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("supports_encryption")]
public bool SupportsEncryption { get; public set; }
    [JsonPropertyNameAttribute("supports_decryption")]
public bool SupportsDecryption { get; public set; }
    [JsonPropertyNameAttribute("supports_derivation")]
public bool SupportsDerivation { get; public set; }
    [JsonPropertyNameAttribute("supports_signing")]
public bool SupportsSigning { get; public set; }
    [JsonPropertyNameAttribute("type")]
public TransitKeyType Type { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowPlaintextBackup();
    [CompilerGeneratedAttribute]
public void set_AllowPlaintextBackup(bool value);
    [CompilerGeneratedAttribute]
public long get_AutoRotatePeriod();
    [CompilerGeneratedAttribute]
public void set_AutoRotatePeriod(long value);
    [CompilerGeneratedAttribute]
public bool get_DeletionAllowed();
    [CompilerGeneratedAttribute]
public void set_DeletionAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Derived();
    [CompilerGeneratedAttribute]
public void set_Derived(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exportable();
    [CompilerGeneratedAttribute]
public void set_Exportable(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImportedKey();
    [CompilerGeneratedAttribute]
public void set_ImportedKey(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public int get_LatestVersion();
    [CompilerGeneratedAttribute]
public void set_LatestVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumAvailableVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumAvailableVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumDecryptionVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumDecryptionVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumEncryptionVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumEncryptionVersion(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_SupportsEncryption();
    [CompilerGeneratedAttribute]
public void set_SupportsEncryption(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsDecryption();
    [CompilerGeneratedAttribute]
public void set_SupportsDecryption(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsDerivation();
    [CompilerGeneratedAttribute]
public void set_SupportsDerivation(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsSigning();
    [CompilerGeneratedAttribute]
public void set_SupportsSigning(bool value);
    [CompilerGeneratedAttribute]
public TransitKeyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TransitKeyType value);
}
public class VaultSharp.V1.SecretsEngines.Transit.EncryptionResponse : CipherTextData {
    [CompilerGeneratedAttribute]
private List`1<CipherTextData> <BatchedResults>k__BackingField;
    [JsonPropertyNameAttribute("batch_results")]
public List`1<CipherTextData> BatchedResults { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<CipherTextData> get_BatchedResults();
    [CompilerGeneratedAttribute]
public void set_BatchedResults(List`1<CipherTextData> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.EncryptRequestOptions : EncryptionItem {
    [CompilerGeneratedAttribute]
private List`1<EncryptionItem> <BatchedEncryptionItems>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
[JsonIgnoreAttribute]
public List`1<EncryptionItem> BatchedEncryptionItems { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<EncryptionItem> get_BatchedEncryptionItems();
    [CompilerGeneratedAttribute]
public void set_BatchedEncryptionItems(List`1<EncryptionItem> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.ExportedKeyInfo : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitKeyType <Type>k__BackingField;
    [JsonPropertyNameAttribute("keys")]
public Dictionary`2<string, object> Keys { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("type")]
public TransitKeyType Type { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(Dictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TransitKeyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TransitKeyType value);
}
public class VaultSharp.V1.SecretsEngines.Transit.HashRequestOptions : object {
    [CompilerGeneratedAttribute]
private TransitHashAlgorithm <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedInput>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputEncodingFormat <Format>k__BackingField;
    [JsonIgnoreAttribute]
public TransitHashAlgorithm Algorithm { get; public set; }
    [JsonPropertyNameAttribute("input")]
public string Base64EncodedInput { get; public set; }
    [JsonPropertyNameAttribute("format")]
public OutputEncodingFormat Format { get; public set; }
    [CompilerGeneratedAttribute]
public TransitHashAlgorithm get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(TransitHashAlgorithm value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedInput();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedInput(string value);
    [CompilerGeneratedAttribute]
public OutputEncodingFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(OutputEncodingFormat value);
}
public class VaultSharp.V1.SecretsEngines.Transit.HashResponse : object {
    [CompilerGeneratedAttribute]
private string <HashSum>k__BackingField;
    [JsonPropertyNameAttribute("sum")]
public string HashSum { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HashSum();
    [CompilerGeneratedAttribute]
public void set_HashSum(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.HmacBatchResponse : object {
    [CompilerGeneratedAttribute]
private string <Hmac>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorResponse>k__BackingField;
    [JsonPropertyNameAttribute("hmac")]
public string Hmac { get; public set; }
    [JsonPropertyNameAttribute("error")]
[JsonIgnoreAttribute]
public string ErrorResponse { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hmac();
    [CompilerGeneratedAttribute]
public void set_Hmac(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorResponse();
    [CompilerGeneratedAttribute]
public void set_ErrorResponse(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.HmacRequestOptions : HmacSingleInput {
    [CompilerGeneratedAttribute]
private List`1<HmacSingleInput> <BatchInput>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
[JsonIgnoreAttribute]
public List`1<HmacSingleInput> BatchInput { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<HmacSingleInput> get_BatchInput();
    [CompilerGeneratedAttribute]
public void set_BatchInput(List`1<HmacSingleInput> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.HmacResponse : HmacBatchResponse {
    [CompilerGeneratedAttribute]
private List`1<HmacBatchResponse> <BatchResults>k__BackingField;
    [JsonPropertyNameAttribute("batch_results")]
[JsonIgnoreAttribute]
public List`1<HmacBatchResponse> BatchResults { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<HmacBatchResponse> get_BatchResults();
    [CompilerGeneratedAttribute]
public void set_BatchResults(List`1<HmacBatchResponse> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.HmacSingleInput : object {
    [CompilerGeneratedAttribute]
private TransitHashAlgorithm <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedInput>k__BackingField;
    [JsonIgnoreAttribute]
public TransitHashAlgorithm Algorithm { get; public set; }
    [JsonPropertyNameAttribute("key_version")]
[JsonIgnoreAttribute]
public Nullable`1<int> KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("input")]
public string Base64EncodedInput { get; public set; }
    [CompilerGeneratedAttribute]
public TransitHashAlgorithm get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(TransitHashAlgorithm value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedInput();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedInput(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.ImportKeyRequestOptions : object {
    [CompilerGeneratedAttribute]
private string <Base64EncodedCipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitHashFunction <HashFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitKeyType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowRotation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Derived>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedKeyDerivationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exportable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPlaintextBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AutoRotatePeriod>k__BackingField;
    [JsonPropertyNameAttribute("ciphertext")]
public string Base64EncodedCipherText { get; public set; }
    [JsonPropertyNameAttribute("hash_function")]
public TransitHashFunction HashFunction { get; public set; }
    [JsonPropertyNameAttribute("type")]
public TransitKeyType Type { get; public set; }
    [JsonPropertyNameAttribute("allow_rotation")]
public bool AllowRotation { get; public set; }
    [JsonPropertyNameAttribute("derived")]
public bool Derived { get; public set; }
    [JsonPropertyNameAttribute("context")]
public string Base64EncodedKeyDerivationContext { get; public set; }
    [JsonPropertyNameAttribute("exportable")]
public bool Exportable { get; public set; }
    [JsonPropertyNameAttribute("allow_plaintext_backup")]
public bool AllowPlaintextBackup { get; public set; }
    [JsonPropertyNameAttribute("auto_rotate_period")]
public long AutoRotatePeriod { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Base64EncodedCipherText();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedCipherText(string value);
    [CompilerGeneratedAttribute]
public TransitHashFunction get_HashFunction();
    [CompilerGeneratedAttribute]
public void set_HashFunction(TransitHashFunction value);
    [CompilerGeneratedAttribute]
public TransitKeyType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(TransitKeyType value);
    [CompilerGeneratedAttribute]
public bool get_AllowRotation();
    [CompilerGeneratedAttribute]
public void set_AllowRotation(bool value);
    [CompilerGeneratedAttribute]
public bool get_Derived();
    [CompilerGeneratedAttribute]
public void set_Derived(bool value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedKeyDerivationContext();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedKeyDerivationContext(string value);
    [CompilerGeneratedAttribute]
public bool get_Exportable();
    [CompilerGeneratedAttribute]
public void set_Exportable(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPlaintextBackup();
    [CompilerGeneratedAttribute]
public void set_AllowPlaintextBackup(bool value);
    [CompilerGeneratedAttribute]
public long get_AutoRotatePeriod();
    [CompilerGeneratedAttribute]
public void set_AutoRotatePeriod(long value);
}
public class VaultSharp.V1.SecretsEngines.Transit.ImportKeyVersionRequestOptions : object {
    [CompilerGeneratedAttribute]
private string <Base64EncodedCipherText>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitHashFunction <HashFunction>k__BackingField;
    [JsonPropertyNameAttribute("ciphertext")]
public string Base64EncodedCipherText { get; public set; }
    [JsonPropertyNameAttribute("hash_function")]
public TransitHashFunction HashFunction { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Base64EncodedCipherText();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedCipherText(string value);
    [CompilerGeneratedAttribute]
public TransitHashFunction get_HashFunction();
    [CompilerGeneratedAttribute]
public void set_HashFunction(TransitHashFunction value);
}
public interface VaultSharp.V1.SecretsEngines.Transit.ITransitSecretsEngine {
    public abstract virtual Task CreateEncryptionKeyAsync(string keyName, CreateKeyRequestOptions createKeyRequestOptions, string mountPoint);
    public abstract virtual Task ImportEncryptionKeyAsync(string keyName, ImportKeyRequestOptions importKeyRequestOptions, string mountPoint);
    public abstract virtual Task ImportEncryptionKeyVersionAsync(string keyName, ImportKeyVersionRequestOptions importKeyVersionRequestOptions, string mountPoint);
    public abstract virtual Task`1<Secret`1<TransitWrappingKeyModel>> ReadWrappingKeyAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<EncryptionKeyInfo>> ReadEncryptionKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<ListInfo>> ReadAllEncryptionKeysAsync(string mountPoint, string wrapTimeToLive);
    public abstract virtual Task DeleteEncryptionKeyAsync(string keyName, string mountPoint);
    public abstract virtual Task UpdateEncryptionKeyConfigAsync(string keyName, UpdateKeyRequestOptions updateKeyRequestOptions, string mountPoint);
    public abstract virtual Task RotateEncryptionKeyAsync(string keyName, string mountPoint);
    public abstract virtual Task`1<Secret`1<ExportedKeyInfo>> ExportKeyAsync(TransitKeyCategory keyType, string keyName, string version, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<EncryptionResponse>> EncryptAsync(string keyName, EncryptRequestOptions encryptRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<DecryptionResponse>> DecryptAsync(string keyName, DecryptRequestOptions decryptRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<EncryptionResponse>> RewrapAsync(string keyName, RewrapRequestOptions rewrapRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<DataKeyResponse>> GenerateDataKeyAsync(string keyName, DataKeyRequestOptions dataKeyRequestOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<RandomBytesResponse>> GenerateRandomBytesAsync(RandomBytesRequestOptions randomOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<HashResponse>> HashDataAsync(HashRequestOptions hashOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<HmacResponse>> GenerateHmacAsync(string keyName, HmacRequestOptions hmacOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<SigningResponse>> SignDataAsync(string keyName, SignRequestOptions signOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<VerifyResponse>> VerifySignedDataAsync(string keyName, VerifyRequestOptions verifyOptions, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<BackupKeyResponse>> BackupKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    public abstract virtual Task RestoreKeyAsync(RestoreKeyRequestOptions backupData, string keyName, string mountPoint);
    public abstract virtual Task TrimKeyAsync(string keyName, TrimKeyRequestOptions trimKeyRequestOptions, string mountPoint);
    public abstract virtual Task SetCacheConfigAsync(CacheConfigRequestOptions cacheOptions, string mountPoint);
    public abstract virtual Task`1<Secret`1<CacheResponse>> ReadCacheConfigAsync(string mountPoint, string wrapTimeToLive);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.MarshalingAlgorithm : Enum {
    public int value__;
    public static MarshalingAlgorithm asn1;
    public static MarshalingAlgorithm jws;
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.OutputEncodingFormat : Enum {
    public int value__;
    public static OutputEncodingFormat base64;
    public static OutputEncodingFormat hex;
}
public class VaultSharp.V1.SecretsEngines.Transit.PlainTextData : object {
    [CompilerGeneratedAttribute]
private string <Base64EncodedPlainText>k__BackingField;
    [JsonPropertyNameAttribute("plaintext")]
[JsonIgnoreAttribute]
public string Base64EncodedPlainText { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Base64EncodedPlainText();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedPlainText(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.RandomBytesRequestOptions : object {
    [CompilerGeneratedAttribute]
private int <BytesToGenerate>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputEncodingFormat <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private RandomBytesSource <Source>k__BackingField;
    [JsonPropertyNameAttribute("bytes")]
public int BytesToGenerate { get; public set; }
    [JsonPropertyNameAttribute("format")]
public OutputEncodingFormat Format { get; public set; }
    [JsonIgnoreAttribute]
public RandomBytesSource Source { get; public set; }
    [CompilerGeneratedAttribute]
public int get_BytesToGenerate();
    [CompilerGeneratedAttribute]
public void set_BytesToGenerate(int value);
    [CompilerGeneratedAttribute]
public OutputEncodingFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(OutputEncodingFormat value);
    [CompilerGeneratedAttribute]
public RandomBytesSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(RandomBytesSource value);
}
public class VaultSharp.V1.SecretsEngines.Transit.RandomBytesResponse : object {
    [CompilerGeneratedAttribute]
private string <EncodedRandomBytes>k__BackingField;
    [JsonPropertyNameAttribute("random_bytes")]
public string EncodedRandomBytes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EncodedRandomBytes();
    [CompilerGeneratedAttribute]
public void set_EncodedRandomBytes(string value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.RandomBytesSource : Enum {
    public int value__;
    public static RandomBytesSource platform;
    public static RandomBytesSource seal;
    public static RandomBytesSource all;
}
public class VaultSharp.V1.SecretsEngines.Transit.RestoreKeyRequestOptions : object {
    [CompilerGeneratedAttribute]
private string <BackupData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [JsonPropertyNameAttribute("backup")]
public string BackupData { get; public set; }
    [JsonPropertyNameAttribute("force")]
public bool Force { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BackupData();
    [CompilerGeneratedAttribute]
public void set_BackupData(string value);
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
}
public class VaultSharp.V1.SecretsEngines.Transit.RewrapItem : DecryptionItem {
    [CompilerGeneratedAttribute]
private int <KeyVersion>k__BackingField;
    [JsonPropertyNameAttribute("key_version")]
public int KeyVersion { get; public set; }
    [CompilerGeneratedAttribute]
public int get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.RewrapRequestOptions : RewrapItem {
    [CompilerGeneratedAttribute]
private List`1<RewrapItem> <BatchedRewrapItems>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
[JsonIgnoreAttribute]
public List`1<RewrapItem> BatchedRewrapItems { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<RewrapItem> get_BatchedRewrapItems();
    [CompilerGeneratedAttribute]
public void set_BatchedRewrapItems(List`1<RewrapItem> value);
}
public enum VaultSharp.V1.SecretsEngines.Transit.SaltLengthType : Enum {
    public int value__;
    public static SaltLengthType auto;
    public static SaltLengthType hash;
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.SignatureAlgorithm : Enum {
    public int value__;
    public static SignatureAlgorithm pss;
    public static SignatureAlgorithm pkcs1v15;
}
public class VaultSharp.V1.SecretsEngines.Transit.SigningBatchResponse : object {
    [CompilerGeneratedAttribute]
private string <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [JsonPropertyNameAttribute("error")]
[JsonIgnoreAttribute]
public string Error { get; public set; }
    [JsonPropertyNameAttribute("key_version")]
[JsonIgnoreAttribute]
public Nullable`1<int> KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("publickey")]
[JsonIgnoreAttribute]
public string PublicKey { get; public set; }
    [JsonPropertyNameAttribute("signature")]
[JsonIgnoreAttribute]
public string Signature { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public void set_PublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.SigningResponse : SigningBatchResponse {
    [CompilerGeneratedAttribute]
private List`1<SigningBatchResponse> <BatchResults>k__BackingField;
    [JsonPropertyNameAttribute("batch_results")]
[JsonIgnoreAttribute]
public List`1<SigningBatchResponse> BatchResults { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<SigningBatchResponse> get_BatchResults();
    [CompilerGeneratedAttribute]
public void set_BatchResults(List`1<SigningBatchResponse> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.SignRequestOptions : SignSingleInput {
    [CompilerGeneratedAttribute]
private List`1<SignSingleInput> <BatchInput>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
[JsonIgnoreAttribute]
public List`1<SignSingleInput> BatchInput { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<SignSingleInput> get_BatchInput();
    [CompilerGeneratedAttribute]
public void set_BatchInput(List`1<SignSingleInput> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.SignSingleInput : object {
    [CompilerGeneratedAttribute]
private TransitHashAlgorithm <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <KeyVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedInput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedKeyDerivationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreHashed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SignatureAlgorithm> <SignatureAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MarshalingAlgorithm> <MarshalingAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SaltLength>k__BackingField;
    [JsonIgnoreAttribute]
public TransitHashAlgorithm HashAlgorithm { get; public set; }
    [JsonPropertyNameAttribute("key_version")]
[JsonIgnoreAttribute]
public Nullable`1<int> KeyVersion { get; public set; }
    [JsonPropertyNameAttribute("input")]
[JsonIgnoreAttribute]
public string Base64EncodedInput { get; public set; }
    [JsonPropertyNameAttribute("context")]
[JsonIgnoreAttribute]
public string Base64EncodedKeyDerivationContext { get; public set; }
    [JsonPropertyNameAttribute("prehashed")]
public bool PreHashed { get; public set; }
    [JsonPropertyNameAttribute("signature_algorithm")]
[JsonIgnoreAttribute]
public Nullable`1<SignatureAlgorithm> SignatureAlgorithm { get; public set; }
    [JsonPropertyNameAttribute("marshaling_algorithm")]
[JsonIgnoreAttribute]
public Nullable`1<MarshalingAlgorithm> MarshalingAlgorithm { get; public set; }
    [JsonPropertyNameAttribute("salt_length")]
public string SaltLength { get; public set; }
    [CompilerGeneratedAttribute]
public TransitHashAlgorithm get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithm(TransitHashAlgorithm value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_KeyVersion();
    [CompilerGeneratedAttribute]
public void set_KeyVersion(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedInput();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedInput(string value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedKeyDerivationContext();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedKeyDerivationContext(string value);
    [CompilerGeneratedAttribute]
public bool get_PreHashed();
    [CompilerGeneratedAttribute]
public void set_PreHashed(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<SignatureAlgorithm> get_SignatureAlgorithm();
    [CompilerGeneratedAttribute]
public void set_SignatureAlgorithm(Nullable`1<SignatureAlgorithm> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MarshalingAlgorithm> get_MarshalingAlgorithm();
    [CompilerGeneratedAttribute]
public void set_MarshalingAlgorithm(Nullable`1<MarshalingAlgorithm> value);
    [CompilerGeneratedAttribute]
public string get_SaltLength();
    [CompilerGeneratedAttribute]
public void set_SaltLength(string value);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.TransitDataKeyType : Enum {
    public int value__;
    public static TransitDataKeyType plaintext;
    public static TransitDataKeyType wrapped;
}
[JsonConverterAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitHashAlgorithmEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.TransitHashAlgorithm : Enum {
    public int value__;
    [ObsoleteAttribute]
[EnumMemberAttribute]
public static TransitHashAlgorithm SHA1;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA2_224;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA2_256;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA2_384;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA2_512;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA3_224;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA3_256;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA3_384;
    [EnumMemberAttribute]
public static TransitHashAlgorithm SHA3_512;
}
internal class VaultSharp.V1.SecretsEngines.Transit.TransitHashAlgorithmEnumConverter : JsonConverter`1<TransitHashAlgorithm> {
    public virtual TransitHashAlgorithm Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, TransitHashAlgorithm value, JsonSerializerOptions options);
}
[JsonConverterAttribute("System.Text.Json.Serialization.JsonStringEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.TransitHashFunction : Enum {
    public int value__;
    public static TransitHashFunction SHA1;
    public static TransitHashFunction SHA224;
    public static TransitHashFunction SHA256;
    public static TransitHashFunction SHA384;
    public static TransitHashFunction SHA512;
}
public enum VaultSharp.V1.SecretsEngines.Transit.TransitKeyCategory : Enum {
    public int value__;
    public static TransitKeyCategory encryption_key;
    public static TransitKeyCategory signing_key;
    public static TransitKeyCategory hmac_key;
}
[JsonConverterAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitKeyTypeEnumConverter")]
public enum VaultSharp.V1.SecretsEngines.Transit.TransitKeyType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static TransitKeyType aes256_gcm96;
    [EnumMemberAttribute]
public static TransitKeyType ecdsa_p256;
    [EnumMemberAttribute]
public static TransitKeyType aes128_gcm96;
    [EnumMemberAttribute]
public static TransitKeyType chacha20_poly1305;
    [EnumMemberAttribute]
public static TransitKeyType ed25519;
    [EnumMemberAttribute]
public static TransitKeyType ecdsa_p384;
    [EnumMemberAttribute]
public static TransitKeyType ecdsa_p521;
    [EnumMemberAttribute]
public static TransitKeyType rsa_2048;
    [EnumMemberAttribute]
public static TransitKeyType rsa_3072;
    [EnumMemberAttribute]
public static TransitKeyType rsa_4096;
    [EnumMemberAttribute]
public static TransitKeyType hmac;
}
internal class VaultSharp.V1.SecretsEngines.Transit.TransitKeyTypeEnumConverter : JsonConverter`1<TransitKeyType> {
    public virtual TransitKeyType Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, TransitKeyType value, JsonSerializerOptions options);
}
internal class VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider : object {
    private Polymath _polymath;
    public TransitSecretsEngineProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<CreateEncryptionKeyAsync>d__2")]
public sealed virtual Task CreateEncryptionKeyAsync(string keyName, CreateKeyRequestOptions createKeyRequestOptions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<ImportEncryptionKeyAsync>d__3")]
public sealed virtual Task ImportEncryptionKeyAsync(string keyName, ImportKeyRequestOptions importKeyRequestOptions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<ImportEncryptionKeyVersionAsync>d__4")]
public sealed virtual Task ImportEncryptionKeyVersionAsync(string keyName, ImportKeyVersionRequestOptions importKeyVersionRequestOptions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<ReadWrappingKeyAsync>d__5")]
public sealed virtual Task`1<Secret`1<TransitWrappingKeyModel>> ReadWrappingKeyAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<ReadEncryptionKeyAsync>d__6")]
public sealed virtual Task`1<Secret`1<EncryptionKeyInfo>> ReadEncryptionKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<ReadAllEncryptionKeysAsync>d__7")]
public sealed virtual Task`1<Secret`1<ListInfo>> ReadAllEncryptionKeysAsync(string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<DeleteEncryptionKeyAsync>d__8")]
public sealed virtual Task DeleteEncryptionKeyAsync(string keyName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<UpdateEncryptionKeyConfigAsync>d__9")]
public sealed virtual Task UpdateEncryptionKeyConfigAsync(string keyName, UpdateKeyRequestOptions updateKeyRequestOptions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<RotateEncryptionKeyAsync>d__10")]
public sealed virtual Task RotateEncryptionKeyAsync(string keyName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<ExportKeyAsync>d__11")]
public sealed virtual Task`1<Secret`1<ExportedKeyInfo>> ExportKeyAsync(TransitKeyCategory keyType, string keyName, string version, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<EncryptAsync>d__12")]
public sealed virtual Task`1<Secret`1<EncryptionResponse>> EncryptAsync(string keyName, EncryptRequestOptions encryptRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<DecryptAsync>d__13")]
public sealed virtual Task`1<Secret`1<DecryptionResponse>> DecryptAsync(string keyName, DecryptRequestOptions decryptRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<RewrapAsync>d__14")]
public sealed virtual Task`1<Secret`1<EncryptionResponse>> RewrapAsync(string keyName, RewrapRequestOptions rewrapRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<GenerateDataKeyAsync>d__15")]
public sealed virtual Task`1<Secret`1<DataKeyResponse>> GenerateDataKeyAsync(string keyName, DataKeyRequestOptions dataKeyRequestOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<GenerateRandomBytesAsync>d__16")]
public sealed virtual Task`1<Secret`1<RandomBytesResponse>> GenerateRandomBytesAsync(RandomBytesRequestOptions randomOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<HashDataAsync>d__17")]
public sealed virtual Task`1<Secret`1<HashResponse>> HashDataAsync(HashRequestOptions hashOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<GenerateHmacAsync>d__18")]
public sealed virtual Task`1<Secret`1<HmacResponse>> GenerateHmacAsync(string keyName, HmacRequestOptions hmacOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<SignDataAsync>d__19")]
public sealed virtual Task`1<Secret`1<SigningResponse>> SignDataAsync(string keyName, SignRequestOptions signOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<VerifySignedDataAsync>d__20")]
public sealed virtual Task`1<Secret`1<VerifyResponse>> VerifySignedDataAsync(string keyName, VerifyRequestOptions verifyOptions, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<BackupKeyAsync>d__21")]
public sealed virtual Task`1<Secret`1<BackupKeyResponse>> BackupKeyAsync(string keyName, string mountPoint, string wrapTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<RestoreKeyAsync>d__22")]
public sealed virtual Task RestoreKeyAsync(RestoreKeyRequestOptions restoreOptions, string keyName, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<TrimKeyAsync>d__23")]
public sealed virtual Task TrimKeyAsync(string keyName, TrimKeyRequestOptions trimKeyRequestOptions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<SetCacheConfigAsync>d__24")]
public sealed virtual Task SetCacheConfigAsync(CacheConfigRequestOptions cacheOptions, string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SecretsEngines.Transit.TransitSecretsEngineProvider/<ReadCacheConfigAsync>d__25")]
public sealed virtual Task`1<Secret`1<CacheResponse>> ReadCacheConfigAsync(string mountPoint, string wrapTimeToLive);
}
public class VaultSharp.V1.SecretsEngines.Transit.TransitWrappingKeyModel : object {
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [JsonPropertyNameAttribute("public_key")]
public string PublicKey { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public void set_PublicKey(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.TrimKeyRequestOptions : object {
    [CompilerGeneratedAttribute]
private int <MinimumAvailableVersion>k__BackingField;
    [JsonPropertyNameAttribute("min_available_version")]
public int MinimumAvailableVersion { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MinimumAvailableVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumAvailableVersion(int value);
}
public class VaultSharp.V1.SecretsEngines.Transit.UpdateKeyRequestOptions : object {
    [CompilerGeneratedAttribute]
private bool <DeletionAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exportable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowPlaintextBackup>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumDecryptionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinimumEncryptionVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private long <AutoRotatePeriod>k__BackingField;
    [JsonPropertyNameAttribute("deletion_allowed")]
public bool DeletionAllowed { get; public set; }
    [JsonPropertyNameAttribute("exportable")]
public bool Exportable { get; public set; }
    [JsonPropertyNameAttribute("allow_plaintext_backup")]
public bool AllowPlaintextBackup { get; public set; }
    [JsonPropertyNameAttribute("min_decryption_version")]
public int MinimumDecryptionVersion { get; public set; }
    [JsonPropertyNameAttribute("min_encryption_version")]
public int MinimumEncryptionVersion { get; public set; }
    [JsonPropertyNameAttribute("auto_rotate_period")]
public long AutoRotatePeriod { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DeletionAllowed();
    [CompilerGeneratedAttribute]
public void set_DeletionAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Exportable();
    [CompilerGeneratedAttribute]
public void set_Exportable(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowPlaintextBackup();
    [CompilerGeneratedAttribute]
public void set_AllowPlaintextBackup(bool value);
    [CompilerGeneratedAttribute]
public int get_MinimumDecryptionVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumDecryptionVersion(int value);
    [CompilerGeneratedAttribute]
public int get_MinimumEncryptionVersion();
    [CompilerGeneratedAttribute]
public void set_MinimumEncryptionVersion(int value);
    [CompilerGeneratedAttribute]
public long get_AutoRotatePeriod();
    [CompilerGeneratedAttribute]
public void set_AutoRotatePeriod(long value);
}
public class VaultSharp.V1.SecretsEngines.Transit.VerifyRequestOptions : VerifySingleInput {
    [CompilerGeneratedAttribute]
private List`1<VerifySingleInput> <BatchInput>k__BackingField;
    [JsonPropertyNameAttribute("batch_input")]
[JsonIgnoreAttribute]
public List`1<VerifySingleInput> BatchInput { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<VerifySingleInput> get_BatchInput();
    [CompilerGeneratedAttribute]
public void set_BatchInput(List`1<VerifySingleInput> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.VerifyResponse : VerifySingleResponse {
    [CompilerGeneratedAttribute]
private List`1<VerifySingleResponse> <BatchResults>k__BackingField;
    [JsonPropertyNameAttribute("batch_results")]
[JsonIgnoreAttribute]
public List`1<VerifySingleResponse> BatchResults { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<VerifySingleResponse> get_BatchResults();
    [CompilerGeneratedAttribute]
public void set_BatchResults(List`1<VerifySingleResponse> value);
}
public class VaultSharp.V1.SecretsEngines.Transit.VerifySingleInput : object {
    [CompilerGeneratedAttribute]
private TransitHashAlgorithm <HashAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedInput>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Signature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hmac>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64EncodedKeyDerivationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreHashed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SignatureAlgorithm> <SignatureAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MarshalingAlgorithm> <MarshalingAlgorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SaltLength>k__BackingField;
    [JsonIgnoreAttribute]
public TransitHashAlgorithm HashAlgorithm { get; public set; }
    [JsonPropertyNameAttribute("input")]
public string Base64EncodedInput { get; public set; }
    [JsonPropertyNameAttribute("signature")]
[JsonIgnoreAttribute]
public string Signature { get; public set; }
    [JsonPropertyNameAttribute("hmac")]
public string Hmac { get; public set; }
    [JsonPropertyNameAttribute("context")]
[JsonIgnoreAttribute]
public string Base64EncodedKeyDerivationContext { get; public set; }
    [JsonPropertyNameAttribute("prehashed")]
public bool PreHashed { get; public set; }
    [JsonPropertyNameAttribute("signature_algorithm")]
[JsonIgnoreAttribute]
public Nullable`1<SignatureAlgorithm> SignatureAlgorithm { get; public set; }
    [JsonPropertyNameAttribute("marshaling_algorithm")]
[JsonIgnoreAttribute]
public Nullable`1<MarshalingAlgorithm> MarshalingAlgorithm { get; public set; }
    [JsonPropertyNameAttribute("salt_length")]
public string SaltLength { get; public set; }
    [CompilerGeneratedAttribute]
public TransitHashAlgorithm get_HashAlgorithm();
    [CompilerGeneratedAttribute]
public void set_HashAlgorithm(TransitHashAlgorithm value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedInput();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedInput(string value);
    [CompilerGeneratedAttribute]
public string get_Signature();
    [CompilerGeneratedAttribute]
public void set_Signature(string value);
    [CompilerGeneratedAttribute]
public string get_Hmac();
    [CompilerGeneratedAttribute]
public void set_Hmac(string value);
    [CompilerGeneratedAttribute]
public string get_Base64EncodedKeyDerivationContext();
    [CompilerGeneratedAttribute]
public void set_Base64EncodedKeyDerivationContext(string value);
    [CompilerGeneratedAttribute]
public bool get_PreHashed();
    [CompilerGeneratedAttribute]
public void set_PreHashed(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<SignatureAlgorithm> get_SignatureAlgorithm();
    [CompilerGeneratedAttribute]
public void set_SignatureAlgorithm(Nullable`1<SignatureAlgorithm> value);
    [CompilerGeneratedAttribute]
public Nullable`1<MarshalingAlgorithm> get_MarshalingAlgorithm();
    [CompilerGeneratedAttribute]
public void set_MarshalingAlgorithm(Nullable`1<MarshalingAlgorithm> value);
    [CompilerGeneratedAttribute]
public string get_SaltLength();
    [CompilerGeneratedAttribute]
public void set_SaltLength(string value);
}
public class VaultSharp.V1.SecretsEngines.Transit.VerifySingleResponse : object {
    [CompilerGeneratedAttribute]
private bool <Valid>k__BackingField;
    [JsonPropertyNameAttribute("valid")]
public bool Valid { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Valid();
    [CompilerGeneratedAttribute]
public void set_Valid(bool value);
}
public class VaultSharp.V1.SecretsEngines.UsernamePasswordCredentials : object {
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [JsonPropertyNameAttribute("username")]
public string Username { get; public set; }
    [JsonPropertyNameAttribute("password")]
public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
[JsonConverterAttribute("VaultSharp.V1.SystemBackend.AuditBackendJsonConverter")]
[JsonDerivedTypeAttribute("VaultSharp.V1.SystemBackend.FileAuditBackend")]
[JsonDerivedTypeAttribute("VaultSharp.V1.SystemBackend.SyslogAuditBackend")]
[JsonDerivedTypeAttribute("VaultSharp.V1.SystemBackend.CustomAuditBackend")]
public abstract class VaultSharp.V1.SystemBackend.AbstractAuditBackend : object {
    [CompilerGeneratedAttribute]
private string <MountPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Local>k__BackingField;
    [JsonIgnoreAttribute]
public string MountPoint { get; public set; }
    [JsonPropertyNameAttribute("type")]
public AuditBackendType Type { get; }
    [JsonPropertyNameAttribute("description")]
public string Description { get; public set; }
    [JsonPropertyNameAttribute("local")]
public bool Local { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MountPoint();
    [CompilerGeneratedAttribute]
public void set_MountPoint(string value);
    public abstract virtual AuditBackendType get_Type();
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_Local();
    [CompilerGeneratedAttribute]
public void set_Local(bool value);
}
public abstract class VaultSharp.V1.SystemBackend.AbstractAuditBackendOptions : object {
    [CompilerGeneratedAttribute]
private string <ElideListResponses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Fallback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Format>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HmacAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogSensitiveDataInRawFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Prefix>k__BackingField;
    [JsonPropertyNameAttribute("elide_list_responses")]
public string ElideListResponses { get; public set; }
    [JsonPropertyNameAttribute("fallback")]
public string Fallback { get; public set; }
    [JsonPropertyNameAttribute("filter")]
public string Filter { get; public set; }
    [JsonPropertyNameAttribute("format")]
public string Format { get; public set; }
    [JsonPropertyNameAttribute("hmac_accessor")]
public string HmacAccessor { get; public set; }
    [JsonPropertyNameAttribute("log_raw")]
public string LogSensitiveDataInRawFormat { get; public set; }
    [JsonPropertyNameAttribute("prefix")]
public string Prefix { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ElideListResponses();
    [CompilerGeneratedAttribute]
public void set_ElideListResponses(string value);
    [CompilerGeneratedAttribute]
public string get_Fallback();
    [CompilerGeneratedAttribute]
public void set_Fallback(string value);
    [CompilerGeneratedAttribute]
public string get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(string value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
public string get_HmacAccessor();
    [CompilerGeneratedAttribute]
public void set_HmacAccessor(string value);
    [CompilerGeneratedAttribute]
public string get_LogSensitiveDataInRawFormat();
    [CompilerGeneratedAttribute]
public void set_LogSensitiveDataInRawFormat(string value);
    [CompilerGeneratedAttribute]
public string get_Prefix();
    [CompilerGeneratedAttribute]
public void set_Prefix(string value);
}
public abstract class VaultSharp.V1.SystemBackend.AbstractPolicyBase : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class VaultSharp.V1.SystemBackend.ACLPolicy : AbstractPolicyBase {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [JsonPropertyNameAttribute("policy")]
public string Policy { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(string value);
}
internal class VaultSharp.V1.SystemBackend.AuditBackendJsonConverter : JsonConverter`1<AbstractAuditBackend> {
    public virtual void Write(Utf8JsonWriter writer, AbstractAuditBackend value, JsonSerializerOptions serializer);
    public virtual AbstractAuditBackend Read(Utf8JsonReader& reader, Type type, JsonSerializerOptions options);
}
[JsonConverterAttribute("VaultSharp.V1.SystemBackend.AuditBackendTypeJsonConverter")]
public class VaultSharp.V1.SystemBackend.AuditBackendType : object {
    private string _value;
    [CompilerGeneratedAttribute]
private static AuditBackendType <File>k__BackingField;
    [CompilerGeneratedAttribute]
private static AuditBackendType <Syslog>k__BackingField;
    public static AuditBackendType File { get; }
    public static AuditBackendType Syslog { get; }
    public string Value { get; }
    public AuditBackendType(string value);
    private static AuditBackendType();
    [CompilerGeneratedAttribute]
public static AuditBackendType get_File();
    [CompilerGeneratedAttribute]
public static AuditBackendType get_Syslog();
    public string get_Value();
    public static bool op_Equality(AuditBackendType left, AuditBackendType right);
    public static bool op_Inequality(AuditBackendType left, AuditBackendType right);
    public sealed virtual bool Equals(AuditBackendType other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class VaultSharp.V1.SystemBackend.AuditBackendTypeJsonConverter : JsonConverter`1<AuditBackendType> {
    public virtual void Write(Utf8JsonWriter writer, AuditBackendType value, JsonSerializerOptions serializer);
    public virtual AuditBackendType Read(Utf8JsonReader& reader, Type type, JsonSerializerOptions options);
}
public class VaultSharp.V1.SystemBackend.AuditHash : object {
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [JsonPropertyNameAttribute("hash")]
public string Hash { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
}
public class VaultSharp.V1.SystemBackend.CORSConfig : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedOrigins>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllowedHeaders>k__BackingField;
    [JsonPropertyNameAttribute("enabled")]
public bool Enabled { get; public set; }
    [JsonPropertyNameAttribute("allowed_origins")]
public IEnumerable`1<string> AllowedOrigins { get; public set; }
    [JsonPropertyNameAttribute("allowed_headers")]
public IEnumerable`1<string> AllowedHeaders { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedOrigins();
    [CompilerGeneratedAttribute]
public void set_AllowedOrigins(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllowedHeaders();
    [CompilerGeneratedAttribute]
public void set_AllowedHeaders(IEnumerable`1<string> value);
}
public class VaultSharp.V1.SystemBackend.CustomAuditBackend : AbstractAuditBackend {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private AuditBackendType <Type>k__BackingField;
    [JsonPropertyNameAttribute("options")]
public Dictionary`2<string, string> Options { get; public set; }
    public AuditBackendType Type { get; }
    public CustomAuditBackend(AuditBackendType auditBackendType);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public virtual AuditBackendType get_Type();
}
public class VaultSharp.V1.SystemBackend.EncryptionKeyStatus : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <InstallTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SequentialKeyNumber>k__BackingField;
    [JsonPropertyNameAttribute("install_time")]
public DateTimeOffset InstallTime { get; public set; }
    [JsonPropertyNameAttribute("term")]
public int SequentialKeyNumber { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_InstallTime();
    [CompilerGeneratedAttribute]
public void set_InstallTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_SequentialKeyNumber();
    [CompilerGeneratedAttribute]
public void set_SequentialKeyNumber(int value);
}
public abstract class VaultSharp.V1.SystemBackend.Enterprise.AbstractGPPolicyBase : AbstractPolicyBase {
    [CompilerGeneratedAttribute]
private string <Policy>k__BackingField;
    [CompilerGeneratedAttribute]
private EnforcementLevel <EnforcementLevel>k__BackingField;
    [JsonPropertyNameAttribute("policy")]
public string Policy { get; public set; }
    [JsonPropertyNameAttribute("enforcement_level")]
public EnforcementLevel EnforcementLevel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(string value);
    [CompilerGeneratedAttribute]
public EnforcementLevel get_EnforcementLevel();
    [CompilerGeneratedAttribute]
public void set_EnforcementLevel(EnforcementLevel value);
}
public class VaultSharp.V1.SystemBackend.Enterprise.ControlGroup : object {
    [CompilerGeneratedAttribute]
private string <MaxTimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("max_ttl")]
public string MaxTimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MaxTimeToLive();
    [CompilerGeneratedAttribute]
public void set_MaxTimeToLive(string value);
}
public class VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestAuthorization : object {
    [CompilerGeneratedAttribute]
private string <EntityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityName>k__BackingField;
    [JsonPropertyNameAttribute("entity_id")]
public string EntityId { get; public set; }
    [JsonPropertyNameAttribute("entity_name")]
public string EntityName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_EntityId();
    [CompilerGeneratedAttribute]
public void set_EntityId(string value);
    [CompilerGeneratedAttribute]
public string get_EntityName();
    [CompilerGeneratedAttribute]
public void set_EntityName(string value);
}
public class VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestEntity : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
public class VaultSharp.V1.SystemBackend.Enterprise.ControlGroupRequestStatus : object {
    [CompilerGeneratedAttribute]
private bool <Approved>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ControlGroupRequestEntity <RequestEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ControlGroupRequestAuthorization> <Authorizations>k__BackingField;
    [JsonPropertyNameAttribute("approved")]
public bool Approved { get; public set; }
    [JsonPropertyNameAttribute("request_path")]
public string RequestPath { get; public set; }
    [JsonPropertyNameAttribute("request_entity")]
public ControlGroupRequestEntity RequestEntity { get; public set; }
    [JsonPropertyNameAttribute("authorizations")]
public IEnumerable`1<ControlGroupRequestAuthorization> Authorizations { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Approved();
    [CompilerGeneratedAttribute]
public void set_Approved(bool value);
    [CompilerGeneratedAttribute]
public string get_RequestPath();
    [CompilerGeneratedAttribute]
public void set_RequestPath(string value);
    [CompilerGeneratedAttribute]
public ControlGroupRequestEntity get_RequestEntity();
    [CompilerGeneratedAttribute]
public void set_RequestEntity(ControlGroupRequestEntity value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ControlGroupRequestAuthorization> get_Authorizations();
    [CompilerGeneratedAttribute]
public void set_Authorizations(IEnumerable`1<ControlGroupRequestAuthorization> value);
}
public class VaultSharp.V1.SystemBackend.Enterprise.EGPPolicy : AbstractGPPolicyBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Paths>k__BackingField;
    [JsonPropertyNameAttribute("paths")]
public IEnumerable`1<string> Paths { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Paths();
    [CompilerGeneratedAttribute]
public void set_Paths(IEnumerable`1<string> value);
}
[JsonConverterAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevelJsonConverter")]
public class VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevel : object {
    private string _value;
    [CompilerGeneratedAttribute]
private static EnforcementLevel <Advisory>k__BackingField;
    [CompilerGeneratedAttribute]
private static EnforcementLevel <SoftMandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private static EnforcementLevel <HardMandatory>k__BackingField;
    public static EnforcementLevel Advisory { get; }
    public static EnforcementLevel SoftMandatory { get; }
    public static EnforcementLevel HardMandatory { get; }
    public string Value { get; }
    public EnforcementLevel(string value);
    private static EnforcementLevel();
    [CompilerGeneratedAttribute]
public static EnforcementLevel get_Advisory();
    [CompilerGeneratedAttribute]
public static EnforcementLevel get_SoftMandatory();
    [CompilerGeneratedAttribute]
public static EnforcementLevel get_HardMandatory();
    public string get_Value();
    public static bool op_Equality(EnforcementLevel left, EnforcementLevel right);
    public static bool op_Inequality(EnforcementLevel left, EnforcementLevel right);
    public sealed virtual bool Equals(EnforcementLevel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class VaultSharp.V1.SystemBackend.Enterprise.EnforcementLevelJsonConverter : JsonConverter`1<EnforcementLevel> {
    public virtual void Write(Utf8JsonWriter writer, EnforcementLevel value, JsonSerializerOptions serializer);
    public virtual EnforcementLevel Read(Utf8JsonReader& reader, Type type, JsonSerializerOptions options);
}
internal class VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider : object {
    private Polymath _polymath;
    public EnterpriseProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<GetControlGroupConfigAsync>d__2")]
public sealed virtual Task`1<Secret`1<ControlGroup>> GetControlGroupConfigAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<ConfigureControlGroupAsync>d__3")]
public sealed virtual Task ConfigureControlGroupAsync(string maxTimeToLive);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<DeleteControlGroupConfigAsync>d__4")]
public sealed virtual Task DeleteControlGroupConfigAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<AuthorizeControlGroupAsync>d__5")]
public sealed virtual Task`1<Secret`1<ControlGroupRequestStatus>> AuthorizeControlGroupAsync(string accessor);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<CheckControlGroupStatusAsync>d__6")]
public sealed virtual Task`1<Secret`1<ControlGroupRequestStatus>> CheckControlGroupStatusAsync(string accessor);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<GetLicenseAsync>d__7")]
public sealed virtual Task`1<Secret`1<License>> GetLicenseAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<InstallLicenseAsync>d__8")]
public sealed virtual Task InstallLicenseAsync(string licenseText);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<GetRGPPoliciesAsync>d__9")]
public sealed virtual Task`1<Secret`1<ListInfo>> GetRGPPoliciesAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<GetRGPPolicyAsync>d__10")]
public sealed virtual Task`1<Secret`1<RGPPolicy>> GetRGPPolicyAsync(string policyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<WriteRGPPolicyAsync>d__11")]
public sealed virtual Task WriteRGPPolicyAsync(RGPPolicy policy);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<DeleteRGPPolicyAsync>d__12")]
public sealed virtual Task DeleteRGPPolicyAsync(string policyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<GetEGPPoliciesAsync>d__13")]
public sealed virtual Task`1<Secret`1<ListInfo>> GetEGPPoliciesAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<GetEGPPolicyAsync>d__14")]
public sealed virtual Task`1<Secret`1<EGPPolicy>> GetEGPPolicyAsync(string policyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<WriteEGPPolicyAsync>d__15")]
public sealed virtual Task WriteEGPPolicyAsync(EGPPolicy policy);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Enterprise.EnterpriseProvider/<DeleteEGPPolicyAsync>d__16")]
public sealed virtual Task DeleteEGPPolicyAsync(string policyName);
}
public interface VaultSharp.V1.SystemBackend.Enterprise.IEnterprise {
    public abstract virtual Task`1<Secret`1<ControlGroup>> GetControlGroupConfigAsync();
    public abstract virtual Task ConfigureControlGroupAsync(string maxTimeToLive);
    public abstract virtual Task DeleteControlGroupConfigAsync();
    public abstract virtual Task`1<Secret`1<ControlGroupRequestStatus>> AuthorizeControlGroupAsync(string accessor);
    public abstract virtual Task`1<Secret`1<ControlGroupRequestStatus>> CheckControlGroupStatusAsync(string accessor);
    public abstract virtual Task`1<Secret`1<License>> GetLicenseAsync();
    public abstract virtual Task InstallLicenseAsync(string licenceText);
    public abstract virtual Task`1<Secret`1<ListInfo>> GetRGPPoliciesAsync();
    public abstract virtual Task`1<Secret`1<RGPPolicy>> GetRGPPolicyAsync(string policyName);
    public abstract virtual Task WriteRGPPolicyAsync(RGPPolicy policy);
    public abstract virtual Task DeleteRGPPolicyAsync(string policyName);
    public abstract virtual Task`1<Secret`1<ListInfo>> GetEGPPoliciesAsync();
    public abstract virtual Task`1<Secret`1<EGPPolicy>> GetEGPPolicyAsync(string policyName);
    public abstract virtual Task WriteEGPPolicyAsync(EGPPolicy policy);
    public abstract virtual Task DeleteEGPPolicyAsync(string policyName);
}
public class VaultSharp.V1.SystemBackend.Enterprise.License : object {
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpirationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Features>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LicenseId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <StartTime>k__BackingField;
    [JsonPropertyNameAttribute("expiration_time")]
public DateTimeOffset ExpirationTime { get; public set; }
    [JsonPropertyNameAttribute("features")]
public IEnumerable`1<string> Features { get; public set; }
    [JsonPropertyNameAttribute("license_id")]
public string LicenseId { get; public set; }
    [JsonPropertyNameAttribute("start_time")]
public DateTimeOffset StartTime { get; public set; }
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpirationTime();
    [CompilerGeneratedAttribute]
public void set_ExpirationTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Features();
    [CompilerGeneratedAttribute]
public void set_Features(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_LicenseId();
    [CompilerGeneratedAttribute]
public void set_LicenseId(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_StartTime();
    [CompilerGeneratedAttribute]
public void set_StartTime(DateTimeOffset value);
}
public class VaultSharp.V1.SystemBackend.Enterprise.RGPPolicy : AbstractGPPolicyBase {
}
public class VaultSharp.V1.SystemBackend.FileAuditBackend : AbstractAuditBackend {
    [CompilerGeneratedAttribute]
private AuditBackendType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private FileAuditBackendOptions <Options>k__BackingField;
    public AuditBackendType Type { get; }
    [JsonPropertyNameAttribute("options")]
public FileAuditBackendOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public virtual AuditBackendType get_Type();
    [CompilerGeneratedAttribute]
public FileAuditBackendOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(FileAuditBackendOptions value);
}
public class VaultSharp.V1.SystemBackend.FileAuditBackendOptions : AbstractAuditBackendOptions {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [JsonPropertyNameAttribute("file_path")]
public string FilePath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
}
public class VaultSharp.V1.SystemBackend.HealthStatus : object {
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sealed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Standby>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformanceStandby>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicationPerformanceMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReplicationDisasterRecoverymode>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ServerTimeUtcUnixTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enterprise>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EchoDurationMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ClockSkewMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ReplicationPrimaryCanaryAgeMilliseconds>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <HttpStatusCode>k__BackingField;
    [JsonPropertyNameAttribute("initialized")]
public bool Initialized { get; public set; }
    [JsonPropertyNameAttribute("sealed")]
public bool Sealed { get; public set; }
    [JsonPropertyNameAttribute("standby")]
public bool Standby { get; public set; }
    [JsonPropertyNameAttribute("performance_standby")]
public bool PerformanceStandby { get; public set; }
    [JsonPropertyNameAttribute("replication_performance_mode")]
public string ReplicationPerformanceMode { get; public set; }
    [JsonPropertyNameAttribute("replication_dr_mode")]
public string ReplicationDisasterRecoverymode { get; public set; }
    [JsonPropertyNameAttribute("server_time_utc")]
public long ServerTimeUtcUnixTimestamp { get; public set; }
    [JsonPropertyNameAttribute("version")]
public string Version { get; public set; }
    [JsonPropertyNameAttribute("cluster_name")]
[JsonIgnoreAttribute]
public string ClusterName { get; public set; }
    [JsonPropertyNameAttribute("cluster_id")]
[JsonIgnoreAttribute]
public string ClusterId { get; public set; }
    [JsonPropertyNameAttribute("enterprise")]
public bool Enterprise { get; public set; }
    [JsonPropertyNameAttribute("echo_duration_ms")]
public long EchoDurationMilliseconds { get; public set; }
    [JsonPropertyNameAttribute("clock_skew_ms")]
public long ClockSkewMilliseconds { get; public set; }
    [JsonPropertyNameAttribute("replication_primary_canary_age_ms")]
public long ReplicationPrimaryCanaryAgeMilliseconds { get; public set; }
    [JsonIgnoreAttribute]
public DateTimeOffset ServerTimeUtc { get; }
    [JsonIgnoreAttribute]
public Nullable`1<int> HttpStatusCode { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Initialized();
    [CompilerGeneratedAttribute]
public void set_Initialized(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sealed();
    [CompilerGeneratedAttribute]
public void set_Sealed(bool value);
    [CompilerGeneratedAttribute]
public bool get_Standby();
    [CompilerGeneratedAttribute]
public void set_Standby(bool value);
    [CompilerGeneratedAttribute]
public bool get_PerformanceStandby();
    [CompilerGeneratedAttribute]
public void set_PerformanceStandby(bool value);
    [CompilerGeneratedAttribute]
public string get_ReplicationPerformanceMode();
    [CompilerGeneratedAttribute]
public void set_ReplicationPerformanceMode(string value);
    [CompilerGeneratedAttribute]
public string get_ReplicationDisasterRecoverymode();
    [CompilerGeneratedAttribute]
public void set_ReplicationDisasterRecoverymode(string value);
    [CompilerGeneratedAttribute]
public long get_ServerTimeUtcUnixTimestamp();
    [CompilerGeneratedAttribute]
public void set_ServerTimeUtcUnixTimestamp(long value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ClusterName();
    [CompilerGeneratedAttribute]
public void set_ClusterName(string value);
    [CompilerGeneratedAttribute]
public string get_ClusterId();
    [CompilerGeneratedAttribute]
public void set_ClusterId(string value);
    [CompilerGeneratedAttribute]
public bool get_Enterprise();
    [CompilerGeneratedAttribute]
public void set_Enterprise(bool value);
    [CompilerGeneratedAttribute]
public long get_EchoDurationMilliseconds();
    [CompilerGeneratedAttribute]
public void set_EchoDurationMilliseconds(long value);
    [CompilerGeneratedAttribute]
public long get_ClockSkewMilliseconds();
    [CompilerGeneratedAttribute]
public void set_ClockSkewMilliseconds(long value);
    [CompilerGeneratedAttribute]
public long get_ReplicationPrimaryCanaryAgeMilliseconds();
    [CompilerGeneratedAttribute]
public void set_ReplicationPrimaryCanaryAgeMilliseconds(long value);
    public DateTimeOffset get_ServerTimeUtc();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public void set_HttpStatusCode(Nullable`1<int> value);
}
public class VaultSharp.V1.SystemBackend.InitOptions : object {
    [CompilerGeneratedAttribute]
private String[] <PgpKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootTokenPgpKey>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecretShares>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecretThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StoredShares>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecoveryShares>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RecoveryThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RecoveryPgpKeys>k__BackingField;
    [JsonPropertyNameAttribute("pgp_keys")]
public String[] PgpKeys { get; public set; }
    [JsonPropertyNameAttribute("root_token_pgp_key")]
public string RootTokenPgpKey { get; public set; }
    [JsonPropertyNameAttribute("secret_shares")]
public int SecretShares { get; public set; }
    [JsonPropertyNameAttribute("secret_threshold")]
public int SecretThreshold { get; public set; }
    [JsonPropertyNameAttribute("stored_shares")]
public int StoredShares { get; public set; }
    [JsonPropertyNameAttribute("recovery_shares")]
public int RecoveryShares { get; public set; }
    [JsonPropertyNameAttribute("recovery_threshold")]
public int RecoveryThreshold { get; public set; }
    [JsonPropertyNameAttribute("recovery_pgp_keys")]
public String[] RecoveryPgpKeys { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_PgpKeys();
    [CompilerGeneratedAttribute]
public void set_PgpKeys(String[] value);
    [CompilerGeneratedAttribute]
public string get_RootTokenPgpKey();
    [CompilerGeneratedAttribute]
public void set_RootTokenPgpKey(string value);
    [CompilerGeneratedAttribute]
public int get_SecretShares();
    [CompilerGeneratedAttribute]
public void set_SecretShares(int value);
    [CompilerGeneratedAttribute]
public int get_SecretThreshold();
    [CompilerGeneratedAttribute]
public void set_SecretThreshold(int value);
    [CompilerGeneratedAttribute]
public int get_StoredShares();
    [CompilerGeneratedAttribute]
public void set_StoredShares(int value);
    [CompilerGeneratedAttribute]
public int get_RecoveryShares();
    [CompilerGeneratedAttribute]
public void set_RecoveryShares(int value);
    [CompilerGeneratedAttribute]
public int get_RecoveryThreshold();
    [CompilerGeneratedAttribute]
public void set_RecoveryThreshold(int value);
    [CompilerGeneratedAttribute]
public String[] get_RecoveryPgpKeys();
    [CompilerGeneratedAttribute]
public void set_RecoveryPgpKeys(String[] value);
}
public interface VaultSharp.V1.SystemBackend.ISystemBackend {
    public IEnterprise Enterprise { get; }
    public IMFA MFA { get; }
    public IPlugin Plugins { get; }
    public abstract virtual IEnterprise get_Enterprise();
    public abstract virtual IMFA get_MFA();
    public abstract virtual IPlugin get_Plugins();
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, AbstractAuditBackend>>> GetAuditBackendsAsync();
    public abstract virtual Task MountAuditBackendAsync(AbstractAuditBackend abstractAuditBackend);
    public abstract virtual Task UnmountAuditBackendAsync(string path);
    public abstract virtual Task`1<Secret`1<AuditHash>> AuditHashAsync(string path, string inputToHash);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, AuthMethod>>> GetAuthBackendsAsync();
    public abstract virtual Task MountAuthBackendAsync(AuthMethod authBackend);
    public abstract virtual Task UnmountAuthBackendAsync(string path);
    public abstract virtual Task`1<Secret`1<BackendConfig>> GetAuthBackendConfigAsync(string path);
    public abstract virtual Task ConfigureAuthBackendAsync(string path, BackendConfig backendConfig);
    public abstract virtual Task`1<Secret`1<TokenCapability>> GetTokenCapabilitiesAsync(string path, string token);
    public abstract virtual Task`1<Secret`1<TokenCapability>> GetTokenCapabilitiesByAcessorAsync(string path, string tokenAccessor);
    public abstract virtual Task`1<Secret`1<TokenCapability>> GetCallingTokenCapabilitiesAsync(string path);
    public abstract virtual Task`1<Secret`1<RequestHeaderSet>> GetAuditRequestHeadersAsync();
    public abstract virtual Task`1<Secret`1<RequestHeader>> GetAuditRequestHeaderAsync(string name);
    public abstract virtual Task PutAuditRequestHeaderAsync(string name, bool hmac);
    public abstract virtual Task DeleteAuditRequestHeaderAsync(string name);
    public abstract virtual Task`1<Secret`1<CORSConfig>> GetCORSConfigAsync();
    public abstract virtual Task ConfigureCORSAsync(CORSConfig corsConfig);
    public abstract virtual Task DeleteCORSConfigAsync();
    public abstract virtual Task`1<RootTokenGenerationStatus> GetRootTokenGenerationStatusAsync();
    public abstract virtual Task`1<RootTokenGenerationStatus> InitiateRootTokenGenerationAsync(string base64EncodedOneTimePassword, string pgpKey);
    public abstract virtual Task CancelRootTokenGenerationAsync();
    public abstract virtual Task`1<RootTokenGenerationStatus> ContinueRootTokenGenerationAsync(string masterShareKey, string nonce);
    public abstract virtual Task`1<RootTokenGenerationStatus> QuickRootTokenGenerationAsync(String[] thresholdMasterShareKeys, string nonce);
    public abstract virtual Task`1<HealthStatus> GetHealthStatusAsync(bool standbyOk, int activeStatusCode, int standbyStatusCode, int sealedStatusCode, int uninitializedStatusCode, HttpMethod queryHttpMethod);
    public abstract virtual Task`1<bool> GetInitStatusAsync();
    public abstract virtual Task`1<MasterCredentials> InitAsync(InitOptions initOptions);
    public abstract virtual Task`1<Secret`1<EncryptionKeyStatus>> GetKeyStatusAsync();
    public abstract virtual Task`1<Leader> GetLeaderAsync();
    public abstract virtual Task`1<Secret`1<Lease>> GetLeaseAsync(string leaseId);
    public abstract virtual Task`1<Secret`1<ListInfo>> GetAllLeasesAsync(string prefix);
    public abstract virtual Task`1<Secret`1<RenewedLease>> RenewLeaseAsync(string leaseId, int incrementSeconds);
    public abstract virtual Task RevokeLeaseAsync(string leaseId);
    public abstract virtual Task ForceRevokeLeaseAsync(string prefix);
    public abstract virtual Task RevokePrefixLeaseAsync(string prefix);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> GetVerbosityLevelOfAllLoggersAsync();
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> GetVerbosityLevelOfLoggerAsync(string loggerName);
    public abstract virtual Task ModifyVerbosityLevelForAllLoggersAsync(LogVerbosityLevel logVerbosityLevel);
    public abstract virtual Task ModifyVerbosityLevelForLoggerAsync(string loggerName, LogVerbosityLevel logVerbosityLevel);
    public abstract virtual Task RevertVerbosityLevelForAllLoggersAsync();
    public abstract virtual Task RevertVerbosityLevelForLoggerAsync(string loggerName);
    public abstract virtual Task`1<Secret`1<SecretsEngine>> GetSecretBackendAsync(string mountPoint);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, SecretsEngine>>> GetSecretBackendsAsync();
    public abstract virtual Task MountSecretBackendAsync(SecretsEngine secretBackend);
    public abstract virtual Task UnmountSecretBackendAsync(string path);
    public abstract virtual Task`1<Secret`1<BackendConfig>> GetSecretBackendConfigAsync(string mountPoint);
    public abstract virtual Task ConfigureSecretBackendAsync(string path, BackendConfig backendConfig);
    public abstract virtual Task`1<Secret`1<ListInfo>> GetPoliciesAsync();
    public abstract virtual Task`1<Secret`1<Policy>> GetPolicyAsync(string policyName);
    public abstract virtual Task WritePolicyAsync(Policy policy);
    public abstract virtual Task DeletePolicyAsync(string policyName);
    public abstract virtual Task`1<Secret`1<ListInfo>> GetACLPoliciesAsync();
    public abstract virtual Task`1<Secret`1<ACLPolicy>> GetACLPolicyAsync(string policyName);
    public abstract virtual Task WriteACLPolicyAsync(ACLPolicy policy);
    public abstract virtual Task DeleteACLPolicyAsync(string policyName);
    public abstract virtual Task`1<Secret`1<string>> GeneratePasswordFromPasswordPolicyAsync(string passwordPolicyName);
    public abstract virtual Task`1<Secret`1<ListInfo>> GetRawSecretKeysAsync(string storagePathPrefix);
    public abstract virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadRawSecretAsync(string storagePath);
    public abstract virtual Task WriteRawSecretAsync(string storagePath, Dictionary`2<string, object> values);
    public abstract virtual Task DeleteRawSecretAsync(string storagePath);
    public abstract virtual Task`1<RekeyStatus> GetRekeyStatusAsync();
    public abstract virtual Task`1<RekeyStatus> InitiateRekeyAsync(int secretShares, int secretThreshold, String[] pgpKeys, bool backup);
    public abstract virtual Task CancelRekeyAsync();
    public abstract virtual Task`1<Secret`1<RekeyBackupInfo>> GetRekeyBackupKeysAsync();
    public abstract virtual Task DeleteRekeyBackupKeysAsync();
    public abstract virtual Task`1<RekeyProgress> ContinueRekeyAsync(string masterShareKey, string rekeyNonce);
    public abstract virtual Task`1<RekeyProgress> QuickRekeyAsync(String[] thresholdMasterShareKeys, string rekeyNonce);
    public abstract virtual Task SealAsync();
    public abstract virtual Task`1<SealStatus> GetSealStatusAsync();
    public abstract virtual Task`1<SealStatus> UnsealAsync(string masterShareKey, bool resetCompletely);
    public abstract virtual Task`1<SealStatus> QuickUnsealAsync(String[] thresholdMasterShareKeys);
    public abstract virtual Task`1<Secret`1<object>> WrapResponseDataAsync(Dictionary`2<string, object> data, string wrapTimeToLive);
    public abstract virtual Task`1<Secret`1<TokenWrapData>> LookupTokenWrapInfoAsync(string tokenId);
    public abstract virtual Task`1<Secret`1<object>> RewrapWrappedResponseDataAsync(string tokenId);
    public abstract virtual Task`1<Secret`1<TData>> UnwrapWrappedResponseDataAsync(string tokenId);
}
public class VaultSharp.V1.SystemBackend.Leader : object {
    [CompilerGeneratedAttribute]
private bool <HighAvailabilityEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSelf>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ActiveTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformanceStandby>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PerformanceStandbyLastRemoteWal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastWal>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RaftCommittedIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RaftAppliedIndex>k__BackingField;
    [JsonPropertyNameAttribute("ha_enabled")]
public bool HighAvailabilityEnabled { get; public set; }
    [JsonPropertyNameAttribute("is_self")]
public bool IsSelf { get; public set; }
    [JsonPropertyNameAttribute("active_time")]
public DateTimeOffset ActiveTime { get; public set; }
    [JsonPropertyNameAttribute("leader_address")]
public string Address { get; public set; }
    [JsonPropertyNameAttribute("leader_cluster_address")]
public string ClusterAddress { get; public set; }
    [JsonPropertyNameAttribute("performance_standby")]
public bool PerformanceStandby { get; public set; }
    [JsonPropertyNameAttribute("performance_standby_last_remote_wal")]
public long PerformanceStandbyLastRemoteWal { get; public set; }
    [JsonPropertyNameAttribute("last_wal")]
public long LastWal { get; public set; }
    [JsonPropertyNameAttribute("raft_committed_index")]
[JsonIgnoreAttribute]
public long RaftCommittedIndex { get; public set; }
    [JsonPropertyNameAttribute("raft_applied_index")]
[JsonIgnoreAttribute]
public long RaftAppliedIndex { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HighAvailabilityEnabled();
    [CompilerGeneratedAttribute]
public void set_HighAvailabilityEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSelf();
    [CompilerGeneratedAttribute]
public void set_IsSelf(bool value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ActiveTime();
    [CompilerGeneratedAttribute]
public void set_ActiveTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_ClusterAddress();
    [CompilerGeneratedAttribute]
public void set_ClusterAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_PerformanceStandby();
    [CompilerGeneratedAttribute]
public void set_PerformanceStandby(bool value);
    [CompilerGeneratedAttribute]
public long get_PerformanceStandbyLastRemoteWal();
    [CompilerGeneratedAttribute]
public void set_PerformanceStandbyLastRemoteWal(long value);
    [CompilerGeneratedAttribute]
public long get_LastWal();
    [CompilerGeneratedAttribute]
public void set_LastWal(long value);
    [CompilerGeneratedAttribute]
public long get_RaftCommittedIndex();
    [CompilerGeneratedAttribute]
public void set_RaftCommittedIndex(long value);
    [CompilerGeneratedAttribute]
public long get_RaftAppliedIndex();
    [CompilerGeneratedAttribute]
public void set_RaftAppliedIndex(long value);
}
public class VaultSharp.V1.SystemBackend.Lease : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <IssueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <ExpiryTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastRenewalTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("issue_time")]
public DateTimeOffset IssueTime { get; public set; }
    [JsonPropertyNameAttribute("expire_time")]
public DateTimeOffset ExpiryTime { get; public set; }
    [JsonPropertyNameAttribute("last_renewal_time")]
public Nullable`1<DateTimeOffset> LastRenewalTime { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [JsonPropertyNameAttribute("ttl")]
public int TimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_IssueTime();
    [CompilerGeneratedAttribute]
public void set_IssueTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiryTime();
    [CompilerGeneratedAttribute]
public void set_ExpiryTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_LastRenewalTime();
    [CompilerGeneratedAttribute]
public void set_LastRenewalTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
    [CompilerGeneratedAttribute]
public int get_TimeToLive();
    [CompilerGeneratedAttribute]
public void set_TimeToLive(int value);
}
public enum VaultSharp.V1.SystemBackend.LogVerbosityLevel : Enum {
    public int value__;
    public static LogVerbosityLevel trace;
    public static LogVerbosityLevel debug;
    public static LogVerbosityLevel notice;
    public static LogVerbosityLevel info;
    public static LogVerbosityLevel warn;
    public static LogVerbosityLevel warning;
    public static LogVerbosityLevel error;
    public static LogVerbosityLevel err;
}
public class VaultSharp.V1.SystemBackend.MasterCredentials : object {
    [CompilerGeneratedAttribute]
private String[] <MasterKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Base64MasterKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RootToken>k__BackingField;
    [JsonPropertyNameAttribute("keys")]
public String[] MasterKeys { get; public set; }
    [JsonPropertyNameAttribute("keys_base64")]
public String[] Base64MasterKeys { get; public set; }
    [JsonPropertyNameAttribute("root_token")]
public string RootToken { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_MasterKeys();
    [CompilerGeneratedAttribute]
public void set_MasterKeys(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Base64MasterKeys();
    [CompilerGeneratedAttribute]
public void set_Base64MasterKeys(String[] value);
    [CompilerGeneratedAttribute]
public string get_RootToken();
    [CompilerGeneratedAttribute]
public void set_RootToken(string value);
}
public abstract class VaultSharp.V1.SystemBackend.MFA.AbstractMFAConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [JsonIgnoreAttribute]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
internal abstract class VaultSharp.V1.SystemBackend.MFA.AbstractMFAProviderBase`1 : object {
    private Polymath _polymath;
    public string Type { get; }
    protected AbstractMFAProviderBase`1(Polymath polymath);
    public abstract virtual string get_Type();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.MFA.AbstractMFAProviderBase`1/<ConfigureAsync>d__4")]
public sealed virtual Task ConfigureAsync(TMFAConfig mfaConfig);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.MFA.AbstractMFAProviderBase`1/<GetConfigAsync>d__5")]
public sealed virtual Task`1<Secret`1<TMFAConfig>> GetConfigAsync(string methodName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.MFA.AbstractMFAProviderBase`1/<DeleteConfigAsync>d__6")]
public sealed virtual Task DeleteConfigAsync(string methodName);
}
public class VaultSharp.V1.SystemBackend.MFA.Duo.DuoConfig : AbstractMFAConfig {
    [CompilerGeneratedAttribute]
private string <MountAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsernameFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecretKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntegrationKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiHostname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PushInfo>k__BackingField;
    [JsonPropertyNameAttribute("mount_accessor")]
public string MountAccessor { get; public set; }
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("username_format")]
public string UsernameFormat { get; public set; }
    [JsonPropertyNameAttribute("secret_key")]
public string SecretKey { get; public set; }
    [JsonPropertyNameAttribute("integration_key")]
public string IntegrationKey { get; public set; }
    [JsonPropertyNameAttribute("api_hostname")]
public string ApiHostname { get; public set; }
    [JsonPropertyNameAttribute("push_info")]
public string PushInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MountAccessor();
    [CompilerGeneratedAttribute]
public void set_MountAccessor(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_UsernameFormat();
    [CompilerGeneratedAttribute]
public void set_UsernameFormat(string value);
    [CompilerGeneratedAttribute]
public string get_SecretKey();
    [CompilerGeneratedAttribute]
public void set_SecretKey(string value);
    [CompilerGeneratedAttribute]
public string get_IntegrationKey();
    [CompilerGeneratedAttribute]
public void set_IntegrationKey(string value);
    [CompilerGeneratedAttribute]
public string get_ApiHostname();
    [CompilerGeneratedAttribute]
public void set_ApiHostname(string value);
    [CompilerGeneratedAttribute]
public string get_PushInfo();
    [CompilerGeneratedAttribute]
public void set_PushInfo(string value);
}
internal class VaultSharp.V1.SystemBackend.MFA.Duo.DuoProvider : AbstractMFAProviderBase`1<DuoConfig> {
    public string Type { get; }
    public DuoProvider(Polymath polymath);
    public virtual string get_Type();
}
public interface VaultSharp.V1.SystemBackend.MFA.Duo.IDuo {
}
public interface VaultSharp.V1.SystemBackend.MFA.IMFA {
    public IDuo Duo { get; }
    public IOkta Okta { get; }
    public IPingID PingID { get; }
    public ITOTP TOTP { get; }
    public abstract virtual IDuo get_Duo();
    public abstract virtual IOkta get_Okta();
    public abstract virtual IPingID get_PingID();
    public abstract virtual ITOTP get_TOTP();
}
public interface VaultSharp.V1.SystemBackend.MFA.IMFAProviderBase`1 {
    public abstract virtual Task ConfigureAsync(TMFAConfig mfaConfig);
    public abstract virtual Task`1<Secret`1<TMFAConfig>> GetConfigAsync(string methodName);
    public abstract virtual Task DeleteConfigAsync(string methodName);
}
internal class VaultSharp.V1.SystemBackend.MFA.MFAProvider : object {
    [CompilerGeneratedAttribute]
private IDuo <Duo>k__BackingField;
    [CompilerGeneratedAttribute]
private IOkta <Okta>k__BackingField;
    [CompilerGeneratedAttribute]
private IPingID <PingID>k__BackingField;
    [CompilerGeneratedAttribute]
private ITOTP <TOTP>k__BackingField;
    public IDuo Duo { get; }
    public IOkta Okta { get; }
    public IPingID PingID { get; }
    public ITOTP TOTP { get; }
    public MFAProvider(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual IDuo get_Duo();
    [CompilerGeneratedAttribute]
public sealed virtual IOkta get_Okta();
    [CompilerGeneratedAttribute]
public sealed virtual IPingID get_PingID();
    [CompilerGeneratedAttribute]
public sealed virtual ITOTP get_TOTP();
}
public interface VaultSharp.V1.SystemBackend.MFA.Okta.IOkta {
}
public class VaultSharp.V1.SystemBackend.MFA.Okta.OktaConfig : AbstractMFAConfig {
    [CompilerGeneratedAttribute]
private string <MountAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsernameFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrgName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApiToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Production>k__BackingField;
    [JsonPropertyNameAttribute("mount_accessor")]
public string MountAccessor { get; public set; }
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("username_format")]
public string UsernameFormat { get; public set; }
    [JsonPropertyNameAttribute("org_name")]
public string OrgName { get; public set; }
    [JsonPropertyNameAttribute("api_token")]
public string ApiToken { get; public set; }
    [JsonPropertyNameAttribute("base_url")]
public string BaseUrl { get; public set; }
    [JsonPropertyNameAttribute("production")]
public bool Production { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MountAccessor();
    [CompilerGeneratedAttribute]
public void set_MountAccessor(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_UsernameFormat();
    [CompilerGeneratedAttribute]
public void set_UsernameFormat(string value);
    [CompilerGeneratedAttribute]
public string get_OrgName();
    [CompilerGeneratedAttribute]
public void set_OrgName(string value);
    [CompilerGeneratedAttribute]
public string get_ApiToken();
    [CompilerGeneratedAttribute]
public void set_ApiToken(string value);
    [CompilerGeneratedAttribute]
public string get_BaseUrl();
    [CompilerGeneratedAttribute]
public void set_BaseUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_Production();
    [CompilerGeneratedAttribute]
public void set_Production(bool value);
}
internal class VaultSharp.V1.SystemBackend.MFA.Okta.OktaProvider : AbstractMFAProviderBase`1<OktaConfig> {
    public string Type { get; }
    public OktaProvider(Polymath polymath);
    public virtual string get_Type();
}
public interface VaultSharp.V1.SystemBackend.MFA.PingID.IPingID {
}
public class VaultSharp.V1.SystemBackend.MFA.PingID.PingIDConfig : AbstractMFAConfig {
    [CompilerGeneratedAttribute]
private string <MountAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UsernameFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64SettingsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdpUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdminUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticatorUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrgAlias>k__BackingField;
    [JsonPropertyNameAttribute("mount_accessor")]
public string MountAccessor { get; public set; }
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("username_format")]
public string UsernameFormat { get; public set; }
    [JsonPropertyNameAttribute("settings_file_base64")]
public string Base64SettingsFile { get; public set; }
    [JsonPropertyNameAttribute("use_signature")]
public bool UseSignature { get; public set; }
    [JsonPropertyNameAttribute("idp_url")]
public string IdpUrl { get; public set; }
    [JsonPropertyNameAttribute("admin_url")]
public string AdminUrl { get; public set; }
    [JsonPropertyNameAttribute("authenticator_url")]
public string AuthenticatorUrl { get; public set; }
    [JsonPropertyNameAttribute("org_alias")]
public string OrgAlias { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MountAccessor();
    [CompilerGeneratedAttribute]
public void set_MountAccessor(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_UsernameFormat();
    [CompilerGeneratedAttribute]
public void set_UsernameFormat(string value);
    [CompilerGeneratedAttribute]
public string get_Base64SettingsFile();
    [CompilerGeneratedAttribute]
public void set_Base64SettingsFile(string value);
    [CompilerGeneratedAttribute]
public bool get_UseSignature();
    [CompilerGeneratedAttribute]
public void set_UseSignature(bool value);
    [CompilerGeneratedAttribute]
public string get_IdpUrl();
    [CompilerGeneratedAttribute]
public void set_IdpUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AdminUrl();
    [CompilerGeneratedAttribute]
public void set_AdminUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticatorUrl();
    [CompilerGeneratedAttribute]
public void set_AuthenticatorUrl(string value);
    [CompilerGeneratedAttribute]
public string get_OrgAlias();
    [CompilerGeneratedAttribute]
public void set_OrgAlias(string value);
}
internal class VaultSharp.V1.SystemBackend.MFA.PingID.PingIDProvider : AbstractMFAProviderBase`1<PingIDConfig> {
    public string Type { get; }
    public PingIDProvider(Polymath polymath);
    public virtual string get_Type();
}
public interface VaultSharp.V1.SystemBackend.MFA.TOTP.ITOTP {
}
public class VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPConfig : AbstractMFAConfig {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Issuer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Period>k__BackingField;
    [CompilerGeneratedAttribute]
private int <KeySize>k__BackingField;
    [CompilerGeneratedAttribute]
private int <QRSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Algorithm>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Digits>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Skew>k__BackingField;
    [JsonPropertyNameAttribute("id")]
public string Id { get; public set; }
    [JsonPropertyNameAttribute("issuer")]
public string Issuer { get; public set; }
    [JsonPropertyNameAttribute("period")]
public string Period { get; public set; }
    [JsonPropertyNameAttribute("key_size")]
public int KeySize { get; public set; }
    [JsonPropertyNameAttribute("qr_size")]
public int QRSize { get; public set; }
    [JsonPropertyNameAttribute("algorithm")]
public string Algorithm { get; public set; }
    [JsonPropertyNameAttribute("digits")]
public int Digits { get; public set; }
    [JsonPropertyNameAttribute("skew")]
public int Skew { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_Period();
    [CompilerGeneratedAttribute]
public void set_Period(string value);
    [CompilerGeneratedAttribute]
public int get_KeySize();
    [CompilerGeneratedAttribute]
public void set_KeySize(int value);
    [CompilerGeneratedAttribute]
public int get_QRSize();
    [CompilerGeneratedAttribute]
public void set_QRSize(int value);
    [CompilerGeneratedAttribute]
public string get_Algorithm();
    [CompilerGeneratedAttribute]
public void set_Algorithm(string value);
    [CompilerGeneratedAttribute]
public int get_Digits();
    [CompilerGeneratedAttribute]
public void set_Digits(int value);
    [CompilerGeneratedAttribute]
public int get_Skew();
    [CompilerGeneratedAttribute]
public void set_Skew(int value);
}
internal class VaultSharp.V1.SystemBackend.MFA.TOTP.TOTPProvider : AbstractMFAProviderBase`1<TOTPConfig> {
    public string Type { get; }
    public TOTPProvider(Polymath polymath);
    public virtual string get_Type();
}
public interface VaultSharp.V1.SystemBackend.Plugin.IPlugin {
    public abstract virtual Task ReloadBackendsAsync(string plugin, IEnumerable`1<string> backendMountPaths);
    public abstract virtual Task`1<Secret`1<ListInfo>> GetCatalogAsync();
    public abstract virtual Task RegisterAsync(PluginConfig pluginConfig);
    public abstract virtual Task`1<Secret`1<PluginConfig>> GetConfigAsync(string pluginName);
    public abstract virtual Task UnregisterAsync(string pluginName);
}
public class VaultSharp.V1.SystemBackend.Plugin.PluginConfig : object {
    [CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Builtin>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sha256>k__BackingField;
    [JsonPropertyNameAttribute("args")]
public String[] Args { get; public set; }
    [JsonPropertyNameAttribute("builtin")]
public bool Builtin { get; public set; }
    [JsonPropertyNameAttribute("command")]
public string Command { get; public set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("sha256")]
public string Sha256 { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Builtin();
    [CompilerGeneratedAttribute]
public void set_Builtin(bool value);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Sha256();
    [CompilerGeneratedAttribute]
public void set_Sha256(string value);
}
internal class VaultSharp.V1.SystemBackend.Plugin.PluginProvider : object {
    private Polymath _polymath;
    public PluginProvider(Polymath polymath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Plugin.PluginProvider/<ReloadBackendsAsync>d__2")]
public sealed virtual Task ReloadBackendsAsync(string plugin, IEnumerable`1<string> backendMountPaths);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Plugin.PluginProvider/<GetCatalogAsync>d__3")]
public sealed virtual Task`1<Secret`1<ListInfo>> GetCatalogAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Plugin.PluginProvider/<RegisterAsync>d__4")]
public sealed virtual Task RegisterAsync(PluginConfig pluginConfig);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Plugin.PluginProvider/<GetConfigAsync>d__5")]
public sealed virtual Task`1<Secret`1<PluginConfig>> GetConfigAsync(string pluginName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.Plugin.PluginProvider/<UnregisterAsync>d__6")]
public sealed virtual Task UnregisterAsync(string pluginName);
}
public class VaultSharp.V1.SystemBackend.Policy : AbstractPolicyBase {
    [CompilerGeneratedAttribute]
private string <Rules>k__BackingField;
    [JsonPropertyNameAttribute("rules")]
public string Rules { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Rules();
    [CompilerGeneratedAttribute]
public void set_Rules(string value);
}
public class VaultSharp.V1.SystemBackend.RekeyBackupInfo : object {
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <PGPFingerprintToEncryptedKeyMap>k__BackingField;
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("keys")]
public Dictionary`2<string, string> PGPFingerprintToEncryptedKeyMap { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_PGPFingerprintToEncryptedKeyMap();
    [CompilerGeneratedAttribute]
public void set_PGPFingerprintToEncryptedKeyMap(Dictionary`2<string, string> value);
}
public class VaultSharp.V1.SystemBackend.RekeyProgress : object {
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Complete>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <MasterKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Base64MasterKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PGPFingerPrints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Backup>k__BackingField;
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("complete")]
public bool Complete { get; public set; }
    [JsonPropertyNameAttribute("keys")]
public String[] MasterKeys { get; public set; }
    [JsonPropertyNameAttribute("keys_base64")]
public String[] Base64MasterKeys { get; public set; }
    [JsonPropertyNameAttribute("pgp_fingerprints")]
public String[] PGPFingerPrints { get; public set; }
    [JsonPropertyNameAttribute("backup")]
public bool Backup { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public bool get_Complete();
    [CompilerGeneratedAttribute]
public void set_Complete(bool value);
    [CompilerGeneratedAttribute]
public String[] get_MasterKeys();
    [CompilerGeneratedAttribute]
public void set_MasterKeys(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_Base64MasterKeys();
    [CompilerGeneratedAttribute]
public void set_Base64MasterKeys(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PGPFingerPrints();
    [CompilerGeneratedAttribute]
public void set_PGPFingerPrints(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Backup();
    [CompilerGeneratedAttribute]
public void set_Backup(bool value);
}
public class VaultSharp.V1.SystemBackend.RekeyStatus : object {
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecretThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecretShares>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnsealKeysProvided>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequiredUnsealKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <PGPFingerPrints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Backup>k__BackingField;
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("started")]
public bool Started { get; public set; }
    [JsonPropertyNameAttribute("t")]
public int SecretThreshold { get; public set; }
    [JsonPropertyNameAttribute("n")]
public int SecretShares { get; public set; }
    [JsonPropertyNameAttribute("progress")]
public int UnsealKeysProvided { get; public set; }
    [JsonPropertyNameAttribute("required")]
public int RequiredUnsealKeys { get; public set; }
    [JsonPropertyNameAttribute("pgp_fingerprints")]
public String[] PGPFingerPrints { get; public set; }
    [JsonPropertyNameAttribute("backup")]
public bool Backup { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public bool get_Started();
    [CompilerGeneratedAttribute]
public void set_Started(bool value);
    [CompilerGeneratedAttribute]
public int get_SecretThreshold();
    [CompilerGeneratedAttribute]
public void set_SecretThreshold(int value);
    [CompilerGeneratedAttribute]
public int get_SecretShares();
    [CompilerGeneratedAttribute]
public void set_SecretShares(int value);
    [CompilerGeneratedAttribute]
public int get_UnsealKeysProvided();
    [CompilerGeneratedAttribute]
public void set_UnsealKeysProvided(int value);
    [CompilerGeneratedAttribute]
public int get_RequiredUnsealKeys();
    [CompilerGeneratedAttribute]
public void set_RequiredUnsealKeys(int value);
    [CompilerGeneratedAttribute]
public String[] get_PGPFingerPrints();
    [CompilerGeneratedAttribute]
public void set_PGPFingerPrints(String[] value);
    [CompilerGeneratedAttribute]
public bool get_Backup();
    [CompilerGeneratedAttribute]
public void set_Backup(bool value);
}
public class VaultSharp.V1.SystemBackend.RenewedLease : object {
    [CompilerGeneratedAttribute]
private string <LeaseId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Renewable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LeaseDuration>k__BackingField;
    [JsonPropertyNameAttribute("lease_id")]
public string LeaseId { get; public set; }
    [JsonPropertyNameAttribute("renewable")]
public bool Renewable { get; public set; }
    [JsonPropertyNameAttribute("lease_duration")]
public int LeaseDuration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LeaseId();
    [CompilerGeneratedAttribute]
public void set_LeaseId(string value);
    [CompilerGeneratedAttribute]
public bool get_Renewable();
    [CompilerGeneratedAttribute]
public void set_Renewable(bool value);
    [CompilerGeneratedAttribute]
public int get_LeaseDuration();
    [CompilerGeneratedAttribute]
public void set_LeaseDuration(int value);
}
public class VaultSharp.V1.SystemBackend.RequestHeader : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HMAC>k__BackingField;
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("hmac")]
public bool HMAC { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_HMAC();
    [CompilerGeneratedAttribute]
public void set_HMAC(bool value);
}
public class VaultSharp.V1.SystemBackend.RequestHeaderSet : object {
    [CompilerGeneratedAttribute]
private IList`1<RequestHeader> <Headers>k__BackingField;
    [JsonPropertyNameAttribute("headers")]
public IList`1<RequestHeader> Headers { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<RequestHeader> get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(IList`1<RequestHeader> value);
}
public class VaultSharp.V1.SystemBackend.RootTokenGenerationStatus : object {
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Started>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnsealKeysProvided>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequiredUnsealKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Complete>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedRootToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PGPFingerPrint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OTP>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OTPLength>k__BackingField;
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("started")]
public bool Started { get; public set; }
    [JsonPropertyNameAttribute("progress")]
public int UnsealKeysProvided { get; public set; }
    [JsonPropertyNameAttribute("required")]
public int RequiredUnsealKeys { get; public set; }
    [JsonPropertyNameAttribute("complete")]
public bool Complete { get; public set; }
    [JsonPropertyNameAttribute("encoded_token")]
public string EncodedToken { get; public set; }
    [JsonPropertyNameAttribute("encoded_root_token")]
public string EncodedRootToken { get; public set; }
    [JsonPropertyNameAttribute("pgp_fingerprint")]
public string PGPFingerPrint { get; public set; }
    [JsonPropertyNameAttribute("otp")]
public string OTP { get; public set; }
    [JsonPropertyNameAttribute("otp_length")]
public int OTPLength { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public bool get_Started();
    [CompilerGeneratedAttribute]
public void set_Started(bool value);
    [CompilerGeneratedAttribute]
public int get_UnsealKeysProvided();
    [CompilerGeneratedAttribute]
public void set_UnsealKeysProvided(int value);
    [CompilerGeneratedAttribute]
public int get_RequiredUnsealKeys();
    [CompilerGeneratedAttribute]
public void set_RequiredUnsealKeys(int value);
    [CompilerGeneratedAttribute]
public bool get_Complete();
    [CompilerGeneratedAttribute]
public void set_Complete(bool value);
    [CompilerGeneratedAttribute]
public string get_EncodedToken();
    [CompilerGeneratedAttribute]
public void set_EncodedToken(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedRootToken();
    [CompilerGeneratedAttribute]
public void set_EncodedRootToken(string value);
    [CompilerGeneratedAttribute]
public string get_PGPFingerPrint();
    [CompilerGeneratedAttribute]
public void set_PGPFingerPrint(string value);
    [CompilerGeneratedAttribute]
public string get_OTP();
    [CompilerGeneratedAttribute]
public void set_OTP(string value);
    [CompilerGeneratedAttribute]
public int get_OTPLength();
    [CompilerGeneratedAttribute]
public void set_OTPLength(int value);
}
public class VaultSharp.V1.SystemBackend.SealStatus : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Initialized>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Sealed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecretThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecretShares>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Nonce>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <BuildDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Migration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RecoverySeal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HCPLinkStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HCPLinkResourceID>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HighAvailabilityEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <ActiveTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterId>k__BackingField;
    [JsonPropertyNameAttribute("type")]
public string Type { get; public set; }
    [JsonPropertyNameAttribute("initialized")]
public bool Initialized { get; public set; }
    [JsonPropertyNameAttribute("sealed")]
public bool Sealed { get; public set; }
    [JsonPropertyNameAttribute("t")]
public int SecretThreshold { get; public set; }
    [JsonPropertyNameAttribute("n")]
public int SecretShares { get; public set; }
    [JsonPropertyNameAttribute("progress")]
public int Progress { get; public set; }
    [JsonPropertyNameAttribute("nonce")]
public string Nonce { get; public set; }
    [JsonPropertyNameAttribute("version")]
public string Version { get; public set; }
    [JsonPropertyNameAttribute("build_date")]
public DateTimeOffset BuildDate { get; public set; }
    [JsonPropertyNameAttribute("migration")]
public bool Migration { get; public set; }
    [JsonPropertyNameAttribute("recovery_seal")]
public bool RecoverySeal { get; public set; }
    [JsonPropertyNameAttribute("storage_type")]
public string StorageType { get; public set; }
    [JsonPropertyNameAttribute("hcp_link_status")]
[JsonIgnoreAttribute]
public string HCPLinkStatus { get; public set; }
    [JsonPropertyNameAttribute("hcp_link_resource_ID")]
[JsonIgnoreAttribute]
public string HCPLinkResourceID { get; public set; }
    [JsonPropertyNameAttribute("warnings")]
[JsonIgnoreAttribute]
public List`1<string> Warnings { get; public set; }
    [JsonPropertyNameAttribute("ha_enabled")]
[JsonIgnoreAttribute]
public Nullable`1<bool> HighAvailabilityEnabled { get; public set; }
    [JsonPropertyNameAttribute("active_time")]
[JsonIgnoreAttribute]
public Nullable`1<DateTimeOffset> ActiveTime { get; public set; }
    [JsonPropertyNameAttribute("cluster_name")]
[JsonIgnoreAttribute]
public string ClusterName { get; public set; }
    [JsonPropertyNameAttribute("cluster_id")]
[JsonIgnoreAttribute]
public string ClusterId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public bool get_Initialized();
    [CompilerGeneratedAttribute]
public void set_Initialized(bool value);
    [CompilerGeneratedAttribute]
public bool get_Sealed();
    [CompilerGeneratedAttribute]
public void set_Sealed(bool value);
    [CompilerGeneratedAttribute]
public int get_SecretThreshold();
    [CompilerGeneratedAttribute]
public void set_SecretThreshold(int value);
    [CompilerGeneratedAttribute]
public int get_SecretShares();
    [CompilerGeneratedAttribute]
public void set_SecretShares(int value);
    [CompilerGeneratedAttribute]
public int get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(int value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_BuildDate();
    [CompilerGeneratedAttribute]
public void set_BuildDate(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_Migration();
    [CompilerGeneratedAttribute]
public void set_Migration(bool value);
    [CompilerGeneratedAttribute]
public bool get_RecoverySeal();
    [CompilerGeneratedAttribute]
public void set_RecoverySeal(bool value);
    [CompilerGeneratedAttribute]
public string get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(string value);
    [CompilerGeneratedAttribute]
public string get_HCPLinkStatus();
    [CompilerGeneratedAttribute]
public void set_HCPLinkStatus(string value);
    [CompilerGeneratedAttribute]
public string get_HCPLinkResourceID();
    [CompilerGeneratedAttribute]
public void set_HCPLinkResourceID(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Warnings();
    [CompilerGeneratedAttribute]
public void set_Warnings(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HighAvailabilityEnabled();
    [CompilerGeneratedAttribute]
public void set_HighAvailabilityEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_ActiveTime();
    [CompilerGeneratedAttribute]
public void set_ActiveTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public string get_ClusterName();
    [CompilerGeneratedAttribute]
public void set_ClusterName(string value);
    [CompilerGeneratedAttribute]
public string get_ClusterId();
    [CompilerGeneratedAttribute]
public void set_ClusterId(string value);
}
public class VaultSharp.V1.SystemBackend.SyslogAuditBackend : AbstractAuditBackend {
    [CompilerGeneratedAttribute]
private AuditBackendType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private SyslogAuditBackendOptions <Options>k__BackingField;
    public AuditBackendType Type { get; }
    [JsonPropertyNameAttribute("options")]
public SyslogAuditBackendOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public virtual AuditBackendType get_Type();
    [CompilerGeneratedAttribute]
public SyslogAuditBackendOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(SyslogAuditBackendOptions value);
}
public class VaultSharp.V1.SystemBackend.SyslogAuditBackendOptions : AbstractAuditBackendOptions {
    [CompilerGeneratedAttribute]
private string <Facility>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Tag>k__BackingField;
    [JsonPropertyNameAttribute("facility")]
public string Facility { get; public set; }
    [JsonPropertyNameAttribute("tag")]
public string Tag { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Facility();
    [CompilerGeneratedAttribute]
public void set_Facility(string value);
    [CompilerGeneratedAttribute]
public string get_Tag();
    [CompilerGeneratedAttribute]
public void set_Tag(string value);
}
internal class VaultSharp.V1.SystemBackend.SystemBackendProvider : object {
    private Polymath _polymath;
    [CompilerGeneratedAttribute]
private IEnterprise <Enterprise>k__BackingField;
    [CompilerGeneratedAttribute]
private IMFA <MFA>k__BackingField;
    [CompilerGeneratedAttribute]
private IPlugin <Plugins>k__BackingField;
    public IEnterprise Enterprise { get; }
    public IMFA MFA { get; }
    public IPlugin Plugins { get; }
    public SystemBackendProvider(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual IEnterprise get_Enterprise();
    [CompilerGeneratedAttribute]
public sealed virtual IMFA get_MFA();
    [CompilerGeneratedAttribute]
public sealed virtual IPlugin get_Plugins();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetAuditBackendsAsync>d__11")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, AbstractAuditBackend>>> GetAuditBackendsAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<MountAuditBackendAsync>d__12")]
public sealed virtual Task MountAuditBackendAsync(AbstractAuditBackend abstractAuditBackend);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<UnmountAuditBackendAsync>d__13")]
public sealed virtual Task UnmountAuditBackendAsync(string path);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<AuditHashAsync>d__14")]
public sealed virtual Task`1<Secret`1<AuditHash>> AuditHashAsync(string path, string inputToHash);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetAuthBackendsAsync>d__15")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, AuthMethod>>> GetAuthBackendsAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<MountAuthBackendAsync>d__16")]
public sealed virtual Task MountAuthBackendAsync(AuthMethod authBackend);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<UnmountAuthBackendAsync>d__17")]
public sealed virtual Task UnmountAuthBackendAsync(string path);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetAuthBackendConfigAsync>d__18")]
public sealed virtual Task`1<Secret`1<BackendConfig>> GetAuthBackendConfigAsync(string path);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ConfigureAuthBackendAsync>d__19")]
public sealed virtual Task ConfigureAuthBackendAsync(string path, BackendConfig backendConfig);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetTokenCapabilitiesAsync>d__20")]
public sealed virtual Task`1<Secret`1<TokenCapability>> GetTokenCapabilitiesAsync(string path, string token);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetTokenCapabilitiesByAcessorAsync>d__21")]
public sealed virtual Task`1<Secret`1<TokenCapability>> GetTokenCapabilitiesByAcessorAsync(string path, string tokenAccessor);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetCallingTokenCapabilitiesAsync>d__22")]
public sealed virtual Task`1<Secret`1<TokenCapability>> GetCallingTokenCapabilitiesAsync(string path);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetAuditRequestHeadersAsync>d__23")]
public sealed virtual Task`1<Secret`1<RequestHeaderSet>> GetAuditRequestHeadersAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetAuditRequestHeaderAsync>d__24")]
public sealed virtual Task`1<Secret`1<RequestHeader>> GetAuditRequestHeaderAsync(string name);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<PutAuditRequestHeaderAsync>d__25")]
public sealed virtual Task PutAuditRequestHeaderAsync(string name, bool hmac);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<DeleteAuditRequestHeaderAsync>d__26")]
public sealed virtual Task DeleteAuditRequestHeaderAsync(string name);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetCORSConfigAsync>d__27")]
public sealed virtual Task`1<Secret`1<CORSConfig>> GetCORSConfigAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ConfigureCORSAsync>d__28")]
public sealed virtual Task ConfigureCORSAsync(CORSConfig corsConfig);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<DeleteCORSConfigAsync>d__29")]
public sealed virtual Task DeleteCORSConfigAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetRootTokenGenerationStatusAsync>d__30")]
public sealed virtual Task`1<RootTokenGenerationStatus> GetRootTokenGenerationStatusAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<InitiateRootTokenGenerationAsync>d__31")]
public sealed virtual Task`1<RootTokenGenerationStatus> InitiateRootTokenGenerationAsync(string base64EncodedOneTimePassword, string pgpKey);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<CancelRootTokenGenerationAsync>d__32")]
public sealed virtual Task CancelRootTokenGenerationAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ContinueRootTokenGenerationAsync>d__33")]
public sealed virtual Task`1<RootTokenGenerationStatus> ContinueRootTokenGenerationAsync(string masterShareKey, string nonce);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<QuickRootTokenGenerationAsync>d__34")]
public sealed virtual Task`1<RootTokenGenerationStatus> QuickRootTokenGenerationAsync(String[] thresholdMasterShareKeys, string nonce);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetHealthStatusAsync>d__35")]
public sealed virtual Task`1<HealthStatus> GetHealthStatusAsync(bool standbyOk, int activeStatusCode, int standbyStatusCode, int sealedStatusCode, int uninitializedStatusCode, HttpMethod queryHttpMethod);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetInitStatusAsync>d__36")]
public sealed virtual Task`1<bool> GetInitStatusAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<InitAsync>d__37")]
public sealed virtual Task`1<MasterCredentials> InitAsync(InitOptions initOptions);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetKeyStatusAsync>d__38")]
public sealed virtual Task`1<Secret`1<EncryptionKeyStatus>> GetKeyStatusAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetLeaderAsync>d__39")]
public sealed virtual Task`1<Leader> GetLeaderAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetLeaseAsync>d__40")]
public sealed virtual Task`1<Secret`1<Lease>> GetLeaseAsync(string leaseId);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetAllLeasesAsync>d__41")]
public sealed virtual Task`1<Secret`1<ListInfo>> GetAllLeasesAsync(string prefix);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<RenewLeaseAsync>d__42")]
public sealed virtual Task`1<Secret`1<RenewedLease>> RenewLeaseAsync(string leaseId, int incrementSeconds);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<RevokeLeaseAsync>d__43")]
public sealed virtual Task RevokeLeaseAsync(string leaseId);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ForceRevokeLeaseAsync>d__44")]
public sealed virtual Task ForceRevokeLeaseAsync(string prefix);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<RevokePrefixLeaseAsync>d__45")]
public sealed virtual Task RevokePrefixLeaseAsync(string prefix);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetVerbosityLevelOfAllLoggersAsync>d__46")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> GetVerbosityLevelOfAllLoggersAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetVerbosityLevelOfLoggerAsync>d__47")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> GetVerbosityLevelOfLoggerAsync(string loggerName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ModifyVerbosityLevelForAllLoggersAsync>d__48")]
public sealed virtual Task ModifyVerbosityLevelForAllLoggersAsync(LogVerbosityLevel logVerbosityLevel);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ModifyVerbosityLevelForLoggerAsync>d__49")]
public sealed virtual Task ModifyVerbosityLevelForLoggerAsync(string loggerName, LogVerbosityLevel logVerbosityLevel);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<RevertVerbosityLevelForAllLoggersAsync>d__50")]
public sealed virtual Task RevertVerbosityLevelForAllLoggersAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<RevertVerbosityLevelForLoggerAsync>d__51")]
public sealed virtual Task RevertVerbosityLevelForLoggerAsync(string loggerName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetSecretBackendAsync>d__52")]
public sealed virtual Task`1<Secret`1<SecretsEngine>> GetSecretBackendAsync(string mountPoint);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetSecretBackendsAsync>d__53")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, SecretsEngine>>> GetSecretBackendsAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<MountSecretBackendAsync>d__54")]
public sealed virtual Task MountSecretBackendAsync(SecretsEngine secretBackend);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<UnmountSecretBackendAsync>d__55")]
public sealed virtual Task UnmountSecretBackendAsync(string path);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetSecretBackendConfigAsync>d__56")]
public sealed virtual Task`1<Secret`1<BackendConfig>> GetSecretBackendConfigAsync(string path);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ConfigureSecretBackendAsync>d__57")]
public sealed virtual Task ConfigureSecretBackendAsync(string path, BackendConfig backendConfig);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetPoliciesAsync>d__58")]
public sealed virtual Task`1<Secret`1<ListInfo>> GetPoliciesAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetPolicyAsync>d__59")]
public sealed virtual Task`1<Secret`1<Policy>> GetPolicyAsync(string policyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<WritePolicyAsync>d__60")]
public sealed virtual Task WritePolicyAsync(Policy policy);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<DeletePolicyAsync>d__61")]
public sealed virtual Task DeletePolicyAsync(string policyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetACLPoliciesAsync>d__62")]
public sealed virtual Task`1<Secret`1<ListInfo>> GetACLPoliciesAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetACLPolicyAsync>d__63")]
public sealed virtual Task`1<Secret`1<ACLPolicy>> GetACLPolicyAsync(string policyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<WriteACLPolicyAsync>d__64")]
public sealed virtual Task WriteACLPolicyAsync(ACLPolicy policy);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<DeleteACLPolicyAsync>d__65")]
public sealed virtual Task DeleteACLPolicyAsync(string policyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GeneratePasswordFromPasswordPolicyAsync>d__66")]
public sealed virtual Task`1<Secret`1<string>> GeneratePasswordFromPasswordPolicyAsync(string passwordPolicyName);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetRawSecretKeysAsync>d__67")]
public sealed virtual Task`1<Secret`1<ListInfo>> GetRawSecretKeysAsync(string storagePathPrefix);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ReadRawSecretAsync>d__68")]
public sealed virtual Task`1<Secret`1<Dictionary`2<string, object>>> ReadRawSecretAsync(string storagePath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<WriteRawSecretAsync>d__69")]
public sealed virtual Task WriteRawSecretAsync(string storagePath, Dictionary`2<string, object> values);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<DeleteRawSecretAsync>d__70")]
public sealed virtual Task DeleteRawSecretAsync(string storagePath);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetRekeyStatusAsync>d__71")]
public sealed virtual Task`1<RekeyStatus> GetRekeyStatusAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<InitiateRekeyAsync>d__72")]
public sealed virtual Task`1<RekeyStatus> InitiateRekeyAsync(int secretShares, int secretThreshold, String[] pgpKeys, bool backup);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<CancelRekeyAsync>d__73")]
public sealed virtual Task CancelRekeyAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetRekeyBackupKeysAsync>d__74")]
public sealed virtual Task`1<Secret`1<RekeyBackupInfo>> GetRekeyBackupKeysAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<DeleteRekeyBackupKeysAsync>d__75")]
public sealed virtual Task DeleteRekeyBackupKeysAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<ContinueRekeyAsync>d__76")]
public sealed virtual Task`1<RekeyProgress> ContinueRekeyAsync(string masterShareKey, string rekeyNonce);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<QuickRekeyAsync>d__77")]
public sealed virtual Task`1<RekeyProgress> QuickRekeyAsync(String[] allMasterShareKeys, string rekeyNonce);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<SealAsync>d__78")]
public sealed virtual Task SealAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<GetSealStatusAsync>d__79")]
public sealed virtual Task`1<SealStatus> GetSealStatusAsync();
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<UnsealAsync>d__80")]
public sealed virtual Task`1<SealStatus> UnsealAsync(string masterShareKey, bool resetCompletely);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<QuickUnsealAsync>d__81")]
public sealed virtual Task`1<SealStatus> QuickUnsealAsync(String[] allMasterShareKeys);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<LookupTokenWrapInfoAsync>d__82")]
public sealed virtual Task`1<Secret`1<TokenWrapData>> LookupTokenWrapInfoAsync(string tokenId);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<RewrapWrappedResponseDataAsync>d__83")]
public sealed virtual Task`1<Secret`1<object>> RewrapWrappedResponseDataAsync(string tokenId);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<UnwrapWrappedResponseDataAsync>d__84`1")]
public sealed virtual Task`1<Secret`1<TData>> UnwrapWrappedResponseDataAsync(string tokenId);
    [AsyncStateMachineAttribute("VaultSharp.V1.SystemBackend.SystemBackendProvider/<WrapResponseDataAsync>d__85")]
public sealed virtual Task`1<Secret`1<object>> WrapResponseDataAsync(Dictionary`2<string, object> data, string wrapTimeToLive);
    public Task`1<string> HashWithAuditBackendAsync(string mountPoint, string inputToHash);
}
public class VaultSharp.V1.SystemBackend.TokenCapability : Dictionary`2<string, object> {
    public IEnumerable`1<string> Capabilities { get; }
    public IEnumerable`1<string> get_Capabilities();
}
public class VaultSharp.V1.SystemBackend.TokenWrapData : object {
    [CompilerGeneratedAttribute]
private string <CreationPath>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CreationTimeToLive>k__BackingField;
    [JsonPropertyNameAttribute("creation_path")]
public string CreationPath { get; public set; }
    [JsonPropertyNameAttribute("creation_time")]
public DateTimeOffset CreationTime { get; public set; }
    [JsonPropertyNameAttribute("creation_ttl")]
public int CreationTimeToLive { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CreationPath();
    [CompilerGeneratedAttribute]
public void set_CreationPath(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_CreationTime();
    [CompilerGeneratedAttribute]
public void set_CreationTime(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_CreationTimeToLive();
    [CompilerGeneratedAttribute]
public void set_CreationTimeToLive(int value);
}
internal class VaultSharp.V1.VaultClientV1 : object {
    [CompilerGeneratedAttribute]
private ISecretsEngine <Secrets>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthMethod <Auth>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemBackend <System>k__BackingField;
    public ISecretsEngine Secrets { get; }
    public IAuthMethod Auth { get; }
    public ISystemBackend System { get; }
    public VaultClientV1(Polymath polymath);
    [CompilerGeneratedAttribute]
public sealed virtual ISecretsEngine get_Secrets();
    [CompilerGeneratedAttribute]
public sealed virtual IAuthMethod get_Auth();
    [CompilerGeneratedAttribute]
public sealed virtual ISystemBackend get_System();
}
public class VaultSharp.VaultClient : object {
    private Polymath polymath;
    [CompilerGeneratedAttribute]
private IVaultClientV1 <V1>k__BackingField;
    public IVaultClientV1 V1 { get; }
    public VaultClientSettings Settings { get; }
    public VaultClient(VaultClientSettings vaultClientSettings);
    [CompilerGeneratedAttribute]
public sealed virtual IVaultClientV1 get_V1();
    public sealed virtual VaultClientSettings get_Settings();
}
public class VaultSharp.VaultClientSettings : object {
    [CompilerGeneratedAttribute]
private string <VaultServerUriWithPort>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuthMethodInfo <AuthMethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ContinueAsyncTasksOnCapturedContext>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<TimeSpan> <VaultServiceTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HttpMessageHandler> <PostProcessHttpClientHandlerAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`2<HttpClient, HttpRequestMessage> <BeforeApiRequestAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<HttpResponseMessage> <AfterApiResponseAction>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseVaultTokenHeaderInsteadOfAuthorizationHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<HttpMessageHandler, HttpClient> <MyHttpClientProviderFunc>k__BackingField;
    [CompilerGeneratedAttribute]
private SecretsEngineMountPoints <SecretsEngineMountPoints>k__BackingField;
    public string VaultServerUriWithPort { get; }
    public IAuthMethodInfo AuthMethodInfo { get; }
    public bool ContinueAsyncTasksOnCapturedContext { get; public set; }
    public Nullable`1<TimeSpan> VaultServiceTimeout { get; public set; }
    public Action`1<HttpMessageHandler> PostProcessHttpClientHandlerAction { get; public set; }
    public Action`2<HttpClient, HttpRequestMessage> BeforeApiRequestAction { get; public set; }
    public Action`1<HttpResponseMessage> AfterApiResponseAction { get; public set; }
    public bool UseVaultTokenHeaderInsteadOfAuthorizationHeader { get; public set; }
    public string Namespace { get; public set; }
    public Func`2<HttpMessageHandler, HttpClient> MyHttpClientProviderFunc { get; public set; }
    public SecretsEngineMountPoints SecretsEngineMountPoints { get; public set; }
    public VaultClientSettings(string vaultServerUriWithPort, IAuthMethodInfo authMethodInfo);
    [CompilerGeneratedAttribute]
public string get_VaultServerUriWithPort();
    [CompilerGeneratedAttribute]
public IAuthMethodInfo get_AuthMethodInfo();
    [CompilerGeneratedAttribute]
public bool get_ContinueAsyncTasksOnCapturedContext();
    [CompilerGeneratedAttribute]
public void set_ContinueAsyncTasksOnCapturedContext(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<TimeSpan> get_VaultServiceTimeout();
    [CompilerGeneratedAttribute]
public void set_VaultServiceTimeout(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public Action`1<HttpMessageHandler> get_PostProcessHttpClientHandlerAction();
    [CompilerGeneratedAttribute]
public void set_PostProcessHttpClientHandlerAction(Action`1<HttpMessageHandler> value);
    [CompilerGeneratedAttribute]
public Action`2<HttpClient, HttpRequestMessage> get_BeforeApiRequestAction();
    [CompilerGeneratedAttribute]
public void set_BeforeApiRequestAction(Action`2<HttpClient, HttpRequestMessage> value);
    [CompilerGeneratedAttribute]
public Action`1<HttpResponseMessage> get_AfterApiResponseAction();
    [CompilerGeneratedAttribute]
public void set_AfterApiResponseAction(Action`1<HttpResponseMessage> value);
    [CompilerGeneratedAttribute]
public bool get_UseVaultTokenHeaderInsteadOfAuthorizationHeader();
    [CompilerGeneratedAttribute]
public void set_UseVaultTokenHeaderInsteadOfAuthorizationHeader(bool value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public Func`2<HttpMessageHandler, HttpClient> get_MyHttpClientProviderFunc();
    [CompilerGeneratedAttribute]
public void set_MyHttpClientProviderFunc(Func`2<HttpMessageHandler, HttpClient> value);
    [CompilerGeneratedAttribute]
public SecretsEngineMountPoints get_SecretsEngineMountPoints();
    [CompilerGeneratedAttribute]
public void set_SecretsEngineMountPoints(SecretsEngineMountPoints value);
}
