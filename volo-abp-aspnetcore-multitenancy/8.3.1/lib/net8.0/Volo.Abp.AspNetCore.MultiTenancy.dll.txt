[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AbpAspNetCoreMultiTenancyApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseMultiTenancy(IApplicationBuilder app);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyModule : AbpModule {
    [NullableContextAttribute("1")]
public virtual void ConfigureServices(ServiceConfigurationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.MultiTenancy.AbpAspNetCoreMultiTenancyOptions : object {
    [CompilerGeneratedAttribute]
private string <TenantKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<HttpContext, Exception, Task`1<bool>> <MultiTenancyMiddlewareErrorPageBuilder>k__BackingField;
    public string TenantKey { get; public set; }
    public Func`3<HttpContext, Exception, Task`1<bool>> MultiTenancyMiddlewareErrorPageBuilder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TenantKey();
    [CompilerGeneratedAttribute]
public void set_TenantKey(string value);
    [CompilerGeneratedAttribute]
public Func`3<HttpContext, Exception, Task`1<bool>> get_MultiTenancyMiddlewareErrorPageBuilder();
    [CompilerGeneratedAttribute]
public void set_MultiTenancyMiddlewareErrorPageBuilder(Func`3<HttpContext, Exception, Task`1<bool>> value);
}
public static class Volo.Abp.AspNetCore.MultiTenancy.AbpMultiTenancyCookieHelper : object {
    [NullableContextAttribute("1")]
public static void SetTenantCookie(HttpContext context, Nullable`1<Guid> tenantId, string tenantKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.MultiTenancy.CookieTenantResolveContributor : HttpTenantResolveContributorBase {
    public static string ContributorName;
    public string Name { get; }
    public virtual string get_Name();
    protected virtual Task`1<string> GetTenantIdOrNameFromHttpContextOrNullAsync(ITenantResolveContext context, HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.MultiTenancy.DomainTenantResolveContributor : HttpTenantResolveContributorBase {
    public static string ContributorName;
    private static String[] ProtocolPrefixes;
    private string _domainFormat;
    public string Name { get; }
    public DomainTenantResolveContributor(string domainFormat);
    private static DomainTenantResolveContributor();
    public virtual string get_Name();
    protected virtual Task`1<string> GetTenantIdOrNameFromHttpContextOrNullAsync(ITenantResolveContext context, HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("This may make some features of ASP NET Core unavailable, Will be removed in future versions.")]
public class Volo.Abp.AspNetCore.MultiTenancy.FormTenantResolveContributor : HttpTenantResolveContributorBase {
    public static string ContributorName;
    public string Name { get; }
    public virtual string get_Name();
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.MultiTenancy.FormTenantResolveContributor/<GetTenantIdOrNameFromHttpContextOrNullAsync>d__3")]
protected virtual Task`1<string> GetTenantIdOrNameFromHttpContextOrNullAsync(ITenantResolveContext context, HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.MultiTenancy.HeaderTenantResolveContributor : HttpTenantResolveContributorBase {
    public static string ContributorName;
    public string Name { get; }
    public virtual string get_Name();
    protected virtual Task`1<string> GetTenantIdOrNameFromHttpContextOrNullAsync(ITenantResolveContext context, HttpContext httpContext);
    protected virtual void Log(ITenantResolveContext context, string text);
}
[DependencyAttribute]
public class Volo.Abp.AspNetCore.MultiTenancy.HttpContextTenantResolveResultAccessor : object {
    [NullableAttribute("1")]
public static string HttpContextItemName;
    [NullableAttribute("1")]
private IHttpContextAccessor _httpContextAccessor;
    [NullableAttribute("2")]
public TenantResolveResult Result { get; public set; }
    [NullableContextAttribute("1")]
public HttpContextTenantResolveResultAccessor(IHttpContextAccessor httpContextAccessor);
    [NullableContextAttribute("2")]
public sealed virtual TenantResolveResult get_Result();
    [NullableContextAttribute("2")]
public sealed virtual void set_Result(TenantResolveResult value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.AspNetCore.MultiTenancy.HttpTenantResolveContributorBase : TenantResolveContributorBase {
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.MultiTenancy.HttpTenantResolveContributorBase/<ResolveAsync>d__0")]
public virtual Task ResolveAsync(ITenantResolveContext context);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.MultiTenancy.HttpTenantResolveContributorBase/<ResolveFromHttpContextAsync>d__1")]
protected virtual Task ResolveFromHttpContextAsync(ITenantResolveContext context, HttpContext httpContext);
    protected abstract virtual Task`1<string> GetTenantIdOrNameFromHttpContextOrNullAsync(ITenantResolveContext context, HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware : AbpMiddlewareBase {
    [CompilerGeneratedAttribute]
private ILogger`1<MultiTenancyMiddleware> <Logger>k__BackingField;
    private ITenantConfigurationProvider _tenantConfigurationProvider;
    private ICurrentTenant _currentTenant;
    private AbpAspNetCoreMultiTenancyOptions _options;
    private ITenantResolveResultAccessor _tenantResolveResultAccessor;
    public ILogger`1<MultiTenancyMiddleware> Logger { get; public set; }
    public MultiTenancyMiddleware(ITenantConfigurationProvider tenantConfigurationProvider, ICurrentTenant currentTenant, IOptions`1<AbpAspNetCoreMultiTenancyOptions> options, ITenantResolveResultAccessor tenantResolveResultAccessor);
    [CompilerGeneratedAttribute]
public ILogger`1<MultiTenancyMiddleware> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<MultiTenancyMiddleware> value);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware/<InvokeAsync>d__9")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.MultiTenancy.MultiTenancyMiddleware/<TryGetRequestCultureAsync>d__10")]
private Task`1<RequestCulture> TryGetRequestCultureAsync(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.MultiTenancy.QueryStringTenantResolveContributor : HttpTenantResolveContributorBase {
    public static string ContributorName;
    public string Name { get; }
    public virtual string get_Name();
    protected virtual Task`1<string> GetTenantIdOrNameFromHttpContextOrNullAsync(ITenantResolveContext context, HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.MultiTenancy.RouteTenantResolveContributor : HttpTenantResolveContributorBase {
    public static string ContributorName;
    public string Name { get; }
    public virtual string get_Name();
    protected virtual Task`1<string> GetTenantIdOrNameFromHttpContextOrNullAsync(ITenantResolveContext context, HttpContext httpContext);
}
[ExtensionAttribute]
public static class Volo.Abp.AspNetCore.MultiTenancy.TenantResolveContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static AbpAspNetCoreMultiTenancyOptions GetAbpAspNetCoreMultiTenancyOptions(ITenantResolveContext context);
}
[ExtensionAttribute]
public static class Volo.Abp.MultiTenancy.AbpMultiTenancyOptionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddDomainTenantResolver(AbpTenantResolveOptions options, string domainFormat);
}
internal class VoloAbpAspNetCoreMultiTenancy_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
