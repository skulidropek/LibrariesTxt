[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AbpApplicationBuilderExtensions : object {
    private static string ExceptionHandlingMiddlewareMarker;
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Builder.AbpApplicationBuilderExtensions/<InitializeApplicationAsync>d__1")]
[ExtensionAttribute]
public static Task InitializeApplicationAsync(IApplicationBuilder app);
    [ExtensionAttribute]
public static void InitializeApplication(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseAuditing(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseUnitOfWork(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseCorrelationId(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseAbpRequestLocalization(IApplicationBuilder app, Action`1<RequestLocalizationOptions> optionsAction);
    [ExtensionAttribute]
public static IApplicationBuilder UseAbpExceptionHandling(IApplicationBuilder app);
    [ExtensionAttribute]
[ObsoleteAttribute("Replace with AbpClaimsTransformation")]
public static IApplicationBuilder UseAbpClaimsMap(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseAbpSecurityHeaders(IApplicationBuilder app);
    [ExtensionAttribute]
public static IApplicationBuilder UseDynamicClaims(IApplicationBuilder app);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.AbpAspNetCoreApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IApplicationBuilder UseConfiguredEndpoints(IApplicationBuilder app, Action`1<IEndpointRouteBuilder> additionalConfigurationAction);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Builder.VirtualFileSystemApplicationBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use UseStaticFiles() instead. UseVirtualFiles is not needed anymore.")]
public static IApplicationBuilder UseVirtualFiles(IApplicationBuilder app, Action`1<StaticFileOptions> configure);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Cors.AbpCorsPolicyBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static CorsPolicyBuilder WithAbpExposedHeaders(CorsPolicyBuilder corsPolicyBuilder);
}
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Hosting.AbpHostingEnvironmentExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IConfigurationRoot BuildConfiguration(IWebHostEnvironment env, AbpConfigurationBuilderOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Http.AbpHttpRequestExtensions : object {
    [ExtensionAttribute]
public static bool IsAjax(HttpRequest request);
    [ExtensionAttribute]
public static bool CanAccept(HttpRequest request, string contentType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Internal.ResponseContentTypeHelper : object {
    public static void ResolveContentTypeAndEncoding(string actionResultContentType, string httpResponseContentType, ValueTuple`2<string, Encoding> default, Func`2<string, Encoding> getEncoding, String& resolvedContentType, Encoding& resolvedContentTypeEncoding);
    public static Encoding GetEncoding(string mediaType);
}
public static class Microsoft.AspNetCore.RequestLocalization.AbpRequestCultureCookieHelper : object {
    [NullableContextAttribute("1")]
public static void SetCultureCookie(HttpContext httpContext, RequestCulture requestCulture);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.RequestLocalization.AbpRequestLocalizationMiddleware : AbpMiddlewareBase {
    public static string HttpContextItemName;
    private IAbpRequestLocalizationOptionsProvider _requestLocalizationOptionsProvider;
    private ILoggerFactory _loggerFactory;
    public AbpRequestLocalizationMiddleware(IAbpRequestLocalizationOptionsProvider requestLocalizationOptionsProvider, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.RequestLocalization.AbpRequestLocalizationMiddleware/<InvokeAsync>d__4")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.RequestLocalization.AbpRequestLocalizationOptions : object {
    [CompilerGeneratedAttribute]
private List`1<Func`3<IServiceProvider, RequestLocalizationOptions, Task>> <RequestLocalizationOptionConfigurators>k__BackingField;
    public List`1<Func`3<IServiceProvider, RequestLocalizationOptions, Task>> RequestLocalizationOptionConfigurators { get; }
    [CompilerGeneratedAttribute]
public List`1<Func`3<IServiceProvider, RequestLocalizationOptions, Task>> get_RequestLocalizationOptionConfigurators();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.RequestLocalization.AbpRequestLocalizationOptionsManager : AbpDynamicOptionsManager`1<RequestLocalizationOptions> {
    [NullableAttribute("2")]
private RequestLocalizationOptions _options;
    private IAbpRequestLocalizationOptionsProvider _abpRequestLocalizationOptionsProvider;
    public AbpRequestLocalizationOptionsManager(IOptionsFactory`1<RequestLocalizationOptions> factory, IAbpRequestLocalizationOptionsProvider abpRequestLocalizationOptionsProvider);
    public virtual RequestLocalizationOptions Get(string name);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.RequestLocalization.AbpRequestLocalizationOptionsManager/<OverrideOptionsAsync>d__4")]
protected virtual Task OverrideOptionsAsync(string name, RequestLocalizationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.RequestLocalization.DefaultAbpRequestLocalizationOptionsProvider : object {
    private IServiceScopeFactory _serviceProviderFactory;
    private SemaphoreSlim _syncSemaphore;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`1<RequestLocalizationOptions> _optionsAction;
    [NullableAttribute("2")]
private RequestLocalizationOptions _requestLocalizationOptions;
    public DefaultAbpRequestLocalizationOptionsProvider(IServiceScopeFactory serviceProviderFactory);
    public sealed virtual void InitLocalizationOptions(Action`1<RequestLocalizationOptions> optionsAction);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.RequestLocalization.DefaultAbpRequestLocalizationOptionsProvider/<GetLocalizationOptionsAsync>d__6")]
public sealed virtual Task`1<RequestLocalizationOptions> GetLocalizationOptionsAsync();
    private static RequestCulture DefaultGetRequestCulture(string defaultLanguage, IReadOnlyList`1<LanguageInfo> languages);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.RequestLocalization.IAbpRequestLocalizationOptionsProvider {
    public abstract virtual void InitLocalizationOptions(Action`1<RequestLocalizationOptions> optionsAction);
    public abstract virtual Task`1<RequestLocalizationOptions> GetLocalizationOptionsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Routing.AbpEndpointRouterOptions : object {
    [CompilerGeneratedAttribute]
private List`1<Action`1<EndpointRouteBuilderContext>> <EndpointConfigureActions>k__BackingField;
    public List`1<Action`1<EndpointRouteBuilderContext>> EndpointConfigureActions { get; }
    [CompilerGeneratedAttribute]
public List`1<Action`1<EndpointRouteBuilderContext>> get_EndpointConfigureActions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Routing.EndpointRouteBuilderContext : object {
    [CompilerGeneratedAttribute]
private IEndpointRouteBuilder <Endpoints>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ScopeServiceProvider>k__BackingField;
    public IEndpointRouteBuilder Endpoints { get; }
    public IServiceProvider ScopeServiceProvider { get; }
    public EndpointRouteBuilderContext(IEndpointRouteBuilder endpoints, IServiceProvider scopeServiceProvider);
    [CompilerGeneratedAttribute]
public IEndpointRouteBuilder get_Endpoints();
    [CompilerGeneratedAttribute]
public IServiceProvider get_ScopeServiceProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpAspNetCoreServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IWebHostEnvironment GetHostingEnvironment(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection TransformAbpClaims(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.CookieAuthenticationOptionsExtensions : object {
    [ExtensionAttribute]
public static CookieAuthenticationOptions CheckTokenExpiration(CookieAuthenticationOptions options, string oidcAuthenticationScheme, Nullable`1<TimeSpan> advance, Nullable`1<TimeSpan> validationInterval);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.CookieAuthenticationOptionsExtensions/<GetOpenIdConnectOptions>d__1")]
private static Task`1<OpenIdConnectOptions> GetOpenIdConnectOptions(CookieValidatePrincipalContext principalContext, string oidcAuthenticationScheme);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.CookieAuthenticationOptionsExtensions/<SignOutAsync>d__2")]
private static Task SignOutAsync(CookieValidatePrincipalContext principalContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.EmptyHostingEnvironment : object {
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <WebRootFileProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <ContentRootFileProvider>k__BackingField;
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string WebRootPath { get; public set; }
    public IFileProvider WebRootFileProvider { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_WebRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_WebRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WebRootFileProvider(IFileProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_ContentRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootFileProvider(IFileProvider value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.WebApplicationBuilderExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.WebApplicationBuilderExtensions/<AddApplicationAsync>d__0`1")]
[ExtensionAttribute]
public static Task`1<IAbpApplicationWithExternalServiceProvider> AddApplicationAsync(WebApplicationBuilder builder, Action`1<AbpApplicationCreationOptions> optionsAction);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.WebApplicationBuilderExtensions/<AddApplicationAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IAbpApplicationWithExternalServiceProvider> AddApplicationAsync(WebApplicationBuilder builder, Type startupModuleType, Action`1<AbpApplicationCreationOptions> optionsAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.ApplicationInitializationContextExtensions : object {
    [ExtensionAttribute]
public static IApplicationBuilder GetApplicationBuilder(ApplicationInitializationContext context);
    [ExtensionAttribute]
public static IApplicationBuilder GetApplicationBuilderOrNull(ApplicationInitializationContext context);
    [ExtensionAttribute]
public static IWebHostEnvironment GetEnvironment(ApplicationInitializationContext context);
    [ExtensionAttribute]
public static IWebHostEnvironment GetEnvironmentOrNull(ApplicationInitializationContext context);
    [ExtensionAttribute]
public static IConfiguration GetConfiguration(ApplicationInitializationContext context);
    [ExtensionAttribute]
public static ILoggerFactory GetLoggerFactory(ApplicationInitializationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.AspNetCore.AbpAspNetCoreConsts : object {
    public static string DefaultApiPrefix;
    public static string DefaultIntegrationServiceApiPrefix;
    public static string ScriptNonceKey;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.AspNetCore.AbpAspNetCoreModule : AbpModule {
    public virtual void PreConfigureServices(ServiceConfigurationContext context);
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    private static void AddAspNetServices(IServiceCollection services);
    public virtual void OnApplicationInitialization(ApplicationInitializationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Auditing.AbpAspNetCoreAuditingOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <IgnoredUrls>k__BackingField;
    public List`1<string> IgnoredUrls { get; }
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnoredUrls();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Auditing.AbpAuditingMiddleware : AbpMiddlewareBase {
    private IAuditingManager _auditingManager;
    [CompilerGeneratedAttribute]
private AbpAuditingOptions <AuditingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpAspNetCoreAuditingOptions <AspNetCoreAuditingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentUser <CurrentUser>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    protected AbpAuditingOptions AuditingOptions { get; }
    protected AbpAspNetCoreAuditingOptions AspNetCoreAuditingOptions { get; }
    protected ICurrentUser CurrentUser { get; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    public AbpAuditingMiddleware(IAuditingManager auditingManager, ICurrentUser currentUser, IOptions`1<AbpAuditingOptions> auditingOptions, IOptions`1<AbpAspNetCoreAuditingOptions> aspNetCoreAuditingOptions, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
protected AbpAuditingOptions get_AuditingOptions();
    [CompilerGeneratedAttribute]
protected AbpAspNetCoreAuditingOptions get_AspNetCoreAuditingOptions();
    [CompilerGeneratedAttribute]
protected ICurrentUser get_CurrentUser();
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Auditing.AbpAuditingMiddleware/<InvokeAsync>d__14")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    private bool IsIgnoredUrl(HttpContext context);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Auditing.AbpAuditingMiddleware/<ShouldWriteAuditLogAsync>d__16")]
private Task`1<bool> ShouldWriteAuditLogAsync(AuditLogInfo auditLogInfo, HttpContext httpContext, bool hasError);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Auditing.AspNetCoreAuditLogContributor : AuditLogContributor {
    [CompilerGeneratedAttribute]
private ILogger`1<AspNetCoreAuditLogContributor> <Logger>k__BackingField;
    public ILogger`1<AspNetCoreAuditLogContributor> Logger { get; public set; }
    [CompilerGeneratedAttribute]
public ILogger`1<AspNetCoreAuditLogContributor> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<AspNetCoreAuditLogContributor> value);
    public virtual void PreContribute(AuditLogContributionContext context);
    public virtual void PostContribute(AuditLogContributionContext context);
    protected virtual string BuildUrl(HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Volo.Abp.AspNetCore.Controllers.ReplaceControllersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <ControllerTypes>k__BackingField;
    public Type[] ControllerTypes { get; }
    public ReplaceControllersAttribute(Type[] controllerTypes);
    [CompilerGeneratedAttribute]
public Type[] get_ControllerTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.DependencyInjection.HttpContextClientScopeServiceProviderAccessor : object {
    private IHttpContextAccessor _httpContextAccessor;
    public IServiceProvider ServiceProvider { get; }
    public HttpContextClientScopeServiceProviderAccessor(IHttpContextAccessor httpContextAccessor);
    public sealed virtual IServiceProvider get_ServiceProvider();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.ExceptionHandling.AbpAuthorizationExceptionHandlerOptions : object {
    [CompilerGeneratedAttribute]
private string <AuthenticationScheme>k__BackingField;
    public string AuthenticationScheme { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AuthenticationScheme();
    [CompilerGeneratedAttribute]
public void set_AuthenticationScheme(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.ExceptionHandling.AbpExceptionHandlingMiddleware : AbpMiddlewareBase {
    private ILogger`1<AbpExceptionHandlingMiddleware> _logger;
    private Func`2<object, Task> _clearCacheHeadersDelegate;
    public AbpExceptionHandlingMiddleware(ILogger`1<AbpExceptionHandlingMiddleware> logger);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.ExceptionHandling.AbpExceptionHandlingMiddleware/<InvokeAsync>d__3")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.ExceptionHandling.AbpExceptionHandlingMiddleware/<HandleAndWrapException>d__4")]
private Task HandleAndWrapException(HttpContext httpContext, Exception exception);
    private Task ClearCacheHeaders(object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.ExceptionHandling.AbpExceptionHttpStatusCodeOptions : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, HttpStatusCode> <ErrorCodeToHttpStatusCodeMappings>k__BackingField;
    public IDictionary`2<string, HttpStatusCode> ErrorCodeToHttpStatusCodeMappings { get; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, HttpStatusCode> get_ErrorCodeToHttpStatusCodeMappings();
    public void Map(string errorCode, HttpStatusCode httpStatusCode);
}
public class Volo.Abp.AspNetCore.ExceptionHandling.DefaultAbpAuthorizationExceptionHandler : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Volo.Abp.AspNetCore.ExceptionHandling.DefaultAbpAuthorizationExceptionHandler/<HandleAsync>d__0")]
public virtual Task HandleAsync(AbpAuthorizationException exception, HttpContext httpContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.ExceptionHandling.DefaultHttpExceptionStatusCodeFinder : object {
    [CompilerGeneratedAttribute]
private AbpExceptionHttpStatusCodeOptions <Options>k__BackingField;
    protected AbpExceptionHttpStatusCodeOptions Options { get; }
    public DefaultHttpExceptionStatusCodeFinder(IOptions`1<AbpExceptionHttpStatusCodeOptions> options);
    [CompilerGeneratedAttribute]
protected AbpExceptionHttpStatusCodeOptions get_Options();
    public virtual HttpStatusCode GetStatusCode(HttpContext httpContext, Exception exception);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.AspNetCore.ExceptionHandling.IAbpAuthorizationExceptionHandler {
    public abstract virtual Task HandleAsync(AbpAuthorizationException exception, HttpContext httpContext);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.AspNetCore.ExceptionHandling.IHttpExceptionStatusCodeFinder {
    public abstract virtual HttpStatusCode GetStatusCode(HttpContext httpContext, Exception exception);
}
public abstract class Volo.Abp.AspNetCore.Middleware.AbpMiddlewareBase : object {
    [NullableContextAttribute("1")]
protected virtual Task`1<bool> ShouldSkipAsync(HttpContext context, RequestDelegate next);
    [NullableContextAttribute("1")]
public abstract virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
public class Volo.Abp.AspNetCore.Mvc.AbpActionInfoInHttpContext : object {
    [CompilerGeneratedAttribute]
private bool <IsObjectResult>k__BackingField;
    public bool IsObjectResult { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsObjectResult();
    [CompilerGeneratedAttribute]
public void set_IsObjectResult(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.AspNetCore.Security.AbpSecurityHeaderNonceHelper : object {
    [ExtensionAttribute]
public static string GetScriptNonce(IHtmlHelper htmlHelper);
    [ExtensionAttribute]
public static IHtmlContent GetScriptNonceAttribute(IHtmlHelper htmlHelper);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Security.AbpSecurityHeadersMiddleware : AbpMiddlewareBase {
    [CompilerGeneratedAttribute]
private IOptions`1<AbpSecurityHeadersOptions> <Options>k__BackingField;
    protected static string ScriptSrcKey;
    protected static string DefaultValue;
    public IOptions`1<AbpSecurityHeadersOptions> Options { get; public set; }
    public AbpSecurityHeadersMiddleware(IOptions`1<AbpSecurityHeadersOptions> options);
    [CompilerGeneratedAttribute]
public IOptions`1<AbpSecurityHeadersOptions> get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IOptions`1<AbpSecurityHeadersOptions> value);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Security.AbpSecurityHeadersMiddleware/<InvokeAsync>d__7")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Security.AbpSecurityHeadersMiddleware/<AlwaysIgnoreContentTypes>d__8")]
private Task`1<bool> AlwaysIgnoreContentTypes(HttpContext context);
    private void AddOtherHeaders(HttpContext context);
    protected virtual string BuildContentSecurityPolicyValue(HttpContext context);
    protected virtual void AddHeader(HttpContext context, string key, string value, bool overrideIfExists);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Security.AbpSecurityHeadersOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseContentSecurityPolicyHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseContentSecurityPolicyScriptNonce>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ContentSecurityPolicyValue>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<HttpContext, Task`1<bool>>> <IgnoredScriptNonceSelectors>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IgnoredScriptNoncePaths>k__BackingField;
    public bool UseContentSecurityPolicyHeader { get; public set; }
    public bool UseContentSecurityPolicyScriptNonce { get; public set; }
    [NullableAttribute("2")]
public string ContentSecurityPolicyValue { get; public set; }
    public Dictionary`2<string, string> Headers { get; }
    public List`1<Func`2<HttpContext, Task`1<bool>>> IgnoredScriptNonceSelectors { get; }
    public List`1<string> IgnoredScriptNoncePaths { get; }
    [CompilerGeneratedAttribute]
public bool get_UseContentSecurityPolicyHeader();
    [CompilerGeneratedAttribute]
public void set_UseContentSecurityPolicyHeader(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseContentSecurityPolicyScriptNonce();
    [CompilerGeneratedAttribute]
public void set_UseContentSecurityPolicyScriptNonce(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ContentSecurityPolicyValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ContentSecurityPolicyValue(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_Headers();
    [CompilerGeneratedAttribute]
public List`1<Func`2<HttpContext, Task`1<bool>>> get_IgnoredScriptNonceSelectors();
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnoredScriptNoncePaths();
}
[ObsoleteAttribute("Replace with AbpClaimsTransformation")]
public class Volo.Abp.AspNetCore.Security.Claims.AbpClaimsMapMiddleware : AbpMiddlewareBase {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Security.Claims.AbpClaimsMapMiddleware/<InvokeAsync>d__0")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Security.Claims.AbpClaimsMapOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Func`1<string>> <Maps>k__BackingField;
    public Dictionary`2<string, Func`1<string>> Maps { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Func`1<string>> get_Maps();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Security.Claims.AbpClaimsTransformation : object {
    [CompilerGeneratedAttribute]
private IOptions`1<AbpClaimsMapOptions> <AbpClaimsMapOptions>k__BackingField;
    protected IOptions`1<AbpClaimsMapOptions> AbpClaimsMapOptions { get; }
    public AbpClaimsTransformation(IOptions`1<AbpClaimsMapOptions> abpClaimsMapOptions);
    [CompilerGeneratedAttribute]
protected IOptions`1<AbpClaimsMapOptions> get_AbpClaimsMapOptions();
    public virtual Task`1<ClaimsPrincipal> TransformAsync(ClaimsPrincipal principal);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <TransformAsync>b__4_0(Claim claim);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Claim <TransformAsync>b__4_1(Claim claim);
}
public class Volo.Abp.AspNetCore.Security.Claims.AbpDynamicClaimsMiddleware : AbpMiddlewareBase {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Security.Claims.AbpDynamicClaimsMiddleware/<InvokeAsync>d__0")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Security.Claims.HttpContextCurrentPrincipalAccessor : ThreadCurrentPrincipalAccessor {
    private IHttpContextAccessor _httpContextAccessor;
    public HttpContextCurrentPrincipalAccessor(IHttpContextAccessor httpContextAccessor);
    protected virtual ClaimsPrincipal GetClaimsPrincipal();
}
[AttributeUsageAttribute("68")]
public class Volo.Abp.AspNetCore.Security.IgnoreAbpSecurityHeaderAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DependencyAttribute]
public class Volo.Abp.AspNetCore.SecurityLog.AspNetCoreSecurityLogManager : DefaultSecurityLogManager {
    [CompilerGeneratedAttribute]
private ILogger`1<AspNetCoreSecurityLogManager> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IClock <Clock>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentUser <CurrentUser>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentClient <CurrentClient>k__BackingField;
    [CompilerGeneratedAttribute]
private IHttpContextAccessor <HttpContextAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private ICorrelationIdProvider <CorrelationIdProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IWebClientInfoProvider <WebClientInfoProvider>k__BackingField;
    protected ILogger`1<AspNetCoreSecurityLogManager> Logger { get; }
    protected IClock Clock { get; }
    protected ICurrentUser CurrentUser { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected ICurrentClient CurrentClient { get; }
    protected IHttpContextAccessor HttpContextAccessor { get; }
    protected ICorrelationIdProvider CorrelationIdProvider { get; }
    protected IWebClientInfoProvider WebClientInfoProvider { get; }
    public AspNetCoreSecurityLogManager(IOptions`1<AbpSecurityLogOptions> securityLogOptions, ISecurityLogStore securityLogStore, ILogger`1<AspNetCoreSecurityLogManager> logger, IClock clock, ICurrentUser currentUser, ICurrentTenant currentTenant, ICurrentClient currentClient, IHttpContextAccessor httpContextAccessor, ICorrelationIdProvider correlationIdProvider, IWebClientInfoProvider webClientInfoProvider);
    [CompilerGeneratedAttribute]
protected ILogger`1<AspNetCoreSecurityLogManager> get_Logger();
    [CompilerGeneratedAttribute]
protected IClock get_Clock();
    [CompilerGeneratedAttribute]
protected ICurrentUser get_CurrentUser();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected ICurrentClient get_CurrentClient();
    [CompilerGeneratedAttribute]
protected IHttpContextAccessor get_HttpContextAccessor();
    [CompilerGeneratedAttribute]
protected ICorrelationIdProvider get_CorrelationIdProvider();
    [CompilerGeneratedAttribute]
protected IWebClientInfoProvider get_WebClientInfoProvider();
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.SecurityLog.AspNetCoreSecurityLogManager/<CreateAsync>d__25")]
protected virtual Task`1<SecurityLogInfo> CreateAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<SecurityLogInfo> <>n__0();
}
[DependencyAttribute]
public class Volo.Abp.AspNetCore.Threading.HttpContextCancellationTokenProvider : CancellationTokenProviderBase {
    [NullableAttribute("1")]
private IHttpContextAccessor _httpContextAccessor;
    public CancellationToken Token { get; }
    [NullableContextAttribute("1")]
public HttpContextCancellationTokenProvider(IAmbientScopeProvider`1<CancellationTokenOverride> cancellationTokenOverrideScopeProvider, IHttpContextAccessor httpContextAccessor);
    public virtual CancellationToken get_Token();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Tracing.AbpCorrelationIdMiddleware : AbpMiddlewareBase {
    private AbpCorrelationIdOptions _options;
    private ICorrelationIdProvider _correlationIdProvider;
    public AbpCorrelationIdMiddleware(IOptions`1<AbpCorrelationIdOptions> options, ICorrelationIdProvider correlationIdProvider);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Tracing.AbpCorrelationIdMiddleware/<InvokeAsync>d__3")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    protected virtual string GetCorrelationIdFromRequest(HttpContext context);
    protected virtual void CheckAndSetCorrelationIdOnResponse(HttpContext httpContext, AbpCorrelationIdOptions options, string correlationId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Uow.AbpAspNetCoreUnitOfWorkOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <IgnoredUrls>k__BackingField;
    public List`1<string> IgnoredUrls { get; }
    [CompilerGeneratedAttribute]
public List`1<string> get_IgnoredUrls();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Uow.AbpUnitOfWorkMiddleware : AbpMiddlewareBase {
    private IUnitOfWorkManager _unitOfWorkManager;
    private AbpAspNetCoreUnitOfWorkOptions _options;
    public AbpUnitOfWorkMiddleware(IUnitOfWorkManager unitOfWorkManager, IOptions`1<AbpAspNetCoreUnitOfWorkOptions> options);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Uow.AbpUnitOfWorkMiddleware/<InvokeAsync>d__3")]
public virtual Task InvokeAsync(HttpContext context, RequestDelegate next);
    private bool IsIgnoredUrl(HttpContext context);
    [AsyncStateMachineAttribute("Volo.Abp.AspNetCore.Uow.AbpUnitOfWorkMiddleware/<ShouldSkipAsync>d__5")]
protected virtual Task`1<bool> ShouldSkipAsync(HttpContext context, RequestDelegate next);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<bool> <>n__0(HttpContext context, RequestDelegate next);
}
public class Volo.Abp.AspNetCore.Uow.AspNetCoreUnitOfWorkTransactionBehaviourProvider : object {
    [NullableAttribute("1")]
private IHttpContextAccessor _httpContextAccessor;
    [NullableAttribute("1")]
private AspNetCoreUnitOfWorkTransactionBehaviourProviderOptions _options;
    public Nullable`1<bool> IsTransactional { get; }
    [NullableContextAttribute("1")]
public AspNetCoreUnitOfWorkTransactionBehaviourProvider(IHttpContextAccessor httpContextAccessor, IOptions`1<AspNetCoreUnitOfWorkTransactionBehaviourProviderOptions> options);
    public virtual Nullable`1<bool> get_IsTransactional();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.Uow.AspNetCoreUnitOfWorkTransactionBehaviourProviderOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <NonTransactionalUrls>k__BackingField;
    public List`1<string> NonTransactionalUrls { get; }
    [CompilerGeneratedAttribute]
public List`1<string> get_NonTransactionalUrls();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.VirtualFileSystem.AbpAspNetCoreContentOptions : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ContentTypeMaps>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedExtraWebContentFolders>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AllowedExtraWebContentFileExtensions>k__BackingField;
    public Dictionary`2<string, string> ContentTypeMaps { get; }
    public List`1<string> AllowedExtraWebContentFolders { get; }
    public List`1<string> AllowedExtraWebContentFileExtensions { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ContentTypeMaps();
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedExtraWebContentFolders();
    [CompilerGeneratedAttribute]
public List`1<string> get_AllowedExtraWebContentFileExtensions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.VirtualFileSystem.AbpFileExtensionContentTypeProvider : object {
    [CompilerGeneratedAttribute]
private AbpAspNetCoreContentOptions <Options>k__BackingField;
    protected AbpAspNetCoreContentOptions Options { get; }
    public AbpFileExtensionContentTypeProvider(IOptions`1<AbpAspNetCoreContentOptions> abpAspNetCoreContentOptions);
    [CompilerGeneratedAttribute]
protected AbpAspNetCoreContentOptions get_Options();
    public sealed virtual bool TryGetContentType(string subpath, String& contentType);
    protected virtual string GetExtension(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Volo.Abp.AspNetCore.VirtualFileSystem.PathUtils : object {
    private static Char[] PathSeparators;
    private static PathUtils();
    public static bool PathNavigatesAboveRoot(string path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AspNetCore.VirtualFileSystem.RazorViewEngineVirtualFileProvider : object {
    private Lazy`1<IFileProvider> _fileProvider;
    private IObjectAccessor`1<IServiceProvider> _serviceProviderAccessor;
    public RazorViewEngineVirtualFileProvider(IObjectAccessor`1<IServiceProvider> serviceProviderAccessor);
    public sealed virtual IFileInfo GetFileInfo(string subpath);
    public sealed virtual IDirectoryContents GetDirectoryContents(string subpath);
    public sealed virtual IChangeToken Watch(string filter);
    private bool IsInitialized();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DependencyAttribute]
public class Volo.Abp.AspNetCore.VirtualFileSystem.WebContentFileProvider : object {
    private IVirtualFileProvider _virtualFileProvider;
    private IFileProvider _fileProvider;
    private IWebHostEnvironment _hostingEnvironment;
    private string _rootPath;
    [CompilerGeneratedAttribute]
private AbpAspNetCoreContentOptions <Options>k__BackingField;
    protected AbpAspNetCoreContentOptions Options { get; }
    public WebContentFileProvider(IVirtualFileProvider virtualFileProvider, IWebHostEnvironment hostingEnvironment, IOptions`1<AbpAspNetCoreContentOptions> options);
    [CompilerGeneratedAttribute]
protected AbpAspNetCoreContentOptions get_Options();
    public virtual IFileInfo GetFileInfo(string subpath);
    public virtual IDirectoryContents GetDirectoryContents(string subpath);
    public virtual IChangeToken Watch(string filter);
    protected virtual IFileProvider CreateFileProvider();
    protected virtual bool ExtraAllowedFolder(string path);
    protected virtual bool ExtraAllowedExtension(string path);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DependencyAttribute]
public class Volo.Abp.AspNetCore.WebClientInfo.HttpContextWebClientInfoProvider : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private ILogger`1<HttpContextWebClientInfoProvider> <Logger>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IHttpContextAccessor <HttpContextAccessor>k__BackingField;
    [NullableAttribute("1")]
protected ILogger`1<HttpContextWebClientInfoProvider> Logger { get; }
    [NullableAttribute("1")]
protected IHttpContextAccessor HttpContextAccessor { get; }
    public string BrowserInfo { get; }
    public string ClientIpAddress { get; }
    public string DeviceInfo { get; }
    [NullableContextAttribute("1")]
public HttpContextWebClientInfoProvider(ILogger`1<HttpContextWebClientInfoProvider> logger, IHttpContextAccessor httpContextAccessor);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected ILogger`1<HttpContextWebClientInfoProvider> get_Logger();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected IHttpContextAccessor get_HttpContextAccessor();
    public sealed virtual string get_BrowserInfo();
    public sealed virtual string get_ClientIpAddress();
    public sealed virtual string get_DeviceInfo();
    protected virtual string GetBrowserInfo();
    protected virtual string GetClientIpAddress();
    protected virtual string GetDeviceInfo();
}
[ExtensionAttribute]
public static class Volo.Abp.ServiceProviderAccessorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HttpContext GetHttpContext(IServiceProviderAccessor serviceProviderAccessor);
}
internal class VoloAbpAspNetCore_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
