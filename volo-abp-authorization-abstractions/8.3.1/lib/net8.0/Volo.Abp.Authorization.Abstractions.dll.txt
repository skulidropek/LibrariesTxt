[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Authorization.AbpAuthorizationAbstractionsModule : AbpModule {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.AlwaysAllowAuthorizationService : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private ICurrentPrincipalAccessor _currentPrincipalAccessor;
    public IServiceProvider ServiceProvider { get; }
    public ClaimsPrincipal CurrentPrincipal { get; }
    public AlwaysAllowAuthorizationService(IServiceProvider serviceProvider, ICurrentPrincipalAccessor currentPrincipalAccessor);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual ClaimsPrincipal get_CurrentPrincipal();
    public sealed virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    public sealed virtual Task`1<AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName);
}
public class Volo.Abp.Authorization.AlwaysAllowMethodInvocationAuthorizationService : object {
    [NullableContextAttribute("1")]
public sealed virtual Task CheckAsync(MethodInvocationAuthorizationContext context);
}
public interface Volo.Abp.Authorization.IAbpAuthorizationPolicyProvider {
    [NullableContextAttribute("1")]
public abstract virtual Task`1<List`1<string>> GetPoliciesNamesAsync();
}
public interface Volo.Abp.Authorization.IAbpAuthorizationService {
    [NullableAttribute("1")]
public ClaimsPrincipal CurrentPrincipal { get; }
    [NullableContextAttribute("1")]
public abstract virtual ClaimsPrincipal get_CurrentPrincipal();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.IMethodInvocationAuthorizationService {
    public abstract virtual Task CheckAsync(MethodInvocationAuthorizationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.MethodInvocationAuthorizationContext : object {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public MethodInfo Method { get; }
    public MethodInvocationAuthorizationContext(MethodInfo method);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.PermissionRequirement : object {
    [CompilerGeneratedAttribute]
private string <PermissionName>k__BackingField;
    public string PermissionName { get; }
    public PermissionRequirement(string permissionName);
    [CompilerGeneratedAttribute]
public string get_PermissionName();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Authorization.PermissionRequirementHandler : AuthorizationHandler`1<PermissionRequirement> {
    private IPermissionChecker _permissionChecker;
    public PermissionRequirementHandler(IPermissionChecker permissionChecker);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.PermissionRequirementHandler/<HandleRequirementAsync>d__2")]
protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.AbpPermissionOptions : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<IPermissionDefinitionProvider> <DefinitionProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeList`1<IPermissionValueProvider> <ValueProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <DeletedPermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <DeletedPermissionGroups>k__BackingField;
    public ITypeList`1<IPermissionDefinitionProvider> DefinitionProviders { get; }
    public ITypeList`1<IPermissionValueProvider> ValueProviders { get; }
    public HashSet`1<string> DeletedPermissions { get; }
    public HashSet`1<string> DeletedPermissionGroups { get; }
    [CompilerGeneratedAttribute]
public ITypeList`1<IPermissionDefinitionProvider> get_DefinitionProviders();
    [CompilerGeneratedAttribute]
public ITypeList`1<IPermissionValueProvider> get_ValueProviders();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_DeletedPermissions();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_DeletedPermissionGroups();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.AlwaysAllowPermissionChecker : object {
    public sealed virtual Task`1<bool> IsGrantedAsync(string name);
    public sealed virtual Task`1<bool> IsGrantedAsync(ClaimsPrincipal claimsPrincipal, string name);
    public sealed virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(String[] names);
    public sealed virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(ClaimsPrincipal claimsPrincipal, String[] names);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.ICanAddChildPermission {
    public abstract virtual PermissionDefinition AddPermission(string name, ILocalizableString displayName, MultiTenancySides multiTenancySide, bool isEnabled);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IPermissionChecker {
    public abstract virtual Task`1<bool> IsGrantedAsync(string name);
    public abstract virtual Task`1<bool> IsGrantedAsync(ClaimsPrincipal claimsPrincipal, string name);
    public abstract virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(String[] names);
    public abstract virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(ClaimsPrincipal claimsPrincipal, String[] names);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IPermissionDefinitionContext {
    public IServiceProvider ServiceProvider { get; }
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual PermissionGroupDefinition GetGroup(string name);
    public abstract virtual PermissionGroupDefinition GetGroupOrNull(string name);
    public abstract virtual PermissionGroupDefinition AddGroup(string name, ILocalizableString displayName);
    public abstract virtual void RemoveGroup(string name);
    public abstract virtual PermissionDefinition GetPermissionOrNull(string name);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IPermissionDefinitionManager {
    public abstract virtual Task`1<PermissionDefinition> GetAsync(string name);
    public abstract virtual Task`1<PermissionDefinition> GetOrNullAsync(string name);
    public abstract virtual Task`1<IReadOnlyList`1<PermissionDefinition>> GetPermissionsAsync();
    public abstract virtual Task`1<IReadOnlyList`1<PermissionGroupDefinition>> GetGroupsAsync();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IPermissionDefinitionProvider {
    public abstract virtual void PreDefine(IPermissionDefinitionContext context);
    public abstract virtual void Define(IPermissionDefinitionContext context);
    public abstract virtual void PostDefine(IPermissionDefinitionContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IPermissionStore {
    public abstract virtual Task`1<bool> IsGrantedAsync(string name, string providerName, string providerKey);
    public abstract virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(String[] names, string providerName, string providerKey);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IPermissionValueProvider {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task`1<PermissionGrantResult> CheckAsync(PermissionValueCheckContext context);
    public abstract virtual Task`1<MultiplePermissionGrantResult> CheckAsync(PermissionValuesCheckContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IPermissionValueProviderManager {
    public IReadOnlyList`1<IPermissionValueProvider> ValueProviders { get; }
    public abstract virtual IReadOnlyList`1<IPermissionValueProvider> get_ValueProviders();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.MultiplePermissionGrantResult : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PermissionGrantResult> <Result>k__BackingField;
    public bool AllGranted { get; }
    public bool AllProhibited { get; }
    public Dictionary`2<string, PermissionGrantResult> Result { get; }
    public MultiplePermissionGrantResult(String[] names, PermissionGrantResult grantResult);
    public bool get_AllGranted();
    public bool get_AllProhibited();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, PermissionGrantResult> get_Result();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.NullPermissionStore : object {
    [CompilerGeneratedAttribute]
private ILogger`1<NullPermissionStore> <Logger>k__BackingField;
    public ILogger`1<NullPermissionStore> Logger { get; public set; }
    [CompilerGeneratedAttribute]
public ILogger`1<NullPermissionStore> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<NullPermissionStore> value);
    public sealed virtual Task`1<bool> IsGrantedAsync(string name, string providerName, string providerKey);
    public sealed virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(String[] names, string providerName, string providerKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Volo.Abp.Authorization.Permissions.PermissionDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private PermissionDefinition <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiTenancySides <MultiTenancySide>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISimpleStateChecker`1<PermissionDefinition>> <StateCheckers>k__BackingField;
    private ILocalizableString _displayName;
    private List`1<PermissionDefinition> _children;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public PermissionDefinition Parent { get; private set; }
    public MultiTenancySides MultiTenancySide { get; public set; }
    public List`1<string> Providers { get; }
    public List`1<ISimpleStateChecker`1<PermissionDefinition>> StateCheckers { get; }
    public ILocalizableString DisplayName { get; public set; }
    public IReadOnlyList`1<PermissionDefinition> Children { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Properties { get; }
    public bool IsEnabled { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    protected internal PermissionDefinition(string name, ILocalizableString displayName, MultiTenancySides multiTenancySide, bool isEnabled);
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PermissionDefinition get_Parent();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Parent(PermissionDefinition value);
    [CompilerGeneratedAttribute]
public MultiTenancySides get_MultiTenancySide();
    [CompilerGeneratedAttribute]
public void set_MultiTenancySide(MultiTenancySides value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Providers();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ISimpleStateChecker`1<PermissionDefinition>> get_StateCheckers();
    public ILocalizableString get_DisplayName();
    public void set_DisplayName(ILocalizableString value);
    public IReadOnlyList`1<PermissionDefinition> get_Children();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public virtual PermissionDefinition AddChild(string name, ILocalizableString displayName, MultiTenancySides multiTenancySide, bool isEnabled);
    private sealed virtual override PermissionDefinition Volo.Abp.Authorization.Permissions.ICanAddChildPermission.AddPermission(string name, ILocalizableString displayName, MultiTenancySides multiTenancySide, bool isEnabled);
    public virtual PermissionDefinition WithProperty(string key, object value);
    public virtual PermissionDefinition WithProviders(String[] providers);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionDefinitionContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PermissionGroupDefinition> <Groups>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public Dictionary`2<string, PermissionGroupDefinition> Groups { get; }
    public PermissionDefinitionContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, PermissionGroupDefinition> get_Groups();
    public virtual PermissionGroupDefinition AddGroup(string name, ILocalizableString displayName);
    public virtual PermissionGroupDefinition GetGroup(string name);
    public virtual PermissionGroupDefinition GetGroupOrNull(string name);
    public virtual void RemoveGroup(string name);
    public virtual PermissionDefinition GetPermissionOrNull(string name);
}
[ExtensionAttribute]
public static class Volo.Abp.Authorization.Permissions.PermissionDefinitionContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool TryDisablePermission(IPermissionDefinitionContext context, string name);
}
public abstract class Volo.Abp.Authorization.Permissions.PermissionDefinitionProvider : object {
    [NullableContextAttribute("1")]
public virtual void PreDefine(IPermissionDefinitionContext context);
    [NullableContextAttribute("1")]
public abstract virtual void Define(IPermissionDefinitionContext context);
    [NullableContextAttribute("1")]
public virtual void PostDefine(IPermissionDefinitionContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionGrantInfo : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGranted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [NullableAttribute("1")]
public string Name { get; }
    public bool IsGranted { get; }
    public string ProviderName { get; }
    public string ProviderKey { get; }
    public PermissionGrantInfo(string name, bool isGranted, string providerName, string providerKey);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsGranted();
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public string get_ProviderKey();
}
public enum Volo.Abp.Authorization.Permissions.PermissionGrantResult : Enum {
    public int value__;
    public static PermissionGrantResult Undefined;
    public static PermissionGrantResult Granted;
    public static PermissionGrantResult Prohibited;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Volo.Abp.Authorization.Permissions.PermissionGroupDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Properties>k__BackingField;
    private ILocalizableString _displayName;
    private List`1<PermissionDefinition> _permissions;
    public string Name { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Dictionary`2<string, object> Properties { get; }
    public ILocalizableString DisplayName { get; public set; }
    public IReadOnlyList`1<PermissionDefinition> Permissions { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    protected internal PermissionGroupDefinition(string name, ILocalizableString displayName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_Properties();
    public ILocalizableString get_DisplayName();
    public void set_DisplayName(ILocalizableString value);
    public IReadOnlyList`1<PermissionDefinition> get_Permissions();
    public object get_Item(string name);
    public void set_Item(string name, object value);
    public virtual PermissionDefinition AddPermission(string name, ILocalizableString displayName, MultiTenancySides multiTenancySide, bool isEnabled);
    public virtual List`1<PermissionDefinition> GetPermissionsWithChildren();
    private void AddPermissionToListRecursively(List`1<PermissionDefinition> permissions, PermissionDefinition permission);
    public virtual string ToString();
    public PermissionDefinition GetPermissionOrNull(string name);
    private PermissionDefinition GetPermissionOrNullRecursively(IReadOnlyList`1<PermissionDefinition> permissions, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionStateContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private PermissionDefinition <Permission>k__BackingField;
    public IServiceProvider ServiceProvider { get; public set; }
    public PermissionDefinition Permission { get; public set; }
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IServiceProvider value);
    [CompilerGeneratedAttribute]
public PermissionDefinition get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(PermissionDefinition value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionValueCheckContext : object {
    [CompilerGeneratedAttribute]
private PermissionDefinition <Permission>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    public PermissionDefinition Permission { get; }
    [NullableAttribute("2")]
public ClaimsPrincipal Principal { get; }
    public PermissionValueCheckContext(PermissionDefinition permission, ClaimsPrincipal principal);
    [CompilerGeneratedAttribute]
public PermissionDefinition get_Permission();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.Authorization.Permissions.PermissionValueProvider : object {
    [CompilerGeneratedAttribute]
private IPermissionStore <PermissionStore>k__BackingField;
    public string Name { get; }
    protected IPermissionStore PermissionStore { get; }
    protected PermissionValueProvider(IPermissionStore permissionStore);
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
protected IPermissionStore get_PermissionStore();
    public abstract virtual Task`1<PermissionGrantResult> CheckAsync(PermissionValueCheckContext context);
    public abstract virtual Task`1<MultiplePermissionGrantResult> CheckAsync(PermissionValuesCheckContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionValuesCheckContext : object {
    [CompilerGeneratedAttribute]
private List`1<PermissionDefinition> <Permissions>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private ClaimsPrincipal <Principal>k__BackingField;
    public List`1<PermissionDefinition> Permissions { get; }
    [NullableAttribute("2")]
public ClaimsPrincipal Principal { get; }
    public PermissionValuesCheckContext(List`1<PermissionDefinition> permissions, ClaimsPrincipal principal);
    [CompilerGeneratedAttribute]
public List`1<PermissionDefinition> get_Permissions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ClaimsPrincipal get_Principal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.PermissionsRequirement : object {
    [CompilerGeneratedAttribute]
private String[] <PermissionNames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAll>k__BackingField;
    public String[] PermissionNames { get; }
    public bool RequiresAll { get; }
    public PermissionsRequirement(String[] permissionNames, bool requiresAll);
    [CompilerGeneratedAttribute]
public String[] get_PermissionNames();
    [CompilerGeneratedAttribute]
public bool get_RequiresAll();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Authorization.PermissionsRequirementHandler : AuthorizationHandler`1<PermissionsRequirement> {
    private IPermissionChecker _permissionChecker;
    public PermissionsRequirementHandler(IPermissionChecker permissionChecker);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.PermissionsRequirementHandler/<HandleRequirementAsync>d__2")]
protected virtual Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionsRequirement requirement);
}
internal class VoloAbpAuthorizationAbstractions_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
