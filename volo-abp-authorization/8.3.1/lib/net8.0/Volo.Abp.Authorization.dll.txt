[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<AuthorizeAsync>d__0")]
[ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService authorizationService, string policyName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<AuthorizeAsync>d__1")]
[ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService authorizationService, object resource, IAuthorizationRequirement requirement);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<AuthorizeAsync>d__2")]
[ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService authorizationService, object resource, AuthorizationPolicy policy);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<AuthorizeAsync>d__3")]
[ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService authorizationService, AuthorizationPolicy policy);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<AuthorizeAsync>d__4")]
[ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService authorizationService, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<AuthorizeAsync>d__5")]
[ExtensionAttribute]
public static Task`1<AuthorizationResult> AuthorizeAsync(IAuthorizationService authorizationService, object resource, string policyName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<IsGrantedAsync>d__6")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IAuthorizationService authorizationService, string policyName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<IsGrantedAnyAsync>d__7")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAnyAsync(IAuthorizationService authorizationService, String[] policyNames);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<IsGrantedAsync>d__8")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IAuthorizationService authorizationService, object resource, IAuthorizationRequirement requirement);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<IsGrantedAsync>d__9")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IAuthorizationService authorizationService, object resource, AuthorizationPolicy policy);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<IsGrantedAsync>d__10")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IAuthorizationService authorizationService, AuthorizationPolicy policy);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<IsGrantedAsync>d__11")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IAuthorizationService authorizationService, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<IsGrantedAsync>d__12")]
[ExtensionAttribute]
public static Task`1<bool> IsGrantedAsync(IAuthorizationService authorizationService, object resource, string policyName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<CheckAsync>d__13")]
[ExtensionAttribute]
public static Task CheckAsync(IAuthorizationService authorizationService, string policyName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<CheckAsync>d__14")]
[ExtensionAttribute]
public static Task CheckAsync(IAuthorizationService authorizationService, object resource, IAuthorizationRequirement requirement);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<CheckAsync>d__15")]
[ExtensionAttribute]
public static Task CheckAsync(IAuthorizationService authorizationService, object resource, AuthorizationPolicy policy);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<CheckAsync>d__16")]
[ExtensionAttribute]
public static Task CheckAsync(IAuthorizationService authorizationService, AuthorizationPolicy policy);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<CheckAsync>d__17")]
[ExtensionAttribute]
public static Task CheckAsync(IAuthorizationService authorizationService, object resource, IEnumerable`1<IAuthorizationRequirement> requirements);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Authorization.AbpAuthorizationServiceExtensions/<CheckAsync>d__18")]
[ExtensionAttribute]
public static Task CheckAsync(IAuthorizationService authorizationService, object resource, string policyName);
    [ExtensionAttribute]
private static IAbpAuthorizationService AsAbpAuthorizationService(IAuthorizationService authorizationService);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.AspNetCore.Authorization.AuthorizationOptionsExtensions : object {
    private static PropertyInfo PolicyMapProperty;
    private static AuthorizationOptionsExtensions();
    [ExtensionAttribute]
public static List`1<string> GetPoliciesNames(AuthorizationOptions options);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpAuthorizationServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddAlwaysAllowAuthorization(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Authorization.AbpAuthorizationErrorCodes : object {
    public static string GivenPolicyHasNotGranted;
    public static string GivenPolicyHasNotGrantedWithPolicyName;
    public static string GivenPolicyHasNotGrantedForGivenResource;
    public static string GivenRequirementHasNotGrantedForGivenResource;
    public static string GivenRequirementsHasNotGrantedForGivenResource;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Authorization.AbpAuthorizationModule : AbpModule {
    public virtual void PreConfigureServices(ServiceConfigurationContext context);
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    private static void AutoAddDefinitionProviders(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.AbpAuthorizationPolicyProvider : DefaultAuthorizationPolicyProvider {
    private AuthorizationOptions _options;
    private IPermissionDefinitionManager _permissionDefinitionManager;
    public AbpAuthorizationPolicyProvider(IOptions`1<AuthorizationOptions> options, IPermissionDefinitionManager permissionDefinitionManager);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.AbpAuthorizationPolicyProvider/<GetPolicyAsync>d__3")]
public virtual Task`1<AuthorizationPolicy> GetPolicyAsync(string policyName);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.AbpAuthorizationPolicyProvider/<GetPoliciesNamesAsync>d__4")]
public sealed virtual Task`1<List`1<string>> GetPoliciesNamesAsync();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<AuthorizationPolicy> <>n__0(string policyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DependencyAttribute]
public class Volo.Abp.Authorization.AbpAuthorizationService : DefaultAuthorizationService {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private ICurrentPrincipalAccessor _currentPrincipalAccessor;
    public IServiceProvider ServiceProvider { get; }
    public ClaimsPrincipal CurrentPrincipal { get; }
    public AbpAuthorizationService(IAuthorizationPolicyProvider policyProvider, IAuthorizationHandlerProvider handlers, ILogger`1<DefaultAuthorizationService> logger, IAuthorizationHandlerContextFactory contextFactory, IAuthorizationEvaluator evaluator, IOptions`1<AuthorizationOptions> options, ICurrentPrincipalAccessor currentPrincipalAccessor, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual ClaimsPrincipal get_CurrentPrincipal();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.AuthorizationInterceptor : AbpInterceptor {
    private IMethodInvocationAuthorizationService _methodInvocationAuthorizationService;
    public AuthorizationInterceptor(IMethodInvocationAuthorizationService methodInvocationAuthorizationService);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.AuthorizationInterceptor/<InterceptAsync>d__2")]
public virtual Task InterceptAsync(IAbpMethodInvocation invocation);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.AuthorizationInterceptor/<AuthorizeAsync>d__3")]
protected virtual Task AuthorizeAsync(IAbpMethodInvocation invocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Authorization.AuthorizationInterceptorRegistrar : object {
    public static void RegisterIfNeeded(IOnServiceRegistredContext context);
    private static bool ShouldIntercept(Type type);
    private static bool AnyMethodHasAuthorizeAttribute(Type implementationType);
    private static bool HasAuthorizeAttribute(MemberInfo methodInfo);
}
[LocalizationResourceNameAttribute("AbpAuthorization")]
public class Volo.Abp.Authorization.Localization.AbpAuthorizationResource : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.MethodInvocationAuthorizationService : object {
    private IAbpAuthorizationPolicyProvider _abpAuthorizationPolicyProvider;
    private IAbpAuthorizationService _abpAuthorizationService;
    public MethodInvocationAuthorizationService(IAbpAuthorizationPolicyProvider abpAuthorizationPolicyProvider, IAbpAuthorizationService abpAuthorizationService);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.MethodInvocationAuthorizationService/<CheckAsync>d__3")]
public sealed virtual Task CheckAsync(MethodInvocationAuthorizationContext context);
    protected virtual bool AllowAnonymous(MethodInvocationAuthorizationContext context);
    protected virtual IEnumerable`1<IAuthorizeData> GetAuthorizationDataAttributes(MethodInfo methodInfo);
}
public class Volo.Abp.Authorization.Permissions.AuthenticatedSimpleStateCheckerSerializerContributor : object {
    [NullableAttribute("1")]
public static string CheckerShortName;
    [NullableContextAttribute("1")]
public sealed virtual string SerializeToJson(ISimpleStateChecker`1<TState> checker);
    [NullableContextAttribute("1")]
public sealed virtual ISimpleStateChecker`1<TState> Deserialize(JsonObject jsonObject, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.ClientPermissionValueProvider : PermissionValueProvider {
    public static string ProviderName;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    public string Name { get; }
    protected ICurrentTenant CurrentTenant { get; }
    public ClientPermissionValueProvider(IPermissionStore permissionStore, ICurrentTenant currentTenant);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.ClientPermissionValueProvider/<CheckAsync>d__7")]
public virtual Task`1<PermissionGrantResult> CheckAsync(PermissionValueCheckContext context);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.ClientPermissionValueProvider/<CheckAsync>d__8")]
public virtual Task`1<MultiplePermissionGrantResult> CheckAsync(PermissionValuesCheckContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IDynamicPermissionDefinitionStore {
    public abstract virtual Task`1<PermissionDefinition> GetOrNullAsync(string name);
    public abstract virtual Task`1<IReadOnlyList`1<PermissionDefinition>> GetPermissionsAsync();
    public abstract virtual Task`1<IReadOnlyList`1<PermissionGroupDefinition>> GetGroupsAsync();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Authorization.Permissions.IStaticPermissionDefinitionStore {
    public abstract virtual Task`1<PermissionDefinition> GetOrNullAsync(string name);
    public abstract virtual Task`1<IReadOnlyList`1<PermissionDefinition>> GetPermissionsAsync();
    public abstract virtual Task`1<IReadOnlyList`1<PermissionGroupDefinition>> GetGroupsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.NullDynamicPermissionDefinitionStore : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Task`1<PermissionDefinition> CachedPermissionResult;
    private static Task`1<IReadOnlyList`1<PermissionDefinition>> CachedPermissionsResult;
    private static Task`1<IReadOnlyList`1<PermissionGroupDefinition>> CachedGroupsResult;
    private static NullDynamicPermissionDefinitionStore();
    public sealed virtual Task`1<PermissionDefinition> GetOrNullAsync(string name);
    public sealed virtual Task`1<IReadOnlyList`1<PermissionDefinition>> GetPermissionsAsync();
    public sealed virtual Task`1<IReadOnlyList`1<PermissionGroupDefinition>> GetGroupsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionChecker : object {
    [CompilerGeneratedAttribute]
private IPermissionDefinitionManager <PermissionDefinitionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentPrincipalAccessor <PrincipalAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionValueProviderManager <PermissionValueProviderManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleStateCheckerManager`1<PermissionDefinition> <StateCheckerManager>k__BackingField;
    protected IPermissionDefinitionManager PermissionDefinitionManager { get; }
    protected ICurrentPrincipalAccessor PrincipalAccessor { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected IPermissionValueProviderManager PermissionValueProviderManager { get; }
    protected ISimpleStateCheckerManager`1<PermissionDefinition> StateCheckerManager { get; }
    public PermissionChecker(ICurrentPrincipalAccessor principalAccessor, IPermissionDefinitionManager permissionDefinitionManager, ICurrentTenant currentTenant, IPermissionValueProviderManager permissionValueProviderManager, ISimpleStateCheckerManager`1<PermissionDefinition> stateCheckerManager);
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionManager get_PermissionDefinitionManager();
    [CompilerGeneratedAttribute]
protected ICurrentPrincipalAccessor get_PrincipalAccessor();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IPermissionValueProviderManager get_PermissionValueProviderManager();
    [CompilerGeneratedAttribute]
protected ISimpleStateCheckerManager`1<PermissionDefinition> get_StateCheckerManager();
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionChecker/<IsGrantedAsync>d__16")]
public virtual Task`1<bool> IsGrantedAsync(string name);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionChecker/<IsGrantedAsync>d__17")]
public virtual Task`1<bool> IsGrantedAsync(ClaimsPrincipal claimsPrincipal, string name);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionChecker/<IsGrantedAsync>d__18")]
public sealed virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(String[] names);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionChecker/<IsGrantedAsync>d__19")]
public sealed virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(ClaimsPrincipal claimsPrincipal, String[] names);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionDefinitionManager : object {
    private IStaticPermissionDefinitionStore _staticStore;
    private IDynamicPermissionDefinitionStore _dynamicStore;
    public PermissionDefinitionManager(IStaticPermissionDefinitionStore staticStore, IDynamicPermissionDefinitionStore dynamicStore);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionDefinitionManager/<GetAsync>d__3")]
public virtual Task`1<PermissionDefinition> GetAsync(string name);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionDefinitionManager/<GetOrNullAsync>d__4")]
public virtual Task`1<PermissionDefinition> GetOrNullAsync(string name);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionDefinitionManager/<GetPermissionsAsync>d__5")]
public virtual Task`1<IReadOnlyList`1<PermissionDefinition>> GetPermissionsAsync();
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.PermissionDefinitionManager/<GetGroupsAsync>d__6")]
public sealed virtual Task`1<IReadOnlyList`1<PermissionGroupDefinition>> GetGroupsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Authorization.Permissions.PermissionSimpleStateCheckerExtensions : object {
    [ExtensionAttribute]
public static TState RequireAuthenticated(TState state);
    [ExtensionAttribute]
public static TState RequirePermissions(TState state, String[] permissions);
    [ExtensionAttribute]
public static TState RequirePermissions(TState state, bool requiresAll, String[] permissions);
    [ExtensionAttribute]
public static TState RequirePermissions(TState state, bool requiresAll, bool batchCheck, String[] permissions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.PermissionValueProviderManager : object {
    private Lazy`1<List`1<IPermissionValueProvider>> _lazyProviders;
    [CompilerGeneratedAttribute]
private AbpPermissionOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IReadOnlyList`1<IPermissionValueProvider> ValueProviders { get; }
    protected AbpPermissionOptions Options { get; }
    protected IServiceProvider ServiceProvider { get; }
    public PermissionValueProviderManager(IServiceProvider serviceProvider, IOptions`1<AbpPermissionOptions> options);
    public sealed virtual IReadOnlyList`1<IPermissionValueProvider> get_ValueProviders();
    [CompilerGeneratedAttribute]
protected AbpPermissionOptions get_Options();
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    protected virtual List`1<IPermissionValueProvider> GetProviders();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private IPermissionValueProvider <GetProviders>b__10_0(Type type);
}
public class Volo.Abp.Authorization.Permissions.RequireAuthenticatedSimpleStateChecker`1 : object {
    [NullableContextAttribute("1")]
public sealed virtual Task`1<bool> IsEnabledAsync(SimpleStateCheckerContext`1<TState> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Authorization.Permissions.RequirePermissionsSimpleBatchStateChecker`1 : SimpleBatchStateCheckerBase`1<TState> {
    private static AsyncLocal`1<RequirePermissionsSimpleBatchStateChecker`1<TState>> _current;
    private List`1<RequirePermissionsSimpleBatchStateCheckerModel`1<TState>> _models;
    public static RequirePermissionsSimpleBatchStateChecker`1<TState> Current { get; }
    private static RequirePermissionsSimpleBatchStateChecker`1();
    public static RequirePermissionsSimpleBatchStateChecker`1<TState> get_Current();
    public RequirePermissionsSimpleBatchStateChecker`1<TState> AddCheckModels(RequirePermissionsSimpleBatchStateCheckerModel`1[] models);
    public static IDisposable Use(RequirePermissionsSimpleBatchStateChecker`1<TState> checker);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.RequirePermissionsSimpleBatchStateChecker`1/<IsEnabledAsync>d__8")]
public virtual Task`1<SimpleStateCheckerResult`1<TState>> IsEnabledAsync(SimpleBatchStateCheckerContext`1<TState> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.RequirePermissionsSimpleBatchStateCheckerModel`1 : object {
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Permissions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresAll>k__BackingField;
    public TState State { get; }
    public String[] Permissions { get; }
    public bool RequiresAll { get; }
    public RequirePermissionsSimpleBatchStateCheckerModel`1(TState state, String[] permissions, bool requiresAll);
    [CompilerGeneratedAttribute]
public TState get_State();
    [CompilerGeneratedAttribute]
public String[] get_Permissions();
    [CompilerGeneratedAttribute]
public bool get_RequiresAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.RequirePermissionsSimpleStateChecker`1 : object {
    private RequirePermissionsSimpleBatchStateCheckerModel`1<TState> _model;
    public bool RequiresAll { get; }
    public String[] PermissionNames { get; }
    public RequirePermissionsSimpleStateChecker`1(RequirePermissionsSimpleBatchStateCheckerModel`1<TState> model);
    public bool get_RequiresAll();
    public String[] get_PermissionNames();
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.RequirePermissionsSimpleStateChecker`1/<IsEnabledAsync>d__6")]
public sealed virtual Task`1<bool> IsEnabledAsync(SimpleStateCheckerContext`1<TState> context);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <IsEnabledAsync>b__6_0(KeyValuePair`2<string, PermissionGrantResult> x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.RolePermissionValueProvider : PermissionValueProvider {
    public static string ProviderName;
    public string Name { get; }
    public RolePermissionValueProvider(IPermissionStore permissionStore);
    public virtual string get_Name();
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.RolePermissionValueProvider/<CheckAsync>d__4")]
public virtual Task`1<PermissionGrantResult> CheckAsync(PermissionValueCheckContext context);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.RolePermissionValueProvider/<CheckAsync>d__5")]
public virtual Task`1<MultiplePermissionGrantResult> CheckAsync(PermissionValuesCheckContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.StaticPermissionDefinitionStore : object {
    private Lazy`1<Dictionary`2<string, PermissionGroupDefinition>> _lazyPermissionGroupDefinitions;
    private Lazy`1<Dictionary`2<string, PermissionDefinition>> _lazyPermissionDefinitions;
    [CompilerGeneratedAttribute]
private AbpPermissionOptions <Options>k__BackingField;
    private IServiceProvider _serviceProvider;
    protected IDictionary`2<string, PermissionGroupDefinition> PermissionGroupDefinitions { get; }
    protected IDictionary`2<string, PermissionDefinition> PermissionDefinitions { get; }
    protected AbpPermissionOptions Options { get; }
    public StaticPermissionDefinitionStore(IServiceProvider serviceProvider, IOptions`1<AbpPermissionOptions> options);
    protected IDictionary`2<string, PermissionGroupDefinition> get_PermissionGroupDefinitions();
    protected IDictionary`2<string, PermissionDefinition> get_PermissionDefinitions();
    [CompilerGeneratedAttribute]
protected AbpPermissionOptions get_Options();
    protected virtual Dictionary`2<string, PermissionDefinition> CreatePermissionDefinitions();
    protected virtual void AddPermissionToDictionaryRecursively(Dictionary`2<string, PermissionDefinition> permissions, PermissionDefinition permission);
    protected virtual Dictionary`2<string, PermissionGroupDefinition> CreatePermissionGroupDefinitions();
    public sealed virtual Task`1<PermissionDefinition> GetOrNullAsync(string name);
    public virtual Task`1<IReadOnlyList`1<PermissionDefinition>> GetPermissionsAsync();
    public sealed virtual Task`1<IReadOnlyList`1<PermissionGroupDefinition>> GetGroupsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Authorization.Permissions.UserPermissionValueProvider : PermissionValueProvider {
    public static string ProviderName;
    public string Name { get; }
    public UserPermissionValueProvider(IPermissionStore permissionStore);
    public virtual string get_Name();
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.UserPermissionValueProvider/<CheckAsync>d__4")]
public virtual Task`1<PermissionGrantResult> CheckAsync(PermissionValueCheckContext context);
    [AsyncStateMachineAttribute("Volo.Abp.Authorization.Permissions.UserPermissionValueProvider/<CheckAsync>d__5")]
public virtual Task`1<MultiplePermissionGrantResult> CheckAsync(PermissionValuesCheckContext context);
}
public class Volo.Abp.GlobalFeatures.PermissionsSimpleStateCheckerSerializerContributor : object {
    [NullableAttribute("1")]
public static string CheckerShortName;
    [NullableContextAttribute("1")]
public sealed virtual string SerializeToJson(ISimpleStateChecker`1<TState> checker);
    [NullableContextAttribute("1")]
public sealed virtual ISimpleStateChecker`1<TState> Deserialize(JsonObject jsonObject, TState state);
}
internal class VoloAbpAuthorization_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
