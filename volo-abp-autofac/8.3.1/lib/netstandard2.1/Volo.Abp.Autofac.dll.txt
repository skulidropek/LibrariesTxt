[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Builder.AbpRegistrationBuilderExtensions : object {
    [ExtensionAttribute]
public static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> ConfigureAbpConventions(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceDescriptor serviceDescriptor, IModuleContainer moduleContainer, ServiceRegistrationActionList registrationActionList, ServiceActivatedActionList activatedActionList);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InvokeActivatedActions(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceActivatedActionList activatedActionList, ServiceDescriptor serviceDescriptor);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> InvokeRegistrationActions(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceRegistrationActionList registrationActionList, Type serviceType, Type implementationType);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> EnablePropertyInjection(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registrationBuilder, IModuleContainer moduleContainer, Type implementationType);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> AddInterceptors(IRegistrationBuilder`3<TLimit, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceRegistrationActionList serviceRegistrationActionList, Type serviceType, IEnumerable`1<Type> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Autofac.Extensions.DependencyInjection.AutofacRegistration : object {
    [ExtensionAttribute]
public static void Populate(ContainerBuilder builder, IServiceCollection services);
    [ExtensionAttribute]
public static void Populate(ContainerBuilder builder, IServiceCollection services, object lifetimeScopeTagForSingletons);
    [ExtensionAttribute]
private static IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> ConfigureServiceType(IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceDescriptor descriptor);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> ConfigureLifecycle(IRegistrationBuilder`3<object, TActivatorData, TRegistrationStyle> registrationBuilder, ServiceLifetime lifecycleKind, object lifetimeScopeTagForSingleton);
    private static void Register(ContainerBuilder builder, IServiceCollection services, object lifetimeScopeTagForSingletons);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpAutofacServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static ContainerBuilder GetContainerBuilder(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceProvider BuildAutofacServiceProvider(IServiceCollection services, Action`1<ContainerBuilder> builderAction);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.AbpAutofacHostBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IHostBuilder UseAutofac(IHostBuilder hostBuilder);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.AbpAutofacAbpApplicationCreationOptionsExtensions : object {
    [ExtensionAttribute]
public static void UseAutofac(AbpApplicationCreationOptions options);
    [ExtensionAttribute]
public static AbpAutofacServiceProviderFactory AddAutofacServiceProviderFactory(IServiceCollection services);
    [ExtensionAttribute]
public static AbpAutofacServiceProviderFactory AddAutofacServiceProviderFactory(IServiceCollection services, ContainerBuilder containerBuilder);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Autofac.AbpAutofacModule : AbpModule {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Autofac.AbpAutofacServiceProviderFactory : object {
    private ContainerBuilder _builder;
    private IServiceCollection _services;
    public AbpAutofacServiceProviderFactory(ContainerBuilder builder);
    public sealed virtual ContainerBuilder CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(ContainerBuilder containerBuilder);
}
public class Volo.Abp.Autofac.AbpPropertySelector : DefaultPropertySelector {
    public AbpPropertySelector(bool preserveSetValues);
    [NullableContextAttribute("1")]
public virtual bool InjectProperty(PropertyInfo propertyInfo, object instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Autofac.AutoFacInjectPropertiesService : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    protected IServiceProvider ServiceProvider { get; }
    public AutoFacInjectPropertiesService(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    public virtual TService InjectProperties(TService instance);
    public virtual TService InjectUnsetProperties(TService instance);
    protected virtual TService InjectProperties(TService instance, bool onlyForUnsetProperties);
}
internal class VoloAbpAutofac_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
