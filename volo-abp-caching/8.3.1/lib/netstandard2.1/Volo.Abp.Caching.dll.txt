[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Caching.AbpCachingModule : AbpModule {
    [NullableContextAttribute("1")]
public virtual void ConfigureServices(ServiceConfigurationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Caching.AbpDistributedCacheOptions : object {
    [CompilerGeneratedAttribute]
private bool <HideErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private DistributedCacheEntryOptions <GlobalCacheEntryOptions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<Func`2<string, DistributedCacheEntryOptions>> <CacheConfigurators>k__BackingField;
    public bool HideErrors { get; public set; }
    public string KeyPrefix { get; public set; }
    public DistributedCacheEntryOptions GlobalCacheEntryOptions { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<Func`2<string, DistributedCacheEntryOptions>> CacheConfigurators { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_HideErrors();
    [CompilerGeneratedAttribute]
public void set_HideErrors(bool value);
    [CompilerGeneratedAttribute]
public string get_KeyPrefix();
    [CompilerGeneratedAttribute]
public void set_KeyPrefix(string value);
    [CompilerGeneratedAttribute]
public DistributedCacheEntryOptions get_GlobalCacheEntryOptions();
    [CompilerGeneratedAttribute]
public void set_GlobalCacheEntryOptions(DistributedCacheEntryOptions value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<string, DistributedCacheEntryOptions>> get_CacheConfigurators();
    [CompilerGeneratedAttribute]
public void set_CacheConfigurators(List`1<Func`2<string, DistributedCacheEntryOptions>> value);
    [NullableContextAttribute("2")]
public void ConfigureCache(DistributedCacheEntryOptions options);
    public void ConfigureCache(Type cacheItemType, DistributedCacheEntryOptions options);
    public void ConfigureCache(string cacheName, DistributedCacheEntryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1036")]
public class Volo.Abp.Caching.CacheNameAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public CacheNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public static string GetCacheName();
    public static string GetCacheName(Type cacheItemType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Caching.DistributedCache`1 : object {
    [CompilerGeneratedAttribute]
private IDistributedCache`2<TCacheItem, string> <InternalCache>k__BackingField;
    public IDistributedCache`2<TCacheItem, string> InternalCache { get; }
    public DistributedCache`1(IDistributedCache`2<TCacheItem, string> internalCache);
    [CompilerGeneratedAttribute]
public sealed virtual IDistributedCache`2<TCacheItem, string> get_InternalCache();
    public sealed virtual TCacheItem Get(string key, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual KeyValuePair`2[] GetMany(IEnumerable`1<string> keys, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual Task`1<KeyValuePair`2[]> GetManyAsync(IEnumerable`1<string> keys, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual Task`1<TCacheItem> GetAsync(string key, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual TCacheItem GetOrAdd(string key, Func`1<TCacheItem> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual Task`1<TCacheItem> GetOrAddAsync(string key, Func`1<Task`1<TCacheItem>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual KeyValuePair`2[] GetOrAddMany(IEnumerable`1<string> keys, Func`2<IEnumerable`1<string>, List`1<KeyValuePair`2<string, TCacheItem>>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual Task`1<KeyValuePair`2[]> GetOrAddManyAsync(IEnumerable`1<string> keys, Func`2<IEnumerable`1<string>, Task`1<List`1<KeyValuePair`2<string, TCacheItem>>>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual void Set(string key, TCacheItem value, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual Task SetAsync(string key, TCacheItem value, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    [NullableContextAttribute("2")]
public sealed virtual void SetMany(IEnumerable`1<KeyValuePair`2<string, TCacheItem>> items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual Task SetManyAsync(IEnumerable`1<KeyValuePair`2<string, TCacheItem>> items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual void Refresh(string key, Nullable`1<bool> hideErrors);
    public sealed virtual Task RefreshAsync(string key, Nullable`1<bool> hideErrors, CancellationToken token);
    public sealed virtual void RefreshMany(IEnumerable`1<string> keys, Nullable`1<bool> hideErrors);
    public sealed virtual Task RefreshManyAsync(IEnumerable`1<string> keys, Nullable`1<bool> hideErrors, CancellationToken token);
    public sealed virtual void Remove(string key, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual Task RemoveAsync(string key, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual void RemoveMany(IEnumerable`1<string> keys, Nullable`1<bool> hideErrors, bool considerUow);
    public sealed virtual Task RemoveManyAsync(IEnumerable`1<string> keys, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Caching.DistributedCache`2 : object {
    public static string UowCacheName;
    [CompilerGeneratedAttribute]
private ILogger`1<DistributedCache`2<TCacheItem, TCacheKey>> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreMultiTenancy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCacheSerializer <Serializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCacheKeyNormalizer <KeyNormalizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <SyncSemaphore>k__BackingField;
    protected DistributedCacheEntryOptions DefaultCacheOptions;
    private AbpDistributedCacheOptions _distributedCacheOption;
    public ILogger`1<DistributedCache`2<TCacheItem, TCacheKey>> Logger { get; public set; }
    protected string CacheName { get; protected set; }
    protected bool IgnoreMultiTenancy { get; protected set; }
    protected IDistributedCache Cache { get; }
    protected ICancellationTokenProvider CancellationTokenProvider { get; }
    protected IDistributedCacheSerializer Serializer { get; }
    protected IDistributedCacheKeyNormalizer KeyNormalizer { get; }
    protected IServiceScopeFactory ServiceScopeFactory { get; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    protected SemaphoreSlim SyncSemaphore { get; }
    public DistributedCache`2(IOptions`1<AbpDistributedCacheOptions> distributedCacheOption, IDistributedCache cache, ICancellationTokenProvider cancellationTokenProvider, IDistributedCacheSerializer serializer, IDistributedCacheKeyNormalizer keyNormalizer, IServiceScopeFactory serviceScopeFactory, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public ILogger`1<DistributedCache`2<TCacheItem, TCacheKey>> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<DistributedCache`2<TCacheItem, TCacheKey>> value);
    [CompilerGeneratedAttribute]
protected string get_CacheName();
    [CompilerGeneratedAttribute]
protected void set_CacheName(string value);
    [CompilerGeneratedAttribute]
protected bool get_IgnoreMultiTenancy();
    [CompilerGeneratedAttribute]
protected void set_IgnoreMultiTenancy(bool value);
    [CompilerGeneratedAttribute]
protected IDistributedCache get_Cache();
    [CompilerGeneratedAttribute]
protected ICancellationTokenProvider get_CancellationTokenProvider();
    [CompilerGeneratedAttribute]
protected IDistributedCacheSerializer get_Serializer();
    [CompilerGeneratedAttribute]
protected IDistributedCacheKeyNormalizer get_KeyNormalizer();
    [CompilerGeneratedAttribute]
protected IServiceScopeFactory get_ServiceScopeFactory();
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
protected SemaphoreSlim get_SyncSemaphore();
    protected virtual string NormalizeKey(TCacheKey key);
    protected virtual DistributedCacheEntryOptions GetDefaultCacheEntryOptions();
    protected virtual void SetDefaultOptions();
    public virtual TCacheItem Get(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow);
    public virtual KeyValuePair`2[] GetMany(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow);
    protected virtual KeyValuePair`2[] GetManyFallback(TCacheKey[] keys, Nullable`1<bool> hideErrors, bool considerUow);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<GetManyAsync>d__43")]
public virtual Task`1<KeyValuePair`2[]> GetManyAsync(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<GetManyFallbackAsync>d__44")]
protected virtual Task`1<KeyValuePair`2[]> GetManyFallbackAsync(TCacheKey[] keys, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<GetAsync>d__45")]
public virtual Task`1<TCacheItem> GetAsync(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public virtual TCacheItem GetOrAdd(TCacheKey key, Func`1<TCacheItem> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<GetOrAddAsync>d__47")]
public virtual Task`1<TCacheItem> GetOrAddAsync(TCacheKey key, Func`1<Task`1<TCacheItem>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual KeyValuePair`2[] GetOrAddMany(IEnumerable`1<TCacheKey> keys, Func`2<IEnumerable`1<TCacheKey>, List`1<KeyValuePair`2<TCacheKey, TCacheItem>>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<GetOrAddManyAsync>d__49")]
public sealed virtual Task`1<KeyValuePair`2[]> GetOrAddManyAsync(IEnumerable`1<TCacheKey> keys, Func`2<IEnumerable`1<TCacheKey>, Task`1<List`1<KeyValuePair`2<TCacheKey, TCacheItem>>>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public virtual void Set(TCacheKey key, TCacheItem value, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<SetAsync>d__51")]
public virtual Task SetAsync(TCacheKey key, TCacheItem value, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    [NullableContextAttribute("2")]
public sealed virtual void SetMany(IEnumerable`1<KeyValuePair`2<TCacheKey, TCacheItem>> items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow);
    [NullableContextAttribute("2")]
protected virtual void SetManyFallback(KeyValuePair`2[] items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<SetManyAsync>d__54")]
public virtual Task SetManyAsync(IEnumerable`1<KeyValuePair`2<TCacheKey, TCacheItem>> items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<SetManyFallbackAsync>d__55")]
protected virtual Task SetManyFallbackAsync(KeyValuePair`2[] items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public virtual void Refresh(TCacheKey key, Nullable`1<bool> hideErrors);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<RefreshAsync>d__57")]
public virtual Task RefreshAsync(TCacheKey key, Nullable`1<bool> hideErrors, CancellationToken token);
    public virtual void RefreshMany(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<RefreshManyAsync>d__59")]
public virtual Task RefreshManyAsync(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, CancellationToken token);
    public virtual void Remove(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<RemoveAsync>d__61")]
public virtual Task RemoveAsync(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public sealed virtual void RemoveMany(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<RemoveManyAsync>d__63")]
public sealed virtual Task RemoveManyAsync(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    protected virtual void HandleException(Exception ex);
    [AsyncStateMachineAttribute("Volo.Abp.Caching.DistributedCache`2/<HandleExceptionAsync>d__65")]
protected virtual Task HandleExceptionAsync(Exception ex);
    protected virtual KeyValuePair`2[] ToCacheItems(Byte[][] itemBytes, TCacheKey[] itemKeys);
    [NullableContextAttribute("2")]
protected virtual TCacheItem ToCacheItem(Byte[] bytes);
    protected virtual KeyValuePair`2[] ToRawCacheItems(KeyValuePair`2[] items);
    private static KeyValuePair`2[] ToCacheItemsWithDefaultValues(TCacheKey[] keys);
    protected virtual bool ShouldConsiderUow(bool considerUow);
    protected virtual string GetUnitOfWorkCacheKey();
    protected virtual Dictionary`2<TCacheKey, UnitOfWorkCacheItem`1<TCacheItem>> GetUnitOfWorkCache();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private KeyValuePair`2<string, Byte[]> <ToRawCacheItems>b__68_0(KeyValuePair`2<TCacheKey, TCacheItem> i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Caching.DistributedCacheKeyNormalizeArgs : object {
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CacheName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreMultiTenancy>k__BackingField;
    public string Key { get; }
    public string CacheName { get; }
    public bool IgnoreMultiTenancy { get; }
    public DistributedCacheKeyNormalizeArgs(string key, string cacheName, bool ignoreMultiTenancy);
    [CompilerGeneratedAttribute]
public string get_Key();
    [CompilerGeneratedAttribute]
public string get_CacheName();
    [CompilerGeneratedAttribute]
public bool get_IgnoreMultiTenancy();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Caching.DistributedCacheKeyNormalizer : object {
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpDistributedCacheOptions <DistributedCacheOptions>k__BackingField;
    protected ICurrentTenant CurrentTenant { get; }
    protected AbpDistributedCacheOptions DistributedCacheOptions { get; }
    public DistributedCacheKeyNormalizer(ICurrentTenant currentTenant, IOptions`1<AbpDistributedCacheOptions> distributedCacheOptions);
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected AbpDistributedCacheOptions get_DistributedCacheOptions();
    public virtual string NormalizeKey(DistributedCacheKeyNormalizeArgs args);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Caching.ICacheSupportsMultipleItems {
    public abstract virtual Byte[][] GetMany(IEnumerable`1<string> keys);
    public abstract virtual Task`1<Byte[][]> GetManyAsync(IEnumerable`1<string> keys, CancellationToken token);
    public abstract virtual void SetMany(IEnumerable`1<KeyValuePair`2<string, Byte[]>> items, DistributedCacheEntryOptions options);
    public abstract virtual Task SetManyAsync(IEnumerable`1<KeyValuePair`2<string, Byte[]>> items, DistributedCacheEntryOptions options, CancellationToken token);
    public abstract virtual void RefreshMany(IEnumerable`1<string> keys);
    public abstract virtual Task RefreshManyAsync(IEnumerable`1<string> keys, CancellationToken token);
    public abstract virtual void RemoveMany(IEnumerable`1<string> keys);
    public abstract virtual Task RemoveManyAsync(IEnumerable`1<string> keys, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Caching.IDistributedCache`1 {
    public IDistributedCache`2<TCacheItem, string> InternalCache { get; }
    public abstract virtual IDistributedCache`2<TCacheItem, string> get_InternalCache();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Caching.IDistributedCache`2 {
    public abstract virtual TCacheItem Get(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual KeyValuePair`2[] GetMany(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual Task`1<KeyValuePair`2[]> GetManyAsync(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public abstract virtual Task`1<TCacheItem> GetAsync(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public abstract virtual TCacheItem GetOrAdd(TCacheKey key, Func`1<TCacheItem> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual Task`1<TCacheItem> GetOrAddAsync(TCacheKey key, Func`1<Task`1<TCacheItem>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public abstract virtual KeyValuePair`2[] GetOrAddMany(IEnumerable`1<TCacheKey> keys, Func`2<IEnumerable`1<TCacheKey>, List`1<KeyValuePair`2<TCacheKey, TCacheItem>>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual Task`1<KeyValuePair`2[]> GetOrAddManyAsync(IEnumerable`1<TCacheKey> keys, Func`2<IEnumerable`1<TCacheKey>, Task`1<List`1<KeyValuePair`2<TCacheKey, TCacheItem>>>> factory, Func`1<DistributedCacheEntryOptions> optionsFactory, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public abstract virtual void Set(TCacheKey key, TCacheItem value, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual Task SetAsync(TCacheKey key, TCacheItem value, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    [NullableContextAttribute("2")]
public abstract virtual void SetMany(IEnumerable`1<KeyValuePair`2<TCacheKey, TCacheItem>> items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual Task SetManyAsync(IEnumerable`1<KeyValuePair`2<TCacheKey, TCacheItem>> items, DistributedCacheEntryOptions options, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public abstract virtual void Refresh(TCacheKey key, Nullable`1<bool> hideErrors);
    public abstract virtual Task RefreshAsync(TCacheKey key, Nullable`1<bool> hideErrors, CancellationToken token);
    public abstract virtual void RefreshMany(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors);
    public abstract virtual Task RefreshManyAsync(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, CancellationToken token);
    public abstract virtual void Remove(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual Task RemoveAsync(TCacheKey key, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
    public abstract virtual void RemoveMany(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow);
    public abstract virtual Task RemoveManyAsync(IEnumerable`1<TCacheKey> keys, Nullable`1<bool> hideErrors, bool considerUow, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Caching.IDistributedCacheKeyNormalizer {
    public abstract virtual string NormalizeKey(DistributedCacheKeyNormalizeArgs args);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Caching.IDistributedCacheSerializer {
    public abstract virtual Byte[] Serialize(T obj);
    public abstract virtual T Deserialize(Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Caching.UnitOfWorkCacheItem`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsRemoved>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    public bool IsRemoved { get; public set; }
    [NullableAttribute("2")]
public TValue Value { get; public set; }
    public UnitOfWorkCacheItem`1(TValue value);
    public UnitOfWorkCacheItem`1(TValue value, bool isRemoved);
    [CompilerGeneratedAttribute]
public bool get_IsRemoved();
    [CompilerGeneratedAttribute]
public void set_IsRemoved(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public TValue get_Value();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Value(TValue value);
    public UnitOfWorkCacheItem`1<TValue> SetValue(TValue value);
    public UnitOfWorkCacheItem`1<TValue> RemoveValue();
}
[ExtensionAttribute]
public static class Volo.Abp.Caching.UnitOfWorkCacheItemExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TValue GetUnRemovedValueOrNull(UnitOfWorkCacheItem`1<TValue> item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Caching.Utf8JsonDistributedCacheSerializer : object {
    [CompilerGeneratedAttribute]
private IJsonSerializer <JsonSerializer>k__BackingField;
    protected IJsonSerializer JsonSerializer { get; }
    public Utf8JsonDistributedCacheSerializer(IJsonSerializer jsonSerializer);
    [CompilerGeneratedAttribute]
protected IJsonSerializer get_JsonSerializer();
    public sealed virtual Byte[] Serialize(T obj);
    public sealed virtual T Deserialize(Byte[] bytes);
}
internal class VoloAbpCaching_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
