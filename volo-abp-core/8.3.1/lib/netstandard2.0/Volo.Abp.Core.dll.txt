[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Configuration.AbpConfigurationBuilderOptions : object {
    [CompilerGeneratedAttribute]
private Assembly <UserSecretsAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserSecretsId>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Optional>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReloadOnChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentVariablesPrefix>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <CommandLineArgs>k__BackingField;
    public Assembly UserSecretsAssembly { get; public set; }
    public string UserSecretsId { get; public set; }
    [NullableAttribute("1")]
public string FileName { get; public set; }
    public bool Optional { get; public set; }
    public bool ReloadOnChange { get; public set; }
    public string EnvironmentName { get; public set; }
    public string BasePath { get; public set; }
    public string EnvironmentVariablesPrefix { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] CommandLineArgs { get; public set; }
    [CompilerGeneratedAttribute]
public Assembly get_UserSecretsAssembly();
    [CompilerGeneratedAttribute]
public void set_UserSecretsAssembly(Assembly value);
    [CompilerGeneratedAttribute]
public string get_UserSecretsId();
    [CompilerGeneratedAttribute]
public void set_UserSecretsId(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_FileName();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public bool get_Optional();
    [CompilerGeneratedAttribute]
public void set_Optional(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReloadOnChange();
    [CompilerGeneratedAttribute]
public void set_ReloadOnChange(bool value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public string get_BasePath();
    [CompilerGeneratedAttribute]
public void set_BasePath(string value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentVariablesPrefix();
    [CompilerGeneratedAttribute]
public void set_EnvironmentVariablesPrefix(string value);
    [CompilerGeneratedAttribute]
public String[] get_CommandLineArgs();
    [CompilerGeneratedAttribute]
public void set_CommandLineArgs(String[] value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.AbpConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IConfigurationBuilder AddAppSettingsSecretsJson(IConfigurationBuilder builder, bool optional, bool reloadOnChange, string path);
}
public static class Microsoft.Extensions.Configuration.ConfigurationHelper : object {
    [NullableContextAttribute("1")]
public static IConfigurationRoot BuildConfiguration(AbpConfigurationBuilderOptions options, Action`1<IConfigurationBuilder> builderAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionApplicationExtensions : object {
    [ExtensionAttribute]
public static IAbpApplicationWithExternalServiceProvider AddApplication(IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    [ExtensionAttribute]
public static IAbpApplicationWithExternalServiceProvider AddApplication(IServiceCollection services, Type startupModuleType, Action`1<AbpApplicationCreationOptions> optionsAction);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionApplicationExtensions/<AddApplicationAsync>d__2`1")]
[ExtensionAttribute]
public static Task`1<IAbpApplicationWithExternalServiceProvider> AddApplicationAsync(IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollectionApplicationExtensions/<AddApplicationAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IAbpApplicationWithExternalServiceProvider> AddApplicationAsync(IServiceCollection services, Type startupModuleType, Action`1<AbpApplicationCreationOptions> optionsAction);
    [ExtensionAttribute]
public static string GetApplicationName(IServiceCollection services);
    [ExtensionAttribute]
public static string GetApplicationInstanceId(IServiceCollection services);
    [ExtensionAttribute]
public static IAbpHostEnvironment GetAbpHostEnvironment(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionCommonExtensions : object {
    [ExtensionAttribute]
public static bool IsAdded(IServiceCollection services);
    [ExtensionAttribute]
public static bool IsAdded(IServiceCollection services, Type type);
    [ExtensionAttribute]
public static ITypeFinder GetTypeFinder(IServiceCollection services);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T GetSingletonInstanceOrNull(IServiceCollection services);
    [ExtensionAttribute]
public static T GetSingletonInstance(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceProvider BuildServiceProviderFromFactory(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceProvider BuildServiceProviderFromFactory(IServiceCollection services, Action`1<TContainerBuilder> builderAction);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static T GetService(IServiceCollection services);
    [ExtensionAttribute]
internal static object GetService(IServiceCollection services, Type type);
    [ExtensionAttribute]
public static T GetRequiredService(IServiceCollection services);
    [ExtensionAttribute]
public static object GetRequiredService(IServiceCollection services, Type type);
    [ExtensionAttribute]
public static Lazy`1<T> GetServiceLazy(IServiceCollection services);
    [ExtensionAttribute]
public static Lazy`1<object> GetServiceLazy(IServiceCollection services, Type type);
    [ExtensionAttribute]
public static Lazy`1<T> GetRequiredServiceLazy(IServiceCollection services);
    [ExtensionAttribute]
public static Lazy`1<object> GetRequiredServiceLazy(IServiceCollection services, Type type);
    [ExtensionAttribute]
public static IServiceProvider GetServiceProviderOrNull(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionConfigurationExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection ReplaceConfiguration(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
public static IConfiguration GetConfiguration(IServiceCollection services);
    [ExtensionAttribute]
public static IConfiguration GetConfigurationOrNull(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionConventionalRegistrationExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddConventionalRegistrar(IServiceCollection services, IConventionalRegistrar registrar);
    [ExtensionAttribute]
public static List`1<IConventionalRegistrar> GetConventionalRegistrars(IServiceCollection services);
    private static ConventionalRegistrarList GetOrCreateRegistrarList(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAssemblyOf(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddAssembly(IServiceCollection services, Assembly assembly);
    [ExtensionAttribute]
public static IServiceCollection AddTypes(IServiceCollection services, Type[] types);
    [ExtensionAttribute]
public static IServiceCollection AddType(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddType(IServiceCollection services, Type type);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionDynamicOptionsManagerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddAbpDynamicOptions(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionLifetimeEventExtensions : object {
    [ExtensionAttribute]
public static void OnActivated(IServiceCollection services, ServiceDescriptor descriptor, Action`1<IOnServiceActivatedContext> onActivatedAction);
    [ExtensionAttribute]
public static ServiceActivatedActionList GetServiceActivatedActionList(IServiceCollection services);
    private static ServiceActivatedActionList GetOrCreateOnActivatedActionList(IServiceCollection services);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionLoggingExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILogger`1<T> GetInitLogger(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionObjectAccessorExtensions : object {
    [ExtensionAttribute]
public static ObjectAccessor`1<T> TryAddObjectAccessor(IServiceCollection services);
    [ExtensionAttribute]
public static ObjectAccessor`1<T> AddObjectAccessor(IServiceCollection services);
    [ExtensionAttribute]
public static ObjectAccessor`1<T> AddObjectAccessor(IServiceCollection services, T obj);
    [ExtensionAttribute]
public static ObjectAccessor`1<T> AddObjectAccessor(IServiceCollection services, ObjectAccessor`1<T> accessor);
    [ExtensionAttribute]
public static T GetObjectOrNull(IServiceCollection services);
    [ExtensionAttribute]
public static T GetObject(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionPreConfigureExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection PreConfigure(IServiceCollection services, Action`1<TOptions> optionsAction);
    [ExtensionAttribute]
public static TOptions ExecutePreConfiguredActions(IServiceCollection services);
    [ExtensionAttribute]
public static TOptions ExecutePreConfiguredActions(IServiceCollection services, TOptions options);
    [ExtensionAttribute]
public static PreConfigureActionList`1<TOptions> GetPreConfigureActions(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionRegistrationActionExtensions : object {
    [ExtensionAttribute]
public static void OnRegistered(IServiceCollection services, Action`1<IOnServiceRegistredContext> registrationAction);
    [ExtensionAttribute]
public static ServiceRegistrationActionList GetRegistrationActionList(IServiceCollection services);
    private static ServiceRegistrationActionList GetOrCreateRegistrationActionList(IServiceCollection services);
    [ExtensionAttribute]
public static void DisableAbpClassInterceptors(IServiceCollection services);
    [ExtensionAttribute]
public static bool IsAbpClassInterceptorsDisabled(IServiceCollection services);
    [ExtensionAttribute]
public static void OnExposing(IServiceCollection services, Action`1<IOnServiceExposingContext> exposeAction);
    [ExtensionAttribute]
public static ServiceExposingActionList GetExposingActionList(IServiceCollection services);
    private static ServiceExposingActionList GetOrCreateExposingList(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceDescriptorExtensions : object {
    [ExtensionAttribute]
public static object NormalizedImplementationInstance(ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static Type NormalizedImplementationType(ServiceDescriptor descriptor);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static object GetKeyedService(IServiceProvider provider, Type serviceType, object serviceKey);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.AbpHostExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.AbpHostExtensions/<InitializeAsync>d__0")]
[ExtensionAttribute]
public static Task InitializeAsync(IHost host);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.AbpHostingHostBuilderExtensions : object {
    public static string AppSettingsSecretJsonPath;
    [ExtensionAttribute]
public static IHostBuilder AddAppSettingsSecretsJson(IHostBuilder hostBuilder, bool optional, bool reloadOnChange, string path);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Localization.AbpCoreStringLocalizerFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IStringLocalizer Create(IStringLocalizerFactory localizerFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.AbpLoggerExtensions : object {
    [ExtensionAttribute]
public static void LogWithLevel(ILogger logger, LogLevel logLevel, string message);
    [ExtensionAttribute]
public static void LogWithLevel(ILogger logger, LogLevel logLevel, string message, Exception exception);
    [ExtensionAttribute]
public static void LogException(ILogger logger, Exception ex, Nullable`1<LogLevel> level);
    private static void LogKnownProperties(ILogger logger, Exception exception, LogLevel logLevel);
    private static void LogData(ILogger logger, Exception exception, LogLevel logLevel);
    private static void LogSelfLogging(ILogger logger, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Options.OptionsAbpDynamicOptionsManagerExtensions : object {
    [ExtensionAttribute]
public static Task SetAsync(IOptions`1<T> options);
    [ExtensionAttribute]
public static Task SetAsync(IOptions`1<T> options, string name);
    [ExtensionAttribute]
private static AbpDynamicOptionsManager`1<T> ToDynamicOptions(IOptions`1<T> options);
}
[ExtensionAttribute]
public static class System.AbpComparableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsBetween(T value, T minInclusiveValue, T maxInclusiveValue);
}
[ExtensionAttribute]
public static class System.AbpDateTimeExtensions : object {
    [ExtensionAttribute]
public static DateTime ClearTime(DateTime dateTime);
}
[ExtensionAttribute]
public static class System.AbpDayOfWeekExtensions : object {
    [ExtensionAttribute]
public static bool IsWeekend(DayOfWeek dayOfWeek);
    [ExtensionAttribute]
public static bool IsWeekday(DayOfWeek dayOfWeek);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.AbpEventHandlerExtensions : object {
    [ExtensionAttribute]
public static void InvokeSafely(EventHandler eventHandler, object sender);
    [ExtensionAttribute]
public static void InvokeSafely(EventHandler eventHandler, object sender, EventArgs e);
    [ExtensionAttribute]
public static void InvokeSafely(EventHandler`1<TEventArgs> eventHandler, object sender, TEventArgs e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.AbpExceptionExtensions : object {
    [ExtensionAttribute]
public static void ReThrow(Exception exception);
    [ExtensionAttribute]
public static LogLevel GetLogLevel(Exception exception, LogLevel defaultLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.AbpObjectExtensions : object {
    [ExtensionAttribute]
public static T As(object obj);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T To(object obj);
    [ExtensionAttribute]
public static bool IsIn(T item, T[] list);
    [ExtensionAttribute]
public static bool IsIn(T item, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static T If(T obj, bool condition, Func`2<T, T> func);
    [ExtensionAttribute]
public static T If(T obj, bool condition, Action`1<T> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.AbpStringExtensions : object {
    [ExtensionAttribute]
public static string EnsureEndsWith(string str, char c, StringComparison comparisonType);
    [ExtensionAttribute]
public static string EnsureStartsWith(string str, char c, StringComparison comparisonType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrEmpty(string str);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrWhiteSpace(string str);
    [ExtensionAttribute]
public static string Left(string str, int len);
    [ExtensionAttribute]
public static string NormalizeLineEndings(string str);
    [ExtensionAttribute]
public static int NthIndexOf(string str, char c, int n);
    [ExtensionAttribute]
public static string RemovePostFix(string str, String[] postFixes);
    [ExtensionAttribute]
public static string RemovePostFix(string str, StringComparison comparisonType, String[] postFixes);
    [ExtensionAttribute]
public static string RemovePreFix(string str, String[] preFixes);
    [ExtensionAttribute]
public static string RemovePreFix(string str, StringComparison comparisonType, String[] preFixes);
    [ExtensionAttribute]
public static string ReplaceFirst(string str, string search, string replace, StringComparison comparisonType);
    [ExtensionAttribute]
public static string Right(string str, int len);
    [ExtensionAttribute]
public static String[] Split(string str, string separator);
    [ExtensionAttribute]
public static String[] Split(string str, string separator, StringSplitOptions options);
    [ExtensionAttribute]
public static String[] SplitToLines(string str);
    [ExtensionAttribute]
public static String[] SplitToLines(string str, StringSplitOptions options);
    [ExtensionAttribute]
public static string ToCamelCase(string str, bool useCurrentCulture, bool handleAbbreviations);
    [ExtensionAttribute]
public static string ToSentenceCase(string str, bool useCurrentCulture);
    [ExtensionAttribute]
public static string ToKebabCase(string str, bool useCurrentCulture);
    [ExtensionAttribute]
public static string ToSnakeCase(string str);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T ToEnum(string value);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static T ToEnum(string value, bool ignoreCase);
    [ExtensionAttribute]
public static string ToMd5(string str);
    [ExtensionAttribute]
public static string ToSha256(string str);
    [ExtensionAttribute]
public static string ToSha512(string str);
    [ExtensionAttribute]
public static string ToPascalCase(string str, bool useCurrentCulture);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string Truncate(string str, int maxLength);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string TruncateFromBeginning(string str, int maxLength);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string TruncateWithPostfix(string str, int maxLength);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string TruncateWithPostfix(string str, int maxLength, string postfix);
    [ExtensionAttribute]
public static Byte[] GetBytes(string str);
    [ExtensionAttribute]
public static Byte[] GetBytes(string str, Encoding encoding);
    private static bool IsAllUpperCase(string input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.AbpTypeExtensions : object {
    [ExtensionAttribute]
public static string GetFullNameWithAssemblyName(Type type);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type type);
    [ExtensionAttribute]
public static bool IsAssignableTo(Type type, Type targetType);
    [ExtensionAttribute]
public static Type[] GetBaseClasses(Type type, bool includeObject);
    [ExtensionAttribute]
public static Type[] GetBaseClasses(Type type, Type stoppingType, bool includeObject);
    [NullableContextAttribute("2")]
private static void AddTypeAndBaseTypesRecursively(List`1<Type> types, Type type, bool includeObject, Type stoppingType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Collections.Generic.AbpCollectionExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullOrEmpty(ICollection`1<T> source);
    [ExtensionAttribute]
public static bool AddIfNotContains(ICollection`1<T> source, T item);
    [ExtensionAttribute]
public static IEnumerable`1<T> AddIfNotContains(ICollection`1<T> source, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static bool AddIfNotContains(ICollection`1<T> source, Func`2<T, bool> predicate, Func`1<T> itemFactory);
    [ExtensionAttribute]
public static IList`1<T> RemoveAll(ICollection`1<T> source, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static void RemoveAll(ICollection`1<T> source, IEnumerable`1<T> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Collections.Generic.AbpDictionaryExtensions : object {
    [ExtensionAttribute]
internal static bool TryGetValue(IDictionary`2<string, object> dictionary, string key, T& value);
    [ExtensionAttribute]
public static TValue GetOrDefault(Dictionary`2<TKey, TValue> dictionary, TKey key);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue GetOrDefault(IDictionary`2<TKey, TValue> dictionary, TKey key);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue GetOrDefault(IReadOnlyDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue GetOrDefault(ConcurrentDictionary`2<TKey, TValue> dictionary, TKey key);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`2<TKey, TValue> factory);
    [ExtensionAttribute]
public static TValue GetOrAdd(IDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> factory);
    [ExtensionAttribute]
public static TValue GetOrAdd(ConcurrentDictionary`2<TKey, TValue> dictionary, TKey key, Func`1<TValue> factory);
    [ExtensionAttribute]
public static object ConvertToDynamicObject(Dictionary`2<string, object> dictionary);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Collections.Generic.AbpEnumerableExtensions : object {
    [ExtensionAttribute]
public static string JoinAsString(IEnumerable`1<string> source, string separator);
    [ExtensionAttribute]
public static string JoinAsString(IEnumerable`1<T> source, string separator);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereIf(IEnumerable`1<T> source, bool condition, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereIf(IEnumerable`1<T> source, bool condition, Func`3<T, int, bool> predicate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Collections.Generic.AbpListExtensions : object {
    [ExtensionAttribute]
public static void InsertRange(IList`1<T> source, int index, IEnumerable`1<T> items);
    [ExtensionAttribute]
public static int FindIndex(IList`1<T> source, Predicate`1<T> selector);
    [ExtensionAttribute]
public static void AddFirst(IList`1<T> source, T item);
    [ExtensionAttribute]
public static void AddLast(IList`1<T> source, T item);
    [ExtensionAttribute]
public static void InsertAfter(IList`1<T> source, T existingItem, T item);
    [ExtensionAttribute]
public static void InsertAfter(IList`1<T> source, Predicate`1<T> selector, T item);
    [ExtensionAttribute]
public static void InsertBefore(IList`1<T> source, T existingItem, T item);
    [ExtensionAttribute]
public static void InsertBefore(IList`1<T> source, Predicate`1<T> selector, T item);
    [ExtensionAttribute]
public static void ReplaceWhile(IList`1<T> source, Predicate`1<T> selector, T item);
    [ExtensionAttribute]
public static void ReplaceWhile(IList`1<T> source, Predicate`1<T> selector, Func`2<T, T> itemFactory);
    [ExtensionAttribute]
public static void ReplaceOne(IList`1<T> source, Predicate`1<T> selector, T item);
    [ExtensionAttribute]
public static void ReplaceOne(IList`1<T> source, Predicate`1<T> selector, Func`2<T, T> itemFactory);
    [ExtensionAttribute]
public static void ReplaceOne(IList`1<T> source, T item, T replaceWith);
    [ExtensionAttribute]
public static void MoveItem(List`1<T> source, Predicate`1<T> selector, int targetIndex);
    [ExtensionAttribute]
public static T GetOrAdd(IList`1<T> source, Func`2<T, bool> selector, Func`1<T> factory);
    [ExtensionAttribute]
public static List`1<T> SortByDependencies(IEnumerable`1<T> source, Func`2<T, IEnumerable`1<T>> getDependencies, IEqualityComparer`1<T> comparer);
    private static void SortByDependenciesVisit(T item, Func`2<T, IEnumerable`1<T>> getDependencies, List`1<T> sorted, Dictionary`2<T, bool> visited);
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
[ExcludeFromCodeCoverageAttribute]
[DebuggerNonUserCodeAttribute]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.IO.AbpStreamExtensions : object {
    [ExtensionAttribute]
public static Byte[] GetAllBytes(Stream stream);
    [AsyncStateMachineAttribute("System.IO.AbpStreamExtensions/<GetAllBytesAsync>d__1")]
[ExtensionAttribute]
public static Task`1<Byte[]> GetAllBytesAsync(Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task CopyToAsync(Stream stream, Stream destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.AbpStreamExtensions/<CreateMemoryStreamAsync>d__3")]
[ExtensionAttribute]
public static Task`1<MemoryStream> CreateMemoryStreamAsync(Stream stream, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static MemoryStream CreateMemoryStream(Stream stream);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.AbpQueryableExtensions : object {
    [ExtensionAttribute]
public static IQueryable`1<T> PageBy(IQueryable`1<T> query, int skipCount, int maxResultCount);
    [ExtensionAttribute]
public static TQueryable PageBy(TQueryable query, int skipCount, int maxResultCount);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereIf(IQueryable`1<T> query, bool condition, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static TQueryable WhereIf(TQueryable query, bool condition, Expression`1<Func`2<T, bool>> predicate);
    [ExtensionAttribute]
public static IQueryable`1<T> WhereIf(IQueryable`1<T> query, bool condition, Expression`1<Func`3<T, int, bool>> predicate);
    [ExtensionAttribute]
public static TQueryable WhereIf(TQueryable query, bool condition, Expression`1<Func`3<T, int, bool>> predicate);
    [ExtensionAttribute]
public static TQueryable OrderByIf(TQueryable query, bool condition, string sorting);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Linq.ExpressionStarter`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Expression`1<Func`2<T, bool>> _predicate;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Expression`1<Func`2<T, bool>> <DefaultExpression>k__BackingField;
    private Expression`1<Func`2<T, bool>> Predicate { get; }
    public bool IsStarted { get; }
    public bool UseDefaultExpression { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`2<T, bool>> DefaultExpression { get; public set; }
    public Expression Body { get; }
    public ExpressionType NodeType { get; }
    public ReadOnlyCollection`1<ParameterExpression> Parameters { get; }
    public Type Type { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public Type ReturnType { get; }
    public bool TailCall { get; }
    public bool CanReduce { get; }
    public ExpressionStarter`1(bool defaultExpression);
    public ExpressionStarter`1(Expression`1<Func`2<T, bool>> exp);
    private Expression`1<Func`2<T, bool>> get_Predicate();
    public bool get_IsStarted();
    public bool get_UseDefaultExpression();
    [CompilerGeneratedAttribute]
public Expression`1<Func`2<T, bool>> get_DefaultExpression();
    [CompilerGeneratedAttribute]
public void set_DefaultExpression(Expression`1<Func`2<T, bool>> value);
    public Expression`1<Func`2<T, bool>> Start(Expression`1<Func`2<T, bool>> exp);
    public Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> expr2);
    public Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> expr2);
    [NullableContextAttribute("2")]
public virtual string ToString();
    public static Expression`1<Func`2<T, bool>> op_Implicit(ExpressionStarter`1<T> right);
    public static Func`2<T, bool> op_Implicit(ExpressionStarter`1<T> right);
    public static ExpressionStarter`1<T> op_Implicit(Expression`1<Func`2<T, bool>> right);
    public Func`2<T, bool> Compile();
    public Expression get_Body();
    public ExpressionType get_NodeType();
    public ReadOnlyCollection`1<ParameterExpression> get_Parameters();
    public Type get_Type();
    [NullableContextAttribute("2")]
public string get_Name();
    public Type get_ReturnType();
    public bool get_TailCall();
    public virtual bool get_CanReduce();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.PredicateBuilder : object {
    public static ExpressionStarter`1<T> New(Expression`1<Func`2<T, bool>> expr);
    public static ExpressionStarter`1<T> New(bool defaultExpression);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> expr1, Expression`1<Func`2<T, bool>> expr2);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Extend(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second, PredicateOperator operator);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Extend(ExpressionStarter`1<T> first, Expression`1<Func`2<T, bool>> second, PredicateOperator operator);
}
public enum System.Linq.PredicateOperator : Enum {
    public int value__;
    public static PredicateOperator Or;
    public static PredicateOperator And;
}
[ExtensionAttribute]
public static class System.Reflection.AbpAssemblyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetFileVersion(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.AbpMemberInfoExtensions : object {
    [ExtensionAttribute]
public static TAttribute GetSingleAttributeOrNull(MemberInfo memberInfo, bool inherit);
    [ExtensionAttribute]
public static TAttribute GetSingleAttributeOfTypeOrBaseTypesOrNull(Type type, bool inherit);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public interface System.Runtime.IOSPlatformProvider {
    public abstract virtual OSPlatform GetCurrentOSPlatform();
}
public class System.Runtime.OSPlatformProvider : object {
    public virtual OSPlatform GetCurrentOSPlatform();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Text.Json.JsonSerializerOptionsHelper : object {
    public static JsonSerializerOptions Create(JsonSerializerOptions baseOptions, JsonConverter removeConverter, JsonConverter[] addConverters);
    public static JsonSerializerOptions Create(JsonSerializerOptions baseOptions, Func`2<JsonConverter, bool> removeConverterPredicate, JsonConverter[] addConverters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.AbpApplicationBase : object {
    [CompilerGeneratedAttribute]
private Type <StartupModuleType>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IAbpModuleDescriptor> <Modules>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstanceId>k__BackingField;
    private bool _configuredServices;
    public Type StartupModuleType { get; }
    public IServiceProvider ServiceProvider { get; private set; }
    public IServiceCollection Services { get; }
    public IReadOnlyList`1<IAbpModuleDescriptor> Modules { get; }
    [NullableAttribute("2")]
public string ApplicationName { get; }
    public string InstanceId { get; }
    internal AbpApplicationBase(Type startupModuleType, IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_StartupModuleType();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private void set_ServiceProvider(IServiceProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyList`1<IAbpModuleDescriptor> get_Modules();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_InstanceId();
    [AsyncStateMachineAttribute("Volo.Abp.AbpApplicationBase/<ShutdownAsync>d__21")]
public virtual Task ShutdownAsync();
    public virtual void Shutdown();
    public virtual void Dispose();
    protected virtual void SetServiceProvider(IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Volo.Abp.AbpApplicationBase/<InitializeModulesAsync>d__25")]
protected virtual Task InitializeModulesAsync();
    protected virtual void InitializeModules();
    protected virtual void WriteInitLogs(IServiceProvider serviceProvider);
    protected virtual IReadOnlyList`1<IAbpModuleDescriptor> LoadModules(IServiceCollection services, AbpApplicationCreationOptions options);
    [AsyncStateMachineAttribute("Volo.Abp.AbpApplicationBase/<ConfigureServicesAsync>d__29")]
public virtual Task ConfigureServicesAsync();
    private void CheckMultipleConfigureServices();
    public virtual void ConfigureServices();
    private static string GetApplicationName(AbpApplicationCreationOptions options);
    private static void TryToSetEnvironment(IServiceCollection services);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AbpApplicationCreationOptions : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [CompilerGeneratedAttribute]
private PlugInSourceList <PlugInSources>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpConfigurationBuilderOptions <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipConfigureServices>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Environment>k__BackingField;
    public IServiceCollection Services { get; }
    public PlugInSourceList PlugInSources { get; }
    public AbpConfigurationBuilderOptions Configuration { get; }
    public bool SkipConfigureServices { get; public set; }
    [NullableAttribute("2")]
public string ApplicationName { get; public set; }
    [NullableAttribute("2")]
public string Environment { get; public set; }
    public AbpApplicationCreationOptions(IServiceCollection services);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public PlugInSourceList get_PlugInSources();
    [CompilerGeneratedAttribute]
public AbpConfigurationBuilderOptions get_Configuration();
    [CompilerGeneratedAttribute]
public bool get_SkipConfigureServices();
    [CompilerGeneratedAttribute]
public void set_SkipConfigureServices(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ApplicationName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Environment();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Environment(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.AbpApplicationFactory : object {
    [AsyncStateMachineAttribute("Volo.Abp.AbpApplicationFactory/<CreateAsync>d__0`1")]
public static Task`1<IAbpApplicationWithInternalServiceProvider> CreateAsync(Action`1<AbpApplicationCreationOptions> optionsAction);
    [AsyncStateMachineAttribute("Volo.Abp.AbpApplicationFactory/<CreateAsync>d__1")]
public static Task`1<IAbpApplicationWithInternalServiceProvider> CreateAsync(Type startupModuleType, Action`1<AbpApplicationCreationOptions> optionsAction);
    [AsyncStateMachineAttribute("Volo.Abp.AbpApplicationFactory/<CreateAsync>d__2`1")]
public static Task`1<IAbpApplicationWithExternalServiceProvider> CreateAsync(IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    [AsyncStateMachineAttribute("Volo.Abp.AbpApplicationFactory/<CreateAsync>d__3")]
public static Task`1<IAbpApplicationWithExternalServiceProvider> CreateAsync(Type startupModuleType, IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    public static IAbpApplicationWithInternalServiceProvider Create(Action`1<AbpApplicationCreationOptions> optionsAction);
    public static IAbpApplicationWithInternalServiceProvider Create(Type startupModuleType, Action`1<AbpApplicationCreationOptions> optionsAction);
    public static IAbpApplicationWithExternalServiceProvider Create(IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    public static IAbpApplicationWithExternalServiceProvider Create(Type startupModuleType, IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
}
internal class Volo.Abp.AbpApplicationWithExternalServiceProvider : AbpApplicationBase {
    [NullableContextAttribute("1")]
public AbpApplicationWithExternalServiceProvider(Type startupModuleType, IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    [NullableContextAttribute("1")]
private sealed virtual override void Volo.Abp.IAbpApplicationWithExternalServiceProvider.SetServiceProvider(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Volo.Abp.AbpApplicationWithExternalServiceProvider/<InitializeAsync>d__2")]
public sealed virtual Task InitializeAsync(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
public sealed virtual void Initialize(IServiceProvider serviceProvider);
    public virtual void Dispose();
}
internal class Volo.Abp.AbpApplicationWithInternalServiceProvider : AbpApplicationBase {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IServiceScope <ServiceScope>k__BackingField;
    [NullableAttribute("2")]
public IServiceScope ServiceScope { get; private set; }
    [NullableContextAttribute("1")]
public AbpApplicationWithInternalServiceProvider(Type startupModuleType, Action`1<AbpApplicationCreationOptions> optionsAction);
    [NullableContextAttribute("1")]
private AbpApplicationWithInternalServiceProvider(Type startupModuleType, IServiceCollection services, Action`1<AbpApplicationCreationOptions> optionsAction);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceScope get_ServiceScope();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_ServiceScope(IServiceScope value);
    [NullableContextAttribute("1")]
public sealed virtual IServiceProvider CreateServiceProvider();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Volo.Abp.AbpApplicationWithInternalServiceProvider/<InitializeAsync>d__7")]
public sealed virtual Task InitializeAsync();
    public sealed virtual void Initialize();
    public virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.AbpException : Exception {
    public AbpException(string message);
    public AbpException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.AbpHostEnvironment : object {
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    public string EnvironmentName { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.AbpHostEnvironmentExtensions : object {
    [ExtensionAttribute]
public static bool IsDevelopment(IAbpHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsStaging(IAbpHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsProduction(IAbpHostEnvironment hostEnvironment);
    [ExtensionAttribute]
public static bool IsEnvironment(IAbpHostEnvironment hostEnvironment, string environmentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AbpInitializationException : AbpException {
    public AbpInitializationException(string message);
    public AbpInitializationException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.AbpShutdownException : AbpException {
    public AbpShutdownException(string message);
    public AbpShutdownException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.ApplicationInitializationContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IServiceProvider ServiceProvider { get; public set; }
    public ApplicationInitializationContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public void set_ServiceProvider(IServiceProvider value);
}
[FlagsAttribute]
public enum Volo.Abp.ApplicationServiceTypes : Enum {
    public byte value__;
    public static ApplicationServiceTypes ApplicationServices;
    public static ApplicationServiceTypes IntegrationServices;
    public static ApplicationServiceTypes All;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.ApplicationShutdownContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public ApplicationShutdownContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Aspects.AbpCrossCuttingConcerns : object {
    public static string Auditing;
    public static string UnitOfWork;
    public static string FeatureChecking;
    public static string GlobalFeatureChecking;
    public static void AddApplied(object obj, String[] concerns);
    public static void RemoveApplied(object obj, String[] concerns);
    public static bool IsApplied(object obj, string concern);
    public static IDisposable Applying(object obj, String[] concerns);
    public static String[] GetApplieds(object obj);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Aspects.IAvoidDuplicateCrossCuttingConcerns {
    public List`1<string> AppliedCrossCuttingConcerns { get; }
    public abstract virtual List`1<string> get_AppliedCrossCuttingConcerns();
}
public class Volo.Abp.AsyncDisposeFunc : object {
    [NullableAttribute("1")]
private Func`1<Task> _func;
    [NullableContextAttribute("1")]
public AsyncDisposeFunc(Func`1<Task> func);
    [AsyncStateMachineAttribute("Volo.Abp.AsyncDisposeFunc/<DisposeAsync>d__2")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Bundling.BundleContext : object {
    [CompilerGeneratedAttribute]
private List`1<BundleDefinition> <BundleDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private BundleParameterDictionary <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InteractiveAuto>k__BackingField;
    public List`1<BundleDefinition> BundleDefinitions { get; public set; }
    public BundleParameterDictionary Parameters { get; public set; }
    public bool InteractiveAuto { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<BundleDefinition> get_BundleDefinitions();
    [CompilerGeneratedAttribute]
public void set_BundleDefinitions(List`1<BundleDefinition> value);
    [CompilerGeneratedAttribute]
public BundleParameterDictionary get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(BundleParameterDictionary value);
    [CompilerGeneratedAttribute]
public bool get_InteractiveAuto();
    [CompilerGeneratedAttribute]
public void set_InteractiveAuto(bool value);
    public void Add(string source, bool excludeFromBundle, Dictionary`2<string, string> additionalProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Bundling.BundleDefinition : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <AdditionalProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeFromBundle>k__BackingField;
    public string Source { get; public set; }
    public Dictionary`2<string, string> AdditionalProperties { get; public set; }
    public bool ExcludeFromBundle { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeFromBundle();
    [CompilerGeneratedAttribute]
public void set_ExcludeFromBundle(bool value);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Bundling.BundleParameterDictionary : Dictionary`2<string, string> {
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Bundling.IBundleContributor {
    public abstract virtual void AddScripts(BundleContext context);
    public abstract virtual void AddStyles(BundleContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.BusinessException : Exception {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    public string Code { get; public set; }
    public string Details { get; public set; }
    public LogLevel LogLevel { get; public set; }
    public BusinessException(string code, string message, string details, Exception innerException, LogLevel logLevel);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LogLevel(LogLevel value);
    [NullableContextAttribute("1")]
public BusinessException WithData(string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
public static class Volo.Abp.Check : object {
    public static T NotNull(T value, string parameterName);
    public static T NotNull(T value, string parameterName, string message);
    public static string NotNull(string value, string parameterName, int maxLength, int minLength);
    public static string NotNullOrWhiteSpace(string value, string parameterName, int maxLength, int minLength);
    public static string NotNullOrEmpty(string value, string parameterName, int maxLength, int minLength);
    public static ICollection`1<T> NotNullOrEmpty(ICollection`1<T> value, string parameterName);
    public static Type AssignableTo(Type type, string parameterName);
    [NullableContextAttribute("2")]
public static string Length(string value, string parameterName, int maxLength, int minLength);
    public static short Positive(short value, string parameterName);
    public static int Positive(int value, string parameterName);
    public static long Positive(long value, string parameterName);
    public static float Positive(float value, string parameterName);
    public static double Positive(double value, string parameterName);
    public static decimal Positive(decimal value, string parameterName);
    public static short Range(short value, string parameterName, short minimumValue, short maximumValue);
    public static int Range(int value, string parameterName, int minimumValue, int maximumValue);
    public static long Range(long value, string parameterName, long minimumValue, long maximumValue);
    public static float Range(float value, string parameterName, float minimumValue, float maximumValue);
    public static double Range(double value, string parameterName, double minimumValue, double maximumValue);
    public static decimal Range(decimal value, string parameterName, decimal minimumValue, decimal maximumValue);
    [NullableContextAttribute("0")]
public static T NotDefaultOrNull(Nullable`1<T> value, string parameterName);
}
public interface Volo.Abp.Collections.ITypeList {
}
public interface Volo.Abp.Collections.ITypeList`1 {
    public abstract virtual void Add();
    public abstract virtual bool TryAdd();
    public abstract virtual bool Contains();
    public abstract virtual void Remove();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Collections.TypeList : TypeList`1<object> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Volo.Abp.Collections.TypeList`1 : object {
    private List`1<Type> _typeList;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Type Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual Type get_Item(int index);
    public sealed virtual void set_Item(int index, Type value);
    [NullableContextAttribute("0")]
public sealed virtual void Add();
    [NullableContextAttribute("0")]
public sealed virtual bool TryAdd();
    public sealed virtual void Add(Type item);
    public sealed virtual void Insert(int index, Type item);
    public sealed virtual int IndexOf(Type item);
    [NullableContextAttribute("0")]
public sealed virtual bool Contains();
    public sealed virtual bool Contains(Type item);
    [NullableContextAttribute("0")]
public sealed virtual void Remove();
    public sealed virtual bool Remove(Type item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public sealed virtual void CopyTo(Type[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<Type> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private static void CheckType(Type item);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Content.IRemoteStreamContent {
    [NullableAttribute("2")]
public string FileName { get; }
    public string ContentType { get; }
    public Nullable`1<long> ContentLength { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_FileName();
    public abstract virtual string get_ContentType();
    public abstract virtual Nullable`1<long> get_ContentLength();
    public abstract virtual Stream GetStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Content.RemoteStreamContent : object {
    private Stream _stream;
    private bool _disposeStream;
    private bool _disposed;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <ContentLength>k__BackingField;
    [NullableAttribute("2")]
public string FileName { get; }
    public string ContentType { get; }
    public Nullable`1<long> ContentLength { get; }
    [NullableContextAttribute("2")]
public RemoteStreamContent(Stream stream, string fileName, string contentType, Nullable`1<long> readOnlyLength, bool disposeStream);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_FileName();
    [CompilerGeneratedAttribute]
public virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<long> get_ContentLength();
    public virtual Stream GetStream();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExposeServicesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.DependencyInjection.AbpLazyServiceProvider : CachedServiceProviderBase {
    public AbpLazyServiceProvider(IServiceProvider serviceProvider);
    public virtual T LazyGetRequiredService();
    public virtual object LazyGetRequiredService(Type serviceType);
    [NullableContextAttribute("2")]
public virtual T LazyGetService();
    public virtual object LazyGetService(Type serviceType);
    public virtual T LazyGetService(T defaultValue);
    public virtual object LazyGetService(Type serviceType, object defaultValue);
    public virtual T LazyGetService(Func`2<IServiceProvider, object> factory);
    public virtual object LazyGetService(Type serviceType, Func`2<IServiceProvider, object> factory);
}
[ExposeServicesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.DependencyInjection.CachedServiceProvider : CachedServiceProviderBase {
    [NullableContextAttribute("1")]
public CachedServiceProvider(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.DependencyInjection.CachedServiceProviderBase : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ConcurrentDictionary`2<ServiceIdentifier, Lazy`1<object>> <CachedServices>k__BackingField;
    protected IServiceProvider ServiceProvider { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected ConcurrentDictionary`2<ServiceIdentifier, Lazy`1<object>> CachedServices { get; }
    protected CachedServiceProviderBase(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
protected ConcurrentDictionary`2<ServiceIdentifier, Lazy`1<object>> get_CachedServices();
    public virtual object GetService(Type serviceType);
    public sealed virtual T GetService(T defaultValue);
    public sealed virtual object GetService(Type serviceType, object defaultValue);
    public sealed virtual T GetService(Func`2<IServiceProvider, object> factory);
    public sealed virtual object GetService(Type serviceType, Func`2<IServiceProvider, object> factory);
    [NullableContextAttribute("2")]
public sealed virtual object GetKeyedService(Type serviceType, object serviceKey);
    public sealed virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private object <.ctor>b__6_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.DependencyInjection.ConventionalRegistrarBase : object {
    public virtual void AddAssembly(IServiceCollection services, Assembly assembly);
    public virtual void AddTypes(IServiceCollection services, Type[] types);
    public abstract virtual void AddType(IServiceCollection services, Type type);
    protected virtual bool IsConventionalRegistrationDisabled(Type type);
    protected virtual void TriggerServiceExposing(IServiceCollection services, Type implementationType, List`1<Type> serviceTypes);
    protected virtual void TriggerServiceExposing(IServiceCollection services, Type implementationType, List`1<ServiceIdentifier> serviceTypes);
    protected virtual DependencyAttribute GetDependencyAttributeOrNull(Type type);
    protected virtual Nullable`1<ServiceLifetime> GetLifeTimeOrNull(Type type, DependencyAttribute dependencyAttribute);
    protected virtual Nullable`1<ServiceLifetime> GetServiceLifetimeFromClassHierarchy(Type type);
    protected virtual Nullable`1<ServiceLifetime> GetDefaultLifeTimeOrNull(Type type);
    protected virtual List`1<Type> GetExposedServiceTypes(Type type);
    protected virtual List`1<ServiceIdentifier> GetExposedKeyedServiceTypes(Type type);
    protected virtual ServiceDescriptor CreateServiceDescriptor(Type implementationType, object serviceKey, Type exposingServiceType, List`1<ServiceIdentifier> allExposingServiceTypes, ServiceLifetime lifeTime);
    protected virtual Type GetRedirectedTypeOrNull(Type implementationType, Type exposingServiceType, List`1<ServiceIdentifier> allExposingKeyedServiceTypes);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Volo.Abp.DependencyInjection.ConventionalRegistrarList : List`1<IConventionalRegistrar> {
}
public class Volo.Abp.DependencyInjection.DefaultConventionalRegistrar : ConventionalRegistrarBase {
    [NullableContextAttribute("1")]
public virtual void AddType(IServiceCollection services, Type type);
}
public class Volo.Abp.DependencyInjection.DependencyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Nullable`1<ServiceLifetime> <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TryRegister>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ReplaceServices>k__BackingField;
    public Nullable`1<ServiceLifetime> Lifetime { get; public set; }
    public bool TryRegister { get; public set; }
    public bool ReplaceServices { get; public set; }
    public DependencyAttribute(ServiceLifetime lifetime);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<ServiceLifetime> get_Lifetime();
    [CompilerGeneratedAttribute]
public virtual void set_Lifetime(Nullable`1<ServiceLifetime> value);
    [CompilerGeneratedAttribute]
public virtual bool get_TryRegister();
    [CompilerGeneratedAttribute]
public virtual void set_TryRegister(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_ReplaceServices();
    [CompilerGeneratedAttribute]
public virtual void set_ReplaceServices(bool value);
}
public class Volo.Abp.DependencyInjection.DisableConventionalRegistrationAttribute : Attribute {
}
[AttributeUsageAttribute("132")]
public class Volo.Abp.DependencyInjection.DisablePropertyInjectionAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.DependencyInjection.ExposedServiceExplorer : object {
    private static ExposeServicesAttribute DefaultExposeServicesAttribute;
    private static ExposedServiceExplorer();
    public static List`1<Type> GetExposedServices(Type type);
    public static List`1<ServiceIdentifier> GetExposedKeyedServices(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Volo.Abp.DependencyInjection.ExposeKeyedServiceAttribute`1 : Attribute {
    [CompilerGeneratedAttribute]
private ServiceIdentifier <ServiceIdentifier>k__BackingField;
    public ServiceIdentifier ServiceIdentifier { get; }
    public ExposeKeyedServiceAttribute`1(object serviceKey);
    [CompilerGeneratedAttribute]
public ServiceIdentifier get_ServiceIdentifier();
    public sealed virtual ServiceIdentifier[] GetExposedServiceTypes(Type targetType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Volo.Abp.DependencyInjection.ExposeServicesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <ServiceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeSelf>k__BackingField;
    public Type[] ServiceTypes { get; }
    public bool IncludeDefaults { get; public set; }
    public bool IncludeSelf { get; public set; }
    public ExposeServicesAttribute(Type[] serviceTypes);
    [CompilerGeneratedAttribute]
public Type[] get_ServiceTypes();
    [CompilerGeneratedAttribute]
public bool get_IncludeDefaults();
    [CompilerGeneratedAttribute]
public void set_IncludeDefaults(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeSelf();
    [CompilerGeneratedAttribute]
public void set_IncludeSelf(bool value);
    public sealed virtual Type[] GetExposedServiceTypes(Type targetType);
    private static List`1<Type> GetDefaultServices(Type type);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IAbpLazyServiceProvider {
    public abstract virtual T LazyGetRequiredService();
    public abstract virtual object LazyGetRequiredService(Type serviceType);
    [NullableContextAttribute("2")]
public abstract virtual T LazyGetService();
    public abstract virtual object LazyGetService(Type serviceType);
    public abstract virtual T LazyGetService(T defaultValue);
    public abstract virtual object LazyGetService(Type serviceType, object defaultValue);
    public abstract virtual object LazyGetService(Type serviceType, Func`2<IServiceProvider, object> factory);
    public abstract virtual T LazyGetService(Func`2<IServiceProvider, object> factory);
}
public interface Volo.Abp.DependencyInjection.ICachedServiceProvider {
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.ICachedServiceProviderBase {
    public abstract virtual T GetService(T defaultValue);
    public abstract virtual object GetService(Type serviceType, object defaultValue);
    public abstract virtual T GetService(Func`2<IServiceProvider, object> factory);
    public abstract virtual object GetService(Type serviceType, Func`2<IServiceProvider, object> factory);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IClientScopeServiceProviderAccessor {
    public IServiceProvider ServiceProvider { get; }
    public abstract virtual IServiceProvider get_ServiceProvider();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IConventionalRegistrar {
    public abstract virtual void AddAssembly(IServiceCollection services, Assembly assembly);
    public abstract virtual void AddTypes(IServiceCollection services, Type[] types);
    public abstract virtual void AddType(IServiceCollection services, Type type);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IExposedKeyedServiceTypesProvider {
    public abstract virtual ServiceIdentifier[] GetExposedServiceTypes(Type targetType);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IExposedServiceTypesProvider {
    public abstract virtual Type[] GetExposedServiceTypes(Type targetType);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IInjectPropertiesService {
    public abstract virtual TService InjectProperties(TService instance);
    public abstract virtual TService InjectUnsetProperties(TService instance);
}
[NullableContextAttribute("2")]
public interface Volo.Abp.DependencyInjection.IObjectAccessor`1 {
    public T Value { get; }
    public abstract virtual T get_Value();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IOnServiceActivatedContext {
    public object Instance { get; }
    public abstract virtual object get_Instance();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IOnServiceExposingContext {
    public Type ImplementationType { get; }
    public List`1<ServiceIdentifier> ExposedTypes { get; }
    public abstract virtual Type get_ImplementationType();
    public abstract virtual List`1<ServiceIdentifier> get_ExposedTypes();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IOnServiceRegistredContext {
    public ITypeList`1<IAbpInterceptor> Interceptors { get; }
    public Type ImplementationType { get; }
    public abstract virtual ITypeList`1<IAbpInterceptor> get_Interceptors();
    public abstract virtual Type get_ImplementationType();
}
public interface Volo.Abp.DependencyInjection.IRootServiceProvider {
}
public interface Volo.Abp.DependencyInjection.IScopedDependency {
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DependencyInjection.IServiceProviderAccessor {
    public IServiceProvider ServiceProvider { get; }
    public abstract virtual IServiceProvider get_ServiceProvider();
}
public interface Volo.Abp.DependencyInjection.ISingletonDependency {
}
public interface Volo.Abp.DependencyInjection.ITransientCachedServiceProvider {
}
public interface Volo.Abp.DependencyInjection.ITransientDependency {
}
[DependencyAttribute]
public class Volo.Abp.DependencyInjection.NullInjectPropertiesService : object {
    [NullableContextAttribute("1")]
public sealed virtual TService InjectProperties(TService instance);
    [NullableContextAttribute("1")]
public sealed virtual TService InjectUnsetProperties(TService instance);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.DependencyInjection.ObjectAccessor`1 : object {
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public T Value { get; public set; }
    public ObjectAccessor`1(T obj);
    [CompilerGeneratedAttribute]
public sealed virtual T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.DependencyInjection.OnServiceActivatedContext : object {
    [CompilerGeneratedAttribute]
private object <Instance>k__BackingField;
    public object Instance { get; public set; }
    public OnServiceActivatedContext(object instance);
    [CompilerGeneratedAttribute]
public sealed virtual object get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.DependencyInjection.OnServiceExposingContext : object {
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ServiceIdentifier> <ExposedTypes>k__BackingField;
    public Type ImplementationType { get; }
    public List`1<ServiceIdentifier> ExposedTypes { get; }
    public OnServiceExposingContext(Type implementationType, List`1<Type> exposedTypes);
    public OnServiceExposingContext(Type implementationType, List`1<ServiceIdentifier> exposedTypes);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ServiceIdentifier> get_ExposedTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.DependencyInjection.OnServiceRegistredContext : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<IAbpInterceptor> <Interceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    public ITypeList`1<IAbpInterceptor> Interceptors { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public OnServiceRegistredContext(Type serviceType, Type implementationType);
    [CompilerGeneratedAttribute]
public virtual ITypeList`1<IAbpInterceptor> get_Interceptors();
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public virtual Type get_ImplementationType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExposeServicesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.DependencyInjection.RootServiceProvider : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    protected IServiceProvider ServiceProvider { get; }
    public RootServiceProvider(IObjectAccessor`1<IServiceProvider> objectAccessor);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    public virtual object GetService(Type serviceType);
    [NullableContextAttribute("2")]
public sealed virtual object GetKeyedService(Type serviceType, object serviceKey);
    public virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.DependencyInjection.ServiceActivatedActionList : List`1<KeyValuePair`2<ServiceDescriptor, Action`1<IOnServiceActivatedContext>>> {
    public List`1<Action`1<IOnServiceActivatedContext>> GetActions(ServiceDescriptor descriptor);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.DependencyInjection.ServiceExposingActionList : List`1<Action`1<IOnServiceExposingContext>> {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Volo.Abp.DependencyInjection.ServiceIdentifier : ValueType {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <ServiceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [NullableAttribute("2")]
public object ServiceKey { get; }
    public Type ServiceType { get; }
    public ServiceIdentifier(Type serviceType);
    public ServiceIdentifier(object serviceKey, Type serviceType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_ServiceKey();
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    public sealed virtual bool Equals(ServiceIdentifier other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.DependencyInjection.ServiceRegistrationActionList : List`1<Action`1<IOnServiceRegistredContext>> {
    [CompilerGeneratedAttribute]
private bool <IsClassInterceptorsDisabled>k__BackingField;
    public bool IsClassInterceptorsDisabled { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsClassInterceptorsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsClassInterceptorsDisabled(bool value);
}
[ExposeServicesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.DependencyInjection.TransientCachedServiceProvider : CachedServiceProviderBase {
    [NullableContextAttribute("1")]
public TransientCachedServiceProvider(IServiceProvider serviceProvider);
}
[AttributeUsageAttribute("4")]
public class Volo.Abp.DisableAbpFeaturesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <DisableInterceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableMiddleware>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableMvcFilters>k__BackingField;
    public bool DisableInterceptors { get; public set; }
    public bool DisableMiddleware { get; public set; }
    public bool DisableMvcFilters { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableInterceptors();
    [CompilerGeneratedAttribute]
public void set_DisableInterceptors(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableMiddleware();
    [CompilerGeneratedAttribute]
public void set_DisableMiddleware(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableMvcFilters();
    [CompilerGeneratedAttribute]
public void set_DisableMvcFilters(bool value);
}
public class Volo.Abp.DisposeAction : object {
    [NullableAttribute("1")]
private Action _action;
    [NullableContextAttribute("1")]
public DisposeAction(Action action);
    public sealed virtual void Dispose();
}
public class Volo.Abp.DisposeAction`1 : object {
    [NullableAttribute("1")]
private Action`1<T> _action;
    [NullableAttribute("2")]
private T _parameter;
    [NullableContextAttribute("1")]
public DisposeAction`1(Action`1<T> action, T parameter);
    public sealed virtual void Dispose();
}
public abstract class Volo.Abp.DynamicProxy.AbpInterceptor : object {
    [NullableContextAttribute("1")]
public abstract virtual Task InterceptAsync(IAbpMethodInvocation invocation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.DynamicProxy.DynamicProxyIgnoreTypes : object {
    [CompilerGeneratedAttribute]
private static HashSet`1<Type> <IgnoredTypes>k__BackingField;
    private static HashSet`1<Type> IgnoredTypes { get; }
    private static DynamicProxyIgnoreTypes();
    [CompilerGeneratedAttribute]
private static HashSet`1<Type> get_IgnoredTypes();
    [NullableContextAttribute("2")]
public static void Add();
    public static void Add(Type type);
    public static void Add(Type[] types);
    public static bool Contains(Type type, bool includeDerivedTypes);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DynamicProxy.IAbpInterceptor {
    public abstract virtual Task InterceptAsync(IAbpMethodInvocation invocation);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.DynamicProxy.IAbpMethodInvocation {
    public Object[] Arguments { get; }
    public IReadOnlyDictionary`2<string, object> ArgumentsDictionary { get; }
    public Type[] GenericArguments { get; }
    public object TargetObject { get; }
    public MethodInfo Method { get; }
    public object ReturnValue { get; public set; }
    public abstract virtual Object[] get_Arguments();
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ArgumentsDictionary();
    public abstract virtual Type[] get_GenericArguments();
    public abstract virtual object get_TargetObject();
    public abstract virtual MethodInfo get_Method();
    public abstract virtual object get_ReturnValue();
    public abstract virtual void set_ReturnValue(object value);
    public abstract virtual Task ProceedAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.DynamicProxy.ProxyHelper : object {
    private static string ProxyNamespace;
    public static bool IsProxy(object obj);
    public static object UnProxy(object obj);
    public static Type GetUnProxiedType(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.ExceptionHandling.ExceptionNotificationContext : object {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public Exception Exception { get; }
    public LogLevel LogLevel { get; }
    public bool Handled { get; }
    public ExceptionNotificationContext(Exception exception, Nullable`1<LogLevel> logLevel, bool handled);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public bool get_Handled();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.ExceptionHandling.ExceptionNotifier : object {
    [CompilerGeneratedAttribute]
private ILogger`1<ExceptionNotifier> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScopeFactory <ServiceScopeFactory>k__BackingField;
    public ILogger`1<ExceptionNotifier> Logger { get; public set; }
    protected IServiceScopeFactory ServiceScopeFactory { get; }
    public ExceptionNotifier(IServiceScopeFactory serviceScopeFactory);
    [CompilerGeneratedAttribute]
public ILogger`1<ExceptionNotifier> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<ExceptionNotifier> value);
    [CompilerGeneratedAttribute]
protected IServiceScopeFactory get_ServiceScopeFactory();
    [AsyncStateMachineAttribute("Volo.Abp.ExceptionHandling.ExceptionNotifier/<NotifyAsync>d__8")]
public virtual Task NotifyAsync(ExceptionNotificationContext context);
}
[ExtensionAttribute]
public static class Volo.Abp.ExceptionHandling.ExceptionNotifierExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Task NotifyAsync(IExceptionNotifier exceptionNotifier, Exception exception, Nullable`1<LogLevel> logLevel, bool handled);
}
[ExposeServicesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Volo.Abp.ExceptionHandling.ExceptionSubscriber : object {
    [NullableContextAttribute("1")]
public abstract virtual Task HandleAsync(ExceptionNotificationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.ExceptionHandling.IExceptionNotifier {
    public abstract virtual Task NotifyAsync(ExceptionNotificationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.ExceptionHandling.IExceptionSubscriber {
    public abstract virtual Task HandleAsync(ExceptionNotificationContext context);
}
[NullableContextAttribute("2")]
public interface Volo.Abp.ExceptionHandling.IHasErrorCode {
    public string Code { get; }
    public abstract virtual string get_Code();
}
[NullableContextAttribute("2")]
public interface Volo.Abp.ExceptionHandling.IHasErrorDetails {
    public string Details { get; }
    public abstract virtual string get_Details();
}
public interface Volo.Abp.ExceptionHandling.IHasHttpStatusCode {
    public int HttpStatusCode { get; }
    public abstract virtual int get_HttpStatusCode();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.ExceptionHandling.ILocalizeErrorMessage {
    public abstract virtual string LocalizeMessage(LocalizationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.ExceptionHandling.NullExceptionNotifier : object {
    [CompilerGeneratedAttribute]
private static NullExceptionNotifier <Instance>k__BackingField;
    public static NullExceptionNotifier Instance { get; }
    private static NullExceptionNotifier();
    [CompilerGeneratedAttribute]
public static NullExceptionNotifier get_Instance();
    public sealed virtual Task NotifyAsync(ExceptionNotificationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Http.MimeTypes : object {
    public static string GetByExtension(string extension);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.IAbpApplication {
    public Type StartupModuleType { get; }
    public IServiceCollection Services { get; }
    public IServiceProvider ServiceProvider { get; }
    public abstract virtual Type get_StartupModuleType();
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual IServiceProvider get_ServiceProvider();
    public abstract virtual Task ConfigureServicesAsync();
    public abstract virtual Task ShutdownAsync();
    public abstract virtual void Shutdown();
}
public interface Volo.Abp.IAbpApplicationWithExternalServiceProvider {
    [NullableContextAttribute("1")]
public abstract virtual void SetServiceProvider(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
public abstract virtual Task InitializeAsync(IServiceProvider serviceProvider);
    [NullableContextAttribute("1")]
public abstract virtual void Initialize(IServiceProvider serviceProvider);
}
public interface Volo.Abp.IAbpApplicationWithInternalServiceProvider {
    [NullableContextAttribute("1")]
public abstract virtual IServiceProvider CreateServiceProvider();
    [NullableContextAttribute("1")]
public abstract virtual Task InitializeAsync();
    public abstract virtual void Initialize();
}
[NullableContextAttribute("2")]
public interface Volo.Abp.IAbpHostEnvironment {
    public string EnvironmentName { get; public set; }
    public abstract virtual string get_EnvironmentName();
    public abstract virtual void set_EnvironmentName(string value);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.IApplicationInfoAccessor {
    [NullableAttribute("2")]
public string ApplicationName { get; }
    public string InstanceId { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_ApplicationName();
    public abstract virtual string get_InstanceId();
}
public interface Volo.Abp.IBusinessException {
}
[AttributeUsageAttribute("1028")]
public class Volo.Abp.IntegrationServiceAttribute : Attribute {
    [NullableContextAttribute("2")]
public static bool IsDefinedOrInherited();
    [NullableContextAttribute("1")]
public static bool IsDefinedOrInherited(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Volo.Abp.Internal.InternalServiceCollectionExtensions : object {
    [ExtensionAttribute]
internal static void AddCoreServices(IServiceCollection services);
    [ExtensionAttribute]
internal static void AddCoreAbpServices(IServiceCollection services, IAbpApplication abpApplication, AbpApplicationCreationOptions applicationCreationOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Internal.Utf8Helper : object {
    public static string ReadStringFromStream(Stream stream);
    private static bool HasBom(Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.IO.DirectoryHelper : object {
    public static void CreateIfNotExists(string directory);
    public static void DeleteIfExists(string directory);
    public static void DeleteIfExists(string directory, bool recursive);
    public static void CreateIfNotExists(DirectoryInfo directory);
    public static bool IsSubDirectoryOf(string parentDirectoryPath, string childDirectoryPath);
    public static bool IsSubDirectoryOf(DirectoryInfo parentDirectory, DirectoryInfo childDirectory);
    public static IDisposable ChangeCurrentDirectory(string targetDirectory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.IO.FileHelper : object {
    public static bool DeleteIfExists(string filePath);
    public static string GetExtension(string fileNameWithExtension);
    [AsyncStateMachineAttribute("Volo.Abp.IO.FileHelper/<ReadAllTextAsync>d__2")]
public static Task`1<string> ReadAllTextAsync(string path);
    [AsyncStateMachineAttribute("Volo.Abp.IO.FileHelper/<ReadAllBytesAsync>d__3")]
public static Task`1<Byte[]> ReadAllBytesAsync(string path);
    [AsyncStateMachineAttribute("Volo.Abp.IO.FileHelper/<ReadAllLinesAsync>d__4")]
public static Task`1<String[]> ReadAllLinesAsync(string path, Encoding encoding, FileMode fileMode, FileAccess fileAccess, FileShare fileShare, int bufferSize, FileOptions fileOptions);
    [AsyncStateMachineAttribute("Volo.Abp.IO.FileHelper/<ReadFileWithoutBomAsync>d__5")]
public static Task`1<string> ReadFileWithoutBomAsync(string path);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.IOnApplicationInitialization {
    public abstract virtual Task OnApplicationInitializationAsync(ApplicationInitializationContext context);
    public abstract virtual void OnApplicationInitialization(ApplicationInitializationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.IOnApplicationShutdown {
    public abstract virtual Task OnApplicationShutdownAsync(ApplicationShutdownContext context);
    public abstract virtual void OnApplicationShutdown(ApplicationShutdownContext context);
}
public interface Volo.Abp.IRemoteService {
}
public interface Volo.Abp.ISoftDelete {
    public bool IsDeleted { get; }
    public abstract virtual bool get_IsDeleted();
}
public interface Volo.Abp.IUserFriendlyException {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Localization.CultureHelper : object {
    public static bool IsRtl { get; }
    public static IDisposable Use(string culture, string uiCulture);
    public static IDisposable Use(CultureInfo culture, CultureInfo uiCulture);
    public static bool get_IsRtl();
    public static bool IsValidCultureCode(string cultureCode);
    public static string GetBaseCultureName(string cultureName);
    public static bool IsCompatibleCulture(string sourceCultureName, string targetCultureName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Localization.LocalizationContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringLocalizerFactory <LocalizerFactory>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IStringLocalizerFactory LocalizerFactory { get; }
    public LocalizationContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public IStringLocalizerFactory get_LocalizerFactory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Logging.AbpInitLogEntry : object {
    [CompilerGeneratedAttribute]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private EventId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`3<object, Exception, string> <Formatter>k__BackingField;
    public LogLevel LogLevel { get; public set; }
    public EventId EventId { get; public set; }
    public object State { get; public set; }
    [NullableAttribute("2")]
public Exception Exception { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<object, Exception, string> Formatter { get; public set; }
    public string Message { get; }
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public EventId get_EventId();
    [CompilerGeneratedAttribute]
public void set_EventId(EventId value);
    [CompilerGeneratedAttribute]
public object get_State();
    [CompilerGeneratedAttribute]
public void set_State(object value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Exception get_Exception();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public Func`3<object, Exception, string> get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(Func`3<object, Exception, string> value);
    public string get_Message();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Logging.DefaultInitLogger`1 : object {
    [CompilerGeneratedAttribute]
private List`1<AbpInitLogEntry> <Entries>k__BackingField;
    public List`1<AbpInitLogEntry> Entries { get; }
    [CompilerGeneratedAttribute]
public sealed virtual List`1<AbpInitLogEntry> get_Entries();
    [NullableContextAttribute("2")]
public virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public virtual bool IsEnabled(LogLevel logLevel);
    public virtual IDisposable BeginScope(TState state);
}
public class Volo.Abp.Logging.DefaultInitLoggerFactory : object {
    [NullableAttribute("1")]
private Dictionary`2<Type, object> _cache;
    [NullableContextAttribute("1")]
public virtual IInitLogger`1<T> Create();
}
[ExtensionAttribute]
public static class Volo.Abp.Logging.HasLogLevelExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static TException WithLogLevel(TException exception, LogLevel logLevel);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Logging.IExceptionWithSelfLogging {
    public abstract virtual void Log(ILogger logger);
}
public interface Volo.Abp.Logging.IHasLogLevel {
    public LogLevel LogLevel { get; public set; }
    public abstract virtual LogLevel get_LogLevel();
    public abstract virtual void set_LogLevel(LogLevel value);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Logging.IInitLogger`1 {
    public List`1<AbpInitLogEntry> Entries { get; }
    public abstract virtual List`1<AbpInitLogEntry> get_Entries();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Logging.IInitLoggerFactory {
    public abstract virtual IInitLogger`1<T> Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.Modularity.AbpModule : object {
    [CompilerGeneratedAttribute]
private bool <SkipAutoServiceRegistration>k__BackingField;
    [NullableAttribute("2")]
private ServiceConfigurationContext _serviceConfigurationContext;
    protected internal bool SkipAutoServiceRegistration { get; protected set; }
    protected internal ServiceConfigurationContext ServiceConfigurationContext { get; internal set; }
    [CompilerGeneratedAttribute]
protected internal bool get_SkipAutoServiceRegistration();
    [CompilerGeneratedAttribute]
protected void set_SkipAutoServiceRegistration(bool value);
    protected internal ServiceConfigurationContext get_ServiceConfigurationContext();
    internal void set_ServiceConfigurationContext(ServiceConfigurationContext value);
    public virtual Task PreConfigureServicesAsync(ServiceConfigurationContext context);
    public virtual void PreConfigureServices(ServiceConfigurationContext context);
    public virtual Task ConfigureServicesAsync(ServiceConfigurationContext context);
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    public virtual Task PostConfigureServicesAsync(ServiceConfigurationContext context);
    public virtual void PostConfigureServices(ServiceConfigurationContext context);
    public virtual Task OnPreApplicationInitializationAsync(ApplicationInitializationContext context);
    public virtual void OnPreApplicationInitialization(ApplicationInitializationContext context);
    public virtual Task OnApplicationInitializationAsync(ApplicationInitializationContext context);
    public virtual void OnApplicationInitialization(ApplicationInitializationContext context);
    public virtual Task OnPostApplicationInitializationAsync(ApplicationInitializationContext context);
    public virtual void OnPostApplicationInitialization(ApplicationInitializationContext context);
    public virtual Task OnApplicationShutdownAsync(ApplicationShutdownContext context);
    public virtual void OnApplicationShutdown(ApplicationShutdownContext context);
    public static bool IsAbpModule(Type type);
    internal static void CheckAbpModuleType(Type moduleType);
    protected void Configure(Action`1<TOptions> configureOptions);
    protected void Configure(string name, Action`1<TOptions> configureOptions);
    protected void Configure(IConfiguration configuration);
    protected void Configure(IConfiguration configuration, Action`1<BinderOptions> configureBinder);
    protected void Configure(string name, IConfiguration configuration);
    protected void PreConfigure(Action`1<TOptions> configureOptions);
    protected void PostConfigure(Action`1<TOptions> configureOptions);
    protected void PostConfigureAll(Action`1<TOptions> configureOptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.AbpModuleDescriptor : object {
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Assembly[] <AllAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpModule <Instance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLoadedAsPlugIn>k__BackingField;
    private List`1<IAbpModuleDescriptor> _dependencies;
    public Type Type { get; }
    public Assembly Assembly { get; }
    public Assembly[] AllAssemblies { get; }
    public IAbpModule Instance { get; }
    public bool IsLoadedAsPlugIn { get; }
    public IReadOnlyList`1<IAbpModuleDescriptor> Dependencies { get; }
    public AbpModuleDescriptor(Type type, IAbpModule instance, bool isLoadedAsPlugIn);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual Assembly get_Assembly();
    [CompilerGeneratedAttribute]
public sealed virtual Assembly[] get_AllAssemblies();
    [CompilerGeneratedAttribute]
public sealed virtual IAbpModule get_Instance();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsLoadedAsPlugIn();
    public sealed virtual IReadOnlyList`1<IAbpModuleDescriptor> get_Dependencies();
    public void AddDependency(IAbpModuleDescriptor descriptor);
    public virtual string ToString();
}
[ExtensionAttribute]
public static class Volo.Abp.Modularity.AbpModuleDescriptorExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Assembly[] GetAdditionalAssemblies(IAbpModuleDescriptor module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Modularity.AbpModuleHelper : object {
    public static List`1<Type> FindAllModuleTypes(Type startupModuleType, ILogger logger);
    public static List`1<Type> FindDependedModuleTypes(Type moduleType);
    public static Assembly[] GetAllAssemblies(Type moduleType);
    private static void AddModuleAndDependenciesRecursively(List`1<Type> moduleTypes, Type moduleType, ILogger logger, int depth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.AbpModuleLifecycleOptions : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<IModuleLifecycleContributor> <Contributors>k__BackingField;
    public ITypeList`1<IModuleLifecycleContributor> Contributors { get; }
    [CompilerGeneratedAttribute]
public ITypeList`1<IModuleLifecycleContributor> get_Contributors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Volo.Abp.Modularity.AdditionalAssemblyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <TypesInAssemblies>k__BackingField;
    public Type[] TypesInAssemblies { get; }
    public AdditionalAssemblyAttribute(Type[] typesInAssemblies);
    [CompilerGeneratedAttribute]
public Type[] get_TypesInAssemblies();
    public virtual Assembly[] GetAssemblies();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Volo.Abp.Modularity.DependsOnAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type[] <DependedTypes>k__BackingField;
    public Type[] DependedTypes { get; }
    public DependsOnAttribute(Type[] dependedTypes);
    [CompilerGeneratedAttribute]
public Type[] get_DependedTypes();
    public virtual Type[] GetDependedTypes();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IAbpModule {
    public abstract virtual Task ConfigureServicesAsync(ServiceConfigurationContext context);
    public abstract virtual void ConfigureServices(ServiceConfigurationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IAbpModuleDescriptor {
    public Type Type { get; }
    public Assembly Assembly { get; }
    public Assembly[] AllAssemblies { get; }
    public IAbpModule Instance { get; }
    public bool IsLoadedAsPlugIn { get; }
    public IReadOnlyList`1<IAbpModuleDescriptor> Dependencies { get; }
    public abstract virtual Type get_Type();
    public abstract virtual Assembly get_Assembly();
    public abstract virtual Assembly[] get_AllAssemblies();
    public abstract virtual IAbpModule get_Instance();
    public abstract virtual bool get_IsLoadedAsPlugIn();
    public abstract virtual IReadOnlyList`1<IAbpModuleDescriptor> get_Dependencies();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IAdditionalModuleAssemblyProvider {
    public abstract virtual Assembly[] GetAssemblies();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IDependedTypesProvider {
    public abstract virtual Type[] GetDependedTypes();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IModuleContainer {
    public IReadOnlyList`1<IAbpModuleDescriptor> Modules { get; }
    public abstract virtual IReadOnlyList`1<IAbpModuleDescriptor> get_Modules();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IModuleLifecycleContributor {
    public abstract virtual Task InitializeAsync(ApplicationInitializationContext context, IAbpModule module);
    public abstract virtual void Initialize(ApplicationInitializationContext context, IAbpModule module);
    public abstract virtual Task ShutdownAsync(ApplicationShutdownContext context, IAbpModule module);
    public abstract virtual void Shutdown(ApplicationShutdownContext context, IAbpModule module);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IModuleLoader {
    public abstract virtual IAbpModuleDescriptor[] LoadModules(IServiceCollection services, Type startupModuleType, PlugInSourceList plugInSources);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IModuleManager {
    public abstract virtual Task InitializeModulesAsync(ApplicationInitializationContext context);
    public abstract virtual void InitializeModules(ApplicationInitializationContext context);
    public abstract virtual Task ShutdownModulesAsync(ApplicationShutdownContext context);
    public abstract virtual void ShutdownModules(ApplicationShutdownContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IOnPostApplicationInitialization {
    public abstract virtual Task OnPostApplicationInitializationAsync(ApplicationInitializationContext context);
    public abstract virtual void OnPostApplicationInitialization(ApplicationInitializationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IOnPreApplicationInitialization {
    public abstract virtual Task OnPreApplicationInitializationAsync(ApplicationInitializationContext context);
    public abstract virtual void OnPreApplicationInitialization(ApplicationInitializationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IPostConfigureServices {
    public abstract virtual Task PostConfigureServicesAsync(ServiceConfigurationContext context);
    public abstract virtual void PostConfigureServices(ServiceConfigurationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.IPreConfigureServices {
    public abstract virtual Task PreConfigureServicesAsync(ServiceConfigurationContext context);
    public abstract virtual void PreConfigureServices(ServiceConfigurationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.Modularity.ModuleLifecycleContributorBase : object {
    public virtual Task InitializeAsync(ApplicationInitializationContext context, IAbpModule module);
    public virtual void Initialize(ApplicationInitializationContext context, IAbpModule module);
    public virtual Task ShutdownAsync(ApplicationShutdownContext context, IAbpModule module);
    public virtual void Shutdown(ApplicationShutdownContext context, IAbpModule module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.ModuleLoader : object {
    public sealed virtual IAbpModuleDescriptor[] LoadModules(IServiceCollection services, Type startupModuleType, PlugInSourceList plugInSources);
    private List`1<IAbpModuleDescriptor> GetDescriptors(IServiceCollection services, Type startupModuleType, PlugInSourceList plugInSources);
    protected virtual void FillModules(List`1<AbpModuleDescriptor> modules, IServiceCollection services, Type startupModuleType, PlugInSourceList plugInSources);
    protected virtual void SetDependencies(List`1<AbpModuleDescriptor> modules);
    protected virtual List`1<IAbpModuleDescriptor> SortByDependency(List`1<IAbpModuleDescriptor> modules, Type startupModuleType);
    protected virtual AbpModuleDescriptor CreateModuleDescriptor(IServiceCollection services, Type moduleType, bool isLoadedAsPlugIn);
    protected virtual IAbpModule CreateAndRegisterModule(IServiceCollection services, Type moduleType);
    protected virtual void SetDependencies(List`1<AbpModuleDescriptor> modules, AbpModuleDescriptor module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.ModuleManager : object {
    private IModuleContainer _moduleContainer;
    private IEnumerable`1<IModuleLifecycleContributor> _lifecycleContributors;
    private ILogger`1<ModuleManager> _logger;
    public ModuleManager(IModuleContainer moduleContainer, ILogger`1<ModuleManager> logger, IOptions`1<AbpModuleLifecycleOptions> options, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Volo.Abp.Modularity.ModuleManager/<InitializeModulesAsync>d__4")]
public virtual Task InitializeModulesAsync(ApplicationInitializationContext context);
    public sealed virtual void InitializeModules(ApplicationInitializationContext context);
    [AsyncStateMachineAttribute("Volo.Abp.Modularity.ModuleManager/<ShutdownModulesAsync>d__6")]
public virtual Task ShutdownModulesAsync(ApplicationShutdownContext context);
    public sealed virtual void ShutdownModules(ApplicationShutdownContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.OnApplicationInitializationModuleLifecycleContributor : ModuleLifecycleContributorBase {
    [AsyncStateMachineAttribute("Volo.Abp.Modularity.OnApplicationInitializationModuleLifecycleContributor/<InitializeAsync>d__0")]
public virtual Task InitializeAsync(ApplicationInitializationContext context, IAbpModule module);
    public virtual void Initialize(ApplicationInitializationContext context, IAbpModule module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.OnApplicationShutdownModuleLifecycleContributor : ModuleLifecycleContributorBase {
    [AsyncStateMachineAttribute("Volo.Abp.Modularity.OnApplicationShutdownModuleLifecycleContributor/<ShutdownAsync>d__0")]
public virtual Task ShutdownAsync(ApplicationShutdownContext context, IAbpModule module);
    public virtual void Shutdown(ApplicationShutdownContext context, IAbpModule module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.OnPostApplicationInitializationModuleLifecycleContributor : ModuleLifecycleContributorBase {
    [AsyncStateMachineAttribute("Volo.Abp.Modularity.OnPostApplicationInitializationModuleLifecycleContributor/<InitializeAsync>d__0")]
public virtual Task InitializeAsync(ApplicationInitializationContext context, IAbpModule module);
    public virtual void Initialize(ApplicationInitializationContext context, IAbpModule module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor : ModuleLifecycleContributorBase {
    [AsyncStateMachineAttribute("Volo.Abp.Modularity.OnPreApplicationInitializationModuleLifecycleContributor/<InitializeAsync>d__0")]
public virtual Task InitializeAsync(ApplicationInitializationContext context, IAbpModule module);
    public virtual void Initialize(ApplicationInitializationContext context, IAbpModule module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.PlugIns.FilePlugInSource : object {
    [CompilerGeneratedAttribute]
private String[] <FilePaths>k__BackingField;
    public String[] FilePaths { get; }
    public FilePlugInSource(String[] filePaths);
    [CompilerGeneratedAttribute]
public String[] get_FilePaths();
    public sealed virtual Type[] GetModules();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Modularity.PlugIns.FolderPlugInSource : object {
    [CompilerGeneratedAttribute]
private string <Folder>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchOption <SearchOption>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<string, bool> <Filter>k__BackingField;
    public string Folder { get; }
    public SearchOption SearchOption { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<string, bool> Filter { get; public set; }
    public FolderPlugInSource(string folder, SearchOption searchOption);
    [CompilerGeneratedAttribute]
public string get_Folder();
    [CompilerGeneratedAttribute]
public SearchOption get_SearchOption();
    [CompilerGeneratedAttribute]
public void set_SearchOption(SearchOption value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<string, bool> value);
    public sealed virtual Type[] GetModules();
    private List`1<Assembly> GetAssemblies();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Modularity.PlugIns.IPlugInSource {
    public abstract virtual Type[] GetModules();
}
[ExtensionAttribute]
public static class Volo.Abp.Modularity.PlugIns.PlugInSourceExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Type[] GetModulesWithAllDependencies(IPlugInSource plugInSource, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Modularity.PlugIns.PlugInSourceList : List`1<IPlugInSource> {
    internal Type[] GetAllModules(ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Modularity.PlugIns.PlugInSourceListExtensions : object {
    [ExtensionAttribute]
public static void AddFolder(PlugInSourceList list, string folder, SearchOption searchOption);
    [ExtensionAttribute]
public static void AddTypes(PlugInSourceList list, Type[] moduleTypes);
    [ExtensionAttribute]
public static void AddFiles(PlugInSourceList list, String[] filePaths);
}
public class Volo.Abp.Modularity.PlugIns.TypePlugInSource : object {
    [NullableAttribute("1")]
private Type[] _moduleTypes;
    public TypePlugInSource(Type[] moduleTypes);
    [NullableContextAttribute("1")]
public sealed virtual Type[] GetModules();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Volo.Abp.Modularity.ServiceConfigurationContext : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Items>k__BackingField;
    public IServiceCollection Services { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Items { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    public ServiceConfigurationContext(IServiceCollection services);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Items();
    public object get_Item(string key);
    public void set_Item(string key, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.NamedTypeSelector : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<Type, bool> <Predicate>k__BackingField;
    public string Name { get; public set; }
    public Func`2<Type, bool> Predicate { get; public set; }
    public NamedTypeSelector(string name, Func`2<Type, bool> predicate);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_Predicate();
    [CompilerGeneratedAttribute]
public void set_Predicate(Func`2<Type, bool> value);
}
[ExtensionAttribute]
public static class Volo.Abp.NamedTypeSelectorListExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Add(IList`1<NamedTypeSelector> list, string name, Type[] types);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.NameValue : NameValue`1<string> {
    public NameValue(string name, string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.NameValue`1 : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Value>k__BackingField;
    public string Name { get; public set; }
    public T Value { get; public set; }
    public NameValue`1(string name, T value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.NullAsyncDisposable : object {
    [CompilerGeneratedAttribute]
private static NullAsyncDisposable <Instance>k__BackingField;
    public static NullAsyncDisposable Instance { get; }
    private static NullAsyncDisposable();
    [CompilerGeneratedAttribute]
public static NullAsyncDisposable get_Instance();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.NullDisposable : object {
    [CompilerGeneratedAttribute]
private static NullDisposable <Instance>k__BackingField;
    public static NullDisposable Instance { get; }
    private static NullDisposable();
    [CompilerGeneratedAttribute]
public static NullDisposable get_Instance();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.ObjectHelper : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, PropertyInfo> _cachedObjectProperties;
    private static ObjectHelper();
    public static void TrySetProperty(TObject obj, Expression`1<Func`2<TObject, TValue>> propertySelector, Func`1<TValue> valueFactory, Type[] ignoreAttributeTypes);
    public static void TrySetProperty(TObject obj, Expression`1<Func`2<TObject, TValue>> propertySelector, Func`2<TObject, TValue> valueFactory, Type[] ignoreAttributeTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Volo.Abp.Options.AbpDynamicOptionsManager`1 : OptionsManager`1<T> {
    protected AbpDynamicOptionsManager`1(IOptionsFactory`1<T> factory);
    public Task SetAsync();
    public virtual Task SetAsync(string name);
    protected abstract virtual Task OverrideOptionsAsync(string name, T options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Options.AbpOptionsFactory`1 : object {
    private IConfigureOptions`1[] _setups;
    private IPostConfigureOptions`1[] _postConfigures;
    private IValidateOptions`1[] _validations;
    public AbpOptionsFactory`1(IEnumerable`1<IConfigureOptions`1<TOptions>> setups, IEnumerable`1<IPostConfigureOptions`1<TOptions>> postConfigures);
    public AbpOptionsFactory`1(IEnumerable`1<IConfigureOptions`1<TOptions>> setups, IEnumerable`1<IPostConfigureOptions`1<TOptions>> postConfigures, IEnumerable`1<IValidateOptions`1<TOptions>> validations);
    public virtual TOptions Create(string name);
    protected virtual void ConfigureOptions(string name, TOptions options);
    protected virtual void PostConfigureOptions(string name, TOptions options);
    protected virtual void ValidateOptions(string name, TOptions options);
    protected virtual TOptions CreateInstance(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Options.PreConfigureActionList`1 : List`1<Action`1<TOptions>> {
    public void Configure(TOptions options);
    public TOptions Configure();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.RandomHelper : object {
    private static Random Rnd;
    private static RandomHelper();
    public static int GetRandom(int minValue, int maxValue);
    public static int GetRandom(int maxValue);
    public static int GetRandom();
    public static T GetRandomOf(T[] objs);
    public static T GetRandomOfList(IList`1<T> list);
    public static List`1<T> GenerateRandomizedList(IEnumerable`1<T> items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Reflection.AssemblyFinder : object {
    private IModuleContainer _moduleContainer;
    private Lazy`1<IReadOnlyList`1<Assembly>> _assemblies;
    public IReadOnlyList`1<Assembly> Assemblies { get; }
    public AssemblyFinder(IModuleContainer moduleContainer);
    public sealed virtual IReadOnlyList`1<Assembly> get_Assemblies();
    public IReadOnlyList`1<Assembly> FindAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Volo.Abp.Reflection.AssemblyHelper : object {
    public static List`1<Assembly> LoadAssemblies(string folderPath, SearchOption searchOption);
    public static IEnumerable`1<string> GetAssemblyFiles(string folderPath, SearchOption searchOption);
    public static IReadOnlyList`1<Type> GetAllTypes(Assembly assembly);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Reflection.IAssemblyFinder {
    public IReadOnlyList`1<Assembly> Assemblies { get; }
    public abstract virtual IReadOnlyList`1<Assembly> get_Assemblies();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Reflection.ITypeFinder {
    public IReadOnlyList`1<Type> Types { get; }
    public abstract virtual IReadOnlyList`1<Type> get_Types();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Reflection.ReflectionHelper : object {
    public static bool IsAssignableToGenericType(Type givenType, Type genericType);
    public static List`1<Type> GetImplementedGenericTypes(Type givenType, Type genericType);
    private static void AddImplementedGenericTypes(List`1<Type> result, Type givenType, Type genericType);
    public static TAttribute GetSingleAttributeOrDefault(MemberInfo memberInfo, TAttribute defaultValue, bool inherit);
    public static TAttribute GetSingleAttributeOfMemberOrDeclaringTypeOrDefault(MemberInfo memberInfo, TAttribute defaultValue, bool inherit);
    public static IEnumerable`1<TAttribute> GetAttributesOfMemberOrDeclaringType(MemberInfo memberInfo, bool inherit);
    public static object GetValueByPath(object obj, Type objectType, string propertyPath);
    internal static void SetValueByPath(object obj, Type objectType, string propertyPath, object value);
    public static String[] GetPublicConstantsRecursively(Type type);
    [CompilerGeneratedAttribute]
internal static void <GetPublicConstantsRecursively>g__Recursively|8_0(List`1<string> constants, Type targetType, int currentDepth);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Reflection.TypeFinder : object {
    private IAssemblyFinder _assemblyFinder;
    private Lazy`1<IReadOnlyList`1<Type>> _types;
    public IReadOnlyList`1<Type> Types { get; }
    public TypeFinder(IAssemblyFinder assemblyFinder);
    public sealed virtual IReadOnlyList`1<Type> get_Types();
    private IReadOnlyList`1<Type> FindAll();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Reflection.TypeHelper : object {
    private static HashSet`1<Type> FloatingTypes;
    private static HashSet`1<Type> NonNullablePrimitiveTypes;
    private static TypeHelper();
    public static bool IsNonNullablePrimitiveType(Type type);
    [NullableContextAttribute("2")]
public static bool IsFunc(object obj);
    [NullableContextAttribute("2")]
public static bool IsFunc(object obj);
    public static bool IsPrimitiveExtended(Type type, bool includeNullables, bool includeEnums);
    public static bool IsNullable(Type type);
    [ExtensionAttribute]
public static Type GetFirstGenericArgumentIfNullable(Type t);
    public static bool IsEnumerable(Type type, Type& itemType, bool includePrimitives);
    [NullableContextAttribute("2")]
public static bool IsDictionary(Type type, Type& keyType, Type& valueType);
    private static bool IsPrimitiveExtendedInternal(Type type, bool includeEnums);
    [NullableContextAttribute("2")]
public static T GetDefaultValue();
    public static object GetDefaultValue(Type type);
    public static string GetFullNameHandlingNullableAndGenerics(Type type);
    public static string GetSimplifiedName(Type type);
    [NullableContextAttribute("2")]
public static object ConvertFromString(string value);
    [NullableContextAttribute("2")]
public static object ConvertFromString(Type targetType, string value);
    public static bool IsFloatingType(Type type, bool includeNullable);
    public static object ConvertFrom(object value);
    public static object ConvertFrom(Type targetType, object value);
    public static Type StripNullable(Type type);
    [NullableContextAttribute("2")]
public static bool IsDefaultValue(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1092")]
public class Volo.Abp.RemoteServiceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMetadataEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public bool IsEnabled { get; public set; }
    public bool IsMetadataEnabled { get; public set; }
    public string Name { get; public set; }
    public RemoteServiceAttribute(bool isEnabled);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMetadataEnabled();
    [CompilerGeneratedAttribute]
public void set_IsMetadataEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual bool IsEnabledFor(Type type);
    public virtual bool IsEnabledFor(MethodInfo method);
    public virtual bool IsMetadataEnabledFor(Type type);
    public virtual bool IsMetadataEnabledFor(MethodInfo method);
    public static bool IsExplicitlyEnabledFor(Type type);
    public static bool IsExplicitlyDisabledFor(Type type);
    public static bool IsMetadataExplicitlyEnabledFor(Type type);
    public static bool IsMetadataExplicitlyDisabledFor(Type type);
    public static bool IsMetadataExplicitlyDisabledFor(MethodInfo method);
    public static bool IsMetadataExplicitlyEnabledFor(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.SimpleStateChecking.AbpSimpleStateCheckerOptions`1 : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<ISimpleStateChecker`1<TState>> <GlobalStateCheckers>k__BackingField;
    public ITypeList`1<ISimpleStateChecker`1<TState>> GlobalStateCheckers { get; }
    [CompilerGeneratedAttribute]
public ITypeList`1<ISimpleStateChecker`1<TState>> get_GlobalStateCheckers();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.SimpleStateChecking.IHasSimpleStateCheckers`1 {
    public List`1<ISimpleStateChecker`1<TState>> StateCheckers { get; }
    public abstract virtual List`1<ISimpleStateChecker`1<TState>> get_StateCheckers();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.SimpleStateChecking.ISimpleBatchStateChecker`1 {
    public abstract virtual Task`1<SimpleStateCheckerResult`1<TState>> IsEnabledAsync(SimpleBatchStateCheckerContext`1<TState> context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.SimpleStateChecking.ISimpleStateChecker`1 {
    public abstract virtual Task`1<bool> IsEnabledAsync(SimpleStateCheckerContext`1<TState> context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.SimpleStateChecking.ISimpleStateCheckerManager`1 {
    public abstract virtual Task`1<bool> IsEnabledAsync(TState state);
    public abstract virtual Task`1<SimpleStateCheckerResult`1<TState>> IsEnabledAsync(TState[] states);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.SimpleStateChecking.ISimpleStateCheckerSerializer {
    public abstract virtual string Serialize(ISimpleStateChecker`1<TState> checker);
    public abstract virtual ISimpleStateChecker`1<TState> Deserialize(JsonObject jsonObject, TState state);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.SimpleStateChecking.ISimpleStateCheckerSerializerContributor {
    public abstract virtual string SerializeToJson(ISimpleStateChecker`1<TState> checker);
    public abstract virtual ISimpleStateChecker`1<TState> Deserialize(JsonObject jsonObject, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.SimpleStateChecking.SimpleBatchStateCheckerBase`1 : object {
    [AsyncStateMachineAttribute("Volo.Abp.SimpleStateChecking.SimpleBatchStateCheckerBase`1/<IsEnabledAsync>d__0")]
public sealed virtual Task`1<bool> IsEnabledAsync(SimpleStateCheckerContext`1<TState> context);
    public abstract virtual Task`1<SimpleStateCheckerResult`1<TState>> IsEnabledAsync(SimpleBatchStateCheckerContext`1<TState> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.SimpleStateChecking.SimpleBatchStateCheckerContext`1 : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TState[] <States>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public TState[] States { get; }
    public SimpleBatchStateCheckerContext`1(IServiceProvider serviceProvider, TState[] states);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public TState[] get_States();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.SimpleStateChecking.SimpleStateCheckerContext`1 : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private TState <State>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public TState State { get; }
    public SimpleStateCheckerContext`1(IServiceProvider serviceProvider, TState state);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public TState get_State();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.SimpleStateChecking.SimpleStateCheckerManager`1 : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpSimpleStateCheckerOptions`1<TState> <Options>k__BackingField;
    protected IServiceProvider ServiceProvider { get; }
    protected AbpSimpleStateCheckerOptions`1<TState> Options { get; }
    public SimpleStateCheckerManager`1(IServiceProvider serviceProvider, IOptions`1<AbpSimpleStateCheckerOptions`1<TState>> options);
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
protected AbpSimpleStateCheckerOptions`1<TState> get_Options();
    [AsyncStateMachineAttribute("Volo.Abp.SimpleStateChecking.SimpleStateCheckerManager`1/<IsEnabledAsync>d__7")]
public virtual Task`1<bool> IsEnabledAsync(TState state);
    [AsyncStateMachineAttribute("Volo.Abp.SimpleStateChecking.SimpleStateCheckerManager`1/<IsEnabledAsync>d__8")]
public virtual Task`1<SimpleStateCheckerResult`1<TState>> IsEnabledAsync(TState[] states);
    [AsyncStateMachineAttribute("Volo.Abp.SimpleStateChecking.SimpleStateCheckerManager`1/<InternalIsEnabledAsync>d__9")]
protected virtual Task`1<bool> InternalIsEnabledAsync(TState state, bool useBatchChecker);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private object <InternalIsEnabledAsync>b__9_2(Type x);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.SimpleStateChecking.SimpleStateCheckerResult`1 : Dictionary`2<TState, bool> {
    public SimpleStateCheckerResult`1(IEnumerable`1<TState> states, bool initValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.SimpleStateChecking.SimpleStateCheckerSerializer : object {
    private IEnumerable`1<ISimpleStateCheckerSerializerContributor> _contributors;
    public SimpleStateCheckerSerializer(IEnumerable`1<ISimpleStateCheckerSerializerContributor> contributors);
    public sealed virtual string Serialize(ISimpleStateChecker`1<TState> checker);
    public sealed virtual ISimpleStateChecker`1<TState> Deserialize(JsonObject jsonObject, TState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.SimpleStateChecking.SimpleStateCheckerSerializerExtensions : object {
    [ExtensionAttribute]
public static string Serialize(ISimpleStateCheckerSerializer serializer, IList`1<ISimpleStateChecker`1<TState>> stateCheckers);
    [ExtensionAttribute]
public static ISimpleStateChecker`1[] DeserializeArray(ISimpleStateCheckerSerializer serializer, string value, TState state);
}
public static class Volo.Abp.Studio.AbpStudioAnalyzeHelper : object {
    [CompilerGeneratedAttribute]
private static bool <IsInAnalyzeMode>k__BackingField;
    public static bool IsInAnalyzeMode { get; public set; }
    [CompilerGeneratedAttribute]
public static bool get_IsInAnalyzeMode();
    [CompilerGeneratedAttribute]
public static void set_IsInAnalyzeMode(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Volo.Abp.Text.Formatting.FormatStringToken : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private FormatStringTokenType <Type>k__BackingField;
    public string Text { get; private set; }
    public FormatStringTokenType Type { get; private set; }
    public FormatStringToken(string text, FormatStringTokenType type);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
private void set_Text(string value);
    [CompilerGeneratedAttribute]
public FormatStringTokenType get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(FormatStringTokenType value);
}
internal class Volo.Abp.Text.Formatting.FormatStringTokenizer : object {
    [NullableContextAttribute("1")]
public List`1<FormatStringToken> Tokenize(string format, bool includeBracketsForDynamicValues);
}
internal enum Volo.Abp.Text.Formatting.FormatStringTokenType : Enum {
    public int value__;
    public static FormatStringTokenType ConstantText;
    public static FormatStringTokenType DynamicValue;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Text.Formatting.FormattedStringValueExtracter : object {
    public static ExtractionResult Extract(string str, string format, bool ignoreCase);
    public static bool IsMatch(string str, string format, String[]& values, bool ignoreCase);
}
public class Volo.Abp.Text.StringHelper : object {
    [NullableContextAttribute("2")]
public static string ConvertFromBytesWithoutBom(Byte[] bytes, Encoding encoding);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Threading.AsyncHelper : object {
    [ExtensionAttribute]
public static bool IsAsync(MethodInfo method);
    [ExtensionAttribute]
public static bool IsTaskOrTaskOfT(Type type);
    [ExtensionAttribute]
public static bool IsTaskOfT(Type type);
    public static Type UnwrapTask(Type type);
    public static TResult RunSync(Func`1<Task`1<TResult>> func);
    public static void RunSync(Func`1<Task> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Threading.AsyncOneTimeRunner : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _runBefore;
    private SemaphoreSlim _semaphore;
    [AsyncStateMachineAttribute("Volo.Abp.Threading.AsyncOneTimeRunner/<RunAsync>d__2")]
public Task RunAsync(Func`1<Task> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Threading.InternalAsyncHelper : object {
    [AsyncStateMachineAttribute("Volo.Abp.Threading.InternalAsyncHelper/<AwaitTaskWithFinally>d__0")]
public static Task AwaitTaskWithFinally(Task actualReturnValue, Action`1<Exception> finalAction);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.InternalAsyncHelper/<AwaitTaskWithPostActionAndFinally>d__1")]
public static Task AwaitTaskWithPostActionAndFinally(Task actualReturnValue, Func`1<Task> postAction, Action`1<Exception> finalAction);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.InternalAsyncHelper/<AwaitTaskWithPreActionAndPostActionAndFinally>d__2")]
public static Task AwaitTaskWithPreActionAndPostActionAndFinally(Func`1<Task> actualReturnValue, Func`1<Task> preAction, Func`1<Task> postAction, Action`1<Exception> finalAction);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.InternalAsyncHelper/<AwaitTaskWithFinallyAndGetResult>d__3`1")]
public static Task`1<T> AwaitTaskWithFinallyAndGetResult(Task`1<T> actualReturnValue, Action`1<Exception> finalAction);
    public static object CallAwaitTaskWithFinallyAndGetResult(Type taskReturnType, object actualReturnValue, Action`1<Exception> finalAction);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.InternalAsyncHelper/<AwaitTaskWithPostActionAndFinallyAndGetResult>d__5`1")]
public static Task`1<T> AwaitTaskWithPostActionAndFinallyAndGetResult(Task`1<T> actualReturnValue, Func`1<Task> postAction, Action`1<Exception> finalAction);
    public static object CallAwaitTaskWithPostActionAndFinallyAndGetResult(Type taskReturnType, object actualReturnValue, Func`1<Task> action, Action`1<Exception> finalAction);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.InternalAsyncHelper/<AwaitTaskWithPreActionAndPostActionAndFinallyAndGetResult>d__7`1")]
public static Task`1<T> AwaitTaskWithPreActionAndPostActionAndFinallyAndGetResult(Func`1<Task`1<T>> actualReturnValue, Func`1<Task> preAction, Func`1<Task> postAction, Action`1<Exception> finalAction);
    public static object CallAwaitTaskWithPreActionAndPostActionAndFinallyAndGetResult(Type taskReturnType, Func`1<object> actualReturnValue, Func`1<Task> preAction, Func`1<Task> postAction, Action`1<Exception> finalAction);
    private static Func`1<Task`1<T>> ConvertFuncOfObjectToFuncOfTask(Func`1<object> actualReturnValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Threading.LockExtensions : object {
    [ExtensionAttribute]
public static void Locking(object source, Action action);
    [ExtensionAttribute]
public static void Locking(T source, Action`1<T> action);
    [ExtensionAttribute]
public static TResult Locking(object source, Func`1<TResult> func);
    [ExtensionAttribute]
public static TResult Locking(T source, Func`2<T, TResult> func);
}
public class Volo.Abp.Threading.OneTimeRunner : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _runBefore;
    [NullableContextAttribute("1")]
public void Run(Action action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Threading.SemaphoreSlimExtensions : object {
    [AsyncStateMachineAttribute("Volo.Abp.Threading.SemaphoreSlimExtensions/<LockAsync>d__0")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.SemaphoreSlimExtensions/<LockAsync>d__1")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.SemaphoreSlimExtensions/<LockAsync>d__2")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, int millisecondsTimeout);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.SemaphoreSlimExtensions/<LockAsync>d__3")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, int millisecondsTimeout, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.SemaphoreSlimExtensions/<LockAsync>d__4")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, TimeSpan timeout);
    [AsyncStateMachineAttribute("Volo.Abp.Threading.SemaphoreSlimExtensions/<LockAsync>d__5")]
[ExtensionAttribute]
public static Task`1<IDisposable> LockAsync(SemaphoreSlim semaphoreSlim, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, int millisecondsTimeout);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, int millisecondsTimeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, TimeSpan timeout);
    [ExtensionAttribute]
public static IDisposable Lock(SemaphoreSlim semaphoreSlim, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static IDisposable GetDispose(SemaphoreSlim semaphoreSlim);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.Threading.TaskCache : object {
    [CompilerGeneratedAttribute]
private static Task`1<bool> <TrueResult>k__BackingField;
    [CompilerGeneratedAttribute]
private static Task`1<bool> <FalseResult>k__BackingField;
    public static Task`1<bool> TrueResult { get; }
    public static Task`1<bool> FalseResult { get; }
    private static TaskCache();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_TrueResult();
    [CompilerGeneratedAttribute]
public static Task`1<bool> get_FalseResult();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Tracing.AbpCorrelationIdOptions : object {
    [CompilerGeneratedAttribute]
private string <HttpHeaderName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetResponseHeader>k__BackingField;
    public string HttpHeaderName { get; public set; }
    public bool SetResponseHeader { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HttpHeaderName();
    [CompilerGeneratedAttribute]
public void set_HttpHeaderName(string value);
    [CompilerGeneratedAttribute]
public bool get_SetResponseHeader();
    [CompilerGeneratedAttribute]
public void set_SetResponseHeader(bool value);
}
public class Volo.Abp.Tracing.DefaultCorrelationIdProvider : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncLocal`1<string> _currentCorrelationId;
    [NullableAttribute("2")]
private string CorrelationId { get; }
    [NullableContextAttribute("2")]
private string get_CorrelationId();
    [NullableContextAttribute("2")]
public virtual string Get();
    [NullableContextAttribute("1")]
public virtual IDisposable Change(string correlationId);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Tracing.ICorrelationIdProvider {
    [NullableContextAttribute("2")]
public abstract virtual string Get();
    public abstract virtual IDisposable Change(string correlationId);
}
public class Volo.Abp.UserFriendlyException : BusinessException {
    [NullableContextAttribute("2")]
public UserFriendlyException(string message, string code, string details, Exception innerException, LogLevel logLevel);
}
public class Volo.Abp.Validation.DynamicMaxLengthAttribute : MaxLengthAttribute {
    [NullableAttribute("2")]
private static FieldInfo MaximumLengthField;
    private static DynamicMaxLengthAttribute();
    [NullableContextAttribute("1")]
public DynamicMaxLengthAttribute(Type sourceType, string maximumLengthPropertyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.Validation.DynamicRangeAttribute : RangeAttribute {
    private static FieldInfo MaximumField;
    private static FieldInfo MinimumField;
    private static DynamicRangeAttribute();
    [NullableContextAttribute("1")]
public DynamicRangeAttribute(Type sourceType, Type operandType, string minimumPropertyName, string maximumPropertyName);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.Validation.DynamicStringLengthAttribute : StringLengthAttribute {
    private static FieldInfo MaximumLengthField;
    private static DynamicStringLengthAttribute();
    public DynamicStringLengthAttribute(Type sourceType, string maximumLengthPropertyName, string minimumLengthPropertyName);
}
internal class VoloAbpCore_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
