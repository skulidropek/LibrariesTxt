[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.AbpEntityFrameworkQueryableExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IQueryable`1<T> IncludeIf(IQueryable`1<T> source, bool condition, Expression`1<Func`2<T, TProperty>> path);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.AbpModelBuilderExtensions : object {
    private static string ModelDatabaseProviderAnnotationKey;
    private static string ModelMultiTenancySideAnnotationKey;
    [ExtensionAttribute]
public static void SetMultiTenancySide(ModelBuilder modelBuilder, MultiTenancySides side);
    [ExtensionAttribute]
public static MultiTenancySides GetMultiTenancySide(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsHostDatabase(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsTenantDatabase(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsHostOnlyDatabase(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsTenantOnlyDatabase(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static void SetDatabaseProvider(ModelBuilder modelBuilder, EfCoreDatabaseProvider databaseProvider);
    [ExtensionAttribute]
public static void ClearDatabaseProvider(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static Nullable`1<EfCoreDatabaseProvider> GetDatabaseProvider(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingMySQL(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingOracle(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingSqlServer(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingPostgreSql(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingSqlite(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static void UseInMemory(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingInMemory(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static void UseCosmos(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingCosmos(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static void UseFirebird(ModelBuilder modelBuilder);
    [ExtensionAttribute]
public static bool IsUsingFirebird(ModelBuilder modelBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpEfCoreDbContextOptionsBuilderExtensions : object {
    [ExtensionAttribute]
public static DbContextOptionsBuilder AddAbpDbContextOptionsExtension(DbContextOptionsBuilder optionsBuilder);
    [ExtensionAttribute]
public static DbContextOptionsBuilder`1<TContext> AddAbpDbContextOptionsExtension(DbContextOptionsBuilder`1<TContext> optionsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpEfCoreModelBuilderExtensions : object {
    [ExtensionAttribute]
public static ModelBuilder ConfigureSoftDeleteDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo, AbpEfCoreCurrentDbContext abpEfCoreCurrentDbContext);
    [ExtensionAttribute]
public static ModelBuilder ConfigureMultiTenantDbFunction(ModelBuilder modelBuilder, MethodInfo methodInfo, AbpEfCoreCurrentDbContext abpEfCoreCurrentDbContext);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpEfCoreServiceCollectionExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IServiceCollection AddAbpDbContext(IServiceCollection services, Action`1<IAbpDbContextRegistrationOptionsBuilder> optionsBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Domain.Repositories.EfCoreRepositoryExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetDbContextAsync method.")]
public static DbContext GetDbContext(IReadOnlyBasicRepository`1<TEntity> repository);
    [ExtensionAttribute]
public static Task`1<DbContext> GetDbContextAsync(IReadOnlyBasicRepository`1<TEntity> repository);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetDbSetAsync method.")]
public static DbSet`1<TEntity> GetDbSet(IReadOnlyBasicRepository`1<TEntity> repository);
    [ExtensionAttribute]
public static Task`1<DbSet`1<TEntity>> GetDbSetAsync(IReadOnlyBasicRepository`1<TEntity> repository);
    [ExtensionAttribute]
public static IEfCoreRepository`1<TEntity> ToEfCoreRepository(IReadOnlyBasicRepository`1<TEntity> repository);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsNoTrackingIf(IQueryable`1<TEntity> queryable, bool condition);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2 : RepositoryBase`1<TEntity> {
    private IDbContextProvider`1<TDbContext> _dbContextProvider;
    private Lazy`1<AbpEntityOptions`1<TEntity>> _entityOptionsLazy;
    [ObsoleteAttribute("Use GetDbContextAsync() method.")]
protected TDbContext DbContext { get; }
    [ObsoleteAttribute("Use GetDbContextAsync() method.")]
private DbContext Volo.Abp.Domain.Repositories.EntityFrameworkCore.IEfCoreRepository<TEntity>.DbContext { get; }
    [ObsoleteAttribute("Use GetDbSetAsync() method.")]
public DbSet`1<TEntity> DbSet { get; }
    protected AbpEntityOptions`1<TEntity> AbpEntityOptions { get; }
    public IGuidGenerator GuidGenerator { get; }
    [NullableAttribute("2")]
public IEfCoreBulkOperationProvider BulkOperationProvider { get; }
    public EfCoreRepository`2(IDbContextProvider`1<TDbContext> dbContextProvider);
    protected virtual TDbContext get_DbContext();
    private sealed virtual override DbContext Volo.Abp.Domain.Repositories.EntityFrameworkCore.IEfCoreRepository<TEntity>.get_DbContext();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<Volo-Abp-Domain-Repositories-EntityFrameworkCore-IEfCoreRepository<TEntity>-GetDbContextAsync>d__4")]
private sealed virtual override Task`1<DbContext> Volo.Abp.Domain.Repositories.EntityFrameworkCore.IEfCoreRepository<TEntity>.GetDbContextAsync();
    [ObsoleteAttribute("Use GetDbContextAsync() method.")]
private TDbContext GetDbContext();
    protected virtual Task`1<TDbContext> GetDbContextAsync();
    public virtual DbSet`1<TEntity> get_DbSet();
    private sealed virtual override Task`1<DbSet`1<TEntity>> Volo.Abp.Domain.Repositories.EntityFrameworkCore.IEfCoreRepository<TEntity>.GetDbSetAsync();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetDbSetAsync>d__10")]
protected Task`1<DbSet`1<TEntity>> GetDbSetAsync();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetDbConnectionAsync>d__11")]
protected Task`1<IDbConnection> GetDbConnectionAsync();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetDbTransactionAsync>d__12")]
protected Task`1<IDbTransaction> GetDbTransactionAsync();
    protected virtual AbpEntityOptions`1<TEntity> get_AbpEntityOptions();
    public virtual IGuidGenerator get_GuidGenerator();
    [NullableContextAttribute("2")]
public IEfCoreBulkOperationProvider get_BulkOperationProvider();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<InsertAsync>d__22")]
public virtual Task`1<TEntity> InsertAsync(TEntity entity, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<InsertManyAsync>d__23")]
public virtual Task InsertManyAsync(IEnumerable`1<TEntity> entities, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<UpdateAsync>d__24")]
public virtual Task`1<TEntity> UpdateAsync(TEntity entity, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<UpdateManyAsync>d__25")]
public virtual Task UpdateManyAsync(IEnumerable`1<TEntity> entities, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<DeleteAsync>d__26")]
public virtual Task DeleteAsync(TEntity entity, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<DeleteManyAsync>d__27")]
public virtual Task DeleteManyAsync(IEnumerable`1<TEntity> entities, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetListAsync>d__28")]
public virtual Task`1<List`1<TEntity>> GetListAsync(bool includeDetails, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetListAsync>d__29")]
public virtual Task`1<List`1<TEntity>> GetListAsync(Expression`1<Func`2<TEntity, bool>> predicate, bool includeDetails, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetCountAsync>d__30")]
public virtual Task`1<long> GetCountAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetPagedListAsync>d__31")]
public virtual Task`1<List`1<TEntity>> GetPagedListAsync(int skipCount, int maxResultCount, string sorting, bool includeDetails, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use GetQueryableAsync method.")]
protected virtual IQueryable`1<TEntity> GetQueryable();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<GetQueryableAsync>d__33")]
public virtual Task`1<IQueryable`1<TEntity>> GetQueryableAsync();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<SaveChangesAsync>d__34")]
protected virtual Task SaveChangesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<FindAsync>d__35")]
public virtual Task`1<TEntity> FindAsync(Expression`1<Func`2<TEntity, bool>> predicate, bool includeDetails, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<DeleteAsync>d__36")]
public virtual Task DeleteAsync(Expression`1<Func`2<TEntity, bool>> predicate, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<DeleteDirectAsync>d__37")]
public virtual Task DeleteDirectAsync(Expression`1<Func`2<TEntity, bool>> predicate, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<EnsureCollectionLoadedAsync>d__38`1")]
public virtual Task EnsureCollectionLoadedAsync(TEntity entity, Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> propertyExpression, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<EnsurePropertyLoadedAsync>d__39`1")]
public virtual Task EnsurePropertyLoadedAsync(TEntity entity, Expression`1<Func`2<TEntity, TProperty>> propertyExpression, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use WithDetailsAsync")]
public virtual IQueryable`1<TEntity> WithDetails();
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<WithDetailsAsync>d__41")]
public virtual Task`1<IQueryable`1<TEntity>> WithDetailsAsync();
    [ObsoleteAttribute("Use WithDetailsAsync method.")]
public virtual IQueryable`1<TEntity> WithDetails(Expression`1[] propertySelectors);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`2/<WithDetailsAsync>d__43")]
public virtual Task`1<IQueryable`1<TEntity>> WithDetailsAsync(Expression`1[] propertySelectors);
    private static IQueryable`1<TEntity> IncludeDetails(IQueryable`1<TEntity> query, Expression`1[] propertySelectors);
    protected virtual void CheckAndSetId(TEntity entity);
    protected virtual void TrySetGuidId(IEntity`1<Guid> entity);
    [CompilerGeneratedAttribute]
private AbpEntityOptions`1<TEntity> <.ctor>b__21_0();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IQueryable`1<TEntity>> <>n__0();
    [CompilerGeneratedAttribute]
private Guid <TrySetGuidId>b__46_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`3 : EfCoreRepository`2<TDbContext, TEntity> {
    public EfCoreRepository`3(IDbContextProvider`1<TDbContext> dbContextProvider);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`3/<GetAsync>d__1")]
public virtual Task`1<TEntity> GetAsync(TKey id, bool includeDetails, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`3/<FindAsync>d__2")]
public virtual Task`1<TEntity> FindAsync(TKey id, bool includeDetails, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`3/<DeleteAsync>d__3")]
public virtual Task DeleteAsync(TKey id, bool autoSave, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Domain.Repositories.EntityFrameworkCore.EfCoreRepository`3/<DeleteManyAsync>d__4")]
public virtual Task DeleteManyAsync(IEnumerable`1<TKey> ids, bool autoSave, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Domain.Repositories.EntityFrameworkCore.IEfCoreBulkOperationProvider {
    public abstract virtual Task InsertManyAsync(IEfCoreRepository`1<TEntity> repository, IEnumerable`1<TEntity> entities, bool autoSave, CancellationToken cancellationToken);
    public abstract virtual Task UpdateManyAsync(IEfCoreRepository`1<TEntity> repository, IEnumerable`1<TEntity> entities, bool autoSave, CancellationToken cancellationToken);
    public abstract virtual Task DeleteManyAsync(IEfCoreRepository`1<TEntity> repository, IEnumerable`1<TEntity> entities, bool autoSave, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Domain.Repositories.EntityFrameworkCore.IEfCoreRepository`1 {
    [ObsoleteAttribute("Use GetDbContextAsync() method.")]
public DbContext DbContext { get; }
    [ObsoleteAttribute("Use GetDbSetAsync() method.")]
public DbSet`1<TEntity> DbSet { get; }
    public abstract virtual DbContext get_DbContext();
    public abstract virtual DbSet`1<TEntity> get_DbSet();
    public abstract virtual Task`1<DbContext> GetDbContextAsync();
    public abstract virtual Task`1<DbSet`1<TEntity>> GetDbSetAsync();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Domain.Repositories.EntityFrameworkCore.IEfCoreRepository`2 {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.EntityFrameworkCore.AbpDbContext`1 : DbContext {
    [CompilerGeneratedAttribute]
private IAbpLazyServiceProvider <LazyServiceProvider>k__BackingField;
    private static MethodInfo ConfigureBasePropertiesMethodInfo;
    private static MethodInfo ConfigureValueConverterMethodInfo;
    private static MethodInfo ConfigureValueGeneratedMethodInfo;
    protected DbContextOptions DbContextOptions;
    public IAbpLazyServiceProvider LazyServiceProvider { get; public set; }
    protected Nullable`1<Guid> CurrentTenantId { get; }
    protected bool IsMultiTenantFilterEnabled { get; }
    protected bool IsSoftDeleteFilterEnabled { get; }
    public ICurrentTenant CurrentTenant { get; }
    public IGuidGenerator GuidGenerator { get; }
    public IDataFilter DataFilter { get; }
    public IEntityChangeEventHelper EntityChangeEventHelper { get; }
    public IOptions`1<AbpEntityChangeOptions> EntityChangeOptions { get; }
    public IAuditPropertySetter AuditPropertySetter { get; }
    public IEntityHistoryHelper EntityHistoryHelper { get; }
    public IAuditingManager AuditingManager { get; }
    public IUnitOfWorkManager UnitOfWorkManager { get; }
    public IClock Clock { get; }
    public IDistributedEventBus DistributedEventBus { get; }
    public ILocalEventBus LocalEventBus { get; }
    public ILogger`1<AbpDbContext`1<TDbContext>> Logger { get; }
    public AbpEfCoreNavigationHelper AbpEfCoreNavigationHelper { get; }
    public IOptions`1<AbpDbContextOptions> Options { get; }
    public IOptions`1<AbpEfCoreGlobalFilterOptions> GlobalFilterOptions { get; }
    protected AbpDbContext`1(DbContextOptions`1<TDbContext> options);
    private static AbpDbContext`1();
    [CompilerGeneratedAttribute]
public sealed virtual IAbpLazyServiceProvider get_LazyServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LazyServiceProvider(IAbpLazyServiceProvider value);
    protected virtual Nullable`1<Guid> get_CurrentTenantId();
    protected virtual bool get_IsMultiTenantFilterEnabled();
    protected virtual bool get_IsSoftDeleteFilterEnabled();
    public sealed virtual ICurrentTenant get_CurrentTenant();
    public IGuidGenerator get_GuidGenerator();
    public sealed virtual IDataFilter get_DataFilter();
    public IEntityChangeEventHelper get_EntityChangeEventHelper();
    public IOptions`1<AbpEntityChangeOptions> get_EntityChangeOptions();
    public IAuditPropertySetter get_AuditPropertySetter();
    public IEntityHistoryHelper get_EntityHistoryHelper();
    public IAuditingManager get_AuditingManager();
    public IUnitOfWorkManager get_UnitOfWorkManager();
    public IClock get_Clock();
    public IDistributedEventBus get_DistributedEventBus();
    public ILocalEventBus get_LocalEventBus();
    public ILogger`1<AbpDbContext`1<TDbContext>> get_Logger();
    public AbpEfCoreNavigationHelper get_AbpEfCoreNavigationHelper();
    public IOptions`1<AbpDbContextOptions> get_Options();
    public IOptions`1<AbpEfCoreGlobalFilterOptions> get_GlobalFilterOptions();
    protected virtual void OnModelCreating(ModelBuilder modelBuilder);
    protected virtual void ConfigureConventions(ModelConfigurationBuilder configurationBuilder);
    protected virtual void TrySetDatabaseProvider(ModelBuilder modelBuilder);
    protected virtual Nullable`1<EfCoreDatabaseProvider> GetDatabaseProviderOrNull(ModelBuilder modelBuilder);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.AbpDbContext`1/<SaveChangesAsync>d__51")]
public virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    protected virtual void PublishEntityEvents(EntityEventReport changeReport);
    public virtual Task`1<int> SaveChangesOnDbContextAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public virtual void Initialize(AbpEfCoreDbContextInitializationContext initializationContext);
    protected virtual void ChangeTracker_Tracked(object sender, EntityTrackedEventArgs e);
    protected virtual void ChangeTracker_StateChanged(object sender, EntityStateChangedEventArgs e);
    protected virtual void FillExtraPropertiesForTrackedEntities(EntityTrackedEventArgs e);
    protected virtual void PublishEventsForTrackedEntity(EntityEntry entry);
    protected virtual void HandlePropertiesBeforeSave();
    protected virtual EntityEventReport CreateEventReport();
    protected virtual void HandleExtraPropertiesOnSave(EntityEntry entry);
    protected virtual void ApplyAbpConceptsForAddedEntity(EntityEntry entry);
    protected virtual void ApplyAbpConceptsForModifiedEntity(EntityEntry entry, bool forceApply);
    protected virtual void ApplyAbpConceptsForDeletedEntity(EntityEntry entry);
    protected virtual bool IsHardDeleted(EntityEntry entry);
    protected virtual void UpdateConcurrencyStamp(EntityEntry entry);
    protected virtual void SetConcurrencyStampIfNull(EntityEntry entry);
    protected virtual void CheckAndSetId(EntityEntry entry);
    protected virtual void TrySetGuidId(EntityEntry entry, IEntity`1<Guid> entity);
    protected virtual void SetCreationAuditProperties(EntityEntry entry);
    protected virtual void SetModificationAuditProperties(EntityEntry entry);
    protected virtual void SetDeletionAuditProperties(EntityEntry entry);
    protected virtual void IncrementEntityVersionProperty(EntityEntry entry);
    protected virtual void ConfigureBaseProperties(ModelBuilder modelBuilder, IMutableEntityType mutableEntityType);
    protected virtual void ConfigureGlobalFilters(ModelBuilder modelBuilder, IMutableEntityType mutableEntityType);
    protected virtual void ConfigureValueConverter(ModelBuilder modelBuilder, IMutableEntityType mutableEntityType);
    protected virtual void ConfigureValueGenerated(ModelBuilder modelBuilder, IMutableEntityType mutableEntityType);
    protected virtual bool ShouldFilterEntity(IMutableEntityType entityType);
    protected virtual Expression`1<Func`2<TEntity, bool>> CreateFilterExpression(ModelBuilder modelBuilder);
    protected virtual bool UseDbFunction();
    public virtual string GetCompiledQueryCacheKey();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<int> <>n__0(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private Guid <TrySetGuidId>b__69_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.AbpDbContextOptions : object {
    [CompilerGeneratedAttribute]
private List`1<Action`1<AbpDbContextConfigurationContext>> <DefaultPreConfigureActions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<AbpDbContextConfigurationContext> <DefaultConfigureAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<object>> <PreConfigureActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <ConfigureActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<MultiTenantDbContextType, Type> <DbContextReplacements>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<DbContext, ModelConfigurationBuilder> <DefaultConventionAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<object>> <ConventionActions>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<DbContext, ModelBuilder> <DefaultOnModelCreatingAction>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, List`1<object>> <OnModelCreatingActions>k__BackingField;
    internal List`1<Action`1<AbpDbContextConfigurationContext>> DefaultPreConfigureActions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<AbpDbContextConfigurationContext> DefaultConfigureAction { get; internal set; }
    internal Dictionary`2<Type, List`1<object>> PreConfigureActions { get; }
    internal Dictionary`2<Type, object> ConfigureActions { get; }
    internal Dictionary`2<MultiTenantDbContextType, Type> DbContextReplacements { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`2<DbContext, ModelConfigurationBuilder> DefaultConventionAction { get; internal set; }
    internal Dictionary`2<Type, List`1<object>> ConventionActions { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`2<DbContext, ModelBuilder> DefaultOnModelCreatingAction { get; internal set; }
    internal Dictionary`2<Type, List`1<object>> OnModelCreatingActions { get; }
    [CompilerGeneratedAttribute]
internal List`1<Action`1<AbpDbContextConfigurationContext>> get_DefaultPreConfigureActions();
    [CompilerGeneratedAttribute]
internal Action`1<AbpDbContextConfigurationContext> get_DefaultConfigureAction();
    [CompilerGeneratedAttribute]
internal void set_DefaultConfigureAction(Action`1<AbpDbContextConfigurationContext> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, List`1<object>> get_PreConfigureActions();
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, object> get_ConfigureActions();
    [CompilerGeneratedAttribute]
internal Dictionary`2<MultiTenantDbContextType, Type> get_DbContextReplacements();
    [CompilerGeneratedAttribute]
internal Action`2<DbContext, ModelConfigurationBuilder> get_DefaultConventionAction();
    [CompilerGeneratedAttribute]
internal void set_DefaultConventionAction(Action`2<DbContext, ModelConfigurationBuilder> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, List`1<object>> get_ConventionActions();
    [CompilerGeneratedAttribute]
internal Action`2<DbContext, ModelBuilder> get_DefaultOnModelCreatingAction();
    [CompilerGeneratedAttribute]
internal void set_DefaultOnModelCreatingAction(Action`2<DbContext, ModelBuilder> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<Type, List`1<object>> get_OnModelCreatingActions();
    public void PreConfigure(Action`1<AbpDbContextConfigurationContext> action);
    public void Configure(Action`1<AbpDbContextConfigurationContext> action);
    public void ConfigureDefaultConvention(Action`2<DbContext, ModelConfigurationBuilder> action);
    public void ConfigureConventions(Action`2<TDbContext, ModelConfigurationBuilder> action);
    public void ConfigureDefaultOnModelCreating(Action`2<DbContext, ModelBuilder> action);
    public void ConfigureOnModelCreating(Action`2<TDbContext, ModelBuilder> action);
    public bool IsConfiguredDefault();
    public void PreConfigure(Action`1<AbpDbContextConfigurationContext`1<TDbContext>> action);
    public void Configure(Action`1<AbpDbContextConfigurationContext`1<TDbContext>> action);
    [NullableContextAttribute("2")]
public bool IsConfigured();
    public bool IsConfigured(Type dbContextType);
    internal Type GetReplacedTypeOrSelf(Type dbContextType, MultiTenancySides multiTenancySides);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.AbpDbContextOptionsExtension : object {
    public DbContextOptionsExtensionInfo Info { get; }
    public sealed virtual void ApplyServices(IServiceCollection services);
    public sealed virtual void Validate(IDbContextOptions options);
    public sealed virtual DbContextOptionsExtensionInfo get_Info();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.AbpEfCoreDbContextInitializationContext : object {
    [CompilerGeneratedAttribute]
private IUnitOfWork <UnitOfWork>k__BackingField;
    public IUnitOfWork UnitOfWork { get; }
    public AbpEfCoreDbContextInitializationContext(IUnitOfWork unitOfWork);
    [CompilerGeneratedAttribute]
public IUnitOfWork get_UnitOfWork();
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.EntityFrameworkCore.AbpEntityFrameworkCoreModule : AbpModule {
    [NullableContextAttribute("1")]
public virtual void ConfigureServices(ServiceConfigurationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.AbpEntityQueryProvider : EntityQueryProvider {
    [CompilerGeneratedAttribute]
private AbpEfCoreCurrentDbContext <AbpEfCoreCurrentDbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentDbContext>k__BackingField;
    protected AbpEfCoreCurrentDbContext AbpEfCoreCurrentDbContext { get; }
    protected ICurrentDbContext CurrentDbContext { get; }
    public AbpEntityQueryProvider(IQueryCompiler queryCompiler, AbpEfCoreCurrentDbContext abpEfCoreCurrentDbContext, ICurrentDbContext currentDbContext);
    [CompilerGeneratedAttribute]
protected AbpEfCoreCurrentDbContext get_AbpEfCoreCurrentDbContext();
    [CompilerGeneratedAttribute]
protected ICurrentDbContext get_CurrentDbContext();
    public virtual object Execute(Expression expression);
    public virtual TResult Execute(Expression expression);
    public virtual TResult ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.ChangeTrackers.AbpEfCoreNavigationHelper : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, AbpEntityEntry> <EntityEntries>k__BackingField;
    protected Dictionary`2<string, AbpEntityEntry> EntityEntries { get; }
    [CompilerGeneratedAttribute]
protected Dictionary`2<string, AbpEntityEntry> get_EntityEntries();
    public virtual void ChangeTracker_Tracked(object sender, EntityTrackedEventArgs e);
    public virtual void ChangeTracker_StateChanged(object sender, EntityStateChangedEventArgs e);
    protected virtual void EntityEntryTrackedOrStateChanged(EntityEntry entityEntry);
    protected virtual void DetectChanges(EntityEntry entityEntry);
    protected virtual void RecursiveDetectChanges(EntityEntry entityEntry);
    public virtual List`1<EntityEntry> GetChangedEntityEntries();
    public virtual bool IsEntityEntryModified(EntityEntry entityEntry);
    public virtual bool IsNavigationEntryModified(EntityEntry entityEntry, Nullable`1<int> navigationEntryIndex);
    protected virtual string GetEntityEntryIdentity(EntityEntry entityEntry);
    public virtual void RemoveChangedEntityEntries();
    public virtual void Clear();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.ChangeTrackers.AbpEntityEntry : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<AbpNavigationEntry> <NavigationEntries>k__BackingField;
    private bool _isModified;
    public string Id { get; public set; }
    public EntityEntry EntityEntry { get; public set; }
    public List`1<AbpNavigationEntry> NavigationEntries { get; public set; }
    public bool IsModified { get; public set; }
    public AbpEntityEntry(string id, EntityEntry entityEntry);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public EntityEntry get_EntityEntry();
    [CompilerGeneratedAttribute]
public void set_EntityEntry(EntityEntry value);
    [CompilerGeneratedAttribute]
public List`1<AbpNavigationEntry> get_NavigationEntries();
    [CompilerGeneratedAttribute]
public void set_NavigationEntries(List`1<AbpNavigationEntry> value);
    public bool get_IsModified();
    public void set_IsModified(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.ChangeTrackers.AbpNavigationEntry : object {
    [CompilerGeneratedAttribute]
private NavigationEntry <NavigationEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsModified>k__BackingField;
    public NavigationEntry NavigationEntry { get; public set; }
    public string Name { get; public set; }
    public bool IsModified { get; public set; }
    public AbpNavigationEntry(NavigationEntry navigationEntry, string name);
    [CompilerGeneratedAttribute]
public NavigationEntry get_NavigationEntry();
    [CompilerGeneratedAttribute]
public void set_NavigationEntry(NavigationEntry value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsModified();
    [CompilerGeneratedAttribute]
public void set_IsModified(bool value);
}
[ExtensionAttribute]
internal static class Volo.Abp.EntityFrameworkCore.DbContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool HasRelationalTransactionManager(DbContext dbContext);
}
internal static class Volo.Abp.EntityFrameworkCore.DbContextHelper : object {
    [NullableContextAttribute("1")]
public static IEnumerable`1<Type> GetEntityTypes(Type dbContextType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.AbpDbContextConfigurationContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <ConnectionStringName>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DbConnection <ExistingConnection>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContextOptionsBuilder <DbContextOptions>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public string ConnectionString { get; }
    [NullableAttribute("2")]
public string ConnectionStringName { get; }
    [NullableAttribute("2")]
public DbConnection ExistingConnection { get; }
    public DbContextOptionsBuilder DbContextOptions { get; protected set; }
    public AbpDbContextConfigurationContext(string connectionString, IServiceProvider serviceProvider, string connectionStringName, DbConnection existingConnection);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ConnectionStringName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DbConnection get_ExistingConnection();
    [CompilerGeneratedAttribute]
public DbContextOptionsBuilder get_DbContextOptions();
    [CompilerGeneratedAttribute]
protected void set_DbContextOptions(DbContextOptionsBuilder value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.AbpDbContextConfigurationContext`1 : AbpDbContextConfigurationContext {
    public DbContextOptionsBuilder`1<TDbContext> DbContextOptions { get; }
    public AbpDbContextConfigurationContext`1(string connectionString, IServiceProvider serviceProvider, string connectionStringName, DbConnection existingConnection);
    public DbContextOptionsBuilder`1<TDbContext> get_DbContextOptions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.AbpDbContextConfigurerAction : object {
    [CompilerGeneratedAttribute]
private Action`1<AbpDbContextConfigurationContext> <Action>k__BackingField;
    public Action`1<AbpDbContextConfigurationContext> Action { get; }
    public AbpDbContextConfigurerAction(Action`1<AbpDbContextConfigurationContext> action);
    [CompilerGeneratedAttribute]
public Action`1<AbpDbContextConfigurationContext> get_Action();
    public sealed virtual void Configure(AbpDbContextConfigurationContext context);
}
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.AbpDbContextConfigurerAction`1 : AbpDbContextConfigurerAction {
    [NullableContextAttribute("1")]
public AbpDbContextConfigurerAction`1(Action`1<AbpDbContextConfigurationContext> action);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.AbpDbContextRegistrationOptions : AbpCommonDbContextRegistrationOptions {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <AbpEntityOptions>k__BackingField;
    public Dictionary`2<Type, object> AbpEntityOptions { get; }
    public AbpDbContextRegistrationOptions(Type originalDbContextType, IServiceCollection services);
    [CompilerGeneratedAttribute]
public Dictionary`2<Type, object> get_AbpEntityOptions();
    public sealed virtual void Entity(Action`1<AbpEntityOptions`1<TEntity>> optionsAction);
}
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.AbpEntityOptions : object {
    [NullableAttribute("1")]
private IDictionary`2<Type, object> _options;
    public AbpEntityOptions`1<TEntity> GetOrNull();
    [NullableContextAttribute("1")]
public void Entity(Action`1<AbpEntityOptions`1<TEntity>> optionsAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.AbpEntityOptions`1 : object {
    [CompilerGeneratedAttribute]
private static AbpEntityOptions`1<TEntity> <Empty>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Func`2<IQueryable`1<TEntity>, IQueryable`1<TEntity>> <DefaultWithDetailsFunc>k__BackingField;
    public static AbpEntityOptions`1<TEntity> Empty { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IQueryable`1<TEntity>, IQueryable`1<TEntity>> DefaultWithDetailsFunc { get; public set; }
    private static AbpEntityOptions`1();
    [CompilerGeneratedAttribute]
public static AbpEntityOptions`1<TEntity> get_Empty();
    [CompilerGeneratedAttribute]
public Func`2<IQueryable`1<TEntity>, IQueryable`1<TEntity>> get_DefaultWithDetailsFunc();
    [CompilerGeneratedAttribute]
public void set_DefaultWithDetailsFunc(Func`2<IQueryable`1<TEntity>, IQueryable`1<TEntity>> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.DbContextCreationContext : object {
    private static AsyncLocal`1<DbContextCreationContext> _current;
    [CompilerGeneratedAttribute]
private string <ConnectionStringName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DbConnection <ExistingConnection>k__BackingField;
    public static DbContextCreationContext Current { get; }
    public string ConnectionStringName { get; }
    public string ConnectionString { get; }
    [NullableAttribute("2")]
public DbConnection ExistingConnection { get; internal set; }
    public DbContextCreationContext(string connectionStringName, string connectionString);
    private static DbContextCreationContext();
    public static DbContextCreationContext get_Current();
    [CompilerGeneratedAttribute]
public string get_ConnectionStringName();
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DbConnection get_ExistingConnection();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal void set_ExistingConnection(DbConnection value);
    public static IDisposable Use(DbContextCreationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.EntityFrameworkCore.DependencyInjection.DbContextOptionsFactory : object {
    public static DbContextOptions`1<TDbContext> Create(IServiceProvider serviceProvider);
    private static void PreConfigure(AbpDbContextOptions options, AbpDbContextConfigurationContext`1<TDbContext> context);
    private static void Configure(AbpDbContextOptions options, AbpDbContextConfigurationContext`1<TDbContext> context);
    private static AbpDbContextOptions GetDbContextOptions(IServiceProvider serviceProvider);
    private static DbContextCreationContext GetCreationContext(IServiceProvider serviceProvider);
    private static string ResolveConnectionString(IServiceProvider serviceProvider, string connectionStringName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.EntityFrameworkCore.DependencyInjection.EfCoreRepositoryRegistrar : RepositoryRegistrarBase`1<AbpDbContextRegistrationOptions> {
    public EfCoreRepositoryRegistrar(AbpDbContextRegistrationOptions options);
    protected virtual IEnumerable`1<Type> GetEntityTypes(Type dbContextType);
    protected virtual Type GetRepositoryType(Type dbContextType, Type entityType);
    protected virtual Type GetRepositoryType(Type dbContextType, Type entityType, Type primaryKeyType);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.EntityFrameworkCore.DependencyInjection.IAbpDbContextConfigurer {
    public abstract virtual void Configure(AbpDbContextConfigurationContext context);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.EntityFrameworkCore.DependencyInjection.IAbpDbContextConfigurer`1 {
    public abstract virtual void Configure(AbpDbContextConfigurationContext`1<TDbContext> context);
}
public interface Volo.Abp.EntityFrameworkCore.DependencyInjection.IAbpDbContextRegistrationOptionsBuilder {
    [NullableContextAttribute("1")]
public abstract virtual void Entity(Action`1<AbpEntityOptions`1<TEntity>> optionsAction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.EntityFrameworkCore.Design.AbpDesignTimeDbContextBase`2 : object {
    public virtual TContext CreateDbContext(String[] args);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Design.AbpDesignTimeDbContextBase`2/<CreateDbContextAsync>d__1")]
protected virtual Task`1<TContext> CreateDbContextAsync(String[] args);
    protected virtual void ConfigureServices(IServiceCollection services);
    protected abstract virtual IConfigurationRoot BuildConfiguration();
    [CompilerGeneratedAttribute]
private void <CreateDbContextAsync>b__1_0(AbpApplicationCreationOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventInbox`1 : object {
    [CompilerGeneratedAttribute]
private IDbContextProvider`1<TDbContext> <DbContextProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpEventBusBoxesOptions <EventBusBoxesOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IClock <Clock>k__BackingField;
    protected IDbContextProvider`1<TDbContext> DbContextProvider { get; }
    protected AbpEventBusBoxesOptions EventBusBoxesOptions { get; }
    protected IClock Clock { get; }
    public DbContextEventInbox`1(IDbContextProvider`1<TDbContext> dbContextProvider, IClock clock, IOptions`1<AbpEventBusBoxesOptions> eventBusBoxesOptions);
    [CompilerGeneratedAttribute]
protected IDbContextProvider`1<TDbContext> get_DbContextProvider();
    [CompilerGeneratedAttribute]
protected AbpEventBusBoxesOptions get_EventBusBoxesOptions();
    [CompilerGeneratedAttribute]
protected IClock get_Clock();
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventInbox`1/<EnqueueAsync>d__10")]
[UnitOfWorkAttribute]
public virtual Task EnqueueAsync(IncomingEventInfo incomingEvent);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventInbox`1/<GetWaitingEventsAsync>d__11")]
[UnitOfWorkAttribute]
public virtual Task`1<List`1<IncomingEventInfo>> GetWaitingEventsAsync(int maxCount, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventInbox`1/<MarkAsProcessedAsync>d__12")]
[UnitOfWorkAttribute]
public virtual Task MarkAsProcessedAsync(Guid id);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventInbox`1/<ExistsByMessageIdAsync>d__13")]
[UnitOfWorkAttribute]
public virtual Task`1<bool> ExistsByMessageIdAsync(string messageId);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventInbox`1/<DeleteOldEventsAsync>d__14")]
[UnitOfWorkAttribute]
public virtual Task DeleteOldEventsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventOutbox`1 : object {
    [CompilerGeneratedAttribute]
private IDbContextProvider`1<TDbContext> <DbContextProvider>k__BackingField;
    protected IDbContextProvider`1<TDbContext> DbContextProvider { get; }
    public DbContextEventOutbox`1(IDbContextProvider`1<TDbContext> dbContextProvider);
    [CompilerGeneratedAttribute]
protected IDbContextProvider`1<TDbContext> get_DbContextProvider();
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventOutbox`1/<EnqueueAsync>d__4")]
[UnitOfWorkAttribute]
public virtual Task EnqueueAsync(OutgoingEventInfo outgoingEvent);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventOutbox`1/<GetWaitingEventsAsync>d__5")]
[UnitOfWorkAttribute]
public virtual Task`1<List`1<OutgoingEventInfo>> GetWaitingEventsAsync(int maxCount, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventOutbox`1/<DeleteAsync>d__6")]
[UnitOfWorkAttribute]
public virtual Task DeleteAsync(Guid id);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.DistributedEvents.DbContextEventOutbox`1/<DeleteManyAsync>d__7")]
[UnitOfWorkAttribute]
public virtual Task DeleteManyAsync(IEnumerable`1<Guid> ids);
}
[ExtensionAttribute]
public static class Volo.Abp.EntityFrameworkCore.DistributedEvents.EfCoreInboxConfigExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void UseDbContext(InboxConfig outboxConfig);
}
[ExtensionAttribute]
public static class Volo.Abp.EntityFrameworkCore.DistributedEvents.EfCoreOutboxConfigExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void UseDbContext(OutboxConfig outboxConfig);
}
[ExtensionAttribute]
public static class Volo.Abp.EntityFrameworkCore.DistributedEvents.EventInboxDbContextModelBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ConfigureEventInbox(ModelBuilder builder);
}
[ExtensionAttribute]
public static class Volo.Abp.EntityFrameworkCore.DistributedEvents.EventOutboxDbContextModelBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ConfigureEventOutbox(ModelBuilder builder);
}
public interface Volo.Abp.EntityFrameworkCore.DistributedEvents.IDbContextEventInbox`1 {
}
public interface Volo.Abp.EntityFrameworkCore.DistributedEvents.IDbContextEventOutbox`1 {
}
public interface Volo.Abp.EntityFrameworkCore.DistributedEvents.IHasEventInbox {
    [NullableAttribute("1")]
public DbSet`1<IncomingEventRecord> IncomingEvents { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual DbSet`1<IncomingEventRecord> get_IncomingEvents();
    [NullableContextAttribute("1")]
public abstract virtual void set_IncomingEvents(DbSet`1<IncomingEventRecord> value);
}
public interface Volo.Abp.EntityFrameworkCore.DistributedEvents.IHasEventOutbox {
    [NullableAttribute("1")]
public DbSet`1<OutgoingEventRecord> OutgoingEvents { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual DbSet`1<OutgoingEventRecord> get_OutgoingEvents();
    [NullableContextAttribute("1")]
public abstract virtual void set_OutgoingEvents(DbSet`1<OutgoingEventRecord> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DistributedEvents.IncomingEventRecord : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private static int <MaxEventNameLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtraPropertyDictionary <ExtraProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EventData>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Processed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ProcessedTime>k__BackingField;
    public static int MaxEventNameLength { get; public set; }
    public ExtraPropertyDictionary ExtraProperties { get; private set; }
    public string MessageId { get; private set; }
    public string EventName { get; private set; }
    public Byte[] EventData { get; private set; }
    public DateTime CreationTime { get; private set; }
    public bool Processed { get; public set; }
    public Nullable`1<DateTime> ProcessedTime { get; public set; }
    public IncomingEventRecord(IncomingEventInfo eventInfo);
    private static IncomingEventRecord();
    [CompilerGeneratedAttribute]
public static int get_MaxEventNameLength();
    [CompilerGeneratedAttribute]
public static void set_MaxEventNameLength(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtraPropertyDictionary get_ExtraProperties();
    [CompilerGeneratedAttribute]
private void set_ExtraProperties(ExtraPropertyDictionary value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
private void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
private void set_EventName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_EventData();
    [CompilerGeneratedAttribute]
private void set_EventData(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
private void set_CreationTime(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_Processed();
    [CompilerGeneratedAttribute]
public void set_Processed(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ProcessedTime();
    [CompilerGeneratedAttribute]
public void set_ProcessedTime(Nullable`1<DateTime> value);
    public IncomingEventInfo ToIncomingEventInfo();
    public void MarkAsProcessed(DateTime processedTime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.DistributedEvents.OutgoingEventRecord : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private static int <MaxEventNameLength>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtraPropertyDictionary <ExtraProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventName>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EventData>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public static int MaxEventNameLength { get; public set; }
    public ExtraPropertyDictionary ExtraProperties { get; private set; }
    public string EventName { get; private set; }
    public Byte[] EventData { get; private set; }
    public DateTime CreationTime { get; private set; }
    public OutgoingEventRecord(OutgoingEventInfo eventInfo);
    private static OutgoingEventRecord();
    [CompilerGeneratedAttribute]
public static int get_MaxEventNameLength();
    [CompilerGeneratedAttribute]
public static void set_MaxEventNameLength(int value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtraPropertyDictionary get_ExtraProperties();
    [CompilerGeneratedAttribute]
private void set_ExtraProperties(ExtraPropertyDictionary value);
    [CompilerGeneratedAttribute]
public string get_EventName();
    [CompilerGeneratedAttribute]
private void set_EventName(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_EventData();
    [CompilerGeneratedAttribute]
private void set_EventData(Byte[] value);
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
private void set_CreationTime(DateTime value);
    public OutgoingEventInfo ToOutgoingEventInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.EfCoreAsyncQueryableProvider : object {
    public sealed virtual bool CanExecute(IQueryable`1<T> queryable);
    public sealed virtual Task`1<bool> ContainsAsync(IQueryable`1<T> queryable, T item, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AnyAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> AllAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> CountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> LongCountAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> FirstOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> LastOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> SingleOrDefaultAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, bool>> predicate, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> MinAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> MinAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<T> MaxAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<TResult> MaxAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, TResult>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> SumAsync(IQueryable`1<decimal> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> SumAsync(IQueryable`1<int> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<int> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<int>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> SumAsync(IQueryable`1<long> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<long> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<long>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> SumAsync(IQueryable`1<double> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> SumAsync(IQueryable`1<float> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> SumAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> AverageAsync(IQueryable`1<decimal> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<decimal> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, decimal>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<int> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, int>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<long> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, long>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<double> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<double> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, double>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> AverageAsync(IQueryable`1<float> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<float> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, float>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<T> queryable, Expression`1<Func`2<T, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    public sealed virtual Task`1<List`1<T>> ToListAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
    public sealed virtual Task`1<T[]> ToArrayAsync(IQueryable`1<T> queryable, CancellationToken cancellationToken);
}
public enum Volo.Abp.EntityFrameworkCore.EfCoreDatabaseProvider : Enum {
    public int value__;
    public static EfCoreDatabaseProvider SqlServer;
    public static EfCoreDatabaseProvider MySql;
    public static EfCoreDatabaseProvider Oracle;
    public static EfCoreDatabaseProvider PostgreSql;
    public static EfCoreDatabaseProvider Sqlite;
    public static EfCoreDatabaseProvider InMemory;
    public static EfCoreDatabaseProvider Cosmos;
    public static EfCoreDatabaseProvider Firebird;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.EfCoreDbContextTypeProvider : object {
    private AbpDbContextOptions _options;
    private ICurrentTenant _currentTenant;
    public EfCoreDbContextTypeProvider(IOptions`1<AbpDbContextOptions> options, ICurrentTenant currentTenant);
    public virtual Type GetDbContextType(Type dbContextType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.EntityHistory.EntityHistoryHelper : object {
    [CompilerGeneratedAttribute]
private ILogger`1<EntityHistoryHelper> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuditingStore <AuditingStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IJsonSerializer <JsonSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpAuditingOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IAuditingHelper <AuditingHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IClock <Clock>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private AbpEfCoreNavigationHelper <AbpEfCoreNavigationHelper>k__BackingField;
    public ILogger`1<EntityHistoryHelper> Logger { get; public set; }
    protected IAuditingStore AuditingStore { get; }
    protected IJsonSerializer JsonSerializer { get; }
    protected AbpAuditingOptions Options { get; }
    protected IAuditingHelper AuditingHelper { get; }
    protected IClock Clock { get; }
    [NullableAttribute("2")]
protected AbpEfCoreNavigationHelper AbpEfCoreNavigationHelper { get; protected set; }
    public EntityHistoryHelper(IAuditingStore auditingStore, IOptions`1<AbpAuditingOptions> options, IClock clock, IJsonSerializer jsonSerializer, IAuditingHelper auditingHelper);
    [CompilerGeneratedAttribute]
public ILogger`1<EntityHistoryHelper> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<EntityHistoryHelper> value);
    [CompilerGeneratedAttribute]
protected IAuditingStore get_AuditingStore();
    [CompilerGeneratedAttribute]
protected IJsonSerializer get_JsonSerializer();
    [CompilerGeneratedAttribute]
protected AbpAuditingOptions get_Options();
    [CompilerGeneratedAttribute]
protected IAuditingHelper get_AuditingHelper();
    [CompilerGeneratedAttribute]
protected IClock get_Clock();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected AbpEfCoreNavigationHelper get_AbpEfCoreNavigationHelper();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected void set_AbpEfCoreNavigationHelper(AbpEfCoreNavigationHelper value);
    public sealed virtual void InitializeNavigationHelper(AbpEfCoreNavigationHelper abpEfCoreNavigationHelper);
    public virtual List`1<EntityChangeInfo> CreateChangeList(ICollection`1<EntityEntry> entityEntries);
    protected virtual EntityChangeInfo CreateEntityChangeOrNull(EntityEntry entityEntry);
    protected virtual Nullable`1<Guid> GetTenantId(object entity);
    protected virtual DateTime GetChangeTime(EntityChangeInfo entityChange);
    protected virtual string GetEntityId(object entityAsObj);
    protected virtual List`1<EntityPropertyChangeInfo> GetPropertyChanges(EntityEntry entityEntry);
    protected virtual bool IsCreated(EntityEntry entityEntry);
    protected virtual bool IsDeleted(EntityEntry entityEntry);
    protected virtual bool IsSoftDeleted(EntityEntry entityEntry);
    protected virtual bool ShouldSaveEntityHistory(EntityEntry entityEntry, bool defaultValue);
    protected virtual bool HasNavigationPropertiesChanged(EntityEntry entityEntry);
    protected virtual bool ShouldSavePropertyHistory(PropertyEntry propertyEntry, bool defaultValue);
    protected virtual bool IsBaseAuditProperty(PropertyInfo propertyInfo, Type entityType);
    public virtual void UpdateChangeList(List`1<EntityChangeInfo> entityChanges);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.EntityFrameworkCore.EntityHistory.IEntityHistoryHelper {
    public abstract virtual void InitializeNavigationHelper(AbpEfCoreNavigationHelper abpEfCoreNavigationHelper);
    public abstract virtual List`1<EntityChangeInfo> CreateChangeList(ICollection`1<EntityEntry> entityEntries);
    public abstract virtual void UpdateChangeList(List`1<EntityChangeInfo> entityChanges);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.EntityHistory.NullEntityHistoryHelper : object {
    [CompilerGeneratedAttribute]
private static NullEntityHistoryHelper <Instance>k__BackingField;
    public static NullEntityHistoryHelper Instance { get; }
    private static NullEntityHistoryHelper();
    [CompilerGeneratedAttribute]
public static NullEntityHistoryHelper get_Instance();
    public sealed virtual void InitializeNavigationHelper(AbpEfCoreNavigationHelper abpEfCoreNavigationHelper);
    public sealed virtual List`1<EntityChangeInfo> CreateChangeList(ICollection`1<EntityEntry> entityEntries);
    public sealed virtual void UpdateChangeList(List`1<EntityChangeInfo> entityChanges);
}
[ExtensionAttribute]
public static class Volo.Abp.EntityFrameworkCore.EntityTypeBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static EntityTypeBuilder`1<TEntity> HasAbpQueryFilter(EntityTypeBuilder`1<TEntity> builder, Expression`1<Func`2<TEntity, bool>> filter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.GlobalFilters.AbpCompiledQueryCacheKeyGenerator : object {
    [CompilerGeneratedAttribute]
private ICompiledQueryCacheKeyGenerator <InnerCompiledQueryCacheKeyGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    protected ICompiledQueryCacheKeyGenerator InnerCompiledQueryCacheKeyGenerator { get; }
    protected ICurrentDbContext CurrentContext { get; }
    public AbpCompiledQueryCacheKeyGenerator(ICompiledQueryCacheKeyGenerator innerCompiledQueryCacheKeyGenerator, ICurrentDbContext currentContext);
    [CompilerGeneratedAttribute]
protected ICompiledQueryCacheKeyGenerator get_InnerCompiledQueryCacheKeyGenerator();
    [CompilerGeneratedAttribute]
protected ICurrentDbContext get_CurrentContext();
    public virtual object GenerateCacheKey(Expression query, bool async);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.GlobalFilters.AbpEfCoreCurrentDbContext : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncLocal`1<IAbpEfCoreDbFunctionContext> _current;
    public IAbpEfCoreDbFunctionContext Context { get; }
    public IAbpEfCoreDbFunctionContext get_Context();
    [NullableContextAttribute("1")]
public IDisposable Use(IAbpEfCoreDbFunctionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.EntityFrameworkCore.GlobalFilters.AbpEfCoreDataFilterDbFunctionMethods : object {
    public static string NotSupportedExceptionMessage;
    public static MethodInfo SoftDeleteFilterMethodInfo { get; }
    public static MethodInfo MultiTenantFilterMethodInfo { get; }
    public static bool SoftDeleteFilter(bool isDeleted, bool boolParam);
    public static MethodInfo get_SoftDeleteFilterMethodInfo();
    public static bool MultiTenantFilter(Nullable`1<Guid> tenantId, Nullable`1<Guid> currentTenantId, bool boolParam);
    public static MethodInfo get_MultiTenantFilterMethodInfo();
}
public class Volo.Abp.EntityFrameworkCore.GlobalFilters.AbpEfCoreGlobalFilterOptions : object {
    [CompilerGeneratedAttribute]
private bool <UseDbFunction>k__BackingField;
    public bool UseDbFunction { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_UseDbFunction();
    [CompilerGeneratedAttribute]
public void set_UseDbFunction(bool value);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.EntityFrameworkCore.GlobalFilters.IAbpEfCoreDbFunctionContext {
    public IAbpLazyServiceProvider LazyServiceProvider { get; public set; }
    public ICurrentTenant CurrentTenant { get; }
    public IDataFilter DataFilter { get; }
    public abstract virtual IAbpLazyServiceProvider get_LazyServiceProvider();
    public abstract virtual void set_LazyServiceProvider(IAbpLazyServiceProvider value);
    public abstract virtual ICurrentTenant get_CurrentTenant();
    public abstract virtual IDataFilter get_DataFilter();
    public abstract virtual string GetCompiledQueryCacheKey();
}
public interface Volo.Abp.EntityFrameworkCore.IAbpEfCoreDbContext {
    [NullableContextAttribute("1")]
public abstract virtual void Initialize(AbpEfCoreDbContextInitializationContext initializationContext);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.EntityFrameworkCore.IDbContextProvider`1 {
    [ObsoleteAttribute("Use GetDbContextAsync method.")]
public abstract virtual TDbContext GetDbContext();
    public abstract virtual Task`1<TDbContext> GetDbContextAsync();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.EntityFrameworkCore.IEfCoreDbContext {
    public DatabaseFacade Database { get; }
    public ChangeTracker ChangeTracker { get; }
    public abstract virtual EntityEntry`1<TEntity> Attach(TEntity entity);
    public abstract virtual EntityEntry Attach(object entity);
    public abstract virtual int SaveChanges();
    public abstract virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    public abstract virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    public abstract virtual Task`1<int> SaveChangesOnDbContextAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public abstract virtual DbSet`1<T> Set();
    public abstract virtual DatabaseFacade get_Database();
    public abstract virtual ChangeTracker get_ChangeTracker();
    public abstract virtual EntityEntry Add(object entity);
    public abstract virtual EntityEntry`1<TEntity> Add(TEntity entity);
    public abstract virtual ValueTask`1<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<EntityEntry`1<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken);
    public abstract virtual void AddRange(IEnumerable`1<object> entities);
    public abstract virtual void AddRange(Object[] entities);
    public abstract virtual Task AddRangeAsync(Object[] entities);
    public abstract virtual Task AddRangeAsync(IEnumerable`1<object> entities, CancellationToken cancellationToken);
    public abstract virtual void AttachRange(IEnumerable`1<object> entities);
    public abstract virtual void AttachRange(Object[] entities);
    public abstract virtual EntityEntry`1<TEntity> Entry(TEntity entity);
    public abstract virtual EntityEntry Entry(object entity);
    public abstract virtual object Find(Type entityType, Object[] keyValues);
    public abstract virtual TEntity Find(Object[] keyValues);
    public abstract virtual ValueTask`1<object> FindAsync(Type entityType, Object[] keyValues, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues);
    public abstract virtual ValueTask`1<object> FindAsync(Type entityType, Object[] keyValues);
    public abstract virtual EntityEntry`1<TEntity> Remove(TEntity entity);
    public abstract virtual EntityEntry Remove(object entity);
    public abstract virtual void RemoveRange(IEnumerable`1<object> entities);
    public abstract virtual void RemoveRange(Object[] entities);
    public abstract virtual EntityEntry`1<TEntity> Update(TEntity entity);
    public abstract virtual EntityEntry Update(object entity);
    public abstract virtual void UpdateRange(Object[] entities);
    public abstract virtual void UpdateRange(IEnumerable`1<object> entities);
}
[NullableContextAttribute("1")]
public interface Volo.Abp.EntityFrameworkCore.IEfCoreDbContextTypeProvider {
    public abstract virtual Type GetDbContextType(Type dbContextType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1 : object {
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    protected static string TryCountPropertyName;
    [CompilerGeneratedAttribute]
private int <MaxEventTryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinValueToWaitOnFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValueToWaitOnFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DistributedLockAcquireTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantStore <TenantStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedEventBus <DistributedEventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpDistributedLock <DistributedLock>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<EfCoreDatabaseMigrationEventHandlerBase`1<TDbContext>> <Logger>k__BackingField;
    protected string DatabaseName { get; }
    protected int MaxEventTryCount { get; protected set; }
    protected int MinValueToWaitOnFailure { get; protected set; }
    protected int MaxValueToWaitOnFailure { get; protected set; }
    protected TimeSpan DistributedLockAcquireTimeout { get; protected set; }
    protected ICurrentTenant CurrentTenant { get; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    protected ITenantStore TenantStore { get; }
    protected IDistributedEventBus DistributedEventBus { get; }
    protected IAbpDistributedLock DistributedLock { get; }
    protected ILogger`1<EfCoreDatabaseMigrationEventHandlerBase`1<TDbContext>> Logger { get; }
    protected EfCoreDatabaseMigrationEventHandlerBase`1(string databaseName, ICurrentTenant currentTenant, IUnitOfWorkManager unitOfWorkManager, ITenantStore tenantStore, IAbpDistributedLock abpDistributedLock, IDistributedEventBus distributedEventBus, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
protected string get_DatabaseName();
    [CompilerGeneratedAttribute]
protected int get_MaxEventTryCount();
    [CompilerGeneratedAttribute]
protected void set_MaxEventTryCount(int value);
    [CompilerGeneratedAttribute]
protected int get_MinValueToWaitOnFailure();
    [CompilerGeneratedAttribute]
protected void set_MinValueToWaitOnFailure(int value);
    [CompilerGeneratedAttribute]
protected int get_MaxValueToWaitOnFailure();
    [CompilerGeneratedAttribute]
protected void set_MaxValueToWaitOnFailure(int value);
    [CompilerGeneratedAttribute]
protected TimeSpan get_DistributedLockAcquireTimeout();
    [CompilerGeneratedAttribute]
protected void set_DistributedLockAcquireTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
protected ITenantStore get_TenantStore();
    [CompilerGeneratedAttribute]
protected IDistributedEventBus get_DistributedEventBus();
    [CompilerGeneratedAttribute]
protected IAbpDistributedLock get_DistributedLock();
    [CompilerGeneratedAttribute]
protected ILogger`1<EfCoreDatabaseMigrationEventHandlerBase`1<TDbContext>> get_Logger();
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<HandleEventAsync>d__39")]
public virtual Task HandleEventAsync(ApplyDatabaseMigrationsEto eventData);
    protected virtual Task AfterApplyDatabaseMigrations(ApplyDatabaseMigrationsEto eventData, bool schemaMigrated);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<HandleEventAsync>d__41")]
public virtual Task HandleEventAsync(TenantCreatedEto eventData);
    protected virtual Task AfterTenantCreated(TenantCreatedEto eventData, bool schemaMigrated);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<HandleEventAsync>d__43")]
public virtual Task HandleEventAsync(TenantConnectionStringUpdatedEto eventData);
    protected virtual Task AfterTenantConnectionStringUpdated(TenantConnectionStringUpdatedEto eventData, bool schemaMigrated);
    protected virtual Task SeedAsync(Nullable`1<Guid> tenantId);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<MigrateDatabaseSchemaAsync>d__46")]
protected virtual Task`1<bool> MigrateDatabaseSchemaAsync(Nullable`1<Guid> tenantId);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<HandleErrorOnApplyDatabaseMigrationAsync>d__47")]
protected virtual Task HandleErrorOnApplyDatabaseMigrationAsync(ApplyDatabaseMigrationsEto eventData, Exception exception);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<HandleErrorTenantCreatedAsync>d__48")]
protected virtual Task HandleErrorTenantCreatedAsync(TenantCreatedEto eventData, Exception exception);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<HandleErrorTenantConnectionStringUpdatedAsync>d__49")]
protected virtual Task HandleErrorTenantConnectionStringUpdatedAsync(TenantConnectionStringUpdatedEto eventData, Exception exception);
    private static int GetEventTryCount(EtoBase eventData);
    private static void SetEventTryCount(EtoBase eventData, int count);
    private static int IncrementEventTryCount(EtoBase eventData);
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreDatabaseMigrationEventHandlerBase`1/<<MigrateDatabaseSchemaAsync>g__WaitForDistributedLockAsync|46_0>d")]
[CompilerGeneratedAttribute]
private Task`1<IAsyncDisposable> <MigrateDatabaseSchemaAsync>g__WaitForDistributedLockAsync|46_0(TDbContext dbContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.EntityFrameworkCore.Migrations.EfCoreRuntimeDatabaseMigratorBase`1 : object {
    [CompilerGeneratedAttribute]
private int <MinValueToWaitOnFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxValueToWaitOnFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AlwaysSeedTenantDatabases>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpDistributedLock <DistributedLock>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedEventBus <DistributedEventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<EfCoreRuntimeDatabaseMigratorBase`1<TDbContext>> <Logger>k__BackingField;
    protected int MinValueToWaitOnFailure { get; protected set; }
    protected int MaxValueToWaitOnFailure { get; protected set; }
    protected string DatabaseName { get; }
    protected bool AlwaysSeedTenantDatabases { get; protected set; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    protected IServiceProvider ServiceProvider { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected IAbpDistributedLock DistributedLock { get; }
    protected IDistributedEventBus DistributedEventBus { get; }
    protected ILogger`1<EfCoreRuntimeDatabaseMigratorBase`1<TDbContext>> Logger { get; }
    protected EfCoreRuntimeDatabaseMigratorBase`1(string databaseName, IUnitOfWorkManager unitOfWorkManager, IServiceProvider serviceProvider, ICurrentTenant currentTenant, IAbpDistributedLock abpDistributedLock, IDistributedEventBus distributedEventBus, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
protected int get_MinValueToWaitOnFailure();
    [CompilerGeneratedAttribute]
protected void set_MinValueToWaitOnFailure(int value);
    [CompilerGeneratedAttribute]
protected int get_MaxValueToWaitOnFailure();
    [CompilerGeneratedAttribute]
protected void set_MaxValueToWaitOnFailure(int value);
    [CompilerGeneratedAttribute]
protected string get_DatabaseName();
    [CompilerGeneratedAttribute]
protected bool get_AlwaysSeedTenantDatabases();
    [CompilerGeneratedAttribute]
protected void set_AlwaysSeedTenantDatabases(bool value);
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
protected IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IAbpDistributedLock get_DistributedLock();
    [CompilerGeneratedAttribute]
protected IDistributedEventBus get_DistributedEventBus();
    [CompilerGeneratedAttribute]
protected ILogger`1<EfCoreRuntimeDatabaseMigratorBase`1<TDbContext>> get_Logger();
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreRuntimeDatabaseMigratorBase`1/<CheckAndApplyDatabaseMigrationsAsync>d__34")]
public virtual Task CheckAndApplyDatabaseMigrationsAsync();
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreRuntimeDatabaseMigratorBase`1/<LockAndApplyDatabaseMigrationsAsync>d__35")]
protected virtual Task LockAndApplyDatabaseMigrationsAsync();
    protected virtual Task SeedAsync();
    [AsyncStateMachineAttribute("Volo.Abp.EntityFrameworkCore.Migrations.EfCoreRuntimeDatabaseMigratorBase`1/<TryAsync>d__37")]
protected virtual Task TryAsync(Func`1<Task> task, int maxTryCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.EntityFrameworkCore.Modeling.AbpEntityTypeBuilderExtensions : object {
    [ExtensionAttribute]
public static void ConfigureByConvention(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureConcurrencyStamp(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureConcurrencyStamp(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureExtraProperties(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureExtraProperties(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureObjectExtensions(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureObjectExtensions(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ApplyObjectExtensionMappings(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureSoftDelete(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureSoftDelete(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureDeletionTime(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureDeletionTime(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureMayHaveCreator(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureMayHaveCreator(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureMustHaveCreator(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureMustHaveCreator(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureDeletionAudited(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureDeletionAudited(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureCreationTime(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureCreationTime(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureCreationAudited(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureCreationAudited(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureLastModificationTime(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureLastModificationTime(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureModificationAudited(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureModificationAudited(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureAudited(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureAudited(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureFullAudited(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureFullAudited(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureMultiTenant(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void TryConfigureMultiTenant(EntityTypeBuilder b);
    [ExtensionAttribute]
public static void ConfigureCreationAuditedAggregateRoot(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void ConfigureAuditedAggregateRoot(EntityTypeBuilder`1<T> b);
    [ExtensionAttribute]
public static void ConfigureFullAuditedAggregateRoot(EntityTypeBuilder`1<T> b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.EntityFrameworkCore.Modeling.AbpModelBuilderConfigurationOptions : object {
    private string _tablePrefix;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    public string TablePrefix { get; public set; }
    [NullableAttribute("2")]
public string Schema { get; public set; }
    public AbpModelBuilderConfigurationOptions(string tablePrefix, string schema);
    public string get_TablePrefix();
    public void set_TablePrefix(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Schema();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Schema(string value);
}
[ExtensionAttribute]
public static class Volo.Abp.EntityFrameworkCore.Modeling.AbpModelBuilderObjectExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void TryConfigureObjectExtensions(ModelBuilder modelBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Volo.Abp.EntityFrameworkCore.QueryFilterExpressionHelper : object {
    public static Expression`1<Func`2<T, bool>> CombineExpressions(Expression`1<Func`2<T, bool>> expression1, Expression`1<Func`2<T, bool>> expression2);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.EntityFrameworkCore.ValueComparers.ExtraPropertyDictionaryValueComparer : ValueComparer`1<ExtraPropertyDictionary> {
    private static bool Compare(ExtraPropertyDictionary a, ExtraPropertyDictionary b);
}
public class Volo.Abp.EntityFrameworkCore.ValueConverters.AbpDateTimeValueConverter : ValueConverter`2<DateTime, DateTime> {
    [NullableContextAttribute("1")]
public AbpDateTimeValueConverter(IClock clock, ConverterMappingHints mappingHints);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.EntityFrameworkCore.ValueConverters.AbpJsonValueConverter`1 : ValueConverter`2<TPropertyType, string> {
    public static JsonSerializerOptions SerializeOptions;
    public static JsonSerializerOptions DeserializeOptions;
    private static AbpJsonValueConverter`1();
    private static string SerializeObject(TPropertyType d);
    private static TPropertyType DeserializeObject(string s);
}
public class Volo.Abp.EntityFrameworkCore.ValueConverters.AbpNullableDateTimeValueConverter : ValueConverter`2<Nullable`1<DateTime>, Nullable`1<DateTime>> {
    [NullableContextAttribute("1")]
public AbpNullableDateTimeValueConverter(IClock clock, ConverterMappingHints mappingHints);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.EntityFrameworkCore.ValueConverters.ExtraPropertiesValueConverter : ValueConverter`2<ExtraPropertyDictionary, string> {
    public static JsonSerializerOptions SerializeOptions;
    public static JsonSerializerOptions DeserializeOptions;
    public ExtraPropertiesValueConverter(Type entityType);
    private static ExtraPropertiesValueConverter();
    private static string SerializeObject(ExtraPropertyDictionary extraProperties, Type entityType);
    private static ExtraPropertyDictionary DeserializeObject(string extraPropertiesAsJson, Type entityType);
    private static object GetNormalizedValue(Dictionary`2<string, object> dictionary, ObjectExtensionPropertyInfo property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.ObjectExtending.EfCoreObjectExtensionInfoExtensions : object {
    public static string EfCoreDbContextConfigurationName;
    public static string EfCoreEntityConfigurationName;
    [ExtensionAttribute]
[ObsoleteAttribute("Use MapEfCoreProperty with EntityTypeAndPropertyBuildAction parameters.")]
public static ObjectExtensionInfo MapEfCoreProperty(ObjectExtensionInfo objectExtensionInfo, string propertyName, Action`1<PropertyBuilder> propertyBuildAction);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MapEfCoreProperty with EntityTypeAndPropertyBuildAction parameters.")]
public static ObjectExtensionInfo MapEfCoreProperty(ObjectExtensionInfo objectExtensionInfo, Type propertyType, string propertyName, Action`1<PropertyBuilder> propertyBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionInfo MapEfCoreProperty(ObjectExtensionInfo objectExtensionInfo, string propertyName, Action`2<EntityTypeBuilder, PropertyBuilder> entityTypeAndPropertyBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionInfo MapEfCoreProperty(ObjectExtensionInfo objectExtensionInfo, Type propertyType, string propertyName, Action`2<EntityTypeBuilder, PropertyBuilder> entityTypeAndPropertyBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionInfo MapEfCoreEntity(ObjectExtensionInfo objectExtensionInfo, Action`1<EntityTypeBuilder> entityTypeBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionInfo MapEfCoreDbContext(ObjectExtensionInfo objectExtensionInfo, Action`1<ModelBuilder> modelBuildAction);
    [ExtensionAttribute]
public static List`1<ObjectExtensionInfoEfCoreMappingOptions> GetEfCoreEntityMappings(ObjectExtensionInfo objectExtensionInfo);
    [ExtensionAttribute]
public static List`1<ObjectExtensionInfoEfCoreMappingOptions> GetEfCoreDbContextMappings(ObjectExtensionInfo objectExtensionInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.ObjectExtending.EfCoreObjectExtensionManagerExtensions : object {
    [ExtensionAttribute]
public static ObjectExtensionManager MapEfCoreDbContext(ObjectExtensionManager objectExtensionManager, Action`1<ModelBuilder> modelBuilderAction);
    [ExtensionAttribute]
public static ObjectExtensionManager MapEfCoreEntity(ObjectExtensionManager objectExtensionManager, Action`1<EntityTypeBuilder> entityTypeBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionManager MapEfCoreEntity(ObjectExtensionManager objectExtensionManager, Type entityType, Action`1<EntityTypeBuilder> entityTypeBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionManager MapEfCoreProperty(ObjectExtensionManager objectExtensionManager, string propertyName);
    [ExtensionAttribute]
public static ObjectExtensionManager MapEfCoreProperty(ObjectExtensionManager objectExtensionManager, Type entityType, Type propertyType, string propertyName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MapEfCoreProperty with EntityTypeAndPropertyBuildAction parameters.")]
public static ObjectExtensionManager MapEfCoreProperty(ObjectExtensionManager objectExtensionManager, string propertyName, Action`1<PropertyBuilder> propertyBuildAction);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MapEfCoreProperty with EntityTypeAndPropertyBuildAction parameters.")]
public static ObjectExtensionManager MapEfCoreProperty(ObjectExtensionManager objectExtensionManager, Type entityType, Type propertyType, string propertyName, Action`1<PropertyBuilder> propertyBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionManager MapEfCoreProperty(ObjectExtensionManager objectExtensionManager, string propertyName, Action`2<EntityTypeBuilder, PropertyBuilder> entityTypeAndPropertyBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionManager MapEfCoreProperty(ObjectExtensionManager objectExtensionManager, Type entityType, Type propertyType, string propertyName, Action`2<EntityTypeBuilder, PropertyBuilder> entityTypeAndPropertyBuildAction);
    [ExtensionAttribute]
public static void ConfigureEfCoreEntity(ObjectExtensionManager objectExtensionManager, EntityTypeBuilder typeBuilder);
    [ExtensionAttribute]
public static void ConfigureEfCoreDbContext(ObjectExtensionManager objectExtensionManager, ModelBuilder modelBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.ObjectExtending.EfCoreObjectExtensionPropertyInfoExtensions : object {
    public static string EfCorePropertyConfigurationName;
    [ExtensionAttribute]
public static ObjectExtensionPropertyInfo MapEfCore(ObjectExtensionPropertyInfo propertyExtension);
    [ExtensionAttribute]
[ObsoleteAttribute("Use MapEfCore with EntityTypeAndPropertyBuildAction parameters.")]
public static ObjectExtensionPropertyInfo MapEfCore(ObjectExtensionPropertyInfo propertyExtension, Action`1<PropertyBuilder> propertyBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionPropertyInfo MapEfCore(ObjectExtensionPropertyInfo propertyExtension, Action`2<EntityTypeBuilder, PropertyBuilder> entityTypeAndPropertyBuildAction);
    [ExtensionAttribute]
public static ObjectExtensionPropertyInfoEfCoreMappingOptions GetEfCoreMappingOrNull(ObjectExtensionPropertyInfo propertyExtension);
    [ExtensionAttribute]
public static bool IsMappedToFieldForEfCore(ObjectExtensionPropertyInfo propertyExtension);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.ObjectExtending.ObjectExtensionInfoEfCoreMappingOptions : object {
    [CompilerGeneratedAttribute]
private ObjectExtensionInfo <ObjectExtension>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<EntityTypeBuilder> <EntityTypeBuildAction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<ModelBuilder> <ModelBuildAction>k__BackingField;
    public ObjectExtensionInfo ObjectExtension { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<EntityTypeBuilder> EntityTypeBuildAction { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`1<ModelBuilder> ModelBuildAction { get; public set; }
    public ObjectExtensionInfoEfCoreMappingOptions(ObjectExtensionInfo objectExtension, Action`1<EntityTypeBuilder> entityTypeBuildAction);
    public ObjectExtensionInfoEfCoreMappingOptions(ObjectExtensionInfo objectExtension, Action`1<ModelBuilder> modelBuildAction);
    [CompilerGeneratedAttribute]
public ObjectExtensionInfo get_ObjectExtension();
    [CompilerGeneratedAttribute]
public Action`1<EntityTypeBuilder> get_EntityTypeBuildAction();
    [CompilerGeneratedAttribute]
public void set_EntityTypeBuildAction(Action`1<EntityTypeBuilder> value);
    [CompilerGeneratedAttribute]
public Action`1<ModelBuilder> get_ModelBuildAction();
    [CompilerGeneratedAttribute]
public void set_ModelBuildAction(Action`1<ModelBuilder> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.ObjectExtending.ObjectExtensionPropertyInfoEfCoreMappingOptions : object {
    [CompilerGeneratedAttribute]
private ObjectExtensionPropertyInfo <ExtensionProperty>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`1<PropertyBuilder> <PropertyBuildAction>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private Action`2<EntityTypeBuilder, PropertyBuilder> <EntityTypeAndPropertyBuildAction>k__BackingField;
    public ObjectExtensionPropertyInfo ExtensionProperty { get; }
    public ObjectExtensionInfo ObjectExtension { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[ObsoleteAttribute("Use EntityTypeAndPropertyBuildAction property.")]
public Action`1<PropertyBuilder> PropertyBuildAction { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Action`2<EntityTypeBuilder, PropertyBuilder> EntityTypeAndPropertyBuildAction { get; public set; }
    [ObsoleteAttribute("Use other constructors.")]
public ObjectExtensionPropertyInfoEfCoreMappingOptions(ObjectExtensionPropertyInfo extensionProperty, Action`1<PropertyBuilder> propertyBuildAction, Action`2<EntityTypeBuilder, PropertyBuilder> entityTypeAndPropertyBuildAction);
    public ObjectExtensionPropertyInfoEfCoreMappingOptions(ObjectExtensionPropertyInfo extensionProperty);
    public ObjectExtensionPropertyInfoEfCoreMappingOptions(ObjectExtensionPropertyInfo extensionProperty, Action`2<EntityTypeBuilder, PropertyBuilder> entityTypeAndPropertyBuildAction);
    [CompilerGeneratedAttribute]
public ObjectExtensionPropertyInfo get_ExtensionProperty();
    public ObjectExtensionInfo get_ObjectExtension();
    [CompilerGeneratedAttribute]
public Action`1<PropertyBuilder> get_PropertyBuildAction();
    [CompilerGeneratedAttribute]
public void set_PropertyBuildAction(Action`1<PropertyBuilder> value);
    [CompilerGeneratedAttribute]
public Action`2<EntityTypeBuilder, PropertyBuilder> get_EntityTypeAndPropertyBuildAction();
    [CompilerGeneratedAttribute]
public void set_EntityTypeAndPropertyBuildAction(Action`2<EntityTypeBuilder, PropertyBuilder> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Uow.EntityFrameworkCore.EfCoreDatabaseApi : object {
    [CompilerGeneratedAttribute]
private IEfCoreDbContext <DbContext>k__BackingField;
    public IEfCoreDbContext DbContext { get; }
    public EfCoreDatabaseApi(IEfCoreDbContext dbContext);
    [CompilerGeneratedAttribute]
public IEfCoreDbContext get_DbContext();
    public sealed virtual Task SaveChangesAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Uow.EntityFrameworkCore.EfCoreTransactionApi : object {
    [CompilerGeneratedAttribute]
private IDbContextTransaction <DbContextTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private IEfCoreDbContext <StarterDbContext>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEfCoreDbContext> <AttendedDbContexts>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    public IDbContextTransaction DbContextTransaction { get; }
    public IEfCoreDbContext StarterDbContext { get; }
    public List`1<IEfCoreDbContext> AttendedDbContexts { get; }
    protected ICancellationTokenProvider CancellationTokenProvider { get; }
    public EfCoreTransactionApi(IDbContextTransaction dbContextTransaction, IEfCoreDbContext starterDbContext, ICancellationTokenProvider cancellationTokenProvider);
    [CompilerGeneratedAttribute]
public IDbContextTransaction get_DbContextTransaction();
    [CompilerGeneratedAttribute]
public IEfCoreDbContext get_StarterDbContext();
    [CompilerGeneratedAttribute]
public List`1<IEfCoreDbContext> get_AttendedDbContexts();
    [CompilerGeneratedAttribute]
protected ICancellationTokenProvider get_CancellationTokenProvider();
    [AsyncStateMachineAttribute("Volo.Abp.Uow.EntityFrameworkCore.EfCoreTransactionApi/<CommitAsync>d__13")]
public sealed virtual Task CommitAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Volo.Abp.Uow.EntityFrameworkCore.EfCoreTransactionApi/<RollbackAsync>d__15")]
public sealed virtual Task RollbackAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Uow.EntityFrameworkCore.UnitOfWorkDbContextProvider`1 : object {
    private static string TransactionsNotSupportedWarningMessage;
    [CompilerGeneratedAttribute]
private ILogger`1<UnitOfWorkDbContextProvider`1<TDbContext>> <Logger>k__BackingField;
    protected IUnitOfWorkManager UnitOfWorkManager;
    protected IConnectionStringResolver ConnectionStringResolver;
    protected ICancellationTokenProvider CancellationTokenProvider;
    protected ICurrentTenant CurrentTenant;
    protected IEfCoreDbContextTypeProvider EfCoreDbContextTypeProvider;
    public ILogger`1<UnitOfWorkDbContextProvider`1<TDbContext>> Logger { get; public set; }
    public UnitOfWorkDbContextProvider`1(IUnitOfWorkManager unitOfWorkManager, IConnectionStringResolver connectionStringResolver, ICancellationTokenProvider cancellationTokenProvider, ICurrentTenant currentTenant, IEfCoreDbContextTypeProvider efCoreDbContextTypeProvider);
    [CompilerGeneratedAttribute]
public ILogger`1<UnitOfWorkDbContextProvider`1<TDbContext>> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<UnitOfWorkDbContextProvider`1<TDbContext>> value);
    [ObsoleteAttribute("Use GetDbContextAsync method.")]
public virtual TDbContext GetDbContext();
    [AsyncStateMachineAttribute("Volo.Abp.Uow.EntityFrameworkCore.UnitOfWorkDbContextProvider`1/<GetDbContextAsync>d__12")]
public virtual Task`1<TDbContext> GetDbContextAsync();
    [ObsoleteAttribute("Use CreateDbContextAsync method.")]
protected virtual TDbContext CreateDbContext(IUnitOfWork unitOfWork, string connectionStringName, string connectionString);
    [AsyncStateMachineAttribute("Volo.Abp.Uow.EntityFrameworkCore.UnitOfWorkDbContextProvider`1/<CreateDbContextAsync>d__14")]
protected virtual Task`1<TDbContext> CreateDbContextAsync(IUnitOfWork unitOfWork, string connectionStringName, string connectionString);
    [ObsoleteAttribute("Use CreateDbContextAsync.")]
protected virtual TDbContext CreateDbContext(IUnitOfWork unitOfWork);
    [AsyncStateMachineAttribute("Volo.Abp.Uow.EntityFrameworkCore.UnitOfWorkDbContextProvider`1/<CreateDbContextAsync>d__16")]
protected virtual Task`1<TDbContext> CreateDbContextAsync(IUnitOfWork unitOfWork);
    [ObsoleteAttribute("Use CreateDbContextWithTransactionAsync.")]
protected virtual TDbContext CreateDbContextWithTransaction(IUnitOfWork unitOfWork);
    [AsyncStateMachineAttribute("Volo.Abp.Uow.EntityFrameworkCore.UnitOfWorkDbContextProvider`1/<CreateDbContextWithTransactionAsync>d__18")]
protected virtual Task`1<TDbContext> CreateDbContextWithTransactionAsync(IUnitOfWork unitOfWork);
    [AsyncStateMachineAttribute("Volo.Abp.Uow.EntityFrameworkCore.UnitOfWorkDbContextProvider`1/<ResolveConnectionStringAsync>d__19")]
protected virtual Task`1<string> ResolveConnectionStringAsync(string connectionStringName);
    [ObsoleteAttribute("Use ResolveConnectionStringAsync method.")]
protected virtual string ResolveConnectionString(string connectionStringName);
    protected virtual CancellationToken GetCancellationToken(CancellationToken preferredValue);
}
internal class VoloAbpEntityFrameworkCore_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
