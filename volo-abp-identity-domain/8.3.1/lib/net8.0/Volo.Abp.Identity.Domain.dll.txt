[ExtensionAttribute]
public static class Microsoft.AspNetCore.Identity.AbpIdentityResultExtensions : object {
    private static Dictionary`2<string, string> IdentityStrings;
    private static AbpIdentityResultExtensions();
    [ExtensionAttribute]
public static void CheckErrors(IdentityResult identityResult);
    [ExtensionAttribute]
public static String[] GetValuesFromErrorMessage(IdentityResult identityResult, IStringLocalizer localizer);
    [ExtensionAttribute]
public static string LocalizeErrors(IdentityResult identityResult, IStringLocalizer localizer);
    [ExtensionAttribute]
public static string LocalizeErrorMessage(IdentityError error, IStringLocalizer localizer);
    [ExtensionAttribute]
public static string GetResultAsString(SignInResult signInResult);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.AbpIdentityServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IdentityBuilder AddAbpIdentity(IServiceCollection services);
    [ExtensionAttribute]
public static IdentityBuilder AddAbpIdentity(IServiceCollection services, Action`1<IdentityOptions> setupAction);
}
public static class Volo.Abp.Identity.AbpIdentityDbProperties : object {
    [CompilerGeneratedAttribute]
private static string <DbTablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DbSchema>k__BackingField;
    public static string ConnectionStringName;
    public static string DbTablePrefix { get; public set; }
    public static string DbSchema { get; public set; }
    private static AbpIdentityDbProperties();
    [CompilerGeneratedAttribute]
public static string get_DbTablePrefix();
    [CompilerGeneratedAttribute]
public static void set_DbTablePrefix(string value);
    [CompilerGeneratedAttribute]
public static string get_DbSchema();
    [CompilerGeneratedAttribute]
public static void set_DbSchema(string value);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Identity.AbpIdentityDomainModule : AbpModule {
    private static OneTimeRunner OneTimeRunner;
    private static AbpIdentityDomainModule();
    public virtual void PreConfigureServices(ServiceConfigurationContext context);
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    public virtual void PostConfigureServices(ServiceConfigurationContext context);
}
public class Volo.Abp.Identity.AbpIdentityOptions : object {
    [CompilerGeneratedAttribute]
private ExternalLoginProviderDictionary <ExternalLoginProviders>k__BackingField;
    public ExternalLoginProviderDictionary ExternalLoginProviders { get; }
    [CompilerGeneratedAttribute]
public ExternalLoginProviderDictionary get_ExternalLoginProviders();
}
public class Volo.Abp.Identity.AbpIdentityOptionsManager : AbpDynamicOptionsManager`1<IdentityOptions> {
    [CompilerGeneratedAttribute]
private ISettingProvider <SettingProvider>k__BackingField;
    protected ISettingProvider SettingProvider { get; }
    public AbpIdentityOptionsManager(IOptionsFactory`1<IdentityOptions> factory, ISettingProvider settingProvider);
    [CompilerGeneratedAttribute]
protected ISettingProvider get_SettingProvider();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.AbpIdentityOptionsManager/<OverrideOptionsAsync>d__4")]
protected virtual Task OverrideOptionsAsync(string name, IdentityOptions options);
}
public class Volo.Abp.Identity.AbpIdentityResultException : BusinessException {
    [CompilerGeneratedAttribute]
private IdentityResult <IdentityResult>k__BackingField;
    public IdentityResult IdentityResult { get; }
    public AbpIdentityResultException(IdentityResult identityResult);
    [CompilerGeneratedAttribute]
public IdentityResult get_IdentityResult();
    public virtual string LocalizeMessage(LocalizationContext context);
    protected virtual void SetData(IStringLocalizer localizer);
}
public class Volo.Abp.Identity.AbpIdentitySettingDefinitionProvider : SettingDefinitionProvider {
    public virtual void Define(ISettingDefinitionContext context);
    private static LocalizableString L(string name);
}
public class Volo.Abp.Identity.AbpIdentityUserValidator : object {
    [CompilerGeneratedAttribute]
private IStringLocalizer`1<IdentityResource> <Localizer>k__BackingField;
    protected IStringLocalizer`1<IdentityResource> Localizer { get; }
    public AbpIdentityUserValidator(IStringLocalizer`1<IdentityResource> localizer);
    [CompilerGeneratedAttribute]
protected IStringLocalizer`1<IdentityResource> get_Localizer();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.AbpIdentityUserValidator/<ValidateAsync>d__4")]
public virtual Task`1<IdentityResult> ValidateAsync(UserManager`1<IdentityUser> manager, IdentityUser user);
}
public class Volo.Abp.Identity.AbpUserClaimsPrincipalFactory : UserClaimsPrincipalFactory`2<IdentityUser, IdentityRole> {
    [CompilerGeneratedAttribute]
private ICurrentPrincipalAccessor <CurrentPrincipalAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpClaimsPrincipalFactory <AbpClaimsPrincipalFactory>k__BackingField;
    protected ICurrentPrincipalAccessor CurrentPrincipalAccessor { get; }
    protected IAbpClaimsPrincipalFactory AbpClaimsPrincipalFactory { get; }
    public AbpUserClaimsPrincipalFactory(UserManager`1<IdentityUser> userManager, RoleManager`1<IdentityRole> roleManager, IOptions`1<IdentityOptions> options, ICurrentPrincipalAccessor currentPrincipalAccessor, IAbpClaimsPrincipalFactory abpClaimsPrincipalFactory);
    [CompilerGeneratedAttribute]
protected ICurrentPrincipalAccessor get_CurrentPrincipalAccessor();
    [CompilerGeneratedAttribute]
protected IAbpClaimsPrincipalFactory get_AbpClaimsPrincipalFactory();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.AbpUserClaimsPrincipalFactory/<CreateAsync>d__7")]
[UnitOfWorkAttribute]
public virtual Task`1<ClaimsPrincipal> CreateAsync(IdentityUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ClaimsPrincipal> <>n__0(IdentityUser user);
}
public abstract class Volo.Abp.Identity.ExternalLoginProviderBase : object {
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityUserManager <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <IdentityUserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptions`1<IdentityOptions> <IdentityOptions>k__BackingField;
    protected IGuidGenerator GuidGenerator { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected IdentityUserManager UserManager { get; }
    protected IIdentityUserRepository IdentityUserRepository { get; }
    protected IOptions`1<IdentityOptions> IdentityOptions { get; }
    protected ExternalLoginProviderBase(IGuidGenerator guidGenerator, ICurrentTenant currentTenant, IdentityUserManager userManager, IIdentityUserRepository identityUserRepository, IOptions`1<IdentityOptions> identityOptions);
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IdentityUserManager get_UserManager();
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_IdentityUserRepository();
    [CompilerGeneratedAttribute]
protected IOptions`1<IdentityOptions> get_IdentityOptions();
    public abstract virtual Task`1<bool> TryAuthenticateAsync(string userName, string plainPassword);
    public abstract virtual Task`1<bool> IsEnabledAsync();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.ExternalLoginProviderBase/<CreateUserAsync>d__18")]
public virtual Task`1<IdentityUser> CreateUserAsync(string userName, string providerName);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.ExternalLoginProviderBase/<CreateUserAsync>d__19")]
protected virtual Task`1<IdentityUser> CreateUserAsync(ExternalLoginUserInfo externalUser, string userName, string providerName);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.ExternalLoginProviderBase/<UpdateUserAsync>d__20")]
public virtual Task UpdateUserAsync(IdentityUser user, string providerName);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.ExternalLoginProviderBase/<UpdateUserAsync>d__21")]
protected virtual Task UpdateUserAsync(IdentityUser user, ExternalLoginUserInfo externalUser, string providerName);
    protected abstract virtual Task`1<ExternalLoginUserInfo> GetUserInfoAsync(string userName);
    protected virtual Task`1<ExternalLoginUserInfo> GetUserInfoAsync(IdentityUser user);
    private static void NormalizeExternalLoginUserInfo(ExternalLoginUserInfo externalUser, string userName);
}
public class Volo.Abp.Identity.ExternalLoginProviderDictionary : Dictionary`2<string, ExternalLoginProviderInfo> {
    public void Add(string name);
}
public class Volo.Abp.Identity.ExternalLoginProviderInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private Type _type;
    public string Name { get; }
    public Type Type { get; public set; }
    public ExternalLoginProviderInfo(string name, Type type);
    [CompilerGeneratedAttribute]
public string get_Name();
    public Type get_Type();
    public void set_Type(Type value);
}
public abstract class Volo.Abp.Identity.ExternalLoginProviderWithPasswordBase : ExternalLoginProviderBase {
    [CompilerGeneratedAttribute]
private bool <CanObtainUserInfoWithoutPassword>k__BackingField;
    public bool CanObtainUserInfoWithoutPassword { get; }
    public ExternalLoginProviderWithPasswordBase(IGuidGenerator guidGenerator, ICurrentTenant currentTenant, IdentityUserManager userManager, IIdentityUserRepository identityUserRepository, IOptions`1<IdentityOptions> identityOptions, bool canObtainUserInfoWithoutPassword);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_CanObtainUserInfoWithoutPassword();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.ExternalLoginProviderWithPasswordBase/<CreateUserAsync>d__4")]
public sealed virtual Task`1<IdentityUser> CreateUserAsync(string userName, string providerName, string plainPassword);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.ExternalLoginProviderWithPasswordBase/<UpdateUserAsync>d__5")]
public sealed virtual Task UpdateUserAsync(IdentityUser user, string providerName, string plainPassword);
    protected virtual Task`1<ExternalLoginUserInfo> GetUserInfoAsync(string userName);
    protected abstract virtual Task`1<ExternalLoginUserInfo> GetUserInfoAsync(string userName, string plainPassword);
    protected virtual Task`1<ExternalLoginUserInfo> GetUserInfoAsync(IdentityUser user, string plainPassword);
}
public class Volo.Abp.Identity.ExternalLoginUserInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Surname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <PhoneNumberConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <EmailConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <TwoFactorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    public string Name { get; public set; }
    public string Surname { get; public set; }
    public string PhoneNumber { get; public set; }
    public string Email { get; private set; }
    public Nullable`1<bool> PhoneNumberConfirmed { get; public set; }
    public Nullable`1<bool> EmailConfirmed { get; public set; }
    public Nullable`1<bool> TwoFactorEnabled { get; public set; }
    public string ProviderKey { get; public set; }
    public ExternalLoginUserInfo(string email);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Surname();
    [CompilerGeneratedAttribute]
public void set_Surname(string value);
    [CompilerGeneratedAttribute]
public string get_PhoneNumber();
    [CompilerGeneratedAttribute]
public void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
private void set_Email(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_PhoneNumberConfirmed();
    [CompilerGeneratedAttribute]
public void set_PhoneNumberConfirmed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_EmailConfirmed();
    [CompilerGeneratedAttribute]
public void set_EmailConfirmed(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_TwoFactorEnabled();
    [CompilerGeneratedAttribute]
public void set_TwoFactorEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_ProviderKey();
    [CompilerGeneratedAttribute]
public void set_ProviderKey(string value);
}
public abstract class Volo.Abp.Identity.IdentityClaim : Entity`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClaimValue>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public string ClaimType { get; protected set; }
    public string ClaimValue { get; protected set; }
    protected internal IdentityClaim(Guid id, Claim claim, Nullable`1<Guid> tenantId);
    protected internal IdentityClaim(Guid id, string claimType, string claimValue, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimType();
    [CompilerGeneratedAttribute]
protected virtual void set_ClaimType(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ClaimValue();
    [CompilerGeneratedAttribute]
protected virtual void set_ClaimValue(string value);
    public virtual Claim ToClaim();
    public virtual void SetClaim(Claim claim);
}
public class Volo.Abp.Identity.IdentityClaimType : AggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Required>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Regex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RegexDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityClaimValueType <ValueType>k__BackingField;
    public string Name { get; protected set; }
    public bool Required { get; public set; }
    public bool IsStatic { get; protected set; }
    public string Regex { get; public set; }
    public string RegexDescription { get; public set; }
    public string Description { get; public set; }
    public IdentityClaimValueType ValueType { get; public set; }
    public IdentityClaimType(Guid id, string name, bool required, bool isStatic, string regex, string regexDescription, string description, IdentityClaimValueType valueType);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_Required();
    [CompilerGeneratedAttribute]
public virtual void set_Required(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsStatic();
    [CompilerGeneratedAttribute]
protected virtual void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_Regex();
    [CompilerGeneratedAttribute]
public virtual void set_Regex(string value);
    [CompilerGeneratedAttribute]
public virtual string get_RegexDescription();
    [CompilerGeneratedAttribute]
public virtual void set_RegexDescription(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Description();
    [CompilerGeneratedAttribute]
public virtual void set_Description(string value);
    [CompilerGeneratedAttribute]
public virtual IdentityClaimValueType get_ValueType();
    [CompilerGeneratedAttribute]
public virtual void set_ValueType(IdentityClaimValueType value);
    public void SetName(string name);
}
public class Volo.Abp.Identity.IdentityClaimTypeManager : DomainService {
    [CompilerGeneratedAttribute]
private IIdentityClaimTypeRepository <IdentityClaimTypeRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <IdentityUserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityRoleRepository <IdentityRoleRepository>k__BackingField;
    protected IIdentityClaimTypeRepository IdentityClaimTypeRepository { get; }
    protected IIdentityUserRepository IdentityUserRepository { get; }
    protected IIdentityRoleRepository IdentityRoleRepository { get; }
    public IdentityClaimTypeManager(IIdentityClaimTypeRepository identityClaimTypeRepository, IIdentityUserRepository identityUserRepository, IIdentityRoleRepository identityRoleRepository);
    [CompilerGeneratedAttribute]
protected IIdentityClaimTypeRepository get_IdentityClaimTypeRepository();
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_IdentityUserRepository();
    [CompilerGeneratedAttribute]
protected IIdentityRoleRepository get_IdentityRoleRepository();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityClaimTypeManager/<CreateAsync>d__10")]
public virtual Task`1<IdentityClaimType> CreateAsync(IdentityClaimType claimType);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityClaimTypeManager/<UpdateAsync>d__11")]
public virtual Task`1<IdentityClaimType> UpdateAsync(IdentityClaimType claimType);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityClaimTypeManager/<DeleteAsync>d__12")]
public virtual Task DeleteAsync(Guid id);
}
public class Volo.Abp.Identity.IdentityDataSeedContributor : object {
    public static string AdminEmailPropertyName;
    public static string AdminEmailDefaultValue;
    public static string AdminUserNamePropertyName;
    public static string AdminUserNameDefaultValue;
    public static string AdminPasswordPropertyName;
    public static string AdminPasswordDefaultValue;
    [CompilerGeneratedAttribute]
private IIdentityDataSeeder <IdentityDataSeeder>k__BackingField;
    protected IIdentityDataSeeder IdentityDataSeeder { get; }
    public IdentityDataSeedContributor(IIdentityDataSeeder identityDataSeeder);
    [CompilerGeneratedAttribute]
protected IIdentityDataSeeder get_IdentityDataSeeder();
    public virtual Task SeedAsync(DataSeedContext context);
}
public class Volo.Abp.Identity.IdentityDataSeeder : object {
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityRoleRepository <RoleRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <UserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupNormalizer <LookupNormalizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityUserManager <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRoleManager <RoleManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptions`1<IdentityOptions> <IdentityOptions>k__BackingField;
    protected IGuidGenerator GuidGenerator { get; }
    protected IIdentityRoleRepository RoleRepository { get; }
    protected IIdentityUserRepository UserRepository { get; }
    protected ILookupNormalizer LookupNormalizer { get; }
    protected IdentityUserManager UserManager { get; }
    protected IdentityRoleManager RoleManager { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected IOptions`1<IdentityOptions> IdentityOptions { get; }
    public IdentityDataSeeder(IGuidGenerator guidGenerator, IIdentityRoleRepository roleRepository, IIdentityUserRepository userRepository, ILookupNormalizer lookupNormalizer, IdentityUserManager userManager, IdentityRoleManager roleManager, ICurrentTenant currentTenant, IOptions`1<IdentityOptions> identityOptions);
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected IIdentityRoleRepository get_RoleRepository();
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_UserRepository();
    [CompilerGeneratedAttribute]
protected ILookupNormalizer get_LookupNormalizer();
    [CompilerGeneratedAttribute]
protected IdentityUserManager get_UserManager();
    [CompilerGeneratedAttribute]
protected IdentityRoleManager get_RoleManager();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IOptions`1<IdentityOptions> get_IdentityOptions();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityDataSeeder/<SeedAsync>d__25")]
[UnitOfWorkAttribute]
public virtual Task`1<IdentityDataSeedResult> SeedAsync(string adminEmail, string adminPassword, Nullable`1<Guid> tenantId, string adminUserName);
}
public class Volo.Abp.Identity.IdentityDataSeedResult : object {
    [CompilerGeneratedAttribute]
private bool <CreatedAdminUser>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CreatedAdminRole>k__BackingField;
    public bool CreatedAdminUser { get; public set; }
    public bool CreatedAdminRole { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CreatedAdminUser();
    [CompilerGeneratedAttribute]
public void set_CreatedAdminUser(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreatedAdminRole();
    [CompilerGeneratedAttribute]
public void set_CreatedAdminRole(bool value);
}
public class Volo.Abp.Identity.IdentityDomainMappingProfile : Profile {
}
public class Volo.Abp.Identity.IdentityDynamicClaimsPrincipalContributor : AbpDynamicClaimsPrincipalContributorBase {
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityDynamicClaimsPrincipalContributor/<ContributeAsync>d__0")]
public virtual Task ContributeAsync(AbpClaimsPrincipalContributorContext context);
}
public class Volo.Abp.Identity.IdentityDynamicClaimsPrincipalContributorCache : object {
    [CompilerGeneratedAttribute]
private ILogger`1<IdentityDynamicClaimsPrincipalContributorCache> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache`1<AbpDynamicClaimCacheItem> <DynamicClaimCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityUserManager <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserClaimsPrincipalFactory`1<IdentityUser> <UserClaimsPrincipalFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptions`1<AbpClaimsPrincipalFactoryOptions> <AbpClaimsPrincipalFactoryOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptions`1<IdentityDynamicClaimsPrincipalContributorCacheOptions> <CacheOptions>k__BackingField;
    public ILogger`1<IdentityDynamicClaimsPrincipalContributorCache> Logger { get; public set; }
    protected IDistributedCache`1<AbpDynamicClaimCacheItem> DynamicClaimCache { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected IdentityUserManager UserManager { get; }
    protected IUserClaimsPrincipalFactory`1<IdentityUser> UserClaimsPrincipalFactory { get; }
    protected IOptions`1<AbpClaimsPrincipalFactoryOptions> AbpClaimsPrincipalFactoryOptions { get; }
    protected IOptions`1<IdentityDynamicClaimsPrincipalContributorCacheOptions> CacheOptions { get; }
    public IdentityDynamicClaimsPrincipalContributorCache(IDistributedCache`1<AbpDynamicClaimCacheItem> dynamicClaimCache, ICurrentTenant currentTenant, IdentityUserManager userManager, IUserClaimsPrincipalFactory`1<IdentityUser> userClaimsPrincipalFactory, IOptions`1<AbpClaimsPrincipalFactoryOptions> abpClaimsPrincipalFactoryOptions, IOptions`1<IdentityDynamicClaimsPrincipalContributorCacheOptions> cacheOptions);
    [CompilerGeneratedAttribute]
public ILogger`1<IdentityDynamicClaimsPrincipalContributorCache> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<IdentityDynamicClaimsPrincipalContributorCache> value);
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<AbpDynamicClaimCacheItem> get_DynamicClaimCache();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IdentityUserManager get_UserManager();
    [CompilerGeneratedAttribute]
protected IUserClaimsPrincipalFactory`1<IdentityUser> get_UserClaimsPrincipalFactory();
    [CompilerGeneratedAttribute]
protected IOptions`1<AbpClaimsPrincipalFactoryOptions> get_AbpClaimsPrincipalFactoryOptions();
    [CompilerGeneratedAttribute]
protected IOptions`1<IdentityDynamicClaimsPrincipalContributorCacheOptions> get_CacheOptions();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityDynamicClaimsPrincipalContributorCache/<GetAsync>d__23")]
public virtual Task`1<AbpDynamicClaimCacheItem> GetAsync(Guid userId, Nullable`1<Guid> tenantId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityDynamicClaimsPrincipalContributorCache/<ClearAsync>d__24")]
public virtual Task ClearAsync(Guid userId, Nullable`1<Guid> tenantId);
}
public class Volo.Abp.Identity.IdentityDynamicClaimsPrincipalContributorCacheOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <CacheAbsoluteExpiration>k__BackingField;
    public TimeSpan CacheAbsoluteExpiration { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_CacheAbsoluteExpiration();
    [CompilerGeneratedAttribute]
public void set_CacheAbsoluteExpiration(TimeSpan value);
}
public class Volo.Abp.Identity.IdentityLinkUser : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private Guid <SourceUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <SourceTenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TargetUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TargetTenantId>k__BackingField;
    public Guid SourceUserId { get; protected set; }
    public Nullable`1<Guid> SourceTenantId { get; protected set; }
    public Guid TargetUserId { get; protected set; }
    public Nullable`1<Guid> TargetTenantId { get; protected set; }
    public IdentityLinkUser(Guid id, IdentityLinkUserInfo sourceUser, IdentityLinkUserInfo targetUser);
    public IdentityLinkUser(Guid id, Guid sourceUserId, Nullable`1<Guid> sourceTenantId, Guid targetUserId, Nullable`1<Guid> targetTenantId);
    [CompilerGeneratedAttribute]
public virtual Guid get_SourceUserId();
    [CompilerGeneratedAttribute]
protected virtual void set_SourceUserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_SourceTenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_SourceTenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_TargetUserId();
    [CompilerGeneratedAttribute]
protected virtual void set_TargetUserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TargetTenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TargetTenantId(Nullable`1<Guid> value);
}
public class Volo.Abp.Identity.IdentityLinkUserInfo : object {
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    public Guid UserId { get; public set; }
    public Nullable`1<Guid> TenantId { get; public set; }
    public IdentityLinkUserInfo(Guid userId, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserId();
    [CompilerGeneratedAttribute]
public virtual void set_UserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
public virtual void set_TenantId(Nullable`1<Guid> value);
}
public class Volo.Abp.Identity.IdentityLinkUserManager : DomainService {
    [CompilerGeneratedAttribute]
private IIdentityLinkUserRepository <IdentityLinkUserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityUserManager <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    protected IIdentityLinkUserRepository IdentityLinkUserRepository { get; }
    protected IdentityUserManager UserManager { get; }
    protected ICurrentTenant CurrentTenant { get; }
    public IdentityLinkUserManager(IIdentityLinkUserRepository identityLinkUserRepository, IdentityUserManager userManager, ICurrentTenant currentTenant);
    [CompilerGeneratedAttribute]
protected IIdentityLinkUserRepository get_IdentityLinkUserRepository();
    [CompilerGeneratedAttribute]
protected IdentityUserManager get_UserManager();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityLinkUserManager/<GetListAsync>d__10")]
public Task`1<List`1<IdentityLinkUser>> GetListAsync(IdentityLinkUserInfo linkUserInfo, bool includeIndirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityLinkUserManager/<LinkAsync>d__11")]
public virtual Task LinkAsync(IdentityLinkUserInfo sourceLinkUser, IdentityLinkUserInfo targetLinkUser, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityLinkUserManager/<IsLinkedAsync>d__12")]
public virtual Task`1<bool> IsLinkedAsync(IdentityLinkUserInfo sourceLinkUser, IdentityLinkUserInfo targetLinkUser, bool includeIndirect, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityLinkUserManager/<UnlinkAsync>d__13")]
public virtual Task UnlinkAsync(IdentityLinkUserInfo sourceLinkUser, IdentityLinkUserInfo targetLinkUser, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityLinkUserManager/<GenerateLinkTokenAsync>d__14")]
public virtual Task`1<string> GenerateLinkTokenAsync(IdentityLinkUserInfo targetLinkUser, string tokenPurpose, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityLinkUserManager/<VerifyLinkTokenAsync>d__15")]
public virtual Task`1<bool> VerifyLinkTokenAsync(IdentityLinkUserInfo targetLinkUser, string token, string tokenPurpose, CancellationToken cancellationToken);
}
public class Volo.Abp.Identity.IdentityRole : AggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalizedName>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityRoleClaim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPublic>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EntityVersion>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public string Name { get; protected internal set; }
    [DisableAuditingAttribute]
public string NormalizedName { get; protected internal set; }
    public ICollection`1<IdentityRoleClaim> Claims { get; protected set; }
    public bool IsDefault { get; public set; }
    public bool IsStatic { get; public set; }
    public bool IsPublic { get; public set; }
    public int EntityVersion { get; protected set; }
    public IdentityRole(Guid id, string name, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected internal virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NormalizedName();
    [CompilerGeneratedAttribute]
protected internal virtual void set_NormalizedName(string value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IdentityRoleClaim> get_Claims();
    [CompilerGeneratedAttribute]
protected virtual void set_Claims(ICollection`1<IdentityRoleClaim> value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsDefault();
    [CompilerGeneratedAttribute]
public virtual void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsStatic();
    [CompilerGeneratedAttribute]
public virtual void set_IsStatic(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPublic();
    [CompilerGeneratedAttribute]
public virtual void set_IsPublic(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_EntityVersion();
    [CompilerGeneratedAttribute]
protected virtual void set_EntityVersion(int value);
    public virtual void AddClaim(IGuidGenerator guidGenerator, Claim claim);
    public virtual void AddClaims(IGuidGenerator guidGenerator, IEnumerable`1<Claim> claims);
    public virtual IdentityRoleClaim FindClaim(Claim claim);
    public virtual void RemoveClaim(Claim claim);
    public virtual void ChangeName(string name);
    public virtual string ToString();
}
public class Volo.Abp.Identity.IdentityRoleClaim : IdentityClaim {
    [CompilerGeneratedAttribute]
private Guid <RoleId>k__BackingField;
    public Guid RoleId { get; protected set; }
    protected internal IdentityRoleClaim(Guid id, Guid roleId, Claim claim, Nullable`1<Guid> tenantId);
    public IdentityRoleClaim(Guid id, Guid roleId, string claimType, string claimValue, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Guid get_RoleId();
    [CompilerGeneratedAttribute]
protected virtual void set_RoleId(Guid value);
}
public class Volo.Abp.Identity.IdentityRoleManager : RoleManager`1<IdentityRole> {
    [CompilerGeneratedAttribute]
private IStringLocalizer`1<IdentityResource> <Localizer>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <UserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationUnitRepository <OrganizationUnitRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private OrganizationUnitManager <OrganizationUnitManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache`1<AbpDynamicClaimCacheItem> <DynamicClaimCache>k__BackingField;
    protected CancellationToken CancellationToken { get; }
    protected IStringLocalizer`1<IdentityResource> Localizer { get; }
    protected ICancellationTokenProvider CancellationTokenProvider { get; }
    protected IIdentityUserRepository UserRepository { get; }
    protected IOrganizationUnitRepository OrganizationUnitRepository { get; }
    protected OrganizationUnitManager OrganizationUnitManager { get; }
    protected IDistributedCache`1<AbpDynamicClaimCacheItem> DynamicClaimCache { get; }
    public IdentityRoleManager(IdentityRoleStore store, IEnumerable`1<IRoleValidator`1<IdentityRole>> roleValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, ILogger`1<IdentityRoleManager> logger, IStringLocalizer`1<IdentityResource> localizer, ICancellationTokenProvider cancellationTokenProvider, IIdentityUserRepository userRepository, IOrganizationUnitRepository organizationUnitRepository, OrganizationUnitManager organizationUnitManager, IDistributedCache`1<AbpDynamicClaimCacheItem> dynamicClaimCache);
    protected virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
protected IStringLocalizer`1<IdentityResource> get_Localizer();
    [CompilerGeneratedAttribute]
protected ICancellationTokenProvider get_CancellationTokenProvider();
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_UserRepository();
    [CompilerGeneratedAttribute]
protected IOrganizationUnitRepository get_OrganizationUnitRepository();
    [CompilerGeneratedAttribute]
protected OrganizationUnitManager get_OrganizationUnitManager();
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<AbpDynamicClaimCacheItem> get_DynamicClaimCache();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleManager/<GetByIdAsync>d__21")]
public virtual Task`1<IdentityRole> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleManager/<SetRoleNameAsync>d__22")]
public virtual Task`1<IdentityResult> SetRoleNameAsync(IdentityRole role, string name);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleManager/<DeleteAsync>d__23")]
public virtual Task`1<IdentityResult> DeleteAsync(IdentityRole role);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__0(IdentityRole role, string name);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__1(IdentityRole role);
}
[ObsoleteAttribute("Use the distributed event (IdentityRoleNameChangedEto) instead.")]
public class Volo.Abp.Identity.IdentityRoleNameChangedEvent : object {
    [CompilerGeneratedAttribute]
private IdentityRole <IdentityRole>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    public IdentityRole IdentityRole { get; public set; }
    public string OldName { get; public set; }
    [CompilerGeneratedAttribute]
public IdentityRole get_IdentityRole();
    [CompilerGeneratedAttribute]
public void set_IdentityRole(IdentityRole value);
    [CompilerGeneratedAttribute]
public string get_OldName();
    [CompilerGeneratedAttribute]
public void set_OldName(string value);
}
public class Volo.Abp.Identity.IdentityRoleStore : object {
    [CompilerGeneratedAttribute]
private IIdentityRoleRepository <RoleRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<IdentityRoleStore> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <ErrorDescriber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    protected IIdentityRoleRepository RoleRepository { get; }
    protected ILogger`1<IdentityRoleStore> Logger { get; }
    protected IGuidGenerator GuidGenerator { get; }
    public IdentityErrorDescriber ErrorDescriber { get; public set; }
    public bool AutoSaveChanges { get; public set; }
    public IdentityRoleStore(IIdentityRoleRepository roleRepository, ILogger`1<IdentityRoleStore> logger, IGuidGenerator guidGenerator, IdentityErrorDescriber describer);
    [CompilerGeneratedAttribute]
protected IIdentityRoleRepository get_RoleRepository();
    [CompilerGeneratedAttribute]
protected ILogger`1<IdentityRoleStore> get_Logger();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_ErrorDescriber();
    [CompilerGeneratedAttribute]
public void set_ErrorDescriber(IdentityErrorDescriber value);
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleStore/<CreateAsync>d__18")]
public virtual Task`1<IdentityResult> CreateAsync(IdentityRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleStore/<UpdateAsync>d__19")]
public virtual Task`1<IdentityResult> UpdateAsync(IdentityRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleStore/<DeleteAsync>d__20")]
public virtual Task`1<IdentityResult> DeleteAsync(IdentityRole role, CancellationToken cancellationToken);
    public virtual Task`1<string> GetRoleIdAsync(IdentityRole role, CancellationToken cancellationToken);
    public virtual Task`1<string> GetRoleNameAsync(IdentityRole role, CancellationToken cancellationToken);
    public virtual Task SetRoleNameAsync(IdentityRole role, string roleName, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRole> FindByIdAsync(string id, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRole> FindByNameAsync(string normalizedName, CancellationToken cancellationToken);
    public virtual Task`1<string> GetNormalizedRoleNameAsync(IdentityRole role, CancellationToken cancellationToken);
    public virtual Task SetNormalizedRoleNameAsync(IdentityRole role, string normalizedName, CancellationToken cancellationToken);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleStore/<GetClaimsAsync>d__29")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(IdentityRole role, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleStore/<AddClaimAsync>d__30")]
public virtual Task AddClaimAsync(IdentityRole role, Claim claim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityRoleStore/<RemoveClaimAsync>d__31")]
public virtual Task RemoveClaimAsync(IdentityRole role, Claim claim, CancellationToken cancellationToken);
}
public class Volo.Abp.Identity.IdentityRoleWithUserCount : object {
    [CompilerGeneratedAttribute]
private IdentityRole <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private long <UserCount>k__BackingField;
    public IdentityRole Role { get; public set; }
    public long UserCount { get; public set; }
    public IdentityRoleWithUserCount(IdentityRole role, long userCount);
    [CompilerGeneratedAttribute]
public IdentityRole get_Role();
    [CompilerGeneratedAttribute]
public void set_Role(IdentityRole value);
    [CompilerGeneratedAttribute]
public long get_UserCount();
    [CompilerGeneratedAttribute]
public void set_UserCount(long value);
}
public class Volo.Abp.Identity.IdentitySecurityLog : AggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TenantName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientIpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BrowserInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationTime>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public string ApplicationName { get; protected set; }
    public string Identity { get; protected set; }
    public string Action { get; protected set; }
    public Nullable`1<Guid> UserId { get; protected set; }
    public string UserName { get; protected set; }
    public string TenantName { get; protected set; }
    public string ClientId { get; protected set; }
    public string CorrelationId { get; protected set; }
    public string ClientIpAddress { get; protected set; }
    public string BrowserInfo { get; protected set; }
    public DateTime CreationTime { get; protected set; }
    public IdentitySecurityLog(IGuidGenerator guidGenerator, SecurityLogInfo securityLogInfo);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
protected void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
protected void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
protected void set_Action(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_UserId();
    [CompilerGeneratedAttribute]
protected void set_UserId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
protected void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_TenantName();
    [CompilerGeneratedAttribute]
protected void set_TenantName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
protected void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
protected void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientIpAddress();
    [CompilerGeneratedAttribute]
protected void set_ClientIpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_BrowserInfo();
    [CompilerGeneratedAttribute]
protected void set_BrowserInfo(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationTime();
    [CompilerGeneratedAttribute]
protected void set_CreationTime(DateTime value);
}
public class Volo.Abp.Identity.IdentitySecurityLogContext : object {
    [CompilerGeneratedAttribute]
private string <Identity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ExtraProperties>k__BackingField;
    public string Identity { get; public set; }
    public string Action { get; public set; }
    public string UserName { get; public set; }
    public string ClientId { get; public set; }
    public Dictionary`2<string, object> ExtraProperties { get; }
    [CompilerGeneratedAttribute]
public string get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ExtraProperties();
    public virtual IdentitySecurityLogContext WithProperty(string key, object value);
}
public class Volo.Abp.Identity.IdentitySecurityLogManager : object {
    [CompilerGeneratedAttribute]
private ISecurityLogManager <SecurityLogManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityUserManager <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentPrincipalAccessor <CurrentPrincipalAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IUserClaimsPrincipalFactory`1<IdentityUser> <UserClaimsPrincipalFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentUser <CurrentUser>k__BackingField;
    protected ISecurityLogManager SecurityLogManager { get; }
    protected IdentityUserManager UserManager { get; }
    protected ICurrentPrincipalAccessor CurrentPrincipalAccessor { get; }
    protected IUserClaimsPrincipalFactory`1<IdentityUser> UserClaimsPrincipalFactory { get; }
    protected ICurrentUser CurrentUser { get; }
    public IdentitySecurityLogManager(ISecurityLogManager securityLogManager, IdentityUserManager userManager, ICurrentPrincipalAccessor currentPrincipalAccessor, IUserClaimsPrincipalFactory`1<IdentityUser> userClaimsPrincipalFactory, ICurrentUser currentUser);
    [CompilerGeneratedAttribute]
protected ISecurityLogManager get_SecurityLogManager();
    [CompilerGeneratedAttribute]
protected IdentityUserManager get_UserManager();
    [CompilerGeneratedAttribute]
protected ICurrentPrincipalAccessor get_CurrentPrincipalAccessor();
    [CompilerGeneratedAttribute]
protected IUserClaimsPrincipalFactory`1<IdentityUser> get_UserClaimsPrincipalFactory();
    [CompilerGeneratedAttribute]
protected ICurrentUser get_CurrentUser();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentitySecurityLogManager/<SaveAsync>d__16")]
public Task SaveAsync(IdentitySecurityLogContext context);
}
[DependencyAttribute]
public class Volo.Abp.Identity.IdentitySecurityLogStore : object {
    [CompilerGeneratedAttribute]
private ILogger`1<IdentitySecurityLogStore> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpSecurityLogOptions <SecurityLogOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentitySecurityLogRepository <IdentitySecurityLogRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    public ILogger`1<IdentitySecurityLogStore> Logger { get; public set; }
    protected AbpSecurityLogOptions SecurityLogOptions { get; }
    protected IIdentitySecurityLogRepository IdentitySecurityLogRepository { get; }
    protected IGuidGenerator GuidGenerator { get; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    public IdentitySecurityLogStore(ILogger`1<IdentitySecurityLogStore> logger, IOptions`1<AbpSecurityLogOptions> securityLogOptions, IIdentitySecurityLogRepository identitySecurityLogRepository, IGuidGenerator guidGenerator, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
public ILogger`1<IdentitySecurityLogStore> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<IdentitySecurityLogStore> value);
    [CompilerGeneratedAttribute]
protected AbpSecurityLogOptions get_SecurityLogOptions();
    [CompilerGeneratedAttribute]
protected IIdentitySecurityLogRepository get_IdentitySecurityLogRepository();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentitySecurityLogStore/<SaveAsync>d__17")]
public sealed virtual Task SaveAsync(SecurityLogInfo securityLogInfo);
}
public class Volo.Abp.Identity.IdentitySession : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private string <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Device>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeviceInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IpAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SignedIn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastAccessed>k__BackingField;
    public string SessionId { get; protected set; }
    public string Device { get; protected set; }
    public string DeviceInfo { get; protected set; }
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Guid UserId { get; protected set; }
    public string ClientId { get; public set; }
    public string IpAddresses { get; protected set; }
    public DateTime SignedIn { get; protected set; }
    public Nullable`1<DateTime> LastAccessed { get; protected set; }
    public IdentitySession(Guid id, string sessionId, string device, string deviceInfo, Guid userId, Nullable`1<Guid> tenantId, string clientId, string ipAddresses, DateTime signedIn, Nullable`1<DateTime> lastAccessed);
    [CompilerGeneratedAttribute]
public virtual string get_SessionId();
    [CompilerGeneratedAttribute]
protected virtual void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Device();
    [CompilerGeneratedAttribute]
protected virtual void set_Device(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DeviceInfo();
    [CompilerGeneratedAttribute]
protected virtual void set_DeviceInfo(string value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserId();
    [CompilerGeneratedAttribute]
protected virtual void set_UserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_ClientId();
    [CompilerGeneratedAttribute]
public virtual void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public virtual string get_IpAddresses();
    [CompilerGeneratedAttribute]
protected virtual void set_IpAddresses(string value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_SignedIn();
    [CompilerGeneratedAttribute]
protected virtual void set_SignedIn(DateTime value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTime> get_LastAccessed();
    [CompilerGeneratedAttribute]
protected virtual void set_LastAccessed(Nullable`1<DateTime> value);
    public void SetSignedInTime(DateTime signedIn);
    public void UpdateLastAccessedTime(Nullable`1<DateTime> lastAccessed);
    public void SetIpAddresses(IEnumerable`1<string> ipAddresses);
    public IEnumerable`1<string> GetIpAddresses();
    private static string JoinAsString(IEnumerable`1<string> list);
    private String[] GetArrayFromString(string str);
}
public class Volo.Abp.Identity.IdentityUser : FullAuditedAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalizedUserName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Surname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NormalizedEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmailConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExternal>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PhoneNumberConfirmed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsActive>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TwoFactorEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LockoutEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LockoutEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AccessFailedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShouldChangePasswordOnNextLogin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EntityVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <LastPasswordChangeTime>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityUserRole> <Roles>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityUserClaim> <Claims>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityUserLogin> <Logins>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityUserToken> <Tokens>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<IdentityUserOrganizationUnit> <OrganizationUnits>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public string UserName { get; protected internal set; }
    [DisableAuditingAttribute]
public string NormalizedUserName { get; protected internal set; }
    public string Name { get; public set; }
    public string Surname { get; public set; }
    public string Email { get; protected internal set; }
    [DisableAuditingAttribute]
public string NormalizedEmail { get; protected internal set; }
    public bool EmailConfirmed { get; protected internal set; }
    [DisableAuditingAttribute]
public string PasswordHash { get; protected internal set; }
    [DisableAuditingAttribute]
public string SecurityStamp { get; protected internal set; }
    public bool IsExternal { get; public set; }
    public string PhoneNumber { get; protected internal set; }
    public bool PhoneNumberConfirmed { get; protected internal set; }
    public bool IsActive { get; protected internal set; }
    public bool TwoFactorEnabled { get; protected internal set; }
    public Nullable`1<DateTimeOffset> LockoutEnd { get; protected internal set; }
    public bool LockoutEnabled { get; protected internal set; }
    public int AccessFailedCount { get; protected internal set; }
    public bool ShouldChangePasswordOnNextLogin { get; protected internal set; }
    public int EntityVersion { get; protected set; }
    public Nullable`1<DateTimeOffset> LastPasswordChangeTime { get; protected set; }
    public ICollection`1<IdentityUserRole> Roles { get; protected set; }
    public ICollection`1<IdentityUserClaim> Claims { get; protected set; }
    public ICollection`1<IdentityUserLogin> Logins { get; protected set; }
    public ICollection`1<IdentityUserToken> Tokens { get; protected set; }
    public ICollection`1<IdentityUserOrganizationUnit> OrganizationUnits { get; protected set; }
    public IdentityUser(Guid id, string userName, string email, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual string get_UserName();
    [CompilerGeneratedAttribute]
protected internal virtual void set_UserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NormalizedUserName();
    [CompilerGeneratedAttribute]
protected internal virtual void set_NormalizedUserName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Surname();
    [CompilerGeneratedAttribute]
public virtual void set_Surname(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Email();
    [CompilerGeneratedAttribute]
protected internal virtual void set_Email(string value);
    [CompilerGeneratedAttribute]
public virtual string get_NormalizedEmail();
    [CompilerGeneratedAttribute]
protected internal virtual void set_NormalizedEmail(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_EmailConfirmed();
    [CompilerGeneratedAttribute]
protected internal virtual void set_EmailConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_PasswordHash();
    [CompilerGeneratedAttribute]
protected internal virtual void set_PasswordHash(string value);
    [CompilerGeneratedAttribute]
public virtual string get_SecurityStamp();
    [CompilerGeneratedAttribute]
protected internal virtual void set_SecurityStamp(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsExternal();
    [CompilerGeneratedAttribute]
public virtual void set_IsExternal(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_PhoneNumber();
    [CompilerGeneratedAttribute]
protected internal virtual void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public virtual bool get_PhoneNumberConfirmed();
    [CompilerGeneratedAttribute]
protected internal virtual void set_PhoneNumberConfirmed(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsActive();
    [CompilerGeneratedAttribute]
protected internal virtual void set_IsActive(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_TwoFactorEnabled();
    [CompilerGeneratedAttribute]
protected internal virtual void set_TwoFactorEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_LockoutEnd();
    [CompilerGeneratedAttribute]
protected internal virtual void set_LockoutEnd(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public virtual bool get_LockoutEnabled();
    [CompilerGeneratedAttribute]
protected internal virtual void set_LockoutEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_AccessFailedCount();
    [CompilerGeneratedAttribute]
protected internal virtual void set_AccessFailedCount(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_ShouldChangePasswordOnNextLogin();
    [CompilerGeneratedAttribute]
protected internal virtual void set_ShouldChangePasswordOnNextLogin(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_EntityVersion();
    [CompilerGeneratedAttribute]
protected virtual void set_EntityVersion(int value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<DateTimeOffset> get_LastPasswordChangeTime();
    [CompilerGeneratedAttribute]
protected virtual void set_LastPasswordChangeTime(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IdentityUserRole> get_Roles();
    [CompilerGeneratedAttribute]
protected virtual void set_Roles(ICollection`1<IdentityUserRole> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IdentityUserClaim> get_Claims();
    [CompilerGeneratedAttribute]
protected virtual void set_Claims(ICollection`1<IdentityUserClaim> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IdentityUserLogin> get_Logins();
    [CompilerGeneratedAttribute]
protected virtual void set_Logins(ICollection`1<IdentityUserLogin> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IdentityUserToken> get_Tokens();
    [CompilerGeneratedAttribute]
protected virtual void set_Tokens(ICollection`1<IdentityUserToken> value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IdentityUserOrganizationUnit> get_OrganizationUnits();
    [CompilerGeneratedAttribute]
protected virtual void set_OrganizationUnits(ICollection`1<IdentityUserOrganizationUnit> value);
    public virtual void AddRole(Guid roleId);
    public virtual void RemoveRole(Guid roleId);
    public virtual bool IsInRole(Guid roleId);
    public virtual void AddClaim(IGuidGenerator guidGenerator, Claim claim);
    public virtual void AddClaims(IGuidGenerator guidGenerator, IEnumerable`1<Claim> claims);
    public virtual IdentityUserClaim FindClaim(Claim claim);
    public virtual void ReplaceClaim(Claim claim, Claim newClaim);
    public virtual void RemoveClaims(IEnumerable`1<Claim> claims);
    public virtual void RemoveClaim(Claim claim);
    public virtual void AddLogin(UserLoginInfo login);
    public virtual void RemoveLogin(string loginProvider, string providerKey);
    public virtual IdentityUserToken FindToken(string loginProvider, string name);
    public virtual void SetToken(string loginProvider, string name, string value);
    public virtual void RemoveToken(string loginProvider, string name);
    public virtual void AddOrganizationUnit(Guid organizationUnitId);
    public virtual void RemoveOrganizationUnit(Guid organizationUnitId);
    public virtual bool IsInOrganizationUnit(Guid organizationUnitId);
    public virtual void SetEmailConfirmed(bool confirmed);
    public virtual void SetPhoneNumberConfirmed(bool confirmed);
    public void SetPhoneNumber(string phoneNumber, bool confirmed);
    public virtual void SetIsActive(bool isActive);
    public virtual void SetShouldChangePasswordOnNextLogin(bool shouldChangePasswordOnNextLogin);
    public virtual void SetLastPasswordChangeTime(Nullable`1<DateTimeOffset> lastPasswordChangeTime);
    public virtual string ToString();
}
public class Volo.Abp.Identity.IdentityUserClaim : IdentityClaim {
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    public Guid UserId { get; protected set; }
    protected internal IdentityUserClaim(Guid id, Guid userId, Claim claim, Nullable`1<Guid> tenantId);
    public IdentityUserClaim(Guid id, Guid userId, string claimType, string claimValue, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserId();
    [CompilerGeneratedAttribute]
protected virtual void set_UserId(Guid value);
}
public class Volo.Abp.Identity.IdentityUserDelegation : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <SourceUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TargetUserId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <EndTime>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Guid SourceUserId { get; protected set; }
    public Guid TargetUserId { get; protected set; }
    public DateTime StartTime { get; protected set; }
    public DateTime EndTime { get; protected set; }
    public IdentityUserDelegation(Guid id, Guid sourceUserId, Guid targetUserId, DateTime startTime, DateTime endTime, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_SourceUserId();
    [CompilerGeneratedAttribute]
protected virtual void set_SourceUserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Guid get_TargetUserId();
    [CompilerGeneratedAttribute]
protected virtual void set_TargetUserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_StartTime();
    [CompilerGeneratedAttribute]
protected virtual void set_StartTime(DateTime value);
    [CompilerGeneratedAttribute]
public virtual DateTime get_EndTime();
    [CompilerGeneratedAttribute]
protected virtual void set_EndTime(DateTime value);
}
public class Volo.Abp.Identity.IdentityUserDelegationManager : DomainService {
    [CompilerGeneratedAttribute]
private IIdentityUserDelegationRepository <IdentityUserDelegationRepository>k__BackingField;
    protected IIdentityUserDelegationRepository IdentityUserDelegationRepository { get; }
    public IdentityUserDelegationManager(IIdentityUserDelegationRepository identityUserDelegationRepository);
    [CompilerGeneratedAttribute]
protected IIdentityUserDelegationRepository get_IdentityUserDelegationRepository();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserDelegationManager/<GetListAsync>d__4")]
public virtual Task`1<List`1<IdentityUserDelegation>> GetListAsync(Nullable`1<Guid> sourceUserId, Nullable`1<Guid> targetUserId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserDelegationManager/<GetActiveDelegationsAsync>d__5")]
public virtual Task`1<List`1<IdentityUserDelegation>> GetActiveDelegationsAsync(Guid targetUseId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserDelegationManager/<FindActiveDelegationByIdAsync>d__6")]
public virtual Task`1<IdentityUserDelegation> FindActiveDelegationByIdAsync(Guid id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserDelegationManager/<DelegateNewUserAsync>d__7")]
public virtual Task DelegateNewUserAsync(Guid sourceUserId, Guid targetUserId, DateTime startTime, DateTime endTime, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserDelegationManager/<DeleteDelegationAsync>d__8")]
public virtual Task DeleteDelegationAsync(Guid id, Guid sourceUserId, CancellationToken cancellationToken);
}
public class Volo.Abp.Identity.IdentityUserIdWithRoleNames : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RoleNames>k__BackingField;
    public Guid Id { get; public set; }
    public String[] RoleNames { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public String[] get_RoleNames();
    [CompilerGeneratedAttribute]
public void set_RoleNames(String[] value);
}
public class Volo.Abp.Identity.IdentityUserLogin : Entity {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderDisplayName>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Guid UserId { get; protected set; }
    public string LoginProvider { get; protected set; }
    public string ProviderKey { get; protected set; }
    public string ProviderDisplayName { get; protected set; }
    protected internal IdentityUserLogin(Guid userId, string loginProvider, string providerKey, string providerDisplayName, Nullable`1<Guid> tenantId);
    protected internal IdentityUserLogin(Guid userId, UserLoginInfo login, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserId();
    [CompilerGeneratedAttribute]
protected virtual void set_UserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_LoginProvider();
    [CompilerGeneratedAttribute]
protected virtual void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
protected virtual void set_ProviderKey(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderDisplayName();
    [CompilerGeneratedAttribute]
protected virtual void set_ProviderDisplayName(string value);
    public virtual UserLoginInfo ToUserLoginInfo();
    public virtual Object[] GetKeys();
}
public class Volo.Abp.Identity.IdentityUserManager : UserManager`1<IdentityUser> {
    [CompilerGeneratedAttribute]
private IIdentityRoleRepository <RoleRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <UserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IOrganizationUnitRepository <OrganizationUnitRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingProvider <SettingProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedEventBus <DistributedEventBus>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityLinkUserRepository <IdentityLinkUserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache`1<AbpDynamicClaimCacheItem> <DynamicClaimCache>k__BackingField;
    protected IIdentityRoleRepository RoleRepository { get; }
    protected IIdentityUserRepository UserRepository { get; }
    protected IOrganizationUnitRepository OrganizationUnitRepository { get; }
    protected ISettingProvider SettingProvider { get; }
    protected ICancellationTokenProvider CancellationTokenProvider { get; }
    protected IDistributedEventBus DistributedEventBus { get; }
    protected IIdentityLinkUserRepository IdentityLinkUserRepository { get; }
    protected IDistributedCache`1<AbpDynamicClaimCacheItem> DynamicClaimCache { get; }
    protected CancellationToken CancellationToken { get; }
    public IdentityUserManager(IdentityUserStore store, IIdentityRoleRepository roleRepository, IIdentityUserRepository userRepository, IOptions`1<IdentityOptions> optionsAccessor, IPasswordHasher`1<IdentityUser> passwordHasher, IEnumerable`1<IUserValidator`1<IdentityUser>> userValidators, IEnumerable`1<IPasswordValidator`1<IdentityUser>> passwordValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, IServiceProvider services, ILogger`1<IdentityUserManager> logger, ICancellationTokenProvider cancellationTokenProvider, IOrganizationUnitRepository organizationUnitRepository, ISettingProvider settingProvider, IDistributedEventBus distributedEventBus, IIdentityLinkUserRepository identityLinkUserRepository, IDistributedCache`1<AbpDynamicClaimCacheItem> dynamicClaimCache);
    [CompilerGeneratedAttribute]
protected IIdentityRoleRepository get_RoleRepository();
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_UserRepository();
    [CompilerGeneratedAttribute]
protected IOrganizationUnitRepository get_OrganizationUnitRepository();
    [CompilerGeneratedAttribute]
protected ISettingProvider get_SettingProvider();
    [CompilerGeneratedAttribute]
protected ICancellationTokenProvider get_CancellationTokenProvider();
    [CompilerGeneratedAttribute]
protected IDistributedEventBus get_DistributedEventBus();
    [CompilerGeneratedAttribute]
protected IIdentityLinkUserRepository get_IdentityLinkUserRepository();
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<AbpDynamicClaimCacheItem> get_DynamicClaimCache();
    protected virtual CancellationToken get_CancellationToken();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<CreateAsync>d__27")]
public virtual Task`1<IdentityResult> CreateAsync(IdentityUser user, string password, bool validatePassword);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<DeleteAsync>d__28")]
public virtual Task`1<IdentityResult> DeleteAsync(IdentityUser user);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<UpdateUserAsync>d__29")]
protected virtual Task`1<IdentityResult> UpdateUserAsync(IdentityUser user);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<GetByIdAsync>d__30")]
public virtual Task`1<IdentityUser> GetByIdAsync(Guid id);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<SetRolesAsync>d__31")]
public virtual Task`1<IdentityResult> SetRolesAsync(IdentityUser user, IEnumerable`1<string> roleNames);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<IsInOrganizationUnitAsync>d__32")]
public virtual Task`1<bool> IsInOrganizationUnitAsync(Guid userId, Guid ouId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<IsInOrganizationUnitAsync>d__33")]
public virtual Task`1<bool> IsInOrganizationUnitAsync(IdentityUser user, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<AddToOrganizationUnitAsync>d__34")]
public virtual Task AddToOrganizationUnitAsync(Guid userId, Guid ouId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<AddToOrganizationUnitAsync>d__35")]
public virtual Task AddToOrganizationUnitAsync(IdentityUser user, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<RemoveFromOrganizationUnitAsync>d__36")]
public virtual Task RemoveFromOrganizationUnitAsync(Guid userId, Guid ouId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<RemoveFromOrganizationUnitAsync>d__37")]
public virtual Task RemoveFromOrganizationUnitAsync(IdentityUser user, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<SetOrganizationUnitsAsync>d__38")]
public virtual Task SetOrganizationUnitsAsync(Guid userId, Guid[] organizationUnitIds);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<SetOrganizationUnitsAsync>d__39")]
public virtual Task SetOrganizationUnitsAsync(IdentityUser user, Guid[] organizationUnitIds);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<CheckMaxUserOrganizationUnitMembershipCountAsync>d__40")]
private Task CheckMaxUserOrganizationUnitMembershipCountAsync(int requestedCount);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<GetOrganizationUnitsAsync>d__41")]
[UnitOfWorkAttribute]
public virtual Task`1<List`1<OrganizationUnit>> GetOrganizationUnitsAsync(IdentityUser user, bool includeDetails);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<GetUsersInOrganizationUnitAsync>d__42")]
[UnitOfWorkAttribute]
public virtual Task`1<List`1<IdentityUser>> GetUsersInOrganizationUnitAsync(OrganizationUnit organizationUnit, bool includeChildren);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<AddDefaultRolesAsync>d__43")]
public virtual Task`1<IdentityResult> AddDefaultRolesAsync(IdentityUser user);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<ShouldPeriodicallyChangePasswordAsync>d__44")]
public virtual Task`1<bool> ShouldPeriodicallyChangePasswordAsync(IdentityUser user);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<ResetRecoveryCodesAsync>d__45")]
public virtual Task ResetRecoveryCodesAsync(IdentityUser user);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<SetEmailAsync>d__46")]
public virtual Task`1<IdentityResult> SetEmailAsync(IdentityUser user, string email);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<SetUserNameAsync>d__47")]
public virtual Task`1<IdentityResult> SetUserNameAsync(IdentityUser user, string userName);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<UpdateRoleAsync>d__48")]
public virtual Task UpdateRoleAsync(Guid sourceRoleId, Nullable`1<Guid> targetRoleId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<UpdateOrganizationAsync>d__49")]
public virtual Task UpdateOrganizationAsync(Guid sourceOrganizationId, Nullable`1<Guid> targetOrganizationId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<ValidateUserNameAsync>d__50")]
public virtual Task`1<bool> ValidateUserNameAsync(string userName, Nullable`1<Guid> userId);
    public virtual Task`1<string> GetRandomUserNameAsync(int length);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserManager/<GetUserNameFromEmailAsync>d__52")]
public virtual Task`1<string> GetUserNameFromEmailAsync(string email);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__0(IdentityUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__1(IdentityUser user);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__2(IdentityUser user, string email);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<IdentityResult> <>n__3(IdentityUser user, string userName);
    [CompilerGeneratedAttribute]
private bool <ValidateUserNameAsync>b__50_0(char c);
}
public class Volo.Abp.Identity.IdentityUserOrganizationUnit : CreationAuditedEntity {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OrganizationUnitId>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Guid UserId { get; protected set; }
    public Guid OrganizationUnitId { get; protected set; }
    public IdentityUserOrganizationUnit(Guid userId, Guid organizationUnitId, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserId();
    [CompilerGeneratedAttribute]
protected virtual void set_UserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Guid get_OrganizationUnitId();
    [CompilerGeneratedAttribute]
protected virtual void set_OrganizationUnitId(Guid value);
    public virtual Object[] GetKeys();
}
public class Volo.Abp.Identity.IdentityUserRepositoryExternalUserLookupServiceProvider : object {
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <UserRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupNormalizer <LookupNormalizer>k__BackingField;
    protected IIdentityUserRepository UserRepository { get; }
    protected ILookupNormalizer LookupNormalizer { get; }
    public IdentityUserRepositoryExternalUserLookupServiceProvider(IIdentityUserRepository userRepository, ILookupNormalizer lookupNormalizer);
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_UserRepository();
    [CompilerGeneratedAttribute]
protected ILookupNormalizer get_LookupNormalizer();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserRepositoryExternalUserLookupServiceProvider/<FindByIdAsync>d__7")]
public virtual Task`1<IUserData> FindByIdAsync(Guid id, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserRepositoryExternalUserLookupServiceProvider/<FindByUserNameAsync>d__8")]
public virtual Task`1<IUserData> FindByUserNameAsync(string userName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserRepositoryExternalUserLookupServiceProvider/<SearchAsync>d__9")]
public virtual Task`1<List`1<IUserData>> SearchAsync(string sorting, string filter, int maxResultCount, int skipCount, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserRepositoryExternalUserLookupServiceProvider/<GetCountAsync>d__10")]
public sealed virtual Task`1<long> GetCountAsync(string filter, CancellationToken cancellationToken);
}
public class Volo.Abp.Identity.IdentityUserRole : Entity {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RoleId>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Guid UserId { get; protected set; }
    public Guid RoleId { get; protected set; }
    protected internal IdentityUserRole(Guid userId, Guid roleId, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserId();
    [CompilerGeneratedAttribute]
protected virtual void set_UserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Guid get_RoleId();
    [CompilerGeneratedAttribute]
protected virtual void set_RoleId(Guid value);
    public virtual Object[] GetKeys();
}
public class Volo.Abp.Identity.IdentityUserStore : object {
    private static string InternalLoginProvider;
    private static string AuthenticatorKeyTokenName;
    private static string RecoveryCodeTokenName;
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <ErrorDescriber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSaveChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityRoleRepository <RoleRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger`1<IdentityRoleStore> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupNormalizer <LookupNormalizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <UserRepository>k__BackingField;
    public IdentityErrorDescriber ErrorDescriber { get; public set; }
    public bool AutoSaveChanges { get; public set; }
    protected IIdentityRoleRepository RoleRepository { get; }
    protected IGuidGenerator GuidGenerator { get; }
    protected ILogger`1<IdentityRoleStore> Logger { get; }
    protected ILookupNormalizer LookupNormalizer { get; }
    protected IIdentityUserRepository UserRepository { get; }
    public IdentityUserStore(IIdentityUserRepository userRepository, IIdentityRoleRepository roleRepository, IGuidGenerator guidGenerator, ILogger`1<IdentityRoleStore> logger, ILookupNormalizer lookupNormalizer, IdentityErrorDescriber describer);
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_ErrorDescriber();
    [CompilerGeneratedAttribute]
public void set_ErrorDescriber(IdentityErrorDescriber value);
    [CompilerGeneratedAttribute]
public bool get_AutoSaveChanges();
    [CompilerGeneratedAttribute]
public void set_AutoSaveChanges(bool value);
    [CompilerGeneratedAttribute]
protected IIdentityRoleRepository get_RoleRepository();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected ILogger`1<IdentityRoleStore> get_Logger();
    [CompilerGeneratedAttribute]
protected ILookupNormalizer get_LookupNormalizer();
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_UserRepository();
    public virtual Task`1<string> GetUserIdAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<string> GetUserNameAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetUserNameAsync(IdentityUser user, string userName, CancellationToken cancellationToken);
    public virtual Task`1<string> GetNormalizedUserNameAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetNormalizedUserNameAsync(IdentityUser user, string normalizedName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<CreateAsync>d__32")]
public virtual Task`1<IdentityResult> CreateAsync(IdentityUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<UpdateAsync>d__33")]
public virtual Task`1<IdentityResult> UpdateAsync(IdentityUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<DeleteAsync>d__34")]
public virtual Task`1<IdentityResult> DeleteAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<IdentityUser> FindByIdAsync(string userId, CancellationToken cancellationToken);
    public virtual Task`1<IdentityUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken);
    public virtual Task SetPasswordHashAsync(IdentityUser user, string passwordHash, CancellationToken cancellationToken);
    public virtual Task`1<string> GetPasswordHashAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<bool> HasPasswordAsync(IdentityUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<AddToRoleAsync>d__40")]
public virtual Task AddToRoleAsync(IdentityUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<RemoveFromRoleAsync>d__41")]
public virtual Task RemoveFromRoleAsync(IdentityUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<GetRolesAsync>d__42")]
public virtual Task`1<IList`1<string>> GetRolesAsync(IdentityUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<IsInRoleAsync>d__43")]
public virtual Task`1<bool> IsInRoleAsync(IdentityUser user, string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<GetClaimsAsync>d__44")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(IdentityUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<AddClaimsAsync>d__45")]
public virtual Task AddClaimsAsync(IdentityUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<ReplaceClaimAsync>d__46")]
public virtual Task ReplaceClaimAsync(IdentityUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<RemoveClaimsAsync>d__47")]
public virtual Task RemoveClaimsAsync(IdentityUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<AddLoginAsync>d__48")]
public virtual Task AddLoginAsync(IdentityUser user, UserLoginInfo login, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<RemoveLoginAsync>d__49")]
public virtual Task RemoveLoginAsync(IdentityUser user, string loginProvider, string providerKey, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<GetLoginsAsync>d__50")]
public virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<IdentityUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetEmailConfirmedAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetEmailConfirmedAsync(IdentityUser user, bool confirmed, CancellationToken cancellationToken);
    public virtual Task SetEmailAsync(IdentityUser user, string email, CancellationToken cancellationToken);
    public virtual Task`1<string> GetEmailAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<string> GetNormalizedEmailAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetNormalizedEmailAsync(IdentityUser user, string normalizedEmail, CancellationToken cancellationToken);
    public virtual Task`1<IdentityUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> GetLockoutEndDateAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetLockoutEndDateAsync(IdentityUser user, Nullable`1<DateTimeOffset> lockoutEnd, CancellationToken cancellationToken);
    public virtual Task`1<int> IncrementAccessFailedCountAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task ResetAccessFailedCountAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<int> GetAccessFailedCountAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetLockoutEnabledAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetLockoutEnabledAsync(IdentityUser user, bool enabled, CancellationToken cancellationToken);
    public virtual Task SetPhoneNumberAsync(IdentityUser user, string phoneNumber, CancellationToken cancellationToken);
    public virtual Task`1<string> GetPhoneNumberAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetPhoneNumberConfirmedAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetPhoneNumberConfirmedAsync(IdentityUser user, bool confirmed, CancellationToken cancellationToken);
    public virtual Task SetSecurityStampAsync(IdentityUser user, string stamp, CancellationToken cancellationToken);
    public virtual Task`1<string> GetSecurityStampAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task SetTwoFactorEnabledAsync(IdentityUser user, bool enabled, CancellationToken cancellationToken);
    public virtual Task`1<bool> GetTwoFactorEnabledAsync(IdentityUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<GetUsersForClaimAsync>d__74")]
public virtual Task`1<IList`1<IdentityUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<GetUsersInRoleAsync>d__75")]
public virtual Task`1<IList`1<IdentityUser>> GetUsersInRoleAsync(string normalizedRoleName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<SetTokenAsync>d__76")]
public virtual Task SetTokenAsync(IdentityUser user, string loginProvider, string name, string value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<RemoveTokenAsync>d__77")]
public virtual Task RemoveTokenAsync(IdentityUser user, string loginProvider, string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<GetTokenAsync>d__78")]
public virtual Task`1<string> GetTokenAsync(IdentityUser user, string loginProvider, string name, CancellationToken cancellationToken);
    public virtual Task SetAuthenticatorKeyAsync(IdentityUser user, string key, CancellationToken cancellationToken);
    public virtual Task`1<string> GetAuthenticatorKeyAsync(IdentityUser user, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<CountCodesAsync>d__81")]
public virtual Task`1<int> CountCodesAsync(IdentityUser user, CancellationToken cancellationToken);
    public virtual Task ReplaceCodesAsync(IdentityUser user, IEnumerable`1<string> recoveryCodes, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.IdentityUserStore/<RedeemCodeAsync>d__83")]
public virtual Task`1<bool> RedeemCodeAsync(IdentityUser user, string code, CancellationToken cancellationToken);
    public virtual Task`1<string> GetInternalLoginProviderAsync();
    public virtual Task`1<string> GetAuthenticatorKeyTokenNameAsync();
    public virtual Task`1<string> GetRecoveryCodeTokenNameAsync();
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
private string <IsInRoleAsync>b__43_0(string r);
}
public class Volo.Abp.Identity.IdentityUserToken : Entity {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Guid UserId { get; protected set; }
    public string LoginProvider { get; protected set; }
    public string Name { get; protected set; }
    public string Value { get; public set; }
    protected internal IdentityUserToken(Guid userId, string loginProvider, string name, string value, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_UserId();
    [CompilerGeneratedAttribute]
protected virtual void set_UserId(Guid value);
    [CompilerGeneratedAttribute]
public virtual string get_LoginProvider();
    [CompilerGeneratedAttribute]
protected virtual void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
public virtual void set_Value(string value);
    public virtual Object[] GetKeys();
}
public interface Volo.Abp.Identity.IExternalLoginProvider {
    public abstract virtual Task`1<bool> TryAuthenticateAsync(string userName, string plainPassword);
    public abstract virtual Task`1<IdentityUser> CreateUserAsync(string userName, string providerName);
    public abstract virtual Task UpdateUserAsync(IdentityUser user, string providerName);
    public abstract virtual Task`1<bool> IsEnabledAsync();
}
public interface Volo.Abp.Identity.IExternalLoginProviderWithPassword {
    public bool CanObtainUserInfoWithoutPassword { get; }
    public abstract virtual bool get_CanObtainUserInfoWithoutPassword();
    public abstract virtual Task`1<IdentityUser> CreateUserAsync(string userName, string providerName, string plainPassword);
    public abstract virtual Task UpdateUserAsync(IdentityUser user, string providerName, string plainPassword);
}
public interface Volo.Abp.Identity.IIdentityClaimTypeRepository {
    public abstract virtual Task`1<bool> AnyAsync(string name, Nullable`1<Guid> ignoredId, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityClaimType>> GetListAsync(string sorting, int maxResultCount, int skipCount, string filter, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> GetCountAsync(string filter, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityClaimType>> GetListByNamesAsync(IEnumerable`1<string> names, CancellationToken cancellationToken);
}
public interface Volo.Abp.Identity.IIdentityDataSeeder {
    public abstract virtual Task`1<IdentityDataSeedResult> SeedAsync(string adminEmail, string adminPassword, Nullable`1<Guid> tenantId, string adminUserName);
}
public interface Volo.Abp.Identity.IIdentityLinkUserRepository {
    public abstract virtual Task`1<IdentityLinkUser> FindAsync(IdentityLinkUserInfo sourceLinkUserInfo, IdentityLinkUserInfo targetLinkUserInfo, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityLinkUser>> GetListAsync(IdentityLinkUserInfo linkUserInfo, List`1<IdentityLinkUserInfo> excludes, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAsync(IdentityLinkUserInfo linkUserInfo, CancellationToken cancellationToken);
}
public interface Volo.Abp.Identity.IIdentityRoleRepository {
    public abstract virtual Task`1<IdentityRole> FindByNormalizedNameAsync(string normalizedRoleName, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRoleWithUserCount>> GetListWithUserCountAsync(string sorting, int maxResultCount, int skipCount, string filter, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRole>> GetListAsync(string sorting, int maxResultCount, int skipCount, string filter, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRole>> GetListAsync(IEnumerable`1<Guid> ids, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRole>> GetDefaultOnesAsync(bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> GetCountAsync(string filter, CancellationToken cancellationToken);
    public abstract virtual Task RemoveClaimFromAllRolesAsync(string claimType, bool autoSave, CancellationToken cancellationToken);
}
public interface Volo.Abp.Identity.IIdentitySecurityLogRepository {
    public abstract virtual Task`1<List`1<IdentitySecurityLog>> GetListAsync(string sorting, int maxResultCount, int skipCount, Nullable`1<DateTime> startTime, Nullable`1<DateTime> endTime, string applicationName, string identity, string action, Nullable`1<Guid> userId, string userName, string clientId, string correlationId, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> GetCountAsync(Nullable`1<DateTime> startTime, Nullable`1<DateTime> endTime, string applicationName, string identity, string action, Nullable`1<Guid> userId, string userName, string clientId, string correlationId, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentitySecurityLog> GetByUserIdAsync(Guid id, Guid userId, bool includeDetails, CancellationToken cancellationToken);
}
public interface Volo.Abp.Identity.IIdentitySessionRepository {
    public abstract virtual Task`1<IdentitySession> FindAsync(string sessionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentitySession> GetAsync(string sessionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ExistAsync(Guid id, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> ExistAsync(string sessionId, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentitySession>> GetListAsync(string sorting, int maxResultCount, int skipCount, Nullable`1<Guid> userId, string device, string clientId, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> GetCountAsync(Nullable`1<Guid> userId, string device, string clientId, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAllAsync(Guid userId, Nullable`1<Guid> exceptSessionId, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAllAsync(Guid userId, string device, Nullable`1<Guid> exceptSessionId, CancellationToken cancellationToken);
    public abstract virtual Task DeleteAllAsync(TimeSpan inactiveTimeSpan, CancellationToken cancellationToken);
}
public interface Volo.Abp.Identity.IIdentityUserDelegationRepository {
    public abstract virtual Task`1<List`1<IdentityUserDelegation>> GetListAsync(Nullable`1<Guid> sourceUserId, Nullable`1<Guid> targetUserId, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUserDelegation>> GetActiveDelegationsAsync(Guid targetUserId, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityUserDelegation> FindActiveDelegationByIdAsync(Guid id, CancellationToken cancellationToken);
}
public interface Volo.Abp.Identity.IIdentityUserRepository {
    public abstract virtual Task`1<IdentityUser> FindByNormalizedUserNameAsync(string normalizedUserName, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<string>> GetRoleNamesAsync(Guid id, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<string>> GetRoleNamesInOrganizationUnitAsync(Guid id, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityUser> FindByLoginAsync(string loginProvider, string providerKey, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityUser> FindByNormalizedEmailAsync(string normalizedEmail, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetListByClaimAsync(Claim claim, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task RemoveClaimFromAllUsersAsync(string claimType, bool autoSave, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetListByNormalizedRoleNameAsync(string normalizedRoleName, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<Guid>> GetUserIdListByRoleIdAsync(Guid roleId, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetListAsync(string sorting, int maxResultCount, int skipCount, string filter, bool includeDetails, Nullable`1<Guid> roleId, Nullable`1<Guid> organizationUnitId, string userName, string phoneNumber, string emailAddress, string name, string surname, Nullable`1<bool> isLockedOut, Nullable`1<bool> notActive, Nullable`1<bool> emailConfirmed, Nullable`1<bool> isExternal, Nullable`1<DateTime> maxCreationTime, Nullable`1<DateTime> minCreationTime, Nullable`1<DateTime> maxModifitionTime, Nullable`1<DateTime> minModifitionTime, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRole>> GetRolesAsync(Guid id, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<OrganizationUnit>> GetOrganizationUnitsAsync(Guid id, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetUsersInOrganizationUnitAsync(Guid organizationUnitId, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetUsersInOrganizationsListAsync(List`1<Guid> organizationUnitIds, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetUsersInOrganizationUnitWithChildrenAsync(string code, CancellationToken cancellationToken);
    public abstract virtual Task`1<long> GetCountAsync(string filter, Nullable`1<Guid> roleId, Nullable`1<Guid> organizationUnitId, string userName, string phoneNumber, string emailAddress, string name, string surname, Nullable`1<bool> isLockedOut, Nullable`1<bool> notActive, Nullable`1<bool> emailConfirmed, Nullable`1<bool> isExternal, Nullable`1<DateTime> maxCreationTime, Nullable`1<DateTime> minCreationTime, Nullable`1<DateTime> maxModifitionTime, Nullable`1<DateTime> minModifitionTime, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityUser> FindByTenantIdAndUserNameAsync(string userName, Nullable`1<Guid> tenantId, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetListByIdsAsync(IEnumerable`1<Guid> ids, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task UpdateRoleAsync(Guid sourceRoleId, Nullable`1<Guid> targetRoleId, CancellationToken cancellationToken);
    public abstract virtual Task UpdateOrganizationAsync(Guid sourceOrganizationId, Nullable`1<Guid> targetOrganizationId, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUserIdWithRoleNames>> GetRoleNamesAsync(IEnumerable`1<Guid> userIds, CancellationToken cancellationToken);
}
public interface Volo.Abp.Identity.IOrganizationUnitRepository {
    public abstract virtual Task`1<List`1<OrganizationUnit>> GetChildrenAsync(Nullable`1<Guid> parentId, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<OrganizationUnit>> GetAllChildrenWithParentCodeAsync(string code, Nullable`1<Guid> parentId, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<OrganizationUnit> GetAsync(string displayName, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<OrganizationUnit>> GetListAsync(string sorting, int maxResultCount, int skipCount, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<OrganizationUnit>> GetListAsync(IEnumerable`1<Guid> ids, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<OrganizationUnit>> GetListByRoleIdAsync(Guid roleId, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRole>> GetRolesAsync(OrganizationUnit organizationUnit, string sorting, int maxResultCount, int skipCount, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRole>> GetRolesAsync(Guid[] organizationUnitIds, string sorting, int maxResultCount, int skipCount, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetRolesCountAsync(OrganizationUnit organizationUnit, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityRole>> GetUnaddedRolesAsync(OrganizationUnit organizationUnit, string sorting, int maxResultCount, int skipCount, string filter, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetUnaddedRolesCountAsync(OrganizationUnit organizationUnit, string filter, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetMembersAsync(OrganizationUnit organizationUnit, string sorting, int maxResultCount, int skipCount, string filter, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<Guid>> GetMemberIdsAsync(Guid id, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetMembersCountAsync(OrganizationUnit organizationUnit, string filter, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<IdentityUser>> GetUnaddedUsersAsync(OrganizationUnit organizationUnit, string sorting, int maxResultCount, int skipCount, string filter, bool includeDetails, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetUnaddedUsersCountAsync(OrganizationUnit organizationUnit, string filter, CancellationToken cancellationToken);
    public abstract virtual Task RemoveAllRolesAsync(OrganizationUnit organizationUnit, CancellationToken cancellationToken);
    public abstract virtual Task RemoveAllMembersAsync(OrganizationUnit organizationUnit, CancellationToken cancellationToken);
}
public class Volo.Abp.Identity.OrganizationUnit : FullAuditedAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EntityVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<OrganizationUnitRole> <Roles>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Nullable`1<Guid> ParentId { get; internal set; }
    public string Code { get; internal set; }
    public string DisplayName { get; public set; }
    public int EntityVersion { get; public set; }
    public ICollection`1<OrganizationUnitRole> Roles { get; protected set; }
    public OrganizationUnit(Guid id, string displayName, Nullable`1<Guid> parentId, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_ParentId();
    [CompilerGeneratedAttribute]
internal virtual void set_ParentId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual string get_Code();
    [CompilerGeneratedAttribute]
internal virtual void set_Code(string value);
    [CompilerGeneratedAttribute]
public virtual string get_DisplayName();
    [CompilerGeneratedAttribute]
public virtual void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public virtual int get_EntityVersion();
    [CompilerGeneratedAttribute]
public virtual void set_EntityVersion(int value);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<OrganizationUnitRole> get_Roles();
    [CompilerGeneratedAttribute]
protected virtual void set_Roles(ICollection`1<OrganizationUnitRole> value);
    public static string CreateCode(Int32[] numbers);
    public static string AppendCode(string parentCode, string childCode);
    public static string GetRelativeCode(string code, string parentCode);
    public static string CalculateNextCode(string code);
    public static string GetLastUnitCode(string code);
    public static string GetParentCode(string code);
    public virtual void AddRole(Guid roleId);
    public virtual void RemoveRole(Guid roleId);
    public virtual bool IsInRole(Guid roleId);
}
public class Volo.Abp.Identity.OrganizationUnitManager : DomainService {
    [CompilerGeneratedAttribute]
private IOrganizationUnitRepository <OrganizationUnitRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringLocalizer`1<IdentityResource> <Localizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IIdentityRoleRepository <IdentityRoleRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache`1<AbpDynamicClaimCacheItem> <DynamicClaimCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    protected IOrganizationUnitRepository OrganizationUnitRepository { get; }
    protected IStringLocalizer`1<IdentityResource> Localizer { get; }
    protected IIdentityRoleRepository IdentityRoleRepository { get; }
    protected IDistributedCache`1<AbpDynamicClaimCacheItem> DynamicClaimCache { get; }
    protected ICancellationTokenProvider CancellationTokenProvider { get; }
    public OrganizationUnitManager(IOrganizationUnitRepository organizationUnitRepository, IStringLocalizer`1<IdentityResource> localizer, IIdentityRoleRepository identityRoleRepository, IDistributedCache`1<AbpDynamicClaimCacheItem> dynamicClaimCache, ICancellationTokenProvider cancellationTokenProvider);
    [CompilerGeneratedAttribute]
protected IOrganizationUnitRepository get_OrganizationUnitRepository();
    [CompilerGeneratedAttribute]
protected IStringLocalizer`1<IdentityResource> get_Localizer();
    [CompilerGeneratedAttribute]
protected IIdentityRoleRepository get_IdentityRoleRepository();
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<AbpDynamicClaimCacheItem> get_DynamicClaimCache();
    [CompilerGeneratedAttribute]
protected ICancellationTokenProvider get_CancellationTokenProvider();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<CreateAsync>d__16")]
[UnitOfWorkAttribute]
public virtual Task CreateAsync(OrganizationUnit organizationUnit);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<UpdateAsync>d__17")]
public virtual Task UpdateAsync(OrganizationUnit organizationUnit);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<GetNextChildCodeAsync>d__18")]
public virtual Task`1<string> GetNextChildCodeAsync(Nullable`1<Guid> parentId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<GetLastChildOrNullAsync>d__19")]
public virtual Task`1<OrganizationUnit> GetLastChildOrNullAsync(Nullable`1<Guid> parentId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<DeleteAsync>d__20")]
[UnitOfWorkAttribute]
public virtual Task DeleteAsync(Guid id);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<MoveAsync>d__21")]
[UnitOfWorkAttribute]
public virtual Task MoveAsync(Guid id, Nullable`1<Guid> parentId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<GetCodeOrDefaultAsync>d__22")]
public virtual Task`1<string> GetCodeOrDefaultAsync(Guid id);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<ValidateOrganizationUnitAsync>d__23")]
protected virtual Task ValidateOrganizationUnitAsync(OrganizationUnit organizationUnit);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<FindChildrenAsync>d__24")]
public Task`1<List`1<OrganizationUnit>> FindChildrenAsync(Nullable`1<Guid> parentId, bool recursive);
    public virtual Task`1<bool> IsInOrganizationUnitAsync(IdentityUser user, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<AddRoleToOrganizationUnitAsync>d__26")]
public virtual Task AddRoleToOrganizationUnitAsync(Guid roleId, Guid ouId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<AddRoleToOrganizationUnitAsync>d__27")]
public virtual Task AddRoleToOrganizationUnitAsync(IdentityRole role, OrganizationUnit ou);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<RemoveRoleFromOrganizationUnitAsync>d__28")]
public virtual Task RemoveRoleFromOrganizationUnitAsync(Guid roleId, Guid ouId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<RemoveRoleFromOrganizationUnitAsync>d__29")]
public virtual Task RemoveRoleFromOrganizationUnitAsync(IdentityRole role, OrganizationUnit organizationUnit);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.OrganizationUnitManager/<RemoveDynamicClaimCacheAsync>d__30")]
public virtual Task RemoveDynamicClaimCacheAsync(OrganizationUnit organizationUnit);
}
public class Volo.Abp.Identity.OrganizationUnitRole : CreationAuditedEntity {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RoleId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OrganizationUnitId>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public Guid RoleId { get; protected set; }
    public Guid OrganizationUnitId { get; protected set; }
    public OrganizationUnitRole(Guid roleId, Guid organizationUnitId, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual Guid get_RoleId();
    [CompilerGeneratedAttribute]
protected virtual void set_RoleId(Guid value);
    [CompilerGeneratedAttribute]
public virtual Guid get_OrganizationUnitId();
    [CompilerGeneratedAttribute]
protected virtual void set_OrganizationUnitId(Guid value);
    public virtual Object[] GetKeys();
}
public class Volo.Abp.Identity.UserEntityUpdatedOrDeletedEventHandler : object {
    [CompilerGeneratedAttribute]
private ILogger`1<UserEntityUpdatedOrDeletedEventHandler> <Logger>k__BackingField;
    private IDistributedCache`1<AbpDynamicClaimCacheItem> _dynamicClaimCache;
    public ILogger`1<UserEntityUpdatedOrDeletedEventHandler> Logger { get; public set; }
    public UserEntityUpdatedOrDeletedEventHandler(IDistributedCache`1<AbpDynamicClaimCacheItem> dynamicClaimCache);
    [CompilerGeneratedAttribute]
public ILogger`1<UserEntityUpdatedOrDeletedEventHandler> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<UserEntityUpdatedOrDeletedEventHandler> value);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.UserEntityUpdatedOrDeletedEventHandler/<HandleEventAsync>d__6")]
[UnitOfWorkAttribute]
public virtual Task HandleEventAsync(EntityUpdatedEventData`1<IdentityUser> eventData);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.UserEntityUpdatedOrDeletedEventHandler/<HandleEventAsync>d__7")]
[UnitOfWorkAttribute]
public virtual Task HandleEventAsync(EntityDeletedEventData`1<IdentityUser> eventData);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.UserEntityUpdatedOrDeletedEventHandler/<RemoveDynamicClaimCacheAsync>d__8")]
protected virtual Task RemoveDynamicClaimCacheAsync(Guid userId, Nullable`1<Guid> tenantId);
}
public class Volo.Abp.Identity.UserRoleFinder : object {
    [CompilerGeneratedAttribute]
private IIdentityUserRepository <IdentityUserRepository>k__BackingField;
    protected IIdentityUserRepository IdentityUserRepository { get; }
    public UserRoleFinder(IIdentityUserRepository identityUserRepository);
    [CompilerGeneratedAttribute]
protected IIdentityUserRepository get_IdentityUserRepository();
    [AsyncStateMachineAttribute("Volo.Abp.Identity.UserRoleFinder/<GetRolesAsync>d__4")]
[ObsoleteAttribute("Use GetRoleNamesAsync instead.")]
public virtual Task`1<String[]> GetRolesAsync(Guid userId);
    [AsyncStateMachineAttribute("Volo.Abp.Identity.UserRoleFinder/<GetRoleNamesAsync>d__5")]
public sealed virtual Task`1<String[]> GetRoleNamesAsync(Guid userId);
}
internal class VoloAbpIdentityDomain_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
