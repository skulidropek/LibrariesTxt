[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.MultiTenancy.AbpMultiTenancyModule : AbpModule {
    [NullableContextAttribute("1")]
public virtual void ConfigureServices(ServiceConfigurationContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.ActionTenantResolveContributor : TenantResolveContributorBase {
    public static string ContributorName;
    private Action`1<ITenantResolveContext> _resolveAction;
    public string Name { get; }
    public ActionTenantResolveContributor(Action`1<ITenantResolveContext> resolveAction);
    public virtual string get_Name();
    public virtual Task ResolveAsync(ITenantResolveContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.AsyncLocalCurrentTenantAccessor : object {
    [CompilerGeneratedAttribute]
private static AsyncLocalCurrentTenantAccessor <Instance>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AsyncLocal`1<BasicTenantInfo> _currentScope;
    public static AsyncLocalCurrentTenantAccessor Instance { get; }
    [NullableAttribute("2")]
public BasicTenantInfo Current { get; public set; }
    private static AsyncLocalCurrentTenantAccessor();
    [CompilerGeneratedAttribute]
public static AsyncLocalCurrentTenantAccessor get_Instance();
    [NullableContextAttribute("2")]
public sealed virtual BasicTenantInfo get_Current();
    [NullableContextAttribute("2")]
public sealed virtual void set_Current(BasicTenantInfo value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DependencyAttribute]
public class Volo.Abp.MultiTenancy.ConfigurationStore.DefaultTenantStore : object {
    private AbpDefaultTenantStoreOptions _options;
    public DefaultTenantStore(IOptionsMonitor`1<AbpDefaultTenantStoreOptions> options);
    public sealed virtual Task`1<TenantConfiguration> FindAsync(string normalizedName);
    public sealed virtual Task`1<TenantConfiguration> FindAsync(Guid id);
    public sealed virtual Task`1<IReadOnlyList`1<TenantConfiguration>> GetListAsync(bool includeDetails);
    public sealed virtual TenantConfiguration Find(string normalizedName);
    [NullableContextAttribute("2")]
public sealed virtual TenantConfiguration Find(Guid id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.CurrentTenant : object {
    private ICurrentTenantAccessor _currentTenantAccessor;
    public bool IsAvailable { get; }
    public Nullable`1<Guid> Id { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public CurrentTenant(ICurrentTenantAccessor currentTenantAccessor);
    public virtual bool get_IsAvailable();
    public virtual Nullable`1<Guid> get_Id();
    [NullableContextAttribute("2")]
public sealed virtual string get_Name();
    public sealed virtual IDisposable Change(Nullable`1<Guid> id, string name);
    private IDisposable SetCurrent(Nullable`1<Guid> tenantId, string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.CurrentUserTenantResolveContributor : TenantResolveContributorBase {
    public static string ContributorName;
    public string Name { get; }
    public virtual string get_Name();
    public virtual Task ResolveAsync(ITenantResolveContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DependencyAttribute]
public class Volo.Abp.MultiTenancy.MultiTenantConnectionStringResolver : DefaultConnectionStringResolver {
    private ICurrentTenant _currentTenant;
    private IServiceProvider _serviceProvider;
    public MultiTenantConnectionStringResolver(IOptionsMonitor`1<AbpDbConnectionOptions> options, ICurrentTenant currentTenant, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.MultiTenantConnectionStringResolver/<ResolveAsync>d__3")]
public virtual Task`1<string> ResolveAsync(string connectionStringName);
    [ObsoleteAttribute("Use ResolveAsync method.")]
public virtual string Resolve(string connectionStringName);
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.MultiTenantConnectionStringResolver/<FindTenantConfigurationAsync>d__5")]
protected virtual Task`1<TenantConfiguration> FindTenantConfigurationAsync(Guid tenantId);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Use FindTenantConfigurationAsync method.")]
protected virtual TenantConfiguration FindTenantConfiguration(Guid tenantId);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<string> <>n__0(string connectionStringName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.MultiTenantUrlProvider : object {
    public static string TenantPlaceHolder;
    public static string TenantIdPlaceHolder;
    public static string TenantNamePlaceHolder;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantStore <TenantStore>k__BackingField;
    protected ICurrentTenant CurrentTenant { get; }
    protected ITenantStore TenantStore { get; }
    public MultiTenantUrlProvider(ICurrentTenant currentTenant, ITenantStore tenantStore);
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected ITenantStore get_TenantStore();
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.MultiTenantUrlProvider/<GetUrlAsync>d__10")]
public virtual Task`1<string> GetUrlAsync(string templateUrl);
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.MultiTenantUrlProvider/<ReplacePlaceHoldersAsync>d__11")]
protected virtual Task`1<string> ReplacePlaceHoldersAsync(string templateUrl);
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.MultiTenantUrlProvider/<ReplacePlaceHolderAsync>d__12")]
protected virtual Task`1<string> ReplacePlaceHolderAsync(string templateUrl, string placeHolder);
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.MultiTenantUrlProvider/<GetCurrentTenantNameAsync>d__13")]
protected virtual Task`1<string> GetCurrentTenantNameAsync();
}
public class Volo.Abp.MultiTenancy.NullTenantResolveResultAccessor : object {
    [NullableAttribute("2")]
public TenantResolveResult Result { get; public set; }
    [NullableContextAttribute("2")]
public sealed virtual TenantResolveResult get_Result();
    [NullableContextAttribute("2")]
public sealed virtual void set_Result(TenantResolveResult value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.TenantConfigurationProvider : object {
    [CompilerGeneratedAttribute]
private ITenantResolver <TenantResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantStore <TenantStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantNormalizer <TenantNormalizer>k__BackingField;
    [CompilerGeneratedAttribute]
private ITenantResolveResultAccessor <TenantResolveResultAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IStringLocalizer`1<AbpMultiTenancyResource> <StringLocalizer>k__BackingField;
    protected ITenantResolver TenantResolver { get; }
    protected ITenantStore TenantStore { get; }
    protected ITenantNormalizer TenantNormalizer { get; }
    protected ITenantResolveResultAccessor TenantResolveResultAccessor { get; }
    protected IStringLocalizer`1<AbpMultiTenancyResource> StringLocalizer { get; }
    public TenantConfigurationProvider(ITenantResolver tenantResolver, ITenantStore tenantStore, ITenantResolveResultAccessor tenantResolveResultAccessor, IStringLocalizer`1<AbpMultiTenancyResource> stringLocalizer, ITenantNormalizer tenantNormalizer);
    [CompilerGeneratedAttribute]
protected virtual ITenantResolver get_TenantResolver();
    [CompilerGeneratedAttribute]
protected virtual ITenantStore get_TenantStore();
    [CompilerGeneratedAttribute]
protected virtual ITenantNormalizer get_TenantNormalizer();
    [CompilerGeneratedAttribute]
protected virtual ITenantResolveResultAccessor get_TenantResolveResultAccessor();
    [CompilerGeneratedAttribute]
protected virtual IStringLocalizer`1<AbpMultiTenancyResource> get_StringLocalizer();
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.TenantConfigurationProvider/<GetAsync>d__16")]
public virtual Task`1<TenantConfiguration> GetAsync(bool saveResolveResult);
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.TenantConfigurationProvider/<FindTenantAsync>d__17")]
protected virtual Task`1<TenantConfiguration> FindTenantAsync(string tenantIdOrName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.TenantResolveContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TenantIdOrName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    [NullableAttribute("2")]
public string TenantIdOrName { get; public set; }
    public bool Handled { get; public set; }
    public TenantResolveContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual string get_TenantIdOrName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void set_TenantIdOrName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Handled();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Handled(bool value);
    public bool HasResolvedTenantOrHost();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.MultiTenancy.TenantResolveContributorBase : object {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task ResolveAsync(ITenantResolveContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.MultiTenancy.TenantResolver : object {
    private IServiceProvider _serviceProvider;
    private AbpTenantResolveOptions _options;
    public TenantResolver(IOptions`1<AbpTenantResolveOptions> options, IServiceProvider serviceProvider);
    [AsyncStateMachineAttribute("Volo.Abp.MultiTenancy.TenantResolver/<ResolveTenantIdOrNameAsync>d__3")]
public virtual Task`1<TenantResolveResult> ResolveTenantIdOrNameAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Volo.Abp.Settings.TenantSettingValueProvider : SettingValueProvider {
    public static string ProviderName;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    public string Name { get; }
    protected ICurrentTenant CurrentTenant { get; }
    public TenantSettingValueProvider(ISettingStore settingStore, ICurrentTenant currentTenant);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [AsyncStateMachineAttribute("Volo.Abp.Settings.TenantSettingValueProvider/<GetOrNullAsync>d__7")]
public virtual Task`1<string> GetOrNullAsync(SettingDefinition setting);
    [AsyncStateMachineAttribute("Volo.Abp.Settings.TenantSettingValueProvider/<GetAllAsync>d__8")]
public virtual Task`1<List`1<SettingValue>> GetAllAsync(SettingDefinition[] settings);
}
internal class VoloAbpMultiTenancy_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
