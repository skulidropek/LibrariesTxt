[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public static class Volo.Abp.PermissionManagement.AbpPermissionManagementDbProperties : object {
    [CompilerGeneratedAttribute]
private static string <DbTablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DbSchema>k__BackingField;
    public static string ConnectionStringName;
    public static string DbTablePrefix { get; public set; }
    public static string DbSchema { get; public set; }
    private static AbpPermissionManagementDbProperties();
    [CompilerGeneratedAttribute]
public static string get_DbTablePrefix();
    [CompilerGeneratedAttribute]
public static void set_DbTablePrefix(string value);
    [CompilerGeneratedAttribute]
public static string get_DbSchema();
    [CompilerGeneratedAttribute]
public static void set_DbSchema(string value);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.PermissionManagement.AbpPermissionManagementDomainModule : AbpModule {
    private CancellationTokenSource _cancellationTokenSource;
    private Task _initializeDynamicPermissionsTask;
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    public virtual void OnApplicationInitialization(ApplicationInitializationContext context);
    public virtual Task OnApplicationInitializationAsync(ApplicationInitializationContext context);
    public virtual Task OnApplicationShutdownAsync(ApplicationShutdownContext context);
    public Task GetInitializeDynamicPermissionsTask();
    private void InitializeDynamicPermissions(ApplicationInitializationContext context);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.AbpPermissionManagementDomainModule/<SaveStaticPermissionsToDatabaseAsync>d__8")]
private static Task SaveStaticPermissionsToDatabaseAsync(PermissionManagementOptions options, IServiceScope scope, ICancellationTokenProvider cancellationTokenProvider);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.AbpPermissionManagementDomainModule/<PreCacheDynamicPermissionsAsync>d__9")]
private static Task PreCacheDynamicPermissionsAsync(PermissionManagementOptions options, IServiceScope scope);
}
[DependencyAttribute]
public class Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStore : object {
    [CompilerGeneratedAttribute]
private IPermissionGroupDefinitionRecordRepository <PermissionGroupRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDefinitionRecordRepository <PermissionRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDefinitionSerializer <PermissionDefinitionSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDynamicPermissionDefinitionStoreInMemoryCache <StoreCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache <DistributedCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpDistributedLock <DistributedLock>k__BackingField;
    [CompilerGeneratedAttribute]
private PermissionManagementOptions <PermissionManagementOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpDistributedCacheOptions <CacheOptions>k__BackingField;
    protected IPermissionGroupDefinitionRecordRepository PermissionGroupRepository { get; }
    protected IPermissionDefinitionRecordRepository PermissionRepository { get; }
    protected IPermissionDefinitionSerializer PermissionDefinitionSerializer { get; }
    protected IDynamicPermissionDefinitionStoreInMemoryCache StoreCache { get; }
    protected IDistributedCache DistributedCache { get; }
    protected IAbpDistributedLock DistributedLock { get; }
    public PermissionManagementOptions PermissionManagementOptions { get; }
    protected AbpDistributedCacheOptions CacheOptions { get; }
    public DynamicPermissionDefinitionStore(IPermissionGroupDefinitionRecordRepository permissionGroupRepository, IPermissionDefinitionRecordRepository permissionRepository, IPermissionDefinitionSerializer permissionDefinitionSerializer, IDynamicPermissionDefinitionStoreInMemoryCache storeCache, IDistributedCache distributedCache, IOptions`1<AbpDistributedCacheOptions> cacheOptions, IOptions`1<PermissionManagementOptions> permissionManagementOptions, IAbpDistributedLock distributedLock);
    [CompilerGeneratedAttribute]
protected IPermissionGroupDefinitionRecordRepository get_PermissionGroupRepository();
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionRecordRepository get_PermissionRepository();
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionSerializer get_PermissionDefinitionSerializer();
    [CompilerGeneratedAttribute]
protected IDynamicPermissionDefinitionStoreInMemoryCache get_StoreCache();
    [CompilerGeneratedAttribute]
protected IDistributedCache get_DistributedCache();
    [CompilerGeneratedAttribute]
protected IAbpDistributedLock get_DistributedLock();
    [CompilerGeneratedAttribute]
public PermissionManagementOptions get_PermissionManagementOptions();
    [CompilerGeneratedAttribute]
protected AbpDistributedCacheOptions get_CacheOptions();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStore/<GetOrNullAsync>d__25")]
public virtual Task`1<PermissionDefinition> GetOrNullAsync(string name);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStore/<GetPermissionsAsync>d__26")]
public virtual Task`1<IReadOnlyList`1<PermissionDefinition>> GetPermissionsAsync();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStore/<GetGroupsAsync>d__27")]
public virtual Task`1<IReadOnlyList`1<PermissionGroupDefinition>> GetGroupsAsync();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStore/<EnsureCacheIsUptoDateAsync>d__28")]
protected virtual Task EnsureCacheIsUptoDateAsync();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStore/<UpdateInMemoryStoreCache>d__29")]
protected virtual Task UpdateInMemoryStoreCache();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStore/<GetOrSetStampInDistributedCache>d__30")]
protected virtual Task`1<string> GetOrSetStampInDistributedCache();
    protected virtual string GetCommonStampCacheKey();
    protected virtual string GetCommonDistributedLockKey();
}
public class Volo.Abp.PermissionManagement.DynamicPermissionDefinitionStoreInMemoryCache : object {
    [CompilerGeneratedAttribute]
private string <CacheStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, PermissionGroupDefinition> <PermissionGroupDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, PermissionDefinition> <PermissionDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleStateCheckerSerializer <StateCheckerSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableStringSerializer <LocalizableStringSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <SyncSemaphore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastCheckTime>k__BackingField;
    public string CacheStamp { get; public set; }
    protected IDictionary`2<string, PermissionGroupDefinition> PermissionGroupDefinitions { get; }
    protected IDictionary`2<string, PermissionDefinition> PermissionDefinitions { get; }
    protected ISimpleStateCheckerSerializer StateCheckerSerializer { get; }
    protected ILocalizableStringSerializer LocalizableStringSerializer { get; }
    public SemaphoreSlim SyncSemaphore { get; }
    public Nullable`1<DateTime> LastCheckTime { get; public set; }
    public DynamicPermissionDefinitionStoreInMemoryCache(ISimpleStateCheckerSerializer stateCheckerSerializer, ILocalizableStringSerializer localizableStringSerializer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CacheStamp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheStamp(string value);
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, PermissionGroupDefinition> get_PermissionGroupDefinitions();
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, PermissionDefinition> get_PermissionDefinitions();
    [CompilerGeneratedAttribute]
protected ISimpleStateCheckerSerializer get_StateCheckerSerializer();
    [CompilerGeneratedAttribute]
protected ILocalizableStringSerializer get_LocalizableStringSerializer();
    [CompilerGeneratedAttribute]
public sealed virtual SemaphoreSlim get_SyncSemaphore();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_LastCheckTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastCheckTime(Nullable`1<DateTime> value);
    public sealed virtual Task FillAsync(List`1<PermissionGroupDefinitionRecord> permissionGroupRecords, List`1<PermissionDefinitionRecord> permissionRecords);
    public sealed virtual PermissionDefinition GetPermissionOrNull(string name);
    public sealed virtual IReadOnlyList`1<PermissionDefinition> GetPermissions();
    public sealed virtual IReadOnlyList`1<PermissionGroupDefinition> GetGroups();
    private void AddPermissionRecursively(ICanAddChildPermission permissionContainer, PermissionDefinitionRecord permissionRecord, List`1<PermissionDefinitionRecord> allPermissionRecords);
}
public interface Volo.Abp.PermissionManagement.IDynamicPermissionDefinitionStoreInMemoryCache {
    public string CacheStamp { get; public set; }
    public SemaphoreSlim SyncSemaphore { get; }
    public Nullable`1<DateTime> LastCheckTime { get; public set; }
    public abstract virtual string get_CacheStamp();
    public abstract virtual void set_CacheStamp(string value);
    public abstract virtual SemaphoreSlim get_SyncSemaphore();
    public abstract virtual Nullable`1<DateTime> get_LastCheckTime();
    public abstract virtual void set_LastCheckTime(Nullable`1<DateTime> value);
    public abstract virtual Task FillAsync(List`1<PermissionGroupDefinitionRecord> permissionGroupRecords, List`1<PermissionDefinitionRecord> permissionRecords);
    public abstract virtual PermissionDefinition GetPermissionOrNull(string name);
    public abstract virtual IReadOnlyList`1<PermissionDefinition> GetPermissions();
    public abstract virtual IReadOnlyList`1<PermissionGroupDefinition> GetGroups();
}
public interface Volo.Abp.PermissionManagement.IPermissionDataSeeder {
    public abstract virtual Task SeedAsync(string providerName, string providerKey, IEnumerable`1<string> grantedPermissions, Nullable`1<Guid> tenantId);
}
public interface Volo.Abp.PermissionManagement.IPermissionDefinitionRecordRepository {
    public abstract virtual Task`1<PermissionDefinitionRecord> FindByNameAsync(string name, CancellationToken cancellationToken);
}
public interface Volo.Abp.PermissionManagement.IPermissionDefinitionSerializer {
    public abstract virtual Task`1<ValueTuple`2<PermissionGroupDefinitionRecord[], PermissionDefinitionRecord[]>> SerializeAsync(IEnumerable`1<PermissionGroupDefinition> permissionGroups);
    public abstract virtual Task`1<PermissionGroupDefinitionRecord> SerializeAsync(PermissionGroupDefinition permissionGroup);
    public abstract virtual Task`1<PermissionDefinitionRecord> SerializeAsync(PermissionDefinition permission, PermissionGroupDefinition permissionGroup);
}
public interface Volo.Abp.PermissionManagement.IPermissionGrantRepository {
    public abstract virtual Task`1<PermissionGrant> FindAsync(string name, string providerName, string providerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<PermissionGrant>> GetListAsync(string providerName, string providerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<PermissionGrant>> GetListAsync(String[] names, string providerName, string providerKey, CancellationToken cancellationToken);
}
public interface Volo.Abp.PermissionManagement.IPermissionGroupDefinitionRecordRepository {
}
public interface Volo.Abp.PermissionManagement.IPermissionManagementProvider {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task`1<PermissionValueProviderGrantInfo> CheckAsync(string name, string providerName, string providerKey);
    public abstract virtual Task`1<MultiplePermissionValueProviderGrantInfo> CheckAsync(String[] names, string providerName, string providerKey);
    public abstract virtual Task SetAsync(string name, string providerKey, bool isGranted);
}
public interface Volo.Abp.PermissionManagement.IPermissionManager {
    public abstract virtual Task`1<PermissionWithGrantedProviders> GetAsync(string permissionName, string providerName, string providerKey);
    public abstract virtual Task`1<MultiplePermissionWithGrantedProviders> GetAsync(String[] permissionNames, string provideName, string providerKey);
    public abstract virtual Task`1<List`1<PermissionWithGrantedProviders>> GetAllAsync(string providerName, string providerKey);
    public abstract virtual Task SetAsync(string permissionName, string providerName, string providerKey, bool isGranted);
    public abstract virtual Task`1<PermissionGrant> UpdateProviderKeyAsync(PermissionGrant permissionGrant, string providerKey);
    public abstract virtual Task DeleteAsync(string providerName, string providerKey);
}
public interface Volo.Abp.PermissionManagement.IStaticPermissionSaver {
    public abstract virtual Task SaveAsync();
}
public class Volo.Abp.PermissionManagement.MultiplePermissionValueProviderGrantInfo : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, PermissionValueProviderGrantInfo> <Result>k__BackingField;
    public Dictionary`2<string, PermissionValueProviderGrantInfo> Result { get; }
    public MultiplePermissionValueProviderGrantInfo(String[] names);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, PermissionValueProviderGrantInfo> get_Result();
}
public class Volo.Abp.PermissionManagement.MultiplePermissionWithGrantedProviders : object {
    [CompilerGeneratedAttribute]
private List`1<PermissionWithGrantedProviders> <Result>k__BackingField;
    public List`1<PermissionWithGrantedProviders> Result { get; }
    public MultiplePermissionWithGrantedProviders(String[] names);
    [CompilerGeneratedAttribute]
public List`1<PermissionWithGrantedProviders> get_Result();
}
public class Volo.Abp.PermissionManagement.PermissionDataSeedContributor : object {
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDefinitionManager <PermissionDefinitionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDataSeeder <PermissionDataSeeder>k__BackingField;
    protected ICurrentTenant CurrentTenant { get; }
    protected IPermissionDefinitionManager PermissionDefinitionManager { get; }
    protected IPermissionDataSeeder PermissionDataSeeder { get; }
    public PermissionDataSeedContributor(IPermissionDefinitionManager permissionDefinitionManager, IPermissionDataSeeder permissionDataSeeder, ICurrentTenant currentTenant);
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionManager get_PermissionDefinitionManager();
    [CompilerGeneratedAttribute]
protected IPermissionDataSeeder get_PermissionDataSeeder();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionDataSeedContributor/<SeedAsync>d__10")]
public virtual Task SeedAsync(DataSeedContext context);
}
public class Volo.Abp.PermissionManagement.PermissionDataSeeder : object {
    [CompilerGeneratedAttribute]
private IPermissionGrantRepository <PermissionGrantRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    protected IPermissionGrantRepository PermissionGrantRepository { get; }
    protected IGuidGenerator GuidGenerator { get; }
    protected ICurrentTenant CurrentTenant { get; }
    public PermissionDataSeeder(IPermissionGrantRepository permissionGrantRepository, IGuidGenerator guidGenerator, ICurrentTenant currentTenant);
    [CompilerGeneratedAttribute]
protected IPermissionGrantRepository get_PermissionGrantRepository();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionDataSeeder/<SeedAsync>d__10")]
public virtual Task SeedAsync(string providerName, string providerKey, IEnumerable`1<string> grantedPermissions, Nullable`1<Guid> tenantId);
}
public class Volo.Abp.PermissionManagement.PermissionDefinitionRecord : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private string <GroupName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private MultiTenancySides <MultiTenancySide>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateCheckers>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtraPropertyDictionary <ExtraProperties>k__BackingField;
    public string GroupName { get; public set; }
    public string Name { get; public set; }
    public string ParentName { get; public set; }
    public string DisplayName { get; public set; }
    public bool IsEnabled { get; public set; }
    public MultiTenancySides MultiTenancySide { get; public set; }
    public string Providers { get; public set; }
    public string StateCheckers { get; public set; }
    public ExtraPropertyDictionary ExtraProperties { get; protected set; }
    public PermissionDefinitionRecord(Guid id, string groupName, string name, string parentName, string displayName, bool isEnabled, MultiTenancySides multiTenancySide, string providers, string stateCheckers);
    [CompilerGeneratedAttribute]
public string get_GroupName();
    [CompilerGeneratedAttribute]
public void set_GroupName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ParentName();
    [CompilerGeneratedAttribute]
public void set_ParentName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public MultiTenancySides get_MultiTenancySide();
    [CompilerGeneratedAttribute]
public void set_MultiTenancySide(MultiTenancySides value);
    [CompilerGeneratedAttribute]
public string get_Providers();
    [CompilerGeneratedAttribute]
public void set_Providers(string value);
    [CompilerGeneratedAttribute]
public string get_StateCheckers();
    [CompilerGeneratedAttribute]
public void set_StateCheckers(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtraPropertyDictionary get_ExtraProperties();
    [CompilerGeneratedAttribute]
protected void set_ExtraProperties(ExtraPropertyDictionary value);
    public bool HasSameData(PermissionDefinitionRecord otherRecord);
    public void Patch(PermissionDefinitionRecord otherRecord);
}
public class Volo.Abp.PermissionManagement.PermissionDefinitionSerializer : object {
    [CompilerGeneratedAttribute]
private ISimpleStateCheckerSerializer <StateCheckerSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableStringSerializer <LocalizableStringSerializer>k__BackingField;
    protected ISimpleStateCheckerSerializer StateCheckerSerializer { get; }
    protected IGuidGenerator GuidGenerator { get; }
    protected ILocalizableStringSerializer LocalizableStringSerializer { get; }
    public PermissionDefinitionSerializer(IGuidGenerator guidGenerator, ISimpleStateCheckerSerializer stateCheckerSerializer, ILocalizableStringSerializer localizableStringSerializer);
    [CompilerGeneratedAttribute]
protected ISimpleStateCheckerSerializer get_StateCheckerSerializer();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected ILocalizableStringSerializer get_LocalizableStringSerializer();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionDefinitionSerializer/<SerializeAsync>d__10")]
public sealed virtual Task`1<ValueTuple`2<PermissionGroupDefinitionRecord[], PermissionDefinitionRecord[]>> SerializeAsync(IEnumerable`1<PermissionGroupDefinition> permissionGroups);
    public sealed virtual Task`1<PermissionGroupDefinitionRecord> SerializeAsync(PermissionGroupDefinition permissionGroup);
    public sealed virtual Task`1<PermissionDefinitionRecord> SerializeAsync(PermissionDefinition permission, PermissionGroupDefinition permissionGroup);
    protected virtual string SerializeProviders(ICollection`1<string> providers);
    protected virtual string SerializeStateCheckers(List`1<ISimpleStateChecker`1<PermissionDefinition>> stateCheckers);
}
public class Volo.Abp.PermissionManagement.PermissionFinder : object {
    [CompilerGeneratedAttribute]
private IPermissionManager <PermissionManager>k__BackingField;
    protected IPermissionManager PermissionManager { get; }
    public PermissionFinder(IPermissionManager permissionManager);
    [CompilerGeneratedAttribute]
protected IPermissionManager get_PermissionManager();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionFinder/<IsGrantedAsync>d__4")]
public virtual Task`1<List`1<IsGrantedResponse>> IsGrantedAsync(List`1<IsGrantedRequest> requests);
}
public class Volo.Abp.PermissionManagement.PermissionGrant : Entity`1<Guid> {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TenantId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    public Nullable`1<Guid> TenantId { get; protected set; }
    public string Name { get; protected set; }
    public string ProviderName { get; protected set; }
    public string ProviderKey { get; protected internal set; }
    public PermissionGrant(Guid id, string name, string providerName, string providerKey, Nullable`1<Guid> tenantId);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<Guid> get_TenantId();
    [CompilerGeneratedAttribute]
protected virtual void set_TenantId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderName();
    [CompilerGeneratedAttribute]
protected virtual void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
protected internal virtual void set_ProviderKey(string value);
}
public class Volo.Abp.PermissionManagement.PermissionGrantCacheItem : object {
    private static string CacheKeyFormat;
    [CompilerGeneratedAttribute]
private bool <IsGranted>k__BackingField;
    public bool IsGranted { get; public set; }
    public PermissionGrantCacheItem(bool isGranted);
    [CompilerGeneratedAttribute]
public bool get_IsGranted();
    [CompilerGeneratedAttribute]
public void set_IsGranted(bool value);
    public static string CalculateCacheKey(string name, string providerName, string providerKey);
    public static string GetPermissionNameFormCacheKeyOrNull(string cacheKey);
}
public class Volo.Abp.PermissionManagement.PermissionGrantCacheItemInvalidator : object {
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache`1<PermissionGrantCacheItem> <Cache>k__BackingField;
    protected ICurrentTenant CurrentTenant { get; }
    protected IDistributedCache`1<PermissionGrantCacheItem> Cache { get; }
    public PermissionGrantCacheItemInvalidator(IDistributedCache`1<PermissionGrantCacheItem> cache, ICurrentTenant currentTenant);
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<PermissionGrantCacheItem> get_Cache();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionGrantCacheItemInvalidator/<HandleEventAsync>d__7")]
public virtual Task HandleEventAsync(EntityChangedEventData`1<PermissionGrant> eventData);
    protected virtual string CalculateCacheKey(string name, string providerName, string providerKey);
}
public class Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtraPropertyDictionary <ExtraProperties>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public ExtraPropertyDictionary ExtraProperties { get; protected set; }
    public PermissionGroupDefinitionRecord(Guid id, string name, string displayName);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtraPropertyDictionary get_ExtraProperties();
    [CompilerGeneratedAttribute]
protected void set_ExtraProperties(ExtraPropertyDictionary value);
    public bool HasSameData(PermissionGroupDefinitionRecord otherRecord);
    public void Patch(PermissionGroupDefinitionRecord otherRecord);
}
public class Volo.Abp.PermissionManagement.PermissionManagementOptions : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<IPermissionManagementProvider> <ManagementProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ProviderPolicies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveStaticPermissionsToDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamicPermissionStoreEnabled>k__BackingField;
    public ITypeList`1<IPermissionManagementProvider> ManagementProviders { get; }
    public Dictionary`2<string, string> ProviderPolicies { get; }
    public bool SaveStaticPermissionsToDatabase { get; public set; }
    public bool IsDynamicPermissionStoreEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public ITypeList`1<IPermissionManagementProvider> get_ManagementProviders();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ProviderPolicies();
    [CompilerGeneratedAttribute]
public bool get_SaveStaticPermissionsToDatabase();
    [CompilerGeneratedAttribute]
public void set_SaveStaticPermissionsToDatabase(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamicPermissionStoreEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDynamicPermissionStoreEnabled(bool value);
}
public abstract class Volo.Abp.PermissionManagement.PermissionManagementProvider : object {
    [CompilerGeneratedAttribute]
private IPermissionGrantRepository <PermissionGrantRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    public string Name { get; }
    protected IPermissionGrantRepository PermissionGrantRepository { get; }
    protected IGuidGenerator GuidGenerator { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected PermissionManagementProvider(IPermissionGrantRepository permissionGrantRepository, IGuidGenerator guidGenerator, ICurrentTenant currentTenant);
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
protected IPermissionGrantRepository get_PermissionGrantRepository();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManagementProvider/<CheckAsync>d__12")]
public virtual Task`1<PermissionValueProviderGrantInfo> CheckAsync(string name, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManagementProvider/<CheckAsync>d__13")]
public virtual Task`1<MultiplePermissionValueProviderGrantInfo> CheckAsync(String[] names, string providerName, string providerKey);
    public virtual Task SetAsync(string name, string providerKey, bool isGranted);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManagementProvider/<GrantAsync>d__15")]
protected virtual Task GrantAsync(string name, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManagementProvider/<RevokeAsync>d__16")]
protected virtual Task RevokeAsync(string name, string providerKey);
}
public class Volo.Abp.PermissionManagement.PermissionManager : object {
    [CompilerGeneratedAttribute]
private IPermissionGrantRepository <PermissionGrantRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDefinitionManager <PermissionDefinitionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISimpleStateCheckerManager`1<PermissionDefinition> <SimpleStateCheckerManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    [CompilerGeneratedAttribute]
private PermissionManagementOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache`1<PermissionGrantCacheItem> <Cache>k__BackingField;
    private Lazy`1<List`1<IPermissionManagementProvider>> _lazyProviders;
    protected IPermissionGrantRepository PermissionGrantRepository { get; }
    protected IPermissionDefinitionManager PermissionDefinitionManager { get; }
    protected ISimpleStateCheckerManager`1<PermissionDefinition> SimpleStateCheckerManager { get; }
    protected IGuidGenerator GuidGenerator { get; }
    protected ICurrentTenant CurrentTenant { get; }
    protected IReadOnlyList`1<IPermissionManagementProvider> ManagementProviders { get; }
    protected PermissionManagementOptions Options { get; }
    protected IDistributedCache`1<PermissionGrantCacheItem> Cache { get; }
    public PermissionManager(IPermissionDefinitionManager permissionDefinitionManager, ISimpleStateCheckerManager`1<PermissionDefinition> simpleStateCheckerManager, IPermissionGrantRepository permissionGrantRepository, IServiceProvider serviceProvider, IGuidGenerator guidGenerator, IOptions`1<PermissionManagementOptions> options, ICurrentTenant currentTenant, IDistributedCache`1<PermissionGrantCacheItem> cache);
    [CompilerGeneratedAttribute]
protected IPermissionGrantRepository get_PermissionGrantRepository();
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionManager get_PermissionDefinitionManager();
    [CompilerGeneratedAttribute]
protected ISimpleStateCheckerManager`1<PermissionDefinition> get_SimpleStateCheckerManager();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    protected IReadOnlyList`1<IPermissionManagementProvider> get_ManagementProviders();
    [CompilerGeneratedAttribute]
protected PermissionManagementOptions get_Options();
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<PermissionGrantCacheItem> get_Cache();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<GetAsync>d__25")]
public virtual Task`1<PermissionWithGrantedProviders> GetAsync(string permissionName, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<GetAsync>d__26")]
public virtual Task`1<MultiplePermissionWithGrantedProviders> GetAsync(String[] permissionNames, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<GetAllAsync>d__27")]
public virtual Task`1<List`1<PermissionWithGrantedProviders>> GetAllAsync(string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<SetAsync>d__28")]
public virtual Task SetAsync(string permissionName, string providerName, string providerKey, bool isGranted);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<UpdateProviderKeyAsync>d__29")]
public virtual Task`1<PermissionGrant> UpdateProviderKeyAsync(PermissionGrant permissionGrant, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<DeleteAsync>d__30")]
public virtual Task DeleteAsync(string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<GetInternalAsync>d__31")]
protected virtual Task`1<PermissionWithGrantedProviders> GetInternalAsync(PermissionDefinition permission, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionManager/<GetInternalAsync>d__32")]
protected virtual Task`1<MultiplePermissionWithGrantedProviders> GetInternalAsync(PermissionDefinition[] permissions, string providerName, string providerKey);
}
public class Volo.Abp.PermissionManagement.PermissionStore : object {
    [CompilerGeneratedAttribute]
private ILogger`1<PermissionStore> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionGrantRepository <PermissionGrantRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDefinitionManager <PermissionDefinitionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache`1<PermissionGrantCacheItem> <Cache>k__BackingField;
    public ILogger`1<PermissionStore> Logger { get; public set; }
    protected IPermissionGrantRepository PermissionGrantRepository { get; }
    protected IPermissionDefinitionManager PermissionDefinitionManager { get; }
    protected IDistributedCache`1<PermissionGrantCacheItem> Cache { get; }
    public PermissionStore(IPermissionGrantRepository permissionGrantRepository, IDistributedCache`1<PermissionGrantCacheItem> cache, IPermissionDefinitionManager permissionDefinitionManager);
    [CompilerGeneratedAttribute]
public ILogger`1<PermissionStore> get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger`1<PermissionStore> value);
    [CompilerGeneratedAttribute]
protected IPermissionGrantRepository get_PermissionGrantRepository();
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionManager get_PermissionDefinitionManager();
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<PermissionGrantCacheItem> get_Cache();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionStore/<IsGrantedAsync>d__14")]
public virtual Task`1<bool> IsGrantedAsync(string name, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionStore/<GetCacheItemAsync>d__15")]
protected virtual Task`1<PermissionGrantCacheItem> GetCacheItemAsync(string name, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionStore/<SetCacheItemsAsync>d__16")]
protected virtual Task SetCacheItemsAsync(string providerName, string providerKey, string currentName, PermissionGrantCacheItem currentCacheItem);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionStore/<IsGrantedAsync>d__17")]
public virtual Task`1<MultiplePermissionGrantResult> IsGrantedAsync(String[] names, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionStore/<GetCacheItemsAsync>d__18")]
protected virtual Task`1<List`1<KeyValuePair`2<string, PermissionGrantCacheItem>>> GetCacheItemsAsync(String[] names, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.PermissionStore/<SetCacheItemsAsync>d__19")]
protected virtual Task`1<List`1<KeyValuePair`2<string, PermissionGrantCacheItem>>> SetCacheItemsAsync(string providerName, string providerKey, List`1<string> notCacheKeys);
    protected virtual string CalculateCacheKey(string name, string providerName, string providerKey);
    protected virtual string GetPermissionNameFormCacheKeyOrNull(string key);
}
public class Volo.Abp.PermissionManagement.PermissionValueProviderGrantInfo : object {
    [CompilerGeneratedAttribute]
private static PermissionValueProviderGrantInfo <NonGranted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGranted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    public static PermissionValueProviderGrantInfo NonGranted { get; }
    public bool IsGranted { get; }
    public string ProviderKey { get; }
    public PermissionValueProviderGrantInfo(bool isGranted, string providerKey);
    private static PermissionValueProviderGrantInfo();
    [CompilerGeneratedAttribute]
public static PermissionValueProviderGrantInfo get_NonGranted();
    [CompilerGeneratedAttribute]
public virtual bool get_IsGranted();
    [CompilerGeneratedAttribute]
public virtual string get_ProviderKey();
}
public class Volo.Abp.PermissionManagement.PermissionValueProviderInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Key>k__BackingField;
    public string Name { get; }
    public string Key { get; }
    public PermissionValueProviderInfo(string name, string key);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Key();
}
public class Volo.Abp.PermissionManagement.PermissionWithGrantedProviders : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsGranted>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PermissionValueProviderInfo> <Providers>k__BackingField;
    public string Name { get; }
    public bool IsGranted { get; public set; }
    public List`1<PermissionValueProviderInfo> Providers { get; public set; }
    public PermissionWithGrantedProviders(string name, bool isGranted);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public bool get_IsGranted();
    [CompilerGeneratedAttribute]
public void set_IsGranted(bool value);
    [CompilerGeneratedAttribute]
public List`1<PermissionValueProviderInfo> get_Providers();
    [CompilerGeneratedAttribute]
public void set_Providers(List`1<PermissionValueProviderInfo> value);
}
public class Volo.Abp.PermissionManagement.StaticPermissionSaver : object {
    [CompilerGeneratedAttribute]
private IStaticPermissionDefinitionStore <StaticStore>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionGroupDefinitionRecordRepository <PermissionGroupRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDefinitionRecordRepository <PermissionRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IPermissionDefinitionSerializer <PermissionSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private IApplicationInfoAccessor <ApplicationInfoAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpDistributedLock <DistributedLock>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpPermissionOptions <PermissionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpDistributedCacheOptions <CacheOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    protected IStaticPermissionDefinitionStore StaticStore { get; }
    protected IPermissionGroupDefinitionRecordRepository PermissionGroupRepository { get; }
    protected IPermissionDefinitionRecordRepository PermissionRepository { get; }
    protected IPermissionDefinitionSerializer PermissionSerializer { get; }
    protected IDistributedCache Cache { get; }
    protected IApplicationInfoAccessor ApplicationInfoAccessor { get; }
    protected IAbpDistributedLock DistributedLock { get; }
    protected AbpPermissionOptions PermissionOptions { get; }
    protected ICancellationTokenProvider CancellationTokenProvider { get; }
    protected AbpDistributedCacheOptions CacheOptions { get; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    public StaticPermissionSaver(IStaticPermissionDefinitionStore staticStore, IPermissionGroupDefinitionRecordRepository permissionGroupRepository, IPermissionDefinitionRecordRepository permissionRepository, IPermissionDefinitionSerializer permissionSerializer, IDistributedCache cache, IOptions`1<AbpDistributedCacheOptions> cacheOptions, IApplicationInfoAccessor applicationInfoAccessor, IAbpDistributedLock distributedLock, IOptions`1<AbpPermissionOptions> permissionOptions, ICancellationTokenProvider cancellationTokenProvider, IUnitOfWorkManager unitOfWorkManager);
    [CompilerGeneratedAttribute]
protected IStaticPermissionDefinitionStore get_StaticStore();
    [CompilerGeneratedAttribute]
protected IPermissionGroupDefinitionRecordRepository get_PermissionGroupRepository();
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionRecordRepository get_PermissionRepository();
    [CompilerGeneratedAttribute]
protected IPermissionDefinitionSerializer get_PermissionSerializer();
    [CompilerGeneratedAttribute]
protected IDistributedCache get_Cache();
    [CompilerGeneratedAttribute]
protected IApplicationInfoAccessor get_ApplicationInfoAccessor();
    [CompilerGeneratedAttribute]
protected IAbpDistributedLock get_DistributedLock();
    [CompilerGeneratedAttribute]
protected AbpPermissionOptions get_PermissionOptions();
    [CompilerGeneratedAttribute]
protected ICancellationTokenProvider get_CancellationTokenProvider();
    [CompilerGeneratedAttribute]
protected AbpDistributedCacheOptions get_CacheOptions();
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.StaticPermissionSaver/<SaveAsync>d__34")]
public sealed virtual Task SaveAsync();
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.StaticPermissionSaver/<UpdateChangedPermissionGroupsAsync>d__35")]
private Task`1<bool> UpdateChangedPermissionGroupsAsync(IEnumerable`1<PermissionGroupDefinitionRecord> permissionGroupRecords);
    [AsyncStateMachineAttribute("Volo.Abp.PermissionManagement.StaticPermissionSaver/<UpdateChangedPermissionsAsync>d__36")]
private Task`1<bool> UpdateChangedPermissionsAsync(IEnumerable`1<PermissionDefinitionRecord> permissionRecords);
    private string GetApplicationDistributedLockKey();
    private string GetCommonDistributedLockKey();
    private string GetApplicationHashCacheKey();
    private string GetCommonStampCacheKey();
    private static string CalculateHash(PermissionGroupDefinitionRecord[] permissionGroupRecords, PermissionDefinitionRecord[] permissionRecords, IEnumerable`1<string> deletedPermissionGroups, IEnumerable`1<string> deletedPermissions);
    [CompilerGeneratedAttribute]
private bool <UpdateChangedPermissionGroupsAsync>b__35_0(PermissionGroupDefinitionRecord x);
    [CompilerGeneratedAttribute]
private bool <UpdateChangedPermissionsAsync>b__36_0(PermissionDefinitionRecord x);
    [CompilerGeneratedAttribute]
private bool <UpdateChangedPermissionsAsync>b__36_1(PermissionDefinitionRecord x);
}
internal class VoloAbpPermissionManagementDomain_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
