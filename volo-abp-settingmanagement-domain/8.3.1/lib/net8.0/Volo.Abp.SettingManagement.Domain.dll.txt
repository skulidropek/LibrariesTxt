public static class Volo.Abp.SettingManagement.AbpSettingManagementDbProperties : object {
    [CompilerGeneratedAttribute]
private static string <DbTablePrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private static string <DbSchema>k__BackingField;
    public static string ConnectionStringName;
    public static string DbTablePrefix { get; public set; }
    public static string DbSchema { get; public set; }
    private static AbpSettingManagementDbProperties();
    [CompilerGeneratedAttribute]
public static string get_DbTablePrefix();
    [CompilerGeneratedAttribute]
public static void set_DbTablePrefix(string value);
    [CompilerGeneratedAttribute]
public static string get_DbSchema();
    [CompilerGeneratedAttribute]
public static void set_DbSchema(string value);
}
[DependsOnAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.SettingManagement.AbpSettingManagementDomainModule : AbpModule {
    private CancellationTokenSource _cancellationTokenSource;
    private Task _initializeDynamicSettingsTask;
    public virtual void ConfigureServices(ServiceConfigurationContext context);
    public virtual void OnApplicationInitialization(ApplicationInitializationContext context);
    public virtual Task OnApplicationInitializationAsync(ApplicationInitializationContext context);
    public virtual Task OnApplicationShutdownAsync(ApplicationShutdownContext context);
    public Task GetInitializeDynamicSettingsTask();
    private void InitializeDynamicSettings(ApplicationInitializationContext context);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.AbpSettingManagementDomainModule/<SaveStaticSettingsToDatabaseAsync>d__8")]
private static Task SaveStaticSettingsToDatabaseAsync(SettingManagementOptions options, IServiceScope scope, ICancellationTokenProvider cancellationTokenProvider);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.AbpSettingManagementDomainModule/<PreCacheDynamicSettingsAsync>d__9")]
private static Task PreCacheDynamicSettingsAsync(SettingManagementOptions options, IServiceScope scope);
}
public class Volo.Abp.SettingManagement.ConfigurationSettingManagementProvider : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public string Name { get; }
    protected IConfiguration Configuration { get; }
    public ConfigurationSettingManagementProvider(IConfiguration configuration);
    public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
protected IConfiguration get_Configuration();
    public virtual Task`1<string> GetOrNullAsync(SettingDefinition setting, string providerKey);
    public virtual Task SetAsync(SettingDefinition setting, string value, string providerKey);
    public virtual Task ClearAsync(SettingDefinition setting, string providerKey);
}
[ExtensionAttribute]
public static class Volo.Abp.SettingManagement.ConfigurationValueSettingManagerExtensions : object {
    [ExtensionAttribute]
public static Task`1<string> GetOrNullConfigurationAsync(ISettingManager settingManager, string name, bool fallback);
    [ExtensionAttribute]
public static Task`1<List`1<SettingValue>> GetAllConfigurationAsync(ISettingManager settingManager, bool fallback);
}
public class Volo.Abp.SettingManagement.DefaultValueSettingManagementProvider : object {
    public string Name { get; }
    public sealed virtual string get_Name();
    public virtual Task`1<string> GetOrNullAsync(SettingDefinition setting, string providerKey);
    public virtual Task SetAsync(SettingDefinition setting, string value, string providerKey);
    public virtual Task ClearAsync(SettingDefinition setting, string providerKey);
}
[ExtensionAttribute]
public static class Volo.Abp.SettingManagement.DefaultValueSettingManagerExtensions : object {
    [ExtensionAttribute]
public static Task`1<string> GetOrNullDefaultAsync(ISettingManager settingManager, string name, bool fallback);
    [ExtensionAttribute]
public static Task`1<List`1<SettingValue>> GetAllDefaultAsync(ISettingManager settingManager, bool fallback);
}
[DependencyAttribute]
public class Volo.Abp.SettingManagement.DynamicSettingDefinitionStore : object {
    [CompilerGeneratedAttribute]
private ISettingDefinitionRecordRepository <SettingRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingDefinitionSerializer <SettingDefinitionSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDynamicSettingDefinitionStoreInMemoryCache <StoreCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache <DistributedCache>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpDistributedLock <DistributedLock>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingManagementOptions <SettingManagementOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpDistributedCacheOptions <CacheOptions>k__BackingField;
    protected ISettingDefinitionRecordRepository SettingRepository { get; }
    protected ISettingDefinitionSerializer SettingDefinitionSerializer { get; }
    protected IDynamicSettingDefinitionStoreInMemoryCache StoreCache { get; }
    protected IDistributedCache DistributedCache { get; }
    protected IAbpDistributedLock DistributedLock { get; }
    public SettingManagementOptions SettingManagementOptions { get; }
    protected AbpDistributedCacheOptions CacheOptions { get; }
    public DynamicSettingDefinitionStore(ISettingDefinitionRecordRepository textSettingRepository, ISettingDefinitionSerializer textSettingDefinitionSerializer, IDynamicSettingDefinitionStoreInMemoryCache storeCache, IDistributedCache distributedCache, IOptions`1<AbpDistributedCacheOptions> cacheOptions, IOptions`1<SettingManagementOptions> settingManagementOptions, IAbpDistributedLock distributedLock);
    [CompilerGeneratedAttribute]
protected ISettingDefinitionRecordRepository get_SettingRepository();
    [CompilerGeneratedAttribute]
protected ISettingDefinitionSerializer get_SettingDefinitionSerializer();
    [CompilerGeneratedAttribute]
protected IDynamicSettingDefinitionStoreInMemoryCache get_StoreCache();
    [CompilerGeneratedAttribute]
protected IDistributedCache get_DistributedCache();
    [CompilerGeneratedAttribute]
protected IAbpDistributedLock get_DistributedLock();
    [CompilerGeneratedAttribute]
public SettingManagementOptions get_SettingManagementOptions();
    [CompilerGeneratedAttribute]
protected AbpDistributedCacheOptions get_CacheOptions();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.DynamicSettingDefinitionStore/<GetAsync>d__22")]
public virtual Task`1<SettingDefinition> GetAsync(string name);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.DynamicSettingDefinitionStore/<GetOrNullAsync>d__23")]
public virtual Task`1<SettingDefinition> GetOrNullAsync(string name);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.DynamicSettingDefinitionStore/<GetAllAsync>d__24")]
public virtual Task`1<IReadOnlyList`1<SettingDefinition>> GetAllAsync();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.DynamicSettingDefinitionStore/<EnsureCacheIsUptoDateAsync>d__25")]
protected virtual Task EnsureCacheIsUptoDateAsync();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.DynamicSettingDefinitionStore/<UpdateInMemoryStoreCache>d__26")]
protected virtual Task UpdateInMemoryStoreCache();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.DynamicSettingDefinitionStore/<GetOrSetStampInDistributedCache>d__27")]
protected virtual Task`1<string> GetOrSetStampInDistributedCache();
    protected virtual string GetCommonStampCacheKey();
    protected virtual string GetCommonDistributedLockKey();
}
public class Volo.Abp.SettingManagement.DynamicSettingDefinitionStoreInMemoryCache : object {
    [CompilerGeneratedAttribute]
private string <CacheStamp>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SettingDefinition> <SettingDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableStringSerializer <LocalizableStringSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private SemaphoreSlim <SyncSemaphore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastCheckTime>k__BackingField;
    public string CacheStamp { get; public set; }
    protected IDictionary`2<string, SettingDefinition> SettingDefinitions { get; }
    protected ILocalizableStringSerializer LocalizableStringSerializer { get; }
    public SemaphoreSlim SyncSemaphore { get; }
    public Nullable`1<DateTime> LastCheckTime { get; public set; }
    public DynamicSettingDefinitionStoreInMemoryCache(ILocalizableStringSerializer localizableStringSerializer);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CacheStamp();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CacheStamp(string value);
    [CompilerGeneratedAttribute]
protected IDictionary`2<string, SettingDefinition> get_SettingDefinitions();
    [CompilerGeneratedAttribute]
protected ILocalizableStringSerializer get_LocalizableStringSerializer();
    [CompilerGeneratedAttribute]
public sealed virtual SemaphoreSlim get_SyncSemaphore();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<DateTime> get_LastCheckTime();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LastCheckTime(Nullable`1<DateTime> value);
    public sealed virtual Task FillAsync(List`1<SettingDefinitionRecord> settingRecords);
    public sealed virtual SettingDefinition GetSettingOrNull(string name);
    public sealed virtual IReadOnlyList`1<SettingDefinition> GetSettings();
}
public class Volo.Abp.SettingManagement.GlobalSettingManagementProvider : SettingManagementProvider {
    public string Name { get; }
    public GlobalSettingManagementProvider(ISettingManagementStore settingManagementStore);
    public virtual string get_Name();
    protected virtual string NormalizeProviderKey(string providerKey);
}
[ExtensionAttribute]
public static class Volo.Abp.SettingManagement.GlobalSettingManagerExtensions : object {
    [ExtensionAttribute]
public static Task`1<string> GetOrNullGlobalAsync(ISettingManager settingManager, string name, bool fallback);
    [ExtensionAttribute]
public static Task`1<List`1<SettingValue>> GetAllGlobalAsync(ISettingManager settingManager, bool fallback);
    [ExtensionAttribute]
public static Task SetGlobalAsync(ISettingManager settingManager, string name, string value);
}
public interface Volo.Abp.SettingManagement.IDynamicSettingDefinitionStoreInMemoryCache {
    public string CacheStamp { get; public set; }
    public SemaphoreSlim SyncSemaphore { get; }
    public Nullable`1<DateTime> LastCheckTime { get; public set; }
    public abstract virtual string get_CacheStamp();
    public abstract virtual void set_CacheStamp(string value);
    public abstract virtual SemaphoreSlim get_SyncSemaphore();
    public abstract virtual Nullable`1<DateTime> get_LastCheckTime();
    public abstract virtual void set_LastCheckTime(Nullable`1<DateTime> value);
    public abstract virtual Task FillAsync(List`1<SettingDefinitionRecord> settingRecords);
    public abstract virtual SettingDefinition GetSettingOrNull(string name);
    public abstract virtual IReadOnlyList`1<SettingDefinition> GetSettings();
}
public interface Volo.Abp.SettingManagement.ISettingDefinitionRecordRepository {
    public abstract virtual Task`1<SettingDefinitionRecord> FindByNameAsync(string name, CancellationToken cancellationToken);
}
public interface Volo.Abp.SettingManagement.ISettingDefinitionSerializer {
    public abstract virtual Task`1<SettingDefinitionRecord> SerializeAsync(SettingDefinition setting);
    public abstract virtual Task`1<List`1<SettingDefinitionRecord>> SerializeAsync(IEnumerable`1<SettingDefinition> settings);
}
public interface Volo.Abp.SettingManagement.ISettingManagementProvider {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual Task`1<string> GetOrNullAsync(SettingDefinition setting, string providerKey);
    public abstract virtual Task SetAsync(SettingDefinition setting, string value, string providerKey);
    public abstract virtual Task ClearAsync(SettingDefinition setting, string providerKey);
}
public interface Volo.Abp.SettingManagement.ISettingManagementStore {
    public abstract virtual Task`1<string> GetOrNullAsync(string name, string providerName, string providerKey);
    public abstract virtual Task`1<List`1<SettingValue>> GetListAsync(string providerName, string providerKey);
    public abstract virtual Task`1<List`1<SettingValue>> GetListAsync(String[] names, string providerName, string providerKey);
    public abstract virtual Task SetAsync(string name, string value, string providerName, string providerKey);
    public abstract virtual Task DeleteAsync(string name, string providerName, string providerKey);
}
public interface Volo.Abp.SettingManagement.ISettingManager {
    public abstract virtual Task`1<string> GetOrNullAsync(string name, string providerName, string providerKey, bool fallback);
    public abstract virtual Task`1<List`1<SettingValue>> GetAllAsync(string providerName, string providerKey, bool fallback);
    public abstract virtual Task SetAsync(string name, string value, string providerName, string providerKey, bool forceToSet);
    public abstract virtual Task DeleteAsync(string providerName, string providerKey);
}
public interface Volo.Abp.SettingManagement.ISettingRepository {
    public abstract virtual Task`1<Setting> FindAsync(string name, string providerName, string providerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<Setting>> GetListAsync(string providerName, string providerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<List`1<Setting>> GetListAsync(String[] names, string providerName, string providerKey, CancellationToken cancellationToken);
}
public interface Volo.Abp.SettingManagement.IStaticSettingSaver {
    public abstract virtual Task SaveAsync();
}
public class Volo.Abp.SettingManagement.Setting : Entity`1<Guid> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    public string Name { get; protected set; }
    public string Value { get; internal set; }
    public string ProviderName { get; protected set; }
    public string ProviderKey { get; protected set; }
    public Setting(Guid id, string name, string value, string providerName, string providerKey);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual string get_Value();
    [CompilerGeneratedAttribute]
internal virtual void set_Value(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderName();
    [CompilerGeneratedAttribute]
protected virtual void set_ProviderName(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ProviderKey();
    [CompilerGeneratedAttribute]
protected virtual void set_ProviderKey(string value);
    public virtual string ToString();
}
[IgnoreMultiTenancyAttribute]
public class Volo.Abp.SettingManagement.SettingCacheItem : object {
    private static string CacheKeyFormat;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Value { get; public set; }
    public SettingCacheItem(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public static string CalculateCacheKey(string name, string providerName, string providerKey);
    public static string GetSettingNameFormCacheKeyOrNull(string cacheKey);
}
public class Volo.Abp.SettingManagement.SettingCacheItemInvalidator : object {
    [CompilerGeneratedAttribute]
private IDistributedCache`1<SettingCacheItem> <Cache>k__BackingField;
    protected IDistributedCache`1<SettingCacheItem> Cache { get; }
    public SettingCacheItemInvalidator(IDistributedCache`1<SettingCacheItem> cache);
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<SettingCacheItem> get_Cache();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingCacheItemInvalidator/<HandleEventAsync>d__4")]
public virtual Task HandleEventAsync(EntityChangedEventData`1<Setting> eventData);
    protected virtual string CalculateCacheKey(string name, string providerName, string providerKey);
}
public class Volo.Abp.SettingManagement.SettingDefinitionRecord : BasicAggregateRoot`1<Guid> {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisibleToClients>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsInherited>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEncrypted>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtraPropertyDictionary <ExtraProperties>k__BackingField;
    public string Name { get; public set; }
    public string DisplayName { get; public set; }
    public string Description { get; public set; }
    public string DefaultValue { get; public set; }
    public bool IsVisibleToClients { get; public set; }
    public string Providers { get; public set; }
    public bool IsInherited { get; public set; }
    public bool IsEncrypted { get; public set; }
    public ExtraPropertyDictionary ExtraProperties { get; protected set; }
    public SettingDefinitionRecord(Guid id, string name, string displayName, string description, string defaultValue, bool isVisibleToClients, string providers, bool isInherited, bool isEncrypted);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
    [CompilerGeneratedAttribute]
public bool get_IsVisibleToClients();
    [CompilerGeneratedAttribute]
public void set_IsVisibleToClients(bool value);
    [CompilerGeneratedAttribute]
public string get_Providers();
    [CompilerGeneratedAttribute]
public void set_Providers(string value);
    [CompilerGeneratedAttribute]
public bool get_IsInherited();
    [CompilerGeneratedAttribute]
public void set_IsInherited(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEncrypted();
    [CompilerGeneratedAttribute]
public void set_IsEncrypted(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ExtraPropertyDictionary get_ExtraProperties();
    [CompilerGeneratedAttribute]
protected void set_ExtraProperties(ExtraPropertyDictionary value);
    public bool HasSameData(SettingDefinitionRecord otherRecord);
    public void Patch(SettingDefinitionRecord otherRecord);
}
public class Volo.Abp.SettingManagement.SettingDefinitionSerializer : object {
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalizableStringSerializer <LocalizableStringSerializer>k__BackingField;
    protected IGuidGenerator GuidGenerator { get; }
    protected ILocalizableStringSerializer LocalizableStringSerializer { get; }
    public SettingDefinitionSerializer(IGuidGenerator guidGenerator, ILocalizableStringSerializer localizableStringSerializer);
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [CompilerGeneratedAttribute]
protected ILocalizableStringSerializer get_LocalizableStringSerializer();
    public virtual Task`1<SettingDefinitionRecord> SerializeAsync(SettingDefinition setting);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingDefinitionSerializer/<SerializeAsync>d__8")]
public virtual Task`1<List`1<SettingDefinitionRecord>> SerializeAsync(IEnumerable`1<SettingDefinition> settings);
    protected virtual string SerializeProviders(ICollection`1<string> providers);
}
public class Volo.Abp.SettingManagement.SettingManagementOptions : object {
    [CompilerGeneratedAttribute]
private ITypeList`1<ISettingManagementProvider> <Providers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveStaticSettingsToDatabase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDynamicSettingStoreEnabled>k__BackingField;
    public ITypeList`1<ISettingManagementProvider> Providers { get; }
    public bool SaveStaticSettingsToDatabase { get; public set; }
    public bool IsDynamicSettingStoreEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public ITypeList`1<ISettingManagementProvider> get_Providers();
    [CompilerGeneratedAttribute]
public bool get_SaveStaticSettingsToDatabase();
    [CompilerGeneratedAttribute]
public void set_SaveStaticSettingsToDatabase(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDynamicSettingStoreEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDynamicSettingStoreEnabled(bool value);
}
public abstract class Volo.Abp.SettingManagement.SettingManagementProvider : object {
    [CompilerGeneratedAttribute]
private ISettingManagementStore <SettingManagementStore>k__BackingField;
    public string Name { get; }
    protected ISettingManagementStore SettingManagementStore { get; }
    protected SettingManagementProvider(ISettingManagementStore settingManagementStore);
    public abstract virtual string get_Name();
    [CompilerGeneratedAttribute]
protected ISettingManagementStore get_SettingManagementStore();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementProvider/<GetOrNullAsync>d__6")]
public virtual Task`1<string> GetOrNullAsync(SettingDefinition setting, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementProvider/<SetAsync>d__7")]
public virtual Task SetAsync(SettingDefinition setting, string value, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementProvider/<ClearAsync>d__8")]
public virtual Task ClearAsync(SettingDefinition setting, string providerKey);
    protected virtual string NormalizeProviderKey(string providerKey);
}
public class Volo.Abp.SettingManagement.SettingManagementStore : object {
    [CompilerGeneratedAttribute]
private IDistributedCache`1<SettingCacheItem> <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingDefinitionManager <SettingDefinitionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingRepository <SettingRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    protected IDistributedCache`1<SettingCacheItem> Cache { get; }
    protected ISettingDefinitionManager SettingDefinitionManager { get; }
    protected ISettingRepository SettingRepository { get; }
    protected IGuidGenerator GuidGenerator { get; }
    public SettingManagementStore(ISettingRepository settingRepository, IGuidGenerator guidGenerator, IDistributedCache`1<SettingCacheItem> cache, ISettingDefinitionManager settingDefinitionManager);
    [CompilerGeneratedAttribute]
protected IDistributedCache`1<SettingCacheItem> get_Cache();
    [CompilerGeneratedAttribute]
protected ISettingDefinitionManager get_SettingDefinitionManager();
    [CompilerGeneratedAttribute]
protected ISettingRepository get_SettingRepository();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<GetOrNullAsync>d__13")]
[UnitOfWorkAttribute]
public virtual Task`1<string> GetOrNullAsync(string name, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<SetAsync>d__14")]
[UnitOfWorkAttribute]
public virtual Task SetAsync(string name, string value, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<GetListAsync>d__15")]
public virtual Task`1<List`1<SettingValue>> GetListAsync(string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<DeleteAsync>d__16")]
[UnitOfWorkAttribute]
public virtual Task DeleteAsync(string name, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<GetCacheItemAsync>d__17")]
protected virtual Task`1<SettingCacheItem> GetCacheItemAsync(string name, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<SetCacheItemsAsync>d__18")]
private Task SetCacheItemsAsync(string providerName, string providerKey, string currentName, SettingCacheItem currentCacheItem);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<GetListAsync>d__19")]
[UnitOfWorkAttribute]
public sealed virtual Task`1<List`1<SettingValue>> GetListAsync(String[] names, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<GetCacheItemsAsync>d__20")]
protected virtual Task`1<List`1<KeyValuePair`2<string, SettingCacheItem>>> GetCacheItemsAsync(String[] names, string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManagementStore/<SetCacheItemsAsync>d__21")]
private Task`1<List`1<KeyValuePair`2<string, SettingCacheItem>>> SetCacheItemsAsync(string providerName, string providerKey, List`1<string> notCacheKeys);
    protected virtual string CalculateCacheKey(string name, string providerName, string providerKey);
    protected virtual string GetSettingNameFormCacheKeyOrNull(string key);
}
public class Volo.Abp.SettingManagement.SettingManager : object {
    [CompilerGeneratedAttribute]
private ISettingDefinitionManager <SettingDefinitionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingEncryptionService <SettingEncryptionService>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingManagementStore <SettingManagementStore>k__BackingField;
    [CompilerGeneratedAttribute]
private SettingManagementOptions <Options>k__BackingField;
    private Lazy`1<List`1<ISettingManagementProvider>> _lazyProviders;
    protected ISettingDefinitionManager SettingDefinitionManager { get; }
    protected ISettingEncryptionService SettingEncryptionService { get; }
    protected ISettingManagementStore SettingManagementStore { get; }
    protected List`1<ISettingManagementProvider> Providers { get; }
    protected SettingManagementOptions Options { get; }
    public SettingManager(IOptions`1<SettingManagementOptions> options, IServiceProvider serviceProvider, ISettingDefinitionManager settingDefinitionManager, ISettingEncryptionService settingEncryptionService, ISettingManagementStore settingManagementStore);
    [CompilerGeneratedAttribute]
protected ISettingDefinitionManager get_SettingDefinitionManager();
    [CompilerGeneratedAttribute]
protected ISettingEncryptionService get_SettingEncryptionService();
    [CompilerGeneratedAttribute]
protected ISettingManagementStore get_SettingManagementStore();
    protected List`1<ISettingManagementProvider> get_Providers();
    [CompilerGeneratedAttribute]
protected SettingManagementOptions get_Options();
    public virtual Task`1<string> GetOrNullAsync(string name, string providerName, string providerKey, bool fallback);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManager/<GetAllAsync>d__17")]
public virtual Task`1<List`1<SettingValue>> GetAllAsync(string providerName, string providerKey, bool fallback);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManager/<SetAsync>d__18")]
public virtual Task SetAsync(string name, string value, string providerName, string providerKey, bool forceToSet);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManager/<DeleteAsync>d__19")]
public virtual Task DeleteAsync(string providerName, string providerKey);
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.SettingManager/<GetOrNullInternalAsync>d__20")]
protected virtual Task`1<string> GetOrNullInternalAsync(string name, string providerName, string providerKey, bool fallback);
}
public class Volo.Abp.SettingManagement.SettingStore : object {
    [CompilerGeneratedAttribute]
private ISettingManagementStore <ManagementStore>k__BackingField;
    protected ISettingManagementStore ManagementStore { get; }
    public SettingStore(ISettingManagementStore managementStore);
    [CompilerGeneratedAttribute]
protected ISettingManagementStore get_ManagementStore();
    public virtual Task`1<string> GetOrNullAsync(string name, string providerName, string providerKey);
    public virtual Task`1<List`1<SettingValue>> GetAllAsync(String[] names, string providerName, string providerKey);
}
public class Volo.Abp.SettingManagement.StaticSettingSaver : object {
    [CompilerGeneratedAttribute]
private IStaticSettingDefinitionStore <StaticStore>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingDefinitionRecordRepository <SettingRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ISettingDefinitionSerializer <SettingSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDistributedCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private IApplicationInfoAccessor <ApplicationInfoAccessor>k__BackingField;
    [CompilerGeneratedAttribute]
private IAbpDistributedLock <DistributedLock>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpSettingOptions <SettingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ICancellationTokenProvider <CancellationTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private AbpDistributedCacheOptions <CacheOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IUnitOfWorkManager <UnitOfWorkManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IGuidGenerator <GuidGenerator>k__BackingField;
    protected IStaticSettingDefinitionStore StaticStore { get; }
    protected ISettingDefinitionRecordRepository SettingRepository { get; }
    protected ISettingDefinitionSerializer SettingSerializer { get; }
    protected IDistributedCache Cache { get; }
    protected IApplicationInfoAccessor ApplicationInfoAccessor { get; }
    protected IAbpDistributedLock DistributedLock { get; }
    protected AbpSettingOptions SettingOptions { get; }
    protected ICancellationTokenProvider CancellationTokenProvider { get; }
    protected AbpDistributedCacheOptions CacheOptions { get; }
    protected IUnitOfWorkManager UnitOfWorkManager { get; }
    protected IGuidGenerator GuidGenerator { get; }
    public StaticSettingSaver(IStaticSettingDefinitionStore staticStore, ISettingDefinitionRecordRepository settingRepository, ISettingDefinitionSerializer settingSerializer, IDistributedCache cache, IOptions`1<AbpDistributedCacheOptions> cacheOptions, IApplicationInfoAccessor applicationInfoAccessor, IAbpDistributedLock distributedLock, IOptions`1<AbpSettingOptions> settingOptions, ICancellationTokenProvider cancellationTokenProvider, IUnitOfWorkManager unitOfWorkManager, IGuidGenerator guidGenerator);
    [CompilerGeneratedAttribute]
protected IStaticSettingDefinitionStore get_StaticStore();
    [CompilerGeneratedAttribute]
protected ISettingDefinitionRecordRepository get_SettingRepository();
    [CompilerGeneratedAttribute]
protected ISettingDefinitionSerializer get_SettingSerializer();
    [CompilerGeneratedAttribute]
protected IDistributedCache get_Cache();
    [CompilerGeneratedAttribute]
protected IApplicationInfoAccessor get_ApplicationInfoAccessor();
    [CompilerGeneratedAttribute]
protected IAbpDistributedLock get_DistributedLock();
    [CompilerGeneratedAttribute]
protected AbpSettingOptions get_SettingOptions();
    [CompilerGeneratedAttribute]
protected ICancellationTokenProvider get_CancellationTokenProvider();
    [CompilerGeneratedAttribute]
protected AbpDistributedCacheOptions get_CacheOptions();
    [CompilerGeneratedAttribute]
protected IUnitOfWorkManager get_UnitOfWorkManager();
    [CompilerGeneratedAttribute]
protected IGuidGenerator get_GuidGenerator();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.StaticSettingSaver/<SaveAsync>d__34")]
[UnitOfWorkAttribute]
public sealed virtual Task SaveAsync();
    [AsyncStateMachineAttribute("Volo.Abp.SettingManagement.StaticSettingSaver/<UpdateChangedSettingsAsync>d__35")]
private Task`1<bool> UpdateChangedSettingsAsync(List`1<SettingDefinitionRecord> SettingRecords);
    private string GetApplicationDistributedLockKey();
    private string GetCommonDistributedLockKey();
    private string GetApplicationHashCacheKey();
    private string GetCommonStampCacheKey();
    private string CalculateHash(List`1<SettingDefinitionRecord> settingRecords, IEnumerable`1<string> deletedSettings);
    [CompilerGeneratedAttribute]
private bool <UpdateChangedSettingsAsync>b__35_0(SettingDefinitionRecord x);
}
public class Volo.Abp.SettingManagement.TenantSettingManagementProvider : SettingManagementProvider {
    [CompilerGeneratedAttribute]
private ICurrentTenant <CurrentTenant>k__BackingField;
    public string Name { get; }
    protected ICurrentTenant CurrentTenant { get; }
    public TenantSettingManagementProvider(ISettingManagementStore settingManagementStore, ICurrentTenant currentTenant);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected ICurrentTenant get_CurrentTenant();
    protected virtual string NormalizeProviderKey(string providerKey);
}
[ExtensionAttribute]
public static class Volo.Abp.SettingManagement.TenantSettingManagerExtensions : object {
    [ExtensionAttribute]
public static Task`1<string> GetOrNullForTenantAsync(ISettingManager settingManager, string name, Guid tenantId, bool fallback);
    [ExtensionAttribute]
public static Task`1<string> GetOrNullForCurrentTenantAsync(ISettingManager settingManager, string name, bool fallback);
    [ExtensionAttribute]
public static Task`1<List`1<SettingValue>> GetAllForTenantAsync(ISettingManager settingManager, Guid tenantId, bool fallback);
    [ExtensionAttribute]
public static Task`1<List`1<SettingValue>> GetAllForCurrentTenantAsync(ISettingManager settingManager, bool fallback);
    [ExtensionAttribute]
public static Task SetForTenantAsync(ISettingManager settingManager, Guid tenantId, string name, string value, bool forceToSet);
    [ExtensionAttribute]
public static Task SetForCurrentTenantAsync(ISettingManager settingManager, string name, string value, bool forceToSet);
    [ExtensionAttribute]
public static Task SetForTenantOrGlobalAsync(ISettingManager settingManager, Nullable`1<Guid> tenantId, string name, string value, bool forceToSet);
}
public class Volo.Abp.SettingManagement.UserSettingManagementProvider : SettingManagementProvider {
    [CompilerGeneratedAttribute]
private ICurrentUser <CurrentUser>k__BackingField;
    public string Name { get; }
    protected ICurrentUser CurrentUser { get; }
    public UserSettingManagementProvider(ISettingManagementStore settingManagementStore, ICurrentUser currentUser);
    public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected ICurrentUser get_CurrentUser();
    protected virtual string NormalizeProviderKey(string providerKey);
}
[ExtensionAttribute]
public static class Volo.Abp.SettingManagement.UserSettingManagerExtensions : object {
    [ExtensionAttribute]
public static Task`1<string> GetOrNullForUserAsync(ISettingManager settingManager, string name, Guid userId, bool fallback);
    [ExtensionAttribute]
public static Task`1<string> GetOrNullForCurrentUserAsync(ISettingManager settingManager, string name, bool fallback);
    [ExtensionAttribute]
public static Task`1<List`1<SettingValue>> GetAllForUserAsync(ISettingManager settingManager, Guid userId, bool fallback);
    [ExtensionAttribute]
public static Task`1<List`1<SettingValue>> GetAllForCurrentUserAsync(ISettingManager settingManager, bool fallback);
    [ExtensionAttribute]
public static Task SetForUserAsync(ISettingManager settingManager, Guid userId, string name, string value, bool forceToSet);
    [ExtensionAttribute]
public static Task SetForCurrentUserAsync(ISettingManager settingManager, string name, string value, bool forceToSet);
}
internal class VoloAbpSettingManagementDomain_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
