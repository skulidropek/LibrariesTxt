public class Volo.Abp.Specifications.AbpSpecificationsModule : AbpModule {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Specifications.AndNotSpecification`1 : CompositeSpecification`1<T> {
    public AndNotSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Specifications.AndSpecification`1 : CompositeSpecification`1<T> {
    public AndSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Specifications.AnySpecification`1 : Specification`1<T> {
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Volo.Abp.Specifications.CompositeSpecification`1 : Specification`1<T> {
    [CompilerGeneratedAttribute]
private ISpecification`1<T> <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private ISpecification`1<T> <Right>k__BackingField;
    public ISpecification`1<T> Left { get; }
    public ISpecification`1<T> Right { get; }
    protected CompositeSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    [CompilerGeneratedAttribute]
public sealed virtual ISpecification`1<T> get_Left();
    [CompilerGeneratedAttribute]
public sealed virtual ISpecification`1<T> get_Right();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Specifications.ExpressionFuncExtender : object {
    [ExtensionAttribute]
private static Expression`1<T> Compose(Expression`1<T> first, Expression`1<T> second, Func`3<Expression, Expression, Expression> merge);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> And(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
    [ExtensionAttribute]
public static Expression`1<Func`2<T, bool>> Or(Expression`1<Func`2<T, bool>> first, Expression`1<Func`2<T, bool>> second);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Specifications.ExpressionSpecification`1 : Specification`1<T> {
    private Expression`1<Func`2<T, bool>> _expression;
    public ExpressionSpecification`1(Expression`1<Func`2<T, bool>> expression);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Specifications.ICompositeSpecification`1 {
    public ISpecification`1<T> Left { get; }
    public ISpecification`1<T> Right { get; }
    public abstract virtual ISpecification`1<T> get_Left();
    public abstract virtual ISpecification`1<T> get_Right();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Specifications.ISpecification`1 {
    public abstract virtual bool IsSatisfiedBy(T obj);
    public abstract virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
public interface Volo.Abp.Specifications.ISpecificationParser`1 {
    public abstract virtual TCriteria Parse(ISpecification`1<T> specification);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Specifications.NoneSpecification`1 : Specification`1<T> {
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Specifications.NotSpecification`1 : Specification`1<T> {
    private ISpecification`1<T> _specification;
    public NotSpecification`1(ISpecification`1<T> specification);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Volo.Abp.Specifications.OrSpecification`1 : CompositeSpecification`1<T> {
    public OrSpecification`1(ISpecification`1<T> left, ISpecification`1<T> right);
    public virtual Expression`1<Func`2<T, bool>> ToExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Volo.Abp.Specifications.ParameterRebinder : ExpressionVisitor {
    private Dictionary`2<ParameterExpression, ParameterExpression> _map;
    internal ParameterRebinder(Dictionary`2<ParameterExpression, ParameterExpression> map);
    internal static Expression ReplaceParameters(Dictionary`2<ParameterExpression, ParameterExpression> map, Expression exp);
    protected virtual Expression VisitParameter(ParameterExpression p);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Volo.Abp.Specifications.Specification`1 : object {
    public virtual bool IsSatisfiedBy(T obj);
    public abstract virtual Expression`1<Func`2<T, bool>> ToExpression();
    public static Expression`1<Func`2<T, bool>> op_Implicit(Specification`1<T> specification);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Volo.Abp.Specifications.SpecificationExtensions : object {
    [ExtensionAttribute]
public static ISpecification`1<T> And(ISpecification`1<T> specification, ISpecification`1<T> other);
    [ExtensionAttribute]
public static ISpecification`1<T> Or(ISpecification`1<T> specification, ISpecification`1<T> other);
    [ExtensionAttribute]
public static ISpecification`1<T> AndNot(ISpecification`1<T> specification, ISpecification`1<T> other);
    [ExtensionAttribute]
public static ISpecification`1<T> Not(ISpecification`1<T> specification);
}
internal class VoloAbpSpecifications_ProcessedByFody : object {
    internal static string FodyVersion;
    internal static string ConfigureAwait;
}
