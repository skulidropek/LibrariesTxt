[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
public enum Weasel.Core.AutoCreate : Enum {
    public int value__;
    public static AutoCreate All;
    public static AutoCreate CreateOrUpdate;
    public static AutoCreate CreateOnly;
    public static AutoCreate None;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Core.CommandBuilderBase`3 : object {
    protected TCommand _command;
    private char _parameterPrefix;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDatabaseProvider`3<TCommand, TParameter, TParameterType> _provider;
    private StringBuilder _sql;
    [NullableAttribute("2")]
public string LastParameterName { get; }
    protected CommandBuilderBase`3(IDatabaseProvider`3<TCommand, TParameter, TParameterType> provider, char parameterPrefix, TCommand command);
    [NullableContextAttribute("2")]
public string get_LastParameterName();
    public void Append(string text);
    public void Append(char character);
    public void Append(object value);
    public sealed virtual TCommand Compile();
    [NullableContextAttribute("0")]
public TParameter AddParameter(object value, Nullable`1<TParameterType> dbType);
    public TParameter AddNamedParameter(string name, object value, Nullable`1<TParameterType> dbType);
    public TParameter AddNamedParameter(string name, string value);
    public TParameter AddNamedParameter(string name, bool value);
    public TParameter AddNamedParameter(string name, int value);
    public TParameter AddNamedParameter(string name, double value);
    public TParameter AddNamedParameter(string name, long value);
    public virtual string ToString();
    [NullableContextAttribute("0")]
public void AppendParameter(object value, Nullable`1<TParameterType> dbType);
    public void AppendParameter(int value);
    public void AppendParameter(Guid value);
    public void AppendParameter(string value);
    public void AddParameters(object parameters);
    public TParameter[] AppendWithParameters(string text);
    public TParameter[] AppendWithParameters(string text, char separator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Weasel.Core.CommandBuilderExtensions : object {
    public static Task`1<int> ExecuteNonQueryAsync(DbConnection connection, ICommandBuilder`1<T> commandBuilder, CancellationToken ct);
    public static Task`1<int> ExecuteNonQueryAsync(DbConnection connection, ICommandBuilder`1<T> commandBuilder, DbTransaction tx, CancellationToken ct);
    public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection connection, ICommandBuilder`1<T> commandBuilder, CancellationToken ct);
    public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection connection, ICommandBuilder`1<T> commandBuilder, DbTransaction tx, CancellationToken ct);
    public static Task`1<IReadOnlyList`1<T>> FetchListAsync(DbConnection connection, ICommandBuilder`1<TCommand> commandBuilder, Func`3<DbDataReader, CancellationToken, Task`1<T>> transform, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.CommandBuilderExtensions/<FetchListAsync>d__5`2")]
public static Task`1<IReadOnlyList`1<T>> FetchListAsync(DbConnection connection, ICommandBuilder`1<TCommand> commandBuilder, Func`3<DbDataReader, CancellationToken, Task`1<T>> transform, DbTransaction tx, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Core.CommandExtensions : object {
    [ExtensionAttribute]
public static DbCommandBuilder ToCommandBuilder(DbConnection connection);
    [ExtensionAttribute]
public static T Sql(T cmd, string sql);
    [ExtensionAttribute]
public static T CallsSproc(T cmd, string storedProcedureName);
    [ExtensionAttribute]
public static T CallsSproc(T cmd, DbObjectName storedProcedureName);
    [ExtensionAttribute]
public static Task`1<int> RunSqlAsync(DbConnection conn, String[] sqls);
    [ExtensionAttribute]
public static Task`1<int> RunSqlAsync(DbConnection conn, CancellationToken ct, String[] sqls);
    [ExtensionAttribute]
public static DbCommand CreateCommand(DbConnection conn, string sql);
    [ExtensionAttribute]
public static DbCommand CreateCommand(DbTransaction tx, string command);
    [AsyncStateMachineAttribute("Weasel.Core.CommandExtensions/<FetchListAsync>d__8`1")]
[ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> FetchListAsync(DbCommand cmd, Func`2<DbDataReader, Task`1<T>> transform, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> FetchListAsync(DbCommand cmd, CancellationToken cancellation);
    [AsyncStateMachineAttribute("Weasel.Core.CommandExtensions/<FetchOne>d__10`1")]
[ExtensionAttribute]
public static Task`1<T> FetchOne(DbCommand cmd, CancellationToken cancellation);
    [AsyncStateMachineAttribute("Weasel.Core.CommandExtensions/<ExecuteOnce>d__11")]
[ExtensionAttribute]
public static Task ExecuteOnce(DbCommand command, CancellationToken cancellation);
    [ExtensionAttribute]
public static DbParameter AddParameter(DbCommand command, object value, Nullable`1<DbType> dbType);
    [ExtensionAttribute]
public static DbParameter AddNamedParameter(DbCommand command, string name, object value, Nullable`1<DbType> type);
    [ExtensionAttribute]
public static T With(T command, string name, object value);
    [ExtensionAttribute]
public static T With(T command, string name, object value, DbType dbType);
    [ExtensionAttribute]
public static T With(T command, string name, string value);
    [ExtensionAttribute]
public static T With(T command, string name, int value);
    [ExtensionAttribute]
public static T With(T command, string name, long value);
    [ExtensionAttribute]
public static T With(T command, string name, Guid value);
    [ExtensionAttribute]
public static T With(T command, string name, bool value);
    [ExtensionAttribute]
public static T With(T command, string name, Byte[] value);
    [ExtensionAttribute]
public static T With(T command, string name, Nullable`1<DateTimeOffset> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Core.ConnectionSourceExtensions : object {
    [ExtensionAttribute]
public static void RunSql(IConnectionSource`1<T> source, string sql);
    [AsyncStateMachineAttribute("Weasel.Core.ConnectionSourceExtensions/<RunSqlAsync>d__1`1")]
[ExtensionAttribute]
public static Task RunSqlAsync(IConnectionSource`1<T> source, string sql, CancellationToken ct);
}
public enum Weasel.Core.CreationStyle : Enum {
    public int value__;
    public static CreationStyle DropThenCreate;
    public static CreationStyle CreateIfNotExists;
}
public abstract class Weasel.Core.DatabaseProvider`3 : object {
    [NullableAttribute("1")]
protected Ref`1<ImHashMap`2<Type, string>> DatabaseTypeMemo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Ref`1<ImHashMap`2<Type, Nullable`1<TParameterType>>> ParameterTypeMemo;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected Ref`1<ImHashMap`2<TParameterType, Type[]>> TypeMemo;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <DefaultDatabaseSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private TParameterType <StringParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private TParameterType <IntegerParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private TParameterType <LongParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private TParameterType <GuidParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private TParameterType <BoolParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private TParameterType <DoubleParameterType>k__BackingField;
    [NullableAttribute("1")]
public string DefaultDatabaseSchemaName { get; }
    public TParameterType StringParameterType { get; }
    public TParameterType IntegerParameterType { get; }
    public TParameterType LongParameterType { get; }
    public TParameterType GuidParameterType { get; }
    public TParameterType BoolParameterType { get; }
    public TParameterType DoubleParameterType { get; }
    [NullableContextAttribute("1")]
protected DatabaseProvider`3(string defaultDatabaseSchemaName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual string get_DefaultDatabaseSchemaName();
    public sealed virtual Nullable`1<TParameterType> TryGetDbType(Type type);
    public sealed virtual TParameterType ToParameterType(Type type);
    public sealed virtual Type[] ResolveTypes(TParameterType parameterType);
    [NullableContextAttribute("1")]
public abstract virtual string GetDatabaseType(Type memberType, EnumStorage enumStyle);
    [NullableContextAttribute("1")]
public abstract virtual void AddParameter(TCommand command, TParameter parameter);
    public abstract virtual void SetParameterType(TParameter parameter, TParameterType dbType);
    [CompilerGeneratedAttribute]
public sealed virtual TParameterType get_StringParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual TParameterType get_IntegerParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual TParameterType get_LongParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual TParameterType get_GuidParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual TParameterType get_BoolParameterType();
    [CompilerGeneratedAttribute]
public sealed virtual TParameterType get_DoubleParameterType();
    protected abstract virtual void storeMappings();
    protected abstract virtual bool determineParameterType(Type type, TParameterType& dbType);
    protected void store(TParameterType parameterType, string databaseType);
    [NullableContextAttribute("1")]
public void RegisterMapping(Type type, string databaseType, Nullable`1<TParameterType> parameterType);
    protected abstract virtual Type[] determineClrTypesForParameterType(TParameterType dbType);
    [NullableContextAttribute("1")]
public TParameter AddParameter(TCommand command, object value, Nullable`1<TParameterType> dbType);
    [NullableContextAttribute("1")]
public TParameter AddNamedParameter(TCommand command, string name, object value, Nullable`1<TParameterType> dbType);
    [NullableContextAttribute("1")]
public TParameter AddNamedParameter(TCommand command, string name, string value);
    [NullableContextAttribute("1")]
public TParameter AddNamedParameter(TCommand command, string name, int value);
    [NullableContextAttribute("1")]
public TParameter AddNamedParameter(TCommand command, string name, long value);
    [NullableContextAttribute("1")]
public TParameter AddNamedParameter(TCommand command, string name, double value);
    [NullableContextAttribute("1")]
public TParameter AddNamedParameter(TCommand command, string name, Guid value);
    [NullableContextAttribute("1")]
public TParameter AddNamedParameter(TCommand command, string name, bool value);
    [NullableContextAttribute("1")]
public sealed virtual DbObjectName Parse(string qualifiedName);
    [NullableContextAttribute("1")]
public virtual string ToQualifiedName(string objectName);
    [NullableContextAttribute("1")]
public sealed virtual string ToQualifiedName(string schemaName, string objectName);
    [NullableContextAttribute("1")]
public abstract virtual DbObjectName Parse(string schemaName, string objectName);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Weasel.Core.DbCommandBuilder : CommandBuilderBase`3<DbCommand, DbParameter, DbType> {
    public DbCommandBuilder(DbCommand command);
    public DbCommandBuilder(DbConnection connection);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Core.DbCommandBuilderExtensions : object {
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbCommandBuilder commandBuilder, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(DbConnection connection, DbCommandBuilder commandBuilder, DbTransaction tx, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection connection, DbCommandBuilder commandBuilder, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<DbDataReader> ExecuteReaderAsync(DbConnection connection, DbCommandBuilder commandBuilder, DbTransaction tx, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> FetchListAsync(DbConnection connection, DbCommandBuilder commandBuilder, Func`3<DbDataReader, CancellationToken, Task`1<T>> transform, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> FetchListAsync(DbConnection connection, DbCommandBuilder commandBuilder, Func`3<DbDataReader, CancellationToken, Task`1<T>> transform, DbTransaction tx, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Weasel.Core.DbDatabaseProvider : DatabaseProvider`3<DbCommand, DbParameter, DbType> {
    public static DbDatabaseProvider Instance;
    private static DbDatabaseProvider();
    protected virtual void storeMappings();
    protected virtual bool determineParameterType(Type type, DbType& dbType);
    private Nullable`1<DbType> ResolveSqlDbType(Type type);
    protected virtual Type[] determineClrTypesForParameterType(DbType dbType);
    public virtual string GetDatabaseType(Type memberType, EnumStorage enumStyle);
    private string ResolveDatabaseType(Type type);
    public virtual void AddParameter(DbCommand command, DbParameter parameter);
    public virtual void SetParameterType(DbParameter parameter, DbType dbType);
    public virtual DbObjectName Parse(string schemaName, string objectName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Core.DbObjectName : object {
    [CompilerGeneratedAttribute]
private string <Schema>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QualifiedName>k__BackingField;
    public string Schema { get; }
    public string Name { get; }
    public string QualifiedName { get; }
    [ObsoleteAttribute("Use PostgresqlObjectName, SqlServerObjectName, or Parse method with IDatabaseProvider instead.")]
public DbObjectName(string schema, string name);
    protected DbObjectName(string schema, string name, string qualifiedName);
    [CompilerGeneratedAttribute]
public string get_Schema();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_QualifiedName();
    public DbObjectName ToTempCopyTable();
    [ObsoleteAttribute("Use method from database provider")]
public static DbObjectName Parse(IDatabaseProvider provider, string qualifiedName);
    [ObsoleteAttribute("Use method from database provider")]
public static DbObjectName Parse(IDatabaseProvider provider, string schemaName, string objectName);
    public virtual string ToString();
    protected bool Equals(DbObjectName other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Weasel.Core.EnumStorage : Enum {
    public int value__;
    public static EnumStorage AsInteger;
    public static EnumStorage AsString;
}
[NullableContextAttribute("1")]
public interface Weasel.Core.IAdvisoryLock {
    public abstract virtual bool HasLock(int lockId);
    public abstract virtual Task`1<bool> TryAttainLockAsync(int lockId, CancellationToken token);
    public abstract virtual Task ReleaseLockAsync(int lockId);
}
[NullableContextAttribute("1")]
public interface Weasel.Core.ICommandBuilder`1 {
    public abstract virtual TCommand Compile();
}
public interface Weasel.Core.IConnectionSource {
}
[NullableContextAttribute("1")]
public interface Weasel.Core.IConnectionSource`1 {
    public abstract virtual T CreateConnection();
}
[NullableContextAttribute("1")]
public interface Weasel.Core.IDatabaseProvider {
    public string DefaultDatabaseSchemaName { get; }
    public abstract virtual string get_DefaultDatabaseSchemaName();
    public virtual string ToQualifiedName(string objectName);
    public virtual string ToQualifiedName(string schemaName, string objectName);
    public virtual DbObjectName Parse(string qualifiedName);
    public abstract virtual DbObjectName Parse(string schemaName, string objectName);
}
public interface Weasel.Core.IDatabaseProvider`3 {
    public TParameterType StringParameterType { get; }
    public TParameterType IntegerParameterType { get; }
    public TParameterType LongParameterType { get; }
    public TParameterType GuidParameterType { get; }
    public TParameterType BoolParameterType { get; }
    public TParameterType DoubleParameterType { get; }
    public abstract virtual TParameterType get_StringParameterType();
    public abstract virtual TParameterType get_IntegerParameterType();
    public abstract virtual TParameterType get_LongParameterType();
    public abstract virtual TParameterType get_GuidParameterType();
    public abstract virtual TParameterType get_BoolParameterType();
    public abstract virtual TParameterType get_DoubleParameterType();
    public abstract virtual Nullable`1<TParameterType> TryGetDbType(Type type);
    public abstract virtual TParameterType ToParameterType(Type type);
    public abstract virtual Type[] ResolveTypes(TParameterType parameterType);
    [NullableContextAttribute("1")]
public abstract virtual string GetDatabaseType(Type memberType, EnumStorage enumStyle);
    [NullableContextAttribute("1")]
public abstract virtual void AddParameter(TCommand command, TParameter parameter);
    public abstract virtual void SetParameterType(TParameter parameter, TParameterType dbType);
}
[NullableContextAttribute("1")]
public interface Weasel.Core.ISchemaObject {
    public DbObjectName Identifier { get; }
    public abstract virtual DbObjectName get_Identifier();
    public abstract virtual void WriteCreateStatement(Migrator migrator, TextWriter writer);
    public abstract virtual void WriteDropStatement(Migrator rules, TextWriter writer);
    public abstract virtual void ConfigureQueryCommand(DbCommandBuilder builder);
    public abstract virtual Task`1<ISchemaObjectDelta> CreateDeltaAsync(DbDataReader reader, CancellationToken ct);
    public abstract virtual IEnumerable`1<DbObjectName> AllNames();
}
[NullableContextAttribute("1")]
public interface Weasel.Core.ISchemaObjectDelta {
    public ISchemaObject SchemaObject { get; }
    public SchemaPatchDifference Difference { get; }
    public abstract virtual ISchemaObject get_SchemaObject();
    public abstract virtual SchemaPatchDifference get_Difference();
    public abstract virtual void WriteUpdate(Migrator rules, TextWriter writer);
    public abstract virtual void WriteRollback(Migrator rules, TextWriter writer);
    public abstract virtual void WriteRestorationOfPreviousState(Migrator rules, TextWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Core.Migrations.AttainLockResult : object {
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private FailureReason <Reason>k__BackingField;
    public static AttainLockResult Success;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool Succeeded { get; public set; }
    public FailureReason Reason { get; public set; }
    public bool ShouldReconnect { get; }
    public AttainLockResult(bool Succeeded, FailureReason Reason);
    [CompilerGeneratedAttribute]
protected AttainLockResult(AttainLockResult original);
    private static AttainLockResult();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public FailureReason get_Reason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Reason(FailureReason value);
    public bool get_ShouldReconnect();
    public static AttainLockResult Failure(FailureReason reason);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(AttainLockResult left, AttainLockResult right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(AttainLockResult left, AttainLockResult right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(AttainLockResult other);
    [CompilerGeneratedAttribute]
public virtual AttainLockResult <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& Succeeded, FailureReason& Reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Weasel.Core.Migrations.DatabaseBase`1 : object {
    private ConcurrentDictionary`2<Type, bool> _checks;
    private Func`1<TConnection> _connectionSource;
    private IMigrationLogger _logger;
    private TimedLock _migrateLocker;
    private List`1<IDatabaseInitializer`1<TConnection>> _initializers;
    [CompilerGeneratedAttribute]
private AutoCreate <AutoCreate>k__BackingField;
    [CompilerGeneratedAttribute]
private Migrator <Migrator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    public AutoCreate AutoCreate { get; public set; }
    public Migrator Migrator { get; }
    public string Identifier { get; }
    public DatabaseBase`1(IMigrationLogger logger, AutoCreate autoCreate, Migrator migrator, string identifier, string connectionString);
    public DatabaseBase`1(IMigrationLogger logger, AutoCreate autoCreate, Migrator migrator, string identifier, Func`1<TConnection> connectionSource);
    public void AddInitializer(IDatabaseInitializer`1<TConnection> initializer);
    private static TConnection CreateConnection(string connectionString);
    public abstract virtual IFeatureSchema[] BuildFeatureSchemas();
    [CompilerGeneratedAttribute]
public sealed virtual AutoCreate get_AutoCreate();
    [CompilerGeneratedAttribute]
public void set_AutoCreate(AutoCreate value);
    [CompilerGeneratedAttribute]
public sealed virtual Migrator get_Migrator();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    private sealed virtual override TConnection Weasel.Core.IConnectionSource<TConnection>.CreateConnection();
    public sealed virtual String[] AllSchemaNames();
    public sealed virtual IEnumerable`1<ISchemaObject> AllObjects();
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<AssertConnectivityAsync>d__23")]
public sealed virtual Task AssertConnectivityAsync(CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<initializeSchema>d__24")]
private Task initializeSchema(TConnection connection, CancellationToken token);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<CreateMigrationAsync>d__25")]
public sealed virtual Task`1<SchemaMigration> CreateMigrationAsync(IFeatureSchema group, CancellationToken ct);
    public sealed virtual string ToDatabaseScript();
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<WriteCreationScriptToFileAsync>d__27")]
public sealed virtual Task WriteCreationScriptToFileAsync(string filename, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<initializeSchemaWithNewConnection>d__28")]
private Task initializeSchemaWithNewConnection(CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<WriteScriptsByTypeAsync>d__29")]
public sealed virtual Task WriteScriptsByTypeAsync(string directory, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<CreateMigrationAsync>d__30")]
public sealed virtual Task`1<SchemaMigration> CreateMigrationAsync(CancellationToken ct);
    public sealed virtual Task`1<SchemaPatchDifference> ApplyAllConfiguredChangesToDatabaseAsync(Nullable`1<AutoCreate> override, ReconnectionOptions reconnectionOptions, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<AssertDatabaseMatchesConfigurationAsync>d__32")]
public sealed virtual Task AssertDatabaseMatchesConfigurationAsync(CancellationToken ct);
    public TConnection CreateConnection();
    public Task`1<SchemaMigration> CreateMigrationAsync(Type featureType, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<ApplyAllConfiguredChangesToDatabaseAsync>d__35")]
public Task`1<SchemaPatchDifference> ApplyAllConfiguredChangesToDatabaseAsync(IGlobalLock`1<TConnection> globalLock, Nullable`1<AutoCreate> override, ReconnectionOptions reconnectionOptions, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<WriteMigrationFileAsync>d__36")]
public Task WriteMigrationFileAsync(string filename, CancellationToken ct);
    public virtual void ResetSchemaExistenceChecks();
    [ObsoleteAttribute("Use async version")]
public void EnsureStorageExists(Type featureType);
    public ValueTask EnsureStorageExistsAsync(Type featureType, CancellationToken token);
    public virtual IFeatureSchema FindFeature(Type featureType);
    public void MarkAllFeaturesAsChecked();
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<ensureStorageExistsAsync>d__42")]
private ValueTask ensureStorageExistsAsync(IList`1<Type> types, Type featureType, CancellationToken token);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<generateOrUpdateFeature>d__43")]
protected ValueTask generateOrUpdateFeature(Type featureType, IFeatureSchema feature, CancellationToken token);
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseBase`1/<executeMigration>d__44")]
private Task executeMigration(ISchemaObject[] schemaObjects, CancellationToken ct);
    private void RegisterCheck(Type featureType, IFeatureSchema feature);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Core.Migrations.DatabaseExtensions : object {
    [AsyncStateMachineAttribute("Weasel.Core.Migrations.DatabaseExtensions/<WriteMigrationFileAsync>d__0")]
[ExtensionAttribute]
public static Task WriteMigrationFileAsync(IDatabase database, string filename, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<SchemaMigration> CreateMigrationAsync(IDatabase database, Type featureType, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Core.Migrations.DatabaseValidationException : Exception {
    public DatabaseValidationException(string ddl);
    public DatabaseValidationException(string databaseName, string ddl);
    public DatabaseValidationException(string databaseName, Exception inner);
}
public class Weasel.Core.Migrations.DefaultMigrationLogger : object {
    [NullableContextAttribute("1")]
public sealed virtual void SchemaChange(string sql);
    [NullableContextAttribute("1")]
public sealed virtual void OnFailure(DbCommand command, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Weasel.Core.Migrations.FeatureSchemaBase : object {
    [CompilerGeneratedAttribute]
private string <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Migrator <Migrator>k__BackingField;
    public string Identifier { get; }
    public Migrator Migrator { get; }
    public ISchemaObject[] Objects { get; }
    public Type StorageType { get; }
    protected FeatureSchemaBase(string identifier, Migrator migrator);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Identifier();
    [CompilerGeneratedAttribute]
public sealed virtual Migrator get_Migrator();
    public virtual IEnumerable`1<Type> DependentTypes();
    public sealed virtual ISchemaObject[] get_Objects();
    public virtual Type get_StorageType();
    public virtual void WritePermissions(Migrator rules, TextWriter writer);
    protected abstract virtual IEnumerable`1<ISchemaObject> schemaObjects();
}
[ExtensionAttribute]
public static class Weasel.Core.Migrations.FeatureSchemaExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void WriteFeatureCreation(IFeatureSchema schema, Migrator rules, TextWriter writer);
}
[NullableContextAttribute("1")]
public interface Weasel.Core.Migrations.IDatabase {
    public AutoCreate AutoCreate { get; }
    public Migrator Migrator { get; }
    public string Identifier { get; }
    public abstract virtual AutoCreate get_AutoCreate();
    public abstract virtual Migrator get_Migrator();
    public abstract virtual string get_Identifier();
    public abstract virtual IFeatureSchema[] BuildFeatureSchemas();
    public abstract virtual String[] AllSchemaNames();
    public abstract virtual IEnumerable`1<ISchemaObject> AllObjects();
    public abstract virtual Task`1<SchemaMigration> CreateMigrationAsync(IFeatureSchema group, CancellationToken ct);
    public abstract virtual string ToDatabaseScript();
    public abstract virtual Task WriteCreationScriptToFileAsync(string filename, CancellationToken ct);
    public abstract virtual Task WriteScriptsByTypeAsync(string directory, CancellationToken ct);
    public abstract virtual Task`1<SchemaMigration> CreateMigrationAsync(CancellationToken ct);
    public abstract virtual Task`1<SchemaPatchDifference> ApplyAllConfiguredChangesToDatabaseAsync(Nullable`1<AutoCreate> override, ReconnectionOptions reconnectionOptions, CancellationToken ct);
    public abstract virtual Task AssertDatabaseMatchesConfigurationAsync(CancellationToken ct);
    public abstract virtual Task AssertConnectivityAsync(CancellationToken ct);
}
public interface Weasel.Core.Migrations.IDatabase`1 {
}
[NullableContextAttribute("1")]
public interface Weasel.Core.Migrations.IDatabaseInitializer`1 {
    public abstract virtual Task InitializeAsync(T connection, CancellationToken token);
}
public interface Weasel.Core.Migrations.IDatabaseSource {
    public abstract virtual ValueTask`1<IReadOnlyList`1<IDatabase>> BuildDatabases();
}
[NullableContextAttribute("1")]
public interface Weasel.Core.Migrations.IFeatureSchema {
    public ISchemaObject[] Objects { get; }
    public string Identifier { get; }
    public Migrator Migrator { get; }
    public Type StorageType { get; }
    public abstract virtual ISchemaObject[] get_Objects();
    public abstract virtual string get_Identifier();
    public abstract virtual Migrator get_Migrator();
    public abstract virtual Type get_StorageType();
    public abstract virtual void WritePermissions(Migrator rules, TextWriter writer);
    public abstract virtual IEnumerable`1<Type> DependentTypes();
}
[NullableContextAttribute("1")]
public interface Weasel.Core.Migrations.IGlobalLock`1 {
    public abstract virtual Task`1<AttainLockResult> TryAttainLock(TConnection conn, CancellationToken ct);
    public abstract virtual Task ReleaseLock(TConnection conn, CancellationToken ct);
}
[NullableContextAttribute("1")]
public interface Weasel.Core.Migrations.IMigrationLogger {
    public abstract virtual void SchemaChange(string sql);
    public abstract virtual void OnFailure(DbCommand command, Exception ex);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Weasel.Core.Migrations.NulloGlobalList`1 : object {
    public sealed virtual Task`1<AttainLockResult> TryAttainLock(TConnection conn, CancellationToken ct);
    public sealed virtual Task ReleaseLock(TConnection conn, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Core.Migrations.ReconnectionOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxReconnectionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DelayInMs>k__BackingField;
    [CompilerGeneratedAttribute]
private static ReconnectionOptions <Default>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int MaxReconnectionCount { get; public set; }
    public int DelayInMs { get; public set; }
    public static ReconnectionOptions Default { get; }
    public ReconnectionOptions(int MaxReconnectionCount, int DelayInMs);
    [CompilerGeneratedAttribute]
protected ReconnectionOptions(ReconnectionOptions original);
    private static ReconnectionOptions();
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_MaxReconnectionCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MaxReconnectionCount(int value);
    [CompilerGeneratedAttribute]
public int get_DelayInMs();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DelayInMs(int value);
    [CompilerGeneratedAttribute]
public static ReconnectionOptions get_Default();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ReconnectionOptions left, ReconnectionOptions right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ReconnectionOptions left, ReconnectionOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(ReconnectionOptions other);
    [CompilerGeneratedAttribute]
public virtual ReconnectionOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Int32& MaxReconnectionCount, Int32& DelayInMs);
}
internal class Weasel.Core.Migrations.TimedLock : object {
    [NullableAttribute("1")]
private SemaphoreSlim _toLock;
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Weasel.Core.Migrations.TimedLock/<Lock>d__2")]
public Task`1<LockReleaser> Lock(TimeSpan timeout, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Weasel.Core.Migrator : object {
    public static string SCHEMA;
    public static string TABLENAME;
    public static string FUNCTION;
    public static string SIGNATURE;
    public static string COLUMNS;
    public static string NON_ID_COLUMNS;
    public static string METADATA_COLUMNS;
    public LightweightCache`2<string, SqlTemplate> Templates;
    [CompilerGeneratedAttribute]
private bool <IsTransactional>k__BackingField;
    [CompilerGeneratedAttribute]
private SqlFormatting <Formatting>k__BackingField;
    [CompilerGeneratedAttribute]
private CreationStyle <TableCreation>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityRights <UpsertRights>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Role>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSchemaName>k__BackingField;
    public bool IsTransactional { get; public set; }
    public SqlFormatting Formatting { get; public set; }
    public CreationStyle TableCreation { get; public set; }
    public SecurityRights UpsertRights { get; public set; }
    [NullableAttribute("2")]
public string Role { get; public set; }
    public string DefaultSchemaName { get; }
    protected Migrator(string defaultSchemaName);
    private static Migrator();
    [CompilerGeneratedAttribute]
public bool get_IsTransactional();
    [CompilerGeneratedAttribute]
public void set_IsTransactional(bool value);
    [CompilerGeneratedAttribute]
public SqlFormatting get_Formatting();
    [CompilerGeneratedAttribute]
public void set_Formatting(SqlFormatting value);
    [CompilerGeneratedAttribute]
public CreationStyle get_TableCreation();
    [CompilerGeneratedAttribute]
public void set_TableCreation(CreationStyle value);
    [CompilerGeneratedAttribute]
public SecurityRights get_UpsertRights();
    [CompilerGeneratedAttribute]
public void set_UpsertRights(SecurityRights value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Role();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Role(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultSchemaName();
    [AsyncStateMachineAttribute("Weasel.Core.Migrator/<ReadTemplatesAsync>d__32")]
public Task ReadTemplatesAsync(string directory, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Core.Migrator/<WriteTemplatedFile>d__33")]
public Task WriteTemplatedFile(string filename, Action`2<Migrator, TextWriter> writeStep, CancellationToken ct);
    public abstract virtual void WriteScript(TextWriter writer, Action`2<Migrator, TextWriter> writeStep);
    public abstract virtual void WriteSchemaCreationSql(IEnumerable`1<string> schemaNames, TextWriter writer);
    public Task ApplyAllAsync(DbConnection conn, SchemaMigration migration, AutoCreate autoCreate, IMigrationLogger logger, CancellationToken ct);
    protected abstract virtual Task executeDelta(SchemaMigration migration, DbConnection conn, AutoCreate autoCreate, IMigrationLogger logger, CancellationToken ct);
    public bool WriteUpdate(TextWriter writer, ISchemaObjectDelta delta);
    public abstract virtual string ToExecuteScriptLine(string scriptName);
    [AsyncStateMachineAttribute("Weasel.Core.Migrator/<WriteMigrationFileAsync>d__40")]
public Task WriteMigrationFileAsync(string filename, SchemaMigration patch, CancellationToken ct);
    public abstract virtual void AssertValidIdentifier(string name);
}
public static class Weasel.Core.Names.QualifiedNameParser : object {
    [NullableContextAttribute("1")]
public static String[] Parse(IDatabaseProvider databaseProvider, string qualifiedName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Core.SchemaMigration : object {
    private List`1<ISchemaObjectDelta> _deltas;
    [CompilerGeneratedAttribute]
private String[] <Schemas>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaPatchDifference <Difference>k__BackingField;
    public IReadOnlyList`1<ISchemaObjectDelta> Deltas { get; }
    public String[] Schemas { get; }
    public SchemaPatchDifference Difference { get; }
    public SchemaMigration(IEnumerable`1<ISchemaObjectDelta> deltas);
    public SchemaMigration(ISchemaObjectDelta delta);
    public IReadOnlyList`1<ISchemaObjectDelta> get_Deltas();
    [CompilerGeneratedAttribute]
public String[] get_Schemas();
    [CompilerGeneratedAttribute]
public SchemaPatchDifference get_Difference();
    public static Task`1<SchemaMigration> DetermineAsync(DbConnection conn, ISchemaObject[] schemaObjects);
    [AsyncStateMachineAttribute("Weasel.Core.SchemaMigration/<DetermineAsync>d__12")]
public static Task`1<SchemaMigration> DetermineAsync(DbConnection conn, CancellationToken ct, ISchemaObject[] schemaObjects);
    public void WriteAllUpdates(TextWriter writer, Migrator rules, AutoCreate autoCreate);
    public void WriteAllRollbacks(TextWriter writer, Migrator rules);
    public static string ToDropFileName(string updateFile);
    public void AssertPatchingIsValid(AutoCreate autoCreate);
    public Task RollbackAllAsync(DbConnection conn, Migrator rules, CancellationToken ct);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Weasel.Core.SchemaMigrationException : Exception {
    public SchemaMigrationException(string message);
    public SchemaMigrationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
public SchemaMigrationException(AutoCreate autoCreate, IEnumerable`1<object> invalids);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Core.SchemaObjectDelta : object {
    [CompilerGeneratedAttribute]
private ISchemaObject <SchemaObject>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaPatchDifference <Difference>k__BackingField;
    public ISchemaObject SchemaObject { get; }
    public SchemaPatchDifference Difference { get; }
    public SchemaObjectDelta(ISchemaObject schemaObject, SchemaPatchDifference difference);
    [CompilerGeneratedAttribute]
public sealed virtual ISchemaObject get_SchemaObject();
    [CompilerGeneratedAttribute]
public sealed virtual SchemaPatchDifference get_Difference();
    public sealed virtual void WriteUpdate(Migrator rules, TextWriter writer);
    public sealed virtual void WriteRollback(Migrator rules, TextWriter writer);
    public sealed virtual void WriteRestorationOfPreviousState(Migrator rules, TextWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Weasel.Core.SchemaObjectDelta`1 : object {
    [CompilerGeneratedAttribute]
private T <Expected>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private T <Actual>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaPatchDifference <Difference>k__BackingField;
    public T Expected { get; }
    [NullableAttribute("2")]
public T Actual { get; }
    public ISchemaObject SchemaObject { get; }
    public SchemaPatchDifference Difference { get; }
    protected SchemaObjectDelta`1(T expected, T actual);
    [CompilerGeneratedAttribute]
public T get_Expected();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public T get_Actual();
    public sealed virtual ISchemaObject get_SchemaObject();
    [CompilerGeneratedAttribute]
public sealed virtual SchemaPatchDifference get_Difference();
    public abstract virtual void WriteUpdate(Migrator rules, TextWriter writer);
    public virtual void WriteRollback(Migrator rules, TextWriter writer);
    public sealed virtual void WriteRestorationOfPreviousState(Migrator rules, TextWriter writer);
    protected abstract virtual SchemaPatchDifference compare(T expected, T actual);
}
public enum Weasel.Core.SchemaPatchDifference : Enum {
    public int value__;
    public static SchemaPatchDifference None;
    public static SchemaPatchDifference Create;
    public static SchemaPatchDifference Update;
    public static SchemaPatchDifference Invalid;
}
public enum Weasel.Core.SecurityRights : Enum {
    public int value__;
    public static SecurityRights Invoker;
    public static SecurityRights Definer;
}
public enum Weasel.Core.SqlFormatting : Enum {
    public int value__;
    public static SqlFormatting Pretty;
    public static SqlFormatting Concise;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Weasel.Core.SqlTemplate : object {
    [NullableAttribute("1")]
private string _name;
    [CompilerGeneratedAttribute]
private string <TableCreation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionCreation>k__BackingField;
    public string TableCreation { get; public set; }
    public string FunctionCreation { get; public set; }
    [NullableContextAttribute("1")]
public SqlTemplate(string name);
    [CompilerGeneratedAttribute]
public string get_TableCreation();
    [CompilerGeneratedAttribute]
public void set_TableCreation(string value);
    [CompilerGeneratedAttribute]
public string get_FunctionCreation();
    [CompilerGeneratedAttribute]
public void set_FunctionCreation(string value);
}
