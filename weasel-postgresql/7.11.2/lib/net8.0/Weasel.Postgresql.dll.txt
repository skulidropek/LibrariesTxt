[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.AdvisoryLock : object {
    private PostgresqlDatabase _database;
    private ILogger _logger;
    private NpgsqlConnection _conn;
    private List`1<int> _locks;
    public AdvisoryLock(PostgresqlDatabase database, ILogger logger);
    public sealed virtual bool HasLock(int lockId);
    [AsyncStateMachineAttribute("Weasel.Postgresql.AdvisoryLock/<TryAttainLockAsync>d__6")]
public sealed virtual Task`1<bool> TryAttainLockAsync(int lockId, CancellationToken token);
    [AsyncStateMachineAttribute("Weasel.Postgresql.AdvisoryLock/<ReleaseLockAsync>d__7")]
public sealed virtual Task ReleaseLockAsync(int lockId);
    [AsyncStateMachineAttribute("Weasel.Postgresql.AdvisoryLock/<DisposeAsync>d__8")]
public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Postgresql.AdvisoryLockExtensions : object {
    [ExtensionAttribute]
public static Task GetGlobalTxLock(NpgsqlTransaction tx, int lockId, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task`1<AttainLockResult> TryGetGlobalTxLock(NpgsqlTransaction tx, int lockId, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task GetGlobalLock(NpgsqlConnection conn, int lockId, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task`1<AttainLockResult> TryGetGlobalLock(NpgsqlConnection conn, int lockId, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task ReleaseGlobalLock(NpgsqlConnection conn, int lockId, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task ReleaseGlobalLock(NpgsqlTransaction tx, int lockId, CancellationToken cancellation);
    [AsyncStateMachineAttribute("Weasel.Postgresql.AdvisoryLockExtensions/<ExecuteGetGlobalLockWrapper>d__6")]
private static Task`1<AttainLockResult> ExecuteGetGlobalLockWrapper(DbCommand getGlobalLock, CancellationToken cancellation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.BatchBuilder : object {
    private NpgsqlBatch _batch;
    private StringBuilder _builder;
    [NullableAttribute("2")]
private NpgsqlBatchCommand _current;
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    public string TenantId { get; public set; }
    [NullableAttribute("2")]
public string LastParameterName { get; }
    public BatchBuilder(NpgsqlBatch batch);
    private NpgsqlBatchCommand appendCommand();
    [CompilerGeneratedAttribute]
public sealed virtual string get_TenantId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantId(string value);
    [NullableContextAttribute("2")]
public sealed virtual string get_LastParameterName();
    public sealed virtual void Append(string sql);
    public sealed virtual void Append(char character);
    public sealed virtual NpgsqlParameter AppendParameter(T value);
    public sealed virtual NpgsqlParameter AppendParameter(T value, NpgsqlDbType dbType);
    public sealed virtual NpgsqlParameter AppendParameter(object value);
    public sealed virtual void AppendParameters(Object[] parameters);
    public sealed virtual IGroupedParameterBuilder CreateGroupedParameterBuilder(Nullable`1<char> seperator);
    public sealed virtual NpgsqlParameter[] AppendWithParameters(string text);
    public sealed virtual NpgsqlParameter[] AppendWithParameters(string text, char separator);
    public sealed virtual void StartNewCommand();
    public sealed virtual void AddParameters(object parameters);
    public NpgsqlBatch Compile();
    public sealed virtual NpgsqlParameter AppendParameter(object value, Nullable`1<NpgsqlDbType> dbType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Weasel.Postgresql.Canonicalization : object {
    [ExtensionAttribute]
public static string ReplaceMultiSpace(string str, string newStr);
    [ExtensionAttribute]
public static string CanonicizeSql(string sql);
}
public enum Weasel.Postgresql.CascadeAction : Enum {
    public int value__;
    public static CascadeAction SetNull;
    public static CascadeAction SetDefault;
    public static CascadeAction Restrict;
    public static CascadeAction NoAction;
    public static CascadeAction Cascade;
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Weasel.Postgresql.CommandBuilder : CommandBuilderBase`3<NpgsqlCommand, NpgsqlParameter, NpgsqlDbType> {
    [CompilerGeneratedAttribute]
private string <TenantId>k__BackingField;
    public string TenantId { get; public set; }
    public CommandBuilder(NpgsqlDataSource dataSource);
    public CommandBuilder(NpgsqlCommand command);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TenantId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TenantId(string value);
    public void AppendParameter(String[] values);
    private sealed virtual override NpgsqlParameter Weasel.Postgresql.ICommandBuilder.AppendParameter(T value);
    public sealed virtual NpgsqlParameter AppendParameter(T value, NpgsqlDbType dbType);
    private sealed virtual override NpgsqlParameter Weasel.Postgresql.ICommandBuilder.AppendParameter(object value);
    private sealed virtual override NpgsqlParameter Weasel.Postgresql.ICommandBuilder.AppendParameter(object value, Nullable`1<NpgsqlDbType> dbType);
    private sealed virtual override void Weasel.Postgresql.ICommandBuilder.AppendParameters(Object[] parameters);
    public sealed virtual IGroupedParameterBuilder CreateGroupedParameterBuilder(Nullable`1<char> seperator);
    public sealed virtual void StartNewCommand();
    private sealed virtual override string Weasel.Postgresql.ICommandBuilder.get_LastParameterName();
    private sealed virtual override void Weasel.Postgresql.ICommandBuilder.Append(string sql);
    private sealed virtual override void Weasel.Postgresql.ICommandBuilder.Append(char character);
    private sealed virtual override NpgsqlParameter[] Weasel.Postgresql.ICommandBuilder.AppendWithParameters(string text);
    private sealed virtual override NpgsqlParameter[] Weasel.Postgresql.ICommandBuilder.AppendWithParameters(string text, char placeholder);
    private sealed virtual override void Weasel.Postgresql.ICommandBuilder.AddParameters(object parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Postgresql.CommandBuilderExtensions : object {
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(NpgsqlConnection connection, CommandBuilder commandBuilder, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<int> ExecuteNonQueryAsync(NpgsqlConnection connection, CommandBuilder commandBuilder, NpgsqlTransaction tx, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<NpgsqlDataReader> ExecuteReaderAsync(NpgsqlConnection connection, CommandBuilder commandBuilder, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.CommandBuilderExtensions/<ExecuteReaderAsync>d__3")]
[ExtensionAttribute]
public static Task`1<NpgsqlDataReader> ExecuteReaderAsync(NpgsqlConnection connection, CommandBuilder commandBuilder, NpgsqlTransaction tx, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> FetchListAsync(NpgsqlConnection connection, CommandBuilder commandBuilder, Func`3<DbDataReader, CancellationToken, Task`1<T>> transform, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<T>> FetchListAsync(NpgsqlConnection connection, CommandBuilder commandBuilder, Func`3<DbDataReader, CancellationToken, Task`1<T>> transform, NpgsqlTransaction tx, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Postgresql.CommandExtensions : object {
    [ExtensionAttribute]
public static NpgsqlParameter AddParameter(NpgsqlCommand command, object value, Nullable`1<NpgsqlDbType> dbType);
    [ExtensionAttribute]
public static NpgsqlParameter AddNamedParameter(NpgsqlCommand command, string name, object value, Nullable`1<NpgsqlDbType> dbType);
    [ExtensionAttribute]
public static NpgsqlCommand With(NpgsqlCommand command, string name, String[] value);
    [ExtensionAttribute]
public static NpgsqlCommand With(NpgsqlCommand command, string name, Int32[] value);
    [ExtensionAttribute]
public static NpgsqlCommand With(NpgsqlCommand command, string name, Int64[] value);
    [ExtensionAttribute]
public static NpgsqlCommand With(NpgsqlCommand command, string name, Guid[] value);
    [ExtensionAttribute]
public static NpgsqlCommand With(NpgsqlCommand command, string name, DateTime value);
    [ExtensionAttribute]
public static NpgsqlCommand With(NpgsqlCommand command, string name, DateTimeOffset value);
    [ExtensionAttribute]
public static NpgsqlCommand With(NpgsqlCommand command, string name, object value, NpgsqlDbType dbType);
    [ExtensionAttribute]
public static NpgsqlCommand Returns(NpgsqlCommand command, string name, NpgsqlDbType type);
    [ExtensionAttribute]
public static NpgsqlCommand CreateCommand(NpgsqlConnection conn, string command, NpgsqlTransaction tx);
    [ExtensionAttribute]
public static Task KillIdleSessions(NpgsqlConnection conn, string databaseName, CancellationToken ct);
    [ExtensionAttribute]
public static Task DropDatabase(NpgsqlConnection conn, string databaseName, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.CommandExtensions/<DatabaseExists>d__13")]
[ExtensionAttribute]
public static Task`1<bool> DatabaseExists(NpgsqlConnection conn, string databaseName, CancellationToken ct);
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<string>> AllDatabaseNames(NpgsqlConnection conn, CancellationToken ct);
    [ExtensionAttribute]
public static NpgsqlCommand CallFunction(NpgsqlConnection conn, string functionName, String[] functionParamsNames);
    [ExtensionAttribute]
public static NpgsqlCommand CallFunction(NpgsqlConnection conn, DbObjectName functionName, String[] functionParamsNames);
    [ExtensionAttribute]
public static NpgsqlCommand CreateCommand(NpgsqlDataSource source, string sql, Object[] arguments);
}
public class Weasel.Postgresql.Connections.DefaultNpgsqlDataSourceFactory : object {
    [NullableAttribute("1")]
protected Cache`2<string, NpgsqlDataSourceBuilder> Builders;
    [NullableAttribute("1")]
protected Cache`2<string, NpgsqlDataSource> DataSources;
    [NullableContextAttribute("1")]
public DefaultNpgsqlDataSourceFactory(Func`2<string, NpgsqlDataSourceBuilder> dataSourceBuilderFactory);
    [NullableContextAttribute("1")]
public virtual NpgsqlDataSource Create(string connectionString);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Weasel.Postgresql.Connections.DefaultNpgsqlDataSourceFactory/<DisposeAsync>d__6")]
public sealed virtual ValueTask DisposeAsync();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
private NpgsqlDataSource <.ctor>b__2_0(string connectionString);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.Connections.INpgsqlDataSourceFactory {
    public abstract virtual NpgsqlDataSource Create(string connectionString);
}
[ExtensionAttribute]
public static class Weasel.Postgresql.Connections.NpgsqlDataSourceFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static NpgsqlDataSource Create(INpgsqlDataSourceFactory dataSourceFactory, string masterConnectionString, string databaseName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Connections.SingleNpgsqlDataSourceFactory : DefaultNpgsqlDataSourceFactory {
    [CompilerGeneratedAttribute]
private NpgsqlDataSource <dataSource>P;
    public SingleNpgsqlDataSourceFactory(Func`2<string, NpgsqlDataSourceBuilder> dataSourceBuilderFactory, NpgsqlDataSource dataSource);
    public virtual NpgsqlDataSource Create(string connectionString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Extension : object {
    [CompilerGeneratedAttribute]
private string <ExtensionName>k__BackingField;
    public string ExtensionName { get; }
    public DbObjectName Identifier { get; }
    public Extension(string extensionName);
    [CompilerGeneratedAttribute]
public string get_ExtensionName();
    public sealed virtual void WriteCreateStatement(Migrator migrator, TextWriter writer);
    public sealed virtual void WriteDropStatement(Migrator rules, TextWriter writer);
    public sealed virtual DbObjectName get_Identifier();
    public sealed virtual void ConfigureQueryCommand(DbCommandBuilder builder);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Extension/<CreateDeltaAsync>d__9")]
public sealed virtual Task`1<ISchemaObjectDelta> CreateDeltaAsync(DbDataReader reader, CancellationToken ct);
    [IteratorStateMachineAttribute("Weasel.Postgresql.Extension/<AllNames>d__10")]
public sealed virtual IEnumerable`1<DbObjectName> AllNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Functions.Function : object {
    [NullableAttribute("2")]
private string _body;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private String[] _dropStatements;
    [CompilerGeneratedAttribute]
private bool <IsRemoved>k__BackingField;
    [CompilerGeneratedAttribute]
private DbObjectName <Identifier>k__BackingField;
    public bool IsRemoved { get; protected set; }
    public DbObjectName Identifier { get; }
    public Function(DbObjectName identifier, string body, String[] dropStatements);
    public Function(DbObjectName identifier, string body);
    protected Function(DbObjectName identifier);
    [CompilerGeneratedAttribute]
public bool get_IsRemoved();
    [CompilerGeneratedAttribute]
protected void set_IsRemoved(bool value);
    public virtual void WriteCreateStatement(Migrator migrator, TextWriter writer);
    public sealed virtual void WriteDropStatement(Migrator rules, TextWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual DbObjectName get_Identifier();
    public sealed virtual void ConfigureQueryCommand(DbCommandBuilder builder);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Functions.Function/<CreateDeltaAsync>d__15")]
public sealed virtual Task`1<ISchemaObjectDelta> CreateDeltaAsync(DbDataReader reader, CancellationToken ct);
    [IteratorStateMachineAttribute("Weasel.Postgresql.Functions.Function/<AllNames>d__16")]
public sealed virtual IEnumerable`1<DbObjectName> AllNames();
    public static string ParseSignature(string body);
    public static DbObjectName ParseIdentifier(string functionSql);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Functions.Function/<FetchExistingAsync>d__19")]
public Task`1<Function> FetchExistingAsync(NpgsqlConnection conn, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Functions.Function/<readExistingAsync>d__20")]
private Task`1<Function> readExistingAsync(DbDataReader reader, CancellationToken ct);
    public string Body(Migrator rules);
    public String[] DropStatements();
    public static Function ForSql(string sql);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Functions.Function/<FindDeltaAsync>d__24")]
public Task`1<FunctionDelta> FindDeltaAsync(NpgsqlConnection conn, CancellationToken ct);
    public static Function ForRemoval(string identifier);
    public static Function ForRemoval(DbObjectName identifier);
    public string BuildTemplate(string template);
    public void WriteTemplate(Migrator rules, SqlTemplate template, TextWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Functions.FunctionBody : object {
    [CompilerGeneratedAttribute]
private DbObjectName <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <DropStatements>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    public DbObjectName Identifier { get; public set; }
    public String[] DropStatements { get; public set; }
    public string Body { get; public set; }
    public FunctionBody(DbObjectName identifier, String[] dropStatements, string body);
    [CompilerGeneratedAttribute]
public DbObjectName get_Identifier();
    [CompilerGeneratedAttribute]
public void set_Identifier(DbObjectName value);
    [CompilerGeneratedAttribute]
public String[] get_DropStatements();
    [CompilerGeneratedAttribute]
public void set_DropStatements(String[] value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
    public string ToOwnershipCommand(string owner);
    public string BuildTemplate(string template);
    public void WriteTemplate(SqlTemplate template, StringWriter writer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Weasel.Postgresql.Functions.FunctionDelta : SchemaObjectDelta`1<Function> {
    public FunctionDelta(Function expected, Function actual);
    protected virtual SchemaPatchDifference compare(Function expected, Function actual);
    public virtual void WriteRollback(Migrator rules, TextWriter writer);
    public virtual void WriteUpdate(Migrator rules, TextWriter writer);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Functions.UpsertFunction : Function {
    private String[] _columns;
    private DbObjectName _identifier;
    private Table _table;
    public UpsertFunction(DbObjectName identifier, Table table, String[] columns);
    public virtual void WriteCreateStatement(Migrator migrator, TextWriter writer);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private TableColumn <WriteCreateStatement>b__4_0(string x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private TableColumn <WriteCreateStatement>b__4_1(string x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.GroupedParameterBuilder : object {
    private ICommandBuilder _commandBuilder;
    private Nullable`1<char> _seperator;
    private int _count;
    public GroupedParameterBuilder(ICommandBuilder commandBuilder, Nullable`1<char> seperator);
    public sealed virtual NpgsqlParameter AppendParameter(T value);
    public sealed virtual NpgsqlParameter AppendParameter(T value, NpgsqlDbType dbType);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.ICommandBuilder {
    public string TenantId { get; public set; }
    [NullableAttribute("2")]
public string LastParameterName { get; }
    public abstract virtual string get_TenantId();
    public abstract virtual void set_TenantId(string value);
    [NullableContextAttribute("2")]
public abstract virtual string get_LastParameterName();
    public abstract virtual void Append(string sql);
    public abstract virtual void Append(char character);
    public abstract virtual NpgsqlParameter AppendParameter(T value);
    public abstract virtual NpgsqlParameter AppendParameter(T value, NpgsqlDbType dbType);
    public abstract virtual NpgsqlParameter AppendParameter(object value);
    public abstract virtual NpgsqlParameter AppendParameter(object value, Nullable`1<NpgsqlDbType> dbType);
    public abstract virtual void AppendParameters(Object[] parameters);
    public abstract virtual IGroupedParameterBuilder CreateGroupedParameterBuilder(Nullable`1<char> seperator);
    public abstract virtual NpgsqlParameter[] AppendWithParameters(string text);
    public abstract virtual NpgsqlParameter[] AppendWithParameters(string text, char placeholder);
    public abstract virtual void StartNewCommand();
    public abstract virtual void AddParameters(object parameters);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.IGroupedParameterBuilder {
    public abstract virtual NpgsqlParameter AppendParameter(T value);
    public abstract virtual NpgsqlParameter AppendParameter(T value, NpgsqlDbType dbType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Migrations.DatabaseSpecification : object {
    [CompilerGeneratedAttribute]
private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ConnectionLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LcCollate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LcType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TableSpace>k__BackingField;
    public string Encoding { get; public set; }
    public string Owner { get; public set; }
    public Nullable`1<int> ConnectionLimit { get; public set; }
    public string LcCollate { get; public set; }
    public string LcType { get; public set; }
    public string TableSpace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ConnectionLimit();
    [CompilerGeneratedAttribute]
public void set_ConnectionLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_LcCollate();
    [CompilerGeneratedAttribute]
public void set_LcCollate(string value);
    [CompilerGeneratedAttribute]
public string get_LcType();
    [CompilerGeneratedAttribute]
public void set_LcType(string value);
    [CompilerGeneratedAttribute]
public string get_TableSpace();
    [CompilerGeneratedAttribute]
public void set_TableSpace(string value);
    [NullableContextAttribute("1")]
public string ToCreateDatabaseStatement(string databaseName);
    [NullableContextAttribute("1")]
public Task BuildDatabase(NpgsqlConnection conn, string databaseName, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Weasel.Postgresql.Migrations.SingleServerDatabaseCollection`1 : object {
    private INpgsqlDataSourceFactory _dataSourceFactory;
    private string _masterConnectionString;
    private TimedLock _lock;
    private ImHashMap`2<string, T> _databases;
    [CompilerGeneratedAttribute]
private static DatabaseSpecification <Specification>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DropAndRecreate>k__BackingField;
    private static DatabaseSpecification Specification { get; }
    public bool DropAndRecreate { get; public set; }
    protected SingleServerDatabaseCollection`1(INpgsqlDataSourceFactory dataSourceFactory, string masterConnectionString);
    private static SingleServerDatabaseCollection`1();
    [CompilerGeneratedAttribute]
private static DatabaseSpecification get_Specification();
    [CompilerGeneratedAttribute]
public bool get_DropAndRecreate();
    [CompilerGeneratedAttribute]
public void set_DropAndRecreate(bool value);
    public IReadOnlyList`1<T> AllDatabases();
    protected abstract virtual T buildDatabase(string databaseName, NpgsqlDataSource dataSource);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Migrations.SingleServerDatabaseCollection`1/<FindOrCreateDatabase>d__14")]
public virtual ValueTask`1<T> FindOrCreateDatabase(string databaseName, CancellationToken ct);
}
public class Weasel.Postgresql.NpgsqlTypeMapper : object {
    [NullableAttribute("1")]
public static Cache`2<NpgsqlDbType, NpgsqlTypeMapping> Mappings;
    private static NpgsqlTypeMapper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.NpgsqlTypeMapping : object {
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlDbType> <NpgsqlDbType>k__BackingField;
    [CompilerGeneratedAttribute]
private DbType <DbType>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type[] <ClrTypes>k__BackingField;
    public Nullable`1<NpgsqlDbType> NpgsqlDbType { get; }
    public DbType DbType { get; }
    [NullableAttribute("2")]
public string DataTypeName { get; }
    public Type[] ClrTypes { get; }
    public NpgsqlTypeMapping(Nullable`1<NpgsqlDbType> npgsqlDbType, DbType dbType, string dataTypeName, Type clrType);
    public NpgsqlTypeMapping(Nullable`1<NpgsqlDbType> npgsqlDbType, DbType dbType, string dataTypeName, Type[] clrTypes);
    [CompilerGeneratedAttribute]
public Nullable`1<NpgsqlDbType> get_NpgsqlDbType();
    [CompilerGeneratedAttribute]
public DbType get_DbType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
public Type[] get_ClrTypes();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Weasel.Postgresql.PostgresqlDatabase : DatabaseBase`1<NpgsqlConnection> {
    [CompilerGeneratedAttribute]
private NpgsqlDataSource <DataSource>k__BackingField;
    public NpgsqlDataSource DataSource { get; }
    protected PostgresqlDatabase(IMigrationLogger logger, AutoCreate autoCreate, Migrator migrator, string identifier, NpgsqlDataSource dataSource);
    [CompilerGeneratedAttribute]
public NpgsqlDataSource get_DataSource();
    [AsyncStateMachineAttribute("Weasel.Postgresql.PostgresqlDatabase/<DefinitionForFunction>d__4")]
public Task`1<Function> DefinitionForFunction(DbObjectName function, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.PostgresqlDatabase/<SchemaTables>d__5")]
public Task`1<IReadOnlyList`1<DbObjectName>> SchemaTables(CancellationToken ct);
    public NpgsqlConnection CreateConnection(TargetSessionAttributes targetSessionAttributes);
    public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Weasel.Postgresql.PostgresqlDatabase/<FetchExistingTablesAsync>d__8")]
public Task`1<Table[]> FetchExistingTablesAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.PostgresqlIdentifierInvalidException : Exception {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    public PostgresqlIdentifierInvalidException(string name);
    protected PostgresqlIdentifierInvalidException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.PostgresqlIdentifierTooLongException : Exception {
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public int Length { get; public set; }
    public string Name { get; public set; }
    public PostgresqlIdentifierTooLongException(int length, string name);
    protected PostgresqlIdentifierTooLongException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.PostgresqlMigrator : Migrator {
    private static string BeginScript;
    private static string EndScript;
    [CompilerGeneratedAttribute]
private int <NameDataLength>k__BackingField;
    public int NameDataLength { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NameDataLength();
    [CompilerGeneratedAttribute]
public void set_NameDataLength(int value);
    public virtual void WriteScript(TextWriter writer, Action`2<Migrator, TextWriter> writeStep);
    public virtual void WriteSchemaCreationSql(IEnumerable`1<string> schemaNames, TextWriter writer);
    private static void WriteSql(string databaseSchemaName, TextWriter writer);
    [AsyncStateMachineAttribute("Weasel.Postgresql.PostgresqlMigrator/<executeDelta>d__10")]
protected virtual Task executeDelta(SchemaMigration migration, DbConnection conn, AutoCreate autoCreate, IMigrationLogger logger, CancellationToken ct);
    public virtual string ToExecuteScriptLine(string scriptName);
    public static string CreateSchemaStatementFor(string schemaName);
    public virtual void AssertValidIdentifier(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.PostgresqlObjectName : DbObjectName {
    public PostgresqlObjectName(string schema, string name);
    public PostgresqlObjectName(string schema, string name, string qualifiedName);
    private PostgresqlObjectName(DbObjectName dbObjectName);
    public static PostgresqlObjectName From(DbObjectName dbObjectName);
    private bool Equals(DbObjectName other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Weasel.Postgresql.PostgresqlProvider : DatabaseProvider`3<NpgsqlCommand, NpgsqlParameter, NpgsqlDbType> {
    public static PostgresqlProvider Instance;
    [CompilerGeneratedAttribute]
private List`1<Type> <ContainmentOperatorTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <TimespanTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Type> <TimespanZTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseCaseSensitiveQualifiedNames>k__BackingField;
    public List`1<Type> ContainmentOperatorTypes { get; }
    public List`1<Type> TimespanTypes { get; }
    public List`1<Type> TimespanZTypes { get; }
    public bool UseCaseSensitiveQualifiedNames { get; public set; }
    private static PostgresqlProvider();
    [CompilerGeneratedAttribute]
public List`1<Type> get_ContainmentOperatorTypes();
    [CompilerGeneratedAttribute]
public List`1<Type> get_TimespanTypes();
    [CompilerGeneratedAttribute]
public List`1<Type> get_TimespanZTypes();
    [CompilerGeneratedAttribute]
public bool get_UseCaseSensitiveQualifiedNames();
    [CompilerGeneratedAttribute]
public void set_UseCaseSensitiveQualifiedNames(bool value);
    protected virtual void storeMappings();
    private string ResolveDatabaseType(Type type);
    private Nullable`1<NpgsqlDbType> ResolveNpgsqlDbType(Type type);
    protected virtual Type[] determineClrTypesForParameterType(NpgsqlDbType dbType);
    private static NpgsqlTypeMapping GetTypeMapping(Type type);
    [NullableContextAttribute("2")]
private static NpgsqlTypeMapping GetTypeMapping(NpgsqlDbType type);
    public string ConvertSynonyms(string type);
    protected virtual bool determineParameterType(Type type, NpgsqlDbType& dbType);
    public virtual string GetDatabaseType(Type memberType, EnumStorage enumStyle);
    public virtual void AddParameter(NpgsqlCommand command, NpgsqlParameter parameter);
    public virtual void SetParameterType(NpgsqlParameter parameter, NpgsqlDbType dbType);
    public bool HasTypeMapping(Type memberType);
    private Type GetNullableType(Type type);
    public void AddTimespanTypes(NpgsqlDbType npgsqlDbType, Type[] types);
    public virtual string ToQualifiedName(string objectName);
    public virtual DbObjectName Parse(string schemaName, string objectName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Postgresql.SchemaObjectsExtensions : object {
    [ExtensionAttribute]
public static Task`1<Function> FindExistingFunction(NpgsqlConnection conn, DbObjectName functionName, CancellationToken ct);
    [ExtensionAttribute]
internal static string ToIndexName(DbObjectName name, string prefix, String[] columnNames);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<ApplyChangesAsync>d__2")]
[ExtensionAttribute]
public static Task ApplyChangesAsync(ISchemaObject schemaObject, NpgsqlConnection conn, CancellationToken ct);
    [ExtensionAttribute]
public static Task DropAsync(ISchemaObject schemaObject, NpgsqlConnection conn, CancellationToken ct);
    [ExtensionAttribute]
public static Task CreateAsync(ISchemaObject schemaObject, NpgsqlConnection conn, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<EnsureSchemaExists>d__5")]
[ExtensionAttribute]
public static Task EnsureSchemaExists(NpgsqlConnection conn, string schemaName, CancellationToken cancellation);
    [ExtensionAttribute]
public static Task`1<IReadOnlyList`1<string>> ActiveSchemaNamesAsync(NpgsqlConnection conn, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<DropSchemaAsync>d__7")]
[ExtensionAttribute]
public static Task DropSchemaAsync(NpgsqlConnection conn, string schemaName, CancellationToken ct);
    public static string DropStatementFor(string schemaName, CascadeAction option);
    [ExtensionAttribute]
public static Task CreateSchemaAsync(NpgsqlConnection conn, string schemaName, CancellationToken ct);
    [ExtensionAttribute]
public static Task ResetSchemaAsync(NpgsqlConnection conn, string schemaName, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<FunctionExistsAsync>d__11")]
[ExtensionAttribute]
public static Task`1<bool> FunctionExistsAsync(NpgsqlConnection conn, DbObjectName functionIdentifier, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<ExistingTablesAsync>d__12")]
[ExtensionAttribute]
public static Task`1<IReadOnlyList`1<DbObjectName>> ExistingTablesAsync(NpgsqlConnection conn, string namePattern, String[] schemas, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<ExistingFunctionsAsync>d__13")]
[ExtensionAttribute]
public static Task`1<IReadOnlyList`1<DbObjectName>> ExistingFunctionsAsync(NpgsqlConnection conn, string namePattern, String[] schemas, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<ReadDbObjectNameAsync>d__14")]
private static Task`1<DbObjectName> ReadDbObjectNameAsync(DbDataReader reader, CancellationToken ct);
    [ExtensionAttribute]
public static string ToCreateSql(ISchemaObject object, PostgresqlMigrator rules);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<MigrateAsync>d__16")]
[ExtensionAttribute]
public static Task`1<bool> MigrateAsync(ISchemaObject schemaObject, NpgsqlConnection conn, Nullable`1<CancellationToken> cancellationToken, AutoCreate autoCreate);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaObjectsExtensions/<MigrateAsync>d__17")]
[ExtensionAttribute]
public static Task`1<bool> MigrateAsync(ISchemaObject[] schemaObjects, NpgsqlConnection conn, Nullable`1<CancellationToken> cancellationToken, AutoCreate autoCreate);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Weasel.Postgresql.SchemaUtils : object {
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaUtils/<DropSchema>d__0")]
public static Task DropSchema(string connectionString, string schemaName);
    [AsyncStateMachineAttribute("Weasel.Postgresql.SchemaUtils/<dropSchema>d__1")]
private static Task`1<bool> dropSchema(string connectionString, string schemaName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Sequence : object {
    private Nullable`1<long> _startWith;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private DbObjectName <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwnerColumn>k__BackingField;
    [CompilerGeneratedAttribute]
private DbObjectName <Identifier>k__BackingField;
    [NullableAttribute("2")]
public DbObjectName Owner { get; public set; }
    public string OwnerColumn { get; public set; }
    public DbObjectName Identifier { get; }
    public Sequence(string identifier);
    public Sequence(DbObjectName identifier);
    public Sequence(DbObjectName identifier, long startWith);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public DbObjectName get_Owner();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Owner(DbObjectName value);
    [CompilerGeneratedAttribute]
public string get_OwnerColumn();
    [CompilerGeneratedAttribute]
public void set_OwnerColumn(string value);
    [CompilerGeneratedAttribute]
public sealed virtual DbObjectName get_Identifier();
    [IteratorStateMachineAttribute("Weasel.Postgresql.Sequence/<AllNames>d__15")]
public sealed virtual IEnumerable`1<DbObjectName> AllNames();
    public sealed virtual void WriteCreateStatement(Migrator migrator, TextWriter writer);
    public sealed virtual void WriteDropStatement(Migrator rules, TextWriter writer);
    public sealed virtual void ConfigureQueryCommand(DbCommandBuilder builder);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Sequence/<CreateDeltaAsync>d__19")]
public sealed virtual Task`1<ISchemaObjectDelta> CreateDeltaAsync(DbDataReader reader, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Sequence/<FindDeltaAsync>d__20")]
public Task`1<ISchemaObjectDelta> FindDeltaAsync(NpgsqlConnection conn, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.CommandParameter : object {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<NpgsqlDbType> <DbType>k__BackingField;
    [NullableAttribute("2")]
public object Value { get; }
    public Nullable`1<NpgsqlDbType> DbType { get; public set; }
    public CommandParameter(ConstantExpression expression);
    [NullableContextAttribute("2")]
public CommandParameter(object value);
    public CommandParameter(object value, NpgsqlDbType npgsqlDbType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Nullable`1<NpgsqlDbType> get_DbType();
    [CompilerGeneratedAttribute]
public void set_DbType(Nullable`1<NpgsqlDbType> value);
    public sealed virtual void Apply(ICommandBuilder builder);
    public NpgsqlParameter AddParameter(ICommandBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.ComparisonFilter : object {
    public static IDictionary`2<string, string> NotOperators;
    public static IDictionary`2<string, string> OppositeOperators;
    [CompilerGeneratedAttribute]
private ISqlFragment <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private ISqlFragment <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Op>k__BackingField;
    public ISqlFragment Left { get; }
    public ISqlFragment Right { get; }
    public string Op { get; private set; }
    public ComparisonFilter(ISqlFragment left, ISqlFragment right, string op);
    private static ComparisonFilter();
    [CompilerGeneratedAttribute]
public ISqlFragment get_Left();
    [CompilerGeneratedAttribute]
public ISqlFragment get_Right();
    [CompilerGeneratedAttribute]
public string get_Op();
    [CompilerGeneratedAttribute]
private void set_Op(string value);
    public sealed virtual void Apply(ICommandBuilder builder);
    public sealed virtual ISqlFragment Reverse();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.CompoundWhereFragment : object {
    private IList`1<ISqlFragment> _children;
    [CompilerGeneratedAttribute]
private string <Separator>k__BackingField;
    public string Separator { get; }
    public IEnumerable`1<ISqlFragment> Children { get; }
    private CompoundWhereFragment(string separator, ISqlFragment[] children);
    [CompilerGeneratedAttribute]
public string get_Separator();
    public sealed virtual IEnumerable`1<ISqlFragment> get_Children();
    public sealed virtual void Apply(ICommandBuilder builder);
    public sealed virtual void Register(ISqlFragment fragment);
    public static CompoundWhereFragment And(ISqlFragment[] children);
    public static CompoundWhereFragment And(IEnumerable`1<ISqlFragment> children);
    public static CompoundWhereFragment Or(ISqlFragment[] children);
    public void Add(ISqlFragment child);
    public void Remove(ISqlFragment fragment);
    public void Add(IReadOnlyList`1<ISqlFragment> extras);
    public static CompoundWhereFragment For(string separator);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.CustomizableWhereFragment : object {
    private CommandParameter[] _parameters;
    private string _sql;
    private char _token;
    public CustomizableWhereFragment(string sql, string paramReplacementToken, CommandParameter[] parameters);
    public sealed virtual void Apply(ICommandBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.EnumIsNotOneOfWhereFragment : object {
    private NpgsqlDbType _dbType;
    private string _locator;
    private object _values;
    public EnumIsNotOneOfWhereFragment(object values, EnumStorage enumStorage, string locator);
    public sealed virtual void Apply(ICommandBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.EnumIsOneOfWhereFragment : object {
    private NpgsqlDbType _dbType;
    private bool _listContainsNullEntry;
    private string _locator;
    private object _values;
    public EnumIsOneOfWhereFragment(object values, EnumStorage enumStorage, string locator);
    public sealed virtual void Apply(ICommandBuilder builder);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.SqlGeneration.ICompoundFragment {
    public IEnumerable`1<ISqlFragment> Children { get; }
    public abstract virtual IEnumerable`1<ISqlFragment> get_Children();
}
public interface Weasel.Postgresql.SqlGeneration.IReversibleWhereFragment {
    [NullableContextAttribute("1")]
public abstract virtual ISqlFragment Reverse();
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.SqlGeneration.ISqlFragment {
    public abstract virtual void Apply(ICommandBuilder builder);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.SqlGeneration.IWhereFragmentHolder {
    public abstract virtual void Register(ISqlFragment fragment);
}
public class Weasel.Postgresql.SqlGeneration.LiteralFalse : WhereFragment {
    [NullableContextAttribute("1")]
public sealed virtual ISqlFragment Reverse();
}
public class Weasel.Postgresql.SqlGeneration.LiteralTrue : WhereFragment {
    [NullableContextAttribute("1")]
public sealed virtual ISqlFragment Reverse();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.NotWhereFragment : object {
    private IWhereFragmentHolder _parent;
    [CompilerGeneratedAttribute]
private ISqlFragment <Inner>k__BackingField;
    public ISqlFragment Inner { get; public set; }
    public NotWhereFragment(IWhereFragmentHolder parent);
    [CompilerGeneratedAttribute]
public ISqlFragment get_Inner();
    [CompilerGeneratedAttribute]
public void set_Inner(ISqlFragment value);
    public sealed virtual void Apply(ICommandBuilder builder);
    private sealed virtual override void Weasel.Postgresql.SqlGeneration.IWhereFragmentHolder.Register(ISqlFragment fragment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Postgresql.SqlGeneration.SqlFragmentExtensions : object {
    [ExtensionAttribute]
public static ISqlFragment CombineAnd(ISqlFragment filter, ISqlFragment other);
    [ExtensionAttribute]
public static ISqlFragment CombineAnd(ISqlFragment filter, IReadOnlyList`1<ISqlFragment> extras);
    [ExtensionAttribute]
public static ISqlFragment[] Flatten(ISqlFragment fragment);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string ToSql(ISqlFragment fragment);
    [ExtensionAttribute]
public static bool ContainsAny(ISqlFragment fragment);
}
public class Weasel.Postgresql.SqlGeneration.WhereFragment : CustomizableWhereFragment {
    [NullableContextAttribute("1")]
public WhereFragment(string sql, Object[] parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.WhereInArrayFilter : object {
    private string _locator;
    private CommandParameter _values;
    public WhereInArrayFilter(string locator, ConstantExpression values);
    public sealed virtual void Apply(ICommandBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.SqlGeneration.WhereInSubQuery : object {
    private string _tableName;
    public WhereInSubQuery(string tableName);
    public sealed virtual void Apply(ICommandBuilder builder);
}
internal static class Weasel.Postgresql.StringTokenizer : object {
    [NullableContextAttribute("1")]
public static IEnumerable`1<string> Tokenize(string content);
}
public class Weasel.Postgresql.Tables.BigSerialValue : ColumnCheck {
    [NullableContextAttribute("1")]
public virtual string Declaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Weasel.Postgresql.Tables.Change`1 : object {
    [CompilerGeneratedAttribute]
private T <Expected>k__BackingField;
    [CompilerGeneratedAttribute]
private T <Actual>k__BackingField;
    public T Expected { get; }
    public T Actual { get; }
    public Change`1(T expected, T actual);
    [CompilerGeneratedAttribute]
public T get_Expected();
    [CompilerGeneratedAttribute]
public T get_Actual();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Weasel.Postgresql.Tables.ColumnCheck : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [NullableContextAttribute("1")]
public abstract virtual string Declaration();
    [NullableContextAttribute("1")]
public string FullDeclaration();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.ForeignKey : object {
    [CompilerGeneratedAttribute]
private String[] <ColumnNames>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LinkedNames>k__BackingField;
    [CompilerGeneratedAttribute]
private DbObjectName <LinkedTable>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeAction <OnDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeAction <OnUpdate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public String[] ColumnNames { get; public set; }
    public String[] LinkedNames { get; public set; }
    public DbObjectName LinkedTable { get; public set; }
    public CascadeAction OnDelete { get; public set; }
    public CascadeAction OnUpdate { get; public set; }
    public string Name { get; public set; }
    public ForeignKey(string name);
    [CompilerGeneratedAttribute]
public String[] get_ColumnNames();
    [CompilerGeneratedAttribute]
public void set_ColumnNames(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_LinkedNames();
    [CompilerGeneratedAttribute]
public void set_LinkedNames(String[] value);
    [CompilerGeneratedAttribute]
public DbObjectName get_LinkedTable();
    [CompilerGeneratedAttribute]
public void set_LinkedTable(DbObjectName value);
    [CompilerGeneratedAttribute]
public CascadeAction get_OnDelete();
    [CompilerGeneratedAttribute]
public void set_OnDelete(CascadeAction value);
    [CompilerGeneratedAttribute]
public CascadeAction get_OnUpdate();
    [CompilerGeneratedAttribute]
public void set_OnUpdate(CascadeAction value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    protected bool Equals(ForeignKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Parse(string definition, string schema);
    public string ToDDL(Table parent);
    public void WriteAddStatement(Table parent, TextWriter writer);
    public void WriteDropStatement(Table parent, TextWriter writer);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.Tables.INamed {
    public string Name { get; }
    public abstract virtual string get_Name();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.IndexDefinition : object {
    public static string IndexCreationBeginComment;
    public static string IndexCreationEndComment;
    private static string JsonbPathOps;
    private static string Ascending;
    private static string Descending;
    private static string NullsFirst;
    private static string NullsLast;
    private static string AscendingNullsFirst;
    private static string AscendingNullsLast;
    private static string DescendingNullsFirst;
    private static string DescendingNullsLast;
    private static String[] _reserved_words;
    [NullableAttribute("2")]
private string _customIndexMethod;
    [NullableAttribute("2")]
private string _indexName;
    private bool _isUnique;
    [CompilerGeneratedAttribute]
private IndexMethod <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private SortOrder <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private NullsSortOrder <NullsSortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NullsNotDistinct>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsConcurrent>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private String[] <IncludeColumns>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Mask>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <TableSpace>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Predicate>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <Collation>k__BackingField;
    [CompilerGeneratedAttribute]
private OrderedDictionary <StorageParameters>k__BackingField;
    public IndexMethod Method { get; public set; }
    [NullableAttribute("2")]
public string CustomMethod { get; public set; }
    public SortOrder SortOrder { get; public set; }
    public NullsSortOrder NullsSortOrder { get; public set; }
    public bool IsUnique { get; public set; }
    public bool NullsNotDistinct { get; public set; }
    public bool IsConcurrent { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Columns { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] IncludeColumns { get; public set; }
    [NullableAttribute("2")]
public string Mask { get; public set; }
    [NullableAttribute("2")]
public string TableSpace { get; public set; }
    [NullableAttribute("2")]
public string Predicate { get; public set; }
    [NullableAttribute("2")]
public string Collation { get; public set; }
    public Nullable`1<int> FillFactor { get; public set; }
    public OrderedDictionary StorageParameters { get; public set; }
    public string Name { get; public set; }
    public IndexDefinition(string indexName);
    private static IndexDefinition();
    [CompilerGeneratedAttribute]
public IndexMethod get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(IndexMethod value);
    [NullableContextAttribute("2")]
public string get_CustomMethod();
    [NullableContextAttribute("2")]
public void set_CustomMethod(string value);
    [CompilerGeneratedAttribute]
public SortOrder get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(SortOrder value);
    [CompilerGeneratedAttribute]
public NullsSortOrder get_NullsSortOrder();
    [CompilerGeneratedAttribute]
public void set_NullsSortOrder(NullsSortOrder value);
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    [CompilerGeneratedAttribute]
public bool get_NullsNotDistinct();
    [CompilerGeneratedAttribute]
public void set_NullsNotDistinct(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsConcurrent();
    [CompilerGeneratedAttribute]
public void set_IsConcurrent(bool value);
    [CompilerGeneratedAttribute]
public virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public virtual void set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public virtual String[] get_IncludeColumns();
    [CompilerGeneratedAttribute]
public virtual void set_IncludeColumns(String[] value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Mask();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Mask(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_TableSpace();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_TableSpace(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Predicate();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Predicate(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Collation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Collation(string value);
    public Nullable`1<int> get_FillFactor();
    public void set_FillFactor(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public OrderedDictionary get_StorageParameters();
    [CompilerGeneratedAttribute]
public void set_StorageParameters(OrderedDictionary value);
    public sealed virtual string get_Name();
    public void set_Name(string value);
    protected virtual string deriveIndexName();
    public IndexDefinition AgainstColumns(String[] columns);
    public string ToDDL(Table parent);
    public static string CanonicizeCast(string column);
    private string correctedExpression();
    public void ToGinWithJsonbPathOps();
    public static IndexDefinition Parse(string definition);
    [IteratorStateMachineAttribute("Weasel.Postgresql.Tables.IndexDefinition/<getStorageParameters>d__84")]
private static IEnumerable`1<string> getStorageParameters(string rawInput);
    private static IEnumerable`1<string> getIncludeColumns(string rawInput);
    private static string canonicizeColumn(string expression);
    private static ValueTuple`3<string, SortOrder, NullsSortOrder> removeSortOrderFromExpression(string expression);
    public bool Matches(IndexDefinition actual, Table parent);
    public void AssertMatches(IndexDefinition actual, Table parent);
    public static string CanonicizeDdl(IndexDefinition index, Table parent);
    public static string CanonicizeDdl(string sql, string schema);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Indexes.FullTextIndexDefinition : IndexDefinition {
    public static string DefaultRegConfig;
    public static string DataDocumentConfig;
    private PostgresqlObjectName table;
    [NullableAttribute("2")]
private string indexName;
    [NullableAttribute("2")]
private string indexPrefix;
    private string regConfig;
    [CompilerGeneratedAttribute]
private string <DocumentConfig>k__BackingField;
    [NullableAttribute("2")]
public string RegConfig { get; public set; }
    public string DocumentConfig { get; public set; }
    [NullableAttribute("2")]
[ObsoleteAttribute("Use DocumentConfig instead")]
public string DataConfig { get; public set; }
    public String[] Columns { get; public set; }
    [NullableContextAttribute("2")]
public FullTextIndexDefinition(PostgresqlObjectName tableName, string documentConfig, string regConfig, string indexName, string indexPrefix);
    [NullableContextAttribute("2")]
public string get_RegConfig();
    [NullableContextAttribute("2")]
public void set_RegConfig(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentConfig();
    [CompilerGeneratedAttribute]
public void set_DocumentConfig(string value);
    [NullableContextAttribute("2")]
public string get_DataConfig();
    [NullableContextAttribute("2")]
public void set_DataConfig(string value);
    public virtual String[] get_Columns();
    public virtual void set_Columns(String[] value);
    protected virtual string deriveIndexName();
}
public enum Weasel.Postgresql.Tables.IndexMethod : Enum {
    public int value__;
    public static IndexMethod btree;
    public static IndexMethod hash;
    public static IndexMethod gist;
    public static IndexMethod gin;
    public static IndexMethod brin;
    public static IndexMethod custom;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Weasel.Postgresql.Tables.ItemDelta`1 : object {
    private List`1<Change`1<T>> _different;
    private List`1<T> _extras;
    private List`1<T> _matched;
    private List`1<T> _missing;
    public IReadOnlyList`1<Change`1<T>> Different { get; }
    public IReadOnlyList`1<T> Matched { get; }
    public IReadOnlyList`1<T> Extras { get; }
    public IReadOnlyList`1<T> Missing { get; }
    public ItemDelta`1(IEnumerable`1<T> expectedItems, IEnumerable`1<T> actualItems, Func`3<T, T, bool> comparison);
    public IReadOnlyList`1<Change`1<T>> get_Different();
    public IReadOnlyList`1<T> get_Matched();
    public IReadOnlyList`1<T> get_Extras();
    public IReadOnlyList`1<T> get_Missing();
    public bool HasChanges();
    public SchemaPatchDifference Difference();
}
public class Weasel.Postgresql.Tables.MisconfiguredForeignKeyException : Exception {
    [NullableContextAttribute("2")]
public MisconfiguredForeignKeyException(string message);
}
public enum Weasel.Postgresql.Tables.NullsSortOrder : Enum {
    public int value__;
    public static NullsSortOrder None;
    public static NullsSortOrder First;
    public static NullsSortOrder Last;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.HashPartition : object {
    [CompilerGeneratedAttribute]
private int <Remainder>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Modulus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public int Remainder { get; }
    public int Modulus { get; }
    public string Suffix { get; }
    public HashPartition(string suffix, int modulus, int remainder);
    [CompilerGeneratedAttribute]
protected HashPartition(HashPartition original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public int get_Remainder();
    [CompilerGeneratedAttribute]
public int get_Modulus();
    [CompilerGeneratedAttribute]
public string get_Suffix();
    public void WriteCreateStatement(TextWriter writer, Table parent);
    public static HashPartition Parse(string suffix, string expression);
    [NullableContextAttribute("2")]
public virtual bool Equals(HashPartition other);
    public virtual int GetHashCode();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(HashPartition left, HashPartition right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(HashPartition left, HashPartition right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual HashPartition <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.HashPartitioning : object {
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    private List`1<HashPartition> _partitions;
    public String[] Columns { get; public set; }
    public String[] Suffixes { get; public set; }
    public IReadOnlyList`1<HashPartition> Partitions { get; }
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Columns(String[] value);
    public String[] get_Suffixes();
    public void set_Suffixes(String[] value);
    public IReadOnlyList`1<HashPartition> get_Partitions();
    public sealed virtual void WriteCreateStatement(TextWriter writer, Table parent);
    public sealed virtual void WritePartitionBy(TextWriter writer);
    public sealed virtual PartitionDelta CreateDelta(Table parent, IPartitionStrategy actual, IPartition[]& missing);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.HashPartitioning/<ReadPartitionsAsync>d__13")]
public static Task`1<HashPartitioning> ReadPartitionsAsync(DbObjectName identifier, List`1<string> columns, DbDataReader reader, CancellationToken ct);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.Tables.Partitioning.IListPartitionManager {
    public abstract virtual IEnumerable`1<ListPartition> Partitions();
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.Tables.Partitioning.IPartition {
    public abstract virtual void WriteCreateStatement(TextWriter writer, Table parent);
}
[NullableContextAttribute("1")]
public interface Weasel.Postgresql.Tables.Partitioning.IPartitionStrategy {
    public String[] Columns { get; }
    public abstract virtual void WriteCreateStatement(TextWriter writer, Table parent);
    public abstract virtual String[] get_Columns();
    public abstract virtual void WritePartitionBy(TextWriter writer);
    public abstract virtual PartitionDelta CreateDelta(Table parent, IPartitionStrategy actual, IPartition[]& missing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.ListPartition : object {
    [CompilerGeneratedAttribute]
private String[] <Values>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    public String[] Values { get; }
    public string Suffix { get; }
    public ListPartition(string suffix, String[] values);
    [CompilerGeneratedAttribute]
public String[] get_Values();
    [CompilerGeneratedAttribute]
public string get_Suffix();
    private sealed virtual override void Weasel.Postgresql.Tables.Partitioning.IPartition.WriteCreateStatement(TextWriter writer, Table parent);
    internal static ListPartition Parse(DbObjectName dbObjectName, string partitionTableName, string postgresExpression);
    protected bool Equals(ListPartition other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.ListPartitioning : object {
    private List`1<ListPartition> _partitions;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDefaultPartition>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IListPartitionManager <PartitionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExistingDefault>k__BackingField;
    public String[] Columns { get; public set; }
    public IReadOnlyList`1<ListPartition> Partitions { get; }
    public bool EnableDefaultPartition { get; public set; }
    [NullableAttribute("2")]
public IListPartitionManager PartitionManager { get; private set; }
    public bool HasExistingDefault { get; private set; }
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Columns(String[] value);
    public IReadOnlyList`1<ListPartition> get_Partitions();
    [CompilerGeneratedAttribute]
public bool get_EnableDefaultPartition();
    [CompilerGeneratedAttribute]
public void set_EnableDefaultPartition(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IListPartitionManager get_PartitionManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_PartitionManager(IListPartitionManager value);
    public ListPartitioning UsePartitionManager(IListPartitionManager strategy);
    public ListPartitioning AddPartition(string suffix, T[] values);
    private sealed virtual override void Weasel.Postgresql.Tables.Partitioning.IPartitionStrategy.WriteCreateStatement(TextWriter writer, Table parent);
    private sealed virtual override void Weasel.Postgresql.Tables.Partitioning.IPartitionStrategy.WritePartitionBy(TextWriter writer);
    private sealed virtual override PartitionDelta Weasel.Postgresql.Tables.Partitioning.IPartitionStrategy.CreateDelta(Table parent, IPartitionStrategy actual, IPartition[]& missing);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ListPartitioning/<ReadPartitionsAsync>d__20")]
public Task ReadPartitionsAsync(DbObjectName identifier, DbDataReader reader, CancellationToken ct);
    [CompilerGeneratedAttribute]
public bool get_HasExistingDefault();
    [CompilerGeneratedAttribute]
private void set_HasExistingDefault(bool value);
    public ListPartitioning DisableDefaultPartition();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions : FeatureSchemaBase {
    private Table _table;
    private Dictionary`2<string, string> _partitions;
    private bool _hasInitialized;
    private SemaphoreSlim _semaphoreSlim;
    public ReadOnlyDictionary`2<string, string> Partitions { get; }
    public ManagedListPartitions(string identifier, DbObjectName tableName);
    public ReadOnlyDictionary`2<string, string> get_Partitions();
    [IteratorStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions/<schemaObjects>d__7")]
protected virtual IEnumerable`1<ISchemaObject> schemaObjects();
    [IteratorStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions/<Weasel-Postgresql-Tables-Partitioning-IListPartitionManager-Partitions>d__8")]
private sealed virtual override IEnumerable`1<ListPartition> Weasel.Postgresql.Tables.Partitioning.IListPartitionManager.Partitions();
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions/<ResetValues>d__9")]
public Task ResetValues(PostgresqlDatabase database, Dictionary`2<string, string> values, CancellationToken token);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions/<AddPartitionToAllTables>d__10")]
public Task AddPartitionToAllTables(PostgresqlDatabase database, string value, string suffix, CancellationToken token);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions/<AddPartitionToAllTables>d__11")]
public Task`1<TablePartitionStatus[]> AddPartitionToAllTables(ILogger logger, PostgresqlDatabase database, Dictionary`2<string, string> values, CancellationToken token);
    public Task AddPartitionToAllTables(NpgsqlConnection conn, CancellationToken token, string value, string suffix);
    public void ForceReload();
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions/<InitializeAsync>d__14")]
public Task InitializeAsync(PostgresqlDatabase database, CancellationToken token);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.ManagedListPartitions/<InitializeAsync>d__15")]
public sealed virtual Task InitializeAsync(NpgsqlConnection conn, CancellationToken token);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <AddPartitionToAllTables>b__10_0(Table x);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <AddPartitionToAllTables>b__11_0(Table x);
}
public enum Weasel.Postgresql.Tables.Partitioning.PartitionDelta : Enum {
    public int value__;
    public static PartitionDelta None;
    public static PartitionDelta Additive;
    public static PartitionDelta Rebuild;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Weasel.Postgresql.Tables.Partitioning.PartitionExtensions : object {
    [ExtensionAttribute]
public static void WriteDefaultPartition(TextWriter writer, DbObjectName identifier);
    [ExtensionAttribute]
public static string FormatSqlValue(T value);
    [ExtensionAttribute]
public static string GetSuffixName(DbObjectName identifier, string tableName);
    [ExtensionAttribute]
internal static string GetStringWithinParantheses(string raw);
}
public enum Weasel.Postgresql.Tables.Partitioning.PartitionMigrationStatus : Enum {
    public int value__;
    public static PartitionMigrationStatus Complete;
    public static PartitionMigrationStatus Failed;
    public static PartitionMigrationStatus RequiresTableRebuild;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.RangePartition : object {
    [CompilerGeneratedAttribute]
private string <Suffix>k__BackingField;
    [CompilerGeneratedAttribute]
private string <From>k__BackingField;
    [CompilerGeneratedAttribute]
private string <To>k__BackingField;
    public string Suffix { get; }
    public string From { get; }
    public string To { get; }
    public RangePartition(string suffix, string from, string to);
    [CompilerGeneratedAttribute]
public string get_Suffix();
    [CompilerGeneratedAttribute]
public string get_From();
    [CompilerGeneratedAttribute]
public string get_To();
    private sealed virtual override void Weasel.Postgresql.Tables.Partitioning.IPartition.WriteCreateStatement(TextWriter writer, Table parent);
    protected bool Equals(RangePartition other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual string ToString();
    public virtual int GetHashCode();
    internal static RangePartition Parse(DbObjectName tableName, string partitionName, string postgresExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.RangePartitioning : object {
    private List`1<RangePartition> _ranges;
    [CompilerGeneratedAttribute]
private String[] <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasExistingDefault>k__BackingField;
    public IReadOnlyList`1<RangePartition> Ranges { get; }
    public String[] Columns { get; public set; }
    public bool HasExistingDefault { get; private set; }
    public IReadOnlyList`1<RangePartition> get_Ranges();
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Columns();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Columns(String[] value);
    [CompilerGeneratedAttribute]
public bool get_HasExistingDefault();
    [CompilerGeneratedAttribute]
private void set_HasExistingDefault(bool value);
    private sealed virtual override void Weasel.Postgresql.Tables.Partitioning.IPartitionStrategy.WritePartitionBy(TextWriter writer);
    private sealed virtual override PartitionDelta Weasel.Postgresql.Tables.Partitioning.IPartitionStrategy.CreateDelta(Table parent, IPartitionStrategy actual, IPartition[]& missing);
    public RangePartitioning AddRange(string suffix, T from, T to);
    private sealed virtual override void Weasel.Postgresql.Tables.Partitioning.IPartitionStrategy.WriteCreateStatement(TextWriter writer, Table parent);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Partitioning.RangePartitioning/<ReadPartitionsAsync>d__15")]
internal Task ReadPartitionsAsync(DbObjectName identifier, DbDataReader reader, CancellationToken ct);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Partitioning.TablePartitionStatus : object {
    [CompilerGeneratedAttribute]
private DbObjectName <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionMigrationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public DbObjectName Identifier { get; public set; }
    public PartitionMigrationStatus Status { get; public set; }
    public TablePartitionStatus(DbObjectName Identifier, PartitionMigrationStatus Status);
    [CompilerGeneratedAttribute]
protected TablePartitionStatus(TablePartitionStatus original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public DbObjectName get_Identifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Identifier(DbObjectName value);
    [CompilerGeneratedAttribute]
public PartitionMigrationStatus get_Status();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Status(PartitionMigrationStatus value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TablePartitionStatus left, TablePartitionStatus right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TablePartitionStatus left, TablePartitionStatus right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(TablePartitionStatus other);
    [CompilerGeneratedAttribute]
public virtual TablePartitionStatus <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(DbObjectName& Identifier, PartitionMigrationStatus& Status);
}
public class Weasel.Postgresql.Tables.SerialValue : ColumnCheck {
    [NullableContextAttribute("1")]
public virtual string Declaration();
}
public class Weasel.Postgresql.Tables.SmallSerialValue : ColumnCheck {
    [NullableContextAttribute("1")]
public virtual string Declaration();
}
public enum Weasel.Postgresql.Tables.SortOrder : Enum {
    public int value__;
    public static SortOrder Asc;
    public static SortOrder Desc;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Weasel.Postgresql.Tables.StringWriterExtensions : object {
    [ExtensionAttribute]
public static void WriteCascadeAction(TextWriter writer, string prefix, CascadeAction action);
    [ExtensionAttribute]
public static void WriteDropIndex(TextWriter writer, Table table, IndexDefinition index);
    [ExtensionAttribute]
public static void WriteDropFunction(TextWriter writer, Function function);
    [ExtensionAttribute]
public static void WriteReplaceFunction(TextWriter writer, Migrator rules, Function oldFunction, Function newFunction);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.Table : object {
    private List`1<TableColumn> _columns;
    [NullableAttribute("2")]
private string _primaryKeyName;
    [CompilerGeneratedAttribute]
private bool <IgnorePartitionsInMigration>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ForeignKey> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IndexDefinition> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <IgnoredIndexes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxIdentifierLength>k__BackingField;
    private List`1<string> _primaryKeyColumns;
    [CompilerGeneratedAttribute]
private DbObjectName <Identifier>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private IPartitionStrategy <Partitioning>k__BackingField;
    public bool IgnorePartitionsInMigration { get; public set; }
    public IReadOnlyList`1<TableColumn> Columns { get; }
    public IList`1<ForeignKey> ForeignKeys { get; }
    public IList`1<IndexDefinition> Indexes { get; }
    public ISet`1<string> IgnoredIndexes { get; }
    public int MaxIdentifierLength { get; public set; }
    public IReadOnlyList`1<string> PrimaryKeyColumns { get; }
    public string PrimaryKeyName { get; public set; }
    public DbObjectName Identifier { get; private set; }
    [NullableAttribute("2")]
public IPartitionStrategy Partitioning { get; public set; }
    public Table(DbObjectName name);
    public Table(string tableName);
    [CompilerGeneratedAttribute]
public bool get_IgnorePartitionsInMigration();
    [CompilerGeneratedAttribute]
public void set_IgnorePartitionsInMigration(bool value);
    public IReadOnlyList`1<TableColumn> get_Columns();
    [CompilerGeneratedAttribute]
public IList`1<ForeignKey> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public IList`1<IndexDefinition> get_Indexes();
    [CompilerGeneratedAttribute]
public ISet`1<string> get_IgnoredIndexes();
    [CompilerGeneratedAttribute]
public int get_MaxIdentifierLength();
    [CompilerGeneratedAttribute]
public void set_MaxIdentifierLength(int value);
    public IReadOnlyList`1<string> get_PrimaryKeyColumns();
    internal void ReadPrimaryKeyColumns(List`1<string> pks);
    public string get_PrimaryKeyName();
    public void set_PrimaryKeyName(string value);
    public sealed virtual void WriteCreateStatement(Migrator migrator, TextWriter writer);
    public sealed virtual void WriteDropStatement(Migrator rules, TextWriter writer);
    [CompilerGeneratedAttribute]
public sealed virtual DbObjectName get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(DbObjectName value);
    [IteratorStateMachineAttribute("Weasel.Postgresql.Tables.Table/<AllNames>d__36")]
public sealed virtual IEnumerable`1<DbObjectName> AllNames();
    public void MoveToSchema(string schemaName);
    public string ToBasicCreateTableSql();
    internal string PrimaryKeyDeclaration();
    public TableColumn ColumnFor(string columnName);
    public bool HasColumn(string columnName);
    public IndexDefinition IndexFor(string indexName);
    public ColumnExpression AddColumn(TableColumn column);
    public ColumnExpression AddColumn(string columnName, string columnType);
    public ColumnExpression AddColumn();
    public ColumnExpression AddColumn(string columnName);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<ExistsInDatabaseAsync>d__47")]
public Task`1<bool> ExistsInDatabaseAsync(NpgsqlConnection conn, CancellationToken ct);
    public string TruncatedNameIdentifier(string nameIdentifier);
    public void RemoveColumn(string columnName);
    public ColumnExpression ModifyColumn(string columnName);
    public void IgnoreIndex(string indexName);
    public bool HasIndex(string indexName);
    public bool HasIgnoredIndex(string indexName);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<CreateDeltaAsync>d__55")]
public sealed virtual Task`1<ISchemaObjectDelta> CreateDeltaAsync(DbDataReader reader, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<FindDeltaAsync>d__56")]
public Task`1<TableDelta> FindDeltaAsync(NpgsqlConnection conn, CancellationToken ct);
    public sealed virtual void ConfigureQueryCommand(DbCommandBuilder builder);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<FetchExistingAsync>d__58")]
public Task`1<Table> FetchExistingAsync(NpgsqlConnection conn, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readExistingAsync>d__59")]
private Task`1<Table> readExistingAsync(DbDataReader reader, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readMaxIdentifierLength>d__60")]
private static Task readMaxIdentifierLength(DbDataReader reader, Table existing, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readPartitionsAsync>d__61")]
private Task readPartitionsAsync(DbDataReader reader, Table existing, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readColumnsAsync>d__62")]
private static Task readColumnsAsync(DbDataReader reader, Table existing, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readColumnAsync>d__63")]
private static Task`1<TableColumn> readColumnAsync(DbDataReader reader, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readConstraintsAsync>d__64")]
private Task readConstraintsAsync(DbDataReader reader, Table existing, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readIndexesAsync>d__65")]
private Task readIndexesAsync(DbDataReader reader, Table existing, CancellationToken ct);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Tables.Table/<readPrimaryKeysAsync>d__66")]
private static Task`1<List`1<string>> readPrimaryKeysAsync(DbDataReader reader, CancellationToken ct);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IPartitionStrategy get_Partitioning();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Partitioning(IPartitionStrategy value);
    public RangePartitioning PartitionByRange(String[] columnOrExpressions);
    public ListPartitioning PartitionByList(String[] columnOrExpressions);
    public void PartitionByHash(HashPartitioning partitioning);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Tables.TableColumn : object {
    [CompilerGeneratedAttribute]
private IList`1<ColumnCheck> <ColumnChecks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowNulls>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <DefaultExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public IList`1<ColumnCheck> ColumnChecks { get; }
    public bool AllowNulls { get; public set; }
    [NullableAttribute("2")]
public string DefaultExpression { get; public set; }
    public string Type { get; public set; }
    public Table Parent { get; internal set; }
    public bool IsPrimaryKey { get; internal set; }
    public string Name { get; }
    public TableColumn(string name, string type);
    [CompilerGeneratedAttribute]
public IList`1<ColumnCheck> get_ColumnChecks();
    [CompilerGeneratedAttribute]
public bool get_AllowNulls();
    [CompilerGeneratedAttribute]
public void set_AllowNulls(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_DefaultExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_DefaultExpression(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public Table get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(Table value);
    [CompilerGeneratedAttribute]
public bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
internal void set_IsPrimaryKey(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public string RawType();
    public string Declaration();
    protected bool Equals(TableColumn other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public string ToDeclaration();
    public virtual string ToString();
    public virtual string AlterColumnTypeSql(Table table, TableColumn changeActual);
    public string DropColumnSql(Table table);
    public virtual bool CanAdd();
    public virtual string AddColumnSql(Table parent);
    public virtual bool CanAlter(TableColumn actual);
    public string ToFunctionArgumentDeclaration();
    public string ToArgumentName();
    public string ToFunctionUpdate();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Weasel.Postgresql.Tables.TableDelta : SchemaObjectDelta`1<Table> {
    [CompilerGeneratedAttribute]
private IPartition[] <MissingPartitions>k__BackingField;
    [CompilerGeneratedAttribute]
private PartitionDelta <PartitionDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemDelta`1<TableColumn> <Columns>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemDelta`1<IndexDefinition> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemDelta`1<ForeignKey> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private SchemaPatchDifference <PrimaryKeyDifference>k__BackingField;
    public IPartition[] MissingPartitions { get; private set; }
    public PartitionDelta PartitionDelta { get; private set; }
    internal ItemDelta`1<TableColumn> Columns { get; private set; }
    internal ItemDelta`1<IndexDefinition> Indexes { get; private set; }
    internal ItemDelta`1<ForeignKey> ForeignKeys { get; private set; }
    public SchemaPatchDifference PrimaryKeyDifference { get; private set; }
    public TableDelta(Table expected, Table actual);
    [CompilerGeneratedAttribute]
public IPartition[] get_MissingPartitions();
    [CompilerGeneratedAttribute]
private void set_MissingPartitions(IPartition[] value);
    [CompilerGeneratedAttribute]
public PartitionDelta get_PartitionDelta();
    [CompilerGeneratedAttribute]
private void set_PartitionDelta(PartitionDelta value);
    [CompilerGeneratedAttribute]
internal ItemDelta`1<TableColumn> get_Columns();
    [CompilerGeneratedAttribute]
private void set_Columns(ItemDelta`1<TableColumn> value);
    [CompilerGeneratedAttribute]
internal ItemDelta`1<IndexDefinition> get_Indexes();
    [CompilerGeneratedAttribute]
private void set_Indexes(ItemDelta`1<IndexDefinition> value);
    [CompilerGeneratedAttribute]
internal ItemDelta`1<ForeignKey> get_ForeignKeys();
    [CompilerGeneratedAttribute]
private void set_ForeignKeys(ItemDelta`1<ForeignKey> value);
    [CompilerGeneratedAttribute]
public SchemaPatchDifference get_PrimaryKeyDifference();
    [CompilerGeneratedAttribute]
private void set_PrimaryKeyDifference(SchemaPatchDifference value);
    protected virtual SchemaPatchDifference compare(Table expected, Table actual);
    public virtual void WriteUpdate(Migrator rules, TextWriter writer);
    private void writePrimaryKeyChanges(TextWriter writer);
    private void writeForeignKeyUpdates(TextWriter writer);
    public virtual void WriteRollback(Migrator rules, TextWriter writer);
    private void rollbackIndexes(TextWriter writer);
    private SchemaPatchDifference determinePatchDifference();
    private SchemaPatchDifference partitionDifference();
    public bool HasChanges();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.TokenParser : object {
    private List`1<string> _tokens;
    private List`1<char> _characters;
    private IMode _mode;
    public IEnumerable`1<string> Tokens { get; }
    public IEnumerable`1<string> get_Tokens();
    public void Read(char c);
    private void addChar(char c);
    private void startToken(IMode mode);
    private void endToken();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Views.MaterializedView : View {
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
private string <AccessMethod>k__BackingField;
    protected string ViewType { get; }
    protected char ViewKind { get; }
    [NullableAttribute("2")]
public string AccessMethod { get; public set; }
    public MaterializedView(string viewName, string viewSql);
    public MaterializedView(DbObjectName name, string viewSql);
    protected virtual string get_ViewType();
    protected virtual char get_ViewKind();
    protected virtual string GetCreationOptions();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_AccessMethod();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_AccessMethod(string value);
    public MaterializedView UseAccessMethod(string accessMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Weasel.Postgresql.Views.View : object {
    private string viewSql;
    [CompilerGeneratedAttribute]
private DbObjectName <Identifier>k__BackingField;
    public DbObjectName Identifier { get; private set; }
    protected string ViewType { get; }
    protected char ViewKind { get; }
    public View(string viewName, string viewSql);
    public View(DbObjectName name, string viewSql);
    [CompilerGeneratedAttribute]
public sealed virtual DbObjectName get_Identifier();
    [CompilerGeneratedAttribute]
private void set_Identifier(DbObjectName value);
    protected virtual string get_ViewType();
    protected virtual char get_ViewKind();
    protected virtual string GetCreationOptions();
    public void MoveToSchema(string schemaName);
    public string ToBasicCreateViewSql();
    [IteratorStateMachineAttribute("Weasel.Postgresql.Views.View/<AllNames>d__14")]
public sealed virtual IEnumerable`1<DbObjectName> AllNames();
    public sealed virtual void WriteCreateStatement(Migrator migrator, TextWriter writer);
    public sealed virtual void WriteDropStatement(Migrator rules, TextWriter writer);
    public sealed virtual void ConfigureQueryCommand(DbCommandBuilder builder);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Views.View/<CreateDeltaAsync>d__18")]
public sealed virtual Task`1<ISchemaObjectDelta> CreateDeltaAsync(DbDataReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Weasel.Postgresql.Views.View/<ExistsInDatabaseAsync>d__19")]
public Task`1<bool> ExistsInDatabaseAsync(NpgsqlConnection conn, CancellationToken ct);
}
