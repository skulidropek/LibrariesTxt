public abstract class WebMarkupMin.Core.AdvancedHtmlMinificationSettingsBase : CommonHtmlMinificationSettingsBase {
    [CompilerGeneratedAttribute]
private bool <RemoveCdataSectionsFromScriptsAndStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomShortDoctype>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveCase>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlEmptyTagRenderMode <EmptyTagRenderMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveOptionalEndTags>k__BackingField;
    private HashSet`1<string> _preservableOptionalTags;
    [CompilerGeneratedAttribute]
private bool <CollapseBooleanAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlAttributeQuotesRemovalMode <AttributeQuotesRemovalMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveJsTypeAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveCssTypeAttributes>k__BackingField;
    public bool RemoveCdataSectionsFromScriptsAndStyles { get; public set; }
    public string CustomShortDoctype { get; public set; }
    public bool PreserveCase { get; public set; }
    public HtmlEmptyTagRenderMode EmptyTagRenderMode { get; public set; }
    public bool RemoveOptionalEndTags { get; public set; }
    public ISet`1<string> PreservableOptionalTagCollection { get; }
    public string PreservableOptionalTagList { get; public set; }
    public bool CollapseBooleanAttributes { get; public set; }
    public HtmlAttributeQuotesRemovalMode AttributeQuotesRemovalMode { get; public set; }
    public bool RemoveJsTypeAttributes { get; public set; }
    public bool RemoveCssTypeAttributes { get; public set; }
    protected AdvancedHtmlMinificationSettingsBase(bool useEmptyMinificationSettings);
    [CompilerGeneratedAttribute]
public bool get_RemoveCdataSectionsFromScriptsAndStyles();
    [CompilerGeneratedAttribute]
public void set_RemoveCdataSectionsFromScriptsAndStyles(bool value);
    [CompilerGeneratedAttribute]
public string get_CustomShortDoctype();
    [CompilerGeneratedAttribute]
public void set_CustomShortDoctype(string value);
    [CompilerGeneratedAttribute]
public bool get_PreserveCase();
    [CompilerGeneratedAttribute]
public void set_PreserveCase(bool value);
    [CompilerGeneratedAttribute]
public HtmlEmptyTagRenderMode get_EmptyTagRenderMode();
    [CompilerGeneratedAttribute]
public void set_EmptyTagRenderMode(HtmlEmptyTagRenderMode value);
    [CompilerGeneratedAttribute]
public bool get_RemoveOptionalEndTags();
    [CompilerGeneratedAttribute]
public void set_RemoveOptionalEndTags(bool value);
    public ISet`1<string> get_PreservableOptionalTagCollection();
    public int SetPreservableOptionalTags(IEnumerable`1<string> optionalTags);
    public bool AddPreservableOptionalTag(string optionalTag);
    public string get_PreservableOptionalTagList();
    public void set_PreservableOptionalTagList(string value);
    [CompilerGeneratedAttribute]
public bool get_CollapseBooleanAttributes();
    [CompilerGeneratedAttribute]
public void set_CollapseBooleanAttributes(bool value);
    [CompilerGeneratedAttribute]
public HtmlAttributeQuotesRemovalMode get_AttributeQuotesRemovalMode();
    [CompilerGeneratedAttribute]
public void set_AttributeQuotesRemovalMode(HtmlAttributeQuotesRemovalMode value);
    [CompilerGeneratedAttribute]
public bool get_RemoveJsTypeAttributes();
    [CompilerGeneratedAttribute]
public void set_RemoveJsTypeAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveCssTypeAttributes();
    [CompilerGeneratedAttribute]
public void set_RemoveCssTypeAttributes(bool value);
}
public class WebMarkupMin.Core.CodeMinificationResult : MinificationResultBase {
    public CodeMinificationResult(string minifiedContent);
    public CodeMinificationResult(string minifiedContent, IList`1<MinificationErrorInfo> errors);
    public CodeMinificationResult(string minifiedContent, IList`1<MinificationErrorInfo> errors, IList`1<MinificationErrorInfo> warnings);
}
public abstract class WebMarkupMin.Core.CodeProcessingException : Exception {
    private int _lineNumber;
    private int _columnNumber;
    private string _sourceFragment;
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public string SourceFragment { get; public set; }
    protected CodeProcessingException(string message);
    protected CodeProcessingException(string message, Exception innerException);
    protected CodeProcessingException(string message, SourceCodeNodeCoordinates nodeCoordinates, string sourceFragment);
    protected CodeProcessingException(string message, int lineNumber, int columnNumber, string sourceFragment);
    protected CodeProcessingException(string message, SourceCodeNodeCoordinates nodeCoordinates, string sourceFragment, Exception innerException);
    protected CodeProcessingException(string message, int lineNumber, int columnNumber, string sourceFragment, Exception innerException);
    protected CodeProcessingException(SerializationInfo info, StreamingContext context);
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public string get_SourceFragment();
    public void set_SourceFragment(string value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class WebMarkupMin.Core.CommonHtmlMinificationSettingsBase : MarkupMinificationSettingsBase {
    [CompilerGeneratedAttribute]
private WhitespaceMinificationMode <WhitespaceMinificationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveHtmlComments>k__BackingField;
    private List`1<SimpleRegex> _preservableHtmlComments;
    [CompilerGeneratedAttribute]
private bool <RemoveHtmlCommentsFromScriptsAndStyles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShortDoctype>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseMetaCharsetTag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveTagsWithoutContent>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlAttributeQuotesStyle <AttributeQuotesStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveEmptyAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveRedundantAttributes>k__BackingField;
    private List`1<HtmlAttributeExpression> _preservableAttributes;
    [CompilerGeneratedAttribute]
private bool <RemoveHttpProtocolFromAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveHttpsProtocolFromAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveJsProtocolFromAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyEmbeddedCssCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyInlineCssCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyEmbeddedJsCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyInlineJsCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyEmbeddedJsonData>k__BackingField;
    private HashSet`1<string> _processableScriptTypes;
    [CompilerGeneratedAttribute]
private bool <MinifyKnockoutBindingExpressions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MinifyAngularBindingExpressions>k__BackingField;
    private HashSet`1<string> _customAngularDirectives;
    public WhitespaceMinificationMode WhitespaceMinificationMode { get; public set; }
    public bool RemoveHtmlComments { get; public set; }
    public IList`1<SimpleRegex> PreservableHtmlCommentCollection { get; }
    public string PreservableHtmlCommentList { get; public set; }
    public bool RemoveHtmlCommentsFromScriptsAndStyles { get; public set; }
    public bool UseShortDoctype { get; public set; }
    public bool UseMetaCharsetTag { get; public set; }
    public bool RemoveTagsWithoutContent { get; public set; }
    public HtmlAttributeQuotesStyle AttributeQuotesStyle { get; public set; }
    public bool RemoveEmptyAttributes { get; public set; }
    public bool RemoveRedundantAttributes { get; public set; }
    public IList`1<HtmlAttributeExpression> PreservableAttributeCollection { get; }
    public string PreservableAttributeList { get; public set; }
    public bool RemoveHttpProtocolFromAttributes { get; public set; }
    public bool RemoveHttpsProtocolFromAttributes { get; public set; }
    public bool RemoveJsProtocolFromAttributes { get; public set; }
    public bool MinifyEmbeddedCssCode { get; public set; }
    public bool MinifyInlineCssCode { get; public set; }
    public bool MinifyEmbeddedJsCode { get; public set; }
    public bool MinifyInlineJsCode { get; public set; }
    public bool MinifyEmbeddedJsonData { get; public set; }
    public ISet`1<string> ProcessableScriptTypeCollection { get; }
    public string ProcessableScriptTypeList { get; public set; }
    public bool MinifyKnockoutBindingExpressions { get; public set; }
    public bool MinifyAngularBindingExpressions { get; public set; }
    public ISet`1<string> CustomAngularDirectiveCollection { get; }
    public string CustomAngularDirectiveList { get; public set; }
    protected CommonHtmlMinificationSettingsBase(bool useEmptyMinificationSettings);
    [CompilerGeneratedAttribute]
public WhitespaceMinificationMode get_WhitespaceMinificationMode();
    [CompilerGeneratedAttribute]
public void set_WhitespaceMinificationMode(WhitespaceMinificationMode value);
    [CompilerGeneratedAttribute]
public bool get_RemoveHtmlComments();
    [CompilerGeneratedAttribute]
public void set_RemoveHtmlComments(bool value);
    public IList`1<SimpleRegex> get_PreservableHtmlCommentCollection();
    public int SetPreservableHtmlComments(IEnumerable`1<SimpleRegex> regularExpressions);
    public bool AddPreservableHtmlComment(string regularExpressionString);
    public void AddPreservableHtmlComment(SimpleRegex regularExpression);
    public string get_PreservableHtmlCommentList();
    public void set_PreservableHtmlCommentList(string value);
    [CompilerGeneratedAttribute]
public bool get_RemoveHtmlCommentsFromScriptsAndStyles();
    [CompilerGeneratedAttribute]
public void set_RemoveHtmlCommentsFromScriptsAndStyles(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseShortDoctype();
    [CompilerGeneratedAttribute]
public void set_UseShortDoctype(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseMetaCharsetTag();
    [CompilerGeneratedAttribute]
public void set_UseMetaCharsetTag(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveTagsWithoutContent();
    [CompilerGeneratedAttribute]
public void set_RemoveTagsWithoutContent(bool value);
    [CompilerGeneratedAttribute]
public HtmlAttributeQuotesStyle get_AttributeQuotesStyle();
    [CompilerGeneratedAttribute]
public void set_AttributeQuotesStyle(HtmlAttributeQuotesStyle value);
    [CompilerGeneratedAttribute]
public bool get_RemoveEmptyAttributes();
    [CompilerGeneratedAttribute]
public void set_RemoveEmptyAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveRedundantAttributes();
    [CompilerGeneratedAttribute]
public void set_RemoveRedundantAttributes(bool value);
    public IList`1<HtmlAttributeExpression> get_PreservableAttributeCollection();
    public int SetPreservableAttributes(IEnumerable`1<HtmlAttributeExpression> attributeExpressions);
    public bool AddPreservableAttribute(string attributeExpressionString);
    public void AddPreservableAttribute(HtmlAttributeExpression attributeExpression);
    public string get_PreservableAttributeList();
    public void set_PreservableAttributeList(string value);
    [CompilerGeneratedAttribute]
public bool get_RemoveHttpProtocolFromAttributes();
    [CompilerGeneratedAttribute]
public void set_RemoveHttpProtocolFromAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveHttpsProtocolFromAttributes();
    [CompilerGeneratedAttribute]
public void set_RemoveHttpsProtocolFromAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveJsProtocolFromAttributes();
    [CompilerGeneratedAttribute]
public void set_RemoveJsProtocolFromAttributes(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinifyEmbeddedCssCode();
    [CompilerGeneratedAttribute]
public void set_MinifyEmbeddedCssCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinifyInlineCssCode();
    [CompilerGeneratedAttribute]
public void set_MinifyInlineCssCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinifyEmbeddedJsCode();
    [CompilerGeneratedAttribute]
public void set_MinifyEmbeddedJsCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinifyInlineJsCode();
    [CompilerGeneratedAttribute]
public void set_MinifyInlineJsCode(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinifyEmbeddedJsonData();
    [CompilerGeneratedAttribute]
public void set_MinifyEmbeddedJsonData(bool value);
    public ISet`1<string> get_ProcessableScriptTypeCollection();
    public int SetProcessableScriptTypes(IEnumerable`1<string> scriptTypes);
    public bool AddProcessableScriptType(string scriptType);
    public string get_ProcessableScriptTypeList();
    public void set_ProcessableScriptTypeList(string value);
    [CompilerGeneratedAttribute]
public bool get_MinifyKnockoutBindingExpressions();
    [CompilerGeneratedAttribute]
public void set_MinifyKnockoutBindingExpressions(bool value);
    [CompilerGeneratedAttribute]
public bool get_MinifyAngularBindingExpressions();
    [CompilerGeneratedAttribute]
public void set_MinifyAngularBindingExpressions(bool value);
    public ISet`1<string> get_CustomAngularDirectiveCollection();
    public int SetCustomAngularDirectives(IEnumerable`1<string> directiveNames);
    public bool AddCustomAngularDirective(string directiveName);
    public string get_CustomAngularDirectiveList();
    public void set_CustomAngularDirectiveList(string value);
}
public class WebMarkupMin.Core.CrockfordJsMinifier : object {
    private JsMinifier _originalJsMinifier;
    public bool IsInlineCodeMinificationSupported { get; }
    private CodeMinificationResult InnerMinify(string content, bool isAngularBindingExpression);
    public sealed virtual bool get_IsInlineCodeMinificationSupported();
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode);
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode, Encoding encoding);
    public CodeMinificationResult MinifyAngularBindingExpression(string expression);
    public CodeMinificationResult MinifyAngularBindingExpression(string expression, Encoding encoding);
}
public class WebMarkupMin.Core.CrockfordJsMinifierFactory : object {
    public sealed virtual IJsMinifier CreateMinifier();
}
internal class WebMarkupMin.Core.DouglasCrockford.JsMinificationException : Exception {
    public JsMinificationException(string message);
    public JsMinificationException(string message, Exception innerException);
    private JsMinificationException(SerializationInfo info, StreamingContext context);
}
internal class WebMarkupMin.Core.DouglasCrockford.JsMinifier : object {
    private static int EOF;
    private StringReader _reader;
    private StringWriter _writer;
    private int _theA;
    private int _theB;
    private int _lookAhead;
    private int _theX;
    private int _theY;
    private object _minificationSynchronizer;
    public string Minify(string content);
    public string Minify(string content, bool isAngularBindingExpression);
    private static bool IsAlphanum(int codeunit);
    private int Get();
    private int Peek();
    private int Next();
    private void Action(int determined);
    private void StartMinification(bool isAngularBindingExpression);
    private void Put(int c);
    private static bool IsAngularOneTimeBinding(int firstCodeunit, int secondCodeunit);
}
internal class WebMarkupMin.Core.GenericHtmlMinificationSettings : AdvancedHtmlMinificationSettingsBase {
    [CompilerGeneratedAttribute]
private bool <UseXhtmlSyntax>k__BackingField;
    public bool UseXhtmlSyntax { get; public set; }
    public GenericHtmlMinificationSettings(bool useEmptyMinificationSettings);
    [CompilerGeneratedAttribute]
public bool get_UseXhtmlSyntax();
    [CompilerGeneratedAttribute]
public void set_UseXhtmlSyntax(bool value);
}
internal class WebMarkupMin.Core.GenericHtmlMinifier : object {
    private static string EMBEDDED_CODE_PLACEHOLDER;
    private static string HTTP_PROTOCOL;
    private static string HTTPS_PROTOCOL;
    private static string JS_PROTOCOL;
    private static string JS_CONTENT_TYPE;
    private static string VBS_CONTENT_TYPE;
    private static string CSS_CONTENT_TYPE;
    private static string CANONICAL_HTML5_DOCTYPE;
    private static string BEGIN_NOINDEX_COMMENT;
    private static string END_NOINDEX_COMMENT;
    private static Regex _metaContentTypeTagValueRegex;
    private static Regex _jsProtocolRegex;
    private static Regex _separatingCommaWithSpacesRegex;
    private static Regex _endingCommaWithSpacesRegex;
    private static Regex _beginHtmlCommentRegex;
    private static Regex _endHtmlCommentRegex;
    private static Regex _beginCdataSectionRegex;
    private static Regex _endCdataSectionRegex;
    private static Regex _styleBeginCdataSectionRegex;
    private static Regex _styleEndCdataSectionRegex;
    private static Regex _styleBeginMaxCompatibleCdataSectionRegex;
    private static Regex _styleEndMaxCompatibleCdataSectionRegex;
    private static Regex _scriptBeginHtmlCommentRegex;
    private static Regex _scriptEndHtmlCommentRegex;
    private static Regex _scriptBeginCdataSectionRegex;
    private static Regex _scriptEndCdataSectionRegex;
    private static Regex _scriptBeginMaxCompatibleCdataSectionRegex;
    private static Regex _scriptEndMaxCompatibleCdataSectionRegex;
    private static Regex _relExternalAttributeRegex;
    private static HashSet`1<string> _emptyAttributesForRemoval;
    private static HashSet`1<string> _tagsWithNotRemovableWhitespace;
    private static HashSet`1<string> _unremovableEmptyTags;
    private static HashSet`1<string> _unremovableEmptyTagAttributes;
    private static HashSet`1<string> _safeOptionalEndTags;
    private static HashSet`1<string> _tagsFollowingAfterParagraphOptionalEndTag;
    private static HashSet`1<string> _jsContentTypes;
    private static HashSet`1<string> _jsonContentTypes;
    private static HashSet`1<string> _builtinAngularDirectivesWithExpressions;
    private GenericHtmlMinificationSettings _settings;
    private ICssMinifier _cssMinifier;
    private IJsMinifier _jsMinifier;
    private ILogger _logger;
    private HtmlParser _htmlParser;
    private GenericHtmlMinifier _innerHtmlMinifier;
    private InterlockedStatedFlag _innerHtmlMinifierInitializedFlag;
    private XmlMinifier _innerXmlMinifier;
    private InterlockedStatedFlag _innerXmlMinifierInitializedFlag;
    private Lazy`1<CrockfordJsMinifier> _innerCrockfordJsMinifier;
    private string _fileContext;
    private Encoding _encoding;
    private string _defaultNewLine;
    private char _defaultQuoteChar;
    private HtmlMinificationOutputWriter _output;
    private Queue`1<string> _tagsWithNotRemovableWhitespaceQueue;
    private HtmlNodeType _currentNodeType;
    private HtmlTag _currentTag;
    private string _currentText;
    private bool _previousNodeRemoved;
    private List`1<MinificationErrorInfo> _errors;
    private List`1<MinificationErrorInfo> _warnings;
    private object _minificationSynchronizer;
    private HashSet`1<string> _angularDirectivesWithExpressions;
    public GenericHtmlMinifier(GenericHtmlMinificationSettings settings, ICssMinifier cssMinifier, IJsMinifier jsMinifier, ILogger logger);
    private static GenericHtmlMinifier();
    private GenericHtmlMinifier GetInnerHtmlMinifierInstance();
    private XmlMinifier GetInnerXmlMinifierInstance();
    private CrockfordJsMinifier GetInnerCrockfordJsMinifierInstance();
    public sealed virtual MarkupMinificationResult Minify(string content);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext);
    public sealed virtual MarkupMinificationResult Minify(string content, Encoding encoding);
    public sealed virtual MarkupMinificationResult Minify(string content, bool generateStatistics);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext, Encoding encoding, bool generateStatistics);
    private void XmlDeclarationHandler(MarkupParsingContext context, string xmlDeclaration);
    private void DoctypeHandler(MarkupParsingContext context, string doctype);
    private void CommentHandler(MarkupParsingContext context, string commentText);
    private void CdataSectionHandler(MarkupParsingContext context, string cdataText);
    private void IfConditionalCommentHandler(MarkupParsingContext context, string expression, HtmlConditionalCommentType type);
    private void EndIfConditionalCommentHandler(MarkupParsingContext context, HtmlConditionalCommentType type);
    private void StartTagHandler(MarkupParsingContext context, HtmlTag tag);
    private void EndTagHandler(MarkupParsingContext context, HtmlTag tag);
    private void TextHandler(MarkupParsingContext context, string text);
    private void EmbeddedCodeHandler(MarkupParsingContext context, string code);
    private void TemplateTagHandler(MarkupParsingContext context, string expression, string startDelimiter, string endDelimiter);
    private void IgnoredFragmentHandler(MarkupParsingContext context, string fragment);
    private HtmlAttributeViewModel BuildAttributeViewModel(MarkupParsingContext context, HtmlTag tag, HtmlAttribute attribute);
    private HtmlAttributeViewModel InnerBuildAttributeViewModel(HtmlAttribute attribute, bool omitValue, bool addQuotes);
    private static bool ContainsRelExternalAttribute(List`1<HtmlAttribute> attributes);
    private static bool CanRemoveAttributeQuotes(HtmlAttribute attribute, HtmlAttributeQuotesRemovalMode attributeQuotesRemovalMode);
    private static bool IsAttributeRedundant(HtmlTag tag, HtmlAttribute attribute);
    private static bool IsJsTypeAttribute(HtmlTag tag, HtmlAttribute attribute);
    private static bool IsCssTypeAttribute(HtmlTag tag, HtmlAttribute attribute);
    private static bool IsCustomAttribute(HtmlAttribute attribute);
    private string CleanAttributeValue(MarkupParsingContext context, HtmlTag tag, HtmlAttribute attribute);
    private bool CanPreserveCase();
    private bool CanRemoveAttribute(HtmlTag tag, HtmlAttribute attribute);
    private static bool CanRemoveEmptyAttribute(HtmlTag tag, HtmlAttribute attribute);
    private static bool CanRemoveXmlNamespaceAttribute(HtmlTag tag, HtmlAttribute attribute);
    private static bool IsMetaContentTypeTag(HtmlTag tag);
    private HtmlTag UpgradeToMetaCharsetTag(HtmlTag tag);
    private static bool CanRemoveWhitespaceBetweenNonIndependentTags(HtmlTag firstTag, HtmlTag secondTag);
    private static bool CanRemoveWhitespaceAfterEndNonIndependentTag(HtmlTag endTag);
    private static bool CanRemoveWhitespaceAfterEndNonIndependentTagByParentTag(HtmlTag endTag, HtmlTag parentTag);
    private bool CanRemoveSafeOptionalEndTag(HtmlTag optionalEndTag);
    private bool CanRemoveOptionalEndTagByNextTag(HtmlTag optionalEndTag, HtmlTag nextTag);
    private bool CanRemoveOptionalEndTagByParentTag(HtmlTag optionalEndTag, HtmlTag parentTag);
    private static bool CanRemoveTagWithoutContent(HtmlTag tag);
    private static bool CanMinifyWhitespace(HtmlTag tag);
    private void ProcessEmbeddedScriptContent(MarkupParsingContext context, string content, string contentType);
    private static bool IsJsContentType(string contentType);
    private void ProcessEmbeddedStyleContent(MarkupParsingContext context, string content, string contentType);
    private string ProcessInlineScriptContent(MarkupParsingContext context, HtmlAttribute attribute);
    private string ProcessInlineStyleContent(MarkupParsingContext context, HtmlAttribute attribute);
    private string MinifyKnockoutBindingExpression(MarkupParsingContext context, HtmlAttribute attribute);
    private string MinifyKnockoutBindingExpression(MarkupParsingContext context, SourceCodeNodeCoordinates expressionCoordinates, string expression);
    private string MinifyKnockoutBindingExpression(MarkupParsingContext context, SourceCodeNodeCoordinates attributeCoordinates, SourceCodeNodeCoordinates expressionCoordinates, string expression);
    private bool ContainsAngularBindingExpression(string normalizedDirectiveName);
    private bool CanMinifyAngularBindingExpressionInAttribute(HtmlTag tag, HtmlAttribute attribute);
    private string MinifyAngularBindingExpression(MarkupParsingContext context, string expression);
    private string MinifyAngularBindingExpression(MarkupParsingContext context, SourceCodeNodeCoordinates attributeCoordinates, string expression);
    private string MinifyAngularBindingExpression(MarkupParsingContext context, SourceCodeNodeCoordinates attributeCoordinates, SourceCodeNodeCoordinates expressionCoordinates, string expression);
    private static SourceCodeNodeCoordinates CalculateAbsoluteInlineCodeErrorCoordinates(SourceCodeNodeCoordinates tagCoordinates, SourceCodeNodeCoordinates attributeCoordinates, SourceCodeNodeCoordinates relativeErrorCoordinates);
    private void WriteError(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
    private void WriteWarning(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
}
internal static class WebMarkupMin.Core.Helpers.AngularHelpers : object {
    private static string NG_DIRECTIVE_NAME_PATTERN;
    private static string NG_COMMENT_DIRECTIVE_PREFIX;
    private static Regex _prefixRegex;
    private static Regex _ngClassDirectiveRegex;
    private static Regex _ngCommentDirectiveRegex;
    private static Regex _specialCharsRegex;
    private static AngularHelpers();
    public static string NormalizeDirectiveName(string directiveName);
    private static string ToCamelCase(string value);
    public static bool IsClassDirective(string className);
    public static void ParseClassDirective(string className, ClassDirectiveDelegate classDirectiveHandler, OtherContentDelegate otherContentHandler);
    public static bool IsCommentDirective(string commentText);
    public static void ParseCommentDirective(string commentText, CommentDirectiveDelegate commentDirectiveHandler);
}
internal static class WebMarkupMin.Core.Helpers.BlazorHelpers : object {
    private static string MARKER_PREFIX_COMMON_PART;
    private static string COMPONENT_MARKER_PREFIX;
    private static string SERVER_STATE_MARKER_PREFIX;
    private static string WEBASSEMBLY_STATE_MARKER_PREFIX;
    private static string WEB_INITIALIZER_MARKER_PREFIX;
    private static string STREAMING_BOUNDARY_MARKER_PREFIX_COMMON_PART;
    private static string START_STREAMING_BOUNDARY_MARKER_PREFIX;
    private static string END_STREAMING_BOUNDARY_MARKER_PREFIX;
    private static String[] _ordinaryMarkerPrefixes;
    private static Regex _componentDataRegex;
    private static Regex _base64EncodedDataRegex;
    private static Regex _guidRegex;
    private static BlazorHelpers();
    public static bool IsMarker(string commentText);
    private static bool IsOrdinaryMarker(string commentText);
    private static bool IsStartStreamingBoundaryMarker(string commentText);
    private static bool IsEndStreamingBoundaryMarker(string commentText);
    private static bool IsStreamingFramingMarker(string commentText);
}
internal static class WebMarkupMin.Core.Helpers.HtmlAttributeValueHelpers : object {
    private static Char[] _encodingCharsWithDoubleQuote;
    private static Char[] _encodingCharsWithSingleQuote;
    private static HtmlAttributeValueHelpers();
    public static bool IsNotRequireQuotesInHtml4(string value);
    public static bool IsNotRequireQuotesInHtml5(string value);
    public static char GetAttributeQuoteCharByStyleEnum(HtmlAttributeQuotesStyle quoteStyle, string attributeValue, char originalQuoteChar, char defaultQuoteChar);
    private static char GetDefaultAttributeQuoteChar(char originalQuoteChar, char defaultQuoteChar);
    public static string ConvertAttributeQuoteCharToString(char quoteChar);
    public static string Decode(string value);
    public static string Encode(string value, char quoteChar);
    private static bool ContainsEncodingChars(string value, char quoteChar);
}
internal static class WebMarkupMin.Core.Helpers.JsonHelpers : object {
    private static Regex _valueInCurlyBracesRegex;
    private static JsonHelpers();
    public static string WrapStringInCurlyBraces(string value);
    public static string UnwrapStringInCurlyBraces(string value);
}
internal static class WebMarkupMin.Core.Helpers.KnockoutHelpers : object {
    private static string KO_CONTAINERLESS_COMMENT_PREFIX;
    private static Regex _koStartContainerlessCommentRegex;
    private static Regex _koEndContainerlessCommentRegex;
    private static KnockoutHelpers();
    public static bool IsStartContainerlessComment(string commentText);
    public static void ParseStartContainerlessComment(string commentText, ExpressionDelegate expressionHandler);
    public static bool IsEndContainerlessComment(string commentText);
}
internal static class WebMarkupMin.Core.Helpers.ReactHelpers : object {
    private static string REACT_DOM_COMPONENT_PREFIX;
    private static Regex _reactStartDomComponentCommentRegex;
    private static Regex _reactEndDomComponentCommentRegex;
    private static ReactHelpers();
    private static bool IsStartDomComponentComment(string commentText);
    private static bool IsEndDomComponentComment(string commentText);
    public static bool IsDomComponentComment(string commentText);
}
internal static class WebMarkupMin.Core.Helpers.TemplateTagHelpers : object {
    private static string CURLY_BRACKET_TAG_PATTERN;
    private static string SQUARE_BRACKET_TAG_PATTERN;
    private static string ES6_STRING_INTERPOLATION_PATTERN;
    private static Char[] _templateTagFirstChars;
    private static Regex _templateTagRegex;
    private static TemplateTagHelpers();
    public static bool ContainsTag(string content);
    public static void ParseMarkup(string content, TemplateTagDelegate templateTagHandler, TextDelegate textHandler);
}
internal static class WebMarkupMin.Core.Helpers.XmlAttributeValueHelpers : object {
    private static Char[] _encodingChars;
    private static XmlAttributeValueHelpers();
    public static string Decode(string value);
    public static string Encode(string value);
    private static bool ContainsXmlAttributeEncodingChars(string value);
}
public class WebMarkupMin.Core.HtmlAttributeExpression : object {
    private static Regex _htmlAttributeExpressionRegex;
    private string _tagName;
    private string _tagNameInLowercase;
    private string _attributeName;
    private string _attributeNameInLowercase;
    private string _attributeValue;
    private bool _caseInsensitive;
    public string TagName { get; }
    public string TagNameInLowercase { get; }
    public string AttributeName { get; }
    public string AttributeNameInLowercase { get; }
    public string AttributeValue { get; }
    public bool CaseInsensitive { get; }
    public HtmlAttributeExpression(string attributeName);
    public HtmlAttributeExpression(string tagName, string attributeName, string attributeValue, bool caseInsensitive);
    private static HtmlAttributeExpression();
    public string get_TagName();
    public string get_TagNameInLowercase();
    public string get_AttributeName();
    public string get_AttributeNameInLowercase();
    public string get_AttributeValue();
    public bool get_CaseInsensitive();
    public static HtmlAttributeExpression Parse(string attributeExpressionString);
    public static bool TryParse(string attributeExpressionString, HtmlAttributeExpression& result);
    private static HtmlAttributeExpression InternalParse(string attributeExpressionString);
    public bool IsMatch(string tagNameInLowercase, string attributeNameInLowercase, string attributeValue);
    private static string GetQuoteForAttributeValue(string attributeValue);
    private static bool InternalEquals(HtmlAttributeExpression expression1, HtmlAttributeExpression expression2);
    public sealed virtual bool Equals(HtmlAttributeExpression expression);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(HtmlAttributeExpression expression1, HtmlAttributeExpression expression2);
    public static bool op_Inequality(HtmlAttributeExpression expression1, HtmlAttributeExpression expression2);
}
public enum WebMarkupMin.Core.HtmlAttributeQuotesRemovalMode : Enum {
    public byte value__;
    public static HtmlAttributeQuotesRemovalMode KeepQuotes;
    public static HtmlAttributeQuotesRemovalMode Html4;
    public static HtmlAttributeQuotesRemovalMode Html5;
}
public enum WebMarkupMin.Core.HtmlAttributeQuotesStyle : Enum {
    public byte value__;
    public static HtmlAttributeQuotesStyle Auto;
    public static HtmlAttributeQuotesStyle Optimal;
    public static HtmlAttributeQuotesStyle Single;
    public static HtmlAttributeQuotesStyle Double;
}
public enum WebMarkupMin.Core.HtmlEmptyTagRenderMode : Enum {
    public byte value__;
    public static HtmlEmptyTagRenderMode NoSlash;
    public static HtmlEmptyTagRenderMode Slash;
    public static HtmlEmptyTagRenderMode SpaceAndSlash;
}
internal class WebMarkupMin.Core.HtmlMinificationOutputWriter : MarkupMinificationOutputWriterBase {
    public HtmlMinificationOutputWriter(int initialBufferCapacity);
    public HtmlMinificationOutputWriter(int initialBufferCapacity, NewLineStyle newLineStyle);
    private void RemoveItemRange(int index, int count);
    public void TrimEndLastItem(bool preserveNewLines);
    private static void InternalTrimEndLastItem(String[] items, Int32& size);
    private static void InternalTrimEndLastItemWithNewLinesPreserved(StringBuilder sb, String[] items, Int32& size);
    public void CollapseLastWhitespaceItem(bool preserveNewLines);
    private static void InternalCollapseLastWhitespaceItem(String[] items, Int32& size);
    private static void InternalCollapseLastWhitespaceItemWithNewLinesPreserved(String[] items, Int32& size);
    public bool RemoveLastStartTag(string tagName);
    public bool RemoveLastEndTag(string tagName);
}
public class WebMarkupMin.Core.HtmlMinificationSettings : AdvancedHtmlMinificationSettingsBase {
    public HtmlMinificationSettings(bool useEmptyMinificationSettings);
}
public class WebMarkupMin.Core.HtmlMinifier : object {
    private GenericHtmlMinifier _genericHtmlMinifier;
    public HtmlMinifier(HtmlMinificationSettings settings, ICssMinifier cssMinifier, IJsMinifier jsMinifier, ILogger logger);
    public sealed virtual MarkupMinificationResult Minify(string content);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext);
    public sealed virtual MarkupMinificationResult Minify(string content, Encoding encoding);
    public sealed virtual MarkupMinificationResult Minify(string content, bool generateStatistics);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext, Encoding encoding, bool generateStatistics);
}
public interface WebMarkupMin.Core.ICodeMinifier {
    public bool IsInlineCodeMinificationSupported { get; }
    public abstract virtual bool get_IsInlineCodeMinificationSupported();
    public abstract virtual CodeMinificationResult Minify(string content, bool isInlineCode);
    public abstract virtual CodeMinificationResult Minify(string content, bool isInlineCode, Encoding encoding);
}
public interface WebMarkupMin.Core.ICssMinifier {
}
public interface WebMarkupMin.Core.ICssMinifierFactory {
    public abstract virtual ICssMinifier CreateMinifier();
}
public interface WebMarkupMin.Core.IJsMinifier {
}
public interface WebMarkupMin.Core.IJsMinifierFactory {
    public abstract virtual IJsMinifier CreateMinifier();
}
public interface WebMarkupMin.Core.IMarkupMinifier {
    public abstract virtual MarkupMinificationResult Minify(string content);
    public abstract virtual MarkupMinificationResult Minify(string content, string fileContext);
    public abstract virtual MarkupMinificationResult Minify(string content, bool generateStatistics);
    public abstract virtual MarkupMinificationResult Minify(string content, Encoding encoding);
    public abstract virtual MarkupMinificationResult Minify(string content, string fileContext, Encoding encoding, bool generateStatistics);
}
public class WebMarkupMin.Core.KristensenCssMinifier : object {
    private static Char[] _space;
    private static Char[] _semicolon;
    private static Regex _commentRegex;
    private static Regex _separatingChars;
    private static Regex _redundantSelectorRegex;
    private static Regex _zeroValue;
    public bool IsInlineCodeMinificationSupported { get; }
    private static KristensenCssMinifier();
    public sealed virtual bool get_IsInlineCodeMinificationSupported();
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode);
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode, Encoding encoding);
}
public class WebMarkupMin.Core.KristensenCssMinifierFactory : object {
    public sealed virtual ICssMinifier CreateMinifier();
}
public interface WebMarkupMin.Core.Loggers.ILogger {
    public abstract virtual void Error(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
    public abstract virtual void Warn(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
    public abstract virtual void Debug(string category, string message, string filePath);
    public abstract virtual void Info(string category, string message, string filePath, MinificationStatistics statistics);
}
public static class WebMarkupMin.Core.Loggers.LogCategoryConstants : object {
    public static string HtmlParsingError;
    public static string HtmlMinificationError;
    public static string HtmlMinificationWarning;
    public static string HtmlMinificationSuccess;
    public static string XmlParsingError;
    public static string XmlMinificationError;
    public static string XmlMinificationSuccess;
    public static string CssMinificationError;
    public static string CssMinificationWarning;
    public static string JsMinificationError;
    public static string JsMinificationWarning;
    public static string JsTemplateMinificationError;
    public static string JsTemplateMinificationWarning;
    private static LogCategoryConstants();
}
public abstract class WebMarkupMin.Core.Loggers.LoggerBase : object {
    public virtual void Error(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
    public virtual void Warn(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
    public virtual void Debug(string category, string message, string filePath);
    public virtual void Info(string category, string message, string filePath, MinificationStatistics statistics);
}
public class WebMarkupMin.Core.Loggers.NullLogger : object {
    public sealed virtual void Error(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
    public sealed virtual void Warn(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
    public sealed virtual void Debug(string category, string message, string filePath);
    public sealed virtual void Info(string category, string message, string filePath, MinificationStatistics statistics);
}
public class WebMarkupMin.Core.Loggers.ThrowExceptionLogger : LoggerBase {
    public virtual void Error(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
}
public class WebMarkupMin.Core.MarkupMinificationException : Exception {
    public MarkupMinificationException(string message);
    public MarkupMinificationException(string message, Exception innerException);
    private MarkupMinificationException(SerializationInfo info, StreamingContext context);
}
internal abstract class WebMarkupMin.Core.MarkupMinificationOutputWriterBase : object {
    protected static int DefaultBufferCapacity;
    protected StringBuilder _sb;
    protected String[] _items;
    protected int _size;
    private string _newLine;
    private Action`1<string> _appendItem;
    public StringBuilder StringBuilder { get; public set; }
    protected MarkupMinificationOutputWriterBase(int initialBufferCapacity);
    protected MarkupMinificationOutputWriterBase(int initialBufferCapacity, NewLineStyle newLineStyle);
    public StringBuilder get_StringBuilder();
    public void set_StringBuilder(StringBuilder value);
    private static string GetNewLineByStyleEnum(NewLineStyle newLineStyle);
    private void EnsureCapacity(int minCapacity);
    public void Write(string value);
    public void Flush();
    private void AppendItem(string item);
    private void AppendItemWithNewLineNormalization(string item);
    public void TrimEnd();
    public void Clear();
    public virtual string ToString();
}
public class WebMarkupMin.Core.MarkupMinificationResult : MinificationResultBase {
    [CompilerGeneratedAttribute]
private MinificationStatistics <Statistics>k__BackingField;
    public MinificationStatistics Statistics { get; private set; }
    public MarkupMinificationResult(string minifiedContent);
    public MarkupMinificationResult(string minifiedContent, IList`1<MinificationErrorInfo> errors);
    public MarkupMinificationResult(string minifiedContent, MinificationStatistics statistics);
    public MarkupMinificationResult(string minifiedContent, IList`1<MinificationErrorInfo> errors, MinificationStatistics statistics);
    public MarkupMinificationResult(string minifiedContent, IList`1<MinificationErrorInfo> errors, IList`1<MinificationErrorInfo> warnings);
    public MarkupMinificationResult(string minifiedContent, IList`1<MinificationErrorInfo> errors, IList`1<MinificationErrorInfo> warnings, MinificationStatistics statistics);
    [CompilerGeneratedAttribute]
public MinificationStatistics get_Statistics();
    [CompilerGeneratedAttribute]
private void set_Statistics(MinificationStatistics value);
}
public abstract class WebMarkupMin.Core.MarkupMinificationSettingsBase : object {
    [CompilerGeneratedAttribute]
private bool <PreserveNewLines>k__BackingField;
    [CompilerGeneratedAttribute]
private NewLineStyle <NewLineStyle>k__BackingField;
    public bool PreserveNewLines { get; public set; }
    public NewLineStyle NewLineStyle { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_PreserveNewLines();
    [CompilerGeneratedAttribute]
public void set_PreserveNewLines(bool value);
    [CompilerGeneratedAttribute]
public NewLineStyle get_NewLineStyle();
    [CompilerGeneratedAttribute]
public void set_NewLineStyle(NewLineStyle value);
}
public class WebMarkupMin.Core.MinificationErrorInfo : object {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFragment>k__BackingField;
    public string Category { get; private set; }
    public string Message { get; private set; }
    public int LineNumber { get; private set; }
    public int ColumnNumber { get; private set; }
    public string SourceFragment { get; private set; }
    public MinificationErrorInfo(string message);
    public MinificationErrorInfo(string category, string message);
    public MinificationErrorInfo(string message, int lineNumber, int columnNumber, string sourceFragment);
    public MinificationErrorInfo(string category, string message, int lineNumber, int columnNumber, string sourceFragment);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private void set_Category(string value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnNumber();
    [CompilerGeneratedAttribute]
private void set_ColumnNumber(int value);
    [CompilerGeneratedAttribute]
public string get_SourceFragment();
    [CompilerGeneratedAttribute]
private void set_SourceFragment(string value);
}
public abstract class WebMarkupMin.Core.MinificationResultBase : object {
    [CompilerGeneratedAttribute]
private string <MinifiedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MinificationErrorInfo> <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<MinificationErrorInfo> <Warnings>k__BackingField;
    public string MinifiedContent { get; private set; }
    public IList`1<MinificationErrorInfo> Errors { get; private set; }
    public IList`1<MinificationErrorInfo> Warnings { get; private set; }
    protected MinificationResultBase(string minifiedContent);
    protected MinificationResultBase(string minifiedContent, IList`1<MinificationErrorInfo> errors);
    protected MinificationResultBase(string minifiedContent, IList`1<MinificationErrorInfo> errors, IList`1<MinificationErrorInfo> warnings);
    [CompilerGeneratedAttribute]
public string get_MinifiedContent();
    [CompilerGeneratedAttribute]
private void set_MinifiedContent(string value);
    [CompilerGeneratedAttribute]
public IList`1<MinificationErrorInfo> get_Errors();
    [CompilerGeneratedAttribute]
private void set_Errors(IList`1<MinificationErrorInfo> value);
    [CompilerGeneratedAttribute]
public IList`1<MinificationErrorInfo> get_Warnings();
    [CompilerGeneratedAttribute]
private void set_Warnings(IList`1<MinificationErrorInfo> value);
}
public class WebMarkupMin.Core.MinificationStatistics : object {
    private Encoding _encoding;
    private DateTime _startTime;
    private DateTime _endTime;
    [CompilerGeneratedAttribute]
private long <OriginalSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <OriginalGzipSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinifiedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <MinifiedGzipSize>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <CompressionRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <CompressionGzipRatio>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SavedInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SavedGzipInBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <SavedInPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private decimal <SavedGzipInPercent>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MinificationDuration>k__BackingField;
    public long OriginalSize { get; private set; }
    public long OriginalGzipSize { get; private set; }
    public long MinifiedSize { get; private set; }
    public long MinifiedGzipSize { get; private set; }
    public decimal CompressionRatio { get; private set; }
    public decimal CompressionGzipRatio { get; private set; }
    public long SavedInBytes { get; private set; }
    public long SavedGzipInBytes { get; private set; }
    public decimal SavedInPercent { get; private set; }
    public decimal SavedGzipInPercent { get; private set; }
    public int MinificationDuration { get; private set; }
    public MinificationStatistics(Encoding encoding);
    [CompilerGeneratedAttribute]
public long get_OriginalSize();
    [CompilerGeneratedAttribute]
private void set_OriginalSize(long value);
    [CompilerGeneratedAttribute]
public long get_OriginalGzipSize();
    [CompilerGeneratedAttribute]
private void set_OriginalGzipSize(long value);
    [CompilerGeneratedAttribute]
public long get_MinifiedSize();
    [CompilerGeneratedAttribute]
private void set_MinifiedSize(long value);
    [CompilerGeneratedAttribute]
public long get_MinifiedGzipSize();
    [CompilerGeneratedAttribute]
private void set_MinifiedGzipSize(long value);
    [CompilerGeneratedAttribute]
public decimal get_CompressionRatio();
    [CompilerGeneratedAttribute]
private void set_CompressionRatio(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_CompressionGzipRatio();
    [CompilerGeneratedAttribute]
private void set_CompressionGzipRatio(decimal value);
    [CompilerGeneratedAttribute]
public long get_SavedInBytes();
    [CompilerGeneratedAttribute]
private void set_SavedInBytes(long value);
    [CompilerGeneratedAttribute]
public long get_SavedGzipInBytes();
    [CompilerGeneratedAttribute]
private void set_SavedGzipInBytes(long value);
    [CompilerGeneratedAttribute]
public decimal get_SavedInPercent();
    [CompilerGeneratedAttribute]
private void set_SavedInPercent(decimal value);
    [CompilerGeneratedAttribute]
public decimal get_SavedGzipInPercent();
    [CompilerGeneratedAttribute]
private void set_SavedGzipInPercent(decimal value);
    [CompilerGeneratedAttribute]
public int get_MinificationDuration();
    [CompilerGeneratedAttribute]
private void set_MinificationDuration(int value);
    internal void Init(string originalContent);
    internal void End(string minifiedContent);
    private static decimal CalculateCompressionRatio(long originalSize, long minifiedSize);
    private static long CalculateGzipSize(Byte[] buffer, int offset, int count);
}
public enum WebMarkupMin.Core.NewLineStyle : Enum {
    public byte value__;
    public static NewLineStyle Auto;
    public static NewLineStyle Native;
    public static NewLineStyle Windows;
    public static NewLineStyle Mac;
    public static NewLineStyle Unix;
}
public class WebMarkupMin.Core.NullCssMinifier : object {
    public bool IsInlineCodeMinificationSupported { get; }
    public sealed virtual bool get_IsInlineCodeMinificationSupported();
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode);
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode, Encoding encoding);
}
public class WebMarkupMin.Core.NullCssMinifierFactory : object {
    public sealed virtual ICssMinifier CreateMinifier();
}
public class WebMarkupMin.Core.NullJsMinifier : object {
    public bool IsInlineCodeMinificationSupported { get; }
    public sealed virtual bool get_IsInlineCodeMinificationSupported();
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode);
    public sealed virtual CodeMinificationResult Minify(string content, bool isInlineCode, Encoding encoding);
}
public class WebMarkupMin.Core.NullJsMinifierFactory : object {
    public sealed virtual IJsMinifier CreateMinifier();
}
internal static class WebMarkupMin.Core.Parsers.CommonRegExps : object {
    public static string HtmlTagNamePattern;
    public static string HtmlAttributeNamePattern;
}
internal class WebMarkupMin.Core.Parsers.HtmlAttribute : object {
    private string _value;
    private bool _hasValue;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameInLowercase>k__BackingField;
    [CompilerGeneratedAttribute]
private char <QuoteChar>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlAttributeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceCodeNodeCoordinates <NameCoordinates>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceCodeNodeCoordinates <ValueCoordinates>k__BackingField;
    public string Name { get; private set; }
    public string NameInLowercase { get; private set; }
    public string Value { get; public set; }
    public bool HasValue { get; }
    public char QuoteChar { get; private set; }
    public HtmlAttributeType Type { get; public set; }
    public SourceCodeNodeCoordinates NameCoordinates { get; private set; }
    public SourceCodeNodeCoordinates ValueCoordinates { get; private set; }
    public HtmlAttribute(string name, string nameInLowercase, string value, char quoteChar, HtmlAttributeType type);
    public HtmlAttribute(string name, string nameInLowercase, string value, char quoteChar, HtmlAttributeType type, SourceCodeNodeCoordinates nameCoordinates, SourceCodeNodeCoordinates valueCoordinates);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NameInLowercase();
    [CompilerGeneratedAttribute]
private void set_NameInLowercase(string value);
    public string get_Value();
    public void set_Value(string value);
    public bool get_HasValue();
    [CompilerGeneratedAttribute]
public char get_QuoteChar();
    [CompilerGeneratedAttribute]
private void set_QuoteChar(char value);
    [CompilerGeneratedAttribute]
public HtmlAttributeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(HtmlAttributeType value);
    [CompilerGeneratedAttribute]
public SourceCodeNodeCoordinates get_NameCoordinates();
    [CompilerGeneratedAttribute]
private void set_NameCoordinates(SourceCodeNodeCoordinates value);
    [CompilerGeneratedAttribute]
public SourceCodeNodeCoordinates get_ValueCoordinates();
    [CompilerGeneratedAttribute]
private void set_ValueCoordinates(SourceCodeNodeCoordinates value);
}
internal enum WebMarkupMin.Core.Parsers.HtmlAttributeType : Enum {
    public byte value__;
    public static HtmlAttributeType Unknown;
    public static HtmlAttributeType Boolean;
    public static HtmlAttributeType Numeric;
    public static HtmlAttributeType Uri;
    public static HtmlAttributeType Event;
    public static HtmlAttributeType ClassName;
    public static HtmlAttributeType Style;
    public static HtmlAttributeType Text;
    public static HtmlAttributeType Xml;
}
internal class WebMarkupMin.Core.Parsers.HtmlAttributeTypeDeterminer : object {
    private static Lazy`1<HtmlAttributeTypeDeterminer> _lazyInstance;
    private HashSet`1<string> _booleanAttributes;
    private HashSet`1<string> _eventAttributes;
    private HashSet`1<string> _tagsWithHrefAttribute;
    private HashSet`1<string> _tagsWithSrcAttribute;
    private HashSet`1<string> _tagsWithCiteAttribute;
    private HashSet`1<string> _tagsWithLongdescAttribute;
    private HashSet`1<string> _uriBasedParams;
    private HashSet`1<string> _tagsWithWidthAttribute;
    private HashSet`1<string> _tagsWithHeightAttribute;
    private HashSet`1<string> _tagsWithBorderAttribute;
    private HashSet`1<string> _tagsWithSizeAttribute;
    private HashSet`1<string> _tagsWithMaxAttribute;
    private HashSet`1<string> _tagsWithMinAttribute;
    private HashSet`1<string> _tagsWithValueAttribute;
    private HashSet`1<string> _tagsWithCharoffAttribute;
    public static HtmlAttributeTypeDeterminer Instance { get; }
    private static HtmlAttributeTypeDeterminer();
    public static HtmlAttributeTypeDeterminer get_Instance();
    public HtmlAttributeType GetAttributeType(string tagNameInLowercase, HtmlTagFlags tagFlags, string attributeNameInLowercase, List`1<HtmlAttribute> attributes);
    private bool IsBooleanAttribute(string attributeNameInLowercase);
    private bool IsNumericAttribute(string tagNameInLowercase, string attributeNameInLowercase);
    private bool IsUriBasedAttribute(string tagNameInLowercase, string attributeNameInLowercase, List`1<HtmlAttribute> attributes);
    private bool IsEventAttribute(string attributeNameInLowercase);
    private bool IsXmlBasedAttribute(string attributeNameInLowercase);
    [CompilerGeneratedAttribute]
private bool <IsUriBasedAttribute>b__22_0(HtmlAttribute a);
}
internal enum WebMarkupMin.Core.Parsers.HtmlConditionalCommentType : Enum {
    public byte value__;
    public static HtmlConditionalCommentType Hidden;
    public static HtmlConditionalCommentType Revealed;
    public static HtmlConditionalCommentType RevealedValidating;
    public static HtmlConditionalCommentType RevealedValidatingSimplified;
}
internal enum WebMarkupMin.Core.Parsers.HtmlNodeType : Enum {
    public byte value__;
    public static HtmlNodeType Unknown;
    public static HtmlNodeType XmlDeclaration;
    public static HtmlNodeType Doctype;
    public static HtmlNodeType Comment;
    public static HtmlNodeType IfConditionalComment;
    public static HtmlNodeType EndIfConditionalComment;
    public static HtmlNodeType CdataSection;
    public static HtmlNodeType StartTag;
    public static HtmlNodeType EndTag;
    public static HtmlNodeType Text;
    public static HtmlNodeType EmbeddedCode;
    public static HtmlNodeType TemplateTag;
    public static HtmlNodeType IgnoredFragment;
}
internal class WebMarkupMin.Core.Parsers.HtmlParser : MarkupParserBase {
    private static Regex _xmlDeclarationRegex;
    private static Regex _doctypeRegex;
    private static Regex _startTagBeginPartRegex;
    private static Regex _startTagEndPartRegex;
    private static Regex _endTagRegex;
    private static Regex _attributeRegex;
    private static Regex _hiddenIfCommentRegex;
    private static Regex _hiddenEndIfCommentRegex;
    private static Regex _revealedIfCommentRegex;
    private static Regex _revealedEndIfCommentRegex;
    private static Regex _revealedValidatingIfCommentRegex;
    private static Regex _revealedValidatingEndIfCommentRegex;
    private static ConcurrentDictionary`2<string, Regex> _endTagWithEmbeddedCodeRegexCache;
    private HtmlParsingHandlers _handlers;
    private HtmlTagTypeDeterminer _tagTypeDeterminer;
    private Stack`1<HtmlTag> _tagStack;
    private HtmlAttributeTypeDeterminer _attributeTypeDeterminer;
    private List`1<HtmlAttribute> _tempAttributes;
    private Stack`1<HtmlConditionalCommentType> _conditionalCommentTypeStack;
    private bool _nonValidatingConditionalCommentOpened;
    private bool _xmlTagOpened;
    protected MarkupParsingHandlersBase CommonHandlers { get; }
    public HtmlParser(HtmlParsingHandlers handlers);
    private static HtmlParser();
    protected virtual MarkupParsingHandlersBase get_CommonHandlers();
    public void Parse(string content);
    private bool ProcessXmlDeclaration();
    protected virtual bool ProcessDoctype();
    private bool ProcessHiddenIfComment();
    private bool ProcessHiddenEndIfComment();
    private bool ProcessRevealedIfComment();
    private bool ProcessRevealedEndIfComment();
    private bool ProcessRevealedValidatingIfComment();
    private bool ProcessRevealedValidatingEndIfComment();
    private bool ProcessStartTag();
    private bool ProcessStartTagEndPart(Boolean& isEmptyTag);
    private bool ProcessEndTag();
    private void ProcessEmbeddedCode();
    private void ProcessText();
    private List`1<HtmlAttribute> ProcessAttributes();
    private void ParseIfConditionalComment(string expression, HtmlConditionalCommentType type);
    private void ParseEndIfConditionalComment(HtmlConditionalCommentType type);
    private void ParseStartTag(string tagName, string tagNameInLowercase, List`1<HtmlAttribute> attributes, bool isEmptyTag);
    private void ParseEndTag(string tagName, string tagNameInLowercase);
    private void ParseRemainingEndTags();
    private void InternalParseEndTag(HtmlTag tag);
    private HtmlTagFlags GetTagFlagsByName(string tagNameInLowercase);
    private static bool IsSupportEmbeddedMarkup(HtmlTag tag);
    [CompilerGeneratedAttribute]
private void <ProcessText>b__37_0(MarkupParsingContext localContext, string expression, string startDelimiter, string endDelimiter);
    [CompilerGeneratedAttribute]
private void <ProcessText>b__37_1(MarkupParsingContext localContext, string textValue);
}
internal class WebMarkupMin.Core.Parsers.HtmlParsingHandlers : MarkupParsingHandlersBase {
    [CompilerGeneratedAttribute]
private XmlDeclarationDelegate <XmlDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private IfConditionalCommentDelegate <IfConditionalComment>k__BackingField;
    [CompilerGeneratedAttribute]
private EndIfConditionalCommentDelegate <EndIfConditionalComment>k__BackingField;
    [CompilerGeneratedAttribute]
private StartTagDelegate <StartTag>k__BackingField;
    [CompilerGeneratedAttribute]
private EndTagDelegate <EndTag>k__BackingField;
    [CompilerGeneratedAttribute]
private EmbeddedCodeDelegate <EmbeddedCode>k__BackingField;
    [CompilerGeneratedAttribute]
private TemplateTagDelegate <TemplateTag>k__BackingField;
    public XmlDeclarationDelegate XmlDeclaration { get; public set; }
    public IfConditionalCommentDelegate IfConditionalComment { get; public set; }
    public EndIfConditionalCommentDelegate EndIfConditionalComment { get; public set; }
    public StartTagDelegate StartTag { get; public set; }
    public EndTagDelegate EndTag { get; public set; }
    public EmbeddedCodeDelegate EmbeddedCode { get; public set; }
    public TemplateTagDelegate TemplateTag { get; public set; }
    [CompilerGeneratedAttribute]
public XmlDeclarationDelegate get_XmlDeclaration();
    [CompilerGeneratedAttribute]
public void set_XmlDeclaration(XmlDeclarationDelegate value);
    [CompilerGeneratedAttribute]
public IfConditionalCommentDelegate get_IfConditionalComment();
    [CompilerGeneratedAttribute]
public void set_IfConditionalComment(IfConditionalCommentDelegate value);
    [CompilerGeneratedAttribute]
public EndIfConditionalCommentDelegate get_EndIfConditionalComment();
    [CompilerGeneratedAttribute]
public void set_EndIfConditionalComment(EndIfConditionalCommentDelegate value);
    [CompilerGeneratedAttribute]
public StartTagDelegate get_StartTag();
    [CompilerGeneratedAttribute]
public void set_StartTag(StartTagDelegate value);
    [CompilerGeneratedAttribute]
public EndTagDelegate get_EndTag();
    [CompilerGeneratedAttribute]
public void set_EndTag(EndTagDelegate value);
    [CompilerGeneratedAttribute]
public EmbeddedCodeDelegate get_EmbeddedCode();
    [CompilerGeneratedAttribute]
public void set_EmbeddedCode(EmbeddedCodeDelegate value);
    [CompilerGeneratedAttribute]
public TemplateTagDelegate get_TemplateTag();
    [CompilerGeneratedAttribute]
public void set_TemplateTag(TemplateTagDelegate value);
}
internal class WebMarkupMin.Core.Parsers.HtmlTag : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NameInLowercase>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HtmlAttribute> <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private HtmlTagFlags <Flags>k__BackingField;
    public static HtmlTag Empty;
    public string Name { get; private set; }
    public string NameInLowercase { get; private set; }
    public List`1<HtmlAttribute> Attributes { get; private set; }
    public HtmlTagFlags Flags { get; private set; }
    public HtmlTag(string name, string nameInLowercase, HtmlTagFlags flags);
    public HtmlTag(string name, string nameInLowercase, List`1<HtmlAttribute> attributes, HtmlTagFlags flags);
    private static HtmlTag();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_NameInLowercase();
    [CompilerGeneratedAttribute]
private void set_NameInLowercase(string value);
    [CompilerGeneratedAttribute]
public List`1<HtmlAttribute> get_Attributes();
    [CompilerGeneratedAttribute]
private void set_Attributes(List`1<HtmlAttribute> value);
    [CompilerGeneratedAttribute]
public HtmlTagFlags get_Flags();
    [CompilerGeneratedAttribute]
private void set_Flags(HtmlTagFlags value);
}
[FlagsAttribute]
internal enum WebMarkupMin.Core.Parsers.HtmlTagFlags : Enum {
    public ushort value__;
    public static HtmlTagFlags None;
    public static HtmlTagFlags Invisible;
    public static HtmlTagFlags Empty;
    public static HtmlTagFlags Block;
    public static HtmlTagFlags Inline;
    public static HtmlTagFlags InlineBlock;
    public static HtmlTagFlags NonIndependent;
    public static HtmlTagFlags Optional;
    public static HtmlTagFlags EmbeddedCode;
    public static HtmlTagFlags Xml;
    public static HtmlTagFlags Custom;
}
[ExtensionAttribute]
internal static class WebMarkupMin.Core.Parsers.HtmlTagFlagsExtensions : object {
    [ExtensionAttribute]
internal static bool IsSet(HtmlTagFlags source, HtmlTagFlags flag);
}
[ExtensionAttribute]
internal static class WebMarkupMin.Core.Parsers.HtmlTagStackExtensions : object {
    [ExtensionAttribute]
internal static HtmlTag GetFirstTagByNameInLowercase(Stack`1<HtmlTag> source, string nameInLowercase);
}
internal class WebMarkupMin.Core.Parsers.HtmlTagTypeDeterminer : object {
    private static Lazy`1<HtmlTagTypeDeterminer> _lazyInstance;
    private ConcurrentDictionary`2<string, HtmlTagFlags> _htmlTagFlagsCache;
    private HashSet`1<string> _htmlTags;
    private HashSet`1<string> _invisibleTags;
    private HashSet`1<string> _emptyTags;
    private HashSet`1<string> _blockTags;
    private HashSet`1<string> _inlineTags;
    private HashSet`1<string> _inlineBlockTags;
    private HashSet`1<string> _nonIndependentTags;
    private HashSet`1<string> _optionalTags;
    private HashSet`1<string> _tagsWithEmbeddedCode;
    private HashSet`1<string> _xmlBasedTags;
    public static HtmlTagTypeDeterminer Instance { get; }
    private static HtmlTagTypeDeterminer();
    public static HtmlTagTypeDeterminer get_Instance();
    public HtmlTagFlags GetTagFlagsByName(string tagNameInLowercase);
    private HtmlTagFlags InnerGetTagFlagsByName(string tagNameInLowercase);
    private bool IsHtmlTag(string tagNameInLowercase);
    private bool IsInvisibleTag(string tagNameInLowercase);
    private bool IsEmptyTag(string tagNameInLowercase);
    private bool IsBlockTag(string tagNameInLowercase);
    private bool IsInlineTag(string tagNameInLowercase);
    private bool IsInlineBlockTag(string tagNameInLowercase);
    private bool IsNonIndependentTag(string tagNameInLowercase);
    public bool IsOptionalTag(string tagNameInLowercase);
    public bool IsTagWithEmbeddedCode(string tagNameInLowercase);
    public bool IsXmlBasedTag(string tagNameInLowercase);
}
internal class WebMarkupMin.Core.Parsers.InnerMarkupParsingContext : object {
    private string _sourceCode;
    private int _position;
    private SourceCodeNodeCoordinates _nodeCoordinates;
    private int _peekedCharOffset;
    public string SourceCode { get; }
    public int Position { get; }
    public int Length { get; }
    public int RemainderLength { get; }
    public SourceCodeNodeCoordinates NodeCoordinates { get; }
    public InnerMarkupParsingContext(string sourceCode);
    public string get_SourceCode();
    public int get_Position();
    public int get_Length();
    public int get_RemainderLength();
    public SourceCodeNodeCoordinates get_NodeCoordinates();
    public void IncreasePosition(int increment);
    public string GetSourceFragment();
    public char PeekCurrentChar();
    public char PeekNextChar();
}
internal abstract class WebMarkupMin.Core.Parsers.MarkupParserBase : object {
    protected static string COMMENT_BEGIN_PART;
    protected static string COMMENT_END_PART;
    private static string CDATA_SECTION_BEGIN_PART;
    private static string CDATA_SECTION_END_PART;
    private static string IGNORING_COMMENT_TAG_NAME;
    private static string START_IGNORING_COMMENT_TAG;
    private static string END_IGNORING_COMMENT_TAG;
    protected InnerMarkupParsingContext _innerContext;
    protected MarkupParsingContext _context;
    protected object _parsingSynchronizer;
    protected MarkupParsingHandlersBase CommonHandlers { get; }
    protected abstract virtual MarkupParsingHandlersBase get_CommonHandlers();
    protected abstract virtual bool ProcessDoctype();
    protected bool ProcessComment();
    protected bool ProcessStartIgnoringCommentTag();
    protected bool ProcessEndIgnoringCommentTag();
    protected bool ProcessCdataSection();
}
internal class WebMarkupMin.Core.Parsers.MarkupParsingContext : object {
    private InnerMarkupParsingContext _innerContext;
    public string SourceCode { get; }
    public int Position { get; }
    public int Length { get; }
    public SourceCodeNodeCoordinates NodeCoordinates { get; }
    internal MarkupParsingContext(InnerMarkupParsingContext innerContext);
    public string get_SourceCode();
    public int get_Position();
    public int get_Length();
    public SourceCodeNodeCoordinates get_NodeCoordinates();
}
internal class WebMarkupMin.Core.Parsers.MarkupParsingException : CodeProcessingException {
    public MarkupParsingException(string message);
    public MarkupParsingException(string message, Exception innerException);
    public MarkupParsingException(string message, SourceCodeNodeCoordinates nodeCoordinates, string sourceFragment);
    public MarkupParsingException(string message, int lineNumber, int columnNumber, string sourceFragment);
    public MarkupParsingException(string message, SourceCodeNodeCoordinates nodeCoordinates, string sourceFragment, Exception innerException);
    public MarkupParsingException(string message, int lineNumber, int columnNumber, string sourceFragment, Exception innerException);
    private MarkupParsingException(SerializationInfo info, StreamingContext context);
}
internal abstract class WebMarkupMin.Core.Parsers.MarkupParsingHandlersBase : object {
    [CompilerGeneratedAttribute]
private DoctypeDelegate <Doctype>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentDelegate <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private CdataSectionDelegate <CdataSection>k__BackingField;
    [CompilerGeneratedAttribute]
private TextDelegate <Text>k__BackingField;
    [CompilerGeneratedAttribute]
private IgnoredFragmentDelegate <IgnoredFragment>k__BackingField;
    public DoctypeDelegate Doctype { get; public set; }
    public CommentDelegate Comment { get; public set; }
    public CdataSectionDelegate CdataSection { get; public set; }
    public TextDelegate Text { get; public set; }
    public IgnoredFragmentDelegate IgnoredFragment { get; public set; }
    [CompilerGeneratedAttribute]
public DoctypeDelegate get_Doctype();
    [CompilerGeneratedAttribute]
public void set_Doctype(DoctypeDelegate value);
    [CompilerGeneratedAttribute]
public CommentDelegate get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(CommentDelegate value);
    [CompilerGeneratedAttribute]
public CdataSectionDelegate get_CdataSection();
    [CompilerGeneratedAttribute]
public void set_CdataSection(CdataSectionDelegate value);
    [CompilerGeneratedAttribute]
public TextDelegate get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(TextDelegate value);
    [CompilerGeneratedAttribute]
public IgnoredFragmentDelegate get_IgnoredFragment();
    [CompilerGeneratedAttribute]
public void set_IgnoredFragment(IgnoredFragmentDelegate value);
}
internal class WebMarkupMin.Core.Parsers.XmlAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; private set; }
    public string Value { get; public set; }
    public XmlAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
internal enum WebMarkupMin.Core.Parsers.XmlNodeType : Enum {
    public byte value__;
    public static XmlNodeType Unknown;
    public static XmlNodeType XmlDeclaration;
    public static XmlNodeType ProcessingInstruction;
    public static XmlNodeType Doctype;
    public static XmlNodeType Comment;
    public static XmlNodeType CdataSection;
    public static XmlNodeType StartTag;
    public static XmlNodeType EndTag;
    public static XmlNodeType EmptyTag;
    public static XmlNodeType Text;
    public static XmlNodeType IgnoredFragment;
}
internal class WebMarkupMin.Core.Parsers.XmlParser : MarkupParserBase {
    private static string NAME_PATTERN;
    private static Regex _processingInstructionBeginPartRegex;
    private static Regex _processingInstructionEndPartRegex;
    private static Regex _doctypeRegex;
    private static Regex _startTagBeginPartRegex;
    private static Regex _startTagEndPartRegex;
    private static Regex _endTagRegex;
    private static Regex _attributeRegex;
    private XmlParsingHandlers _handlers;
    private Stack`1<StackedXmlTag> _tagStack;
    protected MarkupParsingHandlersBase CommonHandlers { get; }
    public XmlParser(XmlParsingHandlers handlers);
    private static XmlParser();
    protected virtual MarkupParsingHandlersBase get_CommonHandlers();
    public void Parse(string content);
    private bool ProcessProcessingInstruction();
    private bool ProcessProcessingInstructionEndPart();
    protected virtual bool ProcessDoctype();
    private bool ProcessStartTag();
    private bool ProcessStartTagEndPart(Boolean& isEmptyTag);
    private bool ProcessEndTag();
    private void ProcessText();
    private List`1<XmlAttribute> ProcessAttributes();
    private static bool IsTagFirstChar(char value);
}
internal class WebMarkupMin.Core.Parsers.XmlParsingHandlers : MarkupParsingHandlersBase {
    [CompilerGeneratedAttribute]
private XmlDeclarationDelegate <XmlDeclaration>k__BackingField;
    [CompilerGeneratedAttribute]
private ProcessingInstructionDelegate <ProcessingInstruction>k__BackingField;
    [CompilerGeneratedAttribute]
private StartTagDelegate <StartTag>k__BackingField;
    [CompilerGeneratedAttribute]
private EndTagDelegate <EndTag>k__BackingField;
    [CompilerGeneratedAttribute]
private EmptyTagDelegate <EmptyTag>k__BackingField;
    public XmlDeclarationDelegate XmlDeclaration { get; public set; }
    public ProcessingInstructionDelegate ProcessingInstruction { get; public set; }
    public StartTagDelegate StartTag { get; public set; }
    public EndTagDelegate EndTag { get; public set; }
    public EmptyTagDelegate EmptyTag { get; public set; }
    [CompilerGeneratedAttribute]
public XmlDeclarationDelegate get_XmlDeclaration();
    [CompilerGeneratedAttribute]
public void set_XmlDeclaration(XmlDeclarationDelegate value);
    [CompilerGeneratedAttribute]
public ProcessingInstructionDelegate get_ProcessingInstruction();
    [CompilerGeneratedAttribute]
public void set_ProcessingInstruction(ProcessingInstructionDelegate value);
    [CompilerGeneratedAttribute]
public StartTagDelegate get_StartTag();
    [CompilerGeneratedAttribute]
public void set_StartTag(StartTagDelegate value);
    [CompilerGeneratedAttribute]
public EndTagDelegate get_EndTag();
    [CompilerGeneratedAttribute]
public void set_EndTag(EndTagDelegate value);
    [CompilerGeneratedAttribute]
public EmptyTagDelegate get_EmptyTag();
    [CompilerGeneratedAttribute]
public void set_EmptyTag(EmptyTagDelegate value);
}
public class WebMarkupMin.Core.Resources.Strings : object {
    private static Lazy`1<ResourceManager> _resourceManager;
    private static CultureInfo _resourceCulture;
    public static ResourceManager ResourceManager { get; }
    public static CultureInfo Culture { get; public set; }
    public static string Common_EnumValueConversionFailed { get; }
    public static string Common_ValueIsEmpty { get; }
    public static string Common_ValueIsNull { get; }
    public static string ErrorDetails_Category { get; }
    public static string ErrorDetails_ColumnNumber { get; }
    public static string ErrorDetails_File { get; }
    public static string ErrorDetails_LineNumber { get; }
    public static string ErrorDetails_Message { get; }
    public static string ErrorDetails_SourceFragment { get; }
    public static string ErrorMessage_BindingExpressionMinificationFailed { get; }
    public static string ErrorMessage_IfConditionalCommentNotDeclared { get; }
    public static string ErrorMessage_InvalidCharactersInProcessingInstruction { get; }
    public static string ErrorMessage_InvalidCharactersInStartTag { get; }
    public static string ErrorMessage_InvalidCharactersInXmlDeclaration { get; }
    public static string ErrorMessage_InvalidEndIfConditionalComment { get; }
    public static string ErrorMessage_InvalidHtmlAttributeExpression { get; }
    public static string ErrorMessage_InvalidSimpleRegularExpression { get; }
    public static string ErrorMessage_InvalidSimpleRegularExpressionList { get; }
    public static string ErrorMessage_MarkupParsingFailed { get; }
    public static string ErrorMessage_NotClosedCdataSection { get; }
    public static string ErrorMessage_NotClosedComment { get; }
    public static string ErrorMessage_NotClosedConditionalComment { get; }
    public static string ErrorMessage_NotClosedIgnoringCommentTag { get; }
    public static string ErrorMessage_NotClosedTag { get; }
    public static string ErrorMessage_StartIgnoringCommentTagNotDeclared { get; }
    public static string ErrorMessage_StartTagNotDeclared { get; }
    public static string ErrorMessage_UnknownError { get; }
    public static string ErrorMessage_XmlDeclarationMinificationFailed { get; }
    public static string SuccesMessage_MarkupMinificationComplete { get; }
    public static string WarningMessage_XmlBasedAttributeNotAllowed { get; }
    public static string WarningMessage_XmlDeclarationNotAllowed { get; }
    private static Strings();
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_Common_EnumValueConversionFailed();
    public static string get_Common_ValueIsEmpty();
    public static string get_Common_ValueIsNull();
    public static string get_ErrorDetails_Category();
    public static string get_ErrorDetails_ColumnNumber();
    public static string get_ErrorDetails_File();
    public static string get_ErrorDetails_LineNumber();
    public static string get_ErrorDetails_Message();
    public static string get_ErrorDetails_SourceFragment();
    public static string get_ErrorMessage_BindingExpressionMinificationFailed();
    public static string get_ErrorMessage_IfConditionalCommentNotDeclared();
    public static string get_ErrorMessage_InvalidCharactersInProcessingInstruction();
    public static string get_ErrorMessage_InvalidCharactersInStartTag();
    public static string get_ErrorMessage_InvalidCharactersInXmlDeclaration();
    public static string get_ErrorMessage_InvalidEndIfConditionalComment();
    public static string get_ErrorMessage_InvalidHtmlAttributeExpression();
    public static string get_ErrorMessage_InvalidSimpleRegularExpression();
    public static string get_ErrorMessage_InvalidSimpleRegularExpressionList();
    public static string get_ErrorMessage_MarkupParsingFailed();
    public static string get_ErrorMessage_NotClosedCdataSection();
    public static string get_ErrorMessage_NotClosedComment();
    public static string get_ErrorMessage_NotClosedConditionalComment();
    public static string get_ErrorMessage_NotClosedIgnoringCommentTag();
    public static string get_ErrorMessage_NotClosedTag();
    public static string get_ErrorMessage_StartIgnoringCommentTagNotDeclared();
    public static string get_ErrorMessage_StartTagNotDeclared();
    public static string get_ErrorMessage_UnknownError();
    public static string get_ErrorMessage_XmlDeclarationMinificationFailed();
    public static string get_SuccesMessage_MarkupMinificationComplete();
    public static string get_WarningMessage_XmlBasedAttributeNotAllowed();
    public static string get_WarningMessage_XmlDeclarationNotAllowed();
    private static string GetString(string name);
}
public class WebMarkupMin.Core.SimpleRegex : object {
    private static string SIMPLE_REGEX_STRING_PATTERN;
    private static Regex _simpleRegexStringRegex;
    private static Regex _simpleRegexStringInListRegex;
    private Regex _regex;
    private string _pattern;
    private bool _caseInsensitive;
    public string Pattern { get; }
    public bool CaseInsensitive { get; }
    public SimpleRegex(string pattern);
    public SimpleRegex(string pattern, bool caseInsensitive);
    private static SimpleRegex();
    public string get_Pattern();
    public bool get_CaseInsensitive();
    public static SimpleRegex Parse(string regularExpressionString);
    public static bool TryParse(string regularExpressionString, SimpleRegex& result);
    private static SimpleRegex InternalParse(string regularExpressionString);
    public static List`1<SimpleRegex> ParseList(string regularExpressionsString);
    public static bool TryParseList(string regularExpressionsString, List`1& result);
    private static List`1<SimpleRegex> InternalParseList(string regularExpressionsString);
    private static SimpleRegex ParseRegularExpressionMatch(Match expressionMatch);
    private static string EscapePatternForLiteral(string pattern);
    private static string UnescapePatternFromLiteral(string pattern);
    public bool IsMatch(string input);
    private static bool InternalEquals(SimpleRegex regex1, SimpleRegex regex2);
    public sealed virtual bool Equals(SimpleRegex regex);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public static bool op_Equality(SimpleRegex regex1, SimpleRegex regex2);
    public static bool op_Inequality(SimpleRegex regex1, SimpleRegex regex2);
}
public static class WebMarkupMin.Core.TextEncodingShortcuts : object {
    [ObsoleteAttribute("Use a `WebMarkupMin.Core.Utilities.TargetFrameworkShortcuts.DefaultTextEncoding` property instead")]
public static Encoding Default;
    private static TextEncodingShortcuts();
}
[ExtensionAttribute]
internal static class WebMarkupMin.Core.Utilities.CharExtensions : object {
    [ExtensionAttribute]
public static bool IsNumeric(char source);
    [ExtensionAttribute]
public static bool IsAlphaLower(char source);
    [ExtensionAttribute]
public static bool IsAlphaUpper(char source);
    [ExtensionAttribute]
public static bool IsAlpha(char source);
    [ExtensionAttribute]
public static bool IsAlphaNumeric(char source);
    [ExtensionAttribute]
public static bool IsNewLine(char source);
}
internal static class WebMarkupMin.Core.Utilities.EnvironmentShortcuts : object {
    internal static Char[] NewLineChars;
    private static EnvironmentShortcuts();
}
public class WebMarkupMin.Core.Utilities.InterlockedStatedFlag : ValueType {
    private int _counter;
    public bool IsSet();
    public bool Set();
}
[ExtensionAttribute]
public static class WebMarkupMin.Core.Utilities.MemoryStreamExtensions : object {
    [ExtensionAttribute]
public static void Clear(MemoryStream source);
}
public static class WebMarkupMin.Core.Utilities.SourceCodeNavigator : object {
    private static byte DEFAULT_TAB_SIZE;
    private static int DEFAULT_MAX_FRAGMENT_LENGTH;
    private static Char[] _newLineChars;
    private static SourceCodeNavigator();
    internal static void FindNextNewLine(string sourceCode, int startPosition, Int32& newLinePosition, Int32& newLineLength);
    internal static void FindNextNewLine(string sourceCode, int startPosition, int length, Int32& newLinePosition, Int32& newLineLength);
    internal static void FindPreviousNewLine(string sourceCode, int startPosition, Int32& newLinePosition, Int32& newLineLength);
    internal static int FindNextNonWhitespaceChar(string sourceCode, int startPosition, int length);
    public static void CalculateLineCount(string sourceCode, Int32& lineCount, Int32& charRemainderCount);
    public static void CalculateLineCount(string sourceCode, int fragmentStartPosition, Int32& lineCount, Int32& charRemainderCount);
    public static void CalculateLineCount(string sourceCode, int fragmentStartPosition, int fragmentLength, Int32& lineCount, Int32& charRemainderCount);
    public static SourceCodeNodeCoordinates CalculateNodeCoordinates(string sourceCode, int nodePosition);
    public static string GetSourceFragment(string sourceCode, int nodePosition, byte tabSize, int maxFragmentLength);
    public static string GetSourceFragment(string sourceCode, SourceCodeNodeCoordinates nodeCoordinates, byte tabSize, int maxFragmentLength);
    private static void CalculateCutPositions(string line, int columnNumber, int maxFragmentLength, Int32& fragmentStartPosition, Int32& fragmentLength);
    private static string FormatSourceCodeLine(string line, SourceCodeNodeCoordinates nodeCoordinates, int lineNumberSize, int fragmentStartPosition, int fragmentLength, byte tabSize);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, SourceCodeNodeCoordinates relativeNodeCoordinates);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, string additionalContent);
    public static SourceCodeNodeCoordinates CalculateAbsoluteNodeCoordinates(SourceCodeNodeCoordinates baseNodeCoordinates, int lineCount, int charRemainderCount);
    public static string GetCurrentLine(string sourceCode, int currentPosition, Int32& startLinePosition, Int32& endLinePosition);
    [ObsoleteAttribute("Use a `CalculateLineCount` method")]
public static void CalculateLineBreakCount(string sourceCode, Int32& lineBreakCount, Int32& charRemainderCount);
    [ObsoleteAttribute("Use a `CalculateLineCount` method")]
public static void CalculateLineBreakCount(string sourceCode, int fragmentStartPosition, Int32& lineBreakCount, Int32& charRemainderCount);
    [ObsoleteAttribute("Use a `CalculateLineCount` method")]
public static void CalculateLineBreakCount(string sourceCode, int fragmentStartPosition, int fragmentLength, Int32& lineBreakCount, Int32& charRemainderCount);
}
public class WebMarkupMin.Core.Utilities.SourceCodeNodeCoordinates : ValueType {
    private int _lineNumber;
    private int _columnNumber;
    public static SourceCodeNodeCoordinates Empty;
    public int LineNumber { get; public set; }
    public int ColumnNumber { get; public set; }
    public bool IsEmpty { get; }
    public SourceCodeNodeCoordinates(int lineNumber, int columnNumber);
    private static SourceCodeNodeCoordinates();
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public bool get_IsEmpty();
}
public class WebMarkupMin.Core.Utilities.StatedFlag : ValueType {
    private bool _isSet;
    public bool IsSet();
    public bool Set();
}
[ExtensionAttribute]
internal static class WebMarkupMin.Core.Utilities.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static bool StartsWithNewLine(StringBuilder source);
    [ExtensionAttribute]
public static bool EndsWithNewLine(StringBuilder source);
}
[ExtensionAttribute]
internal static class WebMarkupMin.Core.Utilities.StringExtensions : object {
    private static Char[] _newLineChars;
    private static Char[] _otherWhitespaceChars;
    private static StringExtensions();
    [ExtensionAttribute]
public static string TabsToSpaces(string source, int tabSize);
    [ExtensionAttribute]
public static bool CustomStartsWith(string source, string value, int startIndex, StringComparison comparisonType);
    [ExtensionAttribute]
public static bool IgnoreCaseEquals(string source, string value);
    [ExtensionAttribute]
public static bool TryGetChar(string source, int index, Char& result);
    [ExtensionAttribute]
public static string GetNewLine(string source);
    [ExtensionAttribute]
public static string GetNewLine(string source, int startIndex);
    [ExtensionAttribute]
public static string GetNewLine(string source, int startIndex, int count);
    private static string InternalGetNewLineByIndex(string value, int index, bool checkFirstChar);
    [ExtensionAttribute]
public static bool StartsWithNewLine(string source);
    [ExtensionAttribute]
public static bool EndsWithNewLine(string source);
    [ExtensionAttribute]
public static int IndexOfNonWhitespace(string source);
    [ExtensionAttribute]
public static int IndexOfNonWhitespace(string source, int startIndex);
    [ExtensionAttribute]
public static int IndexOfNonWhitespace(string source, int startIndex, int count);
    private static int InternalIndexOfNonWhitespace(string value, int startIndex, int count);
    [ExtensionAttribute]
public static int LastIndexOfNonWhitespace(string source);
    [ExtensionAttribute]
public static int LastIndexOfNonWhitespace(string source, int startIndex);
    [ExtensionAttribute]
public static int LastIndexOfNonWhitespace(string source, int startIndex, int count);
    private static int InternalLastIndexOfNonWhitespace(string value, int startIndex, int count);
    [ExtensionAttribute]
public static string TrimStart(string source, bool preserveNewLines);
    private static string InternalTrimStartWithNewLinesPreserved(string value);
    [ExtensionAttribute]
public static string TrimEnd(string source, bool preserveNewLines);
    private static string InternalTrimEndWithNewLinesPreserved(string value);
    [ExtensionAttribute]
public static string Trim(string source, bool preserveNewLines);
    private static string InternalTrimWithNewLinesPreserved(string value);
    [ExtensionAttribute]
public static string CollapseWhitespace(string source);
    [ExtensionAttribute]
public static string CollapseWhitespace(string source, bool preserveNewLines);
    private static string InternalCollapseWhitespaceToSpace(string value);
    private static string InternalCollapseWhitespaceToNewLine(string value);
}
public static class WebMarkupMin.Core.Utilities.TargetFrameworkShortcuts : object {
    public static Encoding DefaultTextEncoding;
    internal static RegexOptions PerformanceRegexOptions;
    private static TargetFrameworkShortcuts();
}
public static class WebMarkupMin.Core.Utilities.Utils : object {
    public static TDest GetEnumFromOtherEnum(TSource value);
    internal static string RemoveEndingSemicolons(string value);
    internal static string RemovePrefixAndPostfix(string value, Regex prefixRegex, Regex postfixRegex);
    internal static bool TryGetNonWhitespaceStringSegment(string value, Int32& startIndex, Int32& count);
    internal static string RemoveByteOrderMark(string value);
    internal static bool ContainsUppercaseChars(string value);
    internal static HashSet`1<TSource> UnionHashSets(IEnumerable`1[] sequences);
}
public enum WebMarkupMin.Core.WhitespaceMinificationMode : Enum {
    public byte value__;
    public static WhitespaceMinificationMode None;
    public static WhitespaceMinificationMode Safe;
    public static WhitespaceMinificationMode Medium;
    public static WhitespaceMinificationMode Aggressive;
}
public class WebMarkupMin.Core.XhtmlMinificationSettings : CommonHtmlMinificationSettingsBase {
    [CompilerGeneratedAttribute]
private bool <RenderEmptyTagsWithSpace>k__BackingField;
    public bool RenderEmptyTagsWithSpace { get; public set; }
    public XhtmlMinificationSettings(bool useEmptyMinificationSettings);
    [CompilerGeneratedAttribute]
public bool get_RenderEmptyTagsWithSpace();
    [CompilerGeneratedAttribute]
public void set_RenderEmptyTagsWithSpace(bool value);
}
public class WebMarkupMin.Core.XhtmlMinifier : object {
    private GenericHtmlMinifier _genericHtmlMinifier;
    public XhtmlMinifier(XhtmlMinificationSettings settings, ICssMinifier cssMinifier, IJsMinifier jsMinifier, ILogger logger);
    public sealed virtual MarkupMinificationResult Minify(string content);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext);
    public sealed virtual MarkupMinificationResult Minify(string content, Encoding encoding);
    public sealed virtual MarkupMinificationResult Minify(string content, bool generateStatistics);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext, Encoding encoding, bool generateStatistics);
}
internal class WebMarkupMin.Core.XmlMinificationOutputWriter : MarkupMinificationOutputWriterBase {
    public XmlMinificationOutputWriter(int initialBufferCapacity);
    public XmlMinificationOutputWriter(int initialBufferCapacity, NewLineStyle newLineStyle);
    public void RemoveLastWhitespaceItems(bool preserveNewLines);
    private static void InternalRemoveLastWhitespaceItems(String[] items, Int32& size);
    private static void InternalRemoveLastWhitespaceItemsWithNewLinesPreserved(String[] items, Int32& size);
    public bool TransformLastStartTagToEmptyTag(bool renderEmptyTagsWithSpace);
}
public class WebMarkupMin.Core.XmlMinificationSettings : MarkupMinificationSettingsBase {
    [CompilerGeneratedAttribute]
private bool <MinifyWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemoveXmlComments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RenderEmptyTagsWithSpace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CollapseTagsWithoutContent>k__BackingField;
    public bool MinifyWhitespace { get; public set; }
    public bool RemoveXmlComments { get; public set; }
    public bool RenderEmptyTagsWithSpace { get; public set; }
    public bool CollapseTagsWithoutContent { get; public set; }
    public XmlMinificationSettings(bool useEmptyMinificationSettings);
    [CompilerGeneratedAttribute]
public bool get_MinifyWhitespace();
    [CompilerGeneratedAttribute]
public void set_MinifyWhitespace(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemoveXmlComments();
    [CompilerGeneratedAttribute]
public void set_RemoveXmlComments(bool value);
    [CompilerGeneratedAttribute]
public bool get_RenderEmptyTagsWithSpace();
    [CompilerGeneratedAttribute]
public void set_RenderEmptyTagsWithSpace(bool value);
    [CompilerGeneratedAttribute]
public bool get_CollapseTagsWithoutContent();
    [CompilerGeneratedAttribute]
public void set_CollapseTagsWithoutContent(bool value);
}
public class WebMarkupMin.Core.XmlMinifier : object {
    private XmlMinificationSettings _settings;
    private ILogger _logger;
    private XmlParser _xmlParser;
    private XmlMinificationOutputWriter _output;
    private XmlNodeType _currentNodeType;
    private string _currentText;
    private bool _xmlDeclarationBeforeText;
    private bool _processingInstructionBeforeText;
    private bool _doctypeBeforeText;
    private bool _startTagBeforeText;
    private bool _endTagBeforeText;
    private bool _emptyTagBeforeText;
    private bool _ignoredFragmentBeforeText;
    private List`1<MinificationErrorInfo> _errors;
    private object _minificationSynchronizer;
    public XmlMinifier(XmlMinificationSettings settings, ILogger logger);
    public sealed virtual MarkupMinificationResult Minify(string content);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext);
    public sealed virtual MarkupMinificationResult Minify(string content, Encoding encoding);
    public sealed virtual MarkupMinificationResult Minify(string content, bool generateStatistics);
    public sealed virtual MarkupMinificationResult Minify(string content, string fileContext, Encoding encoding, bool generateStatistics);
    private void XmlDeclarationHandler(MarkupParsingContext context, List`1<XmlAttribute> attributes);
    private void ProcessingInstructionHandler(MarkupParsingContext context, string instructionName, List`1<XmlAttribute> attributes);
    private void DoctypeDelegateHandler(MarkupParsingContext context, string doctype);
    private void CommentHandler(MarkupParsingContext context, string commentText);
    private void CdataSectionHandler(MarkupParsingContext context, string cdataText);
    private void StartTagHandler(MarkupParsingContext context, string tagName, List`1<XmlAttribute> attributes);
    private void EndTagHandler(MarkupParsingContext context, string tagName);
    private void EmptyTagHandler(MarkupParsingContext context, string tagName, List`1<XmlAttribute> attributes);
    private void TextHandler(MarkupParsingContext context, string text);
    private void IgnoredFragmentHandler(MarkupParsingContext context, string fragment);
    private void WriteAttributes(List`1<XmlAttribute> attributes);
    private void WriteError(string category, string message, string filePath, int lineNumber, int columnNumber, string sourceFragment);
}
