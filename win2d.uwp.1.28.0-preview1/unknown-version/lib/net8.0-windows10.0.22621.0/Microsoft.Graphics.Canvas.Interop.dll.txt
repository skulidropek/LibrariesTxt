[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush : ValueType {
    public static IObjectReference CreateMarshaler(CanvasImageBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasImageBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasImageBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasImageBrush obj);
    public static MarshalerArray<CanvasImageBrush> CreateMarshalerArray(CanvasImageBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasImageBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasImageBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasImageBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasImageBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasImageBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush : ValueType {
    public static IObjectReference CreateMarshaler(CanvasLinearGradientBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasLinearGradientBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasLinearGradientBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasLinearGradientBrush obj);
    public static MarshalerArray<CanvasLinearGradientBrush> CreateMarshalerArray(CanvasLinearGradientBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasLinearGradientBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasLinearGradientBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasLinearGradientBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasLinearGradientBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush : ValueType {
    public static IObjectReference CreateMarshaler(CanvasRadialGradientBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasRadialGradientBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasRadialGradientBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasRadialGradientBrush obj);
    public static MarshalerArray<CanvasRadialGradientBrush> CreateMarshalerArray(CanvasRadialGradientBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasRadialGradientBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasRadialGradientBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasRadialGradientBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasRadialGradientBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSolidColorBrush obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSolidColorBrush obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSolidColorBrush FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSolidColorBrush obj);
    public static MarshalerArray<CanvasSolidColorBrush> CreateMarshalerArray(CanvasSolidColorBrush[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSolidColorBrush[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSolidColorBrush[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSolidColorBrush[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSolidColorBrush> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrushRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("F5D58591-C803-41B4-878E-79D92AB13295")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush {
    public static IntPtr AbiToProjectionVftablePtr;
    private CanvasDevice global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.Device { get; }
    private float global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.Opacity { get; private set; }
    private Matrix3x2 global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.Transform { get; private set; }
    private static ICanvasBrush();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Device_4(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_Opacity_1(IntPtr thisPtr, float value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Opacity_0(IntPtr thisPtr, Single* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_Transform_3(IntPtr thisPtr, Matrix3x2 value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Transform_2(IntPtr thisPtr, Matrix3x2* value);
    private sealed virtual override CanvasDevice global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.get_Device();
    private sealed virtual override float global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.get_Opacity();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.set_Opacity(float value);
    private sealed virtual override Matrix3x2 global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.get_Transform();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Brushes.ICanvasBrush.set_Transform(Matrix3x2 value);
    private sealed virtual override void global::System.IDisposable.Dispose();
}
public static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static CanvasDevice get_Device(IObjectReference _obj);
    public static float get_Opacity(IObjectReference _obj);
    public static void set_Opacity(IObjectReference _obj, float value);
    public static Matrix3x2 get_Transform(IObjectReference _obj);
    public static void set_Transform(IObjectReference _obj, Matrix3x2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("5A21C4E7-D450-4942-8BBD-F017097AB763")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush {
}
[GuidAttribute("C40CCB59-1B87-4394-A6A6-ECD278E877D6")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasImageBrush Create(IObjectReference _obj, ICanvasResourceCreator resourceCreator);
    internal static CanvasImageBrush CreateWithImage(IObjectReference _obj, ICanvasResourceCreator resourceCreator, ICanvasImage image);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasEdgeBehavior get_ExtendX(IObjectReference _obj);
    internal static void set_ExtendX(IObjectReference _obj, CanvasEdgeBehavior value);
    internal static CanvasEdgeBehavior get_ExtendY(IObjectReference _obj);
    internal static void set_ExtendY(IObjectReference _obj, CanvasEdgeBehavior value);
    internal static ICanvasImage get_Image(IObjectReference _obj);
    internal static void set_Image(IObjectReference _obj, ICanvasImage value);
    internal static CanvasImageInterpolation get_Interpolation(IObjectReference _obj);
    internal static void set_Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Nullable`1<Rect> get_SourceRectangle(IObjectReference _obj);
    internal static void set_SourceRectangle(IObjectReference _obj, Nullable`1<Rect> value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush {
}
[GuidAttribute("A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasLinearGradientBrush CreateSimple(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Color startColor, Color endColor);
    internal static CanvasLinearGradientBrush CreateWithStops(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops);
    internal static CanvasLinearGradientBrush CreateWithEdgeBehaviorAndAlphaMode(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    internal static CanvasLinearGradientBrush CreateWithEdgeBehaviorAndInterpolationOptions(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static CanvasBufferPrecision get_BufferPrecision(IObjectReference _obj);
    internal static CanvasEdgeBehavior get_EdgeBehavior(IObjectReference _obj);
    internal static Vector2 get_EndPoint(IObjectReference _obj);
    internal static void set_EndPoint(IObjectReference _obj, Vector2 value);
    internal static CanvasColorSpace get_PostInterpolationSpace(IObjectReference _obj);
    internal static CanvasColorSpace get_PreInterpolationSpace(IObjectReference _obj);
    internal static Vector2 get_StartPoint(IObjectReference _obj);
    internal static void set_StartPoint(IObjectReference _obj, Vector2 value);
    internal static CanvasGradientStop[] get_Stops(IObjectReference _obj);
    internal static CanvasGradientStopHdr[] get_StopsHdr(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E9DE3392-8FBF-478C-8E6A-D0A0EA753B37")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasLinearGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Vector4 startColorHdr, Vector4 endColorHdr);
    internal static CanvasLinearGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr);
    internal static CanvasLinearGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    internal static CanvasLinearGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    internal static CanvasLinearGradientBrush CreateRainbow(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float eldritchness);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4D27D756-14A9-4EB7-973F-E6614D4F89E7")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush {
}
[GuidAttribute("7933A51F-A910-4548-849F-42DDEC466F41")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasRadialGradientBrush CreateSimple(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Color startColor, Color endColor);
    internal static CanvasRadialGradientBrush CreateWithStops(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops);
    internal static CanvasRadialGradientBrush CreateWithEdgeBehaviorAndAlphaMode(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    internal static CanvasRadialGradientBrush CreateWithEdgeBehaviorAndInterpolationOptions(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static CanvasBufferPrecision get_BufferPrecision(IObjectReference _obj);
    internal static Vector2 get_Center(IObjectReference _obj);
    internal static void set_Center(IObjectReference _obj, Vector2 value);
    internal static CanvasEdgeBehavior get_EdgeBehavior(IObjectReference _obj);
    internal static Vector2 get_OriginOffset(IObjectReference _obj);
    internal static void set_OriginOffset(IObjectReference _obj, Vector2 value);
    internal static CanvasColorSpace get_PostInterpolationSpace(IObjectReference _obj);
    internal static CanvasColorSpace get_PreInterpolationSpace(IObjectReference _obj);
    internal static float get_RadiusX(IObjectReference _obj);
    internal static void set_RadiusX(IObjectReference _obj, float value);
    internal static float get_RadiusY(IObjectReference _obj);
    internal static void set_RadiusY(IObjectReference _obj, float value);
    internal static CanvasGradientStop[] get_Stops(IObjectReference _obj);
    internal static CanvasGradientStopHdr[] get_StopsHdr(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3B0D4DAE-3E21-4818-99B4-779ACAAF18BE")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasRadialGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Vector4 startColorHdr, Vector4 endColorHdr);
    internal static CanvasRadialGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops);
    internal static CanvasRadialGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    internal static CanvasRadialGradientBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    internal static CanvasRadialGradientBrush CreateRainbow(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float eldritchness);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8BC30F87-BAD5-4871-88B8-9FE3C63D204A")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush {
}
[GuidAttribute("8ABF4780-4EDD-4F2B-BF63-2C385115B201")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasSolidColorBrush Create(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Color color);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static Vector4 get_ColorHdr(IObjectReference _obj);
    internal static void set_ColorHdr(IObjectReference _obj, Vector4 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("629B7244-5B9E-4EF8-8E09-264714201EE8")]
internal interface ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasSolidColorBrush CreateHdr(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Vector4 colorHdr);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasActiveLayer : ValueType {
    public static IObjectReference CreateMarshaler(CanvasActiveLayer obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasActiveLayer obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasActiveLayer FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasActiveLayer obj);
    public static MarshalerArray<CanvasActiveLayer> CreateMarshalerArray(CanvasActiveLayer[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasActiveLayer[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasActiveLayer[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasActiveLayer[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasActiveLayer> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasActiveLayerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasBitmap : ValueType {
    public static IObjectReference CreateMarshaler(CanvasBitmap obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasBitmap obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasBitmap FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasBitmap obj);
    public static MarshalerArray<CanvasBitmap> CreateMarshalerArray(CanvasBitmap[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasBitmap[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasBitmap[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasBitmap[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasBitmap> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasBitmapRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasCommandList : ValueType {
    public static IObjectReference CreateMarshaler(CanvasCommandList obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasCommandList obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasCommandList FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasCommandList obj);
    public static MarshalerArray<CanvasCommandList> CreateMarshalerArray(CanvasCommandList[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasCommandList[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasCommandList[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasCommandList[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasCommandList> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasCommandListRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasDevice : ValueType {
    public static IObjectReference CreateMarshaler(CanvasDevice obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasDevice obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasDevice FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasDevice obj);
    public static MarshalerArray<CanvasDevice> CreateMarshalerArray(CanvasDevice[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasDevice[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasDevice[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasDevice[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasDevice> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasDeviceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasDrawingSession : ValueType {
    public static IObjectReference CreateMarshaler(CanvasDrawingSession obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasDrawingSession obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasDrawingSession FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasDrawingSession obj);
    public static MarshalerArray<CanvasDrawingSession> CreateMarshalerArray(CanvasDrawingSession[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasDrawingSession[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasDrawingSession[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasDrawingSession[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasDrawingSession> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasDrawingSessionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasLock : ValueType {
    public static IObjectReference CreateMarshaler(CanvasLock obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasLock obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasLock FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasLock obj);
    public static MarshalerArray<CanvasLock> CreateMarshalerArray(CanvasLock[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasLock[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasLock[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasLock[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasLock> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasLockRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasRenderTarget : ValueType {
    public static IObjectReference CreateMarshaler(CanvasRenderTarget obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasRenderTarget obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasRenderTarget FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasRenderTarget obj);
    public static MarshalerArray<CanvasRenderTarget> CreateMarshalerArray(CanvasRenderTarget[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasRenderTarget[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasRenderTarget[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasRenderTarget[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasRenderTarget> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasRenderTargetRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasSpriteBatch : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSpriteBatch obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSpriteBatch obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSpriteBatch FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSpriteBatch obj);
    public static MarshalerArray<CanvasSpriteBatch> CreateMarshalerArray(CanvasSpriteBatch[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSpriteBatch[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSpriteBatch[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSpriteBatch[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSpriteBatch> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasSpriteBatchRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasSwapChain : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSwapChain obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSwapChain obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSwapChain FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSwapChain obj);
    public static MarshalerArray<CanvasSwapChain> CreateMarshalerArray(CanvasSwapChain[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSwapChain[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSwapChain[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSwapChain[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSwapChain> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasSwapChainRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.CanvasVirtualBitmap : ValueType {
    public static IObjectReference CreateMarshaler(CanvasVirtualBitmap obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasVirtualBitmap obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasVirtualBitmap FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasVirtualBitmap obj);
    public static MarshalerArray<CanvasVirtualBitmap> CreateMarshalerArray(CanvasVirtualBitmap[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasVirtualBitmap[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasVirtualBitmap[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasVirtualBitmap[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasVirtualBitmap> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.CanvasVirtualBitmapRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect : ValueType {
    public static IObjectReference CreateMarshaler(AlphaMaskEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(AlphaMaskEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AlphaMaskEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AlphaMaskEffect obj);
    public static MarshalerArray<AlphaMaskEffect> CreateMarshalerArray(AlphaMaskEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AlphaMaskEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(AlphaMaskEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AlphaMaskEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AlphaMaskEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.AlphaMaskEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect : ValueType {
    public static IObjectReference CreateMarshaler(ArithmeticCompositeEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ArithmeticCompositeEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ArithmeticCompositeEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ArithmeticCompositeEffect obj);
    public static MarshalerArray<ArithmeticCompositeEffect> CreateMarshalerArray(ArithmeticCompositeEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ArithmeticCompositeEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ArithmeticCompositeEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ArithmeticCompositeEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ArithmeticCompositeEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.AtlasEffect : ValueType {
    public static IObjectReference CreateMarshaler(AtlasEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(AtlasEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static AtlasEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(AtlasEffect obj);
    public static MarshalerArray<AtlasEffect> CreateMarshalerArray(AtlasEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static AtlasEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(AtlasEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(AtlasEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<AtlasEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.AtlasEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.BlendEffect : ValueType {
    public static IObjectReference CreateMarshaler(BlendEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(BlendEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BlendEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BlendEffect obj);
    public static MarshalerArray<BlendEffect> CreateMarshalerArray(BlendEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BlendEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(BlendEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BlendEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BlendEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.BlendEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.BorderEffect : ValueType {
    public static IObjectReference CreateMarshaler(BorderEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(BorderEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BorderEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BorderEffect obj);
    public static MarshalerArray<BorderEffect> CreateMarshalerArray(BorderEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BorderEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(BorderEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BorderEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BorderEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.BorderEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.BrightnessEffect : ValueType {
    public static IObjectReference CreateMarshaler(BrightnessEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(BrightnessEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static BrightnessEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(BrightnessEffect obj);
    public static MarshalerArray<BrightnessEffect> CreateMarshalerArray(BrightnessEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static BrightnessEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(BrightnessEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(BrightnessEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<BrightnessEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.BrightnessEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect : ValueType {
    public static IObjectReference CreateMarshaler(ChromaKeyEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ChromaKeyEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ChromaKeyEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ChromaKeyEffect obj);
    public static MarshalerArray<ChromaKeyEffect> CreateMarshalerArray(ChromaKeyEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ChromaKeyEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ChromaKeyEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ChromaKeyEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ChromaKeyEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ChromaKeyEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ColorManagementEffect : ValueType {
    public static IObjectReference CreateMarshaler(ColorManagementEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ColorManagementEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ColorManagementEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ColorManagementEffect obj);
    public static MarshalerArray<ColorManagementEffect> CreateMarshalerArray(ColorManagementEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ColorManagementEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ColorManagementEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ColorManagementEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ColorManagementEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ColorManagementEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ColorManagementProfile : ValueType {
    public static IObjectReference CreateMarshaler(ColorManagementProfile obj);
    public static ObjectReferenceValue CreateMarshaler2(ColorManagementProfile obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ColorManagementProfile FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ColorManagementProfile obj);
    public static MarshalerArray<ColorManagementProfile> CreateMarshalerArray(ColorManagementProfile[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ColorManagementProfile[] FromAbiArray(object box);
    public static void CopyAbiArray(ColorManagementProfile[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ColorManagementProfile[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ColorManagementProfile> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ColorManagementProfileRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect : ValueType {
    public static IObjectReference CreateMarshaler(ColorMatrixEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ColorMatrixEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ColorMatrixEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ColorMatrixEffect obj);
    public static MarshalerArray<ColorMatrixEffect> CreateMarshalerArray(ColorMatrixEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ColorMatrixEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ColorMatrixEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ColorMatrixEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ColorMatrixEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ColorMatrixEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ColorSourceEffect : ValueType {
    public static IObjectReference CreateMarshaler(ColorSourceEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ColorSourceEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ColorSourceEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ColorSourceEffect obj);
    public static MarshalerArray<ColorSourceEffect> CreateMarshalerArray(ColorSourceEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ColorSourceEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ColorSourceEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ColorSourceEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ColorSourceEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ColorSourceEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.CompositeEffect : ValueType {
    public static IObjectReference CreateMarshaler(CompositeEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(CompositeEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CompositeEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CompositeEffect obj);
    public static MarshalerArray<CompositeEffect> CreateMarshalerArray(CompositeEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CompositeEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(CompositeEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CompositeEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CompositeEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.CompositeEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ContrastEffect : ValueType {
    public static IObjectReference CreateMarshaler(ContrastEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ContrastEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ContrastEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ContrastEffect obj);
    public static MarshalerArray<ContrastEffect> CreateMarshalerArray(ContrastEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ContrastEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ContrastEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ContrastEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ContrastEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ContrastEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect : ValueType {
    public static IObjectReference CreateMarshaler(ConvolveMatrixEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ConvolveMatrixEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ConvolveMatrixEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ConvolveMatrixEffect obj);
    public static MarshalerArray<ConvolveMatrixEffect> CreateMarshalerArray(ConvolveMatrixEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ConvolveMatrixEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ConvolveMatrixEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ConvolveMatrixEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ConvolveMatrixEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.CropEffect : ValueType {
    public static IObjectReference CreateMarshaler(CropEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(CropEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CropEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CropEffect obj);
    public static MarshalerArray<CropEffect> CreateMarshalerArray(CropEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CropEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(CropEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CropEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CropEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.CropEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.CrossFadeEffect : ValueType {
    public static IObjectReference CreateMarshaler(CrossFadeEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(CrossFadeEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CrossFadeEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CrossFadeEffect obj);
    public static MarshalerArray<CrossFadeEffect> CreateMarshalerArray(CrossFadeEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CrossFadeEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(CrossFadeEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CrossFadeEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CrossFadeEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.CrossFadeEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect : ValueType {
    public static IObjectReference CreateMarshaler(DirectionalBlurEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(DirectionalBlurEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DirectionalBlurEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DirectionalBlurEffect obj);
    public static MarshalerArray<DirectionalBlurEffect> CreateMarshalerArray(DirectionalBlurEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DirectionalBlurEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(DirectionalBlurEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DirectionalBlurEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DirectionalBlurEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect : ValueType {
    public static IObjectReference CreateMarshaler(DiscreteTransferEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(DiscreteTransferEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DiscreteTransferEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DiscreteTransferEffect obj);
    public static MarshalerArray<DiscreteTransferEffect> CreateMarshalerArray(DiscreteTransferEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DiscreteTransferEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(DiscreteTransferEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DiscreteTransferEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DiscreteTransferEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect : ValueType {
    public static IObjectReference CreateMarshaler(DisplacementMapEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(DisplacementMapEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DisplacementMapEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DisplacementMapEffect obj);
    public static MarshalerArray<DisplacementMapEffect> CreateMarshalerArray(DisplacementMapEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DisplacementMapEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(DisplacementMapEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DisplacementMapEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DisplacementMapEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.DisplacementMapEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect : ValueType {
    public static IObjectReference CreateMarshaler(DistantDiffuseEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(DistantDiffuseEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DistantDiffuseEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DistantDiffuseEffect obj);
    public static MarshalerArray<DistantDiffuseEffect> CreateMarshalerArray(DistantDiffuseEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DistantDiffuseEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(DistantDiffuseEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DistantDiffuseEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DistantDiffuseEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect : ValueType {
    public static IObjectReference CreateMarshaler(DistantSpecularEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(DistantSpecularEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DistantSpecularEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DistantSpecularEffect obj);
    public static MarshalerArray<DistantSpecularEffect> CreateMarshalerArray(DistantSpecularEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DistantSpecularEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(DistantSpecularEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DistantSpecularEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DistantSpecularEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.DistantSpecularEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect : ValueType {
    public static IObjectReference CreateMarshaler(DpiCompensationEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(DpiCompensationEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static DpiCompensationEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(DpiCompensationEffect obj);
    public static MarshalerArray<DpiCompensationEffect> CreateMarshalerArray(DpiCompensationEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static DpiCompensationEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(DpiCompensationEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(DpiCompensationEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<DpiCompensationEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.DpiCompensationEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect : ValueType {
    public static IObjectReference CreateMarshaler(EdgeDetectionEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(EdgeDetectionEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static EdgeDetectionEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(EdgeDetectionEffect obj);
    public static MarshalerArray<EdgeDetectionEffect> CreateMarshalerArray(EdgeDetectionEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static EdgeDetectionEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(EdgeDetectionEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(EdgeDetectionEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<EdgeDetectionEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D : ValueType {
    public static IObjectReference CreateMarshaler(EffectTransferTable3D obj);
    public static ObjectReferenceValue CreateMarshaler2(EffectTransferTable3D obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static EffectTransferTable3D FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(EffectTransferTable3D obj);
    public static MarshalerArray<EffectTransferTable3D> CreateMarshalerArray(EffectTransferTable3D[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static EffectTransferTable3D[] FromAbiArray(object box);
    public static void CopyAbiArray(EffectTransferTable3D[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(EffectTransferTable3D[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<EffectTransferTable3D> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.EffectTransferTable3DRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.EmbossEffect : ValueType {
    public static IObjectReference CreateMarshaler(EmbossEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(EmbossEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static EmbossEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(EmbossEffect obj);
    public static MarshalerArray<EmbossEffect> CreateMarshalerArray(EmbossEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static EmbossEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(EmbossEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(EmbossEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<EmbossEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.EmbossEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ExposureEffect : ValueType {
    public static IObjectReference CreateMarshaler(ExposureEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ExposureEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ExposureEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ExposureEffect obj);
    public static MarshalerArray<ExposureEffect> CreateMarshalerArray(ExposureEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ExposureEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ExposureEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ExposureEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ExposureEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ExposureEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.GammaTransferEffect : ValueType {
    public static IObjectReference CreateMarshaler(GammaTransferEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(GammaTransferEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static GammaTransferEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(GammaTransferEffect obj);
    public static MarshalerArray<GammaTransferEffect> CreateMarshalerArray(GammaTransferEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static GammaTransferEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(GammaTransferEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(GammaTransferEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<GammaTransferEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.GammaTransferEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect : ValueType {
    public static IObjectReference CreateMarshaler(GaussianBlurEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(GaussianBlurEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static GaussianBlurEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(GaussianBlurEffect obj);
    public static MarshalerArray<GaussianBlurEffect> CreateMarshalerArray(GaussianBlurEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static GaussianBlurEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(GaussianBlurEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(GaussianBlurEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<GaussianBlurEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.GaussianBlurEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.GrayscaleEffect : ValueType {
    public static IObjectReference CreateMarshaler(GrayscaleEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(GrayscaleEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static GrayscaleEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(GrayscaleEffect obj);
    public static MarshalerArray<GrayscaleEffect> CreateMarshalerArray(GrayscaleEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static GrayscaleEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(GrayscaleEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(GrayscaleEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<GrayscaleEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.GrayscaleEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect : ValueType {
    public static IObjectReference CreateMarshaler(HdrToneMapEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(HdrToneMapEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static HdrToneMapEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(HdrToneMapEffect obj);
    public static MarshalerArray<HdrToneMapEffect> CreateMarshalerArray(HdrToneMapEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static HdrToneMapEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(HdrToneMapEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(HdrToneMapEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<HdrToneMapEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.HdrToneMapEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect : ValueType {
    public static IObjectReference CreateMarshaler(HighlightsAndShadowsEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(HighlightsAndShadowsEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static HighlightsAndShadowsEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(HighlightsAndShadowsEffect obj);
    public static MarshalerArray<HighlightsAndShadowsEffect> CreateMarshalerArray(HighlightsAndShadowsEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static HighlightsAndShadowsEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(HighlightsAndShadowsEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(HighlightsAndShadowsEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<HighlightsAndShadowsEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.HueRotationEffect : ValueType {
    public static IObjectReference CreateMarshaler(HueRotationEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(HueRotationEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static HueRotationEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(HueRotationEffect obj);
    public static MarshalerArray<HueRotationEffect> CreateMarshalerArray(HueRotationEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static HueRotationEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(HueRotationEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(HueRotationEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<HueRotationEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.HueRotationEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.HueToRgbEffect : ValueType {
    public static IObjectReference CreateMarshaler(HueToRgbEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(HueToRgbEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static HueToRgbEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(HueToRgbEffect obj);
    public static MarshalerArray<HueToRgbEffect> CreateMarshalerArray(HueToRgbEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static HueToRgbEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(HueToRgbEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(HueToRgbEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<HueToRgbEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.HueToRgbEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("9BA6607E-75C9-5388-892F-DD3440564D98")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_AlphaMask(IObjectReference _obj);
    internal static void set_AlphaMask(IObjectReference _obj, IGraphicsEffectSource value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("CC31105C-0377-5708-8484-1AD8EE3E554B")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BEEB682B-D64C-5C8B-A1FB-332162ED099C")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static float get_MultiplyAmount(IObjectReference _obj);
    internal static void set_MultiplyAmount(IObjectReference _obj, float value);
    internal static float get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source1(IObjectReference _obj);
    internal static void set_Source1(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_Source1Amount(IObjectReference _obj);
    internal static void set_Source1Amount(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source2(IObjectReference _obj);
    internal static void set_Source2(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_Source2Amount(IObjectReference _obj);
    internal static void set_Source2Amount(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IAtlasEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IAtlasEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Rect get_PaddingRectangle(IObjectReference _obj);
    internal static void set_PaddingRectangle(IObjectReference _obj, Rect value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static Rect get_SourceRectangle(IObjectReference _obj);
    internal static void set_SourceRectangle(IObjectReference _obj, Rect value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5673248E-7266-5E49-B2AB-2589D5D875C3")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IBlendEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IBlendEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Background(IObjectReference _obj);
    internal static void set_Background(IObjectReference _obj, IGraphicsEffectSource value);
    internal static IGraphicsEffectSource get_Foreground(IObjectReference _obj);
    internal static void set_Foreground(IObjectReference _obj, IGraphicsEffectSource value);
    internal static BlendEffectMode get_Mode(IObjectReference _obj);
    internal static void set_Mode(IObjectReference _obj, BlendEffectMode value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("31602441-15DB-5B4A-98DD-BA4247548B41")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IBorderEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IBorderEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasEdgeBehavior get_ExtendX(IObjectReference _obj);
    internal static void set_ExtendX(IObjectReference _obj, CanvasEdgeBehavior value);
    internal static CanvasEdgeBehavior get_ExtendY(IObjectReference _obj);
    internal static void set_ExtendY(IObjectReference _obj, CanvasEdgeBehavior value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BECED347-025F-5727-8F7D-498D67DF557E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IBrightnessEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IBrightnessEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_BlackPoint(IObjectReference _obj);
    internal static void set_BlackPoint(IObjectReference _obj, Vector2 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static Vector2 get_WhitePoint(IObjectReference _obj);
    internal static void set_WhitePoint(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("0EF96F8C-9B5E-4BF0-A399-AAD8CE53DB55")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ICanvasEffect {
    public static IntPtr AbiToProjectionVftablePtr;
    private Nullable`1<CanvasBufferPrecision> global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.BufferPrecision { get; private set; }
    private bool global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.CacheOutput { get; private set; }
    private string global::Windows.Graphics.Effects.IGraphicsEffect.Name { get; private set; }
    private static ICanvasEffect();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_InvalidateSourceRectangle_4(IntPtr thisPtr, IntPtr resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetInvalidRectangles_5(IntPtr thisPtr, IntPtr resourceCreator, Int32* __valueElementsSize, IntPtr* valueElements);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetRequiredSourceRectangle_6(IntPtr thisPtr, IntPtr resourceCreator, Rect outputRectangle, IntPtr sourceEffect, UInt32 sourceIndex, Rect sourceBounds, Rect* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetRequiredSourceRectangles_7(IntPtr thisPtr, IntPtr resourceCreator, Rect outputRectangle, int __sourceEffectsSize, IntPtr sourceEffects, int __sourceIndicesSize, IntPtr sourceIndices, int __sourceBoundsSize, IntPtr sourceBounds, Int32* __valueElementsSize, IntPtr* valueElements);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_BufferPrecision_3(IntPtr thisPtr, IntPtr value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_BufferPrecision_2(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_CacheOutput_1(IntPtr thisPtr, byte value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_CacheOutput_0(IntPtr thisPtr, Byte* value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    private sealed virtual override Rect[] global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    private sealed virtual override Rect global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    private sealed virtual override Rect[] global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    private sealed virtual override Nullable`1<CanvasBufferPrecision> global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.get_BufferPrecision();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.get_CacheOutput();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Effects.ICanvasEffect.set_CacheOutput(bool value);
    private sealed virtual override Rect global::Microsoft.Graphics.Canvas.ICanvasImage.GetBounds(ICanvasResourceCreator resourceCreator);
    private sealed virtual override Rect global::Microsoft.Graphics.Canvas.ICanvasImage.GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    private sealed virtual override void global::System.IDisposable.Dispose();
    private sealed virtual override string global::Windows.Graphics.Effects.IGraphicsEffect.get_Name();
    private sealed virtual override void global::Windows.Graphics.Effects.IGraphicsEffect.set_Name(string value);
}
public static class ABI.Microsoft.Graphics.Canvas.Effects.ICanvasEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static void InvalidateSourceRectangle(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public static Rect[] GetInvalidRectangles(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator);
    public static Rect GetRequiredSourceRectangle(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public static Rect[] GetRequiredSourceRectangles(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public static Nullable`1<CanvasBufferPrecision> get_BufferPrecision(IObjectReference _obj);
    public static void set_BufferPrecision(IObjectReference _obj, Nullable`1<CanvasBufferPrecision> value);
    public static bool get_CacheOutput(IObjectReference _obj);
    public static void set_CacheOutput(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("F14B9464-1871-5EAA-9DB6-C0901140E9D3")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IChromaKeyEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static Vector4 get_ColorHdr(IObjectReference _obj);
    internal static void set_ColorHdr(IObjectReference _obj, Vector4 value);
    internal static bool get_Feather(IObjectReference _obj);
    internal static void set_Feather(IObjectReference _obj, bool value);
    internal static bool get_InvertAlpha(IObjectReference _obj);
    internal static void set_InvertAlpha(IObjectReference _obj, bool value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_Tolerance(IObjectReference _obj);
    internal static void set_Tolerance(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6E8BBE37-E1E4-5AD0-B98D-940E3213A54E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static void set_AlphaMode(IObjectReference _obj, CanvasAlphaMode value);
    internal static ColorManagementProfile get_OutputColorProfile(IObjectReference _obj);
    internal static void set_OutputColorProfile(IObjectReference _obj, ColorManagementProfile value);
    internal static ColorManagementRenderingIntent get_OutputRenderingIntent(IObjectReference _obj);
    internal static void set_OutputRenderingIntent(IObjectReference _obj, ColorManagementRenderingIntent value);
    internal static ColorManagementEffectQuality get_Quality(IObjectReference _obj);
    internal static void set_Quality(IObjectReference _obj, ColorManagementEffectQuality value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static ColorManagementProfile get_SourceColorProfile(IObjectReference _obj);
    internal static void set_SourceColorProfile(IObjectReference _obj, ColorManagementProfile value);
    internal static ColorManagementRenderingIntent get_SourceRenderingIntent(IObjectReference _obj);
    internal static void set_SourceRenderingIntent(IObjectReference _obj, ColorManagementRenderingIntent value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("31C7AF98-F2D4-55FC-B129-A70736E6DA05")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsBestQualitySupported(IObjectReference _obj, CanvasDevice device);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5123A56B-B199-47AB-AEBE-D308044423FE")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfile {
}
[GuidAttribute("7A0F1C98-94C6-4621-9877-C51A17823EDF")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ColorManagementProfile Create(IObjectReference _obj, CanvasColorSpace colorSpace);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfileMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasColorSpace get_ColorSpace(IObjectReference _obj);
    internal static ExtendedColorSpace get_ExtendedColorSpace(IObjectReference _obj);
    internal static Byte[] get_IccProfile(IObjectReference _obj);
    internal static Nullable`1<ColorManagementSimpleProfile> get_SimpleProfile(IObjectReference _obj);
    internal static ColorManagementProfileType get_Type(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("94EEF610-03BD-4E82-9479-62A616BE75F1")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ColorManagementProfile CreateCustom(IObjectReference _obj, Byte[] iccProfile);
    internal static ColorManagementProfile CreateSimple(IObjectReference _obj, ColorManagementSimpleProfile simpleProfile);
    internal static ColorManagementProfile CreateExtended(IObjectReference _obj, ExtendedColorSpace colorSpace);
    internal static bool IsSupported(IObjectReference _obj, ColorManagementProfileType type, CanvasDevice device);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("E6AE54C4-883D-588E-B451-E9EBE3830437")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IColorMatrixEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static void set_AlphaMode(IObjectReference _obj, CanvasAlphaMode value);
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static Matrix5x4 get_ColorMatrix(IObjectReference _obj);
    internal static void set_ColorMatrix(IObjectReference _obj, Matrix5x4 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("25F942C7-7FEE-518A-BA7B-22A0060AF7F6")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IColorSourceEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IColorSourceEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static Vector4 get_ColorHdr(IObjectReference _obj);
    internal static void set_ColorHdr(IObjectReference _obj, Vector4 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F8808C48-CDC7-5DB4-807C-B9344FF71984")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ICompositeEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ICompositeEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasComposite get_Mode(IObjectReference _obj);
    internal static void set_Mode(IObjectReference _obj, CanvasComposite value);
    internal static IList`1<IGraphicsEffectSource> get_Sources(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DA8A2B9F-594E-560A-9EAA-1F912408FE79")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IContrastEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IContrastEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_ClampSource(IObjectReference _obj);
    internal static void set_ClampSource(IObjectReference _obj, bool value);
    internal static float get_Contrast(IObjectReference _obj);
    internal static void set_Contrast(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("82961257-A78D-5440-8026-AF57D4A76A9E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static float get_Divisor(IObjectReference _obj);
    internal static void set_Divisor(IObjectReference _obj, float value);
    internal static CanvasImageInterpolation get_InterpolationMode(IObjectReference _obj);
    internal static void set_InterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static int get_KernelHeight(IObjectReference _obj);
    internal static void set_KernelHeight(IObjectReference _obj, int value);
    internal static Single[] get_KernelMatrix(IObjectReference _obj);
    internal static void set_KernelMatrix(IObjectReference _obj, Single[] value);
    internal static Vector2 get_KernelOffset(IObjectReference _obj);
    internal static void set_KernelOffset(IObjectReference _obj, Vector2 value);
    internal static Vector2 get_KernelScale(IObjectReference _obj);
    internal static void set_KernelScale(IObjectReference _obj, Vector2 value);
    internal static int get_KernelWidth(IObjectReference _obj);
    internal static void set_KernelWidth(IObjectReference _obj, int value);
    internal static float get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, float value);
    internal static bool get_PreserveAlpha(IObjectReference _obj);
    internal static void set_PreserveAlpha(IObjectReference _obj, bool value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ICropEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ICropEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static Rect get_SourceRectangle(IObjectReference _obj);
    internal static void set_SourceRectangle(IObjectReference _obj, Rect value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BE161A9F-43D2-5613-8600-D51E3D7CE288")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_CrossFade(IObjectReference _obj);
    internal static void set_CrossFade(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source1(IObjectReference _obj);
    internal static void set_Source1(IObjectReference _obj, IGraphicsEffectSource value);
    internal static IGraphicsEffectSource get_Source2(IObjectReference _obj);
    internal static void set_Source2(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A3B67330-6284-5EF6-99E8-B4B05D2B8BFC")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5D155C4B-0882-506A-A8E1-12E1EAD17F0A")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Angle(IObjectReference _obj);
    internal static void set_Angle(IObjectReference _obj, float value);
    internal static float get_BlurAmount(IObjectReference _obj);
    internal static void set_BlurAmount(IObjectReference _obj, float value);
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static EffectOptimization get_Optimization(IObjectReference _obj);
    internal static void set_Optimization(IObjectReference _obj, EffectOptimization value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7F1F54F9-21B5-5B91-9506-832C536FDDFA")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AlphaDisable(IObjectReference _obj);
    internal static void set_AlphaDisable(IObjectReference _obj, bool value);
    internal static Single[] get_AlphaTable(IObjectReference _obj);
    internal static void set_AlphaTable(IObjectReference _obj, Single[] value);
    internal static bool get_BlueDisable(IObjectReference _obj);
    internal static void set_BlueDisable(IObjectReference _obj, bool value);
    internal static Single[] get_BlueTable(IObjectReference _obj);
    internal static void set_BlueTable(IObjectReference _obj, Single[] value);
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static bool get_GreenDisable(IObjectReference _obj);
    internal static void set_GreenDisable(IObjectReference _obj, bool value);
    internal static Single[] get_GreenTable(IObjectReference _obj);
    internal static void set_GreenTable(IObjectReference _obj, Single[] value);
    internal static bool get_RedDisable(IObjectReference _obj);
    internal static void set_RedDisable(IObjectReference _obj, bool value);
    internal static Single[] get_RedTable(IObjectReference _obj);
    internal static void set_RedTable(IObjectReference _obj, Single[] value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("45F57C50-D4D9-5AF1-8A6B-50378F3498A2")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Amount(IObjectReference _obj);
    internal static void set_Amount(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Displacement(IObjectReference _obj);
    internal static void set_Displacement(IObjectReference _obj, IGraphicsEffectSource value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectChannelSelect get_XChannelSelect(IObjectReference _obj);
    internal static void set_XChannelSelect(IObjectReference _obj, EffectChannelSelect value);
    internal static EffectChannelSelect get_YChannelSelect(IObjectReference _obj);
    internal static void set_YChannelSelect(IObjectReference _obj, EffectChannelSelect value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D501B10B-B445-50F4-8B8F-CDECFCDD1321")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Azimuth(IObjectReference _obj);
    internal static void set_Azimuth(IObjectReference _obj, float value);
    internal static float get_DiffuseAmount(IObjectReference _obj);
    internal static void set_DiffuseAmount(IObjectReference _obj, float value);
    internal static float get_Elevation(IObjectReference _obj);
    internal static void set_Elevation(IObjectReference _obj, float value);
    internal static CanvasImageInterpolation get_HeightMapInterpolationMode(IObjectReference _obj);
    internal static void set_HeightMapInterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Vector2 get_HeightMapKernelSize(IObjectReference _obj);
    internal static void set_HeightMapKernelSize(IObjectReference _obj, Vector2 value);
    internal static float get_HeightMapScale(IObjectReference _obj);
    internal static void set_HeightMapScale(IObjectReference _obj, float value);
    internal static Color get_LightColor(IObjectReference _obj);
    internal static void set_LightColor(IObjectReference _obj, Color value);
    internal static Vector4 get_LightColorHdr(IObjectReference _obj);
    internal static void set_LightColorHdr(IObjectReference _obj, Vector4 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A7A828DF-3072-545F-8D75-86C100F03231")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Azimuth(IObjectReference _obj);
    internal static void set_Azimuth(IObjectReference _obj, float value);
    internal static float get_Elevation(IObjectReference _obj);
    internal static void set_Elevation(IObjectReference _obj, float value);
    internal static CanvasImageInterpolation get_HeightMapInterpolationMode(IObjectReference _obj);
    internal static void set_HeightMapInterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Vector2 get_HeightMapKernelSize(IObjectReference _obj);
    internal static void set_HeightMapKernelSize(IObjectReference _obj, Vector2 value);
    internal static float get_HeightMapScale(IObjectReference _obj);
    internal static void set_HeightMapScale(IObjectReference _obj, float value);
    internal static Color get_LightColor(IObjectReference _obj);
    internal static void set_LightColor(IObjectReference _obj, Color value);
    internal static Vector4 get_LightColorHdr(IObjectReference _obj);
    internal static void set_LightColorHdr(IObjectReference _obj, Vector4 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_SpecularAmount(IObjectReference _obj);
    internal static void set_SpecularAmount(IObjectReference _obj, float value);
    internal static float get_SpecularExponent(IObjectReference _obj);
    internal static void set_SpecularExponent(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("636597CD-F94A-55B6-9CF0-694A53D638EA")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_InterpolationMode(IObjectReference _obj);
    internal static void set_InterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static Vector2 get_SourceDpi(IObjectReference _obj);
    internal static void set_SourceDpi(IObjectReference _obj, Vector2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("69F6CF3A-F38F-5A88-974A-29390B957E5C")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static void set_AlphaMode(IObjectReference _obj, CanvasAlphaMode value);
    internal static float get_Amount(IObjectReference _obj);
    internal static void set_Amount(IObjectReference _obj, float value);
    internal static float get_BlurAmount(IObjectReference _obj);
    internal static void set_BlurAmount(IObjectReference _obj, float value);
    internal static EdgeDetectionEffectMode get_Mode(IObjectReference _obj);
    internal static void set_Mode(IObjectReference _obj, EdgeDetectionEffectMode value);
    internal static bool get_OverlayEdges(IObjectReference _obj);
    internal static void set_OverlayEdges(IObjectReference _obj, bool value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7AF06B86-2C45-49C8-8F44-E15A6D4FA44E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDevice get_Device(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3CB83559-216A-4BCA-9BB6-E233C5AD2C48")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectTransferTable3D CreateFromColors(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Color[] colors, int sizeB, int sizeG, int sizeR);
    internal static EffectTransferTable3D CreateFromBytes(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Byte[] bytes, int sizeB, int sizeG, int sizeR, DirectXPixelFormat format);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("617BFF35-481C-5596-ABA5-00A162349D7B")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IEmbossEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IEmbossEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Amount(IObjectReference _obj);
    internal static void set_Amount(IObjectReference _obj, float value);
    internal static float get_Angle(IObjectReference _obj);
    internal static void set_Angle(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B9E20A03-2232-5FD3-B408-15784B79DBB0")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IExposureEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IExposureEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Exposure(IObjectReference _obj);
    internal static void set_Exposure(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B4576B6B-6C3E-534A-8576-D46DF4FCE93D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IGammaTransferEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_AlphaAmplitude(IObjectReference _obj);
    internal static void set_AlphaAmplitude(IObjectReference _obj, float value);
    internal static bool get_AlphaDisable(IObjectReference _obj);
    internal static void set_AlphaDisable(IObjectReference _obj, bool value);
    internal static float get_AlphaExponent(IObjectReference _obj);
    internal static void set_AlphaExponent(IObjectReference _obj, float value);
    internal static float get_AlphaOffset(IObjectReference _obj);
    internal static void set_AlphaOffset(IObjectReference _obj, float value);
    internal static float get_BlueAmplitude(IObjectReference _obj);
    internal static void set_BlueAmplitude(IObjectReference _obj, float value);
    internal static bool get_BlueDisable(IObjectReference _obj);
    internal static void set_BlueDisable(IObjectReference _obj, bool value);
    internal static float get_BlueExponent(IObjectReference _obj);
    internal static void set_BlueExponent(IObjectReference _obj, float value);
    internal static float get_BlueOffset(IObjectReference _obj);
    internal static void set_BlueOffset(IObjectReference _obj, float value);
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static float get_GreenAmplitude(IObjectReference _obj);
    internal static void set_GreenAmplitude(IObjectReference _obj, float value);
    internal static bool get_GreenDisable(IObjectReference _obj);
    internal static void set_GreenDisable(IObjectReference _obj, bool value);
    internal static float get_GreenExponent(IObjectReference _obj);
    internal static void set_GreenExponent(IObjectReference _obj, float value);
    internal static float get_GreenOffset(IObjectReference _obj);
    internal static void set_GreenOffset(IObjectReference _obj, float value);
    internal static float get_RedAmplitude(IObjectReference _obj);
    internal static void set_RedAmplitude(IObjectReference _obj, float value);
    internal static bool get_RedDisable(IObjectReference _obj);
    internal static void set_RedDisable(IObjectReference _obj, bool value);
    internal static float get_RedExponent(IObjectReference _obj);
    internal static void set_RedExponent(IObjectReference _obj, float value);
    internal static float get_RedOffset(IObjectReference _obj);
    internal static void set_RedOffset(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A82EC394-6734-5830-9123-2C82B27DD3C0")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_BlurAmount(IObjectReference _obj);
    internal static void set_BlurAmount(IObjectReference _obj, float value);
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static EffectOptimization get_Optimization(IObjectReference _obj);
    internal static void set_Optimization(IObjectReference _obj, EffectOptimization value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("78E13B83-0638-53F8-B0B3-5B0B320A9AD2")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IGrayscaleEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2004FAAC-663E-5DF4-B4CD-A5AFBFD9341F")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static HdrToneMapEffectDisplayMode get_DisplayMode(IObjectReference _obj);
    internal static void set_DisplayMode(IObjectReference _obj, HdrToneMapEffectDisplayMode value);
    internal static float get_InputMaxLuminance(IObjectReference _obj);
    internal static void set_InputMaxLuminance(IObjectReference _obj, float value);
    internal static float get_OutputMaxLuminance(IObjectReference _obj);
    internal static void set_OutputMaxLuminance(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0181F02F-0A7E-55E1-8D2D-42AB99739B27")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7F90BE14-267E-5088-BC36-2E0AAD869B52")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Clarity(IObjectReference _obj);
    internal static void set_Clarity(IObjectReference _obj, float value);
    internal static float get_Highlights(IObjectReference _obj);
    internal static void set_Highlights(IObjectReference _obj, float value);
    internal static float get_MaskBlurAmount(IObjectReference _obj);
    internal static void set_MaskBlurAmount(IObjectReference _obj, float value);
    internal static float get_Shadows(IObjectReference _obj);
    internal static void set_Shadows(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static bool get_SourceIsLinearGamma(IObjectReference _obj);
    internal static void set_SourceIsLinearGamma(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C172EBF2-E35F-58AE-AD2C-561ECEAF2694")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IHueRotationEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IHueRotationEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Angle(IObjectReference _obj);
    internal static void set_Angle(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1E97C12C-B743-53D0-88C4-8435272B0A3D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IHueToRgbEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectHueColorSpace get_SourceColorSpace(IObjectReference _obj);
    internal static void set_SourceColorSpace(IObjectReference _obj, EffectHueColorSpace value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D4ADCDFC-0F60-524D-936A-7F2736AD33D8")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IInvertEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IInvertEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("43D27AD0-8937-5FDB-876A-4E91CB47540C")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ILinearTransferEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AlphaDisable(IObjectReference _obj);
    internal static void set_AlphaDisable(IObjectReference _obj, bool value);
    internal static float get_AlphaOffset(IObjectReference _obj);
    internal static void set_AlphaOffset(IObjectReference _obj, float value);
    internal static float get_AlphaSlope(IObjectReference _obj);
    internal static void set_AlphaSlope(IObjectReference _obj, float value);
    internal static bool get_BlueDisable(IObjectReference _obj);
    internal static void set_BlueDisable(IObjectReference _obj, bool value);
    internal static float get_BlueOffset(IObjectReference _obj);
    internal static void set_BlueOffset(IObjectReference _obj, float value);
    internal static float get_BlueSlope(IObjectReference _obj);
    internal static void set_BlueSlope(IObjectReference _obj, float value);
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static bool get_GreenDisable(IObjectReference _obj);
    internal static void set_GreenDisable(IObjectReference _obj, bool value);
    internal static float get_GreenOffset(IObjectReference _obj);
    internal static void set_GreenOffset(IObjectReference _obj, float value);
    internal static float get_GreenSlope(IObjectReference _obj);
    internal static void set_GreenSlope(IObjectReference _obj, float value);
    internal static bool get_RedDisable(IObjectReference _obj);
    internal static void set_RedDisable(IObjectReference _obj, bool value);
    internal static float get_RedOffset(IObjectReference _obj);
    internal static void set_RedOffset(IObjectReference _obj, float value);
    internal static float get_RedSlope(IObjectReference _obj);
    internal static void set_RedSlope(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("22364900-AC51-5BD3-8BD2-D626FC9A65F9")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FF065FDB-62C8-5808-921E-49EFA43A3D34")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IMorphologyEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IMorphologyEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_Height(IObjectReference _obj);
    internal static void set_Height(IObjectReference _obj, int value);
    internal static MorphologyEffectMode get_Mode(IObjectReference _obj);
    internal static void set_Mode(IObjectReference _obj, MorphologyEffectMode value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static int get_Width(IObjectReference _obj);
    internal static void set_Width(IObjectReference _obj, int value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.InvertEffect : ValueType {
    public static IObjectReference CreateMarshaler(InvertEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(InvertEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static InvertEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(InvertEffect obj);
    public static MarshalerArray<InvertEffect> CreateMarshalerArray(InvertEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static InvertEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(InvertEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(InvertEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<InvertEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.InvertEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("94B6AD75-C540-51B8-A9D1-544174ADC68D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IOpacityEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IOpacityEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Opacity(IObjectReference _obj);
    internal static void set_Opacity(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("91A7CDE3-B9B7-5437-8878-FB2E14100E6D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IOpacityEffectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("099F3299-9B0A-5ED3-B044-4A6FC96F8362")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Rect get_OpaqueRectangle(IObjectReference _obj);
    internal static void set_OpaqueRectangle(IObjectReference _obj, Rect value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FC8C3C31-FA96-45E2-8B72-1741C65CEE8E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect {
}
[GuidAttribute("9D1727E5-489D-4ABC-B129-5361E3534AF4")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static PixelShaderEffect Create(IObjectReference _obj, Byte[] shaderCode);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsSupported(IObjectReference _obj, CanvasDevice device);
    internal static int get_MaxSamplerOffset(IObjectReference _obj);
    internal static void set_MaxSamplerOffset(IObjectReference _obj, int value);
    internal static IDictionary`2<string, object> get_Properties(IObjectReference _obj);
    internal static IGraphicsEffectSource get_Source1(IObjectReference _obj);
    internal static void set_Source1(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source1BorderMode(IObjectReference _obj);
    internal static void set_Source1BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source1Interpolation(IObjectReference _obj);
    internal static void set_Source1Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source1Mapping(IObjectReference _obj);
    internal static void set_Source1Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    internal static IGraphicsEffectSource get_Source2(IObjectReference _obj);
    internal static void set_Source2(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source2BorderMode(IObjectReference _obj);
    internal static void set_Source2BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source2Interpolation(IObjectReference _obj);
    internal static void set_Source2Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source2Mapping(IObjectReference _obj);
    internal static void set_Source2Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    internal static IGraphicsEffectSource get_Source3(IObjectReference _obj);
    internal static void set_Source3(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source3BorderMode(IObjectReference _obj);
    internal static void set_Source3BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source3Interpolation(IObjectReference _obj);
    internal static void set_Source3Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source3Mapping(IObjectReference _obj);
    internal static void set_Source3Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    internal static IGraphicsEffectSource get_Source4(IObjectReference _obj);
    internal static void set_Source4(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source4BorderMode(IObjectReference _obj);
    internal static void set_Source4BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source4Interpolation(IObjectReference _obj);
    internal static void set_Source4Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source4Mapping(IObjectReference _obj);
    internal static void set_Source4Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    internal static IGraphicsEffectSource get_Source5(IObjectReference _obj);
    internal static void set_Source5(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source5BorderMode(IObjectReference _obj);
    internal static void set_Source5BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source5Interpolation(IObjectReference _obj);
    internal static void set_Source5Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source5Mapping(IObjectReference _obj);
    internal static void set_Source5Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    internal static IGraphicsEffectSource get_Source6(IObjectReference _obj);
    internal static void set_Source6(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source6BorderMode(IObjectReference _obj);
    internal static void set_Source6BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source6Interpolation(IObjectReference _obj);
    internal static void set_Source6Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source6Mapping(IObjectReference _obj);
    internal static void set_Source6Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    internal static IGraphicsEffectSource get_Source7(IObjectReference _obj);
    internal static void set_Source7(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source7BorderMode(IObjectReference _obj);
    internal static void set_Source7BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source7Interpolation(IObjectReference _obj);
    internal static void set_Source7Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source7Mapping(IObjectReference _obj);
    internal static void set_Source7Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    internal static IGraphicsEffectSource get_Source8(IObjectReference _obj);
    internal static void set_Source8(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectBorderMode get_Source8BorderMode(IObjectReference _obj);
    internal static void set_Source8BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_Source8Interpolation(IObjectReference _obj);
    internal static void set_Source8Interpolation(IObjectReference _obj, CanvasImageInterpolation value);
    internal static SamplerCoordinateMapping get_Source8Mapping(IObjectReference _obj);
    internal static void set_Source8Mapping(IObjectReference _obj, SamplerCoordinateMapping value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6CCE09EC-F847-5661-AF4B-531DD3DD7D6E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_DiffuseAmount(IObjectReference _obj);
    internal static void set_DiffuseAmount(IObjectReference _obj, float value);
    internal static CanvasImageInterpolation get_HeightMapInterpolationMode(IObjectReference _obj);
    internal static void set_HeightMapInterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Vector2 get_HeightMapKernelSize(IObjectReference _obj);
    internal static void set_HeightMapKernelSize(IObjectReference _obj, Vector2 value);
    internal static float get_HeightMapScale(IObjectReference _obj);
    internal static void set_HeightMapScale(IObjectReference _obj, float value);
    internal static Color get_LightColor(IObjectReference _obj);
    internal static void set_LightColor(IObjectReference _obj, Color value);
    internal static Vector4 get_LightColorHdr(IObjectReference _obj);
    internal static void set_LightColorHdr(IObjectReference _obj, Vector4 value);
    internal static Vector3 get_LightPosition(IObjectReference _obj);
    internal static void set_LightPosition(IObjectReference _obj, Vector3 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EC8AFE9B-8501-5286-A43C-1AFFF7420AD6")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IPointSpecularEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasImageInterpolation get_HeightMapInterpolationMode(IObjectReference _obj);
    internal static void set_HeightMapInterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Vector2 get_HeightMapKernelSize(IObjectReference _obj);
    internal static void set_HeightMapKernelSize(IObjectReference _obj, Vector2 value);
    internal static float get_HeightMapScale(IObjectReference _obj);
    internal static void set_HeightMapScale(IObjectReference _obj, float value);
    internal static Color get_LightColor(IObjectReference _obj);
    internal static void set_LightColor(IObjectReference _obj, Color value);
    internal static Vector4 get_LightColorHdr(IObjectReference _obj);
    internal static void set_LightColorHdr(IObjectReference _obj, Vector4 value);
    internal static Vector3 get_LightPosition(IObjectReference _obj);
    internal static void set_LightPosition(IObjectReference _obj, Vector3 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_SpecularAmount(IObjectReference _obj);
    internal static void set_SpecularAmount(IObjectReference _obj, float value);
    internal static float get_SpecularExponent(IObjectReference _obj);
    internal static void set_SpecularExponent(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2F631A3B-C89A-507C-9756-299B61434FA4")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IPosterizeEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IPosterizeEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static int get_BlueValueCount(IObjectReference _obj);
    internal static void set_BlueValueCount(IObjectReference _obj, int value);
    internal static int get_GreenValueCount(IObjectReference _obj);
    internal static void set_GreenValueCount(IObjectReference _obj, int value);
    internal static int get_RedValueCount(IObjectReference _obj);
    internal static void set_RedValueCount(IObjectReference _obj, int value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IPremultiplyEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7CAEADC6-9EB3-5895-B876-F485C9574847")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IRgbToHueEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectHueColorSpace get_OutputColorSpace(IObjectReference _obj);
    internal static void set_OutputColorSpace(IObjectReference _obj, EffectHueColorSpace value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F85A5ED7-7212-57A6-B357-61038961C58D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ISaturationEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ISaturationEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Saturation(IObjectReference _obj);
    internal static void set_Saturation(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7522AE90-BEC2-512C-BCC0-4D6A97E3ED34")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IScaleEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IScaleEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static Vector2 get_CenterPoint(IObjectReference _obj);
    internal static void set_CenterPoint(IObjectReference _obj, Vector2 value);
    internal static CanvasImageInterpolation get_InterpolationMode(IObjectReference _obj);
    internal static void set_InterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Vector2 get_Scale(IObjectReference _obj);
    internal static void set_Scale(IObjectReference _obj, Vector2 value);
    internal static float get_Sharpness(IObjectReference _obj);
    internal static void set_Sharpness(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F933471F-A7AF-5521-BE79-B0DA22976CFF")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ISepiaEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ISepiaEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static void set_AlphaMode(IObjectReference _obj, CanvasAlphaMode value);
    internal static float get_Intensity(IObjectReference _obj);
    internal static void set_Intensity(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3947C621-78DA-5489-9927-BE655F4576E2")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IShadowEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IShadowEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_BlurAmount(IObjectReference _obj);
    internal static void set_BlurAmount(IObjectReference _obj, float value);
    internal static EffectOptimization get_Optimization(IObjectReference _obj);
    internal static void set_Optimization(IObjectReference _obj, EffectOptimization value);
    internal static Color get_ShadowColor(IObjectReference _obj);
    internal static void set_ShadowColor(IObjectReference _obj, Color value);
    internal static Vector4 get_ShadowColorHdr(IObjectReference _obj);
    internal static void set_ShadowColorHdr(IObjectReference _obj, Vector4 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7EFEF0A1-7578-5F62-8364-46145674EF7E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ISharpenEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ISharpenEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Amount(IObjectReference _obj);
    internal static void set_Amount(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_Threshold(IObjectReference _obj);
    internal static void set_Threshold(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_DiffuseAmount(IObjectReference _obj);
    internal static void set_DiffuseAmount(IObjectReference _obj, float value);
    internal static float get_Focus(IObjectReference _obj);
    internal static void set_Focus(IObjectReference _obj, float value);
    internal static CanvasImageInterpolation get_HeightMapInterpolationMode(IObjectReference _obj);
    internal static void set_HeightMapInterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Vector2 get_HeightMapKernelSize(IObjectReference _obj);
    internal static void set_HeightMapKernelSize(IObjectReference _obj, Vector2 value);
    internal static float get_HeightMapScale(IObjectReference _obj);
    internal static void set_HeightMapScale(IObjectReference _obj, float value);
    internal static Color get_LightColor(IObjectReference _obj);
    internal static void set_LightColor(IObjectReference _obj, Color value);
    internal static Vector4 get_LightColorHdr(IObjectReference _obj);
    internal static void set_LightColorHdr(IObjectReference _obj, Vector4 value);
    internal static Vector3 get_LightPosition(IObjectReference _obj);
    internal static void set_LightPosition(IObjectReference _obj, Vector3 value);
    internal static Vector3 get_LightTarget(IObjectReference _obj);
    internal static void set_LightTarget(IObjectReference _obj, Vector3 value);
    internal static float get_LimitingConeAngle(IObjectReference _obj);
    internal static void set_LimitingConeAngle(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("83AE4CD0-80AA-5783-8572-F15E5F85329E")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Focus(IObjectReference _obj);
    internal static void set_Focus(IObjectReference _obj, float value);
    internal static CanvasImageInterpolation get_HeightMapInterpolationMode(IObjectReference _obj);
    internal static void set_HeightMapInterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static Vector2 get_HeightMapKernelSize(IObjectReference _obj);
    internal static void set_HeightMapKernelSize(IObjectReference _obj, Vector2 value);
    internal static float get_HeightMapScale(IObjectReference _obj);
    internal static void set_HeightMapScale(IObjectReference _obj, float value);
    internal static Color get_LightColor(IObjectReference _obj);
    internal static void set_LightColor(IObjectReference _obj, Color value);
    internal static Vector4 get_LightColorHdr(IObjectReference _obj);
    internal static void set_LightColorHdr(IObjectReference _obj, Vector4 value);
    internal static Vector3 get_LightPosition(IObjectReference _obj);
    internal static void set_LightPosition(IObjectReference _obj, Vector3 value);
    internal static Vector3 get_LightTarget(IObjectReference _obj);
    internal static void set_LightTarget(IObjectReference _obj, Vector3 value);
    internal static float get_LimitingConeAngle(IObjectReference _obj);
    internal static void set_LimitingConeAngle(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_SpecularAmount(IObjectReference _obj);
    internal static void set_SpecularAmount(IObjectReference _obj, float value);
    internal static float get_SpecularExponent(IObjectReference _obj);
    internal static void set_SpecularExponent(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("965FC262-2EBA-59E6-935F-2389CB5A305A")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IStraightenEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IStraightenEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Angle(IObjectReference _obj);
    internal static void set_Angle(IObjectReference _obj, float value);
    internal static CanvasImageInterpolation get_InterpolationMode(IObjectReference _obj);
    internal static void set_InterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static bool get_MaintainSize(IObjectReference _obj);
    internal static void set_MaintainSize(IObjectReference _obj, bool value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EF09C6E0-9437-53F7-B7B4-B53C79A0BC37")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static void set_AlphaMode(IObjectReference _obj, CanvasAlphaMode value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static EffectTransferTable3D get_Table(IObjectReference _obj);
    internal static void set_Table(IObjectReference _obj, EffectTransferTable3D value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BF0B63B6-FE77-5198-A2A1-3FB80C268B8F")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITableTransferEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITableTransferEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_AlphaDisable(IObjectReference _obj);
    internal static void set_AlphaDisable(IObjectReference _obj, bool value);
    internal static Single[] get_AlphaTable(IObjectReference _obj);
    internal static void set_AlphaTable(IObjectReference _obj, Single[] value);
    internal static bool get_BlueDisable(IObjectReference _obj);
    internal static void set_BlueDisable(IObjectReference _obj, bool value);
    internal static Single[] get_BlueTable(IObjectReference _obj);
    internal static void set_BlueTable(IObjectReference _obj, Single[] value);
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static bool get_GreenDisable(IObjectReference _obj);
    internal static void set_GreenDisable(IObjectReference _obj, bool value);
    internal static Single[] get_GreenTable(IObjectReference _obj);
    internal static void set_GreenTable(IObjectReference _obj, Single[] value);
    internal static bool get_RedDisable(IObjectReference _obj);
    internal static void set_RedDisable(IObjectReference _obj, bool value);
    internal static Single[] get_RedTable(IObjectReference _obj);
    internal static void set_RedTable(IObjectReference _obj, Single[] value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8AE43E02-2619-5D78-8980-4ED569549BD8")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static float get_Temperature(IObjectReference _obj);
    internal static void set_Temperature(IObjectReference _obj, float value);
    internal static float get_Tint(IObjectReference _obj);
    internal static void set_Tint(IObjectReference _obj, float value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("78A809CB-1154-5AD6-A880-E3A175772815")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITileEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITileEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static Rect get_SourceRectangle(IObjectReference _obj);
    internal static void set_SourceRectangle(IObjectReference _obj, Rect value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("729A21EA-C61E-5308-9EAE-D638AA1F5B8C")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITintEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITintEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_ClampOutput(IObjectReference _obj);
    internal static void set_ClampOutput(IObjectReference _obj, bool value);
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static Vector4 get_ColorHdr(IObjectReference _obj);
    internal static void set_ColorHdr(IObjectReference _obj, Vector4 value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("65E31771-4BAF-5C8C-93F4-3B874E29F68D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITintEffectStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITintEffectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4467D118-33E7-5B1A-87C2-0F1F0497353D")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITransform2DEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITransform2DEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_InterpolationMode(IObjectReference _obj);
    internal static void set_InterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static float get_Sharpness(IObjectReference _obj);
    internal static void set_Sharpness(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static Matrix3x2 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix3x2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITransform3DEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITransform3DEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static EffectBorderMode get_BorderMode(IObjectReference _obj);
    internal static void set_BorderMode(IObjectReference _obj, EffectBorderMode value);
    internal static CanvasImageInterpolation get_InterpolationMode(IObjectReference _obj);
    internal static void set_InterpolationMode(IObjectReference _obj, CanvasImageInterpolation value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    internal static Matrix4x4 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix4x4 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("1CB1B33D-20E9-564B-856E-37E9FA1D0016")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.ITurbulenceEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2 get_Frequency(IObjectReference _obj);
    internal static void set_Frequency(IObjectReference _obj, Vector2 value);
    internal static TurbulenceEffectNoise get_Noise(IObjectReference _obj);
    internal static void set_Noise(IObjectReference _obj, TurbulenceEffectNoise value);
    internal static int get_Octaves(IObjectReference _obj);
    internal static void set_Octaves(IObjectReference _obj, int value);
    internal static Vector2 get_Offset(IObjectReference _obj);
    internal static void set_Offset(IObjectReference _obj, Vector2 value);
    internal static int get_Seed(IObjectReference _obj);
    internal static void set_Seed(IObjectReference _obj, int value);
    internal static Vector2 get_Size(IObjectReference _obj);
    internal static void set_Size(IObjectReference _obj, Vector2 value);
    internal static bool get_Tileable(IObjectReference _obj);
    internal static void set_Tileable(IObjectReference _obj, bool value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("73098BB4-DCF1-5403-AF44-3344D2982D40")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("574D0F9F-EEC7-5989-AC53-135868CF5E0C")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IVignetteEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IVignetteEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_Amount(IObjectReference _obj);
    internal static void set_Amount(IObjectReference _obj, float value);
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static Vector4 get_ColorHdr(IObjectReference _obj);
    internal static void set_ColorHdr(IObjectReference _obj, Vector4 value);
    internal static float get_Curve(IObjectReference _obj);
    internal static void set_Curve(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0B0B945C-96F7-56B4-8317-01DE629FC904")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static float get_InputWhiteLevel(IObjectReference _obj);
    internal static void set_InputWhiteLevel(IObjectReference _obj, float value);
    internal static float get_OutputWhiteLevel(IObjectReference _obj);
    internal static void set_OutputWhiteLevel(IObjectReference _obj, float value);
    internal static IGraphicsEffectSource get_Source(IObjectReference _obj);
    internal static void set_Source(IObjectReference _obj, IGraphicsEffectSource value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("58DACBF8-637A-5DA7-9457-1EEEDF5A191C")]
internal interface ABI.Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool get_IsSupported(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.LinearTransferEffect : ValueType {
    public static IObjectReference CreateMarshaler(LinearTransferEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(LinearTransferEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static LinearTransferEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(LinearTransferEffect obj);
    public static MarshalerArray<LinearTransferEffect> CreateMarshalerArray(LinearTransferEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static LinearTransferEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(LinearTransferEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(LinearTransferEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<LinearTransferEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.LinearTransferEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect : ValueType {
    public static IObjectReference CreateMarshaler(LuminanceToAlphaEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(LuminanceToAlphaEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static LuminanceToAlphaEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(LuminanceToAlphaEffect obj);
    public static MarshalerArray<LuminanceToAlphaEffect> CreateMarshalerArray(LuminanceToAlphaEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static LuminanceToAlphaEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(LuminanceToAlphaEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(LuminanceToAlphaEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<LuminanceToAlphaEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.MorphologyEffect : ValueType {
    public static IObjectReference CreateMarshaler(MorphologyEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(MorphologyEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static MorphologyEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(MorphologyEffect obj);
    public static MarshalerArray<MorphologyEffect> CreateMarshalerArray(MorphologyEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static MorphologyEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(MorphologyEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(MorphologyEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<MorphologyEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.MorphologyEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.OpacityEffect : ValueType {
    public static IObjectReference CreateMarshaler(OpacityEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(OpacityEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static OpacityEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(OpacityEffect obj);
    public static MarshalerArray<OpacityEffect> CreateMarshalerArray(OpacityEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static OpacityEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(OpacityEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(OpacityEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<OpacityEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.OpacityEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect : ValueType {
    public static IObjectReference CreateMarshaler(OpacityMetadataEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(OpacityMetadataEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static OpacityMetadataEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(OpacityMetadataEffect obj);
    public static MarshalerArray<OpacityMetadataEffect> CreateMarshalerArray(OpacityMetadataEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static OpacityMetadataEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(OpacityMetadataEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(OpacityMetadataEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<OpacityMetadataEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.PixelShaderEffect : ValueType {
    public static IObjectReference CreateMarshaler(PixelShaderEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(PixelShaderEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PixelShaderEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PixelShaderEffect obj);
    public static MarshalerArray<PixelShaderEffect> CreateMarshalerArray(PixelShaderEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PixelShaderEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(PixelShaderEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PixelShaderEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PixelShaderEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.PixelShaderEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect : ValueType {
    public static IObjectReference CreateMarshaler(PointDiffuseEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(PointDiffuseEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PointDiffuseEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PointDiffuseEffect obj);
    public static MarshalerArray<PointDiffuseEffect> CreateMarshalerArray(PointDiffuseEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PointDiffuseEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(PointDiffuseEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PointDiffuseEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PointDiffuseEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.PointDiffuseEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.PointSpecularEffect : ValueType {
    public static IObjectReference CreateMarshaler(PointSpecularEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(PointSpecularEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PointSpecularEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PointSpecularEffect obj);
    public static MarshalerArray<PointSpecularEffect> CreateMarshalerArray(PointSpecularEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PointSpecularEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(PointSpecularEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PointSpecularEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PointSpecularEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.PointSpecularEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.PosterizeEffect : ValueType {
    public static IObjectReference CreateMarshaler(PosterizeEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(PosterizeEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PosterizeEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PosterizeEffect obj);
    public static MarshalerArray<PosterizeEffect> CreateMarshalerArray(PosterizeEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PosterizeEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(PosterizeEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PosterizeEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PosterizeEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.PosterizeEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.PremultiplyEffect : ValueType {
    public static IObjectReference CreateMarshaler(PremultiplyEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(PremultiplyEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static PremultiplyEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(PremultiplyEffect obj);
    public static MarshalerArray<PremultiplyEffect> CreateMarshalerArray(PremultiplyEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static PremultiplyEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(PremultiplyEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(PremultiplyEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<PremultiplyEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.PremultiplyEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.RgbToHueEffect : ValueType {
    public static IObjectReference CreateMarshaler(RgbToHueEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(RgbToHueEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static RgbToHueEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(RgbToHueEffect obj);
    public static MarshalerArray<RgbToHueEffect> CreateMarshalerArray(RgbToHueEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static RgbToHueEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(RgbToHueEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(RgbToHueEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<RgbToHueEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.RgbToHueEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.SaturationEffect : ValueType {
    public static IObjectReference CreateMarshaler(SaturationEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(SaturationEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SaturationEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SaturationEffect obj);
    public static MarshalerArray<SaturationEffect> CreateMarshalerArray(SaturationEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SaturationEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(SaturationEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SaturationEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SaturationEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.SaturationEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ScaleEffect : ValueType {
    public static IObjectReference CreateMarshaler(ScaleEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ScaleEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ScaleEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ScaleEffect obj);
    public static MarshalerArray<ScaleEffect> CreateMarshalerArray(ScaleEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ScaleEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ScaleEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ScaleEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ScaleEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ScaleEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.SepiaEffect : ValueType {
    public static IObjectReference CreateMarshaler(SepiaEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(SepiaEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SepiaEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SepiaEffect obj);
    public static MarshalerArray<SepiaEffect> CreateMarshalerArray(SepiaEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SepiaEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(SepiaEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SepiaEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SepiaEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.SepiaEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.ShadowEffect : ValueType {
    public static IObjectReference CreateMarshaler(ShadowEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(ShadowEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static ShadowEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(ShadowEffect obj);
    public static MarshalerArray<ShadowEffect> CreateMarshalerArray(ShadowEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static ShadowEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(ShadowEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(ShadowEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<ShadowEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.ShadowEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.SharpenEffect : ValueType {
    public static IObjectReference CreateMarshaler(SharpenEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(SharpenEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SharpenEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SharpenEffect obj);
    public static MarshalerArray<SharpenEffect> CreateMarshalerArray(SharpenEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SharpenEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(SharpenEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SharpenEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SharpenEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.SharpenEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect : ValueType {
    public static IObjectReference CreateMarshaler(SpotDiffuseEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(SpotDiffuseEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SpotDiffuseEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SpotDiffuseEffect obj);
    public static MarshalerArray<SpotDiffuseEffect> CreateMarshalerArray(SpotDiffuseEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SpotDiffuseEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(SpotDiffuseEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SpotDiffuseEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SpotDiffuseEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect : ValueType {
    public static IObjectReference CreateMarshaler(SpotSpecularEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(SpotSpecularEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static SpotSpecularEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(SpotSpecularEffect obj);
    public static MarshalerArray<SpotSpecularEffect> CreateMarshalerArray(SpotSpecularEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static SpotSpecularEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(SpotSpecularEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(SpotSpecularEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<SpotSpecularEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.SpotSpecularEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.StraightenEffect : ValueType {
    public static IObjectReference CreateMarshaler(StraightenEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(StraightenEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static StraightenEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(StraightenEffect obj);
    public static MarshalerArray<StraightenEffect> CreateMarshalerArray(StraightenEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static StraightenEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(StraightenEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(StraightenEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<StraightenEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.StraightenEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect : ValueType {
    public static IObjectReference CreateMarshaler(TableTransfer3DEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(TableTransfer3DEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static TableTransfer3DEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(TableTransfer3DEffect obj);
    public static MarshalerArray<TableTransfer3DEffect> CreateMarshalerArray(TableTransfer3DEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static TableTransfer3DEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(TableTransfer3DEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(TableTransfer3DEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<TableTransfer3DEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.TableTransferEffect : ValueType {
    public static IObjectReference CreateMarshaler(TableTransferEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(TableTransferEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static TableTransferEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(TableTransferEffect obj);
    public static MarshalerArray<TableTransferEffect> CreateMarshalerArray(TableTransferEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static TableTransferEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(TableTransferEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(TableTransferEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<TableTransferEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.TableTransferEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect : ValueType {
    public static IObjectReference CreateMarshaler(TemperatureAndTintEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(TemperatureAndTintEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static TemperatureAndTintEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(TemperatureAndTintEffect obj);
    public static MarshalerArray<TemperatureAndTintEffect> CreateMarshalerArray(TemperatureAndTintEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static TemperatureAndTintEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(TemperatureAndTintEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(TemperatureAndTintEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<TemperatureAndTintEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.TileEffect : ValueType {
    public static IObjectReference CreateMarshaler(TileEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(TileEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static TileEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(TileEffect obj);
    public static MarshalerArray<TileEffect> CreateMarshalerArray(TileEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static TileEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(TileEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(TileEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<TileEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.TileEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.TintEffect : ValueType {
    public static IObjectReference CreateMarshaler(TintEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(TintEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static TintEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(TintEffect obj);
    public static MarshalerArray<TintEffect> CreateMarshalerArray(TintEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static TintEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(TintEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(TintEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<TintEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.TintEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.Transform2DEffect : ValueType {
    public static IObjectReference CreateMarshaler(Transform2DEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(Transform2DEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Transform2DEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Transform2DEffect obj);
    public static MarshalerArray<Transform2DEffect> CreateMarshalerArray(Transform2DEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Transform2DEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(Transform2DEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Transform2DEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Transform2DEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.Transform2DEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.Transform3DEffect : ValueType {
    public static IObjectReference CreateMarshaler(Transform3DEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(Transform3DEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static Transform3DEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(Transform3DEffect obj);
    public static MarshalerArray<Transform3DEffect> CreateMarshalerArray(Transform3DEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static Transform3DEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(Transform3DEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(Transform3DEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<Transform3DEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.Transform3DEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.TurbulenceEffect : ValueType {
    public static IObjectReference CreateMarshaler(TurbulenceEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(TurbulenceEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static TurbulenceEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(TurbulenceEffect obj);
    public static MarshalerArray<TurbulenceEffect> CreateMarshalerArray(TurbulenceEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static TurbulenceEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(TurbulenceEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(TurbulenceEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<TurbulenceEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.TurbulenceEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect : ValueType {
    public static IObjectReference CreateMarshaler(UnPremultiplyEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(UnPremultiplyEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static UnPremultiplyEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(UnPremultiplyEffect obj);
    public static MarshalerArray<UnPremultiplyEffect> CreateMarshalerArray(UnPremultiplyEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static UnPremultiplyEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(UnPremultiplyEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(UnPremultiplyEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<UnPremultiplyEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.VignetteEffect : ValueType {
    public static IObjectReference CreateMarshaler(VignetteEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(VignetteEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static VignetteEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(VignetteEffect obj);
    public static MarshalerArray<VignetteEffect> CreateMarshalerArray(VignetteEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static VignetteEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(VignetteEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(VignetteEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<VignetteEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.VignetteEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect : ValueType {
    public static IObjectReference CreateMarshaler(WhiteLevelAdjustmentEffect obj);
    public static ObjectReferenceValue CreateMarshaler2(WhiteLevelAdjustmentEffect obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static WhiteLevelAdjustmentEffect FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(WhiteLevelAdjustmentEffect obj);
    public static MarshalerArray<WhiteLevelAdjustmentEffect> CreateMarshalerArray(WhiteLevelAdjustmentEffect[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static WhiteLevelAdjustmentEffect[] FromAbiArray(object box);
    public static void CopyAbiArray(WhiteLevelAdjustmentEffect[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(WhiteLevelAdjustmentEffect[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<WhiteLevelAdjustmentEffect> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffectRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CanvasCachedGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasCachedGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasCachedGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasCachedGeometry obj);
    public static MarshalerArray<CanvasCachedGeometry> CreateMarshalerArray(CanvasCachedGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasCachedGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasCachedGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasCachedGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasCachedGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry : ValueType {
    public static IObjectReference CreateMarshaler(CanvasGeometry obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasGeometry obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasGeometry FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasGeometry obj);
    public static MarshalerArray<CanvasGeometry> CreateMarshalerArray(CanvasGeometry[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasGeometry[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasGeometry[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasGeometry[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasGeometry> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh : ValueType {
    public static IObjectReference CreateMarshaler(CanvasGradientMesh obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasGradientMesh obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasGradientMesh FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasGradientMesh obj);
    public static MarshalerArray<CanvasGradientMesh> CreateMarshalerArray(CanvasGradientMesh[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasGradientMesh[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasGradientMesh[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasGradientMesh[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasGradientMesh> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder : ValueType {
    public static IObjectReference CreateMarshaler(CanvasPathBuilder obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasPathBuilder obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasPathBuilder FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasPathBuilder obj);
    public static MarshalerArray<CanvasPathBuilder> CreateMarshalerArray(CanvasPathBuilder[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasPathBuilder[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasPathBuilder[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasPathBuilder[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasPathBuilder> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilderRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle : ValueType {
    public static IObjectReference CreateMarshaler(CanvasStrokeStyle obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasStrokeStyle obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasStrokeStyle FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasStrokeStyle obj);
    public static MarshalerArray<CanvasStrokeStyle> CreateMarshalerArray(CanvasStrokeStyle[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasStrokeStyle[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasStrokeStyle[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasStrokeStyle[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasStrokeStyle> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyleRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("BA6CB114-E1A1-448D-AB7C-8D2B92674119")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDevice get_Device(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("80BA1060-A9D7-41BA-9372-EC3FC1744E5D")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasCachedGeometry CreateFill(IObjectReference _obj, CanvasGeometry geometry);
    internal static CanvasCachedGeometry CreateFill(IObjectReference _obj, CanvasGeometry geometry, float flatteningTolerance);
    internal static CanvasCachedGeometry CreateStroke(IObjectReference _obj, CanvasGeometry geometry, float strokeWidth);
    internal static CanvasCachedGeometry CreateStroke(IObjectReference _obj, CanvasGeometry geometry, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static CanvasCachedGeometry CreateStroke(IObjectReference _obj, CanvasGeometry geometry, float strokeWidth, CanvasStrokeStyle strokeStyle, float flatteningTolerance);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("74EA89FA-C87C-4D0D-9057-2743B8DB67EE")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasGeometry CombineWith(IObjectReference _obj, CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, CanvasGeometryCombine combine);
    internal static CanvasGeometry CombineWith(IObjectReference _obj, CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, CanvasGeometryCombine combine, float flatteningTolerance);
    internal static CanvasGeometry Stroke(IObjectReference _obj, float strokeWidth);
    internal static CanvasGeometry Stroke(IObjectReference _obj, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static CanvasGeometry Stroke(IObjectReference _obj, float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    internal static CanvasGeometry Outline(IObjectReference _obj);
    internal static CanvasGeometry Outline(IObjectReference _obj, Matrix3x2 transform, float flatteningTolerance);
    internal static CanvasGeometry Simplify(IObjectReference _obj, CanvasGeometrySimplification simplification);
    internal static CanvasGeometry Simplify(IObjectReference _obj, CanvasGeometrySimplification simplification, Matrix3x2 transform, float flatteningTolerance);
    internal static CanvasGeometry Transform(IObjectReference _obj, Matrix3x2 transform);
    internal static CanvasGeometryRelation CompareWith(IObjectReference _obj, CanvasGeometry otherGeometry);
    internal static CanvasGeometryRelation CompareWith(IObjectReference _obj, CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, float flatteningTolerance);
    internal static float ComputeArea(IObjectReference _obj);
    internal static float ComputeArea(IObjectReference _obj, Matrix3x2 transform, float flatteningTolerance);
    internal static float ComputePathLength(IObjectReference _obj);
    internal static float ComputePathLength(IObjectReference _obj, Matrix3x2 transform, float flatteningTolerance);
    internal static Vector2 ComputePointOnPath(IObjectReference _obj, float distance);
    internal static Vector2 ComputePointOnPath(IObjectReference _obj, float distance, Vector2& tangent);
    internal static Vector2 ComputePointOnPath(IObjectReference _obj, float length, Matrix3x2 transform, float flatteningTolerance, Vector2& tangent);
    internal static bool FillContainsPoint(IObjectReference _obj, Vector2 point);
    internal static bool FillContainsPoint(IObjectReference _obj, Vector2 point, Matrix3x2 transform, float flatteningTolerance);
    internal static Rect ComputeBounds(IObjectReference _obj);
    internal static Rect ComputeBounds(IObjectReference _obj, Matrix3x2 transform);
    internal static Rect ComputeStrokeBounds(IObjectReference _obj, float strokeWidth);
    internal static Rect ComputeStrokeBounds(IObjectReference _obj, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static Rect ComputeStrokeBounds(IObjectReference _obj, float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    internal static bool StrokeContainsPoint(IObjectReference _obj, Vector2 point, float strokeWidth);
    internal static bool StrokeContainsPoint(IObjectReference _obj, Vector2 point, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static bool StrokeContainsPoint(IObjectReference _obj, Vector2 point, float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    internal static CanvasTriangleVertices[] Tessellate(IObjectReference _obj);
    internal static CanvasTriangleVertices[] Tessellate(IObjectReference _obj, Matrix3x2 transform, float flatteningTolerance);
    internal static void SendPathTo(IObjectReference _obj, ICanvasPathReceiver streamReader);
    internal static CanvasDevice get_Device(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("D94E33CF-CD59-46F2-8DF4-55066AABFD56")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasGeometry CreateRectangle(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Rect rect);
    internal static CanvasGeometry CreateRectangle(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float x, float y, float w, float h);
    internal static CanvasGeometry CreateRoundedRectangle(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Rect rect, float radiusX, float radiusY);
    internal static CanvasGeometry CreateRoundedRectangle(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float x, float y, float w, float h, float radiusX, float radiusY);
    internal static CanvasGeometry CreateEllipse(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Vector2 centerPoint, float radiusX, float radiusY);
    internal static CanvasGeometry CreateEllipse(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float x, float y, float radiusX, float radiusY);
    internal static CanvasGeometry CreateCircle(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Vector2 centerPoint, float radius);
    internal static CanvasGeometry CreateCircle(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float x, float y, float radius);
    internal static CanvasGeometry CreatePath(IObjectReference _obj, CanvasPathBuilder pathBuilder);
    internal static CanvasGeometry CreatePolygon(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Vector2[] points);
    internal static CanvasGeometry CreateGroup(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGeometry[] geometries);
    internal static CanvasGeometry CreateGroup(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGeometry[] geometries, CanvasFilledRegionDetermination filledRegionDetermination);
    internal static CanvasGeometry CreateText(IObjectReference _obj, CanvasTextLayout textLayout);
    internal static CanvasGeometry CreateGlyphRun(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, CanvasTextMeasuringMode measuringMode, CanvasGlyphOrientation glyphOrientation);
    internal static CanvasGeometry CreateInk(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IEnumerable`1<InkStroke> inkStrokes);
    internal static CanvasGeometry CreateInk(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IEnumerable`1<InkStroke> inkStrokes, Matrix3x2 transform, float flatteningTolerance);
    internal static float ComputeFlatteningTolerance(IObjectReference _obj, float dpi, float maximumZoomFactor);
    internal static float ComputeFlatteningTolerance(IObjectReference _obj, float dpi, float maximumZoomFactor, Matrix3x2 expectedGeometryTransform);
    internal static float get_DefaultFlatteningTolerance(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("6BFC2BF1-0A7A-449C-A7EF-6706321B0C1A")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh {
}
[GuidAttribute("4756492D-251E-421D-834D-87EC260D5E4D")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasGradientMesh Create(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CanvasGradientMeshPatch[] patchElements);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Rect GetBounds(IObjectReference _obj, ICanvasResourceCreator resourceCreator);
    internal static Rect GetBounds(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    internal static CanvasDevice get_Device(IObjectReference _obj);
    internal static CanvasGradientMeshPatch[] get_Patches(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("44027640-3EAB-4199-AA3B-644890D0123D")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasGradientMeshPatch CreateCoonsPatch(IObjectReference _obj, Vector2[] points, Vector4[] colors, CanvasGradientMeshPatchEdge[] edges);
    internal static CanvasGradientMeshPatch CreateTensorPatch(IObjectReference _obj, Vector2[] points, Vector4[] colors, CanvasGradientMeshPatchEdge[] edges);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BCF5822F-8127-4E5C-96B8-29983B915541")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder {
}
[GuidAttribute("AC2BEE14-EFD1-4343-8E53-BA62153D8966")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasPathBuilder Create(IObjectReference _obj, ICanvasResourceCreator resourceCreator);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void BeginFigure(IObjectReference _obj, Vector2 startPoint, CanvasFigureFill figureFill);
    internal static void BeginFigure(IObjectReference _obj, Vector2 startPoint);
    internal static void BeginFigure(IObjectReference _obj, float startX, float startY, CanvasFigureFill figureFill);
    internal static void BeginFigure(IObjectReference _obj, float startX, float startY);
    internal static void AddArc(IObjectReference _obj, Vector2 endPoint, float radiusX, float radiusY, float rotationAngle, CanvasSweepDirection sweepDirection, CanvasArcSize arcSize);
    internal static void AddArc(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, float startAngle, float sweepAngle);
    internal static void AddCubicBezier(IObjectReference _obj, Vector2 controlPoint1, Vector2 controlPoint2, Vector2 endPoint);
    internal static void AddLine(IObjectReference _obj, Vector2 endPoint);
    internal static void AddLine(IObjectReference _obj, float x, float y);
    internal static void AddQuadraticBezier(IObjectReference _obj, Vector2 controlPoint, Vector2 endPoint);
    internal static void SetFilledRegionDetermination(IObjectReference _obj, CanvasFilledRegionDetermination filledRegionDetermination);
    internal static void SetSegmentOptions(IObjectReference _obj, CanvasFigureSegmentOptions figureSegmentOptions);
    internal static void EndFigure(IObjectReference _obj, CanvasFigureLoop figureLoop);
    internal static void AddGeometry(IObjectReference _obj, CanvasGeometry geometry);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("70E65373-7FB3-4645-8B6D-F616D1B9A9D7")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ICanvasPathReceiver();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_BeginFigure_0(IntPtr thisPtr, Vector2 startPoint, CanvasFigureFill figureFill);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_AddArc_1(IntPtr thisPtr, Vector2 endPoint, float radiusX, float radiusY, float rotationAngle, CanvasSweepDirection sweepDirection, CanvasArcSize arcSize);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_AddCubicBezier_2(IntPtr thisPtr, Vector2 controlPoint1, Vector2 controlPoint2, Vector2 endPoint);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_AddLine_3(IntPtr thisPtr, Vector2 endPoint);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_AddQuadraticBezier_4(IntPtr thisPtr, Vector2 controlPoint, Vector2 endPoint);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_SetFilledRegionDetermination_5(IntPtr thisPtr, CanvasFilledRegionDetermination filledRegionDetermination);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_SetSegmentOptions_6(IntPtr thisPtr, CanvasFigureSegmentOptions figureSegmentOptions);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_EndFigure_7(IntPtr thisPtr, CanvasFigureLoop figureLoop);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.BeginFigure(Vector2 startPoint, CanvasFigureFill figureFill);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.AddArc(Vector2 endPoint, float radiusX, float radiusY, float rotationAngle, CanvasSweepDirection sweepDirection, CanvasArcSize arcSize);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.AddCubicBezier(Vector2 controlPoint1, Vector2 controlPoint2, Vector2 endPoint);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.AddLine(Vector2 endPoint);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.AddQuadraticBezier(Vector2 controlPoint, Vector2 endPoint);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.SetFilledRegionDetermination(CanvasFilledRegionDetermination filledRegionDetermination);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.SetSegmentOptions(CanvasFigureSegmentOptions figureSegmentOptions);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver.EndFigure(CanvasFigureLoop figureLoop);
}
public static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiverMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static void BeginFigure(IObjectReference _obj, Vector2 startPoint, CanvasFigureFill figureFill);
    public static void AddArc(IObjectReference _obj, Vector2 endPoint, float radiusX, float radiusY, float rotationAngle, CanvasSweepDirection sweepDirection, CanvasArcSize arcSize);
    public static void AddCubicBezier(IObjectReference _obj, Vector2 controlPoint1, Vector2 controlPoint2, Vector2 endPoint);
    public static void AddLine(IObjectReference _obj, Vector2 endPoint);
    public static void AddQuadraticBezier(IObjectReference _obj, Vector2 controlPoint, Vector2 endPoint);
    public static void SetFilledRegionDetermination(IObjectReference _obj, CanvasFilledRegionDetermination filledRegionDetermination);
    public static void SetSegmentOptions(IObjectReference _obj, CanvasFigureSegmentOptions figureSegmentOptions);
    public static void EndFigure(IObjectReference _obj, CanvasFigureLoop figureLoop);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("FD3E1CD2-6019-40A1-B315-267EEF6C2AEB")]
internal interface ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle {
}
internal static class ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyleMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Single[] get_CustomDashStyle(IObjectReference _obj);
    internal static void set_CustomDashStyle(IObjectReference _obj, Single[] value);
    internal static CanvasCapStyle get_DashCap(IObjectReference _obj);
    internal static void set_DashCap(IObjectReference _obj, CanvasCapStyle value);
    internal static float get_DashOffset(IObjectReference _obj);
    internal static void set_DashOffset(IObjectReference _obj, float value);
    internal static CanvasDashStyle get_DashStyle(IObjectReference _obj);
    internal static void set_DashStyle(IObjectReference _obj, CanvasDashStyle value);
    internal static CanvasCapStyle get_EndCap(IObjectReference _obj);
    internal static void set_EndCap(IObjectReference _obj, CanvasCapStyle value);
    internal static CanvasLineJoin get_LineJoin(IObjectReference _obj);
    internal static void set_LineJoin(IObjectReference _obj, CanvasLineJoin value);
    internal static float get_MiterLimit(IObjectReference _obj);
    internal static void set_MiterLimit(IObjectReference _obj, float value);
    internal static CanvasCapStyle get_StartCap(IObjectReference _obj);
    internal static void set_StartCap(IObjectReference _obj, CanvasCapStyle value);
    internal static CanvasStrokeTransformBehavior get_TransformBehavior(IObjectReference _obj);
    internal static void set_TransformBehavior(IObjectReference _obj, CanvasStrokeTransformBehavior value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("49ECFC58-5E1C-4EE3-8088-542F94E93C60")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasActiveLayer {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasActiveLayerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasBitmap {
}
[GuidAttribute("F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasBitmapFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasBitmapFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasBitmapMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IAsyncAction SaveAsync(IObjectReference _obj, string fileName);
    internal static IAsyncAction SaveAsync(IObjectReference _obj, string fileName, CanvasBitmapFileFormat fileFormat);
    internal static IAsyncAction SaveAsync(IObjectReference _obj, string fileName, CanvasBitmapFileFormat fileFormat, float quality);
    internal static IAsyncAction SaveAsync(IObjectReference _obj, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat);
    internal static IAsyncAction SaveAsync(IObjectReference _obj, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality);
    internal static Byte[] GetPixelBytes(IObjectReference _obj);
    internal static Byte[] GetPixelBytes(IObjectReference _obj, int left, int top, int width, int height);
    internal static void GetPixelBytes(IObjectReference _obj, IBuffer buffer);
    internal static void GetPixelBytes(IObjectReference _obj, IBuffer buffer, int left, int top, int width, int height);
    internal static Color[] GetPixelColors(IObjectReference _obj);
    internal static Color[] GetPixelColors(IObjectReference _obj, int left, int top, int width, int height);
    internal static void SetPixelBytes(IObjectReference _obj, Byte[] valueElements);
    internal static void SetPixelBytes(IObjectReference _obj, Byte[] valueElements, int left, int top, int width, int height);
    internal static void SetPixelBytes(IObjectReference _obj, IBuffer buffer);
    internal static void SetPixelBytes(IObjectReference _obj, IBuffer buffer, int left, int top, int width, int height);
    internal static void SetPixelColors(IObjectReference _obj, Color[] valueElements);
    internal static void SetPixelColors(IObjectReference _obj, Color[] valueElements, int left, int top, int width, int height);
    internal static void CopyPixelsFromBitmap(IObjectReference _obj, CanvasBitmap otherBitmap);
    internal static void CopyPixelsFromBitmap(IObjectReference _obj, CanvasBitmap otherBitmap, int destX, int destY);
    internal static void CopyPixelsFromBitmap(IObjectReference _obj, CanvasBitmap otherBitmap, int destX, int destY, int sourceRectLeft, int sourceRectTop, int sourceRectWidth, int sourceRectHeight);
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static Rect get_Bounds(IObjectReference _obj);
    internal static DirectXPixelFormat get_Format(IObjectReference _obj);
    internal static Size get_Size(IObjectReference _obj);
    internal static BitmapSize get_SizeInPixels(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasBitmapStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasBitmapStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasBitmap CreateFromDirect3D11Surface(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IDirect3DSurface surface);
    internal static CanvasBitmap CreateFromDirect3D11Surface(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi);
    internal static CanvasBitmap CreateFromDirect3D11Surface(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi, CanvasAlphaMode alpha);
    internal static CanvasBitmap CreateFromBytes(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format);
    internal static CanvasBitmap CreateFromBytes(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi);
    internal static CanvasBitmap CreateFromBytes(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi, CanvasAlphaMode alpha);
    internal static CanvasBitmap CreateFromBytes(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format);
    internal static CanvasBitmap CreateFromBytes(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi);
    internal static CanvasBitmap CreateFromBytes(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi, CanvasAlphaMode alpha);
    internal static CanvasBitmap CreateFromColors(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels);
    internal static CanvasBitmap CreateFromColors(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels, float dpi);
    internal static CanvasBitmap CreateFromColors(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels, float dpi, CanvasAlphaMode alpha);
    internal static CanvasBitmap CreateFromSoftwareBitmap(IObjectReference _obj, ICanvasResourceCreator resourceCreator, SoftwareBitmap sourceBitmap);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string fileName);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string fileName, float dpi);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string fileName, float dpi, CanvasAlphaMode alpha);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Uri uri);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Uri uri, float dpi);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Uri uri, float dpi, CanvasAlphaMode alpha);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, float dpi);
    internal static IAsyncOperation`1<CanvasBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, float dpi, CanvasAlphaMode alpha);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasCommandList {
}
[GuidAttribute("B3D44E68-D931-4B5B-B957-0888980A7D50")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasCommandListFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasCommandListFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasCommandList Create(IObjectReference _obj, ICanvasResourceCreator resourceCreator);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasCommandListMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj);
    internal static CanvasDevice get_Device(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasDevice {
}
[GuidAttribute("E2C2BF21-5418-43B9-A2DA-539E287C790F")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasDeviceFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasDeviceFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDevice CreateWithForceSoftwareRendererOption(IObjectReference _obj, bool forceSoftwareRenderer);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasDeviceMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _DeviceLost_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasDevice, object>>> _DeviceLost { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsPixelFormatSupported(IObjectReference _obj, DirectXPixelFormat pixelFormat);
    internal static bool IsBufferPrecisionSupported(IObjectReference _obj, CanvasBufferPrecision bufferPrecision);
    internal static bool IsDeviceLost(IObjectReference _obj, int hresult);
    internal static void RaiseDeviceLost(IObjectReference _obj);
    internal static CanvasLock Lock(IObjectReference _obj);
    internal static bool IsDeviceLost(IObjectReference _obj);
    internal static int GetDeviceLostReason(IObjectReference _obj);
    internal static bool get_ForceSoftwareRenderer(IObjectReference _obj);
    internal static bool get_LowPriority(IObjectReference _obj);
    internal static void set_LowPriority(IObjectReference _obj, bool value);
    internal static int get_MaximumBitmapSizeInPixels(IObjectReference _obj);
    internal static ulong get_MaximumCacheSize(IObjectReference _obj);
    internal static void set_MaximumCacheSize(IObjectReference _obj, ulong value);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasDevice, object>>> MakeDeviceLostTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasDevice, object>>> get__DeviceLost();
    internal static EventSource`1<TypedEventHandler`2<CanvasDevice, object>> Get_DeviceLost2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("9B6E2B27-CD07-421A-8F69-0AE8A787FE8C")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasDeviceStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasDeviceStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDevice CreateFromDirect3D11Device(IObjectReference _obj, IDirect3DDevice direct3DDevice);
    internal static CanvasDevice GetSharedDevice(IObjectReference _obj);
    internal static CanvasDevice GetSharedDevice(IObjectReference _obj, bool forceSoftwareRenderer);
    internal static CanvasDebugLevel get_DebugLevel(IObjectReference _obj);
    internal static void set_DebugLevel(IObjectReference _obj, CanvasDebugLevel value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F60AFD09-E623-4BE0-B750-578AA920B1DB")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasDrawingSession {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasDrawingSessionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Clear(IObjectReference _obj, Color color);
    internal static void Clear(IObjectReference _obj, Vector4 color);
    internal static void Flush(IObjectReference _obj);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Vector2 offset);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, float x, float y);
    internal static void DrawImage(IObjectReference _obj, CanvasBitmap bitmap, Rect destinationRectangle);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Vector2 offset, Rect sourceRectangle);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, float x, float y, Rect sourceRectangle);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    internal static void DrawImage(IObjectReference _obj, ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    internal static void DrawImage(IObjectReference _obj, CanvasBitmap bitmap, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    internal static void DrawImage(IObjectReference _obj, CanvasBitmap bitmap, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    internal static void DrawImage(IObjectReference _obj, CanvasBitmap bitmap, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    internal static void DrawLine(IObjectReference _obj, Vector2 point0, Vector2 point1, ICanvasBrush brush);
    internal static void DrawLine(IObjectReference _obj, float x0, float y0, float x1, float y1, ICanvasBrush brush);
    internal static void DrawLine(IObjectReference _obj, Vector2 point0, Vector2 point1, Color color);
    internal static void DrawLine(IObjectReference _obj, float x0, float y0, float x1, float y1, Color color);
    internal static void DrawLine(IObjectReference _obj, Vector2 point0, Vector2 point1, ICanvasBrush brush, float strokeWidth);
    internal static void DrawLine(IObjectReference _obj, float x0, float y0, float x1, float y1, ICanvasBrush brush, float strokeWidth);
    internal static void DrawLine(IObjectReference _obj, Vector2 point0, Vector2 point1, Color color, float strokeWidth);
    internal static void DrawLine(IObjectReference _obj, float x0, float y0, float x1, float y1, Color color, float strokeWidth);
    internal static void DrawLine(IObjectReference _obj, Vector2 point0, Vector2 point1, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawLine(IObjectReference _obj, float x0, float y0, float x1, float y1, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawLine(IObjectReference _obj, Vector2 point0, Vector2 point1, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawLine(IObjectReference _obj, float x0, float y0, float x1, float y1, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawRectangle(IObjectReference _obj, Rect rect, ICanvasBrush brush);
    internal static void DrawRectangle(IObjectReference _obj, float x, float y, float w, float h, ICanvasBrush brush);
    internal static void DrawRectangle(IObjectReference _obj, Rect rect, Color color);
    internal static void DrawRectangle(IObjectReference _obj, float x, float y, float w, float h, Color color);
    internal static void DrawRectangle(IObjectReference _obj, Rect rect, ICanvasBrush brush, float strokeWidth);
    internal static void DrawRectangle(IObjectReference _obj, float x, float y, float w, float h, ICanvasBrush brush, float strokeWidth);
    internal static void DrawRectangle(IObjectReference _obj, Rect rect, Color color, float strokeWidth);
    internal static void DrawRectangle(IObjectReference _obj, float x, float y, float w, float h, Color color, float strokeWidth);
    internal static void DrawRectangle(IObjectReference _obj, Rect rect, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawRectangle(IObjectReference _obj, float x, float y, float w, float h, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawRectangle(IObjectReference _obj, Rect rect, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawRectangle(IObjectReference _obj, float x, float y, float w, float h, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void FillRectangle(IObjectReference _obj, Rect rect, ICanvasBrush brush);
    internal static void FillRectangle(IObjectReference _obj, float x, float y, float w, float h, ICanvasBrush brush);
    internal static void FillRectangle(IObjectReference _obj, Rect rect, Color color);
    internal static void FillRectangle(IObjectReference _obj, float x, float y, float w, float h, Color color);
    internal static void FillRectangle(IObjectReference _obj, Rect rect, ICanvasBrush brush, ICanvasBrush opacityBrush);
    internal static void FillRectangle(IObjectReference _obj, float x, float y, float w, float h, ICanvasBrush brush, ICanvasBrush opacityBrush);
    internal static void DrawRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void DrawRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void DrawRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, Color color);
    internal static void DrawRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, Color color);
    internal static void DrawRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    internal static void DrawRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    internal static void DrawRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, Color color, float strokeWidth);
    internal static void DrawRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, Color color, float strokeWidth);
    internal static void DrawRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void FillRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void FillRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void FillRoundedRectangle(IObjectReference _obj, Rect rect, float radiusX, float radiusY, Color color);
    internal static void FillRoundedRectangle(IObjectReference _obj, float x, float y, float w, float h, float radiusX, float radiusY, Color color);
    internal static void DrawEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void DrawEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void DrawEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, Color color);
    internal static void DrawEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, Color color);
    internal static void DrawEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    internal static void DrawEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    internal static void DrawEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, Color color, float strokeWidth);
    internal static void DrawEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, Color color, float strokeWidth);
    internal static void DrawEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void FillEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void FillEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, ICanvasBrush brush);
    internal static void FillEllipse(IObjectReference _obj, Vector2 centerPoint, float radiusX, float radiusY, Color color);
    internal static void FillEllipse(IObjectReference _obj, float x, float y, float radiusX, float radiusY, Color color);
    internal static void DrawCircle(IObjectReference _obj, Vector2 centerPoint, float radius, ICanvasBrush brush);
    internal static void DrawCircle(IObjectReference _obj, float x, float y, float radius, ICanvasBrush brush);
    internal static void DrawCircle(IObjectReference _obj, Vector2 centerPoint, float radius, Color color);
    internal static void DrawCircle(IObjectReference _obj, float x, float y, float radius, Color color);
    internal static void DrawCircle(IObjectReference _obj, Vector2 centerPoint, float radius, ICanvasBrush brush, float strokeWidth);
    internal static void DrawCircle(IObjectReference _obj, float x, float y, float radius, ICanvasBrush brush, float strokeWidth);
    internal static void DrawCircle(IObjectReference _obj, Vector2 centerPoint, float radius, Color color, float strokeWidth);
    internal static void DrawCircle(IObjectReference _obj, float x, float y, float radius, Color color, float strokeWidth);
    internal static void DrawCircle(IObjectReference _obj, Vector2 centerPoint, float radius, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawCircle(IObjectReference _obj, float x, float y, float radius, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawCircle(IObjectReference _obj, Vector2 centerPoint, float radius, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawCircle(IObjectReference _obj, float x, float y, float radius, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void FillCircle(IObjectReference _obj, Vector2 centerPoint, float radius, ICanvasBrush brush);
    internal static void FillCircle(IObjectReference _obj, float x, float y, float radius, ICanvasBrush brush);
    internal static void FillCircle(IObjectReference _obj, Vector2 centerPoint, float radius, Color color);
    internal static void FillCircle(IObjectReference _obj, float x, float y, float radius, Color color);
    internal static void DrawText(IObjectReference _obj, string text, Vector2 point, Color color);
    internal static void DrawText(IObjectReference _obj, string text, float x, float y, Color color);
    internal static void DrawText(IObjectReference _obj, string text, Vector2 point, ICanvasBrush brush, CanvasTextFormat format);
    internal static void DrawText(IObjectReference _obj, string text, Rect rectangle, ICanvasBrush brush, CanvasTextFormat format);
    internal static void DrawText(IObjectReference _obj, string text, float x, float y, ICanvasBrush brush, CanvasTextFormat format);
    internal static void DrawText(IObjectReference _obj, string text, float x, float y, float w, float h, ICanvasBrush brush, CanvasTextFormat format);
    internal static void DrawText(IObjectReference _obj, string text, Vector2 point, Color color, CanvasTextFormat format);
    internal static void DrawText(IObjectReference _obj, string text, Rect rectangle, Color color, CanvasTextFormat format);
    internal static void DrawText(IObjectReference _obj, string text, float x, float y, Color color, CanvasTextFormat format);
    internal static void DrawText(IObjectReference _obj, string text, float x, float y, float w, float h, Color color, CanvasTextFormat format);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, Color color);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, ICanvasBrush brush);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, Color color);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, ICanvasBrush brush);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Color color);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, float strokeWidth);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, Color color, float strokeWidth);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, ICanvasBrush brush, float strokeWidth);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, Color color, float strokeWidth);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, ICanvasBrush brush, float strokeWidth);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Color color, float strokeWidth);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void DrawGeometry(IObjectReference _obj, CanvasGeometry geometry, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, ICanvasBrush opacityBrush);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, Vector2 offset, Color color);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, ICanvasBrush brush);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, ICanvasBrush brush, ICanvasBrush opacityBrush);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, float x, float y, Color color);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, ICanvasBrush brush);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, ICanvasBrush brush, ICanvasBrush opacityBrush);
    internal static void FillGeometry(IObjectReference _obj, CanvasGeometry geometry, Color color);
    internal static void DrawCachedGeometry(IObjectReference _obj, CanvasCachedGeometry geometry, Vector2 offset, ICanvasBrush brush);
    internal static void DrawCachedGeometry(IObjectReference _obj, CanvasCachedGeometry geometry, Vector2 offset, Color color);
    internal static void DrawCachedGeometry(IObjectReference _obj, CanvasCachedGeometry geometry, float x, float y, ICanvasBrush brush);
    internal static void DrawCachedGeometry(IObjectReference _obj, CanvasCachedGeometry geometry, float x, float y, Color color);
    internal static void DrawCachedGeometry(IObjectReference _obj, CanvasCachedGeometry geometry, ICanvasBrush brush);
    internal static void DrawCachedGeometry(IObjectReference _obj, CanvasCachedGeometry geometry, Color color);
    internal static void DrawTextLayout(IObjectReference _obj, CanvasTextLayout textLayout, Vector2 point, ICanvasBrush brush);
    internal static void DrawTextLayout(IObjectReference _obj, CanvasTextLayout textLayout, float x, float y, ICanvasBrush brush);
    internal static void DrawTextLayout(IObjectReference _obj, CanvasTextLayout textLayout, Vector2 point, Color color);
    internal static void DrawTextLayout(IObjectReference _obj, CanvasTextLayout textLayout, float x, float y, Color color);
    internal static void DrawInk(IObjectReference _obj, IEnumerable`1<InkStroke> inkStrokes);
    internal static void DrawInk(IObjectReference _obj, IEnumerable`1<InkStroke> inkStrokes, bool highContrast);
    internal static void DrawGradientMesh(IObjectReference _obj, CanvasGradientMesh gradientMesh);
    internal static void DrawGradientMesh(IObjectReference _obj, CanvasGradientMesh gradientMesh, Vector2 point);
    internal static void DrawGradientMesh(IObjectReference _obj, CanvasGradientMesh gradientMesh, float x, float y);
    internal static void DrawSvg(IObjectReference _obj, CanvasSvgDocument svgDocument, Size viewportSize);
    internal static void DrawSvg(IObjectReference _obj, CanvasSvgDocument svgDocument, Size viewportSize, Vector2 point);
    internal static void DrawSvg(IObjectReference _obj, CanvasSvgDocument svgDocument, Size viewportSize, float x, float y);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, float opacity);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, ICanvasBrush opacityBrush);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, float opacity, Rect clipRectangle);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, ICanvasBrush opacityBrush, Rect clipRectangle);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, float opacity, CanvasGeometry clipGeometry);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, ICanvasBrush opacityBrush, CanvasGeometry clipGeometry);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, float opacity, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, ICanvasBrush opacityBrush, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform);
    internal static CanvasActiveLayer CreateLayer(IObjectReference _obj, float opacity, ICanvasBrush opacityBrush, Rect clipRectangle, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform, CanvasLayerOptions options);
    internal static void DrawGlyphRun(IObjectReference _obj, Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush);
    internal static void DrawGlyphRun(IObjectReference _obj, Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush, CanvasTextMeasuringMode measuringMode);
    internal static void DrawGlyphRun(IObjectReference _obj, Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush, CanvasTextMeasuringMode measuringMode, string localeName, string textString, Int32[] clusterMapIndices, UInt32 textPosition);
    internal static CanvasSpriteBatch CreateSpriteBatch(IObjectReference _obj);
    internal static CanvasSpriteBatch CreateSpriteBatch(IObjectReference _obj, CanvasSpriteSortMode sortMode);
    internal static CanvasSpriteBatch CreateSpriteBatch(IObjectReference _obj, CanvasSpriteSortMode sortMode, CanvasImageInterpolation interpolation);
    internal static CanvasSpriteBatch CreateSpriteBatch(IObjectReference _obj, CanvasSpriteSortMode sortMode, CanvasImageInterpolation interpolation, CanvasSpriteOptions options);
    internal static CanvasAntialiasing get_Antialiasing(IObjectReference _obj);
    internal static void set_Antialiasing(IObjectReference _obj, CanvasAntialiasing value);
    internal static CanvasBlend get_Blend(IObjectReference _obj);
    internal static void set_Blend(IObjectReference _obj, CanvasBlend value);
    internal static Nullable`1<CanvasBufferPrecision> get_EffectBufferPrecision(IObjectReference _obj);
    internal static void set_EffectBufferPrecision(IObjectReference _obj, Nullable`1<CanvasBufferPrecision> value);
    internal static BitmapSize get_EffectTileSize(IObjectReference _obj);
    internal static void set_EffectTileSize(IObjectReference _obj, BitmapSize value);
    internal static CanvasTextAntialiasing get_TextAntialiasing(IObjectReference _obj);
    internal static void set_TextAntialiasing(IObjectReference _obj, CanvasTextAntialiasing value);
    internal static CanvasTextRenderingParameters get_TextRenderingParameters(IObjectReference _obj);
    internal static void set_TextRenderingParameters(IObjectReference _obj, CanvasTextRenderingParameters value);
    internal static Matrix3x2 get_Transform(IObjectReference _obj);
    internal static void set_Transform(IObjectReference _obj, Matrix3x2 value);
    internal static CanvasUnits get_Units(IObjectReference _obj);
    internal static void set_Units(IObjectReference _obj, CanvasUnits value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("794966D3-6A64-47E9-8DA8-B46AAA24D53B")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasImage {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ICanvasImage();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetBounds_0(IntPtr thisPtr, IntPtr resourceCreator, Rect* bounds);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetBounds_1(IntPtr thisPtr, IntPtr resourceCreator, Matrix3x2 transform, Rect* bounds);
    private sealed virtual override Rect global::Microsoft.Graphics.Canvas.ICanvasImage.GetBounds(ICanvasResourceCreator resourceCreator);
    private sealed virtual override Rect global::Microsoft.Graphics.Canvas.ICanvasImage.GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    private sealed virtual override void global::System.IDisposable.Dispose();
}
public static class ABI.Microsoft.Graphics.Canvas.ICanvasImageMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static Rect GetBounds(IObjectReference _obj, ICanvasResourceCreator resourceCreator);
    public static Rect GetBounds(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("C54EEA15-5A14-489A-8FA0-6E84541F922D")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasImageStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasImageStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IAsyncAction SaveAsync(IObjectReference _obj, ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat);
    internal static IAsyncAction SaveAsync(IObjectReference _obj, ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality);
    internal static IAsyncAction SaveAsync(IObjectReference _obj, ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality, CanvasBufferPrecision bufferPrecision);
    internal static Single[] ComputeHistogram(IObjectReference _obj, ICanvasImage image, Rect sourceRectangle, ICanvasResourceCreator resourceCreator, EffectChannelSelect channelSelect, int numberOfBins);
    internal static bool IsHistogramSupported(IObjectReference _obj, CanvasDevice device);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7A0E8498-FBA9-4FB0-AA8C-6A48B5EE3E4F")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasLock {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasLockMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasRenderTarget {
}
[GuidAttribute("620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasRenderTargetFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasRenderTarget CreateWithSize(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    internal static CanvasRenderTarget CreateWithWidthAndHeight(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    internal static CanvasRenderTarget CreateWithWidthAndHeightAndDpi(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    internal static CanvasRenderTarget CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi, DirectXPixelFormat format, CanvasAlphaMode alpha);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasRenderTargetMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C7D1FE37-DD57-45D7-BCC1-15625A21E8D5")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasRenderTargetStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasRenderTarget CreateFromDirect3D11Surface(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IDirect3DSurface surface);
    internal static CanvasRenderTarget CreateFromDirect3D11Surface(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi);
    internal static CanvasRenderTarget CreateFromDirect3D11Surface(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi, CanvasAlphaMode alpha);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasResourceCreator {
    public static IntPtr AbiToProjectionVftablePtr;
    private CanvasDevice global::Microsoft.Graphics.Canvas.ICanvasResourceCreator.Device { get; }
    private static ICanvasResourceCreator();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Device_0(IntPtr thisPtr, IntPtr* value);
    private sealed virtual override CanvasDevice global::Microsoft.Graphics.Canvas.ICanvasResourceCreator.get_Device();
}
public static class ABI.Microsoft.Graphics.Canvas.ICanvasResourceCreatorMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static CanvasDevice get_Device(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("1A75B512-E9FA-49E6-A876-38CAE194013E")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi {
    public static IntPtr AbiToProjectionVftablePtr;
    private float global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.Dpi { get; }
    private CanvasDevice global::Microsoft.Graphics.Canvas.ICanvasResourceCreator.Device { get; }
    private static ICanvasResourceCreatorWithDpi();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_ConvertPixelsToDips_1(IntPtr thisPtr, int pixels, Single* dips);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_ConvertDipsToPixels_2(IntPtr thisPtr, float dips, CanvasDpiRounding dpiRounding, Int32* pixels);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Dpi_0(IntPtr thisPtr, Single* dpi);
    private sealed virtual override float global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.ConvertPixelsToDips(int pixels);
    private sealed virtual override int global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    private sealed virtual override float global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.get_Dpi();
    private sealed virtual override CanvasDevice global::Microsoft.Graphics.Canvas.ICanvasResourceCreator.get_Device();
}
public static class ABI.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpiMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static float ConvertPixelsToDips(IObjectReference _obj, int pixels);
    public static int ConvertDipsToPixels(IObjectReference _obj, float dips, CanvasDpiRounding dpiRounding);
    public static float get_Dpi(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("A065DCE4-A7F2-4DF4-8405-EA9E3A215BF8")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasSpriteBatch {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasSpriteBatchMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Rect destRect);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Vector2 offset);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Matrix3x2 transform);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Rect destRect, Vector4 tint);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Vector2 offset, Vector4 tint);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Matrix3x2 transform, Vector4 tint);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Rect destRect, Vector4 tint, CanvasSpriteFlip flip);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Matrix3x2 transform, Vector4 tint, CanvasSpriteFlip flip);
    internal static void Draw(IObjectReference _obj, CanvasBitmap bitmap, Vector2 offset, Vector4 tint, Vector2 origin, float rotation, Vector2 scale, CanvasSpriteFlip flip);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Rect destRect, Rect sourceRect);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Vector2 offset, Rect sourceRect);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Rect destRect, Rect sourceRect, Vector4 tint);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Vector2 offset, Rect sourceRect, Vector4 tint);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect, Vector4 tint);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Rect destRect, Rect sourceRect, Vector4 tint, CanvasSpriteFlip flip);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect, Vector4 tint, CanvasSpriteFlip flip);
    internal static void DrawFromSpriteSheet(IObjectReference _obj, CanvasBitmap bitmap, Vector2 offset, Rect sourceRect, Vector4 tint, Vector2 origin, float rotation, Vector2 scale, CanvasSpriteFlip flip);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("851EB08D-9D01-4B57-9E94-24113151B74B")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasSpriteBatchStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool IsSupported(IObjectReference _obj, CanvasDevice device);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("882E3C3A-5725-409C-9E76-F80B3BACF1B4")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasSwapChain {
}
[GuidAttribute("133C25CB-ED3C-492B-BFFE-7509B521842B")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasSwapChainFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasSwapChainFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasSwapChain CreateWithSize(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    internal static CanvasSwapChain CreateWithWidthAndHeight(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    internal static CanvasSwapChain CreateWithWidthAndHeightAndDpi(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    internal static CanvasSwapChain CreateWithAllOptions(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi, DirectXPixelFormat format, int bufferCount, CanvasAlphaMode alphaMode);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasSwapChainMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Present(IObjectReference _obj);
    internal static void Present(IObjectReference _obj, int syncInterval);
    internal static void ResizeBuffers(IObjectReference _obj, Size newSize);
    internal static void ResizeBuffers(IObjectReference _obj, float newWidth, float newHeight);
    internal static void ResizeBuffers(IObjectReference _obj, float newWidth, float newHeight, float newDpi);
    internal static void ResizeBuffers(IObjectReference _obj, float newWidth, float newHeight, float newDpi, DirectXPixelFormat newFormat, int bufferCount);
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, Color clearColor);
    internal static void WaitForVerticalBlank(IObjectReference _obj);
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static int get_BufferCount(IObjectReference _obj);
    internal static DirectXPixelFormat get_Format(IObjectReference _obj);
    internal static CanvasSwapChainRotation get_Rotation(IObjectReference _obj);
    internal static void set_Rotation(IObjectReference _obj, CanvasSwapChainRotation value);
    internal static Size get_Size(IObjectReference _obj);
    internal static BitmapSize get_SizeInPixels(IObjectReference _obj);
    internal static Size get_SourceSize(IObjectReference _obj);
    internal static void set_SourceSize(IObjectReference _obj, Size value);
    internal static Matrix3x2 get_TransformMatrix(IObjectReference _obj);
    internal static void set_TransformMatrix(IObjectReference _obj, Matrix3x2 value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("05376D8F-3E8D-4A82-9838-691680D32A52")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasSwapChainStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasSwapChainStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasSwapChain CreateForCoreWindow(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CoreWindow coreWindow, float dpi);
    internal static CanvasSwapChain CreateForCoreWindow(IObjectReference _obj, ICanvasResourceCreator resourceCreator, CoreWindow coreWindow, float width, float height, float dpi, DirectXPixelFormat format, int bufferCount);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("707D8BB0-05F9-484C-9EE2-179E0681C8A7")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasVirtualBitmap {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasVirtualBitmapMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Rect get_Bounds(IObjectReference _obj);
    internal static CanvasDevice get_Device(IObjectReference _obj);
    internal static bool get_IsCachedOnDemand(IObjectReference _obj);
    internal static Size get_Size(IObjectReference _obj);
    internal static BitmapSize get_SizeInPixels(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("B2F1F8E9-0770-4DD4-956D-78D911390957")]
internal interface ABI.Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string fileName);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string fileName, CanvasVirtualBitmapOptions options);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string fileName, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Uri uri);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Uri uri, CanvasVirtualBitmapOptions options);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, Uri uri, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasVirtualBitmapOptions options);
    internal static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasPreviewEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasPreviewEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasPreviewEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasPreviewEventArgs obj);
    public static MarshalerArray<CanvasPreviewEventArgs> CreateMarshalerArray(CanvasPreviewEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasPreviewEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasPreviewEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasPreviewEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasPreviewEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral : ValueType {
    public static IObjectReference CreateMarshaler(CanvasPrintDeferral obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasPrintDeferral obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasPrintDeferral FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasPrintDeferral obj);
    public static MarshalerArray<CanvasPrintDeferral> CreateMarshalerArray(CanvasPrintDeferral[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasPrintDeferral[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasPrintDeferral[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasPrintDeferral[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasPrintDeferral> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferralRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument : ValueType {
    public static IObjectReference CreateMarshaler(CanvasPrintDocument obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasPrintDocument obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasPrintDocument FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasPrintDocument obj);
    public static MarshalerArray<CanvasPrintDocument> CreateMarshalerArray(CanvasPrintDocument[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasPrintDocument[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasPrintDocument[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasPrintDocument[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasPrintDocument> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintDocumentRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasPrintEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasPrintEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasPrintEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasPrintEventArgs obj);
    public static MarshalerArray<CanvasPrintEventArgs> CreateMarshalerArray(CanvasPrintEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasPrintEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasPrintEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasPrintEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasPrintEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasPrintTaskOptionsChangedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasPrintTaskOptionsChangedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasPrintTaskOptionsChangedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasPrintTaskOptionsChangedEventArgs obj);
    public static MarshalerArray<CanvasPrintTaskOptionsChangedEventArgs> CreateMarshalerArray(CanvasPrintTaskOptionsChangedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasPrintTaskOptionsChangedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasPrintTaskOptionsChangedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasPrintTaskOptionsChangedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasPrintTaskOptionsChangedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("0A6A80A0-B07D-4DB2-BDEB-0368BB18C0F8")]
internal interface ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs {
}
internal static class ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasPrintDeferral GetDeferral(IObjectReference _obj);
    internal static CanvasDrawingSession get_DrawingSession(IObjectReference _obj);
    internal static UInt32 get_PageNumber(IObjectReference _obj);
    internal static PrintTaskOptions get_PrintTaskOptions(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("08CA99A2-5801-4EA4-8687-896CBDA69A47")]
internal interface ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral {
}
internal static class ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferralMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Complete(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0A99CDEE-BF11-49D0-AA34-3BA5C32C51A5")]
internal interface ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument {
}
[GuidAttribute("A201AF1E-CE4A-401D-A719-2BF004D5C26A")]
internal interface ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasPrintDocument CreateWithDevice(IObjectReference _obj, CanvasDevice device);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Preview_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Print_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _PrintTaskOptionsChanged_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs>>> _Preview { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs>>> _Print { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs>>> _PrintTaskOptionsChanged { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void InvalidatePreview(IObjectReference _obj);
    internal static void SetPageCount(IObjectReference _obj, UInt32 count);
    internal static void SetIntermediatePageCount(IObjectReference _obj, UInt32 count);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs>>> MakePreviewTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs>>> get__Preview();
    internal static EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs>> Get_Preview2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs>>> MakePrintTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs>>> get__Print();
    internal static EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs>> Get_Print2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs>>> MakePrintTaskOptionsChangedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs>>> get__PrintTaskOptionsChanged();
    internal static EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs>> Get_PrintTaskOptionsChanged2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0C6148C4-0216-4561-A817-34C8942AAC8B")]
internal interface ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs {
}
internal static class ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasPrintDeferral GetDeferral(IObjectReference _obj);
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj);
    internal static float get_Dpi(IObjectReference _obj);
    internal static void set_Dpi(IObjectReference _obj, float value);
    internal static PrintTaskOptions get_PrintTaskOptions(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F92089BA-6C99-4CAC-B28A-B5DCEC7A310D")]
internal interface ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs {
}
internal static class ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasPrintDeferral GetDeferral(IObjectReference _obj);
    internal static UInt32 get_CurrentPreviewPageNumber(IObjectReference _obj);
    internal static UInt32 get_NewPreviewPageNumber(IObjectReference _obj);
    internal static void set_NewPreviewPageNumber(IObjectReference _obj, UInt32 value);
    internal static PrintTaskOptions get_PrintTaskOptions(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSvgDocument obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSvgDocument obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSvgDocument FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSvgDocument obj);
    public static MarshalerArray<CanvasSvgDocument> CreateMarshalerArray(CanvasSvgDocument[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSvgDocument[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSvgDocument[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSvgDocument[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSvgDocument> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgDocumentRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSvgNamedElement obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSvgNamedElement obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSvgNamedElement FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSvgNamedElement obj);
    public static MarshalerArray<CanvasSvgNamedElement> CreateMarshalerArray(CanvasSvgNamedElement[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSvgNamedElement[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSvgNamedElement[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSvgNamedElement[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSvgNamedElement> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElementRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSvgPaintAttribute obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSvgPaintAttribute obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSvgPaintAttribute FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSvgPaintAttribute obj);
    public static MarshalerArray<CanvasSvgPaintAttribute> CreateMarshalerArray(CanvasSvgPaintAttribute[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSvgPaintAttribute[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSvgPaintAttribute[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSvgPaintAttribute[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSvgPaintAttribute> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttributeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSvgPathAttribute obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSvgPathAttribute obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSvgPathAttribute FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSvgPathAttribute obj);
    public static MarshalerArray<CanvasSvgPathAttribute> CreateMarshalerArray(CanvasSvgPathAttribute[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSvgPathAttribute[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSvgPathAttribute[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSvgPathAttribute[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSvgPathAttribute> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttributeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSvgPointsAttribute obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSvgPointsAttribute obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSvgPointsAttribute FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSvgPointsAttribute obj);
    public static MarshalerArray<CanvasSvgPointsAttribute> CreateMarshalerArray(CanvasSvgPointsAttribute[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSvgPointsAttribute[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSvgPointsAttribute[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSvgPointsAttribute[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSvgPointsAttribute> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttributeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSvgStrokeDashArrayAttribute obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSvgStrokeDashArrayAttribute obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSvgStrokeDashArrayAttribute FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSvgStrokeDashArrayAttribute obj);
    public static MarshalerArray<CanvasSvgStrokeDashArrayAttribute> CreateMarshalerArray(CanvasSvgStrokeDashArrayAttribute[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSvgStrokeDashArrayAttribute[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSvgStrokeDashArrayAttribute[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSvgStrokeDashArrayAttribute[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSvgStrokeDashArrayAttribute> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttributeRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSvgTextElement obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSvgTextElement obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSvgTextElement FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSvgTextElement obj);
    public static MarshalerArray<CanvasSvgTextElement> CreateMarshalerArray(CanvasSvgTextElement[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSvgTextElement[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSvgTextElement[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSvgTextElement[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSvgTextElement> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElementRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD6E")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute {
    public static IntPtr AbiToProjectionVftablePtr;
    private CanvasDevice global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute.Device { get; }
    private static ICanvasSvgAttribute();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Clone_0(IntPtr thisPtr, IntPtr* result);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetElement_1(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Device_2(IntPtr thisPtr, IntPtr* value);
    private sealed virtual override ICanvasSvgAttribute global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute.Clone();
    private sealed virtual override CanvasSvgNamedElement global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute.GetElement();
    private sealed virtual override CanvasDevice global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute.get_Device();
    private sealed virtual override void global::System.IDisposable.Dispose();
}
public static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttributeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static ICanvasSvgAttribute Clone(IObjectReference _obj);
    public static CanvasSvgNamedElement GetElement(IObjectReference _obj);
    public static CanvasDevice get_Device(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("A0E34929-3551-44FE-A670-D9B3FD800516")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument {
}
[GuidAttribute("BAB0F16D-4050-4EF6-8022-8A07E9E74A9D")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasSvgDocument CreateEmpty(IObjectReference _obj, ICanvasResourceCreator resourceCreator);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string GetXml(IObjectReference _obj);
    internal static IAsyncAction SaveAsync(IObjectReference _obj, IRandomAccessStream stream);
    internal static CanvasSvgNamedElement FindElementById(IObjectReference _obj, string id);
    internal static CanvasSvgPaintAttribute CreatePaintAttribute(IObjectReference _obj);
    internal static CanvasSvgPaintAttribute CreatePaintAttribute(IObjectReference _obj, CanvasSvgPaintType paintType, Color color, string id);
    internal static CanvasSvgPathAttribute CreatePathAttribute(IObjectReference _obj);
    internal static CanvasSvgPathAttribute CreatePathAttribute(IObjectReference _obj, Single[] segmentData, CanvasSvgPathCommand[] commands);
    internal static CanvasSvgPointsAttribute CreatePointsAttribute(IObjectReference _obj);
    internal static CanvasSvgPointsAttribute CreatePointsAttribute(IObjectReference _obj, Vector2[] points);
    internal static CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute(IObjectReference _obj);
    internal static CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute(IObjectReference _obj, Single[] dashValues, CanvasSvgLengthUnits[] unitValues);
    internal static CanvasSvgNamedElement LoadElementFromXml(IObjectReference _obj, string xmlString);
    internal static IAsyncOperation`1<CanvasSvgNamedElement> LoadElementAsync(IObjectReference _obj, IRandomAccessStream stream);
    internal static CanvasDevice get_Device(IObjectReference _obj);
    internal static CanvasSvgNamedElement get_Root(IObjectReference _obj);
    internal static void set_Root(IObjectReference _obj, CanvasSvgNamedElement value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7740E748-CB9A-453F-A678-8B3B3A7254D3")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasSvgDocument LoadFromXml(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string xmlString);
    internal static IAsyncOperation`1<CanvasSvgDocument> LoadAsync(IObjectReference _obj, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    internal static bool IsSupported(IObjectReference _obj, CanvasDevice device);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("0775CB81-C555-45BF-9795-0FF59151C3BE")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement {
    public static IntPtr AbiToProjectionVftablePtr;
    private CanvasSvgDocument global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement.ContainingDocument { get; }
    private CanvasDevice global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement.Device { get; }
    private CanvasSvgNamedElement global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement.Parent { get; }
    private static ICanvasSvgElement();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_ContainingDocument_0(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Device_2(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Parent_1(IntPtr thisPtr, IntPtr* value);
    private sealed virtual override CanvasSvgDocument global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement.get_ContainingDocument();
    private sealed virtual override CanvasDevice global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement.get_Device();
    private sealed virtual override CanvasSvgNamedElement global::Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement.get_Parent();
    private sealed virtual override void global::System.IDisposable.Dispose();
}
public static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgElementMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static CanvasSvgDocument get_ContainingDocument(IObjectReference _obj);
    public static CanvasDevice get_Device(IObjectReference _obj);
    public static CanvasSvgNamedElement get_Parent(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("D8B7CB94-8167-495D-9C71-5E97E5D08D2B")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElementMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void AppendChild(IObjectReference _obj, ICanvasSvgElement child);
    internal static CanvasSvgNamedElement CreateAndAppendNamedChildElement(IObjectReference _obj, string childName);
    internal static CanvasSvgTextElement CreateAndAppendTextChildElement(IObjectReference _obj, string textContent);
    internal static ICanvasSvgElement GetPreviousSibling(IObjectReference _obj, ICanvasSvgElement child);
    internal static ICanvasSvgElement GetNextSibling(IObjectReference _obj, ICanvasSvgElement child);
    internal static void InsertChildBefore(IObjectReference _obj, ICanvasSvgElement child, ICanvasSvgElement referenceChild);
    internal static bool IsAttributeSpecified(IObjectReference _obj, string attributeName);
    internal static bool IsAttributeSpecified(IObjectReference _obj, string attributeName, bool inherited);
    internal static void RemoveAttribute(IObjectReference _obj, string attributeName);
    internal static void RemoveChild(IObjectReference _obj, ICanvasSvgElement child);
    internal static void ReplaceChild(IObjectReference _obj, ICanvasSvgElement newChild, ICanvasSvgElement oldChild);
    internal static void SetStringAttribute(IObjectReference _obj, string attributeName, string attributeValue);
    internal static string GetStringAttribute(IObjectReference _obj, string attributeName);
    internal static void SetAttribute(IObjectReference _obj, string attributeName, ICanvasSvgAttribute attributeValue);
    internal static ICanvasSvgAttribute GetAttribute(IObjectReference _obj, string attributeName);
    internal static void SetIdAttribute(IObjectReference _obj, string attributeName, string attributeValue);
    internal static string GetIdAttribute(IObjectReference _obj, string attributeName);
    internal static void SetFloatAttribute(IObjectReference _obj, string attributeName, float attributeValue);
    internal static float GetFloatAttribute(IObjectReference _obj, string attributeName);
    internal static void SetColorAttribute(IObjectReference _obj, string attributeName, Color attributeValue);
    internal static Color GetColorAttribute(IObjectReference _obj, string attributeName);
    internal static void SetFilledRegionDeterminationAttribute(IObjectReference _obj, string attributeName, CanvasFilledRegionDetermination attributeValue);
    internal static CanvasFilledRegionDetermination GetFilledRegionDeterminationAttribute(IObjectReference _obj, string attributeName);
    internal static void SetDisplayAttribute(IObjectReference _obj, string attributeName, CanvasSvgDisplay attributeValue);
    internal static CanvasSvgDisplay GetDisplayAttribute(IObjectReference _obj, string attributeName);
    internal static void SetOverflowAttribute(IObjectReference _obj, string attributeName, CanvasSvgOverflow attributeValue);
    internal static CanvasSvgOverflow GetOverflowAttribute(IObjectReference _obj, string attributeName);
    internal static void SetCapStyleAttribute(IObjectReference _obj, string attributeName, CanvasCapStyle attributeValue);
    internal static CanvasCapStyle GetCapStyleAttribute(IObjectReference _obj, string attributeName);
    internal static void SetLineJoinAttribute(IObjectReference _obj, string attributeName, CanvasLineJoin attributeValue);
    internal static CanvasLineJoin GetLineJoinAttribute(IObjectReference _obj, string attributeName);
    internal static void SetVisibilityAttribute(IObjectReference _obj, string attributeName, CanvasSvgVisibility attributeValue);
    internal static CanvasSvgVisibility GetVisibilityAttribute(IObjectReference _obj, string attributeName);
    internal static void SetTransformAttribute(IObjectReference _obj, string attributeName, Matrix3x2 attributeValue);
    internal static Matrix3x2 GetTransformAttribute(IObjectReference _obj, string attributeName);
    internal static void SetUnitsAttribute(IObjectReference _obj, string attributeName, CanvasSvgUnits attributeValue);
    internal static CanvasSvgUnits GetUnitsAttribute(IObjectReference _obj, string attributeName);
    internal static void SetEdgeBehaviorAttribute(IObjectReference _obj, string attributeName, CanvasEdgeBehavior attributeValue);
    internal static CanvasEdgeBehavior GetEdgeBehaviorAttribute(IObjectReference _obj, string attributeName);
    internal static void SetRectangleAttribute(IObjectReference _obj, string attributeName, Rect attributeValue);
    internal static Rect GetRectangleAttribute(IObjectReference _obj, string attributeName);
    internal static void SetLengthAttribute(IObjectReference _obj, string attributeName, float value, CanvasSvgLengthUnits units);
    internal static float GetLengthAttribute(IObjectReference _obj, string attributeName, CanvasSvgLengthUnits& units);
    internal static void SetAspectRatioAttribute(IObjectReference _obj, string attributeName, CanvasSvgAspectAlignment alignment, CanvasSvgAspectScaling meetOrSlice);
    internal static CanvasSvgAspectAlignment GetAspectRatioAttribute(IObjectReference _obj, string attributeName, CanvasSvgAspectScaling& meetOrSlice);
    internal static ICanvasSvgElement get_FirstChild(IObjectReference _obj);
    internal static bool get_HasChildren(IObjectReference _obj);
    internal static ICanvasSvgElement get_LastChild(IObjectReference _obj);
    internal static String[] get_SpecifiedAttributes(IObjectReference _obj);
    internal static string get_Tag(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("653786A8-F3AB-4083-991D-9748AA86BD6E")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttributeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Color get_Color(IObjectReference _obj);
    internal static void set_Color(IObjectReference _obj, Color value);
    internal static string get_Id(IObjectReference _obj);
    internal static void set_Id(IObjectReference _obj, string value);
    internal static CanvasSvgPaintType get_PaintType(IObjectReference _obj);
    internal static void set_PaintType(IObjectReference _obj, CanvasSvgPaintType value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("652786A8-F3AB-4083-991D-9748AB86BD6E")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttributeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasGeometry CreatePathGeometry(IObjectReference _obj);
    internal static CanvasGeometry CreatePathGeometry(IObjectReference _obj, CanvasFilledRegionDetermination fill);
    internal static CanvasSvgPathCommand[] GetCommands(IObjectReference _obj, int startIndex, int elementCount);
    internal static Single[] GetSegmentData(IObjectReference _obj, int startIndex, int elementCount);
    internal static void RemoveCommandsAtEnd(IObjectReference _obj, int commandsCount);
    internal static void RemoveSegmentDataAtEnd(IObjectReference _obj, int commandsCount);
    internal static void SetCommands(IObjectReference _obj, int startIndex, CanvasSvgPathCommand[] commands);
    internal static void SetSegmentData(IObjectReference _obj, int startIndex, Single[] segmentData);
    internal static CanvasSvgPathCommand[] get_Commands(IObjectReference _obj);
    internal static Single[] get_SegmentData(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD6F")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttributeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Vector2[] GetPoints(IObjectReference _obj, int startIndex, int elementCount);
    internal static void RemovePointsAtEnd(IObjectReference _obj, int pointCount);
    internal static void SetPoints(IObjectReference _obj, int startIndex, Vector2[] points);
    internal static Vector2[] get_Points(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD70")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttributeMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Single[] GetDashes(IObjectReference _obj);
    internal static Single[] GetDashes(IObjectReference _obj, int startIndex, int elementCount, CanvasSvgLengthUnits[]& outputUnitsElements);
    internal static void RemoveDashesAtEnd(IObjectReference _obj, int dashCount);
    internal static void SetDashes(IObjectReference _obj, int startIndex, Single[] dashes);
    internal static void SetDashes(IObjectReference _obj, int startIndex, Single[] dashes, CanvasSvgLengthUnits units);
    internal static void SetDashes(IObjectReference _obj, int startIndex, Single[] dashValues, CanvasSvgLengthUnits[] unitValues);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD6D")]
internal interface ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement {
}
internal static class ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElementMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static string get_Text(IObjectReference _obj);
    internal static void set_Text(IObjectReference _obj, string value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint : ValueType {
    public CanvasLineBreakCondition BreakBefore;
    public CanvasLineBreakCondition BreakAfter;
    public byte IsWhitespace;
    public byte IsSoftHyphen;
    public static Marshaler CreateMarshaler(CanvasAnalyzedBreakpoint arg);
    public static CanvasAnalyzedBreakpoint GetAbi(Marshaler m);
    public static CanvasAnalyzedBreakpoint FromAbi(CanvasAnalyzedBreakpoint arg);
    public static CanvasAnalyzedBreakpoint FromManaged(CanvasAnalyzedBreakpoint arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasAnalyzedBreakpoint arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasAnalyzedBreakpoint abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation : ValueType {
    public CanvasGlyphOrientation GlyphOrientation;
    public UInt32 AdjustedBidiLevel;
    public byte IsSideways;
    public byte IsRightToLeft;
    public static Marshaler CreateMarshaler(CanvasAnalyzedGlyphOrientation arg);
    public static CanvasAnalyzedGlyphOrientation GetAbi(Marshaler m);
    public static CanvasAnalyzedGlyphOrientation FromAbi(CanvasAnalyzedGlyphOrientation arg);
    public static CanvasAnalyzedGlyphOrientation FromManaged(CanvasAnalyzedGlyphOrientation arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasAnalyzedGlyphOrientation arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasAnalyzedGlyphOrientation abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasFontFace : ValueType {
    public static IObjectReference CreateMarshaler(CanvasFontFace obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasFontFace obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasFontFace FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasFontFace obj);
    public static MarshalerArray<CanvasFontFace> CreateMarshalerArray(CanvasFontFace[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasFontFace[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasFontFace[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasFontFace[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasFontFace> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasFontFaceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasFontProperty : ValueType {
    public CanvasFontPropertyIdentifier Identifier;
    public IntPtr Value;
    public IntPtr Locale;
    public static Marshaler CreateMarshaler(CanvasFontProperty arg);
    public static CanvasFontProperty GetAbi(Marshaler m);
    public static CanvasFontProperty FromAbi(CanvasFontProperty arg);
    public static CanvasFontProperty FromManaged(CanvasFontProperty arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasFontProperty arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasFontProperty abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasFontSet : ValueType {
    public static IObjectReference CreateMarshaler(CanvasFontSet obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasFontSet obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasFontSet FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasFontSet obj);
    public static MarshalerArray<CanvasFontSet> CreateMarshalerArray(CanvasFontSet[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasFontSet[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasFontSet[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasFontSet[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasFontSet> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasFontSetRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping : ValueType {
    public CanvasGlyphJustification Justification;
    public byte IsClusterStart;
    public byte IsDiacritic;
    public byte IsZeroWidthSpace;
    public static Marshaler CreateMarshaler(CanvasGlyphShaping arg);
    public static CanvasGlyphShaping GetAbi(Marshaler m);
    public static CanvasGlyphShaping FromAbi(CanvasGlyphShaping arg);
    public static CanvasGlyphShaping FromManaged(CanvasGlyphShaping arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasGlyphShaping arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasGlyphShaping abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity : ValueType {
    public float ExpansionMinimum;
    public float ExpansionMaximum;
    public float CompressionMaximum;
    public byte ExpansionPriority;
    public byte CompressionPriority;
    public byte AllowResidualExpansion;
    public byte AllowResidualCompression;
    public byte ApplyToLeadingEdge;
    public byte ApplyToTrailingEdge;
    public static Marshaler CreateMarshaler(CanvasJustificationOpportunity arg);
    public static CanvasJustificationOpportunity GetAbi(Marshaler m);
    public static CanvasJustificationOpportunity FromAbi(CanvasJustificationOpportunity arg);
    public static CanvasJustificationOpportunity FromManaged(CanvasJustificationOpportunity arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasJustificationOpportunity arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasJustificationOpportunity abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasLineMetrics : ValueType {
    public int CharacterCount;
    public int TrailingWhitespaceCount;
    public int TerminalNewlineCount;
    public float Height;
    public float Baseline;
    public byte IsTrimmed;
    public float LeadingWhitespaceBefore;
    public float LeadingWhitespaceAfter;
    public static Marshaler CreateMarshaler(CanvasLineMetrics arg);
    public static CanvasLineMetrics GetAbi(Marshaler m);
    public static CanvasLineMetrics FromAbi(CanvasLineMetrics arg);
    public static CanvasLineMetrics FromManaged(CanvasLineMetrics arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasLineMetrics arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasLineMetrics abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution : ValueType {
    public static IObjectReference CreateMarshaler(CanvasNumberSubstitution obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasNumberSubstitution obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasNumberSubstitution FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasNumberSubstitution obj);
    public static MarshalerArray<CanvasNumberSubstitution> CreateMarshalerArray(CanvasNumberSubstitution[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasNumberSubstitution[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasNumberSubstitution[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasNumberSubstitution[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasNumberSubstitution> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasScaledFont : ValueType {
    public static IObjectReference CreateMarshaler(CanvasScaledFont obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasScaledFont obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasScaledFont FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasScaledFont obj);
    public static MarshalerArray<CanvasScaledFont> CreateMarshalerArray(CanvasScaledFont[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasScaledFont[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasScaledFont[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasScaledFont[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasScaledFont> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasScaledFontRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasScriptProperties : ValueType {
    public IntPtr IsoScriptCode;
    public int IsoScriptNumber;
    public int ClusterLookahead;
    public IntPtr JustificationCharacter;
    public byte RestrictCaretToClusters;
    public byte UsesWordDividers;
    public byte IsDiscreteWriting;
    public byte IsBlockWriting;
    public byte IsDistributedWithinCluster;
    public byte IsConnectedWriting;
    public byte IsCursiveWriting;
    public static Marshaler CreateMarshaler(CanvasScriptProperties arg);
    public static CanvasScriptProperties GetAbi(Marshaler m);
    public static CanvasScriptProperties FromAbi(CanvasScriptProperties arg);
    public static CanvasScriptProperties FromManaged(CanvasScriptProperties arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasScriptProperties arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasScriptProperties abi);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer : ValueType {
    public static IObjectReference CreateMarshaler(CanvasTextAnalyzer obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasTextAnalyzer obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasTextAnalyzer FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasTextAnalyzer obj);
    public static MarshalerArray<CanvasTextAnalyzer> CreateMarshalerArray(CanvasTextAnalyzer[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasTextAnalyzer[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasTextAnalyzer[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasTextAnalyzer[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasTextAnalyzer> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzerRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextFormat : ValueType {
    public static IObjectReference CreateMarshaler(CanvasTextFormat obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasTextFormat obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasTextFormat FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasTextFormat obj);
    public static MarshalerArray<CanvasTextFormat> CreateMarshalerArray(CanvasTextFormat[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasTextFormat[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasTextFormat[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasTextFormat[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasTextFormat> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextFormatRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextLayout : ValueType {
    public static IObjectReference CreateMarshaler(CanvasTextLayout obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasTextLayout obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasTextLayout FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasTextLayout obj);
    public static MarshalerArray<CanvasTextLayout> CreateMarshalerArray(CanvasTextLayout[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasTextLayout[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasTextLayout[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasTextLayout[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasTextLayout> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters : ValueType {
    public static IObjectReference CreateMarshaler(CanvasTextRenderingParameters obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasTextRenderingParameters obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasTextRenderingParameters FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasTextRenderingParameters obj);
    public static MarshalerArray<CanvasTextRenderingParameters> CreateMarshalerArray(CanvasTextRenderingParameters[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasTextRenderingParameters[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasTextRenderingParameters[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasTextRenderingParameters[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasTextRenderingParameters> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParametersRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.Text.CanvasTypography : ValueType {
    public static IObjectReference CreateMarshaler(CanvasTypography obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasTypography obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasTypography FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasTypography obj);
    public static MarshalerArray<CanvasTypography> CreateMarshalerArray(CanvasTypography[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasTypography[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasTypography[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasTypography[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasTypography> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.Text.CanvasTypographyRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[GuidAttribute("5199D129-4EF9-4DEE-B74C-4DC910201A7F")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontFace {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontFaceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasTextRenderingMode GetRecommendedRenderingMode(IObjectReference _obj, float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters);
    internal static CanvasTextRenderingMode GetRecommendedRenderingMode(IObjectReference _obj, float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters, Matrix3x2 transform, bool isSideways, CanvasAntialiasing outlineThreshold);
    internal static CanvasTextGridFit GetRecommendedGridFit(IObjectReference _obj, float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters, Matrix3x2 transform, bool isSideways, CanvasAntialiasing outlineThreshold);
    internal static Int32[] GetVerticalGlyphVariants(IObjectReference _obj, Int32[] inputElements);
    internal static Int32[] GetGlyphIndices(IObjectReference _obj, UInt32[] inputElements);
    internal static CanvasGlyphMetrics[] GetGlyphMetrics(IObjectReference _obj, Int32[] inputElements, bool isSideways);
    internal static CanvasGlyphMetrics[] GetGdiCompatibleGlyphMetrics(IObjectReference _obj, float fontSize, float dpi, Matrix3x2 transform, bool useGdiNatural, Int32[] inputElements, bool isSideways);
    internal static IReadOnlyDictionary`2<string, string> GetInformationalStrings(IObjectReference _obj, CanvasFontInformation fontInformation);
    internal static bool HasCharacter(IObjectReference _obj, UInt32 unicodeValue);
    internal static Rect GetGlyphRunBounds(IObjectReference _obj, CanvasDrawingSession drawingSession, Vector2 point, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel);
    internal static Rect GetGlyphRunBounds(IObjectReference _obj, CanvasDrawingSession drawingSession, Vector2 point, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, CanvasTextMeasuringMode measuringMode);
    internal static CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(IObjectReference _obj, CanvasAnalyzedScript script);
    internal static CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(IObjectReference _obj, CanvasAnalyzedScript script, string locale);
    internal static Boolean[] GetTypographicFeatureGlyphSupport(IObjectReference _obj, CanvasAnalyzedScript script, CanvasTypographyFeatureName typographicFeatureName, CanvasGlyph[] glyphsElements);
    internal static Boolean[] GetTypographicFeatureGlyphSupport(IObjectReference _obj, CanvasAnalyzedScript script, CanvasTypographyFeatureName typographicFeatureName, CanvasGlyph[] glyphsElements, string locale);
    internal static float get_Ascent(IObjectReference _obj);
    internal static float get_CapHeight(IObjectReference _obj);
    internal static float get_CaretOffset(IObjectReference _obj);
    internal static float get_CaretSlopeRise(IObjectReference _obj);
    internal static float get_CaretSlopeRun(IObjectReference _obj);
    internal static float get_Descent(IObjectReference _obj);
    internal static IReadOnlyDictionary`2<string, string> get_FaceNames(IObjectReference _obj);
    internal static IReadOnlyDictionary`2<string, string> get_FamilyNames(IObjectReference _obj);
    internal static CanvasFontFileFormatType get_FileFormatType(IObjectReference _obj);
    internal static Rect get_GlyphBox(IObjectReference _obj);
    internal static UInt32 get_GlyphCount(IObjectReference _obj);
    internal static bool get_HasTypographicMetrics(IObjectReference _obj);
    internal static bool get_HasVerticalGlyphVariants(IObjectReference _obj);
    internal static bool get_IsMonospaced(IObjectReference _obj);
    internal static bool get_IsSymbolFont(IObjectReference _obj);
    internal static float get_LineGap(IObjectReference _obj);
    internal static float get_LowercaseLetterHeight(IObjectReference _obj);
    internal static Byte[] get_Panose(IObjectReference _obj);
    internal static CanvasFontSimulations get_Simulations(IObjectReference _obj);
    internal static FontStretch get_Stretch(IObjectReference _obj);
    internal static float get_StrikethroughPosition(IObjectReference _obj);
    internal static float get_StrikethroughThickness(IObjectReference _obj);
    internal static FontStyle get_Style(IObjectReference _obj);
    internal static Vector2 get_SubscriptPosition(IObjectReference _obj);
    internal static Size get_SubscriptSize(IObjectReference _obj);
    internal static Vector2 get_SuperscriptPosition(IObjectReference _obj);
    internal static Size get_SuperscriptSize(IObjectReference _obj);
    internal static float get_UnderlinePosition(IObjectReference _obj);
    internal static float get_UnderlineThickness(IObjectReference _obj);
    internal static CanvasUnicodeRange[] get_UnicodeRanges(IObjectReference _obj);
    internal static FontWeight get_Weight(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("0A5BFB92-1F3C-459F-9D7E-A6289DD093C0")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSet {
}
[GuidAttribute("3C9C9BDA-70F9-4FF9-AAB2-3B42923286EE")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasFontSet Create(IObjectReference _obj, Uri uri);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSetMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static bool TryFindFontFace(IObjectReference _obj, CanvasFontFace fontFace, Int32& index);
    internal static CanvasFontSet GetMatchingFonts(IObjectReference _obj, CanvasFontProperty[] propertyElements);
    internal static CanvasFontSet GetMatchingFonts(IObjectReference _obj, string familyName, FontWeight weight, FontStretch stretch, FontStyle style);
    internal static UInt32 CountFontsMatchingProperty(IObjectReference _obj, CanvasFontProperty property);
    internal static IReadOnlyDictionary`2<string, string> GetPropertyValues(IObjectReference _obj, UInt32 fontIndex, CanvasFontPropertyIdentifier propertyIdentifier);
    internal static CanvasFontProperty[] GetPropertyValues(IObjectReference _obj, CanvasFontPropertyIdentifier propertyIdentifier, string preferredLocaleNames);
    internal static CanvasFontProperty[] GetPropertyValues(IObjectReference _obj, CanvasFontPropertyIdentifier propertyIdentifier);
    internal static IReadOnlyList`1<CanvasFontFace> get_Fonts(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("5F4275CE-BCFA-48C5-9E67-FBE9866D4924")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSetStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasFontSet GetSystemFontSet(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("C81A67AD-0639-4F8F-878B-D937F8A14293")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution {
}
[GuidAttribute("7496A822-C781-4EB0-AAFB-C078E7FA8E24")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasNumberSubstitution Create(IObjectReference _obj, CanvasNumberSubstitutionMethod method);
    internal static CanvasNumberSubstitution CreateWithLocaleAndIgnoreOverrides(IObjectReference _obj, CanvasNumberSubstitutionMethod method, string localeName, bool ignoreEnvironmentOverrides);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("BBC4F8D2-EB2B-45F1-AC2A-CFC1F598BAE3")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasScaledFont {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasScaledFontMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasFontFace get_FontFace(IObjectReference _obj);
    internal static float get_ScaleFactor(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("4298F3D1-645B-40E3-B91B-81986D767FC0")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer {
}
[GuidAttribute("521E433F-F698-44C0-8D7F-FE374FE539E1")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasTextAnalyzer Create(IObjectReference _obj, string text, CanvasTextDirection textDirection);
    internal static CanvasTextAnalyzer CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(IObjectReference _obj, string text, CanvasTextDirection textDirection, CanvasNumberSubstitution numberSubstitution, CanvasVerticalGlyphOrientation verticalGlyphOrientation, UInt32 bidiLevel);
    internal static CanvasTextAnalyzer CreateWithOptions(IObjectReference _obj, string text, CanvasTextDirection textDirection, ICanvasTextAnalyzerOptions options);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont>> GetFonts(IObjectReference _obj, CanvasTextFormat textFormat);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont>> GetFonts(IObjectReference _obj, CanvasTextFormat textFormat, CanvasFontSet fontSet);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi>> GetBidi(IObjectReference _obj);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi>> GetBidi(IObjectReference _obj, string locale);
    internal static CanvasAnalyzedBreakpoint[] GetBreakpoints(IObjectReference _obj);
    internal static CanvasAnalyzedBreakpoint[] GetBreakpoints(IObjectReference _obj, string locale);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasNumberSubstitution>> GetNumberSubstitutions(IObjectReference _obj);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript>> GetScript(IObjectReference _obj);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript>> GetScript(IObjectReference _obj, string locale);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations(IObjectReference _obj);
    internal static IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations(IObjectReference _obj, string locale);
    internal static CanvasScriptProperties GetScriptProperties(IObjectReference _obj, CanvasAnalyzedScript analyzedScript);
    internal static CanvasGlyph[] GetGlyphs(IObjectReference _obj, CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, bool isSideways, bool isRightToLeft, CanvasAnalyzedScript script);
    internal static CanvasGlyph[] GetGlyphs(IObjectReference _obj, CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, bool isSideways, bool isRightToLeft, CanvasAnalyzedScript script, string locale, CanvasNumberSubstitution numberSubstitution, IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasTypography>> typographyRanges, Int32[]& clusterMapIndicesElements, Boolean[]& isShapedAloneGlyphsElements, CanvasGlyphShaping[]& glyphShapingResultsElements);
    internal static CanvasJustificationOpportunity[] GetJustificationOpportunities(IObjectReference _obj, CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyphShaping[] glyphShapingResultsElements);
    internal static CanvasGlyph[] ApplyJustificationOpportunities(IObjectReference _obj, float lineWidth, CanvasJustificationOpportunity[] justificationOpportunitiesElements, CanvasGlyph[] sourceGlyphsElements);
    internal static CanvasGlyph[] AddGlyphsAfterJustification(IObjectReference _obj, CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyph[] originalGlyphsElements, CanvasGlyph[] justifiedGlyphsElements, CanvasGlyphShaping[] glyphShapingResultsElements);
    internal static CanvasGlyph[] AddGlyphsAfterJustification(IObjectReference _obj, CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyph[] originalGlyphsElements, CanvasGlyph[] justifiedGlyphsElements, CanvasGlyphShaping[] glyphShapingResultsElements, Int32[]& outputClusterMapIndicesElements);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("31F2406A-8C5F-4E12-8BD6-CFBBC7214D02")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ICanvasTextAnalyzerOptions();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetLocaleName_0(IntPtr thisPtr, int characterIndex, Int32* characterCount, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetNumberSubstitution_1(IntPtr thisPtr, int characterIndex, Int32* characterCount, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetVerticalGlyphOrientation_2(IntPtr thisPtr, int characterIndex, Int32* characterCount, CanvasVerticalGlyphOrientation* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_GetBidiLevel_3(IntPtr thisPtr, int characterIndex, Int32* characterCount, UInt32* value);
    private sealed virtual override string global::Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetLocaleName(int characterIndex, Int32& characterCount);
    private sealed virtual override CanvasNumberSubstitution global::Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetNumberSubstitution(int characterIndex, Int32& characterCount);
    private sealed virtual override CanvasVerticalGlyphOrientation global::Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetVerticalGlyphOrientation(int characterIndex, Int32& characterCount);
    private sealed virtual override UInt32 global::Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions.GetBidiLevel(int characterIndex, Int32& characterCount);
}
public static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptionsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static string GetLocaleName(IObjectReference _obj, int characterIndex, Int32& characterCount);
    public static CanvasNumberSubstitution GetNumberSubstitution(IObjectReference _obj, int characterIndex, Int32& characterCount);
    public static CanvasVerticalGlyphOrientation GetVerticalGlyphOrientation(IObjectReference _obj, int characterIndex, Int32& characterCount);
    public static UInt32 GetBidiLevel(IObjectReference _obj, int characterIndex, Int32& characterCount);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("AF61BFDC-EABB-4D38-BA1B-AFB340612D33")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextFormatMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static ICanvasTextInlineObject get_CustomTrimmingSign(IObjectReference _obj);
    internal static void set_CustomTrimmingSign(IObjectReference _obj, ICanvasTextInlineObject value);
    internal static CanvasTextDirection get_Direction(IObjectReference _obj);
    internal static void set_Direction(IObjectReference _obj, CanvasTextDirection value);
    internal static string get_FontFamily(IObjectReference _obj);
    internal static void set_FontFamily(IObjectReference _obj, string value);
    internal static float get_FontSize(IObjectReference _obj);
    internal static void set_FontSize(IObjectReference _obj, float value);
    internal static FontStretch get_FontStretch(IObjectReference _obj);
    internal static void set_FontStretch(IObjectReference _obj, FontStretch value);
    internal static FontStyle get_FontStyle(IObjectReference _obj);
    internal static void set_FontStyle(IObjectReference _obj, FontStyle value);
    internal static FontWeight get_FontWeight(IObjectReference _obj);
    internal static void set_FontWeight(IObjectReference _obj, FontWeight value);
    internal static CanvasHorizontalAlignment get_HorizontalAlignment(IObjectReference _obj);
    internal static void set_HorizontalAlignment(IObjectReference _obj, CanvasHorizontalAlignment value);
    internal static float get_IncrementalTabStop(IObjectReference _obj);
    internal static void set_IncrementalTabStop(IObjectReference _obj, float value);
    internal static bool get_LastLineWrapping(IObjectReference _obj);
    internal static void set_LastLineWrapping(IObjectReference _obj, bool value);
    internal static float get_LineSpacing(IObjectReference _obj);
    internal static void set_LineSpacing(IObjectReference _obj, float value);
    internal static float get_LineSpacingBaseline(IObjectReference _obj);
    internal static void set_LineSpacingBaseline(IObjectReference _obj, float value);
    internal static CanvasLineSpacingMode get_LineSpacingMode(IObjectReference _obj);
    internal static void set_LineSpacingMode(IObjectReference _obj, CanvasLineSpacingMode value);
    internal static string get_LocaleName(IObjectReference _obj);
    internal static void set_LocaleName(IObjectReference _obj, string value);
    internal static CanvasOpticalAlignment get_OpticalAlignment(IObjectReference _obj);
    internal static void set_OpticalAlignment(IObjectReference _obj, CanvasOpticalAlignment value);
    internal static CanvasDrawTextOptions get_Options(IObjectReference _obj);
    internal static void set_Options(IObjectReference _obj, CanvasDrawTextOptions value);
    internal static string get_TrimmingDelimiter(IObjectReference _obj);
    internal static void set_TrimmingDelimiter(IObjectReference _obj, string value);
    internal static int get_TrimmingDelimiterCount(IObjectReference _obj);
    internal static void set_TrimmingDelimiterCount(IObjectReference _obj, int value);
    internal static CanvasTextTrimmingGranularity get_TrimmingGranularity(IObjectReference _obj);
    internal static void set_TrimmingGranularity(IObjectReference _obj, CanvasTextTrimmingGranularity value);
    internal static CanvasTrimmingSign get_TrimmingSign(IObjectReference _obj);
    internal static void set_TrimmingSign(IObjectReference _obj, CanvasTrimmingSign value);
    internal static CanvasVerticalAlignment get_VerticalAlignment(IObjectReference _obj);
    internal static void set_VerticalAlignment(IObjectReference _obj, CanvasVerticalAlignment value);
    internal static CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation(IObjectReference _obj);
    internal static void set_VerticalGlyphOrientation(IObjectReference _obj, CanvasVerticalGlyphOrientation value);
    internal static CanvasWordWrapping get_WordWrapping(IObjectReference _obj);
    internal static void set_WordWrapping(IObjectReference _obj, CanvasWordWrapping value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("8A927515-33FC-4C92-A6AA-94A8F29C140B")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static String[] GetSystemFontFamilies(IObjectReference _obj);
    internal static String[] GetSystemFontFamilies(IObjectReference _obj, IReadOnlyList`1<string> localeList);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("7A89EE99-CE2A-47FA-9DD2-0A6825F6053F")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject {
    public static IntPtr AbiToProjectionVftablePtr;
    private float global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.Baseline { get; }
    private CanvasLineBreakCondition global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.BreakAfter { get; }
    private CanvasLineBreakCondition global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.BreakBefore { get; }
    private Rect global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.DrawBounds { get; }
    private Size global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.Size { get; }
    private bool global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.SupportsSideways { get; }
    private static ICanvasTextInlineObject();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Draw_0(IntPtr thisPtr, IntPtr textRenderer, Vector2 point, byte isSideways, byte isRightToLeft, IntPtr brush);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Baseline_2(IntPtr thisPtr, Single* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_BreakAfter_6(IntPtr thisPtr, CanvasLineBreakCondition* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_BreakBefore_5(IntPtr thisPtr, CanvasLineBreakCondition* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_DrawBounds_4(IntPtr thisPtr, Rect* bounds);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Size_1(IntPtr thisPtr, Size* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_SupportsSideways_3(IntPtr thisPtr, Byte* value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.Draw(ICanvasTextRenderer textRenderer, Vector2 point, bool isSideways, bool isRightToLeft, object brush);
    private sealed virtual override float global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.get_Baseline();
    private sealed virtual override CanvasLineBreakCondition global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.get_BreakAfter();
    private sealed virtual override CanvasLineBreakCondition global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.get_BreakBefore();
    private sealed virtual override Rect global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.get_DrawBounds();
    private sealed virtual override Size global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.get_Size();
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject.get_SupportsSideways();
}
public static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObjectMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static void Draw(IObjectReference _obj, ICanvasTextRenderer textRenderer, Vector2 point, bool isSideways, bool isRightToLeft, object brush);
    public static float get_Baseline(IObjectReference _obj);
    public static CanvasLineBreakCondition get_BreakAfter(IObjectReference _obj);
    public static CanvasLineBreakCondition get_BreakBefore(IObjectReference _obj);
    public static Rect get_DrawBounds(IObjectReference _obj);
    public static Size get_Size(IObjectReference _obj);
    public static bool get_SupportsSideways(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("BAE63E54-48AE-4446-A2C7-B6EF93806C20")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout {
}
[GuidAttribute("9C1F7179-ACD0-4680-93D5-95A6247E8F6B")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasTextLayout Create(IObjectReference _obj, ICanvasResourceCreator resourceCreator, string textString, CanvasTextFormat textFormat, float requestedWidth, float requestedHeight);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Int32[] GetFormatChangeIndices(IObjectReference _obj);
    internal static float GetMinimumLineLength(IObjectReference _obj);
    internal static ICanvasBrush GetBrush(IObjectReference _obj, int characterIndex);
    internal static object GetCustomBrush(IObjectReference _obj, int characterIndex);
    internal static string GetFontFamily(IObjectReference _obj, int characterIndex);
    internal static float GetFontSize(IObjectReference _obj, int characterIndex);
    internal static FontStretch GetFontStretch(IObjectReference _obj, int characterIndex);
    internal static FontStyle GetFontStyle(IObjectReference _obj, int characterIndex);
    internal static FontWeight GetFontWeight(IObjectReference _obj, int characterIndex);
    internal static string GetLocaleName(IObjectReference _obj, int characterIndex);
    internal static bool GetStrikethrough(IObjectReference _obj, int characterIndex);
    internal static bool GetUnderline(IObjectReference _obj, int characterIndex);
    internal static ICanvasTextInlineObject GetInlineObject(IObjectReference _obj, int characterIndex);
    internal static void SetColor(IObjectReference _obj, int characterIndex, int characterCount, Color color);
    internal static void SetBrush(IObjectReference _obj, int characterIndex, int characterCount, ICanvasBrush brush);
    internal static void SetCustomBrush(IObjectReference _obj, int characterIndex, int characterCount, object brush);
    internal static void SetFontFamily(IObjectReference _obj, int characterIndex, int characterCount, string fontFamily);
    internal static void SetFontSize(IObjectReference _obj, int characterIndex, int characterCount, float fontSize);
    internal static void SetFontStretch(IObjectReference _obj, int characterIndex, int characterCount, FontStretch fontStretch);
    internal static void SetFontStyle(IObjectReference _obj, int characterIndex, int characterCount, FontStyle fontStyle);
    internal static void SetFontWeight(IObjectReference _obj, int characterIndex, int characterCount, FontWeight fontWeight);
    internal static void SetLocaleName(IObjectReference _obj, int characterIndex, int characterCount, string name);
    internal static void SetStrikethrough(IObjectReference _obj, int characterIndex, int characterCount, bool hasStrikethrough);
    internal static void SetUnderline(IObjectReference _obj, int characterIndex, int characterCount, bool hasUnderline);
    internal static void SetInlineObject(IObjectReference _obj, int characterIndex, int characterCount, ICanvasTextInlineObject inlineObject);
    internal static void DrawToTextRenderer(IObjectReference _obj, ICanvasTextRenderer textRenderer, Vector2 position);
    internal static void DrawToTextRenderer(IObjectReference _obj, ICanvasTextRenderer textRenderer, float x, float y);
    internal static void SetTypography(IObjectReference _obj, int characterIndex, int characterCount, CanvasTypography typography);
    internal static CanvasTypography GetTypography(IObjectReference _obj, int characterIndex);
    internal static bool HitTest(IObjectReference _obj, Vector2 point);
    internal static bool HitTest(IObjectReference _obj, float x, float y);
    internal static bool HitTest(IObjectReference _obj, Vector2 point, CanvasTextLayoutRegion& textLayoutRegion);
    internal static bool HitTest(IObjectReference _obj, float x, float y, CanvasTextLayoutRegion& textLayoutRegion);
    internal static bool HitTest(IObjectReference _obj, Vector2 point, CanvasTextLayoutRegion& textLayoutRegion, Boolean& trailingSideOfCharacter);
    internal static bool HitTest(IObjectReference _obj, float x, float y, CanvasTextLayoutRegion& textLayoutRegion, Boolean& trailingSideOfCharacter);
    internal static Vector2 GetCaretPosition(IObjectReference _obj, int characterIndex, bool trailingSideOfCharacter);
    internal static Vector2 GetCaretPosition(IObjectReference _obj, int characterIndex, bool trailingSideOfCharacter, CanvasTextLayoutRegion& textLayoutRegion);
    internal static CanvasTextLayoutRegion[] GetCharacterRegions(IObjectReference _obj, int characterIndex, int characterCount);
    internal static bool GetPairKerning(IObjectReference _obj, int characterIndex);
    internal static void SetPairKerning(IObjectReference _obj, int characterIndex, int characterCount, bool hasPairKerning);
    internal static float GetLeadingCharacterSpacing(IObjectReference _obj, int characterIndex);
    internal static float GetTrailingCharacterSpacing(IObjectReference _obj, int characterIndex);
    internal static float GetMinimumCharacterAdvance(IObjectReference _obj, int characterIndex);
    internal static void SetCharacterSpacing(IObjectReference _obj, int characterIndex, int characterCount, float leadingSpacing, float trailingSpacing, float minimumAdvance);
    internal static CanvasClusterMetrics[] get_ClusterMetrics(IObjectReference _obj);
    internal static ICanvasTextInlineObject get_CustomTrimmingSign(IObjectReference _obj);
    internal static void set_CustomTrimmingSign(IObjectReference _obj, ICanvasTextInlineObject value);
    internal static string get_DefaultFontFamily(IObjectReference _obj);
    internal static float get_DefaultFontSize(IObjectReference _obj);
    internal static FontStretch get_DefaultFontStretch(IObjectReference _obj);
    internal static FontStyle get_DefaultFontStyle(IObjectReference _obj);
    internal static FontWeight get_DefaultFontWeight(IObjectReference _obj);
    internal static string get_DefaultLocaleName(IObjectReference _obj);
    internal static CanvasDevice get_Device(IObjectReference _obj);
    internal static CanvasTextDirection get_Direction(IObjectReference _obj);
    internal static void set_Direction(IObjectReference _obj, CanvasTextDirection value);
    internal static Rect get_DrawBounds(IObjectReference _obj);
    internal static CanvasHorizontalAlignment get_HorizontalAlignment(IObjectReference _obj);
    internal static void set_HorizontalAlignment(IObjectReference _obj, CanvasHorizontalAlignment value);
    internal static float get_IncrementalTabStop(IObjectReference _obj);
    internal static void set_IncrementalTabStop(IObjectReference _obj, float value);
    internal static bool get_LastLineWrapping(IObjectReference _obj);
    internal static void set_LastLineWrapping(IObjectReference _obj, bool value);
    internal static Rect get_LayoutBounds(IObjectReference _obj);
    internal static Rect get_LayoutBoundsIncludingTrailingWhitespace(IObjectReference _obj);
    internal static int get_LineCount(IObjectReference _obj);
    internal static CanvasLineMetrics[] get_LineMetrics(IObjectReference _obj);
    internal static float get_LineSpacing(IObjectReference _obj);
    internal static void set_LineSpacing(IObjectReference _obj, float value);
    internal static float get_LineSpacingBaseline(IObjectReference _obj);
    internal static void set_LineSpacingBaseline(IObjectReference _obj, float value);
    internal static CanvasLineSpacingMode get_LineSpacingMode(IObjectReference _obj);
    internal static void set_LineSpacingMode(IObjectReference _obj, CanvasLineSpacingMode value);
    internal static int get_MaximumBidiReorderingDepth(IObjectReference _obj);
    internal static CanvasOpticalAlignment get_OpticalAlignment(IObjectReference _obj);
    internal static void set_OpticalAlignment(IObjectReference _obj, CanvasOpticalAlignment value);
    internal static CanvasDrawTextOptions get_Options(IObjectReference _obj);
    internal static void set_Options(IObjectReference _obj, CanvasDrawTextOptions value);
    internal static Size get_RequestedSize(IObjectReference _obj);
    internal static void set_RequestedSize(IObjectReference _obj, Size value);
    internal static string get_TrimmingDelimiter(IObjectReference _obj);
    internal static void set_TrimmingDelimiter(IObjectReference _obj, string value);
    internal static int get_TrimmingDelimiterCount(IObjectReference _obj);
    internal static void set_TrimmingDelimiterCount(IObjectReference _obj, int value);
    internal static CanvasTextTrimmingGranularity get_TrimmingGranularity(IObjectReference _obj);
    internal static void set_TrimmingGranularity(IObjectReference _obj, CanvasTextTrimmingGranularity value);
    internal static CanvasTrimmingSign get_TrimmingSign(IObjectReference _obj);
    internal static void set_TrimmingSign(IObjectReference _obj, CanvasTrimmingSign value);
    internal static CanvasVerticalAlignment get_VerticalAlignment(IObjectReference _obj);
    internal static void set_VerticalAlignment(IObjectReference _obj, CanvasVerticalAlignment value);
    internal static CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation(IObjectReference _obj);
    internal static void set_VerticalGlyphOrientation(IObjectReference _obj, CanvasVerticalGlyphOrientation value);
    internal static CanvasWordWrapping get_WordWrapping(IObjectReference _obj);
    internal static void set_WordWrapping(IObjectReference _obj, CanvasWordWrapping value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("7F2B8FFD-6935-4F60-B409-6394A19C5EBC")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Matrix3x2 GetGlyphOrientationTransform(IObjectReference _obj, CanvasGlyphOrientation glyphOrientation, bool isSideways, Vector2 position);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("9AAEECE5-8D09-4A64-B322-AF030421B2E4")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer {
    public static IntPtr AbiToProjectionVftablePtr;
    private float global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.Dpi { get; }
    private bool global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.PixelSnappingDisabled { get; }
    private Matrix3x2 global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.Transform { get; }
    private static ICanvasTextRenderer();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_DrawGlyphRun_0(IntPtr thisPtr, Vector2 point, IntPtr fontFace, float fontSize, int __glyphsSize, IntPtr glyphs, byte isSideways, UInt32 bidiLevel, IntPtr brush, CanvasTextMeasuringMode measuringMode, IntPtr localeName, IntPtr textString, int __clusterMapIndicesSize, IntPtr clusterMapIndices, UInt32 characterIndex, CanvasGlyphOrientation glyphOrientation);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_DrawStrikethrough_1(IntPtr thisPtr, Vector2 point, float strikethroughWidth, float strikethroughThickness, float strikethroughOffset, CanvasTextDirection textDirection, IntPtr brush, CanvasTextMeasuringMode textMeasuringMode, IntPtr localeName, CanvasGlyphOrientation glyphOrientation);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_DrawUnderline_2(IntPtr thisPtr, Vector2 point, float underlineWidth, float underlineThickness, float underlineOffset, float runHeight, CanvasTextDirection textDirection, IntPtr brush, CanvasTextMeasuringMode textMeasuringMode, IntPtr localeName, CanvasGlyphOrientation glyphOrientation);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_DrawInlineObject_3(IntPtr thisPtr, Vector2 point, IntPtr inlineObject, byte isSideways, byte isRightToLeft, IntPtr brush, CanvasGlyphOrientation glyphOrientation);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Dpi_6(IntPtr thisPtr, Single* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_PixelSnappingDisabled_4(IntPtr thisPtr, Byte* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Transform_5(IntPtr thisPtr, Matrix3x2* value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, object brush, CanvasTextMeasuringMode measuringMode, string localeName, string textString, Int32[] clusterMapIndices, UInt32 characterIndex, CanvasGlyphOrientation glyphOrientation);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.DrawStrikethrough(Vector2 point, float strikethroughWidth, float strikethroughThickness, float strikethroughOffset, CanvasTextDirection textDirection, object brush, CanvasTextMeasuringMode textMeasuringMode, string localeName, CanvasGlyphOrientation glyphOrientation);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.DrawUnderline(Vector2 point, float underlineWidth, float underlineThickness, float underlineOffset, float runHeight, CanvasTextDirection textDirection, object brush, CanvasTextMeasuringMode textMeasuringMode, string localeName, CanvasGlyphOrientation glyphOrientation);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.DrawInlineObject(Vector2 point, ICanvasTextInlineObject inlineObject, bool isSideways, bool isRightToLeft, object brush, CanvasGlyphOrientation glyphOrientation);
    private sealed virtual override float global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.get_Dpi();
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.get_PixelSnappingDisabled();
    private sealed virtual override Matrix3x2 global::Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer.get_Transform();
}
public static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRendererMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static void DrawGlyphRun(IObjectReference _obj, Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, object brush, CanvasTextMeasuringMode measuringMode, string localeName, string textString, Int32[] clusterMapIndices, UInt32 characterIndex, CanvasGlyphOrientation glyphOrientation);
    public static void DrawStrikethrough(IObjectReference _obj, Vector2 point, float strikethroughWidth, float strikethroughThickness, float strikethroughOffset, CanvasTextDirection textDirection, object brush, CanvasTextMeasuringMode textMeasuringMode, string localeName, CanvasGlyphOrientation glyphOrientation);
    public static void DrawUnderline(IObjectReference _obj, Vector2 point, float underlineWidth, float underlineThickness, float underlineOffset, float runHeight, CanvasTextDirection textDirection, object brush, CanvasTextMeasuringMode textMeasuringMode, string localeName, CanvasGlyphOrientation glyphOrientation);
    public static void DrawInlineObject(IObjectReference _obj, Vector2 point, ICanvasTextInlineObject inlineObject, bool isSideways, bool isRightToLeft, object brush, CanvasGlyphOrientation glyphOrientation);
    public static float get_Dpi(IObjectReference _obj);
    public static bool get_PixelSnappingDisabled(IObjectReference _obj);
    public static Matrix3x2 get_Transform(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters {
}
[GuidAttribute("D240AC25-4D23-4964-9D9A-DB2FC8AF185D")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasTextRenderingParameters Create(IObjectReference _obj, CanvasTextRenderingMode textRenderingMode, CanvasTextGridFit gridFit);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasTextGridFit get_GridFit(IObjectReference _obj);
    internal static CanvasTextRenderingMode get_RenderingMode(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F15BC312-447F-44ED-8BEC-7E40F4A4DFC8")]
internal interface ABI.Microsoft.Graphics.Canvas.Text.ICanvasTypography {
}
internal static class ABI.Microsoft.Graphics.Canvas.Text.ICanvasTypographyMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void AddFeature(IObjectReference _obj, CanvasTypographyFeature feature);
    internal static void AddFeature(IObjectReference _obj, CanvasTypographyFeatureName name, UInt32 parameter);
    internal static CanvasTypographyFeature[] GetFeatures(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasCreateResourcesEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasCreateResourcesEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasCreateResourcesEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasCreateResourcesEventArgs obj);
    public static MarshalerArray<CanvasCreateResourcesEventArgs> CreateMarshalerArray(CanvasCreateResourcesEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasCreateResourcesEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasCreateResourcesEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasCreateResourcesEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasCreateResourcesEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.CanvasTimingInformation : ValueType {
    public long UpdateCount;
    public TimeSpan TotalTime;
    public TimeSpan ElapsedTime;
    public byte IsRunningSlowly;
    public static Marshaler CreateMarshaler(CanvasTimingInformation arg);
    public static CanvasTimingInformation GetAbi(Marshaler m);
    public static CanvasTimingInformation FromAbi(CanvasTimingInformation arg);
    public static CanvasTimingInformation FromManaged(CanvasTimingInformation arg);
    public static void CopyAbi(Marshaler arg, IntPtr dest);
    public static void CopyManaged(CanvasTimingInformation arg, IntPtr dest);
    public static void DisposeMarshaler(Marshaler m);
    public static void DisposeAbi(CanvasTimingInformation abi);
}
[GuidAttribute("162DEB43-1CF5-46F8-A0AF-356B23158F92")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStaticsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CompositionGraphicsDevice CreateCompositionGraphicsDevice(IObjectReference _obj, Compositor compositor, CanvasDevice canvasDevice);
    internal static ICompositionSurface CreateCompositionSurfaceForSwapChain(IObjectReference _obj, Compositor compositor, CanvasSwapChain swapChain);
    internal static CanvasDevice GetCanvasDevice(IObjectReference _obj, CompositionGraphicsDevice graphicsDevice);
    internal static void SetCanvasDevice(IObjectReference _obj, CompositionGraphicsDevice graphicsDevice, CanvasDevice canvasDevice);
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, CompositionDrawingSurface drawingSurface);
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, CompositionDrawingSurface drawingSurface, Rect updateRect);
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, CompositionDrawingSurface drawingSurface, Rect updateRectInPixels, float dpi);
    internal static void Resize(IObjectReference _obj, CompositionDrawingSurface drawingSurface, Size sizeInPixels);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("EDC52108-F6BA-4A09-9FA3-10C97A24E49A")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs {
}
[GuidAttribute("3A21C766-0781-4389-BBC3-86B1F5022AF1")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasCreateResourcesEventArgs Create(IObjectReference _obj, CanvasCreateResourcesReason createResourcesReason);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void TrackAsyncAction(IObjectReference _obj, IAsyncAction action);
    internal static IAsyncAction GetTrackedAction(IObjectReference _obj);
    internal static CanvasCreateResourcesReason get_Reason(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl : ValueType {
    public static IObjectReference CreateMarshaler(CanvasAnimatedControl obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasAnimatedControl obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasAnimatedControl FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasAnimatedControl obj);
    public static MarshalerArray<CanvasAnimatedControl> CreateMarshalerArray(CanvasAnimatedControl[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasAnimatedControl[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasAnimatedControl[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasAnimatedControl[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasAnimatedControl> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControlRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasAnimatedDrawEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasAnimatedDrawEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasAnimatedDrawEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasAnimatedDrawEventArgs obj);
    public static MarshalerArray<CanvasAnimatedDrawEventArgs> CreateMarshalerArray(CanvasAnimatedDrawEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasAnimatedDrawEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasAnimatedDrawEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasAnimatedDrawEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasAnimatedDrawEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasAnimatedUpdateEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasAnimatedUpdateEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasAnimatedUpdateEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasAnimatedUpdateEventArgs obj);
    public static MarshalerArray<CanvasAnimatedUpdateEventArgs> CreateMarshalerArray(CanvasAnimatedUpdateEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasAnimatedUpdateEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasAnimatedUpdateEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasAnimatedUpdateEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasAnimatedUpdateEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl : ValueType {
    public static IObjectReference CreateMarshaler(CanvasControl obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasControl obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasControl FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasControl obj);
    public static MarshalerArray<CanvasControl> CreateMarshalerArray(CanvasControl[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasControl[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasControl[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasControl[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasControl> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasControlRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasDrawEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasDrawEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasDrawEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasDrawEventArgs obj);
    public static MarshalerArray<CanvasDrawEventArgs> CreateMarshalerArray(CanvasDrawEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasDrawEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasDrawEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasDrawEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasDrawEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource : ValueType {
    public static IObjectReference CreateMarshaler(CanvasImageSource obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasImageSource obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasImageSource FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasImageSource obj);
    public static MarshalerArray<CanvasImageSource> CreateMarshalerArray(CanvasImageSource[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasImageSource[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasImageSource[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasImageSource[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasImageSource> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSourceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs : ValueType {
    public static IObjectReference CreateMarshaler(CanvasRegionsInvalidatedEventArgs obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasRegionsInvalidatedEventArgs obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasRegionsInvalidatedEventArgs FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasRegionsInvalidatedEventArgs obj);
    public static MarshalerArray<CanvasRegionsInvalidatedEventArgs> CreateMarshalerArray(CanvasRegionsInvalidatedEventArgs[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasRegionsInvalidatedEventArgs[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasRegionsInvalidatedEventArgs[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasRegionsInvalidatedEventArgs[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasRegionsInvalidatedEventArgs> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgsRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel : ValueType {
    public static IObjectReference CreateMarshaler(CanvasSwapChainPanel obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasSwapChainPanel obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasSwapChainPanel FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasSwapChainPanel obj);
    public static MarshalerArray<CanvasSwapChainPanel> CreateMarshalerArray(CanvasSwapChainPanel[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasSwapChainPanel[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasSwapChainPanel[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasSwapChainPanel[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasSwapChainPanel> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanelRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl : ValueType {
    public static IObjectReference CreateMarshaler(CanvasVirtualControl obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasVirtualControl obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasVirtualControl FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasVirtualControl obj);
    public static MarshalerArray<CanvasVirtualControl> CreateMarshalerArray(CanvasVirtualControl[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasVirtualControl[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasVirtualControl[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasVirtualControl[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasVirtualControl> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControlRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[EditorBrowsableAttribute("1")]
public class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource : ValueType {
    public static IObjectReference CreateMarshaler(CanvasVirtualImageSource obj);
    public static ObjectReferenceValue CreateMarshaler2(CanvasVirtualImageSource obj);
    public static IntPtr GetAbi(IObjectReference value);
    public static CanvasVirtualImageSource FromAbi(IntPtr thisPtr);
    public static IntPtr FromManaged(CanvasVirtualImageSource obj);
    public static MarshalerArray<CanvasVirtualImageSource> CreateMarshalerArray(CanvasVirtualImageSource[] array);
    public static ValueTuple`2<int, IntPtr> GetAbiArray(object box);
    public static CanvasVirtualImageSource[] FromAbiArray(object box);
    public static void CopyAbiArray(CanvasVirtualImageSource[] array, object box);
    public static ValueTuple`2<int, IntPtr> FromManagedArray(CanvasVirtualImageSource[] array);
    public static void DisposeMarshaler(IObjectReference value);
    public static void DisposeMarshalerArray(MarshalerArray<CanvasVirtualImageSource> array);
    public static void DisposeAbi(IntPtr abi);
    public static void DisposeAbiArray(object box);
}
[EditorBrowsableAttribute("1")]
internal class ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSourceRcwFactoryAttribute : WinRTImplementationTypeRcwFactoryAttribute {
    public virtual object CreateInstance(IInspectable inspectable);
}
[DynamicInterfaceCastableImplementationAttribute]
[GuidAttribute("9BD47D0D-D57D-43B7-82CB-489CC566E887")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl {
    public static IntPtr AbiToProjectionVftablePtr;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CreateResources_tokenTables;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Draw_tokenTables;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _GameLoopStarting_tokenTables;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _GameLoopStopped_tokenTables;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Update_tokenTables;
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>> _CreateResources_TokenTables { get; }
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>> _Draw_TokenTables { get; }
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> _GameLoopStarting_TokenTables { get; }
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> _GameLoopStopped_TokenTables { get; }
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>> _Update_TokenTables { get; }
    private Color global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.ClearColor { get; private set; }
    private CanvasDevice global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.CustomDevice { get; private set; }
    private float global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.DpiScale { get; private set; }
    private bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.ForceSoftwareRenderer { get; private set; }
    private bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.HasGameLoopThreadAccess { get; }
    private bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.IsFixedTimeStep { get; private set; }
    private bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.Paused { get; private set; }
    private bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.ReadyToDraw { get; }
    private Size global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.Size { get; }
    private TimeSpan global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.TargetElapsedTime { get; private set; }
    private bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.UseSharedDevice { get; private set; }
    private CanvasDevice global::Microsoft.Graphics.Canvas.ICanvasResourceCreator.Device { get; }
    private float global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.Dpi { get; }
    private static ICanvasAnimatedControl();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invalidate_20(IntPtr thisPtr);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_ResetElapsedTime_21(IntPtr thisPtr);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_CreateCoreIndependentInputSource_22(IntPtr thisPtr, CoreInputDeviceTypes deviceTypes, IntPtr* returnValue);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_RemoveFromVisualTree_23(IntPtr thisPtr);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_RunOnGameLoopThreadAsync_25(IntPtr thisPtr, IntPtr agileCallback, IntPtr* asyncAction);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_ClearColor_17(IntPtr thisPtr, Color value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_ClearColor_18(IntPtr thisPtr, Color* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_CustomDevice_31(IntPtr thisPtr, IntPtr value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_CustomDevice_30(IntPtr thisPtr, IntPtr* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_DpiScale_33(IntPtr thisPtr, float ratio);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_DpiScale_32(IntPtr thisPtr, Single* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_ForceSoftwareRenderer_29(IntPtr thisPtr, byte value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_ForceSoftwareRenderer_28(IntPtr thisPtr, Byte* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_HasGameLoopThreadAccess_24(IntPtr thisPtr, Byte* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_IsFixedTimeStep_11(IntPtr thisPtr, byte value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_IsFixedTimeStep_12(IntPtr thisPtr, Byte* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_Paused_15(IntPtr thisPtr, byte value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Paused_16(IntPtr thisPtr, Byte* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_ReadyToDraw_10(IntPtr thisPtr, Byte* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_Size_19(IntPtr thisPtr, Size* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_TargetElapsedTime_13(IntPtr thisPtr, TimeSpan value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_TargetElapsedTime_14(IntPtr thisPtr, TimeSpan* value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_put_UseSharedDevice_27(IntPtr thisPtr, byte value);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_get_UseSharedDevice_26(IntPtr thisPtr, Byte* value);
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>> MakeCreateResourcesTable();
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>> get__CreateResources_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_CreateResources_0(IntPtr thisPtr, IntPtr value, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_CreateResources_1(IntPtr thisPtr, EventRegistrationToken token);
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>> MakeDrawTable();
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>> get__Draw_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_Draw_4(IntPtr thisPtr, IntPtr value, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_Draw_5(IntPtr thisPtr, EventRegistrationToken token);
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> MakeGameLoopStartingTable();
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> get__GameLoopStarting_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_GameLoopStarting_6(IntPtr thisPtr, IntPtr value, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_GameLoopStarting_7(IntPtr thisPtr, EventRegistrationToken token);
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> MakeGameLoopStoppedTable();
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> get__GameLoopStopped_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_GameLoopStopped_8(IntPtr thisPtr, IntPtr value, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_GameLoopStopped_9(IntPtr thisPtr, EventRegistrationToken token);
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>> MakeUpdateTable();
    private static ConditionalWeakTable`2<ICanvasAnimatedControl, EventRegistrationTokenTable`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>> get__Update_TokenTables();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_add_Update_2(IntPtr thisPtr, IntPtr value, EventRegistrationToken* token);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_remove_Update_3(IntPtr thisPtr, EventRegistrationToken token);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.Invalidate();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.ResetElapsedTime();
    private sealed virtual override CoreIndependentInputSource global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.CreateCoreIndependentInputSource(CoreInputDeviceTypes deviceTypes);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.RemoveFromVisualTree();
    private sealed virtual override IAsyncAction global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.RunOnGameLoopThreadAsync(DispatchedHandler agileCallback);
    private sealed virtual override Color global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_ClearColor();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_ClearColor(Color value);
    private sealed virtual override CanvasDevice global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_CustomDevice();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_CustomDevice(CanvasDevice value);
    private sealed virtual override float global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_DpiScale();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_DpiScale(float value);
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_ForceSoftwareRenderer();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_ForceSoftwareRenderer(bool value);
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_HasGameLoopThreadAccess();
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_IsFixedTimeStep();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_IsFixedTimeStep(bool value);
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_Paused();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_Paused(bool value);
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_ReadyToDraw();
    private sealed virtual override Size global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_Size();
    private sealed virtual override TimeSpan global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_TargetElapsedTime();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_TargetElapsedTime(TimeSpan value);
    private sealed virtual override bool global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.get_UseSharedDevice();
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.set_UseSharedDevice(bool value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.add_CreateResources(TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.remove_CreateResources(TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.add_Draw(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.remove_Draw(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.add_GameLoopStarting(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.remove_GameLoopStarting(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.add_GameLoopStopped(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.remove_GameLoopStopped(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.add_Update(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs> value);
    private sealed virtual override void global::Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl.remove_Update(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs> value);
    private sealed virtual override CanvasDevice global::Microsoft.Graphics.Canvas.ICanvasResourceCreator.get_Device();
    private sealed virtual override float global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.ConvertPixelsToDips(int pixels);
    private sealed virtual override int global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    private sealed virtual override float global::Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi.get_Dpi();
}
public static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControlMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CreateResources_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Draw_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _GameLoopStarting_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _GameLoopStopped_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Update_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>> _CreateResources { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>> _Draw { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> _GameLoopStarting { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> _GameLoopStopped { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>> _Update { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    public static IntPtr AbiToProjectionVftablePtr { get; }
    public static void Invalidate(IObjectReference _obj);
    public static void ResetElapsedTime(IObjectReference _obj);
    public static CoreIndependentInputSource CreateCoreIndependentInputSource(IObjectReference _obj, CoreInputDeviceTypes deviceTypes);
    public static void RemoveFromVisualTree(IObjectReference _obj);
    public static IAsyncAction RunOnGameLoopThreadAsync(IObjectReference _obj, DispatchedHandler agileCallback);
    public static Color get_ClearColor(IObjectReference _obj);
    public static void set_ClearColor(IObjectReference _obj, Color value);
    public static CanvasDevice get_CustomDevice(IObjectReference _obj);
    public static void set_CustomDevice(IObjectReference _obj, CanvasDevice value);
    public static float get_DpiScale(IObjectReference _obj);
    public static void set_DpiScale(IObjectReference _obj, float value);
    public static bool get_ForceSoftwareRenderer(IObjectReference _obj);
    public static void set_ForceSoftwareRenderer(IObjectReference _obj, bool value);
    public static bool get_HasGameLoopThreadAccess(IObjectReference _obj);
    public static bool get_IsFixedTimeStep(IObjectReference _obj);
    public static void set_IsFixedTimeStep(IObjectReference _obj, bool value);
    public static bool get_Paused(IObjectReference _obj);
    public static void set_Paused(IObjectReference _obj, bool value);
    public static bool get_ReadyToDraw(IObjectReference _obj);
    public static Size get_Size(IObjectReference _obj);
    public static TimeSpan get_TargetElapsedTime(IObjectReference _obj);
    public static void set_TargetElapsedTime(IObjectReference _obj, TimeSpan value);
    public static bool get_UseSharedDevice(IObjectReference _obj);
    public static void set_UseSharedDevice(IObjectReference _obj, bool value);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>> MakeCreateResourcesTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>> get__CreateResources();
    public static ValueTuple`2<Action`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>, Action`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>>> Get_CreateResources(IObjectReference _obj, object _thisObj);
    public static EventSource`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>> Get_CreateResources2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>> MakeDrawTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>> get__Draw();
    public static ValueTuple`2<Action`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>, Action`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>>> Get_Draw(IObjectReference _obj, object _thisObj);
    public static EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>> Get_Draw2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> MakeGameLoopStartingTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> get__GameLoopStarting();
    public static ValueTuple`2<Action`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>, Action`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> Get_GameLoopStarting(IObjectReference _obj, object _thisObj);
    public static EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>> Get_GameLoopStarting2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> MakeGameLoopStoppedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> get__GameLoopStopped();
    public static ValueTuple`2<Action`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>, Action`1<TypedEventHandler`2<ICanvasAnimatedControl, object>>> Get_GameLoopStopped(IObjectReference _obj, object _thisObj);
    public static EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>> Get_GameLoopStopped2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>> MakeUpdateTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>> get__Update();
    public static ValueTuple`2<Action`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>, Action`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>>> Get_Update(IObjectReference _obj, object _thisObj);
    public static EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>> Get_Update2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
    public static IntPtr get_AbiToProjectionVftablePtr();
}
[GuidAttribute("BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs {
}
[GuidAttribute("C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAnimatedDrawEventArgs Create(IObjectReference _obj, CanvasDrawingSession canvasDrawingSession, CanvasTimingInformation timingInformation);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawingSession get_DrawingSession(IObjectReference _obj);
    internal static CanvasTimingInformation get_Timing(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("A96B2B2A-0C6E-4AA8-925B-7137263B4E44")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs {
}
[GuidAttribute("766F4867-B22A-464B-89B1-0DA6AB62BE68")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasAnimatedUpdateEventArgs Create(IObjectReference _obj, CanvasTimingInformation timingInformation);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasTimingInformation get_Timing(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("F006E06D-79DB-484F-B898-479CF069C0F5")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControlMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CreateResources_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _Draw_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs>>> _CreateResources { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs>>> _Draw { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void Invalidate(IObjectReference _obj);
    internal static void RemoveFromVisualTree(IObjectReference _obj);
    internal static Color get_ClearColor(IObjectReference _obj);
    internal static void set_ClearColor(IObjectReference _obj, Color value);
    internal static CanvasDevice get_CustomDevice(IObjectReference _obj);
    internal static void set_CustomDevice(IObjectReference _obj, CanvasDevice value);
    internal static float get_DpiScale(IObjectReference _obj);
    internal static void set_DpiScale(IObjectReference _obj, float value);
    internal static bool get_ForceSoftwareRenderer(IObjectReference _obj);
    internal static void set_ForceSoftwareRenderer(IObjectReference _obj, bool value);
    internal static bool get_ReadyToDraw(IObjectReference _obj);
    internal static Size get_Size(IObjectReference _obj);
    internal static bool get_UseSharedDevice(IObjectReference _obj);
    internal static void set_UseSharedDevice(IObjectReference _obj, bool value);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs>>> MakeCreateResourcesTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs>>> get__CreateResources();
    internal static EventSource`1<TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs>> Get_CreateResources2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs>>> MakeDrawTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs>>> get__Draw();
    internal static EventSource`1<TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs>> Get_Draw2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("FB86169F-25D4-4551-BD8F-214BEAF0AC24")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs {
}
[GuidAttribute("7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawEventArgs Create(IObjectReference _obj, CanvasDrawingSession canvasDrawingSession);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawingSession get_DrawingSession(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3C35E87A-E881-4F44-B0D1-551413AEC66D")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource {
}
[GuidAttribute("8596BEDD-D7F7-4C6B-B1AD-41949035E084")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasImageSource CreateWithSize(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    internal static CanvasImageSource CreateWithWidthAndHeight(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    internal static CanvasImageSource CreateWithWidthAndHeightAndDpi(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    internal static CanvasImageSource CreateWithWidthAndHeightAndDpiAndAlphaMode(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi, CanvasAlphaMode alphaMode);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, Color clearColor);
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, Color clearColor, Rect updateRectangle);
    internal static void Recreate(IObjectReference _obj, ICanvasResourceCreator value);
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static Size get_Size(IObjectReference _obj);
    internal static BitmapSize get_SizeInPixels(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3A21A204-F52F-4E7A-9B3F-94669819D981")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgsMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static Rect[] get_InvalidatedRegions(IObjectReference _obj);
    internal static Rect get_VisibleRegion(IObjectReference _obj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DBDCCB96-147E-4A82-AF3A-C91C7800DAA7")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanelMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static void RemoveFromVisualTree(IObjectReference _obj);
    internal static CanvasSwapChain get_SwapChain(IObjectReference _obj);
    internal static void set_SwapChain(IObjectReference _obj, CanvasSwapChain value);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("3C2B5177-7C61-41D2-95AE-FCFC92FD617A")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControlMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _CreateResources_;
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RegionsInvalidated_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs>>> _CreateResources { get; }
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs>>> _RegionsInvalidated { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, Rect updateRectangle);
    internal static void SuspendDrawingSession(IObjectReference _obj, CanvasDrawingSession drawingSession);
    internal static void ResumeDrawingSession(IObjectReference _obj, CanvasDrawingSession drawingSession);
    internal static void Invalidate(IObjectReference _obj);
    internal static void Invalidate(IObjectReference _obj, Rect region);
    internal static void RemoveFromVisualTree(IObjectReference _obj);
    internal static Color get_ClearColor(IObjectReference _obj);
    internal static void set_ClearColor(IObjectReference _obj, Color value);
    internal static CanvasDevice get_CustomDevice(IObjectReference _obj);
    internal static void set_CustomDevice(IObjectReference _obj, CanvasDevice value);
    internal static float get_DpiScale(IObjectReference _obj);
    internal static void set_DpiScale(IObjectReference _obj, float value);
    internal static bool get_ForceSoftwareRenderer(IObjectReference _obj);
    internal static void set_ForceSoftwareRenderer(IObjectReference _obj, bool value);
    internal static bool get_ReadyToDraw(IObjectReference _obj);
    internal static Size get_Size(IObjectReference _obj);
    internal static bool get_UseSharedDevice(IObjectReference _obj);
    internal static void set_UseSharedDevice(IObjectReference _obj, bool value);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs>>> MakeCreateResourcesTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs>>> get__CreateResources();
    internal static EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs>> Get_CreateResources2(IObjectReference _obj, object _thisObj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs>>> MakeRegionsInvalidatedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs>>> get__RegionsInvalidated();
    internal static EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs>> Get_RegionsInvalidated2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[GuidAttribute("DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource {
}
[GuidAttribute("2FE755A1-307A-4623-9250-29590485BDB6")]
internal interface ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory {
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactoryMethods : object {
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasVirtualImageSource CreateWithSize(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    internal static CanvasVirtualImageSource CreateWithWidthAndHeight(IObjectReference _obj, ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    internal static CanvasVirtualImageSource CreateWithWidthAndHeightAndDpi(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    internal static CanvasVirtualImageSource CreateWithWidthAndHeightAndDpiAndAlphaMode(IObjectReference _obj, ICanvasResourceCreator resourceCreator, float width, float height, float dpi, CanvasAlphaMode alphaMode);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
internal static class ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceMethods : object {
    private static ConditionalWeakTable`2 modreq(System.Runtime.CompilerServices.IsVolatile) _RegionsInvalidated_;
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs>>> _RegionsInvalidated { get; }
    [IsReadOnlyAttribute]
public static Guid& modreq(System.Runtime.InteropServices.InAttribute) IID { get; }
    internal static CanvasDrawingSession CreateDrawingSession(IObjectReference _obj, Color clearColor, Rect updateRectangle);
    internal static void SuspendDrawingSession(IObjectReference _obj, CanvasDrawingSession drawingSession);
    internal static void ResumeDrawingSession(IObjectReference _obj, CanvasDrawingSession drawingSession);
    internal static void Invalidate(IObjectReference _obj);
    internal static void Invalidate(IObjectReference _obj, Rect region);
    internal static void RaiseRegionsInvalidatedIfAny(IObjectReference _obj);
    internal static void Resize(IObjectReference _obj, Size size);
    internal static void Resize(IObjectReference _obj, float width, float height);
    internal static void Resize(IObjectReference _obj, float width, float height, float dpi);
    internal static void Recreate(IObjectReference _obj, ICanvasResourceCreator resourceCreator);
    internal static CanvasAlphaMode get_AlphaMode(IObjectReference _obj);
    internal static Size get_Size(IObjectReference _obj);
    internal static BitmapSize get_SizeInPixels(IObjectReference _obj);
    internal static VirtualSurfaceImageSource get_Source(IObjectReference _obj);
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs>>> MakeRegionsInvalidatedTable();
    private static ConditionalWeakTable`2<object, EventSource`1<TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs>>> get__RegionsInvalidated();
    internal static EventSource`1<TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs>> Get_RegionsInvalidated2(IObjectReference _obj, object _thisObj);
    public static Guid& modreq(System.Runtime.InteropServices.InAttribute) get_IID();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop;f4;struct(Windows.UI.Color;u1;u1;u1;u1))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop,Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop>")]
public class Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop : ValueType {
    public float Position;
    public Color Color;
    public CanvasGradientStop(float _Position, Color _Color);
    public static bool op_Equality(CanvasGradientStop x, CanvasGradientStop y);
    public static bool op_Inequality(CanvasGradientStop x, CanvasGradientStop y);
    public sealed virtual bool Equals(CanvasGradientStop other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr;f4;struct(Windows.Foundation.Numerics.Vector4;f4;f4;f4;f4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr,Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr>")]
public class Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr : ValueType {
    public float Position;
    public Vector4 Color;
    public CanvasGradientStopHdr(float _Position, Vector4 _Color);
    public static bool op_Equality(CanvasGradientStopHdr x, CanvasGradientStopHdr y);
    public static bool op_Inequality(CanvasGradientStopHdr x, CanvasGradientStopHdr y);
    public sealed virtual bool Equals(CanvasGradientStopHdr other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush")]
[CanvasImageBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush")]
public class Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public CanvasEdgeBehavior ExtendX { get; public set; }
    public CanvasEdgeBehavior ExtendY { get; public set; }
    public ICanvasImage Image { get; public set; }
    public CanvasImageInterpolation Interpolation { get; public set; }
    public float Opacity { get; public set; }
    public Nullable`1<Rect> SourceRectangle { get; public set; }
    public Matrix3x2 Transform { get; public set; }
    public CanvasImageBrush(ICanvasResourceCreator resourceCreator);
    public CanvasImageBrush(ICanvasResourceCreator resourceCreator, ICanvasImage image);
    internal CanvasImageBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrush();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasImageBrushFactory();
    public static CanvasImageBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasImageBrush x, CanvasImageBrush y);
    public static bool op_Inequality(CanvasImageBrush x, CanvasImageBrush y);
    public sealed virtual bool Equals(CanvasImageBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public sealed virtual CanvasDevice get_Device();
    public CanvasEdgeBehavior get_ExtendX();
    public void set_ExtendX(CanvasEdgeBehavior value);
    public CanvasEdgeBehavior get_ExtendY();
    public void set_ExtendY(CanvasEdgeBehavior value);
    public ICanvasImage get_Image();
    public void set_Image(ICanvasImage value);
    public CanvasImageInterpolation get_Interpolation();
    public void set_Interpolation(CanvasImageInterpolation value);
    public sealed virtual float get_Opacity();
    public sealed virtual void set_Opacity(float value);
    public Nullable`1<Rect> get_SourceRectangle();
    public void set_SourceRectangle(Nullable`1<Rect> value);
    public sealed virtual Matrix3x2 get_Transform();
    public sealed virtual void set_Transform(Matrix3x2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush")]
[CanvasLinearGradientBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush")]
public class Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; }
    public CanvasBufferPrecision BufferPrecision { get; }
    public CanvasDevice Device { get; }
    public CanvasEdgeBehavior EdgeBehavior { get; }
    public Vector2 EndPoint { get; public set; }
    public float Opacity { get; public set; }
    public CanvasColorSpace PostInterpolationSpace { get; }
    public CanvasColorSpace PreInterpolationSpace { get; }
    public Vector2 StartPoint { get; public set; }
    public CanvasGradientStop[] Stops { get; }
    public CanvasGradientStopHdr[] StopsHdr { get; }
    public Matrix3x2 Transform { get; public set; }
    public CanvasLinearGradientBrush(ICanvasResourceCreator resourceCreator, Color startColor, Color endColor);
    public CanvasLinearGradientBrush(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops);
    public CanvasLinearGradientBrush(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    public CanvasLinearGradientBrush(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    internal CanvasLinearGradientBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrush();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasLinearGradientBrushStatics();
    public static CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, Vector4 startColorHdr, Vector4 endColorHdr);
    public static CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr);
    public static CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    public static CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    public static CanvasLinearGradientBrush CreateRainbow(ICanvasResourceCreator resourceCreator, float eldritchness);
    public static CanvasLinearGradientBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasLinearGradientBrush x, CanvasLinearGradientBrush y);
    public static bool op_Inequality(CanvasLinearGradientBrush x, CanvasLinearGradientBrush y);
    public sealed virtual bool Equals(CanvasLinearGradientBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public CanvasBufferPrecision get_BufferPrecision();
    public sealed virtual CanvasDevice get_Device();
    public CanvasEdgeBehavior get_EdgeBehavior();
    public Vector2 get_EndPoint();
    public void set_EndPoint(Vector2 value);
    public sealed virtual float get_Opacity();
    public sealed virtual void set_Opacity(float value);
    public CanvasColorSpace get_PostInterpolationSpace();
    public CanvasColorSpace get_PreInterpolationSpace();
    public Vector2 get_StartPoint();
    public void set_StartPoint(Vector2 value);
    public CanvasGradientStop[] get_Stops();
    public CanvasGradientStopHdr[] get_StopsHdr();
    public sealed virtual Matrix3x2 get_Transform();
    public sealed virtual void set_Transform(Matrix3x2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush")]
[CanvasRadialGradientBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush")]
public class Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; }
    public CanvasBufferPrecision BufferPrecision { get; }
    public Vector2 Center { get; public set; }
    public CanvasDevice Device { get; }
    public CanvasEdgeBehavior EdgeBehavior { get; }
    public float Opacity { get; public set; }
    public Vector2 OriginOffset { get; public set; }
    public CanvasColorSpace PostInterpolationSpace { get; }
    public CanvasColorSpace PreInterpolationSpace { get; }
    public float RadiusX { get; public set; }
    public float RadiusY { get; public set; }
    public CanvasGradientStop[] Stops { get; }
    public CanvasGradientStopHdr[] StopsHdr { get; }
    public Matrix3x2 Transform { get; public set; }
    public CanvasRadialGradientBrush(ICanvasResourceCreator resourceCreator, Color startColor, Color endColor);
    public CanvasRadialGradientBrush(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops);
    public CanvasRadialGradientBrush(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    public CanvasRadialGradientBrush(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    internal CanvasRadialGradientBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrush();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasRadialGradientBrushStatics();
    public static CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, Vector4 startColorHdr, Vector4 endColorHdr);
    public static CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops);
    public static CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    public static CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    public static CanvasRadialGradientBrush CreateRainbow(ICanvasResourceCreator resourceCreator, float eldritchness);
    public static CanvasRadialGradientBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasRadialGradientBrush x, CanvasRadialGradientBrush y);
    public static bool op_Inequality(CanvasRadialGradientBrush x, CanvasRadialGradientBrush y);
    public sealed virtual bool Equals(CanvasRadialGradientBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public CanvasBufferPrecision get_BufferPrecision();
    public Vector2 get_Center();
    public void set_Center(Vector2 value);
    public sealed virtual CanvasDevice get_Device();
    public CanvasEdgeBehavior get_EdgeBehavior();
    public sealed virtual float get_Opacity();
    public sealed virtual void set_Opacity(float value);
    public Vector2 get_OriginOffset();
    public void set_OriginOffset(Vector2 value);
    public CanvasColorSpace get_PostInterpolationSpace();
    public CanvasColorSpace get_PreInterpolationSpace();
    public float get_RadiusX();
    public void set_RadiusX(float value);
    public float get_RadiusY();
    public void set_RadiusY(float value);
    public CanvasGradientStop[] get_Stops();
    public CanvasGradientStopHdr[] get_StopsHdr();
    public sealed virtual Matrix3x2 get_Transform();
    public sealed virtual void set_Transform(Matrix3x2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush")]
[CanvasSolidColorBrushRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush")]
public class Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public CanvasDevice Device { get; }
    public float Opacity { get; public set; }
    public Matrix3x2 Transform { get; public set; }
    public CanvasSolidColorBrush(ICanvasResourceCreator resourceCreator, Color color);
    internal CanvasSolidColorBrush(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrush();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasBrush();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Brushes_ICanvasSolidColorBrushStatics();
    public static CanvasSolidColorBrush CreateHdr(ICanvasResourceCreator resourceCreator, Vector4 colorHdr);
    public static CanvasSolidColorBrush FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSolidColorBrush x, CanvasSolidColorBrush y);
    public static bool op_Inequality(CanvasSolidColorBrush x, CanvasSolidColorBrush y);
    public sealed virtual bool Equals(CanvasSolidColorBrush other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public Color get_Color();
    public void set_Color(Color value);
    public Vector4 get_ColorHdr();
    public void set_ColorHdr(Vector4 value);
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Opacity();
    public sealed virtual void set_Opacity(float value);
    public sealed virtual Matrix3x2 get_Transform();
    public sealed virtual void set_Transform(Matrix3x2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F5D58591-C803-41B4-878E-79D92AB13295")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasBrush")]
public interface Microsoft.Graphics.Canvas.Brushes.ICanvasBrush {
    public CanvasDevice Device { get; }
    public float Opacity { get; public set; }
    public Matrix3x2 Transform { get; public set; }
    public abstract virtual CanvasDevice get_Device();
    public abstract virtual float get_Opacity();
    public abstract virtual void set_Opacity(float value);
    public abstract virtual Matrix3x2 get_Transform();
    public abstract virtual void set_Transform(Matrix3x2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("5A21C4E7-D450-4942-8BBD-F017097AB763")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush {
    public CanvasEdgeBehavior ExtendX { get; public set; }
    public CanvasEdgeBehavior ExtendY { get; public set; }
    public ICanvasImage Image { get; public set; }
    public CanvasImageInterpolation Interpolation { get; public set; }
    public Nullable`1<Rect> SourceRectangle { get; public set; }
    public abstract virtual CanvasEdgeBehavior get_ExtendX();
    public abstract virtual void set_ExtendX(CanvasEdgeBehavior value);
    public abstract virtual CanvasEdgeBehavior get_ExtendY();
    public abstract virtual void set_ExtendY(CanvasEdgeBehavior value);
    public abstract virtual ICanvasImage get_Image();
    public abstract virtual void set_Image(ICanvasImage value);
    public abstract virtual CanvasImageInterpolation get_Interpolation();
    public abstract virtual void set_Interpolation(CanvasImageInterpolation value);
    public abstract virtual Nullable`1<Rect> get_SourceRectangle();
    public abstract virtual void set_SourceRectangle(Nullable`1<Rect> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C40CCB59-1B87-4394-A6A6-ECD278E877D6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory {
    public abstract virtual CanvasImageBrush Create(ICanvasResourceCreator resourceCreator);
    public abstract virtual CanvasImageBrush CreateWithImage(ICanvasResourceCreator resourceCreator, ICanvasImage image);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush {
    public CanvasAlphaMode AlphaMode { get; }
    public CanvasBufferPrecision BufferPrecision { get; }
    public CanvasEdgeBehavior EdgeBehavior { get; }
    public Vector2 EndPoint { get; public set; }
    public CanvasColorSpace PostInterpolationSpace { get; }
    public CanvasColorSpace PreInterpolationSpace { get; }
    public Vector2 StartPoint { get; public set; }
    public CanvasGradientStop[] Stops { get; }
    public CanvasGradientStopHdr[] StopsHdr { get; }
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual CanvasBufferPrecision get_BufferPrecision();
    public abstract virtual CanvasEdgeBehavior get_EdgeBehavior();
    public abstract virtual Vector2 get_EndPoint();
    public abstract virtual void set_EndPoint(Vector2 value);
    public abstract virtual CanvasColorSpace get_PostInterpolationSpace();
    public abstract virtual CanvasColorSpace get_PreInterpolationSpace();
    public abstract virtual Vector2 get_StartPoint();
    public abstract virtual void set_StartPoint(Vector2 value);
    public abstract virtual CanvasGradientStop[] get_Stops();
    public abstract virtual CanvasGradientStopHdr[] get_StopsHdr();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory {
    public abstract virtual CanvasLinearGradientBrush CreateSimple(ICanvasResourceCreator resourceCreator, Color startColor, Color endColor);
    public abstract virtual CanvasLinearGradientBrush CreateWithStops(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops);
    public abstract virtual CanvasLinearGradientBrush CreateWithEdgeBehaviorAndAlphaMode(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    public abstract virtual CanvasLinearGradientBrush CreateWithEdgeBehaviorAndInterpolationOptions(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("E9DE3392-8FBF-478C-8E6A-D0A0EA753B37")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics {
    [OverloadAttribute("CreateHdrSimple")]
public abstract virtual CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, Vector4 startColorHdr, Vector4 endColorHdr);
    [OverloadAttribute("CreateHdrWithStops")]
public abstract virtual CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr);
    [OverloadAttribute("CreateHdrWithEdgeBehaviorAndAlphaMode")]
public abstract virtual CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    [OverloadAttribute("CreateHdrWithEdgeBehaviorAndInterpolationOptions")]
public abstract virtual CanvasLinearGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStopsHdr, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    public abstract virtual CanvasLinearGradientBrush CreateRainbow(ICanvasResourceCreator resourceCreator, float eldritchness);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("4D27D756-14A9-4EB7-973F-E6614D4F89E7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush {
    public CanvasAlphaMode AlphaMode { get; }
    public CanvasBufferPrecision BufferPrecision { get; }
    public Vector2 Center { get; public set; }
    public CanvasEdgeBehavior EdgeBehavior { get; }
    public Vector2 OriginOffset { get; public set; }
    public CanvasColorSpace PostInterpolationSpace { get; }
    public CanvasColorSpace PreInterpolationSpace { get; }
    public float RadiusX { get; public set; }
    public float RadiusY { get; public set; }
    public CanvasGradientStop[] Stops { get; }
    public CanvasGradientStopHdr[] StopsHdr { get; }
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual CanvasBufferPrecision get_BufferPrecision();
    public abstract virtual Vector2 get_Center();
    public abstract virtual void set_Center(Vector2 value);
    public abstract virtual CanvasEdgeBehavior get_EdgeBehavior();
    public abstract virtual Vector2 get_OriginOffset();
    public abstract virtual void set_OriginOffset(Vector2 value);
    public abstract virtual CanvasColorSpace get_PostInterpolationSpace();
    public abstract virtual CanvasColorSpace get_PreInterpolationSpace();
    public abstract virtual float get_RadiusX();
    public abstract virtual void set_RadiusX(float value);
    public abstract virtual float get_RadiusY();
    public abstract virtual void set_RadiusY(float value);
    public abstract virtual CanvasGradientStop[] get_Stops();
    public abstract virtual CanvasGradientStopHdr[] get_StopsHdr();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7933A51F-A910-4548-849F-42DDEC466F41")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory {
    public abstract virtual CanvasRadialGradientBrush CreateSimple(ICanvasResourceCreator resourceCreator, Color startColor, Color endColor);
    public abstract virtual CanvasRadialGradientBrush CreateWithStops(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops);
    public abstract virtual CanvasRadialGradientBrush CreateWithEdgeBehaviorAndAlphaMode(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    public abstract virtual CanvasRadialGradientBrush CreateWithEdgeBehaviorAndInterpolationOptions(ICanvasResourceCreator resourceCreator, CanvasGradientStop[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3B0D4DAE-3E21-4818-99B4-779ACAAF18BE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics {
    [OverloadAttribute("CreateHdrSimple")]
public abstract virtual CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, Vector4 startColorHdr, Vector4 endColorHdr);
    [OverloadAttribute("CreateHdrWithStops")]
public abstract virtual CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops);
    [OverloadAttribute("CreateHdrWithEdgeBehaviorAndAlphaMode")]
public abstract virtual CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode);
    [OverloadAttribute("CreateHdrWithEdgeBehaviorAndInterpolationOptions")]
public abstract virtual CanvasRadialGradientBrush CreateHdr(ICanvasResourceCreator resourceCreator, CanvasGradientStopHdr[] gradientStops, CanvasEdgeBehavior edgeBehavior, CanvasAlphaMode alphaMode, CanvasColorSpace preInterpolationSpace, CanvasColorSpace postInterpolationSpace, CanvasBufferPrecision bufferPrecision);
    public abstract virtual CanvasRadialGradientBrush CreateRainbow(ICanvasResourceCreator resourceCreator, float eldritchness);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("8BC30F87-BAD5-4871-88B8-9FE3C63D204A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush {
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual Vector4 get_ColorHdr();
    public abstract virtual void set_ColorHdr(Vector4 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("8ABF4780-4EDD-4F2B-BF63-2C385115B201")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory {
    public abstract virtual CanvasSolidColorBrush Create(ICanvasResourceCreator resourceCreator, Color color);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("629B7244-5B9E-4EF8-8E09-264714201EE8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics")]
internal interface Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics {
    public abstract virtual CanvasSolidColorBrush CreateHdr(ICanvasResourceCreator resourceCreator, Vector4 colorHdr);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasActiveLayer")]
[CanvasActiveLayerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasActiveLayer")]
public class Microsoft.Graphics.Canvas.CanvasActiveLayer : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasActiveLayer { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal CanvasActiveLayer(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasActiveLayer();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasActiveLayer FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasActiveLayer x, CanvasActiveLayer y);
    public static bool op_Inequality(CanvasActiveLayer x, CanvasActiveLayer y);
    public sealed virtual bool Equals(CanvasActiveLayer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasAlphaMode>")]
public enum Microsoft.Graphics.Canvas.CanvasAlphaMode : Enum {
    public int value__;
    public static CanvasAlphaMode Premultiplied;
    public static CanvasAlphaMode Straight;
    public static CanvasAlphaMode Ignore;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasAntialiasing>")]
public enum Microsoft.Graphics.Canvas.CanvasAntialiasing : Enum {
    public int value__;
    public static CanvasAntialiasing Antialiased;
    public static CanvasAntialiasing Aliased;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasBitmap")]
[CanvasBitmapRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasBitmap")]
public class Microsoft.Graphics.Canvas.CanvasBitmap : DependencyObject {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmap;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DSurface;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmapFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmapStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmap { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private IObjectReference _objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DSurface { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmapFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmapStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CanvasAlphaMode AlphaMode { get; }
    public Rect Bounds { get; }
    [SupportedOSPlatformAttribute("Windows10.0.10240.0")]
public Direct3DSurfaceDescription Description { get; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public DirectXPixelFormat Format { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    protected internal CanvasBitmap(IObjectReference objRef);
    protected CanvasBitmap(DerivedComposed _);
    private IntPtr get_ThisPtr();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmap();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmap();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference Make___objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DSurface();
    private IObjectReference get__objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DSurface();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmapFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasBitmapStatics();
    public static CanvasBitmap CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface);
    public static CanvasBitmap CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi);
    public static CanvasBitmap CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi, CanvasAlphaMode alpha);
    public static CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format);
    public static CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi);
    public static CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi, CanvasAlphaMode alpha);
    public static CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format);
    public static CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi);
    public static CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi, CanvasAlphaMode alpha);
    public static CanvasBitmap CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels);
    public static CanvasBitmap CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels, float dpi);
    public static CanvasBitmap CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels, float dpi, CanvasAlphaMode alpha);
    public static CanvasBitmap CreateFromSoftwareBitmap(ICanvasResourceCreator resourceCreator, SoftwareBitmap sourceBitmap);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, float dpi);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, float dpi, CanvasAlphaMode alpha);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, float dpi);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, float dpi, CanvasAlphaMode alpha);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, float dpi);
    public static IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, float dpi, CanvasAlphaMode alpha);
    public static CanvasBitmap FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasBitmap x, CanvasBitmap y);
    public static bool op_Inequality(CanvasBitmap x, CanvasBitmap y);
    public sealed virtual bool Equals(CanvasBitmap other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public IAsyncAction SaveAsync(string fileName);
    public IAsyncAction SaveAsync(string fileName, CanvasBitmapFileFormat fileFormat);
    public IAsyncAction SaveAsync(string fileName, CanvasBitmapFileFormat fileFormat, float quality);
    public IAsyncAction SaveAsync(IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat);
    public IAsyncAction SaveAsync(IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality);
    public Byte[] GetPixelBytes();
    public Byte[] GetPixelBytes(int left, int top, int width, int height);
    public void GetPixelBytes(IBuffer buffer);
    public void GetPixelBytes(IBuffer buffer, int left, int top, int width, int height);
    public Color[] GetPixelColors();
    public Color[] GetPixelColors(int left, int top, int width, int height);
    public void SetPixelBytes(Byte[] valueElements);
    public void SetPixelBytes(Byte[] valueElements, int left, int top, int width, int height);
    public void SetPixelBytes(IBuffer buffer);
    public void SetPixelBytes(IBuffer buffer, int left, int top, int width, int height);
    public void SetPixelColors(Color[] valueElements);
    public void SetPixelColors(Color[] valueElements, int left, int top, int width, int height);
    public void CopyPixelsFromBitmap(CanvasBitmap otherBitmap);
    public void CopyPixelsFromBitmap(CanvasBitmap otherBitmap, int destX, int destY);
    public void CopyPixelsFromBitmap(CanvasBitmap otherBitmap, int destX, int destY, int sourceRectLeft, int sourceRectTop, int sourceRectWidth, int sourceRectHeight);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public sealed virtual void Dispose();
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public CanvasAlphaMode get_AlphaMode();
    public Rect get_Bounds();
    public sealed virtual Direct3DSurfaceDescription get_Description();
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public DirectXPixelFormat get_Format();
    public Size get_Size();
    public BitmapSize get_SizeInPixels();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasBitmapFileFormat>")]
public enum Microsoft.Graphics.Canvas.CanvasBitmapFileFormat : Enum {
    public int value__;
    public static CanvasBitmapFileFormat Auto;
    public static CanvasBitmapFileFormat Bmp;
    public static CanvasBitmapFileFormat Png;
    public static CanvasBitmapFileFormat Jpeg;
    public static CanvasBitmapFileFormat Tiff;
    public static CanvasBitmapFileFormat Gif;
    public static CanvasBitmapFileFormat JpegXR;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasBlend>")]
public enum Microsoft.Graphics.Canvas.CanvasBlend : Enum {
    public int value__;
    public static CanvasBlend SourceOver;
    public static CanvasBlend Copy;
    public static CanvasBlend Min;
    public static CanvasBlend Add;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasBufferPrecision>")]
public enum Microsoft.Graphics.Canvas.CanvasBufferPrecision : Enum {
    public int value__;
    public static CanvasBufferPrecision Precision8UIntNormalized;
    public static CanvasBufferPrecision Precision8UIntNormalizedSrgb;
    public static CanvasBufferPrecision Precision16UIntNormalized;
    public static CanvasBufferPrecision Precision16Float;
    public static CanvasBufferPrecision Precision32Float;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasColorSpace>")]
public enum Microsoft.Graphics.Canvas.CanvasColorSpace : Enum {
    public int value__;
    public static CanvasColorSpace Custom;
    public static CanvasColorSpace Srgb;
    public static CanvasColorSpace ScRgb;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasCommandList")]
[CanvasCommandListRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasCommandList")]
public class Microsoft.Graphics.Canvas.CanvasCommandList : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasCommandListFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasCommandList { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasCommandListFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public CanvasCommandList(ICanvasResourceCreator resourceCreator);
    internal CanvasCommandList(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasCommandList();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasCommandListFactory();
    public static CanvasCommandList FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasCommandList x, CanvasCommandList y);
    public static bool op_Inequality(CanvasCommandList x, CanvasCommandList y);
    public sealed virtual bool Equals(CanvasCommandList other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasDrawingSession CreateDrawingSession();
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public CanvasDevice get_Device();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasComposite>")]
public enum Microsoft.Graphics.Canvas.CanvasComposite : Enum {
    public int value__;
    public static CanvasComposite SourceOver;
    public static CanvasComposite DestinationOver;
    public static CanvasComposite SourceIn;
    public static CanvasComposite DestinationIn;
    public static CanvasComposite SourceOut;
    public static CanvasComposite DestinationOut;
    public static CanvasComposite SourceAtop;
    public static CanvasComposite DestinationAtop;
    public static CanvasComposite Xor;
    public static CanvasComposite Add;
    public static CanvasComposite Copy;
    public static CanvasComposite BoundedCopy;
    public static CanvasComposite MaskInvert;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasDebugLevel>")]
public enum Microsoft.Graphics.Canvas.CanvasDebugLevel : Enum {
    public int value__;
    public static CanvasDebugLevel None;
    public static CanvasDebugLevel Error;
    public static CanvasDebugLevel Warning;
    public static CanvasDebugLevel Information;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasDevice")]
[CanvasDeviceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasDevice")]
public class Microsoft.Graphics.Canvas.CanvasDevice : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DDevice;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_CanvasDevice;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasDeviceFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasDeviceStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasDevice { get; }
    private IObjectReference _objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DDevice { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_CanvasDevice { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasDeviceFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasDeviceStatics { get; }
    public static CanvasDebugLevel DebugLevel { get; public set; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public bool ForceSoftwareRenderer { get; }
    public bool LowPriority { get; public set; }
    public int MaximumBitmapSizeInPixels { get; }
    public ulong MaximumCacheSize { get; public set; }
    public CanvasDevice(bool forceSoftwareRenderer);
    internal CanvasDevice(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasDevice();
    private IObjectReference Make___objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DDevice();
    private IObjectReference get__objRef_global__Windows_Graphics_DirectX_Direct3D11_IDirect3DDevice();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_CanvasDevice();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasDeviceFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasDeviceStatics();
    public static CanvasDevice CreateFromDirect3D11Device(IDirect3DDevice direct3DDevice);
    public static CanvasDevice GetSharedDevice();
    public static CanvasDevice GetSharedDevice(bool forceSoftwareRenderer);
    public static CanvasDebugLevel get_DebugLevel();
    public static void set_DebugLevel(CanvasDebugLevel value);
    public static CanvasDevice FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasDevice x, CanvasDevice y);
    public static bool op_Inequality(CanvasDevice x, CanvasDevice y);
    public sealed virtual bool Equals(CanvasDevice other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool IsPixelFormatSupported(DirectXPixelFormat pixelFormat);
    public bool IsBufferPrecisionSupported(CanvasBufferPrecision bufferPrecision);
    public bool IsDeviceLost(int hresult);
    public void RaiseDeviceLost();
    public CanvasLock Lock();
    public bool IsDeviceLost();
    public int GetDeviceLostReason();
    public void add_DeviceLost(TypedEventHandler`2<CanvasDevice, object> value);
    public void remove_DeviceLost(TypedEventHandler`2<CanvasDevice, object> value);
    [SupportedOSPlatformAttribute("Windows10.0.10240.0")]
public sealed virtual void Trim();
    public sealed virtual void Dispose();
    public sealed virtual CanvasDevice get_Device();
    public bool get_ForceSoftwareRenderer();
    public bool get_LowPriority();
    public void set_LowPriority(bool value);
    public int get_MaximumBitmapSizeInPixels();
    public ulong get_MaximumCacheSize();
    public void set_MaximumCacheSize(ulong value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasDpiRounding>")]
public enum Microsoft.Graphics.Canvas.CanvasDpiRounding : Enum {
    public int value__;
    public static CanvasDpiRounding Floor;
    public static CanvasDpiRounding Round;
    public static CanvasDpiRounding Ceiling;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasDrawingSession")]
[CanvasDrawingSessionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasDrawingSession")]
public class Microsoft.Graphics.Canvas.CanvasDrawingSession : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasDrawingSession { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAntialiasing Antialiasing { get; public set; }
    public CanvasBlend Blend { get; public set; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public Nullable`1<CanvasBufferPrecision> EffectBufferPrecision { get; public set; }
    public BitmapSize EffectTileSize { get; public set; }
    public CanvasTextAntialiasing TextAntialiasing { get; public set; }
    public CanvasTextRenderingParameters TextRenderingParameters { get; public set; }
    public Matrix3x2 Transform { get; public set; }
    public CanvasUnits Units { get; public set; }
    internal CanvasDrawingSession(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasDrawingSession();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasDrawingSession FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasDrawingSession x, CanvasDrawingSession y);
    public static bool op_Inequality(CanvasDrawingSession x, CanvasDrawingSession y);
    public sealed virtual bool Equals(CanvasDrawingSession other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Clear(Color color);
    public void Clear(Vector4 color);
    public void Flush();
    public void DrawImage(ICanvasImage image);
    public void DrawImage(ICanvasImage image, Vector2 offset);
    public void DrawImage(ICanvasImage image, float x, float y);
    public void DrawImage(CanvasBitmap bitmap, Rect destinationRectangle);
    public void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle);
    public void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle);
    public void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle);
    public void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity);
    public void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity);
    public void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity);
    public void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    public void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    public void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    public void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    public void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    public void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    public void DrawImage(CanvasBitmap bitmap, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    public void DrawImage(CanvasBitmap bitmap, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    public void DrawImage(CanvasBitmap bitmap, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    public void DrawLine(Vector2 point0, Vector2 point1, ICanvasBrush brush);
    public void DrawLine(float x0, float y0, float x1, float y1, ICanvasBrush brush);
    public void DrawLine(Vector2 point0, Vector2 point1, Color color);
    public void DrawLine(float x0, float y0, float x1, float y1, Color color);
    public void DrawLine(Vector2 point0, Vector2 point1, ICanvasBrush brush, float strokeWidth);
    public void DrawLine(float x0, float y0, float x1, float y1, ICanvasBrush brush, float strokeWidth);
    public void DrawLine(Vector2 point0, Vector2 point1, Color color, float strokeWidth);
    public void DrawLine(float x0, float y0, float x1, float y1, Color color, float strokeWidth);
    public void DrawLine(Vector2 point0, Vector2 point1, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawLine(float x0, float y0, float x1, float y1, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawLine(Vector2 point0, Vector2 point1, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawLine(float x0, float y0, float x1, float y1, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawRectangle(Rect rect, ICanvasBrush brush);
    public void DrawRectangle(float x, float y, float w, float h, ICanvasBrush brush);
    public void DrawRectangle(Rect rect, Color color);
    public void DrawRectangle(float x, float y, float w, float h, Color color);
    public void DrawRectangle(Rect rect, ICanvasBrush brush, float strokeWidth);
    public void DrawRectangle(float x, float y, float w, float h, ICanvasBrush brush, float strokeWidth);
    public void DrawRectangle(Rect rect, Color color, float strokeWidth);
    public void DrawRectangle(float x, float y, float w, float h, Color color, float strokeWidth);
    public void DrawRectangle(Rect rect, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawRectangle(float x, float y, float w, float h, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawRectangle(Rect rect, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawRectangle(float x, float y, float w, float h, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void FillRectangle(Rect rect, ICanvasBrush brush);
    public void FillRectangle(float x, float y, float w, float h, ICanvasBrush brush);
    public void FillRectangle(Rect rect, Color color);
    public void FillRectangle(float x, float y, float w, float h, Color color);
    public void FillRectangle(Rect rect, ICanvasBrush brush, ICanvasBrush opacityBrush);
    public void FillRectangle(float x, float y, float w, float h, ICanvasBrush brush, ICanvasBrush opacityBrush);
    public void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush);
    public void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush);
    public void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color);
    public void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color);
    public void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    public void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    public void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color, float strokeWidth);
    public void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color, float strokeWidth);
    public void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void FillRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush);
    public void FillRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush);
    public void FillRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color);
    public void FillRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color);
    public void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush);
    public void DrawEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush);
    public void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color);
    public void DrawEllipse(float x, float y, float radiusX, float radiusY, Color color);
    public void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    public void DrawEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    public void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color, float strokeWidth);
    public void DrawEllipse(float x, float y, float radiusX, float radiusY, Color color, float strokeWidth);
    public void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawEllipse(float x, float y, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void FillEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush);
    public void FillEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush);
    public void FillEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color);
    public void FillEllipse(float x, float y, float radiusX, float radiusY, Color color);
    public void DrawCircle(Vector2 centerPoint, float radius, ICanvasBrush brush);
    public void DrawCircle(float x, float y, float radius, ICanvasBrush brush);
    public void DrawCircle(Vector2 centerPoint, float radius, Color color);
    public void DrawCircle(float x, float y, float radius, Color color);
    public void DrawCircle(Vector2 centerPoint, float radius, ICanvasBrush brush, float strokeWidth);
    public void DrawCircle(float x, float y, float radius, ICanvasBrush brush, float strokeWidth);
    public void DrawCircle(Vector2 centerPoint, float radius, Color color, float strokeWidth);
    public void DrawCircle(float x, float y, float radius, Color color, float strokeWidth);
    public void DrawCircle(Vector2 centerPoint, float radius, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawCircle(float x, float y, float radius, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawCircle(Vector2 centerPoint, float radius, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawCircle(float x, float y, float radius, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void FillCircle(Vector2 centerPoint, float radius, ICanvasBrush brush);
    public void FillCircle(float x, float y, float radius, ICanvasBrush brush);
    public void FillCircle(Vector2 centerPoint, float radius, Color color);
    public void FillCircle(float x, float y, float radius, Color color);
    public void DrawText(string text, Vector2 point, Color color);
    public void DrawText(string text, float x, float y, Color color);
    public void DrawText(string text, Vector2 point, ICanvasBrush brush, CanvasTextFormat format);
    public void DrawText(string text, Rect rectangle, ICanvasBrush brush, CanvasTextFormat format);
    public void DrawText(string text, float x, float y, ICanvasBrush brush, CanvasTextFormat format);
    public void DrawText(string text, float x, float y, float w, float h, ICanvasBrush brush, CanvasTextFormat format);
    public void DrawText(string text, Vector2 point, Color color, CanvasTextFormat format);
    public void DrawText(string text, Rect rectangle, Color color, CanvasTextFormat format);
    public void DrawText(string text, float x, float y, Color color, CanvasTextFormat format);
    public void DrawText(string text, float x, float y, float w, float h, Color color, CanvasTextFormat format);
    public void DrawGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush);
    public void DrawGeometry(CanvasGeometry geometry, Vector2 offset, Color color);
    public void DrawGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush);
    public void DrawGeometry(CanvasGeometry geometry, float x, float y, Color color);
    public void DrawGeometry(CanvasGeometry geometry, ICanvasBrush brush);
    public void DrawGeometry(CanvasGeometry geometry, Color color);
    public void DrawGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, float strokeWidth);
    public void DrawGeometry(CanvasGeometry geometry, Vector2 offset, Color color, float strokeWidth);
    public void DrawGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush, float strokeWidth);
    public void DrawGeometry(CanvasGeometry geometry, float x, float y, Color color, float strokeWidth);
    public void DrawGeometry(CanvasGeometry geometry, ICanvasBrush brush, float strokeWidth);
    public void DrawGeometry(CanvasGeometry geometry, Color color, float strokeWidth);
    public void DrawGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawGeometry(CanvasGeometry geometry, Vector2 offset, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawGeometry(CanvasGeometry geometry, float x, float y, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawGeometry(CanvasGeometry geometry, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void DrawGeometry(CanvasGeometry geometry, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public void FillGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush);
    public void FillGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, ICanvasBrush opacityBrush);
    public void FillGeometry(CanvasGeometry geometry, Vector2 offset, Color color);
    public void FillGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush);
    public void FillGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush, ICanvasBrush opacityBrush);
    public void FillGeometry(CanvasGeometry geometry, float x, float y, Color color);
    public void FillGeometry(CanvasGeometry geometry, ICanvasBrush brush);
    public void FillGeometry(CanvasGeometry geometry, ICanvasBrush brush, ICanvasBrush opacityBrush);
    public void FillGeometry(CanvasGeometry geometry, Color color);
    public void DrawCachedGeometry(CanvasCachedGeometry geometry, Vector2 offset, ICanvasBrush brush);
    public void DrawCachedGeometry(CanvasCachedGeometry geometry, Vector2 offset, Color color);
    public void DrawCachedGeometry(CanvasCachedGeometry geometry, float x, float y, ICanvasBrush brush);
    public void DrawCachedGeometry(CanvasCachedGeometry geometry, float x, float y, Color color);
    public void DrawCachedGeometry(CanvasCachedGeometry geometry, ICanvasBrush brush);
    public void DrawCachedGeometry(CanvasCachedGeometry geometry, Color color);
    public void DrawTextLayout(CanvasTextLayout textLayout, Vector2 point, ICanvasBrush brush);
    public void DrawTextLayout(CanvasTextLayout textLayout, float x, float y, ICanvasBrush brush);
    public void DrawTextLayout(CanvasTextLayout textLayout, Vector2 point, Color color);
    public void DrawTextLayout(CanvasTextLayout textLayout, float x, float y, Color color);
    public void DrawInk(IEnumerable`1<InkStroke> inkStrokes);
    public void DrawInk(IEnumerable`1<InkStroke> inkStrokes, bool highContrast);
    public void DrawGradientMesh(CanvasGradientMesh gradientMesh);
    public void DrawGradientMesh(CanvasGradientMesh gradientMesh, Vector2 point);
    public void DrawGradientMesh(CanvasGradientMesh gradientMesh, float x, float y);
    public void DrawSvg(CanvasSvgDocument svgDocument, Size viewportSize);
    public void DrawSvg(CanvasSvgDocument svgDocument, Size viewportSize, Vector2 point);
    public void DrawSvg(CanvasSvgDocument svgDocument, Size viewportSize, float x, float y);
    public CanvasActiveLayer CreateLayer(float opacity);
    public CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush);
    public CanvasActiveLayer CreateLayer(float opacity, Rect clipRectangle);
    public CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush, Rect clipRectangle);
    public CanvasActiveLayer CreateLayer(float opacity, CanvasGeometry clipGeometry);
    public CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush, CanvasGeometry clipGeometry);
    public CanvasActiveLayer CreateLayer(float opacity, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform);
    public CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform);
    public CanvasActiveLayer CreateLayer(float opacity, ICanvasBrush opacityBrush, Rect clipRectangle, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform, CanvasLayerOptions options);
    public void DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush);
    public void DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush, CanvasTextMeasuringMode measuringMode);
    public void DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush, CanvasTextMeasuringMode measuringMode, string localeName, string textString, Int32[] clusterMapIndices, UInt32 textPosition);
    public CanvasSpriteBatch CreateSpriteBatch();
    public CanvasSpriteBatch CreateSpriteBatch(CanvasSpriteSortMode sortMode);
    public CanvasSpriteBatch CreateSpriteBatch(CanvasSpriteSortMode sortMode, CanvasImageInterpolation interpolation);
    public CanvasSpriteBatch CreateSpriteBatch(CanvasSpriteSortMode sortMode, CanvasImageInterpolation interpolation, CanvasSpriteOptions options);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public sealed virtual void Dispose();
    public CanvasAntialiasing get_Antialiasing();
    public void set_Antialiasing(CanvasAntialiasing value);
    public CanvasBlend get_Blend();
    public void set_Blend(CanvasBlend value);
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public Nullable`1<CanvasBufferPrecision> get_EffectBufferPrecision();
    public void set_EffectBufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public BitmapSize get_EffectTileSize();
    public void set_EffectTileSize(BitmapSize value);
    public CanvasTextAntialiasing get_TextAntialiasing();
    public void set_TextAntialiasing(CanvasTextAntialiasing value);
    public CanvasTextRenderingParameters get_TextRenderingParameters();
    public void set_TextRenderingParameters(CanvasTextRenderingParameters value);
    public Matrix3x2 get_Transform();
    public void set_Transform(Matrix3x2 value);
    public CanvasUnits get_Units();
    public void set_Units(CanvasUnits value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasEdgeBehavior>")]
public enum Microsoft.Graphics.Canvas.CanvasEdgeBehavior : Enum {
    public int value__;
    public static CanvasEdgeBehavior Clamp;
    public static CanvasEdgeBehavior Wrap;
    public static CanvasEdgeBehavior Mirror;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
public static class Microsoft.Graphics.Canvas.CanvasImage : object {
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImageStatics;
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImageStatics { get; }
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImageStatics();
    public static IAsyncAction SaveAsync(ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat);
    public static IAsyncAction SaveAsync(ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality);
    public static IAsyncAction SaveAsync(ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality, CanvasBufferPrecision bufferPrecision);
    public static Single[] ComputeHistogram(ICanvasImage image, Rect sourceRectangle, ICanvasResourceCreator resourceCreator, EffectChannelSelect channelSelect, int numberOfBins);
    public static bool IsHistogramSupported(CanvasDevice device);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasImageInterpolation>")]
public enum Microsoft.Graphics.Canvas.CanvasImageInterpolation : Enum {
    public int value__;
    public static CanvasImageInterpolation NearestNeighbor;
    public static CanvasImageInterpolation Linear;
    public static CanvasImageInterpolation Cubic;
    public static CanvasImageInterpolation MultiSampleLinear;
    public static CanvasImageInterpolation Anisotropic;
    public static CanvasImageInterpolation HighQualityCubic;
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasLayerOptions>")]
public enum Microsoft.Graphics.Canvas.CanvasLayerOptions : Enum {
    public UInt32 value__;
    public static CanvasLayerOptions None;
    public static CanvasLayerOptions InitializeFromBackground;
    public static CanvasLayerOptions IgnoreAlpha;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasLock")]
[CanvasLockRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasLock")]
public class Microsoft.Graphics.Canvas.CanvasLock : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasLock { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal CanvasLock(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasLock();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasLock FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasLock x, CanvasLock y);
    public static bool op_Inequality(CanvasLock x, CanvasLock y);
    public sealed virtual bool Equals(CanvasLock other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasRenderTarget")]
[CanvasRenderTargetRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasRenderTarget")]
public class Microsoft.Graphics.Canvas.CanvasRenderTarget : CanvasBitmap {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTarget { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CanvasRenderTarget(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public CanvasRenderTarget(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public CanvasRenderTarget(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public CanvasRenderTarget(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, DirectXPixelFormat format, CanvasAlphaMode alpha);
    internal CanvasRenderTarget(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTarget();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTargetFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasRenderTargetStatics();
    public static CanvasRenderTarget CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface);
    public static CanvasRenderTarget CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi);
    public static CanvasRenderTarget CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi, CanvasAlphaMode alpha);
    public static CanvasRenderTarget FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasRenderTarget x, CanvasRenderTarget y);
    public static bool op_Inequality(CanvasRenderTarget x, CanvasRenderTarget y);
    public sealed virtual bool Equals(CanvasRenderTarget other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CanvasDrawingSession CreateDrawingSession();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasSpriteBatch")]
[CanvasSpriteBatchRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasSpriteBatch")]
public class Microsoft.Graphics.Canvas.CanvasSpriteBatch : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasSpriteBatchStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasSpriteBatch { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasSpriteBatchStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    internal CanvasSpriteBatch(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasSpriteBatch();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasSpriteBatchStatics();
    public static bool IsSupported(CanvasDevice device);
    public static CanvasSpriteBatch FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSpriteBatch x, CanvasSpriteBatch y);
    public static bool op_Inequality(CanvasSpriteBatch x, CanvasSpriteBatch y);
    public sealed virtual bool Equals(CanvasSpriteBatch other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Draw(CanvasBitmap bitmap, Rect destRect);
    public void Draw(CanvasBitmap bitmap, Vector2 offset);
    public void Draw(CanvasBitmap bitmap, Matrix3x2 transform);
    public void Draw(CanvasBitmap bitmap, Rect destRect, Vector4 tint);
    public void Draw(CanvasBitmap bitmap, Vector2 offset, Vector4 tint);
    public void Draw(CanvasBitmap bitmap, Matrix3x2 transform, Vector4 tint);
    public void Draw(CanvasBitmap bitmap, Rect destRect, Vector4 tint, CanvasSpriteFlip flip);
    public void Draw(CanvasBitmap bitmap, Matrix3x2 transform, Vector4 tint, CanvasSpriteFlip flip);
    public void Draw(CanvasBitmap bitmap, Vector2 offset, Vector4 tint, Vector2 origin, float rotation, Vector2 scale, CanvasSpriteFlip flip);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Rect destRect, Rect sourceRect);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Vector2 offset, Rect sourceRect);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Rect destRect, Rect sourceRect, Vector4 tint);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Vector2 offset, Rect sourceRect, Vector4 tint);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect, Vector4 tint);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Rect destRect, Rect sourceRect, Vector4 tint, CanvasSpriteFlip flip);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect, Vector4 tint, CanvasSpriteFlip flip);
    public void DrawFromSpriteSheet(CanvasBitmap bitmap, Vector2 offset, Rect sourceRect, Vector4 tint, Vector2 origin, float rotation, Vector2 scale, CanvasSpriteFlip flip);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public sealed virtual void Dispose();
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasSpriteFlip>")]
public enum Microsoft.Graphics.Canvas.CanvasSpriteFlip : Enum {
    public UInt32 value__;
    public static CanvasSpriteFlip None;
    public static CanvasSpriteFlip Horizontal;
    public static CanvasSpriteFlip Vertical;
    public static CanvasSpriteFlip Both;
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasSpriteOptions>")]
public enum Microsoft.Graphics.Canvas.CanvasSpriteOptions : Enum {
    public UInt32 value__;
    public static CanvasSpriteOptions None;
    public static CanvasSpriteOptions ClampToSourceRect;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasSpriteSortMode>")]
public enum Microsoft.Graphics.Canvas.CanvasSpriteSortMode : Enum {
    public int value__;
    public static CanvasSpriteSortMode None;
    public static CanvasSpriteSortMode Bitmap;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasSwapChain")]
[CanvasSwapChainRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasSwapChain")]
public class Microsoft.Graphics.Canvas.CanvasSwapChain : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChainFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChainStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChain { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChainFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChainStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; }
    public int BufferCount { get; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public DirectXPixelFormat Format { get; }
    public CanvasSwapChainRotation Rotation { get; public set; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    public Size SourceSize { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public CanvasSwapChain(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public CanvasSwapChain(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public CanvasSwapChain(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public CanvasSwapChain(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, DirectXPixelFormat format, int bufferCount, CanvasAlphaMode alphaMode);
    internal CanvasSwapChain(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChain();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChainFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasSwapChainStatics();
    public static CanvasSwapChain CreateForCoreWindow(ICanvasResourceCreator resourceCreator, CoreWindow coreWindow, float dpi);
    public static CanvasSwapChain CreateForCoreWindow(ICanvasResourceCreator resourceCreator, CoreWindow coreWindow, float width, float height, float dpi, DirectXPixelFormat format, int bufferCount);
    public static CanvasSwapChain FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSwapChain x, CanvasSwapChain y);
    public static bool op_Inequality(CanvasSwapChain x, CanvasSwapChain y);
    public sealed virtual bool Equals(CanvasSwapChain other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Present();
    public void Present(int syncInterval);
    public void ResizeBuffers(Size newSize);
    public void ResizeBuffers(float newWidth, float newHeight);
    public void ResizeBuffers(float newWidth, float newHeight, float newDpi);
    public void ResizeBuffers(float newWidth, float newHeight, float newDpi, DirectXPixelFormat newFormat, int bufferCount);
    public CanvasDrawingSession CreateDrawingSession(Color clearColor);
    public void WaitForVerticalBlank();
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public int get_BufferCount();
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public DirectXPixelFormat get_Format();
    public CanvasSwapChainRotation get_Rotation();
    public void set_Rotation(CanvasSwapChainRotation value);
    public Size get_Size();
    public BitmapSize get_SizeInPixels();
    public Size get_SourceSize();
    public void set_SourceSize(Size value);
    public Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasSwapChainRotation>")]
public enum Microsoft.Graphics.Canvas.CanvasSwapChainRotation : Enum {
    public int value__;
    public static CanvasSwapChainRotation None;
    public static CanvasSwapChainRotation Rotate90;
    public static CanvasSwapChainRotation Rotate180;
    public static CanvasSwapChainRotation Rotate270;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasUnits>")]
public enum Microsoft.Graphics.Canvas.CanvasUnits : Enum {
    public int value__;
    public static CanvasUnits Dips;
    public static CanvasUnits Pixels;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.CanvasVirtualBitmap")]
[CanvasVirtualBitmapRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.ICanvasVirtualBitmap")]
public class Microsoft.Graphics.Canvas.CanvasVirtualBitmap : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasVirtualBitmap { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Rect Bounds { get; }
    public CanvasDevice Device { get; }
    public bool IsCachedOnDemand { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    internal CanvasVirtualBitmap(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasVirtualBitmap();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasVirtualBitmapStatics();
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, CanvasVirtualBitmapOptions options);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, CanvasVirtualBitmapOptions options);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasVirtualBitmapOptions options);
    public static IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    public static CanvasVirtualBitmap FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasVirtualBitmap x, CanvasVirtualBitmap y);
    public static bool op_Inequality(CanvasVirtualBitmap x, CanvasVirtualBitmap y);
    public sealed virtual bool Equals(CanvasVirtualBitmap other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public Rect get_Bounds();
    public CanvasDevice get_Device();
    public bool get_IsCachedOnDemand();
    public Size get_Size();
    public BitmapSize get_SizeInPixels();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.CanvasVirtualBitmapOptions>")]
public enum Microsoft.Graphics.Canvas.CanvasVirtualBitmapOptions : Enum {
    public int value__;
    public static CanvasVirtualBitmapOptions None;
    public static CanvasVirtualBitmapOptions ReleaseSource;
    public static CanvasVirtualBitmapOptions CacheOnDemand;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect")]
[AlphaMaskEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect")]
public class Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics { get; }
    public static bool IsSupported { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public IGraphicsEffectSource AlphaMask { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal AlphaMaskEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_AlphaMaskEffect();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IAlphaMaskEffectStatics();
    public static bool get_IsSupported();
    public static AlphaMaskEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AlphaMaskEffect x, AlphaMaskEffect y);
    public static bool op_Inequality(AlphaMaskEffect x, AlphaMaskEffect y);
    public sealed virtual bool Equals(AlphaMaskEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public IGraphicsEffectSource get_AlphaMask();
    public void set_AlphaMask(IGraphicsEffectSource value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect")]
[ArithmeticCompositeEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect")]
public class Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public float MultiplyAmount { get; public set; }
    public string Name { get; public set; }
    public float Offset { get; public set; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public float Source1Amount { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    public float Source2Amount { get; public set; }
    internal ArithmeticCompositeEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IArithmeticCompositeEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ArithmeticCompositeEffect();
    public static ArithmeticCompositeEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ArithmeticCompositeEffect x, ArithmeticCompositeEffect y);
    public static bool op_Inequality(ArithmeticCompositeEffect x, ArithmeticCompositeEffect y);
    public sealed virtual bool Equals(ArithmeticCompositeEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public float get_MultiplyAmount();
    public void set_MultiplyAmount(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_Offset();
    public void set_Offset(float value);
    public IGraphicsEffectSource get_Source1();
    public void set_Source1(IGraphicsEffectSource value);
    public float get_Source1Amount();
    public void set_Source1Amount(float value);
    public IGraphicsEffectSource get_Source2();
    public void set_Source2(IGraphicsEffectSource value);
    public float get_Source2Amount();
    public void set_Source2Amount(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.AtlasEffect")]
[AtlasEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IAtlasEffect")]
public class Microsoft.Graphics.Canvas.Effects.AtlasEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_AtlasEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IAtlasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_AtlasEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public Rect PaddingRectangle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Rect SourceRectangle { get; public set; }
    internal AtlasEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IAtlasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_AtlasEffect();
    public static AtlasEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(AtlasEffect x, AtlasEffect y);
    public static bool op_Inequality(AtlasEffect x, AtlasEffect y);
    public sealed virtual bool Equals(AtlasEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public Rect get_PaddingRectangle();
    public void set_PaddingRectangle(Rect value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public Rect get_SourceRectangle();
    public void set_SourceRectangle(Rect value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.BlendEffect")]
[BlendEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IBlendEffect")]
public class Microsoft.Graphics.Canvas.Effects.BlendEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_BlendEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IBlendEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_BlendEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public IGraphicsEffectSource Background { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public IGraphicsEffectSource Foreground { get; public set; }
    public BlendEffectMode Mode { get; public set; }
    public string Name { get; public set; }
    internal BlendEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IBlendEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_BlendEffect();
    public static BlendEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BlendEffect x, BlendEffect y);
    public static bool op_Inequality(BlendEffect x, BlendEffect y);
    public sealed virtual bool Equals(BlendEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public IGraphicsEffectSource get_Background();
    public void set_Background(IGraphicsEffectSource value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public IGraphicsEffectSource get_Foreground();
    public void set_Foreground(IGraphicsEffectSource value);
    public BlendEffectMode get_Mode();
    public void set_Mode(BlendEffectMode value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.BlendEffectMode>")]
public enum Microsoft.Graphics.Canvas.Effects.BlendEffectMode : Enum {
    public int value__;
    public static BlendEffectMode Multiply;
    public static BlendEffectMode Screen;
    public static BlendEffectMode Darken;
    public static BlendEffectMode Lighten;
    public static BlendEffectMode Dissolve;
    public static BlendEffectMode ColorBurn;
    public static BlendEffectMode LinearBurn;
    public static BlendEffectMode DarkerColor;
    public static BlendEffectMode LighterColor;
    public static BlendEffectMode ColorDodge;
    public static BlendEffectMode LinearDodge;
    public static BlendEffectMode Overlay;
    public static BlendEffectMode SoftLight;
    public static BlendEffectMode HardLight;
    public static BlendEffectMode VividLight;
    public static BlendEffectMode LinearLight;
    public static BlendEffectMode PinLight;
    public static BlendEffectMode HardMix;
    public static BlendEffectMode Difference;
    public static BlendEffectMode Exclusion;
    public static BlendEffectMode Hue;
    public static BlendEffectMode Saturation;
    public static BlendEffectMode Color;
    public static BlendEffectMode Luminosity;
    public static BlendEffectMode Subtract;
    public static BlendEffectMode Division;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.BorderEffect")]
[BorderEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IBorderEffect")]
public class Microsoft.Graphics.Canvas.Effects.BorderEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_BorderEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IBorderEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_BorderEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasEdgeBehavior ExtendX { get; public set; }
    public CanvasEdgeBehavior ExtendY { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal BorderEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IBorderEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_BorderEffect();
    public static BorderEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BorderEffect x, BorderEffect y);
    public static bool op_Inequality(BorderEffect x, BorderEffect y);
    public sealed virtual bool Equals(BorderEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public CanvasEdgeBehavior get_ExtendX();
    public void set_ExtendX(CanvasEdgeBehavior value);
    public CanvasEdgeBehavior get_ExtendY();
    public void set_ExtendY(CanvasEdgeBehavior value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.BrightnessEffect")]
[BrightnessEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IBrightnessEffect")]
public class Microsoft.Graphics.Canvas.Effects.BrightnessEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_BrightnessEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IBrightnessEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_BrightnessEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Vector2 BlackPoint { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Vector2 WhitePoint { get; public set; }
    internal BrightnessEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IBrightnessEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_BrightnessEffect();
    public static BrightnessEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(BrightnessEffect x, BrightnessEffect y);
    public static bool op_Inequality(BrightnessEffect x, BrightnessEffect y);
    public sealed virtual bool Equals(BrightnessEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public Vector2 get_BlackPoint();
    public void set_BlackPoint(Vector2 value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public Vector2 get_WhitePoint();
    public void set_WhitePoint(Vector2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect")]
[ChromaKeyEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect")]
public class Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public bool Feather { get; public set; }
    public bool InvertAlpha { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float Tolerance { get; public set; }
    internal ChromaKeyEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IChromaKeyEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ChromaKeyEffect();
    public static ChromaKeyEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ChromaKeyEffect x, ChromaKeyEffect y);
    public static bool op_Inequality(ChromaKeyEffect x, ChromaKeyEffect y);
    public sealed virtual bool Equals(ChromaKeyEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Vector4 get_ColorHdr();
    public void set_ColorHdr(Vector4 value);
    public bool get_Feather();
    public void set_Feather(bool value);
    public bool get_InvertAlpha();
    public void set_InvertAlpha(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public float get_Tolerance();
    public void set_Tolerance(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ColorManagementEffect")]
[ColorManagementEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IColorManagementEffect")]
public class Microsoft.Graphics.Canvas.Effects.ColorManagementEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ColorManagementEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ColorManagementEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public ColorManagementProfile OutputColorProfile { get; public set; }
    public ColorManagementRenderingIntent OutputRenderingIntent { get; public set; }
    public ColorManagementEffectQuality Quality { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public ColorManagementProfile SourceColorProfile { get; public set; }
    public ColorManagementRenderingIntent SourceRenderingIntent { get; public set; }
    internal ColorManagementEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ColorManagementEffect();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementEffectStatics();
    public static bool IsBestQualitySupported(CanvasDevice device);
    public static ColorManagementEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ColorManagementEffect x, ColorManagementEffect y);
    public static bool op_Inequality(ColorManagementEffect x, ColorManagementEffect y);
    public sealed virtual bool Equals(ColorManagementEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public void set_AlphaMode(CanvasAlphaMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public ColorManagementProfile get_OutputColorProfile();
    public void set_OutputColorProfile(ColorManagementProfile value);
    public ColorManagementRenderingIntent get_OutputRenderingIntent();
    public void set_OutputRenderingIntent(ColorManagementRenderingIntent value);
    public ColorManagementEffectQuality get_Quality();
    public void set_Quality(ColorManagementEffectQuality value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public ColorManagementProfile get_SourceColorProfile();
    public void set_SourceColorProfile(ColorManagementProfile value);
    public ColorManagementRenderingIntent get_SourceRenderingIntent();
    public void set_SourceRenderingIntent(ColorManagementRenderingIntent value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality>")]
public enum Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality : Enum {
    public int value__;
    public static ColorManagementEffectQuality Proof;
    public static ColorManagementEffectQuality Normal;
    public static ColorManagementEffectQuality Best;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.ColorManagementGamma>")]
public enum Microsoft.Graphics.Canvas.Effects.ColorManagementGamma : Enum {
    public int value__;
    public static ColorManagementGamma G22;
    public static ColorManagementGamma G10;
    public static ColorManagementGamma G2084;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ColorManagementProfile")]
[ColorManagementProfileRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IColorManagementProfile")]
public class Microsoft.Graphics.Canvas.Effects.ColorManagementProfile : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfile { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasColorSpace ColorSpace { get; }
    public ExtendedColorSpace ExtendedColorSpace { get; }
    public Byte[] IccProfile { get; }
    public Nullable`1<ColorManagementSimpleProfile> SimpleProfile { get; }
    public ColorManagementProfileType Type { get; }
    public ColorManagementProfile(CanvasColorSpace colorSpace);
    internal ColorManagementProfile(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfile();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfileFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IColorManagementProfileStatics();
    public static ColorManagementProfile CreateCustom(Byte[] iccProfile);
    public static ColorManagementProfile CreateSimple(ColorManagementSimpleProfile simpleProfile);
    public static ColorManagementProfile CreateExtended(ExtendedColorSpace colorSpace);
    public static bool IsSupported(ColorManagementProfileType type, CanvasDevice device);
    public static ColorManagementProfile FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ColorManagementProfile x, ColorManagementProfile y);
    public static bool op_Inequality(ColorManagementProfile x, ColorManagementProfile y);
    public sealed virtual bool Equals(ColorManagementProfile other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public CanvasColorSpace get_ColorSpace();
    public ExtendedColorSpace get_ExtendedColorSpace();
    public Byte[] get_IccProfile();
    public Nullable`1<ColorManagementSimpleProfile> get_SimpleProfile();
    public ColorManagementProfileType get_Type();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType>")]
public enum Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType : Enum {
    public int value__;
    public static ColorManagementProfileType Icc;
    public static ColorManagementProfileType Simple;
    public static ColorManagementProfileType Extended;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent>")]
public enum Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent : Enum {
    public int value__;
    public static ColorManagementRenderingIntent Perceptual;
    public static ColorManagementRenderingIntent RelativeColorimetric;
    public static ColorManagementRenderingIntent Saturation;
    public static ColorManagementRenderingIntent AbsoluteColorimetric;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile;struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);enum(Microsoft.Graphics.Canvas.Effects.ColorManagementGamma;i4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile,Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile>")]
public class Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile : ValueType {
    public Vector2 RedPrimary;
    public Vector2 GreenPrimary;
    public Vector2 BluePrimary;
    public Vector2 WhitePointXZ;
    public ColorManagementGamma Gamma;
    public ColorManagementSimpleProfile(Vector2 _RedPrimary, Vector2 _GreenPrimary, Vector2 _BluePrimary, Vector2 _WhitePointXZ, ColorManagementGamma _Gamma);
    public static bool op_Equality(ColorManagementSimpleProfile x, ColorManagementSimpleProfile y);
    public static bool op_Inequality(ColorManagementSimpleProfile x, ColorManagementSimpleProfile y);
    public sealed virtual bool Equals(ColorManagementSimpleProfile other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect")]
[ColorMatrixEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect")]
public class Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public Matrix5x4 ColorMatrix { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal ColorMatrixEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IColorMatrixEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ColorMatrixEffect();
    public static ColorMatrixEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ColorMatrixEffect x, ColorMatrixEffect y);
    public static bool op_Inequality(ColorMatrixEffect x, ColorMatrixEffect y);
    public sealed virtual bool Equals(ColorMatrixEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public void set_AlphaMode(CanvasAlphaMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public Matrix5x4 get_ColorMatrix();
    public void set_ColorMatrix(Matrix5x4 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ColorSourceEffect")]
[ColorSourceEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IColorSourceEffect")]
public class Microsoft.Graphics.Canvas.Effects.ColorSourceEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ColorSourceEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IColorSourceEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ColorSourceEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public string Name { get; public set; }
    internal ColorSourceEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IColorSourceEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ColorSourceEffect();
    public static ColorSourceEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ColorSourceEffect x, ColorSourceEffect y);
    public static bool op_Inequality(ColorSourceEffect x, ColorSourceEffect y);
    public sealed virtual bool Equals(ColorSourceEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Vector4 get_ColorHdr();
    public void set_ColorHdr(Vector4 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.CompositeEffect")]
[CompositeEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ICompositeEffect")]
public class Microsoft.Graphics.Canvas.Effects.CompositeEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_CompositeEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICompositeEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_CompositeEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasComposite Mode { get; public set; }
    public string Name { get; public set; }
    public IList`1<IGraphicsEffectSource> Sources { get; }
    internal CompositeEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICompositeEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_CompositeEffect();
    public static CompositeEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CompositeEffect x, CompositeEffect y);
    public static bool op_Inequality(CompositeEffect x, CompositeEffect y);
    public sealed virtual bool Equals(CompositeEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public CanvasComposite get_Mode();
    public void set_Mode(CanvasComposite value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IList`1<IGraphicsEffectSource> get_Sources();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ContrastEffect")]
[ContrastEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IContrastEffect")]
public class Microsoft.Graphics.Canvas.Effects.ContrastEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ContrastEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IContrastEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ContrastEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampSource { get; public set; }
    public float Contrast { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal ContrastEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IContrastEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ContrastEffect();
    public static ContrastEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ContrastEffect x, ContrastEffect y);
    public static bool op_Inequality(ContrastEffect x, ContrastEffect y);
    public sealed virtual bool Equals(ContrastEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampSource();
    public void set_ClampSource(bool value);
    public float get_Contrast();
    public void set_Contrast(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect")]
[ConvolveMatrixEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect")]
public class Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public float Divisor { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public int KernelHeight { get; public set; }
    public Single[] KernelMatrix { get; public set; }
    public Vector2 KernelOffset { get; public set; }
    public Vector2 KernelScale { get; public set; }
    public int KernelWidth { get; public set; }
    public string Name { get; public set; }
    public float Offset { get; public set; }
    public bool PreserveAlpha { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal ConvolveMatrixEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IConvolveMatrixEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ConvolveMatrixEffect();
    public static ConvolveMatrixEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ConvolveMatrixEffect x, ConvolveMatrixEffect y);
    public static bool op_Inequality(ConvolveMatrixEffect x, ConvolveMatrixEffect y);
    public sealed virtual bool Equals(ConvolveMatrixEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public float get_Divisor();
    public void set_Divisor(float value);
    public CanvasImageInterpolation get_InterpolationMode();
    public void set_InterpolationMode(CanvasImageInterpolation value);
    public int get_KernelHeight();
    public void set_KernelHeight(int value);
    public Single[] get_KernelMatrix();
    public void set_KernelMatrix(Single[] value);
    public Vector2 get_KernelOffset();
    public void set_KernelOffset(Vector2 value);
    public Vector2 get_KernelScale();
    public void set_KernelScale(Vector2 value);
    public int get_KernelWidth();
    public void set_KernelWidth(int value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_Offset();
    public void set_Offset(float value);
    public bool get_PreserveAlpha();
    public void set_PreserveAlpha(bool value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.CropEffect")]
[CropEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ICropEffect")]
public class Microsoft.Graphics.Canvas.Effects.CropEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_CropEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICropEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_CropEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Rect SourceRectangle { get; public set; }
    internal CropEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICropEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_CropEffect();
    public static CropEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CropEffect x, CropEffect y);
    public static bool op_Inequality(CropEffect x, CropEffect y);
    public sealed virtual bool Equals(CropEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public Rect get_SourceRectangle();
    public void set_SourceRectangle(Rect value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.CrossFadeEffect")]
[CrossFadeEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect")]
public class Microsoft.Graphics.Canvas.Effects.CrossFadeEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_CrossFadeEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_CrossFadeEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics { get; }
    public static bool IsSupported { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float CrossFade { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    internal CrossFadeEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICrossFadeEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_CrossFadeEffect();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICrossFadeEffectStatics();
    public static bool get_IsSupported();
    public static CrossFadeEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CrossFadeEffect x, CrossFadeEffect y);
    public static bool op_Inequality(CrossFadeEffect x, CrossFadeEffect y);
    public sealed virtual bool Equals(CrossFadeEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_CrossFade();
    public void set_CrossFade(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source1();
    public void set_Source1(IGraphicsEffectSource value);
    public IGraphicsEffectSource get_Source2();
    public void set_Source2(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect")]
[DirectionalBlurEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect")]
public class Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Angle { get; public set; }
    public float BlurAmount { get; public set; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public EffectOptimization Optimization { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal DirectionalBlurEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IDirectionalBlurEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_DirectionalBlurEffect();
    public static DirectionalBlurEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DirectionalBlurEffect x, DirectionalBlurEffect y);
    public static bool op_Inequality(DirectionalBlurEffect x, DirectionalBlurEffect y);
    public sealed virtual bool Equals(DirectionalBlurEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Angle();
    public void set_Angle(float value);
    public float get_BlurAmount();
    public void set_BlurAmount(float value);
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public EffectOptimization get_Optimization();
    public void set_Optimization(EffectOptimization value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect")]
[DiscreteTransferEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect")]
public class Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AlphaDisable { get; public set; }
    public Single[] AlphaTable { get; public set; }
    public bool BlueDisable { get; public set; }
    public Single[] BlueTable { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public bool GreenDisable { get; public set; }
    public Single[] GreenTable { get; public set; }
    public string Name { get; public set; }
    public bool RedDisable { get; public set; }
    public Single[] RedTable { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal DiscreteTransferEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IDiscreteTransferEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_DiscreteTransferEffect();
    public static DiscreteTransferEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DiscreteTransferEffect x, DiscreteTransferEffect y);
    public static bool op_Inequality(DiscreteTransferEffect x, DiscreteTransferEffect y);
    public sealed virtual bool Equals(DiscreteTransferEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public Single[] get_AlphaTable();
    public void set_AlphaTable(Single[] value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public Single[] get_BlueTable();
    public void set_BlueTable(Single[] value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public Single[] get_GreenTable();
    public void set_GreenTable(Single[] value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public Single[] get_RedTable();
    public void set_RedTable(Single[] value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect")]
[DisplacementMapEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect")]
public class Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Amount { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public IGraphicsEffectSource Displacement { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public EffectChannelSelect XChannelSelect { get; public set; }
    public EffectChannelSelect YChannelSelect { get; public set; }
    internal DisplacementMapEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IDisplacementMapEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_DisplacementMapEffect();
    public static DisplacementMapEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DisplacementMapEffect x, DisplacementMapEffect y);
    public static bool op_Inequality(DisplacementMapEffect x, DisplacementMapEffect y);
    public sealed virtual bool Equals(DisplacementMapEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Amount();
    public void set_Amount(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public IGraphicsEffectSource get_Displacement();
    public void set_Displacement(IGraphicsEffectSource value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public EffectChannelSelect get_XChannelSelect();
    public void set_XChannelSelect(EffectChannelSelect value);
    public EffectChannelSelect get_YChannelSelect();
    public void set_YChannelSelect(EffectChannelSelect value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect")]
[DistantDiffuseEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect")]
public class Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Azimuth { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float DiffuseAmount { get; public set; }
    public float Elevation { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal DistantDiffuseEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IDistantDiffuseEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_DistantDiffuseEffect();
    public static DistantDiffuseEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DistantDiffuseEffect x, DistantDiffuseEffect y);
    public static bool op_Inequality(DistantDiffuseEffect x, DistantDiffuseEffect y);
    public sealed virtual bool Equals(DistantDiffuseEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Azimuth();
    public void set_Azimuth(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_DiffuseAmount();
    public void set_DiffuseAmount(float value);
    public float get_Elevation();
    public void set_Elevation(float value);
    public CanvasImageInterpolation get_HeightMapInterpolationMode();
    public void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public Vector2 get_HeightMapKernelSize();
    public void set_HeightMapKernelSize(Vector2 value);
    public float get_HeightMapScale();
    public void set_HeightMapScale(float value);
    public Color get_LightColor();
    public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect")]
[DistantSpecularEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect")]
public class Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Azimuth { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Elevation { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularExponent { get; public set; }
    internal DistantSpecularEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IDistantSpecularEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_DistantSpecularEffect();
    public static DistantSpecularEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DistantSpecularEffect x, DistantSpecularEffect y);
    public static bool op_Inequality(DistantSpecularEffect x, DistantSpecularEffect y);
    public sealed virtual bool Equals(DistantSpecularEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Azimuth();
    public void set_Azimuth(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_Elevation();
    public void set_Elevation(float value);
    public CanvasImageInterpolation get_HeightMapInterpolationMode();
    public void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public Vector2 get_HeightMapKernelSize();
    public void set_HeightMapKernelSize(Vector2 value);
    public float get_HeightMapScale();
    public void set_HeightMapScale(float value);
    public Color get_LightColor();
    public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public float get_SpecularAmount();
    public void set_SpecularAmount(float value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect")]
[DpiCompensationEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect")]
public class Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Vector2 SourceDpi { get; public set; }
    internal DpiCompensationEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IDpiCompensationEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_DpiCompensationEffect();
    public static DpiCompensationEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(DpiCompensationEffect x, DpiCompensationEffect y);
    public static bool op_Inequality(DpiCompensationEffect x, DpiCompensationEffect y);
    public sealed virtual bool Equals(DpiCompensationEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public CanvasImageInterpolation get_InterpolationMode();
    public void set_InterpolationMode(CanvasImageInterpolation value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public Vector2 get_SourceDpi();
    public void set_SourceDpi(Vector2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect")]
[EdgeDetectionEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect")]
public class Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; public set; }
    public float Amount { get; public set; }
    public float BlurAmount { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public EdgeDetectionEffectMode Mode { get; public set; }
    public string Name { get; public set; }
    public bool OverlayEdges { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal EdgeDetectionEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IEdgeDetectionEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_EdgeDetectionEffect();
    public static EdgeDetectionEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(EdgeDetectionEffect x, EdgeDetectionEffect y);
    public static bool op_Inequality(EdgeDetectionEffect x, EdgeDetectionEffect y);
    public sealed virtual bool Equals(EdgeDetectionEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public void set_AlphaMode(CanvasAlphaMode value);
    public float get_Amount();
    public void set_Amount(float value);
    public float get_BlurAmount();
    public void set_BlurAmount(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public EdgeDetectionEffectMode get_Mode();
    public void set_Mode(EdgeDetectionEffectMode value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public bool get_OverlayEdges();
    public void set_OverlayEdges(bool value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode>")]
public enum Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode : Enum {
    public int value__;
    public static EdgeDetectionEffectMode Sobel;
    public static EdgeDetectionEffectMode Prewitt;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.EffectBorderMode>")]
public enum Microsoft.Graphics.Canvas.Effects.EffectBorderMode : Enum {
    public int value__;
    public static EffectBorderMode Soft;
    public static EffectBorderMode Hard;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.EffectChannelSelect>")]
public enum Microsoft.Graphics.Canvas.Effects.EffectChannelSelect : Enum {
    public int value__;
    public static EffectChannelSelect Red;
    public static EffectChannelSelect Green;
    public static EffectChannelSelect Blue;
    public static EffectChannelSelect Alpha;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace>")]
public enum Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace : Enum {
    public int value__;
    public static EffectHueColorSpace Hsv;
    public static EffectHueColorSpace Hsl;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.EffectOptimization>")]
public enum Microsoft.Graphics.Canvas.Effects.EffectOptimization : Enum {
    public int value__;
    public static EffectOptimization Speed;
    public static EffectOptimization Balanced;
    public static EffectOptimization Quality;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D")]
[EffectTransferTable3DRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D")]
public class Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3D { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    internal EffectTransferTable3D(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3D();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IEffectTransferTable3DStatics();
    public static EffectTransferTable3D CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int sizeB, int sizeG, int sizeR);
    public static EffectTransferTable3D CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int sizeB, int sizeG, int sizeR, DirectXPixelFormat format);
    public static EffectTransferTable3D FromAbi(IntPtr thisPtr);
    public static bool op_Equality(EffectTransferTable3D x, EffectTransferTable3D y);
    public static bool op_Inequality(EffectTransferTable3D x, EffectTransferTable3D y);
    public sealed virtual bool Equals(EffectTransferTable3D other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public CanvasDevice get_Device();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.EmbossEffect")]
[EmbossEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IEmbossEffect")]
public class Microsoft.Graphics.Canvas.Effects.EmbossEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_EmbossEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IEmbossEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_EmbossEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Amount { get; public set; }
    public float Angle { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal EmbossEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IEmbossEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_EmbossEffect();
    public static EmbossEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(EmbossEffect x, EmbossEffect y);
    public static bool op_Inequality(EmbossEffect x, EmbossEffect y);
    public sealed virtual bool Equals(EmbossEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Amount();
    public void set_Amount(float value);
    public float get_Angle();
    public void set_Angle(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ExposureEffect")]
[ExposureEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IExposureEffect")]
public class Microsoft.Graphics.Canvas.Effects.ExposureEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ExposureEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IExposureEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ExposureEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Exposure { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal ExposureEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IExposureEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ExposureEffect();
    public static ExposureEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ExposureEffect x, ExposureEffect y);
    public static bool op_Inequality(ExposureEffect x, ExposureEffect y);
    public sealed virtual bool Equals(ExposureEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_Exposure();
    public void set_Exposure(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace>")]
public enum Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace : Enum {
    public int value__;
    public static ExtendedColorSpace FullG22P709;
    public static ExtendedColorSpace FullG10P709;
    public static ExtendedColorSpace StudioG22P709;
    public static ExtendedColorSpace StudioG22P2020;
    public static ExtendedColorSpace FullG2084P2020;
    public static ExtendedColorSpace StudioG2084P2020;
    public static ExtendedColorSpace FullG22P2020;
    public static ExtendedColorSpace Custom;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.GammaTransferEffect")]
[GammaTransferEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect")]
public class Microsoft.Graphics.Canvas.Effects.GammaTransferEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_GammaTransferEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_GammaTransferEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float AlphaAmplitude { get; public set; }
    public bool AlphaDisable { get; public set; }
    public float AlphaExponent { get; public set; }
    public float AlphaOffset { get; public set; }
    public float BlueAmplitude { get; public set; }
    public bool BlueDisable { get; public set; }
    public float BlueExponent { get; public set; }
    public float BlueOffset { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public float GreenAmplitude { get; public set; }
    public bool GreenDisable { get; public set; }
    public float GreenExponent { get; public set; }
    public float GreenOffset { get; public set; }
    public string Name { get; public set; }
    public float RedAmplitude { get; public set; }
    public bool RedDisable { get; public set; }
    public float RedExponent { get; public set; }
    public float RedOffset { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal GammaTransferEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IGammaTransferEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_GammaTransferEffect();
    public static GammaTransferEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(GammaTransferEffect x, GammaTransferEffect y);
    public static bool op_Inequality(GammaTransferEffect x, GammaTransferEffect y);
    public sealed virtual bool Equals(GammaTransferEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_AlphaAmplitude();
    public void set_AlphaAmplitude(float value);
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public float get_AlphaExponent();
    public void set_AlphaExponent(float value);
    public float get_AlphaOffset();
    public void set_AlphaOffset(float value);
    public float get_BlueAmplitude();
    public void set_BlueAmplitude(float value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public float get_BlueExponent();
    public void set_BlueExponent(float value);
    public float get_BlueOffset();
    public void set_BlueOffset(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public float get_GreenAmplitude();
    public void set_GreenAmplitude(float value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public float get_GreenExponent();
    public void set_GreenExponent(float value);
    public float get_GreenOffset();
    public void set_GreenOffset(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_RedAmplitude();
    public void set_RedAmplitude(float value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public float get_RedExponent();
    public void set_RedExponent(float value);
    public float get_RedOffset();
    public void set_RedOffset(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect")]
[GaussianBlurEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect")]
public class Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float BlurAmount { get; public set; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public EffectOptimization Optimization { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal GaussianBlurEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IGaussianBlurEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_GaussianBlurEffect();
    public static GaussianBlurEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(GaussianBlurEffect x, GaussianBlurEffect y);
    public static bool op_Inequality(GaussianBlurEffect x, GaussianBlurEffect y);
    public sealed virtual bool Equals(GaussianBlurEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_BlurAmount();
    public void set_BlurAmount(float value);
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public EffectOptimization get_Optimization();
    public void set_Optimization(EffectOptimization value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.GrayscaleEffect")]
[GrayscaleEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect")]
public class Microsoft.Graphics.Canvas.Effects.GrayscaleEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_GrayscaleEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_GrayscaleEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal GrayscaleEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IGrayscaleEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_GrayscaleEffect();
    public static GrayscaleEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(GrayscaleEffect x, GrayscaleEffect y);
    public static bool op_Inequality(GrayscaleEffect x, GrayscaleEffect y);
    public sealed virtual bool Equals(GrayscaleEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect")]
[HdrToneMapEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect")]
public class Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffectStatics { get; }
    public static bool IsSupported { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public HdrToneMapEffectDisplayMode DisplayMode { get; public set; }
    public float InputMaxLuminance { get; public set; }
    public string Name { get; public set; }
    public float OutputMaxLuminance { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal HdrToneMapEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_HdrToneMapEffect();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IHdrToneMapEffectStatics();
    public static bool get_IsSupported();
    public static HdrToneMapEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(HdrToneMapEffect x, HdrToneMapEffect y);
    public static bool op_Inequality(HdrToneMapEffect x, HdrToneMapEffect y);
    public sealed virtual bool Equals(HdrToneMapEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public HdrToneMapEffectDisplayMode get_DisplayMode();
    public void set_DisplayMode(HdrToneMapEffectDisplayMode value);
    public float get_InputMaxLuminance();
    public void set_InputMaxLuminance(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_OutputMaxLuminance();
    public void set_OutputMaxLuminance(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.HdrToneMapEffectDisplayMode>")]
public enum Microsoft.Graphics.Canvas.Effects.HdrToneMapEffectDisplayMode : Enum {
    public int value__;
    public static HdrToneMapEffectDisplayMode Sdr;
    public static HdrToneMapEffectDisplayMode Hdr;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect")]
[HighlightsAndShadowsEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect")]
public class Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Clarity { get; public set; }
    public float Highlights { get; public set; }
    public float MaskBlurAmount { get; public set; }
    public string Name { get; public set; }
    public float Shadows { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public bool SourceIsLinearGamma { get; public set; }
    internal HighlightsAndShadowsEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IHighlightsAndShadowsEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_HighlightsAndShadowsEffect();
    public static HighlightsAndShadowsEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(HighlightsAndShadowsEffect x, HighlightsAndShadowsEffect y);
    public static bool op_Inequality(HighlightsAndShadowsEffect x, HighlightsAndShadowsEffect y);
    public sealed virtual bool Equals(HighlightsAndShadowsEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_Clarity();
    public void set_Clarity(float value);
    public float get_Highlights();
    public void set_Highlights(float value);
    public float get_MaskBlurAmount();
    public void set_MaskBlurAmount(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_Shadows();
    public void set_Shadows(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public bool get_SourceIsLinearGamma();
    public void set_SourceIsLinearGamma(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.HueRotationEffect")]
[HueRotationEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IHueRotationEffect")]
public class Microsoft.Graphics.Canvas.Effects.HueRotationEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_HueRotationEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IHueRotationEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_HueRotationEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Angle { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal HueRotationEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IHueRotationEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_HueRotationEffect();
    public static HueRotationEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(HueRotationEffect x, HueRotationEffect y);
    public static bool op_Inequality(HueRotationEffect x, HueRotationEffect y);
    public sealed virtual bool Equals(HueRotationEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Angle();
    public void set_Angle(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.HueToRgbEffect")]
[HueToRgbEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect")]
public class Microsoft.Graphics.Canvas.Effects.HueToRgbEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_HueToRgbEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_HueToRgbEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public EffectHueColorSpace SourceColorSpace { get; public set; }
    internal HueToRgbEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IHueToRgbEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_HueToRgbEffect();
    public static HueToRgbEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(HueToRgbEffect x, HueToRgbEffect y);
    public static bool op_Inequality(HueToRgbEffect x, HueToRgbEffect y);
    public sealed virtual bool Equals(HueToRgbEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public EffectHueColorSpace get_SourceColorSpace();
    public void set_SourceColorSpace(EffectHueColorSpace value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("9BA6607E-75C9-5388-892F-DD3440564D98")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect {
    public IGraphicsEffectSource AlphaMask { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual IGraphicsEffectSource get_AlphaMask();
    public abstract virtual void set_AlphaMask(IGraphicsEffectSource value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("CC31105C-0377-5708-8484-1AD8EE3E554B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BEEB682B-D64C-5C8B-A1FB-332162ED099C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect {
    public bool ClampOutput { get; public set; }
    public float MultiplyAmount { get; public set; }
    public float Offset { get; public set; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public float Source1Amount { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    public float Source2Amount { get; public set; }
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual float get_MultiplyAmount();
    public abstract virtual void set_MultiplyAmount(float value);
    public abstract virtual float get_Offset();
    public abstract virtual void set_Offset(float value);
    public abstract virtual IGraphicsEffectSource get_Source1();
    public abstract virtual void set_Source1(IGraphicsEffectSource value);
    public abstract virtual float get_Source1Amount();
    public abstract virtual void set_Source1Amount(float value);
    public abstract virtual IGraphicsEffectSource get_Source2();
    public abstract virtual void set_Source2(IGraphicsEffectSource value);
    public abstract virtual float get_Source2Amount();
    public abstract virtual void set_Source2Amount(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IAtlasEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IAtlasEffect {
    public Rect PaddingRectangle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Rect SourceRectangle { get; public set; }
    public abstract virtual Rect get_PaddingRectangle();
    public abstract virtual void set_PaddingRectangle(Rect value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual Rect get_SourceRectangle();
    public abstract virtual void set_SourceRectangle(Rect value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("5673248E-7266-5E49-B2AB-2589D5D875C3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IBlendEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IBlendEffect {
    public IGraphicsEffectSource Background { get; public set; }
    public IGraphicsEffectSource Foreground { get; public set; }
    public BlendEffectMode Mode { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Background();
    public abstract virtual void set_Background(IGraphicsEffectSource value);
    public abstract virtual IGraphicsEffectSource get_Foreground();
    public abstract virtual void set_Foreground(IGraphicsEffectSource value);
    public abstract virtual BlendEffectMode get_Mode();
    public abstract virtual void set_Mode(BlendEffectMode value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("31602441-15DB-5B4A-98DD-BA4247548B41")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IBorderEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IBorderEffect {
    public CanvasEdgeBehavior ExtendX { get; public set; }
    public CanvasEdgeBehavior ExtendY { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual CanvasEdgeBehavior get_ExtendX();
    public abstract virtual void set_ExtendX(CanvasEdgeBehavior value);
    public abstract virtual CanvasEdgeBehavior get_ExtendY();
    public abstract virtual void set_ExtendY(CanvasEdgeBehavior value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BECED347-025F-5727-8F7D-498D67DF557E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IBrightnessEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IBrightnessEffect {
    public Vector2 BlackPoint { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Vector2 WhitePoint { get; public set; }
    public abstract virtual Vector2 get_BlackPoint();
    public abstract virtual void set_BlackPoint(Vector2 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual Vector2 get_WhitePoint();
    public abstract virtual void set_WhitePoint(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0EF96F8C-9B5E-4BF0-A399-AAD8CE53DB55")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ICanvasEffect")]
public interface Microsoft.Graphics.Canvas.Effects.ICanvasEffect {
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public abstract virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public abstract virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public abstract virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public abstract virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public abstract virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public abstract virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public abstract virtual bool get_CacheOutput();
    public abstract virtual void set_CacheOutput(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F14B9464-1871-5EAA-9DB6-C0901140E9D3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect {
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public bool Feather { get; public set; }
    public bool InvertAlpha { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float Tolerance { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual Vector4 get_ColorHdr();
    public abstract virtual void set_ColorHdr(Vector4 value);
    public abstract virtual bool get_Feather();
    public abstract virtual void set_Feather(bool value);
    public abstract virtual bool get_InvertAlpha();
    public abstract virtual void set_InvertAlpha(bool value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual float get_Tolerance();
    public abstract virtual void set_Tolerance(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("6E8BBE37-E1E4-5AD0-B98D-940E3213A54E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IColorManagementEffect {
    public CanvasAlphaMode AlphaMode { get; public set; }
    public ColorManagementProfile OutputColorProfile { get; public set; }
    public ColorManagementRenderingIntent OutputRenderingIntent { get; public set; }
    public ColorManagementEffectQuality Quality { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public ColorManagementProfile SourceColorProfile { get; public set; }
    public ColorManagementRenderingIntent SourceRenderingIntent { get; public set; }
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual void set_AlphaMode(CanvasAlphaMode value);
    public abstract virtual ColorManagementProfile get_OutputColorProfile();
    public abstract virtual void set_OutputColorProfile(ColorManagementProfile value);
    public abstract virtual ColorManagementRenderingIntent get_OutputRenderingIntent();
    public abstract virtual void set_OutputRenderingIntent(ColorManagementRenderingIntent value);
    public abstract virtual ColorManagementEffectQuality get_Quality();
    public abstract virtual void set_Quality(ColorManagementEffectQuality value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual ColorManagementProfile get_SourceColorProfile();
    public abstract virtual void set_SourceColorProfile(ColorManagementProfile value);
    public abstract virtual ColorManagementRenderingIntent get_SourceRenderingIntent();
    public abstract virtual void set_SourceRenderingIntent(ColorManagementRenderingIntent value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("31C7AF98-F2D4-55FC-B129-A70736E6DA05")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics {
    public abstract virtual bool IsBestQualitySupported(CanvasDevice device);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("5123A56B-B199-47AB-AEBE-D308044423FE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfile")]
internal interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfile {
    public CanvasColorSpace ColorSpace { get; }
    public ExtendedColorSpace ExtendedColorSpace { get; }
    public Byte[] IccProfile { get; }
    public Nullable`1<ColorManagementSimpleProfile> SimpleProfile { get; }
    public ColorManagementProfileType Type { get; }
    public abstract virtual CanvasColorSpace get_ColorSpace();
    public abstract virtual ExtendedColorSpace get_ExtendedColorSpace();
    public abstract virtual Byte[] get_IccProfile();
    public abstract virtual Nullable`1<ColorManagementSimpleProfile> get_SimpleProfile();
    public abstract virtual ColorManagementProfileType get_Type();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7A0F1C98-94C6-4621-9877-C51A17823EDF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory")]
internal interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory {
    public abstract virtual ColorManagementProfile Create(CanvasColorSpace colorSpace);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("94EEF610-03BD-4E82-9479-62A616BE75F1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics {
    public abstract virtual ColorManagementProfile CreateCustom(Byte[] iccProfile);
    public abstract virtual ColorManagementProfile CreateSimple(ColorManagementSimpleProfile simpleProfile);
    public abstract virtual ColorManagementProfile CreateExtended(ExtendedColorSpace colorSpace);
    public abstract virtual bool IsSupported(ColorManagementProfileType type, CanvasDevice device);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("E6AE54C4-883D-588E-B451-E9EBE3830437")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect {
    public CanvasAlphaMode AlphaMode { get; public set; }
    public bool ClampOutput { get; public set; }
    public Matrix5x4 ColorMatrix { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual void set_AlphaMode(CanvasAlphaMode value);
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual Matrix5x4 get_ColorMatrix();
    public abstract virtual void set_ColorMatrix(Matrix5x4 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("25F942C7-7FEE-518A-BA7B-22A0060AF7F6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IColorSourceEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IColorSourceEffect {
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual Vector4 get_ColorHdr();
    public abstract virtual void set_ColorHdr(Vector4 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F8808C48-CDC7-5DB4-807C-B9344FF71984")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ICompositeEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ICompositeEffect {
    public CanvasComposite Mode { get; public set; }
    public IList`1<IGraphicsEffectSource> Sources { get; }
    public abstract virtual CanvasComposite get_Mode();
    public abstract virtual void set_Mode(CanvasComposite value);
    public abstract virtual IList`1<IGraphicsEffectSource> get_Sources();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("DA8A2B9F-594E-560A-9EAA-1F912408FE79")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IContrastEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IContrastEffect {
    public bool ClampSource { get; public set; }
    public float Contrast { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual bool get_ClampSource();
    public abstract virtual void set_ClampSource(bool value);
    public abstract virtual float get_Contrast();
    public abstract virtual void set_Contrast(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("82961257-A78D-5440-8026-AF57D4A76A9E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect {
    public EffectBorderMode BorderMode { get; public set; }
    public bool ClampOutput { get; public set; }
    public float Divisor { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public int KernelHeight { get; public set; }
    public Single[] KernelMatrix { get; public set; }
    public Vector2 KernelOffset { get; public set; }
    public Vector2 KernelScale { get; public set; }
    public int KernelWidth { get; public set; }
    public float Offset { get; public set; }
    public bool PreserveAlpha { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual float get_Divisor();
    public abstract virtual void set_Divisor(float value);
    public abstract virtual CanvasImageInterpolation get_InterpolationMode();
    public abstract virtual void set_InterpolationMode(CanvasImageInterpolation value);
    public abstract virtual int get_KernelHeight();
    public abstract virtual void set_KernelHeight(int value);
    public abstract virtual Single[] get_KernelMatrix();
    public abstract virtual void set_KernelMatrix(Single[] value);
    public abstract virtual Vector2 get_KernelOffset();
    public abstract virtual void set_KernelOffset(Vector2 value);
    public abstract virtual Vector2 get_KernelScale();
    public abstract virtual void set_KernelScale(Vector2 value);
    public abstract virtual int get_KernelWidth();
    public abstract virtual void set_KernelWidth(int value);
    public abstract virtual float get_Offset();
    public abstract virtual void set_Offset(float value);
    public abstract virtual bool get_PreserveAlpha();
    public abstract virtual void set_PreserveAlpha(bool value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ICropEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ICropEffect {
    public EffectBorderMode BorderMode { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Rect SourceRectangle { get; public set; }
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual Rect get_SourceRectangle();
    public abstract virtual void set_SourceRectangle(Rect value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BE161A9F-43D2-5613-8600-D51E3D7CE288")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect {
    public float CrossFade { get; public set; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    public abstract virtual float get_CrossFade();
    public abstract virtual void set_CrossFade(float value);
    public abstract virtual IGraphicsEffectSource get_Source1();
    public abstract virtual void set_Source1(IGraphicsEffectSource value);
    public abstract virtual IGraphicsEffectSource get_Source2();
    public abstract virtual void set_Source2(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A3B67330-6284-5EF6-99E8-B4B05D2B8BFC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("5D155C4B-0882-506A-A8E1-12E1EAD17F0A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect {
    public float Angle { get; public set; }
    public float BlurAmount { get; public set; }
    public EffectBorderMode BorderMode { get; public set; }
    public EffectOptimization Optimization { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Angle();
    public abstract virtual void set_Angle(float value);
    public abstract virtual float get_BlurAmount();
    public abstract virtual void set_BlurAmount(float value);
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual EffectOptimization get_Optimization();
    public abstract virtual void set_Optimization(EffectOptimization value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7F1F54F9-21B5-5B91-9506-832C536FDDFA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect {
    public bool AlphaDisable { get; public set; }
    public Single[] AlphaTable { get; public set; }
    public bool BlueDisable { get; public set; }
    public Single[] BlueTable { get; public set; }
    public bool ClampOutput { get; public set; }
    public bool GreenDisable { get; public set; }
    public Single[] GreenTable { get; public set; }
    public bool RedDisable { get; public set; }
    public Single[] RedTable { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual bool get_AlphaDisable();
    public abstract virtual void set_AlphaDisable(bool value);
    public abstract virtual Single[] get_AlphaTable();
    public abstract virtual void set_AlphaTable(Single[] value);
    public abstract virtual bool get_BlueDisable();
    public abstract virtual void set_BlueDisable(bool value);
    public abstract virtual Single[] get_BlueTable();
    public abstract virtual void set_BlueTable(Single[] value);
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual bool get_GreenDisable();
    public abstract virtual void set_GreenDisable(bool value);
    public abstract virtual Single[] get_GreenTable();
    public abstract virtual void set_GreenTable(Single[] value);
    public abstract virtual bool get_RedDisable();
    public abstract virtual void set_RedDisable(bool value);
    public abstract virtual Single[] get_RedTable();
    public abstract virtual void set_RedTable(Single[] value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("45F57C50-D4D9-5AF1-8A6B-50378F3498A2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect {
    public float Amount { get; public set; }
    public IGraphicsEffectSource Displacement { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public EffectChannelSelect XChannelSelect { get; public set; }
    public EffectChannelSelect YChannelSelect { get; public set; }
    public abstract virtual float get_Amount();
    public abstract virtual void set_Amount(float value);
    public abstract virtual IGraphicsEffectSource get_Displacement();
    public abstract virtual void set_Displacement(IGraphicsEffectSource value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual EffectChannelSelect get_XChannelSelect();
    public abstract virtual void set_XChannelSelect(EffectChannelSelect value);
    public abstract virtual EffectChannelSelect get_YChannelSelect();
    public abstract virtual void set_YChannelSelect(EffectChannelSelect value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("D501B10B-B445-50F4-8B8F-CDECFCDD1321")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect {
    public float Azimuth { get; public set; }
    public float DiffuseAmount { get; public set; }
    public float Elevation { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Azimuth();
    public abstract virtual void set_Azimuth(float value);
    public abstract virtual float get_DiffuseAmount();
    public abstract virtual void set_DiffuseAmount(float value);
    public abstract virtual float get_Elevation();
    public abstract virtual void set_Elevation(float value);
    public abstract virtual CanvasImageInterpolation get_HeightMapInterpolationMode();
    public abstract virtual void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public abstract virtual Vector2 get_HeightMapKernelSize();
    public abstract virtual void set_HeightMapKernelSize(Vector2 value);
    public abstract virtual float get_HeightMapScale();
    public abstract virtual void set_HeightMapScale(float value);
    public abstract virtual Color get_LightColor();
    public abstract virtual void set_LightColor(Color value);
    public abstract virtual Vector4 get_LightColorHdr();
    public abstract virtual void set_LightColorHdr(Vector4 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A7A828DF-3072-545F-8D75-86C100F03231")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect {
    public float Azimuth { get; public set; }
    public float Elevation { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularExponent { get; public set; }
    public abstract virtual float get_Azimuth();
    public abstract virtual void set_Azimuth(float value);
    public abstract virtual float get_Elevation();
    public abstract virtual void set_Elevation(float value);
    public abstract virtual CanvasImageInterpolation get_HeightMapInterpolationMode();
    public abstract virtual void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public abstract virtual Vector2 get_HeightMapKernelSize();
    public abstract virtual void set_HeightMapKernelSize(Vector2 value);
    public abstract virtual float get_HeightMapScale();
    public abstract virtual void set_HeightMapScale(float value);
    public abstract virtual Color get_LightColor();
    public abstract virtual void set_LightColor(Color value);
    public abstract virtual Vector4 get_LightColorHdr();
    public abstract virtual void set_LightColorHdr(Vector4 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual float get_SpecularAmount();
    public abstract virtual void set_SpecularAmount(float value);
    public abstract virtual float get_SpecularExponent();
    public abstract virtual void set_SpecularExponent(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("636597CD-F94A-55B6-9CF0-694A53D638EA")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect {
    public EffectBorderMode BorderMode { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Vector2 SourceDpi { get; public set; }
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_InterpolationMode();
    public abstract virtual void set_InterpolationMode(CanvasImageInterpolation value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual Vector2 get_SourceDpi();
    public abstract virtual void set_SourceDpi(Vector2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("69F6CF3A-F38F-5A88-974A-29390B957E5C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect {
    public CanvasAlphaMode AlphaMode { get; public set; }
    public float Amount { get; public set; }
    public float BlurAmount { get; public set; }
    public EdgeDetectionEffectMode Mode { get; public set; }
    public bool OverlayEdges { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual void set_AlphaMode(CanvasAlphaMode value);
    public abstract virtual float get_Amount();
    public abstract virtual void set_Amount(float value);
    public abstract virtual float get_BlurAmount();
    public abstract virtual void set_BlurAmount(float value);
    public abstract virtual EdgeDetectionEffectMode get_Mode();
    public abstract virtual void set_Mode(EdgeDetectionEffectMode value);
    public abstract virtual bool get_OverlayEdges();
    public abstract virtual void set_OverlayEdges(bool value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7AF06B86-2C45-49C8-8F44-E15A6D4FA44E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D")]
internal interface Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D {
    public CanvasDevice Device { get; }
    public abstract virtual CanvasDevice get_Device();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3CB83559-216A-4BCA-9BB6-E233C5AD2C48")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics {
    public abstract virtual EffectTransferTable3D CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int sizeB, int sizeG, int sizeR);
    public abstract virtual EffectTransferTable3D CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int sizeB, int sizeG, int sizeR, DirectXPixelFormat format);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("617BFF35-481C-5596-ABA5-00A162349D7B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IEmbossEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IEmbossEffect {
    public float Amount { get; public set; }
    public float Angle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Amount();
    public abstract virtual void set_Amount(float value);
    public abstract virtual float get_Angle();
    public abstract virtual void set_Angle(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("B9E20A03-2232-5FD3-B408-15784B79DBB0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IExposureEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IExposureEffect {
    public float Exposure { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Exposure();
    public abstract virtual void set_Exposure(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("B4576B6B-6C3E-534A-8576-D46DF4FCE93D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect {
    public float AlphaAmplitude { get; public set; }
    public bool AlphaDisable { get; public set; }
    public float AlphaExponent { get; public set; }
    public float AlphaOffset { get; public set; }
    public float BlueAmplitude { get; public set; }
    public bool BlueDisable { get; public set; }
    public float BlueExponent { get; public set; }
    public float BlueOffset { get; public set; }
    public bool ClampOutput { get; public set; }
    public float GreenAmplitude { get; public set; }
    public bool GreenDisable { get; public set; }
    public float GreenExponent { get; public set; }
    public float GreenOffset { get; public set; }
    public float RedAmplitude { get; public set; }
    public bool RedDisable { get; public set; }
    public float RedExponent { get; public set; }
    public float RedOffset { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_AlphaAmplitude();
    public abstract virtual void set_AlphaAmplitude(float value);
    public abstract virtual bool get_AlphaDisable();
    public abstract virtual void set_AlphaDisable(bool value);
    public abstract virtual float get_AlphaExponent();
    public abstract virtual void set_AlphaExponent(float value);
    public abstract virtual float get_AlphaOffset();
    public abstract virtual void set_AlphaOffset(float value);
    public abstract virtual float get_BlueAmplitude();
    public abstract virtual void set_BlueAmplitude(float value);
    public abstract virtual bool get_BlueDisable();
    public abstract virtual void set_BlueDisable(bool value);
    public abstract virtual float get_BlueExponent();
    public abstract virtual void set_BlueExponent(float value);
    public abstract virtual float get_BlueOffset();
    public abstract virtual void set_BlueOffset(float value);
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual float get_GreenAmplitude();
    public abstract virtual void set_GreenAmplitude(float value);
    public abstract virtual bool get_GreenDisable();
    public abstract virtual void set_GreenDisable(bool value);
    public abstract virtual float get_GreenExponent();
    public abstract virtual void set_GreenExponent(float value);
    public abstract virtual float get_GreenOffset();
    public abstract virtual void set_GreenOffset(float value);
    public abstract virtual float get_RedAmplitude();
    public abstract virtual void set_RedAmplitude(float value);
    public abstract virtual bool get_RedDisable();
    public abstract virtual void set_RedDisable(bool value);
    public abstract virtual float get_RedExponent();
    public abstract virtual void set_RedExponent(float value);
    public abstract virtual float get_RedOffset();
    public abstract virtual void set_RedOffset(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A82EC394-6734-5830-9123-2C82B27DD3C0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect {
    public float BlurAmount { get; public set; }
    public EffectBorderMode BorderMode { get; public set; }
    public EffectOptimization Optimization { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_BlurAmount();
    public abstract virtual void set_BlurAmount(float value);
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual EffectOptimization get_Optimization();
    public abstract virtual void set_Optimization(EffectOptimization value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("78E13B83-0638-53F8-B0B3-5B0B320A9AD2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("2004FAAC-663E-5DF4-B4CD-A5AFBFD9341F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffect {
    public HdrToneMapEffectDisplayMode DisplayMode { get; public set; }
    public float InputMaxLuminance { get; public set; }
    public float OutputMaxLuminance { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual HdrToneMapEffectDisplayMode get_DisplayMode();
    public abstract virtual void set_DisplayMode(HdrToneMapEffectDisplayMode value);
    public abstract virtual float get_InputMaxLuminance();
    public abstract virtual void set_InputMaxLuminance(float value);
    public abstract virtual float get_OutputMaxLuminance();
    public abstract virtual void set_OutputMaxLuminance(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0181F02F-0A7E-55E1-8D2D-42AB99739B27")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.IHdrToneMapEffectStatics {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7F90BE14-267E-5088-BC36-2E0AAD869B52")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect {
    public float Clarity { get; public set; }
    public float Highlights { get; public set; }
    public float MaskBlurAmount { get; public set; }
    public float Shadows { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public bool SourceIsLinearGamma { get; public set; }
    public abstract virtual float get_Clarity();
    public abstract virtual void set_Clarity(float value);
    public abstract virtual float get_Highlights();
    public abstract virtual void set_Highlights(float value);
    public abstract virtual float get_MaskBlurAmount();
    public abstract virtual void set_MaskBlurAmount(float value);
    public abstract virtual float get_Shadows();
    public abstract virtual void set_Shadows(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual bool get_SourceIsLinearGamma();
    public abstract virtual void set_SourceIsLinearGamma(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C172EBF2-E35F-58AE-AD2C-561ECEAF2694")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IHueRotationEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IHueRotationEffect {
    public float Angle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Angle();
    public abstract virtual void set_Angle(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("1E97C12C-B743-53D0-88C4-8435272B0A3D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public EffectHueColorSpace SourceColorSpace { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual EffectHueColorSpace get_SourceColorSpace();
    public abstract virtual void set_SourceColorSpace(EffectHueColorSpace value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("D4ADCDFC-0F60-524D-936A-7F2736AD33D8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IInvertEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IInvertEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("43D27AD0-8937-5FDB-876A-4E91CB47540C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect {
    public bool AlphaDisable { get; public set; }
    public float AlphaOffset { get; public set; }
    public float AlphaSlope { get; public set; }
    public bool BlueDisable { get; public set; }
    public float BlueOffset { get; public set; }
    public float BlueSlope { get; public set; }
    public bool ClampOutput { get; public set; }
    public bool GreenDisable { get; public set; }
    public float GreenOffset { get; public set; }
    public float GreenSlope { get; public set; }
    public bool RedDisable { get; public set; }
    public float RedOffset { get; public set; }
    public float RedSlope { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual bool get_AlphaDisable();
    public abstract virtual void set_AlphaDisable(bool value);
    public abstract virtual float get_AlphaOffset();
    public abstract virtual void set_AlphaOffset(float value);
    public abstract virtual float get_AlphaSlope();
    public abstract virtual void set_AlphaSlope(float value);
    public abstract virtual bool get_BlueDisable();
    public abstract virtual void set_BlueDisable(bool value);
    public abstract virtual float get_BlueOffset();
    public abstract virtual void set_BlueOffset(float value);
    public abstract virtual float get_BlueSlope();
    public abstract virtual void set_BlueSlope(float value);
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual bool get_GreenDisable();
    public abstract virtual void set_GreenDisable(bool value);
    public abstract virtual float get_GreenOffset();
    public abstract virtual void set_GreenOffset(float value);
    public abstract virtual float get_GreenSlope();
    public abstract virtual void set_GreenSlope(float value);
    public abstract virtual bool get_RedDisable();
    public abstract virtual void set_RedDisable(bool value);
    public abstract virtual float get_RedOffset();
    public abstract virtual void set_RedOffset(float value);
    public abstract virtual float get_RedSlope();
    public abstract virtual void set_RedSlope(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("22364900-AC51-5BD3-8BD2-D626FC9A65F9")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("FF065FDB-62C8-5808-921E-49EFA43A3D34")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IMorphologyEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IMorphologyEffect {
    public int Height { get; public set; }
    public MorphologyEffectMode Mode { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public int Width { get; public set; }
    public abstract virtual int get_Height();
    public abstract virtual void set_Height(int value);
    public abstract virtual MorphologyEffectMode get_Mode();
    public abstract virtual void set_Mode(MorphologyEffectMode value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual int get_Width();
    public abstract virtual void set_Width(int value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.InvertEffect")]
[InvertEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IInvertEffect")]
public class Microsoft.Graphics.Canvas.Effects.InvertEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_InvertEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IInvertEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_InvertEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal InvertEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IInvertEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_InvertEffect();
    public static InvertEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(InvertEffect x, InvertEffect y);
    public static bool op_Inequality(InvertEffect x, InvertEffect y);
    public sealed virtual bool Equals(InvertEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("94B6AD75-C540-51B8-A9D1-544174ADC68D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IOpacityEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IOpacityEffect {
    public float Opacity { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Opacity();
    public abstract virtual void set_Opacity(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("91A7CDE3-B9B7-5437-8878-FB2E14100E6D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("099F3299-9B0A-5ED3-B044-4A6FC96F8362")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect {
    public Rect OpaqueRectangle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual Rect get_OpaqueRectangle();
    public abstract virtual void set_OpaqueRectangle(Rect value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("FC8C3C31-FA96-45E2-8B72-1741C65CEE8E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect {
    public int MaxSamplerOffset { get; public set; }
    public IDictionary`2<string, object> Properties { get; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public EffectBorderMode Source1BorderMode { get; public set; }
    public CanvasImageInterpolation Source1Interpolation { get; public set; }
    public SamplerCoordinateMapping Source1Mapping { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    public EffectBorderMode Source2BorderMode { get; public set; }
    public CanvasImageInterpolation Source2Interpolation { get; public set; }
    public SamplerCoordinateMapping Source2Mapping { get; public set; }
    public IGraphicsEffectSource Source3 { get; public set; }
    public EffectBorderMode Source3BorderMode { get; public set; }
    public CanvasImageInterpolation Source3Interpolation { get; public set; }
    public SamplerCoordinateMapping Source3Mapping { get; public set; }
    public IGraphicsEffectSource Source4 { get; public set; }
    public EffectBorderMode Source4BorderMode { get; public set; }
    public CanvasImageInterpolation Source4Interpolation { get; public set; }
    public SamplerCoordinateMapping Source4Mapping { get; public set; }
    public IGraphicsEffectSource Source5 { get; public set; }
    public EffectBorderMode Source5BorderMode { get; public set; }
    public CanvasImageInterpolation Source5Interpolation { get; public set; }
    public SamplerCoordinateMapping Source5Mapping { get; public set; }
    public IGraphicsEffectSource Source6 { get; public set; }
    public EffectBorderMode Source6BorderMode { get; public set; }
    public CanvasImageInterpolation Source6Interpolation { get; public set; }
    public SamplerCoordinateMapping Source6Mapping { get; public set; }
    public IGraphicsEffectSource Source7 { get; public set; }
    public EffectBorderMode Source7BorderMode { get; public set; }
    public CanvasImageInterpolation Source7Interpolation { get; public set; }
    public SamplerCoordinateMapping Source7Mapping { get; public set; }
    public IGraphicsEffectSource Source8 { get; public set; }
    public EffectBorderMode Source8BorderMode { get; public set; }
    public CanvasImageInterpolation Source8Interpolation { get; public set; }
    public SamplerCoordinateMapping Source8Mapping { get; public set; }
    public abstract virtual bool IsSupported(CanvasDevice device);
    public abstract virtual int get_MaxSamplerOffset();
    public abstract virtual void set_MaxSamplerOffset(int value);
    public abstract virtual IDictionary`2<string, object> get_Properties();
    public abstract virtual IGraphicsEffectSource get_Source1();
    public abstract virtual void set_Source1(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source1BorderMode();
    public abstract virtual void set_Source1BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source1Interpolation();
    public abstract virtual void set_Source1Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source1Mapping();
    public abstract virtual void set_Source1Mapping(SamplerCoordinateMapping value);
    public abstract virtual IGraphicsEffectSource get_Source2();
    public abstract virtual void set_Source2(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source2BorderMode();
    public abstract virtual void set_Source2BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source2Interpolation();
    public abstract virtual void set_Source2Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source2Mapping();
    public abstract virtual void set_Source2Mapping(SamplerCoordinateMapping value);
    public abstract virtual IGraphicsEffectSource get_Source3();
    public abstract virtual void set_Source3(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source3BorderMode();
    public abstract virtual void set_Source3BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source3Interpolation();
    public abstract virtual void set_Source3Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source3Mapping();
    public abstract virtual void set_Source3Mapping(SamplerCoordinateMapping value);
    public abstract virtual IGraphicsEffectSource get_Source4();
    public abstract virtual void set_Source4(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source4BorderMode();
    public abstract virtual void set_Source4BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source4Interpolation();
    public abstract virtual void set_Source4Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source4Mapping();
    public abstract virtual void set_Source4Mapping(SamplerCoordinateMapping value);
    public abstract virtual IGraphicsEffectSource get_Source5();
    public abstract virtual void set_Source5(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source5BorderMode();
    public abstract virtual void set_Source5BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source5Interpolation();
    public abstract virtual void set_Source5Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source5Mapping();
    public abstract virtual void set_Source5Mapping(SamplerCoordinateMapping value);
    public abstract virtual IGraphicsEffectSource get_Source6();
    public abstract virtual void set_Source6(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source6BorderMode();
    public abstract virtual void set_Source6BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source6Interpolation();
    public abstract virtual void set_Source6Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source6Mapping();
    public abstract virtual void set_Source6Mapping(SamplerCoordinateMapping value);
    public abstract virtual IGraphicsEffectSource get_Source7();
    public abstract virtual void set_Source7(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source7BorderMode();
    public abstract virtual void set_Source7BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source7Interpolation();
    public abstract virtual void set_Source7Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source7Mapping();
    public abstract virtual void set_Source7Mapping(SamplerCoordinateMapping value);
    public abstract virtual IGraphicsEffectSource get_Source8();
    public abstract virtual void set_Source8(IGraphicsEffectSource value);
    public abstract virtual EffectBorderMode get_Source8BorderMode();
    public abstract virtual void set_Source8BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_Source8Interpolation();
    public abstract virtual void set_Source8Interpolation(CanvasImageInterpolation value);
    public abstract virtual SamplerCoordinateMapping get_Source8Mapping();
    public abstract virtual void set_Source8Mapping(SamplerCoordinateMapping value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("9D1727E5-489D-4ABC-B129-5361E3534AF4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory")]
internal interface Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory {
    public abstract virtual PixelShaderEffect Create(Byte[] shaderCode);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("6CCE09EC-F847-5661-AF4B-531DD3DD7D6E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect {
    public float DiffuseAmount { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_DiffuseAmount();
    public abstract virtual void set_DiffuseAmount(float value);
    public abstract virtual CanvasImageInterpolation get_HeightMapInterpolationMode();
    public abstract virtual void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public abstract virtual Vector2 get_HeightMapKernelSize();
    public abstract virtual void set_HeightMapKernelSize(Vector2 value);
    public abstract virtual float get_HeightMapScale();
    public abstract virtual void set_HeightMapScale(float value);
    public abstract virtual Color get_LightColor();
    public abstract virtual void set_LightColor(Color value);
    public abstract virtual Vector4 get_LightColorHdr();
    public abstract virtual void set_LightColorHdr(Vector4 value);
    public abstract virtual Vector3 get_LightPosition();
    public abstract virtual void set_LightPosition(Vector3 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("EC8AFE9B-8501-5286-A43C-1AFFF7420AD6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect {
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularExponent { get; public set; }
    public abstract virtual CanvasImageInterpolation get_HeightMapInterpolationMode();
    public abstract virtual void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public abstract virtual Vector2 get_HeightMapKernelSize();
    public abstract virtual void set_HeightMapKernelSize(Vector2 value);
    public abstract virtual float get_HeightMapScale();
    public abstract virtual void set_HeightMapScale(float value);
    public abstract virtual Color get_LightColor();
    public abstract virtual void set_LightColor(Color value);
    public abstract virtual Vector4 get_LightColorHdr();
    public abstract virtual void set_LightColorHdr(Vector4 value);
    public abstract virtual Vector3 get_LightPosition();
    public abstract virtual void set_LightPosition(Vector3 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual float get_SpecularAmount();
    public abstract virtual void set_SpecularAmount(float value);
    public abstract virtual float get_SpecularExponent();
    public abstract virtual void set_SpecularExponent(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("2F631A3B-C89A-507C-9756-299B61434FA4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IPosterizeEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IPosterizeEffect {
    public int BlueValueCount { get; public set; }
    public int GreenValueCount { get; public set; }
    public int RedValueCount { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual int get_BlueValueCount();
    public abstract virtual void set_BlueValueCount(int value);
    public abstract virtual int get_GreenValueCount();
    public abstract virtual void set_GreenValueCount(int value);
    public abstract virtual int get_RedValueCount();
    public abstract virtual void set_RedValueCount(int value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7CAEADC6-9EB3-5895-B876-F485C9574847")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect {
    public EffectHueColorSpace OutputColorSpace { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual EffectHueColorSpace get_OutputColorSpace();
    public abstract virtual void set_OutputColorSpace(EffectHueColorSpace value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F85A5ED7-7212-57A6-B357-61038961C58D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ISaturationEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ISaturationEffect {
    public float Saturation { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Saturation();
    public abstract virtual void set_Saturation(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7522AE90-BEC2-512C-BCC0-4D6A97E3ED34")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IScaleEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IScaleEffect {
    public EffectBorderMode BorderMode { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public Vector2 Scale { get; public set; }
    public float Sharpness { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual Vector2 get_CenterPoint();
    public abstract virtual void set_CenterPoint(Vector2 value);
    public abstract virtual CanvasImageInterpolation get_InterpolationMode();
    public abstract virtual void set_InterpolationMode(CanvasImageInterpolation value);
    public abstract virtual Vector2 get_Scale();
    public abstract virtual void set_Scale(Vector2 value);
    public abstract virtual float get_Sharpness();
    public abstract virtual void set_Sharpness(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F933471F-A7AF-5521-BE79-B0DA22976CFF")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ISepiaEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ISepiaEffect {
    public CanvasAlphaMode AlphaMode { get; public set; }
    public float Intensity { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual void set_AlphaMode(CanvasAlphaMode value);
    public abstract virtual float get_Intensity();
    public abstract virtual void set_Intensity(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3947C621-78DA-5489-9927-BE655F4576E2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IShadowEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IShadowEffect {
    public float BlurAmount { get; public set; }
    public EffectOptimization Optimization { get; public set; }
    public Color ShadowColor { get; public set; }
    public Vector4 ShadowColorHdr { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_BlurAmount();
    public abstract virtual void set_BlurAmount(float value);
    public abstract virtual EffectOptimization get_Optimization();
    public abstract virtual void set_Optimization(EffectOptimization value);
    public abstract virtual Color get_ShadowColor();
    public abstract virtual void set_ShadowColor(Color value);
    public abstract virtual Vector4 get_ShadowColorHdr();
    public abstract virtual void set_ShadowColorHdr(Vector4 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7EFEF0A1-7578-5F62-8364-46145674EF7E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ISharpenEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ISharpenEffect {
    public float Amount { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float Threshold { get; public set; }
    public abstract virtual float get_Amount();
    public abstract virtual void set_Amount(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual float get_Threshold();
    public abstract virtual void set_Threshold(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect {
    public float DiffuseAmount { get; public set; }
    public float Focus { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public Vector3 LightTarget { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_DiffuseAmount();
    public abstract virtual void set_DiffuseAmount(float value);
    public abstract virtual float get_Focus();
    public abstract virtual void set_Focus(float value);
    public abstract virtual CanvasImageInterpolation get_HeightMapInterpolationMode();
    public abstract virtual void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public abstract virtual Vector2 get_HeightMapKernelSize();
    public abstract virtual void set_HeightMapKernelSize(Vector2 value);
    public abstract virtual float get_HeightMapScale();
    public abstract virtual void set_HeightMapScale(float value);
    public abstract virtual Color get_LightColor();
    public abstract virtual void set_LightColor(Color value);
    public abstract virtual Vector4 get_LightColorHdr();
    public abstract virtual void set_LightColorHdr(Vector4 value);
    public abstract virtual Vector3 get_LightPosition();
    public abstract virtual void set_LightPosition(Vector3 value);
    public abstract virtual Vector3 get_LightTarget();
    public abstract virtual void set_LightTarget(Vector3 value);
    public abstract virtual float get_LimitingConeAngle();
    public abstract virtual void set_LimitingConeAngle(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("83AE4CD0-80AA-5783-8572-F15E5F85329E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect {
    public float Focus { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public Vector3 LightTarget { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularExponent { get; public set; }
    public abstract virtual float get_Focus();
    public abstract virtual void set_Focus(float value);
    public abstract virtual CanvasImageInterpolation get_HeightMapInterpolationMode();
    public abstract virtual void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public abstract virtual Vector2 get_HeightMapKernelSize();
    public abstract virtual void set_HeightMapKernelSize(Vector2 value);
    public abstract virtual float get_HeightMapScale();
    public abstract virtual void set_HeightMapScale(float value);
    public abstract virtual Color get_LightColor();
    public abstract virtual void set_LightColor(Color value);
    public abstract virtual Vector4 get_LightColorHdr();
    public abstract virtual void set_LightColorHdr(Vector4 value);
    public abstract virtual Vector3 get_LightPosition();
    public abstract virtual void set_LightPosition(Vector3 value);
    public abstract virtual Vector3 get_LightTarget();
    public abstract virtual void set_LightTarget(Vector3 value);
    public abstract virtual float get_LimitingConeAngle();
    public abstract virtual void set_LimitingConeAngle(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual float get_SpecularAmount();
    public abstract virtual void set_SpecularAmount(float value);
    public abstract virtual float get_SpecularExponent();
    public abstract virtual void set_SpecularExponent(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("965FC262-2EBA-59E6-935F-2389CB5A305A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IStraightenEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IStraightenEffect {
    public float Angle { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public bool MaintainSize { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Angle();
    public abstract virtual void set_Angle(float value);
    public abstract virtual CanvasImageInterpolation get_InterpolationMode();
    public abstract virtual void set_InterpolationMode(CanvasImageInterpolation value);
    public abstract virtual bool get_MaintainSize();
    public abstract virtual void set_MaintainSize(bool value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("EF09C6E0-9437-53F7-B7B4-B53C79A0BC37")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect {
    public CanvasAlphaMode AlphaMode { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public EffectTransferTable3D Table { get; public set; }
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual void set_AlphaMode(CanvasAlphaMode value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual EffectTransferTable3D get_Table();
    public abstract virtual void set_Table(EffectTransferTable3D value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BF0B63B6-FE77-5198-A2A1-3FB80C268B8F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITableTransferEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITableTransferEffect {
    public bool AlphaDisable { get; public set; }
    public Single[] AlphaTable { get; public set; }
    public bool BlueDisable { get; public set; }
    public Single[] BlueTable { get; public set; }
    public bool ClampOutput { get; public set; }
    public bool GreenDisable { get; public set; }
    public Single[] GreenTable { get; public set; }
    public bool RedDisable { get; public set; }
    public Single[] RedTable { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual bool get_AlphaDisable();
    public abstract virtual void set_AlphaDisable(bool value);
    public abstract virtual Single[] get_AlphaTable();
    public abstract virtual void set_AlphaTable(Single[] value);
    public abstract virtual bool get_BlueDisable();
    public abstract virtual void set_BlueDisable(bool value);
    public abstract virtual Single[] get_BlueTable();
    public abstract virtual void set_BlueTable(Single[] value);
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual bool get_GreenDisable();
    public abstract virtual void set_GreenDisable(bool value);
    public abstract virtual Single[] get_GreenTable();
    public abstract virtual void set_GreenTable(Single[] value);
    public abstract virtual bool get_RedDisable();
    public abstract virtual void set_RedDisable(bool value);
    public abstract virtual Single[] get_RedTable();
    public abstract virtual void set_RedTable(Single[] value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("8AE43E02-2619-5D78-8980-4ED569549BD8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public float Temperature { get; public set; }
    public float Tint { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual float get_Temperature();
    public abstract virtual void set_Temperature(float value);
    public abstract virtual float get_Tint();
    public abstract virtual void set_Tint(float value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("78A809CB-1154-5AD6-A880-E3A175772815")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITileEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITileEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public Rect SourceRectangle { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual Rect get_SourceRectangle();
    public abstract virtual void set_SourceRectangle(Rect value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("729A21EA-C61E-5308-9EAE-D638AA1F5B8C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITintEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITintEffect {
    public bool ClampOutput { get; public set; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual bool get_ClampOutput();
    public abstract virtual void set_ClampOutput(bool value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual Vector4 get_ColorHdr();
    public abstract virtual void set_ColorHdr(Vector4 value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("65E31771-4BAF-5C8C-93F4-3B874E29F68D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITintEffectStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.ITintEffectStatics {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("4467D118-33E7-5B1A-87C2-0F1F0497353D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITransform2DEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITransform2DEffect {
    public EffectBorderMode BorderMode { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public float Sharpness { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_InterpolationMode();
    public abstract virtual void set_InterpolationMode(CanvasImageInterpolation value);
    public abstract virtual float get_Sharpness();
    public abstract virtual void set_Sharpness(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual Matrix3x2 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix3x2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITransform3DEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITransform3DEffect {
    public EffectBorderMode BorderMode { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Matrix4x4 TransformMatrix { get; public set; }
    public abstract virtual EffectBorderMode get_BorderMode();
    public abstract virtual void set_BorderMode(EffectBorderMode value);
    public abstract virtual CanvasImageInterpolation get_InterpolationMode();
    public abstract virtual void set_InterpolationMode(CanvasImageInterpolation value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
    public abstract virtual Matrix4x4 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix4x4 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("1CB1B33D-20E9-564B-856E-37E9FA1D0016")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect {
    public Vector2 Frequency { get; public set; }
    public TurbulenceEffectNoise Noise { get; public set; }
    public int Octaves { get; public set; }
    public Vector2 Offset { get; public set; }
    public int Seed { get; public set; }
    public Vector2 Size { get; public set; }
    public bool Tileable { get; public set; }
    public abstract virtual Vector2 get_Frequency();
    public abstract virtual void set_Frequency(Vector2 value);
    public abstract virtual TurbulenceEffectNoise get_Noise();
    public abstract virtual void set_Noise(TurbulenceEffectNoise value);
    public abstract virtual int get_Octaves();
    public abstract virtual void set_Octaves(int value);
    public abstract virtual Vector2 get_Offset();
    public abstract virtual void set_Offset(Vector2 value);
    public abstract virtual int get_Seed();
    public abstract virtual void set_Seed(int value);
    public abstract virtual Vector2 get_Size();
    public abstract virtual void set_Size(Vector2 value);
    public abstract virtual bool get_Tileable();
    public abstract virtual void set_Tileable(bool value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("73098BB4-DCF1-5403-AF44-3344D2982D40")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect {
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("574D0F9F-EEC7-5989-AC53-135868CF5E0C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IVignetteEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IVignetteEffect {
    public float Amount { get; public set; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public float Curve { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_Amount();
    public abstract virtual void set_Amount(float value);
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual Vector4 get_ColorHdr();
    public abstract virtual void set_ColorHdr(Vector4 value);
    public abstract virtual float get_Curve();
    public abstract virtual void set_Curve(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0B0B945C-96F7-56B4-8317-01DE629FC904")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect")]
internal interface Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect {
    public float InputWhiteLevel { get; public set; }
    public float OutputWhiteLevel { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public abstract virtual float get_InputWhiteLevel();
    public abstract virtual void set_InputWhiteLevel(float value);
    public abstract virtual float get_OutputWhiteLevel();
    public abstract virtual void set_OutputWhiteLevel(float value);
    public abstract virtual IGraphicsEffectSource get_Source();
    public abstract virtual void set_Source(IGraphicsEffectSource value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("58DACBF8-637A-5DA7-9457-1EEEDF5A191C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStatics")]
internal interface Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffectStatics {
    public bool IsSupported { get; }
    public abstract virtual bool get_IsSupported();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.LinearTransferEffect")]
[LinearTransferEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect")]
public class Microsoft.Graphics.Canvas.Effects.LinearTransferEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_LinearTransferEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_LinearTransferEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AlphaDisable { get; public set; }
    public float AlphaOffset { get; public set; }
    public float AlphaSlope { get; public set; }
    public bool BlueDisable { get; public set; }
    public float BlueOffset { get; public set; }
    public float BlueSlope { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public bool GreenDisable { get; public set; }
    public float GreenOffset { get; public set; }
    public float GreenSlope { get; public set; }
    public string Name { get; public set; }
    public bool RedDisable { get; public set; }
    public float RedOffset { get; public set; }
    public float RedSlope { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal LinearTransferEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ILinearTransferEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_LinearTransferEffect();
    public static LinearTransferEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(LinearTransferEffect x, LinearTransferEffect y);
    public static bool op_Inequality(LinearTransferEffect x, LinearTransferEffect y);
    public sealed virtual bool Equals(LinearTransferEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public float get_AlphaOffset();
    public void set_AlphaOffset(float value);
    public float get_AlphaSlope();
    public void set_AlphaSlope(float value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public float get_BlueOffset();
    public void set_BlueOffset(float value);
    public float get_BlueSlope();
    public void set_BlueSlope(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public float get_GreenOffset();
    public void set_GreenOffset(float value);
    public float get_GreenSlope();
    public void set_GreenSlope(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public float get_RedOffset();
    public void set_RedOffset(float value);
    public float get_RedSlope();
    public void set_RedSlope(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect")]
[LuminanceToAlphaEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect")]
public class Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal LuminanceToAlphaEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ILuminanceToAlphaEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_LuminanceToAlphaEffect();
    public static LuminanceToAlphaEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(LuminanceToAlphaEffect x, LuminanceToAlphaEffect y);
    public static bool op_Inequality(LuminanceToAlphaEffect x, LuminanceToAlphaEffect y);
    public sealed virtual bool Equals(LuminanceToAlphaEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Effects.Matrix5x4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Effects.Matrix5x4,Microsoft.Graphics.Canvas.Effects.Matrix5x4>")]
public class Microsoft.Graphics.Canvas.Effects.Matrix5x4 : ValueType {
    public float M11;
    public float M12;
    public float M13;
    public float M14;
    public float M21;
    public float M22;
    public float M23;
    public float M24;
    public float M31;
    public float M32;
    public float M33;
    public float M34;
    public float M41;
    public float M42;
    public float M43;
    public float M44;
    public float M51;
    public float M52;
    public float M53;
    public float M54;
    public Matrix5x4(float _M11, float _M12, float _M13, float _M14, float _M21, float _M22, float _M23, float _M24, float _M31, float _M32, float _M33, float _M34, float _M41, float _M42, float _M43, float _M44, float _M51, float _M52, float _M53, float _M54);
    public static bool op_Equality(Matrix5x4 x, Matrix5x4 y);
    public static bool op_Inequality(Matrix5x4 x, Matrix5x4 y);
    public sealed virtual bool Equals(Matrix5x4 other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.MorphologyEffect")]
[MorphologyEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IMorphologyEffect")]
public class Microsoft.Graphics.Canvas.Effects.MorphologyEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_MorphologyEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IMorphologyEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_MorphologyEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public int Height { get; public set; }
    public MorphologyEffectMode Mode { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public int Width { get; public set; }
    internal MorphologyEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IMorphologyEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_MorphologyEffect();
    public static MorphologyEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(MorphologyEffect x, MorphologyEffect y);
    public static bool op_Inequality(MorphologyEffect x, MorphologyEffect y);
    public sealed virtual bool Equals(MorphologyEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public int get_Height();
    public void set_Height(int value);
    public MorphologyEffectMode get_Mode();
    public void set_Mode(MorphologyEffectMode value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public int get_Width();
    public void set_Width(int value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode>")]
public enum Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode : Enum {
    public int value__;
    public static MorphologyEffectMode Erode;
    public static MorphologyEffectMode Dilate;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.OpacityEffect")]
[OpacityEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IOpacityEffect")]
public class Microsoft.Graphics.Canvas.Effects.OpacityEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_OpacityEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IOpacityEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_OpacityEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics { get; }
    public static bool IsSupported { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public float Opacity { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal OpacityEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IOpacityEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_OpacityEffect();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IOpacityEffectStatics();
    public static bool get_IsSupported();
    public static OpacityEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(OpacityEffect x, OpacityEffect y);
    public static bool op_Inequality(OpacityEffect x, OpacityEffect y);
    public sealed virtual bool Equals(OpacityEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_Opacity();
    public void set_Opacity(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect")]
[OpacityMetadataEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect")]
public class Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public Rect OpaqueRectangle { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal OpacityMetadataEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IOpacityMetadataEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_OpacityMetadataEffect();
    public static OpacityMetadataEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(OpacityMetadataEffect x, OpacityMetadataEffect y);
    public static bool op_Inequality(OpacityMetadataEffect x, OpacityMetadataEffect y);
    public sealed virtual bool Equals(OpacityMetadataEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public Rect get_OpaqueRectangle();
    public void set_OpaqueRectangle(Rect value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.PixelShaderEffect")]
[PixelShaderEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect")]
public class Microsoft.Graphics.Canvas.Effects.PixelShaderEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public int MaxSamplerOffset { get; public set; }
    public string Name { get; public set; }
    public IDictionary`2<string, object> Properties { get; }
    public IGraphicsEffectSource Source1 { get; public set; }
    public EffectBorderMode Source1BorderMode { get; public set; }
    public CanvasImageInterpolation Source1Interpolation { get; public set; }
    public SamplerCoordinateMapping Source1Mapping { get; public set; }
    public IGraphicsEffectSource Source2 { get; public set; }
    public EffectBorderMode Source2BorderMode { get; public set; }
    public CanvasImageInterpolation Source2Interpolation { get; public set; }
    public SamplerCoordinateMapping Source2Mapping { get; public set; }
    public IGraphicsEffectSource Source3 { get; public set; }
    public EffectBorderMode Source3BorderMode { get; public set; }
    public CanvasImageInterpolation Source3Interpolation { get; public set; }
    public SamplerCoordinateMapping Source3Mapping { get; public set; }
    public IGraphicsEffectSource Source4 { get; public set; }
    public EffectBorderMode Source4BorderMode { get; public set; }
    public CanvasImageInterpolation Source4Interpolation { get; public set; }
    public SamplerCoordinateMapping Source4Mapping { get; public set; }
    public IGraphicsEffectSource Source5 { get; public set; }
    public EffectBorderMode Source5BorderMode { get; public set; }
    public CanvasImageInterpolation Source5Interpolation { get; public set; }
    public SamplerCoordinateMapping Source5Mapping { get; public set; }
    public IGraphicsEffectSource Source6 { get; public set; }
    public EffectBorderMode Source6BorderMode { get; public set; }
    public CanvasImageInterpolation Source6Interpolation { get; public set; }
    public SamplerCoordinateMapping Source6Mapping { get; public set; }
    public IGraphicsEffectSource Source7 { get; public set; }
    public EffectBorderMode Source7BorderMode { get; public set; }
    public CanvasImageInterpolation Source7Interpolation { get; public set; }
    public SamplerCoordinateMapping Source7Mapping { get; public set; }
    public IGraphicsEffectSource Source8 { get; public set; }
    public EffectBorderMode Source8BorderMode { get; public set; }
    public CanvasImageInterpolation Source8Interpolation { get; public set; }
    public SamplerCoordinateMapping Source8Mapping { get; public set; }
    public PixelShaderEffect(Byte[] shaderCode);
    internal PixelShaderEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IPixelShaderEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IPixelShaderEffectFactory();
    public static PixelShaderEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PixelShaderEffect x, PixelShaderEffect y);
    public static bool op_Inequality(PixelShaderEffect x, PixelShaderEffect y);
    public sealed virtual bool Equals(PixelShaderEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool IsSupported(CanvasDevice device);
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public int get_MaxSamplerOffset();
    public void set_MaxSamplerOffset(int value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IDictionary`2<string, object> get_Properties();
    public IGraphicsEffectSource get_Source1();
    public void set_Source1(IGraphicsEffectSource value);
    public EffectBorderMode get_Source1BorderMode();
    public void set_Source1BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source1Interpolation();
    public void set_Source1Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source1Mapping();
    public void set_Source1Mapping(SamplerCoordinateMapping value);
    public IGraphicsEffectSource get_Source2();
    public void set_Source2(IGraphicsEffectSource value);
    public EffectBorderMode get_Source2BorderMode();
    public void set_Source2BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source2Interpolation();
    public void set_Source2Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source2Mapping();
    public void set_Source2Mapping(SamplerCoordinateMapping value);
    public IGraphicsEffectSource get_Source3();
    public void set_Source3(IGraphicsEffectSource value);
    public EffectBorderMode get_Source3BorderMode();
    public void set_Source3BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source3Interpolation();
    public void set_Source3Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source3Mapping();
    public void set_Source3Mapping(SamplerCoordinateMapping value);
    public IGraphicsEffectSource get_Source4();
    public void set_Source4(IGraphicsEffectSource value);
    public EffectBorderMode get_Source4BorderMode();
    public void set_Source4BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source4Interpolation();
    public void set_Source4Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source4Mapping();
    public void set_Source4Mapping(SamplerCoordinateMapping value);
    public IGraphicsEffectSource get_Source5();
    public void set_Source5(IGraphicsEffectSource value);
    public EffectBorderMode get_Source5BorderMode();
    public void set_Source5BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source5Interpolation();
    public void set_Source5Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source5Mapping();
    public void set_Source5Mapping(SamplerCoordinateMapping value);
    public IGraphicsEffectSource get_Source6();
    public void set_Source6(IGraphicsEffectSource value);
    public EffectBorderMode get_Source6BorderMode();
    public void set_Source6BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source6Interpolation();
    public void set_Source6Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source6Mapping();
    public void set_Source6Mapping(SamplerCoordinateMapping value);
    public IGraphicsEffectSource get_Source7();
    public void set_Source7(IGraphicsEffectSource value);
    public EffectBorderMode get_Source7BorderMode();
    public void set_Source7BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source7Interpolation();
    public void set_Source7Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source7Mapping();
    public void set_Source7Mapping(SamplerCoordinateMapping value);
    public IGraphicsEffectSource get_Source8();
    public void set_Source8(IGraphicsEffectSource value);
    public EffectBorderMode get_Source8BorderMode();
    public void set_Source8BorderMode(EffectBorderMode value);
    public CanvasImageInterpolation get_Source8Interpolation();
    public void set_Source8Interpolation(CanvasImageInterpolation value);
    public SamplerCoordinateMapping get_Source8Mapping();
    public void set_Source8Mapping(SamplerCoordinateMapping value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect")]
[PointDiffuseEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect")]
public class Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float DiffuseAmount { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal PointDiffuseEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IPointDiffuseEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_PointDiffuseEffect();
    public static PointDiffuseEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PointDiffuseEffect x, PointDiffuseEffect y);
    public static bool op_Inequality(PointDiffuseEffect x, PointDiffuseEffect y);
    public sealed virtual bool Equals(PointDiffuseEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_DiffuseAmount();
    public void set_DiffuseAmount(float value);
    public CanvasImageInterpolation get_HeightMapInterpolationMode();
    public void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public Vector2 get_HeightMapKernelSize();
    public void set_HeightMapKernelSize(Vector2 value);
    public float get_HeightMapScale();
    public void set_HeightMapScale(float value);
    public Color get_LightColor();
    public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    public Vector3 get_LightPosition();
    public void set_LightPosition(Vector3 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.PointSpecularEffect")]
[PointSpecularEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect")]
public class Microsoft.Graphics.Canvas.Effects.PointSpecularEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_PointSpecularEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_PointSpecularEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularExponent { get; public set; }
    internal PointSpecularEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IPointSpecularEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_PointSpecularEffect();
    public static PointSpecularEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PointSpecularEffect x, PointSpecularEffect y);
    public static bool op_Inequality(PointSpecularEffect x, PointSpecularEffect y);
    public sealed virtual bool Equals(PointSpecularEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public CanvasImageInterpolation get_HeightMapInterpolationMode();
    public void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public Vector2 get_HeightMapKernelSize();
    public void set_HeightMapKernelSize(Vector2 value);
    public float get_HeightMapScale();
    public void set_HeightMapScale(float value);
    public Color get_LightColor();
    public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    public Vector3 get_LightPosition();
    public void set_LightPosition(Vector3 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public float get_SpecularAmount();
    public void set_SpecularAmount(float value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.PosterizeEffect")]
[PosterizeEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IPosterizeEffect")]
public class Microsoft.Graphics.Canvas.Effects.PosterizeEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_PosterizeEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IPosterizeEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_PosterizeEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public int BlueValueCount { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public int GreenValueCount { get; public set; }
    public string Name { get; public set; }
    public int RedValueCount { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal PosterizeEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IPosterizeEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_PosterizeEffect();
    public static PosterizeEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PosterizeEffect x, PosterizeEffect y);
    public static bool op_Inequality(PosterizeEffect x, PosterizeEffect y);
    public sealed virtual bool Equals(PosterizeEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public int get_BlueValueCount();
    public void set_BlueValueCount(int value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public int get_GreenValueCount();
    public void set_GreenValueCount(int value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public int get_RedValueCount();
    public void set_RedValueCount(int value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.PremultiplyEffect")]
[PremultiplyEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect")]
public class Microsoft.Graphics.Canvas.Effects.PremultiplyEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_PremultiplyEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_PremultiplyEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal PremultiplyEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IPremultiplyEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_PremultiplyEffect();
    public static PremultiplyEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(PremultiplyEffect x, PremultiplyEffect y);
    public static bool op_Inequality(PremultiplyEffect x, PremultiplyEffect y);
    public sealed virtual bool Equals(PremultiplyEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.RgbToHueEffect")]
[RgbToHueEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect")]
public class Microsoft.Graphics.Canvas.Effects.RgbToHueEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_RgbToHueEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_RgbToHueEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public EffectHueColorSpace OutputColorSpace { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal RgbToHueEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IRgbToHueEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_RgbToHueEffect();
    public static RgbToHueEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(RgbToHueEffect x, RgbToHueEffect y);
    public static bool op_Inequality(RgbToHueEffect x, RgbToHueEffect y);
    public sealed virtual bool Equals(RgbToHueEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public EffectHueColorSpace get_OutputColorSpace();
    public void set_OutputColorSpace(EffectHueColorSpace value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping>")]
public enum Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping : Enum {
    public int value__;
    public static SamplerCoordinateMapping Unknown;
    public static SamplerCoordinateMapping OneToOne;
    public static SamplerCoordinateMapping Offset;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.SaturationEffect")]
[SaturationEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ISaturationEffect")]
public class Microsoft.Graphics.Canvas.Effects.SaturationEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_SaturationEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ISaturationEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_SaturationEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public float Saturation { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal SaturationEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ISaturationEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_SaturationEffect();
    public static SaturationEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SaturationEffect x, SaturationEffect y);
    public static bool op_Inequality(SaturationEffect x, SaturationEffect y);
    public sealed virtual bool Equals(SaturationEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_Saturation();
    public void set_Saturation(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ScaleEffect")]
[ScaleEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IScaleEffect")]
public class Microsoft.Graphics.Canvas.Effects.ScaleEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ScaleEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IScaleEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ScaleEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Vector2 CenterPoint { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public string Name { get; public set; }
    public Vector2 Scale { get; public set; }
    public float Sharpness { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal ScaleEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IScaleEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ScaleEffect();
    public static ScaleEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ScaleEffect x, ScaleEffect y);
    public static bool op_Inequality(ScaleEffect x, ScaleEffect y);
    public sealed virtual bool Equals(ScaleEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public Vector2 get_CenterPoint();
    public void set_CenterPoint(Vector2 value);
    public CanvasImageInterpolation get_InterpolationMode();
    public void set_InterpolationMode(CanvasImageInterpolation value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public Vector2 get_Scale();
    public void set_Scale(Vector2 value);
    public float get_Sharpness();
    public void set_Sharpness(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.SepiaEffect")]
[SepiaEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ISepiaEffect")]
public class Microsoft.Graphics.Canvas.Effects.SepiaEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_SepiaEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ISepiaEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_SepiaEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Intensity { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal SepiaEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ISepiaEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_SepiaEffect();
    public static SepiaEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SepiaEffect x, SepiaEffect y);
    public static bool op_Inequality(SepiaEffect x, SepiaEffect y);
    public sealed virtual bool Equals(SepiaEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public void set_AlphaMode(CanvasAlphaMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_Intensity();
    public void set_Intensity(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.ShadowEffect")]
[ShadowEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IShadowEffect")]
public class Microsoft.Graphics.Canvas.Effects.ShadowEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ShadowEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IShadowEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ShadowEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float BlurAmount { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public EffectOptimization Optimization { get; public set; }
    public Color ShadowColor { get; public set; }
    public Vector4 ShadowColorHdr { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal ShadowEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IShadowEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ShadowEffect();
    public static ShadowEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(ShadowEffect x, ShadowEffect y);
    public static bool op_Inequality(ShadowEffect x, ShadowEffect y);
    public sealed virtual bool Equals(ShadowEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_BlurAmount();
    public void set_BlurAmount(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public EffectOptimization get_Optimization();
    public void set_Optimization(EffectOptimization value);
    public Color get_ShadowColor();
    public void set_ShadowColor(Color value);
    public Vector4 get_ShadowColorHdr();
    public void set_ShadowColorHdr(Vector4 value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.SharpenEffect")]
[SharpenEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ISharpenEffect")]
public class Microsoft.Graphics.Canvas.Effects.SharpenEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_SharpenEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ISharpenEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_SharpenEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Amount { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float Threshold { get; public set; }
    internal SharpenEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ISharpenEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_SharpenEffect();
    public static SharpenEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SharpenEffect x, SharpenEffect y);
    public static bool op_Inequality(SharpenEffect x, SharpenEffect y);
    public sealed virtual bool Equals(SharpenEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Amount();
    public void set_Amount(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public float get_Threshold();
    public void set_Threshold(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect")]
[SpotDiffuseEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect")]
public class Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float DiffuseAmount { get; public set; }
    public float Focus { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public Vector3 LightTarget { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal SpotDiffuseEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ISpotDiffuseEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_SpotDiffuseEffect();
    public static SpotDiffuseEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SpotDiffuseEffect x, SpotDiffuseEffect y);
    public static bool op_Inequality(SpotDiffuseEffect x, SpotDiffuseEffect y);
    public sealed virtual bool Equals(SpotDiffuseEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_DiffuseAmount();
    public void set_DiffuseAmount(float value);
    public float get_Focus();
    public void set_Focus(float value);
    public CanvasImageInterpolation get_HeightMapInterpolationMode();
    public void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public Vector2 get_HeightMapKernelSize();
    public void set_HeightMapKernelSize(Vector2 value);
    public float get_HeightMapScale();
    public void set_HeightMapScale(float value);
    public Color get_LightColor();
    public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    public Vector3 get_LightPosition();
    public void set_LightPosition(Vector3 value);
    public Vector3 get_LightTarget();
    public void set_LightTarget(Vector3 value);
    public float get_LimitingConeAngle();
    public void set_LimitingConeAngle(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect")]
[SpotSpecularEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect")]
public class Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float Focus { get; public set; }
    public CanvasImageInterpolation HeightMapInterpolationMode { get; public set; }
    public Vector2 HeightMapKernelSize { get; public set; }
    public float HeightMapScale { get; public set; }
    public Color LightColor { get; public set; }
    public Vector4 LightColorHdr { get; public set; }
    public Vector3 LightPosition { get; public set; }
    public Vector3 LightTarget { get; public set; }
    public float LimitingConeAngle { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float SpecularAmount { get; public set; }
    public float SpecularExponent { get; public set; }
    internal SpotSpecularEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ISpotSpecularEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_SpotSpecularEffect();
    public static SpotSpecularEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(SpotSpecularEffect x, SpotSpecularEffect y);
    public static bool op_Inequality(SpotSpecularEffect x, SpotSpecularEffect y);
    public sealed virtual bool Equals(SpotSpecularEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_Focus();
    public void set_Focus(float value);
    public CanvasImageInterpolation get_HeightMapInterpolationMode();
    public void set_HeightMapInterpolationMode(CanvasImageInterpolation value);
    public Vector2 get_HeightMapKernelSize();
    public void set_HeightMapKernelSize(Vector2 value);
    public float get_HeightMapScale();
    public void set_HeightMapScale(float value);
    public Color get_LightColor();
    public void set_LightColor(Color value);
    public Vector4 get_LightColorHdr();
    public void set_LightColorHdr(Vector4 value);
    public Vector3 get_LightPosition();
    public void set_LightPosition(Vector3 value);
    public Vector3 get_LightTarget();
    public void set_LightTarget(Vector3 value);
    public float get_LimitingConeAngle();
    public void set_LimitingConeAngle(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public float get_SpecularAmount();
    public void set_SpecularAmount(float value);
    public float get_SpecularExponent();
    public void set_SpecularExponent(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.StraightenEffect")]
[StraightenEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IStraightenEffect")]
public class Microsoft.Graphics.Canvas.Effects.StraightenEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_StraightenEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IStraightenEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_StraightenEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Angle { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public bool MaintainSize { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal StraightenEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IStraightenEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_StraightenEffect();
    public static StraightenEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(StraightenEffect x, StraightenEffect y);
    public static bool op_Inequality(StraightenEffect x, StraightenEffect y);
    public sealed virtual bool Equals(StraightenEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Angle();
    public void set_Angle(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public CanvasImageInterpolation get_InterpolationMode();
    public void set_InterpolationMode(CanvasImageInterpolation value);
    public bool get_MaintainSize();
    public void set_MaintainSize(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect")]
[TableTransfer3DEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect")]
public class Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public EffectTransferTable3D Table { get; public set; }
    internal TableTransfer3DEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITableTransfer3DEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_TableTransfer3DEffect();
    public static TableTransfer3DEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(TableTransfer3DEffect x, TableTransfer3DEffect y);
    public static bool op_Inequality(TableTransfer3DEffect x, TableTransfer3DEffect y);
    public sealed virtual bool Equals(TableTransfer3DEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public CanvasAlphaMode get_AlphaMode();
    public void set_AlphaMode(CanvasAlphaMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public EffectTransferTable3D get_Table();
    public void set_Table(EffectTransferTable3D value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.TableTransferEffect")]
[TableTransferEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITableTransferEffect")]
public class Microsoft.Graphics.Canvas.Effects.TableTransferEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_TableTransferEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITableTransferEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_TableTransferEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public bool AlphaDisable { get; public set; }
    public Single[] AlphaTable { get; public set; }
    public bool BlueDisable { get; public set; }
    public Single[] BlueTable { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public bool GreenDisable { get; public set; }
    public Single[] GreenTable { get; public set; }
    public string Name { get; public set; }
    public bool RedDisable { get; public set; }
    public Single[] RedTable { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal TableTransferEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITableTransferEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_TableTransferEffect();
    public static TableTransferEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(TableTransferEffect x, TableTransferEffect y);
    public static bool op_Inequality(TableTransferEffect x, TableTransferEffect y);
    public sealed virtual bool Equals(TableTransferEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public bool get_AlphaDisable();
    public void set_AlphaDisable(bool value);
    public Single[] get_AlphaTable();
    public void set_AlphaTable(Single[] value);
    public bool get_BlueDisable();
    public void set_BlueDisable(bool value);
    public Single[] get_BlueTable();
    public void set_BlueTable(Single[] value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public bool get_GreenDisable();
    public void set_GreenDisable(bool value);
    public Single[] get_GreenTable();
    public void set_GreenTable(Single[] value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public bool get_RedDisable();
    public void set_RedDisable(bool value);
    public Single[] get_RedTable();
    public void set_RedTable(Single[] value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect")]
[TemperatureAndTintEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect")]
public class Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public float Temperature { get; public set; }
    public float Tint { get; public set; }
    internal TemperatureAndTintEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITemperatureAndTintEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_TemperatureAndTintEffect();
    public static TemperatureAndTintEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(TemperatureAndTintEffect x, TemperatureAndTintEffect y);
    public static bool op_Inequality(TemperatureAndTintEffect x, TemperatureAndTintEffect y);
    public sealed virtual bool Equals(TemperatureAndTintEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public float get_Temperature();
    public void set_Temperature(float value);
    public float get_Tint();
    public void set_Tint(float value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.TileEffect")]
[TileEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITileEffect")]
public class Microsoft.Graphics.Canvas.Effects.TileEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_TileEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITileEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_TileEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Rect SourceRectangle { get; public set; }
    internal TileEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITileEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_TileEffect();
    public static TileEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(TileEffect x, TileEffect y);
    public static bool op_Inequality(TileEffect x, TileEffect y);
    public sealed virtual bool Equals(TileEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public Rect get_SourceRectangle();
    public void set_SourceRectangle(Rect value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.TintEffect")]
[TintEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITintEffect")]
public class Microsoft.Graphics.Canvas.Effects.TintEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_TintEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ITintEffectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITintEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_TintEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITintEffectStatics { get; }
    public static bool IsSupported { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public bool ClampOutput { get; public set; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal TintEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITintEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_TintEffect();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITintEffectStatics();
    public static bool get_IsSupported();
    public static TintEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(TintEffect x, TintEffect y);
    public static bool op_Inequality(TintEffect x, TintEffect y);
    public sealed virtual bool Equals(TintEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public bool get_ClampOutput();
    public void set_ClampOutput(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Vector4 get_ColorHdr();
    public void set_ColorHdr(Vector4 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.Transform2DEffect")]
[Transform2DEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITransform2DEffect")]
public class Microsoft.Graphics.Canvas.Effects.Transform2DEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_Transform2DEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITransform2DEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_Transform2DEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public string Name { get; public set; }
    public float Sharpness { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    internal Transform2DEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITransform2DEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_Transform2DEffect();
    public static Transform2DEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Transform2DEffect x, Transform2DEffect y);
    public static bool op_Inequality(Transform2DEffect x, Transform2DEffect y);
    public sealed virtual bool Equals(Transform2DEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public CanvasImageInterpolation get_InterpolationMode();
    public void set_InterpolationMode(CanvasImageInterpolation value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_Sharpness();
    public void set_Sharpness(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public Matrix3x2 get_TransformMatrix();
    public void set_TransformMatrix(Matrix3x2 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.Transform3DEffect")]
[Transform3DEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITransform3DEffect")]
public class Microsoft.Graphics.Canvas.Effects.Transform3DEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_Transform3DEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITransform3DEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_Transform3DEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public EffectBorderMode BorderMode { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public CanvasImageInterpolation InterpolationMode { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    public Matrix4x4 TransformMatrix { get; public set; }
    internal Transform3DEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITransform3DEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_Transform3DEffect();
    public static Transform3DEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(Transform3DEffect x, Transform3DEffect y);
    public static bool op_Inequality(Transform3DEffect x, Transform3DEffect y);
    public sealed virtual bool Equals(Transform3DEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public EffectBorderMode get_BorderMode();
    public void set_BorderMode(EffectBorderMode value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public CanvasImageInterpolation get_InterpolationMode();
    public void set_InterpolationMode(CanvasImageInterpolation value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    public Matrix4x4 get_TransformMatrix();
    public void set_TransformMatrix(Matrix4x4 value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.TurbulenceEffect")]
[TurbulenceEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect")]
public class Microsoft.Graphics.Canvas.Effects.TurbulenceEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_TurbulenceEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_TurbulenceEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Vector2 Frequency { get; public set; }
    public string Name { get; public set; }
    public TurbulenceEffectNoise Noise { get; public set; }
    public int Octaves { get; public set; }
    public Vector2 Offset { get; public set; }
    public int Seed { get; public set; }
    public Vector2 Size { get; public set; }
    public bool Tileable { get; public set; }
    internal TurbulenceEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ITurbulenceEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_TurbulenceEffect();
    public static TurbulenceEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(TurbulenceEffect x, TurbulenceEffect y);
    public static bool op_Inequality(TurbulenceEffect x, TurbulenceEffect y);
    public sealed virtual bool Equals(TurbulenceEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public Vector2 get_Frequency();
    public void set_Frequency(Vector2 value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public TurbulenceEffectNoise get_Noise();
    public void set_Noise(TurbulenceEffectNoise value);
    public int get_Octaves();
    public void set_Octaves(int value);
    public Vector2 get_Offset();
    public void set_Offset(Vector2 value);
    public int get_Seed();
    public void set_Seed(int value);
    public Vector2 get_Size();
    public void set_Size(Vector2 value);
    public bool get_Tileable();
    public void set_Tileable(bool value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise>")]
public enum Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise : Enum {
    public int value__;
    public static TurbulenceEffectNoise FractalSum;
    public static TurbulenceEffectNoise Turbulence;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect")]
[UnPremultiplyEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect")]
public class Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal UnPremultiplyEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IUnPremultiplyEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_UnPremultiplyEffect();
    public static UnPremultiplyEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(UnPremultiplyEffect x, UnPremultiplyEffect y);
    public static bool op_Inequality(UnPremultiplyEffect x, UnPremultiplyEffect y);
    public sealed virtual bool Equals(UnPremultiplyEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.VignetteEffect")]
[VignetteEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IVignetteEffect")]
public class Microsoft.Graphics.Canvas.Effects.VignetteEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_VignetteEffect;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IVignetteEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_VignetteEffect { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Amount { get; public set; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public Color Color { get; public set; }
    public Vector4 ColorHdr { get; public set; }
    public float Curve { get; public set; }
    public string Name { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal VignetteEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IVignetteEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_VignetteEffect();
    public static VignetteEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(VignetteEffect x, VignetteEffect y);
    public static bool op_Inequality(VignetteEffect x, VignetteEffect y);
    public sealed virtual bool Equals(VignetteEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public float get_Amount();
    public void set_Amount(float value);
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Vector4 get_ColorHdr();
    public void set_ColorHdr(Vector4 value);
    public float get_Curve();
    public void set_Curve(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect")]
[WhiteLevelAdjustmentEffectRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Effects.IWhiteLevelAdjustmentEffect")]
public class Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Effects_IGraphicsEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffectStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasImage { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Effects_IGraphicsEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffectStatics { get; }
    public static bool IsSupported { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Nullable`1<CanvasBufferPrecision> BufferPrecision { get; public set; }
    public bool CacheOutput { get; public set; }
    public float InputWhiteLevel { get; public set; }
    public string Name { get; public set; }
    public float OutputWhiteLevel { get; public set; }
    public IGraphicsEffectSource Source { get; public set; }
    internal WhiteLevelAdjustmentEffect(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_ICanvasEffect();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasImage();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffectSource();
    private IObjectReference Make___objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private IObjectReference get__objRef_global__Windows_Graphics_Effects_IGraphicsEffect();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_WhiteLevelAdjustmentEffect();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Effects_IWhiteLevelAdjustmentEffectStatics();
    public static bool get_IsSupported();
    public static WhiteLevelAdjustmentEffect FromAbi(IntPtr thisPtr);
    public static bool op_Equality(WhiteLevelAdjustmentEffect x, WhiteLevelAdjustmentEffect y);
    public static bool op_Inequality(WhiteLevelAdjustmentEffect x, WhiteLevelAdjustmentEffect y);
    public sealed virtual bool Equals(WhiteLevelAdjustmentEffect other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void InvalidateSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, UInt32 sourceIndex, Rect invalidRectangle);
    public sealed virtual Rect[] GetInvalidRectangles(ICanvasResourceCreatorWithDpi resourceCreator);
    public sealed virtual Rect GetRequiredSourceRectangle(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect sourceEffect, UInt32 sourceIndex, Rect sourceBounds);
    public sealed virtual Rect[] GetRequiredSourceRectangles(ICanvasResourceCreatorWithDpi resourceCreator, Rect outputRectangle, ICanvasEffect[] sourceEffects, UInt32[] sourceIndices, Rect[] sourceBounds);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public sealed virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public sealed virtual Nullable`1<CanvasBufferPrecision> get_BufferPrecision();
    public sealed virtual void set_BufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public sealed virtual bool get_CacheOutput();
    public sealed virtual void set_CacheOutput(bool value);
    public float get_InputWhiteLevel();
    public void set_InputWhiteLevel(float value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public float get_OutputWhiteLevel();
    public void set_OutputWhiteLevel(float value);
    public IGraphicsEffectSource get_Source();
    public void set_Source(IGraphicsEffectSource value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasArcSize>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasArcSize : Enum {
    public int value__;
    public static CanvasArcSize Small;
    public static CanvasArcSize Large;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry")]
[CanvasCachedGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry")]
public class Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometryStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometry { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometryStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    internal CanvasCachedGeometry(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometry();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasCachedGeometryStatics();
    public static CanvasCachedGeometry CreateFill(CanvasGeometry geometry);
    public static CanvasCachedGeometry CreateFill(CanvasGeometry geometry, float flatteningTolerance);
    public static CanvasCachedGeometry CreateStroke(CanvasGeometry geometry, float strokeWidth);
    public static CanvasCachedGeometry CreateStroke(CanvasGeometry geometry, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public static CanvasCachedGeometry CreateStroke(CanvasGeometry geometry, float strokeWidth, CanvasStrokeStyle strokeStyle, float flatteningTolerance);
    public static CanvasCachedGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasCachedGeometry x, CanvasCachedGeometry y);
    public static bool op_Inequality(CanvasCachedGeometry x, CanvasCachedGeometry y);
    public sealed virtual bool Equals(CanvasCachedGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public CanvasDevice get_Device();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle : Enum {
    public int value__;
    public static CanvasCapStyle Flat;
    public static CanvasCapStyle Square;
    public static CanvasCapStyle Round;
    public static CanvasCapStyle Triangle;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasDashStyle : Enum {
    public int value__;
    public static CanvasDashStyle Solid;
    public static CanvasDashStyle Dash;
    public static CanvasDashStyle Dot;
    public static CanvasDashStyle DashDot;
    public static CanvasDashStyle DashDotDot;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasFigureFill : Enum {
    public int value__;
    public static CanvasFigureFill Default;
    public static CanvasFigureFill DoesNotAffectFills;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasFigureLoop>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasFigureLoop : Enum {
    public int value__;
    public static CanvasFigureLoop Open;
    public static CanvasFigureLoop Closed;
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasFigureSegmentOptions>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasFigureSegmentOptions : Enum {
    public UInt32 value__;
    public static CanvasFigureSegmentOptions None;
    public static CanvasFigureSegmentOptions ForceUnstroked;
    public static CanvasFigureSegmentOptions ForceRoundLineJoin;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination : Enum {
    public int value__;
    public static CanvasFilledRegionDetermination Alternate;
    public static CanvasFilledRegionDetermination Winding;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.CanvasGeometry")]
[CanvasGeometryRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry")]
public class Microsoft.Graphics.Canvas.Geometry.CanvasGeometry : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_IGeometrySource2D;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGeometryStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGeometry { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Windows_Graphics_IGeometrySource2D { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGeometryStatics { get; }
    public static float DefaultFlatteningTolerance { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    internal CanvasGeometry(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGeometry();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Windows_Graphics_IGeometrySource2D();
    private IObjectReference get__objRef_global__Windows_Graphics_IGeometrySource2D();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGeometryStatics();
    public static CanvasGeometry CreateRectangle(ICanvasResourceCreator resourceCreator, Rect rect);
    public static CanvasGeometry CreateRectangle(ICanvasResourceCreator resourceCreator, float x, float y, float w, float h);
    public static CanvasGeometry CreateRoundedRectangle(ICanvasResourceCreator resourceCreator, Rect rect, float radiusX, float radiusY);
    public static CanvasGeometry CreateRoundedRectangle(ICanvasResourceCreator resourceCreator, float x, float y, float w, float h, float radiusX, float radiusY);
    public static CanvasGeometry CreateEllipse(ICanvasResourceCreator resourceCreator, Vector2 centerPoint, float radiusX, float radiusY);
    public static CanvasGeometry CreateEllipse(ICanvasResourceCreator resourceCreator, float x, float y, float radiusX, float radiusY);
    public static CanvasGeometry CreateCircle(ICanvasResourceCreator resourceCreator, Vector2 centerPoint, float radius);
    public static CanvasGeometry CreateCircle(ICanvasResourceCreator resourceCreator, float x, float y, float radius);
    public static CanvasGeometry CreatePath(CanvasPathBuilder pathBuilder);
    public static CanvasGeometry CreatePolygon(ICanvasResourceCreator resourceCreator, Vector2[] points);
    public static CanvasGeometry CreateGroup(ICanvasResourceCreator resourceCreator, CanvasGeometry[] geometries);
    public static CanvasGeometry CreateGroup(ICanvasResourceCreator resourceCreator, CanvasGeometry[] geometries, CanvasFilledRegionDetermination filledRegionDetermination);
    public static CanvasGeometry CreateText(CanvasTextLayout textLayout);
    public static CanvasGeometry CreateGlyphRun(ICanvasResourceCreator resourceCreator, Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, CanvasTextMeasuringMode measuringMode, CanvasGlyphOrientation glyphOrientation);
    public static CanvasGeometry CreateInk(ICanvasResourceCreator resourceCreator, IEnumerable`1<InkStroke> inkStrokes);
    public static CanvasGeometry CreateInk(ICanvasResourceCreator resourceCreator, IEnumerable`1<InkStroke> inkStrokes, Matrix3x2 transform, float flatteningTolerance);
    public static float ComputeFlatteningTolerance(float dpi, float maximumZoomFactor);
    public static float ComputeFlatteningTolerance(float dpi, float maximumZoomFactor, Matrix3x2 expectedGeometryTransform);
    public static float get_DefaultFlatteningTolerance();
    public static CanvasGeometry FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasGeometry x, CanvasGeometry y);
    public static bool op_Inequality(CanvasGeometry x, CanvasGeometry y);
    public sealed virtual bool Equals(CanvasGeometry other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasGeometry CombineWith(CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, CanvasGeometryCombine combine);
    public CanvasGeometry CombineWith(CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, CanvasGeometryCombine combine, float flatteningTolerance);
    public CanvasGeometry Stroke(float strokeWidth);
    public CanvasGeometry Stroke(float strokeWidth, CanvasStrokeStyle strokeStyle);
    public CanvasGeometry Stroke(float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    public CanvasGeometry Outline();
    public CanvasGeometry Outline(Matrix3x2 transform, float flatteningTolerance);
    public CanvasGeometry Simplify(CanvasGeometrySimplification simplification);
    public CanvasGeometry Simplify(CanvasGeometrySimplification simplification, Matrix3x2 transform, float flatteningTolerance);
    public CanvasGeometry Transform(Matrix3x2 transform);
    public CanvasGeometryRelation CompareWith(CanvasGeometry otherGeometry);
    public CanvasGeometryRelation CompareWith(CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, float flatteningTolerance);
    public float ComputeArea();
    public float ComputeArea(Matrix3x2 transform, float flatteningTolerance);
    public float ComputePathLength();
    public float ComputePathLength(Matrix3x2 transform, float flatteningTolerance);
    public Vector2 ComputePointOnPath(float distance);
    public Vector2 ComputePointOnPath(float distance, Vector2& tangent);
    public Vector2 ComputePointOnPath(float length, Matrix3x2 transform, float flatteningTolerance, Vector2& tangent);
    public bool FillContainsPoint(Vector2 point);
    public bool FillContainsPoint(Vector2 point, Matrix3x2 transform, float flatteningTolerance);
    public Rect ComputeBounds();
    public Rect ComputeBounds(Matrix3x2 transform);
    public Rect ComputeStrokeBounds(float strokeWidth);
    public Rect ComputeStrokeBounds(float strokeWidth, CanvasStrokeStyle strokeStyle);
    public Rect ComputeStrokeBounds(float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    public bool StrokeContainsPoint(Vector2 point, float strokeWidth);
    public bool StrokeContainsPoint(Vector2 point, float strokeWidth, CanvasStrokeStyle strokeStyle);
    public bool StrokeContainsPoint(Vector2 point, float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    public CanvasTriangleVertices[] Tessellate();
    public CanvasTriangleVertices[] Tessellate(Matrix3x2 transform, float flatteningTolerance);
    public void SendPathTo(ICanvasPathReceiver streamReader);
    public sealed virtual void Dispose();
    public CanvasDevice get_Device();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasGeometryCombine : Enum {
    public int value__;
    public static CanvasGeometryCombine Union;
    public static CanvasGeometryCombine Intersect;
    public static CanvasGeometryCombine Xor;
    public static CanvasGeometryCombine Exclude;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasGeometryRelation : Enum {
    public int value__;
    public static CanvasGeometryRelation Disjoint;
    public static CanvasGeometryRelation Contained;
    public static CanvasGeometryRelation Contains;
    public static CanvasGeometryRelation Overlap;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasGeometrySimplification : Enum {
    public int value__;
    public static CanvasGeometrySimplification CubicsAndLines;
    public static CanvasGeometrySimplification Lines;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh")]
[CanvasGradientMeshRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh")]
public class Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMesh { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public CanvasGradientMeshPatch[] Patches { get; }
    public CanvasGradientMesh(ICanvasResourceCreator resourceCreator, CanvasGradientMeshPatch[] patchElements);
    internal CanvasGradientMesh(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMesh();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasGradientMeshStatics();
    public static CanvasGradientMeshPatch CreateCoonsPatch(Vector2[] points, Vector4[] colors, CanvasGradientMeshPatchEdge[] edges);
    public static CanvasGradientMeshPatch CreateTensorPatch(Vector2[] points, Vector4[] colors, CanvasGradientMeshPatchEdge[] edges);
    public static CanvasGradientMesh FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasGradientMesh x, CanvasGradientMesh y);
    public static bool op_Inequality(CanvasGradientMesh x, CanvasGradientMesh y);
    public sealed virtual bool Equals(CanvasGradientMesh other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Rect GetBounds(ICanvasResourceCreator resourceCreator);
    public Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public sealed virtual void Dispose();
    public CanvasDevice get_Device();
    public CanvasGradientMeshPatch[] get_Patches();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch;struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector4;f4;f4;f4;f4);struct(Windows.Foundation.Numerics.Vector4;f4;f4;f4;f4);struct(Windows.Foundation.Numerics.Vector4;f4;f4;f4;f4);struct(Windows.Foundation.Numerics.Vector4;f4;f4;f4;f4);enum(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge;i4);enum(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge;i4);enum(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge;i4);enum(Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge;i4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch,Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch>")]
public class Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatch : ValueType {
    public Vector2 Point00;
    public Vector2 Point01;
    public Vector2 Point02;
    public Vector2 Point03;
    public Vector2 Point10;
    public Vector2 Point11;
    public Vector2 Point12;
    public Vector2 Point13;
    public Vector2 Point20;
    public Vector2 Point21;
    public Vector2 Point22;
    public Vector2 Point23;
    public Vector2 Point30;
    public Vector2 Point31;
    public Vector2 Point32;
    public Vector2 Point33;
    public Vector4 Color00;
    public Vector4 Color03;
    public Vector4 Color30;
    public Vector4 Color33;
    public CanvasGradientMeshPatchEdge Edge00To03;
    public CanvasGradientMeshPatchEdge Edge03To33;
    public CanvasGradientMeshPatchEdge Edge33To30;
    public CanvasGradientMeshPatchEdge Edge30To00;
    public CanvasGradientMeshPatch(Vector2 _Point00, Vector2 _Point01, Vector2 _Point02, Vector2 _Point03, Vector2 _Point10, Vector2 _Point11, Vector2 _Point12, Vector2 _Point13, Vector2 _Point20, Vector2 _Point21, Vector2 _Point22, Vector2 _Point23, Vector2 _Point30, Vector2 _Point31, Vector2 _Point32, Vector2 _Point33, Vector4 _Color00, Vector4 _Color03, Vector4 _Color30, Vector4 _Color33, CanvasGradientMeshPatchEdge _Edge00To03, CanvasGradientMeshPatchEdge _Edge03To33, CanvasGradientMeshPatchEdge _Edge33To30, CanvasGradientMeshPatchEdge _Edge30To00);
    public static bool op_Equality(CanvasGradientMeshPatch x, CanvasGradientMeshPatch y);
    public static bool op_Inequality(CanvasGradientMeshPatch x, CanvasGradientMeshPatch y);
    public sealed virtual bool Equals(CanvasGradientMeshPatch other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasGradientMeshPatchEdge : Enum {
    public int value__;
    public static CanvasGradientMeshPatchEdge Aliased;
    public static CanvasGradientMeshPatchEdge Antialiased;
    public static CanvasGradientMeshPatchEdge AliasedAndInflated;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin : Enum {
    public int value__;
    public static CanvasLineJoin Miter;
    public static CanvasLineJoin Bevel;
    public static CanvasLineJoin Round;
    public static CanvasLineJoin MiterOrBevel;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder")]
[CanvasPathBuilderRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder")]
public class Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilderFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilder { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilderFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasPathBuilder(ICanvasResourceCreator resourceCreator);
    internal CanvasPathBuilder(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilder();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasPathBuilderFactory();
    public static CanvasPathBuilder FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasPathBuilder x, CanvasPathBuilder y);
    public static bool op_Inequality(CanvasPathBuilder x, CanvasPathBuilder y);
    public sealed virtual bool Equals(CanvasPathBuilder other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void BeginFigure(Vector2 startPoint, CanvasFigureFill figureFill);
    public void BeginFigure(Vector2 startPoint);
    public void BeginFigure(float startX, float startY, CanvasFigureFill figureFill);
    public void BeginFigure(float startX, float startY);
    public void AddArc(Vector2 endPoint, float radiusX, float radiusY, float rotationAngle, CanvasSweepDirection sweepDirection, CanvasArcSize arcSize);
    public void AddArc(Vector2 centerPoint, float radiusX, float radiusY, float startAngle, float sweepAngle);
    public void AddCubicBezier(Vector2 controlPoint1, Vector2 controlPoint2, Vector2 endPoint);
    public void AddLine(Vector2 endPoint);
    public void AddLine(float x, float y);
    public void AddQuadraticBezier(Vector2 controlPoint, Vector2 endPoint);
    public void SetFilledRegionDetermination(CanvasFilledRegionDetermination filledRegionDetermination);
    public void SetSegmentOptions(CanvasFigureSegmentOptions figureSegmentOptions);
    public void EndFigure(CanvasFigureLoop figureLoop);
    public void AddGeometry(CanvasGeometry geometry);
    public sealed virtual void Dispose();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle")]
[CanvasStrokeStyleRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle")]
public class Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasStrokeStyle { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Single[] CustomDashStyle { get; public set; }
    public CanvasCapStyle DashCap { get; public set; }
    public float DashOffset { get; public set; }
    public CanvasDashStyle DashStyle { get; public set; }
    public CanvasCapStyle EndCap { get; public set; }
    public CanvasLineJoin LineJoin { get; public set; }
    public float MiterLimit { get; public set; }
    public CanvasCapStyle StartCap { get; public set; }
    public CanvasStrokeTransformBehavior TransformBehavior { get; public set; }
    internal CanvasStrokeStyle(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_ICanvasStrokeStyle();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Geometry_CanvasStrokeStyle();
    public static CanvasStrokeStyle FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasStrokeStyle x, CanvasStrokeStyle y);
    public static bool op_Inequality(CanvasStrokeStyle x, CanvasStrokeStyle y);
    public sealed virtual bool Equals(CanvasStrokeStyle other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public Single[] get_CustomDashStyle();
    public void set_CustomDashStyle(Single[] value);
    public CanvasCapStyle get_DashCap();
    public void set_DashCap(CanvasCapStyle value);
    public float get_DashOffset();
    public void set_DashOffset(float value);
    public CanvasDashStyle get_DashStyle();
    public void set_DashStyle(CanvasDashStyle value);
    public CanvasCapStyle get_EndCap();
    public void set_EndCap(CanvasCapStyle value);
    public CanvasLineJoin get_LineJoin();
    public void set_LineJoin(CanvasLineJoin value);
    public float get_MiterLimit();
    public void set_MiterLimit(float value);
    public CanvasCapStyle get_StartCap();
    public void set_StartCap(CanvasCapStyle value);
    public CanvasStrokeTransformBehavior get_TransformBehavior();
    public void set_TransformBehavior(CanvasStrokeTransformBehavior value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasStrokeTransformBehavior : Enum {
    public int value__;
    public static CanvasStrokeTransformBehavior Normal;
    public static CanvasStrokeTransformBehavior Fixed;
    public static CanvasStrokeTransformBehavior Hairline;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Geometry.CanvasSweepDirection>")]
public enum Microsoft.Graphics.Canvas.Geometry.CanvasSweepDirection : Enum {
    public int value__;
    public static CanvasSweepDirection CounterClockwise;
    public static CanvasSweepDirection Clockwise;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices;struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices,Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices>")]
public class Microsoft.Graphics.Canvas.Geometry.CanvasTriangleVertices : ValueType {
    public Vector2 Vertex1;
    public Vector2 Vertex2;
    public Vector2 Vertex3;
    public CanvasTriangleVertices(Vector2 _Vertex1, Vector2 _Vertex2, Vector2 _Vertex3);
    public static bool op_Equality(CanvasTriangleVertices x, CanvasTriangleVertices y);
    public static bool op_Inequality(CanvasTriangleVertices x, CanvasTriangleVertices y);
    public sealed virtual bool Equals(CanvasTriangleVertices other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BA6CB114-E1A1-448D-AB7C-8D2B92674119")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometry {
    public CanvasDevice Device { get; }
    public abstract virtual CanvasDevice get_Device();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("80BA1060-A9D7-41BA-9372-EC3FC1744E5D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasCachedGeometryStatics {
    [OverloadAttribute("CreateFill")]
public abstract virtual CanvasCachedGeometry CreateFill(CanvasGeometry geometry);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateFillWithFlatteningTolerance")]
public abstract virtual CanvasCachedGeometry CreateFill(CanvasGeometry geometry, float flatteningTolerance);
    [OverloadAttribute("CreateStroke")]
public abstract virtual CanvasCachedGeometry CreateStroke(CanvasGeometry geometry, float strokeWidth);
    [OverloadAttribute("CreateStrokeWithStrokeStyle")]
public abstract virtual CanvasCachedGeometry CreateStroke(CanvasGeometry geometry, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateStrokeWithStrokeStyleAndFlatteningTolerance")]
public abstract virtual CanvasCachedGeometry CreateStroke(CanvasGeometry geometry, float strokeWidth, CanvasStrokeStyle strokeStyle, float flatteningTolerance);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("74EA89FA-C87C-4D0D-9057-2743B8DB67EE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasGeometry {
    public CanvasDevice Device { get; }
    [OverloadAttribute("CombineWith")]
public abstract virtual CanvasGeometry CombineWith(CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, CanvasGeometryCombine combine);
    [DefaultOverloadAttribute]
[OverloadAttribute("CombineWithUsingFlatteningTolerance")]
public abstract virtual CanvasGeometry CombineWith(CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, CanvasGeometryCombine combine, float flatteningTolerance);
    [OverloadAttribute("Stroke")]
public abstract virtual CanvasGeometry Stroke(float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("StrokeWithStrokeStyle")]
public abstract virtual CanvasGeometry Stroke(float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("StrokeWithAllOptions")]
public abstract virtual CanvasGeometry Stroke(float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("Outline")]
public abstract virtual CanvasGeometry Outline();
    [DefaultOverloadAttribute]
[OverloadAttribute("OutlineWithTransformAndFlatteningTolerance")]
public abstract virtual CanvasGeometry Outline(Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("Simplify")]
public abstract virtual CanvasGeometry Simplify(CanvasGeometrySimplification simplification);
    [DefaultOverloadAttribute]
[OverloadAttribute("SimplifyWithTransformAndFlatteningTolerance")]
public abstract virtual CanvasGeometry Simplify(CanvasGeometrySimplification simplification, Matrix3x2 transform, float flatteningTolerance);
    public abstract virtual CanvasGeometry Transform(Matrix3x2 transform);
    [OverloadAttribute("CompareWith")]
public abstract virtual CanvasGeometryRelation CompareWith(CanvasGeometry otherGeometry);
    [DefaultOverloadAttribute]
[OverloadAttribute("CompareWithUsingTransformAndFlatteningTolerance")]
public abstract virtual CanvasGeometryRelation CompareWith(CanvasGeometry otherGeometry, Matrix3x2 otherGeometryTransform, float flatteningTolerance);
    [OverloadAttribute("ComputeArea")]
public abstract virtual float ComputeArea();
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputeAreaWithTransformAndFlatteningTolerance")]
public abstract virtual float ComputeArea(Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("ComputePathLength")]
public abstract virtual float ComputePathLength();
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputePathLengthWithTransformAndFlatteningTolerance")]
public abstract virtual float ComputePathLength(Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("ComputePointOnPath")]
public abstract virtual Vector2 ComputePointOnPath(float distance);
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputePointOnPathWithTangent")]
public abstract virtual Vector2 ComputePointOnPath(float distance, Vector2& tangent);
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent")]
public abstract virtual Vector2 ComputePointOnPath(float length, Matrix3x2 transform, float flatteningTolerance, Vector2& tangent);
    [OverloadAttribute("FillContainsPoint")]
public abstract virtual bool FillContainsPoint(Vector2 point);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillContainsPointWithTransformAndFlatteningTolerance")]
public abstract virtual bool FillContainsPoint(Vector2 point, Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("ComputeBounds")]
public abstract virtual Rect ComputeBounds();
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputeBoundsWithTransform")]
public abstract virtual Rect ComputeBounds(Matrix3x2 transform);
    [OverloadAttribute("ComputeStrokeBounds")]
public abstract virtual Rect ComputeStrokeBounds(float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputeStrokeBoundsWithStrokeStyle")]
public abstract virtual Rect ComputeStrokeBounds(float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputeStrokeBoundsWithAllOptions")]
public abstract virtual Rect ComputeStrokeBounds(float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("StrokeContainsPoint")]
public abstract virtual bool StrokeContainsPoint(Vector2 point, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("StrokeContainsPointWithStrokeStyle")]
public abstract virtual bool StrokeContainsPoint(Vector2 point, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("StrokeContainsPointWithAllOptions")]
public abstract virtual bool StrokeContainsPoint(Vector2 point, float strokeWidth, CanvasStrokeStyle strokeStyle, Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("Tessellate")]
public abstract virtual CanvasTriangleVertices[] Tessellate();
    [OverloadAttribute("TessellateWithTransformAndFlatteningTolerance")]
public abstract virtual CanvasTriangleVertices[] Tessellate(Matrix3x2 transform, float flatteningTolerance);
    public abstract virtual void SendPathTo(ICanvasPathReceiver streamReader);
    public abstract virtual CanvasDevice get_Device();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("D94E33CF-CD59-46F2-8DF4-55066AABFD56")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasGeometryStatics {
    public float DefaultFlatteningTolerance { get; }
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateRectangle")]
public abstract virtual CanvasGeometry CreateRectangle(ICanvasResourceCreator resourceCreator, Rect rect);
    [OverloadAttribute("CreateRectangleAtCoords")]
public abstract virtual CanvasGeometry CreateRectangle(ICanvasResourceCreator resourceCreator, float x, float y, float w, float h);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateRoundedRectangle")]
public abstract virtual CanvasGeometry CreateRoundedRectangle(ICanvasResourceCreator resourceCreator, Rect rect, float radiusX, float radiusY);
    [OverloadAttribute("CreateRoundedRectangleAtCoords")]
public abstract virtual CanvasGeometry CreateRoundedRectangle(ICanvasResourceCreator resourceCreator, float x, float y, float w, float h, float radiusX, float radiusY);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateEllipse")]
public abstract virtual CanvasGeometry CreateEllipse(ICanvasResourceCreator resourceCreator, Vector2 centerPoint, float radiusX, float radiusY);
    [OverloadAttribute("CreateEllipseAtCoords")]
public abstract virtual CanvasGeometry CreateEllipse(ICanvasResourceCreator resourceCreator, float x, float y, float radiusX, float radiusY);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateCircle")]
public abstract virtual CanvasGeometry CreateCircle(ICanvasResourceCreator resourceCreator, Vector2 centerPoint, float radius);
    [OverloadAttribute("CreateCircleAtCoords")]
public abstract virtual CanvasGeometry CreateCircle(ICanvasResourceCreator resourceCreator, float x, float y, float radius);
    public abstract virtual CanvasGeometry CreatePath(CanvasPathBuilder pathBuilder);
    public abstract virtual CanvasGeometry CreatePolygon(ICanvasResourceCreator resourceCreator, Vector2[] points);
    [OverloadAttribute("CreateGroup")]
public abstract virtual CanvasGeometry CreateGroup(ICanvasResourceCreator resourceCreator, CanvasGeometry[] geometries);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateGroupWithFilledRegionDetermination")]
public abstract virtual CanvasGeometry CreateGroup(ICanvasResourceCreator resourceCreator, CanvasGeometry[] geometries, CanvasFilledRegionDetermination filledRegionDetermination);
    public abstract virtual CanvasGeometry CreateText(CanvasTextLayout textLayout);
    public abstract virtual CanvasGeometry CreateGlyphRun(ICanvasResourceCreator resourceCreator, Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, CanvasTextMeasuringMode measuringMode, CanvasGlyphOrientation glyphOrientation);
    [OverloadAttribute("CreateInk")]
public abstract virtual CanvasGeometry CreateInk(ICanvasResourceCreator resourceCreator, IEnumerable`1<InkStroke> inkStrokes);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateInkWithTransformAndFlatteningTolerance")]
public abstract virtual CanvasGeometry CreateInk(ICanvasResourceCreator resourceCreator, IEnumerable`1<InkStroke> inkStrokes, Matrix3x2 transform, float flatteningTolerance);
    [OverloadAttribute("ComputeFlatteningTolerance")]
public abstract virtual float ComputeFlatteningTolerance(float dpi, float maximumZoomFactor);
    [DefaultOverloadAttribute]
[OverloadAttribute("ComputeFlatteningToleranceWithTransform")]
public abstract virtual float ComputeFlatteningTolerance(float dpi, float maximumZoomFactor, Matrix3x2 expectedGeometryTransform);
    public abstract virtual float get_DefaultFlatteningTolerance();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("6BFC2BF1-0A7A-449C-A7EF-6706321B0C1A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMesh {
    public CanvasDevice Device { get; }
    public CanvasGradientMeshPatch[] Patches { get; }
    [OverloadAttribute("GetBounds")]
public abstract virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    [OverloadAttribute("GetBoundsWithTransform")]
public abstract virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
    public abstract virtual CanvasDevice get_Device();
    public abstract virtual CanvasGradientMeshPatch[] get_Patches();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("4756492D-251E-421D-834D-87EC260D5E4D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshFactory {
    public abstract virtual CanvasGradientMesh Create(ICanvasResourceCreator resourceCreator, CanvasGradientMeshPatch[] patchElements);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("44027640-3EAB-4199-AA3B-644890D0123D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasGradientMeshStatics {
    public abstract virtual CanvasGradientMeshPatch CreateCoonsPatch(Vector2[] points, Vector4[] colors, CanvasGradientMeshPatchEdge[] edges);
    public abstract virtual CanvasGradientMeshPatch CreateTensorPatch(Vector2[] points, Vector4[] colors, CanvasGradientMeshPatchEdge[] edges);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BCF5822F-8127-4E5C-96B8-29983B915541")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilder {
    [DefaultOverloadAttribute]
[OverloadAttribute("BeginFigureWithFigureFill")]
public abstract virtual void BeginFigure(Vector2 startPoint, CanvasFigureFill figureFill);
    [DefaultOverloadAttribute]
[OverloadAttribute("BeginFigure")]
public abstract virtual void BeginFigure(Vector2 startPoint);
    [DefaultOverloadAttribute]
[OverloadAttribute("BeginFigureAtCoordsWithFigureFill")]
public abstract virtual void BeginFigure(float startX, float startY, CanvasFigureFill figureFill);
    [OverloadAttribute("BeginFigureAtCoords")]
public abstract virtual void BeginFigure(float startX, float startY);
    [OverloadAttribute("AddArcToPoint")]
public abstract virtual void AddArc(Vector2 endPoint, float radiusX, float radiusY, float rotationAngle, CanvasSweepDirection sweepDirection, CanvasArcSize arcSize);
    [OverloadAttribute("AddArcAroundEllipse")]
public abstract virtual void AddArc(Vector2 centerPoint, float radiusX, float radiusY, float startAngle, float sweepAngle);
    public abstract virtual void AddCubicBezier(Vector2 controlPoint1, Vector2 controlPoint2, Vector2 endPoint);
    [DefaultOverloadAttribute]
[OverloadAttribute("AddLine")]
public abstract virtual void AddLine(Vector2 endPoint);
    [OverloadAttribute("AddLineWithCoords")]
public abstract virtual void AddLine(float x, float y);
    public abstract virtual void AddQuadraticBezier(Vector2 controlPoint, Vector2 endPoint);
    public abstract virtual void SetFilledRegionDetermination(CanvasFilledRegionDetermination filledRegionDetermination);
    public abstract virtual void SetSegmentOptions(CanvasFigureSegmentOptions figureSegmentOptions);
    public abstract virtual void EndFigure(CanvasFigureLoop figureLoop);
    public abstract virtual void AddGeometry(CanvasGeometry geometry);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("AC2BEE14-EFD1-4343-8E53-BA62153D8966")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathBuilderFactory {
    public abstract virtual CanvasPathBuilder Create(ICanvasResourceCreator resourceCreator);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("70E65373-7FB3-4645-8B6D-F616D1B9A9D7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver")]
public interface Microsoft.Graphics.Canvas.Geometry.ICanvasPathReceiver {
    public abstract virtual void BeginFigure(Vector2 startPoint, CanvasFigureFill figureFill);
    public abstract virtual void AddArc(Vector2 endPoint, float radiusX, float radiusY, float rotationAngle, CanvasSweepDirection sweepDirection, CanvasArcSize arcSize);
    public abstract virtual void AddCubicBezier(Vector2 controlPoint1, Vector2 controlPoint2, Vector2 endPoint);
    public abstract virtual void AddLine(Vector2 endPoint);
    public abstract virtual void AddQuadraticBezier(Vector2 controlPoint, Vector2 endPoint);
    public abstract virtual void SetFilledRegionDetermination(CanvasFilledRegionDetermination filledRegionDetermination);
    public abstract virtual void SetSegmentOptions(CanvasFigureSegmentOptions figureSegmentOptions);
    public abstract virtual void EndFigure(CanvasFigureLoop figureLoop);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("FD3E1CD2-6019-40A1-B315-267EEF6C2AEB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle")]
internal interface Microsoft.Graphics.Canvas.Geometry.ICanvasStrokeStyle {
    public Single[] CustomDashStyle { get; public set; }
    public CanvasCapStyle DashCap { get; public set; }
    public float DashOffset { get; public set; }
    public CanvasDashStyle DashStyle { get; public set; }
    public CanvasCapStyle EndCap { get; public set; }
    public CanvasLineJoin LineJoin { get; public set; }
    public float MiterLimit { get; public set; }
    public CanvasCapStyle StartCap { get; public set; }
    public CanvasStrokeTransformBehavior TransformBehavior { get; public set; }
    public abstract virtual Single[] get_CustomDashStyle();
    public abstract virtual void set_CustomDashStyle(Single[] value);
    public abstract virtual CanvasCapStyle get_DashCap();
    public abstract virtual void set_DashCap(CanvasCapStyle value);
    public abstract virtual float get_DashOffset();
    public abstract virtual void set_DashOffset(float value);
    public abstract virtual CanvasDashStyle get_DashStyle();
    public abstract virtual void set_DashStyle(CanvasDashStyle value);
    public abstract virtual CanvasCapStyle get_EndCap();
    public abstract virtual void set_EndCap(CanvasCapStyle value);
    public abstract virtual CanvasLineJoin get_LineJoin();
    public abstract virtual void set_LineJoin(CanvasLineJoin value);
    public abstract virtual float get_MiterLimit();
    public abstract virtual void set_MiterLimit(float value);
    public abstract virtual CanvasCapStyle get_StartCap();
    public abstract virtual void set_StartCap(CanvasCapStyle value);
    public abstract virtual CanvasStrokeTransformBehavior get_TransformBehavior();
    public abstract virtual void set_TransformBehavior(CanvasStrokeTransformBehavior value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("49ECFC58-5E1C-4EE3-8088-542F94E93C60")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasActiveLayer")]
internal interface Microsoft.Graphics.Canvas.ICanvasActiveLayer {
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C57532ED-709E-4AC2-86BE-A1EC3A7FA8FE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasBitmap")]
internal interface Microsoft.Graphics.Canvas.ICanvasBitmap {
    public CanvasAlphaMode AlphaMode { get; }
    public Rect Bounds { get; }
    public DirectXPixelFormat Format { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    [OverloadAttribute("SaveToFileAsync")]
public abstract virtual IAsyncAction SaveAsync(string fileName);
    [DefaultOverloadAttribute]
[OverloadAttribute("SaveToFileWithBitmapFileFormatAsync")]
public abstract virtual IAsyncAction SaveAsync(string fileName, CanvasBitmapFileFormat fileFormat);
    [DefaultOverloadAttribute]
[OverloadAttribute("SaveToFileWithBitmapFileFormatAndQualityAsync")]
public abstract virtual IAsyncAction SaveAsync(string fileName, CanvasBitmapFileFormat fileFormat, float quality);
    [OverloadAttribute("SaveToStreamAsync")]
public abstract virtual IAsyncAction SaveAsync(IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat);
    [OverloadAttribute("SaveToStreamWithQualityAsync")]
public abstract virtual IAsyncAction SaveAsync(IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality);
    [OverloadAttribute("GetPixelBytes")]
public abstract virtual Byte[] GetPixelBytes();
    [OverloadAttribute("GetPixelBytesWithSubrectangle")]
public abstract virtual Byte[] GetPixelBytes(int left, int top, int width, int height);
    [OverloadAttribute("GetPixelBytesWithBuffer")]
public abstract virtual void GetPixelBytes(IBuffer buffer);
    [OverloadAttribute("GetPixelBytesWithBufferAndSubrectangle")]
public abstract virtual void GetPixelBytes(IBuffer buffer, int left, int top, int width, int height);
    [OverloadAttribute("GetPixelColors")]
public abstract virtual Color[] GetPixelColors();
    [OverloadAttribute("GetPixelColorsWithSubrectangle")]
public abstract virtual Color[] GetPixelColors(int left, int top, int width, int height);
    [DefaultOverloadAttribute]
[OverloadAttribute("SetPixelBytes")]
public abstract virtual void SetPixelBytes(Byte[] valueElements);
    [DefaultOverloadAttribute]
[OverloadAttribute("SetPixelBytesWithSubrectangle")]
public abstract virtual void SetPixelBytes(Byte[] valueElements, int left, int top, int width, int height);
    [OverloadAttribute("SetPixelBytesWithBuffer")]
public abstract virtual void SetPixelBytes(IBuffer buffer);
    [OverloadAttribute("SetPixelBytesWithBufferAndSubrectangle")]
public abstract virtual void SetPixelBytes(IBuffer buffer, int left, int top, int width, int height);
    [OverloadAttribute("SetPixelColors")]
public abstract virtual void SetPixelColors(Color[] valueElements);
    [OverloadAttribute("SetPixelColorsWithSubrectangle")]
public abstract virtual void SetPixelColors(Color[] valueElements, int left, int top, int width, int height);
    [OverloadAttribute("CopyPixelsFromBitmap")]
public abstract virtual void CopyPixelsFromBitmap(CanvasBitmap otherBitmap);
    [OverloadAttribute("CopyPixelsFromBitmapWithDestPoint")]
public abstract virtual void CopyPixelsFromBitmap(CanvasBitmap otherBitmap, int destX, int destY);
    [OverloadAttribute("CopyPixelsFromBitmapWithDestPointAndSourceRect")]
public abstract virtual void CopyPixelsFromBitmap(CanvasBitmap otherBitmap, int destX, int destY, int sourceRectLeft, int sourceRectTop, int sourceRectWidth, int sourceRectHeight);
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual Rect get_Bounds();
    public abstract virtual DirectXPixelFormat get_Format();
    public abstract virtual Size get_Size();
    public abstract virtual BitmapSize get_SizeInPixels();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F2D0EB0E-16F3-4BCF-B1D1-04834AB97DE4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasBitmapFactory")]
internal interface Microsoft.Graphics.Canvas.ICanvasBitmapFactory {
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C8948DEA-A41D-4CC2-AF9A-FDDE01B606DC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasBitmapStatics")]
internal interface Microsoft.Graphics.Canvas.ICanvasBitmapStatics {
    [OverloadAttribute("CreateFromDirect3D11Surface")]
public abstract virtual CanvasBitmap CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface);
    [OverloadAttribute("CreateFromDirect3D11SurfaceWithDpi")]
public abstract virtual CanvasBitmap CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi);
    [OverloadAttribute("CreateFromDirect3D11SurfaceWithDpiAndAlpha")]
public abstract virtual CanvasBitmap CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi, CanvasAlphaMode alpha);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateFromBytes")]
public abstract virtual CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateFromBytesWithDpi")]
public abstract virtual CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateFromBytesWithDpiAndAlpha")]
public abstract virtual CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, Byte[] bytes, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi, CanvasAlphaMode alpha);
    [OverloadAttribute("CreateFromBytesWithBuffer")]
public abstract virtual CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format);
    [OverloadAttribute("CreateFromBytesWithBufferAndDpi")]
public abstract virtual CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi);
    [OverloadAttribute("CreateFromBytesWithBufferAndDpiAndAlpha")]
public abstract virtual CanvasBitmap CreateFromBytes(ICanvasResourceCreator resourceCreator, IBuffer buffer, int widthInPixels, int heightInPixels, DirectXPixelFormat format, float dpi, CanvasAlphaMode alpha);
    [OverloadAttribute("CreateFromColors")]
public abstract virtual CanvasBitmap CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels);
    [OverloadAttribute("CreateFromColorsWithDpi")]
public abstract virtual CanvasBitmap CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels, float dpi);
    [OverloadAttribute("CreateFromColorsWithDpiAndAlpha")]
public abstract virtual CanvasBitmap CreateFromColors(ICanvasResourceCreator resourceCreator, Color[] colors, int widthInPixels, int heightInPixels, float dpi, CanvasAlphaMode alpha);
    public abstract virtual CanvasBitmap CreateFromSoftwareBitmap(ICanvasResourceCreator resourceCreator, SoftwareBitmap sourceBitmap);
    [OverloadAttribute("LoadAsyncFromHstring")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName);
    [OverloadAttribute("LoadAsyncFromHstringWithDpi")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, float dpi);
    [OverloadAttribute("LoadAsyncFromHstringWithDpiAndAlpha")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, float dpi, CanvasAlphaMode alpha);
    [DefaultOverloadAttribute]
[OverloadAttribute("LoadAsyncFromUri")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri);
    [DefaultOverloadAttribute]
[OverloadAttribute("LoadAsyncFromUriWithDpi")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, float dpi);
    [DefaultOverloadAttribute]
[OverloadAttribute("LoadAsyncFromUriWithDpiAndAlpha")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, float dpi, CanvasAlphaMode alpha);
    [OverloadAttribute("LoadAsyncFromStream")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    [OverloadAttribute("LoadAsyncFromStreamWithDpi")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, float dpi);
    [OverloadAttribute("LoadAsyncFromStreamWithDpiAndAlpha")]
public abstract virtual IAsyncOperation`1<CanvasBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, float dpi, CanvasAlphaMode alpha);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("B71E73CF-2FE7-4D3A-BBB8-19F016F5BE1B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasCommandList")]
internal interface Microsoft.Graphics.Canvas.ICanvasCommandList {
    public CanvasDevice Device { get; }
    public abstract virtual CanvasDrawingSession CreateDrawingSession();
    public abstract virtual CanvasDevice get_Device();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("B3D44E68-D931-4B5B-B957-0888980A7D50")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasCommandListFactory")]
internal interface Microsoft.Graphics.Canvas.ICanvasCommandListFactory {
    public abstract virtual CanvasCommandList Create(ICanvasResourceCreator resourceCreator);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A27F0B5D-EC2C-4D4F-948F-0AA1E95E33E6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasDevice")]
internal interface Microsoft.Graphics.Canvas.ICanvasDevice {
    public bool ForceSoftwareRenderer { get; }
    public bool LowPriority { get; public set; }
    public int MaximumBitmapSizeInPixels { get; }
    public ulong MaximumCacheSize { get; public set; }
    public abstract virtual bool IsPixelFormatSupported(DirectXPixelFormat pixelFormat);
    public abstract virtual bool IsBufferPrecisionSupported(CanvasBufferPrecision bufferPrecision);
    [OverloadAttribute("IsDeviceLost")]
public abstract virtual bool IsDeviceLost(int hresult);
    public abstract virtual void RaiseDeviceLost();
    public abstract virtual CanvasLock Lock();
    [OverloadAttribute("IsDeviceLost2")]
public abstract virtual bool IsDeviceLost();
    public abstract virtual int GetDeviceLostReason();
    public abstract virtual bool get_ForceSoftwareRenderer();
    public abstract virtual bool get_LowPriority();
    public abstract virtual void set_LowPriority(bool value);
    public abstract virtual int get_MaximumBitmapSizeInPixels();
    public abstract virtual ulong get_MaximumCacheSize();
    public abstract virtual void set_MaximumCacheSize(ulong value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DeviceLost(TypedEventHandler`2<CanvasDevice, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DeviceLost(TypedEventHandler`2<CanvasDevice, object> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("E2C2BF21-5418-43B9-A2DA-539E287C790F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasDeviceFactory")]
internal interface Microsoft.Graphics.Canvas.ICanvasDeviceFactory {
    public abstract virtual CanvasDevice CreateWithForceSoftwareRendererOption(bool forceSoftwareRenderer);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("9B6E2B27-CD07-421A-8F69-0AE8A787FE8C")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasDeviceStatics")]
internal interface Microsoft.Graphics.Canvas.ICanvasDeviceStatics {
    public CanvasDebugLevel DebugLevel { get; public set; }
    public abstract virtual CanvasDevice CreateFromDirect3D11Device(IDirect3DDevice direct3DDevice);
    [OverloadAttribute("GetSharedDevice")]
public abstract virtual CanvasDevice GetSharedDevice();
    [OverloadAttribute("GetSharedDeviceWithForceSoftwareRenderer")]
public abstract virtual CanvasDevice GetSharedDevice(bool forceSoftwareRenderer);
    public abstract virtual CanvasDebugLevel get_DebugLevel();
    public abstract virtual void set_DebugLevel(CanvasDebugLevel value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F60AFD09-E623-4BE0-B750-578AA920B1DB")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasDrawingSession")]
internal interface Microsoft.Graphics.Canvas.ICanvasDrawingSession {
    public CanvasAntialiasing Antialiasing { get; public set; }
    public CanvasBlend Blend { get; public set; }
    public Nullable`1<CanvasBufferPrecision> EffectBufferPrecision { get; public set; }
    public BitmapSize EffectTileSize { get; public set; }
    public CanvasTextAntialiasing TextAntialiasing { get; public set; }
    public CanvasTextRenderingParameters TextRenderingParameters { get; public set; }
    public Matrix3x2 Transform { get; public set; }
    public CanvasUnits Units { get; public set; }
    [OverloadAttribute("Clear")]
public abstract virtual void Clear(Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("ClearHdr")]
public abstract virtual void Clear(Vector4 color);
    public abstract virtual void Flush();
    [OverloadAttribute("DrawImageAtOrigin")]
public abstract virtual void DrawImage(ICanvasImage image);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawImageAtOffset")]
public abstract virtual void DrawImage(ICanvasImage image, Vector2 offset);
    [OverloadAttribute("DrawImageAtCoords")]
public abstract virtual void DrawImage(ICanvasImage image, float x, float y);
    [OverloadAttribute("DrawImageToRect")]
public abstract virtual void DrawImage(CanvasBitmap bitmap, Rect destinationRectangle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawImageAtOffsetWithSourceRect")]
public abstract virtual void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle);
    [OverloadAttribute("DrawImageAtCoordsWithSourceRect")]
public abstract virtual void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle);
    [OverloadAttribute("DrawImageToRectWithSourceRect")]
public abstract virtual void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawImageAtOffsetWithSourceRectAndOpacity")]
public abstract virtual void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity);
    [OverloadAttribute("DrawImageAtCoordsWithSourceRectAndOpacity")]
public abstract virtual void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity);
    [OverloadAttribute("DrawImageToRectWithSourceRectAndOpacity")]
public abstract virtual void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation")]
public abstract virtual void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    [OverloadAttribute("DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation")]
public abstract virtual void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    [OverloadAttribute("DrawImageToRectWithSourceRectAndOpacityAndInterpolation")]
public abstract virtual void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite")]
public abstract virtual void DrawImage(ICanvasImage image, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite")]
public abstract virtual void DrawImage(ICanvasImage image, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    [OverloadAttribute("DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite")]
public abstract virtual void DrawImage(ICanvasImage image, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, CanvasComposite composite);
    [OverloadAttribute("DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective")]
public abstract virtual void DrawImage(CanvasBitmap bitmap, Vector2 offset, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    [OverloadAttribute("DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective")]
public abstract virtual void DrawImage(CanvasBitmap bitmap, float x, float y, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    [OverloadAttribute("DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective")]
public abstract virtual void DrawImage(CanvasBitmap bitmap, Rect destinationRectangle, Rect sourceRectangle, float opacity, CanvasImageInterpolation interpolation, Matrix4x4 perspective);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawLineWithBrush")]
public abstract virtual void DrawLine(Vector2 point0, Vector2 point1, ICanvasBrush brush);
    [OverloadAttribute("DrawLineAtCoordsWithBrush")]
public abstract virtual void DrawLine(float x0, float y0, float x1, float y1, ICanvasBrush brush);
    [OverloadAttribute("DrawLineWithColor")]
public abstract virtual void DrawLine(Vector2 point0, Vector2 point1, Color color);
    [OverloadAttribute("DrawLineAtCoordsWithColor")]
public abstract virtual void DrawLine(float x0, float y0, float x1, float y1, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawLineWithBrushAndStrokeWidth")]
public abstract virtual void DrawLine(Vector2 point0, Vector2 point1, ICanvasBrush brush, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawLineAtCoordsWithBrushAndStrokeWidth")]
public abstract virtual void DrawLine(float x0, float y0, float x1, float y1, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawLineWithColorAndStrokeWidth")]
public abstract virtual void DrawLine(Vector2 point0, Vector2 point1, Color color, float strokeWidth);
    [OverloadAttribute("DrawLineAtCoordsWithColorAndStrokeWidth")]
public abstract virtual void DrawLine(float x0, float y0, float x1, float y1, Color color, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawLineWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawLine(Vector2 point0, Vector2 point1, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawLine(float x0, float y0, float x1, float y1, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawLineWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawLine(Vector2 point0, Vector2 point1, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawLine(float x0, float y0, float x1, float y1, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRectangleWithBrush")]
public abstract virtual void DrawRectangle(Rect rect, ICanvasBrush brush);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRectangleAtCoordsWithBrush")]
public abstract virtual void DrawRectangle(float x, float y, float w, float h, ICanvasBrush brush);
    [OverloadAttribute("DrawRectangleWithColor")]
public abstract virtual void DrawRectangle(Rect rect, Color color);
    [OverloadAttribute("DrawRectangleAtCoordsWithColor")]
public abstract virtual void DrawRectangle(float x, float y, float w, float h, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRectangleWithBrushAndStrokeWidth")]
public abstract virtual void DrawRectangle(Rect rect, ICanvasBrush brush, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRectangleAtCoordsWithBrushAndStrokeWidth")]
public abstract virtual void DrawRectangle(float x, float y, float w, float h, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawRectangleWithColorAndStrokeWidth")]
public abstract virtual void DrawRectangle(Rect rect, Color color, float strokeWidth);
    [OverloadAttribute("DrawRectangleAtCoordsWithColorAndStrokeWidth")]
public abstract virtual void DrawRectangle(float x, float y, float w, float h, Color color, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRectangle(Rect rect, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRectangle(float x, float y, float w, float h, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawRectangleWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRectangle(Rect rect, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRectangle(float x, float y, float w, float h, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillRectangleWithBrush")]
public abstract virtual void FillRectangle(Rect rect, ICanvasBrush brush);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillRectangleAtCoordsWithBrush")]
public abstract virtual void FillRectangle(float x, float y, float w, float h, ICanvasBrush brush);
    [OverloadAttribute("FillRectangleWithColor")]
public abstract virtual void FillRectangle(Rect rect, Color color);
    [OverloadAttribute("FillRectangleAtCoordsWithColor")]
public abstract virtual void FillRectangle(float x, float y, float w, float h, Color color);
    [OverloadAttribute("FillRectangleWithBrushAndOpacityBrush")]
public abstract virtual void FillRectangle(Rect rect, ICanvasBrush brush, ICanvasBrush opacityBrush);
    [OverloadAttribute("FillRectangleAtCoordsWithBrushAndOpacityBrush")]
public abstract virtual void FillRectangle(float x, float y, float w, float h, ICanvasBrush brush, ICanvasBrush opacityBrush);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRoundedRectangleWithBrush")]
public abstract virtual void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRoundedRectangleAtCoordsWithBrush")]
public abstract virtual void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush);
    [OverloadAttribute("DrawRoundedRectangleWithColor")]
public abstract virtual void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color);
    [OverloadAttribute("DrawRoundedRectangleAtCoordsWithColor")]
public abstract virtual void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRoundedRectangleWithBrushAndStrokeWidth")]
public abstract virtual void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth")]
public abstract virtual void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawRoundedRectangleWithColorAndStrokeWidth")]
public abstract virtual void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color, float strokeWidth);
    [OverloadAttribute("DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth")]
public abstract virtual void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillRoundedRectangleWithBrush")]
public abstract virtual void FillRoundedRectangle(Rect rect, float radiusX, float radiusY, ICanvasBrush brush);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillRoundedRectangleAtCoordsWithBrush")]
public abstract virtual void FillRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, ICanvasBrush brush);
    [OverloadAttribute("FillRoundedRectangleWithColor")]
public abstract virtual void FillRoundedRectangle(Rect rect, float radiusX, float radiusY, Color color);
    [OverloadAttribute("FillRoundedRectangleAtCoordsWithColor")]
public abstract virtual void FillRoundedRectangle(float x, float y, float w, float h, float radiusX, float radiusY, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawEllipseWithBrush")]
public abstract virtual void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush);
    [OverloadAttribute("DrawEllipseAtCoordsWithBrush")]
public abstract virtual void DrawEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush);
    [OverloadAttribute("DrawEllipseWithColor")]
public abstract virtual void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color);
    [OverloadAttribute("DrawEllipseAtCoordsWithColor")]
public abstract virtual void DrawEllipse(float x, float y, float radiusX, float radiusY, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawEllipseWithBrushAndStrokeWidth")]
public abstract virtual void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawEllipseAtCoordsWithBrushAndStrokeWidth")]
public abstract virtual void DrawEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawEllipseWithColorAndStrokeWidth")]
public abstract virtual void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color, float strokeWidth);
    [OverloadAttribute("DrawEllipseAtCoordsWithColorAndStrokeWidth")]
public abstract virtual void DrawEllipse(float x, float y, float radiusX, float radiusY, Color color, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawEllipseWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawEllipse(float x, float y, float radiusX, float radiusY, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillEllipseWithBrush")]
public abstract virtual void FillEllipse(Vector2 centerPoint, float radiusX, float radiusY, ICanvasBrush brush);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillEllipseAtCoordsWithBrush")]
public abstract virtual void FillEllipse(float x, float y, float radiusX, float radiusY, ICanvasBrush brush);
    [OverloadAttribute("FillEllipseWithColor")]
public abstract virtual void FillEllipse(Vector2 centerPoint, float radiusX, float radiusY, Color color);
    [OverloadAttribute("FillEllipseAtCoordsWithColor")]
public abstract virtual void FillEllipse(float x, float y, float radiusX, float radiusY, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawCircleWithBrush")]
public abstract virtual void DrawCircle(Vector2 centerPoint, float radius, ICanvasBrush brush);
    [OverloadAttribute("DrawCircleAtCoordsWithBrush")]
public abstract virtual void DrawCircle(float x, float y, float radius, ICanvasBrush brush);
    [OverloadAttribute("DrawCircleWithColor")]
public abstract virtual void DrawCircle(Vector2 centerPoint, float radius, Color color);
    [OverloadAttribute("DrawCircleAtCoordsWithColor")]
public abstract virtual void DrawCircle(float x, float y, float radius, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawCircleWithBrushAndStrokeWidth")]
public abstract virtual void DrawCircle(Vector2 centerPoint, float radius, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawCircleAtCoordsWithBrushAndStrokeWidth")]
public abstract virtual void DrawCircle(float x, float y, float radius, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawCircleWithColorAndStrokeWidth")]
public abstract virtual void DrawCircle(Vector2 centerPoint, float radius, Color color, float strokeWidth);
    [OverloadAttribute("DrawCircleAtCoordsWithColorAndStrokeWidth")]
public abstract virtual void DrawCircle(float x, float y, float radius, Color color, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawCircleWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawCircle(Vector2 centerPoint, float radius, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawCircle(float x, float y, float radius, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawCircleWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawCircle(Vector2 centerPoint, float radius, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawCircle(float x, float y, float radius, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillCircleWithBrush")]
public abstract virtual void FillCircle(Vector2 centerPoint, float radius, ICanvasBrush brush);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillCircleAtCoordsWithBrush")]
public abstract virtual void FillCircle(float x, float y, float radius, ICanvasBrush brush);
    [OverloadAttribute("FillCircleWithColor")]
public abstract virtual void FillCircle(Vector2 centerPoint, float radius, Color color);
    [OverloadAttribute("FillCircleAtCoordsWithColor")]
public abstract virtual void FillCircle(float x, float y, float radius, Color color);
    [OverloadAttribute("DrawTextAtPointWithColor")]
public abstract virtual void DrawText(string text, Vector2 point, Color color);
    [OverloadAttribute("DrawTextAtPointCoordsWithColor")]
public abstract virtual void DrawText(string text, float x, float y, Color color);
    [OverloadAttribute("DrawTextAtPointWithBrushAndFormat")]
public abstract virtual void DrawText(string text, Vector2 point, ICanvasBrush brush, CanvasTextFormat format);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawTextAtRectWithBrushAndFormat")]
public abstract virtual void DrawText(string text, Rect rectangle, ICanvasBrush brush, CanvasTextFormat format);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawTextAtPointCoordsWithBrushAndFormat")]
public abstract virtual void DrawText(string text, float x, float y, ICanvasBrush brush, CanvasTextFormat format);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawTextAtRectCoordsWithBrushAndFormat")]
public abstract virtual void DrawText(string text, float x, float y, float w, float h, ICanvasBrush brush, CanvasTextFormat format);
    [OverloadAttribute("DrawTextAtPointWithColorAndFormat")]
public abstract virtual void DrawText(string text, Vector2 point, Color color, CanvasTextFormat format);
    [OverloadAttribute("DrawTextAtRectWithColorAndFormat")]
public abstract virtual void DrawText(string text, Rect rectangle, Color color, CanvasTextFormat format);
    [OverloadAttribute("DrawTextAtPointCoordsWithColorAndFormat")]
public abstract virtual void DrawText(string text, float x, float y, Color color, CanvasTextFormat format);
    [OverloadAttribute("DrawTextAtRectCoordsWithColorAndFormat")]
public abstract virtual void DrawText(string text, float x, float y, float w, float h, Color color, CanvasTextFormat format);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawGeometryWithBrush")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush);
    [OverloadAttribute("DrawGeometryWithColor")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Vector2 offset, Color color);
    [OverloadAttribute("DrawGeometryAtCoordsWithBrush")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush);
    [OverloadAttribute("DrawGeometryAtCoordsWithColor")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, float x, float y, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawGeometryAtOriginWithBrush")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, ICanvasBrush brush);
    [OverloadAttribute("DrawGeometryAtOriginWithColor")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawGeometryWithBrushAndStrokeWidth")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawGeometryWithColorAndStrokeWidth")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Vector2 offset, Color color, float strokeWidth);
    [OverloadAttribute("DrawGeometryAtCoordsWithBrushAndStrokeWidth")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawGeometryAtCoordsWithColorAndStrokeWidth")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, float x, float y, Color color, float strokeWidth);
    [OverloadAttribute("DrawGeometryAtOriginWithBrushAndStrokeWidth")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, ICanvasBrush brush, float strokeWidth);
    [OverloadAttribute("DrawGeometryAtOriginWithColorAndStrokeWidth")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Color color, float strokeWidth);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawGeometryWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Vector2 offset, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, float x, float y, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, ICanvasBrush brush, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [OverloadAttribute("DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle")]
public abstract virtual void DrawGeometry(CanvasGeometry geometry, Color color, float strokeWidth, CanvasStrokeStyle strokeStyle);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillGeometryWithBrush")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush);
    [OverloadAttribute("FillGeometryWithBrushAndOpacityBrush")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, Vector2 offset, ICanvasBrush brush, ICanvasBrush opacityBrush);
    [OverloadAttribute("FillGeometryWithColor")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, Vector2 offset, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillGeometryAtCoordsWithBrush")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush);
    [OverloadAttribute("FillGeometryAtCoordsWithBrushAndOpacityBrush")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, float x, float y, ICanvasBrush brush, ICanvasBrush opacityBrush);
    [OverloadAttribute("FillGeometryAtCoordsWithColor")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, float x, float y, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("FillGeometryAtOriginWithBrush")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, ICanvasBrush brush);
    [OverloadAttribute("FillGeometryAtOriginWithBrushAndOpacityBrush")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, ICanvasBrush brush, ICanvasBrush opacityBrush);
    [OverloadAttribute("FillGeometryAtOriginWithColor")]
public abstract virtual void FillGeometry(CanvasGeometry geometry, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawCachedGeometryWithBrush")]
public abstract virtual void DrawCachedGeometry(CanvasCachedGeometry geometry, Vector2 offset, ICanvasBrush brush);
    [OverloadAttribute("DrawCachedGeometryWithColor")]
public abstract virtual void DrawCachedGeometry(CanvasCachedGeometry geometry, Vector2 offset, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawCachedGeometryAtCoordsWithBrush")]
public abstract virtual void DrawCachedGeometry(CanvasCachedGeometry geometry, float x, float y, ICanvasBrush brush);
    [OverloadAttribute("DrawCachedGeometryAtCoordsWithColor")]
public abstract virtual void DrawCachedGeometry(CanvasCachedGeometry geometry, float x, float y, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawCachedGeometryAtOriginWithBrush")]
public abstract virtual void DrawCachedGeometry(CanvasCachedGeometry geometry, ICanvasBrush brush);
    [OverloadAttribute("DrawCachedGeometryAtOriginWithColor")]
public abstract virtual void DrawCachedGeometry(CanvasCachedGeometry geometry, Color color);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawTextLayoutWithBrush")]
public abstract virtual void DrawTextLayout(CanvasTextLayout textLayout, Vector2 point, ICanvasBrush brush);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawTextLayoutAtCoordsWithBrush")]
public abstract virtual void DrawTextLayout(CanvasTextLayout textLayout, float x, float y, ICanvasBrush brush);
    [OverloadAttribute("DrawTextLayoutWithColor")]
public abstract virtual void DrawTextLayout(CanvasTextLayout textLayout, Vector2 point, Color color);
    [OverloadAttribute("DrawTextLayoutAtCoordsWithColor")]
public abstract virtual void DrawTextLayout(CanvasTextLayout textLayout, float x, float y, Color color);
    [OverloadAttribute("DrawInk")]
public abstract virtual void DrawInk(IEnumerable`1<InkStroke> inkStrokes);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawInkWithHighContrast")]
public abstract virtual void DrawInk(IEnumerable`1<InkStroke> inkStrokes, bool highContrast);
    [OverloadAttribute("DrawGradientMeshAtOrigin")]
public abstract virtual void DrawGradientMesh(CanvasGradientMesh gradientMesh);
    [OverloadAttribute("DrawGradientMesh")]
public abstract virtual void DrawGradientMesh(CanvasGradientMesh gradientMesh, Vector2 point);
    [OverloadAttribute("DrawGradientMeshAtCoords")]
public abstract virtual void DrawGradientMesh(CanvasGradientMesh gradientMesh, float x, float y);
    [OverloadAttribute("DrawSvgAtOrigin")]
public abstract virtual void DrawSvg(CanvasSvgDocument svgDocument, Size viewportSize);
    [OverloadAttribute("DrawSvgAtPoint")]
public abstract virtual void DrawSvg(CanvasSvgDocument svgDocument, Size viewportSize, Vector2 point);
    [OverloadAttribute("DrawSvgAtCoords")]
public abstract virtual void DrawSvg(CanvasSvgDocument svgDocument, Size viewportSize, float x, float y);
    [OverloadAttribute("CreateLayerWithOpacity")]
public abstract virtual CanvasActiveLayer CreateLayer(float opacity);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateLayerWithOpacityBrush")]
public abstract virtual CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush);
    [OverloadAttribute("CreateLayerWithOpacityAndClipRectangle")]
public abstract virtual CanvasActiveLayer CreateLayer(float opacity, Rect clipRectangle);
    [OverloadAttribute("CreateLayerWithOpacityBrushAndClipRectangle")]
public abstract virtual CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush, Rect clipRectangle);
    [OverloadAttribute("CreateLayerWithOpacityAndClipGeometry")]
public abstract virtual CanvasActiveLayer CreateLayer(float opacity, CanvasGeometry clipGeometry);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateLayerWithOpacityBrushAndClipGeometry")]
public abstract virtual CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush, CanvasGeometry clipGeometry);
    [OverloadAttribute("CreateLayerWithOpacityAndClipGeometryAndTransform")]
public abstract virtual CanvasActiveLayer CreateLayer(float opacity, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform);
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateLayerWithOpacityBrushAndClipGeometryAndTransform")]
public abstract virtual CanvasActiveLayer CreateLayer(ICanvasBrush opacityBrush, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform);
    [OverloadAttribute("CreateLayerWithAllOptions")]
public abstract virtual CanvasActiveLayer CreateLayer(float opacity, ICanvasBrush opacityBrush, Rect clipRectangle, CanvasGeometry clipGeometry, Matrix3x2 geometryTransform, CanvasLayerOptions options);
    [OverloadAttribute("DrawGlyphRun")]
public abstract virtual void DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush);
    [OverloadAttribute("DrawGlyphRunWithMeasuringMode")]
public abstract virtual void DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush, CanvasTextMeasuringMode measuringMode);
    [OverloadAttribute("DrawGlyphRunWithMeasuringModeAndDescription")]
public abstract virtual void DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, ICanvasBrush brush, CanvasTextMeasuringMode measuringMode, string localeName, string textString, Int32[] clusterMapIndices, UInt32 textPosition);
    [OverloadAttribute("CreateSpriteBatch")]
public abstract virtual CanvasSpriteBatch CreateSpriteBatch();
    [OverloadAttribute("CreateSpriteBatchWithSortMode")]
public abstract virtual CanvasSpriteBatch CreateSpriteBatch(CanvasSpriteSortMode sortMode);
    [OverloadAttribute("CreateSpriteBatchWithSortModeAndInterpolation")]
public abstract virtual CanvasSpriteBatch CreateSpriteBatch(CanvasSpriteSortMode sortMode, CanvasImageInterpolation interpolation);
    [OverloadAttribute("CreateSpriteBatchWithSortModeAndInterpolationAndOptions")]
public abstract virtual CanvasSpriteBatch CreateSpriteBatch(CanvasSpriteSortMode sortMode, CanvasImageInterpolation interpolation, CanvasSpriteOptions options);
    public abstract virtual CanvasAntialiasing get_Antialiasing();
    public abstract virtual void set_Antialiasing(CanvasAntialiasing value);
    public abstract virtual CanvasBlend get_Blend();
    public abstract virtual void set_Blend(CanvasBlend value);
    public abstract virtual Nullable`1<CanvasBufferPrecision> get_EffectBufferPrecision();
    public abstract virtual void set_EffectBufferPrecision(Nullable`1<CanvasBufferPrecision> value);
    public abstract virtual BitmapSize get_EffectTileSize();
    public abstract virtual void set_EffectTileSize(BitmapSize value);
    public abstract virtual CanvasTextAntialiasing get_TextAntialiasing();
    public abstract virtual void set_TextAntialiasing(CanvasTextAntialiasing value);
    public abstract virtual CanvasTextRenderingParameters get_TextRenderingParameters();
    public abstract virtual void set_TextRenderingParameters(CanvasTextRenderingParameters value);
    public abstract virtual Matrix3x2 get_Transform();
    public abstract virtual void set_Transform(Matrix3x2 value);
    public abstract virtual CanvasUnits get_Units();
    public abstract virtual void set_Units(CanvasUnits value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("794966D3-6A64-47E9-8DA8-B46AAA24D53B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasImage")]
public interface Microsoft.Graphics.Canvas.ICanvasImage {
    [OverloadAttribute("GetBounds")]
public abstract virtual Rect GetBounds(ICanvasResourceCreator resourceCreator);
    [OverloadAttribute("GetBoundsWithTransform")]
public abstract virtual Rect GetBounds(ICanvasResourceCreator resourceCreator, Matrix3x2 transform);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C54EEA15-5A14-489A-8FA0-6E84541F922D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasImageStatics")]
internal interface Microsoft.Graphics.Canvas.ICanvasImageStatics {
    [DefaultOverloadAttribute]
[OverloadAttribute("SaveAsync")]
public abstract virtual IAsyncAction SaveAsync(ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat);
    [DefaultOverloadAttribute]
[OverloadAttribute("SaveWithQualityAsync")]
public abstract virtual IAsyncAction SaveAsync(ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality);
    [DefaultOverloadAttribute]
[OverloadAttribute("SaveWithQualityAndBufferPrecisionAsync")]
public abstract virtual IAsyncAction SaveAsync(ICanvasImage image, Rect sourceRectangle, float dpi, ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasBitmapFileFormat fileFormat, float quality, CanvasBufferPrecision bufferPrecision);
    public abstract virtual Single[] ComputeHistogram(ICanvasImage image, Rect sourceRectangle, ICanvasResourceCreator resourceCreator, EffectChannelSelect channelSelect, int numberOfBins);
    public abstract virtual bool IsHistogramSupported(CanvasDevice device);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7A0E8498-FBA9-4FB0-AA8C-6A48B5EE3E4F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasLock")]
internal interface Microsoft.Graphics.Canvas.ICanvasLock {
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("2D4C7349-9A32-41B9-B3CC-CAF1B7E1099B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasRenderTarget")]
internal interface Microsoft.Graphics.Canvas.ICanvasRenderTarget {
    public abstract virtual CanvasDrawingSession CreateDrawingSession();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("620DFDBB-9D08-406C-BFE6-D9B81E6DF8E7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory")]
internal interface Microsoft.Graphics.Canvas.ICanvasRenderTargetFactory {
    public abstract virtual CanvasRenderTarget CreateWithSize(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public abstract virtual CanvasRenderTarget CreateWithWidthAndHeight(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public abstract virtual CanvasRenderTarget CreateWithWidthAndHeightAndDpi(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public abstract virtual CanvasRenderTarget CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, DirectXPixelFormat format, CanvasAlphaMode alpha);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C7D1FE37-DD57-45D7-BCC1-15625A21E8D5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics")]
internal interface Microsoft.Graphics.Canvas.ICanvasRenderTargetStatics {
    [OverloadAttribute("CreateFromDirect3D11Surface")]
public abstract virtual CanvasRenderTarget CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface);
    [OverloadAttribute("CreateFromDirect3D11SurfaceWithDpi")]
public abstract virtual CanvasRenderTarget CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi);
    [OverloadAttribute("CreateFromDirect3D11SurfaceWithDpiAndAlpha")]
public abstract virtual CanvasRenderTarget CreateFromDirect3D11Surface(ICanvasResourceCreator resourceCreator, IDirect3DSurface surface, float dpi, CanvasAlphaMode alpha);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("8F6D8AA8-492F-4BC6-B3D0-E7F5EAE84B11")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasResourceCreator")]
public interface Microsoft.Graphics.Canvas.ICanvasResourceCreator {
    public CanvasDevice Device { get; }
    public abstract virtual CanvasDevice get_Device();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("1A75B512-E9FA-49E6-A876-38CAE194013E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi")]
public interface Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi {
    public float Dpi { get; }
    public abstract virtual float ConvertPixelsToDips(int pixels);
    public abstract virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public abstract virtual float get_Dpi();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A065DCE4-A7F2-4DF4-8405-EA9E3A215BF8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasSpriteBatch")]
internal interface Microsoft.Graphics.Canvas.ICanvasSpriteBatch {
    [OverloadAttribute("DrawToRect")]
public abstract virtual void Draw(CanvasBitmap bitmap, Rect destRect);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawAtOffset")]
public abstract virtual void Draw(CanvasBitmap bitmap, Vector2 offset);
    [OverloadAttribute("DrawWithTransform")]
public abstract virtual void Draw(CanvasBitmap bitmap, Matrix3x2 transform);
    [OverloadAttribute("DrawToRectWithTint")]
public abstract virtual void Draw(CanvasBitmap bitmap, Rect destRect, Vector4 tint);
    [OverloadAttribute("DrawAtOffsetWithTint")]
public abstract virtual void Draw(CanvasBitmap bitmap, Vector2 offset, Vector4 tint);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawWithTransformAndTint")]
public abstract virtual void Draw(CanvasBitmap bitmap, Matrix3x2 transform, Vector4 tint);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawToRectWithTintAndFlip")]
public abstract virtual void Draw(CanvasBitmap bitmap, Rect destRect, Vector4 tint, CanvasSpriteFlip flip);
    [OverloadAttribute("DrawWithTransformAndTintAndFlip")]
public abstract virtual void Draw(CanvasBitmap bitmap, Matrix3x2 transform, Vector4 tint, CanvasSpriteFlip flip);
    [OverloadAttribute("DrawAtOffsetWithTintAndTransform")]
public abstract virtual void Draw(CanvasBitmap bitmap, Vector2 offset, Vector4 tint, Vector2 origin, float rotation, Vector2 scale, CanvasSpriteFlip flip);
    [OverloadAttribute("DrawFromSpriteSheetToRect")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Rect destRect, Rect sourceRect);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawFromSpriteSheetAtOffset")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Vector2 offset, Rect sourceRect);
    [OverloadAttribute("DrawFromSpriteSheetWithTransform")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect);
    [OverloadAttribute("DrawFromSpriteSheetToRectWithTint")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Rect destRect, Rect sourceRect, Vector4 tint);
    [OverloadAttribute("DrawFromSpriteSheetAtOffsetWithTint")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Vector2 offset, Rect sourceRect, Vector4 tint);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawFromSpriteSheetWithTransformAndTint")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect, Vector4 tint);
    [DefaultOverloadAttribute]
[OverloadAttribute("DrawFromSpriteSheetToRectWithTintAndFlip")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Rect destRect, Rect sourceRect, Vector4 tint, CanvasSpriteFlip flip);
    [OverloadAttribute("DrawFromSpriteSheetWithTransformAndTintAndFlip")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Matrix3x2 transform, Rect sourceRect, Vector4 tint, CanvasSpriteFlip flip);
    [OverloadAttribute("DrawFromSpriteSheetAtOffsetWithTintAndTransform")]
public abstract virtual void DrawFromSpriteSheet(CanvasBitmap bitmap, Vector2 offset, Rect sourceRect, Vector4 tint, Vector2 origin, float rotation, Vector2 scale, CanvasSpriteFlip flip);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("851EB08D-9D01-4B57-9E94-24113151B74B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics")]
internal interface Microsoft.Graphics.Canvas.ICanvasSpriteBatchStatics {
    public abstract virtual bool IsSupported(CanvasDevice device);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("882E3C3A-5725-409C-9E76-F80B3BACF1B4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasSwapChain")]
internal interface Microsoft.Graphics.Canvas.ICanvasSwapChain {
    public CanvasAlphaMode AlphaMode { get; }
    public int BufferCount { get; }
    public DirectXPixelFormat Format { get; }
    public CanvasSwapChainRotation Rotation { get; public set; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    public Size SourceSize { get; public set; }
    public Matrix3x2 TransformMatrix { get; public set; }
    [OverloadAttribute("Present")]
public abstract virtual void Present();
    [OverloadAttribute("PresentWithSyncInterval")]
public abstract virtual void Present(int syncInterval);
    [OverloadAttribute("ResizeBuffersWithSize")]
public abstract virtual void ResizeBuffers(Size newSize);
    [OverloadAttribute("ResizeBuffersWithWidthAndHeight")]
public abstract virtual void ResizeBuffers(float newWidth, float newHeight);
    [OverloadAttribute("ResizeBuffersWithWidthAndHeightAndDpi")]
public abstract virtual void ResizeBuffers(float newWidth, float newHeight, float newDpi);
    [OverloadAttribute("ResizeBuffersWithAllOptions")]
public abstract virtual void ResizeBuffers(float newWidth, float newHeight, float newDpi, DirectXPixelFormat newFormat, int bufferCount);
    public abstract virtual CanvasDrawingSession CreateDrawingSession(Color clearColor);
    public abstract virtual void WaitForVerticalBlank();
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual int get_BufferCount();
    public abstract virtual DirectXPixelFormat get_Format();
    public abstract virtual CanvasSwapChainRotation get_Rotation();
    public abstract virtual void set_Rotation(CanvasSwapChainRotation value);
    public abstract virtual Size get_Size();
    public abstract virtual BitmapSize get_SizeInPixels();
    public abstract virtual Size get_SourceSize();
    public abstract virtual void set_SourceSize(Size value);
    public abstract virtual Matrix3x2 get_TransformMatrix();
    public abstract virtual void set_TransformMatrix(Matrix3x2 value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("133C25CB-ED3C-492B-BFFE-7509B521842B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasSwapChainFactory")]
internal interface Microsoft.Graphics.Canvas.ICanvasSwapChainFactory {
    public abstract virtual CanvasSwapChain CreateWithSize(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public abstract virtual CanvasSwapChain CreateWithWidthAndHeight(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public abstract virtual CanvasSwapChain CreateWithWidthAndHeightAndDpi(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public abstract virtual CanvasSwapChain CreateWithAllOptions(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, DirectXPixelFormat format, int bufferCount, CanvasAlphaMode alphaMode);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("05376D8F-3E8D-4A82-9838-691680D32A52")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasSwapChainStatics")]
internal interface Microsoft.Graphics.Canvas.ICanvasSwapChainStatics {
    [OverloadAttribute("CreateForCoreWindowWithDpi")]
public abstract virtual CanvasSwapChain CreateForCoreWindow(ICanvasResourceCreator resourceCreator, CoreWindow coreWindow, float dpi);
    [OverloadAttribute("CreateForCoreWindowWithAllOptions")]
public abstract virtual CanvasSwapChain CreateForCoreWindow(ICanvasResourceCreator resourceCreator, CoreWindow coreWindow, float width, float height, float dpi, DirectXPixelFormat format, int bufferCount);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("707D8BB0-05F9-484C-9EE2-179E0681C8A7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasVirtualBitmap")]
internal interface Microsoft.Graphics.Canvas.ICanvasVirtualBitmap {
    public Rect Bounds { get; }
    public CanvasDevice Device { get; }
    public bool IsCachedOnDemand { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    public abstract virtual Rect get_Bounds();
    public abstract virtual CanvasDevice get_Device();
    public abstract virtual bool get_IsCachedOnDemand();
    public abstract virtual Size get_Size();
    public abstract virtual BitmapSize get_SizeInPixels();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("B2F1F8E9-0770-4DD4-956D-78D911390957")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics")]
internal interface Microsoft.Graphics.Canvas.ICanvasVirtualBitmapStatics {
    [OverloadAttribute("LoadAsyncFromFileName")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName);
    [OverloadAttribute("LoadAsyncFromFileNameWithOptions")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, CanvasVirtualBitmapOptions options);
    [OverloadAttribute("LoadAsyncFromFileNameWithOptionsAndAlpha")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, string fileName, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    [OverloadAttribute("LoadAsyncFromUri")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri);
    [OverloadAttribute("LoadAsyncFromUriWithOptions")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, CanvasVirtualBitmapOptions options);
    [OverloadAttribute("LoadAsyncFromUriWithOptionsAndAlpha")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, Uri uri, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
    [DefaultOverloadAttribute]
[OverloadAttribute("LoadAsyncFromStream")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    [DefaultOverloadAttribute]
[OverloadAttribute("LoadAsyncFromStreamWithOptions")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasVirtualBitmapOptions options);
    [DefaultOverloadAttribute]
[OverloadAttribute("LoadAsyncFromStreamWithOptionsAndAlpha")]
public abstract virtual IAsyncOperation`1<CanvasVirtualBitmap> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream, CanvasVirtualBitmapOptions options, CanvasAlphaMode alpha);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs")]
[CanvasPreviewEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs")]
public class Microsoft.Graphics.Canvas.Printing.CanvasPreviewEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDrawingSession DrawingSession { get; }
    public UInt32 PageNumber { get; }
    public PrintTaskOptions PrintTaskOptions { get; }
    internal CanvasPreviewEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPreviewEventArgs();
    public static CanvasPreviewEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasPreviewEventArgs x, CanvasPreviewEventArgs y);
    public static bool op_Inequality(CanvasPreviewEventArgs x, CanvasPreviewEventArgs y);
    public sealed virtual bool Equals(CanvasPreviewEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasPrintDeferral GetDeferral();
    public CanvasDrawingSession get_DrawingSession();
    public UInt32 get_PageNumber();
    public PrintTaskOptions get_PrintTaskOptions();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral")]
[CanvasPrintDeferralRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral")]
public class Microsoft.Graphics.Canvas.Printing.CanvasPrintDeferral : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintDeferral { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal CanvasPrintDeferral(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintDeferral();
    public static CanvasPrintDeferral FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasPrintDeferral x, CanvasPrintDeferral y);
    public static bool op_Inequality(CanvasPrintDeferral x, CanvasPrintDeferral y);
    public sealed virtual bool Equals(CanvasPrintDeferral other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void Complete();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument")]
[CanvasPrintDocumentRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument")]
public class Microsoft.Graphics.Canvas.Printing.CanvasPrintDocument : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Windows_Graphics_Printing_IPrintDocumentSource;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument { get; }
    private IObjectReference _objRef_global__Windows_Graphics_Printing_IPrintDocumentSource { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public CanvasPrintDocument(CanvasDevice device);
    internal CanvasPrintDocument(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocument();
    private IObjectReference Make___objRef_global__Windows_Graphics_Printing_IPrintDocumentSource();
    private IObjectReference get__objRef_global__Windows_Graphics_Printing_IPrintDocumentSource();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintDocumentFactory();
    public static CanvasPrintDocument FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasPrintDocument x, CanvasPrintDocument y);
    public static bool op_Inequality(CanvasPrintDocument x, CanvasPrintDocument y);
    public sealed virtual bool Equals(CanvasPrintDocument other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void InvalidatePreview();
    public void SetPageCount(UInt32 count);
    public void SetIntermediatePageCount(UInt32 count);
    public void add_Preview(TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs> value);
    public void remove_Preview(TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs> value);
    public void add_Print(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs> value);
    public void remove_Print(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs> value);
    public void add_PrintTaskOptionsChanged(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs> value);
    public void remove_PrintTaskOptionsChanged(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs> value);
    public sealed virtual void Dispose();
    public sealed virtual CanvasDevice get_Device();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs")]
[CanvasPrintEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs")]
public class Microsoft.Graphics.Canvas.Printing.CanvasPrintEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Dpi { get; public set; }
    public PrintTaskOptions PrintTaskOptions { get; }
    internal CanvasPrintEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintEventArgs();
    public static CanvasPrintEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasPrintEventArgs x, CanvasPrintEventArgs y);
    public static bool op_Inequality(CanvasPrintEventArgs x, CanvasPrintEventArgs y);
    public sealed virtual bool Equals(CanvasPrintEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasPrintDeferral GetDeferral();
    public CanvasDrawingSession CreateDrawingSession();
    public float get_Dpi();
    public void set_Dpi(float value);
    public PrintTaskOptions get_PrintTaskOptions();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs")]
[CanvasPrintTaskOptionsChangedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs")]
public class Microsoft.Graphics.Canvas.Printing.CanvasPrintTaskOptionsChangedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public UInt32 CurrentPreviewPageNumber { get; }
    public UInt32 NewPreviewPageNumber { get; public set; }
    public PrintTaskOptions PrintTaskOptions { get; }
    internal CanvasPrintTaskOptionsChangedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Printing_ICanvasPrintTaskOptionsChangedEventArgs();
    public static CanvasPrintTaskOptionsChangedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasPrintTaskOptionsChangedEventArgs x, CanvasPrintTaskOptionsChangedEventArgs y);
    public static bool op_Inequality(CanvasPrintTaskOptionsChangedEventArgs x, CanvasPrintTaskOptionsChangedEventArgs y);
    public sealed virtual bool Equals(CanvasPrintTaskOptionsChangedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasPrintDeferral GetDeferral();
    public UInt32 get_CurrentPreviewPageNumber();
    public UInt32 get_NewPreviewPageNumber();
    public void set_NewPreviewPageNumber(UInt32 value);
    public PrintTaskOptions get_PrintTaskOptions();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0A6A80A0-B07D-4DB2-BDEB-0368BB18C0F8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs")]
internal interface Microsoft.Graphics.Canvas.Printing.ICanvasPreviewEventArgs {
    public CanvasDrawingSession DrawingSession { get; }
    public UInt32 PageNumber { get; }
    public PrintTaskOptions PrintTaskOptions { get; }
    public abstract virtual CanvasPrintDeferral GetDeferral();
    public abstract virtual CanvasDrawingSession get_DrawingSession();
    public abstract virtual UInt32 get_PageNumber();
    public abstract virtual PrintTaskOptions get_PrintTaskOptions();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("08CA99A2-5801-4EA4-8687-896CBDA69A47")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral")]
internal interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDeferral {
    public abstract virtual void Complete();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0A99CDEE-BF11-49D0-AA34-3BA5C32C51A5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument")]
internal interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocument {
    public abstract virtual void InvalidatePreview();
    public abstract virtual void SetPageCount(UInt32 count);
    public abstract virtual void SetIntermediatePageCount(UInt32 count);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Preview(TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Preview(TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Print(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Print(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PrintTaskOptionsChanged(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PrintTaskOptionsChanged(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A201AF1E-CE4A-401D-A719-2BF004D5C26A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory")]
internal interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintDocumentFactory {
    public abstract virtual CanvasPrintDocument CreateWithDevice(CanvasDevice device);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0C6148C4-0216-4561-A817-34C8942AAC8B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs")]
internal interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintEventArgs {
    public float Dpi { get; public set; }
    public PrintTaskOptions PrintTaskOptions { get; }
    public abstract virtual CanvasPrintDeferral GetDeferral();
    public abstract virtual CanvasDrawingSession CreateDrawingSession();
    public abstract virtual float get_Dpi();
    public abstract virtual void set_Dpi(float value);
    public abstract virtual PrintTaskOptions get_PrintTaskOptions();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F92089BA-6C99-4CAC-B28A-B5DCEC7A310D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs")]
internal interface Microsoft.Graphics.Canvas.Printing.ICanvasPrintTaskOptionsChangedEventArgs {
    public UInt32 CurrentPreviewPageNumber { get; }
    public UInt32 NewPreviewPageNumber { get; public set; }
    public PrintTaskOptions PrintTaskOptions { get; }
    public abstract virtual CanvasPrintDeferral GetDeferral();
    public abstract virtual UInt32 get_CurrentPreviewPageNumber();
    public abstract virtual UInt32 get_NewPreviewPageNumber();
    public abstract virtual void set_NewPreviewPageNumber(UInt32 value);
    public abstract virtual PrintTaskOptions get_PrintTaskOptions();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment : Enum {
    public int value__;
    public static CanvasSvgAspectAlignment None;
    public static CanvasSvgAspectAlignment XMinYMin;
    public static CanvasSvgAspectAlignment XMidYMin;
    public static CanvasSvgAspectAlignment XMaxYMin;
    public static CanvasSvgAspectAlignment XMinYMid;
    public static CanvasSvgAspectAlignment XMidYMid;
    public static CanvasSvgAspectAlignment XMaxYMid;
    public static CanvasSvgAspectAlignment XMinYMax;
    public static CanvasSvgAspectAlignment XMidYMax;
    public static CanvasSvgAspectAlignment XMaxYMax;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling : Enum {
    public int value__;
    public static CanvasSvgAspectScaling Meet;
    public static CanvasSvgAspectScaling Slice;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay : Enum {
    public int value__;
    public static CanvasSvgDisplay Inline;
    public static CanvasSvgDisplay None;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument")]
[CanvasSvgDocumentRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument")]
public class Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public CanvasSvgNamedElement Root { get; public set; }
    public CanvasSvgDocument(ICanvasResourceCreator resourceCreator);
    internal CanvasSvgDocument(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocument();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgDocumentStatics();
    public static CanvasSvgDocument LoadFromXml(ICanvasResourceCreator resourceCreator, string xmlString);
    public static IAsyncOperation`1<CanvasSvgDocument> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    public static bool IsSupported(CanvasDevice device);
    public static CanvasSvgDocument FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSvgDocument x, CanvasSvgDocument y);
    public static bool op_Inequality(CanvasSvgDocument x, CanvasSvgDocument y);
    public sealed virtual bool Equals(CanvasSvgDocument other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public string GetXml();
    public IAsyncAction SaveAsync(IRandomAccessStream stream);
    public CanvasSvgNamedElement FindElementById(string id);
    public CanvasSvgPaintAttribute CreatePaintAttribute();
    public CanvasSvgPaintAttribute CreatePaintAttribute(CanvasSvgPaintType paintType, Color color, string id);
    public CanvasSvgPathAttribute CreatePathAttribute();
    public CanvasSvgPathAttribute CreatePathAttribute(Single[] segmentData, CanvasSvgPathCommand[] commands);
    public CanvasSvgPointsAttribute CreatePointsAttribute();
    public CanvasSvgPointsAttribute CreatePointsAttribute(Vector2[] points);
    public CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute();
    public CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute(Single[] dashValues, CanvasSvgLengthUnits[] unitValues);
    public CanvasSvgNamedElement LoadElementFromXml(string xmlString);
    public IAsyncOperation`1<CanvasSvgNamedElement> LoadElementAsync(IRandomAccessStream stream);
    public sealed virtual void Dispose();
    public CanvasDevice get_Device();
    public CanvasSvgNamedElement get_Root();
    public void set_Root(CanvasSvgNamedElement value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits : Enum {
    public int value__;
    public static CanvasSvgLengthUnits Number;
    public static CanvasSvgLengthUnits Percentage;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement")]
[CanvasSvgNamedElementRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement")]
public class Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasSvgDocument ContainingDocument { get; }
    public CanvasDevice Device { get; }
    public ICanvasSvgElement FirstChild { get; }
    public bool HasChildren { get; }
    public ICanvasSvgElement LastChild { get; }
    public CanvasSvgNamedElement Parent { get; }
    public String[] SpecifiedAttributes { get; }
    public string Tag { get; }
    internal CanvasSvgNamedElement(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgNamedElement();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgElement();
    public static CanvasSvgNamedElement FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSvgNamedElement x, CanvasSvgNamedElement y);
    public static bool op_Inequality(CanvasSvgNamedElement x, CanvasSvgNamedElement y);
    public sealed virtual bool Equals(CanvasSvgNamedElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void AppendChild(ICanvasSvgElement child);
    public CanvasSvgNamedElement CreateAndAppendNamedChildElement(string childName);
    public CanvasSvgTextElement CreateAndAppendTextChildElement(string textContent);
    public ICanvasSvgElement GetPreviousSibling(ICanvasSvgElement child);
    public ICanvasSvgElement GetNextSibling(ICanvasSvgElement child);
    public void InsertChildBefore(ICanvasSvgElement child, ICanvasSvgElement referenceChild);
    public bool IsAttributeSpecified(string attributeName);
    public bool IsAttributeSpecified(string attributeName, bool inherited);
    public void RemoveAttribute(string attributeName);
    public void RemoveChild(ICanvasSvgElement child);
    public void ReplaceChild(ICanvasSvgElement newChild, ICanvasSvgElement oldChild);
    public void SetStringAttribute(string attributeName, string attributeValue);
    public string GetStringAttribute(string attributeName);
    public void SetAttribute(string attributeName, ICanvasSvgAttribute attributeValue);
    public ICanvasSvgAttribute GetAttribute(string attributeName);
    public void SetIdAttribute(string attributeName, string attributeValue);
    public string GetIdAttribute(string attributeName);
    public void SetFloatAttribute(string attributeName, float attributeValue);
    public float GetFloatAttribute(string attributeName);
    public void SetColorAttribute(string attributeName, Color attributeValue);
    public Color GetColorAttribute(string attributeName);
    public void SetFilledRegionDeterminationAttribute(string attributeName, CanvasFilledRegionDetermination attributeValue);
    public CanvasFilledRegionDetermination GetFilledRegionDeterminationAttribute(string attributeName);
    public void SetDisplayAttribute(string attributeName, CanvasSvgDisplay attributeValue);
    public CanvasSvgDisplay GetDisplayAttribute(string attributeName);
    public void SetOverflowAttribute(string attributeName, CanvasSvgOverflow attributeValue);
    public CanvasSvgOverflow GetOverflowAttribute(string attributeName);
    public void SetCapStyleAttribute(string attributeName, CanvasCapStyle attributeValue);
    public CanvasCapStyle GetCapStyleAttribute(string attributeName);
    public void SetLineJoinAttribute(string attributeName, CanvasLineJoin attributeValue);
    public CanvasLineJoin GetLineJoinAttribute(string attributeName);
    public void SetVisibilityAttribute(string attributeName, CanvasSvgVisibility attributeValue);
    public CanvasSvgVisibility GetVisibilityAttribute(string attributeName);
    public void SetTransformAttribute(string attributeName, Matrix3x2 attributeValue);
    public Matrix3x2 GetTransformAttribute(string attributeName);
    public void SetUnitsAttribute(string attributeName, CanvasSvgUnits attributeValue);
    public CanvasSvgUnits GetUnitsAttribute(string attributeName);
    public void SetEdgeBehaviorAttribute(string attributeName, CanvasEdgeBehavior attributeValue);
    public CanvasEdgeBehavior GetEdgeBehaviorAttribute(string attributeName);
    public void SetRectangleAttribute(string attributeName, Rect attributeValue);
    public Rect GetRectangleAttribute(string attributeName);
    public void SetLengthAttribute(string attributeName, float value, CanvasSvgLengthUnits units);
    public float GetLengthAttribute(string attributeName, CanvasSvgLengthUnits& units);
    public void SetAspectRatioAttribute(string attributeName, CanvasSvgAspectAlignment alignment, CanvasSvgAspectScaling meetOrSlice);
    public CanvasSvgAspectAlignment GetAspectRatioAttribute(string attributeName, CanvasSvgAspectScaling& meetOrSlice);
    public sealed virtual void Dispose();
    public sealed virtual CanvasSvgDocument get_ContainingDocument();
    public sealed virtual CanvasDevice get_Device();
    public ICanvasSvgElement get_FirstChild();
    public bool get_HasChildren();
    public ICanvasSvgElement get_LastChild();
    public sealed virtual CanvasSvgNamedElement get_Parent();
    public String[] get_SpecifiedAttributes();
    public string get_Tag();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow : Enum {
    public int value__;
    public static CanvasSvgOverflow DoNotClipToViewport;
    public static CanvasSvgOverflow ClipToViewport;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute")]
[CanvasSvgPaintAttributeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute")]
public class Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Color Color { get; public set; }
    public CanvasDevice Device { get; }
    public string Id { get; public set; }
    public CanvasSvgPaintType PaintType { get; public set; }
    internal CanvasSvgPaintAttribute(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgPaintAttribute();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasSvgPaintAttribute FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSvgPaintAttribute x, CanvasSvgPaintAttribute y);
    public static bool op_Inequality(CanvasSvgPaintAttribute x, CanvasSvgPaintAttribute y);
    public sealed virtual bool Equals(CanvasSvgPaintAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual ICanvasSvgAttribute Clone();
    public sealed virtual CanvasSvgNamedElement GetElement();
    public sealed virtual void Dispose();
    public Color get_Color();
    public void set_Color(Color value);
    public sealed virtual CanvasDevice get_Device();
    public string get_Id();
    public void set_Id(string value);
    public CanvasSvgPaintType get_PaintType();
    public void set_PaintType(CanvasSvgPaintType value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType : Enum {
    public int value__;
    public static CanvasSvgPaintType None;
    public static CanvasSvgPaintType Color;
    public static CanvasSvgPaintType CurrentColor;
    public static CanvasSvgPaintType Uri;
    public static CanvasSvgPaintType UriThenNone;
    public static CanvasSvgPaintType UriThenColor;
    public static CanvasSvgPaintType UriThenCurrentColor;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute")]
[CanvasSvgPathAttributeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute")]
public class Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasSvgPathCommand[] Commands { get; }
    public CanvasDevice Device { get; }
    public Single[] SegmentData { get; }
    internal CanvasSvgPathAttribute(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgPathAttribute();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasSvgPathAttribute FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSvgPathAttribute x, CanvasSvgPathAttribute y);
    public static bool op_Inequality(CanvasSvgPathAttribute x, CanvasSvgPathAttribute y);
    public sealed virtual bool Equals(CanvasSvgPathAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasGeometry CreatePathGeometry();
    public CanvasGeometry CreatePathGeometry(CanvasFilledRegionDetermination fill);
    public CanvasSvgPathCommand[] GetCommands(int startIndex, int elementCount);
    public Single[] GetSegmentData(int startIndex, int elementCount);
    public void RemoveCommandsAtEnd(int commandsCount);
    public void RemoveSegmentDataAtEnd(int commandsCount);
    public void SetCommands(int startIndex, CanvasSvgPathCommand[] commands);
    public void SetSegmentData(int startIndex, Single[] segmentData);
    public sealed virtual ICanvasSvgAttribute Clone();
    public sealed virtual CanvasSvgNamedElement GetElement();
    public sealed virtual void Dispose();
    public CanvasSvgPathCommand[] get_Commands();
    public sealed virtual CanvasDevice get_Device();
    public Single[] get_SegmentData();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand : Enum {
    public int value__;
    public static CanvasSvgPathCommand ClosePath;
    public static CanvasSvgPathCommand MoveAbsolute;
    public static CanvasSvgPathCommand MoveRelative;
    public static CanvasSvgPathCommand LineAbsolute;
    public static CanvasSvgPathCommand LineRelative;
    public static CanvasSvgPathCommand CubicAbsolute;
    public static CanvasSvgPathCommand CubicRelative;
    public static CanvasSvgPathCommand QuadraticAbsolute;
    public static CanvasSvgPathCommand QuadraticRelative;
    public static CanvasSvgPathCommand ArcAbsolute;
    public static CanvasSvgPathCommand ArcRelative;
    public static CanvasSvgPathCommand HorizontalAbsolute;
    public static CanvasSvgPathCommand HorizontalRelative;
    public static CanvasSvgPathCommand VerticalAbsolute;
    public static CanvasSvgPathCommand VerticalRelative;
    public static CanvasSvgPathCommand CubicSmoothAbsolute;
    public static CanvasSvgPathCommand CubicSmoothRelative;
    public static CanvasSvgPathCommand QuadraticSmoothAbsolute;
    public static CanvasSvgPathCommand QuadraticSmoothRelative;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute")]
[CanvasSvgPointsAttributeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute")]
public class Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    public Vector2[] Points { get; }
    internal CanvasSvgPointsAttribute(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgPointsAttribute();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasSvgPointsAttribute FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSvgPointsAttribute x, CanvasSvgPointsAttribute y);
    public static bool op_Inequality(CanvasSvgPointsAttribute x, CanvasSvgPointsAttribute y);
    public sealed virtual bool Equals(CanvasSvgPointsAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Vector2[] GetPoints(int startIndex, int elementCount);
    public void RemovePointsAtEnd(int pointCount);
    public void SetPoints(int startIndex, Vector2[] points);
    public sealed virtual ICanvasSvgAttribute Clone();
    public sealed virtual CanvasSvgNamedElement GetElement();
    public sealed virtual void Dispose();
    public sealed virtual CanvasDevice get_Device();
    public Vector2[] get_Points();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute")]
[CanvasSvgStrokeDashArrayAttributeRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute")]
public class Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDevice Device { get; }
    internal CanvasSvgStrokeDashArrayAttribute(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgStrokeDashArrayAttribute();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgAttribute();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasSvgStrokeDashArrayAttribute FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSvgStrokeDashArrayAttribute x, CanvasSvgStrokeDashArrayAttribute y);
    public static bool op_Inequality(CanvasSvgStrokeDashArrayAttribute x, CanvasSvgStrokeDashArrayAttribute y);
    public sealed virtual bool Equals(CanvasSvgStrokeDashArrayAttribute other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Single[] GetDashes();
    public Single[] GetDashes(int startIndex, int elementCount, CanvasSvgLengthUnits[]& outputUnitsElements);
    public void RemoveDashesAtEnd(int dashCount);
    public void SetDashes(int startIndex, Single[] dashes);
    public void SetDashes(int startIndex, Single[] dashes, CanvasSvgLengthUnits units);
    public void SetDashes(int startIndex, Single[] dashValues, CanvasSvgLengthUnits[] unitValues);
    public sealed virtual ICanvasSvgAttribute Clone();
    public sealed virtual CanvasSvgNamedElement GetElement();
    public sealed virtual void Dispose();
    public sealed virtual CanvasDevice get_Device();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement")]
[CanvasSvgTextElementRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement")]
public class Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgTextElement { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public string Text { get; public set; }
    internal CanvasSvgTextElement(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Svg_ICanvasSvgTextElement();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasSvgTextElement FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSvgTextElement x, CanvasSvgTextElement y);
    public static bool op_Inequality(CanvasSvgTextElement x, CanvasSvgTextElement y);
    public sealed virtual bool Equals(CanvasSvgTextElement other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public string get_Text();
    public void set_Text(string value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits : Enum {
    public int value__;
    public static CanvasSvgUnits UserSpaceOnUse;
    public static CanvasSvgUnits ObjectBoundingBox;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility>")]
public enum Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility : Enum {
    public int value__;
    public static CanvasSvgVisibility Visible;
    public static CanvasSvgVisibility Hidden;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD6E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute")]
public interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute {
    public CanvasDevice Device { get; }
    public abstract virtual ICanvasSvgAttribute Clone();
    public abstract virtual CanvasSvgNamedElement GetElement();
    public abstract virtual CanvasDevice get_Device();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A0E34929-3551-44FE-A670-D9B3FD800516")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument {
    public CanvasDevice Device { get; }
    public CanvasSvgNamedElement Root { get; public set; }
    public abstract virtual string GetXml();
    public abstract virtual IAsyncAction SaveAsync(IRandomAccessStream stream);
    public abstract virtual CanvasSvgNamedElement FindElementById(string id);
    [OverloadAttribute("CreatePaintAttributeWithDefaults")]
public abstract virtual CanvasSvgPaintAttribute CreatePaintAttribute();
    [DefaultOverloadAttribute]
[OverloadAttribute("CreatePaintAttribute")]
public abstract virtual CanvasSvgPaintAttribute CreatePaintAttribute(CanvasSvgPaintType paintType, Color color, string id);
    [OverloadAttribute("CreatePathAttributeWithDefaults")]
public abstract virtual CanvasSvgPathAttribute CreatePathAttribute();
    [DefaultOverloadAttribute]
[OverloadAttribute("CreatePathAttribute")]
public abstract virtual CanvasSvgPathAttribute CreatePathAttribute(Single[] segmentData, CanvasSvgPathCommand[] commands);
    [OverloadAttribute("CreatePointsAttributeWithDefaults")]
public abstract virtual CanvasSvgPointsAttribute CreatePointsAttribute();
    [DefaultOverloadAttribute]
[OverloadAttribute("CreatePointsAttribute")]
public abstract virtual CanvasSvgPointsAttribute CreatePointsAttribute(Vector2[] points);
    [OverloadAttribute("CreateStrokeDashArrayAttributeWithDefaults")]
public abstract virtual CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute();
    [DefaultOverloadAttribute]
[OverloadAttribute("CreateStrokeDashArrayAttribute")]
public abstract virtual CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute(Single[] dashValues, CanvasSvgLengthUnits[] unitValues);
    public abstract virtual CanvasSvgNamedElement LoadElementFromXml(string xmlString);
    public abstract virtual IAsyncOperation`1<CanvasSvgNamedElement> LoadElementAsync(IRandomAccessStream stream);
    public abstract virtual CanvasDevice get_Device();
    public abstract virtual CanvasSvgNamedElement get_Root();
    public abstract virtual void set_Root(CanvasSvgNamedElement value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BAB0F16D-4050-4EF6-8022-8A07E9E74A9D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory {
    public abstract virtual CanvasSvgDocument CreateEmpty(ICanvasResourceCreator resourceCreator);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7740E748-CB9A-453F-A678-8B3B3A7254D3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics {
    public abstract virtual CanvasSvgDocument LoadFromXml(ICanvasResourceCreator resourceCreator, string xmlString);
    public abstract virtual IAsyncOperation`1<CanvasSvgDocument> LoadAsync(ICanvasResourceCreator resourceCreator, IRandomAccessStream stream);
    public abstract virtual bool IsSupported(CanvasDevice device);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0775CB81-C555-45BF-9795-0FF59151C3BE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement")]
public interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement {
    public CanvasSvgDocument ContainingDocument { get; }
    public CanvasDevice Device { get; }
    public CanvasSvgNamedElement Parent { get; }
    public abstract virtual CanvasSvgDocument get_ContainingDocument();
    public abstract virtual CanvasDevice get_Device();
    public abstract virtual CanvasSvgNamedElement get_Parent();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("D8B7CB94-8167-495D-9C71-5E97E5D08D2B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement {
    public ICanvasSvgElement FirstChild { get; }
    public bool HasChildren { get; }
    public ICanvasSvgElement LastChild { get; }
    public String[] SpecifiedAttributes { get; }
    public string Tag { get; }
    public abstract virtual void AppendChild(ICanvasSvgElement child);
    public abstract virtual CanvasSvgNamedElement CreateAndAppendNamedChildElement(string childName);
    public abstract virtual CanvasSvgTextElement CreateAndAppendTextChildElement(string textContent);
    public abstract virtual ICanvasSvgElement GetPreviousSibling(ICanvasSvgElement child);
    public abstract virtual ICanvasSvgElement GetNextSibling(ICanvasSvgElement child);
    public abstract virtual void InsertChildBefore(ICanvasSvgElement child, ICanvasSvgElement referenceChild);
    [OverloadAttribute("IsAttributeSpecified")]
public abstract virtual bool IsAttributeSpecified(string attributeName);
    [DefaultOverloadAttribute]
[OverloadAttribute("IsAttributeSpecifiedWithInherhited")]
public abstract virtual bool IsAttributeSpecified(string attributeName, bool inherited);
    public abstract virtual void RemoveAttribute(string attributeName);
    public abstract virtual void RemoveChild(ICanvasSvgElement child);
    public abstract virtual void ReplaceChild(ICanvasSvgElement newChild, ICanvasSvgElement oldChild);
    public abstract virtual void SetStringAttribute(string attributeName, string attributeValue);
    public abstract virtual string GetStringAttribute(string attributeName);
    public abstract virtual void SetAttribute(string attributeName, ICanvasSvgAttribute attributeValue);
    public abstract virtual ICanvasSvgAttribute GetAttribute(string attributeName);
    public abstract virtual void SetIdAttribute(string attributeName, string attributeValue);
    public abstract virtual string GetIdAttribute(string attributeName);
    public abstract virtual void SetFloatAttribute(string attributeName, float attributeValue);
    public abstract virtual float GetFloatAttribute(string attributeName);
    public abstract virtual void SetColorAttribute(string attributeName, Color attributeValue);
    public abstract virtual Color GetColorAttribute(string attributeName);
    public abstract virtual void SetFilledRegionDeterminationAttribute(string attributeName, CanvasFilledRegionDetermination attributeValue);
    public abstract virtual CanvasFilledRegionDetermination GetFilledRegionDeterminationAttribute(string attributeName);
    public abstract virtual void SetDisplayAttribute(string attributeName, CanvasSvgDisplay attributeValue);
    public abstract virtual CanvasSvgDisplay GetDisplayAttribute(string attributeName);
    public abstract virtual void SetOverflowAttribute(string attributeName, CanvasSvgOverflow attributeValue);
    public abstract virtual CanvasSvgOverflow GetOverflowAttribute(string attributeName);
    public abstract virtual void SetCapStyleAttribute(string attributeName, CanvasCapStyle attributeValue);
    public abstract virtual CanvasCapStyle GetCapStyleAttribute(string attributeName);
    public abstract virtual void SetLineJoinAttribute(string attributeName, CanvasLineJoin attributeValue);
    public abstract virtual CanvasLineJoin GetLineJoinAttribute(string attributeName);
    public abstract virtual void SetVisibilityAttribute(string attributeName, CanvasSvgVisibility attributeValue);
    public abstract virtual CanvasSvgVisibility GetVisibilityAttribute(string attributeName);
    public abstract virtual void SetTransformAttribute(string attributeName, Matrix3x2 attributeValue);
    public abstract virtual Matrix3x2 GetTransformAttribute(string attributeName);
    public abstract virtual void SetUnitsAttribute(string attributeName, CanvasSvgUnits attributeValue);
    public abstract virtual CanvasSvgUnits GetUnitsAttribute(string attributeName);
    public abstract virtual void SetEdgeBehaviorAttribute(string attributeName, CanvasEdgeBehavior attributeValue);
    public abstract virtual CanvasEdgeBehavior GetEdgeBehaviorAttribute(string attributeName);
    public abstract virtual void SetRectangleAttribute(string attributeName, Rect attributeValue);
    public abstract virtual Rect GetRectangleAttribute(string attributeName);
    public abstract virtual void SetLengthAttribute(string attributeName, float value, CanvasSvgLengthUnits units);
    public abstract virtual float GetLengthAttribute(string attributeName, CanvasSvgLengthUnits& units);
    public abstract virtual void SetAspectRatioAttribute(string attributeName, CanvasSvgAspectAlignment alignment, CanvasSvgAspectScaling meetOrSlice);
    public abstract virtual CanvasSvgAspectAlignment GetAspectRatioAttribute(string attributeName, CanvasSvgAspectScaling& meetOrSlice);
    public abstract virtual ICanvasSvgElement get_FirstChild();
    public abstract virtual bool get_HasChildren();
    public abstract virtual ICanvasSvgElement get_LastChild();
    public abstract virtual String[] get_SpecifiedAttributes();
    public abstract virtual string get_Tag();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("653786A8-F3AB-4083-991D-9748AA86BD6E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute {
    public Color Color { get; public set; }
    public string Id { get; public set; }
    public CanvasSvgPaintType PaintType { get; public set; }
    public abstract virtual Color get_Color();
    public abstract virtual void set_Color(Color value);
    public abstract virtual string get_Id();
    public abstract virtual void set_Id(string value);
    public abstract virtual CanvasSvgPaintType get_PaintType();
    public abstract virtual void set_PaintType(CanvasSvgPaintType value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("652786A8-F3AB-4083-991D-9748AB86BD6E")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute {
    public CanvasSvgPathCommand[] Commands { get; }
    public Single[] SegmentData { get; }
    [OverloadAttribute("CreatePathGeometry")]
public abstract virtual CanvasGeometry CreatePathGeometry();
    [DefaultOverloadAttribute]
[OverloadAttribute("CreatePathGeometryWithFill")]
public abstract virtual CanvasGeometry CreatePathGeometry(CanvasFilledRegionDetermination fill);
    public abstract virtual CanvasSvgPathCommand[] GetCommands(int startIndex, int elementCount);
    public abstract virtual Single[] GetSegmentData(int startIndex, int elementCount);
    public abstract virtual void RemoveCommandsAtEnd(int commandsCount);
    public abstract virtual void RemoveSegmentDataAtEnd(int commandsCount);
    public abstract virtual void SetCommands(int startIndex, CanvasSvgPathCommand[] commands);
    public abstract virtual void SetSegmentData(int startIndex, Single[] segmentData);
    public abstract virtual CanvasSvgPathCommand[] get_Commands();
    public abstract virtual Single[] get_SegmentData();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD6F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute {
    public Vector2[] Points { get; }
    public abstract virtual Vector2[] GetPoints(int startIndex, int elementCount);
    public abstract virtual void RemovePointsAtEnd(int pointCount);
    public abstract virtual void SetPoints(int startIndex, Vector2[] points);
    public abstract virtual Vector2[] get_Points();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD70")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute {
    [OverloadAttribute("GetDashes")]
public abstract virtual Single[] GetDashes();
    [DefaultOverloadAttribute]
[OverloadAttribute("GetDashesWithUnits")]
public abstract virtual Single[] GetDashes(int startIndex, int elementCount, CanvasSvgLengthUnits[]& outputUnitsElements);
    public abstract virtual void RemoveDashesAtEnd(int dashCount);
    [OverloadAttribute("SetDashes")]
public abstract virtual void SetDashes(int startIndex, Single[] dashes);
    [OverloadAttribute("SetDashesWithUnit")]
public abstract virtual void SetDashes(int startIndex, Single[] dashes, CanvasSvgLengthUnits units);
    [DefaultOverloadAttribute]
[OverloadAttribute("SetDashesWithUnits")]
public abstract virtual void SetDashes(int startIndex, Single[] dashValues, CanvasSvgLengthUnits[] unitValues);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("652786A8-F3AB-4083-991D-9748AA86BD6D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement")]
internal interface Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement {
    public string Text { get; public set; }
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi;u4;u4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>")]
public class Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi : ValueType {
    public UInt32 ExplicitLevel;
    public UInt32 ResolvedLevel;
    public CanvasAnalyzedBidi(UInt32 _ExplicitLevel, UInt32 _ResolvedLevel);
    public static bool op_Equality(CanvasAnalyzedBidi x, CanvasAnalyzedBidi y);
    public static bool op_Inequality(CanvasAnalyzedBidi x, CanvasAnalyzedBidi y);
    public sealed virtual bool Equals(CanvasAnalyzedBidi other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint;enum(Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition;i4);enum(Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition;i4);b1;b1)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint,ABI.Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint>")]
public class Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint : ValueType {
    public CanvasLineBreakCondition BreakBefore;
    public CanvasLineBreakCondition BreakAfter;
    public bool IsWhitespace;
    public bool IsSoftHyphen;
    public CanvasAnalyzedBreakpoint(CanvasLineBreakCondition _BreakBefore, CanvasLineBreakCondition _BreakAfter, bool _IsWhitespace, bool _IsSoftHyphen);
    public static bool op_Equality(CanvasAnalyzedBreakpoint x, CanvasAnalyzedBreakpoint y);
    public static bool op_Inequality(CanvasAnalyzedBreakpoint x, CanvasAnalyzedBreakpoint y);
    public sealed virtual bool Equals(CanvasAnalyzedBreakpoint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation;enum(Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation;i4);u4;b1;b1)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation,ABI.Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>")]
public class Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation : ValueType {
    public CanvasGlyphOrientation GlyphOrientation;
    public UInt32 AdjustedBidiLevel;
    public bool IsSideways;
    public bool IsRightToLeft;
    public CanvasAnalyzedGlyphOrientation(CanvasGlyphOrientation _GlyphOrientation, UInt32 _AdjustedBidiLevel, bool _IsSideways, bool _IsRightToLeft);
    public static bool op_Equality(CanvasAnalyzedGlyphOrientation x, CanvasAnalyzedGlyphOrientation y);
    public static bool op_Inequality(CanvasAnalyzedGlyphOrientation x, CanvasAnalyzedGlyphOrientation y);
    public sealed virtual bool Equals(CanvasAnalyzedGlyphOrientation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript;i4;enum(Microsoft.Graphics.Canvas.Text.CanvasScriptShape;i4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>")]
public class Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript : ValueType {
    public int ScriptIdentifier;
    public CanvasScriptShape Shape;
    public CanvasAnalyzedScript(int _ScriptIdentifier, CanvasScriptShape _Shape);
    public static bool op_Equality(CanvasAnalyzedScript x, CanvasAnalyzedScript y);
    public static bool op_Inequality(CanvasAnalyzedScript x, CanvasAnalyzedScript y);
    public sealed virtual bool Equals(CanvasAnalyzedScript other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange;i4;i4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasCharacterRange>")]
public class Microsoft.Graphics.Canvas.Text.CanvasCharacterRange : ValueType {
    public int CharacterIndex;
    public int CharacterCount;
    public CanvasCharacterRange(int _CharacterIndex, int _CharacterCount);
    public static bool op_Equality(CanvasCharacterRange x, CanvasCharacterRange y);
    public static bool op_Inequality(CanvasCharacterRange x, CanvasCharacterRange y);
    public sealed virtual bool Equals(CanvasCharacterRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics;i4;f4;enum(Microsoft.Graphics.Canvas.Text.CanvasClusterProperties;u4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics,Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics>")]
public class Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics : ValueType {
    public int CharacterCount;
    public float Width;
    public CanvasClusterProperties Properties;
    public CanvasClusterMetrics(int _CharacterCount, float _Width, CanvasClusterProperties _Properties);
    public static bool op_Equality(CanvasClusterMetrics x, CanvasClusterMetrics y);
    public static bool op_Inequality(CanvasClusterMetrics x, CanvasClusterMetrics y);
    public sealed virtual bool Equals(CanvasClusterMetrics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasClusterProperties>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasClusterProperties : Enum {
    public UInt32 value__;
    public static CanvasClusterProperties None;
    public static CanvasClusterProperties CanWrapLineAfter;
    public static CanvasClusterProperties Whitespace;
    public static CanvasClusterProperties Newline;
    public static CanvasClusterProperties SoftHyphen;
    public static CanvasClusterProperties RightToLeft;
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions : Enum {
    public UInt32 value__;
    public static CanvasDrawTextOptions Default;
    public static CanvasDrawTextOptions NoPixelSnap;
    public static CanvasDrawTextOptions Clip;
    public static CanvasDrawTextOptions EnableColorFont;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasFontFace")]
[CanvasFontFaceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasFontFace")]
public class Microsoft.Graphics.Canvas.Text.CanvasFontFace : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontFace { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public float Ascent { get; }
    public float CapHeight { get; }
    public float CaretOffset { get; }
    public float CaretSlopeRise { get; }
    public float CaretSlopeRun { get; }
    public float Descent { get; }
    public IReadOnlyDictionary`2<string, string> FaceNames { get; }
    public IReadOnlyDictionary`2<string, string> FamilyNames { get; }
    public CanvasFontFileFormatType FileFormatType { get; }
    public Rect GlyphBox { get; }
    public UInt32 GlyphCount { get; }
    public bool HasTypographicMetrics { get; }
    public bool HasVerticalGlyphVariants { get; }
    public bool IsMonospaced { get; }
    public bool IsSymbolFont { get; }
    public float LineGap { get; }
    public float LowercaseLetterHeight { get; }
    public Byte[] Panose { get; }
    public CanvasFontSimulations Simulations { get; }
    public FontStretch Stretch { get; }
    public float StrikethroughPosition { get; }
    public float StrikethroughThickness { get; }
    public FontStyle Style { get; }
    public Vector2 SubscriptPosition { get; }
    public Size SubscriptSize { get; }
    public Vector2 SuperscriptPosition { get; }
    public Size SuperscriptSize { get; }
    public float UnderlinePosition { get; }
    public float UnderlineThickness { get; }
    public CanvasUnicodeRange[] UnicodeRanges { get; }
    public FontWeight Weight { get; }
    internal CanvasFontFace(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontFace();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    public static CanvasFontFace FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasFontFace x, CanvasFontFace y);
    public static bool op_Inequality(CanvasFontFace x, CanvasFontFace y);
    public sealed virtual bool Equals(CanvasFontFace other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasTextRenderingMode GetRecommendedRenderingMode(float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters);
    public CanvasTextRenderingMode GetRecommendedRenderingMode(float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters, Matrix3x2 transform, bool isSideways, CanvasAntialiasing outlineThreshold);
    public CanvasTextGridFit GetRecommendedGridFit(float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters, Matrix3x2 transform, bool isSideways, CanvasAntialiasing outlineThreshold);
    public Int32[] GetVerticalGlyphVariants(Int32[] inputElements);
    public Int32[] GetGlyphIndices(UInt32[] inputElements);
    public CanvasGlyphMetrics[] GetGlyphMetrics(Int32[] inputElements, bool isSideways);
    public CanvasGlyphMetrics[] GetGdiCompatibleGlyphMetrics(float fontSize, float dpi, Matrix3x2 transform, bool useGdiNatural, Int32[] inputElements, bool isSideways);
    public IReadOnlyDictionary`2<string, string> GetInformationalStrings(CanvasFontInformation fontInformation);
    public bool HasCharacter(UInt32 unicodeValue);
    public Rect GetGlyphRunBounds(CanvasDrawingSession drawingSession, Vector2 point, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel);
    public Rect GetGlyphRunBounds(CanvasDrawingSession drawingSession, Vector2 point, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, CanvasTextMeasuringMode measuringMode);
    public CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(CanvasAnalyzedScript script);
    public CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(CanvasAnalyzedScript script, string locale);
    public Boolean[] GetTypographicFeatureGlyphSupport(CanvasAnalyzedScript script, CanvasTypographyFeatureName typographicFeatureName, CanvasGlyph[] glyphsElements);
    public Boolean[] GetTypographicFeatureGlyphSupport(CanvasAnalyzedScript script, CanvasTypographyFeatureName typographicFeatureName, CanvasGlyph[] glyphsElements, string locale);
    public sealed virtual void Dispose();
    public float get_Ascent();
    public float get_CapHeight();
    public float get_CaretOffset();
    public float get_CaretSlopeRise();
    public float get_CaretSlopeRun();
    public float get_Descent();
    public IReadOnlyDictionary`2<string, string> get_FaceNames();
    public IReadOnlyDictionary`2<string, string> get_FamilyNames();
    public CanvasFontFileFormatType get_FileFormatType();
    public Rect get_GlyphBox();
    public UInt32 get_GlyphCount();
    public bool get_HasTypographicMetrics();
    public bool get_HasVerticalGlyphVariants();
    public bool get_IsMonospaced();
    public bool get_IsSymbolFont();
    public float get_LineGap();
    public float get_LowercaseLetterHeight();
    public Byte[] get_Panose();
    public CanvasFontSimulations get_Simulations();
    public FontStretch get_Stretch();
    public float get_StrikethroughPosition();
    public float get_StrikethroughThickness();
    public FontStyle get_Style();
    public Vector2 get_SubscriptPosition();
    public Size get_SubscriptSize();
    public Vector2 get_SuperscriptPosition();
    public Size get_SuperscriptSize();
    public float get_UnderlinePosition();
    public float get_UnderlineThickness();
    public CanvasUnicodeRange[] get_UnicodeRanges();
    public FontWeight get_Weight();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType : Enum {
    public int value__;
    public static CanvasFontFileFormatType Cff;
    public static CanvasFontFileFormatType TrueType;
    public static CanvasFontFileFormatType TrueTypeCollection;
    public static CanvasFontFileFormatType Type1;
    public static CanvasFontFileFormatType Vector;
    public static CanvasFontFileFormatType Bitmap;
    public static CanvasFontFileFormatType Unknown;
    public static CanvasFontFileFormatType RawCff;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasFontInformation>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasFontInformation : Enum {
    public int value__;
    public static CanvasFontInformation None;
    public static CanvasFontInformation CopyrightNotice;
    public static CanvasFontInformation VersionStrings;
    public static CanvasFontInformation Trademark;
    public static CanvasFontInformation Manufacturer;
    public static CanvasFontInformation Designer;
    public static CanvasFontInformation DesignerUrl;
    public static CanvasFontInformation Description;
    public static CanvasFontInformation FontVendorUrl;
    public static CanvasFontInformation LicenseDescription;
    public static CanvasFontInformation LicenseInfoUrl;
    public static CanvasFontInformation Win32FamilyNames;
    public static CanvasFontInformation Win32SubfamilyNames;
    public static CanvasFontInformation PreferredFamilyNames;
    public static CanvasFontInformation PreferredSubfamilyNames;
    public static CanvasFontInformation SampleText;
    public static CanvasFontInformation FullName;
    public static CanvasFontInformation PostscriptName;
    public static CanvasFontInformation PostscriptCidName;
    public static CanvasFontInformation WwsFamilyName;
    public static CanvasFontInformation DesignScriptLanguageTag;
    public static CanvasFontInformation SupportedScriptLanguageTag;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasFontProperty;enum(Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier;i4);string;string)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasFontProperty")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasFontProperty,ABI.Microsoft.Graphics.Canvas.Text.CanvasFontProperty>")]
public class Microsoft.Graphics.Canvas.Text.CanvasFontProperty : ValueType {
    public CanvasFontPropertyIdentifier Identifier;
    public string Value;
    public string Locale;
    public CanvasFontProperty(CanvasFontPropertyIdentifier _Identifier, string _Value, string _Locale);
    public static bool op_Equality(CanvasFontProperty x, CanvasFontProperty y);
    public static bool op_Inequality(CanvasFontProperty x, CanvasFontProperty y);
    public sealed virtual bool Equals(CanvasFontProperty other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier : Enum {
    public int value__;
    public static CanvasFontPropertyIdentifier None;
    public static CanvasFontPropertyIdentifier FamilyName;
    public static CanvasFontPropertyIdentifier PreferredFamilyName;
    public static CanvasFontPropertyIdentifier FaceName;
    public static CanvasFontPropertyIdentifier FullName;
    public static CanvasFontPropertyIdentifier Win32FamilyName;
    public static CanvasFontPropertyIdentifier PostscriptName;
    public static CanvasFontPropertyIdentifier DesignScriptLanguageTag;
    public static CanvasFontPropertyIdentifier SupportedScriptLanguageTag;
    public static CanvasFontPropertyIdentifier SemanticTag;
    public static CanvasFontPropertyIdentifier Weight;
    public static CanvasFontPropertyIdentifier Stretch;
    public static CanvasFontPropertyIdentifier Style;
    public static CanvasFontPropertyIdentifier Total;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasFontSet")]
[CanvasFontSetRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasFontSet")]
public class Microsoft.Graphics.Canvas.Text.CanvasFontSet : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSetFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSetStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSet { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSetFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSetStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public IReadOnlyList`1<CanvasFontFace> Fonts { get; }
    public CanvasFontSet(Uri uri);
    internal CanvasFontSet(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSet();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSetFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasFontSetStatics();
    public static CanvasFontSet GetSystemFontSet();
    public static CanvasFontSet FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasFontSet x, CanvasFontSet y);
    public static bool op_Inequality(CanvasFontSet x, CanvasFontSet y);
    public sealed virtual bool Equals(CanvasFontSet other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public bool TryFindFontFace(CanvasFontFace fontFace, Int32& index);
    public CanvasFontSet GetMatchingFonts(CanvasFontProperty[] propertyElements);
    public CanvasFontSet GetMatchingFonts(string familyName, FontWeight weight, FontStretch stretch, FontStyle style);
    public UInt32 CountFontsMatchingProperty(CanvasFontProperty property);
    public IReadOnlyDictionary`2<string, string> GetPropertyValues(UInt32 fontIndex, CanvasFontPropertyIdentifier propertyIdentifier);
    public CanvasFontProperty[] GetPropertyValues(CanvasFontPropertyIdentifier propertyIdentifier, string preferredLocaleNames);
    public CanvasFontProperty[] GetPropertyValues(CanvasFontPropertyIdentifier propertyIdentifier);
    public sealed virtual void Dispose();
    public IReadOnlyList`1<CanvasFontFace> get_Fonts();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[FlagsAttribute]
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasFontSimulations>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasFontSimulations : Enum {
    public UInt32 value__;
    public static CanvasFontSimulations None;
    public static CanvasFontSimulations Bold;
    public static CanvasFontSimulations Oblique;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasGlyph;i4;f4;f4;f4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasGlyph,Microsoft.Graphics.Canvas.Text.CanvasGlyph>")]
public class Microsoft.Graphics.Canvas.Text.CanvasGlyph : ValueType {
    public int Index;
    public float Advance;
    public float AdvanceOffset;
    public float AscenderOffset;
    public CanvasGlyph(int _Index, float _Advance, float _AdvanceOffset, float _AscenderOffset);
    public static bool op_Equality(CanvasGlyph x, CanvasGlyph y);
    public static bool op_Inequality(CanvasGlyph x, CanvasGlyph y);
    public sealed virtual bool Equals(CanvasGlyph other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification : Enum {
    public int value__;
    public static CanvasGlyphJustification None;
    public static CanvasGlyphJustification ArabicBlank;
    public static CanvasGlyphJustification Character;
    public static CanvasGlyphJustification Blank;
    public static CanvasGlyphJustification ArabicNormal;
    public static CanvasGlyphJustification ArabicKashida;
    public static CanvasGlyphJustification ArabicAlef;
    public static CanvasGlyphJustification ArabicHa;
    public static CanvasGlyphJustification ArabicRa;
    public static CanvasGlyphJustification ArabicBa;
    public static CanvasGlyphJustification ArabicBara;
    public static CanvasGlyphJustification ArabicSeen;
    public static CanvasGlyphJustification ArabicSeenM;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics;f4;f4;f4;f4;f4;f4;f4;struct(Windows.Foundation.Rect;f4;f4;f4;f4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics,Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics>")]
public class Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics : ValueType {
    public float LeftSideBearing;
    public float AdvanceWidth;
    public float RightSideBearing;
    public float TopSideBearing;
    public float AdvanceHeight;
    public float BottomSideBearing;
    public float VerticalOrigin;
    public Rect DrawBounds;
    public CanvasGlyphMetrics(float _LeftSideBearing, float _AdvanceWidth, float _RightSideBearing, float _TopSideBearing, float _AdvanceHeight, float _BottomSideBearing, float _VerticalOrigin, Rect _DrawBounds);
    public static bool op_Equality(CanvasGlyphMetrics x, CanvasGlyphMetrics y);
    public static bool op_Inequality(CanvasGlyphMetrics x, CanvasGlyphMetrics y);
    public sealed virtual bool Equals(CanvasGlyphMetrics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation : Enum {
    public int value__;
    public static CanvasGlyphOrientation Upright;
    public static CanvasGlyphOrientation Clockwise90Degrees;
    public static CanvasGlyphOrientation Clockwise180Degrees;
    public static CanvasGlyphOrientation Clockwise270Degrees;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping;enum(Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification;i4);b1;b1;b1)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping,ABI.Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping>")]
public class Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping : ValueType {
    public CanvasGlyphJustification Justification;
    public bool IsClusterStart;
    public bool IsDiacritic;
    public bool IsZeroWidthSpace;
    public CanvasGlyphShaping(CanvasGlyphJustification _Justification, bool _IsClusterStart, bool _IsDiacritic, bool _IsZeroWidthSpace);
    public static bool op_Equality(CanvasGlyphShaping x, CanvasGlyphShaping y);
    public static bool op_Inequality(CanvasGlyphShaping x, CanvasGlyphShaping y);
    public sealed virtual bool Equals(CanvasGlyphShaping other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment : Enum {
    public int value__;
    public static CanvasHorizontalAlignment Left;
    public static CanvasHorizontalAlignment Right;
    public static CanvasHorizontalAlignment Center;
    public static CanvasHorizontalAlignment Justified;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity;f4;f4;f4;u1;u1;b1;b1;b1;b1)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity,ABI.Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity>")]
public class Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity : ValueType {
    public float ExpansionMinimum;
    public float ExpansionMaximum;
    public float CompressionMaximum;
    public byte ExpansionPriority;
    public byte CompressionPriority;
    public bool AllowResidualExpansion;
    public bool AllowResidualCompression;
    public bool ApplyToLeadingEdge;
    public bool ApplyToTrailingEdge;
    public CanvasJustificationOpportunity(float _ExpansionMinimum, float _ExpansionMaximum, float _CompressionMaximum, byte _ExpansionPriority, byte _CompressionPriority, bool _AllowResidualExpansion, bool _AllowResidualCompression, bool _ApplyToLeadingEdge, bool _ApplyToTrailingEdge);
    public static bool op_Equality(CanvasJustificationOpportunity x, CanvasJustificationOpportunity y);
    public static bool op_Inequality(CanvasJustificationOpportunity x, CanvasJustificationOpportunity y);
    public sealed virtual bool Equals(CanvasJustificationOpportunity other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition : Enum {
    public int value__;
    public static CanvasLineBreakCondition Neutral;
    public static CanvasLineBreakCondition CanBreak;
    public static CanvasLineBreakCondition CannotBreak;
    public static CanvasLineBreakCondition MustBreak;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasLineMetrics;i4;i4;i4;f4;f4;b1;f4;f4)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasLineMetrics")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasLineMetrics,ABI.Microsoft.Graphics.Canvas.Text.CanvasLineMetrics>")]
public class Microsoft.Graphics.Canvas.Text.CanvasLineMetrics : ValueType {
    public int CharacterCount;
    public int TrailingWhitespaceCount;
    public int TerminalNewlineCount;
    public float Height;
    public float Baseline;
    public bool IsTrimmed;
    public float LeadingWhitespaceBefore;
    public float LeadingWhitespaceAfter;
    public CanvasLineMetrics(int _CharacterCount, int _TrailingWhitespaceCount, int _TerminalNewlineCount, float _Height, float _Baseline, bool _IsTrimmed, float _LeadingWhitespaceBefore, float _LeadingWhitespaceAfter);
    public static bool op_Equality(CanvasLineMetrics x, CanvasLineMetrics y);
    public static bool op_Inequality(CanvasLineMetrics x, CanvasLineMetrics y);
    public sealed virtual bool Equals(CanvasLineMetrics other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode : Enum {
    public int value__;
    public static CanvasLineSpacingMode Default;
    public static CanvasLineSpacingMode Uniform;
    public static CanvasLineSpacingMode Proportional;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution")]
[CanvasNumberSubstitutionRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution")]
public class Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitution { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasNumberSubstitution(CanvasNumberSubstitutionMethod method);
    public CanvasNumberSubstitution(CanvasNumberSubstitutionMethod method, string localeName, bool ignoreEnvironmentOverrides);
    internal CanvasNumberSubstitution(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitution();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasNumberSubstitutionFactory();
    public static CanvasNumberSubstitution FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasNumberSubstitution x, CanvasNumberSubstitution y);
    public static bool op_Inequality(CanvasNumberSubstitution x, CanvasNumberSubstitution y);
    public sealed virtual bool Equals(CanvasNumberSubstitution other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod : Enum {
    public int value__;
    public static CanvasNumberSubstitutionMethod FromCulture;
    public static CanvasNumberSubstitutionMethod Contextual;
    public static CanvasNumberSubstitutionMethod Disabled;
    public static CanvasNumberSubstitutionMethod National;
    public static CanvasNumberSubstitutionMethod Traditional;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment : Enum {
    public int value__;
    public static CanvasOpticalAlignment Default;
    public static CanvasOpticalAlignment NoSideBearings;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasScaledFont")]
[CanvasScaledFontRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasScaledFont")]
public class Microsoft.Graphics.Canvas.Text.CanvasScaledFont : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasScaledFont { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasFontFace FontFace { get; }
    public float ScaleFactor { get; }
    internal CanvasScaledFont(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasScaledFont();
    public static CanvasScaledFont FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasScaledFont x, CanvasScaledFont y);
    public static bool op_Inequality(CanvasScaledFont x, CanvasScaledFont y);
    public sealed virtual bool Equals(CanvasScaledFont other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasFontFace get_FontFace();
    public float get_ScaleFactor();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasScriptProperties;string;i4;i4;string;b1;b1;b1;b1;b1;b1;b1)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasScriptProperties")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasScriptProperties,ABI.Microsoft.Graphics.Canvas.Text.CanvasScriptProperties>")]
public class Microsoft.Graphics.Canvas.Text.CanvasScriptProperties : ValueType {
    public string IsoScriptCode;
    public int IsoScriptNumber;
    public int ClusterLookahead;
    public string JustificationCharacter;
    public bool RestrictCaretToClusters;
    public bool UsesWordDividers;
    public bool IsDiscreteWriting;
    public bool IsBlockWriting;
    public bool IsDistributedWithinCluster;
    public bool IsConnectedWriting;
    public bool IsCursiveWriting;
    public CanvasScriptProperties(string _IsoScriptCode, int _IsoScriptNumber, int _ClusterLookahead, string _JustificationCharacter, bool _RestrictCaretToClusters, bool _UsesWordDividers, bool _IsDiscreteWriting, bool _IsBlockWriting, bool _IsDistributedWithinCluster, bool _IsConnectedWriting, bool _IsCursiveWriting);
    public static bool op_Equality(CanvasScriptProperties x, CanvasScriptProperties y);
    public static bool op_Inequality(CanvasScriptProperties x, CanvasScriptProperties y);
    public sealed virtual bool Equals(CanvasScriptProperties other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasScriptShape>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasScriptShape : Enum {
    public int value__;
    public static CanvasScriptShape Default;
    public static CanvasScriptShape NoVisual;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer")]
[CanvasTextAnalyzerRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer")]
public class Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasTextAnalyzer(string text, CanvasTextDirection textDirection);
    public CanvasTextAnalyzer(string text, CanvasTextDirection textDirection, CanvasNumberSubstitution numberSubstitution, CanvasVerticalGlyphOrientation verticalGlyphOrientation, UInt32 bidiLevel);
    public CanvasTextAnalyzer(string text, CanvasTextDirection textDirection, ICanvasTextAnalyzerOptions options);
    internal CanvasTextAnalyzer(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzer();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextAnalyzerFactory();
    public static CanvasTextAnalyzer FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasTextAnalyzer x, CanvasTextAnalyzer y);
    public static bool op_Inequality(CanvasTextAnalyzer x, CanvasTextAnalyzer y);
    public sealed virtual bool Equals(CanvasTextAnalyzer other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont>> GetFonts(CanvasTextFormat textFormat);
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont>> GetFonts(CanvasTextFormat textFormat, CanvasFontSet fontSet);
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi>> GetBidi();
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi>> GetBidi(string locale);
    public CanvasAnalyzedBreakpoint[] GetBreakpoints();
    public CanvasAnalyzedBreakpoint[] GetBreakpoints(string locale);
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasNumberSubstitution>> GetNumberSubstitutions();
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript>> GetScript();
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript>> GetScript(string locale);
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations();
    public IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations(string locale);
    public CanvasScriptProperties GetScriptProperties(CanvasAnalyzedScript analyzedScript);
    public CanvasGlyph[] GetGlyphs(CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, bool isSideways, bool isRightToLeft, CanvasAnalyzedScript script);
    public CanvasGlyph[] GetGlyphs(CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, bool isSideways, bool isRightToLeft, CanvasAnalyzedScript script, string locale, CanvasNumberSubstitution numberSubstitution, IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasTypography>> typographyRanges, Int32[]& clusterMapIndicesElements, Boolean[]& isShapedAloneGlyphsElements, CanvasGlyphShaping[]& glyphShapingResultsElements);
    public CanvasJustificationOpportunity[] GetJustificationOpportunities(CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyphShaping[] glyphShapingResultsElements);
    public CanvasGlyph[] ApplyJustificationOpportunities(float lineWidth, CanvasJustificationOpportunity[] justificationOpportunitiesElements, CanvasGlyph[] sourceGlyphsElements);
    public CanvasGlyph[] AddGlyphsAfterJustification(CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyph[] originalGlyphsElements, CanvasGlyph[] justifiedGlyphsElements, CanvasGlyphShaping[] glyphShapingResultsElements);
    public CanvasGlyph[] AddGlyphsAfterJustification(CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyph[] originalGlyphsElements, CanvasGlyph[] justifiedGlyphsElements, CanvasGlyphShaping[] glyphShapingResultsElements, Int32[]& outputClusterMapIndicesElements);
    public sealed virtual void Dispose();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing : Enum {
    public int value__;
    public static CanvasTextAntialiasing Auto;
    public static CanvasTextAntialiasing ClearType;
    public static CanvasTextAntialiasing Grayscale;
    public static CanvasTextAntialiasing Aliased;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTextDirection>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTextDirection : Enum {
    public int value__;
    public static CanvasTextDirection LeftToRightThenTopToBottom;
    public static CanvasTextDirection RightToLeftThenTopToBottom;
    public static CanvasTextDirection LeftToRightThenBottomToTop;
    public static CanvasTextDirection RightToLeftThenBottomToTop;
    public static CanvasTextDirection TopToBottomThenLeftToRight;
    public static CanvasTextDirection BottomToTopThenLeftToRight;
    public static CanvasTextDirection TopToBottomThenRightToLeft;
    public static CanvasTextDirection BottomToTopThenRightToLeft;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasTextFormat")]
[CanvasTextFormatRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasTextFormat")]
public class Microsoft.Graphics.Canvas.Text.CanvasTextFormat : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_CanvasTextFormat;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextFormat { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_CanvasTextFormat { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public ICanvasTextInlineObject CustomTrimmingSign { get; public set; }
    public CanvasTextDirection Direction { get; public set; }
    public string FontFamily { get; public set; }
    public float FontSize { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public CanvasHorizontalAlignment HorizontalAlignment { get; public set; }
    public float IncrementalTabStop { get; public set; }
    public bool LastLineWrapping { get; public set; }
    public float LineSpacing { get; public set; }
    public float LineSpacingBaseline { get; public set; }
    public CanvasLineSpacingMode LineSpacingMode { get; public set; }
    public string LocaleName { get; public set; }
    public CanvasOpticalAlignment OpticalAlignment { get; public set; }
    public CanvasDrawTextOptions Options { get; public set; }
    public string TrimmingDelimiter { get; public set; }
    public int TrimmingDelimiterCount { get; public set; }
    public CanvasTextTrimmingGranularity TrimmingGranularity { get; public set; }
    public CanvasTrimmingSign TrimmingSign { get; public set; }
    public CanvasVerticalAlignment VerticalAlignment { get; public set; }
    public CanvasVerticalGlyphOrientation VerticalGlyphOrientation { get; public set; }
    public CanvasWordWrapping WordWrapping { get; public set; }
    internal CanvasTextFormat(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextFormat();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_CanvasTextFormat();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextFormatStatics();
    public static String[] GetSystemFontFamilies();
    public static String[] GetSystemFontFamilies(IReadOnlyList`1<string> localeList);
    public static CanvasTextFormat FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasTextFormat x, CanvasTextFormat y);
    public static bool op_Inequality(CanvasTextFormat x, CanvasTextFormat y);
    public sealed virtual bool Equals(CanvasTextFormat other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public sealed virtual void Dispose();
    public ICanvasTextInlineObject get_CustomTrimmingSign();
    public void set_CustomTrimmingSign(ICanvasTextInlineObject value);
    public CanvasTextDirection get_Direction();
    public void set_Direction(CanvasTextDirection value);
    public string get_FontFamily();
    public void set_FontFamily(string value);
    public float get_FontSize();
    public void set_FontSize(float value);
    public FontStretch get_FontStretch();
    public void set_FontStretch(FontStretch value);
    public FontStyle get_FontStyle();
    public void set_FontStyle(FontStyle value);
    public FontWeight get_FontWeight();
    public void set_FontWeight(FontWeight value);
    public CanvasHorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(CanvasHorizontalAlignment value);
    public float get_IncrementalTabStop();
    public void set_IncrementalTabStop(float value);
    public bool get_LastLineWrapping();
    public void set_LastLineWrapping(bool value);
    public float get_LineSpacing();
    public void set_LineSpacing(float value);
    public float get_LineSpacingBaseline();
    public void set_LineSpacingBaseline(float value);
    public CanvasLineSpacingMode get_LineSpacingMode();
    public void set_LineSpacingMode(CanvasLineSpacingMode value);
    public string get_LocaleName();
    public void set_LocaleName(string value);
    public CanvasOpticalAlignment get_OpticalAlignment();
    public void set_OpticalAlignment(CanvasOpticalAlignment value);
    public CanvasDrawTextOptions get_Options();
    public void set_Options(CanvasDrawTextOptions value);
    public string get_TrimmingDelimiter();
    public void set_TrimmingDelimiter(string value);
    public int get_TrimmingDelimiterCount();
    public void set_TrimmingDelimiterCount(int value);
    public CanvasTextTrimmingGranularity get_TrimmingGranularity();
    public void set_TrimmingGranularity(CanvasTextTrimmingGranularity value);
    public CanvasTrimmingSign get_TrimmingSign();
    public void set_TrimmingSign(CanvasTrimmingSign value);
    public CanvasVerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(CanvasVerticalAlignment value);
    public CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation();
    public void set_VerticalGlyphOrientation(CanvasVerticalGlyphOrientation value);
    public CanvasWordWrapping get_WordWrapping();
    public void set_WordWrapping(CanvasWordWrapping value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTextGridFit>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTextGridFit : Enum {
    public int value__;
    public static CanvasTextGridFit Default;
    public static CanvasTextGridFit Disable;
    public static CanvasTextGridFit Enable;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasTextLayout")]
[CanvasTextLayoutRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasTextLayout")]
public class Microsoft.Graphics.Canvas.Text.CanvasTextLayout : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutStatics;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayout { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutStatics { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasClusterMetrics[] ClusterMetrics { get; }
    public ICanvasTextInlineObject CustomTrimmingSign { get; public set; }
    public string DefaultFontFamily { get; }
    public float DefaultFontSize { get; }
    public FontStretch DefaultFontStretch { get; }
    public FontStyle DefaultFontStyle { get; }
    public FontWeight DefaultFontWeight { get; }
    public string DefaultLocaleName { get; }
    public CanvasDevice Device { get; }
    public CanvasTextDirection Direction { get; public set; }
    public Rect DrawBounds { get; }
    public CanvasHorizontalAlignment HorizontalAlignment { get; public set; }
    public float IncrementalTabStop { get; public set; }
    public bool LastLineWrapping { get; public set; }
    public Rect LayoutBounds { get; }
    public Rect LayoutBoundsIncludingTrailingWhitespace { get; }
    public int LineCount { get; }
    public CanvasLineMetrics[] LineMetrics { get; }
    public float LineSpacing { get; public set; }
    public float LineSpacingBaseline { get; public set; }
    public CanvasLineSpacingMode LineSpacingMode { get; public set; }
    public int MaximumBidiReorderingDepth { get; }
    public CanvasOpticalAlignment OpticalAlignment { get; public set; }
    public CanvasDrawTextOptions Options { get; public set; }
    public Size RequestedSize { get; public set; }
    public string TrimmingDelimiter { get; public set; }
    public int TrimmingDelimiterCount { get; public set; }
    public CanvasTextTrimmingGranularity TrimmingGranularity { get; public set; }
    public CanvasTrimmingSign TrimmingSign { get; public set; }
    public CanvasVerticalAlignment VerticalAlignment { get; public set; }
    public CanvasVerticalGlyphOrientation VerticalGlyphOrientation { get; public set; }
    public CanvasWordWrapping WordWrapping { get; public set; }
    public CanvasTextLayout(ICanvasResourceCreator resourceCreator, string textString, CanvasTextFormat textFormat, float requestedWidth, float requestedHeight);
    internal CanvasTextLayout(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayout();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutFactory();
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextLayoutStatics();
    public static Matrix3x2 GetGlyphOrientationTransform(CanvasGlyphOrientation glyphOrientation, bool isSideways, Vector2 position);
    public static CanvasTextLayout FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasTextLayout x, CanvasTextLayout y);
    public static bool op_Inequality(CanvasTextLayout x, CanvasTextLayout y);
    public sealed virtual bool Equals(CanvasTextLayout other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Int32[] GetFormatChangeIndices();
    public float GetMinimumLineLength();
    public ICanvasBrush GetBrush(int characterIndex);
    public object GetCustomBrush(int characterIndex);
    public string GetFontFamily(int characterIndex);
    public float GetFontSize(int characterIndex);
    public FontStretch GetFontStretch(int characterIndex);
    public FontStyle GetFontStyle(int characterIndex);
    public FontWeight GetFontWeight(int characterIndex);
    public string GetLocaleName(int characterIndex);
    public bool GetStrikethrough(int characterIndex);
    public bool GetUnderline(int characterIndex);
    public ICanvasTextInlineObject GetInlineObject(int characterIndex);
    public void SetColor(int characterIndex, int characterCount, Color color);
    public void SetBrush(int characterIndex, int characterCount, ICanvasBrush brush);
    public void SetCustomBrush(int characterIndex, int characterCount, object brush);
    public void SetFontFamily(int characterIndex, int characterCount, string fontFamily);
    public void SetFontSize(int characterIndex, int characterCount, float fontSize);
    public void SetFontStretch(int characterIndex, int characterCount, FontStretch fontStretch);
    public void SetFontStyle(int characterIndex, int characterCount, FontStyle fontStyle);
    public void SetFontWeight(int characterIndex, int characterCount, FontWeight fontWeight);
    public void SetLocaleName(int characterIndex, int characterCount, string name);
    public void SetStrikethrough(int characterIndex, int characterCount, bool hasStrikethrough);
    public void SetUnderline(int characterIndex, int characterCount, bool hasUnderline);
    public void SetInlineObject(int characterIndex, int characterCount, ICanvasTextInlineObject inlineObject);
    public void DrawToTextRenderer(ICanvasTextRenderer textRenderer, Vector2 position);
    public void DrawToTextRenderer(ICanvasTextRenderer textRenderer, float x, float y);
    public void SetTypography(int characterIndex, int characterCount, CanvasTypography typography);
    public CanvasTypography GetTypography(int characterIndex);
    public bool HitTest(Vector2 point);
    public bool HitTest(float x, float y);
    public bool HitTest(Vector2 point, CanvasTextLayoutRegion& textLayoutRegion);
    public bool HitTest(float x, float y, CanvasTextLayoutRegion& textLayoutRegion);
    public bool HitTest(Vector2 point, CanvasTextLayoutRegion& textLayoutRegion, Boolean& trailingSideOfCharacter);
    public bool HitTest(float x, float y, CanvasTextLayoutRegion& textLayoutRegion, Boolean& trailingSideOfCharacter);
    public Vector2 GetCaretPosition(int characterIndex, bool trailingSideOfCharacter);
    public Vector2 GetCaretPosition(int characterIndex, bool trailingSideOfCharacter, CanvasTextLayoutRegion& textLayoutRegion);
    public CanvasTextLayoutRegion[] GetCharacterRegions(int characterIndex, int characterCount);
    public bool GetPairKerning(int characterIndex);
    public void SetPairKerning(int characterIndex, int characterCount, bool hasPairKerning);
    public float GetLeadingCharacterSpacing(int characterIndex);
    public float GetTrailingCharacterSpacing(int characterIndex);
    public float GetMinimumCharacterAdvance(int characterIndex);
    public void SetCharacterSpacing(int characterIndex, int characterCount, float leadingSpacing, float trailingSpacing, float minimumAdvance);
    public sealed virtual void Dispose();
    public CanvasClusterMetrics[] get_ClusterMetrics();
    public ICanvasTextInlineObject get_CustomTrimmingSign();
    public void set_CustomTrimmingSign(ICanvasTextInlineObject value);
    public string get_DefaultFontFamily();
    public float get_DefaultFontSize();
    public FontStretch get_DefaultFontStretch();
    public FontStyle get_DefaultFontStyle();
    public FontWeight get_DefaultFontWeight();
    public string get_DefaultLocaleName();
    public CanvasDevice get_Device();
    public CanvasTextDirection get_Direction();
    public void set_Direction(CanvasTextDirection value);
    public Rect get_DrawBounds();
    public CanvasHorizontalAlignment get_HorizontalAlignment();
    public void set_HorizontalAlignment(CanvasHorizontalAlignment value);
    public float get_IncrementalTabStop();
    public void set_IncrementalTabStop(float value);
    public bool get_LastLineWrapping();
    public void set_LastLineWrapping(bool value);
    public Rect get_LayoutBounds();
    public Rect get_LayoutBoundsIncludingTrailingWhitespace();
    public int get_LineCount();
    public CanvasLineMetrics[] get_LineMetrics();
    public float get_LineSpacing();
    public void set_LineSpacing(float value);
    public float get_LineSpacingBaseline();
    public void set_LineSpacingBaseline(float value);
    public CanvasLineSpacingMode get_LineSpacingMode();
    public void set_LineSpacingMode(CanvasLineSpacingMode value);
    public int get_MaximumBidiReorderingDepth();
    public CanvasOpticalAlignment get_OpticalAlignment();
    public void set_OpticalAlignment(CanvasOpticalAlignment value);
    public CanvasDrawTextOptions get_Options();
    public void set_Options(CanvasDrawTextOptions value);
    public Size get_RequestedSize();
    public void set_RequestedSize(Size value);
    public string get_TrimmingDelimiter();
    public void set_TrimmingDelimiter(string value);
    public int get_TrimmingDelimiterCount();
    public void set_TrimmingDelimiterCount(int value);
    public CanvasTextTrimmingGranularity get_TrimmingGranularity();
    public void set_TrimmingGranularity(CanvasTextTrimmingGranularity value);
    public CanvasTrimmingSign get_TrimmingSign();
    public void set_TrimmingSign(CanvasTrimmingSign value);
    public CanvasVerticalAlignment get_VerticalAlignment();
    public void set_VerticalAlignment(CanvasVerticalAlignment value);
    public CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation();
    public void set_VerticalGlyphOrientation(CanvasVerticalGlyphOrientation value);
    public CanvasWordWrapping get_WordWrapping();
    public void set_WordWrapping(CanvasWordWrapping value);
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion;i4;i4;struct(Windows.Foundation.Rect;f4;f4;f4;f4))")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion,Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion>")]
public class Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion : ValueType {
    public int CharacterIndex;
    public int CharacterCount;
    public Rect LayoutBounds;
    public CanvasTextLayoutRegion(int _CharacterIndex, int _CharacterCount, Rect _LayoutBounds);
    public static bool op_Equality(CanvasTextLayoutRegion x, CanvasTextLayoutRegion y);
    public static bool op_Inequality(CanvasTextLayoutRegion x, CanvasTextLayoutRegion y);
    public sealed virtual bool Equals(CanvasTextLayoutRegion other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode : Enum {
    public int value__;
    public static CanvasTextMeasuringMode Natural;
    public static CanvasTextMeasuringMode GdiClassic;
    public static CanvasTextMeasuringMode GdiNatural;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode : Enum {
    public int value__;
    public static CanvasTextRenderingMode Default;
    public static CanvasTextRenderingMode Aliased;
    public static CanvasTextRenderingMode GdiClassic;
    public static CanvasTextRenderingMode GdiNatural;
    public static CanvasTextRenderingMode Natural;
    public static CanvasTextRenderingMode NaturalSymmetric;
    public static CanvasTextRenderingMode Outline;
    public static CanvasTextRenderingMode NaturalSymmetricDownsampled;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters")]
[CanvasTextRenderingParametersRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters")]
public class Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParametersFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParameters { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParametersFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasTextGridFit GridFit { get; }
    public CanvasTextRenderingMode RenderingMode { get; }
    public CanvasTextRenderingParameters(CanvasTextRenderingMode textRenderingMode, CanvasTextGridFit gridFit);
    internal CanvasTextRenderingParameters(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParameters();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTextRenderingParametersFactory();
    public static CanvasTextRenderingParameters FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasTextRenderingParameters x, CanvasTextRenderingParameters y);
    public static bool op_Inequality(CanvasTextRenderingParameters x, CanvasTextRenderingParameters y);
    public sealed virtual bool Equals(CanvasTextRenderingParameters other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasTextGridFit get_GridFit();
    public CanvasTextRenderingMode get_RenderingMode();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity : Enum {
    public int value__;
    public static CanvasTextTrimmingGranularity None;
    public static CanvasTextTrimmingGranularity Character;
    public static CanvasTextTrimmingGranularity Word;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign : Enum {
    public int value__;
    public static CanvasTrimmingSign None;
    public static CanvasTrimmingSign Ellipsis;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.CanvasTypography")]
[CanvasTypographyRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.Text.ICanvasTypography")]
public class Microsoft.Graphics.Canvas.Text.CanvasTypography : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__System_IDisposable;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_Text_CanvasTypography;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTypography { get; }
    private IObjectReference _objRef_global__System_IDisposable { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_Text_CanvasTypography { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    internal CanvasTypography(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_ICanvasTypography();
    private IObjectReference Make___objRef_global__System_IDisposable();
    private IObjectReference get__objRef_global__System_IDisposable();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_Text_CanvasTypography();
    public static CanvasTypography FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasTypography x, CanvasTypography y);
    public static bool op_Inequality(CanvasTypography x, CanvasTypography y);
    public sealed virtual bool Equals(CanvasTypography other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void AddFeature(CanvasTypographyFeature feature);
    public void AddFeature(CanvasTypographyFeatureName name, UInt32 parameter);
    public CanvasTypographyFeature[] GetFeatures();
    public sealed virtual void Dispose();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature;enum(Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName;i4);u4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature,Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature>")]
public class Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature : ValueType {
    public CanvasTypographyFeatureName Name;
    public UInt32 Parameter;
    public CanvasTypographyFeature(CanvasTypographyFeatureName _Name, UInt32 _Parameter);
    public static bool op_Equality(CanvasTypographyFeature x, CanvasTypographyFeature y);
    public static bool op_Inequality(CanvasTypographyFeature x, CanvasTypographyFeature y);
    public sealed virtual bool Equals(CanvasTypographyFeature other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName : Enum {
    public int value__;
    public static CanvasTypographyFeatureName None;
    public static CanvasTypographyFeatureName Default;
    public static CanvasTypographyFeatureName VerticalWriting;
    public static CanvasTypographyFeatureName VerticalAlternatesAndRotation;
    public static CanvasTypographyFeatureName AlternativeFractions;
    public static CanvasTypographyFeatureName PetiteCapitalsFromCapitals;
    public static CanvasTypographyFeatureName SmallCapitalsFromCapitals;
    public static CanvasTypographyFeatureName ContextualAlternates;
    public static CanvasTypographyFeatureName CaseSensitiveForms;
    public static CanvasTypographyFeatureName GlyphCompositionDecomposition;
    public static CanvasTypographyFeatureName ContextualLigatures;
    public static CanvasTypographyFeatureName CapitalSpacing;
    public static CanvasTypographyFeatureName ContextualSwash;
    public static CanvasTypographyFeatureName CursivePositioning;
    public static CanvasTypographyFeatureName DiscretionaryLigatures;
    public static CanvasTypographyFeatureName ExpertForms;
    public static CanvasTypographyFeatureName Fractions;
    public static CanvasTypographyFeatureName FullWidth;
    public static CanvasTypographyFeatureName HalfForms;
    public static CanvasTypographyFeatureName HalantForms;
    public static CanvasTypographyFeatureName AlternateHalfWidth;
    public static CanvasTypographyFeatureName HistoricalForms;
    public static CanvasTypographyFeatureName HorizontalKanaAlternates;
    public static CanvasTypographyFeatureName HistoricalLigatures;
    public static CanvasTypographyFeatureName HalfWidth;
    public static CanvasTypographyFeatureName HojoKanjiForms;
    public static CanvasTypographyFeatureName Jis04Forms;
    public static CanvasTypographyFeatureName Jis78Forms;
    public static CanvasTypographyFeatureName Jis83Forms;
    public static CanvasTypographyFeatureName Jis90Forms;
    public static CanvasTypographyFeatureName Kerning;
    public static CanvasTypographyFeatureName StandardLigatures;
    public static CanvasTypographyFeatureName LiningFigures;
    public static CanvasTypographyFeatureName LocalizedForms;
    public static CanvasTypographyFeatureName MarkPositioning;
    public static CanvasTypographyFeatureName MathematicalGreek;
    public static CanvasTypographyFeatureName MarkToMarkPositioning;
    public static CanvasTypographyFeatureName AlternateAnnotationForms;
    public static CanvasTypographyFeatureName NlcKanjiForms;
    public static CanvasTypographyFeatureName OldStyleFigures;
    public static CanvasTypographyFeatureName Ordinals;
    public static CanvasTypographyFeatureName ProportionalAlternateWidth;
    public static CanvasTypographyFeatureName PetiteCapitals;
    public static CanvasTypographyFeatureName ProportionalFigures;
    public static CanvasTypographyFeatureName ProportionalWidths;
    public static CanvasTypographyFeatureName QuarterWidths;
    public static CanvasTypographyFeatureName RequiredLigatures;
    public static CanvasTypographyFeatureName RubyNotationForms;
    public static CanvasTypographyFeatureName StylisticAlternates;
    public static CanvasTypographyFeatureName ScientificInferiors;
    public static CanvasTypographyFeatureName SmallCapitals;
    public static CanvasTypographyFeatureName SimplifiedForms;
    public static CanvasTypographyFeatureName StylisticSet1;
    public static CanvasTypographyFeatureName StylisticSet2;
    public static CanvasTypographyFeatureName StylisticSet3;
    public static CanvasTypographyFeatureName StylisticSet4;
    public static CanvasTypographyFeatureName StylisticSet5;
    public static CanvasTypographyFeatureName StylisticSet6;
    public static CanvasTypographyFeatureName StylisticSet7;
    public static CanvasTypographyFeatureName StylisticSet8;
    public static CanvasTypographyFeatureName StylisticSet9;
    public static CanvasTypographyFeatureName StylisticSet10;
    public static CanvasTypographyFeatureName StylisticSet11;
    public static CanvasTypographyFeatureName StylisticSet12;
    public static CanvasTypographyFeatureName StylisticSet13;
    public static CanvasTypographyFeatureName StylisticSet14;
    public static CanvasTypographyFeatureName StylisticSet15;
    public static CanvasTypographyFeatureName StylisticSet16;
    public static CanvasTypographyFeatureName StylisticSet17;
    public static CanvasTypographyFeatureName StylisticSet18;
    public static CanvasTypographyFeatureName StylisticSet19;
    public static CanvasTypographyFeatureName StylisticSet20;
    public static CanvasTypographyFeatureName Subscript;
    public static CanvasTypographyFeatureName Superscript;
    public static CanvasTypographyFeatureName Swash;
    public static CanvasTypographyFeatureName Titling;
    public static CanvasTypographyFeatureName TraditionalNameForms;
    public static CanvasTypographyFeatureName TabularFigures;
    public static CanvasTypographyFeatureName TraditionalForms;
    public static CanvasTypographyFeatureName ThirdWidths;
    public static CanvasTypographyFeatureName Unicase;
    public static CanvasTypographyFeatureName SlashedZero;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange;u4;u4)")]
[WindowsRuntimeHelperTypeAttribute]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange,Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange>")]
public class Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange : ValueType {
    public UInt32 First;
    public UInt32 Last;
    public CanvasUnicodeRange(UInt32 _First, UInt32 _Last);
    public static bool op_Equality(CanvasUnicodeRange x, CanvasUnicodeRange y);
    public static bool op_Inequality(CanvasUnicodeRange x, CanvasUnicodeRange y);
    public sealed virtual bool Equals(CanvasUnicodeRange other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment : Enum {
    public int value__;
    public static CanvasVerticalAlignment Top;
    public static CanvasVerticalAlignment Bottom;
    public static CanvasVerticalAlignment Center;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation : Enum {
    public int value__;
    public static CanvasVerticalGlyphOrientation Default;
    public static CanvasVerticalGlyphOrientation Stacked;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.Text.CanvasWordWrapping>")]
public enum Microsoft.Graphics.Canvas.Text.CanvasWordWrapping : Enum {
    public int value__;
    public static CanvasWordWrapping Wrap;
    public static CanvasWordWrapping NoWrap;
    public static CanvasWordWrapping EmergencyBreak;
    public static CanvasWordWrapping WholeWord;
    public static CanvasWordWrapping Character;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("5199D129-4EF9-4DEE-B74C-4DC910201A7F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontFace")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasFontFace {
    public float Ascent { get; }
    public float CapHeight { get; }
    public float CaretOffset { get; }
    public float CaretSlopeRise { get; }
    public float CaretSlopeRun { get; }
    public float Descent { get; }
    public IReadOnlyDictionary`2<string, string> FaceNames { get; }
    public IReadOnlyDictionary`2<string, string> FamilyNames { get; }
    public CanvasFontFileFormatType FileFormatType { get; }
    public Rect GlyphBox { get; }
    public UInt32 GlyphCount { get; }
    public bool HasTypographicMetrics { get; }
    public bool HasVerticalGlyphVariants { get; }
    public bool IsMonospaced { get; }
    public bool IsSymbolFont { get; }
    public float LineGap { get; }
    public float LowercaseLetterHeight { get; }
    public Byte[] Panose { get; }
    public CanvasFontSimulations Simulations { get; }
    public FontStretch Stretch { get; }
    public float StrikethroughPosition { get; }
    public float StrikethroughThickness { get; }
    public FontStyle Style { get; }
    public Vector2 SubscriptPosition { get; }
    public Size SubscriptSize { get; }
    public Vector2 SuperscriptPosition { get; }
    public Size SuperscriptSize { get; }
    public float UnderlinePosition { get; }
    public float UnderlineThickness { get; }
    public CanvasUnicodeRange[] UnicodeRanges { get; }
    public FontWeight Weight { get; }
    [OverloadAttribute("GetRecommendedRenderingMode")]
public abstract virtual CanvasTextRenderingMode GetRecommendedRenderingMode(float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters);
    [OverloadAttribute("GetRecommendedRenderingModeWithAllOptions")]
public abstract virtual CanvasTextRenderingMode GetRecommendedRenderingMode(float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters, Matrix3x2 transform, bool isSideways, CanvasAntialiasing outlineThreshold);
    public abstract virtual CanvasTextGridFit GetRecommendedGridFit(float fontSize, float dpi, CanvasTextMeasuringMode measuringMode, CanvasTextRenderingParameters renderingParameters, Matrix3x2 transform, bool isSideways, CanvasAntialiasing outlineThreshold);
    public abstract virtual Int32[] GetVerticalGlyphVariants(Int32[] inputElements);
    public abstract virtual Int32[] GetGlyphIndices(UInt32[] inputElements);
    public abstract virtual CanvasGlyphMetrics[] GetGlyphMetrics(Int32[] inputElements, bool isSideways);
    public abstract virtual CanvasGlyphMetrics[] GetGdiCompatibleGlyphMetrics(float fontSize, float dpi, Matrix3x2 transform, bool useGdiNatural, Int32[] inputElements, bool isSideways);
    public abstract virtual IReadOnlyDictionary`2<string, string> GetInformationalStrings(CanvasFontInformation fontInformation);
    public abstract virtual bool HasCharacter(UInt32 unicodeValue);
    [OverloadAttribute("GetGlyphRunBounds")]
public abstract virtual Rect GetGlyphRunBounds(CanvasDrawingSession drawingSession, Vector2 point, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel);
    [OverloadAttribute("GetGlyphRunBoundsWithMeasuringMode")]
public abstract virtual Rect GetGlyphRunBounds(CanvasDrawingSession drawingSession, Vector2 point, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, CanvasTextMeasuringMode measuringMode);
    [OverloadAttribute("GetSupportedTypographicFeatureNames")]
public abstract virtual CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(CanvasAnalyzedScript script);
    [OverloadAttribute("GetSupportedTypographicFeatureNamesWithLocale")]
public abstract virtual CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(CanvasAnalyzedScript script, string locale);
    [OverloadAttribute("GetTypographicFeatureGlyphSupport")]
public abstract virtual Boolean[] GetTypographicFeatureGlyphSupport(CanvasAnalyzedScript script, CanvasTypographyFeatureName typographicFeatureName, CanvasGlyph[] glyphsElements);
    [OverloadAttribute("GetTypographicFeatureGlyphSupportWithLocale")]
public abstract virtual Boolean[] GetTypographicFeatureGlyphSupport(CanvasAnalyzedScript script, CanvasTypographyFeatureName typographicFeatureName, CanvasGlyph[] glyphsElements, string locale);
    public abstract virtual float get_Ascent();
    public abstract virtual float get_CapHeight();
    public abstract virtual float get_CaretOffset();
    public abstract virtual float get_CaretSlopeRise();
    public abstract virtual float get_CaretSlopeRun();
    public abstract virtual float get_Descent();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_FaceNames();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_FamilyNames();
    public abstract virtual CanvasFontFileFormatType get_FileFormatType();
    public abstract virtual Rect get_GlyphBox();
    public abstract virtual UInt32 get_GlyphCount();
    public abstract virtual bool get_HasTypographicMetrics();
    public abstract virtual bool get_HasVerticalGlyphVariants();
    public abstract virtual bool get_IsMonospaced();
    public abstract virtual bool get_IsSymbolFont();
    public abstract virtual float get_LineGap();
    public abstract virtual float get_LowercaseLetterHeight();
    public abstract virtual Byte[] get_Panose();
    public abstract virtual CanvasFontSimulations get_Simulations();
    public abstract virtual FontStretch get_Stretch();
    public abstract virtual float get_StrikethroughPosition();
    public abstract virtual float get_StrikethroughThickness();
    public abstract virtual FontStyle get_Style();
    public abstract virtual Vector2 get_SubscriptPosition();
    public abstract virtual Size get_SubscriptSize();
    public abstract virtual Vector2 get_SuperscriptPosition();
    public abstract virtual Size get_SuperscriptSize();
    public abstract virtual float get_UnderlinePosition();
    public abstract virtual float get_UnderlineThickness();
    public abstract virtual CanvasUnicodeRange[] get_UnicodeRanges();
    public abstract virtual FontWeight get_Weight();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("0A5BFB92-1F3C-459F-9D7E-A6289DD093C0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSet")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasFontSet {
    public IReadOnlyList`1<CanvasFontFace> Fonts { get; }
    public abstract virtual bool TryFindFontFace(CanvasFontFace fontFace, Int32& index);
    [OverloadAttribute("GetMatchingFontsFromProperties")]
public abstract virtual CanvasFontSet GetMatchingFonts(CanvasFontProperty[] propertyElements);
    [OverloadAttribute("GetMatchingFontsFromWwsFamily")]
public abstract virtual CanvasFontSet GetMatchingFonts(string familyName, FontWeight weight, FontStretch stretch, FontStyle style);
    public abstract virtual UInt32 CountFontsMatchingProperty(CanvasFontProperty property);
    [DefaultOverloadAttribute]
[OverloadAttribute("GetPropertyValuesFromIndex")]
public abstract virtual IReadOnlyDictionary`2<string, string> GetPropertyValues(UInt32 fontIndex, CanvasFontPropertyIdentifier propertyIdentifier);
    [OverloadAttribute("GetPropertyValuesFromIdentifier")]
public abstract virtual CanvasFontProperty[] GetPropertyValues(CanvasFontPropertyIdentifier propertyIdentifier, string preferredLocaleNames);
    [OverloadAttribute("GetPropertyValues")]
public abstract virtual CanvasFontProperty[] GetPropertyValues(CanvasFontPropertyIdentifier propertyIdentifier);
    public abstract virtual IReadOnlyList`1<CanvasFontFace> get_Fonts();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3C9C9BDA-70F9-4FF9-AAB2-3B42923286EE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory {
    public abstract virtual CanvasFontSet Create(Uri uri);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("5F4275CE-BCFA-48C5-9E67-FBE9866D4924")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics {
    public abstract virtual CanvasFontSet GetSystemFontSet();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C81A67AD-0639-4F8F-878B-D937F8A14293")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution {
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7496A822-C781-4EB0-AAFB-C078E7FA8E24")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory {
    public abstract virtual CanvasNumberSubstitution Create(CanvasNumberSubstitutionMethod method);
    public abstract virtual CanvasNumberSubstitution CreateWithLocaleAndIgnoreOverrides(CanvasNumberSubstitutionMethod method, string localeName, bool ignoreEnvironmentOverrides);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BBC4F8D2-EB2B-45F1-AC2A-CFC1F598BAE3")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasScaledFont")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasScaledFont {
    public CanvasFontFace FontFace { get; }
    public float ScaleFactor { get; }
    public abstract virtual CanvasFontFace get_FontFace();
    public abstract virtual float get_ScaleFactor();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("4298F3D1-645B-40E3-B91B-81986D767FC0")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer {
    [OverloadAttribute("GetFontsUsingSystemFontSet")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont>> GetFonts(CanvasTextFormat textFormat);
    [OverloadAttribute("GetFonts")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont>> GetFonts(CanvasTextFormat textFormat, CanvasFontSet fontSet);
    [OverloadAttribute("GetBidi")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi>> GetBidi();
    [OverloadAttribute("GetBidiWithLocale")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi>> GetBidi(string locale);
    [OverloadAttribute("GetBreakpoints")]
public abstract virtual CanvasAnalyzedBreakpoint[] GetBreakpoints();
    [OverloadAttribute("GetBreakpointsWithLocale")]
public abstract virtual CanvasAnalyzedBreakpoint[] GetBreakpoints(string locale);
    public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasNumberSubstitution>> GetNumberSubstitutions();
    [OverloadAttribute("GetScript")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript>> GetScript();
    [OverloadAttribute("GetScriptWithLocale")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript>> GetScript(string locale);
    [OverloadAttribute("GetGlyphOrientations")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations();
    [OverloadAttribute("GetGlyphOrientationsWithLocale")]
public abstract virtual IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations(string locale);
    public abstract virtual CanvasScriptProperties GetScriptProperties(CanvasAnalyzedScript analyzedScript);
    [OverloadAttribute("GetGlyphs")]
public abstract virtual CanvasGlyph[] GetGlyphs(CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, bool isSideways, bool isRightToLeft, CanvasAnalyzedScript script);
    [OverloadAttribute("GetGlyphsWithAllOptions")]
public abstract virtual CanvasGlyph[] GetGlyphs(CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, bool isSideways, bool isRightToLeft, CanvasAnalyzedScript script, string locale, CanvasNumberSubstitution numberSubstitution, IReadOnlyList`1<KeyValuePair`2<CanvasCharacterRange, CanvasTypography>> typographyRanges, Int32[]& clusterMapIndicesElements, Boolean[]& isShapedAloneGlyphsElements, CanvasGlyphShaping[]& glyphShapingResultsElements);
    public abstract virtual CanvasJustificationOpportunity[] GetJustificationOpportunities(CanvasCharacterRange characterRange, CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyphShaping[] glyphShapingResultsElements);
    public abstract virtual CanvasGlyph[] ApplyJustificationOpportunities(float lineWidth, CanvasJustificationOpportunity[] justificationOpportunitiesElements, CanvasGlyph[] sourceGlyphsElements);
    [OverloadAttribute("AddGlyphsAfterJustification")]
public abstract virtual CanvasGlyph[] AddGlyphsAfterJustification(CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyph[] originalGlyphsElements, CanvasGlyph[] justifiedGlyphsElements, CanvasGlyphShaping[] glyphShapingResultsElements);
    [DefaultOverloadAttribute]
[OverloadAttribute("AddGlyphsAfterJustificationWithClusterMap")]
public abstract virtual CanvasGlyph[] AddGlyphsAfterJustification(CanvasFontFace fontFace, float fontSize, CanvasAnalyzedScript script, Int32[] clusterMapIndicesElements, CanvasGlyph[] originalGlyphsElements, CanvasGlyph[] justifiedGlyphsElements, CanvasGlyphShaping[] glyphShapingResultsElements, Int32[]& outputClusterMapIndicesElements);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("521E433F-F698-44C0-8D7F-FE374FE539E1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory {
    public abstract virtual CanvasTextAnalyzer Create(string text, CanvasTextDirection textDirection);
    public abstract virtual CanvasTextAnalyzer CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(string text, CanvasTextDirection textDirection, CanvasNumberSubstitution numberSubstitution, CanvasVerticalGlyphOrientation verticalGlyphOrientation, UInt32 bidiLevel);
    public abstract virtual CanvasTextAnalyzer CreateWithOptions(string text, CanvasTextDirection textDirection, ICanvasTextAnalyzerOptions options);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("31F2406A-8C5F-4E12-8BD6-CFBBC7214D02")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions")]
public interface Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions {
    public abstract virtual string GetLocaleName(int characterIndex, Int32& characterCount);
    public abstract virtual CanvasNumberSubstitution GetNumberSubstitution(int characterIndex, Int32& characterCount);
    public abstract virtual CanvasVerticalGlyphOrientation GetVerticalGlyphOrientation(int characterIndex, Int32& characterCount);
    public abstract virtual UInt32 GetBidiLevel(int characterIndex, Int32& characterCount);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("AF61BFDC-EABB-4D38-BA1B-AFB340612D33")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextFormat")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextFormat {
    public ICanvasTextInlineObject CustomTrimmingSign { get; public set; }
    public CanvasTextDirection Direction { get; public set; }
    public string FontFamily { get; public set; }
    public float FontSize { get; public set; }
    public FontStretch FontStretch { get; public set; }
    public FontStyle FontStyle { get; public set; }
    public FontWeight FontWeight { get; public set; }
    public CanvasHorizontalAlignment HorizontalAlignment { get; public set; }
    public float IncrementalTabStop { get; public set; }
    public bool LastLineWrapping { get; public set; }
    public float LineSpacing { get; public set; }
    public float LineSpacingBaseline { get; public set; }
    public CanvasLineSpacingMode LineSpacingMode { get; public set; }
    public string LocaleName { get; public set; }
    public CanvasOpticalAlignment OpticalAlignment { get; public set; }
    public CanvasDrawTextOptions Options { get; public set; }
    public string TrimmingDelimiter { get; public set; }
    public int TrimmingDelimiterCount { get; public set; }
    public CanvasTextTrimmingGranularity TrimmingGranularity { get; public set; }
    public CanvasTrimmingSign TrimmingSign { get; public set; }
    public CanvasVerticalAlignment VerticalAlignment { get; public set; }
    public CanvasVerticalGlyphOrientation VerticalGlyphOrientation { get; public set; }
    public CanvasWordWrapping WordWrapping { get; public set; }
    public abstract virtual ICanvasTextInlineObject get_CustomTrimmingSign();
    public abstract virtual void set_CustomTrimmingSign(ICanvasTextInlineObject value);
    public abstract virtual CanvasTextDirection get_Direction();
    public abstract virtual void set_Direction(CanvasTextDirection value);
    public abstract virtual string get_FontFamily();
    public abstract virtual void set_FontFamily(string value);
    public abstract virtual float get_FontSize();
    public abstract virtual void set_FontSize(float value);
    public abstract virtual FontStretch get_FontStretch();
    public abstract virtual void set_FontStretch(FontStretch value);
    public abstract virtual FontStyle get_FontStyle();
    public abstract virtual void set_FontStyle(FontStyle value);
    public abstract virtual FontWeight get_FontWeight();
    public abstract virtual void set_FontWeight(FontWeight value);
    public abstract virtual CanvasHorizontalAlignment get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(CanvasHorizontalAlignment value);
    public abstract virtual float get_IncrementalTabStop();
    public abstract virtual void set_IncrementalTabStop(float value);
    public abstract virtual bool get_LastLineWrapping();
    public abstract virtual void set_LastLineWrapping(bool value);
    public abstract virtual float get_LineSpacing();
    public abstract virtual void set_LineSpacing(float value);
    public abstract virtual float get_LineSpacingBaseline();
    public abstract virtual void set_LineSpacingBaseline(float value);
    public abstract virtual CanvasLineSpacingMode get_LineSpacingMode();
    public abstract virtual void set_LineSpacingMode(CanvasLineSpacingMode value);
    public abstract virtual string get_LocaleName();
    public abstract virtual void set_LocaleName(string value);
    public abstract virtual CanvasOpticalAlignment get_OpticalAlignment();
    public abstract virtual void set_OpticalAlignment(CanvasOpticalAlignment value);
    public abstract virtual CanvasDrawTextOptions get_Options();
    public abstract virtual void set_Options(CanvasDrawTextOptions value);
    public abstract virtual string get_TrimmingDelimiter();
    public abstract virtual void set_TrimmingDelimiter(string value);
    public abstract virtual int get_TrimmingDelimiterCount();
    public abstract virtual void set_TrimmingDelimiterCount(int value);
    public abstract virtual CanvasTextTrimmingGranularity get_TrimmingGranularity();
    public abstract virtual void set_TrimmingGranularity(CanvasTextTrimmingGranularity value);
    public abstract virtual CanvasTrimmingSign get_TrimmingSign();
    public abstract virtual void set_TrimmingSign(CanvasTrimmingSign value);
    public abstract virtual CanvasVerticalAlignment get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(CanvasVerticalAlignment value);
    public abstract virtual CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation();
    public abstract virtual void set_VerticalGlyphOrientation(CanvasVerticalGlyphOrientation value);
    public abstract virtual CanvasWordWrapping get_WordWrapping();
    public abstract virtual void set_WordWrapping(CanvasWordWrapping value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("8A927515-33FC-4C92-A6AA-94A8F29C140B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics {
    [OverloadAttribute("GetSystemFontFamilies")]
public abstract virtual String[] GetSystemFontFamilies();
    [OverloadAttribute("GetSystemFontFamiliesFromLocaleList")]
public abstract virtual String[] GetSystemFontFamilies(IReadOnlyList`1<string> localeList);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7A89EE99-CE2A-47FA-9DD2-0A6825F6053F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject")]
public interface Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject {
    public float Baseline { get; }
    public CanvasLineBreakCondition BreakAfter { get; }
    public CanvasLineBreakCondition BreakBefore { get; }
    public Rect DrawBounds { get; }
    public Size Size { get; }
    public bool SupportsSideways { get; }
    public abstract virtual void Draw(ICanvasTextRenderer textRenderer, Vector2 point, bool isSideways, bool isRightToLeft, object brush);
    public abstract virtual float get_Baseline();
    public abstract virtual CanvasLineBreakCondition get_BreakAfter();
    public abstract virtual CanvasLineBreakCondition get_BreakBefore();
    public abstract virtual Rect get_DrawBounds();
    public abstract virtual Size get_Size();
    public abstract virtual bool get_SupportsSideways();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BAE63E54-48AE-4446-A2C7-B6EF93806C20")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayout")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayout {
    public CanvasClusterMetrics[] ClusterMetrics { get; }
    public ICanvasTextInlineObject CustomTrimmingSign { get; public set; }
    public string DefaultFontFamily { get; }
    public float DefaultFontSize { get; }
    public FontStretch DefaultFontStretch { get; }
    public FontStyle DefaultFontStyle { get; }
    public FontWeight DefaultFontWeight { get; }
    public string DefaultLocaleName { get; }
    public CanvasDevice Device { get; }
    public CanvasTextDirection Direction { get; public set; }
    public Rect DrawBounds { get; }
    public CanvasHorizontalAlignment HorizontalAlignment { get; public set; }
    public float IncrementalTabStop { get; public set; }
    public bool LastLineWrapping { get; public set; }
    public Rect LayoutBounds { get; }
    public Rect LayoutBoundsIncludingTrailingWhitespace { get; }
    public int LineCount { get; }
    public CanvasLineMetrics[] LineMetrics { get; }
    public float LineSpacing { get; public set; }
    public float LineSpacingBaseline { get; public set; }
    public CanvasLineSpacingMode LineSpacingMode { get; public set; }
    public int MaximumBidiReorderingDepth { get; }
    public CanvasOpticalAlignment OpticalAlignment { get; public set; }
    public CanvasDrawTextOptions Options { get; public set; }
    public Size RequestedSize { get; public set; }
    public string TrimmingDelimiter { get; public set; }
    public int TrimmingDelimiterCount { get; public set; }
    public CanvasTextTrimmingGranularity TrimmingGranularity { get; public set; }
    public CanvasTrimmingSign TrimmingSign { get; public set; }
    public CanvasVerticalAlignment VerticalAlignment { get; public set; }
    public CanvasVerticalGlyphOrientation VerticalGlyphOrientation { get; public set; }
    public CanvasWordWrapping WordWrapping { get; public set; }
    public abstract virtual Int32[] GetFormatChangeIndices();
    public abstract virtual float GetMinimumLineLength();
    public abstract virtual ICanvasBrush GetBrush(int characterIndex);
    public abstract virtual object GetCustomBrush(int characterIndex);
    public abstract virtual string GetFontFamily(int characterIndex);
    public abstract virtual float GetFontSize(int characterIndex);
    public abstract virtual FontStretch GetFontStretch(int characterIndex);
    public abstract virtual FontStyle GetFontStyle(int characterIndex);
    public abstract virtual FontWeight GetFontWeight(int characterIndex);
    public abstract virtual string GetLocaleName(int characterIndex);
    public abstract virtual bool GetStrikethrough(int characterIndex);
    public abstract virtual bool GetUnderline(int characterIndex);
    public abstract virtual ICanvasTextInlineObject GetInlineObject(int characterIndex);
    public abstract virtual void SetColor(int characterIndex, int characterCount, Color color);
    public abstract virtual void SetBrush(int characterIndex, int characterCount, ICanvasBrush brush);
    public abstract virtual void SetCustomBrush(int characterIndex, int characterCount, object brush);
    public abstract virtual void SetFontFamily(int characterIndex, int characterCount, string fontFamily);
    public abstract virtual void SetFontSize(int characterIndex, int characterCount, float fontSize);
    public abstract virtual void SetFontStretch(int characterIndex, int characterCount, FontStretch fontStretch);
    public abstract virtual void SetFontStyle(int characterIndex, int characterCount, FontStyle fontStyle);
    public abstract virtual void SetFontWeight(int characterIndex, int characterCount, FontWeight fontWeight);
    public abstract virtual void SetLocaleName(int characterIndex, int characterCount, string name);
    public abstract virtual void SetStrikethrough(int characterIndex, int characterCount, bool hasStrikethrough);
    public abstract virtual void SetUnderline(int characterIndex, int characterCount, bool hasUnderline);
    public abstract virtual void SetInlineObject(int characterIndex, int characterCount, ICanvasTextInlineObject inlineObject);
    [OverloadAttribute("DrawToTextRenderer")]
public abstract virtual void DrawToTextRenderer(ICanvasTextRenderer textRenderer, Vector2 position);
    [OverloadAttribute("DrawToTextRendererWithCoords")]
public abstract virtual void DrawToTextRenderer(ICanvasTextRenderer textRenderer, float x, float y);
    public abstract virtual void SetTypography(int characterIndex, int characterCount, CanvasTypography typography);
    public abstract virtual CanvasTypography GetTypography(int characterIndex);
    [OverloadAttribute("HitTest")]
public abstract virtual bool HitTest(Vector2 point);
    [DefaultOverloadAttribute]
[OverloadAttribute("HitTestWithCoords")]
public abstract virtual bool HitTest(float x, float y);
    [OverloadAttribute("HitTestWithDescription")]
public abstract virtual bool HitTest(Vector2 point, CanvasTextLayoutRegion& textLayoutRegion);
    [OverloadAttribute("HitTestWithDescriptionAndCoords")]
public abstract virtual bool HitTest(float x, float y, CanvasTextLayoutRegion& textLayoutRegion);
    [DefaultOverloadAttribute]
[OverloadAttribute("HitTestWithDescriptionAndTrailingSide")]
public abstract virtual bool HitTest(Vector2 point, CanvasTextLayoutRegion& textLayoutRegion, Boolean& trailingSideOfCharacter);
    [OverloadAttribute("HitTestWithDescriptionAndCoordsAndTrailingSide")]
public abstract virtual bool HitTest(float x, float y, CanvasTextLayoutRegion& textLayoutRegion, Boolean& trailingSideOfCharacter);
    [OverloadAttribute("GetCaretPosition")]
public abstract virtual Vector2 GetCaretPosition(int characterIndex, bool trailingSideOfCharacter);
    [DefaultOverloadAttribute]
[OverloadAttribute("GetCaretPositionWithDescription")]
public abstract virtual Vector2 GetCaretPosition(int characterIndex, bool trailingSideOfCharacter, CanvasTextLayoutRegion& textLayoutRegion);
    [DefaultOverloadAttribute]
[OverloadAttribute("GetCharacterRegions")]
public abstract virtual CanvasTextLayoutRegion[] GetCharacterRegions(int characterIndex, int characterCount);
    public abstract virtual bool GetPairKerning(int characterIndex);
    public abstract virtual void SetPairKerning(int characterIndex, int characterCount, bool hasPairKerning);
    public abstract virtual float GetLeadingCharacterSpacing(int characterIndex);
    public abstract virtual float GetTrailingCharacterSpacing(int characterIndex);
    public abstract virtual float GetMinimumCharacterAdvance(int characterIndex);
    public abstract virtual void SetCharacterSpacing(int characterIndex, int characterCount, float leadingSpacing, float trailingSpacing, float minimumAdvance);
    public abstract virtual CanvasClusterMetrics[] get_ClusterMetrics();
    public abstract virtual ICanvasTextInlineObject get_CustomTrimmingSign();
    public abstract virtual void set_CustomTrimmingSign(ICanvasTextInlineObject value);
    public abstract virtual string get_DefaultFontFamily();
    public abstract virtual float get_DefaultFontSize();
    public abstract virtual FontStretch get_DefaultFontStretch();
    public abstract virtual FontStyle get_DefaultFontStyle();
    public abstract virtual FontWeight get_DefaultFontWeight();
    public abstract virtual string get_DefaultLocaleName();
    public abstract virtual CanvasDevice get_Device();
    public abstract virtual CanvasTextDirection get_Direction();
    public abstract virtual void set_Direction(CanvasTextDirection value);
    public abstract virtual Rect get_DrawBounds();
    public abstract virtual CanvasHorizontalAlignment get_HorizontalAlignment();
    public abstract virtual void set_HorizontalAlignment(CanvasHorizontalAlignment value);
    public abstract virtual float get_IncrementalTabStop();
    public abstract virtual void set_IncrementalTabStop(float value);
    public abstract virtual bool get_LastLineWrapping();
    public abstract virtual void set_LastLineWrapping(bool value);
    public abstract virtual Rect get_LayoutBounds();
    public abstract virtual Rect get_LayoutBoundsIncludingTrailingWhitespace();
    public abstract virtual int get_LineCount();
    public abstract virtual CanvasLineMetrics[] get_LineMetrics();
    public abstract virtual float get_LineSpacing();
    public abstract virtual void set_LineSpacing(float value);
    public abstract virtual float get_LineSpacingBaseline();
    public abstract virtual void set_LineSpacingBaseline(float value);
    public abstract virtual CanvasLineSpacingMode get_LineSpacingMode();
    public abstract virtual void set_LineSpacingMode(CanvasLineSpacingMode value);
    public abstract virtual int get_MaximumBidiReorderingDepth();
    public abstract virtual CanvasOpticalAlignment get_OpticalAlignment();
    public abstract virtual void set_OpticalAlignment(CanvasOpticalAlignment value);
    public abstract virtual CanvasDrawTextOptions get_Options();
    public abstract virtual void set_Options(CanvasDrawTextOptions value);
    public abstract virtual Size get_RequestedSize();
    public abstract virtual void set_RequestedSize(Size value);
    public abstract virtual string get_TrimmingDelimiter();
    public abstract virtual void set_TrimmingDelimiter(string value);
    public abstract virtual int get_TrimmingDelimiterCount();
    public abstract virtual void set_TrimmingDelimiterCount(int value);
    public abstract virtual CanvasTextTrimmingGranularity get_TrimmingGranularity();
    public abstract virtual void set_TrimmingGranularity(CanvasTextTrimmingGranularity value);
    public abstract virtual CanvasTrimmingSign get_TrimmingSign();
    public abstract virtual void set_TrimmingSign(CanvasTrimmingSign value);
    public abstract virtual CanvasVerticalAlignment get_VerticalAlignment();
    public abstract virtual void set_VerticalAlignment(CanvasVerticalAlignment value);
    public abstract virtual CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation();
    public abstract virtual void set_VerticalGlyphOrientation(CanvasVerticalGlyphOrientation value);
    public abstract virtual CanvasWordWrapping get_WordWrapping();
    public abstract virtual void set_WordWrapping(CanvasWordWrapping value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("9C1F7179-ACD0-4680-93D5-95A6247E8F6B")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory {
    public abstract virtual CanvasTextLayout Create(ICanvasResourceCreator resourceCreator, string textString, CanvasTextFormat textFormat, float requestedWidth, float requestedHeight);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7F2B8FFD-6935-4F60-B409-6394A19C5EBC")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics {
    public abstract virtual Matrix3x2 GetGlyphOrientationTransform(CanvasGlyphOrientation glyphOrientation, bool isSideways, Vector2 position);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("9AAEECE5-8D09-4A64-B322-AF030421B2E4")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer")]
public interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer {
    public float Dpi { get; }
    public bool PixelSnappingDisabled { get; }
    public Matrix3x2 Transform { get; }
    public abstract virtual void DrawGlyphRun(Vector2 point, CanvasFontFace fontFace, float fontSize, CanvasGlyph[] glyphs, bool isSideways, UInt32 bidiLevel, object brush, CanvasTextMeasuringMode measuringMode, string localeName, string textString, Int32[] clusterMapIndices, UInt32 characterIndex, CanvasGlyphOrientation glyphOrientation);
    public abstract virtual void DrawStrikethrough(Vector2 point, float strikethroughWidth, float strikethroughThickness, float strikethroughOffset, CanvasTextDirection textDirection, object brush, CanvasTextMeasuringMode textMeasuringMode, string localeName, CanvasGlyphOrientation glyphOrientation);
    public abstract virtual void DrawUnderline(Vector2 point, float underlineWidth, float underlineThickness, float underlineOffset, float runHeight, CanvasTextDirection textDirection, object brush, CanvasTextMeasuringMode textMeasuringMode, string localeName, CanvasGlyphOrientation glyphOrientation);
    public abstract virtual void DrawInlineObject(Vector2 point, ICanvasTextInlineObject inlineObject, bool isSideways, bool isRightToLeft, object brush, CanvasGlyphOrientation glyphOrientation);
    public abstract virtual float get_Dpi();
    public abstract virtual bool get_PixelSnappingDisabled();
    public abstract virtual Matrix3x2 get_Transform();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters {
    public CanvasTextGridFit GridFit { get; }
    public CanvasTextRenderingMode RenderingMode { get; }
    public abstract virtual CanvasTextGridFit get_GridFit();
    public abstract virtual CanvasTextRenderingMode get_RenderingMode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("D240AC25-4D23-4964-9D9A-DB2FC8AF185D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory {
    public abstract virtual CanvasTextRenderingParameters Create(CanvasTextRenderingMode textRenderingMode, CanvasTextGridFit gridFit);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F15BC312-447F-44ED-8BEC-7E40F4A4DFC8")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.Text.ICanvasTypography")]
internal interface Microsoft.Graphics.Canvas.Text.ICanvasTypography {
    [OverloadAttribute("AddFeature")]
public abstract virtual void AddFeature(CanvasTypographyFeature feature);
    [OverloadAttribute("AddFeatureWithNameAndParameter")]
public abstract virtual void AddFeature(CanvasTypographyFeatureName name, UInt32 parameter);
    public abstract virtual CanvasTypographyFeature[] GetFeatures();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs")]
[CanvasCreateResourcesEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs")]
public class Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasCreateResourcesReason Reason { get; }
    public CanvasCreateResourcesEventArgs(CanvasCreateResourcesReason createResourcesReason);
    internal CanvasCreateResourcesEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgs();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_ICanvasCreateResourcesEventArgsFactory();
    public static CanvasCreateResourcesEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasCreateResourcesEventArgs x, CanvasCreateResourcesEventArgs y);
    public static bool op_Inequality(CanvasCreateResourcesEventArgs x, CanvasCreateResourcesEventArgs y);
    public sealed virtual bool Equals(CanvasCreateResourcesEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public void TrackAsyncAction(IAsyncAction action);
    public IAsyncAction GetTrackedAction();
    public CanvasCreateResourcesReason get_Reason();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WinRTExposedTypeAttribute("WinRT.EnumTypeDetails`1<Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason>")]
public enum Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesReason : Enum {
    public int value__;
    public static CanvasCreateResourcesReason FirstTime;
    public static CanvasCreateResourcesReason NewDevice;
    public static CanvasCreateResourcesReason DpiChanged;
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas", "struct(Microsoft.Graphics.Canvas.UI.CanvasTimingInformation;i8;struct(Windows.Foundation.TimeSpan;i8);struct(Windows.Foundation.TimeSpan;i8);b1)")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.CanvasTimingInformation")]
[WinRTExposedTypeAttribute("WinRT.StructTypeDetails`2<Microsoft.Graphics.Canvas.UI.CanvasTimingInformation,ABI.Microsoft.Graphics.Canvas.UI.CanvasTimingInformation>")]
public class Microsoft.Graphics.Canvas.UI.CanvasTimingInformation : ValueType {
    public long UpdateCount;
    public TimeSpan TotalTime;
    public TimeSpan ElapsedTime;
    public bool IsRunningSlowly;
    public CanvasTimingInformation(long _UpdateCount, TimeSpan _TotalTime, TimeSpan _ElapsedTime, bool _IsRunningSlowly);
    public static bool op_Equality(CanvasTimingInformation x, CanvasTimingInformation y);
    public static bool op_Inequality(CanvasTimingInformation x, CanvasTimingInformation y);
    public sealed virtual bool Equals(CanvasTimingInformation other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
public static class Microsoft.Graphics.Canvas.UI.Composition.CanvasComposition : object {
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics;
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics { get; }
    public static I As();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Composition_ICanvasCompositionStatics();
    public static CompositionGraphicsDevice CreateCompositionGraphicsDevice(Compositor compositor, CanvasDevice canvasDevice);
    public static ICompositionSurface CreateCompositionSurfaceForSwapChain(Compositor compositor, CanvasSwapChain swapChain);
    public static CanvasDevice GetCanvasDevice(CompositionGraphicsDevice graphicsDevice);
    public static void SetCanvasDevice(CompositionGraphicsDevice graphicsDevice, CanvasDevice canvasDevice);
    public static CanvasDrawingSession CreateDrawingSession(CompositionDrawingSurface drawingSurface);
    public static CanvasDrawingSession CreateDrawingSession(CompositionDrawingSurface drawingSurface, Rect updateRect);
    public static CanvasDrawingSession CreateDrawingSession(CompositionDrawingSurface drawingSurface, Rect updateRectInPixels, float dpi);
    public static void Resize(CompositionDrawingSurface drawingSurface, Size sizeInPixels);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("162DEB43-1CF5-46F8-A0AF-356B23158F92")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics")]
internal interface Microsoft.Graphics.Canvas.UI.Composition.ICanvasCompositionStatics {
    public abstract virtual CompositionGraphicsDevice CreateCompositionGraphicsDevice(Compositor compositor, CanvasDevice canvasDevice);
    public abstract virtual ICompositionSurface CreateCompositionSurfaceForSwapChain(Compositor compositor, CanvasSwapChain swapChain);
    public abstract virtual CanvasDevice GetCanvasDevice(CompositionGraphicsDevice graphicsDevice);
    public abstract virtual void SetCanvasDevice(CompositionGraphicsDevice graphicsDevice, CanvasDevice canvasDevice);
    [OverloadAttribute("CreateDrawingSession")]
public abstract virtual CanvasDrawingSession CreateDrawingSession(CompositionDrawingSurface drawingSurface);
    [OverloadAttribute("CreateDrawingSessionWithUpdateRect")]
public abstract virtual CanvasDrawingSession CreateDrawingSession(CompositionDrawingSurface drawingSurface, Rect updateRect);
    [OverloadAttribute("CreateDrawingSessionWithUpdateRectAndDpi")]
public abstract virtual CanvasDrawingSession CreateDrawingSession(CompositionDrawingSurface drawingSurface, Rect updateRectInPixels, float dpi);
    public abstract virtual void Resize(CompositionDrawingSurface drawingSurface, Size sizeInPixels);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("EDC52108-F6BA-4A09-9FA3-10C97A24E49A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs")]
internal interface Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgs {
    public CanvasCreateResourcesReason Reason { get; }
    public abstract virtual void TrackAsyncAction(IAsyncAction action);
    public abstract virtual IAsyncAction GetTrackedAction();
    public abstract virtual CanvasCreateResourcesReason get_Reason();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3A21C766-0781-4389-BBC3-86B1F5022AF1")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory")]
internal interface Microsoft.Graphics.Canvas.UI.ICanvasCreateResourcesEventArgsFactory {
    public abstract virtual CanvasCreateResourcesEventArgs Create(CanvasCreateResourcesReason createResourcesReason);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl")]
[CanvasAnimatedControlRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedControl : UserControl {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color ClearColor { get; public set; }
    public CanvasDevice CustomDevice { get; public set; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public float DpiScale { get; public set; }
    public bool ForceSoftwareRenderer { get; public set; }
    public bool HasGameLoopThreadAccess { get; }
    public bool IsFixedTimeStep { get; public set; }
    public bool Paused { get; public set; }
    public bool ReadyToDraw { get; }
    public Size Size { get; }
    public TimeSpan TargetElapsedTime { get; public set; }
    public bool UseSharedDevice { get; public set; }
    internal CanvasAnimatedControl(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl();
    public static CanvasAnimatedControl FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasAnimatedControl x, CanvasAnimatedControl y);
    public static bool op_Inequality(CanvasAnimatedControl x, CanvasAnimatedControl y);
    public sealed virtual bool Equals(CanvasAnimatedControl other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public sealed virtual void Invalidate();
    public sealed virtual void ResetElapsedTime();
    public sealed virtual CoreIndependentInputSource CreateCoreIndependentInputSource(CoreInputDeviceTypes deviceTypes);
    public sealed virtual void RemoveFromVisualTree();
    public sealed virtual IAsyncAction RunOnGameLoopThreadAsync(DispatchedHandler agileCallback);
    public sealed virtual void add_CreateResources(TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs> value);
    public sealed virtual void remove_CreateResources(TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs> value);
    public sealed virtual void add_Draw(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs> value);
    public sealed virtual void remove_Draw(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs> value);
    public sealed virtual void add_GameLoopStarting(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    public sealed virtual void remove_GameLoopStarting(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    public sealed virtual void add_GameLoopStopped(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    public sealed virtual void remove_GameLoopStopped(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    public sealed virtual void add_Update(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs> value);
    public sealed virtual void remove_Update(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs> value);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public sealed virtual Color get_ClearColor();
    public sealed virtual void set_ClearColor(Color value);
    public sealed virtual CanvasDevice get_CustomDevice();
    public sealed virtual void set_CustomDevice(CanvasDevice value);
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public sealed virtual float get_DpiScale();
    public sealed virtual void set_DpiScale(float value);
    public sealed virtual bool get_ForceSoftwareRenderer();
    public sealed virtual void set_ForceSoftwareRenderer(bool value);
    public sealed virtual bool get_HasGameLoopThreadAccess();
    public sealed virtual bool get_IsFixedTimeStep();
    public sealed virtual void set_IsFixedTimeStep(bool value);
    public sealed virtual bool get_Paused();
    public sealed virtual void set_Paused(bool value);
    public sealed virtual bool get_ReadyToDraw();
    public sealed virtual Size get_Size();
    public sealed virtual TimeSpan get_TargetElapsedTime();
    public sealed virtual void set_TargetElapsedTime(TimeSpan value);
    public sealed virtual bool get_UseSharedDevice();
    public sealed virtual void set_UseSharedDevice(bool value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs")]
[CanvasAnimatedDrawEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedDrawEventArgs : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDrawingSession DrawingSession { get; }
    public CanvasTimingInformation Timing { get; }
    public CanvasAnimatedDrawEventArgs(CanvasDrawingSession canvasDrawingSession, CanvasTimingInformation timingInformation);
    internal CanvasAnimatedDrawEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgs();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedDrawEventArgsFactory();
    public static CanvasAnimatedDrawEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasAnimatedDrawEventArgs x, CanvasAnimatedDrawEventArgs y);
    public static bool op_Inequality(CanvasAnimatedDrawEventArgs x, CanvasAnimatedDrawEventArgs y);
    public sealed virtual bool Equals(CanvasAnimatedDrawEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasDrawingSession get_DrawingSession();
    public CanvasTimingInformation get_Timing();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs")]
[CanvasAnimatedUpdateEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasAnimatedUpdateEventArgs : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasTimingInformation Timing { get; }
    public CanvasAnimatedUpdateEventArgs(CanvasTimingInformation timingInformation);
    internal CanvasAnimatedUpdateEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgs();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedUpdateEventArgsFactory();
    public static CanvasAnimatedUpdateEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasAnimatedUpdateEventArgs x, CanvasAnimatedUpdateEventArgs y);
    public static bool op_Inequality(CanvasAnimatedUpdateEventArgs x, CanvasAnimatedUpdateEventArgs y);
    public sealed virtual bool Equals(CanvasAnimatedUpdateEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasTimingInformation get_Timing();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl")]
[CanvasControlRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl : UserControl {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color ClearColor { get; public set; }
    public CanvasDevice CustomDevice { get; public set; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public float DpiScale { get; public set; }
    public bool ForceSoftwareRenderer { get; public set; }
    public bool ReadyToDraw { get; }
    public Size Size { get; }
    public bool UseSharedDevice { get; public set; }
    internal CanvasControl(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasControl();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl();
    public static CanvasControl FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasControl x, CanvasControl y);
    public static bool op_Inequality(CanvasControl x, CanvasControl y);
    public sealed virtual bool Equals(CanvasControl other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void Invalidate();
    public void RemoveFromVisualTree();
    public void add_CreateResources(TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs> value);
    public void remove_CreateResources(TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs> value);
    public void add_Draw(TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs> value);
    public void remove_Draw(TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs> value);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public Color get_ClearColor();
    public void set_ClearColor(Color value);
    public CanvasDevice get_CustomDevice();
    public void set_CustomDevice(CanvasDevice value);
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public float get_DpiScale();
    public void set_DpiScale(float value);
    public bool get_ForceSoftwareRenderer();
    public void set_ForceSoftwareRenderer(bool value);
    public bool get_ReadyToDraw();
    public Size get_Size();
    public bool get_UseSharedDevice();
    public void set_UseSharedDevice(bool value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs")]
[CanvasDrawEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs : object {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasDrawingSession DrawingSession { get; }
    public CanvasDrawEventArgs(CanvasDrawingSession canvasDrawingSession);
    internal CanvasDrawEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgs();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasDrawEventArgsFactory();
    public static CanvasDrawEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasDrawEventArgs x, CanvasDrawEventArgs y);
    public static bool op_Inequality(CanvasDrawEventArgs x, CanvasDrawEventArgs y);
    public sealed virtual bool Equals(CanvasDrawEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasDrawingSession get_DrawingSession();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource")]
[CanvasImageSourceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource : SurfaceImageSource {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CanvasAlphaMode AlphaMode { get; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    public CanvasImageSource(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public CanvasImageSource(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public CanvasImageSource(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public CanvasImageSource(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, CanvasAlphaMode alphaMode);
    internal CanvasImageSource(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSource();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasImageSourceFactory();
    public static CanvasImageSource FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasImageSource x, CanvasImageSource y);
    public static bool op_Inequality(CanvasImageSource x, CanvasImageSource y);
    public sealed virtual bool Equals(CanvasImageSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CanvasDrawingSession CreateDrawingSession(Color clearColor);
    public CanvasDrawingSession CreateDrawingSession(Color clearColor, Rect updateRectangle);
    public void Recreate(ICanvasResourceCreator value);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public CanvasAlphaMode get_AlphaMode();
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public Size get_Size();
    public BitmapSize get_SizeInPixels();
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs")]
[CanvasRegionsInvalidatedEventArgsRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs : object {
    private IObjectReference _inner;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public Rect[] InvalidatedRegions { get; }
    public Rect VisibleRegion { get; }
    internal CanvasRegionsInvalidatedEventArgs(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasRegionsInvalidatedEventArgs();
    public static CanvasRegionsInvalidatedEventArgs FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasRegionsInvalidatedEventArgs x, CanvasRegionsInvalidatedEventArgs y);
    public static bool op_Inequality(CanvasRegionsInvalidatedEventArgs x, CanvasRegionsInvalidatedEventArgs y);
    public sealed virtual bool Equals(CanvasRegionsInvalidatedEventArgs other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public Rect[] get_InvalidatedRegions();
    public Rect get_VisibleRegion();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel")]
[CanvasSwapChainPanelRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel : SwapChainPanel {
    private IObjectReference _inner;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public CanvasSwapChain SwapChain { get; public set; }
    internal CanvasSwapChainPanel(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasSwapChainPanel();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasSwapChainPanel();
    public static CanvasSwapChainPanel FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasSwapChainPanel x, CanvasSwapChainPanel y);
    public static bool op_Inequality(CanvasSwapChainPanel x, CanvasSwapChainPanel y);
    public sealed virtual bool Equals(CanvasSwapChainPanel other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public void RemoveFromVisualTree();
    public CanvasSwapChain get_SwapChain();
    public void set_SwapChain(CanvasSwapChain value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl")]
[CanvasVirtualControlRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl : UserControl {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    public Color ClearColor { get; public set; }
    public CanvasDevice CustomDevice { get; public set; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public float DpiScale { get; public set; }
    public bool ForceSoftwareRenderer { get; public set; }
    public bool ReadyToDraw { get; }
    public Size Size { get; }
    public bool UseSharedDevice { get; public set; }
    internal CanvasVirtualControl(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualControl();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl();
    public static CanvasVirtualControl FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasVirtualControl x, CanvasVirtualControl y);
    public static bool op_Inequality(CanvasVirtualControl x, CanvasVirtualControl y);
    public sealed virtual bool Equals(CanvasVirtualControl other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    public CanvasDrawingSession CreateDrawingSession(Rect updateRectangle);
    public void SuspendDrawingSession(CanvasDrawingSession drawingSession);
    public void ResumeDrawingSession(CanvasDrawingSession drawingSession);
    public void Invalidate();
    public void Invalidate(Rect region);
    public void RemoveFromVisualTree();
    public void add_CreateResources(TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs> value);
    public void remove_CreateResources(TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs> value);
    public void add_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs> value);
    public void remove_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs> value);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public Color get_ClearColor();
    public void set_ClearColor(Color value);
    public CanvasDevice get_CustomDevice();
    public void set_CustomDevice(CanvasDevice value);
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public float get_DpiScale();
    public void set_DpiScale(float value);
    public bool get_ForceSoftwareRenderer();
    public void set_ForceSoftwareRenderer(bool value);
    public bool get_ReadyToDraw();
    public Size get_Size();
    public bool get_UseSharedDevice();
    public void set_UseSharedDevice(bool value);
    protected virtual bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource")]
[CanvasVirtualImageSourceRcwFactoryAttribute]
[ProjectedRuntimeClassAttribute("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource")]
public class Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource : object {
    private IObjectReference _inner;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi;
    private IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator;
    private static IObjectReference modreq(System.Runtime.CompilerServices.IsVolatile) ___objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _queryInterfaceCache;
    private ConcurrentDictionary`2 modreq(System.Runtime.CompilerServices.IsVolatile) _additionalTypeData;
    private IntPtr ThisPtr { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi { get; }
    private IObjectReference _objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator { get; }
    private static IObjectReference _objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory { get; }
    private bool WinRT.IWinRTObject.HasUnwrappableNativeObject { get; }
    private IObjectReference WinRT.IWinRTObject.NativeObject { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.QueryInterfaceCache { get; }
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.AdditionalTypeData { get; }
    public CanvasAlphaMode AlphaMode { get; }
    public CanvasDevice Device { get; }
    public float Dpi { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    public VirtualSurfaceImageSource Source { get; }
    public CanvasVirtualImageSource(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public CanvasVirtualImageSource(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public CanvasVirtualImageSource(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public CanvasVirtualImageSource(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, CanvasAlphaMode alphaMode);
    internal CanvasVirtualImageSource(IObjectReference objRef);
    private IntPtr get_ThisPtr();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSource();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreatorWithDpi();
    private IObjectReference Make___objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_ICanvasResourceCreator();
    private static IObjectReference get__objRef_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasVirtualImageSourceFactory();
    public static CanvasVirtualImageSource FromAbi(IntPtr thisPtr);
    public static bool op_Equality(CanvasVirtualImageSource x, CanvasVirtualImageSource y);
    public static bool op_Inequality(CanvasVirtualImageSource x, CanvasVirtualImageSource y);
    public sealed virtual bool Equals(CanvasVirtualImageSource other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override bool WinRT.IWinRTObject.get_HasUnwrappableNativeObject();
    private sealed virtual override IObjectReference WinRT.IWinRTObject.get_NativeObject();
    private ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> MakeQueryInterfaceCache();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, IObjectReference> WinRT.IWinRTObject.get_QueryInterfaceCache();
    private ConcurrentDictionary`2<RuntimeTypeHandle, object> MakeAdditionalTypeData();
    private sealed virtual override ConcurrentDictionary`2<RuntimeTypeHandle, object> WinRT.IWinRTObject.get_AdditionalTypeData();
    public CanvasDrawingSession CreateDrawingSession(Color clearColor, Rect updateRectangle);
    public void SuspendDrawingSession(CanvasDrawingSession drawingSession);
    public void ResumeDrawingSession(CanvasDrawingSession drawingSession);
    public void Invalidate();
    public void Invalidate(Rect region);
    public void RaiseRegionsInvalidatedIfAny();
    public void Resize(Size size);
    public void Resize(float width, float height);
    public void Resize(float width, float height, float dpi);
    public void Recreate(ICanvasResourceCreator resourceCreator);
    public void add_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs> value);
    public void remove_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs> value);
    public sealed virtual float ConvertPixelsToDips(int pixels);
    public sealed virtual int ConvertDipsToPixels(float dips, CanvasDpiRounding dpiRounding);
    public CanvasAlphaMode get_AlphaMode();
    public sealed virtual CanvasDevice get_Device();
    public sealed virtual float get_Dpi();
    public Size get_Size();
    public BitmapSize get_SizeInPixels();
    public VirtualSurfaceImageSource get_Source();
    private bool IsOverridableInterface(Guid iid);
    private sealed virtual override CustomQueryInterfaceResult global::System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(Guid& iid, IntPtr& ppv);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("9BD47D0D-D57D-43B7-82CB-489CC566E887")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl")]
public interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl {
    public Color ClearColor { get; public set; }
    public CanvasDevice CustomDevice { get; public set; }
    public float DpiScale { get; public set; }
    public bool ForceSoftwareRenderer { get; public set; }
    public bool HasGameLoopThreadAccess { get; }
    public bool IsFixedTimeStep { get; public set; }
    public bool Paused { get; public set; }
    public bool ReadyToDraw { get; }
    public Size Size { get; }
    public TimeSpan TargetElapsedTime { get; public set; }
    public bool UseSharedDevice { get; public set; }
    public abstract virtual void Invalidate();
    public abstract virtual void ResetElapsedTime();
    public abstract virtual CoreIndependentInputSource CreateCoreIndependentInputSource(CoreInputDeviceTypes deviceTypes);
    public abstract virtual void RemoveFromVisualTree();
    public abstract virtual IAsyncAction RunOnGameLoopThreadAsync(DispatchedHandler agileCallback);
    public abstract virtual Color get_ClearColor();
    public abstract virtual void set_ClearColor(Color value);
    public abstract virtual CanvasDevice get_CustomDevice();
    public abstract virtual void set_CustomDevice(CanvasDevice value);
    public abstract virtual float get_DpiScale();
    public abstract virtual void set_DpiScale(float value);
    public abstract virtual bool get_ForceSoftwareRenderer();
    public abstract virtual void set_ForceSoftwareRenderer(bool value);
    public abstract virtual bool get_HasGameLoopThreadAccess();
    public abstract virtual bool get_IsFixedTimeStep();
    public abstract virtual void set_IsFixedTimeStep(bool value);
    public abstract virtual bool get_Paused();
    public abstract virtual void set_Paused(bool value);
    public abstract virtual bool get_ReadyToDraw();
    public abstract virtual Size get_Size();
    public abstract virtual TimeSpan get_TargetElapsedTime();
    public abstract virtual void set_TargetElapsedTime(TimeSpan value);
    public abstract virtual bool get_UseSharedDevice();
    public abstract virtual void set_UseSharedDevice(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateResources(TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateResources(TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Draw(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Draw(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GameLoopStarting(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GameLoopStarting(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_GameLoopStopped(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_GameLoopStopped(TypedEventHandler`2<ICanvasAnimatedControl, object> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Update(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Update(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgs {
    public CanvasDrawingSession DrawingSession { get; }
    public CanvasTimingInformation Timing { get; }
    public abstract virtual CanvasDrawingSession get_DrawingSession();
    public abstract virtual CanvasTimingInformation get_Timing();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedDrawEventArgsFactory {
    public abstract virtual CanvasAnimatedDrawEventArgs Create(CanvasDrawingSession canvasDrawingSession, CanvasTimingInformation timingInformation);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("A96B2B2A-0C6E-4AA8-925B-7137263B4E44")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgs {
    public CanvasTimingInformation Timing { get; }
    public abstract virtual CanvasTimingInformation get_Timing();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("766F4867-B22A-464B-89B1-0DA6AB62BE68")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedUpdateEventArgsFactory {
    public abstract virtual CanvasAnimatedUpdateEventArgs Create(CanvasTimingInformation timingInformation);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("F006E06D-79DB-484F-B898-479CF069C0F5")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl {
    public Color ClearColor { get; public set; }
    public CanvasDevice CustomDevice { get; public set; }
    public float DpiScale { get; public set; }
    public bool ForceSoftwareRenderer { get; public set; }
    public bool ReadyToDraw { get; }
    public Size Size { get; }
    public bool UseSharedDevice { get; public set; }
    public abstract virtual void Invalidate();
    public abstract virtual void RemoveFromVisualTree();
    public abstract virtual Color get_ClearColor();
    public abstract virtual void set_ClearColor(Color value);
    public abstract virtual CanvasDevice get_CustomDevice();
    public abstract virtual void set_CustomDevice(CanvasDevice value);
    public abstract virtual float get_DpiScale();
    public abstract virtual void set_DpiScale(float value);
    public abstract virtual bool get_ForceSoftwareRenderer();
    public abstract virtual void set_ForceSoftwareRenderer(bool value);
    public abstract virtual bool get_ReadyToDraw();
    public abstract virtual Size get_Size();
    public abstract virtual bool get_UseSharedDevice();
    public abstract virtual void set_UseSharedDevice(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateResources(TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateResources(TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Draw(TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Draw(TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("FB86169F-25D4-4551-BD8F-214BEAF0AC24")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs {
    public CanvasDrawingSession DrawingSession { get; }
    public abstract virtual CanvasDrawingSession get_DrawingSession();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory {
    public abstract virtual CanvasDrawEventArgs Create(CanvasDrawingSession canvasDrawingSession);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3C35E87A-E881-4F44-B0D1-551413AEC66D")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource {
    public CanvasAlphaMode AlphaMode { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    [OverloadAttribute("CreateDrawingSession")]
public abstract virtual CanvasDrawingSession CreateDrawingSession(Color clearColor);
    [OverloadAttribute("CreateDrawingSessionWithUpdateRectangle")]
public abstract virtual CanvasDrawingSession CreateDrawingSession(Color clearColor, Rect updateRectangle);
    public abstract virtual void Recreate(ICanvasResourceCreator value);
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual Size get_Size();
    public abstract virtual BitmapSize get_SizeInPixels();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("8596BEDD-D7F7-4C6B-B1AD-41949035E084")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory {
    public abstract virtual CanvasImageSource CreateWithSize(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public abstract virtual CanvasImageSource CreateWithWidthAndHeight(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public abstract virtual CanvasImageSource CreateWithWidthAndHeightAndDpi(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public abstract virtual CanvasImageSource CreateWithWidthAndHeightAndDpiAndAlphaMode(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, CanvasAlphaMode alphaMode);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3A21A204-F52F-4E7A-9B3F-94669819D981")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs {
    public Rect[] InvalidatedRegions { get; }
    public Rect VisibleRegion { get; }
    public abstract virtual Rect[] get_InvalidatedRegions();
    public abstract virtual Rect get_VisibleRegion();
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("DBDCCB96-147E-4A82-AF3A-C91C7800DAA7")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel {
    public CanvasSwapChain SwapChain { get; public set; }
    public abstract virtual void RemoveFromVisualTree();
    public abstract virtual CanvasSwapChain get_SwapChain();
    public abstract virtual void set_SwapChain(CanvasSwapChain value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("3C2B5177-7C61-41D2-95AE-FCFC92FD617A")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl {
    public Color ClearColor { get; public set; }
    public CanvasDevice CustomDevice { get; public set; }
    public float DpiScale { get; public set; }
    public bool ForceSoftwareRenderer { get; public set; }
    public bool ReadyToDraw { get; }
    public Size Size { get; }
    public bool UseSharedDevice { get; public set; }
    public abstract virtual CanvasDrawingSession CreateDrawingSession(Rect updateRectangle);
    public abstract virtual void SuspendDrawingSession(CanvasDrawingSession drawingSession);
    public abstract virtual void ResumeDrawingSession(CanvasDrawingSession drawingSession);
    [OverloadAttribute("Invalidate")]
public abstract virtual void Invalidate();
    [OverloadAttribute("InvalidateRegion")]
public abstract virtual void Invalidate(Rect region);
    public abstract virtual void RemoveFromVisualTree();
    public abstract virtual Color get_ClearColor();
    public abstract virtual void set_ClearColor(Color value);
    public abstract virtual CanvasDevice get_CustomDevice();
    public abstract virtual void set_CustomDevice(CanvasDevice value);
    public abstract virtual float get_DpiScale();
    public abstract virtual void set_DpiScale(float value);
    public abstract virtual bool get_ForceSoftwareRenderer();
    public abstract virtual void set_ForceSoftwareRenderer(bool value);
    public abstract virtual bool get_ReadyToDraw();
    public abstract virtual Size get_Size();
    public abstract virtual bool get_UseSharedDevice();
    public abstract virtual void set_UseSharedDevice(bool value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_CreateResources(TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CreateResources(TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource {
    public CanvasAlphaMode AlphaMode { get; }
    public Size Size { get; }
    public BitmapSize SizeInPixels { get; }
    public VirtualSurfaceImageSource Source { get; }
    public abstract virtual CanvasDrawingSession CreateDrawingSession(Color clearColor, Rect updateRectangle);
    public abstract virtual void SuspendDrawingSession(CanvasDrawingSession drawingSession);
    public abstract virtual void ResumeDrawingSession(CanvasDrawingSession drawingSession);
    [OverloadAttribute("Invalidate")]
public abstract virtual void Invalidate();
    [OverloadAttribute("InvalidateRegion")]
public abstract virtual void Invalidate(Rect region);
    public abstract virtual void RaiseRegionsInvalidatedIfAny();
    [OverloadAttribute("ResizeWithSize")]
public abstract virtual void Resize(Size size);
    [OverloadAttribute("ResizeWithWidthAndHeight")]
public abstract virtual void Resize(float width, float height);
    [OverloadAttribute("ResizeWithWidthAndHeightAndDpi")]
public abstract virtual void Resize(float width, float height, float dpi);
    public abstract virtual void Recreate(ICanvasResourceCreator resourceCreator);
    public abstract virtual CanvasAlphaMode get_AlphaMode();
    public abstract virtual Size get_Size();
    public abstract virtual BitmapSize get_SizeInPixels();
    public abstract virtual VirtualSurfaceImageSource get_Source();
    [CompilerGeneratedAttribute]
public abstract virtual void add_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_RegionsInvalidated(TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs> value);
}
[WindowsRuntimeTypeAttribute("Microsoft.Graphics.Canvas")]
[GuidAttribute("2FE755A1-307A-4623-9250-29590485BDB6")]
[WindowsRuntimeHelperTypeAttribute("ABI.Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory")]
internal interface Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory {
    public abstract virtual CanvasVirtualImageSource CreateWithSize(ICanvasResourceCreatorWithDpi resourceCreator, Size size);
    public abstract virtual CanvasVirtualImageSource CreateWithWidthAndHeight(ICanvasResourceCreatorWithDpi resourceCreator, float width, float height);
    public abstract virtual CanvasVirtualImageSource CreateWithWidthAndHeightAndDpi(ICanvasResourceCreator resourceCreator, float width, float height, float dpi);
    public abstract virtual CanvasVirtualImageSource CreateWithWidthAndHeightAndDpiAndAlphaMode(ICanvasResourceCreator resourceCreator, float width, float height, float dpi, CanvasAlphaMode alphaMode);
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_CanvasDevice__object_ : EventSource`1<TypedEventHandler`2<CanvasDevice, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_CanvasDevice__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_CanvasDevice__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasDevice, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasDevice, object>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPreviewEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__global__Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasPrintDocument, CanvasPrintTaskOptionsChangedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasAnimatedControl, CanvasCreateResourcesEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasControl, CanvasCreateResourcesEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasControl, CanvasDrawEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__global__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasVirtualControl, CanvasCreateResourcesEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasVirtualControl, CanvasRegionsInvalidatedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_ : EventSource`1<TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<CanvasVirtualImageSource, CanvasRegionsInvalidatedEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_ : EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedDrawEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_ : EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__global__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ICanvasAnimatedControl, CanvasAnimatedUpdateEventArgs>> CreateEventSourceState();
}
internal class WinRT._EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__object_ : EventSource`1<TypedEventHandler`2<ICanvasAnimatedControl, object>> {
    private static bool initialized;
    internal _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__object_(IObjectReference obj, method addHandler, method removeHandler, int index);
    private static _EventSource_global__Windows_Foundation_TypedEventHandler_global__Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__object_();
    protected virtual ObjectReferenceValue CreateMarshaler(TypedEventHandler`2<ICanvasAnimatedControl, object> handler);
    protected virtual EventSourceState`1<TypedEventHandler`2<ICanvasAnimatedControl, object>> CreateEventSourceState();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_CanvasBitmap : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_CanvasBitmap();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_CanvasVirtualBitmap : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_CanvasVirtualBitmap();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_AsyncOperationCompletedHandler_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr asyncInfo, AsyncStatus asyncStatus);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Microsoft_Graphics_Canvas_Text_CanvasFontFace : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Microsoft_Graphics_Canvas_Text_CanvasFontFace();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<CanvasFontFace> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<CanvasCharacterRange, CanvasNumberSubstitution>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__object_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__object_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<string, object>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<KeyValuePair`2<string, string>> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterable_1_Windows_Graphics_Effects_IGraphicsEffectSource : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterable_1_Windows_Graphics_Effects_IGraphicsEffectSource();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IEnumerator`1<IGraphicsEffectSource> First(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Microsoft_Graphics_Canvas_Text_CanvasFontFace : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Microsoft_Graphics_Canvas_Text_CanvasFontFace();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, CanvasFontFace[] items);
    private static CanvasFontFace get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<CanvasCharacterRange, CanvasNumberSubstitution> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__object_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__object_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<string, object> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Foundation_Collections_IKeyValuePair_2_String__String_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, KeyValuePair`2[] items);
    private static KeyValuePair`2<string, string> get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IIterator_1_Windows_Graphics_Effects_IGraphicsEffectSource : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IIterator_1_Windows_Graphics_Effects_IGraphicsEffectSource();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static UInt32 GetMany(IObjectReference _obj, IGraphicsEffectSource[] items);
    private static IGraphicsEffectSource get_Current(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasCharacterRange get_Key(IObjectReference _obj);
    private static CanvasAnalyzedBidi get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasCharacterRange get_Key(IObjectReference _obj);
    private static CanvasAnalyzedGlyphOrientation get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasCharacterRange get_Key(IObjectReference _obj);
    private static CanvasAnalyzedScript get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasCharacterRange get_Key(IObjectReference _obj);
    private static CanvasNumberSubstitution get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasCharacterRange get_Key(IObjectReference _obj);
    private static CanvasScaledFont get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_String__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_String__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string get_Key(IObjectReference _obj);
    private static object get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IKeyValuePair_2_String__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IKeyValuePair_2_String__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string get_Key(IObjectReference _obj);
    private static string get_Value(IObjectReference _obj);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMap_2_String__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMap_2_String__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static object Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static IReadOnlyDictionary`2<string, object> GetView(IObjectReference _obj);
    private static bool Insert(IObjectReference _obj, string key, object value);
    private static void Remove(IObjectReference _obj, string key);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_String__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static object Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IMapView_2_String__String : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IMapView_2_String__String();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static string Lookup(IObjectReference _obj, string key);
    private static bool HasKey(IObjectReference _obj, string key);
    private static void Split(IObjectReference _obj, IReadOnlyDictionary`2& first, IReadOnlyDictionary`2& second);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVector_1_Windows_Graphics_Effects_IGraphicsEffectSource : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVector_1_Windows_Graphics_Effects_IGraphicsEffectSource();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IGraphicsEffectSource GetAt(IObjectReference _obj, UInt32 index);
    private static IReadOnlyList`1<IGraphicsEffectSource> GetView(IObjectReference _obj);
    private static bool IndexOf(IObjectReference _obj, IGraphicsEffectSource value, UInt32& index);
    private static void SetAt(IObjectReference _obj, UInt32 index, IGraphicsEffectSource value);
    private static void InsertAt(IObjectReference _obj, UInt32 index, IGraphicsEffectSource value);
    private static void Append(IObjectReference _obj, IGraphicsEffectSource value);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, IGraphicsEffectSource[] items);
    private static void ReplaceAll(IObjectReference _obj, IGraphicsEffectSource[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Microsoft_Graphics_Canvas_Text_CanvasFontFace : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Microsoft_Graphics_Canvas_Text_CanvasFontFace();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasFontFace GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, CanvasFontFace value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, CanvasFontFace[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedBidi_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi> GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedBidi> value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, KeyValuePair`2[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedGlyphOrientation_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation> GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedGlyphOrientation> value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, KeyValuePair`2[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasAnalyzedScript_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript> GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, KeyValuePair`2<CanvasCharacterRange, CanvasAnalyzedScript> value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, KeyValuePair`2[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasNumberSubstitution_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static KeyValuePair`2<CanvasCharacterRange, CanvasNumberSubstitution> GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, KeyValuePair`2<CanvasCharacterRange, CanvasNumberSubstitution> value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, KeyValuePair`2[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont_ : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Windows_Foundation_Collections_IKeyValuePair_2_Microsoft_Graphics_Canvas_Text_CanvasCharacterRange__Microsoft_Graphics_Canvas_Text_CanvasScaledFont_();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont> GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, KeyValuePair`2<CanvasCharacterRange, CanvasScaledFont> value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, KeyValuePair`2[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_Collections_IVectorView_1_Windows_Graphics_Effects_IGraphicsEffectSource : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_Collections_IVectorView_1_Windows_Graphics_Effects_IGraphicsEffectSource();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static IGraphicsEffectSource GetAt(IObjectReference _obj, UInt32 index);
    private static bool IndexOf(IObjectReference _obj, IGraphicsEffectSource value, UInt32& index);
    private static UInt32 GetMany(IObjectReference _obj, UInt32 startIndex, IGraphicsEffectSource[] items);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_CanvasBitmap : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_CanvasBitmap();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasBitmap GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<CanvasBitmap> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<CanvasBitmap> value);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_CanvasVirtualBitmap : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_CanvasVirtualBitmap();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasVirtualBitmap GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<CanvasVirtualBitmap> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<CanvasVirtualBitmap> value);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgDocument();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasSvgDocument GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<CanvasSvgDocument> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<CanvasSvgDocument> value);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_IAsyncOperation_1_Microsoft_Graphics_Canvas_Svg_CanvasSvgNamedElement();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static CanvasSvgNamedElement GetResults(IObjectReference _obj);
    private static AsyncOperationCompletedHandler`1<CanvasSvgNamedElement> get_Completed(IObjectReference _obj);
    private static void put_Completed(IObjectReference _obj, AsyncOperationCompletedHandler`1<CanvasSvgNamedElement> value);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_CanvasDevice__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_CanvasDevice__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasDevice sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__Microsoft_Graphics_Canvas_Printing_CanvasPreviewEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasPrintDocument sender, CanvasPreviewEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__Microsoft_Graphics_Canvas_Printing_CanvasPrintEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasPrintDocument sender, CanvasPrintEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_Printing_CanvasPrintDocument__Microsoft_Graphics_Canvas_Printing_CanvasPrintTaskOptionsChangedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasPrintDocument sender, CanvasPrintTaskOptionsChangedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedControl__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasControl sender, CanvasCreateResourcesEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasDrawEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasControl sender, CanvasDrawEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__Microsoft_Graphics_Canvas_UI_CanvasCreateResourcesEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasVirtualControl sender, CanvasCreateResourcesEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasVirtualControl sender, CanvasRegionsInvalidatedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_CanvasVirtualImageSource__Microsoft_Graphics_Canvas_UI_Xaml_CanvasRegionsInvalidatedEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, CanvasVirtualImageSource sender, CanvasRegionsInvalidatedEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedDrawEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__Microsoft_Graphics_Canvas_UI_Xaml_CanvasAnimatedUpdateEventArgs();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ICanvasAnimatedControl sender, CanvasAnimatedUpdateEventArgs args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.GenericTypeInstantiations.Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__object : object {
    [CompilerGeneratedAttribute]
private static bool <Initialized>k__BackingField;
    private static bool Initialized { get; }
    private static Windows_Foundation_TypedEventHandler_2_Microsoft_Graphics_Canvas_UI_Xaml_ICanvasAnimatedControl__object();
    [CompilerGeneratedAttribute]
private static bool get_Initialized();
    public static bool EnsureInitialized();
    private static void Invoke(IObjectReference _obj, ICanvasAnimatedControl sender, object args);
    [UnmanagedCallersOnlyAttribute]
private static int Do_Abi_Invoke(IntPtr thisPtr, IntPtr sender, IntPtr args);
    private static bool Init();
}
internal static class WinRT.ProjectionInitializer : object {
    [ModuleInitializerAttribute]
public static void InitalizeProjection();
}
internal static class WinRT.ProjectionTypesInitializer : object {
    internal static Dictionary`2<string, string> TypeNameToBaseTypeNameMapping;
    private static ProjectionTypesInitializer();
    [ModuleInitializerAttribute]
internal static void InitalizeProjectionTypes();
}
