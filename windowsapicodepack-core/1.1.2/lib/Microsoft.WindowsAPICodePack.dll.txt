public class Microsoft.WindowsAPICodePack.ApplicationServices.ApplicationRecoveryException : ExternalException {
    public ApplicationRecoveryException(string message);
    public ApplicationRecoveryException(string message, Exception innerException);
    public ApplicationRecoveryException(string message, int errorCode);
    protected ApplicationRecoveryException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.WindowsAPICodePack.ApplicationServices.ApplicationRestartRecoveryManager : object {
    public static void RegisterForApplicationRecovery(RecoverySettings settings);
    public static void UnregisterApplicationRecovery();
    public static void UnregisterApplicationRestart();
    public static bool ApplicationRecoveryInProgress();
    public static void ApplicationRecoveryFinished(bool success);
    public static void RegisterForApplicationRestart(RestartSettings settings);
}
internal static class Microsoft.WindowsAPICodePack.ApplicationServices.AppRestartRecoveryNativeMethods : object {
    private static InternalRecoveryCallback internalCallback;
    internal static InternalRecoveryCallback InternalCallback { get; }
    private static AppRestartRecoveryNativeMethods();
    internal static InternalRecoveryCallback get_InternalCallback();
    private static UInt32 InternalRecoveryHandler(IntPtr parameter);
    internal static void ApplicationRecoveryFinished(bool success);
    internal static HResult ApplicationRecoveryInProgress(Boolean& canceled);
    internal static HResult RegisterApplicationRecoveryCallback(InternalRecoveryCallback callback, IntPtr param, UInt32 pingInterval, UInt32 flags);
    internal static HResult RegisterApplicationRestart(string commandLineArgs, RestartRestrictions flags);
    internal static HResult UnregisterApplicationRecoveryCallback();
    internal static HResult UnregisterApplicationRestart();
}
public class Microsoft.WindowsAPICodePack.ApplicationServices.BatteryState : object {
    [CompilerGeneratedAttribute]
private bool <ACOnline>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChargeRate>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <EstimatedTimeRemaining>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SuggestedCriticalBatteryCharge>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SuggestedBatteryWarningCharge>k__BackingField;
    public bool ACOnline { get; private set; }
    public int MaxCharge { get; private set; }
    public int CurrentCharge { get; private set; }
    public int ChargeRate { get; private set; }
    public TimeSpan EstimatedTimeRemaining { get; private set; }
    public int SuggestedCriticalBatteryCharge { get; private set; }
    public int SuggestedBatteryWarningCharge { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_ACOnline();
    [CompilerGeneratedAttribute]
private void set_ACOnline(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxCharge();
    [CompilerGeneratedAttribute]
private void set_MaxCharge(int value);
    [CompilerGeneratedAttribute]
public int get_CurrentCharge();
    [CompilerGeneratedAttribute]
private void set_CurrentCharge(int value);
    [CompilerGeneratedAttribute]
public int get_ChargeRate();
    [CompilerGeneratedAttribute]
private void set_ChargeRate(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_EstimatedTimeRemaining();
    [CompilerGeneratedAttribute]
private void set_EstimatedTimeRemaining(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_SuggestedCriticalBatteryCharge();
    [CompilerGeneratedAttribute]
private void set_SuggestedCriticalBatteryCharge(int value);
    [CompilerGeneratedAttribute]
public int get_SuggestedBatteryWarningCharge();
    [CompilerGeneratedAttribute]
private void set_SuggestedBatteryWarningCharge(int value);
    public virtual string ToString();
}
internal static class Microsoft.WindowsAPICodePack.ApplicationServices.EventManager : object {
    internal static AutoResetEvent monitorOnReset;
    internal static Guid PowerPersonalityChange;
    internal static Guid PowerSourceChange;
    internal static Guid BatteryCapacityChange;
    internal static Guid BackgroundTaskNotification;
    internal static Guid MonitorPowerStatus;
    private static bool personalityCaught;
    private static bool powerSrcCaught;
    private static bool batteryLifeCaught;
    private static bool monitorOnCaught;
    private static EventManager();
    internal static bool IsMessageCaught(Guid eventGuid);
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.ApplicationServices.ExecutionStates : Enum {
    public int value__;
    public static ExecutionStates None;
    public static ExecutionStates SystemRequired;
    public static ExecutionStates DisplayRequired;
    public static ExecutionStates AwayModeRequired;
    public static ExecutionStates Continuous;
}
internal static class Microsoft.WindowsAPICodePack.ApplicationServices.MessageManager : object {
    private static object lockObject;
    private static PowerRegWindow window;
    private static MessageManager();
    internal static void RegisterPowerEvent(Guid eventId, EventHandler eventToRegister);
    internal static void UnregisterPowerEvent(Guid eventId, EventHandler eventToUnregister);
    private static void EnsureInitialized();
}
internal static class Microsoft.WindowsAPICodePack.ApplicationServices.Power : object {
    internal static SystemPowerCapabilities GetSystemPowerCapabilities();
    internal static SystemBatteryState GetSystemBatteryState();
    internal static int RegisterPowerSettingNotification(IntPtr handle, Guid powerSetting);
}
internal static class Microsoft.WindowsAPICodePack.ApplicationServices.PowerManagementNativeMethods : object {
    internal static UInt32 PowerBroadcastMessage;
    internal static UInt32 PowerSettingChangeMessage;
    internal static UInt32 ScreenSaverSetActive;
    internal static UInt32 UpdateInFile;
    internal static UInt32 SendChange;
    internal static UInt32 CallNtPowerInformation(PowerInformationLevel informationLevel, IntPtr inputBuffer, UInt32 inputBufferSize, SystemPowerCapabilities& outputBuffer, UInt32 outputBufferSize);
    internal static UInt32 CallNtPowerInformation(PowerInformationLevel informationLevel, IntPtr inputBuffer, UInt32 inputBufferSize, SystemBatteryState& outputBuffer, UInt32 outputBufferSize);
    internal static void PowerGetActiveScheme(IntPtr rootPowerKey, Guid& activePolicy);
    internal static int RegisterPowerSettingNotification(IntPtr hRecipient, Guid& PowerSettingGuid, int Flags);
    internal static ExecutionStates SetThreadExecutionState(ExecutionStates esFlags);
}
public static class Microsoft.WindowsAPICodePack.ApplicationServices.PowerManager : object {
    private static Nullable`1<bool> isMonitorOn;
    private static bool monitorRequired;
    private static bool requestBlockSleep;
    private static object monitoronlock;
    public static bool MonitorRequired { get; public set; }
    public static bool RequestBlockSleep { get; public set; }
    public static bool IsBatteryPresent { get; }
    public static bool IsBatteryShortTerm { get; }
    public static bool IsUpsPresent { get; }
    public static PowerPersonality PowerPersonality { get; }
    public static int BatteryLifePercent { get; }
    public static bool IsMonitorOn { get; internal set; }
    public static PowerSource PowerSource { get; }
    private static PowerManager();
    public static void add_PowerPersonalityChanged(EventHandler value);
    public static void remove_PowerPersonalityChanged(EventHandler value);
    public static void add_PowerSourceChanged(EventHandler value);
    public static void remove_PowerSourceChanged(EventHandler value);
    public static void add_BatteryLifePercentChanged(EventHandler value);
    public static void remove_BatteryLifePercentChanged(EventHandler value);
    public static void add_IsMonitorOnChanged(EventHandler value);
    public static void remove_IsMonitorOnChanged(EventHandler value);
    public static void add_SystemBusyChanged(EventHandler value);
    public static void remove_SystemBusyChanged(EventHandler value);
    public static BatteryState GetCurrentBatteryState();
    public static bool get_MonitorRequired();
    public static void set_MonitorRequired(bool value);
    public static bool get_RequestBlockSleep();
    public static void set_RequestBlockSleep(bool value);
    public static bool get_IsBatteryPresent();
    public static bool get_IsBatteryShortTerm();
    public static bool get_IsUpsPresent();
    public static PowerPersonality get_PowerPersonality();
    public static int get_BatteryLifePercent();
    public static bool get_IsMonitorOn();
    internal static void set_IsMonitorOn(bool value);
    public static PowerSource get_PowerSource();
    public static void SetThreadExecutionState(ExecutionStates executionStateOptions);
}
public class Microsoft.WindowsAPICodePack.ApplicationServices.PowerManagerException : Exception {
    public PowerManagerException(string message);
    public PowerManagerException(string message, Exception innerException);
    protected PowerManagerException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.WindowsAPICodePack.ApplicationServices.PowerPersonality : Enum {
    public int value__;
    public static PowerPersonality Unknown;
    public static PowerPersonality HighPerformance;
    public static PowerPersonality PowerSaver;
    public static PowerPersonality Automatic;
}
internal static class Microsoft.WindowsAPICodePack.ApplicationServices.PowerPersonalityGuids : object {
    internal static Guid HighPerformance;
    internal static Guid PowerSaver;
    internal static Guid Automatic;
    internal static Guid All;
    private static PowerPersonalityGuids();
    internal static PowerPersonality GuidToEnum(Guid guid);
}
public enum Microsoft.WindowsAPICodePack.ApplicationServices.PowerSource : Enum {
    public int value__;
    public static PowerSource AC;
    public static PowerSource Battery;
    public static PowerSource Ups;
}
public class Microsoft.WindowsAPICodePack.ApplicationServices.RecoveryCallback : MulticastDelegate {
    public RecoveryCallback(object object, IntPtr method);
    public virtual int Invoke(object state);
    public virtual IAsyncResult BeginInvoke(object state, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class Microsoft.WindowsAPICodePack.ApplicationServices.RecoveryData : object {
    [CompilerGeneratedAttribute]
private RecoveryCallback <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    public RecoveryCallback Callback { get; public set; }
    public object State { get; public set; }
    public RecoveryData(RecoveryCallback callback, object state);
    [CompilerGeneratedAttribute]
public RecoveryCallback get_Callback();
    [CompilerGeneratedAttribute]
public void set_Callback(RecoveryCallback value);
    [CompilerGeneratedAttribute]
public object get_State();
    [CompilerGeneratedAttribute]
public void set_State(object value);
    public void Invoke();
}
public class Microsoft.WindowsAPICodePack.ApplicationServices.RecoverySettings : object {
    private RecoveryData recoveryData;
    private UInt32 pingInterval;
    public RecoveryData RecoveryData { get; }
    public UInt32 PingInterval { get; }
    public RecoverySettings(RecoveryData data, UInt32 interval);
    public RecoveryData get_RecoveryData();
    public UInt32 get_PingInterval();
    public virtual string ToString();
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.ApplicationServices.RestartRestrictions : Enum {
    public int value__;
    public static RestartRestrictions None;
    public static RestartRestrictions NotOnCrash;
    public static RestartRestrictions NotOnHang;
    public static RestartRestrictions NotOnPatch;
    public static RestartRestrictions NotOnReboot;
}
public class Microsoft.WindowsAPICodePack.ApplicationServices.RestartSettings : object {
    private string command;
    private RestartRestrictions restrictions;
    public string Command { get; }
    public RestartRestrictions Restrictions { get; }
    public RestartSettings(string command, RestartRestrictions restrictions);
    public string get_Command();
    public RestartRestrictions get_Restrictions();
    public virtual string ToString();
}
public abstract class Microsoft.WindowsAPICodePack.Dialogs.DialogControl : object {
    private static int nextId;
    [CompilerGeneratedAttribute]
private IDialogControlHost <HostingDialog>k__BackingField;
    private string name;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public IDialogControlHost HostingDialog { get; public set; }
    public string Name { get; public set; }
    public int Id { get; private set; }
    protected DialogControl(string name);
    private static DialogControl();
    [CompilerGeneratedAttribute]
public IDialogControlHost get_HostingDialog();
    [CompilerGeneratedAttribute]
public void set_HostingDialog(IDialogControlHost value);
    public string get_Name();
    public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
    protected void CheckPropertyChangeAllowed(string propName);
    protected void ApplyPropertyChange(string propName);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.WindowsAPICodePack.Dialogs.DialogControlCollection`1 : Collection`1<T> {
    private IDialogControlHost hostingDialog;
    public T Item { get; }
    internal DialogControlCollection`1(IDialogControlHost host);
    protected virtual void InsertItem(int index, T control);
    protected virtual void RemoveItem(int index);
    public T get_Item(string name);
    internal DialogControl GetControlbyId(int id);
}
internal static class Microsoft.WindowsAPICodePack.Dialogs.DialogsDefaults : object {
    internal static int ProgressBarStartingValue;
    internal static int ProgressBarMinimumValue;
    internal static int ProgressBarMaximumValue;
    internal static int IdealWidth;
    internal static int MinimumDialogControlId;
    internal static string Caption { get; }
    internal static string MainInstruction { get; }
    internal static string Content { get; }
    internal static string get_Caption();
    internal static string get_MainInstruction();
    internal static string get_Content();
}
public enum Microsoft.WindowsAPICodePack.Dialogs.DialogShowState : Enum {
    public int value__;
    public static DialogShowState PreShow;
    public static DialogShowState Showing;
    public static DialogShowState Closing;
    public static DialogShowState Closed;
}
public interface Microsoft.WindowsAPICodePack.Dialogs.IDialogControlHost {
    public abstract virtual bool IsCollectionChangeAllowed();
    public abstract virtual void ApplyCollectionChanged();
    public abstract virtual bool IsControlPropertyChangeAllowed(string propertyName, DialogControl control);
    public abstract virtual void ApplyControlPropertyChange(string propertyName, DialogControl control);
}
internal class Microsoft.WindowsAPICodePack.Dialogs.NativeTaskDialog : object {
    private TaskDialogConfiguration nativeDialogConfig;
    private NativeTaskDialogSettings settings;
    private IntPtr hWndDialog;
    private TaskDialog outerDialog;
    private IntPtr[] updatedStrings;
    private IntPtr buttonArray;
    private IntPtr radioButtonArray;
    private bool firstRadioButtonClicked;
    [CompilerGeneratedAttribute]
private DialogShowState <ShowState>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedButtonId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SelectedRadioButtonId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CheckBoxChecked>k__BackingField;
    private bool disposed;
    public DialogShowState ShowState { get; private set; }
    public int SelectedButtonId { get; private set; }
    public int SelectedRadioButtonId { get; private set; }
    public bool CheckBoxChecked { get; private set; }
    internal NativeTaskDialog(NativeTaskDialogSettings settings, TaskDialog outerDialog);
    [CompilerGeneratedAttribute]
public DialogShowState get_ShowState();
    [CompilerGeneratedAttribute]
private void set_ShowState(DialogShowState value);
    [CompilerGeneratedAttribute]
public int get_SelectedButtonId();
    [CompilerGeneratedAttribute]
private void set_SelectedButtonId(int value);
    [CompilerGeneratedAttribute]
public int get_SelectedRadioButtonId();
    [CompilerGeneratedAttribute]
private void set_SelectedRadioButtonId(int value);
    [CompilerGeneratedAttribute]
public bool get_CheckBoxChecked();
    [CompilerGeneratedAttribute]
private void set_CheckBoxChecked(bool value);
    internal void NativeShow();
    internal void NativeClose(TaskDialogResult result);
    private int DialogProc(IntPtr windowHandle, UInt32 message, IntPtr wparam, IntPtr lparam, IntPtr referenceData);
    private int PerformDialogInitialization();
    private int HandleButtonClick(int id);
    private int HandleRadioButtonClick(int id);
    private int HandleHyperlinkClick(IntPtr href);
    private int HandleTick(int ticks);
    private int HandleHelpInvocation();
    private int PerformDialogCleanup();
    internal void UpdateProgressBarValue(int i);
    internal void UpdateProgressBarRange();
    internal void UpdateProgressBarState(TaskDialogProgressBarState state);
    internal void UpdateText(string text);
    internal void UpdateInstruction(string instruction);
    internal void UpdateFooterText(string footerText);
    internal void UpdateExpandedText(string expandedText);
    private void UpdateTextCore(string s, TaskDialogElements element);
    internal void UpdateMainIcon(TaskDialogStandardIcon mainIcon);
    internal void UpdateFooterIcon(TaskDialogStandardIcon footerIcon);
    private void UpdateIconCore(TaskDialogStandardIcon icon, TaskDialogIconElement element);
    internal void UpdateCheckBoxChecked(bool cbc);
    internal void UpdateElevationIcon(int buttonId, bool showIcon);
    internal void UpdateButtonEnabled(int buttonID, bool enabled);
    internal void UpdateRadioButtonEnabled(int buttonID, bool enabled);
    internal void AssertCurrentlyShowing();
    private int SendMessageHelper(TaskDialogMessages message, int wparam, long lparam);
    private bool IsOptionSet(TaskDialogOptions flag);
    private IntPtr MakeNewString(string text, TaskDialogElements element);
    private void FreeOldString(TaskDialogElements element);
    private static long MakeLongLParam(int a, int b);
    private void MarshalDialogControlStructs();
    private static IntPtr AllocateAndMarshalButtons(TaskDialogButton[] structs);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    protected void Dispose(bool disposing);
}
internal class Microsoft.WindowsAPICodePack.Dialogs.NativeTaskDialogSettings : object {
    [CompilerGeneratedAttribute]
private int <ProgressBarMinimum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProgressBarMaximum>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProgressBarValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskDialogProgressBarState <ProgressBarState>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvokeHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskDialogConfiguration <NativeConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskDialogButton[] <Buttons>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskDialogButton[] <RadioButtons>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <ElevatedButtons>k__BackingField;
    public int ProgressBarMinimum { get; public set; }
    public int ProgressBarMaximum { get; public set; }
    public int ProgressBarValue { get; public set; }
    public TaskDialogProgressBarState ProgressBarState { get; public set; }
    public bool InvokeHelp { get; public set; }
    public TaskDialogConfiguration NativeConfiguration { get; private set; }
    public TaskDialogButton[] Buttons { get; public set; }
    public TaskDialogButton[] RadioButtons { get; public set; }
    public List`1<int> ElevatedButtons { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ProgressBarMinimum();
    [CompilerGeneratedAttribute]
public void set_ProgressBarMinimum(int value);
    [CompilerGeneratedAttribute]
public int get_ProgressBarMaximum();
    [CompilerGeneratedAttribute]
public void set_ProgressBarMaximum(int value);
    [CompilerGeneratedAttribute]
public int get_ProgressBarValue();
    [CompilerGeneratedAttribute]
public void set_ProgressBarValue(int value);
    [CompilerGeneratedAttribute]
public TaskDialogProgressBarState get_ProgressBarState();
    [CompilerGeneratedAttribute]
public void set_ProgressBarState(TaskDialogProgressBarState value);
    [CompilerGeneratedAttribute]
public bool get_InvokeHelp();
    [CompilerGeneratedAttribute]
public void set_InvokeHelp(bool value);
    [CompilerGeneratedAttribute]
public TaskDialogConfiguration get_NativeConfiguration();
    [CompilerGeneratedAttribute]
private void set_NativeConfiguration(TaskDialogConfiguration value);
    [CompilerGeneratedAttribute]
public TaskDialogButton[] get_Buttons();
    [CompilerGeneratedAttribute]
public void set_Buttons(TaskDialogButton[] value);
    [CompilerGeneratedAttribute]
public TaskDialogButton[] get_RadioButtons();
    [CompilerGeneratedAttribute]
public void set_RadioButtons(TaskDialogButton[] value);
    [CompilerGeneratedAttribute]
public List`1<int> get_ElevatedButtons();
    [CompilerGeneratedAttribute]
public void set_ElevatedButtons(List`1<int> value);
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialog : object {
    private static TaskDialog staticDialog;
    private NativeTaskDialog nativeDialog;
    private List`1<TaskDialogButtonBase> buttons;
    private List`1<TaskDialogButtonBase> radioButtons;
    private List`1<TaskDialogButtonBase> commandLinks;
    private IntPtr ownerWindow;
    [CompilerGeneratedAttribute]
private EventHandler`1<TaskDialogTickEventArgs> Tick;
    [CompilerGeneratedAttribute]
private EventHandler`1<TaskDialogHyperlinkClickedEventArgs> HyperlinkClick;
    [CompilerGeneratedAttribute]
private EventHandler`1<TaskDialogClosingEventArgs> Closing;
    [CompilerGeneratedAttribute]
private EventHandler HelpInvoked;
    [CompilerGeneratedAttribute]
private EventHandler Opened;
    private string text;
    private string instructionText;
    private string caption;
    private string footerText;
    private string checkBoxText;
    private string detailsExpandedText;
    private bool detailsExpanded;
    private string detailsExpandedLabel;
    private string detailsCollapsedLabel;
    private bool cancelable;
    private TaskDialogStandardIcon icon;
    private TaskDialogStandardIcon footerIcon;
    private TaskDialogStandardButtons standardButtons;
    private DialogControlCollection`1<TaskDialogControl> controls;
    private bool hyperlinksEnabled;
    private Nullable`1<bool> footerCheckBoxChecked;
    private TaskDialogExpandedDetailsLocation expansionMode;
    private TaskDialogStartupLocation startupLocation;
    private TaskDialogProgressBar progressBar;
    private bool disposed;
    public IntPtr OwnerWindowHandle { get; public set; }
    public string Text { get; public set; }
    public string InstructionText { get; public set; }
    public string Caption { get; public set; }
    public string FooterText { get; public set; }
    public string FooterCheckBoxText { get; public set; }
    public string DetailsExpandedText { get; public set; }
    public bool DetailsExpanded { get; public set; }
    public string DetailsExpandedLabel { get; public set; }
    public string DetailsCollapsedLabel { get; public set; }
    public bool Cancelable { get; public set; }
    public TaskDialogStandardIcon Icon { get; public set; }
    public TaskDialogStandardIcon FooterIcon { get; public set; }
    public TaskDialogStandardButtons StandardButtons { get; public set; }
    public DialogControlCollection`1<TaskDialogControl> Controls { get; }
    public bool HyperlinksEnabled { get; public set; }
    public Nullable`1<bool> FooterCheckBoxChecked { get; public set; }
    public TaskDialogExpandedDetailsLocation ExpansionMode { get; public set; }
    public TaskDialogStartupLocation StartupLocation { get; public set; }
    public TaskDialogProgressBar ProgressBar { get; public set; }
    private bool NativeDialogShowing { get; }
    public static bool IsPlatformSupported { get; }
    [CompilerGeneratedAttribute]
public void add_Tick(EventHandler`1<TaskDialogTickEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Tick(EventHandler`1<TaskDialogTickEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_HyperlinkClick(EventHandler`1<TaskDialogHyperlinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_HyperlinkClick(EventHandler`1<TaskDialogHyperlinkClickedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_Closing(EventHandler`1<TaskDialogClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_Closing(EventHandler`1<TaskDialogClosingEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_HelpInvoked(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_HelpInvoked(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Opened(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Opened(EventHandler value);
    public IntPtr get_OwnerWindowHandle();
    public void set_OwnerWindowHandle(IntPtr value);
    public string get_Text();
    public void set_Text(string value);
    public string get_InstructionText();
    public void set_InstructionText(string value);
    public string get_Caption();
    public void set_Caption(string value);
    public string get_FooterText();
    public void set_FooterText(string value);
    public string get_FooterCheckBoxText();
    public void set_FooterCheckBoxText(string value);
    public string get_DetailsExpandedText();
    public void set_DetailsExpandedText(string value);
    public bool get_DetailsExpanded();
    public void set_DetailsExpanded(bool value);
    public string get_DetailsExpandedLabel();
    public void set_DetailsExpandedLabel(string value);
    public string get_DetailsCollapsedLabel();
    public void set_DetailsCollapsedLabel(string value);
    public bool get_Cancelable();
    public void set_Cancelable(bool value);
    public TaskDialogStandardIcon get_Icon();
    public void set_Icon(TaskDialogStandardIcon value);
    public TaskDialogStandardIcon get_FooterIcon();
    public void set_FooterIcon(TaskDialogStandardIcon value);
    public TaskDialogStandardButtons get_StandardButtons();
    public void set_StandardButtons(TaskDialogStandardButtons value);
    public DialogControlCollection`1<TaskDialogControl> get_Controls();
    public bool get_HyperlinksEnabled();
    public void set_HyperlinksEnabled(bool value);
    public Nullable`1<bool> get_FooterCheckBoxChecked();
    public void set_FooterCheckBoxChecked(Nullable`1<bool> value);
    public TaskDialogExpandedDetailsLocation get_ExpansionMode();
    public void set_ExpansionMode(TaskDialogExpandedDetailsLocation value);
    public TaskDialogStartupLocation get_StartupLocation();
    public void set_StartupLocation(TaskDialogStartupLocation value);
    public TaskDialogProgressBar get_ProgressBar();
    public void set_ProgressBar(TaskDialogProgressBar value);
    public static TaskDialogResult Show(string text);
    public static TaskDialogResult Show(string text, string instructionText);
    public static TaskDialogResult Show(string text, string instructionText, string caption);
    public TaskDialogResult Show();
    private static TaskDialogResult ShowCoreStatic(string text, string instructionText, string caption);
    private TaskDialogResult ShowCore();
    private void ValidateCurrentDialogSettings();
    private static TaskDialogResult ConstructDialogResult(NativeTaskDialog native);
    public void Close();
    public void Close(TaskDialogResult closingResult);
    private void ApplyCoreSettings(NativeTaskDialogSettings settings);
    private void ApplyGeneralNativeConfiguration(TaskDialogConfiguration dialogConfig);
    private void ApplyTextConfiguration(TaskDialogConfiguration dialogConfig);
    private void ApplyOptionConfiguration(TaskDialogConfiguration dialogConfig);
    private void ApplyControlConfiguration(NativeTaskDialogSettings settings);
    private static TaskDialogButton[] BuildButtonStructArray(List`1<TaskDialogButtonBase> controls);
    private static int FindDefaultButtonId(List`1<TaskDialogButtonBase> controls);
    private static void ApplyElevatedIcons(NativeTaskDialogSettings settings, List`1<TaskDialogButtonBase> controls);
    private void ApplySupplementalSettings(NativeTaskDialogSettings settings);
    private void SortDialogControls();
    private static TaskDialogStandardButtons MapButtonIdToStandardButton(int id);
    private void ThrowIfDialogShowing(string message);
    private bool get_NativeDialogShowing();
    private TaskDialogButtonBase GetButtonForId(int id);
    private sealed virtual override bool Microsoft.WindowsAPICodePack.Dialogs.IDialogControlHost.IsCollectionChangeAllowed();
    private sealed virtual override void Microsoft.WindowsAPICodePack.Dialogs.IDialogControlHost.ApplyCollectionChanged();
    private sealed virtual override bool Microsoft.WindowsAPICodePack.Dialogs.IDialogControlHost.IsControlPropertyChangeAllowed(string propertyName, DialogControl control);
    private sealed virtual override void Microsoft.WindowsAPICodePack.Dialogs.IDialogControlHost.ApplyControlPropertyChange(string propertyName, DialogControl control);
    internal void RaiseButtonClickEvent(int id);
    internal void RaiseHyperlinkClickEvent(string link);
    internal int RaiseClosingEvent(int id);
    internal void RaiseHelpInvokedEvent();
    internal void RaiseOpenedEvent();
    internal void RaiseTickEvent(int ticks);
    private void CleanUp();
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public void Dispose(bool disposing);
    public static bool get_IsPlatformSupported();
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogBar : TaskDialogControl {
    private TaskDialogProgressBarState state;
    public TaskDialogProgressBarState State { get; public set; }
    protected TaskDialogBar(string name);
    public TaskDialogProgressBarState get_State();
    public void set_State(TaskDialogProgressBarState value);
    protected internal virtual void Reset();
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButton : TaskDialogButtonBase {
    private bool useElevationIcon;
    public bool UseElevationIcon { get; public set; }
    public TaskDialogButton(string name, string text);
    public bool get_UseElevationIcon();
    public void set_UseElevationIcon(bool value);
}
public abstract class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogButtonBase : TaskDialogControl {
    [CompilerGeneratedAttribute]
private EventHandler Click;
    private string text;
    private bool enabled;
    private bool defaultControl;
    public string Text { get; public set; }
    public bool Enabled { get; public set; }
    public bool Default { get; public set; }
    protected TaskDialogButtonBase(string name, string text);
    [CompilerGeneratedAttribute]
public void add_Click(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Click(EventHandler value);
    internal void RaiseClickEvent();
    public string get_Text();
    public void set_Text(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_Default();
    public void set_Default(bool value);
    public virtual string ToString();
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogClosingEventArgs : CancelEventArgs {
    private TaskDialogResult taskDialogResult;
    private string customButton;
    public TaskDialogResult TaskDialogResult { get; public set; }
    public string CustomButton { get; public set; }
    public TaskDialogResult get_TaskDialogResult();
    public void set_TaskDialogResult(TaskDialogResult value);
    public string get_CustomButton();
    public void set_CustomButton(string value);
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogCommandLink : TaskDialogButton {
    private string instruction;
    public string Instruction { get; public set; }
    public TaskDialogCommandLink(string name, string text);
    public TaskDialogCommandLink(string name, string text, string instruction);
    public string get_Instruction();
    public void set_Instruction(string value);
    public virtual string ToString();
}
public abstract class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogControl : DialogControl {
    protected TaskDialogControl(string name);
}
internal static class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogDefaults : object {
    public static int ProgressBarMinimumValue;
    public static int ProgressBarMaximumValue;
    public static int IdealWidth;
    public static int MinimumDialogControlId;
    public static string Caption { get; }
    public static string MainInstruction { get; }
    public static string Content { get; }
    public static string get_Caption();
    public static string get_MainInstruction();
    public static string get_Content();
}
public enum Microsoft.WindowsAPICodePack.Dialogs.TaskDialogExpandedDetailsLocation : Enum {
    public int value__;
    public static TaskDialogExpandedDetailsLocation Hide;
    public static TaskDialogExpandedDetailsLocation ExpandContent;
    public static TaskDialogExpandedDetailsLocation ExpandFooter;
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogHyperlinkClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <LinkText>k__BackingField;
    public string LinkText { get; public set; }
    public TaskDialogHyperlinkClickedEventArgs(string linkText);
    [CompilerGeneratedAttribute]
public string get_LinkText();
    [CompilerGeneratedAttribute]
public void set_LinkText(string value);
}
internal static class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogNativeMethods : object {
    internal static int TaskDialogIdealWidth;
    internal static int TaskDialogButtonShieldIcon;
    internal static int NoDefaultButtonSpecified;
    internal static HResult TaskDialogIndirect(TaskDialogConfiguration taskConfig, Int32& button, Int32& radioButton, Boolean& verificationFlagChecked);
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogProgressBar : TaskDialogBar {
    private int _minimum;
    private int _value;
    private int _maximum;
    public int Minimum { get; public set; }
    public int Maximum { get; public set; }
    public int Value { get; public set; }
    internal bool HasValidValues { get; }
    public TaskDialogProgressBar(string name);
    public TaskDialogProgressBar(int minimum, int maximum, int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Value();
    public void set_Value(int value);
    internal bool get_HasValidValues();
    protected internal virtual void Reset();
}
public enum Microsoft.WindowsAPICodePack.Dialogs.TaskDialogProgressBarState : Enum {
    public int value__;
    public static TaskDialogProgressBarState None;
    public static TaskDialogProgressBarState Normal;
    public static TaskDialogProgressBarState Error;
    public static TaskDialogProgressBarState Paused;
    public static TaskDialogProgressBarState Marquee;
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogRadioButton : TaskDialogButtonBase {
    public TaskDialogRadioButton(string name, string text);
}
public enum Microsoft.WindowsAPICodePack.Dialogs.TaskDialogResult : Enum {
    public int value__;
    public static TaskDialogResult None;
    public static TaskDialogResult Ok;
    public static TaskDialogResult Yes;
    public static TaskDialogResult No;
    public static TaskDialogResult Cancel;
    public static TaskDialogResult Retry;
    public static TaskDialogResult Close;
    public static TaskDialogResult CustomButtonClicked;
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Dialogs.TaskDialogStandardButtons : Enum {
    public int value__;
    public static TaskDialogStandardButtons None;
    public static TaskDialogStandardButtons Ok;
    public static TaskDialogStandardButtons Yes;
    public static TaskDialogStandardButtons No;
    public static TaskDialogStandardButtons Cancel;
    public static TaskDialogStandardButtons Retry;
    public static TaskDialogStandardButtons Close;
}
public enum Microsoft.WindowsAPICodePack.Dialogs.TaskDialogStandardIcon : Enum {
    public int value__;
    public static TaskDialogStandardIcon None;
    public static TaskDialogStandardIcon Warning;
    public static TaskDialogStandardIcon Error;
    public static TaskDialogStandardIcon Information;
    public static TaskDialogStandardIcon Shield;
}
public enum Microsoft.WindowsAPICodePack.Dialogs.TaskDialogStartupLocation : Enum {
    public int value__;
    public static TaskDialogStartupLocation CenterScreen;
    public static TaskDialogStartupLocation CenterOwner;
}
public class Microsoft.WindowsAPICodePack.Dialogs.TaskDialogTickEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <Ticks>k__BackingField;
    public int Ticks { get; private set; }
    public TaskDialogTickEventArgs(int ticks);
    [CompilerGeneratedAttribute]
public int get_Ticks();
    [CompilerGeneratedAttribute]
private void set_Ticks(int value);
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Net.ConnectivityStates : Enum {
    public int value__;
    public static ConnectivityStates None;
    public static ConnectivityStates IPv4Internet;
    public static ConnectivityStates IPv4LocalNetwork;
    public static ConnectivityStates IPv4NoTraffic;
    public static ConnectivityStates IPv4Subnet;
    public static ConnectivityStates IPv6Internet;
    public static ConnectivityStates IPv6LocalNetwork;
    public static ConnectivityStates IPv6NoTraffic;
    public static ConnectivityStates IPv6Subnet;
}
public enum Microsoft.WindowsAPICodePack.Net.DomainType : Enum {
    public int value__;
    public static DomainType NonDomainNetwork;
    public static DomainType DomainNetwork;
    public static DomainType DomainAuthenticated;
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("DCB00002-570F-4A9B-8D69-199FDBA5723B")]
internal interface Microsoft.WindowsAPICodePack.Net.INetwork {
    public bool IsConnectedToInternet { get; }
    public bool IsConnected { get; }
    public abstract virtual string GetName();
    public abstract virtual void SetName(string szNetworkNewName);
    public abstract virtual string GetDescription();
    public abstract virtual void SetDescription(string szDescription);
    public abstract virtual Guid GetNetworkId();
    public abstract virtual DomainType GetDomainType();
    public abstract virtual IEnumerable GetNetworkConnections();
    public abstract virtual void GetTimeCreatedAndConnected(UInt32& pdwLowDateTimeCreated, UInt32& pdwHighDateTimeCreated, UInt32& pdwLowDateTimeConnected, UInt32& pdwHighDateTimeConnected);
    public abstract virtual bool get_IsConnectedToInternet();
    public abstract virtual bool get_IsConnected();
    public abstract virtual ConnectivityStates GetConnectivity();
    public abstract virtual NetworkCategory GetCategory();
    public abstract virtual void SetCategory(NetworkCategory NewCategory);
}
[TypeLibTypeAttribute("4160")]
[GuidAttribute("DCB00005-570F-4A9B-8D69-199FDBA5723B")]
internal interface Microsoft.WindowsAPICodePack.Net.INetworkConnection {
    public bool IsConnectedToInternet { get; }
    public bool IsConnected { get; }
    public abstract virtual INetwork GetNetwork();
    public abstract virtual bool get_IsConnectedToInternet();
    public abstract virtual bool get_IsConnected();
    public abstract virtual ConnectivityStates GetConnectivity();
    public abstract virtual Guid GetConnectionId();
    public abstract virtual Guid GetAdapterId();
    public abstract virtual DomainType GetDomainType();
}
[GuidAttribute("DCB00000-570F-4A9B-8D69-199FDBA5723B")]
[TypeLibTypeAttribute("4160")]
internal interface Microsoft.WindowsAPICodePack.Net.INetworkListManager {
    public bool IsConnectedToInternet { get; }
    public bool IsConnected { get; }
    public abstract virtual IEnumerable GetNetworks(NetworkConnectivityLevels Flags);
    public abstract virtual INetwork GetNetwork(Guid gdNetworkId);
    public abstract virtual IEnumerable GetNetworkConnections();
    public abstract virtual INetworkConnection GetNetworkConnection(Guid gdNetworkConnectionId);
    public abstract virtual bool get_IsConnectedToInternet();
    public abstract virtual bool get_IsConnected();
    public abstract virtual ConnectivityStates GetConnectivity();
}
public class Microsoft.WindowsAPICodePack.Net.Network : object {
    private INetwork network;
    public NetworkCategory Category { get; public set; }
    public DateTime ConnectedTime { get; }
    public NetworkConnectionCollection Connections { get; }
    public ConnectivityStates Connectivity { get; }
    public DateTime CreatedTime { get; }
    public string Description { get; public set; }
    public DomainType DomainType { get; }
    public bool IsConnected { get; }
    public bool IsConnectedToInternet { get; }
    public string Name { get; public set; }
    public Guid NetworkId { get; }
    internal Network(INetwork network);
    public NetworkCategory get_Category();
    public void set_Category(NetworkCategory value);
    public DateTime get_ConnectedTime();
    public NetworkConnectionCollection get_Connections();
    public ConnectivityStates get_Connectivity();
    public DateTime get_CreatedTime();
    public string get_Description();
    public void set_Description(string value);
    public DomainType get_DomainType();
    public bool get_IsConnected();
    public bool get_IsConnectedToInternet();
    public string get_Name();
    public void set_Name(string value);
    public Guid get_NetworkId();
}
public enum Microsoft.WindowsAPICodePack.Net.NetworkCategory : Enum {
    public int value__;
    public static NetworkCategory Public;
    public static NetworkCategory Private;
    public static NetworkCategory Authenticated;
}
public class Microsoft.WindowsAPICodePack.Net.NetworkCollection : object {
    private IEnumerable networkEnumerable;
    internal NetworkCollection(IEnumerable networkEnumerable);
    public sealed virtual IEnumerator`1<Network> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.WindowsAPICodePack.Net.NetworkConnection : object {
    private INetworkConnection networkConnection;
    public Network Network { get; }
    public Guid AdapterId { get; }
    public Guid ConnectionId { get; }
    public ConnectivityStates Connectivity { get; }
    public DomainType DomainType { get; }
    public bool IsConnectedToInternet { get; }
    public bool IsConnected { get; }
    internal NetworkConnection(INetworkConnection networkConnection);
    public Network get_Network();
    public Guid get_AdapterId();
    public Guid get_ConnectionId();
    public ConnectivityStates get_Connectivity();
    public DomainType get_DomainType();
    public bool get_IsConnectedToInternet();
    public bool get_IsConnected();
}
public class Microsoft.WindowsAPICodePack.Net.NetworkConnectionCollection : object {
    private IEnumerable networkConnectionEnumerable;
    internal NetworkConnectionCollection(IEnumerable networkConnectionEnumerable);
    public sealed virtual IEnumerator`1<NetworkConnection> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Net.NetworkConnectivityLevels : Enum {
    public int value__;
    public static NetworkConnectivityLevels Connected;
    public static NetworkConnectivityLevels Disconnected;
    public static NetworkConnectivityLevels All;
}
public static class Microsoft.WindowsAPICodePack.Net.NetworkListManager : object {
    private static NetworkListManagerClass manager;
    public static bool IsConnectedToInternet { get; }
    public static bool IsConnected { get; }
    public static ConnectivityStates Connectivity { get; }
    private static NetworkListManager();
    public static NetworkCollection GetNetworks(NetworkConnectivityLevels level);
    public static Network GetNetwork(Guid networkId);
    public static NetworkConnectionCollection GetNetworkConnections();
    public static NetworkConnection GetNetworkConnection(Guid networkConnectionId);
    public static bool get_IsConnectedToInternet();
    public static bool get_IsConnected();
    public static ConnectivityStates get_Connectivity();
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("DCB00C01-570F-4A9B-8D69-199FDBA5723B")]
[ComSourceInterfacesAttribute("Microsoft.Windows.NetworkList.Internal.INetworkEvents Microsoft.Windows.NetworkList.Internal.INetworkConnectionEvents Microsoft.Windows.NetworkList.Internal.INetworkListManagerEvents ")]
[TypeLibTypeAttribute("2")]
internal class Microsoft.WindowsAPICodePack.Net.NetworkListManagerClass : object {
    [DispIdAttribute("6")]
public bool IsConnected { get; }
    [DispIdAttribute("5")]
public bool IsConnectedToInternet { get; }
    [DispIdAttribute("7")]
public virtual ConnectivityStates GetConnectivity();
    [DispIdAttribute("2")]
public virtual INetwork GetNetwork(Guid gdNetworkId);
    [DispIdAttribute("4")]
public virtual INetworkConnection GetNetworkConnection(Guid gdNetworkConnectionId);
    [DispIdAttribute("3")]
public virtual IEnumerable GetNetworkConnections();
    [DispIdAttribute("1")]
public virtual IEnumerable GetNetworks(NetworkConnectivityLevels Flags);
    [DispIdAttribute("6")]
public virtual bool get_IsConnected();
    [DispIdAttribute("5")]
public virtual bool get_IsConnectedToInternet();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.WindowsAPICodePack.Resources.LocalizedMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ApplicationRecoverFailedToRegisterForRestartBadParameters { get; }
    internal static string ApplicationRecoveryBadParameters { get; }
    internal static string ApplicationRecoveryFailedToRegister { get; }
    internal static string ApplicationRecoveryFailedToRegisterForRestart { get; }
    internal static string ApplicationRecoveryFailedToUnregister { get; }
    internal static string ApplicationRecoveryFailedToUnregisterForRestart { get; }
    internal static string ApplicationRecoveryMustBeCalledFromCallback { get; }
    internal static string BatteryStateStringRepresentation { get; }
    internal static string CancelableCannotBeChanged { get; }
    internal static string CaptionCannotBeChanged { get; }
    internal static string CheckBoxCannotBeChanged { get; }
    internal static string CollapsedTextCannotBeChanged { get; }
    internal static string CoreHelpersRunningOn7 { get; }
    internal static string CoreHelpersRunningOnVista { get; }
    internal static string CoreHelpersRunningOnXp { get; }
    internal static string DialogCollectionCannotHaveDuplicateNames { get; }
    internal static string DialogCollectionControlAlreadyHosted { get; }
    internal static string DialogCollectionControlNameNull { get; }
    internal static string DialogCollectionModifyShowingDialog { get; }
    internal static string DialogControlNameCannotBeEmpty { get; }
    internal static string DialogControlsCannotBeRenamed { get; }
    internal static string DialogDefaultCaption { get; }
    internal static string DialogDefaultContent { get; }
    internal static string DialogDefaultMainInstruction { get; }
    internal static string ExpandedDetailsCannotBeChanged { get; }
    internal static string ExpandedLabelCannotBeChanged { get; }
    internal static string ExpandingStateCannotBeChanged { get; }
    internal static string HyperlinksCannotBetSet { get; }
    internal static string InvalidReferencePath { get; }
    internal static string MessageManagerHandlerNotRegistered { get; }
    internal static string NativeTaskDialogConfigurationError { get; }
    internal static string NativeTaskDialogInternalErrorArgs { get; }
    internal static string NativeTaskDialogInternalErrorComplex { get; }
    internal static string NativeTaskDialogInternalErrorUnexpected { get; }
    internal static string NativeTaskDialogVersionError { get; }
    internal static string OwnerCannotBeChanged { get; }
    internal static string PowerExecutionStateFailed { get; }
    internal static string PowerInsufficientAccessBatteryState { get; }
    internal static string PowerInsufficientAccessCapabilities { get; }
    internal static string PowerManagerActiveSchemeFailed { get; }
    internal static string PowerManagerBatteryNotPresent { get; }
    internal static string ProgressBarCannotBeChanged { get; }
    internal static string ProgressBarCannotBeHostedInMultipleDialogs { get; }
    internal static string PropertyKeyFormatString { get; }
    internal static string PropVariantInitializationError { get; }
    internal static string PropVariantMultiDimArray { get; }
    internal static string PropVariantNullString { get; }
    internal static string PropVariantTypeNotSupported { get; }
    internal static string PropVariantUnsupportedType { get; }
    internal static string RecoverySettingsFormatString { get; }
    internal static string RestartSettingsFormatString { get; }
    internal static string StandardButtonsCannotBeChanged { get; }
    internal static string StartupLocationCannotBeChanged { get; }
    internal static string TaskDialogBadButtonId { get; }
    internal static string TaskDialogButtonTextEmpty { get; }
    internal static string TaskDialogCheckBoxTextRequiredToEnableCheckBox { get; }
    internal static string TaskDialogCloseNonShowing { get; }
    internal static string TaskDialogDefaultCaption { get; }
    internal static string TaskDialogDefaultContent { get; }
    internal static string TaskDialogDefaultMainInstruction { get; }
    internal static string TaskDialogOnlyOneDefaultControl { get; }
    internal static string TaskDialogProgressBarMaxValueGreaterThanMin { get; }
    internal static string TaskDialogProgressBarMinValueGreaterThanZero { get; }
    internal static string TaskDialogProgressBarMinValueLessThanMax { get; }
    internal static string TaskDialogProgressBarValueInRange { get; }
    internal static string TaskDialogSupportedButtonsAndButtons { get; }
    internal static string TaskDialogSupportedButtonsAndLinks { get; }
    internal static string TaskDialogUnkownControl { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ApplicationRecoverFailedToRegisterForRestartBadParameters();
    internal static string get_ApplicationRecoveryBadParameters();
    internal static string get_ApplicationRecoveryFailedToRegister();
    internal static string get_ApplicationRecoveryFailedToRegisterForRestart();
    internal static string get_ApplicationRecoveryFailedToUnregister();
    internal static string get_ApplicationRecoveryFailedToUnregisterForRestart();
    internal static string get_ApplicationRecoveryMustBeCalledFromCallback();
    internal static string get_BatteryStateStringRepresentation();
    internal static string get_CancelableCannotBeChanged();
    internal static string get_CaptionCannotBeChanged();
    internal static string get_CheckBoxCannotBeChanged();
    internal static string get_CollapsedTextCannotBeChanged();
    internal static string get_CoreHelpersRunningOn7();
    internal static string get_CoreHelpersRunningOnVista();
    internal static string get_CoreHelpersRunningOnXp();
    internal static string get_DialogCollectionCannotHaveDuplicateNames();
    internal static string get_DialogCollectionControlAlreadyHosted();
    internal static string get_DialogCollectionControlNameNull();
    internal static string get_DialogCollectionModifyShowingDialog();
    internal static string get_DialogControlNameCannotBeEmpty();
    internal static string get_DialogControlsCannotBeRenamed();
    internal static string get_DialogDefaultCaption();
    internal static string get_DialogDefaultContent();
    internal static string get_DialogDefaultMainInstruction();
    internal static string get_ExpandedDetailsCannotBeChanged();
    internal static string get_ExpandedLabelCannotBeChanged();
    internal static string get_ExpandingStateCannotBeChanged();
    internal static string get_HyperlinksCannotBetSet();
    internal static string get_InvalidReferencePath();
    internal static string get_MessageManagerHandlerNotRegistered();
    internal static string get_NativeTaskDialogConfigurationError();
    internal static string get_NativeTaskDialogInternalErrorArgs();
    internal static string get_NativeTaskDialogInternalErrorComplex();
    internal static string get_NativeTaskDialogInternalErrorUnexpected();
    internal static string get_NativeTaskDialogVersionError();
    internal static string get_OwnerCannotBeChanged();
    internal static string get_PowerExecutionStateFailed();
    internal static string get_PowerInsufficientAccessBatteryState();
    internal static string get_PowerInsufficientAccessCapabilities();
    internal static string get_PowerManagerActiveSchemeFailed();
    internal static string get_PowerManagerBatteryNotPresent();
    internal static string get_ProgressBarCannotBeChanged();
    internal static string get_ProgressBarCannotBeHostedInMultipleDialogs();
    internal static string get_PropertyKeyFormatString();
    internal static string get_PropVariantInitializationError();
    internal static string get_PropVariantMultiDimArray();
    internal static string get_PropVariantNullString();
    internal static string get_PropVariantTypeNotSupported();
    internal static string get_PropVariantUnsupportedType();
    internal static string get_RecoverySettingsFormatString();
    internal static string get_RestartSettingsFormatString();
    internal static string get_StandardButtonsCannotBeChanged();
    internal static string get_StartupLocationCannotBeChanged();
    internal static string get_TaskDialogBadButtonId();
    internal static string get_TaskDialogButtonTextEmpty();
    internal static string get_TaskDialogCheckBoxTextRequiredToEnableCheckBox();
    internal static string get_TaskDialogCloseNonShowing();
    internal static string get_TaskDialogDefaultCaption();
    internal static string get_TaskDialogDefaultContent();
    internal static string get_TaskDialogDefaultMainInstruction();
    internal static string get_TaskDialogOnlyOneDefaultControl();
    internal static string get_TaskDialogProgressBarMaxValueGreaterThanMin();
    internal static string get_TaskDialogProgressBarMinValueGreaterThanZero();
    internal static string get_TaskDialogProgressBarMinValueLessThanMax();
    internal static string get_TaskDialogProgressBarValueInRange();
    internal static string get_TaskDialogSupportedButtonsAndButtons();
    internal static string get_TaskDialogSupportedButtonsAndLinks();
    internal static string get_TaskDialogUnkownControl();
}
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyKey : ValueType {
    private Guid formatId;
    private int propertyId;
    public Guid FormatId { get; }
    public int PropertyId { get; }
    public PropertyKey(Guid formatId, int propertyId);
    public PropertyKey(string formatId, int propertyId);
    public Guid get_FormatId();
    public int get_PropertyId();
    public sealed virtual bool Equals(PropertyKey other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(PropertyKey propKey1, PropertyKey propKey2);
    public static bool op_Inequality(PropertyKey propKey1, PropertyKey propKey2);
    public virtual string ToString();
}
internal static class Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropVariantNativeMethods : object {
    internal static void PropVariantClear(PropVariant pvar);
    internal static IntPtr SafeArrayCreateVector(ushort vt, int lowerBound, UInt32 cElems);
    internal static IntPtr SafeArrayAccessData(IntPtr psa);
    internal static void SafeArrayUnaccessData(IntPtr psa);
    internal static UInt32 SafeArrayGetDim(IntPtr psa);
    internal static int SafeArrayGetLBound(IntPtr psa, UInt32 nDim);
    internal static int SafeArrayGetUBound(IntPtr psa, UInt32 nDim);
    internal static object SafeArrayGetElement(IntPtr psa, Int32& rgIndices);
    internal static void InitPropVariantFromPropVariantVectorElem(PropVariant propvarIn, UInt32 iElem, PropVariant ppropvar);
    internal static void InitPropVariantFromFileTime(FILETIME& pftIn, PropVariant ppropvar);
    internal static int PropVariantGetElementCount(PropVariant propVar);
    internal static void PropVariantGetBooleanElem(PropVariant propVar, UInt32 iElem, Boolean& pfVal);
    internal static void PropVariantGetInt16Elem(PropVariant propVar, UInt32 iElem, Int16& pnVal);
    internal static void PropVariantGetUInt16Elem(PropVariant propVar, UInt32 iElem, UInt16& pnVal);
    internal static void PropVariantGetInt32Elem(PropVariant propVar, UInt32 iElem, Int32& pnVal);
    internal static void PropVariantGetUInt32Elem(PropVariant propVar, UInt32 iElem, UInt32& pnVal);
    internal static void PropVariantGetInt64Elem(PropVariant propVar, UInt32 iElem, Int64& pnVal);
    internal static void PropVariantGetUInt64Elem(PropVariant propVar, UInt32 iElem, UInt64& pnVal);
    internal static void PropVariantGetDoubleElem(PropVariant propVar, UInt32 iElem, Double& pnVal);
    internal static void PropVariantGetFileTimeElem(PropVariant propVar, UInt32 iElem, FILETIME& pftVal);
    internal static void PropVariantGetStringElem(PropVariant propVar, UInt32 iElem, String& ppszVal);
    internal static void InitPropVariantFromBooleanVector(Boolean[] prgf, UInt32 cElems, PropVariant ppropvar);
    internal static void InitPropVariantFromInt16Vector(Int16[] prgn, UInt32 cElems, PropVariant ppropvar);
    internal static void InitPropVariantFromUInt16Vector(UInt16[] prgn, UInt32 cElems, PropVariant ppropvar);
    internal static void InitPropVariantFromInt32Vector(Int32[] prgn, UInt32 cElems, PropVariant propVar);
    internal static void InitPropVariantFromUInt32Vector(UInt32[] prgn, UInt32 cElems, PropVariant ppropvar);
    internal static void InitPropVariantFromInt64Vector(Int64[] prgn, UInt32 cElems, PropVariant ppropvar);
    internal static void InitPropVariantFromUInt64Vector(UInt64[] prgn, UInt32 cElems, PropVariant ppropvar);
    internal static void InitPropVariantFromDoubleVector(Double[] prgn, UInt32 cElems, PropVariant propvar);
    internal static void InitPropVariantFromFileTimeVector(FILETIME[] prgft, UInt32 cElems, PropVariant ppropvar);
    internal static void InitPropVariantFromStringVector(String[] prgsz, UInt32 cElems, PropVariant ppropvar);
}
internal static class MS.WindowsAPICodePack.Internal.CoreErrorHelper : object {
    private static int FacilityWin32;
    public static int Ignored;
    public static int HResultFromWin32(int win32ErrorCode);
    public static bool Succeeded(int result);
    public static bool Succeeded(HResult result);
    public static bool Failed(HResult result);
    public static bool Failed(int result);
    public static bool Matches(int result, int win32ErrorCode);
}
public static class MS.WindowsAPICodePack.Internal.CoreHelpers : object {
    public static bool RunningOnXP { get; }
    public static bool RunningOnVista { get; }
    public static bool RunningOnWin7 { get; }
    public static bool get_RunningOnXP();
    public static void ThrowIfNotXP();
    public static bool get_RunningOnVista();
    public static void ThrowIfNotVista();
    public static bool get_RunningOnWin7();
    public static void ThrowIfNotWin7();
    public static string GetStringResource(string resourceId);
}
internal static class MS.WindowsAPICodePack.Internal.CoreNativeMethods : object {
    internal static int UserMessage;
    internal static int EnterIdleMessage;
    internal static int FormatMessageFromSystem;
    internal static UInt32 ResultFailed;
    internal static UInt32 ResultInvalidArgument;
    internal static UInt32 ResultFalse;
    internal static UInt32 ResultNotFound;
    internal static int DWMNCRP_USEWINDOWSTYLE;
    internal static int DWMNCRP_DISABLED;
    internal static int DWMNCRP_ENABLED;
    internal static int DWMWA_NCRENDERING_ENABLED;
    internal static int DWMWA_NCRENDERING_POLICY;
    internal static int DWMWA_TRANSITIONS_FORCEDISABLED;
    internal static UInt32 StatusAccessDenied;
    public static void PostMessage(IntPtr windowHandle, WindowMessage message, IntPtr wparam, IntPtr lparam);
    public static IntPtr SendMessage(IntPtr windowHandle, WindowMessage message, IntPtr wparam, IntPtr lparam);
    public static IntPtr SendMessage(IntPtr windowHandle, UInt32 message, IntPtr wparam, IntPtr lparam);
    public static IntPtr SendMessage(IntPtr windowHandle, UInt32 message, IntPtr wparam, string lparam);
    public static IntPtr SendMessage(IntPtr windowHandle, UInt32 message, int wparam, string lparam);
    public static IntPtr SendMessage(IntPtr windowHandle, UInt32 message, Int32& wparam, StringBuilder lparam);
    internal static IntPtr LoadLibrary(string fileName);
    internal static bool DeleteObject(IntPtr graphicsObjectHandle);
    internal static int LoadString(IntPtr instanceHandle, int id, StringBuilder buffer, int bufferSize);
    internal static IntPtr LocalFree(Guid& guid);
    internal static bool DestroyIcon(IntPtr hIcon);
    internal static int DestroyWindow(IntPtr handle);
    public static int GetHiWord(long value, int size);
    public static int GetLoWord(long value);
}
public enum MS.WindowsAPICodePack.Internal.HResult : Enum {
    public int value__;
    public static HResult Ok;
    public static HResult False;
    public static HResult InvalidArguments;
    public static HResult OutOfMemory;
    public static HResult NoInterface;
    public static HResult Fail;
    public static HResult ElementNotFound;
    public static HResult TypeElementNotFound;
    public static HResult NoObject;
    public static HResult Win32ErrorCanceled;
    public static HResult Canceled;
    public static HResult ResourceInUse;
    public static HResult AccessDenied;
}
public class MS.WindowsAPICodePack.Internal.PropVariant : object {
    private static Dictionary`2<Type, Action`3<PropVariant, Array, UInt32>> _vectorActions;
    private static Dictionary`2<Type, Func`2<object, PropVariant>> _cache;
    private static object _padlock;
    private decimal _decimal;
    private ushort _valueType;
    private IntPtr _ptr2;
    private IntPtr _ptr;
    private int _int32;
    private UInt32 _uint32;
    private byte _byte;
    private sbyte _sbyte;
    private short _short;
    private ushort _ushort;
    private long _long;
    private ulong _ulong;
    private double _double;
    private float _float;
    public VarEnum VarType { get; public set; }
    public bool IsNullOrEmpty { get; }
    public object Value { get; }
    public PropVariant(string value);
    public PropVariant(String[] value);
    public PropVariant(Boolean[] value);
    public PropVariant(Int16[] value);
    public PropVariant(UInt16[] value);
    public PropVariant(Int32[] value);
    public PropVariant(UInt32[] value);
    public PropVariant(Int64[] value);
    public PropVariant(UInt64[] value);
    public PropVariant(Double[] value);
    public PropVariant(DateTime[] value);
    public PropVariant(bool value);
    public PropVariant(DateTime value);
    public PropVariant(byte value);
    public PropVariant(sbyte value);
    public PropVariant(short value);
    public PropVariant(ushort value);
    public PropVariant(int value);
    public PropVariant(UInt32 value);
    public PropVariant(decimal value);
    public PropVariant(Decimal[] value);
    public PropVariant(float value);
    public PropVariant(Single[] value);
    public PropVariant(long value);
    public PropVariant(ulong value);
    public PropVariant(double value);
    private static PropVariant();
    private static Dictionary`2<Type, Action`3<PropVariant, Array, UInt32>> GenerateVectorActions();
    public static PropVariant FromObject(object value);
    private static Func`2<object, PropVariant> GetDynamicConstructor(Type type);
    internal void SetIUnknown(object value);
    internal void SetSafeArray(Array array);
    public VarEnum get_VarType();
    public void set_VarType(VarEnum value);
    public bool get_IsNullOrEmpty();
    public object get_Value();
    private static long GetFileTimeAsLong(FILETIME& val);
    private static FILETIME DateTimeToFileTime(DateTime value);
    private object GetBlobData();
    private Array GetVector();
    private static Array CrackSingleDimSafeArray(IntPtr psa);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    public virtual string ToString();
}
public class MS.WindowsAPICodePack.Internal.SafeIconHandle : ZeroInvalidHandle {
    protected virtual bool ReleaseHandle();
}
public class MS.WindowsAPICodePack.Internal.SafeRegionHandle : ZeroInvalidHandle {
    protected virtual bool ReleaseHandle();
}
public class MS.WindowsAPICodePack.Internal.SafeWindowHandle : ZeroInvalidHandle {
    protected virtual bool ReleaseHandle();
}
internal enum MS.WindowsAPICodePack.Internal.WindowMessage : Enum {
    public int value__;
    public static WindowMessage Null;
    public static WindowMessage Create;
    public static WindowMessage Destroy;
    public static WindowMessage Move;
    public static WindowMessage Size;
    public static WindowMessage Activate;
    public static WindowMessage SetFocus;
    public static WindowMessage KillFocus;
    public static WindowMessage Enable;
    public static WindowMessage SetRedraw;
    public static WindowMessage SetText;
    public static WindowMessage GetText;
    public static WindowMessage GetTextLength;
    public static WindowMessage Paint;
    public static WindowMessage Close;
    public static WindowMessage QueryEndSession;
    public static WindowMessage Quit;
    public static WindowMessage QueryOpen;
    public static WindowMessage EraseBackground;
    public static WindowMessage SystemColorChange;
    public static WindowMessage EndSession;
    public static WindowMessage SystemError;
    public static WindowMessage ShowWindow;
    public static WindowMessage ControlColor;
    public static WindowMessage WinIniChange;
    public static WindowMessage SettingChange;
    public static WindowMessage DevModeChange;
    public static WindowMessage ActivateApplication;
    public static WindowMessage FontChange;
    public static WindowMessage TimeChange;
    public static WindowMessage CancelMode;
    public static WindowMessage SetCursor;
    public static WindowMessage MouseActivate;
    public static WindowMessage ChildActivate;
    public static WindowMessage QueueSync;
    public static WindowMessage GetMinMaxInfo;
    public static WindowMessage PaintIcon;
    public static WindowMessage IconEraseBackground;
    public static WindowMessage NextDialogControl;
    public static WindowMessage SpoolerStatus;
    public static WindowMessage DrawItem;
    public static WindowMessage MeasureItem;
    public static WindowMessage DeleteItem;
    public static WindowMessage VKeyToItem;
    public static WindowMessage CharToItem;
    public static WindowMessage SetFont;
    public static WindowMessage GetFont;
    public static WindowMessage SetHotkey;
    public static WindowMessage GetHotkey;
    public static WindowMessage QueryDragIcon;
    public static WindowMessage CompareItem;
    public static WindowMessage Compacting;
    public static WindowMessage WindowPositionChanging;
    public static WindowMessage WindowPositionChanged;
    public static WindowMessage Power;
    public static WindowMessage CopyData;
    public static WindowMessage CancelJournal;
    public static WindowMessage Notify;
    public static WindowMessage InputLanguageChangeRequest;
    public static WindowMessage InputLanguageChange;
    public static WindowMessage TCard;
    public static WindowMessage Help;
    public static WindowMessage UserChanged;
    public static WindowMessage NotifyFormat;
    public static WindowMessage ContextMenu;
    public static WindowMessage StyleChanging;
    public static WindowMessage StyleChanged;
    public static WindowMessage DisplayChange;
    public static WindowMessage GetIcon;
    public static WindowMessage SetIcon;
    public static WindowMessage NCCreate;
    public static WindowMessage NCDestroy;
    public static WindowMessage NCCalculateSize;
    public static WindowMessage NCHitTest;
    public static WindowMessage NCPaint;
    public static WindowMessage NCActivate;
    public static WindowMessage GetDialogCode;
    public static WindowMessage NCMouseMove;
    public static WindowMessage NCLeftButtonDown;
    public static WindowMessage NCLeftButtonUp;
    public static WindowMessage NCLeftButtonDoubleClick;
    public static WindowMessage NCRightButtonDown;
    public static WindowMessage NCRightButtonUp;
    public static WindowMessage NCRightButtonDoubleClick;
    public static WindowMessage NCMiddleButtonDown;
    public static WindowMessage NCMiddleButtonUp;
    public static WindowMessage NCMiddleButtonDoubleClick;
    public static WindowMessage KeyFirst;
    public static WindowMessage KeyDown;
    public static WindowMessage KeyUp;
    public static WindowMessage Char;
    public static WindowMessage DeadChar;
    public static WindowMessage SystemKeyDown;
    public static WindowMessage SystemKeyUp;
    public static WindowMessage SystemChar;
    public static WindowMessage SystemDeadChar;
    public static WindowMessage KeyLast;
    public static WindowMessage IMEStartComposition;
    public static WindowMessage IMEEndComposition;
    public static WindowMessage IMEComposition;
    public static WindowMessage IMEKeyLast;
    public static WindowMessage InitializeDialog;
    public static WindowMessage Command;
    public static WindowMessage SystemCommand;
    public static WindowMessage Timer;
    public static WindowMessage HorizontalScroll;
    public static WindowMessage VerticalScroll;
    public static WindowMessage InitializeMenu;
    public static WindowMessage InitializeMenuPopup;
    public static WindowMessage MenuSelect;
    public static WindowMessage MenuChar;
    public static WindowMessage EnterIdle;
    public static WindowMessage CTLColorMessageBox;
    public static WindowMessage CTLColorEdit;
    public static WindowMessage CTLColorListbox;
    public static WindowMessage CTLColorButton;
    public static WindowMessage CTLColorDialog;
    public static WindowMessage CTLColorScrollBar;
    public static WindowMessage CTLColorStatic;
    public static WindowMessage MouseFirst;
    public static WindowMessage MouseMove;
    public static WindowMessage LeftButtonDown;
    public static WindowMessage LeftButtonUp;
    public static WindowMessage LeftButtonDoubleClick;
    public static WindowMessage RightButtonDown;
    public static WindowMessage RightButtonUp;
    public static WindowMessage RightButtonDoubleClick;
    public static WindowMessage MiddleButtonDown;
    public static WindowMessage MiddleButtonUp;
    public static WindowMessage MiddleButtonDoubleClick;
    public static WindowMessage MouseWheel;
    public static WindowMessage MouseHorizontalWheel;
    public static WindowMessage ParentNotify;
    public static WindowMessage EnterMenuLoop;
    public static WindowMessage ExitMenuLoop;
    public static WindowMessage NextMenu;
    public static WindowMessage Sizing;
    public static WindowMessage CaptureChanged;
    public static WindowMessage Moving;
    public static WindowMessage PowerBroadcast;
    public static WindowMessage DeviceChange;
    public static WindowMessage MDICreate;
    public static WindowMessage MDIDestroy;
    public static WindowMessage MDIActivate;
    public static WindowMessage MDIRestore;
    public static WindowMessage MDINext;
    public static WindowMessage MDIMaximize;
    public static WindowMessage MDITile;
    public static WindowMessage MDICascade;
    public static WindowMessage MDIIconArrange;
    public static WindowMessage MDIGetActive;
    public static WindowMessage MDISetMenu;
    public static WindowMessage EnterSizeMove;
    public static WindowMessage ExitSizeMove;
    public static WindowMessage DropFiles;
    public static WindowMessage MDIRefreshMenu;
    public static WindowMessage IMESetContext;
    public static WindowMessage IMENotify;
    public static WindowMessage IMEControl;
    public static WindowMessage IMECompositionFull;
    public static WindowMessage IMESelect;
    public static WindowMessage IMEChar;
    public static WindowMessage IMEKeyDown;
    public static WindowMessage IMEKeyUp;
    public static WindowMessage MouseHover;
    public static WindowMessage NCMouseLeave;
    public static WindowMessage MouseLeave;
    public static WindowMessage Cut;
    public static WindowMessage Copy;
    public static WindowMessage Paste;
    public static WindowMessage Clear;
    public static WindowMessage Undo;
    public static WindowMessage RenderFormat;
    public static WindowMessage RenderAllFormats;
    public static WindowMessage DestroyClipboard;
    public static WindowMessage DrawClipbard;
    public static WindowMessage PaintClipbard;
    public static WindowMessage VerticalScrollClipBoard;
    public static WindowMessage SizeClipbard;
    public static WindowMessage AskClipboardFormatname;
    public static WindowMessage ChangeClipboardChain;
    public static WindowMessage HorizontalScrollClipboard;
    public static WindowMessage QueryNewPalette;
    public static WindowMessage PaletteIsChanging;
    public static WindowMessage PaletteChanged;
    public static WindowMessage Hotkey;
    public static WindowMessage Print;
    public static WindowMessage PrintClient;
    public static WindowMessage HandHeldFirst;
    public static WindowMessage HandHeldlast;
    public static WindowMessage PenWinFirst;
    public static WindowMessage PenWinLast;
    public static WindowMessage CoalesceFirst;
    public static WindowMessage CoalesceLast;
    public static WindowMessage DDE_First;
    public static WindowMessage DDE_Initiate;
    public static WindowMessage DDE_Terminate;
    public static WindowMessage DDE_Advise;
    public static WindowMessage DDE_Unadvise;
    public static WindowMessage DDE_Ack;
    public static WindowMessage DDE_Data;
    public static WindowMessage DDE_Request;
    public static WindowMessage DDE_Poke;
    public static WindowMessage DDE_Execute;
    public static WindowMessage DDE_Last;
    public static WindowMessage User;
    public static WindowMessage App;
}
public abstract class MS.WindowsAPICodePack.Internal.ZeroInvalidHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
}
