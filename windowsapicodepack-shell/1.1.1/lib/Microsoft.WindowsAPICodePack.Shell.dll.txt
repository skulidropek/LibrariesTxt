internal enum Microsoft.WindowsAPICodePack.Controls.CommDlgBrowser2ViewFlags : Enum {
    public int value__;
    public static CommDlgBrowser2ViewFlags ShowAllFiles;
    public static CommDlgBrowser2ViewFlags IsFileSave;
    public static CommDlgBrowser2ViewFlags AllowPreviewPane;
    public static CommDlgBrowser2ViewFlags NoSelectVerb;
    public static CommDlgBrowser2ViewFlags NoIncludeItem;
    public static CommDlgBrowser2ViewFlags IsFolderPicker;
}
internal enum Microsoft.WindowsAPICodePack.Controls.CommDlgBrowserNotifyType : Enum {
    public int value__;
    public static CommDlgBrowserNotifyType Done;
    public static CommDlgBrowserNotifyType Start;
}
internal enum Microsoft.WindowsAPICodePack.Controls.CommDlgBrowserStateChange : Enum {
    public int value__;
    public static CommDlgBrowserStateChange SetFocus;
    public static CommDlgBrowserStateChange KillFocus;
    public static CommDlgBrowserStateChange SelectionChange;
    public static CommDlgBrowserStateChange Rename;
    public static CommDlgBrowserStateChange StateChange;
}
public class Microsoft.WindowsAPICodePack.Controls.CommonControlException : COMException {
    public CommonControlException(string message);
    public CommonControlException(string message, Exception innerException);
    public CommonControlException(string message, int errorCode);
    internal CommonControlException(string message, HResult errorCode);
    protected CommonControlException(SerializationInfo info, StreamingContext context);
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("71F96385-DDD6-48D3-A0C1-AE06E8B055FB")]
[TypeLibTypeAttribute("2")]
internal class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserClass : object {
    public virtual void Initialize(IntPtr hwndParent, NativeRect& prc, FolderSettings pfs);
    public virtual void Destroy();
    public virtual void SetRect(IntPtr& phdwp, NativeRect rcBrowser);
    public virtual void SetPropertyBag(string pszPropertyBag);
    public virtual void SetEmptyText(string pszEmptyText);
    public virtual HResult SetFolderSettings(FolderSettings pfs);
    public virtual HResult Advise(IntPtr psbe, UInt32& pdwCookie);
    public virtual HResult Unadvise(UInt32 dwCookie);
    public virtual void SetOptions(ExplorerBrowserOptions dwFlag);
    public virtual void GetOptions(ExplorerBrowserOptions& pdwFlag);
    public virtual void BrowseToIDList(IntPtr pidl, UInt32 uFlags);
    public virtual HResult BrowseToObject(object punk, UInt32 uFlags);
    public virtual void FillFromObject(object punk, int dwFlags);
    public virtual void RemoveAll();
    public virtual HResult GetCurrentView(Guid& riid, IntPtr& ppv);
}
internal static class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserCLSIDGuid : object {
    internal static string ExplorerBrowser;
}
public class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserContentOptions : object {
    private ExplorerBrowser eb;
    internal FolderSettings folderSettings;
    public ExplorerBrowserViewMode ViewMode { get; public set; }
    public ExplorerBrowserContentSectionOptions Flags { get; public set; }
    public bool AlignLeft { get; public set; }
    public bool AutoArrange { get; public set; }
    public bool CheckSelect { get; public set; }
    public bool ExtendedTiles { get; public set; }
    public bool FullRowSelect { get; public set; }
    public bool HideFileNames { get; public set; }
    public bool NoBrowserViewState { get; public set; }
    public bool NoColumnHeader { get; public set; }
    public bool NoHeaderInAllViews { get; public set; }
    public bool NoIcons { get; public set; }
    public bool NoSubfolders { get; public set; }
    public bool SingleClickActivate { get; public set; }
    public bool SingleSelection { get; public set; }
    public int ThumbnailSize { get; public set; }
    internal ExplorerBrowserContentOptions(ExplorerBrowser eb);
    public ExplorerBrowserViewMode get_ViewMode();
    public void set_ViewMode(ExplorerBrowserViewMode value);
    public ExplorerBrowserContentSectionOptions get_Flags();
    public void set_Flags(ExplorerBrowserContentSectionOptions value);
    public bool get_AlignLeft();
    public void set_AlignLeft(bool value);
    public bool get_AutoArrange();
    public void set_AutoArrange(bool value);
    public bool get_CheckSelect();
    public void set_CheckSelect(bool value);
    public bool get_ExtendedTiles();
    public void set_ExtendedTiles(bool value);
    public bool get_FullRowSelect();
    public void set_FullRowSelect(bool value);
    public bool get_HideFileNames();
    public void set_HideFileNames(bool value);
    public bool get_NoBrowserViewState();
    public void set_NoBrowserViewState(bool value);
    public bool get_NoColumnHeader();
    public void set_NoColumnHeader(bool value);
    public bool get_NoHeaderInAllViews();
    public void set_NoHeaderInAllViews(bool value);
    public bool get_NoIcons();
    public void set_NoIcons(bool value);
    public bool get_NoSubfolders();
    public void set_NoSubfolders(bool value);
    public bool get_SingleClickActivate();
    public void set_SingleClickActivate(bool value);
    public bool get_SingleSelection();
    public void set_SingleSelection(bool value);
    private bool IsFlagSet(ExplorerBrowserContentSectionOptions flag);
    private void SetFlag(ExplorerBrowserContentSectionOptions flag, bool value);
    public int get_ThumbnailSize();
    public void set_ThumbnailSize(int value);
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserContentSectionOptions : Enum {
    public int value__;
    public static ExplorerBrowserContentSectionOptions None;
    public static ExplorerBrowserContentSectionOptions AlignLeft;
    public static ExplorerBrowserContentSectionOptions AutoArrange;
    public static ExplorerBrowserContentSectionOptions CheckSelect;
    public static ExplorerBrowserContentSectionOptions ExtendedTiles;
    public static ExplorerBrowserContentSectionOptions FullRowSelect;
    public static ExplorerBrowserContentSectionOptions HideFileNames;
    public static ExplorerBrowserContentSectionOptions NoBrowserViewState;
    public static ExplorerBrowserContentSectionOptions NoColumnHeader;
    public static ExplorerBrowserContentSectionOptions NoHeaderInAllViews;
    public static ExplorerBrowserContentSectionOptions NoIcons;
    public static ExplorerBrowserContentSectionOptions NoSubfolders;
    public static ExplorerBrowserContentSectionOptions SingleClickActivate;
    public static ExplorerBrowserContentSectionOptions SingleSelection;
}
internal static class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserIIDGuid : object {
    internal static string IExplorerBrowser;
    internal static string IKnownFolderManager;
    internal static string IFolderView;
    internal static string IFolderView2;
    internal static string IServiceProvider;
    internal static string IExplorerPaneVisibility;
    internal static string IExplorerBrowserEvents;
    internal static string IInputObject;
    internal static string IShellView;
    internal static string IDispatch;
    internal static string DShellFolderViewEvents;
    internal static string ICommDlgBrowser;
    internal static string ICommDlgBrowser2;
    internal static string ICommDlgBrowser3;
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserNativeMethods : object {
    internal static HResult IUnknown_SetSite(object punk, object punkSite);
    internal static HResult ConnectToConnectionPoint(object punk, Guid& riidEvent, bool fConnect, object punkTarget, UInt32& pdwCookie, IntPtr& ppcpOut);
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserNavigateOptions : Enum {
    public int value__;
    public static ExplorerBrowserNavigateOptions AlwaysNavigate;
    public static ExplorerBrowserNavigateOptions NavigateOnce;
}
public class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserNavigationLog : object {
    private List`1<ShellObject> _locations;
    private EventHandler`1<NavigationLogEventArgs> NavigationLogChanged;
    private ExplorerBrowser parent;
    private PendingNavigation pendingNavigation;
    private int currentLocationIndex;
    public bool CanNavigateForward { get; }
    public bool CanNavigateBackward { get; }
    public IEnumerable`1<ShellObject> Locations { get; }
    public int CurrentLocationIndex { get; }
    public ShellObject CurrentLocation { get; }
    internal ExplorerBrowserNavigationLog(ExplorerBrowser parent);
    public void ClearLog();
    public bool get_CanNavigateForward();
    public bool get_CanNavigateBackward();
    public IEnumerable`1<ShellObject> get_Locations();
    public int get_CurrentLocationIndex();
    public ShellObject get_CurrentLocation();
    public void add_NavigationLogChanged(EventHandler`1<NavigationLogEventArgs> value);
    public void remove_NavigationLogChanged(EventHandler`1<NavigationLogEventArgs> value);
    private void OnNavigationFailed(object sender, NavigationFailedEventArgs args);
    private void OnNavigationComplete(object sender, NavigationCompleteEventArgs args);
    internal bool NavigateLog(NavigationLogDirection direction);
    internal bool NavigateLog(int index);
}
public class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserNavigationOptions : object {
    private ExplorerBrowser eb;
    [CompilerGeneratedAttribute]
private ExplorerBrowserPaneVisibility <PaneVisibility>k__BackingField;
    public ExplorerBrowserNavigateOptions Flags { get; public set; }
    public bool NavigateOnce { get; public set; }
    public bool AlwaysNavigate { get; public set; }
    public ExplorerBrowserPaneVisibility PaneVisibility { get; private set; }
    internal ExplorerBrowserNavigationOptions(ExplorerBrowser eb);
    public ExplorerBrowserNavigateOptions get_Flags();
    public void set_Flags(ExplorerBrowserNavigateOptions value);
    public bool get_NavigateOnce();
    public void set_NavigateOnce(bool value);
    public bool get_AlwaysNavigate();
    public void set_AlwaysNavigate(bool value);
    private bool IsFlagSet(ExplorerBrowserNavigateOptions flag);
    private void SetFlag(ExplorerBrowserNavigateOptions flag, bool value);
    [CompilerGeneratedAttribute]
public ExplorerBrowserPaneVisibility get_PaneVisibility();
    [CompilerGeneratedAttribute]
private void set_PaneVisibility(ExplorerBrowserPaneVisibility value);
}
[FlagsAttribute]
internal enum Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserOptions : Enum {
    public int value__;
    public static ExplorerBrowserOptions NavigateOnce;
    public static ExplorerBrowserOptions ShowFrames;
    public static ExplorerBrowserOptions AlwaysNavigate;
    public static ExplorerBrowserOptions NoTravelLog;
    public static ExplorerBrowserOptions NoWrapperWindow;
    public static ExplorerBrowserOptions HtmlSharepointView;
}
public class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserPaneVisibility : object {
    [CompilerGeneratedAttribute]
private PaneVisibilityState <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private PaneVisibilityState <Commands>k__BackingField;
    [CompilerGeneratedAttribute]
private PaneVisibilityState <CommandsOrganize>k__BackingField;
    [CompilerGeneratedAttribute]
private PaneVisibilityState <CommandsView>k__BackingField;
    [CompilerGeneratedAttribute]
private PaneVisibilityState <Details>k__BackingField;
    [CompilerGeneratedAttribute]
private PaneVisibilityState <Preview>k__BackingField;
    [CompilerGeneratedAttribute]
private PaneVisibilityState <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private PaneVisibilityState <AdvancedQuery>k__BackingField;
    public PaneVisibilityState Navigation { get; public set; }
    public PaneVisibilityState Commands { get; public set; }
    public PaneVisibilityState CommandsOrganize { get; public set; }
    public PaneVisibilityState CommandsView { get; public set; }
    public PaneVisibilityState Details { get; public set; }
    public PaneVisibilityState Preview { get; public set; }
    public PaneVisibilityState Query { get; public set; }
    public PaneVisibilityState AdvancedQuery { get; public set; }
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_Navigation();
    [CompilerGeneratedAttribute]
public void set_Navigation(PaneVisibilityState value);
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_Commands();
    [CompilerGeneratedAttribute]
public void set_Commands(PaneVisibilityState value);
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_CommandsOrganize();
    [CompilerGeneratedAttribute]
public void set_CommandsOrganize(PaneVisibilityState value);
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_CommandsView();
    [CompilerGeneratedAttribute]
public void set_CommandsView(PaneVisibilityState value);
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(PaneVisibilityState value);
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_Preview();
    [CompilerGeneratedAttribute]
public void set_Preview(PaneVisibilityState value);
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(PaneVisibilityState value);
    [CompilerGeneratedAttribute]
public PaneVisibilityState get_AdvancedQuery();
    [CompilerGeneratedAttribute]
public void set_AdvancedQuery(PaneVisibilityState value);
}
internal static class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserViewDispatchIds : object {
    internal static int SelectionChanged;
    internal static int ContentsChanged;
    internal static int FileListEnumDone;
    internal static int SelectedItemChanged;
}
public enum Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserViewMode : Enum {
    public int value__;
    public static ExplorerBrowserViewMode Auto;
    public static ExplorerBrowserViewMode Content;
    public static ExplorerBrowserViewMode Details;
    public static ExplorerBrowserViewMode Icon;
    public static ExplorerBrowserViewMode List;
    public static ExplorerBrowserViewMode SmallIcon;
    public static ExplorerBrowserViewMode Thumbnail;
    public static ExplorerBrowserViewMode ThumbStrip;
    public static ExplorerBrowserViewMode Tile;
}
internal static class Microsoft.WindowsAPICodePack.Controls.ExplorerBrowserViewPanes : object {
    internal static string Navigation;
    internal static string Commands;
    internal static string CommandsOrganize;
    internal static string CommandsView;
    internal static string Details;
    internal static string Preview;
    internal static string Query;
    internal static string AdvancedQuery;
}
internal enum Microsoft.WindowsAPICodePack.Controls.ExplorerPaneState : Enum {
    public int value__;
    public static ExplorerPaneState DoNotCare;
    public static ExplorerPaneState DefaultOn;
    public static ExplorerPaneState DefaultOff;
    public static ExplorerPaneState StateMask;
    public static ExplorerPaneState InitialState;
    public static ExplorerPaneState Force;
}
[FlagsAttribute]
internal enum Microsoft.WindowsAPICodePack.Controls.FolderOptions : Enum {
    public int value__;
    public static FolderOptions AutoArrange;
    public static FolderOptions AbbreviatedNames;
    public static FolderOptions SnapToGrid;
    public static FolderOptions OwnerData;
    public static FolderOptions BestFitWindow;
    public static FolderOptions Desktop;
    public static FolderOptions SingleSelection;
    public static FolderOptions NoSubfolders;
    public static FolderOptions Transparent;
    public static FolderOptions NoClientEdge;
    public static FolderOptions NoScroll;
    public static FolderOptions AlignLeft;
    public static FolderOptions NoIcons;
    public static FolderOptions ShowSelectionAlways;
    public static FolderOptions NoVisible;
    public static FolderOptions SingleClickActivate;
    public static FolderOptions NoWebView;
    public static FolderOptions HideFilenames;
    public static FolderOptions CheckSelect;
    public static FolderOptions NoEnumRefresh;
    public static FolderOptions NoGrouping;
    public static FolderOptions FullRowSelect;
    public static FolderOptions NoFilters;
    public static FolderOptions NoColumnHeaders;
    public static FolderOptions NoHeaderInAllViews;
    public static FolderOptions ExtendedTiles;
    public static FolderOptions TriCheckSelect;
    public static FolderOptions AutoCheckSelect;
    public static FolderOptions NoBrowserViewState;
    public static FolderOptions SubsetGroups;
    public static FolderOptions UseSearchFolders;
    public static FolderOptions AllowRightToLeftReading;
}
internal class Microsoft.WindowsAPICodePack.Controls.FolderSettings : object {
    public FolderViewMode ViewMode;
    public FolderOptions Options;
}
internal enum Microsoft.WindowsAPICodePack.Controls.FolderViewMode : Enum {
    public int value__;
    public static FolderViewMode Auto;
    public static FolderViewMode First;
    public static FolderViewMode Icon;
    public static FolderViewMode SmallIcon;
    public static FolderViewMode List;
    public static FolderViewMode Details;
    public static FolderViewMode Thumbnail;
    public static FolderViewMode Tile;
    public static FolderViewMode Thumbstrip;
    public static FolderViewMode Content;
    public static FolderViewMode Last;
}
[GuidAttribute("c8ad25a1-3294-41ee-8165-71174bd01c57")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3 {
    public abstract virtual HResult OnDefaultCommand(IntPtr ppshv);
    public abstract virtual HResult OnStateChange(IntPtr ppshv, CommDlgBrowserStateChange uChange);
    public abstract virtual HResult IncludeObject(IntPtr ppshv, IntPtr pidl);
    public abstract virtual HResult GetDefaultMenuText(IShellView shellView, IntPtr buffer, int bufferMaxLength);
    public abstract virtual HResult GetViewFlags(UInt32& pdwFlags);
    public abstract virtual HResult Notify(IntPtr pshv, CommDlgBrowserNotifyType notifyType);
    public abstract virtual HResult GetCurrentFilter(StringBuilder pszFileSpec, int cchFileSpec);
    public abstract virtual HResult OnColumnClicked(IShellView ppshv, int iColumn);
    public abstract virtual HResult OnPreViewCreated(IShellView ppshv);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("DFD3B6B5-C10C-4BE9-85F6-A66969F402F6")]
internal interface Microsoft.WindowsAPICodePack.Controls.IExplorerBrowser {
    public abstract virtual void Initialize(IntPtr hwndParent, NativeRect& prc, FolderSettings pfs);
    public abstract virtual void Destroy();
    public abstract virtual void SetRect(IntPtr& phdwp, NativeRect rcBrowser);
    public abstract virtual void SetPropertyBag(string pszPropertyBag);
    public abstract virtual void SetEmptyText(string pszEmptyText);
    public abstract virtual HResult SetFolderSettings(FolderSettings pfs);
    public abstract virtual HResult Advise(IntPtr psbe, UInt32& pdwCookie);
    public abstract virtual HResult Unadvise(UInt32 dwCookie);
    public abstract virtual void SetOptions(ExplorerBrowserOptions dwFlag);
    public abstract virtual void GetOptions(ExplorerBrowserOptions& pdwFlag);
    public abstract virtual void BrowseToIDList(IntPtr pidl, UInt32 uFlags);
    public abstract virtual HResult BrowseToObject(object punk, UInt32 uFlags);
    public abstract virtual void FillFromObject(object punk, int dwFlags);
    public abstract virtual void RemoveAll();
    public abstract virtual HResult GetCurrentView(Guid& riid, IntPtr& ppv);
}
[GuidAttribute("361bbdc7-e6ee-4e13-be58-58e2240c810f")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Controls.IExplorerBrowserEvents {
    public abstract virtual HResult OnNavigationPending(IntPtr pidlFolder);
    public abstract virtual HResult OnViewCreated(object psv);
    public abstract virtual HResult OnNavigationComplete(IntPtr pidlFolder);
    public abstract virtual HResult OnNavigationFailed(IntPtr pidlFolder);
}
[GuidAttribute("e07010ec-bc17-44c0-97b0-46c7c95b9edc")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Controls.IExplorerPaneVisibility {
    public abstract virtual HResult GetPaneState(Guid& explorerPane, ExplorerPaneState& peps);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("cde725b0-ccc9-4519-917e-325d72fab4ce")]
internal interface Microsoft.WindowsAPICodePack.Controls.IFolderView {
    public abstract virtual void GetCurrentViewMode(UInt32& pViewMode);
    public abstract virtual void SetCurrentViewMode(UInt32 ViewMode);
    public abstract virtual void GetFolder(Guid& riid, Object& ppv);
    public abstract virtual void Item(int iItemIndex, IntPtr& ppidl);
    public abstract virtual void ItemCount(UInt32 uFlags, Int32& pcItems);
    public abstract virtual void Items(UInt32 uFlags, Guid& riid, Object& ppv);
    public abstract virtual void GetSelectionMarkedItem(Int32& piItem);
    public abstract virtual void GetFocusedItem(Int32& piItem);
    public abstract virtual void GetItemPosition(IntPtr pidl, NativePoint& ppt);
    public abstract virtual void GetSpacing(NativePoint& ppt);
    public abstract virtual void GetDefaultSpacing(NativePoint& ppt);
    public abstract virtual void GetAutoArrange();
    public abstract virtual void SelectItem(int iItem, UInt32 dwFlags);
    public abstract virtual void SelectAndPositionItems(UInt32 cidl, IntPtr apidl, NativePoint& apt, UInt32 dwFlags);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("1af3a467-214f-4298-908e-06b03e0b39f9")]
internal interface Microsoft.WindowsAPICodePack.Controls.IFolderView2 {
    public abstract virtual HResult GetCurrentViewMode(UInt32& pViewMode);
    public abstract virtual void SetCurrentViewMode(UInt32 ViewMode);
    public abstract virtual void GetFolder(Guid& riid, Object& ppv);
    public abstract virtual void Item(int iItemIndex, IntPtr& ppidl);
    public abstract virtual HResult ItemCount(UInt32 uFlags, Int32& pcItems);
    public abstract virtual HResult Items(UInt32 uFlags, Guid& riid, Object& ppv);
    public abstract virtual void GetSelectionMarkedItem(Int32& piItem);
    public abstract virtual void GetFocusedItem(Int32& piItem);
    public abstract virtual void GetItemPosition(IntPtr pidl, NativePoint& ppt);
    public abstract virtual void GetSpacing(NativePoint& ppt);
    public abstract virtual void GetDefaultSpacing(NativePoint& ppt);
    public abstract virtual void GetAutoArrange();
    public abstract virtual void SelectItem(int iItem, UInt32 dwFlags);
    public abstract virtual void SelectAndPositionItems(UInt32 cidl, IntPtr apidl, NativePoint& apt, UInt32 dwFlags);
    public abstract virtual void SetGroupBy(IntPtr key, bool fAscending);
    public abstract virtual void GetGroupBy(IntPtr& pkey, Boolean& pfAscending);
    public abstract virtual void SetViewProperty(IntPtr pidl, IntPtr propkey, object propvar);
    public abstract virtual void GetViewProperty(IntPtr pidl, IntPtr propkey, Object& ppropvar);
    public abstract virtual void SetTileViewProperties(IntPtr pidl, string pszPropList);
    public abstract virtual void SetExtendedTileViewProperties(IntPtr pidl, string pszPropList);
    public abstract virtual void SetText(int iType, string pwszText);
    public abstract virtual void SetCurrentFolderFlags(UInt32 dwMask, UInt32 dwFlags);
    public abstract virtual void GetCurrentFolderFlags(UInt32& pdwFlags);
    public abstract virtual void GetSortColumnCount(Int32& pcColumns);
    public abstract virtual void SetSortColumns(IntPtr rgSortColumns, int cColumns);
    public abstract virtual void GetSortColumns(IntPtr& rgSortColumns, int cColumns);
    public abstract virtual void GetItem(int iItem, Guid& riid, Object& ppv);
    public abstract virtual void GetVisibleItem(int iStart, bool fPrevious, Int32& piItem);
    public abstract virtual void GetSelectedItem(int iStart, Int32& piItem);
    public abstract virtual void GetSelection(bool fNoneImpliesFolder, IShellItemArray& ppsia);
    public abstract virtual void GetSelectionState(IntPtr pidl, UInt32& pdwFlags);
    public abstract virtual void InvokeVerbOnSelection(string pszVerb);
    public abstract virtual HResult SetViewModeAndIconSize(int uViewMode, int iImageSize);
    public abstract virtual HResult GetViewModeAndIconSize(Int32& puViewMode, Int32& piImageSize);
    public abstract virtual void SetGroupSubsetCount(UInt32 cVisibleRows);
    public abstract virtual void GetGroupSubsetCount(UInt32& pcVisibleRows);
    public abstract virtual void SetRedraw(bool fRedrawOn);
    public abstract virtual void IsMoveInSameFolder();
    public abstract virtual void DoRename();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("68284fAA-6A48-11D0-8c78-00C04fd918b4")]
internal interface Microsoft.WindowsAPICodePack.Controls.IInputObject {
    public abstract virtual HResult UIActivateIO(bool fActivate, Message& pMsg);
    public abstract virtual HResult HasFocusIO();
    public abstract virtual HResult TranslateAcceleratorIO(Message& pMsg);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("6d5140c1-7436-11ce-8034-00aa006009fa")]
internal interface Microsoft.WindowsAPICodePack.Controls.IServiceProvider {
    public abstract virtual HResult QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject);
}
[GuidAttribute("000214E3-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Controls.IShellView {
    public abstract virtual HResult GetWindow(IntPtr& phwnd);
    public abstract virtual HResult ContextSensitiveHelp(bool fEnterMode);
    public abstract virtual HResult TranslateAccelerator(IntPtr pmsg);
    public abstract virtual HResult EnableModeless(bool fEnable);
    public abstract virtual HResult UIActivate(UInt32 uState);
    public abstract virtual HResult Refresh();
    public abstract virtual HResult CreateViewWindow(object psvPrevious, IntPtr pfs, object psb, IntPtr prcView, IntPtr& phWnd);
    public abstract virtual HResult DestroyViewWindow();
    public abstract virtual HResult GetCurrentInfo(IntPtr& pfs);
    public abstract virtual HResult AddPropertySheetPages(UInt32 dwReserved, IntPtr pfn, UInt32 lparam);
    public abstract virtual HResult SaveViewState();
    public abstract virtual HResult SelectItem(IntPtr pidlItem, UInt32 uFlags);
    public abstract virtual HResult GetItemObject(ShellViewGetItemObject uItem, Guid& riid, Object& ppv);
}
public class Microsoft.WindowsAPICodePack.Controls.NavigationCompleteEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ShellObject <NewLocation>k__BackingField;
    public ShellObject NewLocation { get; public set; }
    [CompilerGeneratedAttribute]
public ShellObject get_NewLocation();
    [CompilerGeneratedAttribute]
public void set_NewLocation(ShellObject value);
}
public class Microsoft.WindowsAPICodePack.Controls.NavigationFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ShellObject <FailedLocation>k__BackingField;
    public ShellObject FailedLocation { get; public set; }
    [CompilerGeneratedAttribute]
public ShellObject get_FailedLocation();
    [CompilerGeneratedAttribute]
public void set_FailedLocation(ShellObject value);
}
public enum Microsoft.WindowsAPICodePack.Controls.NavigationLogDirection : Enum {
    public int value__;
    public static NavigationLogDirection Forward;
    public static NavigationLogDirection Backward;
}
public class Microsoft.WindowsAPICodePack.Controls.NavigationLogEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <CanNavigateForwardChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanNavigateBackwardChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LocationsChanged>k__BackingField;
    public bool CanNavigateForwardChanged { get; public set; }
    public bool CanNavigateBackwardChanged { get; public set; }
    public bool LocationsChanged { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CanNavigateForwardChanged();
    [CompilerGeneratedAttribute]
public void set_CanNavigateForwardChanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanNavigateBackwardChanged();
    [CompilerGeneratedAttribute]
public void set_CanNavigateBackwardChanged(bool value);
    [CompilerGeneratedAttribute]
public bool get_LocationsChanged();
    [CompilerGeneratedAttribute]
public void set_LocationsChanged(bool value);
}
public class Microsoft.WindowsAPICodePack.Controls.NavigationPendingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ShellObject <PendingLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public ShellObject PendingLocation { get; public set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public ShellObject get_PendingLocation();
    [CompilerGeneratedAttribute]
public void set_PendingLocation(ShellObject value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public enum Microsoft.WindowsAPICodePack.Controls.PaneVisibilityState : Enum {
    public int value__;
    public static PaneVisibilityState DoNotCare;
    public static PaneVisibilityState Hide;
    public static PaneVisibilityState Show;
}
internal class Microsoft.WindowsAPICodePack.Controls.PendingNavigation : object {
    [CompilerGeneratedAttribute]
private ShellObject <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    internal ShellObject Location { get; internal set; }
    internal int Index { get; internal set; }
    internal PendingNavigation(ShellObject location, int index);
    [CompilerGeneratedAttribute]
internal ShellObject get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(ShellObject value);
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
}
internal enum Microsoft.WindowsAPICodePack.Controls.ShellViewGetItemObject : Enum {
    public int value__;
    public static ShellViewGetItemObject Background;
    public static ShellViewGetItemObject Selection;
    public static ShellViewGetItemObject AllView;
    public static ShellViewGetItemObject Checked;
    public static ShellViewGetItemObject TypeMask;
    public static ShellViewGetItemObject ViewOrderFlag;
}
public class Microsoft.WindowsAPICodePack.Controls.WindowsForms.CommandLink : Button {
    private bool useElevationIcon;
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [DefaultValueAttribute("(Note Text)")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Specifies the supporting note text.")]
[BrowsableAttribute("True")]
public string NoteText { get; public set; }
    [BrowsableAttribute("True")]
[CategoryAttribute("Appearance")]
[DescriptionAttribute("Indicates whether the button should be decorated with the security shield icon (Windows Vista only).")]
[DefaultValueAttribute("False")]
public bool UseElevationIcon { get; public set; }
    public static bool IsPlatformSupported { get; }
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public string get_NoteText();
    public void set_NoteText(string value);
    public bool get_UseElevationIcon();
    public void set_UseElevationIcon(bool value);
    private static int AddCommandLinkStyle(int style);
    private static string GetNote(Button Button);
    private static void SetNote(Button button, string text);
    internal static void SetShieldIcon(Button Button, bool Show);
    public static bool get_IsPlatformSupported();
}
public class Microsoft.WindowsAPICodePack.Controls.WindowsForms.ExplorerBrowser : UserControl {
    private IShellItemArray shellItemsArray;
    private ShellObjectCollection itemsCollection;
    private IShellItemArray selectedShellItemsArray;
    private ShellObjectCollection selectedItemsCollection;
    private EventHandler SelectionChanged;
    private EventHandler ItemsChanged;
    private EventHandler`1<NavigationPendingEventArgs> NavigationPending;
    private EventHandler`1<NavigationCompleteEventArgs> NavigationComplete;
    private EventHandler`1<NavigationFailedEventArgs> NavigationFailed;
    private EventHandler ViewEnumerationComplete;
    private EventHandler ViewSelectedItemChanged;
    internal ExplorerBrowserClass explorerBrowserControl;
    internal UInt32 eventsCookie;
    private string propertyBagName;
    private ShellObject antecreationNavigationTarget;
    private ExplorerBrowserViewEvents viewEvents;
    [CompilerGeneratedAttribute]
private ExplorerBrowserNavigationOptions <NavigationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplorerBrowserContentOptions <ContentOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ExplorerBrowserNavigationLog <NavigationLog>k__BackingField;
    public ExplorerBrowserNavigationOptions NavigationOptions { get; private set; }
    public ExplorerBrowserContentOptions ContentOptions { get; private set; }
    public ShellObjectCollection Items { get; }
    public ShellObjectCollection SelectedItems { get; }
    public ExplorerBrowserNavigationLog NavigationLog { get; private set; }
    public string PropertyBagName { get; public set; }
    [CompilerGeneratedAttribute]
public ExplorerBrowserNavigationOptions get_NavigationOptions();
    [CompilerGeneratedAttribute]
private void set_NavigationOptions(ExplorerBrowserNavigationOptions value);
    [CompilerGeneratedAttribute]
public ExplorerBrowserContentOptions get_ContentOptions();
    [CompilerGeneratedAttribute]
private void set_ContentOptions(ExplorerBrowserContentOptions value);
    public ShellObjectCollection get_Items();
    public ShellObjectCollection get_SelectedItems();
    [CompilerGeneratedAttribute]
public ExplorerBrowserNavigationLog get_NavigationLog();
    [CompilerGeneratedAttribute]
private void set_NavigationLog(ExplorerBrowserNavigationLog value);
    public string get_PropertyBagName();
    public void set_PropertyBagName(string value);
    public void Navigate(ShellObject shellObject);
    public bool NavigateLogLocation(NavigationLogDirection direction);
    public bool NavigateLogLocation(int navigationLogIndex);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public void add_ItemsChanged(EventHandler value);
    public void remove_ItemsChanged(EventHandler value);
    public void add_NavigationPending(EventHandler`1<NavigationPendingEventArgs> value);
    public void remove_NavigationPending(EventHandler`1<NavigationPendingEventArgs> value);
    public void add_NavigationComplete(EventHandler`1<NavigationCompleteEventArgs> value);
    public void remove_NavigationComplete(EventHandler`1<NavigationCompleteEventArgs> value);
    public void add_NavigationFailed(EventHandler`1<NavigationFailedEventArgs> value);
    public void remove_NavigationFailed(EventHandler`1<NavigationFailedEventArgs> value);
    public void add_ViewEnumerationComplete(EventHandler value);
    public void remove_ViewEnumerationComplete(EventHandler value);
    public void add_ViewSelectedItemChanged(EventHandler value);
    public void remove_ViewSelectedItemChanged(EventHandler value);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnCreateControl();
    protected virtual void OnSizeChanged(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.IServiceProvider.QueryService(Guid& guidService, Guid& riid, IntPtr& ppvObject);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.IExplorerPaneVisibility.GetPaneState(Guid& explorerPane, ExplorerPaneState& peps);
    private static ExplorerPaneState VisibilityToPaneState(PaneVisibilityState visibility);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.IExplorerBrowserEvents.OnNavigationPending(IntPtr pidlFolder);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.IExplorerBrowserEvents.OnViewCreated(object psv);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.IExplorerBrowserEvents.OnNavigationComplete(IntPtr pidlFolder);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.IExplorerBrowserEvents.OnNavigationFailed(IntPtr pidlFolder);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.OnDefaultCommand(IntPtr ppshv);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.OnStateChange(IntPtr ppshv, CommDlgBrowserStateChange uChange);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.IncludeObject(IntPtr ppshv, IntPtr pidl);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.GetDefaultMenuText(IShellView shellView, IntPtr text, int cchMax);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.GetViewFlags(UInt32& pdwFlags);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.Notify(IntPtr pshv, CommDlgBrowserNotifyType notifyType);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.GetCurrentFilter(StringBuilder pszFileSpec, int cchFileSpec);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.OnColumnClicked(IShellView ppshv, int iColumn);
    private sealed virtual override HResult Microsoft.WindowsAPICodePack.Controls.ICommDlgBrowser3.OnPreViewCreated(IShellView ppshv);
    private sealed virtual override bool System.Windows.Forms.IMessageFilter.PreFilterMessage(Message& m);
    internal FolderViewMode GetCurrentViewMode();
    internal IFolderView2 GetFolderView2();
    internal IShellItemArray GetSelectedItemsArray();
    internal int GetItemsCount();
    internal int GetSelectedItemsCount();
    internal IShellItemArray GetItemsArray();
    internal void FireSelectionChanged();
    internal void FireContentChanged();
    internal void FireContentEnumerationComplete();
    internal void FireSelectedItemChanged();
    [CompilerGeneratedAttribute]
private void <OnCreateControl>b__0();
}
public class Microsoft.WindowsAPICodePack.Controls.WindowsPresentationFoundation.CommandLink : UserControl {
    private RoutedEventHandler Click;
    private string link;
    private string note;
    private ImageSource icon;
    private PropertyChangedEventHandler PropertyChanged;
    internal RadioButton button;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private RoutedUICommand <Command>k__BackingField;
    public RoutedUICommand Command { get; public set; }
    public string Link { get; public set; }
    public string Note { get; public set; }
    public ImageSource Icon { get; public set; }
    public Nullable`1<bool> IsCheck { get; public set; }
    public static bool IsPlatformSupported { get; }
    private void button_Click(object sender, RoutedEventArgs e);
    [CompilerGeneratedAttribute]
public RoutedUICommand get_Command();
    [CompilerGeneratedAttribute]
public void set_Command(RoutedUICommand value);
    public void add_Click(RoutedEventHandler value);
    public void remove_Click(RoutedEventHandler value);
    public string get_Link();
    public void set_Link(string value);
    public string get_Note();
    public void set_Note(string value);
    public ImageSource get_Icon();
    public void set_Icon(ImageSource value);
    public Nullable`1<bool> get_IsCheck();
    public void set_IsCheck(Nullable`1<bool> value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public static bool get_IsPlatformSupported();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class Microsoft.WindowsAPICodePack.Controls.WindowsPresentationFoundation.ExplorerBrowser : UserControl {
    private ObservableCollection`1<ShellObject> selectedItems;
    private ObservableCollection`1<ShellObject> items;
    private ObservableCollection`1<ShellObject> navigationLog;
    private DispatcherTimer dtCLRUpdater;
    private ShellObject initialNavigationTarget;
    private Nullable`1<ExplorerBrowserViewMode> initialViewMode;
    private AutoResetEvent itemsChanged;
    private AutoResetEvent selectionChanged;
    private int selectionChangeWaitCount;
    private static DependencyPropertyKey ItemsPropertyKey;
    public static DependencyProperty ItemsProperty;
    private static DependencyPropertyKey SelectedItemsPropertyKey;
    private static DependencyPropertyKey NavigationLogPropertyKey;
    public static DependencyProperty NavigationLogProperty;
    public static DependencyProperty SelectedItemsProperty;
    public static DependencyProperty NavigationTargetProperty;
    internal static DependencyProperty AlignLeftProperty;
    internal static DependencyProperty AutoArrangeProperty;
    internal static DependencyProperty CheckSelectProperty;
    internal static DependencyProperty ExtendedTilesProperty;
    internal static DependencyProperty FullRowSelectProperty;
    internal static DependencyProperty HideFileNamesProperty;
    internal static DependencyProperty NoBrowserViewStateProperty;
    internal static DependencyProperty NoColumnHeaderProperty;
    internal static DependencyProperty NoHeaderInAllViewsProperty;
    internal static DependencyProperty NoIconsProperty;
    internal static DependencyProperty NoSubfoldersProperty;
    internal static DependencyProperty SingleClickActivateProperty;
    internal static DependencyProperty SingleSelectionProperty;
    internal static DependencyProperty ThumbnailSizeProperty;
    internal static DependencyProperty ViewModeProperty;
    internal static DependencyProperty AlwaysNavigateProperty;
    internal static DependencyProperty NavigateOnceProperty;
    internal static DependencyProperty AdvancedQueryPaneProperty;
    internal static DependencyProperty CommandsPaneProperty;
    internal static DependencyProperty CommandsOrganizePaneProperty;
    internal static DependencyProperty CommandsViewPaneProperty;
    internal static DependencyProperty DetailsPaneProperty;
    internal static DependencyProperty NavigationPaneProperty;
    internal static DependencyProperty PreviewPaneProperty;
    internal static DependencyProperty QueryPaneProperty;
    internal static DependencyProperty NavigationLogIndexProperty;
    internal Grid root;
    private bool _contentLoaded;
    [CompilerGeneratedAttribute]
private ExplorerBrowser <ExplorerBrowserControl>k__BackingField;
    public ExplorerBrowser ExplorerBrowserControl { get; public set; }
    public ObservableCollection`1<ShellObject> Items { get; public set; }
    public ObservableCollection`1<ShellObject> SelectedItems { get; internal set; }
    public ObservableCollection`1<ShellObject> NavigationLog { get; internal set; }
    public ShellObject NavigationTarget { get; public set; }
    public bool AlignLeft { get; public set; }
    public bool AutoArrange { get; public set; }
    public bool CheckSelect { get; public set; }
    public bool ExtendedTiles { get; public set; }
    public bool FullRowSelect { get; public set; }
    public bool HideFileNames { get; public set; }
    public bool NoBrowserViewState { get; public set; }
    public bool NoColumnHeader { get; public set; }
    public bool NoHeaderInAllViews { get; public set; }
    public bool NoIcons { get; public set; }
    public bool NoSubfolders { get; public set; }
    public bool SingleClickActivate { get; public set; }
    public bool SingleSelection { get; public set; }
    public int ThumbnailSize { get; public set; }
    public ExplorerBrowserViewMode ViewMode { get; public set; }
    public bool AlwaysNavigate { get; public set; }
    public bool NavigateOnce { get; public set; }
    public PaneVisibilityState AdvancedQueryPane { get; public set; }
    public PaneVisibilityState CommandsPane { get; public set; }
    public PaneVisibilityState CommandsOrganizePane { get; public set; }
    public PaneVisibilityState CommandsViewPane { get; public set; }
    public PaneVisibilityState DetailsPane { get; public set; }
    public PaneVisibilityState NavigationPane { get; public set; }
    public PaneVisibilityState PreviewPane { get; public set; }
    public PaneVisibilityState QueryPane { get; public set; }
    public int NavigationLogIndex { get; public set; }
    private static ExplorerBrowser();
    [CompilerGeneratedAttribute]
public ExplorerBrowser get_ExplorerBrowserControl();
    [CompilerGeneratedAttribute]
public void set_ExplorerBrowserControl(ExplorerBrowser value);
    private void ExplorerBrowserControl_ViewSelectedItemChanged(object sender, EventArgs e);
    private void ExplorerBrowserControl_ViewEnumerationComplete(object sender, EventArgs e);
    private void ExplorerBrowser_Loaded(object sender, RoutedEventArgs e);
    private void UpdateDependencyPropertiesFromCLRPRoperties(object sender, EventArgs e);
    private void NavigationLogChanged(object sender, NavigationLogEventArgs args);
    private void SelectionChanged(object sender, EventArgs e);
    private void ItemsChanged(object sender, EventArgs e);
    public ObservableCollection`1<ShellObject> get_Items();
    public void set_Items(ObservableCollection`1<ShellObject> value);
    public ObservableCollection`1<ShellObject> get_SelectedItems();
    internal void set_SelectedItems(ObservableCollection`1<ShellObject> value);
    public ObservableCollection`1<ShellObject> get_NavigationLog();
    internal void set_NavigationLog(ObservableCollection`1<ShellObject> value);
    public ShellObject get_NavigationTarget();
    public void set_NavigationTarget(ShellObject value);
    private static void navigationTargetChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_AlignLeft();
    public void set_AlignLeft(bool value);
    private static void OnAlignLeftChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_AutoArrange();
    public void set_AutoArrange(bool value);
    private static void OnAutoArrangeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_CheckSelect();
    public void set_CheckSelect(bool value);
    private static void OnCheckSelectChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_ExtendedTiles();
    public void set_ExtendedTiles(bool value);
    private static void OnExtendedTilesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_FullRowSelect();
    public void set_FullRowSelect(bool value);
    private static void OnFullRowSelectChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_HideFileNames();
    public void set_HideFileNames(bool value);
    private static void OnHideFileNamesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_NoBrowserViewState();
    public void set_NoBrowserViewState(bool value);
    private static void OnNoBrowserViewStateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_NoColumnHeader();
    public void set_NoColumnHeader(bool value);
    private static void OnNoColumnHeaderChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_NoHeaderInAllViews();
    public void set_NoHeaderInAllViews(bool value);
    private static void OnNoHeaderInAllViewsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_NoIcons();
    public void set_NoIcons(bool value);
    private static void OnNoIconsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_NoSubfolders();
    public void set_NoSubfolders(bool value);
    private static void OnNoSubfoldersChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_SingleClickActivate();
    public void set_SingleClickActivate(bool value);
    private static void OnSingleClickActivateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_SingleSelection();
    public void set_SingleSelection(bool value);
    private static void OnSingleSelectionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_ThumbnailSize();
    public void set_ThumbnailSize(int value);
    private static void OnThumbnailSizeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public ExplorerBrowserViewMode get_ViewMode();
    public void set_ViewMode(ExplorerBrowserViewMode value);
    private static void OnViewModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_AlwaysNavigate();
    public void set_AlwaysNavigate(bool value);
    private static void OnAlwaysNavigateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public bool get_NavigateOnce();
    public void set_NavigateOnce(bool value);
    private static void OnNavigateOnceChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_AdvancedQueryPane();
    public void set_AdvancedQueryPane(PaneVisibilityState value);
    private static void OnAdvancedQueryPaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_CommandsPane();
    public void set_CommandsPane(PaneVisibilityState value);
    private static void OnCommandsPaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_CommandsOrganizePane();
    public void set_CommandsOrganizePane(PaneVisibilityState value);
    private static void OnCommandsOrganizePaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_CommandsViewPane();
    public void set_CommandsViewPane(PaneVisibilityState value);
    private static void OnCommandsViewPaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_DetailsPane();
    public void set_DetailsPane(PaneVisibilityState value);
    private static void OnDetailsPaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_NavigationPane();
    public void set_NavigationPane(PaneVisibilityState value);
    private static void OnNavigationPaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_PreviewPane();
    public void set_PreviewPane(PaneVisibilityState value);
    private static void OnPreviewPaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public PaneVisibilityState get_QueryPane();
    public void set_QueryPane(PaneVisibilityState value);
    private static void OnQueryPaneChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public int get_NavigationLogIndex();
    public void set_NavigationLogIndex(int value);
    private static void OnNavigationLogIndexChanged(DependencyObject d, DependencyPropertyChangedEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposed);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
[ContentPropertyAttribute("Controls")]
public abstract class Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialog : object {
    private Collection`1<string> filenames;
    internal Collection`1<IShellItem> items;
    internal DialogShowState showState;
    private IFileDialog nativeDialog;
    private IFileDialogCustomize customize;
    private NativeDialogEventSink nativeEventSink;
    private Nullable`1<bool> canceled;
    private bool resetSelections;
    private IntPtr parentWindow;
    private bool filterSet;
    private CancelEventHandler FileOk;
    private EventHandler`1<CommonFileDialogFolderChangeEventArgs> FolderChanging;
    private EventHandler FolderChanged;
    private EventHandler SelectionChanged;
    private EventHandler FileTypeChanged;
    private EventHandler DialogOpening;
    private CommonFileDialogControlCollection`1<CommonFileDialogControl> controls;
    private CommonFileDialogFilterCollection filters;
    private string title;
    private bool ensureFileExists;
    private bool ensurePathExists;
    private bool ensureValidNames;
    private bool ensureReadOnly;
    private bool restoreDirectory;
    private bool showPlacesList;
    private bool addToMruList;
    private bool showHiddenItems;
    private bool allowPropertyEditing;
    private bool navigateToShortcut;
    private string initialDirectory;
    private ShellContainer initialDirectoryShellContainer;
    private string defaultDirectory;
    private ShellContainer defaultDirectoryShellContainer;
    private Guid cookieIdentifier;
    [CompilerGeneratedAttribute]
private string <DefaultExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultFileName>k__BackingField;
    protected IEnumerable`1<string> FileNameCollection { get; }
    public CommonFileDialogControlCollection`1<CommonFileDialogControl> Controls { get; }
    public CommonFileDialogFilterCollection Filters { get; }
    public string Title { get; public set; }
    public bool EnsureFileExists { get; public set; }
    public bool EnsurePathExists { get; public set; }
    public bool EnsureValidNames { get; public set; }
    public bool EnsureReadOnly { get; public set; }
    public bool RestoreDirectory { get; public set; }
    public bool ShowPlacesList { get; public set; }
    public bool AddToMostRecentlyUsedList { get; public set; }
    public bool ShowHiddenItems { get; public set; }
    public bool AllowPropertyEditing { get; public set; }
    public bool NavigateToShortcut { get; public set; }
    public string DefaultExtension { get; public set; }
    public int SelectedFileTypeIndex { get; }
    public string FileName { get; }
    public ShellObject FileAsShellObject { get; }
    public string InitialDirectory { get; public set; }
    public ShellContainer InitialDirectoryShellContainer { get; public set; }
    public string DefaultDirectory { get; public set; }
    public ShellContainer DefaultDirectoryShellContainer { get; public set; }
    public Guid CookieIdentifier { get; public set; }
    public string DefaultFileName { get; public set; }
    private bool NativeDialogShowing { get; }
    public static bool IsPlatformSupported { get; }
    protected CommonFileDialog(string title);
    protected IEnumerable`1<string> get_FileNameCollection();
    internal abstract virtual void InitializeNativeFileDialog();
    internal abstract virtual IFileDialog GetNativeFileDialog();
    internal abstract virtual void PopulateWithFileNames(Collection`1<string> names);
    internal abstract virtual void PopulateWithIShellItems(Collection`1<IShellItem> shellItems);
    internal abstract virtual void CleanUpNativeFileDialog();
    internal abstract virtual FileOpenOptions GetDerivedOptionFlags(FileOpenOptions flags);
    public void add_FileOk(CancelEventHandler value);
    public void remove_FileOk(CancelEventHandler value);
    public void add_FolderChanging(EventHandler`1<CommonFileDialogFolderChangeEventArgs> value);
    public void remove_FolderChanging(EventHandler`1<CommonFileDialogFolderChangeEventArgs> value);
    public void add_FolderChanged(EventHandler value);
    public void remove_FolderChanged(EventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public void add_FileTypeChanged(EventHandler value);
    public void remove_FileTypeChanged(EventHandler value);
    public void add_DialogOpening(EventHandler value);
    public void remove_DialogOpening(EventHandler value);
    public CommonFileDialogControlCollection`1<CommonFileDialogControl> get_Controls();
    public CommonFileDialogFilterCollection get_Filters();
    public string get_Title();
    public void set_Title(string value);
    public bool get_EnsureFileExists();
    public void set_EnsureFileExists(bool value);
    public bool get_EnsurePathExists();
    public void set_EnsurePathExists(bool value);
    public bool get_EnsureValidNames();
    public void set_EnsureValidNames(bool value);
    public bool get_EnsureReadOnly();
    public void set_EnsureReadOnly(bool value);
    public bool get_RestoreDirectory();
    public void set_RestoreDirectory(bool value);
    public bool get_ShowPlacesList();
    public void set_ShowPlacesList(bool value);
    public bool get_AddToMostRecentlyUsedList();
    public void set_AddToMostRecentlyUsedList(bool value);
    public bool get_ShowHiddenItems();
    public void set_ShowHiddenItems(bool value);
    public bool get_AllowPropertyEditing();
    public void set_AllowPropertyEditing(bool value);
    public bool get_NavigateToShortcut();
    public void set_NavigateToShortcut(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultExtension();
    [CompilerGeneratedAttribute]
public void set_DefaultExtension(string value);
    public int get_SelectedFileTypeIndex();
    private void SyncFileTypeComboToDefaultExtension(IFileDialog dialog);
    public string get_FileName();
    public ShellObject get_FileAsShellObject();
    public void AddPlace(ShellContainer place, FileDialogAddPlaceLocation location);
    public void AddPlace(string path, FileDialogAddPlaceLocation location);
    public string get_InitialDirectory();
    public void set_InitialDirectory(string value);
    public ShellContainer get_InitialDirectoryShellContainer();
    public void set_InitialDirectoryShellContainer(ShellContainer value);
    public string get_DefaultDirectory();
    public void set_DefaultDirectory(string value);
    public ShellContainer get_DefaultDirectoryShellContainer();
    public void set_DefaultDirectoryShellContainer(ShellContainer value);
    public Guid get_CookieIdentifier();
    public void set_CookieIdentifier(Guid value);
    public CommonFileDialogResult ShowDialog(IntPtr ownerWindowHandle);
    public CommonFileDialogResult ShowDialog(Window window);
    public CommonFileDialogResult ShowDialog();
    public void ResetUserSelections();
    [CompilerGeneratedAttribute]
public string get_DefaultFileName();
    [CompilerGeneratedAttribute]
public void set_DefaultFileName(string value);
    private void InitializeEventSink(IFileDialog nativeDlg);
    private void ApplyNativeSettings(IFileDialog dialog);
    private FileOpenOptions CalculateNativeDialogOptionFlags();
    private static void GenerateNotImplementedException();
    public virtual bool IsCollectionChangeAllowed();
    public virtual void ApplyCollectionChanged();
    public virtual bool IsControlPropertyChangeAllowed(string propertyName, DialogControl control);
    public virtual void ApplyControlPropertyChange(string propertyName, DialogControl control);
    protected void CheckFileNamesAvailable();
    protected void CheckFileItemsAvailable();
    private bool get_NativeDialogShowing();
    internal static string GetFileNameFromShellItem(IShellItem item);
    internal static IShellItem GetShellItemAt(IShellItemArray array, int i);
    protected void ThrowIfDialogShowing(string message);
    private void GetCustomizedFileDialog();
    protected virtual void OnFileOk(CancelEventArgs e);
    protected virtual void OnFolderChanging(CommonFileDialogFolderChangeEventArgs e);
    protected virtual void OnFolderChanged(EventArgs e);
    protected virtual void OnSelectionChanged(EventArgs e);
    protected virtual void OnFileTypeChanged(EventArgs e);
    protected virtual void OnOpening(EventArgs e);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public static bool get_IsPlatformSupported();
}
public class Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogFilter : object {
    private Collection`1<string> extensions;
    private string rawDisplayName;
    private bool showExtensions;
    public string DisplayName { get; public set; }
    public Collection`1<string> Extensions { get; }
    public bool ShowExtensions { get; public set; }
    public CommonFileDialogFilter(string rawDisplayName, string extensionList);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Collection`1<string> get_Extensions();
    public bool get_ShowExtensions();
    public void set_ShowExtensions(bool value);
    private static string NormalizeExtension(string rawExtension);
    private static string GetDisplayExtensionList(Collection`1<string> extensions);
    internal FilterSpec GetFilterSpec();
    public virtual string ToString();
}
public class Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogFilterCollection : Collection`1<CommonFileDialogFilter> {
    internal FilterSpec[] GetAllFilterSpecs();
}
public class Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogFolderChangeEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private string <Folder>k__BackingField;
    public string Folder { get; public set; }
    public CommonFileDialogFolderChangeEventArgs(string folder);
    [CompilerGeneratedAttribute]
public string get_Folder();
    [CompilerGeneratedAttribute]
public void set_Folder(string value);
}
public enum Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogResult : Enum {
    public int value__;
    public static CommonFileDialogResult None;
    public static CommonFileDialogResult Ok;
    public static CommonFileDialogResult Cancel;
}
public static class Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogStandardFilters : object {
    private static CommonFileDialogFilter textFilesFilter;
    private static CommonFileDialogFilter pictureFilesFilter;
    private static CommonFileDialogFilter officeFilesFilter;
    public static CommonFileDialogFilter TextFiles { get; }
    public static CommonFileDialogFilter PictureFiles { get; }
    public static CommonFileDialogFilter OfficeFiles { get; }
    public static CommonFileDialogFilter get_TextFiles();
    public static CommonFileDialogFilter get_PictureFiles();
    public static CommonFileDialogFilter get_OfficeFiles();
}
public class Microsoft.WindowsAPICodePack.Dialogs.CommonOpenFileDialog : CommonFileDialog {
    private NativeFileOpenDialog openDialogCoClass;
    private bool multiselect;
    private bool isFolderPicker;
    private bool allowNonFileSystem;
    public IEnumerable`1<string> FileNames { get; }
    public ICollection`1<ShellObject> FilesAsShellObject { get; }
    public bool Multiselect { get; public set; }
    public bool IsFolderPicker { get; public set; }
    public bool AllowNonFileSystemItems { get; public set; }
    public CommonOpenFileDialog(string name);
    public IEnumerable`1<string> get_FileNames();
    public ICollection`1<ShellObject> get_FilesAsShellObject();
    public bool get_Multiselect();
    public void set_Multiselect(bool value);
    public bool get_IsFolderPicker();
    public void set_IsFolderPicker(bool value);
    public bool get_AllowNonFileSystemItems();
    public void set_AllowNonFileSystemItems(bool value);
    internal virtual IFileDialog GetNativeFileDialog();
    internal virtual void InitializeNativeFileDialog();
    internal virtual void CleanUpNativeFileDialog();
    internal virtual void PopulateWithFileNames(Collection`1<string> names);
    internal virtual void PopulateWithIShellItems(Collection`1<IShellItem> items);
    internal virtual FileOpenOptions GetDerivedOptionFlags(FileOpenOptions flags);
}
public class Microsoft.WindowsAPICodePack.Dialogs.CommonSaveFileDialog : CommonFileDialog {
    private NativeFileSaveDialog saveDialogCoClass;
    private bool overwritePrompt;
    private bool createPrompt;
    private bool isExpandedMode;
    private bool alwaysAppendDefaultExtension;
    public bool OverwritePrompt { get; public set; }
    public bool CreatePrompt { get; public set; }
    public bool IsExpandedMode { get; public set; }
    public bool AlwaysAppendDefaultExtension { get; public set; }
    public ShellPropertyCollection CollectedProperties { get; }
    public CommonSaveFileDialog(string name);
    public bool get_OverwritePrompt();
    public void set_OverwritePrompt(bool value);
    public bool get_CreatePrompt();
    public void set_CreatePrompt(bool value);
    public bool get_IsExpandedMode();
    public void set_IsExpandedMode(bool value);
    public bool get_AlwaysAppendDefaultExtension();
    public void set_AlwaysAppendDefaultExtension(bool value);
    public void SetSaveAsItem(ShellObject item);
    public void SetCollectedPropertyKeys(bool appendDefault, PropertyKey[] propertyList);
    public ShellPropertyCollection get_CollectedProperties();
    internal virtual void InitializeNativeFileDialog();
    internal virtual IFileDialog GetNativeFileDialog();
    internal virtual void PopulateWithFileNames(Collection`1<string> names);
    internal virtual void PopulateWithIShellItems(Collection`1<IShellItem> items);
    internal virtual void CleanUpNativeFileDialog();
    internal virtual FileOpenOptions GetDerivedOptionFlags(FileOpenOptions flags);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogButton : CommonFileDialogProminentControl {
    private EventHandler Click;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate5;
    public CommonFileDialogButton(string text);
    public CommonFileDialogButton(string name, string text);
    internal virtual void Attach(IFileDialogCustomize dialog);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    internal void RaiseClickEvent();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__4(object param0, EventArgs param1);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogCheckBox : CommonFileDialogProminentControl {
    private bool isChecked;
    private EventHandler CheckedChanged;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate5;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate7;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate9;
    public bool IsChecked { get; public set; }
    public CommonFileDialogCheckBox(string text);
    public CommonFileDialogCheckBox(string name, string text);
    public CommonFileDialogCheckBox(string text, bool isChecked);
    public CommonFileDialogCheckBox(string name, string text, bool isChecked);
    public bool get_IsChecked();
    public void set_IsChecked(bool value);
    public void add_CheckedChanged(EventHandler value);
    public void remove_CheckedChanged(EventHandler value);
    internal void RaiseCheckedChangedEvent();
    internal virtual void Attach(IFileDialogCustomize dialog);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__4(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__6(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__8(object param0, EventArgs param1);
}
[ContentPropertyAttribute("Items")]
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogComboBox : CommonFileDialogProminentControl {
    private Collection`1<CommonFileDialogComboBoxItem> items;
    private int selectedIndex;
    private EventHandler SelectedIndexChanged;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    public Collection`1<CommonFileDialogComboBoxItem> Items { get; }
    public int SelectedIndex { get; public set; }
    public CommonFileDialogComboBox(string name);
    public Collection`1<CommonFileDialogComboBoxItem> get_Items();
    public sealed virtual int get_SelectedIndex();
    public sealed virtual void set_SelectedIndex(int value);
    public sealed virtual void add_SelectedIndexChanged(EventHandler value);
    public sealed virtual void remove_SelectedIndexChanged(EventHandler value);
    private sealed virtual override void Microsoft.WindowsAPICodePack.Dialogs.Controls.ICommonFileDialogIndexedControls.RaiseSelectedIndexChangedEvent();
    internal virtual void Attach(IFileDialogCustomize dialog);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(object param0, EventArgs param1);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogComboBoxItem : object {
    private string text;
    public string Text { get; public set; }
    public CommonFileDialogComboBoxItem(string text);
    public string get_Text();
    public void set_Text(string value);
}
public abstract class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogControl : DialogControl {
    private string textValue;
    private bool enabled;
    private bool visible;
    private bool isAdded;
    public string Text { get; public set; }
    public bool Enabled { get; public set; }
    public bool Visible { get; public set; }
    internal bool IsAdded { get; internal set; }
    protected CommonFileDialogControl(string text);
    protected CommonFileDialogControl(string name, string text);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    internal bool get_IsAdded();
    internal void set_IsAdded(bool value);
    internal abstract virtual void Attach(IFileDialogCustomize dialog);
    internal virtual void SyncUnmanagedProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogControlCollection`1 : Collection`1<T> {
    private IDialogControlHost hostingDialog;
    public T Item { get; }
    internal CommonFileDialogControlCollection`1(IDialogControlHost host);
    protected virtual void InsertItem(int index, T control);
    protected virtual void RemoveItem(int index);
    public T get_Item(string name);
    internal DialogControl GetControlbyId(int id);
    internal DialogControl GetSubControlbyId(IEnumerable`1<DialogControl> controlCollection, int id);
}
[ContentPropertyAttribute("Items")]
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogGroupBox : CommonFileDialogProminentControl {
    private Collection`1<DialogControl> items;
    public Collection`1<DialogControl> Items { get; }
    public CommonFileDialogGroupBox(string text);
    public CommonFileDialogGroupBox(string name, string text);
    public Collection`1<DialogControl> get_Items();
    private void Initialize();
    internal virtual void Attach(IFileDialogCustomize dialog);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogLabel : CommonFileDialogControl {
    public CommonFileDialogLabel(string text);
    public CommonFileDialogLabel(string name, string text);
    internal virtual void Attach(IFileDialogCustomize dialog);
}
[ContentPropertyAttribute("Items")]
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogMenu : CommonFileDialogProminentControl {
    private Collection`1<CommonFileDialogMenuItem> items;
    public Collection`1<CommonFileDialogMenuItem> Items { get; }
    public CommonFileDialogMenu(string text);
    public CommonFileDialogMenu(string name, string text);
    public Collection`1<CommonFileDialogMenuItem> get_Items();
    internal virtual void Attach(IFileDialogCustomize dialog);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogMenuItem : CommonFileDialogControl {
    private EventHandler Click;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    public CommonFileDialogMenuItem(string text);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    internal void RaiseClickEvent();
    internal virtual void Attach(IFileDialogCustomize dialog);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(object param0, EventArgs param1);
}
[ContentPropertyAttribute("Items")]
public abstract class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogProminentControl : CommonFileDialogControl {
    private bool isProminent;
    public bool IsProminent { get; public set; }
    protected CommonFileDialogProminentControl(string text);
    protected CommonFileDialogProminentControl(string name, string text);
    public bool get_IsProminent();
    public void set_IsProminent(bool value);
}
[ContentPropertyAttribute("Items")]
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogRadioButtonList : CommonFileDialogControl {
    private Collection`1<CommonFileDialogRadioButtonListItem> items;
    private int selectedIndex;
    private EventHandler SelectedIndexChanged;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    [CompilerGeneratedAttribute]
private static EventHandler CS$<>9__CachedAnonymousMethodDelegate3;
    public Collection`1<CommonFileDialogRadioButtonListItem> Items { get; }
    public int SelectedIndex { get; public set; }
    public CommonFileDialogRadioButtonList(string name);
    public Collection`1<CommonFileDialogRadioButtonListItem> get_Items();
    public sealed virtual int get_SelectedIndex();
    public sealed virtual void set_SelectedIndex(int value);
    public sealed virtual void add_SelectedIndexChanged(EventHandler value);
    public sealed virtual void remove_SelectedIndexChanged(EventHandler value);
    private sealed virtual override void Microsoft.WindowsAPICodePack.Dialogs.Controls.ICommonFileDialogIndexedControls.RaiseSelectedIndexChangedEvent();
    internal virtual void Attach(IFileDialogCustomize dialog);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, EventArgs param1);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__2(object param0, EventArgs param1);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogRadioButtonListItem : object {
    [CompilerGeneratedAttribute]
private string <Text>k__BackingField;
    public string Text { get; public set; }
    public CommonFileDialogRadioButtonListItem(string text);
    [CompilerGeneratedAttribute]
public string get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(string value);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogSeparator : CommonFileDialogControl {
    internal virtual void Attach(IFileDialogCustomize dialog);
}
public class Microsoft.WindowsAPICodePack.Dialogs.Controls.CommonFileDialogTextBox : CommonFileDialogControl {
    private IFileDialogCustomize customizedDialog;
    [CompilerGeneratedAttribute]
private bool <Closed>k__BackingField;
    internal bool Closed { get; internal set; }
    public string Text { get; public set; }
    public CommonFileDialogTextBox(string text);
    public CommonFileDialogTextBox(string name, string text);
    [CompilerGeneratedAttribute]
internal bool get_Closed();
    [CompilerGeneratedAttribute]
internal void set_Closed(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    internal virtual void Attach(IFileDialogCustomize dialog);
    internal void SyncValue();
}
internal interface Microsoft.WindowsAPICodePack.Dialogs.Controls.ICommonFileDialogIndexedControls {
    public int SelectedIndex { get; public set; }
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    public abstract virtual void add_SelectedIndexChanged(EventHandler value);
    public abstract virtual void remove_SelectedIndexChanged(EventHandler value);
    public abstract virtual void RaiseSelectedIndexChangedEvent();
}
[ClassInterfaceAttribute("0")]
[TypeLibTypeAttribute("2")]
[GuidAttribute("DC1C5A9C-E88A-4DDE-A5A1-60F82A20AEF7")]
internal class Microsoft.WindowsAPICodePack.Dialogs.FileOpenDialogRCW : object {
}
[TypeLibTypeAttribute("2")]
[GuidAttribute("C0B4E2F3-BA21-4773-8DBA-335EC946EB8B")]
[ClassInterfaceAttribute("0")]
internal class Microsoft.WindowsAPICodePack.Dialogs.FileSaveDialogRCW : object {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("42F85136-DB7E-439C-85F1-E4075D135FC8")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.IFileDialog {
    public abstract virtual int Show(IntPtr parent);
    public abstract virtual void SetFileTypes(UInt32 cFileTypes, FilterSpec[] rgFilterSpec);
    public abstract virtual void SetFileTypeIndex(UInt32 iFileType);
    public abstract virtual void GetFileTypeIndex(UInt32& piFileType);
    public abstract virtual void Advise(IFileDialogEvents pfde, UInt32& pdwCookie);
    public abstract virtual void Unadvise(UInt32 dwCookie);
    public abstract virtual void SetOptions(FileOpenOptions fos);
    public abstract virtual void GetOptions(FileOpenOptions& pfos);
    public abstract virtual void SetDefaultFolder(IShellItem psi);
    public abstract virtual void SetFolder(IShellItem psi);
    public abstract virtual void GetFolder(IShellItem& ppsi);
    public abstract virtual void GetCurrentSelection(IShellItem& ppsi);
    public abstract virtual void SetFileName(string pszName);
    public abstract virtual void GetFileName(String& pszName);
    public abstract virtual void SetTitle(string pszTitle);
    public abstract virtual void SetOkButtonLabel(string pszText);
    public abstract virtual void SetFileNameLabel(string pszLabel);
    public abstract virtual void GetResult(IShellItem& ppsi);
    public abstract virtual void AddPlace(IShellItem psi, FileDialogAddPlacement fdap);
    public abstract virtual void SetDefaultExtension(string pszDefaultExtension);
    public abstract virtual void Close(int hr);
    public abstract virtual void SetClientGuid(Guid& guid);
    public abstract virtual void ClearClientData();
    public abstract virtual void SetFilter(IntPtr pFilter);
}
[GuidAttribute("36116642-D713-4B97-9B83-7484A9D00433")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.IFileDialogControlEvents {
    public abstract virtual void OnItemSelected(IFileDialogCustomize pfdc, int dwIDCtl, int dwIDItem);
    public abstract virtual void OnButtonClicked(IFileDialogCustomize pfdc, int dwIDCtl);
    public abstract virtual void OnCheckButtonToggled(IFileDialogCustomize pfdc, int dwIDCtl, bool bChecked);
    public abstract virtual void OnControlActivating(IFileDialogCustomize pfdc, int dwIDCtl);
}
[GuidAttribute("E6FDD21A-163F-4975-9C8C-A69F1BA37034")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.IFileDialogCustomize {
    public abstract virtual void EnableOpenDropDown(int dwIDCtl);
    public abstract virtual void AddMenu(int dwIDCtl, string pszLabel);
    public abstract virtual void AddPushButton(int dwIDCtl, string pszLabel);
    public abstract virtual void AddComboBox(int dwIDCtl);
    public abstract virtual void AddRadioButtonList(int dwIDCtl);
    public abstract virtual void AddCheckButton(int dwIDCtl, string pszLabel, bool bChecked);
    public abstract virtual void AddEditBox(int dwIDCtl, string pszText);
    public abstract virtual void AddSeparator(int dwIDCtl);
    public abstract virtual void AddText(int dwIDCtl, string pszText);
    public abstract virtual void SetControlLabel(int dwIDCtl, string pszLabel);
    public abstract virtual void GetControlState(int dwIDCtl, ControlState& pdwState);
    public abstract virtual void SetControlState(int dwIDCtl, ControlState dwState);
    public abstract virtual void GetEditBoxText(int dwIDCtl, String& ppszText);
    public abstract virtual void SetEditBoxText(int dwIDCtl, string pszText);
    public abstract virtual void GetCheckButtonState(int dwIDCtl, Boolean& pbChecked);
    public abstract virtual void SetCheckButtonState(int dwIDCtl, bool bChecked);
    public abstract virtual void AddControlItem(int dwIDCtl, int dwIDItem, string pszLabel);
    public abstract virtual void RemoveControlItem(int dwIDCtl, int dwIDItem);
    public abstract virtual void RemoveAllControlItems(int dwIDCtl);
    public abstract virtual void GetControlItemState(int dwIDCtl, int dwIDItem, ControlState& pdwState);
    public abstract virtual void SetControlItemState(int dwIDCtl, int dwIDItem, ControlState dwState);
    public abstract virtual void GetSelectedControlItem(int dwIDCtl, Int32& pdwIDItem);
    public abstract virtual void SetSelectedControlItem(int dwIDCtl, int dwIDItem);
    public abstract virtual void StartVisualGroup(int dwIDCtl, string pszLabel);
    public abstract virtual void EndVisualGroup();
    public abstract virtual void MakeProminent(int dwIDCtl);
}
[GuidAttribute("973510DB-7D7F-452B-8975-74A85828D354")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.IFileDialogEvents {
    public abstract virtual HResult OnFileOk(IFileDialog pfd);
    public abstract virtual HResult OnFolderChanging(IFileDialog pfd, IShellItem psiFolder);
    public abstract virtual void OnFolderChange(IFileDialog pfd);
    public abstract virtual void OnSelectionChange(IFileDialog pfd);
    public abstract virtual void OnShareViolation(IFileDialog pfd, IShellItem psi, FileDialogEventShareViolationResponse& pResponse);
    public abstract virtual void OnTypeChange(IFileDialog pfd);
    public abstract virtual void OnOverwrite(IFileDialog pfd, IShellItem psi, FileDialogEventOverwriteResponse& pResponse);
}
[GuidAttribute("D57C7288-D4AD-4768-BE02-9D969532D960")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.IFileOpenDialog {
    public abstract virtual int Show(IntPtr parent);
    public abstract virtual void SetFileTypes(UInt32 cFileTypes, FilterSpec& rgFilterSpec);
    public abstract virtual void SetFileTypeIndex(UInt32 iFileType);
    public abstract virtual void GetFileTypeIndex(UInt32& piFileType);
    public abstract virtual void Advise(IFileDialogEvents pfde, UInt32& pdwCookie);
    public abstract virtual void Unadvise(UInt32 dwCookie);
    public abstract virtual void SetOptions(FileOpenOptions fos);
    public abstract virtual void GetOptions(FileOpenOptions& pfos);
    public abstract virtual void SetDefaultFolder(IShellItem psi);
    public abstract virtual void SetFolder(IShellItem psi);
    public abstract virtual void GetFolder(IShellItem& ppsi);
    public abstract virtual void GetCurrentSelection(IShellItem& ppsi);
    public abstract virtual void SetFileName(string pszName);
    public abstract virtual void GetFileName(String& pszName);
    public abstract virtual void SetTitle(string pszTitle);
    public abstract virtual void SetOkButtonLabel(string pszText);
    public abstract virtual void SetFileNameLabel(string pszLabel);
    public abstract virtual void GetResult(IShellItem& ppsi);
    public abstract virtual void AddPlace(IShellItem psi, FileDialogAddPlacement fdap);
    public abstract virtual void SetDefaultExtension(string pszDefaultExtension);
    public abstract virtual void Close(int hr);
    public abstract virtual void SetClientGuid(Guid& guid);
    public abstract virtual void ClearClientData();
    public abstract virtual void SetFilter(IntPtr pFilter);
    public abstract virtual void GetResults(IShellItemArray& ppenum);
    public abstract virtual void GetSelectedItems(IShellItemArray& ppsai);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("84BCCD23-5FDE-4CDB-AEA4-AF64B83D78AB")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.IFileSaveDialog {
    public abstract virtual int Show(IntPtr parent);
    public abstract virtual void SetFileTypes(UInt32 cFileTypes, FilterSpec& rgFilterSpec);
    public abstract virtual void SetFileTypeIndex(UInt32 iFileType);
    public abstract virtual void GetFileTypeIndex(UInt32& piFileType);
    public abstract virtual void Advise(IFileDialogEvents pfde, UInt32& pdwCookie);
    public abstract virtual void Unadvise(UInt32 dwCookie);
    public abstract virtual void SetOptions(FileOpenOptions fos);
    public abstract virtual void GetOptions(FileOpenOptions& pfos);
    public abstract virtual void SetDefaultFolder(IShellItem psi);
    public abstract virtual void SetFolder(IShellItem psi);
    public abstract virtual void GetFolder(IShellItem& ppsi);
    public abstract virtual void GetCurrentSelection(IShellItem& ppsi);
    public abstract virtual void SetFileName(string pszName);
    public abstract virtual void GetFileName(String& pszName);
    public abstract virtual void SetTitle(string pszTitle);
    public abstract virtual void SetOkButtonLabel(string pszText);
    public abstract virtual void SetFileNameLabel(string pszLabel);
    public abstract virtual void GetResult(IShellItem& ppsi);
    public abstract virtual void AddPlace(IShellItem psi, FileDialogAddPlacement fdap);
    public abstract virtual void SetDefaultExtension(string pszDefaultExtension);
    public abstract virtual void Close(int hr);
    public abstract virtual void SetClientGuid(Guid& guid);
    public abstract virtual void ClearClientData();
    public abstract virtual void SetFilter(IntPtr pFilter);
    public abstract virtual void SetSaveAsItem(IShellItem psi);
    public abstract virtual void SetProperties(IntPtr pStore);
    public abstract virtual int SetCollectedProperties(IPropertyDescriptionList pList, bool fAppendDefault);
    public abstract virtual HResult GetProperties(IPropertyStore& ppStore);
    public abstract virtual void ApplyProperties(IShellItem psi, IntPtr pStore, IntPtr& hwnd, IntPtr pSink);
}
internal interface Microsoft.WindowsAPICodePack.Dialogs.NativeCommonFileDialog {
}
[CoClassAttribute("Microsoft.WindowsAPICodePack.Dialogs.FileOpenDialogRCW")]
[GuidAttribute("D57C7288-D4AD-4768-BE02-9D969532D960")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.NativeFileOpenDialog {
}
[CoClassAttribute("Microsoft.WindowsAPICodePack.Dialogs.FileSaveDialogRCW")]
[GuidAttribute("84BCCD23-5FDE-4CDB-AEA4-AF64B83D78AB")]
internal interface Microsoft.WindowsAPICodePack.Dialogs.NativeFileSaveDialog {
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Shell.AccessModes : Enum {
    public int value__;
    public static AccessModes Direct;
    public static AccessModes Transacted;
    public static AccessModes Simple;
    public static AccessModes Read;
    public static AccessModes Write;
    public static AccessModes ReadWrite;
    public static AccessModes ShareDenyNone;
    public static AccessModes ShareDenyRead;
    public static AccessModes ShareDenyWrite;
    public static AccessModes ShareExclusive;
    public static AccessModes Priority;
    public static AccessModes DeleteOnRelease;
    public static AccessModes NoScratch;
    public static AccessModes Create;
    public static AccessModes Convert;
    public static AccessModes FailIfThere;
    public static AccessModes NoSnapshot;
    public static AccessModes DirectSingleWriterMultipleReader;
}
public class Microsoft.WindowsAPICodePack.Shell.AeroGlassCompositionChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <GlassAvailable>k__BackingField;
    public bool GlassAvailable { get; private set; }
    internal AeroGlassCompositionChangedEventArgs(bool avialbility);
    [CompilerGeneratedAttribute]
public bool get_GlassAvailable();
    [CompilerGeneratedAttribute]
private void set_GlassAvailable(bool value);
}
internal class Microsoft.WindowsAPICodePack.Shell.ChangeNotifyEventManager : object {
    private static ShellObjectChangeTypes[] _changeOrder;
    private Dictionary`2<ShellObjectChangeTypes, Delegate> _events;
    [CompilerGeneratedAttribute]
private static Func`3<ShellObjectChangeTypes, ShellObjectChangeTypes, ShellObjectChangeTypes> CS$<>9__CachedAnonymousMethodDelegate4;
    public ShellObjectChangeTypes RegisteredTypes { get; }
    private static ChangeNotifyEventManager();
    public void Register(ShellObjectChangeTypes changeType, Delegate handler);
    public void Unregister(ShellObjectChangeTypes changeType, Delegate handler);
    public void UnregisterAll();
    public void Invoke(object sender, ShellObjectChangeTypes changeType, EventArgs args);
    public ShellObjectChangeTypes get_RegisteredTypes();
    [CompilerGeneratedAttribute]
private static ShellObjectChangeTypes <get_RegisteredTypes>b__3(ShellObjectChangeTypes accumulator, ShellObjectChangeTypes changeType);
}
internal class Microsoft.WindowsAPICodePack.Shell.ChangeNotifyLock : object {
    private UInt32 _event;
    [CompilerGeneratedAttribute]
private int <ImageIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemName2>k__BackingField;
    public bool FromSystemInterrupt { get; }
    public int ImageIndex { get; private set; }
    public string ItemName { get; private set; }
    public string ItemName2 { get; private set; }
    public ShellObjectChangeTypes ChangeType { get; }
    internal ChangeNotifyLock(Message message);
    public bool get_FromSystemInterrupt();
    [CompilerGeneratedAttribute]
public int get_ImageIndex();
    [CompilerGeneratedAttribute]
private void set_ImageIndex(int value);
    [CompilerGeneratedAttribute]
public string get_ItemName();
    [CompilerGeneratedAttribute]
private void set_ItemName(string value);
    [CompilerGeneratedAttribute]
public string get_ItemName2();
    [CompilerGeneratedAttribute]
private void set_ItemName2(string value);
    public ShellObjectChangeTypes get_ChangeType();
}
[ClassInterfaceAttribute("0")]
[TypeLibTypeAttribute("2")]
[GuidAttribute("E03E85B0-7BE3-4000-BA98-6C13DE9FA486")]
internal class Microsoft.WindowsAPICodePack.Shell.ConditionFactoryCoClass : object {
}
[GuidAttribute("00021401-0000-0000-C000-000000000046")]
[ClassInterfaceAttribute("0")]
internal class Microsoft.WindowsAPICodePack.Shell.CShellLink : object {
}
public static class Microsoft.WindowsAPICodePack.Shell.DefaultIconSize : object {
    public static Size Small;
    public static Size Medium;
    public static Size Large;
    public static Size ExtraLarge;
    public static Size Maximum;
    private static DefaultIconSize();
}
public static class Microsoft.WindowsAPICodePack.Shell.DefaultThumbnailSize : object {
    public static Size Small;
    public static Size Medium;
    public static Size Large;
    public static Size ExtraLarge;
    public static Size Maximum;
    private static DefaultThumbnailSize();
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Shell.DefinitionOptions : Enum {
    public int value__;
    public static DefinitionOptions None;
    public static DefinitionOptions LocalRedirectOnly;
    public static DefinitionOptions Roamable;
    public static DefinitionOptions Precreate;
}
public enum Microsoft.WindowsAPICodePack.Shell.DisplayNameType : Enum {
    public int value__;
    public static DisplayNameType Default;
    public static DisplayNameType RelativeToParent;
    public static DisplayNameType RelativeToParentAddressBar;
    public static DisplayNameType RelativeToDesktop;
    public static DisplayNameType RelativeToParentEditing;
    public static DisplayNameType RelativeToDesktopEditing;
    public static DisplayNameType FileSystemPath;
    public static DisplayNameType Url;
}
internal class Microsoft.WindowsAPICodePack.Shell.EnumUnknownClass : object {
    private List`1<ICondition> conditionList;
    private int current;
    internal EnumUnknownClass(ICondition[] conditions);
    public sealed virtual HResult Next(UInt32 requestedNumber, IntPtr& buffer, UInt32& fetchedNumber);
    public sealed virtual HResult Skip(UInt32 number);
    public sealed virtual HResult Reset();
    public sealed virtual HResult Clone(IEnumUnknown& result);
}
[ExtensionAttribute]
public static class Microsoft.WindowsAPICodePack.Shell.EventHandlerExtensionMethods : object {
    [ExtensionAttribute]
public static void SafeRaise(EventHandler eventHandler, object sender);
    [ExtensionAttribute]
public static void SafeRaise(EventHandler`1<T> eventHandler, object sender, T args);
    [ExtensionAttribute]
public static void SafeRaise(EventHandler`1<EventArgs> eventHandler, object sender);
}
public enum Microsoft.WindowsAPICodePack.Shell.FileDialogAddPlaceLocation : Enum {
    public int value__;
    public static FileDialogAddPlaceLocation Bottom;
    public static FileDialogAddPlaceLocation Top;
}
public class Microsoft.WindowsAPICodePack.Shell.FileSystemKnownFolder : ShellFileSystemFolder {
    private IKnownFolderNative knownFolderNative;
    private KnownFolderSettings knownFolderSettings;
    private KnownFolderSettings KnownFolderSettings { get; }
    public string Path { get; }
    public FolderCategory Category { get; }
    public string CanonicalName { get; }
    public string Description { get; }
    public Guid ParentId { get; }
    public string RelativePath { get; }
    public string ParsingName { get; }
    public string Tooltip { get; }
    public string TooltipResourceId { get; }
    public string LocalizedName { get; }
    public string LocalizedNameResourceId { get; }
    public string Security { get; }
    public FileAttributes FileAttributes { get; }
    public DefinitionOptions DefinitionOptions { get; }
    public Guid FolderTypeId { get; }
    public string FolderType { get; }
    public Guid FolderId { get; }
    public bool PathExists { get; }
    public RedirectionCapability Redirection { get; }
    internal FileSystemKnownFolder(IShellItem2 shellItem);
    internal FileSystemKnownFolder(IKnownFolderNative kf);
    private KnownFolderSettings get_KnownFolderSettings();
    public virtual string get_Path();
    public sealed virtual FolderCategory get_Category();
    public sealed virtual string get_CanonicalName();
    public sealed virtual string get_Description();
    public sealed virtual Guid get_ParentId();
    public sealed virtual string get_RelativePath();
    public virtual string get_ParsingName();
    public sealed virtual string get_Tooltip();
    public sealed virtual string get_TooltipResourceId();
    public sealed virtual string get_LocalizedName();
    public sealed virtual string get_LocalizedNameResourceId();
    public sealed virtual string get_Security();
    public sealed virtual FileAttributes get_FileAttributes();
    public sealed virtual DefinitionOptions get_DefinitionOptions();
    public sealed virtual Guid get_FolderTypeId();
    public sealed virtual string get_FolderType();
    public sealed virtual Guid get_FolderId();
    public sealed virtual bool get_PathExists();
    public sealed virtual RedirectionCapability get_Redirection();
    protected virtual void Dispose(bool disposing);
}
public enum Microsoft.WindowsAPICodePack.Shell.FolderCategory : Enum {
    public int value__;
    public static FolderCategory None;
    public static FolderCategory Virtual;
    public static FolderCategory Fixed;
    public static FolderCategory Common;
    public static FolderCategory PerUser;
}
internal static class Microsoft.WindowsAPICodePack.Shell.FolderIdentifiers : object {
    private static Dictionary`2<Guid, string> folders;
    internal static Guid Computer;
    internal static Guid Conflict;
    internal static Guid ControlPanel;
    internal static Guid Desktop;
    internal static Guid Internet;
    internal static Guid Network;
    internal static Guid Printers;
    internal static Guid SyncManager;
    internal static Guid Connections;
    internal static Guid SyncSetup;
    internal static Guid SyncResults;
    internal static Guid RecycleBin;
    internal static Guid Fonts;
    internal static Guid Startup;
    internal static Guid Programs;
    internal static Guid StartMenu;
    internal static Guid Recent;
    internal static Guid SendTo;
    internal static Guid Documents;
    internal static Guid Favorites;
    internal static Guid NetHood;
    internal static Guid PrintHood;
    internal static Guid Templates;
    internal static Guid CommonStartup;
    internal static Guid CommonPrograms;
    internal static Guid CommonStartMenu;
    internal static Guid PublicDesktop;
    internal static Guid ProgramData;
    internal static Guid CommonTemplates;
    internal static Guid PublicDocuments;
    internal static Guid RoamingAppData;
    internal static Guid LocalAppData;
    internal static Guid LocalAppDataLow;
    internal static Guid InternetCache;
    internal static Guid Cookies;
    internal static Guid History;
    internal static Guid System;
    internal static Guid SystemX86;
    internal static Guid Windows;
    internal static Guid Profile;
    internal static Guid Pictures;
    internal static Guid ProgramFilesX86;
    internal static Guid ProgramFilesCommonX86;
    internal static Guid ProgramFilesX64;
    internal static Guid ProgramFilesCommonX64;
    internal static Guid ProgramFiles;
    internal static Guid ProgramFilesCommon;
    internal static Guid AdminTools;
    internal static Guid CommonAdminTools;
    internal static Guid Music;
    internal static Guid Videos;
    internal static Guid PublicPictures;
    internal static Guid PublicMusic;
    internal static Guid PublicVideos;
    internal static Guid ResourceDir;
    internal static Guid LocalizedResourcesDir;
    internal static Guid CommonOEMLinks;
    internal static Guid CDBurning;
    internal static Guid UserProfiles;
    internal static Guid Playlists;
    internal static Guid SamplePlaylists;
    internal static Guid SampleMusic;
    internal static Guid SamplePictures;
    internal static Guid SampleVideos;
    internal static Guid PhotoAlbums;
    internal static Guid Public;
    internal static Guid ChangeRemovePrograms;
    internal static Guid AppUpdates;
    internal static Guid AddNewPrograms;
    internal static Guid Downloads;
    internal static Guid PublicDownloads;
    internal static Guid SavedSearches;
    internal static Guid QuickLaunch;
    internal static Guid Contacts;
    internal static Guid SidebarParts;
    internal static Guid SidebarDefaultParts;
    internal static Guid TreeProperties;
    internal static Guid PublicGameTasks;
    internal static Guid GameTasks;
    internal static Guid SavedGames;
    internal static Guid Games;
    internal static Guid RecordedTV;
    internal static Guid SearchMapi;
    internal static Guid SearchCsc;
    internal static Guid Links;
    internal static Guid UsersFiles;
    internal static Guid SearchHome;
    internal static Guid OriginalImages;
    internal static Guid UserProgramFiles;
    internal static Guid UserProgramFilesCommon;
    internal static Guid Ringtones;
    internal static Guid PublicRingtones;
    internal static Guid UsersLibraries;
    internal static Guid DocumentsLibrary;
    internal static Guid MusicLibrary;
    internal static Guid PicturesLibrary;
    internal static Guid VideosLibrary;
    internal static Guid RecordedTVLibrary;
    internal static Guid OtherUsers;
    internal static Guid DeviceMetadataStore;
    internal static Guid Libraries;
    internal static Guid UserPinned;
    internal static Guid ImplicitAppShortcuts;
    private static FolderIdentifiers();
    internal static string NameForGuid(Guid folderId);
    internal static SortedList`2<string, Guid> GetAllFolders();
}
public enum Microsoft.WindowsAPICodePack.Shell.FolderLogicalViewMode : Enum {
    public int value__;
    public static FolderLogicalViewMode Unspecified;
    public static FolderLogicalViewMode None;
    public static FolderLogicalViewMode First;
    public static FolderLogicalViewMode Details;
    public static FolderLogicalViewMode Tiles;
    public static FolderLogicalViewMode Icons;
    public static FolderLogicalViewMode List;
    public static FolderLogicalViewMode Content;
    public static FolderLogicalViewMode Last;
}
internal class Microsoft.WindowsAPICodePack.Shell.FolderProperties : ValueType {
    internal string name;
    internal FolderCategory category;
    internal string canonicalName;
    internal string description;
    internal Guid parentId;
    internal string parent;
    internal string relativePath;
    internal string parsingName;
    internal string tooltipResourceId;
    internal string tooltip;
    internal string localizedName;
    internal string localizedNameResourceId;
    internal string iconResourceId;
    internal BitmapSource icon;
    internal DefinitionOptions definitionOptions;
    internal FileAttributes fileAttributes;
    internal Guid folderTypeId;
    internal string folderType;
    internal Guid folderId;
    internal string path;
    internal bool pathExists;
    internal RedirectionCapability redirection;
    internal string security;
}
internal static class Microsoft.WindowsAPICodePack.Shell.FolderTypes : object {
    internal static Guid NotSpecified;
    internal static Guid Invalid;
    internal static Guid Documents;
    internal static Guid Pictures;
    internal static Guid Music;
    internal static Guid MusicIcons;
    internal static Guid Games;
    internal static Guid ControlPanelCategory;
    internal static Guid ControlPanelClassic;
    internal static Guid Printers;
    internal static Guid RecycleBin;
    internal static Guid SoftwareExplorer;
    internal static Guid CompressedFolder;
    internal static Guid Contacts;
    internal static Guid Library;
    internal static Guid NetworkExplorer;
    internal static Guid UserFiles;
    internal static Guid GenericSearchResults;
    internal static Guid GenericLibrary;
    internal static Guid Videos;
    internal static Guid UsersLibraries;
    internal static Guid OtherUsers;
    internal static Guid Communications;
    internal static Guid RecordedTV;
    internal static Guid SavedGames;
    internal static Guid OpenSearch;
    internal static Guid SearchConnector;
    internal static Guid Searches;
    private static Dictionary`2<Guid, string> types;
    private static FolderTypes();
    internal static string GetFolderType(Guid typeId);
}
public class Microsoft.WindowsAPICodePack.Shell.GlassForm : Form {
    private EventHandler`1<AeroGlassCompositionChangedEventArgs> AeroGlassCompositionChanged;
    public static bool AeroGlassCompositionEnabled { get; public set; }
    public static void set_AeroGlassCompositionEnabled(bool value);
    public static bool get_AeroGlassCompositionEnabled();
    public void add_AeroGlassCompositionChanged(EventHandler`1<AeroGlassCompositionChangedEventArgs> value);
    public void remove_AeroGlassCompositionChanged(EventHandler`1<AeroGlassCompositionChangedEventArgs> value);
    public void SetAeroGlassTransparency();
    public void ExcludeControlFromAeroGlass(Control control);
    public void ResetAeroGlass();
    protected virtual void WndProc(Message& m);
    protected virtual void OnLoad(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
}
public class Microsoft.WindowsAPICodePack.Shell.GlassWindow : Window {
    private EventHandler`1<AeroGlassCompositionChangedEventArgs> AeroGlassCompositionChanged;
    private IntPtr windowHandle;
    public static bool AeroGlassCompositionEnabled { get; public set; }
    public static void set_AeroGlassCompositionEnabled(bool value);
    public static bool get_AeroGlassCompositionEnabled();
    public void add_AeroGlassCompositionChanged(EventHandler`1<AeroGlassCompositionChangedEventArgs> value);
    public void remove_AeroGlassCompositionChanged(EventHandler`1<AeroGlassCompositionChangedEventArgs> value);
    public void SetAeroGlassTransparency();
    public void ExcludeElementFromAeroGlass(FrameworkElement element);
    public void ResetAeroGlass();
    private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, Boolean& handled);
    protected virtual void OnSourceInitialized(EventArgs e);
}
[GuidAttribute("0FC988D4-C935-4b97-A973-46282EA175C8")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.ICondition {
    public abstract virtual void GetClassID(Guid& pClassID);
    public abstract virtual HResult IsDirty();
    public abstract virtual HResult Load(IStream stm);
    public abstract virtual HResult Save(IStream stm, bool fRemember);
    public abstract virtual HResult GetSizeMax(UInt64& cbSize);
    public abstract virtual HResult GetConditionType(SearchConditionType& pNodeType);
    public abstract virtual HResult GetSubConditions(Guid& riid, Object& ppv);
    public abstract virtual HResult GetComparisonInfo(String& ppszPropertyName, SearchConditionOperation& pcop, PropVariant ppropvar);
    public abstract virtual HResult GetValueType(String& ppszValueTypeName);
    public abstract virtual HResult GetValueNormalization(String& ppszNormalization);
    public abstract virtual HResult GetInputTerms(IRichChunk& ppPropertyTerm, IRichChunk& ppOperationTerm, IRichChunk& ppValueTerm);
    public abstract virtual HResult Clone(ICondition& ppc);
}
[GuidAttribute("A5EFE073-B16F-474f-9F3E-9F8B497A3E08")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IConditionFactory {
    public abstract virtual HResult MakeNot(ICondition pcSub, bool fSimplify, ICondition& ppcResult);
    public abstract virtual HResult MakeAndOr(SearchConditionType ct, IEnumUnknown peuSubs, bool fSimplify, ICondition& ppcResult);
    public abstract virtual HResult MakeLeaf(string pszPropertyName, SearchConditionOperation cop, string pszValueType, PropVariant ppropvar, IRichChunk richChunk1, IRichChunk richChunk2, IRichChunk richChunk3, bool fExpand, ICondition& ppcResult);
    public abstract virtual HResult Resolve();
}
public class Microsoft.WindowsAPICodePack.Shell.IconReference : ValueType {
    private string moduleName;
    private string referencePath;
    private static Char[] commaSeparator;
    [CompilerGeneratedAttribute]
private int <ResourceId>k__BackingField;
    public string ModuleName { get; public set; }
    public int ResourceId { get; public set; }
    public string ReferencePath { get; public set; }
    public IconReference(string moduleName, int resourceId);
    public IconReference(string refPath);
    private static IconReference();
    public string get_ModuleName();
    public void set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public int get_ResourceId();
    [CompilerGeneratedAttribute]
public void set_ResourceId(int value);
    public string get_ReferencePath();
    public void set_ReferencePath(string value);
    public static bool op_Equality(IconReference icon1, IconReference icon2);
    public static bool op_Inequality(IconReference icon1, IconReference icon2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("24264891-E80B-4fd3-B7CE-4FF2FAE8931F")]
internal interface Microsoft.WindowsAPICodePack.Shell.IEntity {
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("000214F2-0000-0000-C000-000000000046")]
internal interface Microsoft.WindowsAPICodePack.Shell.IEnumIDList {
    public abstract virtual HResult Next(UInt32 celt, IntPtr& rgelt, UInt32& pceltFetched);
    public abstract virtual HResult Skip(UInt32 celt);
    public abstract virtual HResult Reset();
    public abstract virtual HResult Clone(IEnumIDList& ppenum);
}
[GuidAttribute("00000100-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IEnumUnknown {
    public abstract virtual HResult Next(UInt32 requestedNumber, IntPtr& buffer, UInt32& fetchedNumber);
    public abstract virtual HResult Skip(UInt32 number);
    public abstract virtual HResult Reset();
    public abstract virtual HResult Clone(IEnumUnknown& result);
}
public interface Microsoft.WindowsAPICodePack.Shell.IKnownFolder {
    public string Path { get; }
    public FolderCategory Category { get; }
    public string CanonicalName { get; }
    public string Description { get; }
    public Guid ParentId { get; }
    public string RelativePath { get; }
    public string ParsingName { get; }
    public string Tooltip { get; }
    public string TooltipResourceId { get; }
    public string LocalizedName { get; }
    public string LocalizedNameResourceId { get; }
    public string Security { get; }
    public FileAttributes FileAttributes { get; }
    public DefinitionOptions DefinitionOptions { get; }
    public Guid FolderTypeId { get; }
    public string FolderType { get; }
    public Guid FolderId { get; }
    public bool PathExists { get; }
    public RedirectionCapability Redirection { get; }
    public abstract virtual string get_Path();
    public abstract virtual FolderCategory get_Category();
    public abstract virtual string get_CanonicalName();
    public abstract virtual string get_Description();
    public abstract virtual Guid get_ParentId();
    public abstract virtual string get_RelativePath();
    public abstract virtual string get_ParsingName();
    public abstract virtual string get_Tooltip();
    public abstract virtual string get_TooltipResourceId();
    public abstract virtual string get_LocalizedName();
    public abstract virtual string get_LocalizedNameResourceId();
    public abstract virtual string get_Security();
    public abstract virtual FileAttributes get_FileAttributes();
    public abstract virtual DefinitionOptions get_DefinitionOptions();
    public abstract virtual Guid get_FolderTypeId();
    public abstract virtual string get_FolderType();
    public abstract virtual Guid get_FolderId();
    public abstract virtual bool get_PathExists();
    public abstract virtual RedirectionCapability get_Redirection();
}
[GuidAttribute("8BE2D872-86AA-4d47-B776-32CCA40C7018")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IKnownFolderManager {
    public abstract virtual void FolderIdFromCsidl(int csidl, Guid& knownFolderID);
    public abstract virtual void FolderIdToCsidl(Guid id, Int32& csidl);
    public abstract virtual void GetFolderIds(IntPtr& folders, UInt32& count);
    public abstract virtual HResult GetFolder(Guid id, IKnownFolderNative& knownFolder);
    public abstract virtual void GetFolderByName(string canonicalName, IKnownFolderNative& knownFolder);
    public abstract virtual void RegisterFolder(Guid knownFolderGuid, NativeFolderDefinition& knownFolderDefinition);
    public abstract virtual void UnregisterFolder(Guid knownFolderGuid);
    public abstract virtual void FindFolderFromPath(string path, int mode, IKnownFolderNative& knownFolder);
    public abstract virtual HResult FindFolderFromIDList(IntPtr pidl, IKnownFolderNative& knownFolder);
    public abstract virtual void Redirect();
}
[GuidAttribute("3AA7AF7E-9B36-420c-A8E3-F77D4674A488")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IKnownFolderNative {
    public abstract virtual Guid GetId();
    public abstract virtual FolderCategory GetCategory();
    public abstract virtual HResult GetShellItem(int i, Guid& interfaceGuid, IShellItem2& shellItem);
    public abstract virtual string GetPath(int option);
    public abstract virtual void SetPath(int i, string path);
    public abstract virtual void GetIDList(int i, IntPtr& itemIdentifierListPointer);
    public abstract virtual Guid GetFolderType();
    public abstract virtual RedirectionCapability GetRedirectionCapabilities();
    public abstract virtual void GetFolderDefinition(NativeFolderDefinition& definition);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B4DB1657-70D7-485E-8E3E-6FCB5A5C1802")]
internal interface Microsoft.WindowsAPICodePack.Shell.IModalWindow {
    public abstract virtual int Show(IntPtr parent);
}
[GuidAttribute("A5EFE073-B16F-474f-9F3E-9F8B497A3E08")]
[CoClassAttribute("Microsoft.WindowsAPICodePack.Shell.ConditionFactoryCoClass")]
internal interface Microsoft.WindowsAPICodePack.Shell.INativeConditionFactory {
}
[CoClassAttribute("Microsoft.WindowsAPICodePack.Shell.QueryParserManagerCoClass")]
[GuidAttribute("A879E3C4-AF77-44fb-8F37-EBD1487CF920")]
internal interface Microsoft.WindowsAPICodePack.Shell.INativeQueryParserManager {
}
[GuidAttribute("a0ffbc28-5482-4366-be27-3e81e78e06c2")]
[CoClassAttribute("Microsoft.WindowsAPICodePack.Shell.SearchFolderItemFactoryCoClass")]
internal interface Microsoft.WindowsAPICodePack.Shell.INativeSearchFolderItemFactory {
}
[CoClassAttribute("Microsoft.WindowsAPICodePack.Shell.ShellLibraryCoClass")]
[GuidAttribute("11A66EFA-382E-451A-9234-1E0E12EF3085")]
internal interface Microsoft.WindowsAPICodePack.Shell.INativeShellLibrary {
}
public class Microsoft.WindowsAPICodePack.Shell.Interop.Message : ValueType {
    private IntPtr windowHandle;
    private UInt32 msg;
    private IntPtr wparam;
    private IntPtr lparam;
    private int time;
    private NativePoint point;
    public IntPtr WindowHandle { get; }
    public UInt32 Msg { get; }
    public IntPtr WParam { get; }
    public IntPtr LParam { get; }
    public int Time { get; }
    public NativePoint Point { get; }
    internal Message(IntPtr windowHandle, UInt32 msg, IntPtr wparam, IntPtr lparam, int time, NativePoint point);
    public IntPtr get_WindowHandle();
    public UInt32 get_Msg();
    public IntPtr get_WParam();
    public IntPtr get_LParam();
    public int get_Time();
    public NativePoint get_Point();
    public static bool op_Equality(Message first, Message second);
    public static bool op_Inequality(Message first, Message second);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class Microsoft.WindowsAPICodePack.Shell.Interop.ShellObjectWatcherNativeMethods : object {
    public static HResult CreateBindCtx(int reserved, IBindCtx& bindCtx);
    public static UInt32 RegisterClassEx(WindowClassEx& windowClass);
    public static IntPtr CreateWindowEx(int extendedStyle, string className, string windowName, int style, int x, int y, int width, int height, IntPtr parentHandle, IntPtr menuHandle, IntPtr instanceHandle, IntPtr additionalData);
    public static bool GetMessage(Message& message, IntPtr windowHandle, UInt32 filterMinMessage, UInt32 filterMaxMessage);
    public static int DefWindowProc(IntPtr hwnd, UInt32 msg, IntPtr wparam, IntPtr lparam);
    public static void DispatchMessage(Message& message);
}
internal class Microsoft.WindowsAPICodePack.Shell.Interop.WindowClassEx : ValueType {
    internal UInt32 Size;
    internal UInt32 Style;
    internal WndProcDelegate WndProc;
    internal int ExtraClassBytes;
    internal int ExtraWindowBytes;
    internal IntPtr InstanceHandle;
    internal IntPtr IconHandle;
    internal IntPtr CursorHandle;
    internal IntPtr BackgroundBrushHandle;
    internal string MenuName;
    internal string ClassName;
    internal IntPtr SmallIconHandle;
}
[ExtensionAttribute]
internal static class Microsoft.WindowsAPICodePack.Shell.IntPtrExtensions : object {
    [ExtensionAttribute]
public static T MarshalAs(IntPtr ptr);
}
[GuidAttribute("00000109-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IPersistStream {
    public abstract virtual void GetClassID(Guid& pClassID);
    public abstract virtual HResult IsDirty();
    public abstract virtual HResult Load(IStream stm);
    public abstract virtual HResult Save(IStream stm, bool fRemember);
    public abstract virtual HResult GetSizeMax(UInt64& cbSize);
}
[GuidAttribute("2EBDEE67-3505-43f8-9946-EA44ABC8E5B0")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IQueryParser {
    public abstract virtual HResult Parse(string pszInputString, IEnumUnknown pCustomProperties, IQuerySolution& ppSolution);
    public abstract virtual HResult SetOption(StructuredQuerySingleOption option, PropVariant pOptionValue);
    public abstract virtual HResult GetOption(StructuredQuerySingleOption option, PropVariant pOptionValue);
    public abstract virtual HResult SetMultiOption(StructuredQueryMultipleOption option, string pszOptionKey, PropVariant pOptionValue);
    public abstract virtual HResult GetSchemaProvider(IntPtr& ppSchemaProvider);
    public abstract virtual HResult RestateToString(ICondition pCondition, bool fUseEnglish, String& ppszQueryString);
    public abstract virtual HResult ParsePropertyValue(string pszPropertyName, string pszInputString, IQuerySolution& ppSolution);
    public abstract virtual HResult RestatePropertyValueToString(ICondition pCondition, bool fUseEnglish, String& ppszPropertyName, String& ppszQueryString);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("A879E3C4-AF77-44fb-8F37-EBD1487CF920")]
internal interface Microsoft.WindowsAPICodePack.Shell.IQueryParserManager {
    public abstract virtual HResult CreateLoadedParser(string pszCatalog, ushort langidForKeywords, Guid& riid, IQueryParser& ppQueryParser);
    public abstract virtual HResult InitializeOptions(bool fUnderstandNQS, bool fAutoWildCard, IQueryParser pQueryParser);
    public abstract virtual HResult SetOption(QueryParserManagerOption option, PropVariant pOptionValue);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("D6EBC66B-8921-4193-AFDD-A1789FB7FF57")]
internal interface Microsoft.WindowsAPICodePack.Shell.IQuerySolution {
    public abstract virtual HResult MakeNot(ICondition pcSub, bool fSimplify, ICondition& ppcResult);
    public abstract virtual HResult MakeAndOr(SearchConditionType ct, IEnumUnknown peuSubs, bool fSimplify, ICondition& ppcResult);
    public abstract virtual HResult MakeLeaf(string pszPropertyName, SearchConditionOperation cop, string pszValueType, PropVariant ppropvar, IRichChunk richChunk1, IRichChunk richChunk2, IRichChunk richChunk3, bool fExpand, ICondition& ppcResult);
    public abstract virtual HResult Resolve();
    public abstract virtual HResult GetQuery(ICondition& ppQueryNode, IEntity& ppMainType);
    public abstract virtual HResult GetErrors(Guid& riid, IntPtr& ppParseErrors);
    public abstract virtual HResult GetLexicalData(String& ppszInputString, IntPtr& ppTokens, UInt32& plcid, IntPtr& ppWordBreaker);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("4FDEF69C-DBC9-454e-9910-B34F3C64B510")]
internal interface Microsoft.WindowsAPICodePack.Shell.IRichChunk {
    public abstract virtual HResult GetData();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("a0ffbc28-5482-4366-be27-3e81e78e06c2")]
internal interface Microsoft.WindowsAPICodePack.Shell.ISearchFolderItemFactory {
    public abstract virtual HResult SetDisplayName(string pszDisplayName);
    public abstract virtual HResult SetFolderTypeID(Guid ftid);
    public abstract virtual HResult SetFolderLogicalViewMode(FolderLogicalViewMode flvm);
    public abstract virtual HResult SetIconSize(int iIconSize);
    public abstract virtual HResult SetVisibleColumns(UInt32 cVisibleColumns, PropertyKey[] rgKey);
    public abstract virtual HResult SetSortColumns(UInt32 cSortColumns, SortColumn[] rgSortColumns);
    public abstract virtual HResult SetGroupColumn(PropertyKey& keyGroup);
    public abstract virtual HResult SetStacks(UInt32 cStackKeys, PropertyKey[] rgStackKeys);
    public abstract virtual HResult SetScope(IShellItemArray ppv);
    public abstract virtual HResult SetCondition(ICondition pCondition);
    public abstract virtual int GetShellItem(Guid& riid, IShellItem& ppv);
    public abstract virtual HResult GetIDList(IntPtr ppidl);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("091162a4-bc96-411f-aae8-c5122cd03363")]
internal interface Microsoft.WindowsAPICodePack.Shell.ISharedBitmap {
    public abstract virtual void GetSharedBitmap(IntPtr& phbm);
    public abstract virtual void GetSize(Size& pSize);
    public abstract virtual void GetFormat(ThumbnailAlphaType& pat);
    public abstract virtual void InitializeBitmap(IntPtr hbm, ThumbnailAlphaType wtsAT);
    public abstract virtual void Detach(IntPtr& phbm);
}
[GuidAttribute("000214E6-0000-0000-C000-000000000046")]
[ComConversionLossAttribute]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellFolder {
    public abstract virtual void ParseDisplayName(IntPtr hwnd, IBindCtx pbc, string pszDisplayName, UInt32& pchEaten, IntPtr ppidl, UInt32& pdwAttributes);
    public abstract virtual HResult EnumObjects(IntPtr hwnd, ShellFolderEnumerationOptions grfFlags, IEnumIDList& ppenumIDList);
    public abstract virtual HResult BindToObject(IntPtr pidl, IntPtr pbc, Guid& riid, IShellFolder& ppv);
    public abstract virtual void BindToStorage(IntPtr& pidl, IBindCtx pbc, Guid& riid, IntPtr& ppv);
    public abstract virtual void CompareIDs(IntPtr lParam, IntPtr& pidl1, IntPtr& pidl2);
    public abstract virtual void CreateViewObject(IntPtr hwndOwner, Guid& riid, IntPtr& ppv);
    public abstract virtual void GetAttributesOf(UInt32 cidl, IntPtr apidl, UInt32& rgfInOut);
    public abstract virtual void GetUIObjectOf(IntPtr hwndOwner, UInt32 cidl, IntPtr apidl, Guid& riid, UInt32& rgfReserved, IntPtr& ppv);
    public abstract virtual void GetDisplayNameOf(IntPtr& pidl, UInt32 uFlags, IntPtr& pName);
    public abstract virtual void SetNameOf(IntPtr hwnd, IntPtr& pidl, string pszName, UInt32 uFlags, IntPtr ppidlOut);
}
[GuidAttribute("93F2F68C-1D1B-11D3-A30E-00C04F79ABD1")]
[InterfaceTypeAttribute("1")]
[ComConversionLossAttribute]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellFolder2 {
    public abstract virtual void ParseDisplayName(IntPtr hwnd, IBindCtx pbc, string pszDisplayName, UInt32& pchEaten, IntPtr ppidl, UInt32& pdwAttributes);
    public abstract virtual void EnumObjects(IntPtr hwnd, ShellFolderEnumerationOptions grfFlags, IEnumIDList& ppenumIDList);
    public abstract virtual void BindToObject(IntPtr pidl, IntPtr pbc, Guid& riid, IShellFolder& ppv);
    public abstract virtual void BindToStorage(IntPtr& pidl, IBindCtx pbc, Guid& riid, IntPtr& ppv);
    public abstract virtual void CompareIDs(IntPtr lParam, IntPtr& pidl1, IntPtr& pidl2);
    public abstract virtual void CreateViewObject(IntPtr hwndOwner, Guid& riid, IntPtr& ppv);
    public abstract virtual void GetAttributesOf(UInt32 cidl, IntPtr apidl, UInt32& rgfInOut);
    public abstract virtual void GetUIObjectOf(IntPtr hwndOwner, UInt32 cidl, IntPtr apidl, Guid& riid, UInt32& rgfReserved, IntPtr& ppv);
    public abstract virtual void GetDisplayNameOf(IntPtr& pidl, UInt32 uFlags, IntPtr& pName);
    public abstract virtual void SetNameOf(IntPtr hwnd, IntPtr& pidl, string pszName, UInt32 uFlags, IntPtr ppidlOut);
    public abstract virtual void GetDefaultSearchGUID(Guid& pguid);
    public abstract virtual void EnumSearches(IntPtr& ppenum);
    public abstract virtual void GetDefaultColumn(UInt32 dwRes, UInt32& pSort, UInt32& pDisplay);
    public abstract virtual void GetDefaultColumnState(UInt32 iColumn, UInt32& pcsFlags);
    public abstract virtual void GetDetailsEx(IntPtr& pidl, PropertyKey& pscid, Object& pv);
    public abstract virtual void GetDetailsOf(IntPtr& pidl, UInt32 iColumn, IntPtr& psd);
    public abstract virtual void MapColumnToSCID(UInt32 iColumn, PropertyKey& pscid);
}
[GuidAttribute("43826D1E-E718-42EE-BC55-A1E261C37BFE")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellItem {
    public abstract virtual HResult BindToHandler(IntPtr pbc, Guid& bhid, Guid& riid, IShellFolder& ppv);
    public abstract virtual void GetParent(IShellItem& ppsi);
    public abstract virtual HResult GetDisplayName(ShellItemDesignNameOptions sigdnName, IntPtr& ppszName);
    public abstract virtual void GetAttributes(ShellFileGetAttributesOptions sfgaoMask, ShellFileGetAttributesOptions& psfgaoAttribs);
    public abstract virtual HResult Compare(IShellItem psi, SICHINTF hint, Int32& piOrder);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("7E9FB0D3-919F-4307-AB2E-9B1860310C93")]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellItem2 {
    public abstract virtual HResult BindToHandler(IntPtr pbc, Guid& bhid, Guid& riid, IShellFolder& ppv);
    public abstract virtual HResult GetParent(IShellItem& ppsi);
    public abstract virtual HResult GetDisplayName(ShellItemDesignNameOptions sigdnName, String& ppszName);
    public abstract virtual void GetAttributes(ShellFileGetAttributesOptions sfgaoMask, ShellFileGetAttributesOptions& psfgaoAttribs);
    public abstract virtual void Compare(IShellItem psi, UInt32 hint, Int32& piOrder);
    public abstract virtual int GetPropertyStore(GetPropertyStoreOptions Flags, Guid& riid, IPropertyStore& ppv);
    public abstract virtual void GetPropertyStoreWithCreateObject(GetPropertyStoreOptions Flags, object punkCreateObject, Guid& riid, IntPtr& ppv);
    public abstract virtual void GetPropertyStoreForKeys(PropertyKey& rgKeys, UInt32 cKeys, GetPropertyStoreOptions Flags, Guid& riid, IPropertyStore& ppv);
    public abstract virtual void GetPropertyDescriptionList(PropertyKey& keyType, Guid& riid, IntPtr& ppv);
    public abstract virtual HResult Update(IBindCtx pbc);
    public abstract virtual void GetProperty(PropertyKey& key, PropVariant ppropvar);
    public abstract virtual void GetCLSID(PropertyKey& key, Guid& pclsid);
    public abstract virtual void GetFileTime(PropertyKey& key, FILETIME& pft);
    public abstract virtual void GetInt32(PropertyKey& key, Int32& pi);
    public abstract virtual HResult GetString(PropertyKey& key, String& ppsz);
    public abstract virtual void GetUInt32(PropertyKey& key, UInt32& pui);
    public abstract virtual void GetUInt64(PropertyKey& key, UInt64& pull);
    public abstract virtual void GetBool(PropertyKey& key, Int32& pf);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B63EA76D-1F85-456F-A19C-48159EFA858B")]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellItemArray {
    public abstract virtual HResult BindToHandler(IntPtr pbc, Guid& rbhid, Guid& riid, IntPtr& ppvOut);
    public abstract virtual HResult GetPropertyStore(int Flags, Guid& riid, IntPtr& ppv);
    public abstract virtual HResult GetPropertyDescriptionList(PropertyKey& keyType, Guid& riid, IntPtr& ppv);
    public abstract virtual HResult GetAttributes(ShellItemAttributeOptions dwAttribFlags, ShellFileGetAttributesOptions sfgaoMask, ShellFileGetAttributesOptions& psfgaoAttribs);
    public abstract virtual HResult GetCount(UInt32& pdwNumItems);
    public abstract virtual HResult GetItemAt(UInt32 dwIndex, IShellItem& ppsi);
    public abstract virtual HResult EnumItems(IntPtr& ppenumShellItems);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("bcc18b79-ba16-442f-80c4-8a59c30c463b")]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellItemImageFactory {
    public abstract virtual HResult GetImage(Size size, SIIGBF flags, IntPtr& phbm);
}
[GuidAttribute("11A66EFA-382E-451A-9234-1E0E12EF3085")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellLibrary {
    public abstract virtual HResult LoadLibraryFromItem(IShellItem library, AccessModes grfMode);
    public abstract virtual void LoadLibraryFromKnownFolder(Guid& knownfidLibrary, AccessModes grfMode);
    public abstract virtual void AddFolder(IShellItem location);
    public abstract virtual void RemoveFolder(IShellItem location);
    public abstract virtual HResult GetFolders(LibraryFolderFilter lff, Guid& riid, IShellItemArray& ppv);
    public abstract virtual void ResolveFolder(IShellItem folderToResolve, UInt32 timeout, Guid& riid, IShellItem& ppv);
    public abstract virtual void GetDefaultSaveFolder(DefaultSaveFolderType dsft, Guid& riid, IShellItem& ppv);
    public abstract virtual void SetDefaultSaveFolder(DefaultSaveFolderType dsft, IShellItem si);
    public abstract virtual void GetOptions(LibraryOptions& lofOptions);
    public abstract virtual void SetOptions(LibraryOptions lofMask, LibraryOptions lofOptions);
    public abstract virtual void GetFolderType(Guid& ftid);
    public abstract virtual void SetFolderType(Guid& ftid);
    public abstract virtual void GetIcon(String& icon);
    public abstract virtual void SetIcon(string icon);
    public abstract virtual void Commit();
    public abstract virtual void Save(IShellItem folderToSaveIn, string libraryName, LibrarySaveOptions lsf, IShellItem2& savedTo);
    public abstract virtual void SaveInKnownFolder(Guid& kfidToSaveIn, string libraryName, LibrarySaveOptions lsf, IShellItem2& savedTo);
}
[GuidAttribute("000214F9-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IShellLinkW {
    public abstract virtual void GetPath(StringBuilder pszFile, int cchMaxPath, IntPtr pfd, UInt32 fFlags);
    public abstract virtual void GetIDList(IntPtr& ppidl);
    public abstract virtual void SetIDList(IntPtr pidl);
    public abstract virtual void GetDescription(StringBuilder pszFile, int cchMaxName);
    public abstract virtual void SetDescription(string pszName);
    public abstract virtual void GetWorkingDirectory(StringBuilder pszDir, int cchMaxPath);
    public abstract virtual void SetWorkingDirectory(string pszDir);
    public abstract virtual void GetArguments(StringBuilder pszArgs, int cchMaxPath);
    public abstract virtual void SetArguments(string pszArgs);
    public abstract virtual void GetHotKey(Int16& wHotKey);
    public abstract virtual void SetHotKey(short wHotKey);
    public abstract virtual void GetShowCmd(UInt32& iShowCmd);
    public abstract virtual void SetShowCmd(UInt32 iShowCmd);
    public abstract virtual void GetIconLocation(StringBuilder& pszIconPath, int cchIconPath, Int32& iIcon);
    public abstract virtual void SetIconLocation(string pszIconPath, int iIcon);
    public abstract virtual void SetRelativePath(string pszPathRel, UInt32 dwReserved);
    public abstract virtual void Resolve(IntPtr hwnd, UInt32 fFlags);
    public abstract virtual void SetPath(string pszFile);
}
[GuidAttribute("F676C15D-596A-4ce2-8234-33996F445DB1")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.IThumbnailCache {
    public abstract virtual void GetThumbnail(IShellItem pShellItem, UInt32 cxyRequestedThumbSize, ThumbnailOptions flags, ISharedBitmap& ppvThumb, ThumbnailCacheOptions& pOutFlags, ThumbnailId pThumbnailID);
    public abstract virtual void GetThumbnailByID(ThumbnailId thumbnailID, UInt32 cxyRequestedThumbSize, ISharedBitmap& ppvThumb, ThumbnailCacheOptions& pOutFlags);
}
public static class Microsoft.WindowsAPICodePack.Shell.KnownFolderHelper : object {
    internal static IKnownFolderNative FromPIDL(IntPtr pidl);
    public static IKnownFolder FromKnownFolderId(Guid knownFolderId);
    internal static IKnownFolder FromKnownFolderIdInternal(Guid knownFolderId);
    private static IKnownFolder GetKnownFolder(IKnownFolderNative knownFolderNative);
    public static IKnownFolder FromCanonicalName(string canonicalName);
    public static IKnownFolder FromPath(string path);
    public static IKnownFolder FromParsingName(string parsingName);
}
[GuidAttribute("4df0c730-df9d-4ae3-9153-aa6b82e9795a")]
internal class Microsoft.WindowsAPICodePack.Shell.KnownFolderManagerClass : object {
    public virtual void FolderIdFromCsidl(int csidl, Guid& knownFolderID);
    public virtual void FolderIdToCsidl(Guid id, Int32& csidl);
    public virtual void GetFolderIds(IntPtr& folders, UInt32& count);
    public virtual HResult GetFolder(Guid id, IKnownFolderNative& knownFolder);
    public virtual void GetFolderByName(string canonicalName, IKnownFolderNative& knownFolder);
    public virtual void RegisterFolder(Guid knownFolderGuid, NativeFolderDefinition& knownFolderDefinition);
    public virtual void UnregisterFolder(Guid knownFolderGuid);
    public virtual void FindFolderFromPath(string path, int mode, IKnownFolderNative& knownFolder);
    public virtual HResult FindFolderFromIDList(IntPtr pidl, IKnownFolderNative& knownFolder);
    public virtual void Redirect();
}
public static class Microsoft.WindowsAPICodePack.Shell.KnownFolders : object {
    public static ICollection`1<IKnownFolder> All { get; }
    public static IKnownFolder Computer { get; }
    public static IKnownFolder Conflict { get; }
    public static IKnownFolder ControlPanel { get; }
    public static IKnownFolder Desktop { get; }
    public static IKnownFolder Internet { get; }
    public static IKnownFolder Network { get; }
    public static IKnownFolder Printers { get; }
    public static IKnownFolder SyncManager { get; }
    public static IKnownFolder Connections { get; }
    public static IKnownFolder SyncSetup { get; }
    public static IKnownFolder SyncResults { get; }
    public static IKnownFolder RecycleBin { get; }
    public static IKnownFolder Fonts { get; }
    public static IKnownFolder Startup { get; }
    public static IKnownFolder Programs { get; }
    public static IKnownFolder StartMenu { get; }
    public static IKnownFolder Recent { get; }
    public static IKnownFolder SendTo { get; }
    public static IKnownFolder Documents { get; }
    public static IKnownFolder Favorites { get; }
    public static IKnownFolder NetHood { get; }
    public static IKnownFolder PrintHood { get; }
    public static IKnownFolder Templates { get; }
    public static IKnownFolder CommonStartup { get; }
    public static IKnownFolder CommonPrograms { get; }
    public static IKnownFolder CommonStartMenu { get; }
    public static IKnownFolder PublicDesktop { get; }
    public static IKnownFolder ProgramData { get; }
    public static IKnownFolder CommonTemplates { get; }
    public static IKnownFolder PublicDocuments { get; }
    public static IKnownFolder RoamingAppData { get; }
    public static IKnownFolder LocalAppData { get; }
    public static IKnownFolder LocalAppDataLow { get; }
    public static IKnownFolder InternetCache { get; }
    public static IKnownFolder Cookies { get; }
    public static IKnownFolder History { get; }
    public static IKnownFolder System { get; }
    public static IKnownFolder SystemX86 { get; }
    public static IKnownFolder Windows { get; }
    public static IKnownFolder Profile { get; }
    public static IKnownFolder Pictures { get; }
    public static IKnownFolder ProgramFilesX86 { get; }
    public static IKnownFolder ProgramFilesCommonX86 { get; }
    public static IKnownFolder ProgramFilesX64 { get; }
    public static IKnownFolder ProgramFilesCommonX64 { get; }
    public static IKnownFolder ProgramFiles { get; }
    public static IKnownFolder ProgramFilesCommon { get; }
    public static IKnownFolder AdminTools { get; }
    public static IKnownFolder CommonAdminTools { get; }
    public static IKnownFolder Music { get; }
    public static IKnownFolder Videos { get; }
    public static IKnownFolder PublicPictures { get; }
    public static IKnownFolder PublicMusic { get; }
    public static IKnownFolder PublicVideos { get; }
    public static IKnownFolder ResourceDir { get; }
    public static IKnownFolder LocalizedResourcesDir { get; }
    public static IKnownFolder CommonOemLinks { get; }
    public static IKnownFolder CDBurning { get; }
    public static IKnownFolder UserProfiles { get; }
    public static IKnownFolder Playlists { get; }
    public static IKnownFolder SamplePlaylists { get; }
    public static IKnownFolder SampleMusic { get; }
    public static IKnownFolder SamplePictures { get; }
    public static IKnownFolder SampleVideos { get; }
    public static IKnownFolder PhotoAlbums { get; }
    public static IKnownFolder Public { get; }
    public static IKnownFolder ChangeRemovePrograms { get; }
    public static IKnownFolder AppUpdates { get; }
    public static IKnownFolder AddNewPrograms { get; }
    public static IKnownFolder Downloads { get; }
    public static IKnownFolder PublicDownloads { get; }
    public static IKnownFolder SavedSearches { get; }
    public static IKnownFolder QuickLaunch { get; }
    public static IKnownFolder Contacts { get; }
    public static IKnownFolder SidebarParts { get; }
    public static IKnownFolder SidebarDefaultParts { get; }
    public static IKnownFolder TreeProperties { get; }
    public static IKnownFolder PublicGameTasks { get; }
    public static IKnownFolder GameTasks { get; }
    public static IKnownFolder SavedGames { get; }
    public static IKnownFolder Games { get; }
    public static IKnownFolder RecordedTV { get; }
    public static IKnownFolder SearchMapi { get; }
    public static IKnownFolder SearchCsc { get; }
    public static IKnownFolder Links { get; }
    public static IKnownFolder UsersFiles { get; }
    public static IKnownFolder SearchHome { get; }
    public static IKnownFolder OriginalImages { get; }
    public static IKnownFolder UserProgramFiles { get; }
    public static IKnownFolder UserProgramFilesCommon { get; }
    public static IKnownFolder Ringtones { get; }
    public static IKnownFolder PublicRingtones { get; }
    public static IKnownFolder UsersLibraries { get; }
    public static IKnownFolder DocumentsLibrary { get; }
    public static IKnownFolder MusicLibrary { get; }
    public static IKnownFolder PicturesLibrary { get; }
    public static IKnownFolder VideosLibrary { get; }
    public static IKnownFolder RecordedTVLibrary { get; }
    public static IKnownFolder OtherUsers { get; }
    public static IKnownFolder DeviceMetadataStore { get; }
    public static IKnownFolder Libraries { get; }
    public static IKnownFolder UserPinned { get; }
    public static IKnownFolder ImplicitAppShortcuts { get; }
    public static ICollection`1<IKnownFolder> get_All();
    private static ReadOnlyCollection`1<IKnownFolder> GetAllFolders();
    private static IKnownFolder GetKnownFolder(Guid guid);
    public static IKnownFolder get_Computer();
    public static IKnownFolder get_Conflict();
    public static IKnownFolder get_ControlPanel();
    public static IKnownFolder get_Desktop();
    public static IKnownFolder get_Internet();
    public static IKnownFolder get_Network();
    public static IKnownFolder get_Printers();
    public static IKnownFolder get_SyncManager();
    public static IKnownFolder get_Connections();
    public static IKnownFolder get_SyncSetup();
    public static IKnownFolder get_SyncResults();
    public static IKnownFolder get_RecycleBin();
    public static IKnownFolder get_Fonts();
    public static IKnownFolder get_Startup();
    public static IKnownFolder get_Programs();
    public static IKnownFolder get_StartMenu();
    public static IKnownFolder get_Recent();
    public static IKnownFolder get_SendTo();
    public static IKnownFolder get_Documents();
    public static IKnownFolder get_Favorites();
    public static IKnownFolder get_NetHood();
    public static IKnownFolder get_PrintHood();
    public static IKnownFolder get_Templates();
    public static IKnownFolder get_CommonStartup();
    public static IKnownFolder get_CommonPrograms();
    public static IKnownFolder get_CommonStartMenu();
    public static IKnownFolder get_PublicDesktop();
    public static IKnownFolder get_ProgramData();
    public static IKnownFolder get_CommonTemplates();
    public static IKnownFolder get_PublicDocuments();
    public static IKnownFolder get_RoamingAppData();
    public static IKnownFolder get_LocalAppData();
    public static IKnownFolder get_LocalAppDataLow();
    public static IKnownFolder get_InternetCache();
    public static IKnownFolder get_Cookies();
    public static IKnownFolder get_History();
    public static IKnownFolder get_System();
    public static IKnownFolder get_SystemX86();
    public static IKnownFolder get_Windows();
    public static IKnownFolder get_Profile();
    public static IKnownFolder get_Pictures();
    public static IKnownFolder get_ProgramFilesX86();
    public static IKnownFolder get_ProgramFilesCommonX86();
    public static IKnownFolder get_ProgramFilesX64();
    public static IKnownFolder get_ProgramFilesCommonX64();
    public static IKnownFolder get_ProgramFiles();
    public static IKnownFolder get_ProgramFilesCommon();
    public static IKnownFolder get_AdminTools();
    public static IKnownFolder get_CommonAdminTools();
    public static IKnownFolder get_Music();
    public static IKnownFolder get_Videos();
    public static IKnownFolder get_PublicPictures();
    public static IKnownFolder get_PublicMusic();
    public static IKnownFolder get_PublicVideos();
    public static IKnownFolder get_ResourceDir();
    public static IKnownFolder get_LocalizedResourcesDir();
    public static IKnownFolder get_CommonOemLinks();
    public static IKnownFolder get_CDBurning();
    public static IKnownFolder get_UserProfiles();
    public static IKnownFolder get_Playlists();
    public static IKnownFolder get_SamplePlaylists();
    public static IKnownFolder get_SampleMusic();
    public static IKnownFolder get_SamplePictures();
    public static IKnownFolder get_SampleVideos();
    public static IKnownFolder get_PhotoAlbums();
    public static IKnownFolder get_Public();
    public static IKnownFolder get_ChangeRemovePrograms();
    public static IKnownFolder get_AppUpdates();
    public static IKnownFolder get_AddNewPrograms();
    public static IKnownFolder get_Downloads();
    public static IKnownFolder get_PublicDownloads();
    public static IKnownFolder get_SavedSearches();
    public static IKnownFolder get_QuickLaunch();
    public static IKnownFolder get_Contacts();
    public static IKnownFolder get_SidebarParts();
    public static IKnownFolder get_SidebarDefaultParts();
    public static IKnownFolder get_TreeProperties();
    public static IKnownFolder get_PublicGameTasks();
    public static IKnownFolder get_GameTasks();
    public static IKnownFolder get_SavedGames();
    public static IKnownFolder get_Games();
    public static IKnownFolder get_RecordedTV();
    public static IKnownFolder get_SearchMapi();
    public static IKnownFolder get_SearchCsc();
    public static IKnownFolder get_Links();
    public static IKnownFolder get_UsersFiles();
    public static IKnownFolder get_SearchHome();
    public static IKnownFolder get_OriginalImages();
    public static IKnownFolder get_UserProgramFiles();
    public static IKnownFolder get_UserProgramFilesCommon();
    public static IKnownFolder get_Ringtones();
    public static IKnownFolder get_PublicRingtones();
    public static IKnownFolder get_UsersLibraries();
    public static IKnownFolder get_DocumentsLibrary();
    public static IKnownFolder get_MusicLibrary();
    public static IKnownFolder get_PicturesLibrary();
    public static IKnownFolder get_VideosLibrary();
    public static IKnownFolder get_RecordedTVLibrary();
    public static IKnownFolder get_OtherUsers();
    public static IKnownFolder get_DeviceMetadataStore();
    public static IKnownFolder get_Libraries();
    public static IKnownFolder get_UserPinned();
    public static IKnownFolder get_ImplicitAppShortcuts();
}
internal static class Microsoft.WindowsAPICodePack.Shell.KnownFoldersCLSIDGuid : object {
    internal static string KnownFolderManager;
}
internal class Microsoft.WindowsAPICodePack.Shell.KnownFolderSettings : object {
    private FolderProperties knownFolderProperties;
    public string Path { get; }
    public FolderCategory Category { get; }
    public string CanonicalName { get; }
    public string Description { get; }
    public Guid ParentId { get; }
    public string RelativePath { get; }
    public string Tooltip { get; }
    public string TooltipResourceId { get; }
    public string LocalizedName { get; }
    public string LocalizedNameResourceId { get; }
    public string Security { get; }
    public FileAttributes FileAttributes { get; }
    public DefinitionOptions DefinitionOptions { get; }
    public Guid FolderTypeId { get; }
    public string FolderType { get; }
    public Guid FolderId { get; }
    public bool PathExists { get; }
    public RedirectionCapability Redirection { get; }
    internal KnownFolderSettings(IKnownFolderNative knownFolderNative);
    private void GetFolderProperties(IKnownFolderNative knownFolderNative);
    private string GetPath(Boolean& fileExists, IKnownFolderNative knownFolderNative);
    public string get_Path();
    public FolderCategory get_Category();
    public string get_CanonicalName();
    public string get_Description();
    public Guid get_ParentId();
    public string get_RelativePath();
    public string get_Tooltip();
    public string get_TooltipResourceId();
    public string get_LocalizedName();
    public string get_LocalizedNameResourceId();
    public string get_Security();
    public FileAttributes get_FileAttributes();
    public DefinitionOptions get_DefinitionOptions();
    public Guid get_FolderTypeId();
    public string get_FolderType();
    public Guid get_FolderId();
    public bool get_PathExists();
    public RedirectionCapability get_Redirection();
}
internal static class Microsoft.WindowsAPICodePack.Shell.KnownFoldersIIDGuid : object {
    internal static string IKnownFolder;
    internal static string IKnownFolderManager;
}
internal static class Microsoft.WindowsAPICodePack.Shell.KnownFoldersKFIDGuid : object {
    internal static string ComputerFolder;
    internal static string Favorites;
    internal static string Documents;
    internal static string Profile;
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class Microsoft.WindowsAPICodePack.Shell.KnownFoldersSafeNativeMethods : object {
}
public enum Microsoft.WindowsAPICodePack.Shell.LibraryFolderType : Enum {
    public int value__;
    public static LibraryFolderType Generic;
    public static LibraryFolderType Documents;
    public static LibraryFolderType Music;
    public static LibraryFolderType Pictures;
    public static LibraryFolderType Videos;
}
internal class Microsoft.WindowsAPICodePack.Shell.MessageListener : object {
    public static UInt32 CreateWindowMessage;
    public static UInt32 DestroyWindowMessage;
    public static UInt32 BaseUserMessage;
    private static string MessageWindowClassName;
    private static object _threadlock;
    private static UInt32 _atom;
    private static Thread _windowThread;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _running;
    private static WndProcDelegate wndProc;
    private static Dictionary`2<IntPtr, MessageListener> _listeners;
    private static IntPtr _firstWindowHandle;
    private static object _crossThreadWindowLock;
    private static IntPtr _tempHandle;
    private EventHandler`1<WindowMessageEventArgs> MessageReceived;
    [CompilerGeneratedAttribute]
private IntPtr <WindowHandle>k__BackingField;
    public IntPtr WindowHandle { get; private set; }
    public static bool Running { get; }
    private static MessageListener();
    public void add_MessageReceived(EventHandler`1<WindowMessageEventArgs> value);
    public void remove_MessageReceived(EventHandler`1<WindowMessageEventArgs> value);
    private void CrossThreadCreateWindow();
    private static void RegisterWindowClass();
    private static IntPtr CreateWindow();
    private void ThreadMethod();
    private static int WndProc(IntPtr hwnd, UInt32 msg, IntPtr wparam, IntPtr lparam);
    [CompilerGeneratedAttribute]
public IntPtr get_WindowHandle();
    [CompilerGeneratedAttribute]
private void set_WindowHandle(IntPtr value);
    public static bool get_Running();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class Microsoft.WindowsAPICodePack.Shell.MessageListenerFilter : object {
    private static object _registerLock;
    private static List`1<RegisteredListener> _packages;
    private static MessageListenerFilter();
    public static MessageListenerFilterRegistrationResult Register(Action`1<WindowMessageEventArgs> callback);
    public static void Unregister(IntPtr listenerHandle, UInt32 message);
}
internal class Microsoft.WindowsAPICodePack.Shell.MessageListenerFilterRegistrationResult : object {
    [CompilerGeneratedAttribute]
private IntPtr <WindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private UInt32 <Message>k__BackingField;
    public IntPtr WindowHandle { get; private set; }
    public UInt32 Message { get; private set; }
    internal MessageListenerFilterRegistrationResult(IntPtr handle, UInt32 msg);
    [CompilerGeneratedAttribute]
public IntPtr get_WindowHandle();
    [CompilerGeneratedAttribute]
private void set_WindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public UInt32 get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(UInt32 value);
}
public class Microsoft.WindowsAPICodePack.Shell.NativePoint : ValueType {
    [CompilerGeneratedAttribute]
private int <X>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Y>k__BackingField;
    public int X { get; public set; }
    public int Y { get; public set; }
    public NativePoint(int x, int y);
    [CompilerGeneratedAttribute]
public int get_X();
    [CompilerGeneratedAttribute]
public void set_X(int value);
    [CompilerGeneratedAttribute]
public int get_Y();
    [CompilerGeneratedAttribute]
public void set_Y(int value);
    public static bool op_Equality(NativePoint first, NativePoint second);
    public static bool op_Inequality(NativePoint first, NativePoint second);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.WindowsAPICodePack.Shell.NativeRect : ValueType {
    [CompilerGeneratedAttribute]
private int <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Right>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Bottom>k__BackingField;
    public int Left { get; public set; }
    public int Top { get; public set; }
    public int Right { get; public set; }
    public int Bottom { get; public set; }
    public NativeRect(int left, int top, int right, int bottom);
    [CompilerGeneratedAttribute]
public int get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(int value);
    [CompilerGeneratedAttribute]
public int get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(int value);
    [CompilerGeneratedAttribute]
public int get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(int value);
    [CompilerGeneratedAttribute]
public int get_Bottom();
    [CompilerGeneratedAttribute]
public void set_Bottom(int value);
    public static bool op_Equality(NativeRect first, NativeRect second);
    public static bool op_Inequality(NativeRect first, NativeRect second);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.WindowsAPICodePack.Shell.NonFileSystemKnownFolder : ShellNonFileSystemFolder {
    private IKnownFolderNative knownFolderNative;
    private KnownFolderSettings knownFolderSettings;
    private KnownFolderSettings KnownFolderSettings { get; }
    public string Path { get; }
    public FolderCategory Category { get; }
    public string CanonicalName { get; }
    public string Description { get; }
    public Guid ParentId { get; }
    public string RelativePath { get; }
    public string ParsingName { get; }
    public string Tooltip { get; }
    public string TooltipResourceId { get; }
    public string LocalizedName { get; }
    public string LocalizedNameResourceId { get; }
    public string Security { get; }
    public FileAttributes FileAttributes { get; }
    public DefinitionOptions DefinitionOptions { get; }
    public Guid FolderTypeId { get; }
    public string FolderType { get; }
    public Guid FolderId { get; }
    public bool PathExists { get; }
    public RedirectionCapability Redirection { get; }
    internal NonFileSystemKnownFolder(IShellItem2 shellItem);
    internal NonFileSystemKnownFolder(IKnownFolderNative kf);
    private KnownFolderSettings get_KnownFolderSettings();
    public sealed virtual string get_Path();
    public sealed virtual FolderCategory get_Category();
    public sealed virtual string get_CanonicalName();
    public sealed virtual string get_Description();
    public sealed virtual Guid get_ParentId();
    public sealed virtual string get_RelativePath();
    public virtual string get_ParsingName();
    public sealed virtual string get_Tooltip();
    public sealed virtual string get_TooltipResourceId();
    public sealed virtual string get_LocalizedName();
    public sealed virtual string get_LocalizedNameResourceId();
    public sealed virtual string get_Security();
    public sealed virtual FileAttributes get_FileAttributes();
    public sealed virtual DefinitionOptions get_DefinitionOptions();
    public sealed virtual Guid get_FolderTypeId();
    public sealed virtual string get_FolderType();
    public sealed virtual Guid get_FolderId();
    public sealed virtual bool get_PathExists();
    public sealed virtual RedirectionCapability get_Redirection();
    protected virtual void Dispose(bool disposing);
}
[GuidAttribute("6F79D558-3E96-4549-A1D1-7D75D2288814")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyDescription {
    public abstract virtual void GetPropertyKey(PropertyKey& pkey);
    public abstract virtual void GetCanonicalName(String& ppszName);
    public abstract virtual HResult GetPropertyType(VarEnum& pvartype);
    public abstract virtual HResult GetDisplayName(IntPtr& ppszName);
    public abstract virtual HResult GetEditInvitation(IntPtr& ppszInvite);
    public abstract virtual HResult GetTypeFlags(PropertyTypeOptions mask, PropertyTypeOptions& ppdtFlags);
    public abstract virtual HResult GetViewFlags(PropertyViewOptions& ppdvFlags);
    public abstract virtual HResult GetDefaultColumnWidth(UInt32& pcxChars);
    public abstract virtual HResult GetDisplayType(PropertyDisplayType& pdisplaytype);
    public abstract virtual HResult GetColumnState(PropertyColumnStateOptions& pcsFlags);
    public abstract virtual HResult GetGroupingRange(PropertyGroupingRange& pgr);
    public abstract virtual void GetRelativeDescriptionType(RelativeDescriptionType& prdt);
    public abstract virtual void GetRelativeDescription(PropVariant propvar1, PropVariant propvar2, String& ppszDesc1, String& ppszDesc2);
    public abstract virtual HResult GetSortDescription(PropertySortDescription& psd);
    public abstract virtual HResult GetSortDescriptionLabel(bool fDescending, IntPtr& ppszDescription);
    public abstract virtual HResult GetAggregationType(PropertyAggregationType& paggtype);
    public abstract virtual HResult GetConditionType(PropertyConditionType& pcontype, PropertyConditionOperation& popDefault);
    public abstract virtual HResult GetEnumTypeList(Guid& riid, IPropertyEnumTypeList& ppv);
    public abstract virtual void CoerceToCanonicalValue(PropVariant propvar);
    public abstract virtual HResult FormatForDisplay(PropVariant propvar, PropertyDescriptionFormatOptions& pdfFlags, String& ppszDisplay);
    public abstract virtual HResult IsValueCanonical(PropVariant propvar);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("57D2EDED-5062-400E-B107-5DAE79FE57A6")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyDescription2 {
    public abstract virtual void GetPropertyKey(PropertyKey& pkey);
    public abstract virtual void GetCanonicalName(String& ppszName);
    public abstract virtual void GetPropertyType(VarEnum& pvartype);
    public abstract virtual void GetDisplayName(String& ppszName);
    public abstract virtual void GetEditInvitation(String& ppszInvite);
    public abstract virtual void GetTypeFlags(PropertyTypeOptions mask, PropertyTypeOptions& ppdtFlags);
    public abstract virtual void GetViewFlags(PropertyViewOptions& ppdvFlags);
    public abstract virtual void GetDefaultColumnWidth(UInt32& pcxChars);
    public abstract virtual void GetDisplayType(PropertyDisplayType& pdisplaytype);
    public abstract virtual void GetColumnState(UInt32& pcsFlags);
    public abstract virtual void GetGroupingRange(PropertyGroupingRange& pgr);
    public abstract virtual void GetRelativeDescriptionType(RelativeDescriptionType& prdt);
    public abstract virtual void GetRelativeDescription(PropVariant propvar1, PropVariant propvar2, String& ppszDesc1, String& ppszDesc2);
    public abstract virtual void GetSortDescription(PropertySortDescription& psd);
    public abstract virtual void GetSortDescriptionLabel(int fDescending, String& ppszDescription);
    public abstract virtual void GetAggregationType(PropertyAggregationType& paggtype);
    public abstract virtual void GetConditionType(PropertyConditionType& pcontype, PropertyConditionOperation& popDefault);
    public abstract virtual void GetEnumTypeList(Guid& riid, IntPtr& ppv);
    public abstract virtual void CoerceToCanonicalValue(PropVariant ppropvar);
    public abstract virtual void FormatForDisplay(PropVariant propvar, PropertyDescriptionFormatOptions& pdfFlags, String& ppszDisplay);
    public abstract virtual HResult IsValueCanonical(PropVariant propvar);
    public abstract virtual void GetImageReferenceForValue(PropVariant propvar, String& ppszImageRes);
}
[GuidAttribute("1F9FC1D0-C39B-4B26-817F-011967D3440E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyDescriptionList {
    public abstract virtual void GetCount(UInt32& pcElem);
    public abstract virtual void GetAt(UInt32 iElem, Guid& riid, IPropertyDescription& ppv);
}
[GuidAttribute("11E1FBF9-2D56-4A6B-8DB3-7CD193A471F2")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyEnumType {
    public abstract virtual void GetEnumType(PropEnumType& penumtype);
    public abstract virtual void GetValue(PropVariant ppropvar);
    public abstract virtual void GetRangeMinValue(PropVariant ppropvar);
    public abstract virtual void GetRangeSetValue(PropVariant ppropvar);
    public abstract virtual void GetDisplayText(String& ppszDisplay);
}
[GuidAttribute("9B6E051C-5DDD-4321-9070-FE2ACB55E794")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyEnumType2 {
    public abstract virtual void GetEnumType(PropEnumType& penumtype);
    public abstract virtual void GetValue(PropVariant ppropvar);
    public abstract virtual void GetRangeMinValue(PropVariant ppropvar);
    public abstract virtual void GetRangeSetValue(PropVariant ppropvar);
    public abstract virtual void GetDisplayText(String& ppszDisplay);
    public abstract virtual void GetImageReference(String& ppszImageRes);
}
[GuidAttribute("A99400F4-3D84-4557-94BA-1242FB2CC9A6")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyEnumTypeList {
    public abstract virtual void GetCount(UInt32& pctypes);
    public abstract virtual void GetAt(UInt32 itype, Guid& riid, IPropertyEnumType& ppv);
    public abstract virtual void GetConditionAt(UInt32 index, Guid& riid, IntPtr& ppv);
    public abstract virtual void FindMatchingIndex(PropVariant propvarCmp, UInt32& pnIndex);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("886D8EEB-8CF2-4446-8D02-CDBA1DBDCF99")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyStore {
    public abstract virtual HResult GetCount(UInt32& propertyCount);
    public abstract virtual HResult GetAt(UInt32 propertyIndex, PropertyKey& key);
    public abstract virtual HResult GetValue(PropertyKey& key, PropVariant pv);
    public abstract virtual HResult SetValue(PropertyKey& key, PropVariant pv);
    public abstract virtual HResult Commit();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("3017056d-9a91-4e90-937d-746c72abbf4f")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyStoreCache {
    public abstract virtual HResult GetState(PropertyKey& key, PropertyStoreCacheState& state);
    public abstract virtual HResult GetValueAndState(PropertyKey& propKey, PropVariant pv, PropertyStoreCacheState& state);
    public abstract virtual HResult SetState(PropertyKey& propKey, PropertyStoreCacheState state);
    public abstract virtual HResult SetValueAndState(PropertyKey& propKey, PropVariant pv, PropertyStoreCacheState state);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("c8e2d566-186e-4d49-bf41-6909ead56acc")]
internal interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IPropertyStoreCapabilities {
    public abstract virtual HResult IsPropertyWritable(PropertyKey& propertyKey);
}
public interface Microsoft.WindowsAPICodePack.Shell.PropertySystem.IShellProperty {
    public PropertyKey PropertyKey { get; }
    public ShellPropertyDescription Description { get; }
    public string CanonicalName { get; }
    public object ValueAsObject { get; }
    public Type ValueType { get; }
    public IconReference IconReference { get; }
    public abstract virtual PropertyKey get_PropertyKey();
    public abstract virtual string FormatForDisplay(PropertyDescriptionFormatOptions format);
    public abstract virtual ShellPropertyDescription get_Description();
    public abstract virtual string get_CanonicalName();
    public abstract virtual object get_ValueAsObject();
    public abstract virtual Type get_ValueType();
    public abstract virtual IconReference get_IconReference();
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropEnumType : Enum {
    public int value__;
    public static PropEnumType DiscreteValue;
    public static PropEnumType RangedValue;
    public static PropEnumType DefaultValue;
    public static PropEnumType EndRange;
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyAggregationType : Enum {
    public int value__;
    public static PropertyAggregationType Default;
    public static PropertyAggregationType First;
    public static PropertyAggregationType Sum;
    public static PropertyAggregationType Average;
    public static PropertyAggregationType DateRange;
    public static PropertyAggregationType Union;
    public static PropertyAggregationType Max;
    public static PropertyAggregationType Min;
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyColumnStateOptions : Enum {
    public int value__;
    public static PropertyColumnStateOptions None;
    public static PropertyColumnStateOptions StringType;
    public static PropertyColumnStateOptions IntegerType;
    public static PropertyColumnStateOptions DateType;
    public static PropertyColumnStateOptions TypeMask;
    public static PropertyColumnStateOptions OnByDefault;
    public static PropertyColumnStateOptions Slow;
    public static PropertyColumnStateOptions Extended;
    public static PropertyColumnStateOptions SecondaryUI;
    public static PropertyColumnStateOptions Hidden;
    public static PropertyColumnStateOptions PreferVariantCompare;
    public static PropertyColumnStateOptions PreferFormatForDisplay;
    public static PropertyColumnStateOptions NoSortByFolders;
    public static PropertyColumnStateOptions ViewOnly;
    public static PropertyColumnStateOptions BatchRead;
    public static PropertyColumnStateOptions NoGroupBy;
    public static PropertyColumnStateOptions FixedWidth;
    public static PropertyColumnStateOptions NoDpiScale;
    public static PropertyColumnStateOptions FixedRatio;
    public static PropertyColumnStateOptions DisplayMask;
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyConditionOperation : Enum {
    public int value__;
    public static PropertyConditionOperation Implicit;
    public static PropertyConditionOperation Equal;
    public static PropertyConditionOperation NotEqual;
    public static PropertyConditionOperation LessThan;
    public static PropertyConditionOperation GreaterThan;
    public static PropertyConditionOperation LessThanOrEqual;
    public static PropertyConditionOperation GreaterThanOrEqual;
    public static PropertyConditionOperation ValueStartsWith;
    public static PropertyConditionOperation ValueEndsWith;
    public static PropertyConditionOperation ValueContains;
    public static PropertyConditionOperation ValueNotContains;
    public static PropertyConditionOperation DOSWildCards;
    public static PropertyConditionOperation WordEqual;
    public static PropertyConditionOperation WordStartsWith;
    public static PropertyConditionOperation ApplicationSpecific;
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyConditionType : Enum {
    public int value__;
    public static PropertyConditionType None;
    public static PropertyConditionType String;
    public static PropertyConditionType Size;
    public static PropertyConditionType DateTime;
    public static PropertyConditionType Boolean;
    public static PropertyConditionType Number;
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyDescriptionFormatOptions : Enum {
    public int value__;
    public static PropertyDescriptionFormatOptions None;
    public static PropertyDescriptionFormatOptions PrefixName;
    public static PropertyDescriptionFormatOptions FileName;
    public static PropertyDescriptionFormatOptions AlwaysKB;
    public static PropertyDescriptionFormatOptions RightToLeft;
    public static PropertyDescriptionFormatOptions ShortTime;
    public static PropertyDescriptionFormatOptions LongTime;
    public static PropertyDescriptionFormatOptions HideTime;
    public static PropertyDescriptionFormatOptions ShortDate;
    public static PropertyDescriptionFormatOptions LongDate;
    public static PropertyDescriptionFormatOptions HideDate;
    public static PropertyDescriptionFormatOptions RelativeDate;
    public static PropertyDescriptionFormatOptions UseEditInvitation;
    public static PropertyDescriptionFormatOptions ReadOnly;
    public static PropertyDescriptionFormatOptions NoAutoReadingOrder;
    public static PropertyDescriptionFormatOptions SmartDateTime;
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyDisplayType : Enum {
    public int value__;
    public static PropertyDisplayType String;
    public static PropertyDisplayType Number;
    public static PropertyDisplayType Boolean;
    public static PropertyDisplayType DateTime;
    public static PropertyDisplayType Enumerated;
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyGroupingRange : Enum {
    public int value__;
    public static PropertyGroupingRange Discrete;
    public static PropertyGroupingRange Alphanumeric;
    public static PropertyGroupingRange Size;
    public static PropertyGroupingRange Dynamic;
    public static PropertyGroupingRange Date;
    public static PropertyGroupingRange Percent;
    public static PropertyGroupingRange Enumerated;
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertySortDescription : Enum {
    public int value__;
    public static PropertySortDescription General;
    public static PropertySortDescription AToZ;
    public static PropertySortDescription LowestToHighest;
    public static PropertySortDescription SmallestToBiggest;
    public static PropertySortDescription OldestToNewest;
}
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyStoreCacheState : Enum {
    public int value__;
    public static PropertyStoreCacheState Normal;
    public static PropertyStoreCacheState NotInSource;
    public static PropertyStoreCacheState Dirty;
}
public abstract class Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyStoreItems : object {
}
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertySystemException : ExternalException {
    public PropertySystemException(string message);
    public PropertySystemException(string message, Exception innerException);
    public PropertySystemException(string message, int errorCode);
    protected PropertySystemException(SerializationInfo info, StreamingContext context);
}
internal static class Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertySystemNativeMethods : object {
    internal static int PSGetNameFromPropertyKey(PropertyKey& propkey, String& ppszCanonicalName);
    internal static HResult PSGetPropertyDescription(PropertyKey& propkey, Guid& riid, IPropertyDescription& ppv);
    internal static int PSGetPropertyKeyFromName(string pszCanonicalName, PropertyKey& propkey);
    internal static int PSGetPropertyDescriptionListFromString(string pszPropList, Guid& riid, IPropertyDescriptionList& ppv);
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyTypeOptions : Enum {
    public int value__;
    public static PropertyTypeOptions None;
    public static PropertyTypeOptions MultipleValues;
    public static PropertyTypeOptions IsInnate;
    public static PropertyTypeOptions IsGroup;
    public static PropertyTypeOptions CanGroupBy;
    public static PropertyTypeOptions CanStackBy;
    public static PropertyTypeOptions IsTreeProperty;
    public static PropertyTypeOptions IncludeInFullTextQuery;
    public static PropertyTypeOptions IsViewable;
    public static PropertyTypeOptions IsQueryable;
    public static PropertyTypeOptions CanBePurged;
    public static PropertyTypeOptions IsSystemProperty;
    public static PropertyTypeOptions MaskAll;
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Shell.PropertySystem.PropertyViewOptions : Enum {
    public int value__;
    public static PropertyViewOptions None;
    public static PropertyViewOptions CenterAlign;
    public static PropertyViewOptions RightAlign;
    public static PropertyViewOptions BeginNewGroup;
    public static PropertyViewOptions FillArea;
    public static PropertyViewOptions SortDescending;
    public static PropertyViewOptions ShowOnlyIfPresent;
    public static PropertyViewOptions ShowByDefault;
    public static PropertyViewOptions ShowInPrimaryList;
    public static PropertyViewOptions ShowInSecondaryList;
    public static PropertyViewOptions HideLabel;
    public static PropertyViewOptions Hidden;
    public static PropertyViewOptions CanWrap;
    public static PropertyViewOptions MaskAll;
}
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellProperties : object {
    private ShellPropertyCollection defaultPropertyCollection;
    private PropertySystem propertySystem;
    [CompilerGeneratedAttribute]
private ShellObject <ParentShellObject>k__BackingField;
    private ShellObject ParentShellObject { get; private set; }
    public PropertySystem System { get; }
    public ShellPropertyCollection DefaultPropertyCollection { get; }
    internal ShellProperties(ShellObject parent);
    [CompilerGeneratedAttribute]
private ShellObject get_ParentShellObject();
    [CompilerGeneratedAttribute]
private void set_ParentShellObject(ShellObject value);
    public IShellProperty GetProperty(PropertyKey key);
    public IShellProperty GetProperty(string canonicalName);
    public ShellProperty`1<T> GetProperty(PropertyKey key);
    public ShellProperty`1<T> GetProperty(string canonicalName);
    public PropertySystem get_System();
    public ShellPropertyCollection get_DefaultPropertyCollection();
    public ShellPropertyWriter GetPropertyWriter();
    internal IShellProperty CreateTypedProperty(PropertyKey propKey);
    internal IShellProperty CreateTypedProperty(PropertyKey propKey);
    internal IShellProperty CreateTypedProperty(string canonicalName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposed);
}
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellProperty`1 : object {
    private PropertyKey propertyKey;
    private string imageReferencePath;
    private Nullable`1<int> imageReferenceIconIndex;
    private ShellPropertyDescription description;
    [CompilerGeneratedAttribute]
private ShellObject <ParentShellObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyStore <NativePropertyStore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowSetTruncatedValue>k__BackingField;
    private ShellObject ParentShellObject { get; private set; }
    private IPropertyStore NativePropertyStore { get; private set; }
    public T Value { get; public set; }
    public PropertyKey PropertyKey { get; }
    public ShellPropertyDescription Description { get; }
    public string CanonicalName { get; }
    public object ValueAsObject { get; }
    public Type ValueType { get; }
    public IconReference IconReference { get; }
    public bool AllowSetTruncatedValue { get; public set; }
    internal ShellProperty`1(PropertyKey propertyKey, ShellPropertyDescription description, ShellObject parent);
    internal ShellProperty`1(PropertyKey propertyKey, ShellPropertyDescription description, IPropertyStore propertyStore);
    [CompilerGeneratedAttribute]
private ShellObject get_ParentShellObject();
    [CompilerGeneratedAttribute]
private void set_ParentShellObject(ShellObject value);
    [CompilerGeneratedAttribute]
private IPropertyStore get_NativePropertyStore();
    [CompilerGeneratedAttribute]
private void set_NativePropertyStore(IPropertyStore value);
    private void GetImageReference();
    private void StorePropVariantValue(PropVariant propVar);
    public T get_Value();
    public void set_Value(T value);
    public sealed virtual PropertyKey get_PropertyKey();
    public bool TryFormatForDisplay(PropertyDescriptionFormatOptions format, String& formattedString);
    public sealed virtual string FormatForDisplay(PropertyDescriptionFormatOptions format);
    public sealed virtual ShellPropertyDescription get_Description();
    public sealed virtual string get_CanonicalName();
    public void ClearValue();
    public sealed virtual object get_ValueAsObject();
    public sealed virtual Type get_ValueType();
    public sealed virtual IconReference get_IconReference();
    [CompilerGeneratedAttribute]
public bool get_AllowSetTruncatedValue();
    [CompilerGeneratedAttribute]
public void set_AllowSetTruncatedValue(bool value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellPropertyCollection : ReadOnlyCollection`1<IShellProperty> {
    [CompilerGeneratedAttribute]
private ShellObject <ParentShellObject>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyStore <NativePropertyStore>k__BackingField;
    private ShellObject ParentShellObject { get; private set; }
    private IPropertyStore NativePropertyStore { get; private set; }
    public IShellProperty Item { get; }
    public IShellProperty Item { get; }
    internal ShellPropertyCollection(IPropertyStore nativePropertyStore);
    public ShellPropertyCollection(ShellObject parent);
    public ShellPropertyCollection(string path);
    [CompilerGeneratedAttribute]
private ShellObject get_ParentShellObject();
    [CompilerGeneratedAttribute]
private void set_ParentShellObject(ShellObject value);
    [CompilerGeneratedAttribute]
private IPropertyStore get_NativePropertyStore();
    [CompilerGeneratedAttribute]
private void set_NativePropertyStore(IPropertyStore value);
    private void AddProperties(IPropertyStore nativePropertyStore);
    internal static IPropertyStore CreateDefaultPropertyStore(ShellObject shellObj);
    public bool Contains(string canonicalName);
    public bool Contains(PropertyKey key);
    public IShellProperty get_Item(string canonicalName);
    public IShellProperty get_Item(PropertyKey key);
    internal static IShellProperty CreateTypedProperty(PropertyKey propKey, IPropertyStore NativePropertyStore);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellPropertyDescription : object {
    private IPropertyDescription nativePropertyDescription;
    private string canonicalName;
    private PropertyKey propertyKey;
    private string displayName;
    private string editInvitation;
    private Nullable`1<VarEnum> varEnumType;
    private Nullable`1<PropertyDisplayType> displayType;
    private Nullable`1<PropertyAggregationType> aggregationTypes;
    private Nullable`1<UInt32> defaultColumWidth;
    private Nullable`1<PropertyTypeOptions> propertyTypeFlags;
    private Nullable`1<PropertyViewOptions> propertyViewFlags;
    private Type valueType;
    private ReadOnlyCollection`1<ShellPropertyEnumType> propertyEnumTypes;
    private Nullable`1<PropertyColumnStateOptions> columnState;
    private Nullable`1<PropertyConditionType> conditionType;
    private Nullable`1<PropertyConditionOperation> conditionOperation;
    private Nullable`1<PropertyGroupingRange> groupingRange;
    private Nullable`1<PropertySortDescription> sortDescription;
    public string CanonicalName { get; }
    public PropertyKey PropertyKey { get; }
    public string DisplayName { get; }
    public string EditInvitation { get; }
    public VarEnum VarEnumType { get; }
    public Type ValueType { get; }
    public PropertyDisplayType DisplayType { get; }
    public UInt32 DefaultColumWidth { get; }
    public PropertyAggregationType AggregationTypes { get; }
    public ReadOnlyCollection`1<ShellPropertyEnumType> PropertyEnumTypes { get; }
    public PropertyColumnStateOptions ColumnState { get; }
    public PropertyConditionType ConditionType { get; }
    public PropertyConditionOperation ConditionOperation { get; }
    public PropertyGroupingRange GroupingRange { get; }
    public PropertySortDescription SortDescription { get; }
    public PropertyTypeOptions TypeFlags { get; }
    public PropertyViewOptions ViewFlags { get; }
    public bool HasSystemDescription { get; }
    internal IPropertyDescription NativePropertyDescription { get; }
    internal ShellPropertyDescription(PropertyKey key);
    public string get_CanonicalName();
    public PropertyKey get_PropertyKey();
    public string get_DisplayName();
    public string get_EditInvitation();
    public VarEnum get_VarEnumType();
    public Type get_ValueType();
    public PropertyDisplayType get_DisplayType();
    public UInt32 get_DefaultColumWidth();
    public PropertyAggregationType get_AggregationTypes();
    public ReadOnlyCollection`1<ShellPropertyEnumType> get_PropertyEnumTypes();
    public PropertyColumnStateOptions get_ColumnState();
    public PropertyConditionType get_ConditionType();
    public PropertyConditionOperation get_ConditionOperation();
    public PropertyGroupingRange get_GroupingRange();
    public PropertySortDescription get_SortDescription();
    public string GetSortDescriptionLabel(bool descending);
    public PropertyTypeOptions get_TypeFlags();
    public PropertyViewOptions get_ViewFlags();
    public bool get_HasSystemDescription();
    internal IPropertyDescription get_NativePropertyDescription();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
internal class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellPropertyDescriptionsCache : object {
    private IDictionary`2<PropertyKey, ShellPropertyDescription> propsDictionary;
    private static ShellPropertyDescriptionsCache cacheInstance;
    public static ShellPropertyDescriptionsCache Cache { get; }
    public static ShellPropertyDescriptionsCache get_Cache();
    public ShellPropertyDescription GetPropertyDescription(PropertyKey key);
}
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellPropertyEnumType : object {
    private string displayText;
    private Nullable`1<PropEnumType> enumType;
    private object minValue;
    private object setValue;
    private object enumerationValue;
    [CompilerGeneratedAttribute]
private IPropertyEnumType <NativePropertyEnumType>k__BackingField;
    private IPropertyEnumType NativePropertyEnumType { get; private set; }
    public string DisplayText { get; }
    public PropEnumType EnumType { get; }
    public object RangeMinValue { get; }
    public object RangeSetValue { get; }
    public object RangeValue { get; }
    internal ShellPropertyEnumType(IPropertyEnumType nativePropertyEnumType);
    [CompilerGeneratedAttribute]
private void set_NativePropertyEnumType(IPropertyEnumType value);
    [CompilerGeneratedAttribute]
private IPropertyEnumType get_NativePropertyEnumType();
    public string get_DisplayText();
    public PropEnumType get_EnumType();
    public object get_RangeMinValue();
    public object get_RangeSetValue();
    public object get_RangeValue();
}
internal static class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellPropertyFactory : object {
    private static Dictionary`2<int, Func`4<PropertyKey, ShellPropertyDescription, object, IShellProperty>> _storeCache;
    private static ShellPropertyFactory();
    public static IShellProperty CreateShellProperty(PropertyKey propKey, ShellObject shellObject);
    public static IShellProperty CreateShellProperty(PropertyKey propKey, IPropertyStore store);
    private static IShellProperty GenericCreateShellProperty(PropertyKey propKey, T thirdArg);
    public static Type VarEnumToSystemType(VarEnum VarEnumType);
    private static Func`4<PropertyKey, ShellPropertyDescription, object, IShellProperty> ExpressConstructor(Type type, Type[] argTypes);
    private static int GetTypeHash(Type[] types);
    private static int GetTypeHash(IEnumerable`1<Type> types);
}
public class Microsoft.WindowsAPICodePack.Shell.PropertySystem.ShellPropertyWriter : object {
    private ShellObject parentShellObject;
    internal IPropertyStore writablePropStore;
    protected ShellObject ParentShellObject { get; private set; }
    internal ShellPropertyWriter(ShellObject parent);
    protected ShellObject get_ParentShellObject();
    private void set_ParentShellObject(ShellObject value);
    public void WriteProperty(PropertyKey key, object value);
    public void WriteProperty(PropertyKey key, object value, bool allowTruncatedValue);
    public void WriteProperty(string canonicalName, object value);
    public void WriteProperty(string canonicalName, object value, bool allowTruncatedValue);
    public void WriteProperty(IShellProperty shellProperty, object value);
    public void WriteProperty(IShellProperty shellProperty, object value, bool allowTruncatedValue);
    public void WriteProperty(ShellProperty`1<T> shellProperty, T value);
    public void WriteProperty(ShellProperty`1<T> shellProperty, T value, bool allowTruncatedValue);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    protected virtual void Dispose(bool disposing);
    public void Close();
}
public static class Microsoft.WindowsAPICodePack.Shell.PropertySystem.SystemProperties : object {
    public static ShellPropertyDescription GetPropertyDescription(PropertyKey propertyKey);
    public static ShellPropertyDescription GetPropertyDescription(string canonicalName);
}
public static class Microsoft.WindowsAPICodePack.Shell.PropertySystem.WindowProperties : object {
    public static void SetWindowProperty(IntPtr windowHandle, PropertyKey propKey, string value);
    public static void SetWindowProperty(Window window, PropertyKey propKey, string value);
}
[ClassInterfaceAttribute("0")]
[TypeLibTypeAttribute("2")]
[GuidAttribute("5088B39A-29B4-4d9d-8245-4EE289222F66")]
internal class Microsoft.WindowsAPICodePack.Shell.QueryParserManagerCoClass : object {
}
public enum Microsoft.WindowsAPICodePack.Shell.QueryParserManagerOption : Enum {
    public int value__;
    public static QueryParserManagerOption SchemaBinaryName;
    public static QueryParserManagerOption PreLocalizedSchemaBinaryPath;
    public static QueryParserManagerOption UnlocalizedSchemaBinaryPath;
    public static QueryParserManagerOption LocalizedSchemaBinaryPath;
    public static QueryParserManagerOption AppendLCIDToLocalizedPath;
    public static QueryParserManagerOption LocalizerSupport;
}
public enum Microsoft.WindowsAPICodePack.Shell.RedirectionCapability : Enum {
    public int value__;
    public static RedirectionCapability None;
    public static RedirectionCapability AllowAll;
    public static RedirectionCapability Redirectable;
    public static RedirectionCapability DenyAll;
    public static RedirectionCapability DenyPolicyRedirected;
    public static RedirectionCapability DenyPolicy;
    public static RedirectionCapability DenyPermissions;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.WindowsAPICodePack.Shell.Resources.LocalizedMessages : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AddToMostRecentlyUsedListCannotBeChanged { get; }
    internal static string AlwaysAppendDefaultExtensionCannotBeChanged { get; }
    internal static string ComboBoxIndexOutsideBounds { get; }
    internal static string CommonFileDialogCanceled { get; }
    internal static string CommonFileDialogCannotCreateShellItem { get; }
    internal static string CommonFileDialogInvalidHandle { get; }
    internal static string CommonFileDialogMultipleFiles { get; }
    internal static string CommonFileDialogMultipleItems { get; }
    internal static string CommonFileDialogNotClosed { get; }
    internal static string CommonFileDialogRequiresVista { get; }
    internal static string CommonFiltersOffice { get; }
    internal static string CommonFiltersPicture { get; }
    internal static string CommonFiltersText { get; }
    internal static string CreatePromptCannotBeChanged { get; }
    internal static string DialogControlCollectionCannotRemoveControls { get; }
    internal static string DialogControlCollectionEmptyName { get; }
    internal static string DialogControlCollectionMenuItemControlsCannotBeAdded { get; }
    internal static string DialogControlCollectionModifyingControls { get; }
    internal static string DialogControlCollectionMoreThanOneControl { get; }
    internal static string DialogControlCollectionRemoveControlFirst { get; }
    internal static string EnsureFileExistsCannotBeChanged { get; }
    internal static string EnsurePathExistsCannotBeChanged { get; }
    internal static string EnsureReadonlyCannotBeChanged { get; }
    internal static string EnsureValidNamesCannotBeChanged { get; }
    internal static string ExplorerBrowserBrowseToObjectFailed { get; }
    internal static string ExplorerBrowserFailedToGetView { get; }
    internal static string ExplorerBrowserIconSize { get; }
    internal static string ExplorerBrowserItemCount { get; }
    internal static string ExplorerBrowserSelectedItemCount { get; }
    internal static string ExplorerBrowserUnexpectedError { get; }
    internal static string ExplorerBrowserViewItems { get; }
    internal static string FilePathNotExist { get; }
    internal static string FolderIdsUnknownGuid { get; }
    internal static string FolderTypeCategory { get; }
    internal static string FolderTypeClassic { get; }
    internal static string FolderTypeCommunications { get; }
    internal static string FolderTypeCompressedFolder { get; }
    internal static string FolderTypeContacts { get; }
    internal static string FolderTypeDocuments { get; }
    internal static string FolderTypeGames { get; }
    internal static string FolderTypeGenericLibrary { get; }
    internal static string FolderTypeInvalid { get; }
    internal static string FolderTypeLibrary { get; }
    internal static string FolderTypeMusic { get; }
    internal static string FolderTypeMusicIcons { get; }
    internal static string FolderTypeNetworkExplorer { get; }
    internal static string FolderTypeNotSpecified { get; }
    internal static string FolderTypeOpenSearch { get; }
    internal static string FolderTypeOtherUsers { get; }
    internal static string FolderTypePictures { get; }
    internal static string FolderTypePrinters { get; }
    internal static string FolderTypeRecordedTV { get; }
    internal static string FolderTypeRecycleBin { get; }
    internal static string FolderTypeSavedGames { get; }
    internal static string FolderTypeSearchConnector { get; }
    internal static string FolderTypeSearches { get; }
    internal static string FolderTypeSearchResults { get; }
    internal static string FolderTypeSoftwareExplorer { get; }
    internal static string FolderTypeUserFiles { get; }
    internal static string FolderTypeUserLibraries { get; }
    internal static string FolderTypeVideos { get; }
    internal static string IsExpandedModeCannotBeChanged { get; }
    internal static string JumpListCustomCategoriesDisabled { get; }
    internal static string JumpListFileTypeNotRegistered { get; }
    internal static string JumpListLinkPathRequired { get; }
    internal static string JumpListLinkTitleRequired { get; }
    internal static string JumpListNegativeOrdinalPosition { get; }
    internal static string KnownFolderInvalidGuid { get; }
    internal static string KnownFolderParsingName { get; }
    internal static string MessageListenerCannotCreateWindow { get; }
    internal static string MessageListenerClassNotRegistered { get; }
    internal static string MessageListenerFilterUnableToRegister { get; }
    internal static string MessageListenerFilterUnknownListenerHandle { get; }
    internal static string MessageListenerNoWindowHandle { get; }
    internal static string NavigateToShortcutCannotBeChanged { get; }
    internal static string NavigationLogNullParent { get; }
    internal static string NotImplementedException { get; }
    internal static string OverwritePromptCannotBeChanged { get; }
    internal static string PropertyCollectionCanonicalInvalidIndex { get; }
    internal static string PropertyCollectionInvalidIndex { get; }
    internal static string PropertyCollectionNullCanonicalName { get; }
    internal static string RadioButtonListIndexOutOfBounds { get; }
    internal static string RestoreDirectoryCannotBeChanged { get; }
    internal static string SaveFileNullItem { get; }
    internal static string SearchConditionFactoryInvalidProperty { get; }
    internal static string ShellExceptionDefaultText { get; }
    internal static string ShellHelperGetParsingNameFailed { get; }
    internal static string ShellInvalidCanonicalName { get; }
    internal static string ShellLibraryDefaultSaveFolderNotFound { get; }
    internal static string ShellLibraryEmptyName { get; }
    internal static string ShellLibraryFolderNotFound { get; }
    internal static string ShellLibraryInvalidFolderType { get; }
    internal static string ShellLibraryInvalidLibrary { get; }
    internal static string ShellObjectCannotGetDisplayName { get; }
    internal static string ShellObjectCollectionArrayTooSmall { get; }
    internal static string ShellObjectCollectionEmptyCollection { get; }
    internal static string ShellObjectCollectionInsertReadOnly { get; }
    internal static string ShellObjectCollectionRemoveReadOnly { get; }
    internal static string ShellObjectCreationFailed { get; }
    internal static string ShellObjectFactoryPlatformNotSupported { get; }
    internal static string ShellObjectFactoryUnableToCreateItem { get; }
    internal static string ShellObjectWatcherRegisterFailed { get; }
    internal static string ShellObjectWatcherUnableToChangeEvents { get; }
    internal static string ShellPropertyCannotSetProperty { get; }
    internal static string ShellPropertyFactoryConstructorNotFound { get; }
    internal static string ShellPropertySetValue { get; }
    internal static string ShellPropertyUnableToGetWritableProperty { get; }
    internal static string ShellPropertyValueTruncated { get; }
    internal static string ShellPropertyWindows7 { get; }
    internal static string ShellPropertyWrongType { get; }
    internal static string ShellSearchFolderUnableToSetSortColumns { get; }
    internal static string ShellSearchFolderUnableToSetVisibleColumns { get; }
    internal static string ShellThumbnailCurrentSizeRange { get; }
    internal static string ShellThumbnailDoesNotHaveThumbnail { get; }
    internal static string ShellThumbnailNoHandler { get; }
    internal static string ShellThumbnailSizeCannotBe0 { get; }
    internal static string ShowHiddenItemsCannotBeChanged { get; }
    internal static string ShowPlacesListCannotBeChanged { get; }
    internal static string StockIconInvalidGuid { get; }
    internal static string TabbedThumbnailZeroChildHandle { get; }
    internal static string TabbedThumbnailZeroParentHandle { get; }
    internal static string TasbarWindowProxyWindowSet { get; }
    internal static string TaskbarManagerValidWindowRequired { get; }
    internal static string TaskbarWindowEmptyButtonArray { get; }
    internal static string TaskbarWindowManagerButtonsAlreadyAdded { get; }
    internal static string TaskbarWindowValueSet { get; }
    internal static string ThumbnailManagerControlNotAdded { get; }
    internal static string ThumbnailManagerInvalidHandle { get; }
    internal static string ThumbnailManagerPreviewAdded { get; }
    internal static string ThumbnailManagerPreviewNotAdded { get; }
    internal static string ThumbnailToolbarManagerMaxButtons { get; }
    internal static string ThumbnailToolbarManagerNullEmptyArray { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AddToMostRecentlyUsedListCannotBeChanged();
    internal static string get_AlwaysAppendDefaultExtensionCannotBeChanged();
    internal static string get_ComboBoxIndexOutsideBounds();
    internal static string get_CommonFileDialogCanceled();
    internal static string get_CommonFileDialogCannotCreateShellItem();
    internal static string get_CommonFileDialogInvalidHandle();
    internal static string get_CommonFileDialogMultipleFiles();
    internal static string get_CommonFileDialogMultipleItems();
    internal static string get_CommonFileDialogNotClosed();
    internal static string get_CommonFileDialogRequiresVista();
    internal static string get_CommonFiltersOffice();
    internal static string get_CommonFiltersPicture();
    internal static string get_CommonFiltersText();
    internal static string get_CreatePromptCannotBeChanged();
    internal static string get_DialogControlCollectionCannotRemoveControls();
    internal static string get_DialogControlCollectionEmptyName();
    internal static string get_DialogControlCollectionMenuItemControlsCannotBeAdded();
    internal static string get_DialogControlCollectionModifyingControls();
    internal static string get_DialogControlCollectionMoreThanOneControl();
    internal static string get_DialogControlCollectionRemoveControlFirst();
    internal static string get_EnsureFileExistsCannotBeChanged();
    internal static string get_EnsurePathExistsCannotBeChanged();
    internal static string get_EnsureReadonlyCannotBeChanged();
    internal static string get_EnsureValidNamesCannotBeChanged();
    internal static string get_ExplorerBrowserBrowseToObjectFailed();
    internal static string get_ExplorerBrowserFailedToGetView();
    internal static string get_ExplorerBrowserIconSize();
    internal static string get_ExplorerBrowserItemCount();
    internal static string get_ExplorerBrowserSelectedItemCount();
    internal static string get_ExplorerBrowserUnexpectedError();
    internal static string get_ExplorerBrowserViewItems();
    internal static string get_FilePathNotExist();
    internal static string get_FolderIdsUnknownGuid();
    internal static string get_FolderTypeCategory();
    internal static string get_FolderTypeClassic();
    internal static string get_FolderTypeCommunications();
    internal static string get_FolderTypeCompressedFolder();
    internal static string get_FolderTypeContacts();
    internal static string get_FolderTypeDocuments();
    internal static string get_FolderTypeGames();
    internal static string get_FolderTypeGenericLibrary();
    internal static string get_FolderTypeInvalid();
    internal static string get_FolderTypeLibrary();
    internal static string get_FolderTypeMusic();
    internal static string get_FolderTypeMusicIcons();
    internal static string get_FolderTypeNetworkExplorer();
    internal static string get_FolderTypeNotSpecified();
    internal static string get_FolderTypeOpenSearch();
    internal static string get_FolderTypeOtherUsers();
    internal static string get_FolderTypePictures();
    internal static string get_FolderTypePrinters();
    internal static string get_FolderTypeRecordedTV();
    internal static string get_FolderTypeRecycleBin();
    internal static string get_FolderTypeSavedGames();
    internal static string get_FolderTypeSearchConnector();
    internal static string get_FolderTypeSearches();
    internal static string get_FolderTypeSearchResults();
    internal static string get_FolderTypeSoftwareExplorer();
    internal static string get_FolderTypeUserFiles();
    internal static string get_FolderTypeUserLibraries();
    internal static string get_FolderTypeVideos();
    internal static string get_IsExpandedModeCannotBeChanged();
    internal static string get_JumpListCustomCategoriesDisabled();
    internal static string get_JumpListFileTypeNotRegistered();
    internal static string get_JumpListLinkPathRequired();
    internal static string get_JumpListLinkTitleRequired();
    internal static string get_JumpListNegativeOrdinalPosition();
    internal static string get_KnownFolderInvalidGuid();
    internal static string get_KnownFolderParsingName();
    internal static string get_MessageListenerCannotCreateWindow();
    internal static string get_MessageListenerClassNotRegistered();
    internal static string get_MessageListenerFilterUnableToRegister();
    internal static string get_MessageListenerFilterUnknownListenerHandle();
    internal static string get_MessageListenerNoWindowHandle();
    internal static string get_NavigateToShortcutCannotBeChanged();
    internal static string get_NavigationLogNullParent();
    internal static string get_NotImplementedException();
    internal static string get_OverwritePromptCannotBeChanged();
    internal static string get_PropertyCollectionCanonicalInvalidIndex();
    internal static string get_PropertyCollectionInvalidIndex();
    internal static string get_PropertyCollectionNullCanonicalName();
    internal static string get_RadioButtonListIndexOutOfBounds();
    internal static string get_RestoreDirectoryCannotBeChanged();
    internal static string get_SaveFileNullItem();
    internal static string get_SearchConditionFactoryInvalidProperty();
    internal static string get_ShellExceptionDefaultText();
    internal static string get_ShellHelperGetParsingNameFailed();
    internal static string get_ShellInvalidCanonicalName();
    internal static string get_ShellLibraryDefaultSaveFolderNotFound();
    internal static string get_ShellLibraryEmptyName();
    internal static string get_ShellLibraryFolderNotFound();
    internal static string get_ShellLibraryInvalidFolderType();
    internal static string get_ShellLibraryInvalidLibrary();
    internal static string get_ShellObjectCannotGetDisplayName();
    internal static string get_ShellObjectCollectionArrayTooSmall();
    internal static string get_ShellObjectCollectionEmptyCollection();
    internal static string get_ShellObjectCollectionInsertReadOnly();
    internal static string get_ShellObjectCollectionRemoveReadOnly();
    internal static string get_ShellObjectCreationFailed();
    internal static string get_ShellObjectFactoryPlatformNotSupported();
    internal static string get_ShellObjectFactoryUnableToCreateItem();
    internal static string get_ShellObjectWatcherRegisterFailed();
    internal static string get_ShellObjectWatcherUnableToChangeEvents();
    internal static string get_ShellPropertyCannotSetProperty();
    internal static string get_ShellPropertyFactoryConstructorNotFound();
    internal static string get_ShellPropertySetValue();
    internal static string get_ShellPropertyUnableToGetWritableProperty();
    internal static string get_ShellPropertyValueTruncated();
    internal static string get_ShellPropertyWindows7();
    internal static string get_ShellPropertyWrongType();
    internal static string get_ShellSearchFolderUnableToSetSortColumns();
    internal static string get_ShellSearchFolderUnableToSetVisibleColumns();
    internal static string get_ShellThumbnailCurrentSizeRange();
    internal static string get_ShellThumbnailDoesNotHaveThumbnail();
    internal static string get_ShellThumbnailNoHandler();
    internal static string get_ShellThumbnailSizeCannotBe0();
    internal static string get_ShowHiddenItemsCannotBeChanged();
    internal static string get_ShowPlacesListCannotBeChanged();
    internal static string get_StockIconInvalidGuid();
    internal static string get_TabbedThumbnailZeroChildHandle();
    internal static string get_TabbedThumbnailZeroParentHandle();
    internal static string get_TasbarWindowProxyWindowSet();
    internal static string get_TaskbarManagerValidWindowRequired();
    internal static string get_TaskbarWindowEmptyButtonArray();
    internal static string get_TaskbarWindowManagerButtonsAlreadyAdded();
    internal static string get_TaskbarWindowValueSet();
    internal static string get_ThumbnailManagerControlNotAdded();
    internal static string get_ThumbnailManagerInvalidHandle();
    internal static string get_ThumbnailManagerPreviewAdded();
    internal static string get_ThumbnailManagerPreviewNotAdded();
    internal static string get_ThumbnailToolbarManagerMaxButtons();
    internal static string get_ThumbnailToolbarManagerNullEmptyArray();
}
internal enum Microsoft.WindowsAPICodePack.Shell.RetrievalOptions : Enum {
    public int value__;
    public static RetrievalOptions None;
    public static RetrievalOptions Create;
    public static RetrievalOptions DontVerify;
    public static RetrievalOptions DontUnexpand;
    public static RetrievalOptions NoAlias;
    public static RetrievalOptions Init;
    public static RetrievalOptions DefaultPath;
    public static RetrievalOptions NotParentRelative;
}
public class Microsoft.WindowsAPICodePack.Shell.SearchCondition : object {
    private string canonicalName;
    private PropertyKey propertyKey;
    private PropertyKey emptyPropertyKey;
    private SearchConditionOperation conditionOperation;
    private SearchConditionType conditionType;
    [CompilerGeneratedAttribute]
private ICondition <NativeSearchCondition>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyValue>k__BackingField;
    internal ICondition NativeSearchCondition { get; internal set; }
    public string PropertyCanonicalName { get; }
    public PropertyKey PropertyKey { get; }
    public string PropertyValue { get; internal set; }
    public SearchConditionOperation ConditionOperation { get; }
    public SearchConditionType ConditionType { get; }
    internal SearchCondition(ICondition nativeSearchCondition);
    [CompilerGeneratedAttribute]
internal ICondition get_NativeSearchCondition();
    [CompilerGeneratedAttribute]
internal void set_NativeSearchCondition(ICondition value);
    public string get_PropertyCanonicalName();
    public PropertyKey get_PropertyKey();
    [CompilerGeneratedAttribute]
public string get_PropertyValue();
    [CompilerGeneratedAttribute]
internal void set_PropertyValue(string value);
    public SearchConditionOperation get_ConditionOperation();
    public SearchConditionType get_ConditionType();
    public IEnumerable`1<SearchCondition> GetSubConditions();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public static class Microsoft.WindowsAPICodePack.Shell.SearchConditionFactory : object {
    public static SearchCondition CreateLeafCondition(string propertyName, string value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(string propertyName, DateTime value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(string propertyName, int value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(string propertyName, bool value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(string propertyName, double value, SearchConditionOperation operation);
    private static SearchCondition CreateLeafCondition(string propertyName, PropVariant propVar, string valueType, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(PropertyKey propertyKey, string value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(PropertyKey propertyKey, DateTime value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(PropertyKey propertyKey, bool value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(PropertyKey propertyKey, double value, SearchConditionOperation operation);
    public static SearchCondition CreateLeafCondition(PropertyKey propertyKey, int value, SearchConditionOperation operation);
    public static SearchCondition CreateAndOrCondition(SearchConditionType conditionType, bool simplify, SearchCondition[] conditionNodes);
    public static SearchCondition CreateNotCondition(SearchCondition conditionToBeNegated, bool simplify);
    public static SearchCondition ParseStructuredQuery(string query);
    public static SearchCondition ParseStructuredQuery(string query, CultureInfo cultureInfo);
}
public enum Microsoft.WindowsAPICodePack.Shell.SearchConditionOperation : Enum {
    public int value__;
    public static SearchConditionOperation Implicit;
    public static SearchConditionOperation Equal;
    public static SearchConditionOperation NotEqual;
    public static SearchConditionOperation LessThan;
    public static SearchConditionOperation GreaterThan;
    public static SearchConditionOperation LessThanOrEqual;
    public static SearchConditionOperation GreaterThanOrEqual;
    public static SearchConditionOperation ValueStartsWith;
    public static SearchConditionOperation ValueEndsWith;
    public static SearchConditionOperation ValueContains;
    public static SearchConditionOperation ValueNotContains;
    public static SearchConditionOperation DosWildcards;
    public static SearchConditionOperation WordEqual;
    public static SearchConditionOperation WordStartsWith;
    public static SearchConditionOperation ApplicationSpecific;
}
public enum Microsoft.WindowsAPICodePack.Shell.SearchConditionType : Enum {
    public int value__;
    public static SearchConditionType And;
    public static SearchConditionType Or;
    public static SearchConditionType Not;
    public static SearchConditionType Leaf;
}
[GuidAttribute("14010e02-bbbd-41f0-88e3-eda371216584")]
[ClassInterfaceAttribute("0")]
[TypeLibTypeAttribute("2")]
internal class Microsoft.WindowsAPICodePack.Shell.SearchFolderItemFactoryCoClass : object {
}
internal static class Microsoft.WindowsAPICodePack.Shell.ShellBHIDGuid : object {
    internal static string ShellFolderObject;
}
internal static class Microsoft.WindowsAPICodePack.Shell.ShellCLSIDGuid : object {
    internal static string FileOpenDialog;
    internal static string FileSaveDialog;
    internal static string KnownFolderManager;
    internal static string ShellLibrary;
    internal static string SearchFolderItemFactory;
    internal static string ConditionFactory;
    internal static string QueryParserManager;
}
public abstract class Microsoft.WindowsAPICodePack.Shell.ShellContainer : ShellObject {
    private IShellFolder desktopFolderEnumeration;
    private IShellFolder nativeShellFolder;
    internal IShellFolder NativeShellFolder { get; }
    internal ShellContainer(IShellItem2 shellItem);
    internal IShellFolder get_NativeShellFolder();
    protected virtual void Dispose(bool disposing);
    public sealed virtual IEnumerator`1<ShellObject> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.WindowsAPICodePack.Shell.ShellException : ExternalException {
    internal ShellException(HResult result);
    public ShellException(string message);
    public ShellException(string message, Exception innerException);
    public ShellException(string message, int errorCode);
    internal ShellException(string message, HResult errorCode);
    public ShellException(int errorCode);
    protected ShellException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellFile : ShellObject {
    public string Path { get; }
    internal ShellFile(string path);
    internal ShellFile(IShellItem2 shellItem);
    public static ShellFile FromFilePath(string path);
    public virtual string get_Path();
}
public class Microsoft.WindowsAPICodePack.Shell.ShellFileSystemFolder : ShellFolder {
    public string Path { get; }
    internal ShellFileSystemFolder(IShellItem2 shellItem);
    public static ShellFileSystemFolder FromFolderPath(string path);
    public virtual string get_Path();
}
public abstract class Microsoft.WindowsAPICodePack.Shell.ShellFolder : ShellContainer {
}
internal class Microsoft.WindowsAPICodePack.Shell.ShellFolderItems : object {
    private IEnumIDList nativeEnumIdList;
    private ShellObject currentItem;
    private ShellContainer nativeShellFolder;
    public ShellObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal ShellFolderItems(ShellContainer nativeShellFolder);
    public sealed virtual ShellObject get_Current();
    public sealed virtual void Dispose();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
internal static class Microsoft.WindowsAPICodePack.Shell.ShellHelper : object {
    internal static PropertyKey ItemTypePropertyKey;
    private static ShellHelper();
    internal static string GetParsingName(IShellItem shellItem);
    internal static string GetAbsolutePath(string path);
    internal static string GetItemType(IShellItem2 shellItem);
    internal static IntPtr PidlFromParsingName(string name);
    internal static IntPtr PidlFromShellItem(IShellItem nativeShellItem);
    internal static IntPtr PidlFromUnknown(IntPtr unknown);
}
internal static class Microsoft.WindowsAPICodePack.Shell.ShellIIDGuid : object {
    internal static string IModalWindow;
    internal static string IFileDialog;
    internal static string IFileOpenDialog;
    internal static string IFileSaveDialog;
    internal static string IFileDialogEvents;
    internal static string IFileDialogControlEvents;
    internal static string IFileDialogCustomize;
    internal static string IShellItem;
    internal static string IShellItem2;
    internal static string IShellItemArray;
    internal static string IShellLibrary;
    internal static string IThumbnailCache;
    internal static string ISharedBitmap;
    internal static string IShellFolder;
    internal static string IShellFolder2;
    internal static string IEnumIDList;
    internal static string IShellLinkW;
    internal static string CShellLink;
    internal static string IPropertyStore;
    internal static string IPropertyStoreCache;
    internal static string IPropertyDescription;
    internal static string IPropertyDescription2;
    internal static string IPropertyDescriptionList;
    internal static string IPropertyEnumType;
    internal static string IPropertyEnumType2;
    internal static string IPropertyEnumTypeList;
    internal static string IPropertyStoreCapabilities;
    internal static string ICondition;
    internal static string ISearchFolderItemFactory;
    internal static string IConditionFactory;
    internal static string IRichChunk;
    internal static string IPersistStream;
    internal static string IPersist;
    internal static string IEnumUnknown;
    internal static string IQuerySolution;
    internal static string IQueryParser;
    internal static string IQueryParserManager;
}
internal class Microsoft.WindowsAPICodePack.Shell.ShellItemArray : object {
    private List`1<IShellItem> shellItemsList;
    internal ShellItemArray(IShellItem[] shellItems);
    public sealed virtual HResult BindToHandler(IntPtr pbc, Guid& rbhid, Guid& riid, IntPtr& ppvOut);
    public sealed virtual HResult GetPropertyStore(int Flags, Guid& riid, IntPtr& ppv);
    public sealed virtual HResult GetPropertyDescriptionList(PropertyKey& keyType, Guid& riid, IntPtr& ppv);
    public sealed virtual HResult GetAttributes(ShellItemAttributeOptions dwAttribFlags, ShellFileGetAttributesOptions sfgaoMask, ShellFileGetAttributesOptions& psfgaoAttribs);
    public sealed virtual HResult GetCount(UInt32& pdwNumItems);
    public sealed virtual HResult GetItemAt(UInt32 dwIndex, IShellItem& ppsi);
    public sealed virtual HResult EnumItems(IntPtr& ppenumShellItems);
}
internal static class Microsoft.WindowsAPICodePack.Shell.ShellKFIDGuid : object {
    internal static string ComputerFolder;
    internal static string Favorites;
    internal static string Documents;
    internal static string Profile;
    internal static string GenericLibrary;
    internal static string DocumentsLibrary;
    internal static string MusicLibrary;
    internal static string PicturesLibrary;
    internal static string VideosLibrary;
    internal static string Libraries;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.WindowsAPICodePack.Shell.ShellLibrary : ShellContainer {
    internal static string FileExtension;
    private INativeShellLibrary nativeShellLibrary;
    private IKnownFolder knownFolder;
    private static Guid[] FolderTypesGuids;
    public string Name { get; }
    public IconReference IconResourceId { get; public set; }
    public LibraryFolderType LibraryType { get; public set; }
    public Guid LibraryTypeId { get; }
    public string DefaultSaveFolder { get; public set; }
    public bool IsPinnedToNavigationPane { get; public set; }
    internal IShellItem NativeShellItem { get; }
    internal IShellItem2 NativeShellItem2 { get; }
    public static IKnownFolder LibrariesKnownFolder { get; }
    private List`1<ShellFileSystemFolder> ItemsList { get; }
    public ShellFileSystemFolder Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public static bool IsPlatformSupported { get; }
    private ShellLibrary(INativeShellLibrary nativeShellLibrary);
    private ShellLibrary(IKnownFolder sourceKnownFolder, bool isReadOnly);
    public ShellLibrary(string libraryName, bool overwrite);
    public ShellLibrary(string libraryName, IKnownFolder sourceKnownFolder, bool overwrite);
    public ShellLibrary(string libraryName, string folderPath, bool overwrite);
    private static ShellLibrary();
    public virtual string get_Name();
    public IconReference get_IconResourceId();
    public void set_IconResourceId(IconReference value);
    public LibraryFolderType get_LibraryType();
    public void set_LibraryType(LibraryFolderType value);
    public Guid get_LibraryTypeId();
    private static LibraryFolderType GetFolderTypefromGuid(Guid folderTypeGuid);
    public string get_DefaultSaveFolder();
    public void set_DefaultSaveFolder(string value);
    public bool get_IsPinnedToNavigationPane();
    public void set_IsPinnedToNavigationPane(bool value);
    public void Close();
    internal virtual IShellItem get_NativeShellItem();
    internal virtual IShellItem2 get_NativeShellItem2();
    public static IKnownFolder get_LibrariesKnownFolder();
    public static ShellLibrary Load(string libraryName, bool isReadOnly);
    public static ShellLibrary Load(string libraryName, string folderPath, bool isReadOnly);
    internal static ShellLibrary FromShellItem(IShellItem nativeShellItem, bool isReadOnly);
    public static ShellLibrary Load(IKnownFolder sourceKnownFolder, bool isReadOnly);
    private static void ShowManageLibraryUI(ShellLibrary shellLibrary, IntPtr windowHandle, string title, string instruction, bool allowAllLocations);
    public static void ShowManageLibraryUI(string libraryName, string folderPath, IntPtr windowHandle, string title, string instruction, bool allowAllLocations);
    public static void ShowManageLibraryUI(string libraryName, IntPtr windowHandle, string title, string instruction, bool allowAllLocations);
    public static void ShowManageLibraryUI(IKnownFolder sourceKnownFolder, IntPtr windowHandle, string title, string instruction, bool allowAllLocations);
    public sealed virtual void Add(ShellFileSystemFolder item);
    public void Add(string folderPath);
    public sealed virtual void Clear();
    public sealed virtual bool Remove(ShellFileSystemFolder item);
    public bool Remove(string folderPath);
    protected virtual void Dispose(bool disposing);
    protected virtual void Finalize();
    private List`1<ShellFileSystemFolder> get_ItemsList();
    private List`1<ShellFileSystemFolder> GetFolders();
    public sealed virtual IEnumerator`1<ShellFileSystemFolder> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool Contains(string fullPath);
    public sealed virtual bool Contains(ShellFileSystemFolder item);
    public sealed virtual int IndexOf(ShellFileSystemFolder item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.WindowsAPICodePack.Shell.ShellFileSystemFolder>.Insert(int index, ShellFileSystemFolder item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.WindowsAPICodePack.Shell.ShellFileSystemFolder>.RemoveAt(int index);
    public sealed virtual ShellFileSystemFolder get_Item(int index);
    public sealed virtual void set_Item(int index, ShellFileSystemFolder value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.WindowsAPICodePack.Shell.ShellFileSystemFolder>.CopyTo(ShellFileSystemFolder[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public static bool get_IsPlatformSupported();
}
[GuidAttribute("D9B3211D-E57F-4426-AAEF-30A806ADD397")]
[TypeLibTypeAttribute("2")]
[ClassInterfaceAttribute("0")]
internal class Microsoft.WindowsAPICodePack.Shell.ShellLibraryCoClass : object {
}
public class Microsoft.WindowsAPICodePack.Shell.ShellLink : ShellObject {
    private string _internalPath;
    private string internalTargetLocation;
    private string internalArguments;
    private string internalComments;
    public string Path { get; protected set; }
    public string TargetLocation { get; public set; }
    public ShellObject TargetShellObject { get; }
    public string Title { get; public set; }
    public string Arguments { get; }
    public string Comments { get; }
    internal ShellLink(IShellItem2 shellItem);
    public virtual string get_Path();
    protected virtual void set_Path(string value);
    public string get_TargetLocation();
    public void set_TargetLocation(string value);
    public ShellObject get_TargetShellObject();
    public string get_Title();
    public void set_Title(string value);
    public string get_Arguments();
    public string get_Comments();
}
internal static class Microsoft.WindowsAPICodePack.Shell.ShellNativeMethods : object {
    internal static int CommandLink;
    internal static UInt32 SetNote;
    internal static UInt32 GetNote;
    internal static UInt32 GetNoteLength;
    internal static UInt32 SetShield;
    internal static int MaxPath;
    internal static int InPlaceStringTruncated;
    internal static int SHCreateShellItemArrayFromDataObject(IDataObject pdo, Guid& riid, IShellItemArray& iShellItemArray);
    internal static int SHCreateItemFromParsingName(string path, IntPtr pbc, Guid& riid, IShellItem2& shellItem);
    internal static int SHCreateItemFromParsingName(string path, IntPtr pbc, Guid& riid, IShellItem& shellItem);
    internal static int PathParseIconLocation(String& pszIconFile);
    internal static int SHCreateItemFromIDList(IntPtr pidl, Guid& riid, IShellItem2& ppv);
    internal static int SHParseDisplayName(string pszName, IntPtr pbc, IntPtr& ppidl, ShellFileGetAttributesOptions sfgaoIn, ShellFileGetAttributesOptions& psfgaoOut);
    internal static int SHGetIDListFromObject(IntPtr iUnknown, IntPtr& ppidl);
    internal static int SHGetDesktopFolder(IShellFolder& ppshf);
    internal static int SHCreateShellItem(IntPtr pidlParent, IShellFolder psfParent, IntPtr pidl, IShellItem& ppsi);
    internal static UInt32 ILGetSize(IntPtr pidl);
    public static void ILFree(IntPtr pidl);
    internal static bool DeleteObject(IntPtr hObject);
    internal static int SHShowManageLibraryUI(IShellItem library, IntPtr hwndOwner, string title, string instruction, LibraryManageDialogOptions lmdOptions);
    internal static bool SHGetPathFromIDListW(IntPtr pidl, StringBuilder pszPath);
    internal static UInt32 SHChangeNotifyRegister(IntPtr windowHandle, ShellChangeNotifyEventSource sources, ShellObjectChangeTypes events, UInt32 message, int entries, SHChangeNotifyEntry& changeNotifyEntry);
    internal static IntPtr SHChangeNotification_Lock(IntPtr windowHandle, int processId, IntPtr& pidl, UInt32& lEvent);
    internal static bool SHChangeNotification_Unlock(IntPtr hLock);
    internal static bool SHChangeNotifyDeregister(UInt32 hNotify);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellNonFileSystemFolder : ShellFolder {
    internal ShellNonFileSystemFolder(IShellItem2 shellItem);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellNonFileSystemItem : ShellObject {
    internal ShellNonFileSystemItem(IShellItem2 shellItem);
}
public abstract class Microsoft.WindowsAPICodePack.Shell.ShellObject : object {
    internal IShellItem2 nativeShellItem;
    private string _internalParsingName;
    private string _internalName;
    private IntPtr _internalPIDL;
    private ShellProperties properties;
    private ShellThumbnail thumbnail;
    private ShellObject parentShellObject;
    private static MD5CryptoServiceProvider hashProvider;
    private Nullable`1<int> hashValue;
    [CompilerGeneratedAttribute]
private IPropertyStore <NativePropertyStore>k__BackingField;
    public static bool IsPlatformSupported { get; }
    internal IShellItem2 NativeShellItem2 { get; }
    internal IShellItem NativeShellItem { get; }
    internal IPropertyStore NativePropertyStore { get; internal set; }
    public ShellProperties Properties { get; }
    public string ParsingName { get; protected set; }
    public string Name { get; protected set; }
    internal IntPtr PIDL { get; internal set; }
    public bool IsLink { get; }
    public bool IsFileSystemObject { get; }
    public ShellThumbnail Thumbnail { get; }
    public ShellObject Parent { get; }
    internal ShellObject(IShellItem2 shellItem);
    private static ShellObject();
    public static ShellObject FromParsingName(string parsingName);
    public static bool get_IsPlatformSupported();
    internal virtual IShellItem2 get_NativeShellItem2();
    internal virtual IShellItem get_NativeShellItem();
    [CompilerGeneratedAttribute]
internal IPropertyStore get_NativePropertyStore();
    [CompilerGeneratedAttribute]
internal void set_NativePropertyStore(IPropertyStore value);
    public void Update(IBindCtx bindContext);
    public ShellProperties get_Properties();
    public virtual string get_ParsingName();
    protected virtual void set_ParsingName(string value);
    public virtual string get_Name();
    protected virtual void set_Name(string value);
    internal virtual IntPtr get_PIDL();
    internal virtual void set_PIDL(IntPtr value);
    public virtual string ToString();
    public virtual string GetDisplayName(DisplayNameType displayNameType);
    public bool get_IsLink();
    public bool get_IsFileSystemObject();
    public ShellThumbnail get_Thumbnail();
    public ShellObject get_Parent();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(ShellObject other);
    public virtual bool Equals(object obj);
    public static bool op_Equality(ShellObject leftShellObject, ShellObject rightShellObject);
    public static bool op_Inequality(ShellObject leftShellObject, ShellObject rightShellObject);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellObjectChangedEventArgs : ShellObjectNotificationEventArgs {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; private set; }
    internal ShellObjectChangedEventArgs(ChangeNotifyLock notifyLock);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
[FlagsAttribute]
public enum Microsoft.WindowsAPICodePack.Shell.ShellObjectChangeTypes : Enum {
    public int value__;
    public static ShellObjectChangeTypes None;
    public static ShellObjectChangeTypes ItemRename;
    public static ShellObjectChangeTypes ItemCreate;
    public static ShellObjectChangeTypes ItemDelete;
    public static ShellObjectChangeTypes DirectoryCreate;
    public static ShellObjectChangeTypes DirectoryDelete;
    public static ShellObjectChangeTypes MediaInsert;
    public static ShellObjectChangeTypes MediaRemove;
    public static ShellObjectChangeTypes DriveRemove;
    public static ShellObjectChangeTypes DriveAdd;
    public static ShellObjectChangeTypes NetShare;
    public static ShellObjectChangeTypes NetUnshare;
    public static ShellObjectChangeTypes AttributesChange;
    public static ShellObjectChangeTypes DirectoryContentsUpdate;
    public static ShellObjectChangeTypes Update;
    public static ShellObjectChangeTypes ServerDisconnect;
    public static ShellObjectChangeTypes SystemImageUpdate;
    public static ShellObjectChangeTypes DirectoryRename;
    public static ShellObjectChangeTypes FreeSpace;
    public static ShellObjectChangeTypes AssociationChange;
    public static ShellObjectChangeTypes DiskEventsMask;
    public static ShellObjectChangeTypes GlobalEventsMask;
    public static ShellObjectChangeTypes AllEventsMask;
    public static ShellObjectChangeTypes FromInterrupt;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.WindowsAPICodePack.Shell.ShellObjectCollection : object {
    private List`1<ShellObject> content;
    private bool readOnly;
    private bool isDisposed;
    public int Count { get; }
    public ShellObject Item { get; public set; }
    private int System.Collections.Generic.ICollection<Microsoft.WindowsAPICodePack.Shell.ShellObject>.Count { get; }
    public bool IsReadOnly { get; }
    internal ShellObjectCollection(IShellItemArray iArray, bool readOnly);
    public static ShellObjectCollection FromDataObject(IDataObject dataObject);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public MemoryStream BuildShellIDList();
    public sealed virtual int IndexOf(ShellObject item);
    public sealed virtual void Insert(int index, ShellObject item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual ShellObject get_Item(int index);
    public sealed virtual void set_Item(int index, ShellObject value);
    public sealed virtual void Add(ShellObject item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ShellObject item);
    public sealed virtual void CopyTo(ShellObject[] array, int arrayIndex);
    private sealed virtual override int System.Collections.Generic.ICollection<Microsoft.WindowsAPICodePack.Shell.ShellObject>.get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ShellObject item);
    private sealed virtual override IEnumerator`1<ShellObject> System.Collections.Generic.IEnumerable<Microsoft.WindowsAPICodePack.Shell.ShellObject>.GetEnumerator();
}
internal static class Microsoft.WindowsAPICodePack.Shell.ShellObjectFactory : object {
    internal static ShellObject Create(IShellItem nativeShellItem);
    private static bool IsVirtualKnownFolder(IShellItem2 nativeShellItem2);
    internal static ShellObject Create(string parsingName);
    internal static ShellObject Create(IntPtr idListPtr);
    internal static ShellObject Create(IntPtr idListPtr, ShellContainer parent);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellObjectNotificationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ShellObjectChangeTypes <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromSystemInterrupt>k__BackingField;
    public ShellObjectChangeTypes ChangeType { get; private set; }
    public bool FromSystemInterrupt { get; private set; }
    internal ShellObjectNotificationEventArgs(ChangeNotifyLock notifyLock);
    [CompilerGeneratedAttribute]
public ShellObjectChangeTypes get_ChangeType();
    [CompilerGeneratedAttribute]
private void set_ChangeType(ShellObjectChangeTypes value);
    [CompilerGeneratedAttribute]
public bool get_FromSystemInterrupt();
    [CompilerGeneratedAttribute]
private void set_FromSystemInterrupt(bool value);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellObjectRenamedEventArgs : ShellObjectChangedEventArgs {
    [CompilerGeneratedAttribute]
private string <NewPath>k__BackingField;
    public string NewPath { get; private set; }
    internal ShellObjectRenamedEventArgs(ChangeNotifyLock notifyLock);
    [CompilerGeneratedAttribute]
public string get_NewPath();
    [CompilerGeneratedAttribute]
private void set_NewPath(string value);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellObjectWatcher : object {
    private ShellObject _shellObject;
    private bool _recursive;
    private ChangeNotifyEventManager _manager;
    private IntPtr _listenerHandle;
    private UInt32 _message;
    private UInt32 _registrationId;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _running;
    private SynchronizationContext _context;
    public bool Running { get; private set; }
    public ShellObjectWatcher(ShellObject shellObject, bool recursive);
    public bool get_Running();
    private void set_Running(bool value);
    public void Start();
    public void Stop();
    private void OnWindowMessageReceived(WindowMessageEventArgs e);
    private void ThrowIfRunning();
    protected virtual void ProcessChangeNotificationEvent(WindowMessageEventArgs e);
    public void add_AllEvents(EventHandler`1<ShellObjectNotificationEventArgs> value);
    public void remove_AllEvents(EventHandler`1<ShellObjectNotificationEventArgs> value);
    public void add_GlobalEvents(EventHandler`1<ShellObjectNotificationEventArgs> value);
    public void remove_GlobalEvents(EventHandler`1<ShellObjectNotificationEventArgs> value);
    public void add_DiskEvents(EventHandler`1<ShellObjectNotificationEventArgs> value);
    public void remove_DiskEvents(EventHandler`1<ShellObjectNotificationEventArgs> value);
    public void add_ItemRenamed(EventHandler`1<ShellObjectRenamedEventArgs> value);
    public void remove_ItemRenamed(EventHandler`1<ShellObjectRenamedEventArgs> value);
    public void add_ItemCreated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_ItemCreated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_ItemDeleted(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_ItemDeleted(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_Updated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_Updated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_DirectoryUpdated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_DirectoryUpdated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_DirectoryRenamed(EventHandler`1<ShellObjectRenamedEventArgs> value);
    public void remove_DirectoryRenamed(EventHandler`1<ShellObjectRenamedEventArgs> value);
    public void add_DirectoryCreated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_DirectoryCreated(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_DirectoryDeleted(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_DirectoryDeleted(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_MediaInserted(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_MediaInserted(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_MediaRemoved(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_MediaRemoved(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_DriveAdded(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_DriveAdded(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_DriveRemoved(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_DriveRemoved(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_FolderNetworkShared(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_FolderNetworkShared(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_FolderNetworkUnshared(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_FolderNetworkUnshared(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_ServerDisconnected(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_ServerDisconnected(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_SystemImageChanged(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_SystemImageChanged(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_FreeSpaceChanged(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_FreeSpaceChanged(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void add_FileTypeAssociationChanged(EventHandler`1<ShellObjectChangedEventArgs> value);
    public void remove_FileTypeAssociationChanged(EventHandler`1<ShellObjectChangedEventArgs> value);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public class Microsoft.WindowsAPICodePack.Shell.ShellSavedSearchCollection : ShellSearchCollection {
    internal ShellSavedSearchCollection(IShellItem2 shellItem);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellSearchCollection : ShellContainer {
    internal ShellSearchCollection(IShellItem2 shellItem);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellSearchConnector : ShellSearchCollection {
    public static bool IsPlatformSupported { get; }
    internal ShellSearchConnector(IShellItem2 shellItem);
    public static bool get_IsPlatformSupported();
}
public class Microsoft.WindowsAPICodePack.Shell.ShellSearchFolder : ShellSearchCollection {
    private SearchCondition searchCondition;
    private String[] searchScopePaths;
    [CompilerGeneratedAttribute]
private ISearchFolderItemFactory <NativeSearchFolderItemFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private static Func`2<ShellContainer, string> CS$<>9__CachedAnonymousMethodDelegate1;
    internal ISearchFolderItemFactory NativeSearchFolderItemFactory { get; internal set; }
    public SearchCondition SearchCondition { get; private set; }
    public IEnumerable`1<string> SearchScopePaths { get; private set; }
    internal IShellItem NativeShellItem { get; }
    public ShellSearchFolder(SearchCondition searchCondition, ShellContainer[] searchScopePath);
    public ShellSearchFolder(SearchCondition searchCondition, String[] searchScopePath);
    [CompilerGeneratedAttribute]
internal ISearchFolderItemFactory get_NativeSearchFolderItemFactory();
    [CompilerGeneratedAttribute]
internal void set_NativeSearchFolderItemFactory(ISearchFolderItemFactory value);
    public SearchCondition get_SearchCondition();
    private void set_SearchCondition(SearchCondition value);
    public IEnumerable`1<string> get_SearchScopePaths();
    private void set_SearchScopePaths(IEnumerable`1<string> value);
    internal virtual IShellItem get_NativeShellItem();
    public void SetStacks(String[] canonicalNames);
    public void SetStacks(PropertyKey[] propertyKeys);
    public void SetDisplayName(string displayName);
    public void SetIconSize(int value);
    public void SetFolderTypeID(Guid value);
    public void SetFolderLogicalViewMode(FolderLogicalViewMode mode);
    public void SetVisibleColumns(PropertyKey[] value);
    public void SortColumns(SortColumn[] value);
    public void SetGroupColumn(PropertyKey propertyKey);
    [CompilerGeneratedAttribute]
private static string <.ctor>b__0(ShellContainer cont);
}
public class Microsoft.WindowsAPICodePack.Shell.ShellThumbnail : object {
    private IShellItem shellItemNative;
    private Size currentSize;
    private ShellThumbnailFormatOption formatOption;
    [CompilerGeneratedAttribute]
private ShellThumbnailRetrievalOption <RetrievalOption>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowBiggerSize>k__BackingField;
    public Size CurrentSize { get; public set; }
    public Bitmap Bitmap { get; }
    public BitmapSource BitmapSource { get; }
    public Icon Icon { get; }
    public Bitmap SmallBitmap { get; }
    public BitmapSource SmallBitmapSource { get; }
    public Icon SmallIcon { get; }
    public Bitmap MediumBitmap { get; }
    public BitmapSource MediumBitmapSource { get; }
    public Icon MediumIcon { get; }
    public Bitmap LargeBitmap { get; }
    public BitmapSource LargeBitmapSource { get; }
    public Icon LargeIcon { get; }
    public Bitmap ExtraLargeBitmap { get; }
    public BitmapSource ExtraLargeBitmapSource { get; }
    public Icon ExtraLargeIcon { get; }
    public ShellThumbnailRetrievalOption RetrievalOption { get; public set; }
    public ShellThumbnailFormatOption FormatOption { get; public set; }
    public bool AllowBiggerSize { get; public set; }
    internal ShellThumbnail(ShellObject shellObject);
    public Size get_CurrentSize();
    public void set_CurrentSize(Size value);
    public Bitmap get_Bitmap();
    public BitmapSource get_BitmapSource();
    public Icon get_Icon();
    public Bitmap get_SmallBitmap();
    public BitmapSource get_SmallBitmapSource();
    public Icon get_SmallIcon();
    public Bitmap get_MediumBitmap();
    public BitmapSource get_MediumBitmapSource();
    public Icon get_MediumIcon();
    public Bitmap get_LargeBitmap();
    public BitmapSource get_LargeBitmapSource();
    public Icon get_LargeIcon();
    public Bitmap get_ExtraLargeBitmap();
    public BitmapSource get_ExtraLargeBitmapSource();
    public Icon get_ExtraLargeIcon();
    [CompilerGeneratedAttribute]
public ShellThumbnailRetrievalOption get_RetrievalOption();
    [CompilerGeneratedAttribute]
public void set_RetrievalOption(ShellThumbnailRetrievalOption value);
    public ShellThumbnailFormatOption get_FormatOption();
    public void set_FormatOption(ShellThumbnailFormatOption value);
    [CompilerGeneratedAttribute]
public bool get_AllowBiggerSize();
    [CompilerGeneratedAttribute]
public void set_AllowBiggerSize(bool value);
    private SIIGBF CalculateFlags();
    private IntPtr GetHBitmap(Size size);
    private Bitmap GetBitmap(Size iconOnlySize, Size thumbnailSize);
    private Bitmap GetBitmap(Size size);
    private BitmapSource GetBitmapSource(Size iconOnlySize, Size thumbnailSize);
    private BitmapSource GetBitmapSource(Size size);
}
public enum Microsoft.WindowsAPICodePack.Shell.ShellThumbnailFormatOption : Enum {
    public int value__;
    public static ShellThumbnailFormatOption Default;
    public static ShellThumbnailFormatOption ThumbnailOnly;
    public static ShellThumbnailFormatOption IconOnly;
}
public enum Microsoft.WindowsAPICodePack.Shell.ShellThumbnailRetrievalOption : Enum {
    public int value__;
    public static ShellThumbnailRetrievalOption Default;
    public static ShellThumbnailRetrievalOption CacheOnly;
    public static ShellThumbnailRetrievalOption MemoryOnly;
}
internal enum Microsoft.WindowsAPICodePack.Shell.SICHINTF : Enum {
    public int value__;
    public static SICHINTF SICHINT_DISPLAY;
    public static SICHINTF SICHINT_CANONICAL;
    public static SICHINTF SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL;
    public static SICHINTF SICHINT_ALLFIELDS;
}
public class Microsoft.WindowsAPICodePack.Shell.SortColumn : ValueType {
    private PropertyKey propertyKey;
    private SortDirection direction;
    public PropertyKey PropertyKey { get; public set; }
    public SortDirection Direction { get; public set; }
    public SortColumn(PropertyKey propertyKey, SortDirection direction);
    public PropertyKey get_PropertyKey();
    public void set_PropertyKey(PropertyKey value);
    public SortDirection get_Direction();
    public void set_Direction(SortDirection value);
    public static bool op_Equality(SortColumn col1, SortColumn col2);
    public static bool op_Inequality(SortColumn col1, SortColumn col2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum Microsoft.WindowsAPICodePack.Shell.SortDirection : Enum {
    public int value__;
    public static SortDirection Default;
    public static SortDirection Descending;
    public static SortDirection Ascending;
}
public class Microsoft.WindowsAPICodePack.Shell.StockIcon : object {
    private StockIconIdentifier identifier;
    private StockIconSize currentSize;
    private bool linkOverlay;
    private bool selected;
    private bool invalidateIcon;
    private IntPtr hIcon;
    public bool Selected { get; public set; }
    public bool LinkOverlay { get; public set; }
    public StockIconSize CurrentSize { get; public set; }
    public StockIconIdentifier Identifier { get; public set; }
    public Bitmap Bitmap { get; }
    public BitmapSource BitmapSource { get; }
    public Icon Icon { get; }
    public StockIcon(StockIconIdentifier id);
    public StockIcon(StockIconIdentifier id, StockIconSize size, bool isLinkOverlay, bool isSelected);
    public bool get_Selected();
    public void set_Selected(bool value);
    public bool get_LinkOverlay();
    public void set_LinkOverlay(bool value);
    public StockIconSize get_CurrentSize();
    public void set_CurrentSize(StockIconSize value);
    public StockIconIdentifier get_Identifier();
    public void set_Identifier(StockIconIdentifier value);
    public Bitmap get_Bitmap();
    public BitmapSource get_BitmapSource();
    public Icon get_Icon();
    private void UpdateHIcon();
    private IntPtr GetHIcon();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public enum Microsoft.WindowsAPICodePack.Shell.StockIconIdentifier : Enum {
    public int value__;
    public static StockIconIdentifier DocumentNotAssociated;
    public static StockIconIdentifier DocumentAssociated;
    public static StockIconIdentifier Application;
    public static StockIconIdentifier Folder;
    public static StockIconIdentifier FolderOpen;
    public static StockIconIdentifier Drive525;
    public static StockIconIdentifier Drive35;
    public static StockIconIdentifier DriveRemove;
    public static StockIconIdentifier DriveFixed;
    public static StockIconIdentifier DriveNetwork;
    public static StockIconIdentifier DriveNetworkDisabled;
    public static StockIconIdentifier DriveCD;
    public static StockIconIdentifier DriveRam;
    public static StockIconIdentifier World;
    public static StockIconIdentifier Server;
    public static StockIconIdentifier Printer;
    public static StockIconIdentifier MyNetwork;
    public static StockIconIdentifier Find;
    public static StockIconIdentifier Help;
    public static StockIconIdentifier Share;
    public static StockIconIdentifier Link;
    public static StockIconIdentifier SlowFile;
    public static StockIconIdentifier Recycler;
    public static StockIconIdentifier RecyclerFull;
    public static StockIconIdentifier MediaCDAudio;
    public static StockIconIdentifier Lock;
    public static StockIconIdentifier AutoList;
    public static StockIconIdentifier PrinterNet;
    public static StockIconIdentifier ServerShare;
    public static StockIconIdentifier PrinterFax;
    public static StockIconIdentifier PrinterFaxNet;
    public static StockIconIdentifier PrinterFile;
    public static StockIconIdentifier Stack;
    public static StockIconIdentifier MediaSvcd;
    public static StockIconIdentifier StuffedFolder;
    public static StockIconIdentifier DriveUnknown;
    public static StockIconIdentifier DriveDvd;
    public static StockIconIdentifier MediaDvd;
    public static StockIconIdentifier MediaDvdRam;
    public static StockIconIdentifier MediaDvdRW;
    public static StockIconIdentifier MediaDvdR;
    public static StockIconIdentifier MediaDvdRom;
    public static StockIconIdentifier MediaCDAudioPlus;
    public static StockIconIdentifier MediaCDRW;
    public static StockIconIdentifier MediaCDR;
    public static StockIconIdentifier MediaCDBurn;
    public static StockIconIdentifier MediaBlankCD;
    public static StockIconIdentifier MediaCDRom;
    public static StockIconIdentifier AudioFiles;
    public static StockIconIdentifier ImageFiles;
    public static StockIconIdentifier VideoFiles;
    public static StockIconIdentifier MixedFiles;
    public static StockIconIdentifier FolderBack;
    public static StockIconIdentifier FolderFront;
    public static StockIconIdentifier Shield;
    public static StockIconIdentifier Warning;
    public static StockIconIdentifier Info;
    public static StockIconIdentifier Error;
    public static StockIconIdentifier Key;
    public static StockIconIdentifier Software;
    public static StockIconIdentifier Rename;
    public static StockIconIdentifier Delete;
    public static StockIconIdentifier MediaAudioDvd;
    public static StockIconIdentifier MediaMovieDvd;
    public static StockIconIdentifier MediaEnhancedCD;
    public static StockIconIdentifier MediaEnhancedDvd;
    public static StockIconIdentifier MediaHDDvd;
    public static StockIconIdentifier MediaBluRay;
    public static StockIconIdentifier MediaVcd;
    public static StockIconIdentifier MediaDvdPlusR;
    public static StockIconIdentifier MediaDvdPlusRW;
    public static StockIconIdentifier DesktopPC;
    public static StockIconIdentifier MobilePC;
    public static StockIconIdentifier Users;
    public static StockIconIdentifier MediaSmartMedia;
    public static StockIconIdentifier MediaCompactFlash;
    public static StockIconIdentifier DeviceCellPhone;
    public static StockIconIdentifier DeviceCamera;
    public static StockIconIdentifier DeviceVideoCamera;
    public static StockIconIdentifier DeviceAudioPlayer;
    public static StockIconIdentifier NetworkConnect;
    public static StockIconIdentifier Internet;
    public static StockIconIdentifier ZipFile;
    public static StockIconIdentifier Settings;
    public static StockIconIdentifier DriveHDDVD;
    public static StockIconIdentifier DriveBluRay;
    public static StockIconIdentifier MediaHDDVDROM;
    public static StockIconIdentifier MediaHDDVDR;
    public static StockIconIdentifier MediaHDDVDRAM;
    public static StockIconIdentifier MediaBluRayROM;
    public static StockIconIdentifier MediaBluRayR;
    public static StockIconIdentifier MediaBluRayRE;
    public static StockIconIdentifier ClusteredDisk;
}
public class Microsoft.WindowsAPICodePack.Shell.StockIcons : object {
    private IDictionary`2<StockIconIdentifier, StockIcon> stockIconCache;
    private StockIconSize defaultSize;
    private bool isSelected;
    private bool isLinkOverlay;
    public StockIconSize DefaultSize { get; }
    public bool DefaultLinkOverlay { get; }
    public bool DefaultSelectedState { get; }
    public ICollection`1<StockIcon> AllStockIcons { get; }
    public StockIcon DocumentNotAssociated { get; }
    public StockIcon DocumentAssociated { get; }
    public StockIcon Application { get; }
    public StockIcon Folder { get; }
    public StockIcon FolderOpen { get; }
    public StockIcon Drive525 { get; }
    public StockIcon Drive35 { get; }
    public StockIcon DriveRemove { get; }
    public StockIcon DriveFixed { get; }
    public StockIcon DriveNetwork { get; }
    public StockIcon DriveNetworkDisabled { get; }
    public StockIcon DriveCD { get; }
    public StockIcon DriveRam { get; }
    public StockIcon World { get; }
    public StockIcon Server { get; }
    public StockIcon Printer { get; }
    public StockIcon MyNetwork { get; }
    public StockIcon Find { get; }
    public StockIcon Help { get; }
    public StockIcon Share { get; }
    public StockIcon Link { get; }
    public StockIcon SlowFile { get; }
    public StockIcon Recycler { get; }
    public StockIcon RecyclerFull { get; }
    public StockIcon MediaCDAudio { get; }
    public StockIcon Lock { get; }
    public StockIcon AutoList { get; }
    public StockIcon PrinterNet { get; }
    public StockIcon ServerShare { get; }
    public StockIcon PrinterFax { get; }
    public StockIcon PrinterFaxNet { get; }
    public StockIcon PrinterFile { get; }
    public StockIcon Stack { get; }
    public StockIcon MediaSvcd { get; }
    public StockIcon StuffedFolder { get; }
    public StockIcon DriveUnknown { get; }
    public StockIcon DriveDvd { get; }
    public StockIcon MediaDvd { get; }
    public StockIcon MediaDvdRam { get; }
    public StockIcon MediaDvdRW { get; }
    public StockIcon MediaDvdR { get; }
    public StockIcon MediaDvdRom { get; }
    public StockIcon MediaCDAudioPlus { get; }
    public StockIcon MediaCDRW { get; }
    public StockIcon MediaCDR { get; }
    public StockIcon MediaCDBurn { get; }
    public StockIcon MediaBlankCD { get; }
    public StockIcon MediaCDRom { get; }
    public StockIcon AudioFiles { get; }
    public StockIcon ImageFiles { get; }
    public StockIcon VideoFiles { get; }
    public StockIcon MixedFiles { get; }
    public StockIcon FolderBack { get; }
    public StockIcon FolderFront { get; }
    public StockIcon Shield { get; }
    public StockIcon Warning { get; }
    public StockIcon Info { get; }
    public StockIcon Error { get; }
    public StockIcon Key { get; }
    public StockIcon Software { get; }
    public StockIcon Rename { get; }
    public StockIcon Delete { get; }
    public StockIcon MediaAudioDvd { get; }
    public StockIcon MediaMovieDvd { get; }
    public StockIcon MediaEnhancedCD { get; }
    public StockIcon MediaEnhancedDvd { get; }
    public StockIcon MediaHDDvd { get; }
    public StockIcon MediaBluRay { get; }
    public StockIcon MediaVcd { get; }
    public StockIcon MediaDvdPlusR { get; }
    public StockIcon MediaDvdPlusRW { get; }
    public StockIcon DesktopPC { get; }
    public StockIcon MobilePC { get; }
    public StockIcon Users { get; }
    public StockIcon MediaSmartMedia { get; }
    public StockIcon MediaCompactFlash { get; }
    public StockIcon DeviceCellPhone { get; }
    public StockIcon DeviceCamera { get; }
    public StockIcon DeviceVideoCamera { get; }
    public StockIcon DeviceAudioPlayer { get; }
    public StockIcon NetworkConnect { get; }
    public StockIcon Internet { get; }
    public StockIcon ZipFile { get; }
    public StockIcon Settings { get; }
    public StockIcon DriveHDDVD { get; }
    public StockIcon DriveBluRay { get; }
    public StockIcon MediaHDDVDROM { get; }
    public StockIcon MediaHDDVDR { get; }
    public StockIcon MediaHDDVDRAM { get; }
    public StockIcon MediaBluRayROM { get; }
    public StockIcon MediaBluRayR { get; }
    public StockIcon MediaBluRayRE { get; }
    public StockIcon ClusteredDisk { get; }
    public StockIcons(StockIconSize size, bool linkOverlay, bool selected);
    public StockIconSize get_DefaultSize();
    public bool get_DefaultLinkOverlay();
    public bool get_DefaultSelectedState();
    public ICollection`1<StockIcon> get_AllStockIcons();
    public StockIcon get_DocumentNotAssociated();
    public StockIcon get_DocumentAssociated();
    public StockIcon get_Application();
    public StockIcon get_Folder();
    public StockIcon get_FolderOpen();
    public StockIcon get_Drive525();
    public StockIcon get_Drive35();
    public StockIcon get_DriveRemove();
    public StockIcon get_DriveFixed();
    public StockIcon get_DriveNetwork();
    public StockIcon get_DriveNetworkDisabled();
    public StockIcon get_DriveCD();
    public StockIcon get_DriveRam();
    public StockIcon get_World();
    public StockIcon get_Server();
    public StockIcon get_Printer();
    public StockIcon get_MyNetwork();
    public StockIcon get_Find();
    public StockIcon get_Help();
    public StockIcon get_Share();
    public StockIcon get_Link();
    public StockIcon get_SlowFile();
    public StockIcon get_Recycler();
    public StockIcon get_RecyclerFull();
    public StockIcon get_MediaCDAudio();
    public StockIcon get_Lock();
    public StockIcon get_AutoList();
    public StockIcon get_PrinterNet();
    public StockIcon get_ServerShare();
    public StockIcon get_PrinterFax();
    public StockIcon get_PrinterFaxNet();
    public StockIcon get_PrinterFile();
    public StockIcon get_Stack();
    public StockIcon get_MediaSvcd();
    public StockIcon get_StuffedFolder();
    public StockIcon get_DriveUnknown();
    public StockIcon get_DriveDvd();
    public StockIcon get_MediaDvd();
    public StockIcon get_MediaDvdRam();
    public StockIcon get_MediaDvdRW();
    public StockIcon get_MediaDvdR();
    public StockIcon get_MediaDvdRom();
    public StockIcon get_MediaCDAudioPlus();
    public StockIcon get_MediaCDRW();
    public StockIcon get_MediaCDR();
    public StockIcon get_MediaCDBurn();
    public StockIcon get_MediaBlankCD();
    public StockIcon get_MediaCDRom();
    public StockIcon get_AudioFiles();
    public StockIcon get_ImageFiles();
    public StockIcon get_VideoFiles();
    public StockIcon get_MixedFiles();
    public StockIcon get_FolderBack();
    public StockIcon get_FolderFront();
    public StockIcon get_Shield();
    public StockIcon get_Warning();
    public StockIcon get_Info();
    public StockIcon get_Error();
    public StockIcon get_Key();
    public StockIcon get_Software();
    public StockIcon get_Rename();
    public StockIcon get_Delete();
    public StockIcon get_MediaAudioDvd();
    public StockIcon get_MediaMovieDvd();
    public StockIcon get_MediaEnhancedCD();
    public StockIcon get_MediaEnhancedDvd();
    public StockIcon get_MediaHDDvd();
    public StockIcon get_MediaBluRay();
    public StockIcon get_MediaVcd();
    public StockIcon get_MediaDvdPlusR();
    public StockIcon get_MediaDvdPlusRW();
    public StockIcon get_DesktopPC();
    public StockIcon get_MobilePC();
    public StockIcon get_Users();
    public StockIcon get_MediaSmartMedia();
    public StockIcon get_MediaCompactFlash();
    public StockIcon get_DeviceCellPhone();
    public StockIcon get_DeviceCamera();
    public StockIcon get_DeviceVideoCamera();
    public StockIcon get_DeviceAudioPlayer();
    public StockIcon get_NetworkConnect();
    public StockIcon get_Internet();
    public StockIcon get_ZipFile();
    public StockIcon get_Settings();
    public StockIcon get_DriveHDDVD();
    public StockIcon get_DriveBluRay();
    public StockIcon get_MediaHDDVDROM();
    public StockIcon get_MediaHDDVDR();
    public StockIcon get_MediaHDDVDRAM();
    public StockIcon get_MediaBluRayROM();
    public StockIcon get_MediaBluRayR();
    public StockIcon get_MediaBluRayRE();
    public StockIcon get_ClusteredDisk();
    private StockIcon GetStockIcon(StockIconIdentifier stockIconIdentifier);
    private ICollection`1<StockIcon> GetAllStockIcons();
}
public enum Microsoft.WindowsAPICodePack.Shell.StockIconSize : Enum {
    public int value__;
    public static StockIconSize Small;
    public static StockIconSize Large;
    public static StockIconSize ShellSize;
}
internal static class Microsoft.WindowsAPICodePack.Shell.StockIconsNativeMethods : object {
    internal static HResult SHGetStockIconInfo(StockIconIdentifier identifier, StockIconOptions flags, StockIconInfo& info);
}
public enum Microsoft.WindowsAPICodePack.Shell.StructuredQueryMultipleOption : Enum {
    public int value__;
    public static StructuredQueryMultipleOption VirtualProperty;
    public static StructuredQueryMultipleOption DefaultProperty;
    public static StructuredQueryMultipleOption GeneratorForType;
    public static StructuredQueryMultipleOption MapProperty;
}
public enum Microsoft.WindowsAPICodePack.Shell.StructuredQuerySingleOption : Enum {
    public int value__;
    public static StructuredQuerySingleOption Schema;
    public static StructuredQuerySingleOption Locale;
    public static StructuredQuerySingleOption WordBreaker;
    public static StructuredQuerySingleOption NaturalSyntax;
    public static StructuredQuerySingleOption AutomaticWildcard;
    public static StructuredQuerySingleOption TraceLevel;
    public static StructuredQuerySingleOption LanguageKeywords;
    public static StructuredQuerySingleOption Syntax;
    public static StructuredQuerySingleOption TimeZone;
    public static StructuredQuerySingleOption ImplicitConnector;
    public static StructuredQuerySingleOption ConnectorCase;
}
public class Microsoft.WindowsAPICodePack.Shell.SystemImageUpdatedEventArgs : ShellObjectNotificationEventArgs {
    [CompilerGeneratedAttribute]
private int <ImageIndex>k__BackingField;
    public int ImageIndex { get; private set; }
    internal SystemImageUpdatedEventArgs(ChangeNotifyLock notifyLock);
    [CompilerGeneratedAttribute]
public int get_ImageIndex();
    [CompilerGeneratedAttribute]
private void set_ImageIndex(int value);
}
public class Microsoft.WindowsAPICodePack.Shell.WindowMessageEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private Message <Message>k__BackingField;
    public Message Message { get; private set; }
    internal WindowMessageEventArgs(Message msg);
    [CompilerGeneratedAttribute]
public Message get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(Message value);
}
public enum Microsoft.WindowsAPICodePack.Shell.WindowShowCommand : Enum {
    public int value__;
    public static WindowShowCommand Hide;
    public static WindowShowCommand Normal;
    public static WindowShowCommand Minimized;
    public static WindowShowCommand Maximized;
    public static WindowShowCommand ShowNoActivate;
    public static WindowShowCommand Show;
    public static WindowShowCommand Minimize;
    public static WindowShowCommand ShowMinimizedNoActivate;
    public static WindowShowCommand ShowNA;
    public static WindowShowCommand Restore;
    public static WindowShowCommand Default;
    public static WindowShowCommand ForceMinimize;
}
[FlagsAttribute]
internal enum Microsoft.WindowsAPICodePack.Shell.WindowStyles : Enum {
    public int value__;
    public static WindowStyles Border;
    public static WindowStyles Caption;
    public static WindowStyles Child;
    public static WindowStyles ChildWindow;
    public static WindowStyles ClipChildren;
    public static WindowStyles ClipSiblings;
    public static WindowStyles Disabled;
    public static WindowStyles DialogFrame;
    public static WindowStyles Group;
    public static WindowStyles HorizontalScroll;
    public static WindowStyles Iconic;
    public static WindowStyles Maximize;
    public static WindowStyles MaximizeBox;
    public static WindowStyles Minimize;
    public static WindowStyles MinimizeBox;
    public static WindowStyles Overlapped;
    public static WindowStyles Popup;
    public static WindowStyles SizeBox;
    public static WindowStyles SystemMenu;
    public static WindowStyles Tabstop;
    public static WindowStyles ThickFrame;
    public static WindowStyles Tiled;
    public static WindowStyles Visible;
    public static WindowStyles VerticalScroll;
    public static WindowStyles TiledWindowMask;
    public static WindowStyles PopupWindowMask;
    public static WindowStyles OverlappedWindowMask;
}
internal static class Microsoft.WindowsAPICodePack.Shell.WindowUtilities : object {
    internal static Point GetParentOffsetOfChild(IntPtr hwnd, IntPtr hwndParent);
    internal static Size GetNonClientArea(IntPtr hwnd);
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("77F10CF0-3DB5-4966-B520-B7C54FD35ED6")]
internal class Microsoft.WindowsAPICodePack.Taskbar.CDestinationList : object {
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("2D3468C1-36A7-43B6-AC24-D3F02FD9607A")]
internal class Microsoft.WindowsAPICodePack.Taskbar.CEnumerableObjectCollection : object {
}
[GuidAttribute("56FDF344-FD6D-11d0-958A-006097C9A090")]
[ClassInterfaceAttribute("0")]
internal class Microsoft.WindowsAPICodePack.Taskbar.CTaskbarList : object {
}
[GuidAttribute("6332DEBF-87B5-4670-90C0-5E57B408A49E")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Taskbar.ICustomDestinationList {
    public abstract virtual void SetAppID(string pszAppID);
    public abstract virtual HResult BeginList(UInt32& cMaxSlots, Guid& riid, Object& ppvObject);
    public abstract virtual HResult AppendCategory(string pszCategory, IObjectArray poa);
    public abstract virtual void AppendKnownCategory(KnownDestinationCategory category);
    public abstract virtual HResult AddUserTasks(IObjectArray poa);
    public abstract virtual void CommitList();
    public abstract virtual void GetRemovedDestinations(Guid& riid, Object& ppvObject);
    public abstract virtual void DeleteList(string pszAppID);
    public abstract virtual void AbortList();
}
public interface Microsoft.WindowsAPICodePack.Taskbar.IJumpListItem {
    public string Path { get; public set; }
    public abstract virtual string get_Path();
    public abstract virtual void set_Path(string value);
}
[GuidAttribute("92CA9DCD-5622-4BBA-A805-5E9F541BD8C9")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Taskbar.IObjectArray {
    public abstract virtual void GetCount(UInt32& cObjects);
    public abstract virtual void GetAt(UInt32 iIndex, Guid& riid, Object& ppvObject);
}
[GuidAttribute("5632B1A4-E38A-400A-928A-D4CD63230295")]
[InterfaceTypeAttribute("1")]
internal interface Microsoft.WindowsAPICodePack.Taskbar.IObjectCollection {
    public abstract virtual void GetCount(UInt32& cObjects);
    public abstract virtual void GetAt(UInt32 iIndex, Guid& riid, Object& ppvObject);
    public abstract virtual void AddObject(object pvObject);
    public abstract virtual void AddFromArray(IObjectArray poaSource);
    public abstract virtual void RemoveObject(UInt32 uiIndex);
    public abstract virtual void Clear();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("c43dc798-95d1-4bea-9030-bb99e2983a1a")]
internal interface Microsoft.WindowsAPICodePack.Taskbar.ITaskbarList4 {
    public abstract virtual void HrInit();
    public abstract virtual void AddTab(IntPtr hwnd);
    public abstract virtual void DeleteTab(IntPtr hwnd);
    public abstract virtual void ActivateTab(IntPtr hwnd);
    public abstract virtual void SetActiveAlt(IntPtr hwnd);
    public abstract virtual void MarkFullscreenWindow(IntPtr hwnd, bool fFullscreen);
    public abstract virtual void SetProgressValue(IntPtr hwnd, ulong ullCompleted, ulong ullTotal);
    public abstract virtual void SetProgressState(IntPtr hwnd, TaskbarProgressBarStatus tbpFlags);
    public abstract virtual void RegisterTab(IntPtr hwndTab, IntPtr hwndMDI);
    public abstract virtual void UnregisterTab(IntPtr hwndTab);
    public abstract virtual void SetTabOrder(IntPtr hwndTab, IntPtr hwndInsertBefore);
    public abstract virtual void SetTabActive(IntPtr hwndTab, IntPtr hwndInsertBefore, UInt32 dwReserved);
    public abstract virtual HResult ThumbBarAddButtons(IntPtr hwnd, UInt32 cButtons, ThumbButton[] pButtons);
    public abstract virtual HResult ThumbBarUpdateButtons(IntPtr hwnd, UInt32 cButtons, ThumbButton[] pButtons);
    public abstract virtual void ThumbBarSetImageList(IntPtr hwnd, IntPtr himl);
    public abstract virtual void SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string pszDescription);
    public abstract virtual void SetThumbnailTooltip(IntPtr hwnd, string pszTip);
    public abstract virtual void SetThumbnailClip(IntPtr hwnd, IntPtr prcClip);
    public abstract virtual void SetTabProperties(IntPtr hwndTab, SetTabPropertiesOption stpFlags);
}
public class Microsoft.WindowsAPICodePack.Taskbar.JumpList : object {
    private object syncLock;
    private ICustomDestinationList customDestinationList;
    private JumpListCustomCategoryCollection customCategoriesCollection;
    private JumpListItemCollection`1<JumpListTask> userTasks;
    private int knownCategoryOrdinalPosition;
    private EventHandler`1<UserRemovedJumpListItemsEventArgs> JumpListItemsRemoved;
    [CompilerGeneratedAttribute]
private JumpListKnownCategoryType <KnownCategoryToDisplay>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationId>k__BackingField;
    [CompilerGeneratedAttribute]
private static EventHandler`1<UserRemovedJumpListItemsEventArgs> CS$<>9__CachedAnonymousMethodDelegate1;
    public UInt32 MaxSlotsInList { get; }
    public JumpListKnownCategoryType KnownCategoryToDisplay { get; public set; }
    public int KnownCategoryOrdinalPosition { get; public set; }
    public string ApplicationId { get; private set; }
    public IEnumerable RemovedDestinations { get; }
    internal JumpList(string appID);
    internal JumpList(string appID, Window window);
    private JumpList(string appID, IntPtr windowHandle);
    public static JumpList CreateJumpList();
    public static JumpList CreateJumpListForIndividualWindow(string appId, IntPtr windowHandle);
    public static JumpList CreateJumpListForIndividualWindow(string appId, Window window);
    public void AddCustomCategories(JumpListCustomCategory[] customCategories);
    public void AddUserTasks(JumpListTask[] tasks);
    public void ClearAllUserTasks();
    public UInt32 get_MaxSlotsInList();
    [CompilerGeneratedAttribute]
public JumpListKnownCategoryType get_KnownCategoryToDisplay();
    [CompilerGeneratedAttribute]
public void set_KnownCategoryToDisplay(JumpListKnownCategoryType value);
    public int get_KnownCategoryOrdinalPosition();
    public void set_KnownCategoryOrdinalPosition(int value);
    [CompilerGeneratedAttribute]
public string get_ApplicationId();
    [CompilerGeneratedAttribute]
private void set_ApplicationId(string value);
    public static void AddToRecent(string destination);
    public void Refresh();
    private void BeginList();
    public void add_JumpListItemsRemoved(EventHandler`1<UserRemovedJumpListItemsEventArgs> value);
    public void remove_JumpListItemsRemoved(EventHandler`1<UserRemovedJumpListItemsEventArgs> value);
    public IEnumerable get_RemovedDestinations();
    private IEnumerable`1<string> ProcessDeletedItems(IObjectArray removedItems);
    private string RemoveCustomCategoryItem(IShellItem item);
    private string RemoveCustomCategoryLink(IShellLinkW link);
    private void AppendCustomCategories();
    private void AppendTaskList();
    private void AppendKnownCategories();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, UserRemovedJumpListItemsEventArgs param1);
}
public class Microsoft.WindowsAPICodePack.Taskbar.JumpListCustomCategory : object {
    private string name;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private JumpListItemCollection`1<IJumpListItem> <JumpListItems>k__BackingField;
    [CompilerGeneratedAttribute]
private static NotifyCollectionChangedEventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    internal JumpListItemCollection`1<IJumpListItem> JumpListItems { get; private set; }
    public string Name { get; public set; }
    public JumpListCustomCategory(string categoryName);
    [CompilerGeneratedAttribute]
internal JumpListItemCollection`1<IJumpListItem> get_JumpListItems();
    [CompilerGeneratedAttribute]
private void set_JumpListItems(JumpListItemCollection`1<IJumpListItem> value);
    public string get_Name();
    public void set_Name(string value);
    public void AddJumpListItems(IJumpListItem[] items);
    internal void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    internal void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    internal void OnJumpListCollectionChanged(object sender, NotifyCollectionChangedEventArgs args);
    internal void RemoveJumpListItem(string path);
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, NotifyCollectionChangedEventArgs param1);
}
internal class Microsoft.WindowsAPICodePack.Taskbar.JumpListCustomCategoryCollection : object {
    private List`1<JumpListCustomCategory> categories;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private static NotifyCollectionChangedEventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsReadOnly { get; public set; }
    public int Count { get; }
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    public sealed virtual int get_Count();
    public sealed virtual void Add(JumpListCustomCategory category);
    public sealed virtual bool Remove(JumpListCustomCategory category);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JumpListCustomCategory category);
    public sealed virtual void CopyTo(JumpListCustomCategory[] array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<JumpListCustomCategory> System.Collections.Generic.IEnumerable<Microsoft.WindowsAPICodePack.Taskbar.JumpListCustomCategory>.GetEnumerator();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, NotifyCollectionChangedEventArgs param1);
}
public class Microsoft.WindowsAPICodePack.Taskbar.JumpListItem : ShellFile {
    public string Path { get; public set; }
    public JumpListItem(string path);
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
}
internal class Microsoft.WindowsAPICodePack.Taskbar.JumpListItemCollection`1 : object {
    private List`1<T> items;
    private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private static NotifyCollectionChangedEventHandler CS$<>9__CachedAnonymousMethodDelegate1;
    public bool IsReadOnly { get; public set; }
    public int Count { get; }
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    public sealed virtual int get_Count();
    public sealed virtual void Add(T item);
    public sealed virtual bool Remove(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    [CompilerGeneratedAttribute]
private static void <.ctor>b__0(object param0, NotifyCollectionChangedEventArgs param1);
}
public enum Microsoft.WindowsAPICodePack.Taskbar.JumpListKnownCategoryType : Enum {
    public int value__;
    public static JumpListKnownCategoryType Neither;
    public static JumpListKnownCategoryType Recent;
    public static JumpListKnownCategoryType Frequent;
}
public class Microsoft.WindowsAPICodePack.Taskbar.JumpListLink : JumpListTask {
    internal static PropertyKey PKEY_Title;
    private string title;
    private string path;
    private IPropertyStore nativePropertyStore;
    private IShellLinkW nativeShellLink;
    [CompilerGeneratedAttribute]
private IconReference <IconReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkingDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowShowCommand <ShowCommand>k__BackingField;
    public string Title { get; public set; }
    public string Path { get; public set; }
    public IconReference IconReference { get; public set; }
    public string Arguments { get; public set; }
    public string WorkingDirectory { get; public set; }
    public WindowShowCommand ShowCommand { get; public set; }
    internal IShellLinkW NativeShellLink { get; }
    public JumpListLink(string pathValue, string titleValue);
    private static JumpListLink();
    public string get_Title();
    public void set_Title(string value);
    public sealed virtual string get_Path();
    public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public IconReference get_IconReference();
    [CompilerGeneratedAttribute]
public void set_IconReference(IconReference value);
    [CompilerGeneratedAttribute]
public string get_Arguments();
    [CompilerGeneratedAttribute]
public void set_Arguments(string value);
    [CompilerGeneratedAttribute]
public string get_WorkingDirectory();
    [CompilerGeneratedAttribute]
public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public WindowShowCommand get_ShowCommand();
    [CompilerGeneratedAttribute]
public void set_ShowCommand(WindowShowCommand value);
    internal virtual IShellLinkW get_NativeShellLink();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public class Microsoft.WindowsAPICodePack.Taskbar.JumpListSeparator : JumpListTask {
    internal static PropertyKey PKEY_AppUserModel_IsDestListSeparator;
    private IPropertyStore nativePropertyStore;
    private IShellLinkW nativeShellLink;
    internal IShellLinkW NativeShellLink { get; }
    private static JumpListSeparator();
    internal virtual IShellLinkW get_NativeShellLink();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
public abstract class Microsoft.WindowsAPICodePack.Taskbar.JumpListTask : object {
    internal IShellLinkW NativeShellLink { get; }
    internal abstract virtual IShellLinkW get_NativeShellLink();
}
internal enum Microsoft.WindowsAPICodePack.Taskbar.KnownDestinationCategory : Enum {
    public int value__;
    public static KnownDestinationCategory Frequent;
    public static KnownDestinationCategory Recent;
}
internal enum Microsoft.WindowsAPICodePack.Taskbar.SetTabPropertiesOption : Enum {
    public int value__;
    public static SetTabPropertiesOption None;
    public static SetTabPropertiesOption UseAppThumbnailAlways;
    public static SetTabPropertiesOption UseAppThumbnailWhenActive;
    public static SetTabPropertiesOption UseAppPeekAlways;
    public static SetTabPropertiesOption UseAppPeekWhenActive;
}
internal enum Microsoft.WindowsAPICodePack.Taskbar.ShellAddToRecentDocs : Enum {
    public int value__;
    public static ShellAddToRecentDocs Pidl;
    public static ShellAddToRecentDocs PathA;
    public static ShellAddToRecentDocs PathW;
    public static ShellAddToRecentDocs AppIdInfo;
    public static ShellAddToRecentDocs AppIdInfoIdList;
    public static ShellAddToRecentDocs Link;
    public static ShellAddToRecentDocs AppIdInfoLink;
}
public class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnail : object {
    private TaskbarWindow _taskbarWindow;
    private bool _addedToTaskbar;
    private string _title;
    private string _tooltip;
    private Nullable`1<Rectangle> _clippingRectangle;
    private EventHandler TitleChanged;
    private EventHandler TooltipChanged;
    private EventHandler`1<TabbedThumbnailClosedEventArgs> TabbedThumbnailClosed;
    private EventHandler`1<TabbedThumbnailEventArgs> TabbedThumbnailMaximized;
    private EventHandler`1<TabbedThumbnailEventArgs> TabbedThumbnailMinimized;
    private EventHandler`1<TabbedThumbnailEventArgs> TabbedThumbnailActivated;
    private EventHandler`1<TabbedThumbnailBitmapRequestedEventArgs> TabbedThumbnailBitmapRequested;
    [CompilerGeneratedAttribute]
private IntPtr <WindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <ParentWindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <WindowsControl>k__BackingField;
    [CompilerGeneratedAttribute]
private Window <WindowsControlParentWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemovedFromTaskbar>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <CurrentHBitmap>k__BackingField;
    [CompilerGeneratedAttribute]
private Icon <Icon>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisplayFrameAroundBitmap>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Vector> <PeekOffset>k__BackingField;
    internal IntPtr WindowHandle { get; internal set; }
    internal IntPtr ParentWindowHandle { get; internal set; }
    internal UIElement WindowsControl { get; internal set; }
    internal Window WindowsControlParentWindow { get; internal set; }
    internal TaskbarWindow TaskbarWindow { get; internal set; }
    internal bool AddedToTaskbar { get; internal set; }
    internal bool RemovedFromTaskbar { get; internal set; }
    public string Title { get; public set; }
    public string Tooltip { get; public set; }
    public Nullable`1<Rectangle> ClippingRectangle { get; public set; }
    internal IntPtr CurrentHBitmap { get; internal set; }
    internal Icon Icon { get; private set; }
    public bool DisplayFrameAroundBitmap { get; public set; }
    public Nullable`1<Vector> PeekOffset { get; public set; }
    public TabbedThumbnail(IntPtr parentWindowHandle, IntPtr windowHandle);
    public TabbedThumbnail(IntPtr parentWindowHandle, Control control);
    public TabbedThumbnail(Window parentWindow, UIElement windowsControl, Vector peekOffset);
    [CompilerGeneratedAttribute]
internal IntPtr get_WindowHandle();
    [CompilerGeneratedAttribute]
internal void set_WindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
internal IntPtr get_ParentWindowHandle();
    [CompilerGeneratedAttribute]
internal void set_ParentWindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
internal UIElement get_WindowsControl();
    [CompilerGeneratedAttribute]
internal void set_WindowsControl(UIElement value);
    [CompilerGeneratedAttribute]
internal Window get_WindowsControlParentWindow();
    [CompilerGeneratedAttribute]
internal void set_WindowsControlParentWindow(Window value);
    internal TaskbarWindow get_TaskbarWindow();
    internal void set_TaskbarWindow(TaskbarWindow value);
    internal bool get_AddedToTaskbar();
    internal void set_AddedToTaskbar(bool value);
    [CompilerGeneratedAttribute]
internal bool get_RemovedFromTaskbar();
    [CompilerGeneratedAttribute]
internal void set_RemovedFromTaskbar(bool value);
    public string get_Title();
    public void set_Title(string value);
    public string get_Tooltip();
    public void set_Tooltip(string value);
    public void SetWindowIcon(Icon icon);
    public void SetWindowIcon(IntPtr iconHandle);
    public Nullable`1<Rectangle> get_ClippingRectangle();
    public void set_ClippingRectangle(Nullable`1<Rectangle> value);
    [CompilerGeneratedAttribute]
internal IntPtr get_CurrentHBitmap();
    [CompilerGeneratedAttribute]
internal void set_CurrentHBitmap(IntPtr value);
    [CompilerGeneratedAttribute]
internal Icon get_Icon();
    [CompilerGeneratedAttribute]
private void set_Icon(Icon value);
    public void SetImage(Bitmap bitmap);
    public void SetImage(BitmapSource bitmapSource);
    internal void SetImage(IntPtr hBitmap);
    [CompilerGeneratedAttribute]
public bool get_DisplayFrameAroundBitmap();
    [CompilerGeneratedAttribute]
public void set_DisplayFrameAroundBitmap(bool value);
    public void InvalidatePreview();
    [CompilerGeneratedAttribute]
public Nullable`1<Vector> get_PeekOffset();
    [CompilerGeneratedAttribute]
public void set_PeekOffset(Nullable`1<Vector> value);
    public void add_TitleChanged(EventHandler value);
    public void remove_TitleChanged(EventHandler value);
    public void add_TooltipChanged(EventHandler value);
    public void remove_TooltipChanged(EventHandler value);
    public void add_TabbedThumbnailClosed(EventHandler`1<TabbedThumbnailClosedEventArgs> value);
    public void remove_TabbedThumbnailClosed(EventHandler`1<TabbedThumbnailClosedEventArgs> value);
    public void add_TabbedThumbnailMaximized(EventHandler`1<TabbedThumbnailEventArgs> value);
    public void remove_TabbedThumbnailMaximized(EventHandler`1<TabbedThumbnailEventArgs> value);
    public void add_TabbedThumbnailMinimized(EventHandler`1<TabbedThumbnailEventArgs> value);
    public void remove_TabbedThumbnailMinimized(EventHandler`1<TabbedThumbnailEventArgs> value);
    public void add_TabbedThumbnailActivated(EventHandler`1<TabbedThumbnailEventArgs> value);
    public void remove_TabbedThumbnailActivated(EventHandler`1<TabbedThumbnailEventArgs> value);
    public void add_TabbedThumbnailBitmapRequested(EventHandler`1<TabbedThumbnailBitmapRequestedEventArgs> value);
    public void remove_TabbedThumbnailBitmapRequested(EventHandler`1<TabbedThumbnailBitmapRequestedEventArgs> value);
    internal void OnTabbedThumbnailMaximized();
    internal void OnTabbedThumbnailMinimized();
    internal bool OnTabbedThumbnailClosed();
    internal void OnTabbedThumbnailActivated();
    internal void OnTabbedThumbnailBitmapRequested();
    private TabbedThumbnailClosedEventArgs GetTabbedThumbnailClosingEventArgs();
    private TabbedThumbnailEventArgs GetTabbedThumbnailEventArgs();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnailBitmapRequestedEventArgs : TabbedThumbnailEventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    public TabbedThumbnailBitmapRequestedEventArgs(IntPtr windowHandle);
    public TabbedThumbnailBitmapRequestedEventArgs(UIElement windowsControl);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnailClosedEventArgs : TabbedThumbnailEventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    public TabbedThumbnailClosedEventArgs(IntPtr windowHandle);
    public TabbedThumbnailClosedEventArgs(UIElement windowsControl);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnailEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IntPtr <WindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <WindowsControl>k__BackingField;
    public IntPtr WindowHandle { get; private set; }
    public UIElement WindowsControl { get; private set; }
    public TabbedThumbnailEventArgs(IntPtr windowHandle);
    public TabbedThumbnailEventArgs(UIElement windowsControl);
    [CompilerGeneratedAttribute]
public IntPtr get_WindowHandle();
    [CompilerGeneratedAttribute]
private void set_WindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public UIElement get_WindowsControl();
    [CompilerGeneratedAttribute]
private void set_WindowsControl(UIElement value);
}
public class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnailManager : object {
    private Dictionary`2<IntPtr, TabbedThumbnail> _tabbedThumbnailCache;
    private Dictionary`2<UIElement, TabbedThumbnail> _tabbedThumbnailCacheWPF;
    public void AddThumbnailPreview(TabbedThumbnail preview);
    public TabbedThumbnail GetThumbnailPreview(IntPtr windowHandle);
    public TabbedThumbnail GetThumbnailPreview(Control control);
    public TabbedThumbnail GetThumbnailPreview(UIElement windowsControl);
    public void RemoveThumbnailPreview(TabbedThumbnail preview);
    public void RemoveThumbnailPreview(IntPtr windowHandle);
    public void RemoveThumbnailPreview(Control control);
    public void RemoveThumbnailPreview(UIElement windowsControl);
    public void SetActiveTab(TabbedThumbnail preview);
    public void SetActiveTab(IntPtr windowHandle);
    public void SetActiveTab(Control control);
    public void SetActiveTab(UIElement windowsControl);
    public bool IsThumbnailPreviewAdded(TabbedThumbnail preview);
    public bool IsThumbnailPreviewAdded(IntPtr windowHandle);
    public bool IsThumbnailPreviewAdded(Control control);
    public bool IsThumbnailPreviewAdded(UIElement control);
    public void InvalidateThumbnails();
    public static void ClearThumbnailClip(IntPtr windowHandle);
    public void SetThumbnailClip(IntPtr windowHandle, Nullable`1<Rectangle> clippingRectangle);
    public static void SetTabOrder(TabbedThumbnail previewToChange, TabbedThumbnail insertBeforePreview);
}
internal static class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnailNativeMethods : object {
    internal static int DisplayFrame;
    internal static int ForceIconicRepresentation;
    internal static int HasIconicBitmap;
    internal static UInt32 WmDwmSendIconicThumbnail;
    internal static UInt32 WmDwmSendIconicLivePreviewBitmap;
    internal static UInt32 WaActive;
    internal static UInt32 WaClickActive;
    internal static int ScClose;
    internal static int ScMaximize;
    internal static int ScMinimize;
    internal static UInt32 MsgfltAdd;
    internal static UInt32 MsgfltRemove;
    internal static int DwmSetIconicThumbnail(IntPtr hwnd, IntPtr hbitmap, UInt32 flags);
    internal static int DwmInvalidateIconicBitmaps(IntPtr hwnd);
    internal static int DwmSetIconicLivePreviewBitmap(IntPtr hwnd, IntPtr hbitmap, NativePoint& ptClient, UInt32 flags);
    internal static int DwmSetIconicLivePreviewBitmap(IntPtr hwnd, IntPtr hbitmap, IntPtr ptClient, UInt32 flags);
    internal static int DwmSetWindowAttribute(IntPtr hwnd, UInt32 dwAttributeToSet, IntPtr pvAttributeValue, UInt32 cbAttribute);
    internal static bool GetWindowRect(IntPtr hwnd, NativeRect& rect);
    internal static bool GetClientRect(IntPtr hwnd, NativeRect& rect);
    internal static bool GetClientSize(IntPtr hwnd, Size& size);
    internal static bool ClientToScreen(IntPtr hwnd, NativePoint& point);
    internal static bool StretchBlt(IntPtr hDestDC, int destX, int destY, int destWidth, int destHeight, IntPtr hSrcDC, int srcX, int srcY, int srcWidth, int srcHeight, UInt32 operation);
    internal static IntPtr GetWindowDC(IntPtr hwnd);
    internal static int ReleaseDC(IntPtr hwnd, IntPtr hdc);
    internal static IntPtr ChangeWindowMessageFilter(UInt32 message, UInt32 dwFlag);
    internal static void SetIconicThumbnail(IntPtr hwnd, IntPtr hBitmap);
    internal static void SetPeekBitmap(IntPtr hwnd, IntPtr bitmap, bool displayFrame);
    internal static void SetPeekBitmap(IntPtr hwnd, IntPtr bitmap, Point offset, bool displayFrame);
    internal static void EnableCustomWindowPreview(IntPtr hwnd, bool enable);
}
internal class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnailProxyWindow : Form {
    [CompilerGeneratedAttribute]
private TabbedThumbnail <TabbedThumbnail>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <WindowsControl>k__BackingField;
    internal TabbedThumbnail TabbedThumbnail { get; private set; }
    internal UIElement WindowsControl { get; private set; }
    internal IntPtr WindowToTellTaskbarAbout { get; }
    internal TabbedThumbnailProxyWindow(TabbedThumbnail preview);
    [CompilerGeneratedAttribute]
internal TabbedThumbnail get_TabbedThumbnail();
    [CompilerGeneratedAttribute]
private void set_TabbedThumbnail(TabbedThumbnail value);
    [CompilerGeneratedAttribute]
internal UIElement get_WindowsControl();
    [CompilerGeneratedAttribute]
private void set_WindowsControl(UIElement value);
    internal IntPtr get_WindowToTellTaskbarAbout();
    protected virtual void WndProc(Message& m);
    protected virtual void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
public static class Microsoft.WindowsAPICodePack.Taskbar.TabbedThumbnailScreenCapture : object {
    public static Bitmap GrabWindowBitmap(IntPtr windowHandle, Size bitmapSize);
    public static Bitmap GrabWindowBitmap(UIElement element, int dpiX, int dpiY, int width, int height);
    internal static Bitmap ResizeImageWithAspect(IntPtr originalHBitmap, int newWidth, int maxHeight, bool resizeIfWider);
}
internal enum Microsoft.WindowsAPICodePack.Taskbar.TaskbarActiveTabSetting : Enum {
    public int value__;
    public static TaskbarActiveTabSetting UseMdiThumbnail;
    public static TaskbarActiveTabSetting UseMdiLivePreview;
}
internal static class Microsoft.WindowsAPICodePack.Taskbar.TaskbarList : object {
    private static object _syncLock;
    private static ITaskbarList4 _taskbarList;
    internal static ITaskbarList4 Instance { get; }
    private static TaskbarList();
    internal static ITaskbarList4 get_Instance();
}
public class Microsoft.WindowsAPICodePack.Taskbar.TaskbarManager : object {
    private static object _syncLock;
    private static TaskbarManager _instance;
    private TabbedThumbnailManager _tabbedThumbnail;
    private ThumbnailToolBarManager _thumbnailToolBarManager;
    private IntPtr _ownerHandle;
    [CompilerGeneratedAttribute]
private bool <ApplicationIdSetProcessWide>k__BackingField;
    public static TaskbarManager Instance { get; }
    public TabbedThumbnailManager TabbedThumbnail { get; }
    public ThumbnailToolBarManager ThumbnailToolBars { get; }
    public string ApplicationId { get; public set; }
    internal IntPtr OwnerHandle { get; }
    internal bool ApplicationIdSetProcessWide { get; private set; }
    public static bool IsPlatformSupported { get; }
    private static TaskbarManager();
    public static TaskbarManager get_Instance();
    public void SetOverlayIcon(Icon icon, string accessibilityText);
    public void SetOverlayIcon(IntPtr windowHandle, Icon icon, string accessibilityText);
    public void SetOverlayIcon(Window window, Icon icon, string accessibilityText);
    public void SetProgressValue(int currentValue, int maximumValue);
    public void SetProgressValue(int currentValue, int maximumValue, IntPtr windowHandle);
    public void SetProgressValue(int currentValue, int maximumValue, Window window);
    public void SetProgressState(TaskbarProgressBarState state);
    public void SetProgressState(TaskbarProgressBarState state, IntPtr windowHandle);
    public void SetProgressState(TaskbarProgressBarState state, Window window);
    public TabbedThumbnailManager get_TabbedThumbnail();
    public ThumbnailToolBarManager get_ThumbnailToolBars();
    public string get_ApplicationId();
    public void set_ApplicationId(string value);
    internal IntPtr get_OwnerHandle();
    public void SetApplicationIdForSpecificWindow(IntPtr windowHandle, string appId);
    public void SetApplicationIdForSpecificWindow(Window window, string appId);
    private void SetCurrentProcessAppId(string appId);
    private string GetCurrentProcessAppId();
    [CompilerGeneratedAttribute]
internal bool get_ApplicationIdSetProcessWide();
    [CompilerGeneratedAttribute]
private void set_ApplicationIdSetProcessWide(bool value);
    public static bool get_IsPlatformSupported();
}
internal static class Microsoft.WindowsAPICodePack.Taskbar.TaskbarNativeMethods : object {
    internal static int WmCommand;
    internal static UInt32 WmDwmSendIconThumbnail;
    internal static UInt32 WmDwmSendIconicLivePreviewBitmap;
    internal static UInt32 WmTaskbarButtonCreated;
    private static TaskbarNativeMethods();
    internal static void SetCurrentProcessExplicitAppUserModelID(string AppID);
    internal static void GetCurrentProcessExplicitAppUserModelID(String& AppID);
    internal static void SHAddToRecentDocs(ShellAddToRecentDocs flags, string path);
    internal static void SHAddToRecentDocs(string path);
    internal static UInt32 RegisterWindowMessage(string lpString);
    public static int SHGetPropertyStoreForWindow(IntPtr hwnd, Guid& iid, IPropertyStore& propertyStore);
    internal static void SetWindowAppId(IntPtr hwnd, string appId);
    internal static void SetWindowProperty(IntPtr hwnd, PropertyKey propkey, string value);
    internal static IPropertyStore GetWindowPropertyStore(IntPtr hwnd);
}
public enum Microsoft.WindowsAPICodePack.Taskbar.TaskbarProgressBarState : Enum {
    public int value__;
    public static TaskbarProgressBarState NoProgress;
    public static TaskbarProgressBarState Indeterminate;
    public static TaskbarProgressBarState Normal;
    public static TaskbarProgressBarState Error;
    public static TaskbarProgressBarState Paused;
}
internal enum Microsoft.WindowsAPICodePack.Taskbar.TaskbarProgressBarStatus : Enum {
    public int value__;
    public static TaskbarProgressBarStatus NoProgress;
    public static TaskbarProgressBarStatus Indeterminate;
    public static TaskbarProgressBarStatus Normal;
    public static TaskbarProgressBarStatus Error;
    public static TaskbarProgressBarStatus Paused;
}
internal enum Microsoft.WindowsAPICodePack.Taskbar.TaskbarProxyWindowType : Enum {
    public int value__;
    public static TaskbarProxyWindowType TabbedThumbnail;
    public static TaskbarProxyWindowType ThumbnailToolbar;
}
internal class Microsoft.WindowsAPICodePack.Taskbar.TaskbarWindow : object {
    private TabbedThumbnail _tabbedThumbnailPreview;
    private ThumbnailToolBarButton[] _thumbnailButtons;
    [CompilerGeneratedAttribute]
private TabbedThumbnailProxyWindow <TabbedThumbnailProxyWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private ThumbnailToolbarProxyWindow <ThumbnailToolbarProxyWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableTabbedThumbnails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableThumbnailToolbars>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <UserWindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <WindowsControl>k__BackingField;
    internal TabbedThumbnailProxyWindow TabbedThumbnailProxyWindow { get; internal set; }
    internal ThumbnailToolbarProxyWindow ThumbnailToolbarProxyWindow { get; internal set; }
    internal bool EnableTabbedThumbnails { get; internal set; }
    internal bool EnableThumbnailToolbars { get; internal set; }
    internal IntPtr UserWindowHandle { get; internal set; }
    internal UIElement WindowsControl { get; internal set; }
    internal TabbedThumbnail TabbedThumbnail { get; internal set; }
    internal ThumbnailToolBarButton[] ThumbnailButtons { get; internal set; }
    internal IntPtr WindowToTellTaskbarAbout { get; }
    internal TaskbarWindow(IntPtr userWindowHandle, ThumbnailToolBarButton[] buttons);
    internal TaskbarWindow(UIElement windowsControl, ThumbnailToolBarButton[] buttons);
    internal TaskbarWindow(TabbedThumbnail preview);
    [CompilerGeneratedAttribute]
internal TabbedThumbnailProxyWindow get_TabbedThumbnailProxyWindow();
    [CompilerGeneratedAttribute]
internal void set_TabbedThumbnailProxyWindow(TabbedThumbnailProxyWindow value);
    [CompilerGeneratedAttribute]
internal ThumbnailToolbarProxyWindow get_ThumbnailToolbarProxyWindow();
    [CompilerGeneratedAttribute]
internal void set_ThumbnailToolbarProxyWindow(ThumbnailToolbarProxyWindow value);
    [CompilerGeneratedAttribute]
internal bool get_EnableTabbedThumbnails();
    [CompilerGeneratedAttribute]
internal void set_EnableTabbedThumbnails(bool value);
    [CompilerGeneratedAttribute]
internal bool get_EnableThumbnailToolbars();
    [CompilerGeneratedAttribute]
internal void set_EnableThumbnailToolbars(bool value);
    [CompilerGeneratedAttribute]
internal IntPtr get_UserWindowHandle();
    [CompilerGeneratedAttribute]
internal void set_UserWindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
internal UIElement get_WindowsControl();
    [CompilerGeneratedAttribute]
internal void set_WindowsControl(UIElement value);
    internal TabbedThumbnail get_TabbedThumbnail();
    internal void set_TabbedThumbnail(TabbedThumbnail value);
    internal ThumbnailToolBarButton[] get_ThumbnailButtons();
    internal void set_ThumbnailButtons(ThumbnailToolBarButton[] value);
    private void UpdateHandles();
    internal IntPtr get_WindowToTellTaskbarAbout();
    internal void SetTitle(string title);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
}
internal static class Microsoft.WindowsAPICodePack.Taskbar.TaskbarWindowManager : object {
    internal static List`1<TaskbarWindow> _taskbarWindowList;
    private static bool _buttonsAdded;
    [CompilerGeneratedAttribute]
private static Func`2<ThumbnailToolBarButton, ThumbButton> CS$<>9__CachedAnonymousMethodDelegatea;
    private static TaskbarWindowManager();
    internal static void AddThumbnailButtons(IntPtr userWindowHandle, ThumbnailToolBarButton[] buttons);
    internal static void AddThumbnailButtons(UIElement control, ThumbnailToolBarButton[] buttons);
    private static void AddThumbnailButtons(TaskbarWindow taskbarWindow, bool add, ThumbnailToolBarButton[] buttons);
    internal static void AddTabbedThumbnail(TabbedThumbnail preview);
    internal static TaskbarWindow GetTaskbarWindow(UIElement windowsControl, TaskbarProxyWindowType taskbarProxyWindowType);
    internal static TaskbarWindow GetTaskbarWindow(IntPtr userWindowHandle, TaskbarProxyWindowType taskbarProxyWindowType);
    private static void DispatchTaskbarButtonMessages(Message& m, TaskbarWindow taskbarWindow);
    private static bool DispatchActivateMessage(Message& m, TaskbarWindow taskbarWindow);
    private static bool DispatchSendIconThumbnailMessage(Message& m, TaskbarWindow taskbarWindow);
    private static bool DispatchLivePreviewBitmapMessage(Message& m, TaskbarWindow taskbarWindow);
    private static bool DispatchDestroyMessage(Message& m, TaskbarWindow taskbarWindow);
    private static bool DispatchNCDestroyMessage(Message& m, TaskbarWindow taskbarWindow);
    private static bool DispatchSystemCommandMessage(Message& m, TaskbarWindow taskbarWindow);
    internal static bool DispatchMessage(Message& m, TaskbarWindow taskbarWindow);
    private static IntPtr GrabBitmap(TaskbarWindow taskbarWindow, Size requestedSize);
    internal static void SetActiveTab(TaskbarWindow taskbarWindow);
    internal static void UnregisterTab(TaskbarWindow taskbarWindow);
    internal static void InvalidatePreview(TaskbarWindow taskbarWindow);
    private static void AddButtons(TaskbarWindow taskbarWindow);
    private static void thumbnailPreview_TooltipChanged(object sender, EventArgs e);
    private static void thumbnailPreview_TitleChanged(object sender, EventArgs e);
    [CompilerGeneratedAttribute]
private static ThumbButton <AddButtons>b__9(ThumbnailToolBarButton thumbButton);
}
internal class Microsoft.WindowsAPICodePack.Taskbar.ThumbButton : ValueType {
    internal static int Clicked;
    internal ThumbButtonMask Mask;
    internal UInt32 Id;
    internal UInt32 Bitmap;
    internal IntPtr Icon;
    internal string Tip;
    internal ThumbButtonOptions Flags;
}
internal enum Microsoft.WindowsAPICodePack.Taskbar.ThumbButtonMask : Enum {
    public int value__;
    public static ThumbButtonMask Bitmap;
    public static ThumbButtonMask Icon;
    public static ThumbButtonMask Tooltip;
    public static ThumbButtonMask THB_FLAGS;
}
[FlagsAttribute]
internal enum Microsoft.WindowsAPICodePack.Taskbar.ThumbButtonOptions : Enum {
    public int value__;
    public static ThumbButtonOptions Enabled;
    public static ThumbButtonOptions Disabled;
    public static ThumbButtonOptions DismissOnClick;
    public static ThumbButtonOptions NoBackground;
    public static ThumbButtonOptions Hidden;
    public static ThumbButtonOptions NonInteractive;
}
public enum Microsoft.WindowsAPICodePack.Taskbar.ThumbnailAlphaType : Enum {
    public int value__;
    public static ThumbnailAlphaType Unknown;
    public static ThumbnailAlphaType NoAlphaChannel;
    public static ThumbnailAlphaType HasAlphaChannel;
}
public class Microsoft.WindowsAPICodePack.Taskbar.ThumbnailButtonClickedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IntPtr <WindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private UIElement <WindowsControl>k__BackingField;
    [CompilerGeneratedAttribute]
private ThumbnailToolBarButton <ThumbnailButton>k__BackingField;
    public IntPtr WindowHandle { get; private set; }
    public UIElement WindowsControl { get; private set; }
    public ThumbnailToolBarButton ThumbnailButton { get; private set; }
    public ThumbnailButtonClickedEventArgs(IntPtr windowHandle, ThumbnailToolBarButton button);
    public ThumbnailButtonClickedEventArgs(UIElement windowsControl, ThumbnailToolBarButton button);
    [CompilerGeneratedAttribute]
public IntPtr get_WindowHandle();
    [CompilerGeneratedAttribute]
private void set_WindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
public UIElement get_WindowsControl();
    [CompilerGeneratedAttribute]
private void set_WindowsControl(UIElement value);
    [CompilerGeneratedAttribute]
public ThumbnailToolBarButton get_ThumbnailButton();
    [CompilerGeneratedAttribute]
private void set_ThumbnailButton(ThumbnailToolBarButton value);
}
public class Microsoft.WindowsAPICodePack.Taskbar.ThumbnailToolBarButton : object {
    private static UInt32 nextId;
    private ThumbButton win32ThumbButton;
    private EventHandler`1<ThumbnailButtonClickedEventArgs> Click;
    private bool internalUpdate;
    private Icon icon;
    private string tooltip;
    private bool visible;
    private bool enabled;
    private bool dismissOnClick;
    private bool isInteractive;
    [CompilerGeneratedAttribute]
private UInt32 <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ThumbButtonOptions <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <WindowHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AddedToTaskbar>k__BackingField;
    internal UInt32 Id { get; internal set; }
    public Icon Icon { get; public set; }
    public string Tooltip { get; public set; }
    public bool Visible { get; public set; }
    public bool Enabled { get; public set; }
    public bool DismissOnClick { get; public set; }
    public bool IsInteractive { get; public set; }
    internal ThumbButtonOptions Flags { get; internal set; }
    internal ThumbButton Win32ThumbButton { get; }
    internal IntPtr WindowHandle { get; internal set; }
    internal bool AddedToTaskbar { get; internal set; }
    public ThumbnailToolBarButton(Icon icon, string tooltip);
    private static ThumbnailToolBarButton();
    public void add_Click(EventHandler`1<ThumbnailButtonClickedEventArgs> value);
    public void remove_Click(EventHandler`1<ThumbnailButtonClickedEventArgs> value);
    [CompilerGeneratedAttribute]
internal UInt32 get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(UInt32 value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public string get_Tooltip();
    public void set_Tooltip(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_DismissOnClick();
    public void set_DismissOnClick(bool value);
    public bool get_IsInteractive();
    public void set_IsInteractive(bool value);
    [CompilerGeneratedAttribute]
internal ThumbButtonOptions get_Flags();
    [CompilerGeneratedAttribute]
internal void set_Flags(ThumbButtonOptions value);
    internal ThumbButton get_Win32ThumbButton();
    internal void FireClick(TaskbarWindow taskbarWindow);
    [CompilerGeneratedAttribute]
internal IntPtr get_WindowHandle();
    [CompilerGeneratedAttribute]
internal void set_WindowHandle(IntPtr value);
    [CompilerGeneratedAttribute]
internal bool get_AddedToTaskbar();
    [CompilerGeneratedAttribute]
internal void set_AddedToTaskbar(bool value);
    internal void UpdateThumbnailButton();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
}
public class Microsoft.WindowsAPICodePack.Taskbar.ThumbnailToolBarManager : object {
    public void AddButtons(IntPtr windowHandle, ThumbnailToolBarButton[] buttons);
    public void AddButtons(UIElement control, ThumbnailToolBarButton[] buttons);
    private static void VerifyButtons(ThumbnailToolBarButton[] buttons);
}
internal class Microsoft.WindowsAPICodePack.Taskbar.ThumbnailToolbarProxyWindow : NativeWindow {
    private ThumbnailToolBarButton[] _thumbnailButtons;
    private IntPtr _internalWindowHandle;
    [CompilerGeneratedAttribute]
private UIElement <WindowsControl>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskbarWindow <TaskbarWindow>k__BackingField;
    internal UIElement WindowsControl { get; internal set; }
    internal IntPtr WindowToTellTaskbarAbout { get; }
    internal TaskbarWindow TaskbarWindow { get; internal set; }
    internal ThumbnailToolbarProxyWindow(IntPtr windowHandle, ThumbnailToolBarButton[] buttons);
    internal ThumbnailToolbarProxyWindow(UIElement windowsControl, ThumbnailToolBarButton[] buttons);
    [CompilerGeneratedAttribute]
internal UIElement get_WindowsControl();
    [CompilerGeneratedAttribute]
internal void set_WindowsControl(UIElement value);
    internal IntPtr get_WindowToTellTaskbarAbout();
    [CompilerGeneratedAttribute]
internal TaskbarWindow get_TaskbarWindow();
    [CompilerGeneratedAttribute]
internal void set_TaskbarWindow(TaskbarWindow value);
    private void UpdateHandle(ThumbnailToolBarButton button);
    protected virtual void WndProc(Message& m);
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    public void Dispose(bool disposing);
}
public class Microsoft.WindowsAPICodePack.Taskbar.UserRemovedJumpListItemsEventArgs : EventArgs {
    private IEnumerable _removedItems;
    public IEnumerable RemovedItems { get; }
    internal UserRemovedJumpListItemsEventArgs(IEnumerable RemovedItems);
    public IEnumerable get_RemovedItems();
}
internal enum MS.WindowsAPICodePack.Internal.CompositionEnable : Enum {
    public int value__;
    public static CompositionEnable Disable;
    public static CompositionEnable Enable;
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class MS.WindowsAPICodePack.Internal.DesktopWindowManagerNativeMethods : object {
    internal static int DwmExtendFrameIntoClientArea(IntPtr hwnd, Margins& m);
    internal static bool DwmIsCompositionEnabled();
    internal static int DwmEnableComposition(CompositionEnable compositionAction);
    internal static bool GetWindowRect(IntPtr hwnd, NativeRect& rect);
    internal static bool GetClientRect(IntPtr hwnd, NativeRect& rect);
}
internal static class MS.WindowsAPICodePack.Internal.DWMMessages : object {
    internal static int WM_DWMCOMPOSITIONCHANGED;
    internal static int WM_DWMNCRENDERINGCHANGED;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("2")]
public class MS.WindowsAPICodePack.Internal.ExplorerBrowserViewEvents : object {
    private UInt32 viewConnectionPointCookie;
    private object viewDispatch;
    private IntPtr nullPtr;
    private Guid IID_DShellFolderViewEvents;
    private Guid IID_IDispatch;
    private ExplorerBrowser parent;
    internal ExplorerBrowserViewEvents(ExplorerBrowser parent);
    internal void ConnectToView(IShellView psv);
    internal void DisconnectFromView();
    [DispIdAttribute("200")]
public void ViewSelectionChanged();
    [DispIdAttribute("207")]
public void ViewContentsChanged();
    [DispIdAttribute("201")]
public void ViewFileListEnumDone();
    [DispIdAttribute("220")]
public void ViewSelectedItemChanged();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposed);
}
internal class MS.WindowsAPICodePack.Internal.Margins : ValueType {
    public int LeftWidth;
    public int RightWidth;
    public int TopHeight;
    public int BottomHeight;
    public Margins(bool fullWindow);
}
