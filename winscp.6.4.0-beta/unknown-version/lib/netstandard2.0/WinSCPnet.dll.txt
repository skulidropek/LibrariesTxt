internal static class WinSCP.AssemblyConstants : object {
    public static string UndefinedProductVersion;
    public static string Version;
    public static string ProductVersion;
}
internal class WinSCP.Callstack : object {
    private Logger _logger;
    private string _name;
    private object _token;
    public Callstack(Logger logger, object token);
    private static bool IsTypeOrSubType(Type tested, Type type);
    public virtual void Dispose();
}
internal class WinSCP.CallstackAndLock : Callstack {
    private Lock _lock;
    public CallstackAndLock(Logger logger, Lock alock, object token);
    public virtual void Dispose();
    public void DisarmLock();
}
[GuidAttribute("DFCA88E2-6A47-4290-AD66-A39C5682D610")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.ChmodEventArgs : FileOperationEventArgs {
    [CompilerGeneratedAttribute]
private FilePermissions <FilePermissions>k__BackingField;
    internal static string Tag;
    public FilePermissions FilePermissions { get; private set; }
    [CompilerGeneratedAttribute]
public FilePermissions get_FilePermissions();
    [CompilerGeneratedAttribute]
private void set_FilePermissions(FilePermissions value);
    internal static ChmodEventArgs Read(CustomLogReader areader);
}
[GuidAttribute("70C312F8-9A09-4D9B-B8EC-FB6ED753892B")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.CommandExecutionResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private string <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ExitCode>k__BackingField;
    public string Output { get; internal set; }
    public string ErrorOutput { get; internal set; }
    public int ExitCode { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Output();
    [CompilerGeneratedAttribute]
internal void set_Output(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorOutput();
    [CompilerGeneratedAttribute]
internal void set_ErrorOutput(string value);
    [CompilerGeneratedAttribute]
public int get_ExitCode();
    [CompilerGeneratedAttribute]
internal void set_ExitCode(int value);
}
[GuidAttribute("97F5222E-9379-4C24-9E50-E93C7334BBD5")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.ComparisonDifference : object {
    [CompilerGeneratedAttribute]
private SynchronizationAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonFileInfo <Local>k__BackingField;
    [CompilerGeneratedAttribute]
private ComparisonFileInfo <Remote>k__BackingField;
    private string _localPath;
    private string _remotePath;
    public SynchronizationAction Action { get; internal set; }
    public bool IsDirectory { get; internal set; }
    public ComparisonFileInfo Local { get; internal set; }
    public ComparisonFileInfo Remote { get; internal set; }
    internal ComparisonDifference(string localPath, string remotePath);
    [CompilerGeneratedAttribute]
public SynchronizationAction get_Action();
    [CompilerGeneratedAttribute]
internal void set_Action(SynchronizationAction value);
    [CompilerGeneratedAttribute]
public bool get_IsDirectory();
    [CompilerGeneratedAttribute]
internal void set_IsDirectory(bool value);
    [CompilerGeneratedAttribute]
public ComparisonFileInfo get_Local();
    [CompilerGeneratedAttribute]
internal void set_Local(ComparisonFileInfo value);
    [CompilerGeneratedAttribute]
public ComparisonFileInfo get_Remote();
    [CompilerGeneratedAttribute]
internal void set_Remote(ComparisonFileInfo value);
    public virtual string ToString();
    private string TranslateRemotePathToLocal();
    private string TranslateLocalPathToRemote();
    private string GetRemotePathString();
    private string GetLocalPathString();
    public FileOperationEventArgs Resolve(Session session, TransferOptions options);
    public void Reverse();
}
[GuidAttribute("28957CC8-DEBC-48D0-841B-48AD3CB3B49F")]
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
[ComDefaultInterfaceAttribute("System.Collections.IEnumerable")]
public class WinSCP.ComparisonDifferenceCollection : ReadOnlyInteropCollection`1<ComparisonDifference> {
}
[GuidAttribute("2D6EFFB5-69BA-47AA-90E8-A92953E8B58A")]
[ComVisibleAttribute("True")]
public class WinSCP.ComparisonFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTime>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    public string FileName { get; internal set; }
    public DateTime LastWriteTime { get; internal set; }
    public long Length { get; internal set; }
    public int Length32 { get; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
internal void set_FileName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTime();
    [CompilerGeneratedAttribute]
internal void set_LastWriteTime(DateTime value);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
internal void set_Length(long value);
    public int get_Length32();
    private int GetLength32();
}
internal class WinSCP.ConsoleChoiceEventStruct : object {
    public string Options;
    public int Cancel;
    public int Break;
    public int Result;
    public int Timeouted;
    public UInt32 Timer;
    public bool Timeouting;
    public int Continue;
    public string Message;
}
internal class WinSCP.ConsoleCommHeader : object {
    public UInt32 Size;
    public int Version;
    public ConsoleEvent Event;
}
internal class WinSCP.ConsoleCommStruct : object {
    public static int CurrentVersion;
    private IntPtr _ptr;
    private ConsoleCommHeader _header;
    private bool _headerInvalidated;
    private IntPtr _payloadPtr;
    private object _payload;
    private SafeFileHandle _fileMapping;
    private Session _session;
    public ConsoleEvent Event { get; }
    public ConsolePrintEventStruct PrintEvent { get; }
    public ConsoleInitEventStruct InitEvent { get; }
    public ConsoleInputEventStruct InputEvent { get; }
    public ConsoleChoiceEventStruct ChoiceEvent { get; }
    public ConsoleTitleEventStruct TitleEvent { get; }
    public ConsoleProgressEventStruct ProgressEvent { get; }
    public ConsoleTransferEventStruct TransferOutEvent { get; }
    public ConsoleTransferEventStruct TransferInEvent { get; }
    public static int Size { get; }
    public ConsoleCommStruct(Session session, SafeFileHandle fileMapping);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    public ConsoleEvent get_Event();
    public ConsolePrintEventStruct get_PrintEvent();
    public ConsoleInitEventStruct get_InitEvent();
    public ConsoleInputEventStruct get_InputEvent();
    public ConsoleChoiceEventStruct get_ChoiceEvent();
    public ConsoleTitleEventStruct get_TitleEvent();
    public ConsoleProgressEventStruct get_ProgressEvent();
    public ConsoleTransferEventStruct get_TransferOutEvent();
    public ConsoleTransferEventStruct get_TransferInEvent();
    private T UnmarshalPayload(ConsoleEvent e);
    private void CheckNotDisposed();
    public static int get_Size();
    public void InitHeader();
}
public enum WinSCP.ConsoleEvent : Enum {
    public int value__;
    public static ConsoleEvent None;
    public static ConsoleEvent Print;
    public static ConsoleEvent Input;
    public static ConsoleEvent Choice;
    public static ConsoleEvent Title;
    public static ConsoleEvent Init;
    public static ConsoleEvent Progress;
    public static ConsoleEvent TransferOut;
    public static ConsoleEvent TransferIn;
}
internal class WinSCP.ConsoleInitEventStruct : object {
    public UInt32 InputType;
    public UInt32 OutputType;
    public bool WantsProgress;
    public bool UseStdErr;
    public StdInOut BinaryOutput;
    public StdInOut BinaryInput;
}
internal class WinSCP.ConsoleInputEventStruct : object {
    public bool Echo;
    public bool Result;
    public string Str;
    public UInt32 Timer;
}
internal class WinSCP.ConsolePrintEventStruct : object {
    public string Message;
    public bool FromBeginning;
    public bool Error;
}
internal class WinSCP.ConsoleProgressEventStruct : object {
    public ProgressOperation Operation;
    public ProgressSide Side;
    public string FileName;
    public string Directory;
    public UInt32 OverallProgress;
    public UInt32 FileProgress;
    public UInt32 CPS;
    public bool Cancel;
}
internal class WinSCP.ConsoleTitleEventStruct : object {
    public string Title;
}
internal class WinSCP.ConsoleTransferEventStruct : object {
    public Byte[] Data;
    public UInt32 Len;
    public bool Error;
}
internal static class WinSCP.Constants : object {
    public static ClassInterfaceType ClassInterface;
    public static ClassInterfaceType CollectionClassInterface;
}
internal abstract class WinSCP.CustomLogReader : object {
    [CompilerGeneratedAttribute]
private Session <Session>k__BackingField;
    public Session Session { get; private set; }
    public XmlNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public bool IsEmptyElement { get; }
    public int Depth { get; }
    public string Value { get; }
    internal XmlReader Reader { get; }
    protected CustomLogReader(Session session);
    [CompilerGeneratedAttribute]
public Session get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(Session value);
    public XmlNodeType get_NodeType();
    public string get_NamespaceURI();
    public string get_LocalName();
    public bool get_IsEmptyElement();
    public int get_Depth();
    public string get_Value();
    internal abstract virtual XmlReader get_Reader();
    public abstract virtual bool Read(LogReadFlags flags);
    public virtual void Dispose();
    public bool IsElement();
    public bool IsElement(string localName);
    public bool IsNonEmptyElement(string localName);
    public bool GetEmptyElementValue(string localName, String& value);
    public bool IsEndElement(string localName);
    public bool TryWaitForNonEmptyElement(string localName, LogReadFlags flags);
    public void WaitForNonEmptyElement(string localName, LogReadFlags flags);
    public bool TryWaitForEmptyElement(string localName, LogReadFlags flags);
    public ElementLogReader CreateLogReader();
    public ElementLogReader WaitForNonEmptyElementAndCreateLogReader(string localName, LogReadFlags flags);
    public ElementLogReader WaitForGroupAndCreateLogReader();
    public string GetAttribute(string name);
}
[FlagsAttribute]
internal enum WinSCP.DesktopRights : Enum {
    public int value__;
    public static DesktopRights ReadObjects;
    public static DesktopRights CreateWindow;
    public static DesktopRights CreateMenu;
    public static DesktopRights HookControl;
    public static DesktopRights JournalRecord;
    public static DesktopRights JournalPlayback;
    public static DesktopRights Enumerate;
    public static DesktopRights WriteObjects;
    public static DesktopRights SwitchDesktop;
    public static DesktopRights AllAccess;
}
internal class WinSCP.ElementLogReader : CustomLogReader {
    private CustomLogReader _parentReader;
    private string _localName;
    private int _depth;
    protected bool _read;
    private string _token;
    internal XmlReader Reader { get; }
    public ElementLogReader(CustomLogReader parentReader);
    public virtual void Dispose();
    public virtual bool Read(LogReadFlags flags);
    public void ReadToEnd(LogReadFlags flags);
    internal virtual XmlReader get_Reader();
}
[GuidAttribute("6C441F60-26AA-44FC-9B93-08884768507B")]
[ComVisibleAttribute("True")]
[FlagsAttribute]
public enum WinSCP.EnumerationOptions : Enum {
    public int value__;
    public static EnumerationOptions None;
    public static EnumerationOptions AllDirectories;
    public static EnumerationOptions MatchDirectories;
    public static EnumerationOptions EnumerateDirectories;
}
internal class WinSCP.ExeSessionProcess : object {
    [CompilerGeneratedAttribute]
private OutputDataReceivedEventHandler OutputDataReceived;
    [CompilerGeneratedAttribute]
private PipeStream <StdOut>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <StdIn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExecutablePath>k__BackingField;
    private static int MaxAttempts;
    private static string ConsoleMapping;
    private static string ConsoleEventRequest;
    private static string ConsoleEventResponse;
    private static string ConsoleEventCancel;
    private static string ConsoleJob;
    private static string ExeExecutableFileName;
    private Process _process;
    private object _lock;
    private Logger _logger;
    private Session _session;
    private EventWaitHandle _requestEvent;
    private EventWaitHandle _responseEvent;
    private EventWaitHandle _cancelEvent;
    private SafeFileHandle _fileMapping;
    private string _instanceName;
    private Thread _thread;
    private bool _abort;
    private string _lastFromBeginning;
    private string _incompleteLine;
    private List`1<string> _input;
    private List`1<string> _log;
    private AutoResetEvent _inputEvent;
    private Job _job;
    private bool _cancel;
    private static Dictionary`2<Tuple`2<string, DateTime>, FileVersionInfo> _versionInfoCache;
    public bool HasExited { get; }
    public int ExitCode { get; }
    public PipeStream StdOut { get; public set; }
    public Stream StdIn { get; public set; }
    public string ExecutablePath { get; }
    private ExeSessionProcess(Session session, bool useXmlLog, string additionalArguments);
    private static ExeSessionProcess();
    [CompilerGeneratedAttribute]
public void add_OutputDataReceived(OutputDataReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OutputDataReceived(OutputDataReceivedEventHandler value);
    public bool get_HasExited();
    public int get_ExitCode();
    [CompilerGeneratedAttribute]
public PipeStream get_StdOut();
    [CompilerGeneratedAttribute]
public void set_StdOut(PipeStream value);
    [CompilerGeneratedAttribute]
public Stream get_StdIn();
    [CompilerGeneratedAttribute]
public void set_StdIn(Stream value);
    [CompilerGeneratedAttribute]
public string get_ExecutablePath();
    public static ExeSessionProcess CreateForSession(Session session);
    public static ExeSessionProcess CreateForConsole(Session session, string additionalArguments);
    private static string LogPathEscape(string path);
    public void Abort();
    public void Start();
    private void InitializeChild();
    private void ProcessExited(object sender, EventArgs e);
    private bool AbortedOrExited();
    private void ProcessEvents();
    private void ProcessEvent();
    private void ProcessChoiceEvent(ConsoleChoiceEventStruct e);
    private void ProcessTitleEvent(ConsoleTitleEventStruct e);
    private void ProcessInputEvent(ConsoleInputEventStruct e);
    private void Print(bool fromBeginning, bool error, string message);
    private void AddToOutput(string message, bool error);
    private void ProcessPrintEvent(ConsolePrintEventStruct e);
    private void ProcessInitEvent(ConsoleInitEventStruct e);
    private void ProcessProgressEvent(ConsoleProgressEventStruct e);
    private void ProcessTransferOutEvent(ConsoleTransferEventStruct e);
    private void ProcessTransferInEvent(ConsoleTransferEventStruct e);
    private void InitializeConsole();
    private SafeFileHandle CreateFileMapping(string fileMappingName);
    private ConsoleCommStruct AcquireCommStruct();
    private bool TryCreateEvent(string name, EventWaitHandle& ev);
    private EventWaitHandle CreateEvent(string name);
    private void TestEventClosed(string name);
    private void AddInput(string str, string log);
    public void ExecuteCommand(string command, string log);
    public void Close();
    public sealed virtual void Dispose();
    private string GetExecutablePath();
    internal static string FindExecutable(Session session);
    private static string GetDefaultInstallationPath();
    private static bool TryFindExecutableInPath(Logger logger, string path, String& result);
    private static string GetAssemblyPath(Logger logger);
    private static string GetEntryAssemblyPath(Logger logger);
    private static string DoGetAssemblyPath(string codeBasePath);
    public static int GetFileVersionInfoSize(string lptstrFilename, Int32& handle);
    private static IntPtr LoadLibraryEx(string lpFileName, IntPtr hReservedNull, UInt32 dwFlags);
    private static bool FreeLibrary(IntPtr hModule);
    private static IntPtr FindResource(IntPtr hModule, string lpName, string lpType);
    private static UInt32 SizeofResource(IntPtr hModule, IntPtr hResInfo);
    private string GetVersionStr(FileVersionInfo version);
    private void CheckVersion(string exePath, FileVersionInfo assemblyVersion);
    public void WriteStatus();
    public void RequestCallstack();
    public void Cancel();
}
[GuidAttribute("2C29B0BD-4F77-4743-A72A-B91F6D0EAD16")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.FailedEventArgs : OperationEventArgs {
    public virtual string ToString();
}
public class WinSCP.FailedEventHandler : MulticastDelegate {
    public FailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
internal enum WinSCP.FileMapAccess : Enum {
    public int value__;
    public static FileMapAccess FileMapCopy;
    public static FileMapAccess FileMapWrite;
    public static FileMapAccess FileMapRead;
    public static FileMapAccess FileMapAllAccess;
    public static FileMapAccess FileMapExecute;
}
[FlagsAttribute]
internal enum WinSCP.FileMappingRights : Enum {
    public int value__;
    public static FileMappingRights FileMapCopy;
    public static FileMappingRights FileMapWrite;
    public static FileMappingRights FileMapRead;
    public static FileMappingRights SectionMapExecute;
    public static FileMappingRights SectionExtendSize;
    public static FileMappingRights FileMapExecute;
    public static FileMappingRights AllAccess;
}
[FlagsAttribute]
internal enum WinSCP.FileMapProtection : Enum {
    public UInt32 value__;
    public static FileMapProtection PageReadonly;
    public static FileMapProtection PageReadWrite;
    public static FileMapProtection PageWriteCopy;
    public static FileMapProtection PageExecuteRead;
    public static FileMapProtection PageExecuteReadWrite;
    public static FileMapProtection SectionCommit;
    public static FileMapProtection SectionImage;
    public static FileMapProtection SectionNoCache;
    public static FileMapProtection SectionReserve;
}
[GuidAttribute("FF8D5772-2653-4C9B-870E-4C5EF8F55673")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.FileOperationEventArgs : OperationEventArgs {
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    public string FileName { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
internal void set_FileName(string value);
}
[GuidAttribute("90A290B2-C8CE-4900-8C42-7736F9E435C6")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.FilePermissions : object {
    private static string BasicSymbols;
    private static string CombinedSymbols;
    private static string ExtendedSymbols;
    private static char UnsetSymbol;
    private int _numeric;
    private bool _readOnly;
    public int Numeric { get; public set; }
    public string Text { get; public set; }
    public string Octal { get; public set; }
    public bool OtherExecute { get; public set; }
    public bool OtherWrite { get; public set; }
    public bool OtherRead { get; public set; }
    public bool GroupExecute { get; public set; }
    public bool GroupWrite { get; public set; }
    public bool GroupRead { get; public set; }
    public bool UserExecute { get; public set; }
    public bool UserWrite { get; public set; }
    public bool UserRead { get; public set; }
    public bool Sticky { get; public set; }
    public bool SetGid { get; public set; }
    public bool SetUid { get; public set; }
    public FilePermissions(int numeric);
    public int get_Numeric();
    public void set_Numeric(int value);
    public string get_Text();
    public void set_Text(string value);
    public string get_Octal();
    public void set_Octal(string value);
    public bool get_OtherExecute();
    public void set_OtherExecute(bool value);
    public bool get_OtherWrite();
    public void set_OtherWrite(bool value);
    public bool get_OtherRead();
    public void set_OtherRead(bool value);
    public bool get_GroupExecute();
    public void set_GroupExecute(bool value);
    public bool get_GroupWrite();
    public void set_GroupWrite(bool value);
    public bool get_GroupRead();
    public void set_GroupRead(bool value);
    public bool get_UserExecute();
    public void set_UserExecute(bool value);
    public bool get_UserWrite();
    public void set_UserWrite(bool value);
    public bool get_UserRead();
    public void set_UserRead(bool value);
    public bool get_Sticky();
    public void set_Sticky(bool value);
    public bool get_SetGid();
    public void set_SetGid(bool value);
    public bool get_SetUid();
    public void set_SetUid(bool value);
    public virtual string ToString();
    internal static FilePermissions CreateReadOnlyFromText(string text);
    internal static int TextToNumeric(string text);
    private static string NumericToText(int numeric);
    private bool GetBit(int bit);
    private void SetBit(int bit, bool value);
}
[GuidAttribute("E421924E-87F0-433E-AF38-CE034DC8E8CB")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.FileTransferProgressEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ProgressOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private ProgressSide <Side>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    [CompilerGeneratedAttribute]
private double <OverallProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private double <FileProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CPS>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public ProgressOperation Operation { get; internal set; }
    public ProgressSide Side { get; internal set; }
    public string FileName { get; internal set; }
    public string Directory { get; internal set; }
    public double OverallProgress { get; internal set; }
    public double FileProgress { get; internal set; }
    public int CPS { get; internal set; }
    public bool Cancel { get; public set; }
    [CompilerGeneratedAttribute]
public ProgressOperation get_Operation();
    [CompilerGeneratedAttribute]
internal void set_Operation(ProgressOperation value);
    [CompilerGeneratedAttribute]
public ProgressSide get_Side();
    [CompilerGeneratedAttribute]
internal void set_Side(ProgressSide value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
internal void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
internal void set_Directory(string value);
    [CompilerGeneratedAttribute]
public double get_OverallProgress();
    [CompilerGeneratedAttribute]
internal void set_OverallProgress(double value);
    [CompilerGeneratedAttribute]
public double get_FileProgress();
    [CompilerGeneratedAttribute]
internal void set_FileProgress(double value);
    [CompilerGeneratedAttribute]
public int get_CPS();
    [CompilerGeneratedAttribute]
internal void set_CPS(int value);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
public class WinSCP.FileTransferProgressEventHandler : MulticastDelegate {
    public FileTransferProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FileTransferProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FileTransferProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class WinSCP.FileTransferredEventHandler : MulticastDelegate {
    public FileTransferredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TransferEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransferEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("D924FAB9-FCE7-47B8-9F23-5717698384D3")]
[ComVisibleAttribute("True")]
public enum WinSCP.FtpMode : Enum {
    public int value__;
    public static FtpMode Passive;
    public static FtpMode Active;
}
[GuidAttribute("F2FC81EB-4761-4A4E-A3EC-4AFDD474C18C")]
[ComVisibleAttribute("True")]
public enum WinSCP.FtpSecure : Enum {
    public int value__;
    public static FtpSecure None;
    public static FtpSecure Implicit;
    public static FtpSecure Explicit;
}
internal class WinSCP.ImplicitEnumerable`1 : object {
    private IEnumerable`1<T> _enumerable;
    public ImplicitEnumerable`1(IEnumerable`1<T> enumerable);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class WinSCP.IOCounters : ValueType {
    public ulong ReadOperationCount;
    public ulong WriteOperationCount;
    public ulong OtherOperationCount;
    public ulong ReadTransferCount;
    public ulong WriteTransferCount;
    public ulong OtherTransferCount;
}
[ComVisibleAttribute("True")]
[GuidAttribute("A1334E32-4EDF-4B51-A069-DA3FF1B19A5A")]
[InterfaceTypeAttribute("2")]
public interface WinSCP.ISessionEvents {
    [DispIdAttribute("1")]
public abstract virtual void FileTransferred(object sender, TransferEventArgs e);
    [DispIdAttribute("2")]
public abstract virtual void Failed(object sender, FailedEventArgs e);
    [DispIdAttribute("3")]
public abstract virtual void OutputDataReceived(object sender, OutputDataReceivedEventArgs e);
    [DispIdAttribute("4")]
public abstract virtual void FileTransferProgress(object sender, FileTransferProgressEventArgs e);
    [DispIdAttribute("5")]
public abstract virtual void QueryReceived(object sender, QueryReceivedEventArgs e);
}
internal interface WinSCP.ISessionProcess {
    public bool HasExited { get; }
    public int ExitCode { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_OutputDataReceived(OutputDataReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_OutputDataReceived(OutputDataReceivedEventHandler value);
    public abstract virtual bool get_HasExited();
    public abstract virtual int get_ExitCode();
    public abstract virtual void Start();
    public abstract virtual void ExecuteCommand(string command);
    public abstract virtual void Close();
}
internal class WinSCP.Job : object {
    private IntPtr _handle;
    private Logger _logger;
    public Job(Logger logger, string name);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void DoDispose();
    public void Close();
}
internal class WinSCP.JobObjectBasicLimitInformation : ValueType {
    public long PerProcessUserTimeLimit;
    public long PerJobUserTimeLimit;
    public UInt32 LimitFlags;
    public UIntPtr MinimumWorkingSetSize;
    public UIntPtr MaximumWorkingSetSize;
    public UInt32 ActiveProcessLimit;
    public UIntPtr Affinity;
    public UInt32 PriorityClass;
    public UInt32 SchedulingClass;
}
internal class WinSCP.JobObjectExtendedLimitInformation : ValueType {
    public JobObjectBasicLimitInformation BasicLimitInformation;
    public IOCounters IoInfo;
    public UIntPtr ProcessMemoryLimit;
    public UIntPtr JobMemoryLimit;
    public UIntPtr PeakProcessMemoryUsed;
    public UIntPtr PeakJobMemoryUsed;
}
internal enum WinSCP.JobObjectInfoType : Enum {
    public int value__;
    public static JobObjectInfoType AssociateCompletionPortInformation;
    public static JobObjectInfoType BasicLimitInformation;
    public static JobObjectInfoType BasicUIRestrictions;
    public static JobObjectInfoType EndOfJobTimeInformation;
    public static JobObjectInfoType ExtendedLimitInformation;
    public static JobObjectInfoType SecurityLimitInformation;
    public static JobObjectInfoType GroupInformation;
}
public class WinSCP.Lock : object {
    private object _lock;
    private bool _locked;
    public void Enter();
    public void Exit();
}
internal class WinSCP.Logger : object {
    [CompilerGeneratedAttribute]
private Lock <Lock>k__BackingField;
    private StreamWriter _writter;
    private string _logPath;
    private Dictionary`2<int, int> _indents;
    private object _logLock;
    private int _logLevel;
    public string LogPath { get; public set; }
    public int LogLevel { get; public set; }
    public bool Logging { get; }
    public Lock Lock { get; }
    public string get_LogPath();
    public void set_LogPath(string value);
    public int get_LogLevel();
    public void set_LogLevel(int value);
    public bool get_Logging();
    [CompilerGeneratedAttribute]
public Lock get_Lock();
    public string GetAssemblyFilePath();
    public string GetEntryAssemblyFilePath();
    private string DoGetAssemblyFilePath(Assembly assembly);
    public void WriteLine(string line);
    public void WriteLine(string format, Object[] args);
    public void WriteLineLevel(int level, string line);
    public void WriteLineLevel(int level, string line, Object[] args);
    private static int GetThread();
    public void Indent();
    public void Unindent();
    public sealed virtual void Dispose();
    public void WriteProcesses();
    private static object GetProcessStartTime(Process process);
    private static object GetTotalProcessorTime(Process process);
    public Callstack CreateCallstack(object token);
    public CallstackAndLock CreateCallstackAndLock();
    public Exception WriteException(Exception e);
    private int GetIndent();
    private void DoWriteLine(string message);
    private void SetLogPath(string value);
    private void WriteEnvironmentInfo();
    public static string LastWin32ErrorMessage();
    private void SetLogLevel(int value);
}
[FlagsAttribute]
internal enum WinSCP.LogReadFlags : Enum {
    public int value__;
    public static LogReadFlags ThrowFailures;
}
[GuidAttribute("4D79C4F7-0FE2-428D-9908-AB2D38E96C53")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.OperationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SessionRemoteException <Error>k__BackingField;
    public SessionRemoteException Error { get; internal set; }
    [CompilerGeneratedAttribute]
public SessionRemoteException get_Error();
    [CompilerGeneratedAttribute]
internal void set_Error(SessionRemoteException value);
}
[GuidAttribute("B4CC583A-B64E-4797-9967-0FCB2F07C977")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.OperationResultBase : object {
    [CompilerGeneratedAttribute]
private SessionRemoteExceptionCollection <Failures>k__BackingField;
    public SessionRemoteExceptionCollection Failures { get; private set; }
    public bool IsSuccess { get; }
    [CompilerGeneratedAttribute]
public SessionRemoteExceptionCollection get_Failures();
    [CompilerGeneratedAttribute]
private void set_Failures(SessionRemoteExceptionCollection value);
    public bool get_IsSuccess();
    public void Check();
    internal void AddFailure(SessionRemoteException failure);
}
internal class WinSCP.OperationResultGuard : object {
    private Session _session;
    private OperationResultBase _operationResult;
    public OperationResultGuard(Session session, OperationResultBase operationResult);
    public sealed virtual void Dispose();
}
[GuidAttribute("42861F26-1ECA-43BA-8A43-ADF3291D8C81")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.OutputDataReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Error>k__BackingField;
    public string Data { get; private set; }
    public bool Error { get; private set; }
    internal OutputDataReceivedEventArgs(string data, bool error);
    [CompilerGeneratedAttribute]
public string get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(string value);
    [CompilerGeneratedAttribute]
public bool get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(bool value);
    public virtual string ToString();
}
public class WinSCP.OutputDataReceivedEventHandler : MulticastDelegate {
    public OutputDataReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OutputDataReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OutputDataReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("E0F3C3C2-C812-48F1-A711-E0BD0F703976")]
[ComVisibleAttribute("True")]
public enum WinSCP.OverwriteMode : Enum {
    public int value__;
    public static OverwriteMode Overwrite;
    public static OverwriteMode Resume;
    public static OverwriteMode Append;
}
internal class WinSCP.PatientFileStream : Stream {
    private static int InitialInterval;
    private FileStream _stream;
    private Session _session;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public PatientFileStream(Session session, string path, FileMode mode, FileAccess access, FileShare share);
    public virtual void Close();
    public virtual int Read(Byte[] array, int offset, int count);
    private void Wait(Int32& interval);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
internal class WinSCP.PipeStream : Stream {
    private Queue`1<byte> _buffer;
    private bool _isFlushed;
    private bool _isDisposed;
    private bool _closedWrite;
    private long _position;
    [CompilerGeneratedAttribute]
private long <MaxBufferLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <OnDispose>k__BackingField;
    public long MaxBufferLength { get; public set; }
    public Action OnDispose { get; public set; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    [CompilerGeneratedAttribute]
public long get_MaxBufferLength();
    [CompilerGeneratedAttribute]
public void set_MaxBufferLength(long value);
    [CompilerGeneratedAttribute]
public Action get_OnDispose();
    [CompilerGeneratedAttribute]
public void set_OnDispose(Action value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public bool ReadAvailable(int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public void WriteInternal(Byte[] buffer, int offset, int count);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public void CloseWrite();
    private void CheckDisposed();
    private void Closed();
}
internal class WinSCP.ProgressHandler : object {
    private Session _session;
    public ProgressHandler(Session session);
    public sealed virtual void Dispose();
}
public enum WinSCP.ProgressOperation : Enum {
    public int value__;
    public static ProgressOperation Transfer;
}
[GuidAttribute("16B6D8F6-C0B4-487D-9546-A25BBF582ED6")]
[ComVisibleAttribute("True")]
public enum WinSCP.ProgressSide : Enum {
    public int value__;
    public static ProgressSide Local;
    public static ProgressSide Remote;
}
[GuidAttribute("F25C49A5-74A6-4E8F-AEB4-5B4E0DDF0EF9")]
[ComVisibleAttribute("True")]
public enum WinSCP.Protocol : Enum {
    public int value__;
    public static Protocol Sftp;
    public static Protocol Scp;
    public static Protocol Ftp;
    public static Protocol Webdav;
    public static Protocol S3;
}
[GuidAttribute("1C2C3740-CB42-4B10-B240-2EF64E03DAA3")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.QueryReceivedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <SelectedAction>k__BackingField;
    public string Message { get; internal set; }
    internal Action SelectedAction { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
internal Action get_SelectedAction();
    [CompilerGeneratedAttribute]
internal void set_SelectedAction(Action value);
    public void Abort();
    public void Continue();
}
public class WinSCP.QueryReceivedEventHandler : MulticastDelegate {
    public QueryReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QueryReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class WinSCP.ReadOnlyInteropCollection`1 : object {
    private List`1<T> _list;
    public T Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void InternalAdd(T item);
    internal void InternalRemoveFirst();
    private static Exception CreateReadOnlyException();
}
internal enum WinSCP.RegistryFlags : Enum {
    public int value__;
    public static RegistryFlags RegSz;
    public static RegistryFlags SubKeyWow6432Key;
}
internal enum WinSCP.RegistryType : Enum {
    public int value__;
    public static RegistryType RegNone;
}
[GuidAttribute("FBE2FACF-F1D5-493D-9E41-4B9B7243A676")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.RemoteDirectoryInfo : object {
    [CompilerGeneratedAttribute]
private RemoteFileInfoCollection <Files>k__BackingField;
    public RemoteFileInfoCollection Files { get; private set; }
    [CompilerGeneratedAttribute]
public RemoteFileInfoCollection get_Files();
    [CompilerGeneratedAttribute]
private void set_Files(RemoteFileInfoCollection value);
    internal void AddFile(RemoteFileInfo file);
}
[GuidAttribute("17FF9C92-B8B6-4506-A7BA-8482D9B0AB07")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.RemoteFileInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private char <FileType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTime>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePermissions <FilePermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Group>k__BackingField;
    public string Name { get; internal set; }
    public string FullName { get; internal set; }
    public char FileType { get; internal set; }
    public long Length { get; internal set; }
    public int Length32 { get; public set; }
    public DateTime LastWriteTime { get; internal set; }
    public FilePermissions FilePermissions { get; internal set; }
    public string Owner { get; internal set; }
    public string Group { get; internal set; }
    public bool IsDirectory { get; }
    public bool IsThisDirectory { get; }
    public bool IsParentDirectory { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
internal void set_FullName(string value);
    [CompilerGeneratedAttribute]
public char get_FileType();
    [CompilerGeneratedAttribute]
internal void set_FileType(char value);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
internal void set_Length(long value);
    public int get_Length32();
    public void set_Length32(int value);
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTime();
    [CompilerGeneratedAttribute]
internal void set_LastWriteTime(DateTime value);
    [CompilerGeneratedAttribute]
public FilePermissions get_FilePermissions();
    [CompilerGeneratedAttribute]
internal void set_FilePermissions(FilePermissions value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(string value);
    [CompilerGeneratedAttribute]
public string get_Group();
    [CompilerGeneratedAttribute]
internal void set_Group(string value);
    public bool get_IsDirectory();
    public bool get_IsThisDirectory();
    public bool get_IsParentDirectory();
    public virtual string ToString();
    private int GetLength32();
    private void SetLength32(int value);
    internal static bool IsDirectoryFileType(char fileType);
}
[GuidAttribute("39AA3D00-578C-49AF-B3E4-16CE26C710C6")]
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
[ComDefaultInterfaceAttribute("System.Collections.IEnumerable")]
public class WinSCP.RemoteFileInfoCollection : ReadOnlyInteropCollection`1<RemoteFileInfo> {
}
[GuidAttribute("70253534-C5DC-4EF3-9C98-65C57D79C324")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.RemotePath : object {
    private Type System.Reflection.IReflect.UnderlyingSystemType { get; }
    public static string EscapeFileMask(string fileMask);
    public static string EscapeOperationMask(string operationMask);
    [ObsoleteAttribute("Use RemotePath.Combine method")]
public static string CombinePaths(string path1, string path2);
    public static string Combine(string path1, string path2);
    public static string TranslateRemotePathToLocal(string remotePath, string remoteRoot, string localRoot);
    private static string AddSeparator(string path, string separator);
    public static string TranslateLocalPathToRemote(string localPath, string localRoot, string remoteRoot);
    public static string GetDirectoryName(string path);
    public static string AddDirectorySeparator(string path);
    public static string GetFileName(string path);
    private sealed virtual override FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr);
    private sealed virtual override FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr);
    private sealed virtual override object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    private sealed virtual override Type System.Reflection.IReflect.get_UnderlyingSystemType();
}
[GuidAttribute("62FB0733-C24F-4DC2-8452-560148931927")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.RemovalEventArgs : FileOperationEventArgs {
    internal static string Tag;
    internal static RemovalEventArgs Read(CustomLogReader areader);
}
[GuidAttribute("574FF430-FD40-41F9-9A04-971D3CF844B7")]
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
[ComDefaultInterfaceAttribute("System.Collections.IEnumerable")]
public class WinSCP.RemovalEventArgsCollection : ReadOnlyInteropCollection`1<RemovalEventArgs> {
}
[GuidAttribute("3BCB18EC-6D98-4BFB-A9C2-893CBD13CDAB")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.RemovalOperationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private RemovalEventArgsCollection <Removals>k__BackingField;
    public RemovalEventArgsCollection Removals { get; private set; }
    [CompilerGeneratedAttribute]
public RemovalEventArgsCollection get_Removals();
    [CompilerGeneratedAttribute]
private void set_Removals(RemovalEventArgsCollection value);
    internal void AddRemoval(RemovalEventArgs operation);
}
internal class WinSCP.SecurityAttributes : ValueType {
    public UInt32 nLength;
    public IntPtr lpSecurityDescriptor;
    public int bInheritHandle;
}
[GuidAttribute("56FFC5CE-3867-4EF0-A3B5-CFFBEB99EA35")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
[ComSourceInterfacesAttribute("WinSCP.ISessionEvents")]
public class WinSCP.Session : object {
    [CompilerGeneratedAttribute]
private bool <XmlLogPreserve>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Timeout>k__BackingField;
    [CompilerGeneratedAttribute]
private StringCollection <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private FileTransferredEventHandler FileTransferred;
    [CompilerGeneratedAttribute]
private FailedEventHandler Failed;
    [CompilerGeneratedAttribute]
private OutputDataReceivedEventHandler OutputDataReceived;
    internal static string Namespace;
    [CompilerGeneratedAttribute]
private Logger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TestHandlesClosedInternal>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RawConfiguration>k__BackingField;
    private ExeSessionProcess _process;
    private DateTime _lastOutput;
    private ElementLogReader _reader;
    private SessionLogReader _logReader;
    private IList`1<OperationResultBase> _operationResults;
    private IList`1<Action> _events;
    private AutoResetEvent _eventsEvent;
    private ManualResetEvent _choiceEvent;
    private bool _disposed;
    private string _executablePath;
    private string _additionalExecutableArguments;
    private bool _defaultConfiguration;
    private bool _disableVersionCheck;
    private string _iniFilePath;
    private TimeSpan _reconnectTime;
    private string _sessionLogPath;
    private bool _aborted;
    private int _logUnique;
    private string _xmlLogPath;
    private FileTransferProgressEventHandler _fileTransferProgress;
    private int _progressHandling;
    private bool _guardProcessWithJob;
    private string _homePath;
    private StringCollection _error;
    private bool _ignoreFailed;
    private TimeSpan _sessionTimeout;
    private QueryReceivedEventHandler _queryReceived;
    private bool _throwStdOut;
    public string ExecutablePath { get; public set; }
    public string AdditionalExecutableArguments { get; public set; }
    [ObsoleteAttribute("Use AddRawConfiguration")]
public bool DefaultConfiguration { get; public set; }
    public bool DisableVersionCheck { get; public set; }
    [ObsoleteAttribute("Use AddRawConfiguration")]
public string IniFilePath { get; public set; }
    public TimeSpan ReconnectTime { get; public set; }
    public int ReconnectTimeInMilliseconds { get; public set; }
    public string DebugLogPath { get; public set; }
    public int DebugLogLevel { get; public set; }
    public string SessionLogPath { get; public set; }
    public string XmlLogPath { get; public set; }
    public bool XmlLogPreserve { get; public set; }
    public string HomePath { get; }
    public TimeSpan Timeout { get; public set; }
    public StringCollection Output { get; private set; }
    public bool Opened { get; }
    internal bool WantsProgress { get; }
    private Type System.Reflection.IReflect.UnderlyingSystemType { get; }
    internal Logger Logger { get; private set; }
    internal bool GuardProcessWithJobInternal { get; internal set; }
    internal bool TestHandlesClosedInternal { get; internal set; }
    internal Dictionary`2<string, string> RawConfiguration { get; private set; }
    internal bool DefaultConfigurationInternal { get; }
    internal string IniFilePathInternal { get; }
    public string get_ExecutablePath();
    public void set_ExecutablePath(string value);
    public string get_AdditionalExecutableArguments();
    public void set_AdditionalExecutableArguments(string value);
    public bool get_DefaultConfiguration();
    public void set_DefaultConfiguration(bool value);
    public bool get_DisableVersionCheck();
    public void set_DisableVersionCheck(bool value);
    public string get_IniFilePath();
    public void set_IniFilePath(string value);
    public TimeSpan get_ReconnectTime();
    public void set_ReconnectTime(TimeSpan value);
    public int get_ReconnectTimeInMilliseconds();
    public void set_ReconnectTimeInMilliseconds(int value);
    public string get_DebugLogPath();
    public void set_DebugLogPath(string value);
    public int get_DebugLogLevel();
    public void set_DebugLogLevel(int value);
    public string get_SessionLogPath();
    public void set_SessionLogPath(string value);
    public string get_XmlLogPath();
    public void set_XmlLogPath(string value);
    [CompilerGeneratedAttribute]
public bool get_XmlLogPreserve();
    [CompilerGeneratedAttribute]
public void set_XmlLogPreserve(bool value);
    public string get_HomePath();
    [CompilerGeneratedAttribute]
public TimeSpan get_Timeout();
    [CompilerGeneratedAttribute]
public void set_Timeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public StringCollection get_Output();
    [CompilerGeneratedAttribute]
private void set_Output(StringCollection value);
    public bool get_Opened();
    [CompilerGeneratedAttribute]
public void add_FileTransferred(FileTransferredEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FileTransferred(FileTransferredEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Failed(FailedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Failed(FailedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_OutputDataReceived(OutputDataReceivedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_OutputDataReceived(OutputDataReceivedEventHandler value);
    public void add_FileTransferProgress(FileTransferProgressEventHandler value);
    public void remove_FileTransferProgress(FileTransferProgressEventHandler value);
    private CallstackAndLock CreateCallstackAndLock();
    public void add_QueryReceived(QueryReceivedEventHandler value);
    public void remove_QueryReceived(QueryReceivedEventHandler value);
    private void AddQueryReceived(QueryReceivedEventHandler value);
    private void RemoveQueryReceived(QueryReceivedEventHandler value);
    private void ResetOutput();
    public sealed virtual void Dispose();
    public void Abort();
    public void Open(SessionOptions sessionOptions);
    private void SendOptionBatchCommand();
    private void WaitForGroup();
    internal string GetErrorOutputMessage();
    private static string ListToString(StringCollection list);
    public string ScanFingerprint(SessionOptions sessionOptions, string algorithm);
    private static string NormalizeIdent(string algorithm);
    public void Close();
    public RemoteDirectoryInfo ListDirectory(string path);
    [IteratorStateMachineAttribute("WinSCP.Session/<DoEnumerateRemoteFiles>d__80")]
private IEnumerable`1<RemoteFileInfo> DoEnumerateRemoteFiles(string path, Regex regex, EnumerationOptions options, bool throwReadErrors);
    public IEnumerable`1<RemoteFileInfo> EnumerateRemoteFiles(string path, string mask, EnumerationOptions options);
    internal static Regex MaskToRegex(string mask);
    public TransferOperationResult PutFiles(string localPath, string remotePath, bool remove, TransferOptions options);
    public TransferOperationResult DoPutFiles(string localPath, string remotePath, bool remove, TransferOptions options);
    public TransferOperationResult PutFilesToDirectory(string localDirectory, string remoteDirectory, string filemask, bool remove, TransferOptions options);
    public TransferEventArgs PutFileToDirectory(string localFilePath, string remoteDirectory, bool remove, TransferOptions options);
    public void PutFile(Stream stream, string remoteFilePath, TransferOptions options);
    internal TransferOperationResult PutEntryToDirectory(string localFilePath, string remoteDirectory, bool remove, TransferOptions options);
    private void AddTransfer(TransferOperationResult result, TransferEventArgs args);
    public TransferOperationResult GetFiles(string remotePath, string localPath, bool remove, TransferOptions options);
    private TransferOperationResult DoGetFiles(string remotePath, string localPath, bool remove, TransferOptions options, string additionalParams);
    private void StartGetCommand(string remotePath, string localPath, bool remove, TransferOptions options, string additionalParams);
    public TransferOperationResult GetFilesToDirectory(string remoteDirectory, string localDirectory, string filemask, bool remove, TransferOptions options);
    private TransferOperationResult DoGetFilesToDirectory(string remoteDirectory, string localDirectory, string filemask, bool remove, TransferOptions options, string additionalParams);
    public TransferEventArgs GetFileToDirectory(string remoteFilePath, string localDirectory, bool remove, TransferOptions options);
    internal TransferOperationResult GetEntryToDirectory(string remoteFilePath, string localDirectory, bool remove, TransferOptions options, string additionalParams);
    private void ParseRemotePath(string remoteFilePath, String& remoteDirectory, String& filemask);
    private T GetOnlyFileOperation(ICollection`1<T> operations);
    public Stream GetFile(string remoteFilePath, TransferOptions options);
    public RemovalOperationResult RemoveFiles(string path);
    private RemovalOperationResult DoRemoveFiles(string path, string additionalParams);
    public RemovalEventArgs RemoveFile(string path);
    internal RemovalOperationResult RemoveEntry(string path, string additionalParams);
    public SynchronizationResult SynchronizeDirectories(SynchronizationMode mode, string localPath, string remotePath, bool removeFiles, bool mirror, SynchronizationCriteria criteria, TransferOptions options);
    private void DoSynchronizeDirectories(SynchronizationMode mode, string localPath, string remotePath, bool removeFiles, bool mirror, SynchronizationCriteria criteria, TransferOptions options, string additionalParameters);
    private SynchronizationResult ReadSynchronizeDirectories();
    public ComparisonDifferenceCollection CompareDirectories(SynchronizationMode mode, string localPath, string remotePath, bool removeFiles, bool mirror, SynchronizationCriteria criteria, TransferOptions options);
    private ComparisonDifferenceCollection ReadCompareDirectories(string localPath, string remotePath);
    public CommandExecutionResult ExecuteCommand(string command);
    public RemoteFileInfo GetFileInfo(string path);
    public bool TryGetFileInfo(string path, RemoteFileInfo& fileInfo);
    public bool FileExists(string path);
    public Byte[] CalculateFileChecksum(string algorithm, string path);
    public void CreateDirectory(string path);
    public void MoveFile(string sourcePath, string targetPath);
    public void DuplicateFile(string sourcePath, string targetPath);
    [ObsoleteAttribute("Use RemotePath.EscapeFileMask")]
public string EscapeFileMask(string fileMask);
    [ObsoleteAttribute("Use RemotePath.TranslateRemotePathToLocal")]
public string TranslateRemotePathToLocal(string remotePath, string remoteRoot, string localRoot);
    [ObsoleteAttribute("Use RemotePath.TranslateLocalPathToRemote")]
public string TranslateLocalPathToRemote(string localPath, string localRoot, string remoteRoot);
    [ObsoleteAttribute("Use RemotePath.CombinePaths")]
public string CombinePaths(string path1, string path2);
    public void AddRawConfiguration(string setting, string value);
    private void ReadFile(RemoteFileInfo fileInfo, CustomLogReader fileReader);
    internal static string BooleanSwitch(bool flag, string name);
    internal static string BooleanSwitch(bool flag, string onName, string offName);
    private void AddSynchronizationTransfer(SynchronizationResult result, TransferEventArgs transfer);
    private static string IncludeTrailingSlash(string path);
    private void Cleanup();
    private void WriteCommand(string command);
    private void WriteCommand(string command, string log);
    private static void ReadElement(CustomLogReader reader, LogReadFlags flags);
    private void SessionOptionsToUrlAndSwitches(SessionOptions sessionOptions, bool scanFingerprint, String& command, String& log);
    private void SessionOptionsToSwitches(SessionOptions sessionOptions, bool scanFingerprint, String& arguments, String& logArguments);
    internal static string GenerateInMemoryPrivateKey(SessionOptions sessionOptions);
    private static string AddStarToList(string list);
    private RemoteFileInfo DoGetFileInfo(string path);
    internal static string FormatSwitch(string key);
    internal static string FormatSwitch(string key, string value);
    internal static string FormatSwitch(string key, int value);
    internal static string FormatSwitch(string key, bool value);
    private static string UriEscape(string s);
    internal void GotOutput();
    private void ProcessOutputDataReceived(object sender, OutputDataReceivedEventArgs e);
    private void ScheduleEvent(Action action);
    internal void CheckForTimeout(string additional);
    private void RaiseFileTransferredEvent(TransferEventArgs args);
    internal void RaiseFailed(SessionRemoteException e);
    private void CheckNotDisposed();
    private void CheckOpened();
    private void CheckNotOpened();
    private void RaiseOutputDataReceived(string data, bool error);
    internal void DispatchEvents(int interval);
    private IDisposable RegisterOperationResult(OperationResultBase operationResult);
    internal void UnregisterOperationResult(OperationResultBase operationResult);
    internal bool get_WantsProgress();
    private IDisposable CreateProgressHandler();
    internal void DisableProgressHandling();
    internal void ProcessChoice(QueryReceivedEventArgs args);
    private void Choice(QueryReceivedEventArgs args);
    internal void ProcessProgress(FileTransferProgressEventArgs args);
    private void Progress(FileTransferProgressEventArgs args);
    private void SetupTempPath();
    private string GetExecutablePath();
    private void SetSessionLogPath(string value);
    private sealed virtual override FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr);
    private sealed virtual override FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr);
    private void LogInvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    private sealed virtual override object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    private sealed virtual override Type System.Reflection.IReflect.get_UnderlyingSystemType();
    [CompilerGeneratedAttribute]
internal Logger get_Logger();
    [CompilerGeneratedAttribute]
private void set_Logger(Logger value);
    internal bool get_GuardProcessWithJobInternal();
    internal void set_GuardProcessWithJobInternal(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TestHandlesClosedInternal();
    [CompilerGeneratedAttribute]
internal void set_TestHandlesClosedInternal(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_RawConfiguration();
    [CompilerGeneratedAttribute]
private void set_RawConfiguration(Dictionary`2<string, string> value);
    internal bool get_DefaultConfigurationInternal();
    internal string get_IniFilePathInternal();
}
internal class WinSCP.SessionElementLogReader : ElementLogReader {
    private bool _disposing;
    public SessionElementLogReader(CustomLogReader parentReader);
    public virtual void Dispose();
    public virtual bool Read(LogReadFlags flags);
}
[GuidAttribute("91109A4F-D81A-4326-BEC5-1AB26EBF89A6")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.SessionException : Exception {
    [CompilerGeneratedAttribute]
private Session <Session>k__BackingField;
    public Session Session { get; private set; }
    internal SessionException(Session session, string message);
    internal SessionException(Session session, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public Session get_Session();
    [CompilerGeneratedAttribute]
private void set_Session(Session value);
}
[GuidAttribute("59B362D6-7FD3-4EF0-A3B6-E3244F793778")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.SessionLocalException : SessionException {
    internal SessionLocalException(Session session, string message);
    internal SessionLocalException(Session session, string message, Exception innerException);
    internal static SessionLocalException CreateElementNotFound(Session session, string localName);
}
internal class WinSCP.SessionLogReader : CustomLogReader {
    private int _position;
    private XmlReader _reader;
    private PatientFileStream _stream;
    private bool _closed;
    private string _logged;
    private bool _timeouted;
    internal XmlReader Reader { get; }
    public SessionLogReader(Session session);
    public void SetTimeouted();
    public virtual void Dispose();
    private void Cleanup();
    public virtual bool Read(LogReadFlags flags);
    private bool DoRead();
    private void LogContents();
    private void OpenLog();
    internal virtual XmlReader get_Reader();
}
[GuidAttribute("2D4EF368-EE80-4C15-AE77-D12AEAF4B00A")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.SessionOptions : object {
    [CompilerGeneratedAttribute]
private string <HostName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Secure>k__BackingField;
    [CompilerGeneratedAttribute]
private SshHostKeyPolicy <SshHostKeyPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SshPrivateKeyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SshPrivateKey>k__BackingField;
    [CompilerGeneratedAttribute]
private FtpMode <FtpMode>k__BackingField;
    [CompilerGeneratedAttribute]
private FtpSecure <FtpSecure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GiveUpSecurityAndAcceptAnyTlsHostCertificate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TlsClientCertificatePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RawSettings>k__BackingField;
    private SecureString _securePassword;
    private SecureString _secureNewPassword;
    private SecureString _securePrivateKeyPassphrase;
    private string _sshHostKeyFingerprint;
    private string _tlsHostCertificateFingerprint;
    private TimeSpan _timeout;
    private int _portNumber;
    private string _rootPath;
    private Protocol _protocol;
    private string _name;
    private static string _listPattern;
    private static string _sshHostKeyPattern;
    private static Regex _sshHostKeyRegex;
    private static string _tlsCertificatePattern;
    private static Regex _tlsCertificateRegex;
    public string Name { get; public set; }
    public Protocol Protocol { get; public set; }
    public string HostName { get; public set; }
    public int PortNumber { get; public set; }
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public SecureString SecurePassword { get; public set; }
    public string NewPassword { get; public set; }
    public SecureString SecureNewPassword { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public int TimeoutInMilliseconds { get; public set; }
    public string PrivateKeyPassphrase { get; public set; }
    public SecureString SecurePrivateKeyPassphrase { get; public set; }
    public string RootPath { get; public set; }
    public bool Secure { get; public set; }
    public string SshHostKeyFingerprint { get; public set; }
    public SshHostKeyPolicy SshHostKeyPolicy { get; public set; }
    [ObsoleteAttribute("Use SshHostKeyPolicy")]
public bool GiveUpSecurityAndAcceptAnySshHostKey { get; public set; }
    public string SshPrivateKeyPath { get; public set; }
    public string SshPrivateKey { get; public set; }
    [ObsoleteAttribute("Use PrivateKeyPassphrase")]
public string SshPrivateKeyPassphrase { get; public set; }
    public FtpMode FtpMode { get; public set; }
    public FtpSecure FtpSecure { get; public set; }
    [ObsoleteAttribute("Use Secure")]
public bool WebdavSecure { get; public set; }
    [ObsoleteAttribute("Use RootPath")]
public string WebdavRoot { get; public set; }
    public string TlsHostCertificateFingerprint { get; public set; }
    public bool GiveUpSecurityAndAcceptAnyTlsHostCertificate { get; public set; }
    public string TlsClientCertificatePath { get; public set; }
    internal Dictionary`2<string, string> RawSettings { get; private set; }
    internal bool IsSsh { get; }
    internal bool IsTls { get; }
    private static SessionOptions();
    public string get_Name();
    public void set_Name(string value);
    public Protocol get_Protocol();
    public void set_Protocol(Protocol value);
    [CompilerGeneratedAttribute]
public string get_HostName();
    [CompilerGeneratedAttribute]
public void set_HostName(string value);
    public int get_PortNumber();
    public void set_PortNumber(int value);
    [CompilerGeneratedAttribute]
public string get_UserName();
    [CompilerGeneratedAttribute]
public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public SecureString get_SecurePassword();
    public void set_SecurePassword(SecureString value);
    public string get_NewPassword();
    public void set_NewPassword(string value);
    public SecureString get_SecureNewPassword();
    public void set_SecureNewPassword(SecureString value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public int get_TimeoutInMilliseconds();
    public void set_TimeoutInMilliseconds(int value);
    public string get_PrivateKeyPassphrase();
    public void set_PrivateKeyPassphrase(string value);
    public SecureString get_SecurePrivateKeyPassphrase();
    public void set_SecurePrivateKeyPassphrase(SecureString value);
    public string get_RootPath();
    public void set_RootPath(string value);
    [CompilerGeneratedAttribute]
public bool get_Secure();
    [CompilerGeneratedAttribute]
public void set_Secure(bool value);
    public string get_SshHostKeyFingerprint();
    public void set_SshHostKeyFingerprint(string value);
    [CompilerGeneratedAttribute]
public SshHostKeyPolicy get_SshHostKeyPolicy();
    [CompilerGeneratedAttribute]
public void set_SshHostKeyPolicy(SshHostKeyPolicy value);
    public bool get_GiveUpSecurityAndAcceptAnySshHostKey();
    public void set_GiveUpSecurityAndAcceptAnySshHostKey(bool value);
    [CompilerGeneratedAttribute]
public string get_SshPrivateKeyPath();
    [CompilerGeneratedAttribute]
public void set_SshPrivateKeyPath(string value);
    [CompilerGeneratedAttribute]
public string get_SshPrivateKey();
    [CompilerGeneratedAttribute]
public void set_SshPrivateKey(string value);
    public string get_SshPrivateKeyPassphrase();
    public void set_SshPrivateKeyPassphrase(string value);
    [CompilerGeneratedAttribute]
public FtpMode get_FtpMode();
    [CompilerGeneratedAttribute]
public void set_FtpMode(FtpMode value);
    [CompilerGeneratedAttribute]
public FtpSecure get_FtpSecure();
    [CompilerGeneratedAttribute]
public void set_FtpSecure(FtpSecure value);
    public bool get_WebdavSecure();
    public void set_WebdavSecure(bool value);
    public string get_WebdavRoot();
    public void set_WebdavRoot(string value);
    public string get_TlsHostCertificateFingerprint();
    public void set_TlsHostCertificateFingerprint(string value);
    [CompilerGeneratedAttribute]
public bool get_GiveUpSecurityAndAcceptAnyTlsHostCertificate();
    [CompilerGeneratedAttribute]
public void set_GiveUpSecurityAndAcceptAnyTlsHostCertificate(bool value);
    [CompilerGeneratedAttribute]
public string get_TlsClientCertificatePath();
    [CompilerGeneratedAttribute]
public void set_TlsClientCertificatePath(string value);
    public void AddRawSettings(string setting, string value);
    public void ParseUrl(string url);
    private bool ParseProtocol(string protocol);
    private static string EmptyToNull(string s);
    private static string UriUnescape(string s);
    private static string CutToChar(String& s, char c);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_RawSettings();
    [CompilerGeneratedAttribute]
private void set_RawSettings(Dictionary`2<string, string> value);
    internal bool get_IsSsh();
    internal bool get_IsTls();
    private bool GetIsTls();
    private void SetSshHostKeyFingerprint(string s);
    private void SetHostTlsCertificateFingerprint(string s);
    private void SetTimeout(TimeSpan value);
    private void SetPortNumber(int value);
    private void SetProtocol(Protocol value);
    private void SetRootPath(string value);
    private static void SetPassword(SecureString& securePassword, string value);
    private static string GetPassword(SecureString securePassword);
    private string GetName();
    public virtual string ToString();
    private void SetGiveUpSecurityAndAcceptAnySshHostKey(bool value);
    private bool GetGiveUpSecurityAndAcceptAnySshHostKey();
}
[GuidAttribute("0E8BBC73-AF4D-4E7E-995C-EB89D0BFDE9A")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.SessionRemoteException : SessionException {
    internal SessionRemoteException(Session session, string message);
    internal static bool IsResult(CustomLogReader reader);
    internal static SessionRemoteException ReadResult(CustomLogReader areader);
    internal static SessionRemoteException ReadFailure(CustomLogReader reader);
    private static SessionRemoteException ReadMessages(CustomLogReader areader);
}
[GuidAttribute("2309282F-B89B-4F6B-AEB1-D3E1629B7033")]
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
[ComDefaultInterfaceAttribute("System.Collections.IEnumerable")]
public class WinSCP.SessionRemoteExceptionCollection : ReadOnlyInteropCollection`1<SessionRemoteException> {
}
[GuidAttribute("8A98AB8F-30E8-4539-A3DE-A33DDC43B33C")]
[ComVisibleAttribute("True")]
public enum WinSCP.SshHostKeyPolicy : Enum {
    public int value__;
    public static SshHostKeyPolicy Check;
    public static SshHostKeyPolicy GiveUpSecurityAndAcceptAny;
    public static SshHostKeyPolicy AcceptNew;
}
[FlagsAttribute]
internal enum WinSCP.StandardRights : Enum {
    public int value__;
    public static StandardRights Delete;
    public static StandardRights ReadPermissions;
    public static StandardRights WritePermissions;
    public static StandardRights TakeOwnership;
    public static StandardRights Synchronize;
    public static StandardRights Required;
}
internal class WinSCP.StdOutException : Exception {
}
[GuidAttribute("E402CB1F-6219-4C79-9EDF-1914D9589909")]
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
[ComDefaultInterfaceAttribute("System.Collections.IEnumerable")]
public class WinSCP.StringCollection : ReadOnlyInteropCollection`1<string> {
}
[GuidAttribute("B1DAE3A0-5E56-4001-88D8-786F68557E28")]
[ComVisibleAttribute("True")]
public enum WinSCP.SynchronizationAction : Enum {
    public int value__;
    public static SynchronizationAction UploadNew;
    public static SynchronizationAction DownloadNew;
    public static SynchronizationAction UploadUpdate;
    public static SynchronizationAction DownloadUpdate;
    public static SynchronizationAction DeleteRemote;
    public static SynchronizationAction DeleteLocal;
}
[GuidAttribute("3F770EC1-35F5-4A7B-A000-46A2F7A213D8")]
[ComVisibleAttribute("True")]
[FlagsAttribute]
public enum WinSCP.SynchronizationCriteria : Enum {
    public int value__;
    public static SynchronizationCriteria None;
    public static SynchronizationCriteria Time;
    public static SynchronizationCriteria Size;
    public static SynchronizationCriteria Checksum;
    [ObsoleteAttribute("Use Time | Size")]
public static SynchronizationCriteria Either;
}
[GuidAttribute("38649D44-B839-4F2C-A9DC-5D45EEA4B5E9")]
[ComVisibleAttribute("True")]
public enum WinSCP.SynchronizationMode : Enum {
    public int value__;
    public static SynchronizationMode Local;
    public static SynchronizationMode Remote;
    public static SynchronizationMode Both;
}
[GuidAttribute("D0ADB4F7-47AE-43AC-AA41-9114650EA51A")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.SynchronizationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private TransferEventArgsCollection <Uploads>k__BackingField;
    [CompilerGeneratedAttribute]
private TransferEventArgsCollection <Downloads>k__BackingField;
    [CompilerGeneratedAttribute]
private RemovalEventArgsCollection <Removals>k__BackingField;
    public TransferEventArgsCollection Uploads { get; private set; }
    public TransferEventArgsCollection Downloads { get; private set; }
    public RemovalEventArgsCollection Removals { get; private set; }
    [CompilerGeneratedAttribute]
public TransferEventArgsCollection get_Uploads();
    [CompilerGeneratedAttribute]
private void set_Uploads(TransferEventArgsCollection value);
    [CompilerGeneratedAttribute]
public TransferEventArgsCollection get_Downloads();
    [CompilerGeneratedAttribute]
private void set_Downloads(TransferEventArgsCollection value);
    [CompilerGeneratedAttribute]
public RemovalEventArgsCollection get_Removals();
    [CompilerGeneratedAttribute]
private void set_Removals(RemovalEventArgsCollection value);
    internal void AddUpload(TransferEventArgs upload);
    internal void AddDownload(TransferEventArgs download);
    internal void AddRemoval(RemovalEventArgs removal);
}
internal static class WinSCP.Tools : object {
    public static int TimeSpanToMilliseconds(TimeSpan value);
    public static TimeSpan MillisecondsToTimeSpan(int value);
    public static string ArgumentEscape(string value);
    public static void AddRawParameters(String& arguments, Dictionary`2<string, string> parameters, string switchName, bool count);
    public static int LengthTo32Bit(long length);
}
[GuidAttribute("802FCEF7-E1D3-4205-B171-87A3724E85FA")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.TouchEventArgs : FileOperationEventArgs {
    [CompilerGeneratedAttribute]
private DateTime <LastWriteTime>k__BackingField;
    internal static string Tag;
    public DateTime LastWriteTime { get; private set; }
    [CompilerGeneratedAttribute]
public DateTime get_LastWriteTime();
    [CompilerGeneratedAttribute]
private void set_LastWriteTime(DateTime value);
    internal static TouchEventArgs Read(CustomLogReader areader);
}
[GuidAttribute("772FACCC-0786-42E1-B1C8-F08D13C9CD07")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.TransferEventArgs : FileOperationEventArgs {
    [CompilerGeneratedAttribute]
private ProgressSide <Side>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private TouchEventArgs <Touch>k__BackingField;
    [CompilerGeneratedAttribute]
private ChmodEventArgs <Chmod>k__BackingField;
    [CompilerGeneratedAttribute]
private RemovalEventArgs <Removal>k__BackingField;
    internal static string UploadTag;
    internal static string DownloadTag;
    internal static string MkDirTag;
    public ProgressSide Side { get; internal set; }
    public string Destination { get; private set; }
    public long Length { get; private set; }
    public TouchEventArgs Touch { get; internal set; }
    public ChmodEventArgs Chmod { get; internal set; }
    public RemovalEventArgs Removal { get; internal set; }
    [CompilerGeneratedAttribute]
public ProgressSide get_Side();
    [CompilerGeneratedAttribute]
internal void set_Side(ProgressSide value);
    [CompilerGeneratedAttribute]
public string get_Destination();
    [CompilerGeneratedAttribute]
private void set_Destination(string value);
    [CompilerGeneratedAttribute]
public long get_Length();
    [CompilerGeneratedAttribute]
private void set_Length(long value);
    [CompilerGeneratedAttribute]
public TouchEventArgs get_Touch();
    [CompilerGeneratedAttribute]
internal void set_Touch(TouchEventArgs value);
    [CompilerGeneratedAttribute]
public ChmodEventArgs get_Chmod();
    [CompilerGeneratedAttribute]
internal void set_Chmod(ChmodEventArgs value);
    [CompilerGeneratedAttribute]
public RemovalEventArgs get_Removal();
    [CompilerGeneratedAttribute]
internal void set_Removal(RemovalEventArgs value);
    internal static TransferEventArgs Read(ProgressSide side, CustomLogReader areader);
}
[GuidAttribute("0285917B-581A-4F6F-9A9D-1C34ABFB4E38")]
[ClassInterfaceAttribute("0")]
[ComVisibleAttribute("True")]
[ComDefaultInterfaceAttribute("System.Collections.IEnumerable")]
public class WinSCP.TransferEventArgsCollection : ReadOnlyInteropCollection`1<TransferEventArgs> {
}
[GuidAttribute("6B19CBFA-0D81-4B36-A587-E11AA6A06214")]
[ComVisibleAttribute("True")]
public enum WinSCP.TransferMode : Enum {
    public int value__;
    public static TransferMode Binary;
    public static TransferMode Ascii;
    public static TransferMode Automatic;
}
[GuidAttribute("74F668E6-8EF2-4D01-84D8-DA2FE619C062")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.TransferOperationResult : OperationResultBase {
    [CompilerGeneratedAttribute]
private TransferEventArgsCollection <Transfers>k__BackingField;
    public TransferEventArgsCollection Transfers { get; private set; }
    [CompilerGeneratedAttribute]
public TransferEventArgsCollection get_Transfers();
    [CompilerGeneratedAttribute]
private void set_Transfers(TransferEventArgsCollection value);
    internal void AddTransfer(TransferEventArgs operation);
}
[GuidAttribute("155B841F-39D4-40C8-BA87-C79675E14CE3")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.TransferOptions : object {
    [CompilerGeneratedAttribute]
private bool <PreserveTimestamp>k__BackingField;
    [CompilerGeneratedAttribute]
private FilePermissions <FilePermissions>k__BackingField;
    [CompilerGeneratedAttribute]
private TransferMode <TransferMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileMask>k__BackingField;
    [CompilerGeneratedAttribute]
private TransferResumeSupport <ResumeSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SpeedLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private OverwriteMode <OverwriteMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <RawSettings>k__BackingField;
    public bool PreserveTimestamp { get; public set; }
    public FilePermissions FilePermissions { get; public set; }
    public TransferMode TransferMode { get; public set; }
    public string FileMask { get; public set; }
    public TransferResumeSupport ResumeSupport { get; public set; }
    public int SpeedLimit { get; public set; }
    public OverwriteMode OverwriteMode { get; public set; }
    internal Dictionary`2<string, string> RawSettings { get; private set; }
    [CompilerGeneratedAttribute]
public bool get_PreserveTimestamp();
    [CompilerGeneratedAttribute]
public void set_PreserveTimestamp(bool value);
    [CompilerGeneratedAttribute]
public FilePermissions get_FilePermissions();
    [CompilerGeneratedAttribute]
public void set_FilePermissions(FilePermissions value);
    [CompilerGeneratedAttribute]
public TransferMode get_TransferMode();
    [CompilerGeneratedAttribute]
public void set_TransferMode(TransferMode value);
    [CompilerGeneratedAttribute]
public string get_FileMask();
    [CompilerGeneratedAttribute]
public void set_FileMask(string value);
    [CompilerGeneratedAttribute]
public TransferResumeSupport get_ResumeSupport();
    [CompilerGeneratedAttribute]
public void set_ResumeSupport(TransferResumeSupport value);
    [CompilerGeneratedAttribute]
public int get_SpeedLimit();
    [CompilerGeneratedAttribute]
public void set_SpeedLimit(int value);
    [CompilerGeneratedAttribute]
public OverwriteMode get_OverwriteMode();
    [CompilerGeneratedAttribute]
public void set_OverwriteMode(OverwriteMode value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_RawSettings();
    [CompilerGeneratedAttribute]
private void set_RawSettings(Dictionary`2<string, string> value);
    public void AddRawSettings(string setting, string value);
    internal string ToSwitches();
}
[GuidAttribute("6CED4579-0DF2-4E46-93E9-18780546B421")]
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
public class WinSCP.TransferResumeSupport : object {
    [CompilerGeneratedAttribute]
private TransferResumeSupportState <State>k__BackingField;
    private int _threshold;
    public TransferResumeSupportState State { get; public set; }
    public int Threshold { get; public set; }
    [CompilerGeneratedAttribute]
public TransferResumeSupportState get_State();
    [CompilerGeneratedAttribute]
public void set_State(TransferResumeSupportState value);
    public int get_Threshold();
    public void set_Threshold(int value);
    public virtual string ToString();
    private int GetThreshold();
    private void SetThreshold(int threshold);
}
[GuidAttribute("0ADAAEBC-4A15-4A9C-8ED4-D85F5630035C")]
[ComVisibleAttribute("True")]
public enum WinSCP.TransferResumeSupportState : Enum {
    public int value__;
    public static TransferResumeSupportState Default;
    public static TransferResumeSupportState On;
    public static TransferResumeSupportState Off;
    public static TransferResumeSupportState Smart;
}
internal static class WinSCP.UnsafeNativeMethods : object {
    public static int ERROR_ALREADY_EXISTS;
    public static SafeFileHandle CreateFileMapping(SafeFileHandle hFile, IntPtr lpAttributes, FileMapProtection fProtect, int dwMaximumSizeHigh, int dwMaximumSizeLow, string lpName);
    public static IntPtr MapViewOfFile(SafeFileHandle handle, FileMapAccess dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, UIntPtr dwNumberOfBytesToMap);
    public static bool UnmapViewOfFile(IntPtr lpBaseAddress);
    public static int CloseHandle(IntPtr hObject);
    public static IntPtr CreateJobObject(IntPtr a, string lpName);
    public static bool SetInformationJobObject(IntPtr hJob, JobObjectInfoType infoType, IntPtr lpJobObjectInfo, UInt32 cbJobObjectInfoLength);
    public static IntPtr GetProcessWindowStation();
    public static IntPtr GetThreadDesktop(int dwThreadId);
    public static int GetCurrentThreadId();
    public static int RegGetValue(UIntPtr hkey, string lpSubKey, string lpValue, RegistryFlags dwFlags, RegistryType& pdwType, IntPtr pvData, UInt32& pcbData);
}
[FlagsAttribute]
internal enum WinSCP.WindowStationRights : Enum {
    public int value__;
    public static WindowStationRights EnumDesktops;
    public static WindowStationRights ReadAttributes;
    public static WindowStationRights AccessClipboard;
    public static WindowStationRights CreateDesktop;
    public static WindowStationRights WriteAttributes;
    public static WindowStationRights AccessGlobalAtoms;
    public static WindowStationRights ExitWindows;
    public static WindowStationRights Enumerate;
    public static WindowStationRights ReadScreen;
    public static WindowStationRights AllAccess;
}
