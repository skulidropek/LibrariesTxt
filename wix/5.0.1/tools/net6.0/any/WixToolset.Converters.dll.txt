internal class WixToolset.Converters.ConversionLab : object {
    private XElement targetElement;
    private XElement parentElement;
    private List`1<XNode> siblingNodes;
    private int index;
    public ConversionLab(XElement targetElement);
    public void RemoveOrphanTextNodes();
    public void InsertElementBeforeTargetElement(XElement newElement);
    private bool IsUniqueElement(XElement newElement);
    public void InsertUniqueElementBeforeTargetElement(XElement newElement);
    public void RemoveTargetElement();
    public void ReplaceTargetElement(XElement replacement);
    public void AddCommentsAsSiblings(List`1<XNode> comments);
    public sealed virtual void Dispose();
}
internal class WixToolset.Converters.ConversionState : object {
    [CompilerGeneratedAttribute]
private List`1<Message> <ConversionMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<XElement>> <ChainPackageElementsById>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XElement> <WixMbaPrereqPackageIdElements>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<XElement> <WixMbaPrereqLicenseUrlElements>k__BackingField;
    [CompilerGeneratedAttribute]
private ConvertOperation <Operation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SourceVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <XDocument>k__BackingField;
    public List`1<Message> ConversionMessages { get; }
    public Dictionary`2<string, List`1<XElement>> ChainPackageElementsById { get; }
    public List`1<XElement> WixMbaPrereqPackageIdElements { get; }
    public List`1<XElement> WixMbaPrereqLicenseUrlElements { get; }
    public ConvertOperation Operation { get; }
    public string SourceFile { get; }
    public int SourceVersion { get; public set; }
    public XDocument XDocument { get; public set; }
    public ConversionState(ConvertOperation operation, string sourceFile);
    [CompilerGeneratedAttribute]
public List`1<Message> get_ConversionMessages();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<XElement>> get_ChainPackageElementsById();
    [CompilerGeneratedAttribute]
public List`1<XElement> get_WixMbaPrereqPackageIdElements();
    [CompilerGeneratedAttribute]
public List`1<XElement> get_WixMbaPrereqLicenseUrlElements();
    [CompilerGeneratedAttribute]
public ConvertOperation get_Operation();
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public int get_SourceVersion();
    [CompilerGeneratedAttribute]
public void set_SourceVersion(int value);
    [CompilerGeneratedAttribute]
public XDocument get_XDocument();
    [CompilerGeneratedAttribute]
public void set_XDocument(XDocument value);
    public void Initialize();
    public void Initialize(XDocument document);
}
internal class WixToolset.Converters.ConvertCommand : FixupCommandBase {
    private static string SettingsFileDefault;
    public ConvertCommand(IServiceProvider serviceProvider);
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
}
internal class WixToolset.Converters.ConverterExtensionCommandLine : BaseExtensionCommandLine {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public ConverterExtensionCommandLine(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual bool TryParseCommand(ICommandLineParser parser, string argument, ICommandLineCommand& command);
}
internal class WixToolset.Converters.ConverterExtensionFactory : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public ConverterExtensionFactory(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public sealed virtual bool TryCreateExtension(Type extensionType, Object& extension);
}
internal enum WixToolset.Converters.ConvertOperation : Enum {
    public int value__;
    public static ConvertOperation Convert;
    public static ConvertOperation Format;
}
public enum WixToolset.Converters.CustomTableTarget : Enum {
    public int value__;
    public static CustomTableTarget Unknown;
    public static CustomTableTarget Msi;
    public static CustomTableTarget Bundle;
}
internal abstract class WixToolset.Converters.FixupCommandBase : BaseCommandLineCommand {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomTableTarget <CustomTableSetting>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DryRun>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ErrorsAsWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <IgnoreErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ExemptFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentationAmount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Recurse>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SearchPatternResults>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SearchPatterns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFile1>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingsFile2>k__BackingField;
    protected IMessaging Messaging { get; }
    protected CustomTableTarget CustomTableSetting { get; protected set; }
    protected bool DryRun { get; protected set; }
    protected HashSet`1<string> ErrorsAsWarnings { get; }
    protected HashSet`1<string> IgnoreErrors { get; }
    protected HashSet`1<string> ExemptFiles { get; }
    protected int IndentationAmount { get; protected set; }
    protected bool Recurse { get; protected set; }
    private HashSet`1<string> SearchPatternResults { get; }
    private List`1<string> SearchPatterns { get; }
    private string SettingsFile1 { get; private set; }
    private string SettingsFile2 { get; private set; }
    protected FixupCommandBase(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
protected CustomTableTarget get_CustomTableSetting();
    [CompilerGeneratedAttribute]
protected void set_CustomTableSetting(CustomTableTarget value);
    [CompilerGeneratedAttribute]
protected bool get_DryRun();
    [CompilerGeneratedAttribute]
protected void set_DryRun(bool value);
    [CompilerGeneratedAttribute]
protected HashSet`1<string> get_ErrorsAsWarnings();
    [CompilerGeneratedAttribute]
protected HashSet`1<string> get_IgnoreErrors();
    [CompilerGeneratedAttribute]
protected HashSet`1<string> get_ExemptFiles();
    [CompilerGeneratedAttribute]
protected int get_IndentationAmount();
    [CompilerGeneratedAttribute]
protected void set_IndentationAmount(int value);
    [CompilerGeneratedAttribute]
protected bool get_Recurse();
    [CompilerGeneratedAttribute]
protected void set_Recurse(bool value);
    [CompilerGeneratedAttribute]
private HashSet`1<string> get_SearchPatternResults();
    [CompilerGeneratedAttribute]
private List`1<string> get_SearchPatterns();
    [CompilerGeneratedAttribute]
private string get_SettingsFile1();
    [CompilerGeneratedAttribute]
private void set_SettingsFile1(string value);
    [CompilerGeneratedAttribute]
private string get_SettingsFile2();
    [CompilerGeneratedAttribute]
private void set_SettingsFile2(string value);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    protected void ParseSettings(string defaultSettingsFile);
    protected int Inspect(Func`3<string, bool, int> inspector, CancellationToken cancellationToken);
    private int InspectSubDirectories(Func`3<string, bool, int> inspector, string directory, CancellationToken cancellationToken);
    private void ParseSettingsFiles(string localSettingsFile1, string localSettingsFile2);
    private static String[] GetFiles(string baseDir, string searchPath);
}
internal class WixToolset.Converters.FormatCommand : FixupCommandBase {
    private static string SettingsFileDefault;
    public FormatCommand(IServiceProvider serviceProvider);
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
internal static class WixToolset.Converters.HashSetExtensions : object {
    [ExtensionAttribute]
public static void AddRange(HashSet`1<T> set, IEnumerable`1<T> values);
}
public class WixToolset.Converters.WixConverter : object {
    private static Regex AddPrefix;
    private static Regex IllegalIdentifierCharacters;
    private static char XDocumentNewLine;
    private static XNamespace WixNamespace;
    private static XNamespace Wix3Namespace;
    private static XNamespace WixBalNamespace;
    private static XNamespace WixDependencyNamespace;
    private static XNamespace WixDirectXNamespace;
    private static XNamespace WixFirewallNamespace;
    private static XNamespace WixIisNamespace;
    private static XNamespace WixUiNamespace;
    private static XNamespace WixUtilNamespace;
    private static XNamespace WixVSNamespace;
    private static XNamespace WxlNamespace;
    private static XNamespace Wxl3Namespace;
    private static XName AdminExecuteSequenceElementName;
    private static XName AdminUISequenceSequenceElementName;
    private static XName AdvertiseExecuteSequenceElementName;
    private static XName InstallExecuteSequenceElementName;
    private static XName InstallUISequenceSequenceElementName;
    private static XName BootstrapperApplicationElementName;
    private static XName BootstrapperApplicationDllElementName;
    private static XName BootstrapperApplicationRefElementName;
    private static XName ApprovedExeForElevationElementName;
    private static XName BundleAttributeElementName;
    private static XName BundleAttributeDefinitionElementName;
    private static XName BundleCustomDataElementName;
    private static XName BundleCustomDataRefElementName;
    private static XName BundleElementElementName;
    private static XName CustomElementName;
    private static XName CustomTableElementName;
    private static XName CustomTableRefElementName;
    private static XName CatalogElementName;
    private static XName CertificateElementName;
    private static XName ColumnElementName;
    private static XName ComponentElementName;
    private static XName ControlElementName;
    private static XName ConditionElementName;
    private static XName CreateFolderElementName;
    private static XName DataElementName;
    private static XName OldProvidesElementName;
    private static XName OldRequiresElementName;
    private static XName OldRequiresRefElementName;
    private static XName DirectoryElementName;
    private static XName DirectoryRefElementName;
    private static XName EmbeddedChainerElementName;
    private static XName ErrorElementName;
    private static XName FeatureElementName;
    private static XName FileElementName;
    private static XName FragmentElementName;
    private static XName FirewallRemoteAddressElementName;
    private static XName LaunchElementName;
    private static XName LevelElementName;
    private static XName ExePackageElementName;
    private static XName ExePackagePayloadElementName;
    private static XName ModuleElementName;
    private static XName MsiPackageElementName;
    private static XName MspPackageElementName;
    private static XName MsuPackageElementName;
    private static XName MsuPackagePayloadElementName;
    private static XName PackageElementName;
    private static XName PayloadElementName;
    private static XName PermissionExElementName;
    private static XName ProductElementName;
    private static XName ProgressTextElementName;
    private static XName PropertyRefElementName;
    private static XName PublishElementName;
    private static XName ProvidesElementName;
    private static XName RequiresElementName;
    private static XName RequiresRefElementName;
    private static XName MultiStringValueElementName;
    private static XName RelatedBundleElementName;
    private static XName RemotePayloadElementName;
    private static XName RegistryKeyElementName;
    private static XName RegistrySearchElementName;
    private static XName RequiredPrivilegeElementName;
    private static XName RowElementName;
    private static XName ServiceArgumentElementName;
    private static XName SetDirectoryElementName;
    private static XName SetPropertyElementName;
    private static XName ShortcutPropertyElementName;
    private static XName SoftwareTagElementName;
    private static XName SoftwareTagRefElementName;
    private static XName StandardDirectoryElementName;
    private static XName TagElementName;
    private static XName TagRefElementName;
    private static XName TextElementName;
    private static XName UITextElementName;
    private static XName VariableElementName;
    private static XName VerbElementName;
    private static XName BalConditionElementName;
    private static XName BalPrereqLicenseUrlAttributeName;
    private static XName BalPrereqPackageAttributeName;
    private static XName BalUseUILanguagesName;
    private static XName BalStandardBootstrapperApplicationName;
    private static XName BalManagedBootstrapperApplicationHostName;
    private static XName BalOldDotNetCoreBootstrapperApplicationName;
    private static XName BalNewDotNetCoreBootstrapperApplicationName;
    private static XName UtilCloseApplicationElementName;
    private static XName UtilPermissionExElementName;
    private static XName UtilRegistrySearchName;
    private static XName UtilXmlConfigElementName;
    private static XName CustomActionElementName;
    private static XName CustomActionRefElementName;
    private static XName UIRefElementName;
    private static XName PropertyElementName;
    private static XName Wix4ElementName;
    private static XName Wix3ElementName;
    private static XName WixElementWithoutNamespaceName;
    private static XName WixVariableElementName;
    private static XName Include4ElementName;
    private static XName Include3ElementName;
    private static XName IncludeElementWithoutNamespaceName;
    private static XName SummaryInformationElementName;
    private static XName MediaTemplateElementName;
    private static XName DependencyCheckAttributeName;
    private static XName DependencyEnforceAttributeName;
    private static XName WixLocalization4ElementName;
    private static XName WixLocalizationStringElementName;
    private static XName WixLocalizationUIElementName;
    private static XName WixLocalization3ElementName;
    private static XName WixLocalizationElementWithoutNamespaceName;
    private static Dictionary`2<string, XNamespace> OldToNewNamespaceMapping;
    private static Dictionary`2<string, string> CustomActionIdsWithPlatformSuffix;
    private Dictionary`2<XName, Action`1<XElement>> ConvertElementMapping;
    private Regex DeprecatedPrefixRegex;
    [CompilerGeneratedAttribute]
private CustomTableTarget <CustomTableSetting>k__BackingField;
    [CompilerGeneratedAttribute]
private ConversionState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ConverterTestType> <ErrorsAsWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<ConverterTestType> <IgnoreErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IndentationAmount>k__BackingField;
    private CustomTableTarget CustomTableSetting { get; }
    private List`1<Message> ConversionMessages { get; }
    private ConversionState State { get; private set; }
    private HashSet`1<ConverterTestType> ErrorsAsWarnings { get; private set; }
    private HashSet`1<ConverterTestType> IgnoreErrors { get; private set; }
    private IMessaging Messaging { get; }
    private int IndentationAmount { get; private set; }
    private ConvertOperation Operation { get; }
    private string SourceFile { get; }
    private int SourceVersion { get; private set; }
    private XElement XRoot { get; }
    public WixConverter(IMessaging messaging, int indentationAmount, IEnumerable`1<string> errorsAsWarnings, IEnumerable`1<string> ignoreErrors, CustomTableTarget customTableTarget);
    private static WixConverter();
    [CompilerGeneratedAttribute]
private CustomTableTarget get_CustomTableSetting();
    private List`1<Message> get_ConversionMessages();
    [CompilerGeneratedAttribute]
private ConversionState get_State();
    [CompilerGeneratedAttribute]
private void set_State(ConversionState value);
    [CompilerGeneratedAttribute]
private HashSet`1<ConverterTestType> get_ErrorsAsWarnings();
    [CompilerGeneratedAttribute]
private void set_ErrorsAsWarnings(HashSet`1<ConverterTestType> value);
    [CompilerGeneratedAttribute]
private HashSet`1<ConverterTestType> get_IgnoreErrors();
    [CompilerGeneratedAttribute]
private void set_IgnoreErrors(HashSet`1<ConverterTestType> value);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private int get_IndentationAmount();
    [CompilerGeneratedAttribute]
private void set_IndentationAmount(int value);
    private ConvertOperation get_Operation();
    private string get_SourceFile();
    private int get_SourceVersion();
    private void set_SourceVersion(int value);
    private XElement get_XRoot();
    public int ConvertFile(string sourceFile, bool saveConvertedFile);
    public int ConvertDocument(XDocument document, string sourceFile);
    public int FormatFile(string sourceFile, bool saveConvertedFile);
    public int FormatDocument(XDocument document, string sourceFile);
    private void DoIt(XDocument document);
    private bool TryOpenSourceFile(ConvertOperation operation, string sourceFile);
    private bool SaveDocument(XDocument document);
    private void ConvertNodes(IEnumerable`1<XNode> nodes, int level);
    private bool TryFixDeprecatedLocalizationPrefixes(XNode node, string value, String& newValue, ConverterTestType testType);
    private void EnsurePrecedingWhitespaceCorrect(XText whitespace, XNode node, int level, ConverterTestType testType);
    private void EnsurePrecedingWhitespaceRemoved(XText whitespace, XNode node, ConverterTestType testType);
    private void ConvertElement(XElement element);
    private void ConvertBalConditionElement(XElement element);
    private void ConvertBootstrapperApplicationElement(XElement element);
    private XElement CreateBootstrapperApplicationDllElement(XElement element);
    private void ConvertBootstrapperApplicationRefElement(XElement element);
    private void ConvertApprovedExeForElevationElement(XElement element);
    private void ConvertBalBootstrapperApplicationRef(XElement element, string theme, XName balBAElementName, XName oldBalBAElementName);
    private void ConvertCatalogElement(XElement element);
    private void ConvertCertificateElement(XElement xCertificate);
    private void ConvertColumnElement(XElement element);
    private void ConvertCustomElement(XElement element);
    private void ConvertCustomTableElement(XElement element);
    private void ConvertCustomTableElementToBundle(XElement element);
    private void ConvertControlElement(XElement element);
    private void ConvertComponentElement(XElement element);
    private void ConvertDirectoryElement(XElement element);
    private void ConvertDirectoryRefElement(XElement element);
    private void ConvertFeatureElement(XElement element);
    private void ConvertFileElement(XElement element);
    private void ConvertLaunchConditionElement(XElement element);
    private void ConvertFirewallRemoteAddressElement(XElement element);
    private void ConvertEmbeddedChainerElement(XElement element);
    private void ConvertErrorElement(XElement element);
    private void ConvertExePackageElement(XElement element);
    private void ConvertPermissionExElement(XElement element);
    private void ConvertProgressTextElement(XElement element);
    private void ConvertModuleElement(XElement element);
    private void ConvertMsuPackageElement(XElement element);
    private void ConvertProductElement(XElement element);
    private static void MoveAttribute(XElement xSource, string attributeName, XElement xDestination, string destinationAttributeName, string defaultValue);
    private static void RemoveAttribute(XElement xSummaryInformation, string attributeName);
    private void ConvertPropertyRefElement(XElement element);
    private void ConvertUIRefElement(XElement element);
    private void ConvertCustomActionRefElement(XElement element);
    private void ConvertPublishElement(XElement element);
    private void ConvertMultiStringValueElement(XElement element);
    private void ConvertRegistryKeyElement(XElement element);
    private void ConvertRelatedBundleElement(XElement element);
    private void ConvertRemotePayloadElement(XElement element);
    private void ConvertRegistrySearchElement(XElement element);
    private void ConvertRequiredPrivilegeElement(XElement element);
    private void ConvertDataElement(XElement element);
    private void ConvertSequenceElement(XElement element);
    private void ConvertServiceArgumentElement(XElement element);
    private void ConvertSetDirectoryElement(XElement element);
    private void ConvertSetPropertyElement(XElement element);
    private void ConvertShortcutPropertyElement(XElement element);
    private void ConvertProvidesElement(XElement element);
    private void ConvertRequiresElement(XElement element);
    private void ConvertRequiresRefElement(XElement element);
    private void ConvertSuppressSignatureVerification(XElement element);
    private void ConvertTagElement(XElement element);
    private void ConvertTagRefElement(XElement element);
    private void ConvertTextElement(XElement element);
    private void ConvertUITextElement(XElement element);
    private void ConvertWindowsInstallerPackageElement(XElement element);
    private void ConvertVerbElement(XElement element);
    private void ConvertCustomActionElement(XElement xCustomAction);
    private void ConvertVariableElement(XElement xVariable);
    private void ConvertPropertyElement(XElement xProperty);
    private void ConvertUtilCloseApplicationElementName(XElement element);
    private void ConvertUtilPermissionExElement(XElement element);
    private void ConvertUtilRegistrySearchElement(XElement element);
    private void ConvertUtilXmlConfigElement(XElement element);
    private void ConvertElementWithoutNamespace(XElement element);
    private void ConvertWixLocalizationElementWithoutNamespace(XElement element);
    private void ConvertWixLocalizationStringElement(XElement element);
    private void ConvertWixLocalizationUIElement(XElement element);
    private void ConvertInnerTextToAttribute(XElement element, string attributeName);
    private void RemoveAttributeIfPresent(XElement element, string attributeName, ConverterTestType type, string format);
    private void RenameWin64ToBitness(XElement element);
    private void UpdatePackageCacheAttribute(XElement element);
    private string UpdateWin64ValueToBitnessValue(XAttribute xWin64Attribute);
    [IteratorStateMachineAttribute("WixToolset.Converters.WixConverter/<YieldConverterTypes>d__244")]
private IEnumerable`1<ConverterTestType> YieldConverterTypes(IEnumerable`1<string> types);
    private static void UpdateElementsWithDeprecatedNamespaces(IEnumerable`1<XElement> elements, Dictionary`2<XNamespace, XNamespace> deprecatedToUpdatedNamespaces);
    private static bool LeadingWhitespaceValid(int indentationAmount, int level, string whitespace);
    private static void FixupWhitespace(int indentationAmount, int level, XText whitespace);
    private void ConvertMbaPrereqVariables();
    private void RemoveUnusedNamespaces(XElement root);
    private void MoveNamespacesToRoot(XElement root);
    private int ReportMessages(XDocument document, bool saved);
    private IReadOnlyCollection`1<Message> FixupMessageLineNumbers(XObject obj, XPathNavigator savedDocument);
    private SourceLineNumber GetModifiedNodeLineNumber(XElement element, XPathNavigator savedDocument);
    private bool OnError(ConverterTestType converterTestType, XObject node, string message, Object[] args);
    private bool OnInformation(ConverterTestType converterTestType, XObject node, string message, Object[] args);
    private bool OnMessage(MessageLevel level, ConverterTestType converterTestType, XObject node, string message, Object[] args);
    private static string CalculateXPath(XElement element);
    private static SourceLineNumber SourceLineNumberForXmlLineInfo(string sourceFile, IXmlLineInfo lineInfo);
    private static string GetIdentifierFromName(string name);
    private static string GetNamespacePrefix(XAttribute declaration, HashSet`1<string> usedPrefixes);
    private static string LowercaseFirstChar(string value);
    private static string UppercaseFirstChar(string value);
    private static void AddTargetDirDirectoryAttributeToComponents(XElement element);
    private static void RemoveElementKeepChildren(XElement element);
    private static void RenameElementToStandardDirectory(XElement element);
    private static bool IsTextNode(XNode node, XText& text);
    private static void TrimLeadingText(XDocument document);
    private static void RemoveChildren(XElement element);
    private static bool VisitElement(XElement element, Func`2<XObject, bool> visitor);
    private static bool WasImplicitlyStringTyped(string value);
    [CompilerGeneratedAttribute]
private bool <CreateBootstrapperApplicationDllElement>g__CreateBADllElement|174_0(XObject node, XElement& xCreatedBADll);
    [CompilerGeneratedAttribute]
private bool <ConvertMbaPrereqVariables>b__248_0(XObject x);
}
[ExtensionAttribute]
public static class WixToolset.Converters.WixToolsetCoreServiceProviderExtensions : object {
    [ExtensionAttribute]
public static IWixToolsetCoreServiceProvider AddConverter(IWixToolsetCoreServiceProvider coreProvider);
}
