internal class WixToolset.Core.ExtensionCache.CachedExtension : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Damaged>k__BackingField;
    public string Id { get; }
    public string Version { get; }
    public bool Damaged { get; }
    public CachedExtension(string id, string version, bool damaged);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public bool get_Damaged();
}
internal class WixToolset.Core.ExtensionCache.ExtensionCacheManager : object {
    private IReadOnlyCollection`1<IExtensionCacheLocation> cacheLocations;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionManager <ExtensionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WixVersion>k__BackingField;
    private IMessaging Messaging { get; }
    private IExtensionManager ExtensionManager { get; }
    public string WixVersion { get; }
    public ExtensionCacheManager(IMessaging messaging, IExtensionManager extensionManager);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IExtensionManager get_ExtensionManager();
    [CompilerGeneratedAttribute]
public string get_WixVersion();
    [AsyncStateMachineAttribute("WixToolset.Core.ExtensionCache.ExtensionCacheManager/<AddAsync>d__11")]
public Task`1<bool> AddAsync(bool global, string extension, CancellationToken cancellationToken);
    public Task`1<bool> RemoveAsync(bool global, string extension, CancellationToken cancellationToken);
    public Task`1<IEnumerable`1<CachedExtension>> ListAsync(bool global, string extension, CancellationToken cancellationToken);
    private string GetCacheFolder(bool global);
    private IEnumerable`1<string> GetCacheFolders(bool global);
    [AsyncStateMachineAttribute("WixToolset.Core.ExtensionCache.ExtensionCacheManager/<DownloadAndExtractAsync>d__16")]
private Task`1<bool> DownloadAndExtractAsync(bool global, string id, string version, CancellationToken cancellationToken);
    private string ExtractProgress(string sourceFile, string targetPath, Stream fileStream);
    private static ValueTuple`2<string, string> ParseExtensionReference(string extensionReference);
    private bool ExtensionFileExists(string baseFolder, string extensionId, string extensionVersion);
}
internal class WixToolset.Core.ExtensionCache.ExtensionCacheManagerCommand : BaseCommandLineCommand {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionManager <ExtensionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Global>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CacheSubcommand> <Subcommand>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ExtensionReferences>k__BackingField;
    private IMessaging Messaging { get; }
    private IExtensionManager ExtensionManager { get; }
    private bool Global { get; private set; }
    private Nullable`1<CacheSubcommand> Subcommand { get; private set; }
    private List`1<string> ExtensionReferences { get; }
    public ExtensionCacheManagerCommand(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IExtensionManager get_ExtensionManager();
    [CompilerGeneratedAttribute]
private bool get_Global();
    [CompilerGeneratedAttribute]
private void set_Global(bool value);
    [CompilerGeneratedAttribute]
private Nullable`1<CacheSubcommand> get_Subcommand();
    [CompilerGeneratedAttribute]
private void set_Subcommand(Nullable`1<CacheSubcommand> value);
    [CompilerGeneratedAttribute]
private List`1<string> get_ExtensionReferences();
    public virtual CommandLineHelp GetCommandLineHelp();
    [AsyncStateMachineAttribute("WixToolset.Core.ExtensionCache.ExtensionCacheManagerCommand/<ExecuteAsync>d__20")]
public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    [AsyncStateMachineAttribute("WixToolset.Core.ExtensionCache.ExtensionCacheManagerCommand/<AddExtensions>d__22")]
private Task`1<bool> AddExtensions(ExtensionCacheManager cacheManager, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("WixToolset.Core.ExtensionCache.ExtensionCacheManagerCommand/<RemoveExtensions>d__23")]
private Task`1<bool> RemoveExtensions(ExtensionCacheManager cacheManager, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("WixToolset.Core.ExtensionCache.ExtensionCacheManagerCommand/<ListExtensions>d__24")]
private Task`1<bool> ListExtensions(ExtensionCacheManager cacheManager, CancellationToken cancellationToken);
}
internal class WixToolset.Core.ExtensionCache.ExtensionCacheManagerExtensionCommandLine : BaseExtensionCommandLine {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public ExtensionCacheManagerExtensionCommandLine(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual bool TryParseCommand(ICommandLineParser parser, string argument, ICommandLineCommand& command);
}
internal class WixToolset.Core.ExtensionCache.ExtensionCacheManagerExtensionFactory : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public ExtensionCacheManagerExtensionFactory(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public sealed virtual bool TryCreateExtension(Type extensionType, Object& extension);
}
internal static class WixToolset.Core.ExtensionCache.ExtensionCacheWarnings : object {
    public static Message NugetException(string extensionId, string exceptionMessage);
    public static Message MissingExtensionPackageRootFolder(string extensionId, string packageVersion, string packageRootFolderName, string wixVersion);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
[ExtensionAttribute]
public static class WixToolset.Core.ExtensionCache.WixToolsetCoreServiceProviderExtensions : object {
    [ExtensionAttribute]
public static IWixToolsetCoreServiceProvider AddExtensionCacheManager(IWixToolsetCoreServiceProvider coreProvider);
    private static ExtensionCacheManager CreateExtensionCacheManager(IWixToolsetCoreServiceProvider coreProvider, Dictionary`2<Type, object> singletons);
}
