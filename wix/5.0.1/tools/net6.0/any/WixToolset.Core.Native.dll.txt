[ExtensionAttribute]
internal static class WixToolset.Core.Native.AssemblyExtensions : object {
    [ExtensionAttribute]
internal static FindAssemblyRelativeFileResult FindFileRelativeToAssembly(Assembly assembly, string relativePath, bool searchNativeDllDirectories);
}
public class WixToolset.Core.Native.Cabinet : object {
    private static string CompressionLevelVariable;
    private static Char[] TextLineSplitter;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Path { get; }
    public Cabinet(string path);
    private static Cabinet();
    [CompilerGeneratedAttribute]
public string get_Path();
    public IReadOnlyCollection`1<CabinetCreated> Compress(IEnumerable`1<CabinetCompressFile> files, CompressionLevel compressionLevel, int maxSize, int maxThresh);
    public List`1<CabinetFileInfo> Enumerate();
    public IEnumerable`1<string> Extract(string outputFolder);
    private static IReadOnlyCollection`1<CabinetCreated> ParseCreatedCabinets(IReadOnlyCollection`1<string> cabinetsCreated);
}
public class WixToolset.Core.Native.CabinetCompressFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Hash>k__BackingField;
    public string Path { get; }
    public string Token { get; }
    public Int32[] Hash { get; }
    public CabinetCompressFile(string path, string token);
    public CabinetCompressFile(string path, string token, int hash1, int hash2, int hash3, int hash4);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public Int32[] get_Hash();
    internal string ToWixNativeStdinLine();
}
public class WixToolset.Core.Native.CabinetCreated : object {
    [CompilerGeneratedAttribute]
private string <CabinetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FirstFileToken>k__BackingField;
    public string CabinetName { get; }
    public string FirstFileToken { get; }
    public CabinetCreated(string cabinetName, string firstFileToken);
    [CompilerGeneratedAttribute]
public string get_CabinetName();
    [CompilerGeneratedAttribute]
public string get_FirstFileToken();
}
public class WixToolset.Core.Native.CabinetFileInfo : object {
    [CompilerGeneratedAttribute]
private string <FileId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Time>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Size>k__BackingField;
    public string FileId { get; }
    public int Date { get; }
    public int Time { get; }
    public int Size { get; }
    public CabinetFileInfo(string fileId, int size, int date, int time);
    [CompilerGeneratedAttribute]
public string get_FileId();
    [CompilerGeneratedAttribute]
public int get_Date();
    [CompilerGeneratedAttribute]
public int get_Time();
    [CompilerGeneratedAttribute]
public int get_Size();
    public bool SameAsDateTime(DateTime dateTime);
}
public class WixToolset.Core.Native.CertificateHashes : object {
    private static Char[] TextLineSplitter;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Thumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public string Path { get; }
    public string PublicKey { get; }
    public string Thumbprint { get; }
    public Exception Exception { get; }
    private CertificateHashes(string path, string publicKey, string thumbprint, Exception exception);
    private static CertificateHashes();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public string get_PublicKey();
    [CompilerGeneratedAttribute]
public string get_Thumbprint();
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    public static IReadOnlyList`1<CertificateHashes> Read(IEnumerable`1<string> paths);
}
internal static class WixToolset.Core.Native.DateTimeInterop : object {
    public static void DateTimeToCabDateAndTime(DateTime dateTime, UInt16& cabDate, UInt16& cabTime);
    private static bool FileTimeToLocalFileTime(Int64& fileTime, Int64& localTime);
    private static bool FileTimeToDosDateTime(Int64& fileTime, UInt16& wFatDate, UInt16& wFatTime);
}
public interface WixToolset.Core.Native.IWindowsInstallerValidatorCallback {
    public bool EncounteredError { get; }
    public abstract virtual bool get_EncounteredError();
    public abstract virtual bool ValidationMessage(ValidationMessage message);
    public abstract virtual void WriteMessage(Message message);
}
public class WixToolset.Core.Native.Msi.Database : MsiHandle {
    private static int STG_E_LOCKVIOLATION;
    public static int MsiMaxStreamNameLength { get; }
    public Database(string path, OpenDatabase type);
    public static int get_MsiMaxStreamNameLength();
    public void ApplyTransform(string transformFile);
    public void ApplyTransform(string transformFile, TransformErrorConditions errorConditions);
    public void Commit();
    public void CreateTransformSummaryInfo(Database referenceDatabase, string transformFile, TransformErrorConditions errorConditions, TransformValidations validations);
    public void Import(string idtPath);
    public void Export(string tableName, string folderPath, string fileName);
    public bool GenerateTransform(Database referenceDatabase, string transformFile);
    public bool Merge(Database mergeDatabase, string tableName);
    public View OpenView(string query);
    public View OpenExecuteView(string query);
    public bool TableExists(string tableName);
    public Record PrimaryKeys(string tableName);
}
public static class WixToolset.Core.Native.Msi.Installer : object {
    public static string ExtractPatchXml(string path);
    public static void GetFileHash(string filePath, int options, Int32[]& hash);
    public static void GetFileVersion(string filePath, String& version, String& language);
    public static InstallUIHandler SetExternalUI(InstallUIHandler installUIHandler, int messageFilter, IntPtr context);
    public static int SetInternalUI(int uiLevel, IntPtr& hwnd);
}
[FlagsAttribute]
public enum WixToolset.Core.Native.Msi.InstallLogModes : Enum {
    public int value__;
    public static InstallLogModes FatalExit;
    public static InstallLogModes Error;
    public static InstallLogModes Warning;
    public static InstallLogModes User;
    public static InstallLogModes Info;
    public static InstallLogModes ResolveSource;
    public static InstallLogModes OutOfDiskSpace;
    public static InstallLogModes ActionStart;
    public static InstallLogModes ActionData;
    public static InstallLogModes CommonData;
    public static InstallLogModes PropertyDump;
    public static InstallLogModes Verbose;
    public static InstallLogModes ExtraDebug;
    public static InstallLogModes Progress;
    public static InstallLogModes Initialize;
    public static InstallLogModes Terminate;
    public static InstallLogModes ShowDialog;
    public static InstallLogModes FilesInUse;
}
[FlagsAttribute]
public enum WixToolset.Core.Native.Msi.InstallMessage : Enum {
    public int value__;
    public static InstallMessage FatalExit;
    public static InstallMessage Error;
    public static InstallMessage Warning;
    public static InstallMessage User;
    public static InstallMessage Info;
    public static InstallMessage FilesInUse;
    public static InstallMessage ResolveSource;
    public static InstallMessage OutOfDiskSpace;
    public static InstallMessage ActionStart;
    public static InstallMessage ActionData;
    public static InstallMessage Progress;
    public static InstallMessage CommonData;
    public static InstallMessage Initilize;
    public static InstallMessage Terminate;
    public static InstallMessage ShowDialog;
}
public class WixToolset.Core.Native.Msi.InstallUIHandler : MulticastDelegate {
    public InstallUIHandler(object object, IntPtr method);
    public virtual int Invoke(IntPtr context, UInt32 messageType, string message);
    public virtual IAsyncResult BeginInvoke(IntPtr context, UInt32 messageType, string message, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum WixToolset.Core.Native.Msi.InstallUILevels : Enum {
    public int value__;
    public static InstallUILevels NoChange;
    public static InstallUILevels Default;
    public static InstallUILevels None;
    public static InstallUILevels Basic;
    public static InstallUILevels Reduced;
    public static InstallUILevels Full;
    public static InstallUILevels HideCancel;
    public static InstallUILevels ProgressOnly;
    public static InstallUILevels EndDialog;
    public static InstallUILevels SourceResOnly;
}
public enum WixToolset.Core.Native.Msi.ModifyView : Enum {
    public int value__;
    public static ModifyView Assign;
    public static ModifyView Delete;
    public static ModifyView Insert;
    public static ModifyView InsertTemporary;
    public static ModifyView Merge;
    public static ModifyView Refresh;
    public static ModifyView Replace;
    public static ModifyView Seek;
    public static ModifyView Update;
}
public class WixToolset.Core.Native.Msi.MsiException : Win32Exception {
    [CompilerGeneratedAttribute]
private int <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MsiError>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ErrorInfo>k__BackingField;
    public int Error { get; private set; }
    public int MsiError { get; private set; }
    public String[] ErrorInfo { get; private set; }
    public string Message { get; }
    public MsiException(int error);
    [CompilerGeneratedAttribute]
public int get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(int value);
    [CompilerGeneratedAttribute]
public int get_MsiError();
    [CompilerGeneratedAttribute]
private void set_MsiError(int value);
    [CompilerGeneratedAttribute]
public String[] get_ErrorInfo();
    [CompilerGeneratedAttribute]
private void set_ErrorInfo(String[] value);
    public virtual string get_Message();
}
public class WixToolset.Core.Native.Msi.MSIFILEHASHINFO : object {
    public UInt32 FileHashInfoSize;
    public int Data0;
    public int Data1;
    public int Data2;
    public int Data3;
}
public abstract class WixToolset.Core.Native.Msi.MsiHandle : object {
    private bool disposed;
    private IntPtr handle;
    private int owningThread;
    internal IntPtr Handle { get; internal set; }
    protected virtual override void Finalize();
    internal IntPtr get_Handle();
    internal void set_Handle(IntPtr value);
    public void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class WixToolset.Core.Native.Msi.MsiInterop : object {
    internal static int MsiMaxStreamNameLength;
    internal static int MSICONDITIONFALSE;
    internal static int MSICONDITIONTRUE;
    internal static int MSICONDITIONNONE;
    internal static int MSICONDITIONERROR;
    internal static int MSICOLINFONAMES;
    internal static int MSICOLINFOTYPES;
    internal static int MsiCloseHandle(IntPtr database);
    internal static IntPtr MsiCreateRecord(int parameters);
    internal static int MsiCreateTransformSummaryInfo(IntPtr database, IntPtr referenceDatabase, string transformFile, TransformErrorConditions errorConditions, TransformValidations validations);
    internal static int MsiDatabaseApplyTransform(IntPtr database, string transformFile, TransformErrorConditions errorConditions);
    internal static int MsiDatabaseCommit(IntPtr database);
    internal static int MsiDatabaseExport(IntPtr database, string tableName, string folderPath, string fileName);
    internal static int MsiDatabaseGenerateTransform(IntPtr database, IntPtr databaseReference, string transformFile, int reserved1, int reserved2);
    internal static int MsiDatabaseImport(IntPtr database, string folderPath, string fileName);
    internal static int MsiDatabaseMerge(IntPtr database, IntPtr databaseMerge, string tableName);
    internal static int MsiDatabaseOpenView(IntPtr database, string query, IntPtr& view);
    internal static int MsiExtractPatchXMLData(string szPatchPath, int dwReserved, StringBuilder szXMLData, Int32& pcchXMLData);
    internal static int MsiGetFileHash(string filePath, UInt32 options, MSIFILEHASHINFO hash);
    internal static int MsiGetFileVersion(string filePath, StringBuilder versionBuf, Int32& versionBufSize, StringBuilder langBuf, Int32& langBufSize);
    internal static IntPtr MsiGetLastErrorRecord();
    internal static int MsiDatabaseGetPrimaryKeys(IntPtr database, string tableName, IntPtr& record);
    internal static int MsiDoAction(IntPtr product, string action);
    internal static int MsiGetSummaryInformation(IntPtr database, string databasePath, UInt32 updateCount, IntPtr& summaryInfo);
    internal static int MsiDatabaseIsTablePersistent(IntPtr database, string tableName);
    internal static int MsiOpenDatabase(string databasePath, IntPtr persist, IntPtr& database);
    internal static int MsiOpenPackage(string packagePath, IntPtr& product);
    internal static int MsiRecordIsNull(IntPtr record, int field);
    internal static int MsiRecordGetInteger(IntPtr record, int field);
    internal static int MsiRecordSetInteger(IntPtr record, int field, int value);
    internal static int MsiRecordGetString(IntPtr record, int field, StringBuilder valueBuf, Int32& valueBufSize);
    internal static int MsiRecordSetString(IntPtr record, int field, string value);
    internal static int MsiRecordSetStream(IntPtr record, int field, string filePath);
    internal static int MsiRecordReadStream(IntPtr record, int field, Byte[] dataBuf, Int32& dataBufSize);
    internal static int MsiRecordGetFieldCount(IntPtr record);
    internal static InstallUIHandler MsiSetExternalUI(InstallUIHandler installUIHandler, int installLogMode, IntPtr context);
    internal static int MsiSetInternalUI(int uiLevel, IntPtr& hwnd);
    internal static int MsiSummaryInfoGetProperty(IntPtr summaryInfo, int property, UInt32& dataType, Int32& integerValue, FILETIME& fileTimeValue, StringBuilder stringValueBuf, Int32& stringValueBufSize);
    internal static int MsiViewGetColumnInfo(IntPtr view, int columnInfo, IntPtr& record);
    internal static int MsiViewExecute(IntPtr view, IntPtr record);
    internal static int MsiViewFetch(IntPtr view, IntPtr& record);
    internal static int MsiViewModify(IntPtr view, int modifyMode, IntPtr record);
}
public enum WixToolset.Core.Native.Msi.OpenDatabase : Enum {
    public int value__;
    public static OpenDatabase ReadOnly;
    public static OpenDatabase Transact;
    public static OpenDatabase Direct;
    public static OpenDatabase Create;
    public static OpenDatabase CreateDirect;
    public static OpenDatabase OpenPatchFile;
}
[DefaultMemberAttribute("Item")]
public class WixToolset.Core.Native.Msi.Record : MsiHandle {
    public string Item { get; public set; }
    public Record(int fieldCount);
    internal Record(IntPtr handle);
    public string get_Item(int field);
    public void set_Item(int field, string value);
    public bool IsNull(int field);
    public int GetInteger(int field);
    public void SetInteger(int field, int value);
    public string GetString(int field);
    public void SetString(int field, string value);
    public int GetStream(int field, Byte[] buffer, int requestedBufferSize);
    public void SetStream(int field, string path);
    public int GetFieldCount();
}
public class WixToolset.Core.Native.Msi.Session : MsiHandle {
    public Session(Database database);
    public void DoAction(string action);
}
public class WixToolset.Core.Native.Msi.SummaryInformation : MsiHandle {
    public SummaryInformation(Database db);
    public SummaryInformation(string databaseFile);
    public string GetProperty(Package property);
    public long GetNumericProperty(Package property);
    public string GetProperty(Patch property);
    public long GetNumericProperty(Transform property);
    public string GetProperty(int index);
    public long GetNumericProperty(int index);
    private void GetSummaryInformationValue(int index, UInt32& dataType, Int32& intValue, StringBuilder& stringValue, FILETIME& timeValue);
}
[FlagsAttribute]
public enum WixToolset.Core.Native.Msi.TransformErrorConditions : Enum {
    public int value__;
    public static TransformErrorConditions None;
    public static TransformErrorConditions AddExistingRow;
    public static TransformErrorConditions DeleteMissingRow;
    public static TransformErrorConditions AddExistingTable;
    public static TransformErrorConditions DeleteMissingTable;
    public static TransformErrorConditions UpdateMissingRow;
    public static TransformErrorConditions ChangeCodepage;
    public static TransformErrorConditions ViewTransform;
    public static TransformErrorConditions All;
}
[FlagsAttribute]
public enum WixToolset.Core.Native.Msi.TransformValidations : Enum {
    public int value__;
    public static TransformValidations None;
    public static TransformValidations Language;
    public static TransformValidations Product;
    public static TransformValidations MajorVersion;
    public static TransformValidations MinorVersion;
    public static TransformValidations UpdateVersion;
    public static TransformValidations NewLessBaseVersion;
    public static TransformValidations NewLessEqualBaseVersion;
    public static TransformValidations NewEqualBaseVersion;
    public static TransformValidations NewGreaterEqualBaseVersion;
    public static TransformValidations NewGreaterBaseVersion;
    public static TransformValidations UpgradeCode;
}
public class WixToolset.Core.Native.Msi.View : MsiHandle {
    public IEnumerable`1<Record> Records { get; }
    public View(Database db, string query);
    public IEnumerable`1<Record> get_Records();
    public void Execute();
    public void Execute(Record record);
    public Record Fetch();
    public void Modify(ModifyView type, Record record);
    public Record GetColumnNames();
    public Record GetColumnTypes();
    public Record GetColumnInfo(int columnType);
}
public class WixToolset.Core.Native.Msi.WixInvalidIdtException : WixException {
    public WixInvalidIdtException(string message, Exception innerException);
    public WixInvalidIdtException(string idtFile);
    public WixInvalidIdtException(string idtFile, string tableName);
}
public class WixToolset.Core.Native.Msm.ConfigurationCallback : object {
    private static int SOk;
    private static int SFalse;
    private Hashtable configurationData;
    public ConfigurationCallback(string configData);
    public sealed virtual int ProvideTextData(string name, String& configData);
    public sealed virtual int ProvideIntegerData(string name, Int32& configData);
}
[GuidAttribute("00000001-0000-0000-C000-000000000046")]
[InterfaceTypeAttribute("1")]
public interface WixToolset.Core.Native.Msm.IClassFactory {
    public abstract virtual object CreateInstance(IntPtr unkOuter, Guid iid);
}
[GuidAttribute("AC013209-18A7-4851-8A21-2353443D70A0")]
[InterfaceTypeAttribute("2")]
public interface WixToolset.Core.Native.Msm.IMsmConfigureModule {
    public abstract virtual int ProvideTextData(string name, String& configData);
    public abstract virtual int ProvideIntegerData(string name, Int32& configData);
}
[GuidAttribute("0ADDA828-2C26-11D2-AD65-00A0C9AF11A6")]
public interface WixToolset.Core.Native.Msm.IMsmError {
    public MsmErrorType Type { get; }
    public string Path { get; }
    public short Language { get; }
    public string DatabaseTable { get; }
    public IMsmStrings DatabaseKeys { get; }
    public string ModuleTable { get; }
    public IMsmStrings ModuleKeys { get; }
    public abstract virtual MsmErrorType get_Type();
    public abstract virtual string get_Path();
    public abstract virtual short get_Language();
    public abstract virtual string get_DatabaseTable();
    public abstract virtual IMsmStrings get_DatabaseKeys();
    public abstract virtual string get_ModuleTable();
    public abstract virtual IMsmStrings get_ModuleKeys();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("0ADDA82A-2C26-11D2-AD65-00A0C9AF11A6")]
public interface WixToolset.Core.Native.Msm.IMsmErrors {
    public IMsmError Item { get; }
    public int Count { get; }
    public abstract virtual IMsmError get_Item(int index);
    public abstract virtual int get_Count();
}
[GuidAttribute("351A72AB-21CB-47ab-B7AA-C4D7B02EA305")]
public interface WixToolset.Core.Native.Msm.IMsmMerge2 {
    public IMsmErrors Errors { get; }
    public object Dependencies { get; }
    public object ConfigurableItems { get; }
    public IMsmStrings ModuleFiles { get; }
    public abstract virtual void OpenDatabase(string path);
    public abstract virtual void OpenModule(string fileName, short language);
    public abstract virtual void CloseDatabase(bool commit);
    public abstract virtual void CloseModule();
    public abstract virtual void OpenLog(string fileName);
    public abstract virtual void CloseLog();
    public abstract virtual void Log(string message);
    public abstract virtual IMsmErrors get_Errors();
    public abstract virtual object get_Dependencies();
    public abstract virtual void Merge(string feature, string redirectDir);
    public abstract virtual void Connect(string feature);
    public abstract virtual void ExtractCAB(string fileName);
    public abstract virtual void ExtractFiles(string path);
    public abstract virtual void MergeEx(string feature, string redirectDir, IMsmConfigureModule configuration);
    public abstract virtual void ExtractFilesEx(string path, bool longFileNames, IntPtr& filePaths);
    public abstract virtual object get_ConfigurableItems();
    public abstract virtual void CreateSourceImage(string path, bool longFileNames, IntPtr& filePaths);
    public abstract virtual IMsmStrings get_ModuleFiles();
}
[DefaultMemberAttribute("Item")]
[GuidAttribute("0ADDA827-2C26-11D2-AD65-00A0C9AF11A6")]
public interface WixToolset.Core.Native.Msm.IMsmStrings {
    public string Item { get; }
    public int Count { get; }
    public abstract virtual string get_Item(int index);
    public abstract virtual int get_Count();
}
[GuidAttribute("0ADDA825-2C26-11D2-AD65-00A0C9AF11A6")]
public enum WixToolset.Core.Native.Msm.MsmErrorType : Enum {
    public int value__;
    public static MsmErrorType msmErrorLanguageUnsupported;
    public static MsmErrorType msmErrorLanguageFailed;
    public static MsmErrorType msmErrorExclusion;
    public static MsmErrorType msmErrorTableMerge;
    public static MsmErrorType msmErrorResequenceMerge;
    public static MsmErrorType msmErrorFileCreate;
    public static MsmErrorType msmErrorDirCreate;
    public static MsmErrorType msmErrorFeatureRequired;
    public static MsmErrorType msmErrorBadNullSubstitution;
    public static MsmErrorType msmErrorBadSubstitutionType;
    public static MsmErrorType msmErrorMissingConfigItem;
    public static MsmErrorType msmErrorBadNullResponse;
    public static MsmErrorType msmErrorDataRequestFailed;
    public static MsmErrorType msmErrorPlatformMismatch;
}
public static class WixToolset.Core.Native.Msm.MsmInterop : object {
    private static object MergeModGetClassObject(Guid clsid, Guid iid);
    public static IMsmMerge2 GetMsmMerge();
}
[GuidAttribute("F94985D5-29F9-4743-9805-99BC3F35B678")]
public class WixToolset.Core.Native.Msm.MsmMerge2 : object {
}
internal class WixToolset.Core.Native.Ole32.Storage : object {
    private IStorage storage;
    private bool disposed;
    private Storage(IStorage storage);
    protected virtual override void Finalize();
    public static Storage CreateDocFile(string storageFile, StorageMode mode);
    public static Storage Open(string storageFile, StorageMode mode);
    public void CopyTo(Storage destinationStorage);
    public Storage OpenStorage(string name);
    public sealed virtual void Dispose();
}
internal enum WixToolset.Core.Native.Ole32.StorageMode : Enum {
    public int value__;
    public static StorageMode Read;
    public static StorageMode Write;
    public static StorageMode ReadWrite;
    public static StorageMode ShareDenyNone;
    public static StorageMode ShareDenyRead;
    public static StorageMode ShareDenyWrite;
    public static StorageMode ShareExclusive;
    public static StorageMode Priority;
    public static StorageMode Create;
}
internal static class WixToolset.Core.Native.PatchAPI.PatchInterop : object {
    internal static ushort FACILITY_WIN32;
    internal static UInt32 PATCH_OPTION_USE_BEST;
    internal static UInt32 PATCH_OPTION_USE_LZX_BEST;
    internal static UInt32 PATCH_OPTION_USE_LZX_A;
    internal static UInt32 PATCH_OPTION_USE_LXZ_B;
    internal static UInt32 PATCH_OPTION_USE_LZX_LARGE;
    internal static UInt32 PATCH_OPTION_NO_BINDFIX;
    internal static UInt32 PATCH_OPTION_NO_LOCKFIX;
    internal static UInt32 PATCH_OPTION_NO_REBASE;
    internal static UInt32 PATCH_OPTION_FAIL_IF_SAME_FILE;
    internal static UInt32 PATCH_OPTION_FAIL_IF_BIGGER;
    internal static UInt32 PATCH_OPTION_NO_CHECKSUM;
    internal static UInt32 PATCH_OPTION_NO_RESTIMEFIX;
    internal static UInt32 PATCH_OPTION_NO_TIMESTAMP;
    internal static UInt32 PATCH_OPTION_SIGNATURE_MD5;
    internal static UInt32 PATCH_OPTION_INTERLEAVE_FILES;
    internal static UInt32 PATCH_OPTION_RESERVED1;
    internal static UInt32 PATCH_OPTION_VALID_FLAGS;
    internal static UInt32 PATCH_TRANSFORM_PE_RESOURCE_2;
    internal static UInt32 PATCH_TRANSFORM_PE_IRELOC_2;
    internal static UInt32 ERROR_PATCH_ENCODE_FAILURE;
    internal static UInt32 ERROR_PATCH_INVALID_OPTIONS;
    internal static UInt32 ERROR_PATCH_SAME_FILE;
    internal static UInt32 ERROR_PATCH_RETAIN_RANGES_DIFFER;
    internal static UInt32 ERROR_PATCH_BIGGER_THAN_COMPRESSED;
    internal static UInt32 ERROR_PATCH_IMAGEHLP_FALURE;
    internal static UInt32 ParseHexOrDecimal(string source);
    public static bool CreateDelta(string deltaFile, string targetFile, string targetSymbolPath, string targetRetainOffsets, String[] basisFiles, String[] basisSymbolPaths, String[] basisIgnoreLengths, String[] basisIgnoreOffsets, String[] basisRetainLengths, String[] basisRetainOffsets, PatchSymbolFlags apiPatchingSymbolFlags, bool optimizePatchSizeForLargeFiles, Boolean& retainRangesIgnored);
    public static void ExtractDeltaHeader(string delta, string deltaHeader);
    private static UInt32 PatchOptionFlags(bool optimizeForLargeFiles);
    internal static bool CreatePatchFileExW(UInt32 oldFileCount, PatchOldFileInfoW[] oldFileInfoArray, string newFileName, string patchFileName, UInt32 optionFlags, PatchOptionData optionData, PatchProgressCallback progressCallback, IntPtr context);
    internal static bool ExtractPatchHeaderToFileW(string patchFileName, string patchHeaderFileName);
}
public class WixToolset.Core.Native.ValidationMessage : object {
    [CompilerGeneratedAttribute]
private string <IceName>k__BackingField;
    [CompilerGeneratedAttribute]
private ValidationMessageType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <PrimaryKeys>k__BackingField;
    public string IceName { get; public set; }
    public ValidationMessageType Type { get; public set; }
    public string Description { get; public set; }
    public string HelpUrl { get; public set; }
    public string Table { get; public set; }
    public string Column { get; public set; }
    public IEnumerable`1<string> PrimaryKeys { get; public set; }
    [CompilerGeneratedAttribute]
public string get_IceName();
    [CompilerGeneratedAttribute]
public void set_IceName(string value);
    [CompilerGeneratedAttribute]
public ValidationMessageType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ValidationMessageType value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_HelpUrl();
    [CompilerGeneratedAttribute]
public void set_HelpUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_PrimaryKeys();
    [CompilerGeneratedAttribute]
public void set_PrimaryKeys(IEnumerable`1<string> value);
}
public enum WixToolset.Core.Native.ValidationMessageType : Enum {
    public int value__;
    public static ValidationMessageType InternalFailure;
    public static ValidationMessageType Error;
    public static ValidationMessageType Warning;
    public static ValidationMessageType Info;
}
public class WixToolset.Core.Native.WindowsInstallerValidator : object {
    private static string CubesFolder;
    private InstallUIHandler validationUIHandlerDelegate;
    [CompilerGeneratedAttribute]
private IWindowsInstallerValidatorCallback <Callback>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CubeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<string> <Ices>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<string> <SuppressedIces>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidationSessionInProgress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentIce>k__BackingField;
    private IWindowsInstallerValidatorCallback Callback { get; }
    private string DatabasePath { get; }
    private IEnumerable`1<string> CubeFiles { get; }
    private SortedSet`1<string> Ices { get; }
    private SortedSet`1<string> SuppressedIces { get; }
    private bool ValidationSessionInProgress { get; private set; }
    private string CurrentIce { get; private set; }
    public WindowsInstallerValidator(IWindowsInstallerValidatorCallback callback, string databasePath, IEnumerable`1<string> cubeFiles, IEnumerable`1<string> ices, IEnumerable`1<string> suppressedIces);
    [CompilerGeneratedAttribute]
private IWindowsInstallerValidatorCallback get_Callback();
    [CompilerGeneratedAttribute]
private string get_DatabasePath();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> get_CubeFiles();
    [CompilerGeneratedAttribute]
private SortedSet`1<string> get_Ices();
    [CompilerGeneratedAttribute]
private SortedSet`1<string> get_SuppressedIces();
    [CompilerGeneratedAttribute]
private bool get_ValidationSessionInProgress();
    [CompilerGeneratedAttribute]
private void set_ValidationSessionInProgress(bool value);
    [CompilerGeneratedAttribute]
private string get_CurrentIce();
    [CompilerGeneratedAttribute]
private void set_CurrentIce(string value);
    public void Execute();
    private void RunValidations();
    private int ValidationUIHandler(IntPtr context, UInt32 messageType, string message);
    private static ValidationMessage ParseValidationMessage(string message, string currentIce);
    private static ValidationMessageType ParseValidationMessageType(string type);
}
internal class WixToolset.Core.Native.WixNativeException : Exception {
    private static string LineSeparator;
    public WixNativeException(string message);
    public WixNativeException(string message, Exception innerException);
    protected WixNativeException(SerializationInfo info, StreamingContext context);
    private static WixNativeException();
    public static WixNativeException FromOutputLines(int errorCode, IReadOnlyCollection`1<string> lines);
}
internal class WixToolset.Core.Native.WixNativeExe : object {
    private static string WixNativeExeFileName;
    private static string PathToWixNativeExe;
    private string commandLine;
    private List`1<string> stdinLines;
    public WixNativeExe(Object[] args);
    public void AddStdinLine(string line);
    public void AddStdinLines(IEnumerable`1<string> lines);
    public IReadOnlyCollection`1<string> Run();
    private static void EnsurePathToWixNativeExeSet();
    [IteratorStateMachineAttribute("WixToolset.Core.Native.WixNativeExe/<QuoteArgumentsAsNecesary>d__9")]
private static IEnumerable`1<string> QuoteArgumentsAsNecesary(Object[] args);
}
