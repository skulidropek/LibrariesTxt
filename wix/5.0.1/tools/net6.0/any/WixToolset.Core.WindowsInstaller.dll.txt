public interface WixToolset.Core.IWindowsInstallerDecompiler {
    public abstract virtual IWindowsInstallerDecompileResult Decompile(IWindowsInstallerDecompileContext context);
}
internal class WixToolset.Core.WindowsInstaller.Bind.AddBackSuppressedSequenceTablesCommand : object {
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SuppressedTableNames>k__BackingField;
    private WindowsInstallerData Output { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    public IEnumerable`1<string> SuppressedTableNames { get; private set; }
    public AddBackSuppressedSequenceTablesCommand(WindowsInstallerData output, TableDefinitionCollection tableDefinitions);
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Output();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_SuppressedTableNames();
    [CompilerGeneratedAttribute]
private void set_SuppressedTableNames(IEnumerable`1<string> value);
    public IEnumerable`1<string> Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.AddCreateFoldersCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    private IntermediateSection Section { get; }
    internal AddCreateFoldersCommand(IntermediateSection section);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.AssemblyName : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Architecture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublicKeyToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <StrongNamedSigned>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string Name { get; }
    public string Culture { get; }
    public string Version { get; }
    public string FileVersion { get; }
    public string Architecture { get; }
    public string PublicKeyToken { get; }
    public bool StrongNamedSigned { get; }
    public string Type { get; }
    public AssemblyName(string name, string culture, string version, string fileVersion, string architecture, string publicKeyToken, string type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Culture();
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public string get_FileVersion();
    [CompilerGeneratedAttribute]
public string get_Architecture();
    [CompilerGeneratedAttribute]
public string get_PublicKeyToken();
    [CompilerGeneratedAttribute]
public bool get_StrongNamedSigned();
    [CompilerGeneratedAttribute]
public string get_Type();
    public string GetFullName();
}
internal static class WixToolset.Core.WindowsInstaller.Bind.AssemblyNameReader : object {
    public static AssemblyName ReadAssembly(IFileSystem fileSystem, SourceLineNumber sourceLineNumbers, string assemblyPath, string fileVersion);
    public static AssemblyName ReadAssemblyManifest(SourceLineNumber sourceLineNumbers, string manifestPath);
    private static string ArchitectureFromHeaders(PEHeaders headers);
    private static bool IsNetFx1xAssembly(PEHeaders headers);
    private static string ReadString(MetadataReader reader, StringHandle handle);
    private static string ReadPublicKeyToken(MetadataReader reader, BlobHandle handle);
}
internal class WixToolset.Core.WindowsInstaller.Bind.AssignMediaCommand : object {
    private static int DefaultMaximumUncompressedMediaSize;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FilesCompressed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CabinetNameTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> <FileFacadesByCabinetMedia>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <UncompressedFileFacades>k__BackingField;
    private IntermediateSection Section { get; }
    private IMessaging Messaging { get; }
    private IEnumerable`1<IFileFacade> FileFacades { get; }
    private bool FilesCompressed { get; }
    private string CabinetNameTemplate { get; private set; }
    public Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> FileFacadesByCabinetMedia { get; private set; }
    public IEnumerable`1<IFileFacade> UncompressedFileFacades { get; private set; }
    public AssignMediaCommand(IntermediateSection section, IMessaging messaging, IEnumerable`1<IFileFacade> fileFacades, bool compressed);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_FileFacades();
    [CompilerGeneratedAttribute]
private bool get_FilesCompressed();
    [CompilerGeneratedAttribute]
private string get_CabinetNameTemplate();
    [CompilerGeneratedAttribute]
private void set_CabinetNameTemplate(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> get_FileFacadesByCabinetMedia();
    [CompilerGeneratedAttribute]
private void set_FileFacadesByCabinetMedia(Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFileFacade> get_UncompressedFileFacades();
    [CompilerGeneratedAttribute]
private void set_UncompressedFileFacades(IEnumerable`1<IFileFacade> value);
    public void Execute();
    private void AutoAssignFiles(List`1<WixMediaTemplateSymbol> mediaTemplateTable, List`1<MediaSymbol> mediaSymbols, Dictionary`2<MediaSymbol, List`1<IFileFacade>> filesByCabinetMedia, List`1<IFileFacade> uncompressedFiles);
    private void ManuallyAssignFiles(List`1<MediaSymbol> mediaSymbols, Dictionary`2<MediaSymbol, List`1<IFileFacade>> filesByCabinetMedia, List`1<IFileFacade> uncompressedFiles);
    private MediaSymbol AddMediaSymbol(WixMediaTemplateSymbol mediaTemplateSymbol, int cabIndex);
}
internal class WixToolset.Core.WindowsInstaller.Bind.BindDatabaseCommand : object {
    internal static Guid WixComponentGuidNamespace;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper <WindowsInstallerBackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CabbingThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CabCachePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> <DefaultCompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDelayedField> <DelayedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExpectedExtractFile> <ExpectedEmbeddedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemManager <FileSystemManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeltaBinaryPatch>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> <BackendExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SubStorage> <PatchSubStorages>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <Intermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private PdbType <PdbType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPdbPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResolvedCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResolvedSummaryInformationCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResolvedLcid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressAddingValidationRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private IWindowsInstallerBackendHelper WindowsInstallerBackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private IPathResolver PathResolver { get; }
    private int CabbingThreadCount { get; }
    private string CabCachePath { get; }
    private Nullable`1<CompressionLevel> DefaultCompressionLevel { get; }
    public IEnumerable`1<IDelayedField> DelayedFields { get; }
    public IEnumerable`1<IExpectedExtractFile> ExpectedEmbeddedFiles { get; }
    public FileSystemManager FileSystemManager { get; }
    public bool DeltaBinaryPatch { get; public set; }
    private IEnumerable`1<IWindowsInstallerBackendBinderExtension> BackendExtensions { get; }
    private IEnumerable`1<SubStorage> PatchSubStorages { get; }
    private Intermediate Intermediate { get; }
    private string OutputPath { get; }
    public PdbType PdbType { get; public set; }
    private string OutputPdbPath { get; }
    private Nullable`1<int> ResolvedCodepage { get; }
    private Nullable`1<int> ResolvedSummaryInformationCodepage { get; }
    private Nullable`1<int> ResolvedLcid { get; }
    private bool SuppressAddingValidationRows { get; }
    private bool SuppressLayout { get; }
    private string IntermediateFolder { get; }
    public BindDatabaseCommand(IBindContext context, IEnumerable`1<IWindowsInstallerBackendBinderExtension> backendExtension, IEnumerable`1<SubStorage> patchSubStorages);
    private static BindDatabaseCommand();
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper get_WindowsInstallerBackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private int get_CabbingThreadCount();
    [CompilerGeneratedAttribute]
private string get_CabCachePath();
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> get_DefaultCompressionLevel();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IDelayedField> get_DelayedFields();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IExpectedExtractFile> get_ExpectedEmbeddedFiles();
    [CompilerGeneratedAttribute]
public FileSystemManager get_FileSystemManager();
    [CompilerGeneratedAttribute]
public bool get_DeltaBinaryPatch();
    [CompilerGeneratedAttribute]
public void set_DeltaBinaryPatch(bool value);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> get_BackendExtensions();
    [CompilerGeneratedAttribute]
private IEnumerable`1<SubStorage> get_PatchSubStorages();
    [CompilerGeneratedAttribute]
private Intermediate get_Intermediate();
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
public PdbType get_PdbType();
    [CompilerGeneratedAttribute]
public void set_PdbType(PdbType value);
    [CompilerGeneratedAttribute]
private string get_OutputPdbPath();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_ResolvedCodepage();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_ResolvedSummaryInformationCodepage();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_ResolvedLcid();
    [CompilerGeneratedAttribute]
private bool get_SuppressAddingValidationRows();
    [CompilerGeneratedAttribute]
private bool get_SuppressLayout();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    public IBindResult Execute();
    private void ProcessProductVersion(WixPackageSymbol packageSymbol, IntermediateSection section, bool validate);
    private int CalculateCodepage(WixPackageSymbol packageSymbol, WixModuleSymbol moduleSymbol, WixPatchSymbol patchSymbol);
    private T GetSingleSymbol(IntermediateSection section);
    private WixOutput CreateWixout(List`1<ITrackedFile> trackedFiles, Intermediate intermediate, WindowsInstallerData data);
    private string ResolveMedia(MediaSymbol media, string mediaLayoutDirectory, string layoutDirectory);
    private IEnumerable`1<ITrackedFile> TrackInputFiles(WindowsInstallerData data, List`1<ITrackedFile> trackedFiles);
}
internal class WixToolset.Core.WindowsInstaller.Bind.BindSummaryInfoCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SummaryInformationCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductLanguage>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IWixBranding <Branding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LongNames>k__BackingField;
    [CompilerGeneratedAttribute]
private int <InstallerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModularizationSuffix>k__BackingField;
    private IntermediateSection Section { get; }
    private Nullable`1<int> SummaryInformationCodepage { get; }
    private string ProductLanguage { get; }
    private IBackendHelper BackendHelper { get; }
    private IWixBranding Branding { get; }
    public bool Compressed { get; private set; }
    public bool LongNames { get; private set; }
    public int InstallerVersion { get; private set; }
    public Platform Platform { get; private set; }
    public string ModularizationSuffix { get; private set; }
    public BindSummaryInfoCommand(IntermediateSection section, Nullable`1<int> summaryInformationCodepage, string productLanguage, IBackendHelper backendHelper, IWixBranding branding);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_SummaryInformationCodepage();
    [CompilerGeneratedAttribute]
private string get_ProductLanguage();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IWixBranding get_Branding();
    [CompilerGeneratedAttribute]
public bool get_Compressed();
    [CompilerGeneratedAttribute]
private void set_Compressed(bool value);
    [CompilerGeneratedAttribute]
public bool get_LongNames();
    [CompilerGeneratedAttribute]
private void set_LongNames(bool value);
    [CompilerGeneratedAttribute]
public int get_InstallerVersion();
    [CompilerGeneratedAttribute]
private void set_InstallerVersion(int value);
    [CompilerGeneratedAttribute]
public Platform get_Platform();
    [CompilerGeneratedAttribute]
private void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public string get_ModularizationSuffix();
    [CompilerGeneratedAttribute]
private void set_ModularizationSuffix(string value);
    public void Execute();
    private static Platform EnsureLanguageAndGetPlatformFromSummaryInformation(SummaryInformationSymbol symbol, string language);
}
internal class WixToolset.Core.WindowsInstaller.Bind.BindTransformCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemManager <FileSystemManager>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Transform>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private FileSystemManager FileSystemManager { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    private string IntermediateFolder { get; }
    private WindowsInstallerData Transform { get; }
    private string OutputPath { get; }
    public BindTransformCommand(IMessaging messaging, IBackendHelper backendHelper, IFileSystem fileSystem, FileSystemManager fileSystemManager, string intermediateFolder, WindowsInstallerData transform, string outputPath, TableDefinitionCollection tableDefinitions);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private FileSystemManager get_FileSystemManager();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Transform();
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    public void Execute();
    private void GenerateDatabase(WindowsInstallerData output, string outputPath, bool keepAddedColumns);
}
internal class WixToolset.Core.WindowsInstaller.Bind.CabinetBuilder : object {
    private Queue`1<CabinetWorkItem> cabinetWorkItems;
    private List`1<CompletedCabinetWorkItem> completedCabinets;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumCabinetSizeForLargeFileSplitting>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumUncompressedMediaSize>k__BackingField;
    private IMessaging Messaging { get; }
    private int ThreadCount { get; }
    private int MaximumCabinetSizeForLargeFileSplitting { get; }
    private int MaximumUncompressedMediaSize { get; }
    public IReadOnlyCollection`1<CompletedCabinetWorkItem> CompletedCabinets { get; }
    public CabinetBuilder(IMessaging messaging, int threadCount, int maximumCabinetSizeForLargeFileSplitting, int maximumUncompressedMediaSize);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private int get_ThreadCount();
    [CompilerGeneratedAttribute]
private int get_MaximumCabinetSizeForLargeFileSplitting();
    [CompilerGeneratedAttribute]
private int get_MaximumUncompressedMediaSize();
    public IReadOnlyCollection`1<CompletedCabinetWorkItem> get_CompletedCabinets();
    public void Enqueue(CabinetWorkItem cabinetWorkItem);
    public void CreateQueuedCabinets();
    private void ProcessWorkItems();
    private IReadOnlyCollection`1<CabinetCreated> CreateCabinet(CabinetWorkItem cabinetWorkItem);
}
internal class WixToolset.Core.WindowsInstaller.Bind.CabinetResolver : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CabCachePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> <BackendExtensions>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private string CabCachePath { get; }
    private IEnumerable`1<IWindowsInstallerBackendBinderExtension> BackendExtensions { get; }
    public CabinetResolver(IServiceProvider serviceProvider, string cabCachePath, IEnumerable`1<IWindowsInstallerBackendBinderExtension> backendExtensions);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private string get_CabCachePath();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> get_BackendExtensions();
    public IResolvedCabinet ResolveCabinet(string cabinetPath, IEnumerable`1<IFileFacade> fileFacades);
    private IBindFileWithPath CreateBindFileWithPath(IFileFacade facade);
    private static bool CheckFileExists(string path);
}
internal class WixToolset.Core.WindowsInstaller.Bind.CabinetWorkItem : object {
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DiskId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CabinetFile>k__BackingField;
    [CompilerGeneratedAttribute]
private CompressionLevel <CompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModularizationSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MsiFileHashSymbol> <HashesByFileId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxThreshold>k__BackingField;
    public SourceLineNumber SourceLineNumber { get; }
    public int DiskId { get; }
    public string CabinetFile { get; }
    public CompressionLevel CompressionLevel { get; }
    public string ModularizationSuffix { get; }
    public IEnumerable`1<IFileFacade> FileFacades { get; }
    public Dictionary`2<string, MsiFileHashSymbol> HashesByFileId { get; }
    public int MaxThreshold { get; }
    public CabinetWorkItem(SourceLineNumber sourceLineNumber, int diskId, string cabinetFile, IEnumerable`1<IFileFacade> fileFacades, Dictionary`2<string, MsiFileHashSymbol> hashesByFileId, int maxThreshold, CompressionLevel compressionLevel, string modularizationSuffix);
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumber();
    [CompilerGeneratedAttribute]
public int get_DiskId();
    [CompilerGeneratedAttribute]
public string get_CabinetFile();
    [CompilerGeneratedAttribute]
public CompressionLevel get_CompressionLevel();
    [CompilerGeneratedAttribute]
public string get_ModularizationSuffix();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFileFacade> get_FileFacades();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MsiFileHashSymbol> get_HashesByFileId();
    [CompilerGeneratedAttribute]
public int get_MaxThreshold();
}
internal class WixToolset.Core.WindowsInstaller.Bind.CompletedCabinetWorkItem : object {
    [CompilerGeneratedAttribute]
private int <DiskId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<CabinetCreated> <CreatedCabinets>k__BackingField;
    public int DiskId { get; }
    public IReadOnlyCollection`1<CabinetCreated> CreatedCabinets { get; }
    public CompletedCabinetWorkItem(int diskId, IReadOnlyCollection`1<CabinetCreated> created);
    [CompilerGeneratedAttribute]
public int get_DiskId();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<CabinetCreated> get_CreatedCabinets();
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreateCabinetsCommand : object {
    public static int DefaultMaximumUncompressedMediaSize;
    public static int MaxValueOfMaxCabSizeForLargeFileSplitting;
    private CabinetResolver cabinetResolver;
    private List`1<IFileTransfer> fileTransfers;
    private List`1<ITrackedFile> trackedFiles;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CabbingThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> <DefaultCompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModularizationSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> <FileFacadesByCabinet>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<MediaSymbol, string, string, string> <ResolveMedia>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IntermediateSection Section { get; }
    private int CabbingThreadCount { get; private set; }
    private string IntermediateFolder { get; }
    private string LayoutDirectory { get; }
    private Nullable`1<CompressionLevel> DefaultCompressionLevel { get; }
    private string ModularizationSuffix { get; }
    private Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> FileFacadesByCabinet { get; }
    private WindowsInstallerData Data { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    private Func`4<MediaSymbol, string, string, string> ResolveMedia { get; }
    public IEnumerable`1<IFileTransfer> FileTransfers { get; }
    public IEnumerable`1<ITrackedFile> TrackedFiles { get; }
    public CreateCabinetsCommand(IServiceProvider serviceProvider, IMessaging messaging, IBackendHelper backendHelper, IEnumerable`1<IWindowsInstallerBackendBinderExtension> backendExtensions, IntermediateSection section, string cabCachePath, int cabbingThreadCount, string outputPath, string intermediateFolder, Nullable`1<CompressionLevel> defaultCompressionLevel, bool compressed, string modularizationSuffix, Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> filesByCabinetMedia, WindowsInstallerData data, TableDefinitionCollection tableDefinitions, Func`4<MediaSymbol, string, string, string> resolveMedia);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private int get_CabbingThreadCount();
    [CompilerGeneratedAttribute]
private void set_CabbingThreadCount(int value);
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private string get_LayoutDirectory();
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> get_DefaultCompressionLevel();
    [CompilerGeneratedAttribute]
private string get_ModularizationSuffix();
    [CompilerGeneratedAttribute]
private Dictionary`2<MediaSymbol, IEnumerable`1<IFileFacade>> get_FileFacadesByCabinet();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Data();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private Func`4<MediaSymbol, string, string, string> get_ResolveMedia();
    public IEnumerable`1<IFileTransfer> get_FileTransfers();
    public IEnumerable`1<ITrackedFile> get_TrackedFiles();
    public void Execute();
    private int CalculateCabbingThreadCount();
    private CabinetWorkItem CreateCabinetWorkItem(WindowsInstallerData data, string cabinetDir, MediaSymbol mediaSymbol, CompressionLevel compressionLevel, IEnumerable`1<IFileFacade> fileFacades, Dictionary`2<string, MsiFileHashSymbol> hashesByFileId);
    private void GetMediaTemplateAttributes(Int32& maxCabSizeForLargeFileSplitting, Int32& maxUncompressedMediaSize);
    private void UpdateMediaWithSpannedCabinets(IReadOnlyCollection`1<CompletedCabinetWorkItem> completedCabinetWorkItems);
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreateDeltaPatchesCommand : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private WixPatchSymbol <WixPatchId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    private IEnumerable`1<IFileFacade> FileFacades { get; }
    private WixPatchSymbol WixPatchId { get; }
    private string IntermediateFolder { get; }
    public CreateDeltaPatchesCommand(List`1<IFileFacade> fileFacades, string intermediateFolder, WixPatchSymbol wixPatchId);
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_FileFacades();
    [CompilerGeneratedAttribute]
private WixPatchSymbol get_WixPatchId();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreateIdtFileCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private Table <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Codepage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAddedColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdtPath>k__BackingField;
    private IMessaging Messaging { get; }
    private Table Table { get; }
    private int Codepage { get; private set; }
    private string IntermediateFolder { get; }
    private bool KeepAddedColumns { get; }
    public string IdtPath { get; private set; }
    public CreateIdtFileCommand(IMessaging messaging, Table table, int codepage, string intermediateFolder, bool keepAddedColumns);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private Table get_Table();
    [CompilerGeneratedAttribute]
private int get_Codepage();
    [CompilerGeneratedAttribute]
private void set_Codepage(int value);
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private bool get_KeepAddedColumns();
    [CompilerGeneratedAttribute]
public string get_IdtPath();
    [CompilerGeneratedAttribute]
private void set_IdtPath(string value);
    public void Execute();
    private void TableToIdtDefinition(Table table, StreamWriter writer, bool keepAddedColumns);
    private string TableDefinitionToIdtDefinition(TableDefinition definition, bool keepAddedColumns);
    private string RowToIdtDefinition(Row row, bool keepAddedColumns);
    private string FieldToIdtValue(Field field);
    private static Encoding GetCodepageEncoding(int codepage);
    private static string ColumnIdtType(ColumnDefinition column);
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreateInstanceTransformsCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SubStorage> <SubStorages>k__BackingField;
    private IntermediateSection Section { get; }
    private WindowsInstallerData Output { get; }
    public TableDefinitionCollection TableDefinitions { get; }
    private IBackendHelper BackendHelper { get; }
    public IReadOnlyCollection`1<SubStorage> SubStorages { get; private set; }
    public CreateInstanceTransformsCommand(IntermediateSection section, WindowsInstallerData output, TableDefinitionCollection tableDefinitions, IBackendHelper backendHelper);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Output();
    [CompilerGeneratedAttribute]
public TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SubStorage> get_SubStorages();
    [CompilerGeneratedAttribute]
private void set_SubStorages(IReadOnlyCollection`1<SubStorage> value);
    public IReadOnlyCollection`1<SubStorage> Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreatePatchSubStoragesCommand : object {
    private static String[] PatchUninstallBreakingTables;
    private TableDefinitionCollection tableDefinitions;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <Intermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PatchTransform> <Transforms>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SubStorage> <SubStorages>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private Intermediate Intermediate { get; }
    private IEnumerable`1<PatchTransform> Transforms { get; }
    public IEnumerable`1<SubStorage> SubStorages { get; private set; }
    public CreatePatchSubStoragesCommand(IMessaging messaging, IBackendHelper backendHelper, Intermediate intermediate, IEnumerable`1<PatchTransform> transforms);
    private static CreatePatchSubStoragesCommand();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private Intermediate get_Intermediate();
    [CompilerGeneratedAttribute]
private IEnumerable`1<PatchTransform> get_Transforms();
    [CompilerGeneratedAttribute]
public IEnumerable`1<SubStorage> get_SubStorages();
    [CompilerGeneratedAttribute]
private void set_SubStorages(IEnumerable`1<SubStorage> value);
    public IEnumerable`1<SubStorage> Execute();
    private Dictionary`2<SummaryInformationType, SummaryInformationSymbol> ExtractPatchSummaryInfo();
    private Dictionary`2<string, MsiPatchMetadataSymbol> PopulateSummaryInformation(Dictionary`2<SummaryInformationType, SummaryInformationSymbol> summaryInfo, List`1<IntermediateSymbol> symbols, WixPatchSymbol patchSymbol);
    private bool CheckUninstallableTransform(string productCode, WindowsInstallerData transform);
    private void Validate(PatchTransform patchTransform);
    private WindowsInstallerData BuildPairedTransform(Dictionary`2<SummaryInformationType, SummaryInformationSymbol> summaryInfo, Dictionary`2<string, MsiPatchMetadataSymbol> patchMetadata, WixPatchSymbol patchIdSymbol, WindowsInstallerData mainTransform, MediaSymbol mediaSymbol, WixPatchBaselineSymbol baselineSymbol, String& productCode);
    private static SortedSet`1<string> FinalizePatchProductCodes(List`1<IntermediateSymbol> symbols, SortedSet`1<string> productCodes);
    [CompilerGeneratedAttribute]
internal static void <PopulateSummaryInformation>g__AddSummaryInformation|21_2(SummaryInformationType type, string value, SourceLineNumber sourceLineNumber, <>c__DisplayClass21_0& );
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreatePatchTransformsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileResolver <FileResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IResolverExtension> <ResolverExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> <BackendExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <Intermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBindPath> <BindPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private PatchFilterMap <PatchFilterMap>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PatchTransform> <PatchTransforms>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private IPathResolver PathResolver { get; }
    private IFileResolver FileResolver { get; }
    private IReadOnlyCollection`1<IResolverExtension> ResolverExtensions { get; }
    private IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> BackendExtensions { get; }
    private Intermediate Intermediate { get; }
    private string IntermediateFolder { get; }
    private IReadOnlyCollection`1<IBindPath> BindPaths { get; }
    public PatchFilterMap PatchFilterMap { get; private set; }
    public IEnumerable`1<PatchTransform> PatchTransforms { get; private set; }
    public CreatePatchTransformsCommand(IMessaging messaging, IBackendHelper backendHelper, IFileSystem fileSystem, IPathResolver pathResolver, IFileResolver fileResolver, IReadOnlyCollection`1<IResolverExtension> resolverExtensions, IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> backendExtensions, Intermediate intermediate, string intermediateFolder, IReadOnlyCollection`1<IBindPath> bindPaths);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private IFileResolver get_FileResolver();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IResolverExtension> get_ResolverExtensions();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> get_BackendExtensions();
    [CompilerGeneratedAttribute]
private Intermediate get_Intermediate();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBindPath> get_BindPaths();
    [CompilerGeneratedAttribute]
public PatchFilterMap get_PatchFilterMap();
    [CompilerGeneratedAttribute]
private void set_PatchFilterMap(PatchFilterMap value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<PatchTransform> get_PatchTransforms();
    [CompilerGeneratedAttribute]
private void set_PatchTransforms(IEnumerable`1<PatchTransform> value);
    public IEnumerable`1<PatchTransform> Execute();
    private WindowsInstallerData GetWindowsInstallerData(string path, BindStage stage);
    private void ReResolveWindowsInstallerData(WindowsInstallerData data, BindStage stage);
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreateSpecialPropertiesCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    private IntermediateSection Section { get; }
    public CreateSpecialPropertiesCommand(IntermediateSection section);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.CreateWindowsInstallerDataFromIRCommand : object {
    private static Char[] PathSeparatorChars;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> <BackendExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Codepage>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<FileSymbol>> <GeneratedShortNames>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    private IEnumerable`1<IWindowsInstallerBackendBinderExtension> BackendExtensions { get; }
    private IWindowsInstallerBackendHelper BackendHelper { get; }
    private IMessaging Messaging { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    private int Codepage { get; }
    private IntermediateSection Section { get; }
    private Dictionary`2<string, List`1<FileSymbol>> GeneratedShortNames { get; }
    public WindowsInstallerData Data { get; private set; }
    public CreateWindowsInstallerDataFromIRCommand(IMessaging messaging, IntermediateSection section, TableDefinitionCollection tableDefinitions, int codepage, IEnumerable`1<IWindowsInstallerBackendBinderExtension> backendExtensions, IWindowsInstallerBackendHelper backendHelper);
    private static CreateWindowsInstallerDataFromIRCommand();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> get_BackendExtensions();
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private int get_Codepage();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<FileSymbol>> get_GeneratedShortNames();
    [CompilerGeneratedAttribute]
public WindowsInstallerData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(WindowsInstallerData value);
    public WindowsInstallerData Execute();
    private void AddSectionToData();
    private void AddAssemblySymbol(AssemblySymbol symbol);
    private void AddBBControlSymbol(BBControlSymbol symbol);
    private void AddClassSymbol(ClassSymbol symbol);
    private void AddControlSymbol(ControlSymbol symbol);
    private void AddControlEventSymbol(ControlEventSymbol symbol);
    private void AddComponentSymbol(ComponentSymbol symbol);
    private void AddCustomActionSymbol(CustomActionSymbol symbol);
    private void AddDialogSymbol(DialogSymbol symbol);
    private void AddDirectorySymbol(DirectorySymbol symbol);
    private void AddDuplicateFileSymbol(DuplicateFileSymbol symbol);
    private void AddEnvironmentSymbol(EnvironmentSymbol symbol);
    private void AddErrorSymbol(ErrorSymbol symbol);
    private void AddFeatureSymbol(FeatureSymbol symbol);
    private void AddFileSymbol(FileSymbol symbol);
    private void AddIniFileSymbol(IniFileSymbol symbol);
    private void AddIniLocatorSymbol(IniLocatorSymbol symbol);
    private void AddMediaSymbol(MediaSymbol symbol);
    private void AddModuleConfigurationSymbol(ModuleConfigurationSymbol symbol);
    private void AddMsiEmbeddedUISymbol(MsiEmbeddedUISymbol symbol);
    private void AddMsiServiceConfigSymbol(MsiServiceConfigSymbol symbol);
    private void AddMsiServiceConfigFailureActionsSymbol(MsiServiceConfigFailureActionsSymbol symbol);
    private void AddMoveFileSymbol(MoveFileSymbol symbol);
    private void AddPropertySymbol(PropertySymbol symbol);
    private void AddRemoveFileSymbol(RemoveFileSymbol symbol);
    private void AddRegistrySymbol(RegistrySymbol symbol);
    private void AddRegLocatorSymbol(RegLocatorSymbol symbol);
    private void AddRemoveRegistrySymbol(RemoveRegistrySymbol symbol);
    private void AddServiceControlSymbol(ServiceControlSymbol symbol);
    private void AddServiceInstallSymbol(ServiceInstallSymbol symbol);
    private void AddShortcutSymbol(ShortcutSymbol symbol);
    private void AddTextStyleSymbol(TextStyleSymbol symbol);
    private void AddUpgradeSymbol(UpgradeSymbol symbol);
    private void AddWixActionSymbol(WixActionSymbol symbol);
    private void IndexCustomTableCellSymbol(WixCustomTableCellSymbol wixCustomTableCellSymbol, Dictionary`2<string, List`1<WixCustomTableCellSymbol>> cellsByTableAndRowId);
    private void AddIndexedCellSymbols(Dictionary`2<string, List`1<WixCustomTableCellSymbol>> cellsByTableAndRowId);
    private void AddWixEnsureTableSymbol(WixEnsureTableSymbol symbol);
    private void AddWixModuleSymbol(WixModuleSymbol symbol);
    private void AddWixPackageSymbol(WixPackageSymbol symbol);
    private bool AddSymbolFromExtension(IntermediateSymbol symbol);
    private bool AddSymbolDefaultly(IntermediateSymbol symbol);
    private void EnsureModuleIgnoredTable(IntermediateSymbol symbol, string ignoredTable);
    private ValueTuple`2<string, string> AddDirectorySubdirectories(DirectorySymbol symbol);
    private void EnsureRequiredTables();
    private void ReportGeneratedShortFileNameConflicts();
    private void ReportIllegalTables();
    private void ReportMismatchedModularizations();
    private void ReportWindowsInstallerDataInconsistencies();
    private static OutputType SectionTypeToOutputType(SectionType type);
    private Row CreateRow(IntermediateSymbol symbol, string tableDefinitionName);
    private Row CreateRow(IntermediateSymbol symbol, TableDefinition tableDefinition);
    private bool CheckUpgradeVersion(UpgradeSymbol symbol, string version, String& changedVersion);
    private string CreateShortName(string longName, bool keepExtension, String[] args);
    private static string CreateMsiFilename(string shortName, string longName);
}
internal class WixToolset.Core.WindowsInstaller.Bind.DataLoader : object {
    public static bool TryLoadWindowsInstallerData(string path, WindowsInstallerData& data);
    public static bool TryLoadWindowsInstallerData(string path, bool suppressVersionCheck, WindowsInstallerData& data);
    public static ValueTuple`2<WindowsInstallerData, Exception> LoadWindowsInstallerDataSafely(string path, bool suppressVersionCheck);
}
internal class WixToolset.Core.WindowsInstaller.Bind.ExtractMergeModuleFilesCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<WixMergeSymbol> <WixMergeSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacadesFromIntermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OutputInstallerVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <MergeModulesFileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ITrackedFile> <TrackedFiles>k__BackingField;
    private IMessaging Messaging { get; }
    private IWindowsInstallerBackendHelper BackendHelper { get; }
    private IEnumerable`1<WixMergeSymbol> WixMergeSymbols { get; }
    private IEnumerable`1<IFileFacade> FileFacadesFromIntermediate { get; }
    private int OutputInstallerVersion { get; }
    private string IntermediateFolder { get; }
    private bool SuppressLayout { get; }
    public IEnumerable`1<IFileFacade> MergeModulesFileFacades { get; private set; }
    public IReadOnlyList`1<ITrackedFile> TrackedFiles { get; private set; }
    public ExtractMergeModuleFilesCommand(IMessaging messaging, IWindowsInstallerBackendHelper backendHelper, IEnumerable`1<WixMergeSymbol> wixMergeSymbols, IEnumerable`1<IFileFacade> fileFacadesFromIntermediate, int installerVersion, string intermediateFolder, bool suppressLayout);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IEnumerable`1<WixMergeSymbol> get_WixMergeSymbols();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_FileFacadesFromIntermediate();
    [CompilerGeneratedAttribute]
private int get_OutputInstallerVersion();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private bool get_SuppressLayout();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFileFacade> get_MergeModulesFileFacades();
    [CompilerGeneratedAttribute]
private void set_MergeModulesFileFacades(IEnumerable`1<IFileFacade> value);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
private void set_TrackedFiles(IReadOnlyList`1<ITrackedFile> value);
    public void Execute();
    private IReadOnlyCollection`1<ITrackedFile> CreateFacadesForMergeModuleFiles(WixMergeSymbol wixMergeRow, List`1<IFileFacade> mergeModulesFileFacades, Dictionary`2<string, IFileFacade> indexedFileFacades);
    private void ExtractFilesFromMergeModule(IMsmMerge2 merge, WixMergeSymbol wixMergeRow);
}
internal class WixToolset.Core.WindowsInstaller.Bind.FileSystemManager : object {
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileSystemExtension> <Extensions>k__BackingField;
    private IFileSystem FileSystem { get; }
    private IEnumerable`1<IFileSystemExtension> Extensions { get; }
    public FileSystemManager(IFileSystem fileSystem, IEnumerable`1<IFileSystemExtension> fileSystemExtensions);
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileSystemExtension> get_Extensions();
    public bool CompareFiles(string firstPath, string secondPath);
    private bool BuiltinCompareFiles(string firstPath, string secondPath);
}
internal class WixToolset.Core.WindowsInstaller.Bind.FinalizeComponentGuids : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ComponentIdGenSeeds>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookup`2<string, FileSymbol> <FilesByComponentId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RegistrySymbol> <RegistrySymbolsById>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IResolvedDirectory> <TargetPathsByDirectoryId>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IPathResolver PathResolver { get; }
    private IntermediateSection Section { get; }
    private Platform Platform { get; }
    private Dictionary`2<string, string> ComponentIdGenSeeds { get; private set; }
    private ILookup`2<string, FileSymbol> FilesByComponentId { get; private set; }
    private Dictionary`2<string, RegistrySymbol> RegistrySymbolsById { get; private set; }
    private Dictionary`2<string, IResolvedDirectory> TargetPathsByDirectoryId { get; private set; }
    internal FinalizeComponentGuids(IMessaging messaging, IBackendHelper helper, IPathResolver pathResolver, IntermediateSection section, Platform platform);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private Platform get_Platform();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> get_ComponentIdGenSeeds();
    [CompilerGeneratedAttribute]
private void set_ComponentIdGenSeeds(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
private ILookup`2<string, FileSymbol> get_FilesByComponentId();
    [CompilerGeneratedAttribute]
private void set_FilesByComponentId(ILookup`2<string, FileSymbol> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RegistrySymbol> get_RegistrySymbolsById();
    [CompilerGeneratedAttribute]
private void set_RegistrySymbolsById(Dictionary`2<string, RegistrySymbol> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IResolvedDirectory> get_TargetPathsByDirectoryId();
    [CompilerGeneratedAttribute]
private void set_TargetPathsByDirectoryId(Dictionary`2<string, IResolvedDirectory> value);
    public void Execute();
    private void GenerateComponentGuid(ComponentSymbol componentSymbol);
    private void ReportGuidCollisions(HashSet`1<string> guidCollisions, Dictionary`2<string, List`1<ComponentSymbol>> componentGuidConditions);
    private Dictionary`2<string, IResolvedDirectory> ResolveDirectoryTargetPaths();
}
internal class WixToolset.Core.WindowsInstaller.Bind.GenerateDatabaseCommand : object {
    private static string IdtsSubFolder;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemManager <FileSystemManager>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepAddedColumns>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITrackedFile> <GeneratedTemporaryFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressAddingValidationRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseSubDirectory>k__BackingField;
    private IBackendHelper BackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private FileSystemManager FileSystemManager { get; }
    private bool KeepAddedColumns { get; }
    private IMessaging Messaging { get; }
    private WindowsInstallerData Data { get; }
    private string OutputPath { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    private string IntermediateFolder { get; }
    public List`1<ITrackedFile> GeneratedTemporaryFiles { get; }
    private bool SuppressAddingValidationRows { get; }
    private bool UseSubDirectory { get; }
    public GenerateDatabaseCommand(IMessaging messaging, IBackendHelper backendHelper, IFileSystem fileSystem, FileSystemManager fileSystemManager, WindowsInstallerData data, string outputPath, TableDefinitionCollection tableDefinitions, string intermediateFolder, bool keepAddedColumns, bool suppressAddingValidationRows, bool useSubdirectory);
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private FileSystemManager get_FileSystemManager();
    [CompilerGeneratedAttribute]
private bool get_KeepAddedColumns();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Data();
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public List`1<ITrackedFile> get_GeneratedTemporaryFiles();
    [CompilerGeneratedAttribute]
private bool get_SuppressAddingValidationRows();
    [CompilerGeneratedAttribute]
private bool get_UseSubDirectory();
    public void Execute();
    private void AddValidationRows();
    private void ImportTables(Database db, string idtDirectory);
    private void ImportSubStorages(Database db);
    private void SetDatabaseCodepage(Database db, int codepage, string idtFolder);
}
internal class WixToolset.Core.WindowsInstaller.Bind.GeneratePatchFilterIdsCommand : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> <BackendExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilterIdPrefix>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<Row, string> <RowToFilterId>k__BackingField;
    private IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> BackendExtensions { get; }
    private WindowsInstallerData Data { get; }
    private string FilterIdPrefix { get; }
    public IDictionary`2<Row, string> RowToFilterId { get; private set; }
    public GeneratePatchFilterIdsCommand(IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> backendExtensions, WindowsInstallerData data, string filterIdPrefix);
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IWindowsInstallerBackendBinderExtension> get_BackendExtensions();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Data();
    [CompilerGeneratedAttribute]
private string get_FilterIdPrefix();
    [CompilerGeneratedAttribute]
public IDictionary`2<Row, string> get_RowToFilterId();
    [CompilerGeneratedAttribute]
private void set_RowToFilterId(IDictionary`2<Row, string> value);
    public void Execute();
    private Dictionary`2<string, string> AssignFilterIdsToTable(Table table, int rowPrimaryKeyIndex);
    private void ConnectTableToFilterId(Table table, Dictionary`2<string, string> filterIdByPrimaryKey, int rowIndex);
    private Dictionary`2<string, string> ConnectTableToSectionAndIndex(Table table, Dictionary`2<string, string> filterIdsByPrimaryKey, int rowIndex, int rowPrimaryKeyIndex);
    private string GetNewFilterId(Row row);
}
internal class WixToolset.Core.WindowsInstaller.Bind.GetFileFacadesCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IFileFacade> <FileFacades>k__BackingField;
    private IntermediateSection Section { get; }
    private IWindowsInstallerBackendHelper BackendHelper { get; }
    public List`1<IFileFacade> FileFacades { get; private set; }
    public GetFileFacadesCommand(IntermediateSection section, IWindowsInstallerBackendHelper backendHelper);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
public List`1<IFileFacade> get_FileFacades();
    [CompilerGeneratedAttribute]
private void set_FileFacades(List`1<IFileFacade> value);
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.GetFileFacadesFromTransforms : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemManager <FileSystemManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SubStorage> <SubStorages>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IFileFacade> <FileFacades>k__BackingField;
    private IMessaging Messaging { get; }
    private IWindowsInstallerBackendHelper BackendHelper { get; }
    private FileSystemManager FileSystemManager { get; }
    private IEnumerable`1<SubStorage> SubStorages { get; }
    public List`1<IFileFacade> FileFacades { get; private set; }
    public GetFileFacadesFromTransforms(IMessaging messaging, IWindowsInstallerBackendHelper backendHelper, FileSystemManager fileSystemManager, IEnumerable`1<SubStorage> subStorages);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private FileSystemManager get_FileSystemManager();
    [CompilerGeneratedAttribute]
private IEnumerable`1<SubStorage> get_SubStorages();
    [CompilerGeneratedAttribute]
public List`1<IFileFacade> get_FileFacades();
    [CompilerGeneratedAttribute]
private void set_FileFacades(List`1<IFileFacade> value);
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.LoadTableDefinitionsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> <BackendExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    public IMessaging Messaging { get; }
    private IntermediateSection Section { get; }
    private IEnumerable`1<IWindowsInstallerBackendBinderExtension> BackendExtensions { get; }
    public TableDefinitionCollection TableDefinitions { get; private set; }
    public LoadTableDefinitionsCommand(IMessaging messaging, IntermediateSection section, IEnumerable`1<IWindowsInstallerBackendBinderExtension> backendExtensions);
    [CompilerGeneratedAttribute]
public IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerBackendBinderExtension> get_BackendExtensions();
    [CompilerGeneratedAttribute]
public TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private void set_TableDefinitions(TableDefinitionCollection value);
    public TableDefinitionCollection Execute();
    private TableDefinition CreateCustomTable(WixCustomTableSymbol symbol, Dictionary`2<string, WixCustomTableColumnSymbol> customColumnsById);
}
internal class WixToolset.Core.WindowsInstaller.Bind.MergeModulesCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacadesFromModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SuppressedTableNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ITrackedFile> <TrackedFiles>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IEnumerable`1<IFileFacade> FileFacadesFromModule { get; }
    private IntermediateSection Section { get; }
    private IEnumerable`1<string> SuppressedTableNames { get; }
    private string OutputPath { get; }
    private string IntermediateFolder { get; }
    public IReadOnlyList`1<ITrackedFile> TrackedFiles { get; private set; }
    public MergeModulesCommand(IMessaging messaging, IBackendHelper backendHelper, IEnumerable`1<IFileFacade> fileFacadesFromModule, IntermediateSection section, IEnumerable`1<string> suppressedTableNames, string outputPath, string intermediateFolder);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_FileFacadesFromModule();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> get_SuppressedTableNames();
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
private void set_TrackedFiles(IReadOnlyList`1<ITrackedFile> value);
    public void Execute();
    internal static void ActionWithRetries(Action action, int maxRetries);
}
internal class WixToolset.Core.WindowsInstaller.Bind.ModularizeCommand : object {
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModularizationSuffix>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <SuppressModularizationIdentifiers>k__BackingField;
    private IBackendHelper BackendHelper { get; }
    private WindowsInstallerData Output { get; }
    private string ModularizationSuffix { get; }
    private HashSet`1<string> SuppressModularizationIdentifiers { get; }
    public ModularizeCommand(IBackendHelper backendHelper, WindowsInstallerData output, string modularizationSuffix, IEnumerable`1<WixSuppressModularizationSymbol> suppressSymbols);
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Output();
    [CompilerGeneratedAttribute]
private string get_ModularizationSuffix();
    [CompilerGeneratedAttribute]
private HashSet`1<string> get_SuppressModularizationIdentifiers();
    public void Execute();
    private void ModularizeTable(Table table);
    private string ModularizedRowFieldValue(Row row, Field field);
}
internal class WixToolset.Core.WindowsInstaller.Bind.OptimizeFileFacadesOrderCommand : object {
    [CompilerGeneratedAttribute]
private List`1<IFileFacade> <FileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    public List`1<IFileFacade> FileFacades { get; private set; }
    private IBackendHelper BackendHelper { get; }
    private IPathResolver PathResolver { get; }
    private IntermediateSection Section { get; }
    private Platform Platform { get; }
    public OptimizeFileFacadesOrderCommand(IBackendHelper helper, IPathResolver pathResolver, IntermediateSection section, Platform platform, List`1<IFileFacade> fileFacades);
    [CompilerGeneratedAttribute]
public List`1<IFileFacade> get_FileFacades();
    [CompilerGeneratedAttribute]
private void set_FileFacades(List`1<IFileFacade> value);
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private Platform get_Platform();
    public List`1<IFileFacade> Execute();
    private Dictionary`2<string, string> ComponentTargetPaths();
    private Dictionary`2<string, IResolvedDirectory> ResolveDirectories();
}
internal static class WixToolset.Core.WindowsInstaller.Bind.PatchConstants : object {
    public static int MaxPatchTransformName;
    public static string PairedPatchTransformPrefix;
    private static PatchConstants();
}
internal class WixToolset.Core.WindowsInstaller.Bind.PatchFilterMap : object {
    private Dictionary`2<Row, PatchFilter> filterMap;
    public void AddTargetRowFilterIds(IEnumerable`1<KeyValuePair`2<Row, string>> rowFilterIds);
    public void AddUpdatedRowFilterIds(IEnumerable`1<KeyValuePair`2<Row, string>> rowFilterIds);
    public void AddTargetRowFilterToUpdatedRowFilter(Row targetRow, Row updatedRow);
    internal bool ContainsPatchFilterForRow(Row row);
    internal bool TryGetPatchFiltersForRow(Row row, String& targetFilterId, String& updatedFilterId);
}
internal class WixToolset.Core.WindowsInstaller.Bind.PatchTransform : object {
    [CompilerGeneratedAttribute]
private string <Baseline>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Transform>k__BackingField;
    public string Baseline { get; }
    public WindowsInstallerData Transform { get; }
    public PatchTransform(string baseline, WindowsInstallerData transform);
    [CompilerGeneratedAttribute]
public string get_Baseline();
    [CompilerGeneratedAttribute]
public WindowsInstallerData get_Transform();
}
internal class WixToolset.Core.WindowsInstaller.Bind.ProcessDependencyReferencesCommand : object {
    private static string DependencyRegistryRoot;
    private static string RegistryDependents;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<WixDependencyRefSymbol> <DependencyRefSymbols>k__BackingField;
    private IBackendHelper BackendHelper { get; }
    private IntermediateSection Section { get; }
    private IEnumerable`1<WixDependencyRefSymbol> DependencyRefSymbols { get; }
    public ProcessDependencyReferencesCommand(IBackendHelper backendHelper, IntermediateSection section, IEnumerable`1<WixDependencyRefSymbol> dependencyRefSymbols);
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IEnumerable`1<WixDependencyRefSymbol> get_DependencyRefSymbols();
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.ProcessPackageSoftwareTagsCommand : object {
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<WixPackageTagSymbol> <SoftwareTags>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ITrackedFile> <TrackedFiles>k__BackingField;
    private string IntermediateFolder { get; }
    private IntermediateSection Section { get; }
    private IBackendHelper BackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private IEnumerable`1<WixPackageTagSymbol> SoftwareTags { get; }
    public IReadOnlyCollection`1<ITrackedFile> TrackedFiles { get; private set; }
    public ProcessPackageSoftwareTagsCommand(IntermediateSection section, IBackendHelper backendHelper, IFileSystem fileSystem, IEnumerable`1<WixPackageTagSymbol> softwareTags, string intermediateFolder);
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IEnumerable`1<WixPackageTagSymbol> get_SoftwareTags();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
private void set_TrackedFiles(IReadOnlyCollection`1<ITrackedFile> value);
    public void Execute();
    private static string NormalizeGuid(string guidString);
    private static void CreateTagFile(Stream stream, string uniqueId, string name, string version, string regid, string manufacturer, string persistendId);
}
internal class WixToolset.Core.WindowsInstaller.Bind.ProcessPropertiesCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private WixPackageSymbol <PackageSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FallbackLcid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PopulateDelayedVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <DelayedVariablesCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductLanguage>k__BackingField;
    private IntermediateSection Section { get; }
    private WixPackageSymbol PackageSymbol { get; }
    private int FallbackLcid { get; }
    private bool PopulateDelayedVariables { get; }
    private IBackendHelper BackendHelper { get; }
    public Dictionary`2<string, string> DelayedVariablesCache { get; private set; }
    public string ProductLanguage { get; private set; }
    public ProcessPropertiesCommand(IntermediateSection section, WixPackageSymbol packageSymbol, int fallbackLcid, bool populateDelayedVariables, IBackendHelper backendHelper);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private WixPackageSymbol get_PackageSymbol();
    [CompilerGeneratedAttribute]
private int get_FallbackLcid();
    [CompilerGeneratedAttribute]
private bool get_PopulateDelayedVariables();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_DelayedVariablesCache();
    [CompilerGeneratedAttribute]
private void set_DelayedVariablesCache(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_ProductLanguage();
    [CompilerGeneratedAttribute]
private void set_ProductLanguage(string value);
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.ProcessUncompressedFilesCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LayoutDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LongNamesInImage>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<MediaSymbol, string, string, string> <ResolveMedia>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileTransfer> <FileTransfers>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITrackedFile> <TrackedFiles>k__BackingField;
    private IntermediateSection Section { get; }
    private IBackendHelper BackendHelper { get; }
    private IPathResolver PathResolver { get; }
    private string DatabasePath { get; }
    private string LayoutDirectory { get; }
    private bool Compressed { get; }
    private bool LongNamesInImage { get; }
    private IEnumerable`1<IFileFacade> FileFacades { get; }
    private Func`4<MediaSymbol, string, string, string> ResolveMedia { get; }
    public IEnumerable`1<IFileTransfer> FileTransfers { get; private set; }
    public IEnumerable`1<ITrackedFile> TrackedFiles { get; private set; }
    public ProcessUncompressedFilesCommand(IntermediateSection section, IBackendHelper backendHelper, IPathResolver pathResolver, IEnumerable`1<IFileFacade> fileFacades, string outputPath, bool compressed, bool longNamesInImage, Func`4<MediaSymbol, string, string, string> resolveMedia);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private string get_DatabasePath();
    [CompilerGeneratedAttribute]
private string get_LayoutDirectory();
    [CompilerGeneratedAttribute]
private bool get_Compressed();
    [CompilerGeneratedAttribute]
private bool get_LongNamesInImage();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_FileFacades();
    [CompilerGeneratedAttribute]
private Func`4<MediaSymbol, string, string, string> get_ResolveMedia();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFileTransfer> get_FileTransfers();
    [CompilerGeneratedAttribute]
private void set_FileTransfers(IEnumerable`1<IFileTransfer> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
private void set_TrackedFiles(IEnumerable`1<ITrackedFile> value);
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.ReduceTransformCommand : object {
    [CompilerGeneratedAttribute]
private Intermediate <Intermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PatchTransform> <PatchTransforms>k__BackingField;
    [CompilerGeneratedAttribute]
private PatchFilterMap <PatchFilterMap>k__BackingField;
    private Intermediate Intermediate { get; }
    private IEnumerable`1<PatchTransform> PatchTransforms { get; }
    private PatchFilterMap PatchFilterMap { get; }
    public ReduceTransformCommand(Intermediate intermediate, IEnumerable`1<PatchTransform> patchTransforms, PatchFilterMap patchFilterMap);
    [CompilerGeneratedAttribute]
private Intermediate get_Intermediate();
    [CompilerGeneratedAttribute]
private IEnumerable`1<PatchTransform> get_PatchTransforms();
    [CompilerGeneratedAttribute]
private PatchFilterMap get_PatchFilterMap();
    public void Execute();
    private bool ReduceTransform(WindowsInstallerData transform, IEnumerable`1<WixPatchRefSymbol> patchRefSymbols);
    private bool IsInPatchFamily(Row row, Dictionary`2<string, Row> oldSections, Dictionary`2<string, Row> newSections);
    private static bool IsInPatchFamily(string oldSection, string newSection, Dictionary`2<string, Row> oldSections, Dictionary`2<string, Row> newSections);
    private static void RemoveProductCodeFromTransform(WindowsInstallerData transform);
    private int ReduceTransformSequenceTable(List`1<Table> sequenceList, Dictionary`2<string, Row> oldSections, Dictionary`2<string, Row> newSections, Dictionary`2<string, Row> customAction);
}
internal class WixToolset.Core.WindowsInstaller.Bind.SequenceActionsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RelativeActions> <RelativeActionsForActions>k__BackingField;
    private IMessaging Messaging { get; }
    private IntermediateSection Section { get; }
    private Dictionary`2<string, RelativeActions> RelativeActionsForActions { get; }
    public SequenceActionsCommand(IMessaging messaging, IntermediateSection section);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, RelativeActions> get_RelativeActionsForActions();
    public void Execute();
    private Dictionary`2<string, WixActionSymbol> GetRequiredStandardActions();
    private List`1<WixActionSymbol> ScheduleActions(Dictionary`2<string, WixActionSymbol> requiredActionSymbols);
    private IEnumerable`1<string> GetRequiredActionIds();
    private void SequenceActionSymbol(WixActionSymbol actionSymbol, Dictionary`2<string, WixActionSymbol> requiredActionSymbols, Dictionary`2<WixActionSymbol, WixActionSymbol> firstReference);
    private void CheckForCircularActionReference(WixActionSymbol actionSymbol, Dictionary`2<string, WixActionSymbol> requiredActionSymbols, Dictionary`2<WixActionSymbol, WixActionSymbol> firstReference);
    private WixActionSymbol GetParentActionSymbol(WixActionSymbol actionSymbol, Dictionary`2<string, WixActionSymbol> requiredActionSymbols);
    private RelativeActions GetRelativeActions(WixActionSymbol action);
    private RelativeActions GetAllRelativeActionsForSequenceType(SequenceTable sequenceType, WixActionSymbol action);
    private void RecurseRelativeActionsForSequenceType(SequenceTable sequenceType, List`1<WixActionSymbol> actions, List`1<WixActionSymbol> visitedActions);
}
internal class WixToolset.Core.WindowsInstaller.Bind.UpdateFileFacadesCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <AllFileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <UpdateFileFacades>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OverwriteHash>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <VariableCache>k__BackingField;
    private IMessaging Messaging { get; }
    private IFileSystem FileSystem { get; }
    private IntermediateSection Section { get; }
    private IEnumerable`1<IFileFacade> AllFileFacades { get; }
    private IEnumerable`1<IFileFacade> UpdateFileFacades { get; }
    private bool OverwriteHash { get; }
    private IDictionary`2<string, string> VariableCache { get; }
    public UpdateFileFacadesCommand(IMessaging messaging, IFileSystem fileSystem, IntermediateSection section, IEnumerable`1<IFileFacade> allFileFacades, IEnumerable`1<IFileFacade> updateFileFacades, IDictionary`2<string, string> variableCache, bool overwriteHash);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_AllFileFacades();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_UpdateFileFacades();
    [CompilerGeneratedAttribute]
private bool get_OverwriteHash();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> get_VariableCache();
    public void Execute();
    private void UpdateFileFacade(IFileFacade facade, Dictionary`2<string, AssemblySymbol> assemblySymbols, Dictionary`2<string, MsiAssemblyNameSymbol> assemblyNameSymbols);
    private void SetMsiAssemblyName(Dictionary`2<string, MsiAssemblyNameSymbol> assemblyNameSymbols, IFileFacade facade, AssemblySymbol assemblySymbol, string name, string value);
}
internal class WixToolset.Core.WindowsInstaller.Bind.UpdateFromTextFilesCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    private IMessaging Messaging { get; }
    private IntermediateSection Section { get; }
    public UpdateFromTextFilesCommand(IMessaging messaging, IntermediateSection section);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    public void Execute();
    private string ReadTextFile(SourceLineNumber sourceLineNumbers, string source);
}
internal class WixToolset.Core.WindowsInstaller.Bind.UpdateMediaSequencesCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacades>k__BackingField;
    private IntermediateSection Section { get; }
    private IEnumerable`1<IFileFacade> FileFacades { get; }
    public UpdateMediaSequencesCommand(IntermediateSection section, IEnumerable`1<IFileFacade> fileFacades);
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_FileFacades();
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.UpdateSymbolsWithFileFacadesCommand : object {
    private IntermediateSection section;
    private List`1<IFileFacade> allFileFacades;
    public UpdateSymbolsWithFileFacadesCommand(IntermediateSection section, List`1<IFileFacade> allFileFacades);
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Bind.UpdateTransformsWithFileFacades : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SubStorage> <SubStorages>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> <FileFacades>k__BackingField;
    private IMessaging Messaging { get; }
    private IntermediateSection Section { get; }
    private IEnumerable`1<SubStorage> SubStorages { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    private IEnumerable`1<IFileFacade> FileFacades { get; }
    public UpdateTransformsWithFileFacades(IMessaging messaging, IntermediateSection section, IEnumerable`1<SubStorage> subStorages, TableDefinitionCollection tableDefinitions, IEnumerable`1<IFileFacade> fileFacades);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
private IEnumerable`1<SubStorage> get_SubStorages();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileFacade> get_FileFacades();
    public void Execute();
    private void ProcessMsiFileHash(WindowsInstallerData transform, FileRow fileRow, MsiFileHashSymbol msiFileHashSymbol, RowDictionary`1<Row> msiFileHashIndex);
    private void ProcessMsiAssemblyName(WindowsInstallerData transform, FileRow fileRow, IFileFacade facade);
    private Dictionary`2<int, Dictionary`2<string, IFileFacade>> IndexFileFacadesByDiskId();
    private void AddPatchFilesActionToSequenceTable(SequenceTable table, WindowsInstallerData mainTransform, WindowsInstallerData pairedTransform, Row mainFileRow);
    private static bool TryModifyField(Row row, int index, object value);
    private static void TestSequenceTableForPatchFilesAction(Table sequenceTable, Boolean& hasPatchFilesAction, Int32& installFilesSequence, Int32& duplicateFilesSequence);
    private void ValidateFileRowChanges(WindowsInstallerData transform);
}
internal class WixToolset.Core.WindowsInstaller.Bind.ValidateWindowsInstallerProductConstraints : object {
    private static int MaximumAllowedComponentsInMsi;
    private static int MaximumAllowedFeatureDepthInMsi;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    private IMessaging Messaging { get; }
    private IntermediateSection Section { get; }
    internal ValidateWindowsInstallerProductConstraints(IMessaging messaging, IntermediateSection section);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IntermediateSection get_Section();
    public void Execute();
    private static int CalculateFeaturesDepth(string id, Dictionary`2<string, string> featuresWithParent, Dictionary`2<string, int> featuresWithDepth);
}
internal class WixToolset.Core.WindowsInstaller.CommandLine.DecompilerSubcommand : WindowsInstallerSubcommandBase {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecompileType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SaveAsData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressCustomTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressDroppingEmptyTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressRelativeActionSequencing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressUI>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private string InputPath { get; private set; }
    private string DecompileType { get; private set; }
    private string IntermediateFolder { get; private set; }
    private string OutputPath { get; private set; }
    private string ExportBasePath { get; private set; }
    private bool SaveAsData { get; private set; }
    private bool SuppressCustomTables { get; private set; }
    private bool SuppressDroppingEmptyTables { get; private set; }
    private bool SuppressRelativeActionSequencing { get; private set; }
    private bool SuppressUI { get; private set; }
    public DecompilerSubcommand(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private string get_InputPath();
    [CompilerGeneratedAttribute]
private void set_InputPath(string value);
    [CompilerGeneratedAttribute]
private string get_DecompileType();
    [CompilerGeneratedAttribute]
private void set_DecompileType(string value);
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
private void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
private string get_ExportBasePath();
    [CompilerGeneratedAttribute]
private void set_ExportBasePath(string value);
    [CompilerGeneratedAttribute]
private bool get_SaveAsData();
    [CompilerGeneratedAttribute]
private void set_SaveAsData(bool value);
    [CompilerGeneratedAttribute]
private bool get_SuppressCustomTables();
    [CompilerGeneratedAttribute]
private void set_SuppressCustomTables(bool value);
    [CompilerGeneratedAttribute]
private bool get_SuppressDroppingEmptyTables();
    [CompilerGeneratedAttribute]
private void set_SuppressDroppingEmptyTables(bool value);
    [CompilerGeneratedAttribute]
private bool get_SuppressRelativeActionSequencing();
    [CompilerGeneratedAttribute]
private void set_SuppressRelativeActionSequencing(bool value);
    [CompilerGeneratedAttribute]
private bool get_SuppressUI();
    [CompilerGeneratedAttribute]
private void set_SuppressUI(bool value);
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    private bool TryCalculateDecompileType(OutputType& decompileType);
    private string CalculateExtensionFromDecompileType(OutputType decompileType);
}
internal class WixToolset.Core.WindowsInstaller.CommandLine.InscribeSubcommand : WindowsInstallerSubcommandBase {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private string InputPath { get; private set; }
    private string IntermediateFolder { get; private set; }
    private string OutputPath { get; private set; }
    public InscribeSubcommand(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private string get_InputPath();
    [CompilerGeneratedAttribute]
private void set_InputPath(string value);
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
private void set_OutputPath(string value);
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
}
internal class WixToolset.Core.WindowsInstaller.CommandLine.TransformSubcommand : WindowsInstallerSubcommandBase {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionManager <ExtensionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UpdatedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveUnchangedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPedanticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressKeepingSpecialRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OutputAsWixout>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformFlags <ValidationFlags>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private IPathResolver PathResolver { get; }
    private IExtensionManager ExtensionManager { get; }
    private string OutputPath { get; private set; }
    private string TargetPath { get; private set; }
    private string UpdatedPath { get; private set; }
    private string ExportBasePath { get; private set; }
    private string IntermediateFolder { get; private set; }
    private bool PreserveUnchangedRows { get; private set; }
    private bool ShowPedanticMessages { get; private set; }
    private bool SuppressKeepingSpecialRows { get; private set; }
    private bool OutputAsWixout { get; private set; }
    private TransformFlags ValidationFlags { get; private set; }
    public TransformSubcommand(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private IExtensionManager get_ExtensionManager();
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
private void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
private string get_TargetPath();
    [CompilerGeneratedAttribute]
private void set_TargetPath(string value);
    [CompilerGeneratedAttribute]
private string get_UpdatedPath();
    [CompilerGeneratedAttribute]
private void set_UpdatedPath(string value);
    [CompilerGeneratedAttribute]
private string get_ExportBasePath();
    [CompilerGeneratedAttribute]
private void set_ExportBasePath(string value);
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
private bool get_PreserveUnchangedRows();
    [CompilerGeneratedAttribute]
private void set_PreserveUnchangedRows(bool value);
    [CompilerGeneratedAttribute]
private bool get_ShowPedanticMessages();
    [CompilerGeneratedAttribute]
private void set_ShowPedanticMessages(bool value);
    [CompilerGeneratedAttribute]
private bool get_SuppressKeepingSpecialRows();
    [CompilerGeneratedAttribute]
private void set_SuppressKeepingSpecialRows(bool value);
    [CompilerGeneratedAttribute]
private bool get_OutputAsWixout();
    [CompilerGeneratedAttribute]
private void set_OutputAsWixout(bool value);
    [CompilerGeneratedAttribute]
private TransformFlags get_ValidationFlags();
    [CompilerGeneratedAttribute]
private void set_ValidationFlags(TransformFlags value);
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    private WindowsInstallerData LoadTransform();
    private void SaveTransform(WindowsInstallerData transform);
    private WindowsInstallerData CreateTransform();
    private TableDefinitionCollection GetTableDefinitions();
    private WindowsInstallerData GetWindowsInstallerData(string path);
}
internal class WixToolset.Core.WindowsInstaller.CommandLine.ValidateSubcommand : WindowsInstallerSubcommandBase {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WixpdbPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <CubeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Ices>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <SuppressIces>k__BackingField;
    private IMessaging Messaging { get; }
    private IFileSystem FileSystem { get; }
    private string DatabasePath { get; private set; }
    private string WixpdbPath { get; private set; }
    private string IntermediateFolder { get; private set; }
    private List`1<string> CubeFiles { get; }
    private List`1<string> Ices { get; }
    private List`1<string> SuppressIces { get; }
    public ValidateSubcommand(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private string get_DatabasePath();
    [CompilerGeneratedAttribute]
private void set_DatabasePath(string value);
    [CompilerGeneratedAttribute]
private string get_WixpdbPath();
    [CompilerGeneratedAttribute]
private void set_WixpdbPath(string value);
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
private List`1<string> get_CubeFiles();
    [CompilerGeneratedAttribute]
private List`1<string> get_Ices();
    [CompilerGeneratedAttribute]
private List`1<string> get_SuppressIces();
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
}
internal class WixToolset.Core.WindowsInstaller.CommandLine.WindowsInstallerCommand : BaseCommandLineCommand {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerSubcommandBase <Subcommand>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private WindowsInstallerSubcommandBase Subcommand { get; private set; }
    public WindowsInstallerCommand(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private WindowsInstallerSubcommandBase get_Subcommand();
    [CompilerGeneratedAttribute]
private void set_Subcommand(WindowsInstallerSubcommandBase value);
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
}
internal abstract class WixToolset.Core.WindowsInstaller.CommandLine.WindowsInstallerSubcommandBase : object {
    public abstract virtual CommandLineHelp GetCommandLineHelp();
    public abstract virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    public abstract virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
}
internal class WixToolset.Core.WindowsInstaller.Decompile.Decompiler : object {
    private static Regex NullSplitter;
    private static String[] TextControlAttributes;
    private static String[] HyperlinkControlAttributes;
    private static String[] EditControlAttributes;
    private static String[] ProgressControlAttributes;
    private static String[] VolumeControlAttributes;
    private static String[] ListboxControlAttributes;
    private static String[] ListviewControlAttributes;
    private static String[] ComboboxControlAttributes;
    private static String[] RadioControlAttributes;
    private static String[] ButtonControlAttributes;
    private static String[] IconControlAttributes;
    private static String[] BitmapControlAttributes;
    private static String[] CheckboxControlAttributes;
    private XElement uiElement;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerDecompilerHelper <DecompilerHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerDecompilerExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtensionData> <ExtensionData>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolDefinitionCreator <SymbolDefinitionCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IWindowsInstallerDecompilerExtension> <ExtensionsByTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseSourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressCustomTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressDroppingEmptyTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressRelativeActionSequencing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressUI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepModularizationIds>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputType <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, WixActionSymbol> <StandardActions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compressed>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShortNames>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModularizationGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XElement> <Singletons>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XElement> <PatchTargetFiles>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IWindowsInstallerDecompilerHelper DecompilerHelper { get; }
    private IEnumerable`1<IWindowsInstallerDecompilerExtension> Extensions { get; }
    private IEnumerable`1<IExtensionData> ExtensionData { get; }
    private ISymbolDefinitionCreator SymbolDefinitionCreator { get; }
    private Dictionary`2<string, IWindowsInstallerDecompilerExtension> ExtensionsByTableName { get; }
    private string BaseSourcePath { get; }
    private bool SuppressCustomTables { get; }
    private bool SuppressDroppingEmptyTables { get; }
    private bool SuppressRelativeActionSequencing { get; }
    private bool SuppressUI { get; }
    private bool KeepModularizationIds { get; }
    private OutputType OutputType { get; private set; }
    private Dictionary`2<string, WixActionSymbol> StandardActions { get; }
    private bool Compressed { get; private set; }
    private TableDefinitionCollection TableDefinitions { get; }
    private bool ShortNames { get; private set; }
    private string ModularizationGuid { get; private set; }
    private XElement UIElement { get; }
    private Dictionary`2<string, XElement> Singletons { get; }
    private Dictionary`2<string, XElement> PatchTargetFiles { get; }
    public Decompiler(IMessaging messaging, IBackendHelper backendHelper, IWindowsInstallerDecompilerHelper decompilerHelper, IEnumerable`1<IWindowsInstallerDecompilerExtension> extensions, IEnumerable`1<IExtensionData> extensionData, ISymbolDefinitionCreator creator, string baseSourcePath, bool suppressCustomTables, bool suppressDroppingEmptyTables, bool suppressRelativeActionSequencing, bool suppressUI, bool keepModularizationIds);
    private static Decompiler();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IWindowsInstallerDecompilerHelper get_DecompilerHelper();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IWindowsInstallerDecompilerExtension> get_Extensions();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtensionData> get_ExtensionData();
    [CompilerGeneratedAttribute]
private ISymbolDefinitionCreator get_SymbolDefinitionCreator();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IWindowsInstallerDecompilerExtension> get_ExtensionsByTableName();
    [CompilerGeneratedAttribute]
private string get_BaseSourcePath();
    [CompilerGeneratedAttribute]
private bool get_SuppressCustomTables();
    [CompilerGeneratedAttribute]
private bool get_SuppressDroppingEmptyTables();
    [CompilerGeneratedAttribute]
private bool get_SuppressRelativeActionSequencing();
    [CompilerGeneratedAttribute]
private bool get_SuppressUI();
    [CompilerGeneratedAttribute]
private bool get_KeepModularizationIds();
    [CompilerGeneratedAttribute]
private OutputType get_OutputType();
    [CompilerGeneratedAttribute]
private void set_OutputType(OutputType value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, WixActionSymbol> get_StandardActions();
    [CompilerGeneratedAttribute]
private bool get_Compressed();
    [CompilerGeneratedAttribute]
private void set_Compressed(bool value);
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private bool get_ShortNames();
    [CompilerGeneratedAttribute]
private void set_ShortNames(bool value);
    [CompilerGeneratedAttribute]
private string get_ModularizationGuid();
    [CompilerGeneratedAttribute]
private void set_ModularizationGuid(string value);
    private XElement get_UIElement();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XElement> get_Singletons();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XElement> get_PatchTargetFiles();
    public XDocument Decompile(WindowsInstallerData output);
    private void AddExtensionTableDefinitions(IWindowsInstallerDecompilerExtension extension);
    internal static Nullable`1<Platform> GetPlatformFromTemplateSummaryInformation(String[] template);
    private Dictionary`2<string, List`1<XElement>> IndexTableOneToMany(IEnumerable`1<Row> rows, int column);
    private Dictionary`2<string, List`1<XElement>> IndexTableOneToMany(TableIndexedCollection tables, string tableName, int column);
    private Dictionary`2<string, List`1<XElement>> IndexTableOneToMany(Table table, int column);
    private void AddChildToParent(string parentName, XElement xChild, Row row, int column);
    private static XAttribute XAttributeIfNotNull(string attributeName, string value);
    private static XAttribute XAttributeIfNotNull(string attributeName, Row row, int column);
    private static void SetAttributeIfNotNull(XElement xElement, string attributeName, string value);
    private static void SetAttributeIfNotNull(XElement xElement, string attributeName, Nullable`1<int> value);
    private static DateTime ConvertIntegerToDateTime(int value);
    private static void SetControlAttributes(int attributes, XElement xControl);
    private void CreateActionElement(WixActionSymbol actionSymbol);
    private XElement CreateStandardActionElement(WixActionSymbol actionSymbol);
    private void SequenceStandardAction(WixActionSymbol actionSymbol, XElement xAction);
    private static void SequenceRelativeAction(WixActionSymbol actionSymbol, XElement xAction);
    private XElement EnsureProperty(string id);
    private void FinalizeDecompile(TableIndexedCollection tables);
    private void FinalizeCheckBoxTable(TableIndexedCollection tables);
    private void FinalizeComponentTable(TableIndexedCollection tables);
    private void FinalizeDialogTable(TableIndexedCollection tables);
    private void FinalizeDuplicateMoveFileTables(TableIndexedCollection tables);
    private void FinalizeFamilyFileRangesTable(TableIndexedCollection tables);
    private void FinalizeFeatureComponentsTable(TableIndexedCollection tables);
    private void FinalizeFileTable(TableIndexedCollection tables);
    private void FinalizeMIMETable(TableIndexedCollection tables);
    private void FinalizeProgIdTable(TableIndexedCollection tables);
    private void FinalizePropertyTable(TableIndexedCollection tables);
    private void FinalizeRemoveFileTable(TableIndexedCollection tables);
    private void FinalizePermissionsTable(TableIndexedCollection tables, string tableName);
    private void FinalizeLockPermissionsTable(TableIndexedCollection tables);
    private void FinalizeMsiLockPermissionsExTable(TableIndexedCollection tables);
    private static Dictionary`2<string, List`1<string>> IndexTable(Table table, int keyColumn, Nullable`1<int> dataColumn);
    private static XElement FindComplianceDrive(XElement xSearch);
    private void FinalizeSearchTables(TableIndexedCollection tables);
    private void FinalizeShortcutTable(TableIndexedCollection tables);
    private void FinalizeSequenceTables(TableIndexedCollection tables);
    private void FinalizeUpgradeTable(TableIndexedCollection tables);
    private void FinalizeVerbTable(TableIndexedCollection tables);
    private string GetSourcePath(XElement xFile);
    private void ResolveTableDependencies(string tableName, List`1<string> unsortedTableNames, HashSet`1<string> sortedTableNames);
    private HashSet`1<string> GetOrderedTableNames();
    private void InitializeDecompile(TableIndexedCollection tables, int codepage);
    private void RemoveExtensionDataFromTables(TableIndexedCollection tables);
    private bool TryGetPrimaryKeyFromSymbol(Dictionary`2<string, TableDefinition> tableDefinitionBySymbolDefinitionName, IntermediateSymbol symbol, String& tableName, String& primaryKey);
    private void DecompileTables(WindowsInstallerData output);
    private bool DecompilableTable(WindowsInstallerData output, string tableName);
    private void FinalizeSummaryInformationStream(TableIndexedCollection tables);
    private void DecompileActionTextTable(Table table);
    private void DecompileAppIdTable(Table table);
    private void DecompileBBControlTable(Table table);
    private void DecompileBillboardTable(Table table);
    private void DecompileBinaryTable(Table table);
    private void DecompileBindImageTable(Table table);
    private void DecompileClassTable(Table table);
    private void DecompileComboBoxTable(Table table);
    private void DecompileControlTable(Table table);
    private void DecompileControlConditionTable(Table table);
    private void DecompileControlEventTable(Table table);
    private void DecompileCustomTable(Table table);
    private void DecompileCreateFolderTable(Table table);
    private void DecompileCustomActionTable(Table table);
    private void DecompileCompLocatorTable(Table table);
    private void DecompileComplusTable(Table table);
    private void DecompileComponentTable(Table table);
    private void DecompileConditionTable(Table table);
    private void DecompileDialogTable(Table table);
    private void DecompileDirectoryTable(Table table);
    private void DecompileDrLocatorTable(Table table);
    private void DecompileDuplicateFileTable(Table table);
    private void DecompileEnvironmentTable(Table table);
    private void DecompileErrorTable(Table table);
    private void DecompileEventMappingTable(Table table);
    private void DecompileExtensionTable(Table table);
    private void DecompileExternalFilesTable(Table table);
    private void DecompileFeatureTable(Table table);
    private void DecompileFeatureComponentsTable(Table table);
    private void DecompileFileTable(Table table);
    private void DecompileFileSFPCatalogTable(Table table);
    private void DecompileFontTable(Table table);
    private void DecompileIconTable(Table table);
    private void DecompileImageFamiliesTable(Table table);
    private void DecompileIniFileTable(Table table);
    private void DecompileIniLocatorTable(Table table);
    private void DecompileIsolatedComponentTable(Table table);
    private void DecompileLaunchConditionTable(Table table);
    private void DecompileListBoxTable(Table table);
    private void DecompileListViewTable(Table table);
    private void DecompileLockPermissionsTable(Table table);
    private void DecompileMediaTable(Table table);
    private void DecompileMIMETable(Table table);
    private void DecompileModuleConfigurationTable(Table table);
    private void DecompileModuleDependencyTable(Table table);
    private void DecompileModuleExclusionTable(Table table);
    private void DecompileModuleIgnoreTableTable(Table table);
    private void DecompileModuleSignatureTable(Table table);
    private void DecompileModuleSubstitutionTable(Table table);
    private void DecompileMoveFileTable(Table table);
    private void DecompileMsiDigitalCertificateTable(Table table);
    private void DecompileMsiDigitalSignatureTable(Table table);
    private void DecompileMsiEmbeddedChainerTable(Table table);
    private void DecompileMsiEmbeddedUITable(Table table);
    private void DecompileMsiLockPermissionsExTable(Table table);
    private void DecompileMsiPackageCertificateTable(Table table);
    private void DecompileMsiPatchCertificateTable(Table table);
    private void AddCertificates(Table table, XElement parent);
    private void DecompileMsiShortcutPropertyTable(Table table);
    private void DecompileODBCAttributeTable(Table table);
    private void DecompileODBCDataSourceTable(Table table);
    private void DecompileODBCDriverTable(Table table);
    private void DecompileODBCSourceAttributeTable(Table table);
    private void DecompileODBCTranslatorTable(Table table);
    private void DecompilePatchMetadataTable(Table table);
    private void DecompilePatchSequenceTable(Table table);
    private void DecompileProgIdTable(Table table);
    private void DecompilePropertiesTable(Table table);
    private void DecompilePropertyTable(Table table);
    private void DecompilePublishComponentTable(Table table);
    private void DecompileRadioButtonTable(Table table);
    private void DecompileRegistryTable(Table table);
    private void DecompileRegLocatorTable(Table table);
    private void DecompileRemoveFileTable(Table table);
    private void DecompileRemoveIniFileTable(Table table);
    private void DecompileRemoveRegistryTable(Table table);
    private void DecompileReserveCostTable(Table table);
    private void DecompileSelfRegTable(Table table);
    private void DecompileServiceControlTable(Table table);
    private void DecompileServiceInstallTable(Table table);
    private void DecompileSFPCatalogTable(Table table);
    private void DecompileShortcutTable(Table table);
    private void DecompileSignatureTable(Table table);
    private void DecompileTargetFiles_OptionalDataTable(Table table);
    private void DecompileTargetImagesTable(Table table);
    private void DecompileTextStyleTable(Table table);
    private void DecompileTypeLibTable(Table table);
    private void DecompileUpgradeTable(Table table);
    private void DecompileUpgradedFiles_OptionalDataTable(Table table);
    private void DecompileUpgradedFilesToIgnoreTable(Table table);
    private void DecompileUpgradedImagesTable(Table table);
    private static void AddSymbolPaths(Row row, int column, XElement xParent);
    private void DecompileUITextTable(Table table);
    private void DecompileVerbTable(Table table);
    private bool GetRegistryRootType(SourceLineNumber sourceLineNumbers, string tableName, Field field, String& registryRootType);
    private void SetPrimaryFeature(Row row, int featureColumnIndex, int componentColumnIndex);
    private static void AssignActionSequence(WixActionSymbol actionSymbol, XElement xAction);
    private static string DetermineMajorUpgradeScheduling(TableIndexedCollection tables);
}
internal static class WixToolset.Core.WindowsInstaller.Decompile.Names : object {
    public static XNamespace WxsNamespace;
    public static XName WixElement;
    public static XName PackageElement;
    public static XName ModuleElement;
    public static XName PatchCreationElement;
    public static XName SummaryInformationElement;
    public static XName CustomElement;
    public static XName ShowElement;
    public static XName AdminExecuteSequenceElement;
    public static XName AdminUISequenceElement;
    public static XName AdvertiseExecuteSequenceElement;
    public static XName InstallExecuteSequenceElement;
    public static XName InstallUISequenceElement;
    public static XName AppSearchElement;
    public static XName PropertyElement;
    public static XName ProtectRangeElement;
    public static XName ProtectFileElement;
    public static XName FileElement;
    public static XName EnsureTableElement;
    public static XName PatchInformationElement;
    public static XName ProgressTextElement;
    public static XName UIElement;
    public static XName AppIdElement;
    public static XName ControlElement;
    public static XName BillboardElement;
    public static XName BillboardActionElement;
    public static XName BinaryElement;
    public static XName ClassElement;
    public static XName FileTypeMaskElement;
    public static XName ComboBoxElement;
    public static XName ListItemElement;
    public static XName ConditionElement;
    public static XName PublishElement;
    public static XName CustomTableElement;
    public static XName ColumnElement;
    public static XName RowElement;
    public static XName DataElement;
    public static XName CreateFolderElement;
    public static XName CustomActionElement;
    public static XName ComponentSearchElement;
    public static XName ComponentElement;
    public static XName LevelElement;
    public static XName DialogElement;
    public static XName StandardDirectoryElement;
    public static XName DirectoryElement;
    public static XName DirectorySearchElement;
    public static XName CopyFileElement;
    public static XName EnvironmentElement;
    public static XName ErrorElement;
    public static XName SubscribeElement;
    public static XName ExtensionElement;
    public static XName ExternalFileElement;
    public static XName SymbolPathElement;
    public static XName IgnoreRangeElement;
    public static XName FeatureElement;
    public static XName ComponentRefElement;
    public static XName SFPFileElement;
    public static XName IconElement;
    public static XName FamilyElement;
    public static XName IniFileElement;
    public static XName IniFileSearchElement;
    public static XName IsolateComponentElement;
    public static XName LaunchElement;
    public static XName ListBoxElement;
    public static XName ListViewElement;
    public static XName PermissionElement;
    public static XName MediaElement;
    public static XName MIMEElement;
    public static XName ConfigurationElement;
    public static XName DependencyElement;
    public static XName ExclusionElement;
    public static XName IgnoreTableElement;
    public static XName SubstitutionElement;
    public static XName DigitalCertificateElement;
    public static XName DigitalSignatureElement;
    public static XName EmbeddedChainerElement;
    public static XName EmbeddedUIElement;
    public static XName EmbeddedUIResourceElement;
    public static XName PermissionExElement;
    public static XName PackageCertificatesElement;
    public static XName PatchCertificatesElement;
    public static XName ShortcutPropertyElement;
    public static XName ODBCDataSourceElement;
    public static XName ODBCDriverElement;
    public static XName ODBCTranslatorElement;
    public static XName PatchMetadataElement;
    public static XName OptimizeCustomActionsElement;
    public static XName CustomPropertyElement;
    public static XName PatchSequenceElement;
    public static XName ProgIdElement;
    public static XName ReplacePatchElement;
    public static XName TargetProductCodeElement;
    public static XName PatchPropertyElement;
    public static XName CategoryElement;
    public static XName RadioButtonElement;
    public static XName RadioButtonGroupElement;
    public static XName RegistryKeyElement;
    public static XName RegistryValueElement;
    public static XName MultiStringElement;
    public static XName RegistrySearchElement;
    public static XName RemoveFolderElement;
    public static XName RemoveFileElement;
    public static XName RemoveRegistryKeyElement;
    public static XName RemoveRegistryValueElement;
    public static XName ReserveCostElement;
    public static XName ServiceControlElement;
    public static XName ServiceArgumentElement;
    public static XName ServiceInstallElement;
    public static XName ServiceDependencyElement;
    public static XName SFPCatalogElement;
    public static XName ShortcutElement;
    public static XName FileSearchElement;
    public static XName TargetFileElement;
    public static XName TargetImageElement;
    public static XName TextStyleElement;
    public static XName TypeLibElement;
    public static XName UpgradeElement;
    public static XName UpgradeVersionElement;
    public static XName UpgradeFileElement;
    public static XName UpgradeImageElement;
    public static XName UITextElement;
    public static XName VerbElement;
    public static XName ComplianceCheckElement;
    public static XName FileSearchRefElement;
    public static XName ComplianceDriveElement;
    public static XName DirectorySearchRefElement;
    public static XName RegistrySearchRefElement;
    public static XName MajorUpgradeElement;
    private static Names();
}
public class WixToolset.Core.WindowsInstaller.Differ : object {
    private IMessaging messaging;
    private SummaryInformationStreams transformSummaryInfo;
    [CompilerGeneratedAttribute]
private bool <ShowPedanticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressKeepingSpecialRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveUnchangedRows>k__BackingField;
    public bool ShowPedanticMessages { get; public set; }
    public bool SuppressKeepingSpecialRows { get; public set; }
    public bool PreserveUnchangedRows { get; public set; }
    public Differ(IMessaging messaging);
    [CompilerGeneratedAttribute]
public bool get_ShowPedanticMessages();
    [CompilerGeneratedAttribute]
public void set_ShowPedanticMessages(bool value);
    [CompilerGeneratedAttribute]
public bool get_SuppressKeepingSpecialRows();
    [CompilerGeneratedAttribute]
public void set_SuppressKeepingSpecialRows(bool value);
    [CompilerGeneratedAttribute]
public bool get_PreserveUnchangedRows();
    [CompilerGeneratedAttribute]
public void set_PreserveUnchangedRows(bool value);
    public WindowsInstallerData Diff(WindowsInstallerData targetOutput, WindowsInstallerData updatedOutput, TransformFlags validationFlags);
    private void AddIndexedRow(IDictionary`2<string, Row> index, Row row);
    private Row CompareRows(Table targetTable, Row targetRow, Row updatedRow, RowOperation& operation, Boolean& keepRow);
    private List`1<Row> CompareTables(WindowsInstallerData targetOutput, Table targetTable, Table updatedTable, TableOperation& operation);
    private void IndexPrimaryKeys(Table targetTable, SortedDictionary`2<string, Row> targetPrimaryKeys, Table updatedTable, SortedDictionary`2<string, Row> updatedPrimaryKeys);
    private void UpdateTransformSummaryInformationTable(Table summaryInfoTable, TransformFlags validationFlags);
}
internal class WixToolset.Core.WindowsInstaller.ExtensibilityServices.FileFacade : object {
    [CompilerGeneratedAttribute]
private Identifier <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ComponentRef>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DiskId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PatchGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Compressed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Uncompressed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private MsiFileHashSymbol <MsiFileHashSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<MsiAssemblyNameSymbol> <AssemblyNameSymbols>k__BackingField;
    public string Id { get; }
    public Identifier Identifier { get; }
    public string ComponentRef { get; }
    public int DiskId { get; public set; }
    public string FileName { get; }
    public int FileSize { get; public set; }
    public string Language { get; public set; }
    public Nullable`1<int> PatchGroup { get; }
    public int Sequence { get; public set; }
    public SourceLineNumber SourceLineNumber { get; }
    public string SourcePath { get; }
    public bool Compressed { get; }
    public bool Uncompressed { get; }
    public string Version { get; public set; }
    public MsiFileHashSymbol MsiFileHashSymbol { get; public set; }
    public ICollection`1<MsiAssemblyNameSymbol> AssemblyNameSymbols { get; }
    public FileFacade(FileSymbol file);
    public FileFacade(FileRow row);
    public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual Identifier get_Identifier();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ComponentRef();
    [CompilerGeneratedAttribute]
public sealed virtual int get_DiskId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DiskId(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_FileName();
    [CompilerGeneratedAttribute]
public sealed virtual int get_FileSize();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileSize(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Language();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Language(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PatchGroup();
    [CompilerGeneratedAttribute]
public sealed virtual int get_Sequence();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Sequence(int value);
    [CompilerGeneratedAttribute]
public sealed virtual SourceLineNumber get_SourceLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourcePath();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Compressed();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Uncompressed();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Version();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public sealed virtual MsiFileHashSymbol get_MsiFileHashSymbol();
    [CompilerGeneratedAttribute]
public sealed virtual void set_MsiFileHashSymbol(MsiFileHashSymbol value);
    [CompilerGeneratedAttribute]
public sealed virtual ICollection`1<MsiAssemblyNameSymbol> get_AssemblyNameSymbols();
}
internal class WixToolset.Core.WindowsInstaller.ExtensibilityServices.WindowsInstallerBackendHelper : object {
    private IBackendHelper backendHelper;
    public WindowsInstallerBackendHelper(IServiceProvider serviceProvider);
    public sealed virtual IFileFacade CreateFileFacade(FileSymbol file);
    public sealed virtual IFileFacade CreateFileFacade(FileRow fileRow);
    public sealed virtual IFileTransfer CreateFileTransfer(string source, string destination, bool move, SourceLineNumber sourceLineNumbers);
    public sealed virtual string CreateGuid();
    public sealed virtual string CreateGuid(Guid namespaceGuid, string value);
    public sealed virtual IResolvedDirectory CreateResolvedDirectory(string directoryParent, string name);
    public sealed virtual IReadOnlyList`1<ITrackedFile> ExtractEmbeddedFiles(IEnumerable`1<IExpectedExtractFile> embeddedFiles);
    public sealed virtual string GenerateIdentifier(string prefix, String[] args);
    public sealed virtual int GetValidCodePage(string value, bool allowNoChange, bool onlyAnsi, SourceLineNumber sourceLineNumbers);
    public sealed virtual string GetMsiFileName(string value, bool source, bool longName);
    public sealed virtual bool IsValidBinderVariable(string variable);
    public sealed virtual bool IsValidFourPartVersion(string version);
    public sealed virtual bool IsValidIdentifier(string id);
    public sealed virtual bool IsValidMsiProductVersion(string version);
    public sealed virtual bool IsValidWixVersion(string version);
    public sealed virtual bool IsValidLongFilename(string filename, bool allowWildcards, bool allowRelative);
    public sealed virtual bool IsValidShortFilename(string filename, bool allowWildcards);
    public sealed virtual void ResolveDelayedFields(IEnumerable`1<IDelayedField> delayedFields, Dictionary`2<string, string> variableCache);
    public sealed virtual String[] SplitMsiFileName(string value);
    public sealed virtual bool TryParseFourPartVersion(string version, String& parsedVersion);
    public sealed virtual bool TryParseMsiProductVersion(string version, bool strict, String& parsedVersion);
    public sealed virtual ITrackedFile TrackFile(string path, TrackedFileType type, SourceLineNumber sourceLineNumbers);
    public sealed virtual Row CreateRow(IntermediateSection section, IntermediateSymbol symbol, WindowsInstallerData data, TableDefinition tableDefinition);
    public sealed virtual bool TryAddSymbolToMatchingTableDefinitions(IntermediateSection section, IntermediateSymbol symbol, WindowsInstallerData data, TableDefinitionCollection tableDefinitions);
}
internal class WixToolset.Core.WindowsInstaller.ExtensibilityServices.WindowsInstallerDecompilerHelper : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XElement> <IndexedElements>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <RootElement>k__BackingField;
    private Dictionary`2<string, XElement> IndexedElements { get; }
    public XElement RootElement { get; public set; }
    public WindowsInstallerDecompilerHelper(IServiceProvider _);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, XElement> get_IndexedElements();
    [CompilerGeneratedAttribute]
public sealed virtual XElement get_RootElement();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RootElement(XElement value);
    public sealed virtual XElement AddElementToRoot(string name, Object[] content);
    public sealed virtual XElement AddElementToRoot(XName name, Object[] content);
    public sealed virtual XElement AddElementToRoot(XElement element);
    public sealed virtual XElement CreateElement(string name, Object[] content);
    public sealed virtual XElement GetIndexedElement(Row row);
    public sealed virtual XElement GetIndexedElement(string table, string primaryKey);
    public sealed virtual XElement GetIndexedElement(string table, string primaryKey1, string primaryKey2);
    public sealed virtual XElement GetIndexedElement(string table, string primaryKey1, string primaryKey2, string primaryKey3);
    public sealed virtual XElement GetIndexedElement(string table, String[] primaryKeys);
    public sealed virtual void IndexElement(Row row, XElement element);
    public sealed virtual void IndexElement(string table, string primaryKey, XElement element);
    public sealed virtual void IndexElement(string table, string primaryKey1, string primaryKey2, XElement element);
    public sealed virtual void IndexElement(string table, string primaryKey1, string primaryKey2, string primaryKey3, XElement element);
    public sealed virtual void IndexElement(string table, String[] primaryKeys, XElement element);
    public sealed virtual bool TryGetIndexedElement(Row row, XElement& element);
    public sealed virtual bool TryGetIndexedElement(string table, string primaryKey, XElement& element);
    public sealed virtual bool TryGetIndexedElement(string table, string primaryKey1, string primaryKey2, XElement& element);
    public sealed virtual bool TryGetIndexedElement(string table, string primaryKey1, string primaryKey2, string primaryKey3, XElement& element);
    public sealed virtual bool TryGetIndexedElement(string table, String[] primaryKeys, XElement& element);
}
internal class WixToolset.Core.WindowsInstaller.GenerateTransformCommand : object {
    private IMessaging messaging;
    private SummaryInformationStreams transformSummaryInfo;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <TargetOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <UpdatedOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private PatchFilterMap <PatchFilterMap>k__BackingField;
    [CompilerGeneratedAttribute]
private TransformFlags <ValidationFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPedanticMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressKeepingSpecialRows>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PreserveUnchangedRows>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Transform>k__BackingField;
    private WindowsInstallerData TargetOutput { get; }
    private WindowsInstallerData UpdatedOutput { get; }
    public PatchFilterMap PatchFilterMap { get; }
    private TransformFlags ValidationFlags { get; }
    private bool ShowPedanticMessages { get; }
    private bool SuppressKeepingSpecialRows { get; }
    private bool PreserveUnchangedRows { get; }
    public WindowsInstallerData Transform { get; private set; }
    public GenerateTransformCommand(IMessaging messaging, WindowsInstallerData targetOutput, WindowsInstallerData updatedOutput, PatchFilterMap patchFilterMap, bool preserveUnchangedRows, bool showPedanticMessages);
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_TargetOutput();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_UpdatedOutput();
    [CompilerGeneratedAttribute]
public PatchFilterMap get_PatchFilterMap();
    [CompilerGeneratedAttribute]
private TransformFlags get_ValidationFlags();
    [CompilerGeneratedAttribute]
private bool get_ShowPedanticMessages();
    [CompilerGeneratedAttribute]
private bool get_SuppressKeepingSpecialRows();
    [CompilerGeneratedAttribute]
private bool get_PreserveUnchangedRows();
    [CompilerGeneratedAttribute]
public WindowsInstallerData get_Transform();
    [CompilerGeneratedAttribute]
private void set_Transform(WindowsInstallerData value);
    public WindowsInstallerData Execute();
    private void AddIndexedRow(Dictionary`2<string, Row> index, Row row);
    private bool CompareRows(Table targetTable, Row targetRow, Row updatedRow, Row& comparedRow);
    private List`1<Row> CompareTables(WindowsInstallerData targetOutput, Table targetTable, Table updatedTable, TableOperation& operation);
    private void IndexPrimaryKeys(Table targetTable, Dictionary`2<string, Row> targetPrimaryKeys, Table updatedTable, Dictionary`2<string, Row> updatedPrimaryKeys);
    private void UpdateTransformSummaryInformationTable(Table summaryInfoTable, TransformFlags validationFlags);
}
internal class WixToolset.Core.WindowsInstaller.Inscribe.InscribeMsiPackageCommand : object {
    [CompilerGeneratedAttribute]
private string <InputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper <WindowsInstallerBackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    private string InputPath { get; }
    private string IntermediateFolder { get; }
    private string OutputPath { get; }
    private IMessaging Messaging { get; }
    private IFileSystem FileSystem { get; }
    private IWindowsInstallerBackendHelper WindowsInstallerBackendHelper { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    public InscribeMsiPackageCommand(IServiceProvider serviceProvider, string inputPath, string intermediateFolder, string outputPath);
    [CompilerGeneratedAttribute]
private string get_InputPath();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IWindowsInstallerBackendHelper get_WindowsInstallerBackendHelper();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    public bool Execute();
}
internal class WixToolset.Core.WindowsInstaller.MsiBackend : object {
    public sealed virtual IBindResult Bind(IBindContext context);
}
internal class WixToolset.Core.WindowsInstaller.MsmBackend : object {
    public sealed virtual IBindResult Bind(IBindContext context);
}
internal class WixToolset.Core.WindowsInstaller.MspBackend : object {
    public sealed virtual IBindResult Bind(IBindContext context);
}
internal class WixToolset.Core.WindowsInstaller.RowDictionary`1 : Dictionary`2<string, T> {
    public RowDictionary`1(Table table);
    public void Add(T row);
    public T Get(int key);
    public T Get(string key);
}
internal class WixToolset.Core.WindowsInstaller.Unbind.ExtractCabinetsCommand : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, MediaRow> <ExtractedFileIdsWithMediaRow>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Output>k__BackingField;
    [CompilerGeneratedAttribute]
private Database <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InputFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TreatOutputAsModule>k__BackingField;
    public Dictionary`2<string, MediaRow> ExtractedFileIdsWithMediaRow { get; private set; }
    private IFileSystem FileSystem { get; }
    private WindowsInstallerData Output { get; }
    private Database Database { get; }
    private string InputFilePath { get; }
    private string ExportBasePath { get; }
    private string IntermediateFolder { get; }
    public bool TreatOutputAsModule { get; }
    public ExtractCabinetsCommand(IFileSystem fileSystem, WindowsInstallerData output, Database database, string inputFilePath, string exportBasePath, string intermediateFolder, bool treatOutputAsModule);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MediaRow> get_ExtractedFileIdsWithMediaRow();
    [CompilerGeneratedAttribute]
private void set_ExtractedFileIdsWithMediaRow(Dictionary`2<string, MediaRow> value);
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Output();
    [CompilerGeneratedAttribute]
private Database get_Database();
    [CompilerGeneratedAttribute]
private string get_InputFilePath();
    [CompilerGeneratedAttribute]
private string get_ExportBasePath();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public bool get_TreatOutputAsModule();
    public void Execute();
}
internal class WixToolset.Core.WindowsInstaller.Unbind.UnbindDatabaseCommand : object {
    private static Regex Modularization;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private Database <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputType <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractFilesFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableDemodularization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipSummaryInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AdminImage>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ExportedFiles>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private IPathResolver PathResolver { get; }
    private Database Database { get; private set; }
    private string DatabasePath { get; }
    private OutputType OutputType { get; }
    private string ExportBasePath { get; }
    private string ExtractFilesFolder { get; }
    private string IntermediateFolder { get; }
    private bool EnableDemodularization { get; }
    private bool SkipSummaryInfo { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    public bool AdminImage { get; private set; }
    public WindowsInstallerData Data { get; private set; }
    public IEnumerable`1<string> ExportedFiles { get; private set; }
    public UnbindDatabaseCommand(IMessaging messaging, IBackendHelper backendHelper, IFileSystem fileSystem, IPathResolver pathResolver, string databasePath, Database database, OutputType outputType, string exportBasePath, string extractFilesFolder, string intermediateFolder, bool enableDemodularization, bool skipSummaryInfo);
    private static UnbindDatabaseCommand();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private Database get_Database();
    [CompilerGeneratedAttribute]
private void set_Database(Database value);
    [CompilerGeneratedAttribute]
private string get_DatabasePath();
    [CompilerGeneratedAttribute]
private OutputType get_OutputType();
    [CompilerGeneratedAttribute]
private string get_ExportBasePath();
    [CompilerGeneratedAttribute]
private string get_ExtractFilesFolder();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private bool get_EnableDemodularization();
    [CompilerGeneratedAttribute]
private bool get_SkipSummaryInfo();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
public bool get_AdminImage();
    [CompilerGeneratedAttribute]
private void set_AdminImage(bool value);
    [CompilerGeneratedAttribute]
public WindowsInstallerData get_Data();
    [CompilerGeneratedAttribute]
private void set_Data(WindowsInstallerData value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ExportedFiles();
    [CompilerGeneratedAttribute]
private void set_ExportedFiles(IEnumerable`1<string> value);
    public WindowsInstallerData Execute();
    private int GetCodePage();
    private string ProcessTables(WindowsInstallerData output, List`1<string> exportedFiles);
    private SummaryInformationBits ProcessSummaryInfo(WindowsInstallerData output, string modularizationGuid);
    private TableDefinition GetTableDefinition(string tableName, View tableView, View validationView);
    private void UpdateUnrealFileColumns(string databaseFile, WindowsInstallerData output, SummaryInformationBits summaryInformation, List`1<string> exportedFiles);
    private void UpdateFileRowsDiskId(WindowsInstallerData output, IList`1<Row> fileRows);
    private void UpdateFileRowsSource(string databasePath, WindowsInstallerData output, IList`1<Row> fileRows, SummaryInformationBits summaryInformation, List`1<string> exportedFiles);
    private string GetAdminFullPath(string directory, Hashtable directoryDirectoryParentIndex, Hashtable directorySourceNameIndex, Hashtable directoryFullPathIndex);
    private string GetAdminSourceName(string value);
}
internal class WixToolset.Core.WindowsInstaller.Unbind.UnbindTransformCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IPathResolver <PathResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private FileSystemManager <FileSystemManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransformFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExportBasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private TableDefinitionCollection <TableDefinitions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmptyFile>k__BackingField;
    private IMessaging Messaging { get; }
    private IBackendHelper BackendHelper { get; }
    private IFileSystem FileSystem { get; }
    private IPathResolver PathResolver { get; }
    private FileSystemManager FileSystemManager { get; }
    private string TransformFile { get; }
    private string ExportBasePath { get; }
    private string IntermediateFolder { get; }
    private TableDefinitionCollection TableDefinitions { get; }
    private string EmptyFile { get; private set; }
    public UnbindTransformCommand(IMessaging messaging, IBackendHelper backendHelper, IFileSystem fileSystem, IPathResolver pathResolver, FileSystemManager fileSystemManager, string transformFile, string exportBasePath, string intermediateFolder);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IPathResolver get_PathResolver();
    [CompilerGeneratedAttribute]
private FileSystemManager get_FileSystemManager();
    [CompilerGeneratedAttribute]
private string get_TransformFile();
    [CompilerGeneratedAttribute]
private string get_ExportBasePath();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private TableDefinitionCollection get_TableDefinitions();
    [CompilerGeneratedAttribute]
private string get_EmptyFile();
    [CompilerGeneratedAttribute]
private void set_EmptyFile(string value);
    public WindowsInstallerData Execute();
    private WindowsInstallerData CreateSchemaData(string schemaDatabasePath);
    private Table OpenTransformViewForAddedAndModifiedRows(string schemaDatabasePath);
    private Dictionary`2<string, Row> CreatePlaceholdersForModifiedRowsAndIndexAddedRows(WindowsInstallerData schemaData, Table transformViewTable);
    private void PopulateTransformFromView(string schemaDatabasePath, WindowsInstallerData transform, Table transformViewTable, Dictionary`2<string, Row> addedRows);
    private Database ApplyTransformToSchemaDatabase(string schemaDatabasePath, TransformErrorConditions transformConditions);
    private Row CreateRow(Table table, string primaryKeys, bool setRequiredFields);
    private void GenerateDatabase(WindowsInstallerData data);
}
internal class WixToolset.Core.WindowsInstaller.Validate.ValidateDatabaseCommand : object {
    private static String[] WellKnownSuppressedIces;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITrackedFile> <TrackedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DatabasePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CubeFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Ices>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <SuppressedIces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <OutputSourceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SourceLineNumber> <SourceLineNumbersByTablePrimaryKey>k__BackingField;
    public IEnumerable`1<ITrackedFile> TrackedFiles { get; private set; }
    public bool EncounteredError { get; }
    private IMessaging Messaging { get; }
    private IFileSystem FileSystem { get; }
    private WindowsInstallerData Data { get; }
    private string DatabasePath { get; }
    private IEnumerable`1<string> CubeFiles { get; }
    private IEnumerable`1<string> Ices { get; }
    private IEnumerable`1<string> SuppressedIces { get; }
    private string IntermediateFolder { get; }
    private SourceLineNumber OutputSourceLineNumber { get; private set; }
    private Dictionary`2<string, SourceLineNumber> SourceLineNumbersByTablePrimaryKey { get; private set; }
    public ValidateDatabaseCommand(IMessaging messaging, IFileSystem fileSystem, string intermediateFolder, string databasePath, WindowsInstallerData data, IEnumerable`1<string> cubeFiles, IEnumerable`1<string> ices, IEnumerable`1<string> suppressedIces);
    private static ValidateDatabaseCommand();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
private void set_TrackedFiles(IEnumerable`1<ITrackedFile> value);
    public sealed virtual bool get_EncounteredError();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private WindowsInstallerData get_Data();
    [CompilerGeneratedAttribute]
private string get_DatabasePath();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> get_CubeFiles();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> get_Ices();
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> get_SuppressedIces();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private SourceLineNumber get_OutputSourceLineNumber();
    [CompilerGeneratedAttribute]
private void set_OutputSourceLineNumber(SourceLineNumber value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, SourceLineNumber> get_SourceLineNumbersByTablePrimaryKey();
    [CompilerGeneratedAttribute]
private void set_SourceLineNumbersByTablePrimaryKey(Dictionary`2<string, SourceLineNumber> value);
    public void Execute();
    private void LogValidationMessage(ValidationMessage message);
    public sealed virtual bool ValidationMessage(ValidationMessage message);
    public sealed virtual void WriteMessage(Message message);
    private SourceLineNumber GetSourceLineNumbers(string tableName, IEnumerable`1<string> primaryKeys);
}
internal static class WixToolset.Core.WindowsInstaller.WindowsInstallerBackendErrors : object {
    public static Message CannotLoadWixoutAsTransform(SourceLineNumber sourceLineNumbers, Exception exception);
    internal static Message ExceededMaximumAllowedComponentsInMsi(int maximumAllowedComponentsInMsi, int componentCount);
    internal static Message ExceededMaximumAllowedFeatureDepthInMsi(SourceLineNumber sourceLineNumbers, int maximumAllowedFeatureDepthInMsi, string featureId, int featureDepth);
    public static Message InvalidModuleVersion(SourceLineNumber originalLineNumber, string version);
    public static Message InvalidWindowsInstallerWixpdbForValidation(string wixpdbPath);
    public static Message UnknownDecompileType(string decompileType, string filePath);
    public static Message UnknownValidationTargetFileExtension(string fileExtension);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal class WixToolset.Core.WindowsInstaller.WindowsInstallerBackendFactory : object {
    public sealed virtual bool TryCreateBackend(string outputType, string outputFile, IBackend& backend);
}
internal static class WixToolset.Core.WindowsInstaller.WindowsInstallerBackendWarnings : object {
    internal static Message LongPatchBaselineIdTrimmed(SourceLineNumber sourceLineNumbers, string baseTransformName, string trimmedTransformName);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal class WixToolset.Core.WindowsInstaller.WindowsInstallerDecompileContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DecompilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputType <DecompileType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IWindowsInstallerDecompilerExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IExtensionData> <ExtensionData>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolDefinitionCreator <SymbolDefinitionCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtractFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CabinetExtractFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseSourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAdminImage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressCustomTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressDroppingEmptyTables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressRelativeActionSequencing>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressExtractCabinets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressUI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <KeepModularizationIds>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public string DecompilePath { get; public set; }
    public OutputType DecompileType { get; public set; }
    public IReadOnlyCollection`1<IWindowsInstallerDecompilerExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IExtensionData> ExtensionData { get; public set; }
    public ISymbolDefinitionCreator SymbolDefinitionCreator { get; public set; }
    public string ExtractFolder { get; public set; }
    public string CabinetExtractFolder { get; public set; }
    public string BaseSourcePath { get; public set; }
    public string IntermediateFolder { get; public set; }
    public bool IsAdminImage { get; public set; }
    public string OutputPath { get; public set; }
    public bool SuppressCustomTables { get; public set; }
    public bool SuppressDroppingEmptyTables { get; public set; }
    public bool SuppressRelativeActionSequencing { get; public set; }
    public bool SuppressExtractCabinets { get; public set; }
    public bool SuppressUI { get; public set; }
    public bool KeepModularizationIds { get; public set; }
    internal WindowsInstallerDecompileContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DecompilePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DecompilePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual OutputType get_DecompileType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DecompileType(OutputType value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IWindowsInstallerDecompilerExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<IWindowsInstallerDecompilerExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IExtensionData> get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(IReadOnlyCollection`1<IExtensionData> value);
    [CompilerGeneratedAttribute]
public sealed virtual ISymbolDefinitionCreator get_SymbolDefinitionCreator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolDefinitionCreator(ISymbolDefinitionCreator value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExtractFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtractFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CabinetExtractFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CabinetExtractFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_BaseSourcePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BaseSourcePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAdminImage();
    [CompilerGeneratedAttribute]
public void set_IsAdminImage(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SuppressCustomTables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressCustomTables(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SuppressDroppingEmptyTables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressDroppingEmptyTables(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SuppressRelativeActionSequencing();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressRelativeActionSequencing(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SuppressExtractCabinets();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressExtractCabinets(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SuppressUI();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressUI(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_KeepModularizationIds();
    [CompilerGeneratedAttribute]
public sealed virtual void set_KeepModularizationIds(bool value);
}
internal class WixToolset.Core.WindowsInstaller.WindowsInstallerDecompiler : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionManager <ExtensionManager>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private IExtensionManager ExtensionManager { get; }
    internal WindowsInstallerDecompiler(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IExtensionManager get_ExtensionManager();
    public sealed virtual IWindowsInstallerDecompileResult Decompile(IWindowsInstallerDecompileContext context);
    private IWindowsInstallerDecompileResult Execute(IWindowsInstallerDecompileContext context, IWindowsInstallerDecompilerHelper decompilerHelper);
    private IWindowsInstallerDecompileResult DecompileDatabase(IWindowsInstallerDecompileContext context, IWindowsInstallerDecompilerHelper decompilerHelper, IWindowsInstallerBackendHelper backendHelper, IFileSystem fileSystem, IPathResolver pathResolver);
    private IWindowsInstallerDecompileResult DecompileTransform(IWindowsInstallerDecompileContext context, IWindowsInstallerBackendHelper backendHelper, IFileSystem fileSystem, IPathResolver pathResolver);
    private static Nullable`1<Platform> GetPlatformFromOutput(WindowsInstallerData output);
}
internal class WixToolset.Core.WindowsInstaller.WindowsInstallerDecompileResult : object {
    [CompilerGeneratedAttribute]
private WindowsInstallerData <Data>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <ExtractedFilePaths>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Platform> <Platform>k__BackingField;
    public WindowsInstallerData Data { get; public set; }
    public XDocument Document { get; public set; }
    public IList`1<string> ExtractedFilePaths { get; public set; }
    public Nullable`1<Platform> Platform { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual WindowsInstallerData get_Data();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Data(WindowsInstallerData value);
    [CompilerGeneratedAttribute]
public sealed virtual XDocument get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Document(XDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<string> get_ExtractedFilePaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtractedFilePaths(IList`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<Platform> get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Platform(Nullable`1<Platform> value);
}
internal class WixToolset.Core.WindowsInstaller.WindowsInstallerExtensionCommandLine : BaseExtensionCommandLine {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public WindowsInstallerExtensionCommandLine(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual bool TryParseCommand(ICommandLineParser parser, string argument, ICommandLineCommand& command);
}
internal class WixToolset.Core.WindowsInstaller.WindowsInstallerExtensionFactory : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    public WindowsInstallerExtensionFactory(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    public sealed virtual bool TryCreateExtension(Type extensionType, Object& extension);
}
[ExtensionAttribute]
public static class WixToolset.Core.WindowsInstaller.WixToolsetCoreServiceProviderExtensions : object {
    [ExtensionAttribute]
public static IWixToolsetCoreServiceProvider AddWindowsInstallerBackend(IWixToolsetCoreServiceProvider coreProvider);
    private static void AddServices(IWixToolsetCoreServiceProvider coreProvider);
}
public class WixToolset.Melter : object {
}
public class WixToolset.MelterCore : object {
}
