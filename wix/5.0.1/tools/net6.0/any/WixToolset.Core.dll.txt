internal class ThisAssembly : object {
}
internal class WixToolset.Core.AssignDefaultFeatureCommand : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IntermediateSection> <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private FindEntrySectionAndLoadSymbolsCommand <Find>k__BackingField;
    public IEnumerable`1<IntermediateSection> Sections { get; }
    public FindEntrySectionAndLoadSymbolsCommand Find { get; }
    public AssignDefaultFeatureCommand(FindEntrySectionAndLoadSymbolsCommand find, List`1<IntermediateSection> sections);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IntermediateSection> get_Sections();
    [CompilerGeneratedAttribute]
public FindEntrySectionAndLoadSymbolsCommand get_Find();
    public void Execute();
}
internal class WixToolset.Core.Bind.DelayedField : object {
    [CompilerGeneratedAttribute]
private IntermediateSymbol <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateField <Field>k__BackingField;
    public IntermediateSymbol Symbol { get; }
    public IntermediateField Field { get; }
    public DelayedField(IntermediateSymbol symbol, IntermediateField field);
    [CompilerGeneratedAttribute]
public sealed virtual IntermediateSymbol get_Symbol();
    [CompilerGeneratedAttribute]
public sealed virtual IntermediateField get_Field();
}
internal class WixToolset.Core.Bind.ExpectedExtractFile : object {
    [CompilerGeneratedAttribute]
private Uri <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmbeddedFileId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    public Uri Uri { get; public set; }
    public string EmbeddedFileId { get; public set; }
    public string OutputPath { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_Uri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Uri(Uri value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_EmbeddedFileId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EmbeddedFileId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
}
internal class WixToolset.Core.Bind.ExtractEmbeddedFiles : object {
    private Dictionary`2<Uri, SortedList`2<string, string>> filesWithEmbeddedFiles;
    public IEnumerable`1<Uri> Uris { get; }
    public IEnumerable`1<Uri> get_Uris();
    public string AddEmbeddedFileToExtract(Uri uri, string embeddedFileId, string extractFolder);
    public IReadOnlyList`1<ExpectedExtractFile> GetExpectedEmbeddedFiles();
    public IEnumerable`1<ExpectedExtractFile> GetExtractFilesForUri(Uri uri);
    private string HashUri(string uri);
}
internal class WixToolset.Core.Bind.ExtractEmbeddedFilesCommand : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ITrackedFile> <TrackedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IBackendHelper <BackendHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExpectedExtractFile> <FilesWithEmbeddedFiles>k__BackingField;
    public IReadOnlyList`1<ITrackedFile> TrackedFiles { get; private set; }
    private IBackendHelper BackendHelper { get; }
    private IEnumerable`1<IExpectedExtractFile> FilesWithEmbeddedFiles { get; }
    public ExtractEmbeddedFilesCommand(IBackendHelper backendHelper, IEnumerable`1<IExpectedExtractFile> embeddedFiles);
    [CompilerGeneratedAttribute]
public IReadOnlyList`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
private void set_TrackedFiles(IReadOnlyList`1<ITrackedFile> value);
    [CompilerGeneratedAttribute]
private IBackendHelper get_BackendHelper();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExpectedExtractFile> get_FilesWithEmbeddedFiles();
    public void Execute();
}
internal class WixToolset.Core.Bind.ResolveDelayedFieldsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDelayedField> <DelayedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <VariableCache>k__BackingField;
    private IMessaging Messaging { get; }
    private IEnumerable`1<IDelayedField> DelayedFields { get; }
    private IDictionary`2<string, string> VariableCache { get; }
    public ResolveDelayedFieldsCommand(IMessaging messaging, IEnumerable`1<IDelayedField> delayedFields, Dictionary`2<string, string> variableCache);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDelayedField> get_DelayedFields();
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> get_VariableCache();
    public void Execute();
    private string ResolveDelayedVariables(SourceLineNumber sourceLineNumbers, string value);
}
internal class WixToolset.Core.Bind.ResolveFieldsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileResolver <FileResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IVariableResolver <VariableResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IBindPath> <BindPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IResolverExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtractEmbeddedFiles <FilesWithEmbeddedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <Intermediate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnresolvedVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<DelayedField> <DelayedFields>k__BackingField;
    private IMessaging Messaging { get; }
    private IFileResolver FileResolver { get; }
    private IVariableResolver VariableResolver { get; }
    private IEnumerable`1<IBindPath> BindPaths { get; }
    private IEnumerable`1<IResolverExtension> Extensions { get; }
    private ExtractEmbeddedFiles FilesWithEmbeddedFiles { get; }
    private string IntermediateFolder { get; }
    private Intermediate Intermediate { get; }
    private bool AllowUnresolvedVariables { get; }
    public IReadOnlyCollection`1<DelayedField> DelayedFields { get; private set; }
    public ResolveFieldsCommand(IMessaging messaging, IFileResolver fileResolver, IVariableResolver variableResolver, IReadOnlyCollection`1<IBindPath> bindPaths, IReadOnlyCollection`1<IResolverExtension> extensions, ExtractEmbeddedFiles filesWithEmbeddedFiles, string intermediateFolder, Intermediate intermediate, bool allowUnresolvedVariables);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileResolver get_FileResolver();
    [CompilerGeneratedAttribute]
private IVariableResolver get_VariableResolver();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IBindPath> get_BindPaths();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IResolverExtension> get_Extensions();
    [CompilerGeneratedAttribute]
private ExtractEmbeddedFiles get_FilesWithEmbeddedFiles();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private Intermediate get_Intermediate();
    [CompilerGeneratedAttribute]
private bool get_AllowUnresolvedVariables();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<DelayedField> get_DelayedFields();
    [CompilerGeneratedAttribute]
private void set_DelayedFields(IReadOnlyCollection`1<DelayedField> value);
    public void Execute();
    private void ResolvePathField(IFileResolver fileResolver, IEnumerable`1<IBindPath> bindPaths, IntermediateSymbol symbol, IntermediateField field);
}
internal class WixToolset.Core.Bind.TransferFilesCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILayoutExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileTransfer> <FileTransfers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetAcls>k__BackingField;
    private IMessaging Messaging { get; }
    private IFileSystem FileSystem { get; }
    private IEnumerable`1<ILayoutExtension> Extensions { get; }
    private IEnumerable`1<IFileTransfer> FileTransfers { get; }
    private bool ResetAcls { get; }
    public TransferFilesCommand(IMessaging messaging, IFileSystem fileSystem, IEnumerable`1<ILayoutExtension> extensions, IEnumerable`1<IFileTransfer> fileTransfers, bool resetAcls);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ILayoutExtension> get_Extensions();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFileTransfer> get_FileTransfers();
    [CompilerGeneratedAttribute]
private bool get_ResetAcls();
    public void Execute();
    private void CopyFile(SourceLineNumber sourceLineNumbers, string source, string destination);
    private void MoveFile(SourceLineNumber sourceLineNumbers, string source, string destination);
    private void AclReset(IEnumerable`1<string> files);
}
internal class WixToolset.Core.BindContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBindPath> <BindPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BurnStubPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CabbingThreadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CabCachePath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> <DefaultCompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IDelayedField> <DelayedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IExpectedExtractFile> <ExpectedEmbeddedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBinderExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IFileSystemExtension> <FileSystemExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <IntermediateRepresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private PdbType <PdbType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PdbPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResolvedCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResolvedSummaryInformationCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ResolvedLcid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressLayout>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public string BurnStubPath { get; public set; }
    public int CabbingThreadCount { get; public set; }
    public string CabCachePath { get; public set; }
    public Nullable`1<CompressionLevel> DefaultCompressionLevel { get; public set; }
    public IReadOnlyCollection`1<IDelayedField> DelayedFields { get; public set; }
    public IReadOnlyCollection`1<IExpectedExtractFile> ExpectedEmbeddedFiles { get; public set; }
    public IReadOnlyCollection`1<IBinderExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IFileSystemExtension> FileSystemExtensions { get; public set; }
    public string IntermediateFolder { get; public set; }
    public Intermediate IntermediateRepresentation { get; public set; }
    public string OutputPath { get; public set; }
    public string OutputType { get; public set; }
    public PdbType PdbType { get; public set; }
    public string PdbPath { get; public set; }
    public Nullable`1<int> ResolvedCodepage { get; public set; }
    public Nullable`1<int> ResolvedSummaryInformationCodepage { get; public set; }
    public Nullable`1<int> ResolvedLcid { get; public set; }
    public bool SuppressLayout { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal BindContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    [CompilerGeneratedAttribute]
public string get_BurnStubPath();
    [CompilerGeneratedAttribute]
public void set_BurnStubPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_CabbingThreadCount();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CabbingThreadCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_CabCachePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CabCachePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<CompressionLevel> get_DefaultCompressionLevel();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DefaultCompressionLevel(Nullable`1<CompressionLevel> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IDelayedField> get_DelayedFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DelayedFields(IReadOnlyCollection`1<IDelayedField> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IExpectedExtractFile> get_ExpectedEmbeddedFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExpectedEmbeddedFiles(IReadOnlyCollection`1<IExpectedExtractFile> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IBinderExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<IBinderExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IFileSystemExtension> get_FileSystemExtensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileSystemExtensions(IReadOnlyCollection`1<IFileSystemExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Intermediate get_IntermediateRepresentation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateRepresentation(Intermediate value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputType(string value);
    [CompilerGeneratedAttribute]
public sealed virtual PdbType get_PdbType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbType(PdbType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_PdbPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PdbPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ResolvedCodepage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResolvedCodepage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ResolvedSummaryInformationCodepage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResolvedSummaryInformationCodepage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_ResolvedLcid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResolvedLcid(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SuppressLayout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressLayout(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.Binder : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    internal Binder(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public IServiceProvider get_ServiceProvider();
    public sealed virtual IBindResult Bind(IBindContext context);
    private IBindResult BackendBind(IBindContext context);
    private void WriteBuildInfoSymbol(Intermediate output, string outputFile, string outputPdbPath);
}
internal class WixToolset.Core.BindFileWithPath : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string Id { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
}
[DebuggerDisplayAttribute("Name={Name,nq} Path={Path,nq}")]
internal class WixToolset.Core.BindPath : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private BindStage <Stage>k__BackingField;
    public string Name { get; public set; }
    public string Path { get; public set; }
    public BindStage Stage { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual BindStage get_Stage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Stage(BindStage value);
}
internal class WixToolset.Core.BindResult : object {
    private bool disposed;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IFileTransfer> <FileTransfers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ITrackedFile> <TrackedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private WixOutput <Wixout>k__BackingField;
    public IReadOnlyCollection`1<IFileTransfer> FileTransfers { get; public set; }
    public IReadOnlyCollection`1<ITrackedFile> TrackedFiles { get; public set; }
    public WixOutput Wixout { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IFileTransfer> get_FileTransfers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileTransfers(IReadOnlyCollection`1<IFileTransfer> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TrackedFiles(IReadOnlyCollection`1<ITrackedFile> value);
    [CompilerGeneratedAttribute]
public sealed virtual WixOutput get_Wixout();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Wixout(WixOutput value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class WixToolset.Core.CommandLine.BuildCommand : BaseCommandLineCommand {
    private CommandLine commandLine;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionManager <ExtensionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> <DefaultCompressionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackingFile>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private IExtensionManager ExtensionManager { get; }
    private string IntermediateFolder { get; private set; }
    private string OutputPath { get; private set; }
    private Platform Platform { get; private set; }
    private Nullable`1<CompressionLevel> DefaultCompressionLevel { get; private set; }
    private string TrackingFile { get; private set; }
    public BuildCommand(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IExtensionManager get_ExtensionManager();
    [CompilerGeneratedAttribute]
private string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
private void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
private string get_OutputPath();
    [CompilerGeneratedAttribute]
private void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
private Platform get_Platform();
    [CompilerGeneratedAttribute]
private void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
private Nullable`1<CompressionLevel> get_DefaultCompressionLevel();
    [CompilerGeneratedAttribute]
private void set_DefaultCompressionLevel(Nullable`1<CompressionLevel> value);
    [CompilerGeneratedAttribute]
private string get_TrackingFile();
    [CompilerGeneratedAttribute]
private void set_TrackingFile(string value);
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parser, string argument);
    private IReadOnlyList`1<Intermediate> CompilePhase(IDictionary`2<string, string> preprocessorVariables, IEnumerable`1<string> sourceFiles, IReadOnlyCollection`1<string> includeSearchPaths, CancellationToken cancellationToken);
    private void OptimizePhase(IReadOnlyCollection`1<Intermediate> intermediates, IReadOnlyCollection`1<Localization> localizations, IReadOnlyCollection`1<IBindPath> bindPaths, Dictionary`2<string, string> bindVariables, CancellationToken cancellationToken);
    private void LibraryPhase(IReadOnlyCollection`1<Intermediate> intermediates, IReadOnlyCollection`1<Localization> localizations, IEnumerable`1<string> libraryFiles, ISymbolDefinitionCreator creator, bool bindFiles, IReadOnlyCollection`1<IBindPath> bindPaths, Dictionary`2<string, string> bindVariables, string outputPath, CancellationToken cancellationToken);
    private Intermediate LinkPhase(IEnumerable`1<Intermediate> intermediates, InputsAndOutputs inputsOutputs, ISymbolDefinitionCreator creator, CancellationToken cancellationToken);
    private void BindPhase(Intermediate output, IReadOnlyCollection`1<Localization> localizations, IReadOnlyCollection`1<string> filterCultures, string cabCachePath, int cabbingThreadCount, IReadOnlyCollection`1<IBindPath> bindPaths, Dictionary`2<string, string> bindVariables, InputsAndOutputs inputsOutputs, CancellationToken cancellationToken);
    private void LayoutFiles(IReadOnlyCollection`1<ITrackedFile> trackedFiles, IReadOnlyCollection`1<IFileTransfer> fileTransfers, CancellationToken cancellationToken);
    private IEnumerable`1<Intermediate> LoadLibraries(IEnumerable`1<string> libraryFiles, ISymbolDefinitionCreator creator);
    private IReadOnlyList`1<Localization> LoadLocalizationFiles(IEnumerable`1<string> locFiles, IDictionary`2<string, string> preprocessorVariables, IReadOnlyCollection`1<string> includeSearchPaths, CancellationToken cancellationToken);
    private XDocument Preprocess(IDictionary`2<string, string> preprocessorVariables, string sourcePath, IReadOnlyCollection`1<string> includeSearchPaths, CancellationToken cancellationToken);
    private static string DefaultExtensionForSectionType(SectionType sectionType);
    private static string DefaultExtensionForOutputType(OutputType outputType);
}
internal class WixToolset.Core.CommandLine.CommandLine : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowHelp>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressLogo>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private bool ShowHelp { get; private set; }
    private bool SuppressLogo { get; private set; }
    public CommandLine(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private bool get_ShowHelp();
    [CompilerGeneratedAttribute]
private void set_ShowHelp(bool value);
    [CompilerGeneratedAttribute]
private bool get_SuppressLogo();
    [CompilerGeneratedAttribute]
private void set_SuppressLogo(bool value);
    public sealed virtual ICommandLineCommand CreateCommand(String[] args);
    public sealed virtual ICommandLineCommand CreateCommand(string commandLine);
    public sealed virtual ICommandLineCommand ParseStandardCommandLine(ICommandLineArguments arguments);
    private void LoadExtensions(String[] extensions);
    private ICommandLineCommand Parse(ICommandLineContext context);
    private bool TryParseCommand(string arg, ICommandLineParser parser, IEnumerable`1<IExtensionCommandLine> extensions, ICommandLineCommand& command);
    private static bool TryParseCommandLineArgumentWithExtension(string arg, ICommandLineParser parse, IEnumerable`1<IExtensionCommandLine> extensions);
    private bool TryParseStandardCommandLineSwitch(ICommandLineParser parser, string arg);
    private void ParseSuppressWarning(string parameter, int offset, ICommandLineParser parser);
    private void ParseWarningAsError(string parameter, int offset, ICommandLineParser parser);
}
internal class WixToolset.Core.CommandLine.CommandLineArguments : object {
    [CompilerGeneratedAttribute]
private String[] <OriginalArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    public String[] OriginalArguments { get; public set; }
    public String[] Arguments { get; public set; }
    public String[] Extensions { get; public set; }
    public string ErrorArgument { get; public set; }
    private IMessaging Messaging { get; }
    public CommandLineArguments(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_OriginalArguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OriginalArguments(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Arguments(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual String[] get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(String[] value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorArgument();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ErrorArgument(string value);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    public sealed virtual void Populate(string commandLine);
    public sealed virtual void Populate(String[] args);
    public sealed virtual ICommandLineParser Parse();
    private void FlattenArgumentsWithResponseFilesIntoOriginalArguments(String[] commandLineArguments);
    private void ProcessArgumentsAndParseExtensions(String[] args);
    private static List`1<string> ParseResponseFile(string responseFile);
    private static List`1<string> ParseArgumentsToArray(string arguments);
    private static string ExpandEnvironmentVariables(string arguments);
    private static bool IsSwitchAt(String[] args, int index);
}
internal class WixToolset.Core.CommandLine.CommandLineContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtensionManager <ExtensionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommandLineArguments <Arguments>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IExtensionManager ExtensionManager { get; public set; }
    public ICommandLineArguments Arguments { get; public set; }
    public CommandLineContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IExtensionManager get_ExtensionManager();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionManager(IExtensionManager value);
    [CompilerGeneratedAttribute]
public sealed virtual ICommandLineArguments get_Arguments();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Arguments(ICommandLineArguments value);
}
internal class WixToolset.Core.CommandLine.CommandLineParser : object {
    private static string ExpectedArgument;
    [CompilerGeneratedAttribute]
private string <ErrorArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private Queue`1<string> <RemainingArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    public string ErrorArgument { get; private set; }
    private Queue`1<string> RemainingArguments { get; }
    private IMessaging Messaging { get; }
    public CommandLineParser(IMessaging messaging, String[] arguments, string errorArgument);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ErrorArgument();
    [CompilerGeneratedAttribute]
private void set_ErrorArgument(string value);
    [CompilerGeneratedAttribute]
private Queue`1<string> get_RemainingArguments();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    public sealed virtual bool IsSwitch(string arg);
    public sealed virtual string GetArgumentAsFilePathOrError(string argument, string filePurpose);
    public sealed virtual bool GetArgumentAsFilePathOrError(string argument, string filePurpose, IList`1<string> paths);
    public sealed virtual string GetNextArgumentOrError(string commandLineSwitch);
    public sealed virtual bool GetNextArgumentOrError(string commandLineSwitch, IList`1<string> args);
    public sealed virtual string GetNextArgumentAsDirectoryOrError(string commandLineSwitch);
    public sealed virtual bool GetNextArgumentAsDirectoryOrError(string commandLineSwitch, IList`1<string> directories);
    public sealed virtual string GetNextArgumentAsFilePathOrError(string commandLineSwitch, string filePurpose);
    public sealed virtual bool GetNextArgumentAsFilePathOrError(string commandLineSwitch, string fileType, IList`1<string> paths);
    public sealed virtual void ReportErrorArgument(string argument, Message message);
    public sealed virtual bool TryGetNextSwitchOrArgument(String& argument);
    public sealed virtual string PeekNextArgument();
    public sealed virtual bool TryPeekNextArgument(String& argument);
    private bool TryGetNextNonSwitchArgumentOrError(String& arg);
    private bool TryGetDirectory(string commandlineSwitch, string arg, String& directory);
    private bool TryGetFile(string commandlineSwitch, string arg, string purpose, String& path);
    private String[] GetFiles(string searchPath, string fileType);
    private string VerifyPath(string path);
}
internal class WixToolset.Core.CommandLine.HelpCommand : BaseCommandLineCommand {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtensionCommandLine> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IWixBranding <Branding>k__BackingField;
    [CompilerGeneratedAttribute]
private ICommandLineCommand <Command>k__BackingField;
    public bool ShowLogo { get; }
    private IEnumerable`1<IExtensionCommandLine> Extensions { get; }
    private IWixBranding Branding { get; }
    private ICommandLineCommand Command { get; }
    public HelpCommand(IEnumerable`1<IExtensionCommandLine> extensions, IWixBranding branding, ICommandLineCommand command);
    public virtual bool get_ShowLogo();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtensionCommandLine> get_Extensions();
    [CompilerGeneratedAttribute]
private IWixBranding get_Branding();
    [CompilerGeneratedAttribute]
private ICommandLineCommand get_Command();
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken _);
    public virtual bool TryParseArgument(ICommandLineParser parseHelper, string argument);
}
internal class WixToolset.Core.CommandLine.VersionCommand : BaseCommandLineCommand {
    public virtual CommandLineHelp GetCommandLineHelp();
    public virtual Task`1<int> ExecuteAsync(CancellationToken cancellationToken);
    public virtual bool TryParseArgument(ICommandLineParser parseHelper, string argument);
}
internal static class WixToolset.Core.Common : object {
    private static Char[] IllegalShortFilenameCharacters;
    private static Char[] IllegalWildcardShortFilenameCharacters;
    internal static Char[] IllegalLongFilenameCharacters;
    internal static Char[] IllegalRelativeLongFilenameCharacters;
    internal static Char[] IllegalWildcardLongFilenameCharacters;
    private static Common();
    public static int GetValidCodePage(string value, bool allowNoChange, bool onlyAnsi, SourceLineNumber sourceLineNumbers);
    public static bool IsValidBinderVariable(string variable);
    public static bool ContainsValidBinderVariable(string verify);
    public static bool IsValidFourPartVersion(string version);
    public static bool IsValidMsiProductVersion(string version);
    public static bool IsValidLongFilename(string filename, bool allowWildcards, bool allowRelative);
    public static bool IsValidShortFilename(string filename, bool allowWildcards);
    public static string GenerateGuid();
    public static string GenerateIdentifier(string prefix, String[] args);
    internal static string GetIdentifierFromName(string name);
    internal static bool ContainsProperty(string possibleProperty);
    public static string Demodularize(OutputType outputType, string modularizationGuid, string id);
    public static String[] GetNames(string value);
    public static string GetName(string value, bool source, bool longName);
    internal static string GetAttributeValue(IMessaging messaging, SourceLineNumber sourceLineNumbers, XAttribute attribute, EmptyRule emptyRule);
    public static bool IsIdentifier(string value);
    public static bool IsBundleVariableName(string value);
    internal static string GetAttributeIdentifierValue(IMessaging messaging, SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public static int GetAttributeIntegerValue(IMessaging messaging, SourceLineNumber sourceLineNumbers, XAttribute attribute, int minimum, int maximum);
    public static Nullable`1<int> GetAttributeRawIntegerValue(IMessaging messaging, SourceLineNumber sourceLineNumbers, XAttribute attribute);
    internal static YesNoType GetAttributeYesNoValue(IMessaging messaging, SourceLineNumber sourceLineNumbers, XAttribute attribute);
    internal static string GetInnerText(XElement node);
    internal static void InnerTextDisallowed(IMessaging messaging, XElement element, string attributeName);
    internal static bool TryParseWixVariable(string value, int start, ParsedWixVariable& parsedVariable);
    public static void UnexpectedAttribute(IMessaging messaging, SourceLineNumber sourceLineNumbers, XAttribute attribute);
    internal static void UnsupportedExtensionAttribute(IMessaging messaging, SourceLineNumber sourceLineNumbers, XAttribute extensionAttribute);
    private static bool ValidIdentifierChar(char c, bool firstChar);
    private static bool ValidBundleVariableNameChar(char c, bool firstChar);
}
internal class WixToolset.Core.CompileContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompilationId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ICompilerExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public string CompilationId { get; public set; }
    public IReadOnlyCollection`1<ICompilerExtension> Extensions { get; public set; }
    public string IntermediateFolder { get; public set; }
    public string OutputPath { get; public set; }
    public Platform Platform { get; public set; }
    public bool IsCurrentPlatform64Bit { get; }
    public XDocument Source { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal CompileContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual string get_CompilationId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CompilationId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ICompilerExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<ICompilerExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Platform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Platform(Platform value);
    public sealed virtual bool get_IsCurrentPlatform64Bit();
    [CompilerGeneratedAttribute]
public sealed virtual XDocument get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Source(XDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.Compiler : object {
    private static int MinValueOfMaxCabSizeForLargeFileSplitting;
    private static int MaxValueOfMaxCabSizeForLargeFileSplitting;
    private static char ComponentIdPlaceholderStart;
    private static char ComponentIdPlaceholderEnd;
    private Dictionary`2<string, string> componentIdPlaceholders;
    private bool compilingModule;
    private bool compilingProduct;
    private string activeName;
    private string activeLanguage;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private ICompileContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private CompilerCore <Core>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPedanticMessages>k__BackingField;
    private static Identifier BurnUXContainerId;
    private static Identifier BurnDefaultAttachedContainerId;
    private static Identifier BundleLayoutOnlyPayloads;
    private static string DependencyRegistryRoot;
    private static Char[] InvalidDependencyCharacters;
    private static String[] TextControlAttributes;
    private static String[] HyperlinkControlAttributes;
    private static String[] EditControlAttributes;
    private static String[] ProgressControlAttributes;
    private static String[] VolumeControlAttributes;
    private static String[] ListboxControlAttributes;
    private static String[] ListviewControlAttributes;
    private static String[] ComboboxControlAttributes;
    private static String[] RadioControlAttributes;
    private static String[] ButtonControlAttributes;
    private static String[] IconControlAttributes;
    private static String[] BitmapControlAttributes;
    private static String[] CheckboxControlAttributes;
    public IMessaging Messaging { get; }
    private ICompileContext Context { get; private set; }
    private CompilerCore Core { get; private set; }
    public Platform CurrentPlatform { get; }
    public bool ShowPedanticMessages { get; public set; }
    internal Compiler(IServiceProvider serviceProvider);
    private static Compiler();
    [CompilerGeneratedAttribute]
public IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private ICompileContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ICompileContext value);
    [CompilerGeneratedAttribute]
private CompilerCore get_Core();
    [CompilerGeneratedAttribute]
private void set_Core(CompilerCore value);
    public Platform get_CurrentPlatform();
    [CompilerGeneratedAttribute]
public bool get_ShowPedanticMessages();
    [CompilerGeneratedAttribute]
public void set_ShowPedanticMessages(bool value);
    public sealed virtual Intermediate Compile(ICompileContext context);
    private void ParseWixElement(XElement node);
    private void ResolveComponentIdPlaceholders(Intermediate target);
    private static string UppercaseFirstChar(string s);
    private static string LowercaseOrNull(string s);
    private void AddAppSearch(SourceLineNumber sourceLineNumbers, Identifier propertyId, string signature);
    private void AddProperty(SourceLineNumber sourceLineNumbers, Identifier propertyId, string value, bool admin, bool secure, bool hidden, bool fragment);
    private void AddWixPropertySymbol(SourceLineNumber sourceLineNumbers, Identifier property, bool admin, bool secure, bool hidden, IntermediateSection section);
    private void RegisterImplementedCategories(SourceLineNumber sourceLineNumbers, string categoryId, string classId, string componentId);
    private void ParseAppIdElement(XElement node, string componentId, YesNoType advertise, string fileServer, string typeLibId, string typeLibVersion);
    private void ParseAssemblyName(XElement node, string componentId);
    private Identifier ParseBinaryElement(XElement node);
    private string ParseIconElement(XElement node);
    private void ParseInstanceTransformsElement(XElement node);
    private void ParseInstanceElement(XElement node, string propertyId);
    private void ParseCategoryElement(XElement node, string componentId);
    private void ParseClassElement(XElement node, string componentId, YesNoType advertise, string fileServer, string typeLibId, string typeLibVersion, string parentAppId);
    private void ParseInterfaceElement(XElement node, string componentId, string proxyId, string proxyId32, string typeLibId, string typelibVersion);
    private string ParseFileTypeMaskElement(XElement node);
    private void ParseProductSearchElement(XElement node, string propertyId);
    private string ParseRegistrySearchElement(XElement node);
    private string ParseRegistrySearchRefElement(XElement node);
    private List`1<string> ParseSearchSignatures(XElement node);
    private string ParseComplianceDriveElement(XElement node);
    private void ParseComplianceCheckElement(XElement node);
    private void ParseComponentElement(XElement node, ComplexReferenceParentType parentType, string parentId, string parentLanguage, int diskId, string directoryId, string srcPath);
    private void ParseComponentGroupElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParseComponentGroupRefElement(XElement node, ComplexReferenceParentType parentType, string parentId, string parentLanguage);
    private void ParseComponentRefElement(XElement node, ComplexReferenceParentType parentType, string parentId, string parentLanguage);
    private string ParseComponentSearchElement(XElement node);
    private string ParseCreateFolderElement(XElement node, string componentId, string directoryId, bool win64Component);
    private void ParseCopyFileElement(XElement node, string componentId, string fileId);
    private void ParseCustomActionElement(XElement node);
    private string ParseSimpleRefElement(XElement node, IntermediateSymbolDefinition symbolDefinition);
    private void ParsePatchFamilyRefElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParseEnsureTableElement(XElement node);
    private void ParseDirectoryElement(XElement node, string parentId, int diskId, string fileSource);
    private void ParseDirectoryRefElement(XElement node);
    private string ParseDirectorySearchElement(XElement node, string parentSignature);
    private string ParseDirectorySearchRefElement(XElement node, string parentSignature);
    private void ParseFeatureElement(XElement node, ComplexReferenceParentType parentType, string parentId, Int32& lastDisplay);
    private void ParseFeatureRefElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParseFeatureGroupElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParseFeatureGroupRefElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParseEnvironmentElement(XElement node, string componentId);
    private void ParseErrorElement(XElement node);
    private void ParseExtensionElement(XElement node, string componentId, YesNoType advertise, string progId);
    private YesNoType ParseFileElementAttributes(XElement node, string componentId, string directoryId, int diskId, string sourcePath, Identifier& possibleKeyPath, string componentGuid, bool isNakedFile, FileSymbol& fileSymbol, AssemblySymbol& assemblySymbol);
    private void ParseFileElementChildren(XElement node, FileSymbol fileSymbol, YesNoType keyPath, bool win64Component);
    private YesNoType ParseFileElement(XElement node, string componentId, string directoryId, int diskId, string sourcePath, Identifier& possibleKeyPath, bool win64Component, string componentGuid);
    private void ParseNakedFileElement(XElement node, ComplexReferenceParentType parentType, string parentId, string directoryId, string sourcePath);
    private void ParseFilesElement(XElement node, ComplexReferenceParentType parentType, string parentId, string directoryId, string sourcePath);
    private void ParseFilesExcludeElement(XElement node, IList`1<string> paths);
    private string ParseFileSearchElement(XElement node, string parentSignature, bool parentDirectorySearch, int parentDepth);
    private void ParseFragmentElement(XElement node);
    private void ParseLaunchElement(XElement node);
    private void ParseIniFileElement(XElement node, string componentId);
    private string ParseIniFileSearchElement(XElement node);
    private void ParseIsolateComponentElement(XElement node, string componentId);
    private void ParseCertificatesElement(XElement node);
    private string ParseDigitalCertificateElement(XElement node);
    private void ParseDigitalSignatureElement(XElement node, string diskId);
    private void ParseMajorUpgradeElement(XElement node, IDictionary`2<string, string> contextValues);
    private void ParseMediaElement(XElement node, string patchId);
    private void ParseMediaTemplateElement(XElement node, string patchId);
    private void ParseMergeElement(XElement node, string directoryId, int diskId);
    private void ParseStandardDirectoryElement(XElement node);
    private string ParseConfigurationDataElement(XElement node);
    private void ParseLevelElement(XElement node, string featureId);
    private void ParseMergeRefElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private string ParseMIMEElement(XElement node, string extension, string componentId, YesNoType parentAdvertised);
    private void ParsePatchPropertyElement(XElement node, bool patch);
    private void AddPrivateProperty(SourceLineNumber sourceLineNumbers, string name, string value);
    private string ParseTargetProductCodeElement(XElement node);
    private string ParseReplacePatchElement(XElement node);
    private string ParseSymbolPathElement(XElement node);
    private void ParseAllElement(XElement node);
    private void ParsePatchChildRefElement(XElement node, string tableName);
    private void ParsePatchBaselineElement(XElement node, Nullable`1<int> diskId);
    private void ParseValidateElement(XElement node, TransformFlags& validationFlags);
    private string HandleSubdirectory(SourceLineNumber sourceLineNumbers, XElement element, string directoryId, string subdirectory, string directoryAttributeName, string subdirectoryAttributename);
    private void ParseApprovedExeForElevation(XElement node);
    private void ParseBundleElement(XElement node);
    private string ParseLogElement(XElement node, string fileSystemSafeBundleName);
    private void ParseContainerElement(XElement node);
    private void ParseBootstrapperApplicationElement(XElement node);
    private Identifier ParseBootstrapperApplicationDllElement(XElement node, Identifier defaultId);
    private void ParseBootstrapperApplicationRefElement(XElement node);
    private void ParseBundleCustomDataElement(XElement node);
    private void ParseBundleCustomDataRefElement(XElement node);
    private WixBundleCustomDataAttributeSymbol ParseBundleAttributeDefinitionElement(XElement node, SourceLineNumber sourceLineNumbers, string customDataId);
    private void ParseBundleElementElement(XElement node, SourceLineNumber sourceLineNumbers, string customDataId);
    private void ParseBootstrapperExtensionElement(XElement node);
    private void ParseOptionalUpdateRegistrationElement(XElement node, string defaultManufacturer, string defaultProductFamily, string defaultName);
    private Identifier ParsePayloadElement(XElement node, ComplexReferenceParentType parentType, Identifier parentId, bool isRemoteAllowed);
    private void ParsePayloadGroupElement(XElement node, ComplexReferenceParentType parentType, Identifier parentId);
    private Identifier ParsePayloadGroupRefElement(XElement node, ComplexReferenceParentType parentType, Identifier parentId);
    private void ParseExitCodeElement(XElement node, string packageId);
    private void ParseChainElement(XElement node);
    private string ParseMsiPackageElement(XElement node, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private string ParseMspPackageElement(XElement node, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private string ParseMsuPackageElement(XElement node, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private string ParseExePackageElement(XElement node, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private string ParseBundlePackageElement(XElement node, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private string ParseRollbackBoundaryElement(XElement node, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private string ParseChainPackage(XElement node, WixBundlePackageType packageType, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private CompilerPackagePayload ParsePackagePayloadElement(SourceLineNumber sourceLineNumbers, XElement node, WixBundlePackageType packageType, Identifier defaultId);
    private void ParseRemoteBundleElement(XElement node, string packagePayloadId);
    private void ParseRemoteRelatedBundleElement(XElement node, string payloadId);
    private void ParseExePackageArpEntryElement(XElement node, String& id, String& version, YesNoType& win64, String& uninstallArguments, YesNoType& arpUseUninstallString);
    private void ParseCommandLineElement(XElement node, string packageId);
    private void ParsePackageGroupElement(XElement node);
    private string ParsePackageGroupRefElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private string ParsePackageGroupRefElement(XElement node, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private void CreateRollbackBoundary(SourceLineNumber sourceLineNumbers, Identifier id, YesNoType vital, YesNoType transaction, string logPathVariable, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType previousType, string previousId);
    private void CreateChainPackageMetaRows(SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType type, string id, ComplexReferenceChildType previousType, string previousId, string afterId);
    private void ParseMsiPropertyElement(XElement node, string packageId);
    private void ParseSlipstreamMspElement(XElement node, string packageId);
    private void ParseRelatedBundleElement(XElement node);
    private void ParseUpdateElement(XElement node);
    private void ParseSetVariableElement(XElement node);
    private void ParseVariableElement(XElement node);
    private WixBundleVariableType ValidateVariableTypeWithValue(SourceLineNumber sourceLineNumbers, XElement node, string typeValue, string value);
    private void ParseCustomTableElement(XElement node);
    private void ParseCustomTableRefElement(XElement node);
    private WixCustomTableColumnSymbol ParseColumnElement(XElement child, SourceLineNumber childSourceLineNumbers, string tableId);
    private void ParseRowElement(XElement node, SourceLineNumber sourceLineNumbers, string tableId);
    private void ParseBundleProviderKeyAttribute(SourceLineNumber sourceLineNumbers, XElement parentElement, XAttribute attribute);
    private YesNoType ParseProvidesElement(XElement node, Nullable`1<WixBundlePackageType> packageType, string parentId, Identifier& possibleKeyPath);
    private void ParseRequiresElement(XElement node, string providerId);
    private void ParseRequiresRefElement(XElement node, string providerId, bool requiresAction);
    private void ParseEmbeddedChainerElement(XElement node);
    private void ParseEmbeddedUIElement(XElement node);
    private void ParseEmbeddedUIResourceElement(XElement node);
    private void ParseModuleElement(XElement node);
    private void ParseDependencyElement(XElement node);
    private void ParseExclusionElement(XElement node);
    private void ParseConfigurationElement(XElement node);
    private void ParseSubstitutionElement(XElement node);
    private void ParseIgnoreTableElement(XElement node);
    private void ParsePackageElement(XElement node);
    private void GetDefaultPlatformAndInstallerVersion(String& platform, Int32& msiVersion);
    private void ValidateAndAddCommonSummaryInformationSymbols(SourceLineNumber sourceLineNumbers, int msiVersion, string platform, string language);
    private void ParseODBCDriverOrTranslator(XElement node, string componentId, string fileId, SymbolDefinitionType symbolDefinitionType);
    private void ParseODBCProperty(XElement node, string parentId, SymbolDefinitionType symbolDefinitionType);
    private YesNoType ParseODBCDataSource(XElement node, string componentId, string driverName, Identifier& possibleKeyPath);
    private void ParseSummaryInformationElement(XElement node, Boolean& isCodepageSet, Boolean& isCommentsSet, Boolean& isPackageNameSet, Boolean& isKeywordsSet, Boolean& isPackageAuthorSet);
    private void ParsePatchInformationElement(XElement node);
    private void ParsePermissionElement(XElement node, string objectId, string tableName);
    private void ParsePermissionExElement(XElement node, string objectId, string tableName);
    private string ParseProgIdElement(XElement node, string componentId, YesNoType advertise, string classId, string description, string parent, Boolean& foundExtension, YesNoType firstProgIdForClass);
    private void ParsePropertyElement(XElement node);
    private YesNoType ParseRegistryKeyElement(XElement node, string componentId, Nullable`1<RegistryRootType> root, string parentKey, bool win64Component, Identifier& possibleKeyPath);
    private YesNoType ParseRegistryValueElement(XElement node, string componentId, Nullable`1<RegistryRootType> root, string parentKey, bool win64Component, Identifier& possibleKeyPath);
    private string ParseRegistryMultiStringElement(XElement node, string value);
    private void ParseRemoveRegistryKeyElement(XElement node, string componentId);
    private void ParseRemoveRegistryValueElement(XElement node, string componentId);
    private void ParseRemoveFileElement(XElement node, string componentId, string parentDirectory);
    private void ParseRemoveFolderElement(XElement node, string componentId, string parentDirectory);
    private void ParseReserveCostElement(XElement node, string componentId, string directoryId);
    private void ParseSequenceElement(XElement node, SequenceTable sequenceTable);
    private void ParseServiceConfigElement(XElement node, string componentId, string serviceName);
    private string ParseRequiredPrivilege(XElement node, string requiredPrivileges);
    private void ParseServiceConfigFailureActionsElement(XElement node, string componentId, string serviceName);
    private void ParseServiceControlElement(XElement node, string componentId);
    private string ParseServiceArgument(XElement node, string arguments);
    private string ParseServiceDependencyElement(XElement node);
    private void ParseServiceInstallElement(XElement node, string componentId, bool win64Component);
    private void ParseSetDirectoryElement(XElement node);
    private void ParseSetPropertyElement(XElement node);
    private void ParseSFPFileElement(XElement node, string parentSFPCatalog);
    private void ParseSFPCatalogElement(XElement node, String& parentSFPCatalog);
    private void ParseShortcutElement(XElement node, string componentId, string parentElementLocalName, string defaultTarget, YesNoType parentKeyPath);
    private void ParseShortcutPropertyElement(XElement node, string shortcutId);
    private void ParseTypeLibElement(XElement node, string componentId, string fileServer, bool win64Component);
    private void ParseUpgradeElement(XElement node);
    private void ParseUpgradeVersionElement(XElement node, string upgradeId);
    private void ParseVerbElement(XElement node, string extension, string progId, string componentId, YesNoType advertise);
    private void ParseWixVariableElement(XElement node);
    private Nullable`1<CompressionLevel> ParseCompressionLevel(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    private void ParsePatchElement(XElement node);
    private int ParseOptimizeCustomActionsElement(XElement node);
    private void ParsePatchFamilyElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParsePatchFamilyGroupElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParsePatchFamilyGroupRefElement(XElement node, ComplexReferenceParentType parentType, string parentId);
    private void ParseTargetProductCodesElement(XElement node);
    private void AddMsiPatchMetadata(SourceLineNumber sourceLineNumbers, string company, string property, string value);
    private void ParsePatchCreationElement(XElement node);
    private void ParseFamilyElement(XElement node);
    private void ParseUpgradeImageElement(XElement node, string family);
    private void ParseUpgradeFileElement(XElement node, string upgrade);
    private void ParseTargetImageElement(XElement node, string upgrade, string family);
    private void ParseTargetFileElement(XElement node, string target, string family);
    private void ParseExternalFileElement(XElement node, string family);
    private void ParseProtectFileElement(XElement node, string family);
    private void ParseRangeElement(XElement node, String& offsets, String& lengths);
    private void ParsePatchMetadataElement(XElement node);
    private void ParseCustomPropertyElement(XElement node);
    private void ParsePatchSequenceElement(XElement node);
    private void AddPatchMetadata(SourceLineNumber sourceLineNumbers, string company, string property, string value);
    private void ParseBundleTagElement(XElement node);
    private void ParsePackageTagElement(XElement node);
    private void ParseSoftwareTagRefElement(XElement node);
    private Identifier CreateTagId(string regid);
    private void ParseUIElement(XElement node);
    private void ParseListItemElement(XElement node, SymbolDefinitionType symbolType, string property, Int32& order);
    private RadioButtonType ParseRadioButtonElement(XElement node, string property, Int32& order);
    private void ParseBillboardActionElement(XElement node);
    private void ParseBillboardElement(XElement node, string action, int order);
    private void ParseControlGroupElement(XElement node, SymbolDefinitionType symbolType, string childTag);
    private RadioButtonType ParseRadioButtonGroupElement(XElement node, string property, RadioButtonType groupType);
    private void ParseActionTextElement(XElement node);
    private void ParseUITextElement(XElement node);
    private void ParseTextStyleElement(XElement node);
    private void ParseDialogElement(XElement node);
    private void ParseControlElement(XElement node, string dialog, SymbolDefinitionType symbolType, ControlSymbol& lastTabSymbol, String& firstControl, String& defaultControl, String& cancelControl);
    private void ParsePublishElement(XElement node, string dialog, string control, Int32& order);
    private void ParseSubscribeElement(XElement node, string dialog, string control);
}
internal class WixToolset.Core.CompilerCore : object {
    internal static XNamespace W3SchemaPrefix;
    internal static XNamespace WixNamespace;
    private Dictionary`2<XNamespace, ICompilerExtension> extensions;
    private IBundleValidator bundleValidator;
    private IParseHelper parseHelper;
    private Intermediate intermediate;
    private IMessaging messaging;
    private Dictionary`2<string, string> activeSectionCachedInlinedDirectoryIds;
    private HashSet`1<string> activeSectionSimpleReferences;
    [CompilerGeneratedAttribute]
private IntermediateSection <ActiveSection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPedanticMessages>k__BackingField;
    public IntermediateSection ActiveSection { get; private set; }
    public bool EncounteredError { get; }
    public bool ShowPedanticMessages { get; public set; }
    internal CompilerCore(Intermediate intermediate, IMessaging messaging, IBundleValidator bundleValidator, IParseHelper parseHelper, Dictionary`2<XNamespace, ICompilerExtension> extensions);
    private static CompilerCore();
    [CompilerGeneratedAttribute]
public IntermediateSection get_ActiveSection();
    [CompilerGeneratedAttribute]
private void set_ActiveSection(IntermediateSection value);
    public bool get_EncounteredError();
    [CompilerGeneratedAttribute]
public bool get_ShowPedanticMessages();
    [CompilerGeneratedAttribute]
public void set_ShowPedanticMessages(bool value);
    public T AddSymbol(T symbol);
    public int CreateIntegerFromBitArray(BitArray bits);
    public bool TrySetBitFromName(String[] attributeNames, string attributeName, YesNoType attributeValue, BitArray bits, int offset);
    internal void InnerTextDisallowed(XElement element);
    internal void InnerTextDisallowed(XElement element, string attributeName);
    public static bool IsAmbiguousFilename(string filename);
    public bool IsValidIdentifier(string value);
    public bool IsValidLocIdentifier(string identifier);
    public bool IsValidLongFilename(string filename, bool allowWildcards, bool allowRelative);
    public bool IsValidShortFilename(string filename, bool allowWildcards);
    public static string MakeValidLongFileName(string filename, char replace);
    public static bool IsValidProductVersion(string version);
    public void CreateGroupAndOrderingRows(SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType type, string id, ComplexReferenceChildType previousType, string previousId);
    public string CreateGuid(Guid namespaceGuid, string value);
    public string CreateDirectoryReferenceFromInlineSyntax(SourceLineNumber sourceLineNumbers, string parentId, string inlineSyntax);
    public Identifier CreateRegistryStringSymbol(SourceLineNumber sourceLineNumbers, RegistryRootType root, string key, string name, string value, string componentId);
    public void CreateSimpleReference(SourceLineNumber sourceLineNumbers, string symbolName, string primaryKey);
    public void CreateSimpleReference(SourceLineNumber sourceLineNumbers, string symbolName, String[] primaryKeys);
    public void CreateSimpleReference(SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, string primaryKey);
    public void CreateSimpleReference(SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, String[] primaryKeys);
    public void CreateWixGroupRow(SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType childType, string childId);
    public void EnsureTable(SourceLineNumber sourceLineNumbers, string tableName);
    public void EnsureTable(SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public string GetAttributeValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, EmptyRule emptyRule);
    public int GetAttributeCodePageValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public string GetAttributeLocalizableCodePageValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool onlyAnsi);
    public int GetAttributeIntegerValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, int minimum, int maximum);
    public Nullable`1<int> GetAttributeRawIntegerValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public long GetAttributeLongValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, long minimum, long maximum);
    public int GetAttributeDateTimeValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public string GetAttributeLocalizableIntegerValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, int minimum, int maximum);
    public string GetAttributeGuidValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool generatable, bool canBeEmpty);
    public Identifier GetAttributeIdentifier(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public string GetAttributeIdentifierValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public YesNoType GetAttributeYesNoValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public YesNoDefaultType GetAttributeYesNoDefaultValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public string GetAttributeShortFilename(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool allowWildcards);
    public string GetAttributeLongFilename(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool allowWildcards, bool allowRelative);
    public string GetAttributeVersionValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public Nullable`1<RegistryRootType> GetAttributeRegistryRootValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool allowHkmu);
    public Identifier GetAttributeBundleVariableNameIdentifier(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public string GetAttributeBundleVariableNameValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public string GetAttributeMsiPropertyNameValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public bool ContainsProperty(string possibleProperty);
    public Identifier CreateIdentifier(string prefix, String[] args);
    public Identifier CreateIdentifierFromFilename(string filename);
    public void ParseExtensionAttribute(XElement element, XAttribute attribute, IDictionary`2<string, string> context);
    public void ParseExtensionElement(XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public void ParseForExtensionElements(XElement element, IDictionary`2<string, string> context);
    public IComponentKeyPath ParsePossibleKeyPathExtensionElement(XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public void UnexpectedAttribute(XElement element, XAttribute attribute);
    public void UnexpectedElement(XElement parentElement, XElement childElement);
    public void Write(Message message);
    internal void VerifyRequiredVersion(SourceLineNumber sourceLineNumbers, string requiredVersion);
    internal IntermediateSection CreateActiveSection(string id, SectionType type, string compilationId);
    internal IntermediateSection CreateSection(string id, SectionType type, string compilationId);
    public void CreateComplexReference(SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, string parentLanguage, ComplexReferenceChildType childType, string childId, bool isPrimary);
    internal Identifier CreateDirectorySymbol(SourceLineNumber sourceLineNumbers, Identifier id, string parentId, string name, string shortName, string sourceName, string shortSourceName);
    public void CreateWixSearchSymbol(SourceLineNumber sourceLineNumbers, string elementName, Identifier id, string variable, string condition, string after);
    internal WixActionSymbol ScheduleActionSymbol(SourceLineNumber sourceLineNumbers, AccessModifier access, SequenceTable sequence, string actionName, string condition, string beforeAction, string afterAction, bool overridable);
}
internal static class WixToolset.Core.CompilerErrors : object {
    public static Message AlreadyDefinedBootstrapperApplicationSource(SourceLineNumber sourceLineNumbers, SourceLineNumber originalSourceLineNumbers, string originalElementName);
    public static Message IllegalCharactersInProvider(SourceLineNumber sourceLineNumbers, string attributeName, char illegalChar, string illegalChars);
    public static Message ReservedValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string attributeValue);
    public static Message IllegalBundleVariableName(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string value);
    public static Message IllegalTagName(SourceLineNumber sourceLineNumbers, string parentElement, string name);
    public static Message ExampleRegid(SourceLineNumber sourceLineNumbers, string regid);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal class WixToolset.Core.CompilerPackagePayload : object {
    [CompilerGeneratedAttribute]
private CompilerPayload <CompilerPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private WixBundlePackageType <PackageType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<BundlePackagePayloadGenerationType> <PayloadGenerationType>k__BackingField;
    private CompilerCore Core { get; }
    private XElement Element { get; }
    private SourceLineNumber SourceLineNumbers { get; }
    public CompilerPayload CompilerPayload { get; }
    private WixBundlePackageType PackageType { get; }
    public Nullable`1<BundlePackagePayloadGenerationType> PayloadGenerationType { get; public set; }
    public CompilerPackagePayload(CompilerPayload compilerPayload, WixBundlePackageType packageType);
    private CompilerCore get_Core();
    private XElement get_Element();
    private SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public CompilerPayload get_CompilerPayload();
    [CompilerGeneratedAttribute]
private WixBundlePackageType get_PackageType();
    [CompilerGeneratedAttribute]
public Nullable`1<BundlePackagePayloadGenerationType> get_PayloadGenerationType();
    [CompilerGeneratedAttribute]
public void set_PayloadGenerationType(Nullable`1<BundlePackagePayloadGenerationType> value);
    public IntermediateSymbol CreatePackagePayloadSymbol(ComplexReferenceParentType parentType, string parentId);
    public bool ParsePayloadGeneration(XAttribute attrib);
}
internal class WixToolset.Core.CompilerPayload : object {
    [CompilerGeneratedAttribute]
private CompilerCore <Core>k__BackingField;
    [CompilerGeneratedAttribute]
private XElement <Element>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private YesNoDefaultType <Compressed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificatePublicKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CertificateThumbprint>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private Identifier <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRemoteAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProductName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    public CompilerCore Core { get; }
    public XElement Element { get; }
    public SourceLineNumber SourceLineNumbers { get; }
    public YesNoDefaultType Compressed { get; public set; }
    public string Description { get; public set; }
    public string DownloadUrl { get; public set; }
    public string CertificatePublicKey { get; public set; }
    public string CertificateThumbprint { get; public set; }
    public string Hash { get; public set; }
    public Identifier Id { get; public set; }
    public bool IsRemoteAllowed { get; public set; }
    public bool IsRequired { get; public set; }
    public string Name { get; public set; }
    public string ProductName { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public string SourceFile { get; public set; }
    public string Version { get; public set; }
    public CompilerPayload(CompilerCore core, SourceLineNumber sourceLineNumbers, XElement element);
    [CompilerGeneratedAttribute]
public CompilerCore get_Core();
    [CompilerGeneratedAttribute]
public XElement get_Element();
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public YesNoDefaultType get_Compressed();
    [CompilerGeneratedAttribute]
public void set_Compressed(YesNoDefaultType value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_DownloadUrl();
    [CompilerGeneratedAttribute]
public void set_DownloadUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CertificatePublicKey();
    [CompilerGeneratedAttribute]
public void set_CertificatePublicKey(string value);
    [CompilerGeneratedAttribute]
public string get_CertificateThumbprint();
    [CompilerGeneratedAttribute]
public void set_CertificateThumbprint(string value);
    [CompilerGeneratedAttribute]
public string get_Hash();
    [CompilerGeneratedAttribute]
public void set_Hash(string value);
    [CompilerGeneratedAttribute]
public Identifier get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Identifier value);
    [CompilerGeneratedAttribute]
public bool get_IsRemoteAllowed();
    [CompilerGeneratedAttribute]
public void set_IsRemoteAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ProductName();
    [CompilerGeneratedAttribute]
public void set_ProductName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public void set_SourceFile(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    private void CalculateAndVerifyFields();
    public WixBundlePayloadSymbol CreatePayloadSymbol(ComplexReferenceParentType parentType, string parentId);
    public void FinishCompilingPackage();
    public void FinishCompilingPackagePayload();
    public void FinishCompilingPayload(string parentId);
    private void GenerateIdFromFilename();
    private void GenerateIdFromPrefix(string prefix, string parentId);
    public void ParseCompressed(XAttribute attrib);
    public void ParseDescription(XAttribute attrib);
    public void ParseDownloadUrl(XAttribute attrib);
    public void ParseCertificatePublicKey(XAttribute attrib);
    public void ParseCertificateThumbprint(XAttribute attrib);
    public void ParseHash(XAttribute attrib);
    public void ParseId(XAttribute attrib);
    public void ParseName(XAttribute attrib);
    public void ParseProductName(XAttribute attrib);
    public void ParseSize(XAttribute attrib);
    public void ParseSourceFile(XAttribute attrib);
    public void ParseVersion(XAttribute attrib);
}
internal static class WixToolset.Core.CompilerWarnings : object {
    public static Message DirectoryRefStandardDirectoryDeprecated(SourceLineNumber sourceLineNumbers, string directoryId);
    public static Message DefiningStandardDirectoryDeprecated(SourceLineNumber sourceLineNumbers, string directoryId);
    public static Message DiscouragedVersionAttribute(SourceLineNumber sourceLineNumbers);
    public static Message DiscouragedVersionAttribute(SourceLineNumber sourceLineNumbers, string id);
    public static Message PropertyRemoved(string name);
    public static Message ProvidesKeyNotFound(SourceLineNumber sourceLineNumbers, string id);
    public static Message ReadonlyLogVariableTarget(SourceLineNumber sourceLineNumbers, string element, string attribute, string name);
    public static Message RequiresKeyNotFound(SourceLineNumber sourceLineNumbers, string id);
    public static Message Win64Component(SourceLineNumber sourceLineNumbers, string componentId);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal class WixToolset.Core.ComponentKeyPath : object {
    [CompilerGeneratedAttribute]
private Identifier <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Explicit>k__BackingField;
    [CompilerGeneratedAttribute]
private PossibleKeyPathType <Type>k__BackingField;
    public Identifier Id { get; public set; }
    public bool Explicit { get; public set; }
    public PossibleKeyPathType Type { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Identifier get_Id();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Id(Identifier value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Explicit();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Explicit(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual PossibleKeyPathType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(PossibleKeyPathType value);
}
internal static class WixToolset.Core.CoreErrors : object {
    public static Message UnableToCopyFile(SourceLineNumber sourceLineNumbers, string source, string destination, string detail);
    public static Message UnableToDeleteFile(SourceLineNumber sourceLineNumbers, string path, string detail);
    public static Message UnableToMoveFile(SourceLineNumber sourceLineNumbers, string source, string destination, string detail);
    public static Message UnableToOpenFile(SourceLineNumber sourceLineNumbers, string path, string detail);
    public static Message BackendNotFound(string outputType, string outputPath);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal class WixToolset.Core.ExtensibilityServices.BackendHelper : LayoutServices {
    public BackendHelper(IServiceProvider serviceProvider);
    public sealed virtual string CreateGuid();
    public sealed virtual string CreateGuid(Guid namespaceGuid, string value);
    public sealed virtual IResolvedDirectory CreateResolvedDirectory(string directoryParent, string name);
    public sealed virtual IReadOnlyList`1<ITrackedFile> ExtractEmbeddedFiles(IEnumerable`1<IExpectedExtractFile> embeddedFiles);
    public sealed virtual string GenerateIdentifier(string prefix, String[] args);
    public sealed virtual int GetValidCodePage(string value, bool allowNoChange, bool onlyAnsi, SourceLineNumber sourceLineNumbers);
    public sealed virtual string GetMsiFileName(string value, bool source, bool longName);
    public sealed virtual void ResolveDelayedFields(IEnumerable`1<IDelayedField> delayedFields, Dictionary`2<string, string> variableCache);
    public sealed virtual String[] SplitMsiFileName(string value);
    public sealed virtual bool IsValidBinderVariable(string variable);
    public sealed virtual bool IsValidFourPartVersion(string version);
    public sealed virtual bool IsValidMsiProductVersion(string version);
    public sealed virtual bool IsValidWixVersion(string version);
    public sealed virtual bool IsValidIdentifier(string id);
    public sealed virtual bool IsValidLongFilename(string filename, bool allowWildcards, bool allowRelative);
    public sealed virtual bool IsValidShortFilename(string filename, bool allowWildcards);
    public sealed virtual bool TryParseFourPartVersion(string version, String& parsedVersion);
    public sealed virtual bool TryParseMsiProductVersion(string version, bool strict, String& parsedVersion);
}
internal class WixToolset.Core.ExtensibilityServices.BundleValidator : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    private static List`1<string> BuiltinBundleVariables;
    private static List`1<string> WellKnownBundleVariables;
    private static List`1<string> DisallowedMsiProperties;
    private static List`1<string> UnavailableStartupVariables;
    private static List`1<string> UnavailableDetectVariables;
    protected IMessaging Messaging { get; }
    public BundleValidator(IServiceProvider serviceProvider);
    private static BundleValidator();
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    public sealed virtual string GetCanonicalRelativePath(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string relativePath);
    public sealed virtual bool ValidateBundleVariableNameDeclaration(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string variableName);
    public sealed virtual bool ValidateBundleVariableNameValue(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string variableName, BundleVariableNameRule nameRule);
    public sealed virtual bool ValidateBundleVariableNameTarget(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string variableName);
    public sealed virtual bool ValidateBundleMsiPropertyName(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string propertyName);
    public sealed virtual bool ValidateBundleCondition(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string condition, BundleConditionPhase phase);
    private bool ValidateBundleConditionUnavailableVariables(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string condition, List`1<string> unavailableVariables);
    private bool TryParseCondition(SourceLineNumber sourceLineNumbers, string elementName, string attributeName, string condition);
    private static string CreateValueList(ValueListKind kind, IEnumerable`1<string> values);
}
internal class WixToolset.Core.ExtensibilityServices.ExtensionCacheLocation : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionCacheLocationScope <Scope>k__BackingField;
    public string Path { get; }
    public ExtensionCacheLocationScope Scope { get; }
    public ExtensionCacheLocation(string path, ExtensionCacheLocationScope scope);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual ExtensionCacheLocationScope get_Scope();
}
internal class WixToolset.Core.ExtensibilityServices.ExtensionManager : object {
    private static string WixToolsetExtensionPackageFolder;
    private static string UserWixFolderName;
    private static string MachineWixFolderName;
    private static string ExtensionsFolderName;
    private static string UserEnvironmentName;
    private List`1<IExtensionFactory> extensionFactories;
    private Dictionary`2<Type, List`1<object>> loadedExtensionsByType;
    [CompilerGeneratedAttribute]
private IWixToolsetCoreServiceProvider <ServiceProvider>k__BackingField;
    private IWixToolsetCoreServiceProvider ServiceProvider { get; }
    public ExtensionManager(IWixToolsetCoreServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IWixToolsetCoreServiceProvider get_ServiceProvider();
    public sealed virtual void Add(Assembly extensionAssembly);
    public sealed virtual void Load(string extensionPath);
    public sealed virtual IReadOnlyCollection`1<IExtensionCacheLocation> GetCacheLocations();
    public sealed virtual string GetExtensionPackageRootFolderName();
    public sealed virtual IReadOnlyCollection`1<T> GetServices();
    private IExtensionFactory CreateExtensionFactory(Type type);
    private static bool TryParseExtensionReference(string extensionReference, String& extensionId, String& extensionVersion);
    private static bool TryFindLatestVersionInFolder(string basePath, String& foundVersionFolder);
    private static bool TryLoadFromPath(string extensionPath, Assembly& assembly);
}
internal class WixToolset.Core.ExtensibilityServices.FileResolver : object {
    private static string BindPathOpenString;
    public sealed virtual string ResolveFile(string source, IEnumerable`1<ILibrarianExtension> librarianExtensions, IEnumerable`1<IBindPath> bindPaths, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition);
    public sealed virtual string ResolveFile(string source, IEnumerable`1<IResolverExtension> resolverExtensions, IEnumerable`1<IBindPath> bindPaths, BindStage bindStage, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, IEnumerable`1<string> alreadyCheckedPaths);
    private string MustResolveUsingBindPaths(string source, IntermediateSymbolDefinition symbolDefinition, SourceLineNumber sourceLineNumbers, IEnumerable`1<IBindPath> bindPaths, List`1<string> checkedPaths);
    private static string ResolveWithBindPath(string bindPath, string relativePath, List`1<string> checkedPaths);
    private static bool CheckFileExists(string path);
}
internal class WixToolset.Core.ExtensibilityServices.FileSystem : object {
    public sealed virtual void CopyFile(SourceLineNumber sourceLineNumbers, string source, string destination, bool allowHardlink);
    public sealed virtual void DeleteFile(SourceLineNumber sourceLineNumbers, string source, bool throwOnError, int maxRetries);
    public sealed virtual void MoveFile(SourceLineNumber sourceLineNumbers, string source, string destination);
    public sealed virtual FileStream OpenFile(SourceLineNumber sourceLineNumbers, string path, FileMode mode, FileAccess access, FileShare share);
    public sealed virtual void ExecuteWithRetries(Action action, int maxRetries);
    private void EnsureDirectoryWithoutFile(string path);
    private static bool CreateHardLink(string lpFileName, string lpExistingFileName, IntPtr lpSecurityAttributes);
}
internal class WixToolset.Core.ExtensibilityServices.FileTransfer : object {
    [CompilerGeneratedAttribute]
private string <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Destination>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Move>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Redundant>k__BackingField;
    public string Source { get; public set; }
    public string Destination { get; public set; }
    public bool Move { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; public set; }
    public bool Redundant { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Source();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Source(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Destination();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Destination(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Move();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Move(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceLineNumbers(SourceLineNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_Redundant();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Redundant(bool value);
}
internal class WixToolset.Core.ExtensibilityServices.LayoutServices : object {
    private static String[] ReservedFileNames;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    protected IMessaging Messaging { get; }
    public LayoutServices(IServiceProvider serviceProvider);
    private static LayoutServices();
    [CompilerGeneratedAttribute]
protected IMessaging get_Messaging();
    public sealed virtual IFileTransfer CreateFileTransfer(string source, string destination, bool move, SourceLineNumber sourceLineNumbers);
    public sealed virtual ITrackedFile TrackFile(string path, TrackedFileType type, SourceLineNumber sourceLineNumbers);
    protected string GetValidatedFullPath(SourceLineNumber sourceLineNumbers, string path);
}
internal class WixToolset.Core.ExtensibilityServices.Messaging : object {
    private IMessageListener listener;
    private HashSet`1<int> suppressedWarnings;
    private HashSet`1<int> warningsAsErrors;
    [CompilerGeneratedAttribute]
private int <ErrorCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <LastErrorNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowVerboseMessages>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressAllWarnings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WarningsAsError>k__BackingField;
    public bool EncounteredError { get; }
    public int ErrorCount { get; private set; }
    public int LastErrorNumber { get; private set; }
    public bool ShowVerboseMessages { get; public set; }
    public bool SuppressAllWarnings { get; public set; }
    public bool WarningsAsError { get; public set; }
    public sealed virtual bool get_EncounteredError();
    [CompilerGeneratedAttribute]
public sealed virtual int get_ErrorCount();
    [CompilerGeneratedAttribute]
private void set_ErrorCount(int value);
    [CompilerGeneratedAttribute]
public sealed virtual int get_LastErrorNumber();
    [CompilerGeneratedAttribute]
private void set_LastErrorNumber(int value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShowVerboseMessages();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShowVerboseMessages(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SuppressAllWarnings();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SuppressAllWarnings(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_WarningsAsError();
    [CompilerGeneratedAttribute]
public sealed virtual void set_WarningsAsError(bool value);
    public sealed virtual void ElevateWarningMessage(int warningNumber);
    public sealed virtual void SetListener(IMessageListener listener);
    public sealed virtual void SuppressWarningMessage(int warningNumber);
    public sealed virtual void Write(Message message);
    public sealed virtual void Write(string message, bool verbose);
    private MessageLevel CalculateMessageLevel(Message message);
}
internal class WixToolset.Core.ExtensibilityServices.ParseHelper : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IBundleValidator <BundleValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolDefinitionCreator <Creator>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IBundleValidator BundleValidator { get; }
    private IMessaging Messaging { get; }
    private ISymbolDefinitionCreator Creator { get; private set; }
    public ParseHelper(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IBundleValidator get_BundleValidator();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private ISymbolDefinitionCreator get_Creator();
    [CompilerGeneratedAttribute]
private void set_Creator(ISymbolDefinitionCreator value);
    public sealed virtual bool ContainsProperty(string possibleProperty);
    public sealed virtual void CreateComplexReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, string parentLanguage, ComplexReferenceChildType childType, string childId, bool isPrimary);
    public sealed virtual Identifier CreateDirectorySymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, Identifier id, string parentId, string name, string shortName, string sourceName, string shortSourceName);
    public sealed virtual string CreateDirectoryReferenceFromInlineSyntax(IntermediateSection section, SourceLineNumber sourceLineNumbers, XAttribute attribute, string parentId, string inlineSyntax, IDictionary`2<string, string> sectionCachedInlinedDirectoryIds);
    public sealed virtual string CreateGuid(Guid namespaceGuid, string value);
    public sealed virtual Identifier CreateIdentifier(string prefix, String[] args);
    public sealed virtual Identifier CreateIdentifierFromFilename(string filename);
    public sealed virtual string CreateIdentifierValueFromPlatform(string name, Platform currentPlatform, BurnPlatforms supportedPlatforms);
    public sealed virtual Identifier CreateRegistrySymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, RegistryRootType root, string key, string name, string value, string componentId, RegistryValueType valueType, RegistryValueActionType valueAction);
    public sealed virtual Identifier CreateRegistrySymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, RegistryRootType root, string key, string name, int value, string componentId);
    public sealed virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, string symbolName, string primaryKey);
    public sealed virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, string symbolName, String[] primaryKeys);
    public sealed virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, string primaryKey);
    public sealed virtual void CreateSimpleReference(IntermediateSection section, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, String[] primaryKeys);
    public sealed virtual void CreateWixGroupSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, ComplexReferenceParentType parentType, string parentId, ComplexReferenceChildType childType, string childId);
    public sealed virtual void CreateWixSearchSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, string elementName, Identifier id, string variable, string condition, string after, string bootstrapperExtensionId);
    public sealed virtual void CreateWixSearchRelationSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, Identifier id, string parentId, int attributes);
    public sealed virtual IntermediateSymbol CreateSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, string symbolName, Identifier identifier);
    public sealed virtual IntermediateSymbol CreateSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, IntermediateSymbolDefinition symbolDefinition, Identifier identifier);
    public sealed virtual void EnsureTable(IntermediateSection section, SourceLineNumber sourceLineNumbers, TableDefinition tableDefinition);
    public sealed virtual void EnsureTable(IntermediateSection section, SourceLineNumber sourceLineNumbers, string tableName);
    public sealed virtual Identifier GetAttributeBundleVariableNameIdentifier(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public sealed virtual string GetAttributeBundleVariableNameValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, BundleVariableNameRule nameRule);
    public sealed virtual string GetAttributeGuidValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool generatable, bool canBeEmpty);
    public sealed virtual Identifier GetAttributeIdentifier(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public sealed virtual string GetAttributeIdentifierValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public sealed virtual int GetAttributeIntegerValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, int minimum, int maximum);
    public sealed virtual string GetAttributeLongFilename(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool allowWildcards, bool allowRelative);
    public sealed virtual long GetAttributeLongValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, long minimum, long maximum);
    public sealed virtual string GetAttributeValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, EmptyRule emptyRule);
    public sealed virtual Nullable`1<RegistryRootType> GetAttributeRegistryRootValue(SourceLineNumber sourceLineNumbers, XAttribute attribute, bool allowHkmu);
    public sealed virtual string GetAttributeVersionValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public sealed virtual YesNoDefaultType GetAttributeYesNoDefaultValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public sealed virtual YesNoType GetAttributeYesNoValue(SourceLineNumber sourceLineNumbers, XAttribute attribute);
    public sealed virtual SourceLineNumber GetSourceLineNumbers(XElement element);
    public sealed virtual string GetConditionInnerText(XElement element);
    public sealed virtual string GetTrimmedInnerText(XElement element);
    public sealed virtual void InnerTextDisallowed(XElement element);
    public sealed virtual void InnerTextDisallowed(XElement element, string attributeName);
    public sealed virtual bool IsValidIdentifier(string value);
    public sealed virtual bool IsValidLocIdentifier(string identifier);
    public sealed virtual bool IsValidLongFilename(string filename, bool allowWildcards, bool allowRelative);
    public sealed virtual bool IsValidShortFilename(string filename, bool allowWildcards);
    public sealed virtual void ParseExtensionAttribute(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement element, XAttribute attribute, IDictionary`2<string, string> context);
    public sealed virtual void ParseExtensionElement(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public sealed virtual IComponentKeyPath ParsePossibleKeyPathExtensionElement(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement parentElement, XElement element, IDictionary`2<string, string> context);
    public sealed virtual void ParseForExtensionElements(IEnumerable`1<ICompilerExtension> extensions, Intermediate intermediate, IntermediateSection section, XElement element, IDictionary`2<string, string> context);
    public sealed virtual WixActionSymbol ScheduleActionSymbol(IntermediateSection section, SourceLineNumber sourceLineNumbers, AccessModifier access, SequenceTable sequence, string actionName, string condition, string beforeAction, string afterAction, bool overridable);
    public sealed virtual void CreateCustomActionReference(SourceLineNumber sourceLineNumbers, IntermediateSection section, string customAction, Platform currentPlatform, CustomActionPlatforms supportedPlatforms);
    public sealed virtual void UnexpectedAttribute(XElement element, XAttribute attribute);
    public sealed virtual void UnexpectedElement(XElement parentElement, XElement childElement);
    private void CreateSymbolDefinitionCreator();
    private static bool TryFindExtension(IEnumerable`1<ICompilerExtension> extensions, XNamespace ns, ICompilerExtension& extension);
}
internal class WixToolset.Core.ExtensibilityServices.PathResolver : object {
    public sealed virtual string GetCanonicalDirectoryPath(Dictionary`2<string, IResolvedDirectory> directories, Dictionary`2<string, string> componentIdGenSeeds, string directory, Platform platform);
    public sealed virtual string GetDirectoryPath(Dictionary`2<string, IResolvedDirectory> directories, string directory);
    public sealed virtual string GetFileSourcePath(Dictionary`2<string, IResolvedDirectory> directories, string directoryId, string fileName, bool compressed, bool useLongName);
}
internal class WixToolset.Core.ExtensibilityServices.PreprocessHelper : object {
    private static Char[] VariableSplitter;
    private static Char[] ArgumentSplitter;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IPreprocessorExtension> <ExtensionsByPrefix>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private Dictionary`2<string, IPreprocessorExtension> ExtensionsByPrefix { get; private set; }
    public PreprocessHelper(IServiceProvider serviceProvider);
    private static PreprocessHelper();
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IPreprocessorExtension> get_ExtensionsByPrefix();
    [CompilerGeneratedAttribute]
private void set_ExtensionsByPrefix(Dictionary`2<string, IPreprocessorExtension> value);
    public sealed virtual void AddVariable(IPreprocessContext context, string name, string value);
    public sealed virtual void AddVariable(IPreprocessContext context, string name, string value, bool showWarning);
    public sealed virtual string EvaluateFunction(IPreprocessContext context, string function);
    public sealed virtual string EvaluateFunction(IPreprocessContext context, string prefix, string function, String[] args);
    public sealed virtual string GetVariableValue(IPreprocessContext context, string variable, bool allowMissingPrefix);
    public sealed virtual string GetVariableValue(IPreprocessContext context, string prefix, string name);
    public sealed virtual void PreprocessPragma(IPreprocessContext context, string pragmaName, string args, XContainer parent);
    public sealed virtual string PreprocessString(IPreprocessContext context, string value);
    public sealed virtual void RemoveVariable(IPreprocessContext context, string name);
    private Dictionary`2<string, IPreprocessorExtension> GetExtensionsByPrefix();
}
internal class WixToolset.Core.ExtensibilityServices.ResolvedDirectory : object {
    [CompilerGeneratedAttribute]
private string <DirectoryParent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public string DirectoryParent { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_DirectoryParent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DirectoryParent(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
}
internal class WixToolset.Core.ExtensibilityServices.SymbolDefinitionCreator : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtensionData> <ExtensionData>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IntermediateSymbolDefinition> <CustomDefinitionByName>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IEnumerable`1<IExtensionData> ExtensionData { get; private set; }
    private Dictionary`2<string, IntermediateSymbolDefinition> CustomDefinitionByName { get; }
    public SymbolDefinitionCreator(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IExtensionData> get_ExtensionData();
    [CompilerGeneratedAttribute]
private void set_ExtensionData(IEnumerable`1<IExtensionData> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IntermediateSymbolDefinition> get_CustomDefinitionByName();
    public sealed virtual void AddCustomSymbolDefinition(IntermediateSymbolDefinition definition);
    public sealed virtual bool TryGetSymbolDefinitionByName(string name, IntermediateSymbolDefinition& symbolDefinition);
    private void LoadExtensionData();
}
internal class WixToolset.Core.ExtensibilityServices.TrackedFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private TrackedFileType <Type>k__BackingField;
    public string Path { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; public set; }
    public TrackedFileType Type { get; public set; }
    public TrackedFile(string path, TrackedFileType type, SourceLineNumber sourceLineNumbers);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceLineNumbers(SourceLineNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual TrackedFileType get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Type(TrackedFileType value);
}
internal static class WixToolset.Core.ExtensibilityServices.Uuid : object {
    public static Guid NewUuid(Guid namespaceGuid, string value);
}
internal class WixToolset.Core.ExtensibilityServices.WixBranding : object {
    public static string NewsUrl;
    public static string ShortProduct;
    public static string SupportUrl;
    public static string TelemetryUrlFormat;
    public static string VSExtensionsLandingUrl;
    private static WixBranding();
    public sealed virtual string GetCreatingApplication();
    public sealed virtual string ReplacePlaceholders(string original, Assembly assembly);
    private static bool TryGetAttribute(Assembly assembly, T& attribute);
}
internal class WixToolset.Core.HarvestFilesCommand : object {
    private static string BindPathOpenString;
    [CompilerGeneratedAttribute]
private IOptimizeContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IParseHelper <ParseHelper>k__BackingField;
    public IOptimizeContext Context { get; }
    public IMessaging Messaging { get; }
    public IParseHelper ParseHelper { get; }
    public HarvestFilesCommand(IOptimizeContext context);
    [CompilerGeneratedAttribute]
public IOptimizeContext get_Context();
    [CompilerGeneratedAttribute]
public IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
public IParseHelper get_ParseHelper();
    internal void Execute();
    private void HarvestFiles(HarvestFilesSymbol harvestFile, IntermediateSection section, ISet`1<string> harvestedFiles);
    private IEnumerable`1<WildcardFile> GetWildcardFiles(HarvestFilesSymbol harvestFile, IEnumerable`1<string> patterns);
    private IEnumerable`1<string> ResolveBindPaths(SourceLineNumber sourceLineNumbers, string source);
}
public interface WixToolset.Core.IBinder {
    public abstract virtual IBindResult Bind(IBindContext context);
}
public interface WixToolset.Core.ICompiler {
    public abstract virtual Intermediate Compile(ICompileContext context);
}
public interface WixToolset.Core.ILayoutCreator {
    public abstract virtual void Layout(ILayoutContext context);
}
public interface WixToolset.Core.ILibrarian {
    public abstract virtual ILibraryResult Combine(ILibraryContext context);
}
public interface WixToolset.Core.ILinker {
    public abstract virtual Intermediate Link(ILinkContext context);
}
public interface WixToolset.Core.ILocalizationParser {
    public abstract virtual Localization ParseLocalization(string path);
    public abstract virtual Localization ParseLocalization(XDocument document);
}
internal class WixToolset.Core.IncludedFile : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    public string Path { get; public set; }
    public SourceLineNumber SourceLineNumbers { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourceLineNumbers(SourceLineNumber value);
}
public interface WixToolset.Core.IOptimizer {
    public abstract virtual void Optimize(IOptimizeContext context);
}
public interface WixToolset.Core.IPreprocessor {
    public abstract virtual IPreprocessResult Preprocess(IPreprocessContext context);
    public abstract virtual IPreprocessResult Preprocess(IPreprocessContext context, XmlReader reader);
}
public interface WixToolset.Core.IResolver {
    public abstract virtual IResolveResult Resolve(IResolveContext context);
}
internal class WixToolset.Core.LayoutContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ILayoutExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IFileSystemExtension> <FileSystemExtensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IFileTransfer> <FileTransfers>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ITrackedFile> <TrackedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TrackingFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ResetAcls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<ILayoutExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IFileSystemExtension> FileSystemExtensions { get; public set; }
    public IReadOnlyCollection`1<IFileTransfer> FileTransfers { get; public set; }
    public IReadOnlyCollection`1<ITrackedFile> TrackedFiles { get; public set; }
    public string IntermediateFolder { get; public set; }
    public string TrackingFile { get; public set; }
    public bool ResetAcls { get; public set; }
    public string OutputPath { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal LayoutContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ILayoutExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<ILayoutExtension> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<IFileSystemExtension> get_FileSystemExtensions();
    [CompilerGeneratedAttribute]
public void set_FileSystemExtensions(IReadOnlyCollection`1<IFileSystemExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IFileTransfer> get_FileTransfers();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FileTransfers(IReadOnlyCollection`1<IFileTransfer> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TrackedFiles(IReadOnlyCollection`1<ITrackedFile> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TrackingFile();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TrackingFile(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ResetAcls();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ResetAcls(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.LayoutCreator : object {
    private static string TrackedLineTypePathSeparator;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileSystem <FileSystem>k__BackingField;
    private IMessaging Messaging { get; }
    private IFileSystem FileSystem { get; }
    internal LayoutCreator(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileSystem get_FileSystem();
    public sealed virtual void Layout(ILayoutContext context);
    private void CreateTrackingFile(string path, IEnumerable`1<ITrackedFile> trackedFiles);
    private void CleanTempFiles(string intermediateFolder, IEnumerable`1<ITrackedFile> trackedFiles);
    private void SplitUniqueFolders(string intermediateFolder, string tempPath, SortedSet`1<string> uniqueFolders);
    private static string TrackedFileLine(ITrackedFile trackedFile);
}
internal class WixToolset.Core.Librarian : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileResolver <FileResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ILayoutServices <LayoutServices>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private IFileResolver FileResolver { get; }
    private ILayoutServices LayoutServices { get; }
    internal Librarian(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileResolver get_FileResolver();
    [CompilerGeneratedAttribute]
private ILayoutServices get_LayoutServices();
    public sealed virtual ILibraryResult Combine(ILibraryContext context);
    private IReadOnlyCollection`1<ITrackedFile> ResolveFilePathsToEmbed(ILibraryContext context, IEnumerable`1<IntermediateSection> sections);
    private void Validate(Intermediate library);
}
internal class WixToolset.Core.LibraryContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BindFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBindPath> <BindPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <BindVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ILibrarianExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LibraryId>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Localization> <Localizations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Intermediate> <Intermediates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IMessaging Messaging { get; public set; }
    public bool BindFiles { get; public set; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public IDictionary`2<string, string> BindVariables { get; public set; }
    public IReadOnlyCollection`1<ILibrarianExtension> Extensions { get; public set; }
    public string LibraryId { get; public set; }
    public IReadOnlyCollection`1<Localization> Localizations { get; public set; }
    public string IntermediateFolder { get; public set; }
    public IReadOnlyCollection`1<Intermediate> Intermediates { get; public set; }
    public string OutputPath { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal LibraryContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
public void set_Messaging(IMessaging value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_BindFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindFiles(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_BindVariables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ILibrarianExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<ILibrarianExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_LibraryId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_LibraryId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Localization> get_Localizations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Localizations(IReadOnlyCollection`1<Localization> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Intermediate> get_Intermediates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Intermediates(IReadOnlyCollection`1<Intermediate> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.LibraryResult : object {
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ITrackedFile> <TrackedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <Library>k__BackingField;
    public IReadOnlyCollection`1<ITrackedFile> TrackedFiles { get; public set; }
    public Intermediate Library { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ITrackedFile> get_TrackedFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_TrackedFiles(IReadOnlyCollection`1<ITrackedFile> value);
    [CompilerGeneratedAttribute]
public sealed virtual Intermediate get_Library();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Library(Intermediate value);
}
internal class WixToolset.Core.Link.AddDefaultSymbolsCommand : object {
    public static string WixStandardInstallFolder;
    public static string WixStandardInstallFolderParent;
    public static string WixStandardInstallFolderReference;
    [CompilerGeneratedAttribute]
private IList`1<IntermediateSection> <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private FindEntrySectionAndLoadSymbolsCommand <Find>k__BackingField;
    public IList`1<IntermediateSection> Sections { get; }
    public FindEntrySectionAndLoadSymbolsCommand Find { get; }
    public AddDefaultSymbolsCommand(FindEntrySectionAndLoadSymbolsCommand find, IList`1<IntermediateSection> sections);
    private static AddDefaultSymbolsCommand();
    [CompilerGeneratedAttribute]
public IList`1<IntermediateSection> get_Sections();
    [CompilerGeneratedAttribute]
public FindEntrySectionAndLoadSymbolsCommand get_Find();
    public void Execute();
    private void AddDefaultMajorUpgrade(WixPackageSymbol packageSymbol);
    private void AddSymbolsToNewSection(string sectionId, IntermediateSymbol[] symbols);
    private void AddSymbols(IntermediateSection section, IntermediateSymbol[] symbols);
}
internal class WixToolset.Core.Link.CollateLocalizationsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Localization> <Localizations>k__BackingField;
    private IMessaging Messaging { get; }
    private IEnumerable`1<Localization> Localizations { get; }
    public CollateLocalizationsCommand(IMessaging messaging, IEnumerable`1<Localization> localizations);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IEnumerable`1<Localization> get_Localizations();
    public Dictionary`2<string, Localization> Execute();
    private Localization Merge(Localization existingLocalization, Localization localization);
}
internal class WixToolset.Core.Link.ConnectToFeature : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChildId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExplicitPrimaryFeature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimaryFeature>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ConnectFeatures>k__BackingField;
    public IntermediateSection Section { get; }
    public string ChildId { get; }
    public bool IsExplicitPrimaryFeature { get; public set; }
    public string PrimaryFeature { get; public set; }
    public List`1<string> ConnectFeatures { get; }
    public ConnectToFeature(IntermediateSection section, string childId, string primaryFeature, bool explicitPrimaryFeature);
    [CompilerGeneratedAttribute]
public IntermediateSection get_Section();
    [CompilerGeneratedAttribute]
public string get_ChildId();
    [CompilerGeneratedAttribute]
public bool get_IsExplicitPrimaryFeature();
    [CompilerGeneratedAttribute]
public void set_IsExplicitPrimaryFeature(bool value);
    [CompilerGeneratedAttribute]
public string get_PrimaryFeature();
    [CompilerGeneratedAttribute]
public void set_PrimaryFeature(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ConnectFeatures();
}
[DefaultMemberAttribute("Item")]
internal class WixToolset.Core.Link.ConnectToFeatureCollection : object {
    private Hashtable collection;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ConnectToFeature Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public ConnectToFeature get_Item(string childId);
    public void Add(ConnectToFeature connection);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class WixToolset.Core.Link.ConnectToModule : object {
    private string childId;
    private string module;
    private string moduleLanguage;
    public string ChildId { get; }
    public string Module { get; }
    public string ModuleLanguage { get; }
    public ConnectToModule(string childId, string module, string moduleLanguage);
    public string get_ChildId();
    public string get_Module();
    public string get_ModuleLanguage();
}
[DefaultMemberAttribute("Item")]
internal class WixToolset.Core.Link.ConnectToModuleCollection : object {
    private Hashtable collection;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ConnectToModule Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public ConnectToModule get_Item(string childId);
    public void Add(ConnectToModule connection);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
internal class WixToolset.Core.Link.FindEntrySectionAndLoadSymbolsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IntermediateSection> <Sections>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputType <ExpectedOutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <EntrySection>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, SymbolWithSection> <SymbolsByName>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SymbolWithSection> <PossibleConflicts>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IntermediateSymbol> <IdenticalDirectorySymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SymbolWithSection> <OverrideSymbols>k__BackingField;
    private IMessaging Messaging { get; }
    private IEnumerable`1<IntermediateSection> Sections { get; }
    private OutputType ExpectedOutputType { get; }
    public IntermediateSection EntrySection { get; private set; }
    public IDictionary`2<string, SymbolWithSection> SymbolsByName { get; private set; }
    public IReadOnlyCollection`1<SymbolWithSection> PossibleConflicts { get; private set; }
    public ISet`1<IntermediateSymbol> IdenticalDirectorySymbols { get; private set; }
    public IReadOnlyCollection`1<SymbolWithSection> OverrideSymbols { get; private set; }
    public FindEntrySectionAndLoadSymbolsCommand(IMessaging messaging, IEnumerable`1<IntermediateSection> sections, OutputType expectedOutpuType);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IEnumerable`1<IntermediateSection> get_Sections();
    [CompilerGeneratedAttribute]
private OutputType get_ExpectedOutputType();
    [CompilerGeneratedAttribute]
public IntermediateSection get_EntrySection();
    [CompilerGeneratedAttribute]
private void set_EntrySection(IntermediateSection value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, SymbolWithSection> get_SymbolsByName();
    [CompilerGeneratedAttribute]
private void set_SymbolsByName(IDictionary`2<string, SymbolWithSection> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SymbolWithSection> get_PossibleConflicts();
    [CompilerGeneratedAttribute]
private void set_PossibleConflicts(IReadOnlyCollection`1<SymbolWithSection> value);
    [CompilerGeneratedAttribute]
public ISet`1<IntermediateSymbol> get_IdenticalDirectorySymbols();
    [CompilerGeneratedAttribute]
private void set_IdenticalDirectorySymbols(ISet`1<IntermediateSymbol> value);
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<SymbolWithSection> get_OverrideSymbols();
    [CompilerGeneratedAttribute]
private void set_OverrideSymbols(IReadOnlyCollection`1<SymbolWithSection> value);
    public void Execute();
}
internal class WixToolset.Core.Link.FlattenAndProcessBundleTablesCommand : object {
    [CompilerGeneratedAttribute]
private IntermediateSection <EntrySection>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    private IntermediateSection EntrySection { get; }
    private IMessaging Messaging { get; }
    public FlattenAndProcessBundleTablesCommand(IntermediateSection entrySection, IMessaging messaging);
    [CompilerGeneratedAttribute]
private IntermediateSection get_EntrySection();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    public void Execute();
    private void FlattenBundleTables();
    private void ProcessBundleComplexReferences();
}
[ExtensionAttribute]
internal static class WixToolset.Core.Link.IntermediateSymbolExtensions : object {
    [ExtensionAttribute]
public static bool IsIdentical(IntermediateSymbol first, IntermediateSymbol second);
}
internal class WixToolset.Core.Link.ProcessConflictingSymbolsCommand : object {
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SymbolWithSection> <PossibleConflicts>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IntermediateSection> <ResolvedSections>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SymbolWithSection> <OverrideSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<IntermediateSymbol> <OverriddenSymbols>k__BackingField;
    private IMessaging Messaging { get; }
    private IReadOnlyCollection`1<SymbolWithSection> PossibleConflicts { get; }
    private ISet`1<IntermediateSection> ResolvedSections { get; }
    private IReadOnlyCollection`1<SymbolWithSection> OverrideSymbols { get; }
    public ISet`1<IntermediateSymbol> OverriddenSymbols { get; private set; }
    public ProcessConflictingSymbolsCommand(IMessaging messaging, IReadOnlyCollection`1<SymbolWithSection> possibleConflicts, IReadOnlyCollection`1<SymbolWithSection> overrideSymbols, ISet`1<IntermediateSection> resolvedSections);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SymbolWithSection> get_PossibleConflicts();
    [CompilerGeneratedAttribute]
private ISet`1<IntermediateSection> get_ResolvedSections();
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<SymbolWithSection> get_OverrideSymbols();
    [CompilerGeneratedAttribute]
public ISet`1<IntermediateSymbol> get_OverriddenSymbols();
    [CompilerGeneratedAttribute]
private void set_OverriddenSymbols(ISet`1<IntermediateSymbol> value);
    public void Execute();
    [IteratorStateMachineAttribute("WixToolset.Core.Link.ProcessConflictingSymbolsCommand/<YieldReferencedConflicts>d__18")]
private static IEnumerable`1<SymbolWithSection> YieldReferencedConflicts(SymbolWithSection symbolWithConflicts, ISet`1<IntermediateSection> resolvedSections);
    [CompilerGeneratedAttribute]
private bool <Execute>b__17_3(SymbolWithSection s);
}
internal class WixToolset.Core.Link.ResolveReferencesCommand : object {
    private IntermediateSection entrySection;
    private IDictionary`2<string, SymbolWithSection> symbolsWithSections;
    private HashSet`1<SymbolWithSection> referencedSymbols;
    private HashSet`1<IntermediateSection> resolvedSections;
    [CompilerGeneratedAttribute]
private bool <BuildingMergeModule>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    public IReadOnlyCollection`1<SymbolWithSection> ReferencedSymbolWithSections { get; }
    public ISet`1<IntermediateSection> ResolvedSections { get; }
    private bool BuildingMergeModule { get; }
    private IMessaging Messaging { get; }
    public ResolveReferencesCommand(IMessaging messaging, IntermediateSection entrySection, IDictionary`2<string, SymbolWithSection> symbolsWithSections);
    public IReadOnlyCollection`1<SymbolWithSection> get_ReferencedSymbolWithSections();
    public ISet`1<IntermediateSection> get_ResolvedSections();
    [CompilerGeneratedAttribute]
private bool get_BuildingMergeModule();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    public void Execute();
    private void RecursivelyResolveReferences(IntermediateSection section);
    private List`1<SymbolWithSection> DetermineAccessibleSymbols(IntermediateSection referencingSection, SymbolWithSection symbolWithSection);
    private static void AddSymbolToCorrectCollection(SymbolWithSection symbolWithSection, List`1<SymbolWithSection> accessibleSymbols, List`1& virtualSymbols);
    private bool AccessibleSymbol(IntermediateSection referencingSection, SymbolWithSection symbolWithSection);
}
[DebuggerDisplayAttribute("{Symbol.DebuggerDisplay}")]
internal class WixToolset.Core.Link.SymbolWithSection : object {
    private List`1<WixSimpleReferenceSymbol> directReferences;
    private HashSet`1<SymbolWithSection> possibleConflicts;
    [CompilerGeneratedAttribute]
private IntermediateSymbol <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private IntermediateSection <Section>k__BackingField;
    [CompilerGeneratedAttribute]
private SymbolWithSection <Overrides>k__BackingField;
    public AccessModifier Access { get; }
    public IntermediateSymbol Symbol { get; }
    public IntermediateSection Section { get; }
    public IEnumerable`1<WixSimpleReferenceSymbol> DirectReferences { get; }
    public IEnumerable`1<SymbolWithSection> PossiblyConflicts { get; }
    public SymbolWithSection Overrides { get; private set; }
    public SymbolWithSection(IntermediateSection section, IntermediateSymbol symbol);
    public AccessModifier get_Access();
    [CompilerGeneratedAttribute]
public IntermediateSymbol get_Symbol();
    [CompilerGeneratedAttribute]
public IntermediateSection get_Section();
    public IEnumerable`1<WixSimpleReferenceSymbol> get_DirectReferences();
    public IEnumerable`1<SymbolWithSection> get_PossiblyConflicts();
    [CompilerGeneratedAttribute]
public SymbolWithSection get_Overrides();
    [CompilerGeneratedAttribute]
private void set_Overrides(SymbolWithSection value);
    public void AddPossibleConflict(SymbolWithSection symbolWithSection);
    public void AddDirectReference(WixSimpleReferenceSymbol reference);
    public void OverrideVirtualSymbol(SymbolWithSection virtualSymbolWithSection);
    public string GetFullName();
}
[ExtensionAttribute]
internal static class WixToolset.Core.Link.WixComplexReferenceSymbolExtensions : object {
    [ExtensionAttribute]
public static WixComplexReferenceSymbol Clone(WixComplexReferenceSymbol source);
    [ExtensionAttribute]
public static int CompareToWithoutConsideringPrimary(WixComplexReferenceSymbol symbol, WixComplexReferenceSymbol other);
    [ExtensionAttribute]
public static void Reparent(WixComplexReferenceSymbol symbol, WixComplexReferenceSymbol parent);
}
internal class WixToolset.Core.Link.WixGroupingOrdering : object {
    private IMessaging Messaging;
    private List`1<string> groupTypes;
    private List`1<string> itemTypes;
    private ItemCollection items;
    private List`1<IntermediateSymbol> symbolsUsed;
    private bool loaded;
    [CompilerGeneratedAttribute]
private IntermediateSection <EntrySection>k__BackingField;
    private IntermediateSection EntrySection { get; }
    public WixGroupingOrdering(IntermediateSection entrySections, IMessaging messageHandler);
    [CompilerGeneratedAttribute]
private IntermediateSection get_EntrySection();
    public void UseTypes(IEnumerable`1<ComplexReferenceParentType> groupTypes, IEnumerable`1<ComplexReferenceChildType> itemTypes);
    public void FlattenAndRewriteRows(ComplexReferenceParentType parentType, string parentId, bool removeUsedRows);
    public void FlattenAndRewriteGroups(ComplexReferenceParentType parentType, bool removeUsedRows);
    private void CreateOrderedList(string parentType, string parentId, List`1& orderedItems);
    public void RemoveUsedGroupRows();
    private void CreateNewGroupRows(string parentType, string parentId, List`1<Item> orderedItems);
    private void LoadFlattenOrderGroups();
    private void LoadGroups();
    private void FlattenGroups();
    private void FindCircularGroupReferences();
    private bool FindCircularGroupReference(Item checkItem, Item currentItem, ItemCollection itemsSeen, String& circularReference);
    private void LoadOrdering();
    private void FlattenOrdering();
}
internal class WixToolset.Core.LinkContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<ILinkerExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IExtensionData> <ExtensionData>k__BackingField;
    [CompilerGeneratedAttribute]
private OutputType <ExpectedOutputType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Intermediate> <Intermediates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipStdWixlib>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbolDefinitionCreator <SymbolDefinitionCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<ILinkerExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IExtensionData> ExtensionData { get; public set; }
    public OutputType ExpectedOutputType { get; public set; }
    public string IntermediateFolder { get; public set; }
    public IReadOnlyCollection`1<Intermediate> Intermediates { get; public set; }
    public string OutputPath { get; public set; }
    public Platform Platform { get; public set; }
    public bool SkipStdWixlib { get; public set; }
    public ISymbolDefinitionCreator SymbolDefinitionCreator { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal LinkContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<ILinkerExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<ILinkerExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IExtensionData> get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(IReadOnlyCollection`1<IExtensionData> value);
    [CompilerGeneratedAttribute]
public sealed virtual OutputType get_ExpectedOutputType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExpectedOutputType(OutputType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Intermediate> get_Intermediates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Intermediates(IReadOnlyCollection`1<Intermediate> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Platform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SkipStdWixlib();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SkipStdWixlib(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ISymbolDefinitionCreator get_SymbolDefinitionCreator();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SymbolDefinitionCreator(ISymbolDefinitionCreator value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.Linker : object {
    private static string EmptyGuid;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private ILinkContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UnreferencedSymbolsFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowPedanticMessages>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private ILinkContext Context { get; private set; }
    public string UnreferencedSymbolsFile { get; public set; }
    public bool ShowPedanticMessages { get; public set; }
    internal Linker(IServiceProvider serviceProvider);
    private static Linker();
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private ILinkContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(ILinkContext value);
    [CompilerGeneratedAttribute]
public string get_UnreferencedSymbolsFile();
    [CompilerGeneratedAttribute]
public void set_UnreferencedSymbolsFile(string value);
    [CompilerGeneratedAttribute]
public bool get_ShowPedanticMessages();
    [CompilerGeneratedAttribute]
public void set_ShowPedanticMessages(bool value);
    public sealed virtual Intermediate Link(ILinkContext context);
    private void AddWixVariable(Dictionary`2<string, WixVariableSymbol> wixVariables, WixVariableSymbol symbol);
    private void ProcessComplexReferences(IntermediateSection resolvedSection, IEnumerable`1<IntermediateSection> sections, ISet`1<string> referencedComponents, ConnectToFeatureCollection componentsToFeatures, ConnectToFeatureCollection featuresToFeatures, ConnectToFeatureCollection modulesToFeatures);
    private void FlattenSectionsComplexReferences(IEnumerable`1<IntermediateSection> sections);
    private string CombineTypeAndId(ComplexReferenceParentType type, string id);
    private string CombineTypeAndId(ComplexReferenceChildType type, string id);
    private void FlattenGroup(string parentTypeAndId, Stack`1<string> loopDetector, Dictionary`2<string, List`1<WixComplexReferenceSymbol>> parentGroups, Dictionary`2<string, IntermediateSection> parentGroupsNeedingProcessing);
    private void ResolveFeatureToFeatureConnects(ConnectToFeatureCollection featuresToFeatures, IDictionary`2<string, SymbolWithSection> allSymbols);
    private void ResolveFeatures(IntermediateSymbol symbol, int connectionColumn, int featureColumn, ConnectToFeatureCollection connectToFeatures, Hashtable multipleFeatureComponents);
    [CompilerGeneratedAttribute]
internal static int <FlattenGroup>g__ComplexReferenceComparision|26_0(WixComplexReferenceSymbol x, WixComplexReferenceSymbol y);
}
internal static class WixToolset.Core.LinkerErrors : object {
    public static Message DuplicateBindPathVariableOnCommandLine(string argument, string bindName, string bindValue, string collisionValue);
    public static Message DuplicateSymbol(IntermediateSymbol symbol);
    public static Message DuplicateSymbol(IntermediateSymbol symbol, SourceLineNumber referencingSourceLineNumber);
    public static Message DuplicateVirtualSymbol(IntermediateSymbol symbol);
    public static Message DuplicateVirtualSymbol(IntermediateSymbol symbol, SourceLineNumber referencingSourceLineNumber);
    public static Message DuplicateSymbol2(IntermediateSymbol symbol);
    public static Message OrphanedPayload(SourceLineNumber sourceLineNumbers, string payloadId);
    public static Message PackageInMultipleContainers(SourceLineNumber sourceLineNumbers, string packageId, string containerId1, string containerId2);
    public static Message PayloadSharedWithBA(SourceLineNumber sourceLineNumbers, string payloadId);
    public static Message UnscheduledChainPackage(SourceLineNumber sourceLineNumbers, string packageId);
    public static Message UnscheduledRollbackBoundary(SourceLineNumber sourceLineNumbers, string rollbackBoundaryId);
    public static Message BAContainerCannotContainRemotePayload(SourceLineNumber sourceLineNumbers, string payloadName);
    public static Message UncompressedPayloadInContainer(SourceLineNumber sourceLineNumbers, string payloadId, string containerId);
    public static Message VirtualSymbolNotFoundForOverride(IntermediateSymbol symbol);
    public static Message VirtualSymbolNotFoundForOverride(IntermediateSymbol symbol, SourceLineNumber referencingSourceLineNumber);
    public static Message VirtualSymbolMustBeOverridden(IntermediateSymbol symbol);
    public static Message VirtualSymbolMustBeOverridden(WixActionSymbol actionSymbol);
    public static Message VirtualSymbolMustBeOverridden(IntermediateSymbol symbol, SourceLineNumber referencingSourceLineNumber);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal static class WixToolset.Core.LinkerWarnings : object {
    public static Message LayoutPayloadInContainer(SourceLineNumber sourceLineNumbers, string payloadId, string containerId);
    public static Message PayloadInMultipleContainers(SourceLineNumber sourceLineNumbers, string payloadId, string containerId1, string containerId2);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal class WixToolset.Core.LocalizationParser : object {
    public static XNamespace WxlNamespace;
    private static string XmlElementName;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    private IMessaging Messaging { get; }
    internal LocalizationParser(IServiceProvider serviceProvider);
    private static LocalizationParser();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    public sealed virtual Localization ParseLocalization(string path);
    public sealed virtual Localization ParseLocalization(XDocument document);
    private static void AddWixVariable(IMessaging messaging, IDictionary`2<string, BindVariable> variables, BindVariable wixVariableRow);
    private static Localization ParseWixLocalizationElement(IMessaging messaging, XElement node);
    private static void ParseString(IMessaging messaging, XElement node, IDictionary`2<string, BindVariable> variables);
    private static void ParseUI(IMessaging messaging, XElement node, IDictionary`2<string, LocalizedControl> localizedControls);
}
internal class WixToolset.Core.OptimizeContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IOptimizerExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBindPath> <BindPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <BindVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Intermediate> <Intermediates>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Localization> <Localizations>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IOptimizerExtension> Extensions { get; public set; }
    public string IntermediateFolder { get; public set; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public IDictionary`2<string, string> BindVariables { get; public set; }
    public Platform Platform { get; public set; }
    public bool IsCurrentPlatform64Bit { get; }
    public IReadOnlyCollection`1<Intermediate> Intermediates { get; public set; }
    public IReadOnlyCollection`1<Localization> Localizations { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal OptimizeContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IOptimizerExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<IOptimizerExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_BindVariables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual Platform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Platform(Platform value);
    public bool get_IsCurrentPlatform64Bit();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Intermediate> get_Intermediates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Intermediates(IReadOnlyCollection`1<Intermediate> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Localization> get_Localizations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Localizations(IReadOnlyCollection`1<Localization> value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.Optimizer : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    internal Optimizer(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    public sealed virtual void Optimize(IOptimizeContext context);
}
internal static class WixToolset.Core.OptimizerWarnings : object {
    public static Message ZeroFilesHarvested(SourceLineNumber sourceLineNumbers);
    public static Message ExpectedDirectory(SourceLineNumber sourceLineNumbers, string harvestDirectory);
    public static Message SkippingDuplicateFile(SourceLineNumber sourceLineNumbers, string duplicateFile);
    private static Message Message(SourceLineNumber sourceLineNumber, Ids id, string format, Object[] args);
}
internal class WixToolset.Core.ParsedWixVariable : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultValue>k__BackingField;
    public int Index { get; public set; }
    public int Length { get; public set; }
    public string Namespace { get; public set; }
    public string Name { get; public set; }
    public string Scope { get; public set; }
    public string DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public void set_Length(int value);
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(string value);
}
internal class WixToolset.Core.Preprocess.IfContext : object {
    private bool keep;
    [CompilerGeneratedAttribute]
private bool <Active>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WasEverTrue>k__BackingField;
    [CompilerGeneratedAttribute]
private IfState <IfState>k__BackingField;
    public bool Active { get; public set; }
    public bool IsTrue { get; public set; }
    public bool WasEverTrue { get; private set; }
    public IfState IfState { get; public set; }
    public IfContext(bool active, bool keep, IfState state);
    [CompilerGeneratedAttribute]
public bool get_Active();
    [CompilerGeneratedAttribute]
public void set_Active(bool value);
    public bool get_IsTrue();
    public void set_IsTrue(bool value);
    [CompilerGeneratedAttribute]
public bool get_WasEverTrue();
    [CompilerGeneratedAttribute]
private void set_WasEverTrue(bool value);
    [CompilerGeneratedAttribute]
public IfState get_IfState();
    [CompilerGeneratedAttribute]
public void set_IfState(IfState value);
}
internal class WixToolset.Core.Preprocess.IfDefEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsIfDef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    public SourceLineNumber SourceLineNumbers { get; }
    public bool IsDefined { get; }
    public bool IsIfDef { get; }
    public string VariableName { get; }
    public IfDefEventArgs(SourceLineNumber sourceLineNumbers, bool isIfDef, bool isDefined, string variableName);
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public bool get_IsDefined();
    [CompilerGeneratedAttribute]
public bool get_IsIfDef();
    [CompilerGeneratedAttribute]
public string get_VariableName();
}
internal class WixToolset.Core.Preprocess.IfDefEventHandler : MulticastDelegate {
    public IfDefEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, IfDefEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, IfDefEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum WixToolset.Core.Preprocess.IfState : Enum {
    public int value__;
    public static IfState Unknown;
    public static IfState If;
    public static IfState ElseIf;
    public static IfState Else;
}
internal class WixToolset.Core.Preprocess.IncludedFileEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    public string FullName { get; }
    public SourceLineNumber SourceLineNumbers { get; }
    public IncludedFileEventArgs(SourceLineNumber sourceLineNumbers, string fullName);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
}
internal class WixToolset.Core.Preprocess.IncludedFileEventHandler : MulticastDelegate {
    public IncludedFileEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, IncludedFileEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, IncludedFileEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum WixToolset.Core.Preprocess.PreprocessorOperation : Enum {
    public int value__;
    public static PreprocessorOperation And;
    public static PreprocessorOperation Or;
    public static PreprocessorOperation Not;
}
internal class WixToolset.Core.Preprocess.ProcessedStreamEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <SourceFile>k__BackingField;
    [CompilerGeneratedAttribute]
private XDocument <Document>k__BackingField;
    public string SourceFile { get; }
    public XDocument Document { get; }
    public ProcessedStreamEventArgs(string sourceFile, XDocument document);
    [CompilerGeneratedAttribute]
public string get_SourceFile();
    [CompilerGeneratedAttribute]
public XDocument get_Document();
}
internal class WixToolset.Core.Preprocess.ProcessedStreamEventHandler : MulticastDelegate {
    public ProcessedStreamEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProcessedStreamEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProcessedStreamEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class WixToolset.Core.Preprocess.ResolvedVariableEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private SourceLineNumber <SourceLineNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VariableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VariableValue>k__BackingField;
    public SourceLineNumber SourceLineNumbers { get; }
    public string VariableName { get; }
    public string VariableValue { get; }
    public ResolvedVariableEventArgs(SourceLineNumber sourceLineNumbers, string variableName, string variableValue);
    [CompilerGeneratedAttribute]
public SourceLineNumber get_SourceLineNumbers();
    [CompilerGeneratedAttribute]
public string get_VariableName();
    [CompilerGeneratedAttribute]
public string get_VariableValue();
}
internal class WixToolset.Core.Preprocess.ResolvedVariableEventHandler : MulticastDelegate {
    public ResolvedVariableEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResolvedVariableEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResolvedVariableEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class WixToolset.Core.PreprocessContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IPreprocessorExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private Platform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <IncludeSearchPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourcePath>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Variables>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLineNumber <CurrentSourceLineNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IPreprocessorExtension> Extensions { get; public set; }
    public Platform Platform { get; public set; }
    public IReadOnlyCollection`1<string> IncludeSearchPaths { get; public set; }
    public string IntermediateFolder { get; public set; }
    public string OutputPath { get; public set; }
    public string SourcePath { get; public set; }
    public IDictionary`2<string, string> Variables { get; public set; }
    public SourceLineNumber CurrentSourceLineNumber { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal PreprocessContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IPreprocessorExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<IPreprocessorExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual Platform get_Platform();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Platform(Platform value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_IncludeSearchPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludeSearchPaths(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SourcePath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SourcePath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_Variables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Variables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual SourceLineNumber get_CurrentSourceLineNumber();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CurrentSourceLineNumber(SourceLineNumber value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.Preprocessor : object {
    private static Regex DefineRegex;
    private static Regex PragmaRegex;
    private static XmlReaderSettings DocumentXmlReaderSettings;
    private static XmlReaderSettings FragmentXmlReaderSettings;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IfDefEventHandler IfDef;
    [CompilerGeneratedAttribute]
private IncludedFileEventHandler IncludedFile;
    [CompilerGeneratedAttribute]
private ProcessedStreamEventHandler ProcessedStream;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    internal Preprocessor(IServiceProvider serviceProvider);
    private static Preprocessor();
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
public void add_IfDef(IfDefEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IfDef(IfDefEventHandler value);
    [CompilerGeneratedAttribute]
public void add_IncludedFile(IncludedFileEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_IncludedFile(IncludedFileEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ProcessedStream(ProcessedStreamEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ProcessedStream(ProcessedStreamEventHandler value);
    public static SourceLineNumber GetSourceLineNumbers(XObject node);
    public sealed virtual IPreprocessResult Preprocess(IPreprocessContext context);
    public sealed virtual IPreprocessResult Preprocess(IPreprocessContext context, XmlReader reader);
    private IPreprocessResult Process(ProcessingState state, XmlReader reader);
    private static bool IsOperator(string operation);
    private static bool InsideQuotes(string expression, int index);
    private static bool StartsWithKeyword(string expression, PreprocessorOperation operation);
    private void PreprocessReader(ProcessingState state, bool include, XmlReader reader, XContainer container, int offset);
    private void PreprocessError(ProcessingState state, string errorMessage);
    private void PreprocessWarning(ProcessingState state, string warningMessage);
    private void PreprocessDefine(ProcessingState state, string originalDefine);
    private void PreprocessUndef(ProcessingState state, string originalDefine);
    private void PreprocessInclude(ProcessingState state, string includePath, XContainer parent);
    private void PreprocessForeach(ProcessingState state, XmlReader reader, XContainer container, int offset);
    private void PreprocessPragma(ProcessingState state, string pragmaText, XContainer parent);
    private string GetNextToken(ProcessingState state, string originalExpression, String& expression, Boolean& stringLiteral);
    private string EvaluateVariable(ProcessingState state, string originalExpression, string variable);
    private void GetNameValuePair(ProcessingState state, string originalExpression, String& expression, String& leftValue, String& operation, String& rightValue);
    private bool EvaluateAtomicExpression(ProcessingState state, string originalExpression, String& expression);
    private string GetParenthesisExpression(ProcessingState state, string originalExpression, string expression, Int32& endSubExpression);
    private void UpdateExpressionValue(ProcessingState state, Boolean& currentValue, PreprocessorOperation operation, bool prevResult);
    private bool EvaluateExpression(ProcessingState state, string expression);
    private bool EvaluateExpressionRecurse(ProcessingState state, string originalExpression, String& expression, PreprocessorOperation prevResultOperation, bool prevResult);
    private void UpdateCurrentLineNumber(ProcessingState state, XmlReader reader, int offset);
    private void PushInclude(ProcessingState state, string fileName);
    private void PopInclude(ProcessingState state);
    private string GetIncludeFile(ProcessingState state, string includePath);
    private void PreProcess(ProcessingState state);
    private void PostProcess(ProcessingState state, IPreprocessResult result);
}
internal class WixToolset.Core.PreprocessResult : object {
    [CompilerGeneratedAttribute]
private XDocument <Document>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IIncludedFile> <IncludedFiles>k__BackingField;
    public XDocument Document { get; public set; }
    public IReadOnlyCollection`1<IIncludedFile> IncludedFiles { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual XDocument get_Document();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Document(XDocument value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IIncludedFile> get_IncludedFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IncludedFiles(IReadOnlyCollection`1<IIncludedFile> value);
}
internal class WixToolset.Core.ResolveContext : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IBindPath> <BindPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <BindVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IResolverExtension> <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IExtensionData> <ExtensionData>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <FilterCultures>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <IntermediateRepresentation>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<Localization> <Localizations>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowUnresolvedVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public IReadOnlyCollection`1<IBindPath> BindPaths { get; public set; }
    public IDictionary`2<string, string> BindVariables { get; public set; }
    public IReadOnlyCollection`1<IResolverExtension> Extensions { get; public set; }
    public IReadOnlyCollection`1<IExtensionData> ExtensionData { get; public set; }
    public IReadOnlyCollection`1<string> FilterCultures { get; public set; }
    public string IntermediateFolder { get; public set; }
    public Intermediate IntermediateRepresentation { get; public set; }
    public IReadOnlyCollection`1<Localization> Localizations { get; public set; }
    public bool AllowUnresolvedVariables { get; public set; }
    public string OutputPath { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal ResolveContext(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IBindPath> get_BindPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindPaths(IReadOnlyCollection`1<IBindPath> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_BindVariables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BindVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IResolverExtension> get_Extensions();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Extensions(IReadOnlyCollection`1<IResolverExtension> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IExtensionData> get_ExtensionData();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExtensionData(IReadOnlyCollection`1<IExtensionData> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_FilterCultures();
    [CompilerGeneratedAttribute]
public sealed virtual void set_FilterCultures(IReadOnlyCollection`1<string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_IntermediateFolder();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateFolder(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Intermediate get_IntermediateRepresentation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateRepresentation(Intermediate value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<Localization> get_Localizations();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Localizations(IReadOnlyCollection`1<Localization> value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_AllowUnresolvedVariables();
    [CompilerGeneratedAttribute]
public sealed virtual void set_AllowUnresolvedVariables(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_OutputPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CancellationToken(CancellationToken value);
}
internal class WixToolset.Core.ResolvedCabinet : object {
    [CompilerGeneratedAttribute]
private CabinetBuildOption <BuildOption>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    public CabinetBuildOption BuildOption { get; public set; }
    public string Path { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual CabinetBuildOption get_BuildOption();
    [CompilerGeneratedAttribute]
public sealed virtual void set_BuildOption(CabinetBuildOption value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
}
internal class WixToolset.Core.ResolveFileResult : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<string> <CheckedPaths>k__BackingField;
    public string Path { get; public set; }
    public IReadOnlyCollection`1<string> CheckedPaths { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_Path();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Path(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<string> get_CheckedPaths();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CheckedPaths(IReadOnlyCollection`1<string> value);
}
internal class WixToolset.Core.Resolver : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileResolver <FileResolver>k__BackingField;
    private IServiceProvider ServiceProvider { get; }
    private IMessaging Messaging { get; }
    private IFileResolver FileResolver { get; }
    internal Resolver(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IServiceProvider get_ServiceProvider();
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    [CompilerGeneratedAttribute]
private IFileResolver get_FileResolver();
    public sealed virtual IResolveResult Resolve(IResolveContext context);
    private ResolveResult ResolveFields(IResolveContext context, IVariableResolver variableResolver);
    private void LocalizeUI(IVariableResolver variableResolver, Intermediate intermediate);
    private IVariableResolver CreateVariableResolver(IResolveContext context, IEnumerable`1<Localization> filteredLocalizations);
    private bool TryGetCultureInfo(string culture, CultureInfo& cultureInfo);
    private static IEnumerable`1<Localization> FilterLocalizations(IResolveContext context);
    private static IEnumerable`1<string> CalculateCultureFilter(IResolveContext context);
    private static void AddFilteredLocalizations(List`1<Localization> result, IEnumerable`1<string> filter, IEnumerable`1<Localization> localizations);
}
internal class WixToolset.Core.ResolveResult : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Codepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <SummaryInformationCodepage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PackageLcid>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IDelayedField> <DelayedFields>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyCollection`1<IExpectedExtractFile> <ExpectedEmbeddedFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private Intermediate <IntermediateRepresentation>k__BackingField;
    public Nullable`1<int> Codepage { get; public set; }
    public Nullable`1<int> SummaryInformationCodepage { get; public set; }
    public Nullable`1<int> PackageLcid { get; public set; }
    public IReadOnlyCollection`1<IDelayedField> DelayedFields { get; public set; }
    public IReadOnlyCollection`1<IExpectedExtractFile> ExpectedEmbeddedFiles { get; public set; }
    public Intermediate IntermediateRepresentation { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_Codepage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Codepage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_SummaryInformationCodepage();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SummaryInformationCodepage(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_PackageLcid();
    [CompilerGeneratedAttribute]
public sealed virtual void set_PackageLcid(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IDelayedField> get_DelayedFields();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DelayedFields(IReadOnlyCollection`1<IDelayedField> value);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlyCollection`1<IExpectedExtractFile> get_ExpectedEmbeddedFiles();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ExpectedEmbeddedFiles(IReadOnlyCollection`1<IExpectedExtractFile> value);
    [CompilerGeneratedAttribute]
public sealed virtual Intermediate get_IntermediateRepresentation();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IntermediateRepresentation(Intermediate value);
}
internal class WixToolset.Core.VariableResolution : object {
    [CompilerGeneratedAttribute]
private bool <DelayedResolve>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UpdatedValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public bool DelayedResolve { get; public set; }
    public bool IsDefault { get; public set; }
    public bool UpdatedValue { get; public set; }
    public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual bool get_DelayedResolve();
    [CompilerGeneratedAttribute]
public sealed virtual void set_DelayedResolve(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDefault();
    [CompilerGeneratedAttribute]
public sealed virtual void set_IsDefault(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_UpdatedValue();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UpdatedValue(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Value();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Value(string value);
}
internal class WixToolset.Core.VariableResolver : object {
    private Dictionary`2<string, BindVariable> locVariables;
    private Dictionary`2<string, BindVariable> wixVariables;
    private Dictionary`2<string, LocalizedControl> localizedControls;
    [CompilerGeneratedAttribute]
private IMessaging <Messaging>k__BackingField;
    private IMessaging Messaging { get; }
    public int VariableCount { get; }
    internal VariableResolver(IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
private IMessaging get_Messaging();
    public int get_VariableCount();
    public sealed virtual void AddLocalization(Localization localization);
    public sealed virtual void AddVariable(SourceLineNumber sourceLineNumber, string name, string value, bool overridable);
    public sealed virtual IVariableResolution ResolveVariables(SourceLineNumber sourceLineNumbers, string value);
    public sealed virtual bool TryGetLocalizedControl(string dialog, string control, LocalizedControl& localizedControl);
    public sealed virtual IVariableResolution ResolveVariables(SourceLineNumber sourceLineNumbers, string value, bool errorOnUnknown);
    private static bool TryAddWixVariable(IDictionary`2<string, BindVariable> variables, BindVariable variable);
}
internal class WixToolset.Core.WixToolsetServiceProvider : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Func`3<IWixToolsetCoreServiceProvider, Dictionary`2<Type, object>, object>> <CreationFunctions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> <Singletons>k__BackingField;
    private Dictionary`2<Type, Func`3<IWixToolsetCoreServiceProvider, Dictionary`2<Type, object>, object>> CreationFunctions { get; }
    private Dictionary`2<Type, object> Singletons { get; }
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, Func`3<IWixToolsetCoreServiceProvider, Dictionary`2<Type, object>, object>> get_CreationFunctions();
    [CompilerGeneratedAttribute]
private Dictionary`2<Type, object> get_Singletons();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual void AddService(Type serviceType, Func`3<IWixToolsetCoreServiceProvider, Dictionary`2<Type, object>, object> creationFunction);
    public sealed virtual void AddService(Func`3<IWixToolsetCoreServiceProvider, Dictionary`2<Type, object>, T> creationFunction);
    private static T AddSingleton(Dictionary`2<Type, object> singletons, T service);
}
public static class WixToolset.Core.WixToolsetServiceProviderFactory : object {
    public static IWixToolsetCoreServiceProvider CreateServiceProvider();
}
